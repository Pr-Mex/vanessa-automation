// BSLLS:GetFormMethod-off

#Область ОписаниеПеременных

// Структура - хранилище кэша, см. КэшСервер
&НаСервере
Перем КэшСервер;

&НаКлиенте
Перем Ванесса;

#КонецОбласти

#Область ОбработчикиСобытийФормы
  
&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	СписокВыбораФильтра.ЗагрузитьЗначения(Элементы.СтрокаФильтра.СписокВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	Элементы.СтрокаФильтра.СписокВыбора.ЗагрузитьЗначения(СписокВыбораФильтра.ВыгрузитьЗначения());
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Ванесса = ВладелецФормы;
	
	СтрокаФильтра = "";
	ПостроитьДеревоМетаданныхНаКлиенте();
КонецПроцедуры
 
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаФильтраПриИзменении(Элемент)
	
	Элем = Элементы.СтрокаФильтра.СписокВыбора.НайтиПоЗначению(СтрокаФильтра);
	Если Элем <> Неопределено Тогда
		Элементы.СтрокаФильтра.СписокВыбора.Удалить(Элем);			
	КонецЕсли; 
	Элементы.СтрокаФильтра.СписокВыбора.Вставить(0, СтрокаФильтра);
		
	КолЭлементовВСпискеВыбора = 11;
	Если Элементы.СтрокаФильтра.СписокВыбора.Количество() = КолЭлементовВСпискеВыбора Тогда
		Элементы.СтрокаФильтра.СписокВыбора.Удалить(10);			
	КонецЕсли; 
	
	ПостроитьДеревоМетаданныхНаКлиенте();		
	ЭлементыДерева_2 = ДеревоМетаданных.ПолучитьЭлементы();	
	Элементы.ДеревоМетаданных.Развернуть(ЭлементыДерева_2[0].ПолучитьИдентификатор(), Истина);
		
КонецПроцедуры
 
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоМетаданных

&НаКлиенте
Процедура ДеревоМетаданныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	стр_дз = ДеревоМетаданных.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
	ПозТочки = СтрНайти(стр_дз.ПолноеИмя, ".");
	
	Если ПозТочки = 0 Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли; 

	стр_дз.УИД = УИДМенеджера(стр_дз.ИмяМенеджера);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СвернутьВсе(Команда)
	СвернутьДеревоДо1Уровня();
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	РазвернутьДерево(ДеревоМетаданных, 2);
КонецПроцедуры
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Сервис

&НаСервере
Функция КэшСервер()
	Если КэшСервер = Неопределено Тогда
		КэшСервер = Новый Структура();
	КонецЕсли;
	
	Возврат КэшСервер;
КонецФункции

// Разбивает строку на несколько строк по указанному разделителю. Разделитель может иметь любую длину.
// В случаях, когда разделителем является строка из одного символа, и не используется параметр СокращатьНепечатаемыеСимволы,
// рекомендуется использовать функцию платформы СтрРазделить.
//
// Параметры:
//  Значение               - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Пример:
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",")
//  - возвратит массив из 5 элементов, три из которых  - пустые: "", "один", "", "два", "";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина)
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(" один   два  ", " ")
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("")
//  - возвратит пустой массив;
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("",,Ложь)
//  - возвратит массив с одним элементом: ""(пустая строка);
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("", " ")
//  - возвратит массив с одним элементом: "" (пустая строка).
//  
//  BSLLS:CognitiveComplexity-off
//  
&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = СтрНайти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаКлиенте
Функция ФормаПрограммногоИнтерфейса()
	Возврат Ванесса.ИнициаторДанных();
КонецФункции

&НаКлиенте
Процедура СвернутьДеревоДо1Уровня()
	СвернутьДерево(ДеревоМетаданных);
	РазвернутьДерево(ДеревоМетаданных, 1);	
КонецПроцедуры
 
&НаКлиенте
Процедура СвернутьДерево(УзелДерева)
	Для Каждого УзелПодчиненный Из УзелДерева.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = УзелПодчиненный.ПолучитьИдентификатор();
		СвернутьДерево(УзелПодчиненный); 
		Элементы.ДеревоМетаданных.Свернуть(ИдентификаторСтроки);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(УзелДерева, Знач Уровень = 1)
	Уровень = Уровень - 1;
	Для Каждого УзелПодчиненный Из УзелДерева.ПолучитьЭлементы() Цикл
		Если Уровень >= 0 Тогда
			ИдентификаторСтроки = УзелПодчиненный.ПолучитьИдентификатор();
			Элементы.ДеревоМетаданных.Развернуть(ИдентификаторСтроки);
			РазвернутьДерево(УзелПодчиненный, Уровень); 
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

#КонецОбласти 

#Область ЗаполнениеДерева

&НаСервере
Функция СписокМетаданных() Экспорт
	
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("ИмяТаблицыМнЧ");
	тз.Колонки.Добавить("ИмяТаблицыЕдЧ");
	тз.Колонки.Добавить("Представление");
	тз.Колонки.Добавить("Порядок");
	
	ДобавитьМетаКласс(тз, "Конфигурация"				, "Конфигурация");				// 0			
	ДобавитьМетаКласс(тз, "Подсистемы"					, "Подсистема");					// 1
	ДобавитьМетаКласс(тз, "ПараметрыСеанса"			, "ПараметрСеанса");				// 2
	ДобавитьМетаКласс(тз, "Роли"						, "Роль");							// 3
	ДобавитьМетаКласс(тз, "ПланыОбмена"				, "ПланОбмена");					// 4
	ДобавитьМетаКласс(тз, "Константы"					, "Константа");					// 5
	ДобавитьМетаКласс(тз, "Справочники"				, "Справочник");					// 6
	ДобавитьМетаКласс(тз, "Документы"					, "Документ");					// 7
	ДобавитьМетаКласс(тз, "ЖурналыДокументов"			, "ЖурналДокументов");			// 8
	ДобавитьМетаКласс(тз, "Отчеты"						, "Отчет");						// 9
	ДобавитьМетаКласс(тз, "Обработки"					, "Обработка");					// 10
	ДобавитьМетаКласс(тз, "ПланыВидовХарактеристик"	, "ПланВидовХарактеристик");	// 11
	ДобавитьМетаКласс(тз, "ПланыСчетов"				, "ПланСчетов");					// 12
	ДобавитьМетаКласс(тз, "ПланыВидовРасчета"			, "ПланВидовРасчета");			// 13
	ДобавитьМетаКласс(тз, "РегистрыСведений"			, "РегистрСведений");			// 14
	ДобавитьМетаКласс(тз, "РегистрыНакопления"		, "РегистрНакопления");			// 15
	ДобавитьМетаКласс(тз, "РегистрыБухгалтерии"		, "РегистрБухгалтерии");			// 16
	ДобавитьМетаКласс(тз, "РегистрыРасчета"			, "РегистрРасчета");				// 17
	ДобавитьМетаКласс(тз, "БизнесПроцессы"				, "БизнесПроцесс");				// 18
	ДобавитьМетаКласс(тз, "Задачи"						, "Задача");						// 19
	
	Возврат тз;
	
КонецФункции

&НаСервере
Процедура ДобавитьМетаКласс(тз, ИмяТаблицыМнЧ, ИмяТаблицыЕдЧ)	
	НовСтр = тз.Добавить(); 
	НовСтр.ИмяТаблицыМнЧ = ИмяТаблицыМнЧ;
	НовСтр.ИмяТаблицыЕдЧ = ИмяТаблицыЕдЧ;
	НовСтр.Порядок = тз.Количество() - 1;
	
	Синоним = "";
		
	Для сч = 1 По СтрДлина(ИмяТаблицыМнЧ) Цикл
		
		сим = Сред(ИмяТаблицыМнЧ, сч, 1);
		
		Если Врег(Сим) = Сим Тогда
			Если Синоним <> "" Тогда
				сим = " " + НРег(Сим);			
			КонецЕсли; 	
		КонецЕсли; 
		
		Синоним = Синоним + Сим;
	КонецЦикла; 
	
	НовСтр.Представление = Синоним;
	
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДеревоМетаданныхНаКлиенте()
	
	Классы = ФормаПрограммногоИнтерфейса().КлассыОбъектовКлиент();
	Классы.Удалить("РегистрыСведений");
	ПостроитьДеревоМетаданныхНаСервере(Классы);	
	СвернутьДеревоДо1Уровня();
	
КонецПроцедуры 

&НаСервере
Функция ФильтрМетаданных()
	Кэш = КэшСервер();
	Если НЕ Кэш.Свойство("ФильтрМетаданных") Тогда
		тз = Новый ТаблицаЗначений;
		тз.Колонки.Добавить("стр", Новый ОписаниеТипов("Строка"));
		тз.Колонки.Добавить("Найдено", Новый ОписаниеТипов("Число"));
		
		ОтборПоФильтруВключен = ЗначениеЗаполнено(СтрокаФильтра);
		Если ОтборПоФильтруВключен Тогда
			МассивПодстрок = РазложитьСтрокуВМассивПодстрок(СтрокаФильтра, " ");		
			Для каждого Элем Из МассивПодстрок Цикл
				СтрокаТаблицы = тз.Добавить();
				СтрокаТаблицы.стр = НРег(Элем);
				СтрокаТаблицы.Найдено = 0;
			КонецЦикла; 
		КонецЕсли; 
				
		Результат = Новый Структура();
		Результат.Вставить("Включен", ОтборПоФильтруВключен);
		Результат.Вставить("Таблица", тз);				
				
		Кэш.Вставить("ФильтрМетаданных", Результат);		
	КонецЕсли;
	
	Возврат Кэш.ФильтрМетаданных;	
КонецФункции

&НаСервере
Процедура ПостроитьДеревоМетаданныхНаСервере(Классы)
	
	СписокМетаданных = СписокМетаданных();
	
	дз = РеквизитФормыВЗначение("ДеревоМетаданных");
	дз.Строки.Очистить();
	
	Узел_0 = дз.Строки.Добавить();
	Узел_0.Класс = "Конфигурация";
	Узел_0.ПолноеИмя = "Конфигурация";
	Узел_0.Синоним = Метаданные.Синоним;
	Узел_0.Картинка = 0;
	Узел_0.ПолноеИмяДляВыбора = "Конфигурация";
	
	Для каждого стр_тз Из СписокМетаданных Цикл
		
		Класс = стр_тз.ИмяТаблицыМнЧ; 		
		Если НЕ Классы.Свойство(Класс) Тогда
			Продолжить;			
		КонецЕсли; 
				
		Узел_1 = Узел_0.Строки.Добавить();	
		Узел_1.Класс = Класс;
		Узел_1.ПолноеИмя = Класс;
		Узел_1.Картинка = стр_тз.Порядок;
		Узел_1.Синоним = стр_тз.Представление;

		МетаКоллекция = Метаданные[Класс];
	
		КоличествоВКоллекции = МетаКоллекция.Количество();
		Для каждого МетаТаблица Из МетаКоллекция Цикл	
			
			ИмяТаблЕдЧ =  стр_тз.ИмяТаблицыЕДЧ;
			ПолноеИмя = стр_тз.ИмяТаблицыЕДЧ + "." + МетаТаблица.Имя;
			Синоним = МетаТаблица.Синоним;
			
			ДобавитьМетаОбъектВДерево = ДобавитьМетаОбъектВДерево(ИмяТаблЕдЧ, ПолноеИмя, Синоним);
			Если НЕ ДобавитьМетаОбъектВДерево Тогда
				КоличествоВКоллекции = КоличествоВКоллекции - 1;
				Продолжить;			
			КонецЕсли;

			ИмяМенеджера = стр_тз.ИмяТаблицыМнЧ + "." + МетаТаблица.Имя;
						
			Узел_2 = Узел_1.Строки.Добавить();
			Узел_2.Класс = ИмяТаблЕдЧ;
			Узел_2.ПолноеИмя = ПолноеИмя;
			Узел_2.Синоним = Синоним;
			Узел_2.Картинка = стр_тз.Порядок;
			Узел_2.ПолноеИмяДляВыбора = МетаТаблица.ПолноеИмя();
			Узел_2.ИмяМенеджера = ИмяМенеджера;
			Узел_2.УИД = УИДМенеджера(ИмяМенеджера);
		КонецЦикла; 
		
		Узел_1.Класс = Узел_1.Класс + " (" + КоличествоВКоллекции + ")";
		
		Если КоличествоВКоллекции = 0 Тогда
			Узел_0.Строки.Удалить(Узел_1);					
		КонецЕсли; 
	КонецЦикла; 
	
	ЗначениеВРеквизитФормы(дз, "ДеревоМетаданных");
		
КонецПроцедуры

&НаСервере
Функция ДобавитьМетаОбъектВДерево(ИмяТаблЕдЧ, ПолноеИмя, Синоним)
	
	Фильтр = ФильтрМетаданных();
	Если НЕ Фильтр.Включен Тогда
		Возврат Истина;		
	КонецЕсли; 
	
	нрИмяТаблЕдЧ =  НРег(ИмяТаблЕдЧ);
	нрПолноеИмя = НРег(ПолноеИмя);
	нрСиноним = НРег(Синоним);
	
	Для каждого СтрокаТаблицы Из Фильтр.Таблица Цикл
		ДобавлятьСтроку = Ложь;
		
		стр_Фильтр = СтрокаТаблицы.стр;
		Если НЕ ДобавлятьСтроку Тогда
			стр = нрПолноеИмя + " " + нрСиноним;
			ДобавлятьСтроку = СтрНайти(стр, стр_Фильтр) > 0;						
		КонецЕсли; 	
		Если НЕ ДобавлятьСтроку Тогда
			ДобавлятьСтроку = СтрНайти(нрСиноним, стр_Фильтр) > 0;
		КонецЕсли;
		Если НЕ ДобавлятьСтроку Тогда
			ДобавлятьСтроку = СтрНайти(нрИмяТаблЕдЧ, стр_Фильтр) > 0;						
		КонецЕсли; 

		СтрокаТаблицы.Найдено = 0 + ДобавлятьСтроку;
	КонецЦикла; 
	
	Результат = Фильтр.Таблица.Количество() = Фильтр.Таблица.Итог("Найдено");
	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция УИДМенеджера(Знач ИмяМенеджера)
	Менеджер = Вычислить(ИмяМенеджера);
	Возврат "" + Менеджер.ПолучитьСсылку().УникальныйИдентификатор();
КонецФункции

#КонецОбласти 

#КонецОбласти
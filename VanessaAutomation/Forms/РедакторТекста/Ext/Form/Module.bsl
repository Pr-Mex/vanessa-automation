#Область ОписаниеПеременных

&НаКлиенте
Перем Ванесса;

&НаКлиенте
Перем КешОтступов;

#КонецОбласти

#Область ЭкспортныеПроцедурыИФункции

// Делает вставки виджетов
&НаКлиенте
Процедура ОтобразитьДанныеВиджетов() Экспорт
	ДопПараметры = Новый Структура("СтрокиПодсценариевВиджетов", Новый Массив);
	ОбновитьВставкиКодаVanessaEditor(ДопПараметры);
КонецПроцедуры 

// Возвращает ид стрки дерева по данным виджета
&НаКлиенте
Функция ИдСтрокиДереваПоНомеруСтрокиВВиджете(ИдВиджета, НомерСтроки) Экспорт
	ДанныеВиджета = Ванесса.ДанныеВиджетаПоИд(ИдВиджета);
	Для Каждого Элем Из ДанныеВиджета Цикл
		Если Элем.Значение = НомерСтроки Тогда
			Возврат Элем.Ключ;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Возврат Неопределено;
КонецФункции	 

// Выполняет шаги, которые выделены в редакторе
&НаКлиенте
Процедура ВыполнитьВыделенныйТекстVanessaEditor() Экспорт
	ВыделеннаяОбласть = Ванесса.ПолучитьVanessaEditor().getSelection();
	ДанныеДиапазонаСтрокДляВыполненияСценария = Новый Структура;
	ДанныеДиапазонаСтрокДляВыполненияСценария.Вставить("ВыполнениеДиапазонаШаговVanessaEditor", Истина);
	ДанныеДиапазонаСтрокДляВыполненияСценария.Вставить("НачалоДиапазона", ВыделеннаяОбласть.startLineNumber);
	ДанныеДиапазонаСтрокДляВыполненияСценария.Вставить("ОкончаниеДиапазона", ВыделеннаяОбласть.endLineNumber);
	Ванесса.ВыполнитьСценарии(, ДанныеДиапазонаСтрокДляВыполненияСценария);
КонецПроцедуры 

// Выполняет отрисовку точек останова в редакторе
&НаКлиенте
Процедура ОтрисоватьБрейкпоинтыVanessaEditor() Экспорт
	Данные = Новый Массив;

	БрейкпоинтыVanessaEditor = Ванесса.БрейкпоинтыVanessaEditor();
	Если БрейкпоинтыVanessaEditor = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Для Каждого Элем Из БрейкпоинтыVanessaEditor Цикл
		БрейкПоинт = Новый Структура;
		БрейкПоинт.Вставить("lineNumber", Элем.НомерСтроки);
		БрейкПоинт.Вставить("enable", Элем.Включен);
		БрейкПоинт.Вставить("codeWidget", Элем.ИдВиджета);
		Данные.Добавить(БрейкПоинт);
	КонецЦикла;	 

	Если Ванесса.ЭтоВкладкаEdit(Ванесса.VanessaTabs.current) Тогда
		Ванесса.ПолучитьVanessaEditor().decorateBreakpoints(Ванесса.ЗаписатьОбъектJSON(Данные));
	КонецЕсли;	 
КонецПроцедуры 

// Загружает данные по точкам останова из редактора
&НаКлиенте
Процедура ЗагрузитьБрейкпоинтыИзVanessaEditor() Экспорт
	Если Ванесса.ОтсутствуетVanessaEditor() Тогда
		Возврат;
	КонецЕсли;	 
	
	БрейкпоинтыVanessaEditor = Ванесса.БрейкпоинтыVanessaEditor();
	БрейкпоинтыVanessaEditorВиджеты = Ванесса.БрейкпоинтыVanessaEditorВиджеты();
	Брейкпоинты = Ванесса.Брейкпоинты();
	
	Брейкпоинты.Очистить();
	Если БрейкпоинтыVanessaEditorВиджеты <> Неопределено Тогда
		БрейкпоинтыVanessaEditorВиджеты.Очистить();
	КонецЕсли;	 
	Если БрейкпоинтыVanessaEditor <> Неопределено Тогда
		Для Каждого Элем Из БрейкпоинтыVanessaEditor Цикл
			Если Элем.Включен Тогда
				Если Элем.ИдВиджета = 0 ИЛИ Элем.ИдВиджета = "" Тогда //основная фича
					Брейкпоинты.Добавить(Элем.НомерСтроки);
				Иначе
					ДанныеВиджета = Ванесса.ДанныеВиджетаПоИд(Элем.ИдВиджета);
					Если ДанныеВиджета <> Неопределено Тогда
						Для Каждого ТекДанныеВиджета Из ДанныеВиджета Цикл
							Если ТекДанныеВиджета.Значение = Элем.НомерСтроки Тогда
								ИдСтроки = ТекДанныеВиджета.Ключ;
								БрейкпоинтыVanessaEditorВиджеты.Добавить(ИдСтроки);
								Прервать;
							КонецЕсли;	 
						КонецЦикла;	 
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЦикла;	 
	КонецЕсли;	 
КонецПроцедуры 

// Возвращает структуру по переданныи данным точки останова
&НаКлиенте
Функция ДанныеБрейкПоинта(НомерСтроки, ИдВиджета, Включен) Экспорт
	Структура = Новый Структура;
	Структура.Вставить("НомерСтроки", НомерСтроки);
	Структура.Вставить("ИдВиджета", ИдВиджета);
	Структура.Вставить("Включен", Включен);
	Возврат Структура; 
КонецФункции	 

// Обновляет данные по точкам останова в редакторе
&НаКлиенте
Процедура ОбновитьДанныеПоБрейкпоинтамVanessaEditor(Данные) Экспорт
	ДанныеVanessaEditor = Ванесса.ПрочитатьОбъектJSON(Данные);

	БрейкпоинтыVanessaEditor = Ванесса.БрейкпоинтыVanessaEditor();
	Если БрейкпоинтыVanessaEditor = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	БрейкпоинтыVanessaEditor.Очистить();
	Для Каждого Элем Из ДанныеVanessaEditor Цикл
		ДанныеБрейкПоинта = ДанныеБрейкПоинта(Элем.lineNumber, Элем.codeWidget, Истина);
		БрейкпоинтыVanessaEditor.Добавить(ДанныеБрейкПоинта);
	КонецЦикла;	 

КонецПроцедуры 

// Копирует текст ошибки в буфер обмена
&НаКлиенте
Процедура СкопироватьТекстОшибкиВБуферОбменаVAVanessaEditor(ДанныеОшибки) Экспорт
	ТекстОшибки = ДанныеОшибки.ErrorText;
	ОписаниеОповещения = Новый ОписаниеОповещения("СкопироватьТекстОшибкиВБуферОбменаVAVanessaEditorПродолжение", ЭтаФорма);
	БуферОбменаVA = Ванесса.БуферОбменаVA();
	Если БуферОбменаVA = Неопределено ИЛИ НЕ Ванесса.Объект.ИспользоватьКомпонентуVanessaExt Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВключитьКомпонентуПродолжение", ЭтаФорма, ДанныеОшибки);
		ПоказатьВопрос(ОписаниеОповещения, Ванесса.ПодставитьПараметрыВСтроку(
			Ванесса.Локализовать("Для копирования информации в буфер обмена необходимо включить использование компоненты <VanessaExt>. Включить использование компоненты?")),
			РежимДиалогаВопрос.ОКОтмена);
		Возврат;	
	КонецЕсли;	 
	БуферОбменаVA.НачатьВызовЗаписатьТекст(ОписаниеОповещения, ТекстОшибки);
КонецПроцедуры 

// Загружает текст фича файла в редактор
&НаКлиенте
Процедура ЗагрузитьФичаФайлVanessaEditor(ДополнительныеПараметры) Экспорт
	Если НЕ Ванесса.Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Ванесса.ФайлСуществуетКомандаСистемы(Ванесса.Объект.КаталогФич) Тогда
		Если НЕ Ванесса.ЭтоКаталогКомандаСистемы(Ванесса.Объект.КаталогФич) Тогда
			Попытка
				Текст = Новый ЧтениеТекста;
				Текст.Открыть(Ванесса.Объект.КаталогФич, "UTF-8");
				ТекстФичи = Текст.Прочитать();
				Текст.Закрыть();
				
				Ванесса.ИгнорироватьИзмененияVanessaEditor = Истина;
				СброситьФлагМодифицированностиVanessaEditor();
				НадоУстановитьТекст = Истина;
				Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
					И ДополнительныеПараметры.Свойство("ЗагрузкаФичиИзVanessaEditor")
					И ДополнительныеПараметры.ЗагрузкаФичиИзVanessaEditor Тогда
					НадоУстановитьТекст = Ложь;
				КонецЕсли;	 
				
				Если НадоУстановитьТекст Тогда
					ФайлФичи = Новый Файл(Ванесса.Объект.КаталогФич);
					ЭкземплярVanessaEditor = Ванесса.VanessaTabs.edit(ТекстФичи, ФайлФичи.ПолноеИмя, ФайлФичи.ПолноеИмя, ФайлФичи.ИмяБезРасширения, 0, Ложь, Истина);
					Если ЭкземплярVanessaEditor = Неопределено Тогда
						ЭкземплярVanessaEditor = Ванесса.VanessaTabs.edit(ТекстФичи, ФайлФичи.ПолноеИмя, ФайлФичи.ПолноеИмя, ФайлФичи.ИмяБезРасширения, 0, Ложь, Истина);
					КонецЕсли;	 
					ЭкземплярVanessaEditor.setContent(ТекстФичи);
					Ванесса.VanessaTabs.current.resetModified();
					ДействияПриСозданииВкладки();
				КонецЕсли;
				
				НайденныеПроблемы = Ванесса.НайденныеПроблемы();
				НайденныеПроблемы.Очистить();
				Если Ванесса.VanessaTabs.current <> Неопределено И НадоУстановитьТекст
					ИЛИ (ДополнительныеПараметры.Свойство("ЗагрузкаФичиИзVanessaEditor") И ДополнительныеПараметры.ЗагрузкаФичиИзVanessaEditor) Тогда
					ЭкземплярVanessaEditor = Ванесса.ПолучитьVanessaEditor();
					ЭкземплярVanessaEditor.decorateProblems(Ванесса.ЗаписатьОбъектJSON(Новый Массив));
					ЭкземплярVanessaEditor.clearRuntimeProgress();// также сбрасывает виджеты
					ЭкземплярVanessaEditor.clearCodicons();
				КонецЕсли;	 
				
				Если ДополнительныеПараметры.НадоОбновитьВставкиVanessaEditor ИЛИ НадоУстановитьТекст ИЛИ Ванесса.Объект.ПоказыватьСтрокиПодсценариевVanessaEditor Тогда
					СтрокиПодсценариевВиджетов = ДополнительныеПараметры.СтрокиПодсценариевВиджетов;
					ДопПараметры = Новый Структура("СтрокиПодсценариевВиджетов", СтрокиПодсценариевВиджетов);
					ОбновитьВставкиКодаVanessaEditor(ДопПараметры);
					ДополнительныеПараметры.Вставить("СтрокиПодсценариевВиджетов", СтрокиПодсценариевВиджетов);
				КонецЕсли;	 
				
				ТекущаяПозицияVanessaEditor = Ванесса.ТекущаяПозицияVanessaEditor;
				Если ТекущаяПозицияVanessaEditor <> Неопределено И НЕ ДополнительныеПараметры.Свойство("ДанныеДляАктивизацииСтрокиПриОткрытииФичи") Тогда
					СохранениеФайла = Ложь;
					Если ДополнительныеПараметры.Свойство("СохранениеФайла") Тогда
						СохранениеФайла = ДополнительныеПараметры.СохранениеФайла;
					КонецЕсли;	
					Если НЕ СохранениеФайла Тогда
						Ванесса.ОбновитьТекущуюСтрокуРедактораСРасчетомВиджета(ТекущаяПозицияVanessaEditor);
					КонецЕсли;	
					Ванесса.ТекущаяПозицияVanessaEditor = Неопределено;
				КонецЕсли;	 
				
			Исключение
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
					Ванесса.Локализовать("Не получилось прочитать файл <%1>."),
					Ванесса.Объект.КаталогФич
					) + Символы.ПС + ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;	 
	КонецЕсли;	 
	
	УстановитьСписокШаговVanessaEditor(Ванесса.Объект.ЯзыкГенератораGherkin);
	
	Если ДополнительныеПараметры.Свойство("ДанныеОшибокДляРедактора") Тогда
		Для Каждого ДанныеОшибки Из ДополнительныеПараметры.ДанныеОшибокДляРедактора Цикл
			ШагиДляVanessaEditor = Новый Массив;
			ШагиДляVanessaEditor.Добавить(ДанныеОшибки.НомерСтроки);
			Ванесса.ПолучитьVanessaEditor().setRuntimeProgress("error", Ванесса.ЗаписатьОбъектJSON(ШагиДляVanessaEditor));
			
			ДанныеПоОшибке = Новый Структура;
			ДанныеПоОшибке.Вставить("id", Строка(Новый УникальныйИдентификатор));
			ДанныеПоОшибке.Вставить("LineNumber", ДанныеОшибки.НомерСтроки);
			ДанныеПоОшибке.Вставить("ErrorText", ДанныеОшибки.ОписаниеОшибки);
			
			ПоказатьОшибкуВРедактореVanessaEditor(ДанныеОшибки.НомерСтроки, "", ДанныеПоОшибке,
				ДанныеОшибки.ОписаниеОшибки, Неопределено, Неопределено)
		КонецЦикла;	 
		
	КонецЕсли;	 
	
КонецПроцедуры 

// Устанавливет набор ключевых слов в редактор.
&НаКлиенте
Процедура УстановитьКлючевыеСловаVanessaEditor() Экспорт
	VanessaGherkinProvider().setKeywords(ПолучитьКлючевыеСловаGherkin());
КонецПроцедуры 

// Устанавливет соответствие слов уссловных операторов
&НаКлиенте
Процедура УстановитьСоответствиеСловУсловныхОператоров() Экспорт
	УсловныеОператоры = Новый Соответствие;

	МассивСлов = Новый Массив;
	МассивСлов.Добавить("then");
	УсловныеОператоры.Вставить("if", МассивСлов);
	УсловныеОператоры.Вставить("elseif", МассивСлов);

	МассивСлов = Новый Массив;
	МассивСлов.Добавить("Тогда");
	УсловныеОператоры.Вставить("Если", МассивСлов);
	УсловныеОператоры.Вставить("ИначеЕсли", МассивСлов);

	VanessaGherkinProvider().setKeypairs(Ванесса.ЗаписатьОбъектJSON(УсловныеОператоры));
КонецПроцедуры 

// Устанавливет набор ключевых слов исключений
&НаКлиенте
Процедура УстановитьКлючевыеСловаИсключений() Экспорт
	VanessaGherkinProvider().setMetatags(ПолучитьКлючевыеСловаИсключенийGherkin());
КонецПроцедуры 

// Устанавливет шагу статус текущего шага в редакторе.
&НаКлиенте
Процедура УстановитьТекущийШагVanessaEditor(ТекШаг) Экспорт
	УстановитьСтатусШага("current", ТекШаг, Истина);
КонецПроцедуры 

// Устанавливает шагу статус упал в секции попытка исключение в редакторе.
&НаКлиенте
Процедура УстановитьШагУпалВСекцииПопыткаИсключение(ТекШаг) Экспорт
	УстановитьСтатусШага("disabled", ТекШаг, Ложь);
КонецПроцедуры 

// Устанавливает шагу статус выполнен в редакторе.
&НаКлиенте
Процедура УстановитьВыполненныйШагVanessaEditor(ТекШаг) Экспорт
	УстановитьСтатусШага("complete", ТекШаг, Ложь);
КонецПроцедуры 

// Устанавливает шагу статус выполнен в редакторе.
&НаКлиенте
Процедура УстановитьУпавшийШагVanessaEditor(ТекШаг, ТекстОшибки, ОписаниеОшибкиКраткоVanessaEditor, СтрокаШага) Экспорт
	УстановитьСтатусШага("error", ТекШаг, Ложь);
	
	ИдВСтрокеВиджета = Неопределено;
	ИдВиджета = Неопределено;
	ОпределитьДанныеВиджета(ИдВСтрокеВиджета, ИдВиджета, ТекШаг.ИдСтроки);
	Если ИдВСтрокеВиджета = Неопределено Тогда
		ИдВСтрокеВиджета = 0;
		НомерСтрокиВФиче = ТекШаг.НомерСтрокиВФиче;
	Иначе	
		НомерСтрокиВФиче = ИдВСтрокеВиджета;
	КонецЕсли;	 
	
	ДанныеПоОшибке = Новый Структура;
	ДанныеПоОшибке.Вставить("id", Строка(Новый УникальныйИдентификатор));
	ДанныеПоОшибке.Вставить("LineNumber", ТекШаг.НомерСтрокиВФиче);
	ДанныеПоОшибке.Вставить("ErrorText", ТекстОшибки);
	
	Если ИдВиджета = Неопределено И ТекШаг.Свойство("ЭтоШагПодсценария") И ТекШаг.ЭтоШагПодсценария Тогда
		НомерСтрокиВФиче = ТекШаг.СтрокаШагаПодсценарияФичи;
	КонецЕсли;	 
	
	ПоказатьОшибкуВРедактореVanessaEditor(НомерСтрокиВФиче, ИдВиджета, ДанныеПоОшибке,
		ОписаниеОшибкиКраткоVanessaEditor, ТекШаг, СтрокаШага);
		
	Ванесса.ПолучитьVanessaEditorВыполняемогоСценария().revealLineInCenter(НомерСтрокиВФиче, ИдВиджета);	
	
КонецПроцедуры 

// Устанавливает значения переменных для работы автокомплита.
&НаКлиенте
Процедура УстановитьЗначенияПеременныхVanessaEditor() Экспорт
	
	Если Ванесса = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ Ванесса.Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	 
	
	Попытка
		VanessaGherkinProvider().setVariables(ПолучитьЗначенияПеременныхVanessaEditor());
	Исключение
		Ванесса.Отладка(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры 

// Устанавливает список шагов для работы автокомплита редактора
&НаКлиенте
Процедура УстановитьСписокШаговVanessaEditor(Язык) Экспорт
	Если НЕ Ванесса.Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ Ванесса.НадоУстановитьСписокШаговVanessaEditor() Тогда
		Возврат;
	КонецЕсли;	 
	
	VanessaGherkinProvider().setStepList(ПолучитьСписокШаговVanessaEditor(Язык));
	
	Ванесса.ПослеУстановкиШаговВРедакторVanessaEditor();
КонецПроцедуры 

// Устанавливает список команд редактора
&НаКлиенте
Процедура УстановитьСписокКомандVanessaEditor() Экспорт
	VanessaGherkinProvider().setErrorLinks(ПолучитьСписокКомандVanessaEditor());
КонецПроцедуры 

// Выгружает данные и очищает память редактора
&НаКлиенте
Процедура ВыгрузитьДанныеVanessaEditor() Экспорт
	Ванесса.VanessaTabs = Неопределено;
КонецПроцедуры 

// Устанавливает тему редактора
&НаКлиенте
Процедура УстановитьТемуVanessaEditor() Экспорт
	Если НЕ Ванесса.Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	
	
	Ванесса.VanessaTabs.theme = Ванесса.Объект.ТемаРедактораVanessaEditor;
КонецПроцедуры 

// Возвращает краткий текст ошибки для отображения в редакторе
&НаКлиенте
Функция ОписаниеОшибкиКраткоVanessaEditor(Знач Стр) Экспорт
	Пока Найти(Стр, "}:") > 0 Цикл
		//Тут происходит попытка убрать стек вызова, если он идёт до информативной части сообщения.
		
		Поз = Найти(Стр, "}:");
		Поз1 = Найти(Стр, "[Failed]");
		Если Поз < Поз1 Тогда
			Стр = СокрЛ(Сред(Стр, Поз + 2));
		Иначе
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;	 
	
	Возврат Стр; 
КонецФункции	 

// Получает значение таблицы Gherkin по текущей строке редактора
&НаКлиенте
Функция ТаблицаGherkinИзVanessaEditor(ТекущаяСтрокаVanessaEditor, МинСтр, МаксСтр, ДлинаМаксСтр) Экспорт
	ЭкземплярVanessaEditor = Ванесса.ПолучитьVanessaEditor();
	ТекущаяСтрокаVanessaEditor = ЭкземплярVanessaEditor.getPosition().LineNumber;
	
	Возврат ТаблицаGherkinИзVanessaEditorНачинаяСоСтроки(ТекущаяСтрокаVanessaEditor, МинСтр, МаксСтр, ДлинаМаксСтр);
	
КонецФункции

// Возвращает значение таблицы Gherkin начиная с указанной строки
&НаКлиенте
Функция ТаблицаGherkinИзVanessaEditorНачинаяСоСтроки(ТекущаяСтрокаVanessaEditor, МинСтр, МаксСтр, ДлинаМаксСтр) Экспорт
	
	ЭкземплярVanessaEditor = Ванесса.ПолучитьVanessaEditor();
	ПолныйТекстСтроки = ЭкземплярVanessaEditor.getLineContent(ТекущаяСтрокаVanessaEditor);
	ТекстСтроки = СокрЛ(ПолныйТекстСтроки);
	
	МинСтр = ТекущаяСтрокаVanessaEditor;
	МаксСтр = ТекущаяСтрокаVanessaEditor;
	ДлинаМаксСтр = СтрДлина(ПолныйТекстСтроки);
	
	МассивСтрокДляРедактирования = Новый Массив;
	МассивСтрокДляРедактирования.Добавить(ТекстСтроки);
	
	ТекНомСтр = ТекущаяСтрокаVanessaEditor;
	Пока Истина Цикл
		ТекНомСтр = ТекНомСтр - 1;
		ТекстСтроки = СокрЛ(ЭкземплярVanessaEditor.getLineContent(ТекНомСтр));
		Если Лев(ТекстСтроки, 1) <> "|" Тогда
			Прервать;
		КонецЕсли;	
		
		МинСтр = ТекНомСтр;
		
		МассивСтрокДляРедактирования.Вставить(0, ТекстСтроки);
	КонецЦикла;	
	
	ТекНомСтр = ТекущаяСтрокаVanessaEditor;
	Пока Истина Цикл
		ТекНомСтр = ТекНомСтр + 1;
		Стр = ЭкземплярVanessaEditor.getLineContent(ТекНомСтр);
		ТекстСтроки = СокрЛ(Стр);
		Если Лев(ТекстСтроки, 1) <> "|" Тогда
			Прервать;
		КонецЕсли;	
		
		МаксСтр = ТекНомСтр;
		ДлинаМаксСтр = СтрДлина(Стр);
		
		МассивСтрокДляРедактирования.Добавить(ТекстСтроки);
	КонецЦикла;	
	
	Возврат МассивСтрокДляРедактирования;
	
КонецФункции	

// Включает чтение активной формы клиента тестирования
&НаКлиенте
Процедура ВключитьЧтениеДанныхТекущейФормыVanessaEditor() Экспорт
	Если НЕ Ванесса.Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ Ванесса.Объект.ИспользоватьДанныеТекущейФормыПриПодбореШагов Тогда
		Возврат;
	КонецЕсли;	 
	
	ПодключитьОбработчикОжидания("ЧтениеДанныхТекущейФормыVanessaEditor", 2, Ложь);
КонецПроцедуры 

// Выключает чтение активной формы клиента тестирования
&НаКлиенте
Процедура ВыключитьЧтениеДанныхТекущейФормыVanessaEditor()Экспорт
	ОтключитьОбработчикОжидания("ЧтениеДанныхТекущейФормыVanessaEditor");
КонецПроцедуры 

// Устанавливает значения текущей формы в объект VanessaGherkinProvider
&НаКлиенте
Процедура УстановитьЗначенияЭлементовТекущегоОкнаVanessaEditor() Экспорт
	Если НЕ Ванесса.Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	
	
	VanessaGherkinProvider().setElements(ПолучитьЗначенияЭлементовТекущегоОкнаVanessaEditor());
КонецПроцедуры 

// Сохраняет данные текущей формы
&НаКлиенте
Процедура ЗапомнитьДанныеТекущейФормыVanessaEditor(Данные, ТекущиеЗначения) Экспорт
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	БылиИзменения = Ложь;
	
	УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "Заголовок окна", Данные.ЗаголовокОкна, БылиИзменения);
	УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "Заголовок формы", Данные.ЗаголовокФормы, БылиИзменения);
	УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "ИмяФормы", Данные.ИмяФормы, БылиИзменения);
	Если Данные.Свойство("ТекТаблица") Тогда
		УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "ИмяТаблицы", Данные.ТекТаблица.Имя, БылиИзменения);
		
		Если ТипЗнч(Данные.ТекЭлемент) = Тип("ТестируемоеПолеФормы") Тогда
			УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "ИмяКолонки", Данные.ТекЭлемент.Имя, БылиИзменения);
			УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "ИмяПоля", Данные.ТекЭлемент.Имя, БылиИзменения);
			УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "ИмяЭлемента", Данные.ТекЭлемент.Имя, БылиИзменения);
			УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "ИмяРеквизита", Данные.ТекЭлемент.Имя, БылиИзменения);
			УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "ИмяФлага", Данные.ТекЭлемент.Имя, БылиИзменения);
			УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "Заголовок флага", Данные.ТекЭлемент.ТекстЗаголовка, БылиИзменения);
			УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "Заголовок колонки", Данные.ТекЭлемент.ТекстЗаголовка, БылиИзменения);
			УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "Заголовок поля", Данные.ТекЭлемент.ТекстЗаголовка, БылиИзменения);
		КонецЕсли;	 
		
		Попытка
			ЗначениеПоля = ЗначениеПоляТекущегоПоляVanessaEditor(Данные.ТекЭлемент, Данные.ТекТаблица);
		Исключение
			ЗначениеПоля = "";
		КонецПопытки;
		УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "ЗначениеПоля", ЗначениеПоля, БылиИзменения);
		УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "ШаблонЗначениеПоля", ЗначениеПоля, БылиИзменения);
	Иначе
		Если ТипЗнч(Данные.ТекЭлемент) = Тип("ТестируемоеПолеФормы") Тогда
			УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "ИмяПоля", Данные.ТекЭлемент.Имя, БылиИзменения);
			УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "ИмяЭлемента", Данные.ТекЭлемент.Имя, БылиИзменения);
			УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "ИмяРеквизита", Данные.ТекЭлемент.Имя, БылиИзменения);
			УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "ИмяФлага", Данные.ТекЭлемент.Имя, БылиИзменения);
			УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "Заголовок элемента", Данные.ТекЭлемент.ТекстЗаголовка, БылиИзменения);
			УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "Заголовок поля", Данные.ТекЭлемент.ТекстЗаголовка, БылиИзменения);
			УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "Заголовок флага", Данные.ТекЭлемент.ТекстЗаголовка, БылиИзменения);
			Попытка
				ЗначениеПоля = ЗначениеПоляТекущегоПоляVanessaEditor(Данные.ТекЭлемент);
			Исключение
				ЗначениеПоля = "";
			КонецПопытки;
			УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "ЗначениеПоля", ЗначениеПоля, БылиИзменения);
			УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "ШаблонЗначениеПоля", ЗначениеПоля, БылиИзменения);
			
			Если Данные.ТекЭлемент.Вид = ВидПоляФормы.ПолеПереключателя Тогда
				Попытка
					ОтображаемыйТекст = Данные.ТекЭлемент.ПолучитьОтображаемыйТекст();
				Исключение
					ОтображаемыйТекст = "";
				КонецПопытки;
				
				УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "Значение переключателя", ОтображаемыйТекст, БылиИзменения);
			КонецЕсли;	 
		ИначеЕсли ТипЗнч(Данные.ТекЭлемент) = Тип("ТестируемаяКнопкаФормы") Тогда
			УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "ИмяКнопки", Данные.ТекЭлемент.Имя, БылиИзменения);
			УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "Заголовок кнопки", Данные.ТекЭлемент.ТекстЗаголовка, БылиИзменения);
		КонецЕсли;	 
		
		Если Данные.Свойство("ЗначениеЯчейки") Тогда
			УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "ЗначениеЯчейки", Данные.ЗначениеЯчейки, БылиИзменения);
		КонецЕсли;	 
		Если Данные.Свойство("АдресЯчейки") Тогда
			УстановитьЗначениеТекущейФормыVanessaEditor(ТекущиеЗначения, "АдресЯчейки", Данные.АдресЯчейки, БылиИзменения);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если БылиИзменения Тогда
		УстановитьЗначенияЭлементовТекущегоОкнаVanessaEditor();
	КонецЕсли;	 
КонецПроцедуры 

// Сбрасывает флаги модифицированность для формы VA и для редактора
&НаКлиенте
Процедура СброситьФлагМодифицированностиVanessaEditor() Экспорт
	Ванесса.Модифицированность = Ложь;
КонецПроцедуры 

// Сохраняет текст из редактора в файл.
&НаКлиенте
Процедура СохранитьТекстИзVanessaEditorВФайл() Экспорт
	ТекстИзVanessaEditor = Ванесса.ПолучитьVanessaEditor().getContent();
	СброситьФлагМодифицированностиVanessaEditor();
	
	ЗТ = Новый ЗаписьТекста(Ванесса.VanessaTabs.current.filename, "UTF-8", , Ложь, Символы.ПС); 
	ЗТ.Записать(ТекстИзVanessaEditor); 
	ЗТ.Закрыть();
	
	Ванесса.VanessaTabs.current.resetModified()
КонецПроцедуры 

// Сохраняет текст из редактора в файл и выполняет асинхронный обработчик.
&НаКлиенте
Функция СохранитьТекстИзVanessaEditorВФайлИВыполнитьОбработчик(ДопПараметры = Неопределено) Экспорт
	СохранитьТекстИзVanessaEditorВФайл();
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;	 
	ДопПараметры.Вставить("ЗагрузкаФичиИзVanessaEditor", Истина);
	Ванесса.ЗагрузитьФичи(ДопПараметры);
КонецФункции	 

// Возвращает строку для установки списка доступных шагов в редактор.
&НаКлиенте
Функция ДанныеШаговДляРедактора(СтруктураПараметров) Экспорт
	
	ТаблицаИзвестныхStepDefinition = СтруктураПараметров.ТаблицаИзвестныхStepDefinition;
	ТаблицаУжеСуществующихСценариев = СтруктураПараметров.ТаблицаУжеСуществующихСценариев;
	МодульПарсерФич = СтруктураПараметров.МодульПарсерФич;
	Язык = СтруктураПараметров.Язык;
	Ванесса = СтруктураПараметров.Ванесса;
	
	ДанныеДляПеревода = Неопределено;
	ДанныеКатегорийШагов = Неопределено;
	ДанныеПереводаШагов = Неопределено;
	Если Язык <> "ru" Тогда
		ДанныеДляПеревода = ПолучитьДанныеДляПеревода(СтруктураПараметров.КешДанныеПеревода);
		ДанныеКатегорийШагов = ДанныеДляПеревода.ДанныеКатегорийШагов;
		ДанныеПереводаШагов = ДанныеДляПеревода.ДанныеПереводаШагов;
	КонецЕсли;	 
	
	ДанныеФичи = Новый Структура;
	ДанныеФичи.Вставить("ЯзыкФичи", Язык);
		
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписьJSON.ЗаписатьНачалоМассива();
	Для Каждого СтрокаТаблицаИзвестныхStepDefinition Из ТаблицаИзвестныхStepDefinition Цикл
		ВтораяЧастьСтрокиПозиция = -1;
		
		ПримерИспользования = СтрокаТаблицаИзвестныхStepDefinition.ПредставлениеТеста;
		ПримерИспользования_ru = ПримерИспользования;
		ОписаниеШага = СтрокаТаблицаИзвестныхStepDefinition.ОписаниеШага;
		ТипШага = СтрокаТаблицаИзвестныхStepDefinition.ТипШага;
		Если Язык <> "ru" Тогда
			ДанныеПереводаШага = ДанныеПереводаШагов[СтрокаТаблицаИзвестныхStepDefinition.СтрокаДляПоиска];
			Если ДанныеПереводаШага <> Неопределено Тогда
				ПримерИспользования = УбратьЛишниеСимволыИзПредставленияШага(ДанныеПереводаШага.ТекстПереводаШаг);
				ОписаниеШага = ДанныеПереводаШага.ТекстПереводаОписание;
				ТипШага = ПеревестиТипШага(ДанныеКатегорийШагов, ТипШага);
			КонецЕсли;	 
		КонецЕсли;	 
		
		МодульПарсерФич.ПолучитьКлючевоеСлово(ДанныеФичи,
			ПримерИспользования, ВтораяЧастьСтрокиПозиция);
		ИмяШагаБезКлючевогоСлова = СокрЛП(Сред(ПримерИспользования, ВтораяЧастьСтрокиПозиция));
		
		Если ПустаяСтрока(ИмяШагаБезКлючевогоСлова) Тогда
			Продолжить;
		КонецЕсли;	 
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("filterText");
		ЗаписьJSON.ЗаписатьЗначение(ИмяШагаБезКлючевогоСлова);
		ЗаписьJSON.ЗаписатьИмяСвойства("insertText");
		ЗаписьJSON.ЗаписатьЗначение(ПримерИспользования);
		ЗаписьJSON.ЗаписатьИмяСвойства("sortText");
		ЗаписьJSON.ЗаписатьЗначение(ПолучитьСтрокуСортировки(ПримерИспользования_ru));
		ЗаписьJSON.ЗаписатьИмяСвойства("documentation");
		ЗаписьJSON.ЗаписатьЗначение(ОписаниеШага);
		ЗаписьJSON.ЗаписатьИмяСвойства("kind");
		ЗаписьJSON.ЗаписатьЗначение(ТипШага(СтрокаТаблицаИзвестныхStepDefinition));
		ЗаписьJSON.ЗаписатьИмяСвойства("section");
		ЗаписьJSON.ЗаписатьЗначение(ТипШага);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
	КонецЦикла;	 
	
	Для Каждого СтрокаТаблицаУжеСуществующихСценариев Из ТаблицаУжеСуществующихСценариев Цикл
		ПримерИспользования = СтрокаТаблицаУжеСуществующихСценариев.ПримерИспользования;
		ПримерИспользования_ru = ПримерИспользования;
		ОписаниеШага = СтрокаТаблицаУжеСуществующихСценариев.ОписаниеШага;
		ТипШага = СтрокаТаблицаУжеСуществующихСценариев.ТипШага;
		Если Язык <> "ru" Тогда
			ДанныеПереводаШага = ДанныеПереводаШагов[СтрокаТаблицаУжеСуществующихСценариев.Снипет];
			Если ДанныеПереводаШага <> Неопределено Тогда
				ПримерИспользования = УбратьЛишниеСимволыИзПредставленияШага(ДанныеПереводаШага.ТекстПереводаШаг);
				ОписаниеШага = ДанныеПереводаШага.ТекстПереводаОписание;
				ТипШага = ПеревестиТипШага(ДанныеКатегорийШагов, ТипШага);
			КонецЕсли;	 
		КонецЕсли;	 
		
		ВтораяЧастьСтрокиПозиция = -1;
		МодульПарсерФич.ПолучитьКлючевоеСлово(ДанныеФичи, ПримерИспользования, ВтораяЧастьСтрокиПозиция);
		ИмяШагаБезКлючевогоСлова = СокрЛП(Сред(ПримерИспользования, ВтораяЧастьСтрокиПозиция));
		
		Если ПустаяСтрока(ИмяШагаБезКлючевогоСлова) Тогда
			ПримерИспользования = "Дано " + СтрокаТаблицаУжеСуществующихСценариев.ИмяСценария;
			ВтораяЧастьСтрокиПозиция = -1;
			МодульПарсерФич.ПолучитьКлючевоеСлово(ДанныеФичи, ПримерИспользования, ВтораяЧастьСтрокиПозиция);
			ИмяШагаБезКлючевогоСлова = СокрЛП(Сред(ПримерИспользования, ВтораяЧастьСтрокиПозиция));
		КонецЕсли;	 
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("filterText");
		ЗаписьJSON.ЗаписатьЗначение(ИмяШагаБезКлючевогоСлова);
		ЗаписьJSON.ЗаписатьИмяСвойства("insertText");
		ЗаписьJSON.ЗаписатьЗначение(ПримерИспользования);
		ЗаписьJSON.ЗаписатьИмяСвойства("sortText");
		ЗаписьJSON.ЗаписатьЗначение(ПолучитьСтрокуСортировки(ПримерИспользования_ru));
		ЗаписьJSON.ЗаписатьИмяСвойства("documentation");
		ЗаписьJSON.ЗаписатьЗначение(ОписаниеШага);
		ЗаписьJSON.ЗаписатьИмяСвойства("kind");
		ЗаписьJSON.ЗаписатьЗначение(17);
		ЗаписьJSON.ЗаписатьИмяСвойства("section");
		ЗаписьJSON.ЗаписатьЗначение(ТипШага);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
	КонецЦикла;	 
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	Данные = ЗаписьJSON.Закрыть();
	
	Возврат Данные;
КонецФункции	 

// Делает первичную инициализацию модуля.
&НаКлиенте
Функция ИнициализацияФормы(ВладелецФормы) Экспорт
	Ванесса = ВладелецФормы;
	КешОтступов = Новый Соответствие;
КонецФункции	 

// Делает отключение модуля
&НаКлиенте
Функция ОтключениеМодуля() Экспорт
	
	Ванесса = Неопределено;
	КешОтступов = Неопределено;
	
КонецФункции	 

// Активизирует строку дерева шагов, которая соответствует текущей строке редактора.
&НаКлиенте
Функция АктивизироватьСтрокуДереваСоответствующуюVanessaEditor(ТекущаяСтрокаVanessaEditor = Неопределено) Экспорт
	Попытка
		ЭкземплярVanessaEditor = Ванесса.ПолучитьVanessaEditor();
		ПозицияVanessaEditor = ЭкземплярVanessaEditor.getPosition();
		Если ТекущаяСтрокаVanessaEditor = Неопределено Тогда
			ТекущаяСтрокаVanessaEditor = ПозицияVanessaEditor.LineNumber;
			ТекстСтроки = ЭкземплярVanessaEditor.getLineContent(ТекущаяСтрокаVanessaEditor, ПозицияVanessaEditor.codeWidget);
		Иначе	
			ТекстСтроки = ЭкземплярVanessaEditor.getLineContent(ТекущаяСтрокаVanessaEditor, "");
		КонецЕсли;	 
		НашлиСтроку = Ложь;
		Если НЕ ЭтоЗначимаяСтрокаVanessaEditor(ТекстСтроки) Тогда
			Пока Истина Цикл
				ТекущаяСтрокаVanessaEditor = ТекущаяСтрокаVanessaEditor + 1;
				Попытка
					ТекстСтроки = ЭкземплярVanessaEditor.getLineContent(ТекущаяСтрокаVanessaEditor);
				Исключение
					Прервать;
				КонецПопытки;
				
				Если ТекстСтроки = Неопределено Тогда
					Прервать;
				КонецЕсли;	 
				
				Если ЭтоЗначимаяСтрокаVanessaEditor(ТекстСтроки) Тогда
					НашлиСтроку = Истина;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
		Иначе
			НашлиСтроку = Истина;
		КонецЕсли;	 
		
		Если НЕ НашлиСтроку Тогда
			Возврат Ложь;
		КонецЕсли;	 
		
		Если ПустаяСтрока(ПозицияVanessaEditor.codeWidget) Тогда
			ТекущиеДанные = Ванесса.Элементы.ДеревоТестов.ТекущиеДанные;
			Если ТекущиеДанные <> Неопределено Тогда
				Если ТекущиеДанные.НомерСтрокиВФиче <> ТекущаяСтрокаVanessaEditor Тогда
					АктивизироватьТекущуюСтрокуИлиБлижайшуюСверху(ТекущаяСтрокаVanessaEditor);
				КонецЕсли;
			Иначе	
				АктивизироватьТекущуюСтрокуИлиБлижайшуюСверху(ТекущаяСтрокаVanessaEditor);
			КонецЕсли;	
		Иначе
			ИдСтрокиДерева = ИдСтрокиДереваПоНомеруСтрокиВВиджете(ПозицияVanessaEditor.codeWidget, ПозицияVanessaEditor.LineNumber);
			Если ИдСтрокиДерева <> Неопределено Тогда
				Ванесса.СделатьСтрокуДереваТекущейПоИдСтроки(ИдСтрокиДерева);
			КонецЕсли;	 
		КонецЕсли;	 
		
		Возврат Истина;
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Делает переход из редактора в дерево шагов.
&НаКлиенте
Процедура ПерейтиВДеревоШаговVanessaEditor() Экспорт
	Если Ванесса.Объект.ИспользоватьРедакторVanessaEditor И Ванесса.VanessaTabs.current <> Неопределено И Ванесса.VanessaTabs.current.modified Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ВыполнитьПроцедуруЧерезОбработчикОжидания", "ПерейтиВДеревоШаговVanessaEditor");
		СохранитьТекстИзVanessaEditorВФайлИВыполнитьОбработчик(ДопПараметры);
		Возврат;
	КонецЕсли;	 
	
	АктивизироватьСтрокуДереваСоответствующуюVanessaEditor();
	Ванесса.Объект.ИспользоватьРедакторVanessaEditor = Ложь;
	Ванесса.УстановитьУсловноеОформление();
КонецПроцедуры 

// Показывает подробную информацию о шаге.
&НаКлиенте
Процедура ПоказатьПодробнуюИнформациюОШаге(Знач Стр) Экспорт
	Поз = Найти(Стр, "#info:");
	Стр = Сред(Стр, Поз + 6);
	Стр = НРег(СтрЗаменить(Стр,"-",""));
	
	Язык = Ванесса.Объект.ЯзыкГенератораGherkin;
	
	СтруктураПараметров = СтруктураПараметровДляПолученияДанныхШагов(Язык);
	
	ДанныеДляПеревода = Неопределено;
	ДанныеКатегорийШагов = Неопределено;
	ДанныеПереводаШагов = Неопределено;
	Если Язык <> "ru" Тогда
		ДанныеДляПеревода = ПолучитьДанныеДляПеревода(СтруктураПараметров.КешДанныеПеревода);
		ДанныеКатегорийШагов = ДанныеДляПеревода.ДанныеКатегорийШагов;
		ДанныеПереводаШагов = ДанныеДляПеревода.ДанныеПереводаШагов;
	КонецЕсли;	 
	
	Для Каждого СтрокаТаблицаИзвестныхStepDefinition Из Ванесса.ТаблицаИзвестныхStepDefinition Цикл
		Если СтрокаТаблицаИзвестныхStepDefinition.СтрокаДляПоиска = Стр Тогда
			ДанныеШага = Новый Структура;
			ДанныеШага.Вставить("ИмяФайла", СтрокаТаблицаИзвестныхStepDefinition.ИмяФайла);
			ДанныеШага.Вставить("ОписаниеШага", СтрокаТаблицаИзвестныхStepDefinition.ОписаниеШага);
			ДанныеШага.Вставить("ПредставлениеТеста", СтрокаТаблицаИзвестныхStepDefinition.ПредставлениеТеста);
			ДанныеШага.Вставить("ТипШага", СтрокаТаблицаИзвестныхStepDefinition.ТипШага);
			ДанныеШага.Вставить("ИмяПроцедуры", СтрокаТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры);
			ДанныеШага.Вставить("Снипет", СтрокаТаблицаИзвестныхStepDefinition.Id);
			
			ОткрытьФорму(Ванесса.ПолучитьИмяОбработкиVA() + ".Форма.ПодробнаяИнформацияОШаге", ДанныеШага, Ванесса);
			Возврат;
		КонецЕсли;	 
		
		Если Язык <> "ru" Тогда
			ДанныеПереводаШага = ДанныеПереводаШагов[СтрокаТаблицаИзвестныхStepDefinition.СтрокаДляПоиска];
			Если ДанныеПереводаШага <> Неопределено И ДанныеПереводаШага.СтрокаДляПоискаПеревод = Стр Тогда
				ПримерИспользования = УбратьЛишниеСимволыИзПредставленияШага(ДанныеПереводаШага.ТекстПереводаШаг);
				ОписаниеШага = ДанныеПереводаШага.ТекстПереводаОписание;
				ТипШага = ПеревестиТипШага(ДанныеКатегорийШагов, СтрокаТаблицаИзвестныхStepDefinition.ТипШага);
				
				ДанныеШага = Новый Структура;
				ДанныеШага.Вставить("ИмяФайла", СтрокаТаблицаИзвестныхStepDefinition.ИмяФайла);
				ДанныеШага.Вставить("ОписаниеШага", ОписаниеШага);
				ДанныеШага.Вставить("ПредставлениеТеста", ПримерИспользования);
				ДанныеШага.Вставить("ТипШага", ТипШага);
				ДанныеШага.Вставить("ИмяПроцедуры", СтрокаТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры);
				
				ОткрытьФорму(Ванесса.ПолучитьИмяОбработкиVA() + ".Форма.ПодробнаяИнформацияОШаге", ДанныеШага, Ванесса);
				Возврат;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	 
	
	ТаблицаУжеСуществующихСценариев = Ванесса.ТаблицаУжеСуществующихСценариев();
	Для Каждого СтрокаТаблицаУжеСуществующихСценариев Из ТаблицаУжеСуществующихСценариев Цикл
		Если СтрокаТаблицаУжеСуществующихСценариев.Снипет = Стр Тогда
			ДанныеШага = Новый Структура;
			ДанныеШага.Вставить("ИмяФайла", СтрокаТаблицаУжеСуществующихСценариев.ИмяФайла);
			ДанныеШага.Вставить("ОписаниеШага", СтрокаТаблицаУжеСуществующихСценариев.ОписаниеШага);
			ДанныеШага.Вставить("ПредставлениеТеста", СтрокаТаблицаУжеСуществующихСценариев.ПримерИспользования);
			ДанныеШага.Вставить("ТипШага", СтрокаТаблицаУжеСуществующихСценариев.ТипШага);
			
			ОткрытьФорму(Ванесса.ПолучитьИмяОбработкиVA() + ".Форма.ПодробнаяИнформацияОШаге", ДанныеШага, Ванесса);
			Возврат;
		КонецЕсли;	 
		
		Если Язык <> "ru" Тогда
			ДанныеПереводаШага = ДанныеПереводаШагов[СтрокаТаблицаУжеСуществующихСценариев.Снипет];
			Если ДанныеПереводаШага <> Неопределено И ДанныеПереводаШага.СтрокаДляПоискаПеревод = Стр Тогда
				ПримерИспользования = УбратьЛишниеСимволыИзПредставленияШага(ДанныеПереводаШага.ТекстПереводаШаг);
				ОписаниеШага = ДанныеПереводаШага.ТекстПереводаОписание;
				ТипШага = ПеревестиТипШага(ДанныеКатегорийШагов, СтрокаТаблицаУжеСуществующихСценариев.ТипШага);
				
				ДанныеШага = Новый Структура;
				ДанныеШага.Вставить("ИмяФайла", СтрокаТаблицаУжеСуществующихСценариев.ИмяФайла);
				ДанныеШага.Вставить("ОписаниеШага", ОписаниеШага);
				ДанныеШага.Вставить("ПредставлениеТеста", ПримерИспользования);
				ДанныеШага.Вставить("ТипШага", ТипШага);
				
				ОткрытьФорму(Ванесса.ПолучитьИмяОбработкиVA() + ".Форма.ПодробнаяИнформацияОШаге", ДанныеШага, Ванесса);
				Возврат;
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;	 
КонецПроцедуры

// Устанавливает некоторые строки, которые используются в редакторе.
&НаКлиенте
Процедура УстановитьЛокализациюСообщенийVanessaEditor() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("syntaxMsg", Ванесса.Локализовать("Синтаксическая ошибка: шаг не найден."));
	Структура.Вставить("soundHint", Ванесса.Локализовать("Озвучить фразу"));
	VanessaGherkinProvider().setMessages(Ванесса.ЗаписатьОбъектJSON(Структура));
	
КонецПроцедуры 

// Устанавливает имя секции в фиче, где определяются переменны
&НаКлиенте
Процедура УстановитьИмяОбластиПеременных() Экспорт
	Массив = Новый Массив;
	Массив.Добавить("Переменные");
	Массив.Добавить("Variables");
	VanessaGherkinProvider().setHyperlinks(Ванесса.ЗаписатьОбъектJSON(Массив));
КонецПроцедуры 

// Процедура - Установить данные экспортных переменных геркина
//
// Параметры:
//  ДанныеЭкспортныхПеременных	 - 	 - 
//
&НаКлиенте 
Процедура УстановитьДанныеЭкспортныхПеременныхГеркина(ДанныеЭкспортныхПеременных) Экспорт 
	Если ДанныеЭкспортныхПеременных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	VanessaGherkinProvider = VanessaGherkinProvider();
	Если VanessaGherkinProvider = Неопределено Тогда
		ВозвраТ;
	КонецЕсли;     
	ДанныеДляПередачиВРедактор = ДанныеЭкспортныхПеременных;
	Если ТипЗнч(ДанныеДляПередачиВРедактор) <> Тип("Строка") Тогда 
		ДанныеДляПередачиВРедактор = Ванесса.ЗаписатьОбъектJSON(ДанныеЭкспортныхПеременных);	
	КонецЕсли;
	
	VanessaGherkinProvider.setImports(ДанныеДляПередачиВРедактор);
КонецПроцедуры

// Раскрашивает строку подсценария, когда весь подсенарий выполнен
&НаКлиенте
Функция ОбновитьСтатусВыполненногоПодсценарияФичи(НомерСтроки) Экспорт
	ШагиДляVanessaEditor = Новый Массив;
	ШагиДляVanessaEditor.Добавить(НомерСтроки);
	Ванесса.ПолучитьVanessaEditorВыполняемогоСценария().setRuntimeProgress("complete", Ванесса.ЗаписатьОбъектJSON(ШагиДляVanessaEditor), "");
КонецФункции	 

// Открывает гиперссылку в редакторе по умолчанию
&НаКлиенте
Процедура ОткрытьГиперссылкуВРедактореПоУмолчанию(Знач Стр) Экспорт
	Если Лев(Стр, 11) = "e1cib/data/" Тогда
		ОткрытьОбъектВБазеМенеджераТестирования(Сред(Стр, 12));
	ИначеЕсли Лев(Стр, 11) = "e1cib/list/" Тогда
		ОткрытьФормуСпискаВБазеМенеджераТестирования(Сред(Стр, 12));
	Иначе	
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьГиперссылкуВРедактореПоУмолчаниюОповещение", ЭтаФорма);
		НачатьЗапускПриложения(ОписаниеОповещения, Стр);
	КонецЕсли;	 
КонецПроцедуры 

// Обработчик нажатия на ссылку в редакторе
&НаКлиенте
Процедура ОбработкаНажатияНаСсылку(Знач Стр, ДанныеСекцииПеременные) Экспорт
	
	Если ДанныеСекцииПеременные = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	ДанныеСсылки = Ванесса.ПрочитатьОбъектJSON(Стр);
	УниверсальноеИмяФайла = УниверсальноеИмяФайла(Ванесса.Объект.КаталогФич);
	ЭкземплярVanessaEditor = Ванесса.ПолучитьVanessaEditor();
	
	Если ДанныеСсылки.Свойство("file") Тогда
		ИмяФайла = ДанныеСсылки.file;
		Файл = Новый Файл(ИмяФайла);
		ИмяФайлаФичи = НРег(Файл.Имя);
		
		ТекстФичи = ЭкземплярVanessaEditor.getContent();
		МассивСтрок = Ванесса.РазложитьСтрокуВМассивПодстрокКлиент(ТекстФичи, Символы.ПС);
		Для Сч = 0 По МассивСтрок.Количество() - 1 Цикл
			ТекСтр = НРег(МассивСтрок[Сч]);
			Если Найти(ТекСтр, "'" + ИмяФайлаФичи + "'") > 0 ИЛИ Найти(ТекСтр, """" + ИмяФайлаФичи + """") > 0 Тогда
				НомерСтроки = Сч + 1;
				ЭкземплярVanessaEditor.revealLineInCenter(НомерСтроки, "");
				ЭкземплярVanessaEditor.setPosition(НомерСтроки, 1, "");
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	
		
		Возврат;
	КонецЕсли;	 
	
	ИмяПеременнойКлик = ДанныеСсылки.param;
	Если ДанныеСекцииПеременные.ПростыеПеременные <> Неопределено Тогда
		ДанныеПростыхПеременных = ДанныеСекцииПеременные.ПростыеПеременные[УниверсальноеИмяФайла];
		Если ДанныеПростыхПеременных <> Неопределено Тогда
			ДанныеПеременной = ДанныеПростыхПеременных[НРег(ИмяПеременнойКлик)];
			Если ДанныеПеременной <> Неопределено Тогда
				ЭкземплярVanessaEditor.revealLineInCenter(ДанныеПеременной.НомерСтроки, "");
				ЭкземплярVanessaEditor.setPosition(ДанныеПеременной.НомерСтроки, 1, "");
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ДанныеСекцииПеременные.ТаблицыПеременных <> Неопределено Тогда
		ДанныеТаблицПеременных = ДанныеСекцииПеременные.ТаблицыПеременных[УниверсальноеИмяФайла];
		Если ДанныеТаблицПеременных <> Неопределено  Тогда
			Массив = Ванесса.РазложитьСтрокуВМассивПодстрокКлиент(ИмяПеременнойКлик, ".");
			ИмяПеременной = Неопределено;
			Если Массив.Количество() = 2 Тогда
				//Это переменная таблицы без имени
				ТаблицаПеременных = ДанныеТаблицПеременных[""];
				НайденаПеременная = Истина;
				ИмяПеременной = Массив[0];
				ИмяПоля = Массив[1];
			ИначеЕсли Массив.Количество() = 3 Тогда
				//Это переменная таблицы с именем
				НайденаПеременная = Истина;
				ТаблицаПеременных = ДанныеТаблицПеременных[НРег(Массив[0])];
				ИмяПеременной = Массив[1];
				ИмяПоля = Массив[2];
			КонецЕсли;	 
			
			Если ИмяПеременной <> Неопределено Тогда
				Если ТаблицаПеременных.Значения.Свойство(ИмяПеременной) Тогда
					ДанныеСтрокиПеременной = ТаблицаПеременных.Значения[ИмяПеременной];
					Если ДанныеСтрокиПеременной <> Неопределено Тогда
						ЭкземплярVanessaEditor.revealLineInCenter(ДанныеСтрокиПеременной._НомерСтроки_, "");
						ЭкземплярVanessaEditor.setPosition(ДанныеСтрокиПеременной._НомерСтроки_, 1, "");
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
		КонецЕсли;
	КонецЕсли;	 
	
КонецПроцедуры 

// Открывает гиперссылку в редакторе по умолчанию
&НаКлиенте
Процедура ПоказатьКартинкуВРедакторе(Знач Данные) Экспорт
	ФайлСценария = Новый Файл(Данные.path);
	
	Если Ванесса.ФайлСуществуетКомандаСистемы(Данные.src) Тогда
		Данные.show(Данные.src);
		Возврат;
	КонецЕсли;
	
	Данные.show(ФайлСценария.Путь + ПолучитьРазделительПути() + Данные.src);
КонецПроцедуры 

// Показывает/скрывает миниатюру кода
&НаКлиенте
Процедура ПоказатьМиниатюруКода() Экспорт
	
	Если Ванесса.VanessaTabs.showMinimap <> Ванесса.Объект.ПоказыватьМиниатюруКода Тогда
		Ванесса.VanessaTabs.showMinimap = Ванесса.Объект.ПоказыватьМиниатюруКода;
	КонецЕсли;	 
	
КонецПроцедуры 

// Включает и отключает проверку синтаксиса в редакторе
&НаКлиенте
Процедура ПроверкаСинтаксисаВРедакторе() Экспорт
	Ванесса.VanessaTabs.enableSyntaxCheck = Ванесса.Объект.ПроверкаСинтаксисаВРедакторе;
КонецПроцедуры 

// Меняет режим отображения табуляции и пробелов в редакторе
&НаКлиенте
Процедура УстановитьОтображениеТабуляцииИПробелов() Экспорт
	Попытка
		Если Ванесса.Объект.ОтображениеТабуляцииИПробелов = 0 Тогда
			Ванесса.VanessaTabs.renderWhitespace = "selection";
		ИначеЕсли Ванесса.Объект.ОтображениеТабуляцииИПробелов = 1 Тогда
			Ванесса.VanessaTabs.renderWhitespace = "none";
		ИначеЕсли Ванесса.Объект.ОтображениеТабуляцииИПробелов = 2 Тогда
			Ванесса.VanessaTabs.renderWhitespace = "boundary";
		Иначе
			Ванесса.VanessaTabs.renderWhitespace = "all";
		КонецЕсли;	 
	Исключение
	КонецПопытки;
КонецПроцедуры 

// Устанавливает надо ли заменять символы табуляции на пробелы при работе в редакторе
&НаКлиенте
Процедура УстановитьЗаменуТабуляцииНаПробелы() Экспорт
	Попытка
		Если Ванесса.VanessaTabs.current <> Неопределено Тогда
			Если Ванесса.ЭтоВкладкаEdit(Ванесса.VanessaTabs.current) Тогда
				Если Ванесса.Объект.ЗаменятьТабыНаПробелы Тогда
					Ванесса.ПолучитьVanessaEditor().setInsertSpaces(4);
				Иначе	
					Ванесса.ПолучитьVanessaEditor().setInsertSpaces(0);
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
	Исключение
	КонецПопытки;
КонецПроцедуры 

// Проверяет является ли текущая строка редактора подсценарием
&НаКлиенте
Функция ТекущаяСтрокаРедактораЭтоПодсценарий(СтрокаДерева = Неопределено) Экспорт
	
	ПозицияVanessaEditor = Ванесса.ПолучитьVanessaEditor().getPosition();
	Если ЗначениеЗаполнено(ПозицияVanessaEditor.codeWidget) Тогда
		ИдСтрокиДерева = ИдСтрокиДереваПоНомеруСтрокиВВиджете(ПозицияVanessaEditor.codeWidget, ПозицияVanessaEditor.LineNumber);
		СтрокаДерева = Ванесса.СтрокаДереваПоИдСтроки(ИдСтрокиДерева);
	Иначе	
		СтрокаДерева = Ванесса.СтрокаДереваПоНомеруСтрокиФичи(ПозицияVanessaEditor.LineNumber);
	КонецЕсли;	
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если СтрокаДерева.Тип = "ШагСценарий" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
	
КонецФункции	 

// Проверяет находится ли строка дерева в подцесценарии
&НаКлиенте
Функция СтрокаДереваНаходитсяВПодсценарии(СтрокаДерева, СтрокаПодсценария = Неопределено) Экспорт
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекСтрока = СтрокаДерева;
	
	Пока Истина Цикл
		ТекСтрока = ТекСтрока.ПолучитьРодителя();
		
		Если ТекСтрока = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ТекСтрока.Тип = "ШагСценарий" Тогда
			СтрокаПодсценария = ТекСтрока;
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции	 

// Форматирует строку текста так, чтобы она была вставлена в редактор с нужным числом отступов
&НаКлиенте
Функция ОтформатироватьТекстДляВставкиВРедактор(Знач Стр) Экспорт
	МассивСтрок = Ванесса.РазложитьСтрокуВМассивПодстрокКлиент(Стр, Символы.ПС);
	Для Сч = 0 По МассивСтрок.Количество() - 1 Цикл
		МассивСтрок[Сч] = СокрЛ(МассивСтрок[Сч]);
	КонецЦикла;	
	
	ЭкземплярVanessaEditor = Ванесса.ПолучитьVanessaEditor();
	ПозицияVanessaEditor = ЭкземплярVanessaEditor.getPosition();
	ТекущаяСтрокаVanessaEditor = ПозицияVanessaEditor.LineNumber;
	
	ТекстСтроки = ЭкземплярVanessaEditor.getLineContent(ТекущаяСтрокаVanessaEditor);
	НашлиСтроку = Ложь;
	Если НЕ ЭтоЗначимаяСтрокаVanessaEditor(ТекстСтроки) Тогда
		Пока Истина Цикл
			ТекущаяСтрокаVanessaEditor = ТекущаяСтрокаVanessaEditor - 1;
			Попытка
				ТекстСтроки = ЭкземплярVanessaEditor.getLineContent(ТекущаяСтрокаVanessaEditor);
			Исключение
				Прервать;
			КонецПопытки;
			
			Если ТекстСтроки = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
			
			Если ЭтоЗначимаяСтрокаVanessaEditor(ТекстСтроки) Тогда
				Если Лев(СокрЛ(ТекстСтроки), 1) = "|" Тогда
					Продолжить;
				КонецЕсли;	 
				
				НашлиСтроку = Истина;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	
	Иначе
		НашлиСтроку = Истина;
	КонецЕсли;	 
	
	Если НЕ НашлиСтроку Тогда
		Возврат Стр;
	КонецЕсли;
	
	Если Ванесса.Объект.ЗаменятьТабыНаПробелы Тогда
		Добавка = "    ";
	Иначе	
		Добавка = Символы.Таб;
	КонецЕсли;	 
	
	СтрокаДерева = Ванесса.СтрокаДереваПоНомеруСтрокиФичи(ТекущаяСтрокаVanessaEditor);
	
	ТекстСтроки = ЭкземплярVanessaEditor.getLineContent(ТекущаяСтрокаVanessaEditor);
	ТекстСтрокиСокрЛ = СокрЛ(ТекстСтроки);
	ОтступСтрокиСверху = Лев(ТекстСтроки, СтрДлина(ТекстСтроки) - СтрДлина(ТекстСтрокиСокрЛ));
	
	Если (СтрокаДерева <> Неопределено И СтрокаДерева.Тип = "Область") ИЛИ (Лев(ТекстСтрокиСокрЛ, 1) = "*") Тогда
		ОтступСтрокиСверху = Добавка + ОтступСтрокиСверху;
	КонецЕсли;	 
	
	Для Сч = 0 По МассивСтрок.Количество() - 1 Цикл
		ТекСтр = МассивСтрок[Сч];
		Если Лев(СокрЛ(ТекСтр), 1) = "|" Тогда
			ТекСтр = ОтступСтрокиСверху + Добавка + ТекСтр;
		Иначе	
			ТекСтр = ОтступСтрокиСверху + ТекСтр;
		КонецЕсли;	 
		МассивСтрок[Сч] = ТекСтр;
	КонецЦикла;	
	
	Возврат Ванесса.МассивВСтроку(МассивСтрок, Символы.ПС); 
	
КонецФункции	 

// Осуществляет вставку текста в редактор с учётом отступов строк
&НаКлиенте
Функция ВставитьТекстСУчетомФорматирования(Знач Стр) Экспорт
	ЭкземплярVanessaEditor = Ванесса.ПолучитьVanessaEditor();
	ПозицияVanessaEditor = ЭкземплярVanessaEditor.getPosition();
	ТекущаяСтрокаVanessaEditor = ПозицияVanessaEditor.LineNumber;
	Если НЕ ПустаяСтрока(ПозицияVanessaEditor.codeWidget) Тогда
		Возврат Стр;
	КонецЕсли;	 
	
	ЭкземплярVanessaEditor.setPosition(ТекущаяСтрокаVanessaEditor, 1, "");
	Стр = ОтформатироватьТекстДляВставкиВРедактор(СокрЛ(Стр));
	ЭкземплярVanessaEditor.insertText(Стр);
КонецФункции	 

// Обработка смены закладки редактора
&НаКлиенте
Процедура ПриСменеЗакладкиРедактора(Вкладка) Экспорт
	//проверка активной вкладки

	Ванесса.Элементы.ГруппаVanessaEditorПереходКРазличиямВФайлах.Видимость = Ванесса.ЭтоВкладкаDiff(Вкладка);

	Если Ванесса.ЭтоВкладкаEdit(Вкладка) Тогда
		Ванесса.Объект.КаталогФич = Вкладка.filename;
	Иначе	
		Ванесса.Объект.КаталогФич = "";
	КонецЕсли;	 

	Если ИмяФайлаСоответствуетПустойНовойРедактора(Ванесса.Объект.КаталогФич) Тогда
		//для новых файлов
		Ванесса.Объект.КаталогФич = "";
	КонецЕсли;	 
	ПоказатьМиниатюруКода();
	УстановитьЗаменуТабуляцииНаПробелы();
	
КонецПроцедуры 

// Активизирует вкладку редактора по заголовку
&НаКлиенте
Процедура АктивизироватьВкладкуПоЗаголовку(Стр) Экспорт
	Для Сч = 0 По Ванесса.VanessaTabs.count() - 1 Цикл
		Если НРег(Ванесса.VanessaTabs.tab(Сч).title) = НРег(Стр) Тогда
			Ванесса.VanessaTabs.select(Сч);
			Возврат;
		КонецЕсли;	 
	КонецЦикла;	
	
	ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
		Ванесса.Локализовать("Вкладка с заголовком <%1> не найдена."), Стр);
КонецПроцедуры 

// Активизирует вкладку редактора по имени файла. В параметр передаётся полный путь к файлу.
&НаКлиенте
Процедура АктивизироватьВкладкуПоИмениФайла(ИмяФайла) Экспорт
	Для Сч = 0 По Ванесса.VanessaTabs.count() - 1 Цикл
		Если НРег(Ванесса.VanessaTabs.tab(Сч).filename) = НРег(ИмяФайла) Тогда
			Ванесса.VanessaTabs.select(Сч);
			Возврат;
		КонецЕсли;	 
	КонецЦикла;	
	
	ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
		Ванесса.Локализовать("Вкладка с файлом <%1> не найдена."), ИмяФайла);
КонецПроцедуры 

//Проверяет есть ли вкладка с указанным заголовком
&НаКлиенте
Функция СуществуетВкладкаСЗаголовком(Стр) Экспорт
	
	Для Сч = 0 По Ванесса.VanessaTabs.count() - 1 Цикл
		Если НРег(Ванесса.VanessaTabs.tab(Сч).title) = НРег(Стр) Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции

//Проверяет есть ли вкладка с частью указанного заголовка
&НаКлиенте
Функция СуществуетВкладкаСЧастьюЗаголовка(Стр) Экспорт
	
	Для Сч = 0 По Ванесса.VanessaTabs.count() - 1 Цикл
		Если Найти(НРег(Ванесса.VanessaTabs.tab(Сч).title), НРег(Стр)) > 0 Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции

//Проверяет есть ли вкладка с указанным именем файла. В параметр передаётся полный путь к файлу.
&НаКлиенте
Функция СуществуетВкладкаСФайлом(ИмяФайла) Экспорт
	
	Для Сч = 0 По Ванесса.VanessaTabs.count() - 1 Цикл
		Если НРег(Ванесса.VanessaTabs.tab(Сч).filename) = НРег(ИмяФайла) Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции

// Закрывает все вкладки редактора
&НаКлиенте
Процедура ЗакрытьВсеВкладкиРедактора() Экспорт
	
	Если Ванесса.VanessaTabs = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Пока Ванесса.VanessaTabs.count() > 0 Цикл
		Попытка
			Ванесса.VanessaTabs.tab(0).close();
		Исключение
		КонецПопытки;
		
	КонецЦикла;	 
	
КонецПроцедуры 

// Возвращает текст нового сценария
&НаКлиенте
Функция ТекстНовогоСценария() Экспорт  
	
	Если ЗначениеЗаполнено(Ванесса.Объект.ПутьКШаблонуНовойФичи) Тогда 
		Возврат ПрочитатьФичуИзФайла(Ванесса.Объект.ПутьКШаблонуНовойФичи);
	КонецЕсли;
	
	Если Ванесса.Объект.ЯзыкГенератораGherkin = "en" Тогда
		Возврат 
			"#language: en
			|
			|@tree
			|
			|Functionality: <description features>
			|
			|As <Role>
			|I want <functional description>
			|To <business effect>
			|
			|Scenario: <description of the scenario>
			|"
		; 
	Иначе 
		Возврат 
			"#language: ru
			|
			|@tree
			|
			|Функционал: <описание фичи>
			|
			|Как <Роль> я хочу
			|<описание функционала> 
			|чтобы <бизнес-эффект>   
			|
			|Контекст:
			|	Дано Я запускаю сценарий открытия TestClient или подключаю уже существующий
			|
			|Сценарий: <описание сценария>
			|"
		; 
	КонецЕсли;	 
КонецФункции	 

// Проверяет, что переданная строка соответствует пустой вкладке редактора
&НаКлиенте
Функция ИмяФайлаСоответствуетПустойНовойРедактора(Стр) Экспорт
	Если Нрег(Стр) = ".feature" ИЛИ Лев(Стр,7) = "memory:" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

// Проверяет, можно ли запустить сценарий в данной вкладке редактора
&НаКлиенте
Функция МожноЗапуститьСценарийИзДаннойВкладки() Экспорт
	Если Ванесса.VanessaTabs.current = Неопределено Тогда
		// Особый случай. Нас интересуют только когда определено значение Ванесса.VanessaTabs.current.filename
		Возврат Истина;
	КонецЕсли;	 
	
	Если ИмяФайлаСоответствуетПустойНовойРедактора(Ванесса.VanessaTabs.current.filename) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если Прав(НРег(СокрЛП(Ванесса.VanessaTabs.current.filename)),8) <> ".feature" Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	 

// Выполняет стандартные действия при открытии вкладки
&НаКлиенте
Процедура ДействияПриСозданииВкладки() Экспорт
	ЭкземплярVanessaEditor = Ванесса.ПолучитьVanessaEditor();
	ЭкземплярVanessaEditor.useDebugger(Истина);
	ЭкземплярVanessaEditor.setHoverDelay(800);
КонецПроцедуры 

// Открывает окно Welcome
&НаКлиенте
Процедура ПоказатьСтраницуWelcome(НедавноЗагруженныеФичи) Экспорт

	МассивКомандЗапуска = Новый Массив;
	МассивКомандЗапуска.Добавить(Новый Структура("event,href,gliph,name", "WELCOME_LAUNCH", "VanessaEditorСоздатьНовыйСценарий(Неопределено)", "new-file", Ванесса.Локализовать("Создать feature файл…")));
	МассивКомандЗапуска.Добавить(Новый Структура("event,href,gliph,name", "WELCOME_LAUNCH", "ЗагрузитьОднуФичу(Неопределено)", "go-to-file", Ванесса.Локализовать("Открыть feature файл…")));
	МассивКомандЗапуска.Добавить(Новый Структура("event,href,gliph,name", "WELCOME_LAUNCH", "ЗагрузитьФичиИзКаталога(Неопределено)", "folder-opened", Ванесса.Локализовать("Открыть папку…")));
	МассивКомандЗапуска.Добавить(Новый Структура("event,href,gliph,name", "WELCOME_LAUNCH", "VanessaEditorБыстроСоздатьВременныйФичаФайл()", "symbol-file", Ванесса.Локализовать("Быстро создать временный feature файл…")));

	МассивФайловЗапуска = Новый Массив;
	Для Каждого Элем Из НедавноЗагруженныеФичи Цикл
		Файл = Новый Файл(Элем.Путь);
		МассивФайловЗапуска.Добавить(Новый Структура("event,href,name,path", "WELCOME_RECENT", Элем.Путь, Файл.ИмяБезРасширения, Файл.Путь));
		Если МассивФайловЗапуска.Количество() > 5 Тогда
			Прервать
		КонецЕсли;
	КонецЦикла;
	
	МассивДляОбучения = Новый Массив;
	МассивДляОбучения.Добавить(Новый Структура("event,href,gliph,name", "WELCOME_LAUNCH", "VanessaEditorОткрытьСписокУроков(Неопределено)", "mortar-board", Ванесса.Локализовать("Открыть список уроков")));
	
	МассивСекцийЗапуска = Новый Массив;
	МассивСекцийЗапуска.Добавить(Новый Структура("name,items", Ванесса.Локализовать("Запуск"), МассивКомандЗапуска));
	Если МассивФайловЗапуска.Количество() > 0 Тогда
		МассивСекцийЗапуска.Добавить(Новый Структура("name,items", Ванесса.Локализовать("Последние"), МассивФайловЗапуска));
	КонецЕсли;	 
	МассивСекцийЗапуска.Добавить(Новый Структура("name,items", Ванесса.Локализовать("Обучение"), МассивДляОбучения));
	
	МассивСоветы = Новый Массив;
	Если НЕ Ванесса.Объект.ИспользоватьКомпонентуVanessaExt Тогда
		МассивСоветы.Добавить(Новый Структура("event,href,gliph,name", "WELCOME_LAUNCH", "ВключитьИспользованиеВнешнейКомпонентыИзСтраницыWelcome()", "debug-stackframe-dot", Ванесса.Локализовать("Рекомендуется включить использование компоненты VanessaExt")));
	КонецЕсли;	 
	Если НЕ Ванесса.ЭтоLinux Тогда
		Если Ванесса.Объект.ИспользоватьКомпонентуVanessaExt Тогда
			МассивСоветы.Добавить(Новый Структура("event,href,gliph,name", "WELCOME_LAUNCH", "ДемонстрацияРаботыСправкиПоЭлементу()", "debug-stackframe-dot", Ванесса.Локализовать("Чтобы получить подробную справку об элементе формы надо навести на него курсор и нажать alt+H. Нажми на ссылку для демонстрации")));
		Иначе	
			МассивСоветы.Добавить(Новый Структура("event,href,gliph,name", "WELCOME_LAUNCH", "", "debug-stackframe-dot", Ванесса.Локализовать("Чтобы получить подробную справку об элементе формы надо навести на него курсор и нажать alt+H. Необходимо включить использование компоненты VanessaExt")));
		КонецЕсли;	 
	КонецЕсли;	 
	Если МассивСоветы.Количество() > 0 Тогда
		МассивСекцийЗапуска.Добавить(Новый Структура("name,items", Ванесса.Локализовать("Советы"), МассивСоветы));
	КонецЕсли;	 
	
    СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("title", "Vanessa Automation");
	СтруктураПараметров.Вставить("subtitle", Ванесса.Локализовать("Тесты есть!"));
	СтруктураПараметров.Вставить("sections", МассивСекцийЗапуска);
	ТекстJSON = Ванесса.ЗаписатьОбъектJSON(СтруктураПараметров);
	Ванесса.VanessaTabs.welcome(Ванесса.Локализовать("Добро пожаловать!"), ТекстJSON);
	Ванесса.Объект.КаталогФич = "";

КонецПроцедуры 

// Закрывает текущую вкладку редактора
&НаКлиенте
Процедура ЗакрытьТекущуюВкладкуРедактора() Экспорт
	Если Ванесса.VanessaTabs = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Ванесса.VanessaTabs.count() > 0 Тогда
		Попытка
			Ванесса.VanessaTabs.tab(Ванесса.VanessaTabs.count() - 1).close();
		Исключение
		КонецПопытки;
		
	КонецЕсли;
КонецПроцедуры

// Закрывает первую вкладку, у которой в заголовке содержится искомая строка
&НаКлиенте
Процедура ЗакрытьВкладкуСЧастьюЗаголовка(Стр) Экспорт
	Если Ванесса.VanessaTabs = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Для Сч = 0 По Ванесса.VanessaTabs.count() - 1 Цикл
		Если Найти(НРег(Ванесса.VanessaTabs.tab(Сч).title), НРег(Стр)) > 0 Тогда
			Ванесса.VanessaTabs.tab(Сч).close();
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Функция VanessaGherkinProvider() Экспорт
	Возврат ДокументHTMLViewРедактора().VanessaGherkinProvider;	
КонецФункции

&НаКлиенте
Функция ДокументHTMLViewРедактора() Экспорт     
	Возврат Ванесса.Элементы.VanessaEditor.Document.defaultView;
КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьГиперссылкуВРедактореПоУмолчаниюОповещение(КодВозврата, ДополнительныеПараметры) Экспорт
	Если КодВозврата <> 0 Тогда 
		Ванесса.Отладка(КодВозврата);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПервуюСтроку(Знач Стр)
	Если Найти(Стр, Символы.ПС) = 0 Тогда
		Возврат Стр; 
	КонецЕсли;	 
	
	МассивСтрок = Ванесса.РазложитьСтрокуВМассивПодстрокКлиент(Стр, Символы.ПС);
	Возврат МассивСтрок[0]; 
КонецФункции	 

&НаКлиенте
Процедура УстановитьСтатусШага(СтатусШага, ТекШаг, ЭтоТекущийШаг);
	ИдВСтрокеВиджета = Неопределено;
	ИдВиджета = Неопределено;
	ОпределитьДанныеВиджета(ИдВСтрокеВиджета, ИдВиджета, ТекШаг.ИдСтроки);
	ЭкземплярVanessaEditor = Ванесса.ПолучитьVanessaEditorВыполняемогоСценария();

	Если ИдВиджета = Неопределено Тогда
		Если НЕ ТекШаг.Свойство("ЭтоШагПодсценария") ИЛИ НЕ ТекШаг.ЭтоШагПодсценария Тогда
			Если ЭтоТекущийШаг Тогда
				ЭкземплярVanessaEditor.setCurrentProgress(ТекШаг.НомерСтрокиВФиче);
			Иначе	
				ШагиДляVanessaEditor = Новый Массив;
				ШагиДляVanessaEditor.Добавить(ТекШаг.НомерСтрокиВФиче);
				ВыполнитьsetRuntimeProgress(ЭкземплярVanessaEditor, ТекШаг, СтатусШага, ШагиДляVanessaEditor);
			КонецЕсли;	 
		Иначе
			ШагиДляVanessaEditor = Новый Массив;
			ШагиДляVanessaEditor.Добавить(ТекШаг.СтрокаШагаПодсценарияФичи);
			ВыполнитьsetRuntimeProgress(ЭкземплярVanessaEditor, ТекШаг, СтатусШага, ШагиДляVanessaEditor);
		КонецЕсли;	 
	Иначе	
		Если ЭтоТекущийШаг Тогда
			ЭкземплярVanessaEditor.setCurrentProgress(ИдВСтрокеВиджета, ИдВиджета);
		Иначе	
			ШагиДляVanessaEditor = Новый Массив;
			ШагиДляVanessaEditor.Добавить(ИдВСтрокеВиджета);
			ВыполнитьsetRuntimeProgress(ЭкземплярVanessaEditor, ТекШаг, СтатусШага, ШагиДляVanessaEditor, ИдВиджета);
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьsetRuntimeProgress(ЭкземплярVanessaEditor, ТекШаг, СтатусШага, ШагиДляVanessaEditor, Знач ИдВиджета = "");
	
	Если Ванесса.Объект.ПоказыватьЗначенияПеременныхВСтрокахРедактора Тогда
		ЭкземплярVanessaEditor.setRuntimeProgress(СтатусШага, Ванесса.ЗаписатьОбъектJSON(ШагиДляVanessaEditor), ИдВиджета, СформироватьСтрокуДляИнлайнДебага(ТекШаг));
	Иначе
		ЭкземплярVanessaEditor.setRuntimeProgress(СтатусШага, Ванесса.ЗаписатьОбъектJSON(ШагиДляVanessaEditor), ИдВиджета);
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Функция СформироватьСтрокуДляИнлайнДебага(ТекШаг)
	
	Если ТекШаг.ЗначенияПараметров.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;	 
	
	Результат = "    {";
	
	ЕстьЗначения = Ложь;
	КолПараметров = ТекШаг.ЗначенияПараметров.Количество();
	Для Сч = 0 По КолПараметров - 1 Цикл
		ТекПараметр = ТекШаг.ЗначенияПараметров[Сч];
		ПроверяемоеИмяПеременной = УбратьСпецсимволыИспользованияПеременной(ТекПараметр.Значение.Значение);
		ЗначениеПеременной = ЗначениеПеременной(ПроверяемоеИмяПеременной);
		Если ТипЗнч(ЗначениеПеременной) = Тип("Строка") Тогда
			ЗначениеПеременной = """" + ЗначениеПеременной + """";
		КонецЕсли;	 
		Если ЗначениеПеременной <> Неопределено Тогда
			ЕстьЗначения = Истина;
			Результат = Результат + """" + ПроверяемоеИмяПеременной + """: " + ЗначениеПеременной + "";
			Если Сч < КолПараметров - 1 Тогда
				Результат = Результат + ", ";
			КонецЕсли;	 
		КонецЕсли;
		
	КонецЦикла;	
	
	Если НЕ ЕстьЗначения Тогда
		Возврат ""; 
	КонецЕсли;	 
	
	Результат = Результат + "}";
	
	Возврат Результат;
КонецФункции	 

&НаКлиенте
Функция ЗначениеПеременной(ПроверяемоеИмяПеременной)
	Если ТипЗнч(ПроверяемоеИмяПеременной) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(ПроверяемоеИмяПеременной) Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если Найти(ПроверяемоеИмяПеременной, " ")  > 0 
		ИЛИ Найти(ПроверяемоеИмяПеременной, "(")  > 0 
		ИЛИ Найти(ПроверяемоеИмяПеременной, ")")  > 0 
		ИЛИ Найти(ПроверяемоеИмяПеременной, """")  > 0 
		ИЛИ Найти(ПроверяемоеИмяПеременной, "'")  > 0 
		ИЛИ Найти(ПроверяемоеИмяПеременной, "$")  > 0 
		ИЛИ Найти(ПроверяемоеИмяПеременной, "+")  > 0 
		Тогда
			Возврат Неопределено;
	КонецЕсли;	 
	
	Попытка
		Если Ванесса.ОбъектКонтекст.Свойство(ПроверяемоеИмяПеременной) Тогда
			Возврат Ванесса.ОбъектКонтекст[ПроверяемоеИмяПеременной]; 
		КонецЕсли;	 
	Исключение 
		Возврат Неопределено;
	КонецПопытки;
	
	Попытка
		Если Ванесса.ОбъектКонтекстСохраняемый.Свойство(ПроверяемоеИмяПеременной) Тогда
			Возврат Ванесса.ОбъектКонтекстСохраняемый[ПроверяемоеИмяПеременной]; 
		КонецЕсли;	 
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции	 

&НаКлиенте
Процедура ОпределитьДанныеВиджета(ИдВСтрокеВиджета, ИдВиджета, ИдСтроки)
	ИдВиджета = Ванесса.ИдВиджетаПоИдСтроки(ИдСтроки);
	Если ИдВиджета <> Неопределено Тогда
		ДанныеВиджета = Ванесса.ДанныеВиджетаПоИд(ИдВиджета);
		Если ДанныеВиджета <> Неопределено Тогда
			ИдВСтрокеВиджета = ДанныеВиджета[ИдСтроки];
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьВставкиКодаVanessaEditor(ДопПараметры)
	Если Ванесса.VanessaTabs.current = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Попытка
		Ванесса.ПолучитьVanessaEditor().clearRuntimeCodes();
	Исключение
	КонецПопытки;
	Ванесса.ОчиститьДанныеВиджетов();
	
	Если НЕ Ванесса.Объект.ПоказыватьСтрокиПодсценариевVanessaEditor Тогда
		Возврат;
	КонецЕсли;	 
	
	ОбновитьВставкиКодаVanessaEditorРекурсивно(Ванесса.Объект.ДеревоТестов, 0, ДопПараметры);
КонецПроцедуры 

&НаКлиенте
Процедура ТекстВставкиПоСтрокеДереваРекурсивно(СтрокаДерева, СтрокаОтступ, ТекстВставки, ТекУровень, ДанныеВиджета, СтрокиПодсценариев)
	Для Каждого ТекСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		ТекстВставки.Добавить(СтрокаОтступ + ТекстОтступа(ТекУровень) + ТекСтрока.Имя);
		ДанныеВиджета.Вставить(ТекСтрока.ИДСтроки, ТекстВставки.Количество());
		
		Если ТекСтрока.Тип = "ШагСценарий" Тогда
			СтрокиПодсценариев.Добавить(ТекстВставки.Количество());
		КонецЕсли;	 
		
		ТекстВставкиПоСтрокеДереваРекурсивно(ТекСтрока, СтрокаОтступ, ТекстВставки, ТекУровень + 1, ДанныеВиджета, СтрокиПодсценариев);
	КонецЦикла;	 
	
КонецПроцедуры 

&НаКлиенте
Функция ТекстОтступа(ТекУровень)
	Значение = КешОтступов[ТекУровень];
	Если Значение <> Неопределено Тогда
		Возврат Значение; 
	КонецЕсли;	 
	
	Стр = "	";
	Для Сч = 1 По ТекУровень Цикл
		Стр = Стр + "		";
	КонецЦикла;
	
	КешОтступов.Вставить(ТекУровень, Стр);
	
	Возврат Стр;
КонецФункции	 

&НаКлиенте
Функция ТекстВставкиПоСтрокеДерева(СтрокаДерева, СтрокаОтступ, ДанныеВиджета, СтрокиПодсценариев)
	ТекстВставки = Новый Массив;
	ТекстВставкиПоСтрокеДереваРекурсивно(СтрокаДерева, СтрокаОтступ, ТекстВставки, 0, ДанныеВиджета, СтрокиПодсценариев);
	
	Возврат Ванесса.МассивВСтроку(ТекстВставки, Символы.ПС); 
КонецФункции	 

&НаКлиенте
Процедура СделатьВставкуВиджетаСПодчиненнымиСтрокамиVanessaEditor(СтрокаДерева, ТекУровень, СтрокиПодсценариевВиджетов)
	ЭкземплярVanessaEditor = Ванесса.ПолучитьVanessaEditor(); 
	ТекстСтроки = ЭкземплярVanessaEditor.getLineContent(СтрокаДерева.НомерСтрокиВФиче);
	ТекстСтрокиСокрЛ = СокрЛ(ТекстСтроки);
	СтрокаОтступ = Лев(ТекстСтроки, СтрДлина(ТекстСтроки) - СтрДлина(ТекстСтрокиСокрЛ));
	ДанныеВиджета = Новый Соответствие;
	СтрокиПодсценариев = Новый Массив;
	ИДВиджета = ЭкземплярVanessaEditor.showRuntimeCode(СтрокаДерева.НомерСтрокиВФиче,
		ТекстВставкиПоСтрокеДерева(СтрокаДерева, СтрокаОтступ, ДанныеВиджета, СтрокиПодсценариев));
		
	Для Каждого НомеСтрокиВиджета Из СтрокиПодсценариев Цикл
		СтрокиПодсценариевВиджетов.Добавить(Новый Структура("НомерСтроки,ИдВиджета", НомеСтрокиВиджета, ИДВиджета));
	КонецЦикла;	 
		
	Ванесса.ДобавитьДанныеВиджета(ИДВиджета, ДанныеВиджета);	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьВставкиКодаVanessaEditorРекурсивно(СтрокаДерева, ТекУровень, ДопПараметры)
	Для Каждого ТекСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		Если ТекСтрока.Тип = "ШагСценарий" Тогда
			ДопПараметры.СтрокиПодсценариевВиджетов.Добавить(Новый Структура("НомерСтроки,ИдВиджета", ТекСтрока.НомерСтрокиВФиче, ""));
			СделатьВставкуВиджетаСПодчиненнымиСтрокамиVanessaEditor(ТекСтрока, ТекУровень, ДопПараметры.СтрокиПодсценариевВиджетов);
			Продолжить;
		ИначеЕсли ТекСтрока.Тип = "Пример" Тогда
			ТекРодитель = ТекСтрока.ПолучитьРодителя();
			ЭлементыРодителя = ТекРодитель.ПолучитьЭлементы();
			НомерСтрокиВСтрокахРодителя = ЭлементыРодителя.Индекс(ТекСтрока);
			Если НомерСтрокиВСтрокахРодителя > 0 Тогда
				СделатьВставкуВиджетаСПодчиненнымиСтрокамиVanessaEditor(ТекСтрока, ТекУровень, ДопПараметры.СтрокиПодсценариевВиджетов);
			КонецЕсли;	 
			Продолжить;
		КонецЕсли;	 
		
		ОбновитьВставкиКодаVanessaEditorРекурсивно(ТекСтрока, ТекУровень + 1, ДопПараметры);
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Процедура СкопироватьТекстОшибкиВБуферОбменаVAVanessaEditorПродолжение(Результат, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	Ванесса.СообщитьПользователю(Ванесса.Локализовать("Текст ошибки скопирован в буфер обмена."));
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКлючевыеСловаGherkin()
	ПарсерGherkin = Ванесса.МодульПарсерGherkin();
	
	КлючевыеСловаGherkin = ПарсерGherkin.КлючевыеСловаGherkin();
	
	Возврат Ванесса.ЗаписатьОбъектJSON(КлючевыеСловаGherkin); 
	
КонецФункции	 

&НаКлиенте
Функция ПолучитьКлючевыеСловаИсключенийGherkin()
	МодульПарсерФич = Ванесса.МодульПарсерФич();
	
	КлючевыеСловаИсключенийGherkin = МодульПарсерФич.КлючевыеСловаИсключенийGherkin();
	
	Возврат Ванесса.ЗаписатьОбъектJSON(КлючевыеСловаИсключенийGherkin); 
	
КонецФункции	 

&НаКлиенте
Функция ПолучитьЗначенияПеременныхVanessaEditor()
	СлужебныеПеременныеКонтекста = Ванесса.СлужебныеПеременныеКонтекста();
	
	ДанныеПеременных = Новый Соответствие;
	Для Каждого Элем Из Ванесса.ОбъектКонтекст Цикл
		Если СлужебныеПеременныеКонтекста[Элем.Ключ] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Найти(Элем.Ключ, "_Цикл_") > 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		ДанныеПеременных.Вставить(Элем.Ключ, Строка(Элем.Значение));
	КонецЦикла;	 
	Для Каждого Элем Из Ванесса.ОбъектКонтекстСохраняемый Цикл
		Если СлужебныеПеременныеКонтекста[Элем.Ключ] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Найти(Элем.Ключ, "_Цикл_") > 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		ДанныеПеременных.Вставить(Элем.Ключ, Строка(Элем.Значение));
	КонецЦикла;	 
	Возврат Ванесса.ЗаписатьОбъектJSON(ДанныеПеременных);
КонецФункции	 

&НаКлиенте
Функция ПолучитьСписокШаговVanessaEditor(Язык)
	#Если НЕ ВебКлиент Тогда
		
	СтруктураПараметров = СтруктураПараметровДляПолученияДанныхШагов(Язык);
	
	Возврат ДанныеШаговДляРедактора(СтруктураПараметров); 
	
	#КонецЕсли		
КонецФункции	 

&НаКлиенте
Функция ПолучитьСписокКомандVanessaEditor()
	КомандыVanessaEditor = Новый Массив;
	
	КомандыVanessaEditor.Добавить(Новый Структура("id, title", "ErrorDetails", Ванесса.Локализовать("Детали")));
	КомандыVanessaEditor.Добавить(Новый Структура("id, title", "Actualize", Ванесса.Локализовать("Актуализировать")));
	КомандыVanessaEditor.Добавить(Новый Структура("id, title", "CopyError", Ванесса.Локализовать("Скопировать текст ошибки")));
	
	Возврат Ванесса.ЗаписатьОбъектJSON(КомандыVanessaEditor);
КонецФункции	 

&НаКлиенте
Процедура ЧтениеДанныхТекущейФормыVanessaEditor()
 	Если Ванесса.Объект.ИдетВыполнениеСценариев Тогда
		Возврат;
	КонецЕсли;	 
	
	Данные = Ванесса.МодульИсследовательФормы().ПолучитьТекущийЭлементФормы();
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	ЗапомнитьДанныеТекущейФормыVanessaEditor(Данные, Ванесса.ЗначенияЭлементовТекущегоОкнаVanessaEditor);
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьЗначенияЭлементовТекущегоОкнаVanessaEditor()
	Возврат Ванесса.ЗаписатьОбъектJSON(Ванесса.ЗначенияЭлементовТекущегоОкнаVanessaEditor);
КонецФункции	 

&НаКлиенте
Функция ЗначениеПоляТекущегоПоляVanessaEditor(ЭлементФормы, ЭлементТаблица = Неопределено)
	ЗначениеПоля = "";
	
	Если ЭлементТаблица <> Неопределено Тогда
		ЗначениеПоля = ЭлементТаблица.ПолучитьТекстЯчейки(ЭлементФормы.Имя);
	Иначе	
		
		Если ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода Тогда
			Попытка
				ЗначениеПоля = ЭлементФормы.ПолучитьТекстРедактирования();
			Исключение
				// если поле невидимое - тогда получим представление данных
				ЗначениеПоля = ЭлементФормы.ПолучитьПредставлениеДанных();
			КонецПопытки;
		Иначе	
			ЗначениеПоля = ЭлементФормы.ПолучитьПредставлениеДанных();
		КонецЕсли;	 
	КонецЕсли;	 
	
	ЗначениеПоля = СтрЗаменить(ЗначениеПоля, Символы.ПС, "\n");
	
	Возврат ЗначениеПоля; 
КонецФункции	 

&НаКлиенте
Процедура УстановитьЗначениеТекущейФормыVanessaEditor(ЗначенияЭлементовТекущегоОкнаVanessaEditor, Ключ, Значение, БылиИзменения);
	ТекЗначение = ЗначенияЭлементовТекущегоОкнаVanessaEditor[Ключ];
	Если ТекЗначение <> Значение Тогда
		БылиИзменения = Истина;
		ЗначенияЭлементовТекущегоОкнаVanessaEditor.Вставить(Ключ, Значение);
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Функция ЭтоЗначимаяСтрокаVanessaEditor(Знач Стр)
	Если ПустаяСтрока(Стр) Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Стр = СокрЛ(Стр);
	Если Лев(Стр, 1) = "#" ИЛИ Лев(Стр, 2) = "//" Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	 

&НаКлиенте
Функция ТипШага(ДанныеШага)
	Результат = 0;
	
	Если ДанныеШага.ТипШагаВДереве = "Условие" Тогда
		Результат = 5;
	ИначеЕсли ДанныеШага.ТипШагаВДереве = "Цикл" Тогда
		Результат = 8;
	ИначеЕсли Найти(ДанныеШага.ПредставлениеТеста, "в течение") Тогда
		Результат = 7;
	ИначеЕсли Найти(ДанныеШага.ПредставлениеТеста, "файл") > 0 Тогда
		Результат = 23;
	ИначеЕсли Найти(ДанныеШага.ТипШага, "Прочее.") > 0 Тогда
		Результат = 4;
	КонецЕсли;	 
	
	Возврат Результат;
КонецФункции	 

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляПеревода(КешДанныеПеревода)
	ДанныеПеревода = Новый Структура;
	ДанныеПереводаШагов = Новый Соответствие;
	ДанныеКатегорийШагов = Новый Соответствие;
	Если ЗначениеЗаполнено(КешДанныеПеревода) Тогда
		ТаблицаПеревода = ПолучитьИзВременногоХранилища(КешДанныеПеревода.ТаблицаПеревода);
		Для Каждого СтрокаТаблицаПеревода Из ТаблицаПеревода Цикл
			//Если ПустаяСтрока(СтрокаТаблицаПеревода.КлючевоеСлово) Тогда
			//	Продолжить;
			//КонецЕсли;	 
			
			Если СтрокаТаблицаПеревода.ОригиналРусскийОписание = "Категория шагов" Тогда
				ДанныеКатегорийШагов.Вставить(СтрокаТаблицаПеревода.ОригиналРусскийШаг, СтрокаТаблицаПеревода.ТекстПереводаШаг);
				Продолжить;
			КонецЕсли;	 
			
			ДанныеШага = Новый Структура;
			ДанныеШага.Вставить("ТекстПереводаШаг", СтрокаТаблицаПеревода.ТекстПереводаШаг);
			ДанныеШага.Вставить("ТекстПереводаОписание", СтрокаТаблицаПеревода.ТекстПереводаОписание);
			ДанныеШага.Вставить("СтрокаДляПоискаПеревод", СтрокаТаблицаПеревода.СтрокаДляПоискаПеревод);
			
			ДанныеПереводаШагов.Вставить(СтрокаТаблицаПеревода.СтрокаДляПоискаРусский, ДанныеШага);
		КонецЦикла;	 
	КонецЕсли;	 
	
	ДанныеПеревода.Вставить("ДанныеПереводаШагов", ДанныеПереводаШагов);
	ДанныеПеревода.Вставить("ДанныеКатегорийШагов", ДанныеКатегорийШагов);
	
	Возврат ДанныеПеревода;
КонецФункции	

&НаКлиенте
Функция УбратьЛишниеСимволыИзПредставленияШага(Знач Стр)
	Стр = СтрЗаменить(Стр,"%1 ","");
	Стр = СтрЗаменить(Стр,"%2 ","");
	Стр = СтрЗаменить(Стр,"%3 ","");
	Стр = СтрЗаменить(Стр,"%4 ","");
	Стр = СтрЗаменить(Стр,"%5 ","");
	Стр = СтрЗаменить(Стр,"%6 ","");
	Возврат Стр;
КонецФункции	 

&НаКлиенте
Функция ПеревестиТипШага(ДанныеКатегорийШагов, Знач ТипШага)
	МассивСтрок = Ванесса.РазложитьСтрокуВМассивПодстрокКлиент(ТипШага, ".");
	Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
		ЗначениеПеревода = ДанныеКатегорийШагов[МассивСтрок[Сч]];
		Если ЗначениеПеревода = Неопределено Тогда
			МассивСтрок[Сч] = "";
			Продолжить;
		КонецЕсли;	 
		
		МассивСтрок[Сч] = ЗначениеПеревода;
	КонецЦикла;	
	
	Результат = Ванесса.МассивВСтроку(МассивСтрок, ".");
	Если Прав(Результат, 1) = "." Тогда
		Результат = Лев(Результат, СтрДлина(Результат) - 1)
	КонецЕсли;	 
	Возврат Результат;
	
КонецФункции	 

&НаКлиенте
Функция ПолучитьСтрокуСортировки(Знач Стр)
	Стр = СтрЗаменить(Стр,"с именем ","");
	Возврат Стр; 
КонецФункции	 

&НаКлиенте
Функция СтруктураПараметровДляПолученияДанныхШагов(Язык)
	МодульПарсерФич = Ванесса.МодульПарсерФич();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТаблицаИзвестныхStepDefinition", Ванесса.ТаблицаИзвестныхStepDefinition);
	СтруктураПараметров.Вставить("ТаблицаУжеСуществующихСценариев", Ванесса.ТаблицаУжеСуществующихСценариев());
	СтруктураПараметров.Вставить("МодульПарсерФич", МодульПарсерФич);
	СтруктураПараметров.Вставить("Язык", Язык);
	СтруктураПараметров.Вставить("Ванесса", Ванесса);
	
	Если Язык <> "ru" Тогда
		Ванесса.ПеревестиТекст("", Язык);
		СтруктураПараметров.Вставить("КешДанныеПеревода", Ванесса.КешДанныеПеревода());
	КонецЕсли;	 
	
	Возврат СтруктураПараметров; 
КонецФункции	 

&НаКлиенте
Процедура ПоказатьОшибкуВРедактореVanessaEditor(НомерСтрокиВФиче, ИдВиджета, ДанныеПоОшибке, ТекстОшибки, ТекШаг, СтрокаШага)
	Если ТекШаг <> Неопределено Тогда
		Ванесса.СохранитьДанныеОбОшибкеVanessaEditor(ТекШаг, ДанныеПоОшибке, ТекстОшибки, СтрокаШага);
	КонецЕсли;	 
	Ванесса.ПолучитьVanessaEditorВыполняемогоСценария().showRuntimeError(НомерСтрокиВФиче, ИдВиджета, Ванесса.ЗаписатьОбъектJSON(ДанныеПоОшибке),
		ПолучитьПервуюСтроку(ТекстОшибки));
КонецПроцедуры 

&НаКлиенте
Процедура ВопросВключитьКомпонентуПродолжение(РезультатВопроса, ДанныеОшибки) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ПараметрыПодключенияКомпоненты = Новый Структура;
		ПараметрыПодключенияКомпоненты.Вставить("ПоместитьТекстОшибкиВБуферОбмена", Истина);
		ПараметрыПодключенияКомпоненты.Вставить("ДанныеОшибки", ДанныеОшибки);
		Ванесса.ВыполнитьПодключениеВнешнейКомпоненты(ПараметрыПодключенияКомпоненты);
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьОбъектВБазеМенеджераТестирования(Знач Стр)
	
	GUID = Неопределено;
	ПозицияНачало = Найти(Стр, "?ref=");
	Если ПозицияНачало <> 0 Тогда      
		Уид = Сред(Стр, ПозицияНачало + 5, 32);
		УидСтрока = Прав(Уид, 8)
		+ "-" + Сред(Уид, 21, 4)
		+ "-" + Сред(Уид, 17, 4)
		+ "-" + Лев(Уид, 4)
		+ "-" + Сред(Уид, 5, 12);
		GUID = Новый УникальныйИдентификатор(УидСтрока);
	КонецЕсли;
	
	Если GUID = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Стр = СтрЗаменить(Стр, "e1cib/data/", "");
	Поз = Найти(Стр, ".");
	Тип = Лев(Стр, Поз - 1);
	Стр = Сред(Стр, Поз + 1);
	Поз = Найти(Стр, "?");
	Вид = Лев(Стр, Поз - 1);
	
	Если НРег(Тип) = "справочник" Тогда
		Тип = "Справочники";
	ИначеЕсли НРег(Тип) = "документ" Тогда
		Тип = "Документы";
	ИначеЕсли НРег(Тип) = "catalog" Тогда
		Тип = "Справочники";
	ИначеЕсли НРег(Тип) = "document" Тогда
		Тип = "Документы";
	КонецЕсли;	 
	
	Ссылка = СсылкаПоUIDСервер(Тип, Вид, GUID);
	Если Ссылка <> Неопределено Тогда
		ПоказатьЗначение(, Ссылка);
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФормуСпискаВБазеМенеджераТестирования(Знач Стр)
	Стр = СтрЗаменить(Стр, "e1cib/list/", "");
	Поз = Найти(Стр, ".");
	Тип = Лев(Стр, Поз - 1);
	Вид = Сред(Стр, Поз + 1);
	
	ОткрытьФорму(Тип + "." + Вид + ".ФормаСписка");
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция СсылкаПоUIDСервер(Тип, Вид, GUID)
	Попытка
		Возврат Вычислить(Тип + "." + Вид + ".ПолучитьСсылку(GUID)");
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
КонецФункции	 

&НаКлиенте
Функция УниверсальноеИмяФайла(Стр)
	Возврат НРег(СтрЗаменить(Стр, "\", "/")); 
КонецФункции	 

&НаКлиенте
Процедура АктивизироватьТекущуюСтрокуИлиБлижайшуюСверху(НомерСтроки)
	
	ТекНомерСтроки = НомерСтроки;
	Пока Истина Цикл
		
		ПолучилосьАктивиировать = Ванесса.СделатьСтрокуДереваТекущейПоНомеруСтрокиФичи(ТекНомерСтроки);
		Если ПолучилосьАктивиировать Тогда
			Прервать;
		КонецЕсли;
		
		ТекНомерСтроки = ТекНомерСтроки - 1;
		Если ТекНомерСтроки < 0 Тогда
			Прервать;
		КонецЕсли;	 
		
	КонецЦикла;	
	
КонецПроцедуры 

&НаКлиенте
//Получаем шаблон новой фичи из выбранного текстового файла 
Функция ПрочитатьФичуИзФайла(ПутьКФайлу) 
	
	ВыбФайл = Новый Файл(ПутьКФайлу);
	
	Если ВыбФайл.Существует() Тогда //проверка на существование файла
		
		Текст = Новый ЧтениеТекста(ПутьКФайлу);
		
		Строка = Текст.ПрочитатьСтроку();  
		
		ТекстФичи = Строка;
		
		Пока Строка <> Неопределено Цикл //строки читаются до символа перевода строки
						
			Строка = Текст.ПрочитатьСтроку(); 
			ТекстФичи = ТекстФичи + Символы.ПС + Строка;
			
		КонецЦикла;
		
	Иначе
		
		Ванесса.СообщитьПользователю(Ванесса.Локализовать("Файл с шаблоном не найден."));
		
	КонецЕсли; 
	
	Возврат ТекстФичи;
	
КонецФункции

&НаКлиенте
Функция УбратьСпецсимволыИспользованияПеременной(Стр)
	
	Если Лев(Стр, 2) = "$$" И Прав(Стр, 2) = "$$" Тогда
		Возврат Сред(Стр, 3, СтрДлина(Стр) - 4);
	КонецЕсли;	 
	
	Если Лев(Стр, 1) = "$" И Прав(Стр, 1) = "$" Тогда
		Возврат Сред(Стр, 2, СтрДлина(Стр) - 2);
	КонецЕсли;
	
	Возврат Стр;
	
КонецФункции	

#КонецОбласти
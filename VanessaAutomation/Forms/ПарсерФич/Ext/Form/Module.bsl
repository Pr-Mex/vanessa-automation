#Область ОписаниеПеременных

&НаКлиенте
Перем Ванесса;

&НаКлиенте
Перем СоответствиеТаблицПереводов;

&НаКлиенте
Перем ПредставлениеДвойнойСлеш;

&НаКлиенте
Перем ПредставлениеВертЧертыВТабДок;

&НаКлиенте
Перем ПредставлениеАпостроф;

&НаКлиенте
Перем ПредставлениеКавычка;

&НаКлиенте
Перем ПредставлениеВертикальнаяЧерта;

&НаКлиенте
Перем ПредставлениеТире;

&НаКлиенте
Перем ТипЧисло;

&НаКлиенте
Перем ТекущийЯзыкФичаФайла;
#КонецОбласти

#Область ЭкспортныеПроцедурыИФункции

&НаКлиенте
Процедура РассчитатьДанныеСтрокиДереваКлиент(ДанныеФичи, ДанныеСтрокиФичи, СтрокаДеревоЭлементы, КонтекстВанесса, СтруктураПараметров) Экспорт
	ПредставлениеВертЧертыВТабДок  = "__&ВертЧерта__";
	ПредставлениеАпостроф          = "__&Апостроф__";
	ПредставлениеКавычка           = "__&Кавычка__";
	ПредставлениеДвойнойСлеш       = "__&ДвойнойСлеш__";
	ПредставлениеВертикальнаяЧерта = "__&ВертикальнаяЧерта__";
	ПредставлениеТире              = "__&Тире__";
	ТипЧисло  = Новый ОписаниеТипов("Число");
	ТекущийЯзыкФичаФайла = ДанныеФичи.ЯзыкФичи;
	
	Ванесса = КонтекстВанесса;
	
	РассчитатьДанныеСтрокиДереваСлужебный(ДанныеФичи, ДанныеСтрокиФичи, СтрокаДеревоЭлементы, СтруктураПараметров);
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


&НаКлиенте
Функция ПолучитьКлючевоеСлово(ДанныеФичи, Стр, ВтораяЧастьСтрокиПозиция=1,ПервоеСлово = Неопределено)
	Символ = Лев(Стр,1);
	
	Если Символ = "" ИЛИ Символ = "#"  ИЛИ Символ = "@" ИЛИ Символ = "*" ИЛИ Символ = "|" ИЛИ Лев(Стр,2) = "//" Тогда
		Возврат "";
	КонецЕсли;	 
	
	
	Если СоответствиеТаблицПереводов = Неопределено Тогда
		СоответствиеТаблицПереводов = Новый Соответствие;
		СоответствиеТаблицПереводов.Вставить("ru", СоздатьТаблицуКлючевыхСлов_ru());
		СоответствиеТаблицПереводов.Вставить("uk", СоздатьТаблицуКлючевыхСлов_uk());
		СоответствиеТаблицПереводов.Вставить("en", СоздатьТаблицуКлючевыхСлов_en());
		СоответствиеТаблицПереводов.Вставить("ro", СоздатьТаблицуКлючевыхСлов_ro());
		СоответствиеТаблицПереводов.Вставить("de", СоздатьТаблицуКлючевыхСлов_de());
		СоответствиеТаблицПереводов.Вставить("lv", СоздатьТаблицуКлючевыхСлов_lv());
		СоответствиеТаблицПереводов.Вставить("it", СоздатьТаблицуКлючевыхСлов_it());
		СоответствиеТаблицПереводов.Вставить("pl", СоздатьТаблицуКлючевыхСлов_pl());
		СоответствиеТаблицПереводов.Вставить("vi", СоздатьТаблицуКлючевыхСлов_vi());
	КонецЕсли;	 
	
	ДанныеПеревода      = СоответствиеТаблицПереводов.Получить(ДанныеФичи.ЯзыкФичи);
	ТаблицаКлючевыхСлов = ДанныеПеревода.ТаблицаКлючевыхСлов;
	
	Если ПервоеСлово <> Неопределено Тогда
		ПервоеСловоПоиск = СтрЗаменить(ПервоеСлово,":","");
		СтрТаблицаКлючевыхСлов = ТаблицаКлючевыхСлов.Найти(НРег(ПервоеСловоПоиск),"Слово");
		Если СтрТаблицаКлючевыхСлов <> Неопределено и СтрТаблицаКлючевыхСлов.Уникально Тогда
			ВтораяЧастьСтрокиПозиция = СтрДлина(ПервоеСловоПоиск)+1;
			Возврат СтрТаблицаКлючевыхСлов.Тип;
		КонецЕсли;	 
	КонецЕсли;	 
	
	//поиск в кеше
	//МаксДлинаСлова = ДанныеПеревода.МаксДлинаСлова;
	//
	//ПодСтрока = Лев(Стр,МаксДлинаСлова);
	//СтрТаблицаКешПервыхСлов = ТаблицаКешПервыхСлов.Найти(ПодСтрока,"ПерваяЧастьСтроки");
	//Если СтрТаблицаКешПервыхСлов <> Неопределено Тогда
	//	ВтораяЧастьСтрокиПозиция = СтрДлина(СтрТаблицаКешПервыхСлов.Слово)+1;
	//	Возврат СтрТаблицаКешПервыхСлов.Тип;
	//КонецЕсли;	 
	
	НРег_Стр = НРег(Стр);
	
	Для каждого СтрТаблицаКлючевыхСлов Из ТаблицаКлючевыхСлов Цикл
		Позиция = Найти(НРег_Стр, СтрТаблицаКлючевыхСлов.Ключ);
		Если Позиция = 1 Тогда
			ВтораяЧастьСтрокиПозиция = СтрДлина(СтрТаблицаКлючевыхСлов.Ключ)+1;
			
			//Если СтрДлина(СтрТаблицаКлючевыхСлов.Слово) < МаксДлинаСлова Тогда
			//	СтрТаблицаКешПервыхСлов = ТаблицаКешПервыхСлов.Добавить();
			//	СтрТаблицаКешПервыхСлов.ПерваяЧастьСтроки = Подстрока;
			//	СтрТаблицаКешПервыхСлов.Слово             = СтрТаблицаКлючевыхСлов.Слово;
			//	СтрТаблицаКешПервыхСлов.Позиция           = ВтораяЧастьСтрокиПозиция;
			//	СтрТаблицаКешПервыхСлов.Тип               = СтрТаблицаКлючевыхСлов.Тип;
			//КонецЕсли;	 
			
			Возврат СтрТаблицаКлючевыхСлов.Значение.Тип;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
КонецФункции

&НаКлиенте
Процедура ОбработатьСтрокиЭмуляцияRegExp(Стр,ПараметрыСтроки,Символ,ДелатьОберткуПараметров = Ложь);
	ПромСтр     = Стр;
	НоваяСтрока = "";
	
	ПромСтр     = СтрЗаменить(ПромСтр,"\\",ПредставлениеДвойнойСлеш);
	
	ПромСтр     = СтрЗаменить(ПромСтр,"\'",ПредставлениеАпостроф);
	ПромСтр     = СтрЗаменить(ПромСтр,"\""",ПредставлениеКавычка);
	ПромСтр     = СтрЗаменить(ПромСтр,"\|",ПредставлениеВертикальнаяЧерта);
	
	ПромСтр     = СтрЗаменить(ПромСтр,ПредставлениеДвойнойСлеш,"\\");
	
	Поз         = Найти(ПромСтр,Символ);
	
	Если Поз = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	Пока Поз > 0 Цикл
		НоваяСтрока = НоваяСтрока + Лев(ПромСтр,Поз-1);
		ПромСтр     = Сред(ПромСтр,Поз+1);
		
		Поз = Найти(ПромСтр,Символ);
		Если Поз > 0 Тогда
			ЗначениеПараметра = Лев(ПромСтр,Поз-1);
			ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра,ПредставлениеАпостроф,"'");
			ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра,ПредставлениеКавычка,"""");
			ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра,ПредставлениеВертикальнаяЧерта,"|");
			ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра,"\\","\");
			ПараметрыСтроки.Добавить(ЗначениеПараметра);
			
			СтрКолПараметров = "";
			Если ДелатьОберткуПараметров Тогда
				СтрКолПараметров = XMLСтрока(ПараметрыСтроки.Количество());
			КонецЕсли;	 
			
			ПромСтр = Сред(ПромСтр,Поз+1);
			Если Лев(ПромСтр,1) <> " " Тогда
				ПромСтр = " " + ПромСтр;
			КонецЕсли;	 
			
			Если Прав(НоваяСтрока,1) <> " " Тогда
				НоваяСтрока = НоваяСтрока + " ";
			КонецЕсли;	 
			
			Если Символ = "'" Тогда
				НоваяСтрока = НоваяСтрока + "||ПараметрСтрокаА" + СтрКолПараметров + "||";
			Иначе	
				НоваяСтрока = НоваяСтрока + "||ПараметрСтрокаК" + СтрКолПараметров + "||";
			КонецЕсли; 
			
		Иначе
			НоваяСтрока = НоваяСтрока + ПромСтр;
		КонецЕсли;	 
		
		
		Поз = Найти(ПромСтр,Символ);
		Если Поз = 0 Тогда
			НоваяСтрока               = НоваяСтрока + ПромСтр;
		КонецЕсли;	 
	КонецЦикла;
	
	Стр = НоваяСтрока;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПараметрыИменованные(Стр,ПараметрыИменованные)
	
	МассивТекПараметров = Новый Массив;
	
	Пока Истина Цикл
		Поз1 = Найти(Стр,"<");
		Поз2 = Найти(Стр,">");
		
		Если (Поз1 > 0) И (Поз2 > 0) и ((Поз2-Поз1) > 1) Тогда
			СтрПараметр = (Сред(Стр,Поз1+1,Поз2-Поз1-1));
			
			//ПараметрыИменованные.Добавить(СтрПараметр);
			
			
			ТекПараметр = "|||"+СтрПараметр + "|||";
			
			СтруктураПараметра = Новый Структура;
			СтруктураПараметра.Вставить("Имя",СтрЗаменить(СтрПараметр," ","|||ЗаменаПробела|||"));
			СтруктураПараметра.Вставить("ЗначениеВСтроке",ТекПараметр);
			
			МассивТекПараметров.Добавить(СтруктураПараметра);
			
			
			Стр = СтрЗаменить(Стр,"<" + СтрПараметр + ">",ТекПараметр);
			
			//ПромСтр = Сред(ПромСтр,Поз2+1);
		Иначе	
			Прервать;
		КонецЕсли; 
		
	КонецЦикла;
	
	Ном = 0;
	Для каждого Элем Из МассивТекПараметров Цикл
		Ном = Ном+1;
		//КолПараметровСтр = Ном;
		//Если СтрДлина(КолПараметровСтр) = 1 Тогда
		//	КолПараметровСтр = "0" + КолПараметровСтр;
		//КонецЕсли;
		Стр = СтрЗаменить(Стр,Элем.ЗначениеВСтроке,"<" + Элем.Имя + ">");
		
		ПараметрыИменованные.Добавить(Элем.Имя);
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоЦелоеЧисло(Стр)
	Для Ккк = 1 По СтрДлина(Стр) Цикл
		Символ = Сред(Стр,Ккк,1);
		Если    Символ = "0"
			Или Символ = "1"
			Или Символ = "2"
			Или Символ = "3"
			Или Символ = "4"
			Или Символ = "5"
			Или Символ = "6"
			Или Символ = "7"
			Или Символ = "8"
			Или Символ = "9"
			Тогда
			//это цифра
		Иначе
			Возврат Ложь;	
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ОбработатьДатыЭмуляцияRegExp(Стр,ПараметрыДаты,ДелатьОберткуПараметров = Ложь)
	Массив = Ванесса.РазложитьСтрокуВМассивПодстрокКлиент(Стр,".");
	
	Для Ккк = 0 По Массив.Количество()-1-2 Цикл
		Элем1 = Прав(Массив[Ккк],2);
		Элем2 = Массив[Ккк+1];
		Элем3 = Лев(Массив[Ккк+2],4);
		Если СтрДлина(Элем3) < 4 Тогда
			Элем3 = Лев(Массив[Ккк+2],2);
		КонецЕсли;	 
		Если СтрДлина(Элем3) = 4 Тогда
			Если НЕ ЭтоЦелоеЧисло(Элем3) Тогда
				Элем3 = Лев(Массив[Ккк+2],2);
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если СтрДлина(Элем1) <>  2 Тогда
			Продолжить;
		КонецЕсли;	 
		Если СтрДлина(Элем2) <>  2 Тогда
			Продолжить;
		КонецЕсли;	 
		Если (СтрДлина(Элем3) = 2) или (СтрДлина(Элем3) = 4) Тогда
		Иначе
			Продолжить;
		КонецЕсли;	 
		
		Если НЕ ЭтоЦелоеЧисло(Элем1) Тогда
			Продолжить;
		КонецЕсли;	 
		Если НЕ ЭтоЦелоеЧисло(Элем2) Тогда
			Продолжить;
		КонецЕсли;	 
		Если НЕ ЭтоЦелоеЧисло(Элем3) Тогда
			Продолжить;
		КонецЕсли;	 
		
		
		СтрДат = "" + Элем1 + "." + Элем2 + "." +Элем3;
		
		Поз = Найти(Стр,СтрДат);
		Если Поз > 0 Тогда
			ПараметрыДаты.Добавить(СтрДат);
			
			СтрКолПараметров = "";
			Если ДелатьОберткуПараметров Тогда
				СтрКолПараметров = XMLСтрока(ПараметрыДаты.Количество());
			КонецЕсли;	 
			
			//Если ДелатьОберткуПараметров Тогда
			//	Стр = Лев(Стр,Поз-1) + " *||*ПараметрДата" + ПараметрыДаты.Количество() + "*||* " + Сред(Стр,Поз+СтрДлина(СтрДат));
			//Иначе	
				Стр = Лев(Стр,Поз-1) + " ||ПараметрДата" + СтрКолПараметров + "|| " + Сред(Стр,Поз+СтрДлина(СтрДат));
			//КонецЕсли;	 
			//Сообщить("ЗначениеПараметра="+СтрДат);
			ОбработатьДатыЭмуляцияRegExp(Стр,ПараметрыДаты,ДелатьОберткуПараметров);
			Прервать;
		КонецЕсли;	 
		
		//Если ЭтоЦелоеЧисло(Элем1) и  Тогда
		//КонецЕсли;	 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоКорректноеЧисло(Стр)
	Если ПустаяСтрока(Стр) или (Стр = "-") или (Стр = "+") Тогда Возврат Ложь; КонецЕсли;	 
		
	Если Стр = "0" Тогда Возврат Истина; КонецЕсли;
	
	Результат = ТипЧисло.ПривестиЗначение(Стр);
	Если Результат = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ОбработатьЧислаЭмуляцияRegExp(Стр,ПараметрыЧисла,ДелатьОберткуПараметров = Ложь)
	ПромСтр           = Стр;
	СтрокаРезультат   = "";
	НакопленнаяСтрока = "";
	ПредыдущийСимвол = Неопределено;
	
	МассивСтрок = Ванесса.РазложитьСтрокуВМассивПодстрокКлиент(Стр," ",Истина);
	Для Каждого НакопленнаяСтрока Из МассивСтрок Цикл
		Если ЭтоКорректноеЧисло(НакопленнаяСтрока) Тогда
			ПараметрыЧисла.Добавить(НакопленнаяСтрока);
			
			СтрКолПараметров = "";
			Если ДелатьОберткуПараметров Тогда
				СтрКолПараметров = XMLСтрока(ПараметрыЧисла.Количество());
			КонецЕсли;	 
			
			СтрокаРезультат = СтрокаРезультат + " ||ПараметрЧисло" + СтрКолПараметров + "|| ";
		Иначе
			СтрокаРезультат = СтрокаРезультат + " " + НакопленнаяСтрока;
		КонецЕсли;	 
	КонецЦикла;	
	
	Стр = СокрЛ(СтрокаРезультат);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьСтрокуСОберткойПараметров(Стр,ПараметрыСтрокиА,ПараметрыСтрокиК,ПараметрыДаты,ПараметрыЧисла)
	Ном = 0;
	Для Каждого ЗначениеПараметра Из ПараметрыСтрокиА Цикл
		Ном    = Ном + 1;
		СтрНом = XMLСтрока(Ном);
		Символ = "'";
		Стр = СтрЗаменить(Стр,"||ПараметрСтрокаА" + СтрНом + "||","*||*" + Символ + ЗначениеПараметра + Символ +  "*||*");
	КонецЦикла;	
	
	Ном = 0;
	Для Каждого ЗначениеПараметра Из ПараметрыСтрокиК Цикл
		Ном    = Ном + 1;
		СтрНом = XMLСтрока(Ном);
		Символ = """";
		Стр = СтрЗаменить(Стр,"||ПараметрСтрокаК" + СтрНом + "||","*||*" + Символ + ЗначениеПараметра + Символ +  "*||*");
	КонецЦикла;	
	
	Ном = 0;
	Для Каждого ЗначениеПараметра Из ПараметрыДаты Цикл
		Ном    = Ном + 1;
		СтрНом = XMLСтрока(Ном);
		Стр = СтрЗаменить(Стр,"||ПараметрДата" + СтрНом + "||","*||*" + ЗначениеПараметра + "*||*");
	КонецЦикла;	
	
	Ном = 0;
	Для Каждого ЗначениеПараметра Из ПараметрыЧисла Цикл
		Ном    = Ном + 1;
		СтрНом = XMLСтрока(Ном);
		Стр = СтрЗаменить(Стр,"||ПараметрЧисло" + СтрНом + "||","*||*" + ЗначениеПараметра + "*||*");
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьЗапрещенныеСимволыИзStepDefinition(StepDefinition,ДелатьОберткуПараметров = Ложь,ДопПараметры = Неопределено) 
	StepDefinition = СтрЗаменить(StepDefinition,".","");
	StepDefinition = СтрЗаменить(StepDefinition,",","");
	StepDefinition = СтрЗаменить(StepDefinition,":","");
	StepDefinition = СтрЗаменить(StepDefinition,";","");
	StepDefinition = СтрЗаменить(StepDefinition,"+","");
	StepDefinition = СтрЗаменить(StepDefinition,"/","");
	StepDefinition = СтрЗаменить(StepDefinition,"\","");
	StepDefinition = СтрЗаменить(StepDefinition,"=","");
	StepDefinition = СтрЗаменить(StepDefinition,"!","");
	StepDefinition = СтрЗаменить(StepDefinition,"@","");
	StepDefinition = СтрЗаменить(StepDefinition,"#","");
	StepDefinition = СтрЗаменить(StepDefinition,"$","");
	StepDefinition = СтрЗаменить(StepDefinition,"%","");
	StepDefinition = СтрЗаменить(StepDefinition,"^","");
	StepDefinition = СтрЗаменить(StepDefinition,"&","");
	StepDefinition = СтрЗаменить(StepDefinition,"(","");
	StepDefinition = СтрЗаменить(StepDefinition,")","");
	StepDefinition = СтрЗаменить(StepDefinition,"№","");
	StepDefinition = СтрЗаменить(StepDefinition,"?","");
	StepDefinition = СтрЗаменить(StepDefinition,"`","");
	StepDefinition = СтрЗаменить(StepDefinition,"'","");
	StepDefinition = СтрЗаменить(StepDefinition,"~","");
	StepDefinition = СтрЗаменить(StepDefinition,Символы.НПП," ");
	StepDefinition = СтрЗаменить(StepDefinition,"<","");
	StepDefinition = СтрЗаменить(StepDefinition,">","");
	

	StepDefinition = СтрЗаменить(StepDefinition,"-","_");
	
	Если Не ДелатьОберткуПараметров Тогда
		StepDefinition = СтрЗаменить(StepDefinition,"*","");
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ЭмуляцияRegExp(Стр,ПараметрыСтрокиА,ПараметрыСтрокиК,ПараметрыЧисла,ПараметрыДаты,ПараметрыИменованные,ДелатьОберткуПараметров = Ложь,ДопПараметры = Неопределено)
	ОбработатьСтрокиЭмуляцияRegExp(Стр,ПараметрыСтрокиА,"'",ДелатьОберткуПараметров);
	ОбработатьСтрокиЭмуляцияRegExp(Стр,ПараметрыСтрокиК,"""",ДелатьОберткуПараметров);
	ОбработатьПараметрыИменованные(Стр,ПараметрыИменованные);
	ОбработатьДатыЭмуляцияRegExp(Стр,ПараметрыДаты,ДелатьОберткуПараметров);
	ОбработатьЧислаЭмуляцияRegExp(Стр,ПараметрыЧисла,ДелатьОберткуПараметров);
	//УбратьЗапрещенныеСимволыИзStepDefinition(Стр,,ДопПараметры);
	
	
	Если ДелатьОберткуПараметров Тогда
		ПодготовитьСтрокуСОберткойПараметров(Стр,ПараметрыСтрокиА,ПараметрыСтрокиК,ПараметрыДаты,ПараметрыЧисла);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Функция ДобавитьНолейВСтроку(Знач Стр,Длина);
	Пока СтрДлина(Стр) < Длина Цикл
		Стр = "0" + Стр;
	КонецЦикла;
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Функция ДобавитьПараметрStepDefinition(Знач Стр,КолПараметров) Экспорт
	КолПараметровСтр = СокрЛП(КолПараметров);
	КолПараметровСтр = ДобавитьНолейВСтроку(КолПараметровСтр,2);
	//Если СтрДлина(КолПараметровСтр) = 1 Тогда
	//	КолПараметровСтр = "0" + КолПараметровСтр;
	//КонецЕсли;
	
	Если (Найти(Стр,"||ПараметрЧисло||") > 0) или (Найти(Стр,"||ПараметрСтрокаА||") > 0) или (Найти(Стр,"||ПараметрСтрокаК||") > 0) или (Найти(Стр,"||ПараметрДата||") > 0) Тогда
		Стр = СтрЗаменить(Стр,"||Параметр","||Парам" + КолПараметровСтр) + ",";
	Иначе	
		Стр = Стр + ",";
	КонецЕсли;	 
	Стр = СтрЗаменить(Стр,"|","");
	Стр = СтрЗаменить(Стр,">","");
	Стр = СтрЗаменить(Стр,"<","");
	
	Возврат Стр;
КонецФункции

&НаКлиенте
Функция СделатьПервуюБуквуЗаглавной(Стр) Экспорт
	Если СтрДлина(Стр) = 0 Тогда
		Возврат Стр;
	КонецЕсли;
	
	ПерваяБуква = ВРег(Лев(Стр,1));
	
	Возврат ПерваяБуква + Сред(Стр,2);
КонецФункции

&НаКлиенте
Процедура ПроверкаКорректностиStepDefinition(StepDefinition)
	ПервыйСимвол = Лев(StepDefinition,1);
	Если ЭтоЦелоеЧисло(ПервыйСимвол) Тогда
		StepDefinition = "_" + StepDefinition;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Функция ПолучитьStepDefinitionПоСтроке(Знач Стр, ЗначенияПараметров, СтрокаПараметров = "",
	                            ЕстьПараметрыТаблицы = Ложь,КоличествоПараметровТаблица = 0,
								ДанныеОбработкиПараметров = Неопределено, СтруктураПараметров = Неопределено) 
	
	//СтрокаКеш = Стр + "_" + ЕстьПараметрыТаблицы + "_" + КоличествоПараметровТаблица;
	//КешСнипетов = СтруктураПараметров.КешСнипетов;
	//ДанныеКеш = КешСнипетов[СтрокаКеш];
	//Если ДанныеКеш <> Неопределено Тогда
	//	Если ДанныеКеш.Свойство("ЗначенияПараметров") Тогда
	//		ЗначенияПараметров = ДанныеКеш.ЗначенияПараметров;
	//	КонецЕсли;	 
	//	СтрокаПараметров = ДанныеКеш.СтрокаПараметров;
	//	
	//	Если ДанныеОбработкиПараметров <> Неопределено Тогда
	//		ДанныеОбработкиПараметров.Вставить("ОбработаннаяСтрокаПараметров",ДанныеКеш.ОбработаннаяСтрокаПараметров);
	//		Если ДанныеКеш.Свойство("ЗначенияПараметров") Тогда
	//			ДанныеОбработкиПараметров.Вставить("ЗначенияПараметров",ДанныеКеш.ЗначенияПараметров);
	//		Иначе	
	//			ДанныеОбработкиПараметров.Вставить("ЗначенияПараметров",ЗначенияПараметров);
	//		КонецЕсли;	 
	//		
	//		Если ДанныеКеш.Свойство("ПараметрыЧисла") Тогда
	//			ДанныеОбработкиПараметров.Вставить("ПараметрыЧисла",ДанныеКеш.ПараметрыЧисла);
	//		Иначе	
	//			ДанныеОбработкиПараметров.Вставить("ПараметрыЧисла",Новый Массив);
	//		КонецЕсли;	 
	//		
	//		Если ДанныеКеш.Свойство("ПараметрыСтрокиА") Тогда
	//			ДанныеОбработкиПараметров.Вставить("ПараметрыСтрокиА",ДанныеКеш.ПараметрыСтрокиА);
	//		Иначе	
	//			ДанныеОбработкиПараметров.Вставить("ПараметрыСтрокиА",Новый Массив);
	//		КонецЕсли;	 
	//		
	//		Если ДанныеКеш.Свойство("ПараметрыСтрокиК") Тогда
	//			ДанныеОбработкиПараметров.Вставить("ПараметрыСтрокиК",ДанныеКеш.ПараметрыСтрокиК);
	//		Иначе	
	//			ДанныеОбработкиПараметров.Вставить("ПараметрыСтрокиК",Новый Массив);
	//		КонецЕсли;	 
	//		
	//		Если ДанныеКеш.Свойство("ПараметрыДаты") Тогда
	//			ДанныеОбработкиПараметров.Вставить("ПараметрыДаты",ДанныеКеш.ПараметрыДаты);
	//		Иначе	
	//			ДанныеОбработкиПараметров.Вставить("ПараметрыДаты",Новый Массив);
	//		КонецЕсли;	 
	//		
	//		Если ДанныеКеш.Свойство("ПараметрыИменованные") Тогда
	//			ДанныеОбработкиПараметров.Вставить("ПараметрыИменованные",ДанныеКеш.ПараметрыИменованные);
	//		Иначе	
	//			ДанныеОбработкиПараметров.Вставить("ПараметрыИменованные",Новый Массив);
	//		КонецЕсли;	 
	//		
	//		
	//		//ДанныеОбработкиПараметров.Вставить("ПараметрыЧисла",ДанныеКеш.ПараметрыЧисла);
	//		//ДанныеОбработкиПараметров.Вставить("ПараметрыСтрокиА",ДанныеКеш.ПараметрыСтрокиА);
	//		//ДанныеОбработкиПараметров.Вставить("ПараметрыСтрокиК",ДанныеКеш.ПараметрыСтрокиК);
	//		//ДанныеОбработкиПараметров.Вставить("ПараметрыДаты",ДанныеКеш.ПараметрыДаты);
	//		//ДанныеОбработкиПараметров.Вставить("ПараметрыИменованные",ДанныеКеш.ПараметрыИменованные);
	//	КонецЕсли;	 
	//	
	//	Возврат ДанныеКеш.StepDefinition; 
	//КонецЕсли;
								
	ПараметрыЧисла       = Новый Массив;
	ПараметрыСтрокиА     = Новый Массив;
	ПараметрыСтрокиК     = Новый Массив;
	ПараметрыДаты        = Новый Массив;
	ПараметрыИменованные = Новый Массив;
	
	СтрокаОригинал = Стр;
	
	ЭмуляцияRegExp(Стр,ПараметрыСтрокиА,ПараметрыСтрокиК,ПараметрыЧисла,ПараметрыДаты,ПараметрыИменованные);
	ОбработаннаяСтрокаПараметров = Стр;
	
	Если ДанныеОбработкиПараметров <> Неопределено Тогда
		ДанныеОбработкиПараметров.Вставить("ОбработаннаяСтрокаПараметров",ОбработаннаяСтрокаПараметров);
		ДанныеОбработкиПараметров.Вставить("ПараметрыЧисла",ПараметрыЧисла);
		ДанныеОбработкиПараметров.Вставить("ПараметрыСтрокиА",ПараметрыСтрокиА);
		ДанныеОбработкиПараметров.Вставить("ПараметрыСтрокиК",ПараметрыСтрокиК);
		ДанныеОбработкиПараметров.Вставить("ПараметрыДаты",ПараметрыДаты);
		ДанныеОбработкиПараметров.Вставить("ПараметрыИменованные",ПараметрыИменованные);
		ДанныеОбработкиПараметров.Вставить("ЗначенияПараметров",ЗначенияПараметров);
	КонецЕсли;	 
	
	
	Стр = СтрЗаменить(Стр,Символы.Таб," ");
	Если Прав(Стр,1) = ":" Тогда
		Стр = Лев(Стр,СтрДлина(Стр)-1);
	КонецЕсли;	 
	МассивПодстрок = Ванесса.РазложитьСтрокуВМассивПодстрокКлиент(Стр," ",Истина);
	КолПараметров        = 0;
	КолПараметровЧисло   = 0;
	КолПараметровСтрокаА = 0;
	КолПараметровСтрокаК = 0;
	КолПараметровДата    = 0;
	
	КолПараметровИменованные = 0;
	
	СтрокаПараметров    = "";
	StepDefinition      = "";
	
	Для Каждого Элем Из МассивПодстрок Цикл
		Если Лев(Элем,1) = "|" Тогда
			Если Элем = "||ПараметрСтрокаА||" Тогда
				КолПараметров        = КолПараметров       + 1;
				КолПараметровСтрокаА = КолПараметровСтрокаА + 1;
				
				СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
				
				
				Если (ПараметрыСтрокиА.Количество()-1) < КолПараметровСтрокаА-1 Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог обработать параметры в строке <%1>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаОригинал); 
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				СтруктураЗначенияПараметра = Новый Структура;
				СтруктураЗначенияПараметра.Вставить("Значение",ПараметрыСтрокиА[КолПараметровСтрокаА-1]);
				СтруктураЗначенияПараметра.Вставить("Тип","Строка");
				
				ЗначенияПараметров.Добавить(СтруктураЗначенияПараметра);
				
				Продолжить;
			ИначеЕсли Элем = "||ПараметрСтрокаК||" Тогда
				КолПараметров        = КолПараметров       + 1;
				КолПараметровСтрокаК = КолПараметровСтрокаК + 1;
				
				СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
				
				Если (ПараметрыСтрокиК.Количество()-1) < КолПараметровСтрокаК-1 Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог обработать параметры в строке <%1>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаОригинал); 
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				СтруктураЗначенияПараметра = Новый Структура;
				СтруктураЗначенияПараметра.Вставить("Значение",ПараметрыСтрокиК[КолПараметровСтрокаК-1]);
				СтруктураЗначенияПараметра.Вставить("Тип","Строка");
				
				ЗначенияПараметров.Добавить(СтруктураЗначенияПараметра);
				
				Продолжить;
			ИначеЕсли Элем = "||ПараметрЧисло||" Тогда
				КолПараметров      = КолПараметров      + 1;
				КолПараметровЧисло = КолПараметровЧисло + 1;
				
				СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем, КолПараметров);
				
				Если (ПараметрыЧисла.Количество()-1) < КолПараметровЧисло-1 Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог обработать параметры в строке <%1>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаОригинал); 
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				СтруктураЗначенияПараметра = Новый Структура;
				СтруктураЗначенияПараметра.Вставить("Значение",ПараметрыЧисла[КолПараметровЧисло-1]);
				СтруктураЗначенияПараметра.Вставить("Тип","Число");
				
				ЗначенияПараметров.Добавить(СтруктураЗначенияПараметра);
				Продолжить;
			ИначеЕсли Элем = "||ПараметрДата||" Тогда
				КолПараметров      = КолПараметров      + 1;
				КолПараметровДата  = КолПараметровДата  + 1;
				
				СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
				
				Если (ПараметрыДаты.Количество()-1) < КолПараметровДата-1 Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог обработать параметры в строке <%1>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаОригинал); 
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				СтруктураЗначенияПараметра = Новый Структура;
				СтруктураЗначенияПараметра.Вставить("Значение",ПараметрыДаты[КолПараметровДата-1]);
				СтруктураЗначенияПараметра.Вставить("Тип","Дата");
				
				ЗначенияПараметров.Добавить(СтруктураЗначенияПараметра);
				Продолжить;
			КонецЕсли;
		КонецЕсли;	 
		
		НашлиПараметрИменованный = Ложь;
		Для каждого ЭлемПараметрыИменованные Из ПараметрыИменованные Цикл
			ЭлемПараметрыИменованные = СтрЗаменить(ЭлемПараметрыИменованные,"|||ЗаменаПробела|||"," ");
			Элем                     = СокрЛП(СтрЗаменить(Элем,"|||ЗаменаПробела|||"," "));
			
			СтрДляСравнения = "<" + ЭлемПараметрыИменованные + ">";
			Если СтрДляСравнения = Элем Тогда
				КолПараметров            = КолПараметров      + 1;
				КолПараметровИменованные = КолПараметровИменованные  + 1;
				
				СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
				
				СтруктураЗначенияПараметра = Новый Структура;
				СтруктураЗначенияПараметра.Вставить("Значение",ЭлемПараметрыИменованные);
				СтруктураЗначенияПараметра.Вставить("Тип","ПараметрИменованный");
				
				ЗначенияПараметров.Добавить(СтруктураЗначенияПараметра);
				
				НашлиПараметрИменованный = Истина;
				Прервать;
			КонецЕсли; 
			
		КонецЦикла;
		Если НашлиПараметрИменованный Тогда
			Продолжить;
		КонецЕсли; 
		
		StepDefinition = StepDefinition + СделатьПервуюБуквуЗаглавной(Элем);
	КонецЦикла;
	
	Если ЕстьПараметрыТаблицы  = Истина Тогда
		Если КоличествоПараметровТаблица = 1 Тогда
			СтрокаПараметров = СтрокаПараметров + "ТабПарам,"; 
		Иначе
			Для Ккк = 1 По КоличествоПараметровТаблица Цикл
				СтрокаПараметров = СтрокаПараметров + "ТабПарам" + XMLСтрока(Ккк) + ","; 
			КонецЦикла;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если СтрокаПараметров <> "" Тогда
		Если Прав(СтрокаПараметров,1) = "," Тогда
			СтрокаПараметров = Лев(СтрокаПараметров,СтрДлина(СтрокаПараметров)-1);//там лишняя запятая
		КонецЕсли;	 
	КонецЕсли;
	
	УбратьЗапрещенныеСимволыИзStepDefinition(StepDefinition);
	ПроверкаКорректностиStepDefinition(StepDefinition);
	
	StepDefinition = StepDefinition + "(" + СтрокаПараметров + ")";
	
	ДанныеКеш = Новый Структура;
	
	ДанныеКеш.Вставить("StepDefinition",StepDefinition);
	ДанныеКеш.Вставить("СтрокаПараметров",СтрокаПараметров);
	ДанныеКеш.Вставить("ОбработаннаяСтрокаПараметров",ОбработаннаяСтрокаПараметров);
	
	Если ЗначенияПараметров.Количество() > 0 Тогда
		ДанныеКеш.Вставить("ЗначенияПараметров",ЗначенияПараметров);
	КонецЕсли;	 
	Если ПараметрыЧисла.Количество() > 0 Тогда
		ДанныеКеш.Вставить("ПараметрыЧисла",ПараметрыЧисла);
	КонецЕсли;	 
	Если ПараметрыСтрокиА.Количество() > 0 Тогда
		ДанныеКеш.Вставить("ПараметрыСтрокиА",ПараметрыСтрокиА);
	КонецЕсли;	 
	Если ПараметрыСтрокиК.Количество() > 0 Тогда
		ДанныеКеш.Вставить("ПараметрыСтрокиК",ПараметрыСтрокиК);
	КонецЕсли;	 
	Если ПараметрыДаты.Количество() > 0 Тогда
		ДанныеКеш.Вставить("ПараметрыДаты",ПараметрыДаты);
	КонецЕсли;	 
	Если ПараметрыИменованные.Количество() > 0 Тогда
		ДанныеКеш.Вставить("ПараметрыИменованные",ПараметрыИменованные);
	КонецЕсли;	 
		
	//КешСнипетов[СтрокаКеш] = ДанныеКеш;
		
	Возврат StepDefinition;
КонецФункции

&НаКлиенте
Функция ПолучитьНовыйStepDefinition(Знач Стр)
	
	Стр = СтрЗаменить(Стр,"СтрокаК)",")");
	Стр = СтрЗаменить(Стр,"СтрокаА)",")");
	Стр = СтрЗаменить(Стр,"Дата)",")");
	Стр = СтрЗаменить(Стр,"Число)",")");
	
	Стр = СтрЗаменить(Стр,"СтрокаК,",",");
	Стр = СтрЗаменить(Стр,"СтрокаА,",",");
	Стр = СтрЗаменить(Стр,"Дата,",",");
	Стр = СтрЗаменить(Стр,"Число,",",");
	
	Возврат Стр;
КонецФункции

&НаКлиенте
Функция ПолучитьНовуюСтрокуПараметров(Знач Стр)
	Стр = Стр + ",";
	
	Стр = СтрЗаменить(Стр,"Строка,",",");
	Стр = СтрЗаменить(Стр,"Дата,",",");
	Стр = СтрЗаменить(Стр,"Число,",",");
	
	Стр = Лев(Стр,СтрДлина(Стр)-1);
	
	Возврат Стр;
КонецФункции

&НаКлиенте
Процедура РассчитатьStepDefinition(Параметры)
	
	СтруктураПараметров = Параметры.СтруктураПараметров;
	Если СтруктураПараметров.Свойство("КешStepDefinition") Тогда
		КешStepDefinition = СтруктураПараметров.КешStepDefinition;
		СтрокаКешStepDefinition = КешStepDefinition.Найти(Параметры.ИмяШагаБезКлючевогоСлова,"ИмяШагаБезКлючевогоСлова");
		Если СтрокаКешStepDefinition <> Неопределено Тогда
			Параметры.Вставить("НовыйStepDefinition",СтрокаКешStepDefinition.StepDefinition);
			Параметры.Вставить("НоваяСтрокаПараметров",СтрокаКешStepDefinition.СтрокаПараметров);
			Параметры.Вставить("ЗначенияПараметров",СтрокаКешStepDefinition.ЗначенияПараметров);
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	
	
	СтараяСтрокаПараметров = "";
	СтарыйStepDefinition   = ПолучитьStepDefinitionПоСтроке(Параметры.ИмяШагаБезКлючевогоСлова,
	                                                        Параметры.ЗначенияПараметров,
															СтараяСтрокаПараметров,
															Параметры.ШагСПараметрамиВТаблице,
															Параметры.КоличествоПередаваемыхТаблиц,,СтруктураПараметров);
															
	НовыйStepDefinition    = ПолучитьНовыйStepDefinition(СтарыйStepDefinition);
	НоваяСтрокаПараметров  = ПолучитьНовуюСтрокуПараметров(СтараяСтрокаПараметров);
	
	Параметры.Вставить("НовыйStepDefinition",НовыйStepDefinition);
	Параметры.Вставить("НоваяСтрокаПараметров",НоваяСтрокаПараметров);
	
	
	Если СтруктураПараметров.Свойство("КешStepDefinition") Тогда	
		СтрокаКешStepDefinition                          = КешStepDefinition.Добавить();
		СтрокаКешStepDefinition.StepDefinition           = НовыйStepDefinition;
		СтрокаКешStepDefinition.СтрокаПараметров         = НоваяСтрокаПараметров;
		СтрокаКешStepDefinition.ЗначенияПараметров       = Параметры.ЗначенияПараметров;
		СтрокаКешStepDefinition.ИмяШагаБезКлючевогоСлова = Параметры.ИмяШагаБезКлючевогоСлова;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СоздатьТаблицаПеревода()
	//ТаблицаПеревода = Новый ТаблицаЗначений;
	//ТаблицаПеревода.Колонки.Добавить("ОригиналРусскийШаг");
	//ТаблицаПеревода.Колонки.Добавить("ОригиналРусскийШагПредставлениеДляПеревода");
	//ТаблицаПеревода.Колонки.Добавить("ОригиналРусскийШагНРег");
	//ТаблицаПеревода.Колонки.Добавить("ОригиналРусскийОписание");
	//ТаблицаПеревода.Колонки.Добавить("StepDefinitionРусский");
	//ТаблицаПеревода.Колонки.Добавить("СтрокаДляПоискаРусский");
	//ТаблицаПеревода.Колонки.Добавить("ОбработаннаяСтрокаПараметровРусский");
	//
	//ТаблицаПеревода.Колонки.Добавить("ТекстПереводаШаг");
	//ТаблицаПеревода.Колонки.Добавить("ТекстПереводаШагНРег");
	//ТаблицаПеревода.Колонки.Добавить("ТекстПереводаОписание");
	//ТаблицаПеревода.Колонки.Добавить("StepDefinitionПеревод");
	//ТаблицаПеревода.Колонки.Добавить("СтрокаДляПоискаПеревод");
	//ТаблицаПеревода.Колонки.Добавить("ОбработаннаяСтрокаПараметровПеревод");
	//
	//ТаблицаПеревода.Колонки.Добавить("ДанныеОбработкиПараметровРусский");
	//ТаблицаПеревода.Колонки.Добавить("ДанныеОбработкиПараметровПеревод");
	//ТаблицаПеревода.Колонки.Добавить("КлючевоеСлово");
	//ТаблицаПеревода.Колонки.Добавить("НомерСтрокиВФайлеПеревода",Новый ОписаниеТипов("Число"));
	//ТаблицаПеревода.Колонки.Добавить("МассивСоответствийПозицийПараметров");
	//
	//
	//ТаблицаПеревода.Индексы.Добавить("ОригиналРусскийШагНРег");
	//ТаблицаПеревода.Индексы.Добавить("StepDefinitionРусский");
	//ТаблицаПеревода.Индексы.Добавить("СтрокаДляПоискаРусский");
	//ТаблицаПеревода.Индексы.Добавить("СтрокаДляПоискаПеревод");
	//
	//Возврат ТаблицаПеревода;
КонецФункции	

&НаКлиенте
Функция ТаблицаИзвестныхStepDefinitionНайти(ТаблицаИзвестныхStepDefinition,СтрокаДляПоиска)
	Для Каждого СтрокаТаблицаИзвестныхStepDefinition Из ТаблицаИзвестныхStepDefinition Цикл
		Если СтрокаТаблицаИзвестныхStepDefinition.СтрокаДляПоиска = СтрокаДляПоиска Тогда
			Возврат СтрокаТаблицаИзвестныхStepDefinition;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция StepDefinitionИзТаблицы(IDИзStepDefinition,ТаблицаИзвестныхStepDefinition,СтруктураПараметров,ЗначенияПараметров,СтрокаДереваШаг)
	СтрТаблицаИзвестныхStepDefinition = Неопределено;
	ЯзыкРодителя = ТекущийЯзыкФичаФайла;
	Если СтруктураПараметров.Свойство("ЯзыкРодителя") Тогда
		ЯзыкРодителя = СтруктураПараметров.ЯзыкРодителя;
	КонецЕсли;	 
	
	Если ТекущийЯзыкФичаФайла = "ru" И ЯзыкРодителя = "ru" Тогда
		СтрТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinitionНайти(ТаблицаИзвестныхStepDefinition,IDИзStepDefinition);
	Иначе	
		СтрокаТаблицаПеревода = СтруктураПараметров.ДанныеВозможнаОптимизацияЗагрузкиФичи.ДляПоискаПеревод[IDИзStepDefinition];
		//СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(IDИзStepDefinition,"СтрокаДляПоискаПеревод");
		
		Если СтрокаТаблицаПеревода = Неопределено Тогда
			//возможно идёт встраивание вложенного сценария
			СтрокаТаблицаПеревода = СтруктураПараметров.ДанныеВозможнаОптимизацияЗагрузкиФичи.ДляПоискаРусский[IDИзStepDefinition];
			//СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(IDИзStepDefinition,"СтрокаДляПоискаРусский");
			Если СтрокаТаблицаПеревода <> Неопределено Тогда
				СтрокаДереваШаг.Имя = СтрокаТаблицаПеревода.ТекстПереводаШаг;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если СтрокаТаблицаПеревода <> Неопределено Тогда
			СтрТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinitionНайти(ТаблицаИзвестныхStepDefinition, СтрокаТаблицаПеревода.СтрокаДляПоискаРусский);
			
			Если СтрокаТаблицаПеревода.МассивСоответствийПозицийПараметров <> Неопределено Тогда
				Если СтрокаТаблицаПеревода.МассивСоответствийПозицийПараметров.Количество() > 0 Тогда
					//значит надо поменять параметры местами
					Попытка
						НовыеЗначенияПараметров = Новый СписокЗначений;
						Для Каждого НоваяПозиция Из СтрокаТаблицаПеревода.МассивСоответствийПозицийПараметров Цикл
							НовыеЗначенияПараметров.Добавить(ЗначенияПараметров[НоваяПозиция-1].Значение);
						КонецЦикла;	
						
						ЗначенияПараметров = НовыеЗначенияПараметров;
					Исключение
						ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог поменять параметры шага местами <%1>");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаТаблицаПеревода.ТекстПереводаШаг);
						Сообщить(Ванесса.ПолучитьТекстСообщенияПользователю(ТекстСообщения));
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	Если СтрТаблицаИзвестныхStepDefinition = Неопределено Тогда
		СтрТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinitionНайти(ТаблицаИзвестныхStepDefinition,IDИзStepDefinition);
	КонецЕсли;	 
	
	Возврат СтрТаблицаИзвестныхStepDefinition;
КонецФункции	

&НаКлиенте
Функция ОпределитьАдресСнипета(ИмяФайла,ЭтоLinux)
	Если ЭтоLinux Тогда
		Возврат ИмяФайла;
	Иначе
		Возврат СтрЗаменить(ИмяФайла,"/","\");
	КонецЕсли;	 
КонецФункции	 

&НаКлиенте
Процедура РассчитатьДанныеСтрокиДереваСлужебный(ДанныеФичи, ДанныеСтрокиФичи, СтрокаДеревоЭлементы, СтруктураПараметров)
	СтрокаДеревоЭлементы.Имя = СокрЛ(ДанныеСтрокиФичи.ТекущаяСтрока);
	
	ЗначенияПараметров = Новый СписокЗначений;
	
	ВтораяЧастьСтрокиПозиция = -1;
	ТекущееКлючевоеСлово = ПолучитьКлючевоеСлово(ДанныеФичи, НРег(СтрокаДеревоЭлементы.Имя), ВтораяЧастьСтрокиПозиция);
	ИмяШагаБезКлючевогоСлова = СокрЛП(Сред(СтрокаДеревоЭлементы.Имя, ВтораяЧастьСтрокиПозиция));
	
	ПараметрыДляПолученияStepDefenition = Новый Структура;
	ПараметрыДляПолученияStepDefenition.Вставить("ЗначенияПараметров",ЗначенияПараметров);
	ПараметрыДляПолученияStepDefenition.Вставить("НоваяСтрокаПараметров","");
	ПараметрыДляПолученияStepDefenition.Вставить("НовыйStepDefinition","");
	ПараметрыДляПолученияStepDefenition.Вставить("ИмяШагаБезКлючевогоСлова",ИмяШагаБезКлючевогоСлова);
	ПараметрыДляПолученияStepDefenition.Вставить("ШагСПараметрамиВТаблице",Ложь);
	ПараметрыДляПолученияStepDefenition.Вставить("КоличествоПередаваемыхТаблиц",0);
	ПараметрыДляПолученияStepDefenition.Вставить("СтруктураПараметров",СтруктураПараметров);
	
	РассчитатьStepDefinition(ПараметрыДляПолученияStepDefenition);
	
	НоваяСтрокаПараметров             = ПараметрыДляПолученияStepDefenition.НоваяСтрокаПараметров;
	НовыйStepDefinition               = ПараметрыДляПолученияStepDefenition.НовыйStepDefinition;
	СтрокаДеревоЭлементы.ЗначенияПараметров = ПараметрыДляПолученияStepDefenition.ЗначенияПараметров;
	
	//Для каждого ЭлемЗначенияПараметров Из ЗначенияПараметров Цикл
	//	Если ЭлемЗначенияПараметров.Значение.Тип = "ПараметрИменованный" Тогда
	//		Если РазныеИменнованныеПараметры.Найти(ЭлемЗначенияПараметров.Значение.Значение) = Неопределено Тогда
	//			РазныеИменнованныеПараметры.Добавить(ЭлемЗначенияПараметров.Значение.Значение);
	//		КонецЕсли; 
	//	КонецЕсли; 
	//КонецЦикла;
	
	НашелStepDefinitionВepf = Ложь;
	
	IDИзStepDefinition = НРег(Лев(НовыйStepDefinition,Найти(НовыйStepDefinition,"(")-1));
	
	ТаблицаИзвестныхStepDefinition = Ванесса.ТаблицаИзвестныхStepDefinition;
	
	Если Не НашелStepDefinitionВepf Тогда
		СтрокаДеревоЭлементы.АдресСнипета = "";
		СтрокаДеревоЭлементы.СтрокаРеальнойПроцедуры = "";
		ЗначенияПараметров = СтрокаДеревоЭлементы.ЗначенияПараметров;
		СтрТаблицаИзвестныхStepDefinition = StepDefinitionИзТаблицы(IDИзStepDefinition,ТаблицаИзвестныхStepDefinition,СтруктураПараметров,ЗначенияПараметров,СтрокаДеревоЭлементы);
		СтрокаДеревоЭлементы.ЗначенияПараметров = ЗначенияПараметров;
		Если СтрокаДеревоЭлементы.СтрокаПараметровШагаВВидеТаблицы Тогда
			СтрокаДеревоЭлементы.ПараметрыТаблицы = СтрокаДеревоЭлементы.ЗначенияПараметров;
		Иначе	
			СтрокаДеревоЭлементы.Снипет = НовыйStepDefinition;
		КонецЕсли;	 
		Если СтрТаблицаИзвестныхStepDefinition <> Неопределено Тогда
			СтрокаДеревоЭлементы.Снипет   = НовыйStepDefinition;
			НашелStepDefinitionВepf = Истина;
		КонецЕсли;	 
	КонецЕсли;  
	
	Если НашелStepDefinitionВepf Тогда
		
		СтрокаДеревоЭлементы.АдресСнипета = ОпределитьАдресСнипета(СтрТаблицаИзвестныхStepDefinition.ИмяФайла,СтруктураПараметров.ЭтоLinux);
		
		СтрокаДеревоЭлементы.СтрокаРеальнойПроцедуры = СтрТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры;
		
		//СтрЗамены = НРег("/" + ИмяФичи + ".feature");
		//ПутьФичи  = СтрЗаменить(НРег(ПолноеИмяФичи), СтрЗамены, "");
		//Если Найти(НРег(СтрТаблицаИзвестныхStepDefinition.ИмяФайла),ПутьФичи) = 0 Тогда
		//	ДанныеСтрокиФичи.ЭтоЧужойСнипет = Истина;
		//КонецЕсли; 
		//Если НЕ ДанныеСтрокиФичи.ЭтоЧужойСнипет Тогда
		//	ФайлОбработки = Новый Файл(СтрТаблицаИзвестныхStepDefinition.ИмяФайла);
		//	Если НРег(ИмяФичи) <> НРег(ФайлОбработки.ИмяБезРасширения) Тогда
		//		ДанныеСтрокиФичи.ЭтоЧужойСнипет = Истина;
		//	КонецЕсли;
		//КонецЕсли;	 
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьКлючевоеСловоВТаблицу(Тзн,Слово,Тип,Уникально = Истина)
	
	Данные = Новый Структура;
	Данные.Вставить("Слово",НРег(Слово));
	Данные.Вставить("Тип",Тип);
	Данные.Вставить("Уникально",Уникально);
	
	Тзн.Вставить(НРег(Слово),Данные);
	
	//СтрокаТаблицы           = Тзн.Добавить(); 
	//СтрокаТаблицы.Слово     = НРег(Слово);
	//СтрокаТаблицы.Тип       = Тип;
	//СтрокаТаблицы.Уникально = Уникально;
	
	//СтруктураКлючевогоСлова = Новый Структура;
	//СтруктураКлючевогоСлова.Вставить("Слово",Слово);
	//СтруктураКлючевогоСлова.Вставить("Тип",Тип);
	//
	//Тзн.Добавить(СтруктураКлючевогоСлова);
КонецПроцедуры

&НаКлиенте
Функция СоздатьТаблицуКлючевыхСлов_ru()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"и","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"когда","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"тогда","then");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"затем","then");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"дано","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"функция","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"функционал","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"функциональность","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"свойство","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"предыстория","background");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"контекст","background");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"сценарий","scenario");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"структура сценария","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"примеры","examples");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"допустим","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"пусть","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"если","if");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"иначеесли","elseif");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"иначе","else");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"то","then");

	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"к тому же","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"также","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"но","but");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"а","but");
	
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов",Тзн);
КонецФункции

&НаКлиенте
Функция СоздатьТаблицуКлючевыхСлов()
	Тзн = Новый Соответствие;
	Возврат Тзн;
КонецФункции	


&НаКлиенте
Функция СоздатьТаблицуКлючевыхСлов_en()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"feature","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Functionality","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Business Need","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Ability","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"background","background");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"scenario outline","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"scenario","scenario",Ложь);
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"examples","examples");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"given","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"when","when");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"then","then");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"and","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"but","but");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"if","if");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"elseif","elseif");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"else","else");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов",Тзн);
КонецФункции

&НаКлиенте
Функция СоздатьТаблицуКлючевыхСлов_uk()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"функціонал","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"передумова","background");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"сценарій","scenario");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"структура сценарію","scenario_outline");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"приклади","examples");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"припустимо","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"дано","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"припустимо, що","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"нехай","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"якщо","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"коли","when");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"то","then");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"тоді","then");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"і","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"а також","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"та","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"але","but");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов",Тзн);
КонецФункции

&НаКлиенте
Функция СоздатьТаблицуКлючевыхСлов_ro()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Și","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Si","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Şi","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Context","background");
	
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dar","but");
	
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Exemple","examples");
	
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funcționalitate","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Functionalitate","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funcţionalitate","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dat fiind","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Date fiind","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dati fiind","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dați fiind","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Daţi fiind","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Scenariu","scenario");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Structura scenariu","scenario_outline");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Structură scenariu","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Atunci","then");
	
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Cand","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Când","when");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов",Тзн);
КонецФункции

&НаКлиенте
Функция СоздатьТаблицуКлючевыхСлов_de()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Und","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Grundlage","background");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Aber","but");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Beispiele","examples");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funktionalität","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Angenommen","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Gegeben sei","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Gegeben seien","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Szenario","scenario");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Szenariogrundriss","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dann","then");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Wenn","when");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов",Тзн);
КонецФункции

&НаКлиенте
Функция СоздатьТаблицуКлючевыхСлов_lv()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Un","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Konteksts","background");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Situācija","background");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Bet","but");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Piemēri","examples");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Paraugs","examples");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funkcionalitāte","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Fīča","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Kad","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Scenārijs","scenario");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Scenārijs pēc parauga","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Tad","then");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Ja","when");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов",Тзн);
КонецФункции

&НаКлиенте
Функция СоздатьТаблицуКлючевыхСлов_it()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"E","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Contesto","background");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Ma","but");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Esempi","examples");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funzionalità","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dato","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Data","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dati","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Date","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Scenario","scenario");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Schema dello scenario","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Allora","then");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Quando","when");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов",Тзн);
КонецФункции

&НаКлиенте
Функция СоздатьТаблицуКлючевыхСлов_pl()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Oraz","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"I","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Założenia","background");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Ale","but");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Przykłady","examples");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Właściwość","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funkcja","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Aspekt","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Potrzeba biznesowa","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Zakładając","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Mając","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Zakładając, że","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Scenariusz","scenario");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Szablon scenariusza","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Wtedy","then");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Jeżeli","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Jeśli","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Gdy","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Kiedy","when");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов",Тзн);
КонецФункции

&НаКлиенте
Функция СоздатьТаблицуКлючевыхСлов_vi()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Và","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Bối cảnh","background");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Nhưng","but");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dữ liệu","examples");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Tính năng","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Biết","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Cho","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Tình huống","scenario");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Kịch bản","scenario");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Khung tình huống","scenario_outline");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Khung kịch bản","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Thì","then");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Khi","when");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Nếu","if");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"NóiCáchKhácNếu","elseif");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"NóiCáchKhác","else");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов",Тзн);
КонецФункции



#КонецОбласти
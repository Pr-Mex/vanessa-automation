#Область ОписаниеПеременных

&НаКлиенте
Перем Ванесса;

&НаКлиенте
Перем КешДанныеПеревода;

#КонецОбласти

#Область ГлобальныеПеременные

&НаКлиенте
Перем КешКлючевыеСлова;

#КонецОбласти

#Область ЭкспортныеПроцедурыИФункции

// Делает первичную инициализацию модуля.
&НаКлиенте
Функция ИнициализацияФормы(ВладелецФормы) Экспорт
	Ванесса = ВладелецФормы;
	КешДанныеПеревода = Новый Соответствие;
КонецФункции	 

//Возвращает данные ключевых слов
&НаКлиенте
Функция КлючевыеСловаGherkin() Экспорт
	
	Если КешКлючевыеСлова = Неопределено Тогда
		КешКлючевыеСлова = Ванесса.ПрочитатьОбъектJSON(КлючевыеСловаДляПарсераСтрокой(), Истина);
	КонецЕсли;	 
	
	Возврат КешКлючевыеСлова;
КонецФункции	 

// Выполняет инициализацию парсера
&НаКлиенте
Процедура ИнициализацияПарсера() Экспорт
	Ванесса.ВнешняяКомпонентаПарсерGherkin.НачатьУстановкуКлючевыеСлова(Ванесса.ОписаниеПустогоОбработчика(1), КлючевыеСловаДляПарсераСтрокой());
КонецПроцедуры 

// Делает отключение модуля
&НаКлиенте
Функция ОтключениеМодуля() Экспорт
	Ванесса = Неопределено;
	КешДанныеПеревода = Неопределено;
	КешКлючевыеСлова = Неопределено;
КонецФункции	 

// Выполняет загрузку фича файлов
&НаКлиенте
Процедура ЗагрузитьФичаФайлы(СтруктураПараметров) Экспорт
	МассивБиблиотек = Новый Массив;
	Для Каждого Элем Из Ванесса.Объект.КаталогиБиблиотек Цикл
		Если ПустаяСтрока(Элем.Значение) Тогда
			Продолжить;
		КонецЕсли;	 
		
		МассивБиблиотек.Добавить(Элем.Значение);
	КонецЦикла;
	
	Если Ванесса.Объект.ВерсияПоставки = "single" Тогда
		МассивБиблиотек.Добавить(Ванесса.КаталогВременнойФичиСодержащейЭкспортныеСценарииИзОсновнойПоставки());
	КонецЕсли;

	Если Ванесса.Объект.СписокСценариевДляВыполнения.Количество() > 0 Тогда 
		ОтборСценариевПоИмениСценария = Новый Соответствие;
		Для Каждого Элем Из Ванесса.Объект.СписокСценариевДляВыполнения Цикл
			ОтборСценариевПоИмениСценария.Вставить(Элем.Значение, Истина);
		КонецЦикла;
		СтруктураПараметров.Вставить("ОтборСценариевПоИмениСценария", ОтборСценариевПоИмениСценария);
	КонецЕсли;	
	
	Если Ванесса.ЭтоКаталогКомандаСистемы(СтруктураПараметров.КаталогФич) Тогда
		Ванесса.УстановитьФлагОжиданияСобытияЧтенияОтКомпоненты(Истина);
		МассивБиблиотек.Добавить(СтруктураПараметров.КаталогФич);
		
		ТегиИсключения = Новый Массив;
		Для Каждого Элем Из Ванесса.Объект.СписокТеговИсключение Цикл
			ТегиИсключения.Добавить(Элем.Значение);
		КонецЦикла;	 
		
		ТегиФильтры = Новый Массив;
		Для Каждого Элем Из Ванесса.Объект.СписокТеговОтбор Цикл
			ТегиФильтры.Добавить(Элем.Значение);
		КонецЦикла;	 
		
		ФильтрТегов = Новый Структура;
		ФильтрТегов.Вставить("include", ТегиФильтры);
		ФильтрТегов.Вставить("exclude", ТегиИсключения);
		
		Если Ванесса.ЭтоLinux Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПолученРезультатЧтения", ЭтаФорма, СтруктураПараметров);
			Ванесса.ВнешняяКомпонентаПарсерGherkin.НачатьВызовПрочитатьПапку(ОписаниеОповещения,
				СтруктураПараметров.КаталогФич,
				Ванесса.ЗаписатьОбъектJSON(МассивБиблиотек),
				Ванесса.ЗаписатьОбъектJSON(ФильтрТегов)
				);
		Иначе
			Ванесса.ВнешняяКомпонентаПарсерGherkin.НачатьВызовСканироватьПапку(Ванесса.ОписаниеПустогоОбработчика(3),
				СтруктураПараметров.КаталогФич,
				Ванесса.ЗаписатьОбъектJSON(МассивБиблиотек),
				Ванесса.ЗаписатьОбъектJSON(ФильтрТегов)
				);
		КонецЕсли;
		
	Иначе
		
		//Каталог, где лежит фича файл
		Файл = Новый Файл(СтруктураПараметров.КаталогФич);
		МассивБиблиотек.Добавить(Файл.Путь);
		
		Если Ванесса.ЗапрещеныСинхронныеВызовы Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПолученРезультатЧтения", ЭтаФорма, СтруктураПараметров);
			Ванесса.ВнешняяКомпонентаПарсерGherkin.НачатьВызовПрочитатьФайл(ОписаниеОповещения,СтруктураПараметров.КаталогФич,Ванесса.ЗаписатьОбъектJSON(МассивБиблиотек));
		Иначе		
			ТекПараметрыВызова = Ванесса.ЗаписатьОбъектJSON(МассивБиблиотек);
			РезультатВызова = Ванесса.ВнешняяКомпонентаПарсерGherkin.ПрочитатьФайл(
				СтруктураПараметров.КаталогФич,
				ТекПараметрыВызова);
				
			ПолученРезультатЧтения(РезультатВызова, ТекПараметрыВызова, СтруктураПараметров);
		КонецЕсли;	 
		
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПолученРезультатЧтения(РезультатВызова, ПараметрыВызова, СтруктураПараметров) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РезультатВызова", РезультатВызова);
	ДополнительныеПараметры.Вставить("ПараметрыВызова", ПараметрыВызова);
	ДополнительныеПараметры.Вставить("СтруктураПараметров", СтруктураПараметров);
	
	Если Ванесса.ЗапрещеныСинхронныеВызовы Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолученыПеременные", ЭтаФорма, ДополнительныеПараметры);
		Ванесса.ВнешняяКомпонентаПарсерGherkin.НачатьПолучениеПеременные(ОписаниеОповещения);	
	Иначе
		ПолученыПеременные(Ванесса.ВнешняяКомпонентаПарсерGherkin.Переменные, ДополнительныеПараметры);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыПеременные(Результат, ДополнительныеПараметры) Экспорт
	РезультатВызова = ДополнительныеПараметры.РезультатВызова;
	ПараметрыВызова = ДополнительныеПараметры.ПараметрыВызова;
	СтруктураПараметров = ДополнительныеПараметры.СтруктураПараметров;
	
	Если Ванесса.Объект.ИспользоватьРедакторVanessaEditor Тогда 
		Ванесса.УстановитьДанныеЭкспортныхПеременныхГеркина(Результат);
	КонецЕсли;	 
	
	ИдСтроки = -1;
	
	ТекстJSON = РезультатВызова;
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	КешСнипетовНаКлиенте = Ванесса.КешСнипетовНаКлиенте();
	СтруктураПараметров.Вставить("КоличествоФич", 0);
	СтруктураПараметров.Вставить("КоличествоСценариев", 0);
	СтруктураПараметров.Вставить("КоличествоШагов", 0);
	СтруктураПараметров.Вставить("КоличествоPending", 0);
	СтруктураПараметров.Вставить("РассчитыватьСтатистику", Истина);
	СтруктураПараметров.Вставить("ТегиОтборНрег", ТегиОтборНрег());
	
	Дерево = Ванесса.Объект.ДеревоТестов;
	ЭлементыДерева = Дерево.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	Если ДанныеJSON <> Неопределено Тогда
		Если ТипЗнч(ДанныеJSON) = Тип("Массив") Тогда
			КаталогиФичаФайлов = Новый Соответствие;
			Для Каждого ДанныеФичи Из ДанныеJSON Цикл
				ФайлФичи = Новый Файл(ДанныеФичи.filename);
				ДобавитьФичу(Дерево, ДанныеФичи, ФайлФичи, ИдСтроки, КешСнипетовНаКлиенте, КаталогиФичаФайлов, СтруктураПараметров);
			КонецЦикла;	 
		Иначе	
			СтрокаИмяФайла = ЭлементыДерева.Добавить();
			ФайлФичи = Новый Файл(СтруктураПараметров.КаталогФич);
			СтрокаИмяФайла.Имя = ФайлФичи.Имя;
			СтрокаИмяФайла.Тип = "Каталог";
			СтрокаИмяФайла.ПолныйПуть = ФайлФичи.ПолноеИмя;
			ИдСтроки = ИдСтроки + 1;
			СтрокаИмяФайла.ИдСтроки = ИдСтроки;
			
			ДобавитьФичу(СтрокаИмяФайла.ПолучитьЭлементы(), ДанныеJSON, ФайлФичи, ИдСтроки, КешСнипетовНаКлиенте, Неопределено, СтруктураПараметров);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Ванесса.ЗавершениеЧтенияФичаФайловПарсеромИзКомпоненты(СтруктураПараметров);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция СкопироватьМассивТегов(Источник)
	Результат = Новый Массив;
	
	Для Каждого Элем Из Источник Цикл
		Тег = Новый Структура;
		Тег.Вставить("Тег", НРег(Элем.text));
		Тег.Вставить("НомерСтроки", Элем.line);
		Тег.Вставить("ТегИсходный", Элем.text);
		Результат.Добавить(Тег);
	КонецЦикла;	 
	
	Возврат Результат; 
КонецФункции

&НаКлиенте
Функция СкопироватьМассивКомментариев(Источник)
	Результат = Новый Массив;
	
	Для Каждого Элем Из Источник Цикл
		Данные = Новый Структура;
		Данные.Вставить("НомерСтроки", Элем.line);
		Данные.Вставить("Комментарий", Элем.text);
		Результат.Добавить(Данные);
	КонецЦикла;	 
	
	Возврат Результат; 
КонецФункции	 

&НаКлиенте
Процедура ДобавитьВФичуДанныеПоПеременным(ПеременныеИзПарсера, СтруктураПараметров, ДанныеФичи, ПростыеПеременныеИзСекцииПеременныеЭтойФичи, ТаблицаПеременныхИзСекцииПеременныеЭтойФичи, ПростыеПеременныеКакВФайлеЭтойФичи, ПолныйПутьКФиче)
	
	Для Каждого ТекПеременная Из ПеременныеИзПарсера Цикл
		Если ТекПеременная.Свойство("table") Тогда
			Если ТекПеременная.Свойство("name") Тогда
				ИмяТаблицыПеременных = СокрЛП(ТекПеременная.name);
			Иначе
				ИмяТаблицыПеременных = "";
			КонецЕсли;	 
			
			ДанныеТаблицы = Новый Структура;
			ДанныеТаблицы.Вставить("ПолныйПутьКФиче", ПолныйПутьКФиче);
			ДанныеТаблицы.Вставить("Колонки", Новый Массив);
			ДанныеТаблицы.Вставить("Значения", Новый Структура);
			ТаблицаПеременныхИзСекцииПеременныеЭтойФичи.Вставить(НРег(ИмяТаблицыПеременных), ДанныеТаблицы);
			
			Для Каждого Элем Из ТекПеременная.table.head.tokens Цикл
				ДанныеТаблицы.Колонки.Добавить(Элем.text);
			КонецЦикла;	 
			
			ИдСтрокиТаблицы = -1;
			Для Каждого Элем Из ТекПеременная.table.body Цикл
				ИдСтрокиТаблицы = ИдСтрокиТаблицы + 1;
				ДанныеСтроки = Новый Структура;
				ДанныеСтроки.Вставить("_НомерСтроки_", Элем.line);
				ДанныеСтроки.Вставить("_ИдСтрокиТаблицы_", ИдСтрокиТаблицы);
				Для Сч = 0 По ДанныеТаблицы.Колонки.Количество() - 1 Цикл
					ДанныеСтроки.Вставить(ДанныеТаблицы.Колонки[Сч], Элем.tokens[Сч].text);
				КонецЦикла;	
				ИмяПеременнойИзТаблицы = Элем.tokens[0].text;
				Попытка
					ДанныеТаблицы.Значения.Вставить(ИмяПеременнойИзТаблицы, ДанныеСтроки);	
				Исключение
					ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
						Ванесса.Локализовать("Недопустимое значение в первой колонке таблицы <%1>."),ИмяПеременнойИзТаблицы);
				КонецПопытки;
				
			КонецЦикла;	 
			
		Иначе
			Если ТекПеременная.Свойство("lines") Тогда
				// Это многострочная строка
				ИмяПеременной = ТекПеременная.name;
				
				Массив = Новый Массив;
				Для Каждого ДанныеСтроки Из ТекПеременная.lines.lines Цикл
					Если ДанныеСтроки.Свойство("text") Тогда
						Массив.Добавить(ДанныеСтроки.text);
					Иначе	
						Массив.Добавить("");
					КонецЕсли;	 
				КонецЦикла;	 
				ЗначениеПеременной = Ванесса.МассивВСтроку(Массив, Символы.ПС);
				
				ДанныеПеременной = Новый Структура;
				ДанныеПеременной.Вставить("Имя", ИмяПеременной);
				ДанныеПеременной.Вставить("ПолныйПутьКФиче", ПолныйПутьКФиче);
				ДанныеПеременной.Вставить("Значение", ЗначениеПеременной);
				ДанныеПеременной.Вставить("Тип", "Строка");
				ДанныеПеременной.Вставить("НомерСтроки", ТекПеременная.line);
			Иначе	
				// Это обычная переменная
				ИмяПеременной = ТекПеременная.name;
				ЗначениеПеременной = ТекПеременная.value.text;
				ДанныеПеременной = Новый Структура;
				ДанныеПеременной.Вставить("Имя", ИмяПеременной);
				ДанныеПеременной.Вставить("ПолныйПутьКФиче", ПолныйПутьКФиче);
				ДанныеПеременной.Вставить("Значение", ЗначениеПеременной);
				ТипПеременной = ТипПараметраJson(ТекПеременная.value.type, ИмяПеременной);
				ДанныеПеременной.Вставить("Тип", ТипПеременной);
				ДанныеПеременной.Вставить("НомерСтроки", ТекПеременная.line);
				
			КонецЕсли;	 
			
			ПростыеПеременныеИзСекцииПеременныеЭтойФичи.Вставить(НРег(ИмяПеременной), ДанныеПеременной);
			ПростыеПеременныеКакВФайлеЭтойФичи.Добавить(ИмяПеременной);
		КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьФичу(ЭлементыРодителя, ДанныеФичи, ФайлФичи, ИдСтроки, КешСнипетовНаКлиенте, КаталогиФичаФайлов, СтруктураПараметров)
	Если НЕ ДанныеФичи.Свойство("scenarios") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеФичи.Свойство("feature") Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДанныеФичи.Свойство("variables") Тогда
		
		ПростыеПеременныеИзСекцииПеременныеЭтойФичи = Новый Соответствие;
		ТаблицаПеременныхИзСекцииПеременныеЭтойФичи = Новый Соответствие;
		ПростыеПеременныеКакВФайлеЭтойФичи = Новый Массив;
		УниверсальноеИмяФайла = УниверсальноеИмяФайла(ДанныеФичи.filename);
		СтруктураПараметров.ДанныеСекцииПеременные.ПростыеПеременные.Вставить(УниверсальноеИмяФайла, ПростыеПеременныеИзСекцииПеременныеЭтойФичи);
		СтруктураПараметров.ДанныеСекцииПеременные.ТаблицыПеременных.Вставить(УниверсальноеИмяФайла, ТаблицаПеременныхИзСекцииПеременныеЭтойФичи);
		СтруктураПараметров.ДанныеСекцииПеременные.ПростыеПеременныеКакВФайле.Вставить(УниверсальноеИмяФайла, ПростыеПеременныеКакВФайлеЭтойФичи);
		
		Если ДанныеФичи.variables.Свойство("items") Тогда
			ДобавитьВФичуДанныеПоПеременным(ДанныеФичи.variables.items, СтруктураПараметров, ДанныеФичи,
				ПростыеПеременныеИзСекцииПеременныеЭтойФичи, ТаблицаПеременныхИзСекцииПеременныеЭтойФичи, ПростыеПеременныеКакВФайлеЭтойФичи, "");
		КонецЕсли;	 
		
		Если ДанныеФичи.variables.Свойство("import") И ДанныеФичи.variables.import <> Неопределено Тогда
			Для Каждого ТекДанныеИмпорт Из ДанныеФичи.variables.import Цикл
				Если ТекДанныеИмпорт.Свойство("items") Тогда
					ДобавитьВФичуДанныеПоПеременным(ТекДанныеИмпорт.items, СтруктураПараметров, ДанныеФичи,
						ПростыеПеременныеИзСекцииПеременныеЭтойФичи, ТаблицаПеременныхИзСекцииПеременныеЭтойФичи, ПростыеПеременныеКакВФайлеЭтойФичи, ТекДанныеИмпорт.path);
				КонецЕсли;	 
			КонецЦикла;	 
		КонецЕсли;	 
	КонецЕсли;	
	
	Если НЕ ДанныеФичи.Свойство("variables") ИЛИ (ПростыеПеременныеИзСекцииПеременныеЭтойФичи.Количество() = 0 И ТаблицаПеременныхИзСекцииПеременныеЭтойФичи.Количество() = 0) Тогда
		СтруктураПараметров.ДанныеСекцииПеременные.ЕстьТаблицаПеременных.Вставить(УниверсальноеИмяФайла(ДанныеФичи.filename), Ложь);
	Иначе	
		СтруктураПараметров.ДанныеСекцииПеременные.ЕстьТаблицаПеременных.Вставить(УниверсальноеИмяФайла(ДанныеФичи.filename), Истина);
	КонецЕсли;	 
	
	СтруктураПараметров.Вставить("ЯзыкФичи", ДанныеФичи.language);
	
	Если ДанныеФичи.language <> "ru" Тогда
		Если КешДанныеПеревода[ДанныеФичи.language] = Неопределено Тогда
			АдресВХранилище = Неопределено;
			Ванесса.ПеревестиТекст("", ДанныеФичи.language, АдресВХранилище);
			ДляПоискаПеревод = Новый Соответствие;
			ДляПоискаРусский = Новый Соответствие;
			ДанныеПоСнипетамПеревод(ДанныеФичи.language, АдресВХранилище, ДляПоискаПеревод, ДляПоискаРусский);
			КешДанныеПеревода.Вставить(ДанныеФичи.language, Новый Структура("ДляПоискаПеревод,ДляПоискаРусский", ДляПоискаПеревод, ДляПоискаРусский));
			
			СтруктураПараметров.Вставить("ДляПоискаПеревод", ДляПоискаПеревод);
			СтруктураПараметров.Вставить("ДляПоискаРусский", ДляПоискаРусский);
		Иначе	
			Если НЕ СтруктураПараметров.Свойство("ДляПоискаПеревод") Тогда
				ДанныеПеревода = КешДанныеПеревода[ДанныеФичи.language];
				СтруктураПараметров.Вставить("ДляПоискаПеревод", ДанныеПеревода.ДляПоискаПеревод);
				СтруктураПараметров.Вставить("ДляПоискаРусский", ДанныеПеревода.ДляПоискаРусский);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если КаталогиФичаФайлов <> Неопределено Тогда
		Файл = Новый Файл(ДанныеФичи.filename);
		ФайлКаталог = Новый Файл(Файл.Путь);
		ЭлементКаталогФичи = КаталогФичиВДереве(Файл.Путь, ЭлементыРодителя, КаталогиФичаФайлов, СтруктураПараметров.КаталогФич, ФайлКаталог.Имя, ИдСтроки);
		СтрокаФичи = ЭлементКаталогФичи.ПолучитьЭлементы().Добавить();
	Иначе	
		СтрокаФичи = ЭлементыРодителя.Добавить();
	КонецЕсли;	 
	
	ИменаНайденныхEpfНаКлиенте = Ванесса.ИменаНайденныхEpfНаКлиенте();
	ФайлФичи = Новый Файл(ДанныеФичи.filename);
	ИмяФайлEPF  = СтрЗаменить(НРег(Ванесса.ДополнитьСлешВПуть(ФайлФичи.Путь + "step_definitions") + ФайлФичи.ИмяБезРасширения + ".epf"), "\", "/");
	Если ИменаНайденныхEpfНаКлиенте[ИмяФайлEPF] <> Неопределено Тогда
		СтрокаФичи.ФичаИмеетСвоюEPF = Истина;
	КонецЕсли;	 
	СтруктураПараметров.Вставить("ФичаИмеетСвоюEPF", СтрокаФичи.ФичаИмеетСвоюEPF);
	
	Если СтруктураПараметров.РассчитыватьСтатистику Тогда
		СтруктураПараметров.КоличествоФич = СтруктураПараметров.КоличествоФич + 1;
	КонецЕсли;	 
	
	СтрокаФичи.Имя = ДанныеФичи.feature.name;
	СтрокаФичи.ПолныйПуть = ФайлФичи.ПолноеИмя;
	СтрокаФичи.ТипКартинки = 1;
	ИдСтроки = ИдСтроки + 1;
	СтрокаФичи.ИдСтроки = ИдСтроки;
	СтрокаФичи.Тип = "Фича";
	СтрокаФичи.ПроизвольныеЗначения = Новый Структура;
	Если ДанныеФичи.Свойство("language") Тогда
		Если ЗначениеЗаполнено(ДанныеФичи.language) Тогда
			СтрокаФичи.ПроизвольныеЗначения.Вставить("Язык", ДанныеФичи.language);
		Иначе	
			СтрокаФичи.ПроизвольныеЗначения.Вставить("Язык", "ru");
		КонецЕсли;	 
	Иначе	
		СтрокаФичи.ПроизвольныеЗначения.Вставить("Язык", "ru");
	КонецЕсли;	 
	МассивКомментариев = Новый Массив;
	Если ДанныеФичи.feature.Свойство("comments") Тогда
		МассивКомментариев = СкопироватьМассивКомментариев(ДанныеФичи.feature.comments);
	КонецЕсли;	 
	Если ДанныеФичи.feature.Свойство("description") Тогда
		МассивОписание = СкопироватьМассивКомментариев(ДанныеФичи.feature.description);
		Для Каждого Элем Из МассивОписание Цикл
			МассивКомментариев.Добавить(Элем);
		КонецЦикла;	 
	КонецЕсли;	 
	СтрокаФичи.ПроизвольныеЗначения.Вставить("МассивКомментариев", МассивКомментариев);
	Если ДанныеФичи.feature.Свойство("tags") Тогда
		СтрокаФичи.ПроизвольныеЗначения.Вставить("МассивТегов", СкопироватьМассивТегов(ДанныеФичи.feature.tags));
	КонецЕсли;	 
	
	ЭлементыФичи = СтрокаФичи.ПолучитьЭлементы();
	
	СтруктураПараметров.Вставить("ДанныеФичиПарсер", ДанныеФичи);

	Если ДанныеФичи.Свойство("background") Тогда
		ДобавитьСценарий(ЭлементыФичи, ДанныеФичи.background, ФайлФичи, ИдСтроки, КешСнипетовНаКлиенте, Истина, СтруктураПараметров);
	КонецЕсли;	 
	
	Если ДанныеФичи.Свойство("scenarios") Тогда
		Для Каждого ДанныеСценария Из ДанныеФичи.scenarios Цикл
			ДобавитьСценарий(ЭлементыФичи, ДанныеСценария, ФайлФичи, ИдСтроки, КешСнипетовНаКлиенте, Ложь, СтруктураПараметров);
		КонецЦикла;	 
	КонецЕсли;	 
	
	СтруктураПараметров.Удалить("ДанныеФичиПарсер");
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьСценарий(ЭлементыФичи, ДанныеСценария, ФайлФичи, ИдСтроки, КешСнипетовНаКлиенте, ЭтоКонтекст, СтруктураПараметров)
	
	Если НЕ ЭтоКонтекст И НЕ ДанныеСценария.Свойство("name") Тогда
		Возврат;
	КонецЕсли;	 
	
	Если СтруктураПараметров.ТегиОтборНрег <> Неопределено И СтруктураПараметров.ТегиОтборНрег.Количество() > 0 И НЕ ЭтоКонтекст Тогда
		//Если идёт загрузка одного сценария и есть отбор по тегам, то в дерево загружается только сценарии соответствующие отбору
		ТегЕстьВСценарии = Ложь;
		ТегЕстьВФиче = Ложь;
		
		Если ДанныеСценария.Свойство("tags") Тогда
			Для Каждого Элем Из ДанныеСценария.tags Цикл
				Если СтруктураПараметров.ТегиОтборНрег[НРег(Элем.text)] <> Неопределено Тогда
					ТегЕстьВСценарии = Истина;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	 
		КонецЕсли;	 
		
		Если НЕ ТегЕстьВСценарии И СтруктураПараметров.ДанныеФичиПарсер.feature.Свойство("tags") Тогда
			Для Каждого Элем Из СтруктураПараметров.ДанныеФичиПарсер.feature.tags Цикл
				Если СтруктураПараметров.ТегиОтборНрег[НРег(Элем.text)] <> Неопределено Тогда
					ТегЕстьВФиче = Истина;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	 
		КонецЕсли;	
		
		Если НЕ ТегЕстьВСценарии И НЕ ТегЕстьВФиче Тогда
			Возврат;
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	Если СтруктураПараметров.Свойство("ОтборСценариевПоИмениСценария") И НЕ ЭтоКонтекст Тогда 
		Если СтруктураПараметров.ОтборСценариевПоИмениСценария[СокрЛП(ДанныеСценария.name)] = Неопределено Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	ИмяEpfФичаФайла = СтрЗаменить(СтрЗаменить(Нрег(ФайлФичи.ПолноеИмя), "\", "/"), ".feature", ".epf");
	
	СтрокаСценария = ЭлементыФичи.Добавить();
	Если ЭтоКонтекст Тогда
		СтрокаСценария.Имя = СокрЛП(ДанныеСценария.keyword.text);
		СтрокаСценария.ДопТип = "Контекст";
	Иначе	
		СтрокаСценария.Имя = СокрЛП(ДанныеСценария.name);
		Если СтруктураПараметров.РассчитыватьСтатистику Тогда
			СтруктураПараметров.КоличествоСценариев = СтруктураПараметров.КоличествоСценариев + 1;
		КонецЕсли;	 
	КонецЕсли;	 
	СтрокаСценария.ФичаИмеетСвоюEPF = СтруктураПараметров.ФичаИмеетСвоюEPF;
	СтрокаСценария.ПолныйПуть = ФайлФичи.ПолноеИмя + ":" + Формат(ДанныеСценария.line, "ЧГ=; ЧН=0");
	СтрокаСценария.ТипКартинки = 2;
	Если СтрокаСценария.ДопТип = "Контекст" Тогда
		СтрокаСценария.ТипКартинки = 7;
	КонецЕсли;	 
	Если ДанныеСценария.Свойство("comments") Тогда
		Если ТипЗнч(СтрокаСценария.ПроизвольныеЗначения) <> Тип("Структура") Тогда
			СтрокаСценария.ПроизвольныеЗначения = Новый Структура;
		КонецЕсли;	
		СтрокаСценария.ПроизвольныеЗначения.Вставить("МассивКомментариев", СкопироватьМассивКомментариев(ДанныеСценария.comments));
	КонецЕсли;	 
	Если ДанныеСценария.Свойство("tags") Тогда
		Если ТипЗнч(СтрокаСценария.ПроизвольныеЗначения) <> Тип("Структура") Тогда
			СтрокаСценария.ПроизвольныеЗначения = Новый Структура;
		КонецЕсли;	
		СтрокаСценария.ПроизвольныеЗначения.Вставить("МассивТегов", СкопироватьМассивТегов(ДанныеСценария.tags));
	КонецЕсли;	 
	
	ИдСтроки = ИдСтроки + 1;
	СтрокаСценария.ИдСтроки = ИдСтроки;
	СтрокаСценария.Тип = "Сценарий";
	СтрокаСценария.НомерСтрокиВФиче = ДанныеСценария.line;
	
	ЭлементыСценария = СтрокаСценария.ПолучитьЭлементы();
	Если ДанныеСценария.Свойство("steps") Тогда
		Для Каждого ДанныеШага Из ДанныеСценария.steps Цикл
			ДобавитьШаг(ЭлементыСценария, ДанныеШага, ФайлФичи, ИдСтроки, КешСнипетовНаКлиенте, ИмяEpfФичаФайла, СтруктураПараметров);
		КонецЦикла;	 
	КонецЕсли;	 
	
	Если ДанныеСценария.Свойство("examples") Тогда
		СтрокаСценария.ДопТип = "СтруктураСценария";
		
		СтрокаПримеры = СтрокаСценария.ПолучитьЭлементы().Добавить();
		СтрокаПримеры.Имя = "Примеры";
		СтрокаПримеры.Тип = "Примеры";
		ИдСтроки = ИдСтроки + 1;
		СтрокаПримеры.ИдСтроки = ИдСтроки;
		СтрокаПримеры.ТипКартинки = -1;
		СтрокаПримеры.НомерСтрокиВФиче = ДанныеСценария.examples.line;
		
		Если ДанныеСценария.examples.head.Свойство("tokens") Тогда
			Для Каждого ДанныеПараметра Из ДанныеСценария.examples.head.tokens Цикл
				СтрокаПримеры.ИменованныеПараметры.Добавить(ДанныеПараметра.text);
			КонецЦикла;	 
		КонецЕсли;	
		
		ЭлементыПримеры = СтрокаПримеры.ПолучитьЭлементы();
		
		// Первый пример с заголовком таблицы
		СтрокаПримера = ЭлементыПримеры.Добавить();
		СтрокаПримера.Имя = СокрЛП(ДанныеСценария.examples.head.text);
		СтрокаПримера.Тип = "Пример";
		ИдСтроки = ИдСтроки + 1;
		СтрокаПримера.ИдСтроки = ИдСтроки;
		СтрокаПримера.ТипКартинки = -1;
		СтрокаПримера.НомерСтрокиВФиче = ДанныеСценария.examples.head.line;
		
		
		Для Каждого ДанныеПримера Из ДанныеСценария.examples.body Цикл
			СтрокаПримера = ЭлементыПримеры.Добавить();
			СтрокаПримера.Имя = СокрЛП(ДанныеПримера.text);
			СтрокаПримера.Тип = "Пример";
			ИдСтроки = ИдСтроки + 1;
			СтрокаПримера.ИдСтроки = ИдСтроки;
			СтрокаПримера.ТипКартинки = -1;
			СтрокаПримера.НомерСтрокиВФиче = ДанныеПримера.line;
			
			ЭлементыПримера = СтрокаПримера.ПолучитьЭлементы();
			Если ДанныеПримера.Свойство("script") И ДанныеПримера.script <> Неопределено И ДанныеПримера.script.Свойство("steps") Тогда
				Для Каждого ДанныеШага Из ДанныеПримера.script.steps Цикл
					ДобавитьШаг(ЭлементыПримера, ДанныеШага, ФайлФичи, ИдСтроки, КешСнипетовНаКлиенте, ИмяEpfФичаФайла, СтруктураПараметров);
				КонецЦикла;	 
			КонецЕсли;	
			
		КонецЦикла;	 
		
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьШаг(ЭлементыСценария, ДанныеШага, ФайлФичи, ИдСтроки, КешСнипетовНаКлиенте, ИмяEpfФичаФайла, СтруктураПараметров)
	Если НЕ ДанныеШага.Свойство("snippet") Тогда
		ДобавитьГруппу(ЭлементыСценария, ДанныеШага, ФайлФичи, ИдСтроки, КешСнипетовНаКлиенте, ИмяEpfФичаФайла, СтруктураПараметров);
		Возврат;
	КонецЕсли;	 
	
	ЭтоПодсценарий = Ложь;
	Если ТипЗнч(ДанныеШага.snippet) = Тип("Структура") Тогда
		Если ДанныеШага.snippet.Свойство("steps") Тогда
			ЭтоПодсценарий = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	СтрокаШага = ЭлементыСценария.Добавить();
	СтрокаШага.Имя = СокрЛП(ДанныеШага.text);
	СтрокаШага.ИмяШагаБезКлючевогоСлова = СокрЛ(Сред(СтрокаШага.Имя, СтрДлина(ДанныеШага.keyword.text) + 1));
	Если ДанныеШага.Свойство("line") Тогда
		СтрокаШага.ПолныйПуть = "    " + ФайлФичи.ПолноеИмя + ":" + Формат(ДанныеШага.line, "ЧГ=; ЧН=0");
	КонецЕсли;	 
	СтрокаШага.ТипКартинки = 3;
	
	Если ДанныеШага.Свойство("comments") Тогда
		МассивКомментариевШага = Новый Массив;
		Для Каждого Элем Из ДанныеШага.comments Цикл
			МассивКомментариевШага.Добавить(Элем.text);
		КонецЦикла;
		
		Если ТипЗнч(СтрокаШага.ПроизвольныеЗначения) <> Тип("Структура") Тогда
			СтрокаШага.ПроизвольныеЗначения = Новый Структура;
		КонецЕсли;	
		
		СтрокаШага.ПроизвольныеЗначения.Вставить("МассивКомментариевШага", МассивКомментариевШага);
	Иначе
		//СтрокаШага.ПроизвольныеЗначения.Вставить("МассивКомментариевШага", Неопределено);
	КонецЕсли;	 
	Если ДанныеШага.Свойство("tags") Тогда
		//Массив тегов шага заполняется не так как массив тегов фичи или сценария
		МассивТеговШага = Новый Массив;
		Для Каждого Элем Из ДанныеШага.tags Цикл
			МассивТеговШага.Добавить(Элем.text);
		КонецЦикла;
		
		Если ТипЗнч(СтрокаШага.ПроизвольныеЗначения) <> Тип("Структура") Тогда
			СтрокаШага.ПроизвольныеЗначения = Новый Структура;
		КонецЕсли;
		
		СтрокаШага.ПроизвольныеЗначения.Вставить("МассивТеговШага", МассивТеговШага);
	Иначе	
		//СтрокаШага.ПроизвольныеЗначения.Вставить("МассивТеговШага", Неопределено);
	КонецЕсли;	 
	
	ИдСтроки = ИдСтроки + 1;
	СтрокаШага.ИдСтроки = ИдСтроки;
	СтрокаШага.Тип = "Шаг";
	Если ДанныеШага.Свойство("line") Тогда
		СтрокаШага.НомерСтрокиВФиче = ДанныеШага.line;
	КонецЕсли;	 
	СтрокаШага.Снипет = ДанныеШага.snippet;
	
	ЗаменятьПорядокПараметров = Ложь;
	ДанныеСнипета = КешСнипетовНаКлиенте[ДанныеШага.snippet];
	
	ЭтоОбычныйШагОбернутыйВУсловие = Ложь;
	Если ДанныеСнипета = Неопределено И (ДанныеШага.keyword.type = "if" ИЛИ ДанныеШага.keyword.type = "elseif")
			И НЕ ПустаяСтрока(ДанныеШага.snippet) Тогда
		НовыйIDИзStepDefinition = Неопределено;
		Если ЭтоОбычныйШагОбернутыйВУсловие(ДанныеШага.snippet, НовыйIDИзStepDefinition) Тогда
			ДанныеСнипета = КешСнипетовНаКлиенте[НовыйIDИзStepDefinition];
			Если ДанныеСнипета <> Неопределено Тогда
				ЭтоОбычныйШагОбернутыйВУсловие = Истина;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ДанныеСнипета = Неопределено И СтруктураПараметров.ЯзыкФичи <> "ru" Тогда
		ДанныеПоСнипетамПеревод = КешДанныеПеревода[СтруктураПараметров.ЯзыкФичи].ДляПоискаПеревод;
		ДанныеПеревода = ДанныеПоСнипетамПеревод[ДанныеШага.snippet];
		Если ДанныеПеревода = Неопределено Тогда
			ДанныеПеревода = ДанныеПоСнипетамПеревод["_" + ДанныеШага.snippet];
		КонецЕсли;	 
		
		Если ДанныеПеревода = Неопределено И (ДанныеШага.keyword.type = "if" ИЛИ ДанныеШага.keyword.type = "elseif")
				И НЕ ПустаяСтрока(ДанныеШага.snippet) Тогда
			НовыйIDИзStepDefinition = Неопределено;
			Если ЭтоОбычныйШагОбернутыйВУсловие(ДанныеШага.snippet, НовыйIDИзStepDefinition) Тогда
				ДанныеПеревода = ДанныеПоСнипетамПеревод[НовыйIDИзStepDefinition];
				Если ДанныеПеревода <> Неопределено Тогда
					ЭтоОбычныйШагОбернутыйВУсловие = Истина;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если ДанныеПеревода <> Неопределено Тогда
			ДанныеСнипета = КешСнипетовНаКлиенте[ДанныеПеревода.СтрокаДляПоискаРусский];
			ЗаменятьПорядокПараметров = Истина;
			МассивСоответствийПозицийПараметров = ДанныеПеревода.МассивСоответствийПозицийПараметров
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	Если ЭтоОбычныйШагОбернутыйВУсловие Тогда
		Если ТипЗнч(СтрокаШага.ПроизвольныеЗначения) <> Тип("Структура") Тогда
			СтрокаШага.ПроизвольныеЗначения = Новый Структура;
		КонецЕсли;	
		СтрокаШага.ПроизвольныеЗначения.Вставить("ЭтоОбычныйШагОбернутыйВУсловие", Истина);
	КонецЕсли;	 
	
	Если ДанныеСнипета <> Неопределено Тогда
		СтрокаШага.СтрокаРеальнойПроцедуры = ДанныеСнипета.СтрокаРеальнойПроцедуры;
		СтрокаШага.АдресСнипета = ДанныеСнипета.ИмяФайла;
		СтрокаШага.Снипет = ДанныеСнипета.id;
		Если ДанныеСнипета.УниверсальноеИмяEpf <> ИмяEpfФичаФайла Тогда
			СтрокаШага.ЭтоЧужойСнипет = Истина;
		КонецЕсли;	 
		СтрокаШага.ДопТип = ДанныеСнипета.ТипШагаВДереве;
		Если ЭтоОбычныйШагОбернутыйВУсловие И ДанныеШага.keyword.type = "if" Тогда
			СтрокаШага.ДопТип = "Условие";
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ДанныеШага.keyword.type = "elseif" Тогда
		СтрокаШага.ДопТип = "УсловиеИначеЕсли";
	КонецЕсли;	 
	
	Если ДанныеШага.Свойство("steps") Тогда
		СтрокаШага.Тип = "Область";
		СтрокаШага.ЭтоЧужойСнипет = Ложь;
	ИначеЕсли ЭтоПодсценарий Тогда
		СтрокаШага.Тип = "ШагСценарий";
		Если ДанныеШага.snippet.Свойство("filename") Тогда
			СтрокаШага.АдресСнипета = ДанныеШага.snippet.filename;
		КонецЕсли;	 
		СтрокаШага.Снипет = "";
		СтрокаШага.ТипКартинки = -1;
		
		Если ТипЗнч(СтрокаШага.ПроизвольныеЗначения) <> Тип("Структура") Тогда
			СтрокаШага.ПроизвольныеЗначения = Новый Структура;
		КонецЕсли;	 
		
		Если ДанныеШага.snippet.Свойство("steps") Тогда
			Если ДанныеШага.snippet.steps.Количество() > 0 Тогда
				НомерПервогоШага = ДанныеШага.snippet.steps[0].line;
				СтрокаШага.ПроизвольныеЗначения.Вставить("НомерСтрокиВФиче", НомерПервогоШага - 1);
			КонецЕсли;	 
		КонецЕсли;	 
		
	Иначе	
		СтрокаШага.Тип = "Шаг";
	КонецЕсли;	
	
	Если НЕ ПустаяСтрока(СтрокаШага.ДопТип) Тогда
		СтрокаШага.Тип = "Область";
	КонецЕсли;	 
	
	Если ДанныеШага.Свойство("params") Тогда
		Для Каждого ПараметрJson Из ДанныеШага.params Цикл
			ПараметрШага = СтрокаШага.ЗначенияПараметров.Добавить();
			ДанныеПараметра = Новый Структура;
			ДанныеПараметра.Вставить("Значение", ПараметрJson.text);
			
			ДанныеПараметра.Вставить("Тип", ТипПараметраJson(ПараметрJson.type, СтрокаШага.Имя));
			
			ПараметрШага.Значение = ДанныеПараметра;
		КонецЦикла;	 
	КонецЕсли;	 
	
	Если ДанныеШага.Свойство("multilines") Тогда
		Для Каждого ПараметрJson Из ДанныеШага.multilines Цикл
			ПараметрШага = СтрокаШага.ЗначенияПараметров.Добавить();
			ДанныеПараметра = Новый Структура;
			Массив = Новый Массив;
			Для Каждого ДанныеСтроки Из ПараметрJson.lines Цикл
				Если ДанныеСтроки.Свойство("text") Тогда
					Массив.Добавить(ДанныеСтроки.text);
				Иначе	
					Массив.Добавить("");
				КонецЕсли;	 
			КонецЦикла;	 
			ДанныеПараметра.Вставить("Значение", Ванесса.МассивВСтроку(Массив, Символы.ПС));
			
			ДанныеПараметра.Вставить("Тип", "Строка");
			
			ПараметрШага.Значение = ДанныеПараметра;
		КонецЦикла;	 
	КонецЕсли;	 
	
	КоличествоТаблиц = 0;
	Если ДанныеШага.Свойство("tables") Тогда
		СтрокаШага.ШагСПараметрамиВТаблице = Истина;
		ЭлементыШага = СтрокаШага.ПолучитьЭлементы();
		ДобавитьТаблицы(ЭлементыШага, ДанныеШага, ФайлФичи, ИдСтроки, КешСнипетовНаКлиенте, ИмяEpfФичаФайла);
		КоличествоТаблиц = ДанныеШага.tables.Количество();
	КонецЕсли;
	
	Если ЗаменятьПорядокПараметров и СтрокаШага.ЗначенияПараметров.Количество() > 0 Тогда
		
		//Далее условие предполагало провеку количества параметров у перевода. С учетом, что последний параметр может быть как обычным параметром, так и строкой.
		//Но это некорректно работает для шага
		//	And I go to line in "TableName" table
		//	        |'Name'   |
		//	        | 'Item1' |		
		
		//Если МассивСоответствийПозицийПараметров.Количество() <> СтрокаШага.ЗначенияПараметров.Количество() + КоличествоТаблиц Тогда
		//	ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
		//		Ванесса.Локализовать("Несоответствие числа параметров в шаге и в переводе шага <%1>: <%2> и <%3>."),
		//		СокрЛП(СтрокаШага.Имя), СтрокаШага.ЗначенияПараметров.Количество() + КоличествоТаблиц, МассивСоответствийПозицийПараметров.Количество());
		//КонецЕсли;	 
		
		Спс = Новый СписокЗначений;
		Для Каждого Номер Из МассивСоответствийПозицийПараметров Цикл
			Если СтрокаШага.ЗначенияПараметров.Количество() >= Номер Тогда
				Спс.Добавить(СтрокаШага.ЗначенияПараметров[Номер - 1].Значение);
			КонецЕсли;	
		КонецЦикла;	 
		СтрокаШага.ЗначенияПараметров = Спс;
	КонецЕсли;	 
	
	Если СтрокаШага.Тип = "Область" И ПустаяСтрока(СтрокаШага.ДопТип) Тогда
		СтрокаШага.Снипет = "";
		СтрокаШага.СтрокаРеальнойПроцедуры = "";
		СтрокаШага.АдресСнипета = "";
		СтрокаШага.ИмяШагаБезКлючевогоСлова = "";
		СтрокаШага.ПолныйПуть = "";
		СтрокаШага.ЗначенияПараметров = Неопределено;
	КонецЕсли;	 
	
	Если НЕ ДанныеШага.Свойство("tables") И НЕ ДанныеШага.Свойство("multilines") И ДанныеШага.Свойство("Steps") И ПустаяСтрока(СтрокаШага.АдресСнипета) Тогда
		//значит это группа шагов записанная как шаг
		СтрокаШага.Тип = "Область";
		СтрокаШага.Снипет = "";
		СтрокаШага.ТипКартинки = -1;
		СтрокаШага.ПолныйПуть = "";
		СтрокаШага.ИмяШагаБезКлючевогоСлова = "";
	Иначе	
		
		Если СтрокаШага.Тип = "Шаг" ИЛИ СтрокаШага.Тип = "Область" Тогда
			Если СтруктураПараметров.РассчитыватьСтатистику Тогда
				СтруктураПараметров.КоличествоШагов = СтруктураПараметров.КоличествоШагов + 1;
				Если ДанныеСнипета = Неопределено Тогда
					СтруктураПараметров.КоличествоPending = СтруктураПараметров.КоличествоPending + 1;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	Если ДанныеШага.Свойство("snippet") И ТипЗнч(ДанныеШага.snippet) = Тип("Структура") И ДанныеШага.snippet.Свойство("examples") Тогда
		// Вставка структуры сценария
		ФайлФичиПодсценария = Новый Файл(ДанныеШага.snippet.filename);
		СтрокаШага.ДопТип = "СтруктураСценария";
		
		ЭлементыШага = СтрокаШага.ПолучитьЭлементы();
		
		Для Каждого ДанныеШагаИзОпределенияСтруктурыСценария Из ДанныеШага.snippet.steps Цикл
			ДобавитьШаг(ЭлементыШага, ДанныеШагаИзОпределенияСтруктурыСценария, ФайлФичиПодсценария, ИдСтроки, КешСнипетовНаКлиенте, ИмяEpfФичаФайла, СтруктураПараметров);
		КонецЦикла;	 
		
		СтрокаПримеры = ЭлементыШага.Добавить();
		СтрокаПримеры.Имя = "Примеры";
		СтрокаПримеры.Тип = "Примеры";
		ИдСтроки = ИдСтроки + 1;
		СтрокаПримеры.ИдСтроки = ИдСтроки;
		СтрокаПримеры.ТипКартинки = -1;
		СтрокаПримеры.НомерСтрокиВФиче = ДанныеШага.snippet.examples.head.line;;
		
		// Первая строка таблицы примеров
		ПерваяСтрокаПримеров = СтрокаПримеры.ПолучитьЭлементы().Добавить();
		ПерваяСтрокаПримеров.Имя = СокрЛП(ДанныеШага.snippet.examples.head.text);
		ИдСтроки = ИдСтроки + 1;
		ПерваяСтрокаПримеров.ИдСтроки = ИдСтроки;
		ПерваяСтрокаПримеров.ТипКартинки = -1;
		ПерваяСтрокаПримеров.НомерСтрокиВФиче = ДанныеШага.snippet.examples.head.line;
		ПерваяСтрокаПримеров.Тип = "Пример";
		
		Для Каждого ДанныеПримераJson Из ДанныеШага.snippet.examples.body Цикл
			СтрокаПримера = СтрокаПримеры.ПолучитьЭлементы().Добавить();
			СтрокаПримера.Имя = СокрЛП(ДанныеПримераJson.text);
			ИдСтроки = ИдСтроки + 1;
			СтрокаПримера.ИдСтроки = ИдСтроки;
			СтрокаПримера.ТипКартинки = -1;
			СтрокаПримера.НомерСтрокиВФиче = ДанныеПримераJson.line;
			СтрокаПримера.ПараметрыТаблицы = Новый СписокЗначений;
			СтрокаПримера.СтрокаПараметровШагаВВидеТаблицы = Истина;
			СтрокаПримера.Тип = "Пример";
			
			Для Каждого ДанныеПараметраJSON Из ДанныеПримераJson.tokens Цикл
				ДанныеПараметра = Новый Структура;
				ДанныеПараметра.Вставить("Значение", ДанныеПараметраJSON.text);
				ДанныеПараметра.Вставить("ИмяПараметра", ДанныеПараметраJSON.text);
				ДанныеПараметра.Вставить("Тип", "Строка");
				СтрокаПримера.ПараметрыТаблицы.Добавить(ДанныеПараметра);
			КонецЦикла;
			
			ЭлементыПримера = СтрокаПримера.ПолучитьЭлементы();
			Для Каждого ДанныеПодчиненногоШага Из ДанныеПримераJson.script.steps Цикл
				ДобавитьШаг(ЭлементыПримера, ДанныеПодчиненногоШага, ФайлФичиПодсценария, ИдСтроки, КешСнипетовНаКлиенте, ИмяEpfФичаФайла, СтруктураПараметров);
			КонецЦикла;	 
			
		КонецЦикла;	 
		
	КонецЕсли;	 
	
	Если ДанныеШага.Свойство("steps") Тогда
		ЭлементыШага = СтрокаШага.ПолучитьЭлементы();
		Для Каждого ДанныеПодчиненногоШага Из ДанныеШага.steps Цикл
			ДобавитьШаг(ЭлементыШага, ДанныеПодчиненногоШага, ФайлФичи, ИдСтроки, КешСнипетовНаКлиенте, ИмяEpfФичаФайла, СтруктураПараметров);
		КонецЦикла;	 
	ИначеЕсли ЭтоПодсценарий И СтрокаШага.ДопТип <> "СтруктураСценария" Тогда	
		ЭлементыШага = СтрокаШага.ПолучитьЭлементы();
		Если ДанныеШага.snippet.Свойство("filename") Тогда
			ФайлФичиПодсценария = Новый Файл(ДанныеШага.snippet.filename);
		Иначе	
			ФайлФичиПодсценария = Новый Файл;
		КонецЕсли;	 
		
		Для Каждого ДанныеПодчиненногоШага Из ДанныеШага.snippet.steps Цикл
			ДобавитьШаг(ЭлементыШага, ДанныеПодчиненногоШага, ФайлФичиПодсценария, ИдСтроки, КешСнипетовНаКлиенте, ИмяEpfФичаФайла, СтруктураПараметров);
		КонецЦикла;	 
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьГруппу(ЭлементыСценария, ДанныеШага, ФайлФичи, ИдСтроки, КешСнипетовНаКлиенте, ИмяEpfФичаФайла, СтруктураПараметров)
	СтрокаГруппы = ЭлементыСценария.Добавить();
	СтрокаГруппы.Имя = СокрЛП(ДанныеШага.text);
	СтрокаГруппы.ТипКартинки = -1;
	
	Если ДанныеШага.Свойство("comments") Тогда
		МассивКомментариев = Новый Массив;
		Для Каждого Элем Из ДанныеШага.comments Цикл
			МассивКомментариев.Добавить(Элем.text);
		КонецЦикла;
		
		Если ТипЗнч(СтрокаГруппы.ПроизвольныеЗначения) <> Тип("Структура") Тогда
			СтрокаГруппы.ПроизвольныеЗначения = Новый Структура;
		КонецЕсли;	
		
		СтрокаГруппы.ПроизвольныеЗначения.Вставить("МассивКомментариевШага", МассивКомментариев);
	Иначе
		//СтрокаГруппы.ПроизвольныеЗначения.Вставить("МассивКомментариевШага", Неопределено);
	КонецЕсли;	 
	Если ДанныеШага.Свойство("tags") Тогда
		//Массив тегов шага заполняется не так как массив тегов фичи или сценария
		МассивТегов = Новый Массив;
		Для Каждого Элем Из ДанныеШага.tags Цикл
			МассивТегов.Добавить(Элем.text);
		КонецЦикла;
		
		Если ТипЗнч(СтрокаГруппы.ПроизвольныеЗначения) <> Тип("Структура") Тогда
			СтрокаГруппы.ПроизвольныеЗначения = Новый Структура;
		КонецЕсли;
		
		СтрокаГруппы.ПроизвольныеЗначения.Вставить("МассивТеговШага", МассивТегов);
	Иначе	
		//СтрокаГруппы.ПроизвольныеЗначения.Вставить("МассивТеговШага", Неопределено);
	КонецЕсли;	 
	
	ИдСтроки = ИдСтроки + 1;
	СтрокаГруппы.ИдСтроки = ИдСтроки;
	СтрокаГруппы.Тип = "Область";
	СтрокаГруппы.НомерСтрокиВФиче = ДанныеШага.line;
	
	Если ДанныеШага.Свойство("keyword") И НРег(ДанныеШага.keyword.text) = СокрЛП(НРег(ДанныеШага.text)) Тогда
		Если ДанныеШага.keyword.type = "else" Тогда
			СтрокаГруппы.ДопТип = "УсловиеИначе";
		ИначеЕсли ДанныеШага.keyword.type = "try" Тогда
			СтрокаГруппы.ДопТип = "Попытка";
		ИначеЕсли ДанныеШага.keyword.type = "except" Тогда
			СтрокаГруппы.ДопТип = "Исключение";
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ДанныеШага.Свойство("steps") Тогда
		ЭлементыГруппы = СтрокаГруппы.ПолучитьЭлементы();
		Для Каждого ДанныеПодчиненногоШага Из ДанныеШага.steps Цикл
			ДобавитьШаг(ЭлементыГруппы, ДанныеПодчиненногоШага, ФайлФичи, ИдСтроки, КешСнипетовНаКлиенте, ИмяEpfФичаФайла, СтруктураПараметров);
		КонецЦикла;	 
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьТаблицы(ЭлементыШага, ДанныеШага, ФайлФичи, ИдСтроки, КешСнипетовНаКлиенте, ИмяEpfФичаФайла)
	НомерТаблицы = 0;
	Для Каждого ДанныеТаблицы Из ДанныеШага.tables Цикл
		НомерТаблицы = НомерТаблицы + 1;
		
		Если НомерТаблицы > 1 Тогда
			СтрокаТаблицы = ЭлементыШага.Добавить();
			СтрокаТаблицы.ТипКартинки = -1;
			ИдСтроки = ИдСтроки + 1;
			СтрокаТаблицы.ИдСтроки = ИдСтроки;
		КонецЕсли;	 
		
		СтрокаТаблицы = ЭлементыШага.Добавить();
		СтрокаТаблицы.Имя = СокрЛП(ДанныеТаблицы.head.text);
		СтрокаТаблицы.ПолныйПуть = "    " + ФайлФичи.ПолноеИмя + ":" + Формат(ДанныеТаблицы.head.line, "ЧГ=; ЧН=0");
		СтрокаТаблицы.ТипКартинки = -1;
		СтрокаТаблицы.СтрокаПараметровШагаВВидеТаблицы = Истина;
		СтрокаТаблицы.НомерСтрокиВФиче = ДанныеТаблицы.head.line;
		СтрокаТаблицы.ПараметрыТаблицы = Новый СписокЗначений;
		ИдСтроки = ИдСтроки + 1;
		СтрокаТаблицы.ИдСтроки = ИдСтроки;
		
		
		ПараметрыТаблицы = СтрокаТаблицы.ПараметрыТаблицы;
		Если ДанныеТаблицы.head.Свойство("tokens") Тогда
			Для Каждого ЗначениеЯчейкиJson Из ДанныеТаблицы.head.tokens Цикл
				ЗначениеЯчейки = Новый Структура;
				ЗначениеЯчейки.Вставить("Значение", ЗначениеЯчейкиJson.text);
				ЗначениеЯчейки.Вставить("ИмяПараметра", ЗначениеЯчейкиJson.text);
				ЗначениеЯчейки.Вставить("Тип", ТипПараметраJson(ЗначениеЯчейкиJson.type, СтрокаТаблицы.Имя));
				
				ПараметрыТаблицы.Добавить(ЗначениеЯчейки);
			КонецЦикла;	 
		КонецЕсли;	 
		
		Для Каждого ДанныеСтрок Из ДанныеТаблицы.body Цикл
			СтрокаТаблицы = ЭлементыШага.Добавить();
			СтрокаТаблицы.Имя = СокрЛП(ДанныеСтрок.text);
			СтрокаТаблицы.ПолныйПуть = "    " + ФайлФичи.ПолноеИмя + ":" + Формат(ДанныеСтрок.line, "ЧГ=; ЧН=0");
			СтрокаТаблицы.ТипКартинки = -1;
			СтрокаТаблицы.СтрокаПараметровШагаВВидеТаблицы = Истина;
			СтрокаТаблицы.НомерСтрокиВФиче = ДанныеСтрок.line;
			СтрокаТаблицы.ПараметрыТаблицы = Новый СписокЗначений;
			ИдСтроки = ИдСтроки + 1;
			СтрокаТаблицы.ИдСтроки = ИдСтроки;
			
			ПараметрыТаблицы = СтрокаТаблицы.ПараметрыТаблицы;
			Если НЕ ДанныеСтрок.Свойство("tokens") Тогда
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
					Ванесса.Локализовать("Строка <%1> некорректно оформлена. Строка фичи <%2>"),ЗначениеЯчейкиJson.text, ДанныеСтрок.line);
			КонецЕсли;	
			Для Каждого ЗначениеЯчейкиJson Из ДанныеСтрок.tokens Цикл
				ЗначениеЯчейки = Новый Структура;
				ЗначениеЯчейки.Вставить("Значение", ЗначениеЯчейкиJson.text);
				ЗначениеЯчейки.Вставить("ИмяПараметра", ЗначениеЯчейкиJson.text);
				ЗначениеЯчейки.Вставить("Тип", ТипПараметраJson(ЗначениеЯчейкиJson.type, СтрокаТаблицы.Имя));
				
				ПараметрыТаблицы.Добавить(ЗначениеЯчейки);
			КонецЦикла;	
			
		КонецЦикла;	 
		
	КонецЦикла;	 
	
КонецПроцедуры 

&НаКлиенте
Функция ТипПараметраJson(ТипJson, Стр)
	Если ТипJson = "Param" ИЛИ ТипJson = "None" Тогда
		Возврат  "Строка";
	ИначеЕсли ТипJson = "Number" Тогда
		Возврат  "Число";
	ИначеЕсли ТипJson = "Date" Тогда
		Возврат "Дата";
	Иначе
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
		Ванесса.Локализовать("Неизвестный тип <%1> параметра в строке: <%2>."),ТипJson, Стр);
	КонецЕсли;	 
КонецФункции	 

&НаКлиенте
Функция НормализоватьПутьКФайлу(Стр)
	ТекСтр =  НРег(СтрЗаменить(Стр, "\", "/"));
	Если Прав(ТекСтр, 1) <> "/" Тогда
		ТекСтр = ТекСтр + "/";
	КонецЕсли;	 
	
	Возврат ТекСтр; 
КонецФункции	 

&НаКлиенте
Функция КаталогФичиВДереве(ИмяФайла, ЭлементыРодителя, КаталогиФичаФайлов, ОсновнойКаталогФич, ИмяКаталога, ИдСтроки)
	ПутьКФиче = НормализоватьПутьКФайлу(ИмяФайла);
	ОсновнойКаталогФич = НормализоватьПутьКФайлу(ОсновнойКаталогФич);
	
	ЭлементКаталогФичи = КаталогиФичаФайлов[ПутьКФиче];
	Если ЭлементКаталогФичи <> Неопределено Тогда
		Возврат ЭлементКаталогФичи; 
	КонецЕсли;	 
	
	Если ПутьКФиче = ОсновнойКаталогФич ИЛИ СтрДлина(ОсновнойКаталогФич) > СтрДлина(ПутьКФиче) Тогда
		ЭлементКаталогФичи = КаталогиФичаФайлов[ПутьКФиче];
		Если ЭлементКаталогФичи = Неопределено Тогда
			Если ТипЗнч(ЭлементыРодителя) = Тип("ДанныеФормыДерево") Тогда
				ЭлементКаталогФичи = ЭлементыРодителя.ПолучитьЭлементы().Добавить();
			Иначе	
				ЭлементКаталогФичи = ЭлементыРодителя.Добавить();
			КонецЕсли;	 
			
			ЭлементКаталогФичи.Имя = ИмяКаталога;
			ЭлементКаталогФичи.Тип = "Каталог";
			ЭлементКаталогФичи.ПолныйПуть = ИмяФайла;
			ИдСтроки = ИдСтроки + 1;
			ЭлементКаталогФичи.ИдСтроки = ИдСтроки;
			
			КаталогиФичаФайлов.Вставить(ПутьКФиче, ЭлементКаталогФичи);
		КонецЕсли;	 
		
		Возврат ЭлементКаталогФичи;
	КонецЕсли;	 
	
	Файл = Новый Файл(ИмяФайла);
	ПутьКФиче = НормализоватьПутьКФайлу(Файл.Путь);
	ФайлКаталог = Новый Файл(Файл.Путь);
	
	ЭлементКаталогФичи = КаталогиФичаФайлов[ПутьКФиче];
	Если ЭлементКаталогФичи = Неопределено Тогда
		ЭлементКаталогФичи = КаталогФичиВДереве(ПутьКФиче, ЭлементыРодителя, КаталогиФичаФайлов, ОсновнойКаталогФич, ФайлКаталог.Имя, ИдСтроки);
	КонецЕсли;	 
	
	Если ТипЗнч(ЭлементКаталогФичи) = Тип("ДанныеФормыДерево") ИЛИ ТипЗнч(ЭлементКаталогФичи) = Тип("ДанныеФормыЭлементДерева") Тогда
		ЭлементКаталогФичи = ЭлементКаталогФичи.ПолучитьЭлементы().Добавить();
	Иначе	
		ЭлементКаталогФичи = ЭлементКаталогФичи.Добавить();
	КонецЕсли;	 
	
	ЭлементКаталогФичи.Имя = ИмяКаталога;
	ЭлементКаталогФичи.Тип = "Каталог";
	ИдСтроки = ИдСтроки + 1;
	ЭлементКаталогФичи.ИдСтроки = ИдСтроки;
	
	КаталогиФичаФайлов.Вставить(НормализоватьПутьКФайлу(ИмяФайла), ЭлементКаталогФичи);
	
	Возврат ЭлементКаталогФичи; 
КонецФункции	 

&НаСервереБезКонтекста
Процедура ДанныеПоСнипетамПеревод(Язык, АдресВХранилище, ДляПоискаПеревод, ДляПоискаРусский)
	
	ДанныеПеревода = ПолучитьИзВременногоХранилища(АдресВХранилище);
	Для Каждого СтрокаПеревода Из ДанныеПеревода Цикл
		Данные = Новый Структура;
		Данные.Вставить("СтрокаДляПоискаРусский", СтрокаПеревода.СтрокаДляПоискаРусский);
		Данные.Вставить("СтрокаДляПоискаПеревод", СтрокаПеревода.СтрокаДляПоискаПеревод);
		Данные.Вставить("МассивСоответствийПозицийПараметров", СтрокаПеревода.МассивСоответствийПозицийПараметров);
		Данные.Вставить("ТекстПереводаШаг", СтрокаПеревода.ТекстПереводаШаг);
		
		ДляПоискаПеревод.Вставить(СтрокаПеревода.СтрокаДляПоискаПеревод, Данные);
		ДляПоискаРусский.Вставить(СтрокаПеревода.СтрокаДляПоискаРусский, Данные);
	КонецЦикла;	 
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоОбычныйШагОбернутыйВУсловие(Стр, НовыйIDИзStepDefinition)
	Если Прав(Стр, 5) = "тогда" Тогда
		НовыйIDИзStepDefinition = Лев(Стр, СтрДлина(Стр) - 5);
		Возврат Истина;
	КонецЕсли;	 
	
	Если Прав(Стр, 4) = "then" Тогда
		НовыйIDИзStepDefinition = Лев(Стр, СтрДлина(Стр) - 4);
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция КлючевыеСловаДляПарсераСтрокой()

	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Ванесса.МестоположениеКлючевыеСловаGherkin());
	Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Ванесса.УдалитьФайлыКомандаСистемы(ИмяВременногоФайла);
	ИмяВременнойПапки = ИмяВременногоФайла + ПолучитьРазделительПути();
	ЧтениеZipФайла = Новый ЧтениеZipФайла(Поток);
	Для каждого ЭлементZip из ЧтениеZipФайла.Элементы Цикл
		ЧтениеZipФайла.Извлечь(ЭлементZip, ИмяВременнойПапки);
		ИмяВременногоФайла = ИмяВременнойПапки + ЭлементZip.ПолноеИмя;
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();
		ЧтениеТекста = Новый ЧтениеТекста(Поток, КодировкаТекста.UTF8);
		ТекстМакета = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		Ванесса.УдалитьФайлыКомандаСистемы(ИмяВременногоФайла);
		Ванесса.УдалитьФайлыКомандаСистемы(ИмяВременнойПапки);
		Возврат ТекстМакета;
	КонецЦикла;
	
КонецФункции	 

&НаКлиенте
Функция УниверсальноеИмяФайла(Стр)
	Возврат НРег(СтрЗаменить(Стр, "\", "/")); 
КонецФункции

&НаКлиенте
Функция ТегиОтборНрег()
	
	Если Ванесса.Объект.СписокТеговОтбор.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Результат = Новый Соответствие;
	Для Каждого Элем Из Ванесса.Объект.СписокТеговОтбор Цикл
		Результат.Вставить(НРег(Элем.Значение), Истина);
	КонецЦикла;	 
	
	Возврат Результат; 
	
КонецФункции	 

#КонецОбласти

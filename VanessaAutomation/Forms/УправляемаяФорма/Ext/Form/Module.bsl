#Область ОписаниеПеременных

#Область ЭкспортируемыеПеременныеФормы

// Необходима для работы автотестирования VA
&НаКлиенте
Перем СлужебнаяПеременная Экспорт;

// Необходима для работы автотестирования VA
&НаКлиенте
Перем ХостСистема Экспорт;

&НаКлиенте
Перем ЭтоLinux Экспорт;

&НаКлиенте
Перем ЭтоCentOS7 Экспорт;

&НаКлиенте
Перем ЭтоЗапускВРежимеКоманднойСтроки Экспорт;

&НаКлиенте
Перем ЭтоТонкийКлиент Экспорт;

&НаКлиенте
Перем КешДанныеПеревода Экспорт;

&НаКлиенте
Перем Версия836ИлиВыше Экспорт;

&НаКлиенте
Перем Версия838ИлиВыше Экспорт;

&НаКлиенте
Перем Версия839ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8310ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8311ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8312ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8313ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8314ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8315ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8316ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8317ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8318ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8319ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8321ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8323ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8325ИлиВыше Экспорт;

// Служебная переменная. Получает значение Истина, когда отработали все обработчики открытия формы.
&НаКлиенте
Перем ФормаVanessaAutomationОткрылась Экспорт;

&НаКлиенте
Перем СработалиВсеАсинхронныеОбработчикиФормыПриОткрытии Экспорт;

&НаКлиенте
Перем БуферОбменаVA Экспорт;

&НаКлиенте
Перем VanessaTabs Экспорт;

&НаКлиенте
Перем VanessaGherkinProvider Экспорт;

&НаКлиенте
Перем ЗначенияЭлементовТекущегоОкнаVanessaEditor Экспорт;

&НаКлиенте
Перем ТекущаяПозицияVanessaEditor Экспорт;

&НаКлиенте
Перем ИгнорироватьИзмененияVanessaEditor Экспорт;

&НаКлиенте
Перем СписокШаговБезСкриншота Экспорт; // Массив

&НаКлиенте
Перем ЗапрещеныСинхронныеВызовы Экспорт;

&НаКлиенте
Перем ПроисходилЗапускTescClient Экспорт;

&НаКлиенте
Перем РежимСовместимостиБольшеИлиРавен837 Экспорт;

&НаКлиенте
Перем ТекущийTestclientЭтоWebКлиент Экспорт;

#КонецОбласти

#Область ГлобальныеПеременныеФормы

&НаКлиенте
Перем Ванесса;

&НаКлиенте
Перем глТипСтрока;

&НаКлиенте
Перем глДопПараметры;

&НаКлиенте
Перем ПараметрыВызоваПроцедурНачало, ПараметрыВызоваПроцедурОкончание, ПараметрыВызоваПерейтиКВыполнениюСледующегоШагаОкончание, ПараметрыЗапускВРежимеКоманднойСтроки;

&НаКлиенте
Перем ИдОкнаДляСкриншотов;

&НаКлиенте
Перем ОкнаДляСкриншотов;

&НаКлиенте
Перем ИдДанныеСпискаПроцессов;

&НаКлиенте
Перем ДанныеСпискаПроцессов;

&НаКлиенте
Перем НадоПодключитьШагиSingleИзИзМакета;

&НаКлиенте
Перем ИменаФайловДляПрикрепления;

&НаКлиенте
Перем ОбработчикЗапуститьСценарийСоСтрокиПрисланнойИзвнеПодключен;

&НаКлиенте
Перем МодульПарсерФич;

&НаКлиенте
Перем МодульРедакторТекста, МодульРаботаСБраузером, МодульРаботаСGit, МодульПарсерGherkin, МодульПодготовкаИЗагрузкаДанных, МодульНастройкиРаботыСБраузером, МодульОбщегоНазначенияVA;

&НаКлиенте
Перем МодульИсследовательФормы;

&НаКлиенте
Перем МодульИнициаторДанных;

&НаКлиенте
Перем МодульРаботаСоСтроками;

&НаКлиенте
Перем МодульСерверныеВызовы;

&НаКлиенте
Перем ДанныеВозможнаОптимизацияЗагрузкиФичи;

&НаКлиенте
Перем СтрокаПробелов;

&НаКлиенте
Перем КешЗагрузкиФич;

&НаКлиенте
Перем КешПараметрыВСтроке;

&НаКлиенте
Перем КешРассчитатьПараметрыТаблицы;

&НаКлиенте
Перем КешОпределенияТипа;

&НаКлиенте
Перем КешПоискаКлючевыхСлов;

&НаКлиенте
Перем КешСнипетов;

&НаКлиенте
Перем КешСоответствияШаговПоискПоИмени;

&НаКлиенте
Перем КэшФормПлагинов;

&НаКлиенте
Перем мСинхронныйРежимРазрешен;

&НаКлиенте
Перем ОбъектКонтекст Экспорт;

&НаКлиенте
Перем Контекст;

&НаКлиенте
Перем ОбъектКонтекстСохраняемый Экспорт;

&НаКлиенте
Перем КонтекстСохраняемый;

&НаКлиенте
Перем МассивСостоянияКонтекстовДоВыполненияШага;

&НаКлиенте
Перем ТаблицаУжеСуществующихСценариев, ТаблицаУжеСуществующихСценариевSingle;

&НаКлиенте
Перем ДанныеСекцииПеременныхФич;

&НаКлиенте
Перем ДанныеВерсийFeatureИмяФайла;

&НаКлиенте
Перем МассивВерсийEPFИмяФайла;

&НаКлиенте
Перем МассивВерсийEPFВерсия;

&НаКлиенте
Перем ИдетОпросЭлементовФормTestClient;

&НаКлиенте
Перем МассивСостояниеФормTestClient;

&НаКлиенте
Перем ОбработкаСвязаннаяСИсполняемойФичей;

&НаКлиенте
Перем ТаблицаКонтекстовОбработок;

&НаКлиенте
Перем МассивИменКонтекстовОбработок;

&НаКлиенте
Перем ВыполнятьСценарииАсинхронно;

&НаКлиенте
Перем МассивСценариевДляВыполнения, МассивСтрокДереваДанныеФормы;

&НаКлиенте
Перем ТекИД_СценарияВМассиве;

&НаКлиенте
Перем ТекИД_ШагаВМассиве;

&НаКлиенте
Перем ТекИД_ВыполненногоШагаВМассиве;

&НаКлиенте
Перем СохраненноеСостояниеФормыTestClient;

&НаКлиенте
Перем ВсёЕщёИдётВыполнениеШагов;

&НаКлиенте
Перем МассивИДСтрокиДерева;

&НаКлиенте
Перем МассивРезультатПрохожденияТестовСценария;

&НаКлиенте
Перем ПараметрыСтатистикаВыполненияТестов;

&НаКлиенте
Перем ЦветУспешно;

&НаКлиенте
Перем ЦветОжидает;

&НаКлиенте
Перем ЦветНеУспешно;

&НаКлиенте
Перем ЦветЧужойСнипет;

&НаКлиенте
Перем ШагСтрокДляМодуля;

&НаКлиенте
Перем ИмяФайлаЛогаИнструкцииHTML, ТекущаяФичаИнструкцииHTML, ТекущиеДанныеИнструкцииHTML;

&НаКлиенте
Перем ИмяФайлаЛогаИнструкцииMarkdown, ТекущаяФичаИнструкцииMarkdown, ТекущиеДанныеИнструкцииMarkdown;

&НаКлиенте
Перем СтатусЗапускаСценариев Экспорт;

&НаКлиенте
Перем ТаблицаОбработокДляОтладки;

&НаКлиенте
Перем СтрокаШагаСКоторогоНадоВыполнятьСценарий;

&НаКлиенте
Перем ПредставлениеВертЧертыВТабДок;

&НаКлиенте
Перем ТекущийИсполняемыйФичаФайл;

&НаКлиенте
Перем ПрекратитьВыполнениеШаговТакКакЗакончилсяСценарий;

&НаКлиенте
Перем ПрекратитьВыполнениеВсехСценариев;

&НаКлиенте
Перем ПрекратитьВыполнениеДанногоСценария, ПрекратитьВыполнениеСценариевДаннойФичи, ИмяФайлаФичиВКоторойПрекращеноВыполнениеСценариев;

&НаКлиенте
Перем МассивPIDОкон1С, ЗначениеПараметровДляСнятияСкриншотов, ТекProcessID, МассивКоординатОкон1С;

&НаКлиенте
Перем ИмяФайлаСубтитров, ИнтервалВыполненияШагаПриЗаписиВидео, БылаОшибкаСкриптовСборкиВидео;

&НаКлиенте
Перем СкриншотСделанВСценарии;

&НаКлиенте
Перем WshShell;

&НаКлиенте
Перем МассивСнипетовВидеовставкаИзТекста;

&НаКлиенте
Перем ЭтоЗапускВРежимеБезЗагрузкиНастроек;

&НаКлиенте
Перем МассивTTS;

&НаКлиенте
Перем МодульРаботыСВидео;

&НаКлиенте
Перем МодульСообщенийПользователю;

&НаКлиенте
Перем МодульПереводШагов;

&НаКлиенте
Перем МодульSikuliXСевер;

&НаКлиенте
Перем ИмяУправляющиегоФайлаSikuliXСервер;

&НаКлиенте
Перем ИмяФайлаОтветаSikuliXСевер;

&НаКлиенте
Перем НедавноЗагруженныеФичи;

&НаКлиенте
Перем Брейкпоинты, НайденныеПроблемы, УстановленыБрейкПоинты, ЕстьБрейкпоинтыVanessaEditorВиджеты;

&НаКлиенте
Перем ДанныеДляРаскрасскиСтрокРедактора, ДанныеДляОбновленияСтрокиРедактора, ДанныеДляОбновленияСтрокиРедактораПоТекущейСтрокеДерева, ДанныеОшибокVanessaEditor;

&НаКлиенте
Перем АсинхронноеПодключениеМодулейВыполнялось;

&НаКлиенте
Перем ИмяСценарияКоторыйНадоВыполнитьПослеПерезагрузки;

&НаКлиенте
Перем СтрокаСценарияКоторыйНадоВыполнитьПослеПереазгрузкиЭтоПример;

&НаКлиенте
Перем ОбработанноеИдОповещения;

&НаКлиенте
Перем СтруктураПоискаСтрокДерева;

&НаКлиенте
Перем КешВерсияОбработки;

&НаКлиенте
Перем КешРежимСовместимости;

&НаКлиенте
Перем СчетчикШаговБезТаймера, МаксСчетчикШаговБезТаймера;

&НаКлиенте
Перем Регулярка;

&НаКлиенте
Перем НадоПерейтиКСтрокеДерева;

&НаКлиенте
Перем ВозниклаОшибкаПодключенияTestClient;

&НаКлиенте
Перем ВозниклаОшибкаОшибкаСетевогоВзаимодействия;

&НаКлиенте
Перем КоличествоЗапущенныхКлиентовТестирования;

&НаКлиенте
Перем ВозниклаОшибкаВШагеКонтекста;

&НаКлиенте
Перем ГлобальныеЗначенияШагов;

&НаКлиенте
Перем ЗафиксированнаяФормаИлиГруппаTestClient;

&НаКлиенте
Перем КешДанныхПереводовШагов;

&НаКлиенте
Перем SikuliXСеверЗапущен;

&НаКлиенте
Перем ИмяФайлаВыводаКонсолиSikuliXСервер;

&НаКлиенте
Перем ПроверятьВидимостьЭлементаСУчетомРодителя;

&НаКлиенте
Перем ПроверятьДоступностьЭлементаСУчетомРодителя;

&НаКлиенте
Перем ПроверятьТолькоПросмотрСУчетомРодителя;

&НаКлиенте
Перем ЕстьКонстантаВКонфигурацииПутьКVA;

&НаКлиенте
Перем ПрефиксИнструментаДляСохраненияНастроек;

&НаКлиенте
Перем ИДДляОбщегоСохраненияНастроек;

&НаКлиенте
Перем ВозможнаОптимизацияРаботыСФайлами, ПроверяласьВозможностьОптимизацииРаботыСФайлами;

&НаКлиенте
Перем БиблиотекаДляПодключения;

&НаКлиенте
Перем глСтруктураПараметров;

&НаКлиенте
Перем СохранитьКлиентовТестированияПослеОткрытияФормы;

&НаКлиенте
Перем ЭтоWindowsXP;

&НаКлиенте
Перем ПоказыватьНастройкуПроверкаРаботыVanessaAutomationВРежимеTestClient;

&НаКлиенте
Перем ТекстВстроенныхСценариевСервер;

&НаКлиенте
Перем СлужебныеПеременныеКонтекста;

&НаКлиенте
Перем ПоказыватьСлужебныеПеременные;

&НаКлиенте
Перем глПараметрыПеретаскивания;

&НаКлиенте
Перем ОшибкаAssert;

&НаКлиенте
Перем ЗначениеExpected;

&НаКлиенте
Перем ЗначениеActual;

&НаКлиенте
Перем ОшибкиАссертов;

&НаКлиенте
Перем ОграничениеНаКоличествоПопытокДействий;

&НаКлиенте
Перем ОшибкиСценарияПереданныеИзвне;

&НаКлиенте
Перем ВнешняяКомпонентаДляСкриншотов Экспорт, ИдентификаторВнешнейКомпонентыДляСкриншотов, БылаВыполненаТихаяУстановкаКомпоненты, ВнешняяКомпонентаПарсерGherkin Экспорт;

&НаКлиенте
Перем ВнешняяКомпонентаРаботаСGit Экспорт;

&НаКлиенте
Перем ДескрипторОсновногоОкнаТекущегоКлиентаТестирования;

&НаКлиенте
Перем PIDТекущегоКлиентаТестирования;

&НаКлиенте
Перем ИгнорируемыеВидыЭлементовФорм;

&НаКлиенте
Перем ИдентификаторФрейма, ИдентификаторФреймаТекущегоWebКлиента, КонтекстJavaScript, РазмерыВиртуальногоЭкрана, АдресВебСокет;

&НаКлиенте
Перем ИдШагаДляКоторогоВыполнялсяСкриншотБраузера;

&НаКлиенте
Перем КешГруппКоманднойПанелиФорм;

&НаКлиенте
Перем ЗаголовокКнопкиВыполнитьСценарии, ЗаголовокКнопкиОстановитьСценарии;

&НаКлиенте
Перем ВозможноИспользованиеVanessaEditor;

&НаКлиенте
Перем ДиапазонСтрокДляВыполненияСценария, ВыполнениеДиапазонаШаговVanessaEditor;

&НаКлиенте
Перем ШагиСОшибкамиVanessaEditor;

&НаКлиенте
Перем ПодключенныеEPF;

&НаКлиенте
Перем глСтруктураКартинокДляДереваФайлов;

&НаКлиенте
Перем ЭтоКаталогКомандаСистемыСлужебныйФайл;

&НаКлиенте
Перем НадоОбновитьДанныеРедактораПриПереходеИзДерева;

&НаКлиенте
Перем НастройкиВидимостиКнопокКоманднойПанелиРедактора;

&НаКлиенте
Перем НадоВыполнитьУстановкуГорячихКлавишКнопокКоманднойПанелиРедактора;

&НаКлиенте
Перем ДанныеРедактораПослеЗагрузкиФичи;

&НаКлиенте
Перем ДанныеВкладокРедактора;

&НаКлиенте
Перем ИдСтрокиДереваДлаАктивизации, ИмяПроцедурыПерейтиВДеревоШаговОбработчик;

&НаКлиенте
Перем ОстановкаНаПроблемномШаге, НомерСтрокиПроблемногоШага;

&НаКлиенте
Перем КаталогСФайламиОзвучкиОкончанияВыполненияСценария, ЗвуковоеОповещениеВыполнялось;

&НаКлиенте
Перем ЗапроситьИмяФайлаПриСохраненииФайлаВРедакторе;

&НаКлиенте
Перем ПлатформаКорректноОпределяетРазмерМакетаВТонкомКлиенте, СохранениеМакетовВФайлПриЧтенииДанных;

&НаКлиенте
Перем ИдетЗаписьДействийПользователя;

&НаКлиенте
Перем ВыполненаОбработкаЗавершенияВыполненияСценариев;

&НаКлиенте
Перем ЗапоминатьЗначенияПеременыхПриПодстановкеВШаг;

&НаКлиенте
Перем КешСнипетовНаКлиенте, ИменаНайденныхEpfНаКлиенте;

&НаКлиенте
Перем глПараметрыЗаполнитьДеревоФичПродолжение2;

&НаКлиенте
Перем НадоУстановитьСписокШаговVanessaEditor;

&НаКлиенте
Перем глРеквизитТекстStopVideoRec;

&НаКлиенте
Перем ИдСтрокиДляВыполненияСледующегоШага;

&НаКлиенте
Перем НадоЗарегистрироватьОшибкуИзСекцииИсключение;

&НаКлиенте
Перем ФормаОбработкиПроизвольногоДвижкаTTS;

&НаКлиенте
Перем КаталогТекущегоИсполняемогоФичаФайла;

&НаКлиенте
Перем ДатаВремяПоследнейПопыткиЗапускаКлиентаТестирования, Процессы1СЗапущенныеРанее;

&НаКлиенте
Перем ДатаВремяПоследнейПопыткиОпределенияПортаЗапускаКлиентаТестирования;

&НаКлиенте
Перем ТекстОшибкиВозникшейВИсключении;

&НаКлиенте
Перем НужноОжидатьОкончанияОзвучкиШага, ШагДляКоторогоЗапущенаОзвучка, ИДВоспроизведенияMp3, КешИДВоспроизведенияMp3;

&НаКлиенте
Перем НомерСтрокиРедактораДляОзвкучки;

&НаКлиенте
Перем ДанныеСекцииПеременные, КопияДанныеСекцииПеременные;

&НаКлиенте
Перем ВключенРежимОбучения;

&НаКлиенте
Перем КешДанныеСловоряЗамен, ДанныеКешОзвучкиИнтерактивнойСправки;

&НаКлиенте
Перем ПродолжитьВыполнениеШаговПослеСнятияВсехСкриншотов;

&НаКлиенте
Перем ЗаполненыДанныеДляВыполненияОдногоШага;

&НаКлиенте
Перем ПортыКоторыеСчиталисьЗанятыми;

&НаКлиенте
Перем ОжиданиеСобытияЧтенияОтКомпоненты;

&НаКлиенте
Перем БылоПодключениеГорячихКлавиш;

&НаКлиенте
Перем КешЭлементовФормыVanessaAutomationПодсказка, КешЭлементовФормыVanessaAutomationЗаголовок;

&НаКлиенте
Перем БылоВыведеноСообщениеОЗавершенииСценариев;

&НаКлиенте
Перем МодулиДляОтключения;

&НаКлиенте
Перем глЗавершениеРаботы;

&НаКлиенте
Перем НадоОбновитьСтраницуWelcome, НадоПоказатьПодсказкуРекомендуетсяСохранитьНастройки;

&НаКлиенте
Перем КаталогВременнойФичиСодержащейЭкспортныеСценарииИзОсновнойПоставки;

&НаКлиенте
Перем ИмяИсполняемогоФайлаТонкийКлиент, ИмяИсполняемогоФайлаТолстыйКлиент;

&НаКлиенте
Перем ВыполняласьИнициализацияФормы;

&НаКлиенте
Перем ВыполнениеСценариевБезОткрытияФормы, НастройкиПриЗапускеБезОткрытияФормы, ПереданныйТекстФичаФайла, ФичаФайлПереданТекстом;

&НаКлиенте
Перем ВыполнитьСценарииСЧтениемПараметровИзКоманднойСтроки;

&НаКлиенте
Перем ФреймворкЗапущенВWebКлиенте;

&НаКлиенте
Перем БылВызовУдалитьСтрокиТаблицаИзвестныхStepDefinitionКоторыеНеОбрабатывались;

&НаКлиенте
Перем ЗапускИзСППР;

&НаКлиенте
Перем СлужебноеСообщениеПослеОкончанияВыполненияСценария, СлужебноеСообщениеПослеУспешногоВыполненияСценария;

&НаКлиенте
Перем ВкладкаРедактораВКоторойЗапущеноВыполнениеСценария;

&НаКлиенте
Перем РедакторБылПроинициализирован;

&НаКлиенте
Перем ОткрываласьФормаБиблиотекиШагов;

&НаКлиенте
Перем ОткрываласьФормаРедактораТаблиц, ФормаРедактораТаблиц;

&НаКлиенте
Перем ОткрываласьФормаСозданияТестовыхДанных;

&НаКлиенте
Перем ЭтоПервыйЗапускVA;

&НаКлиенте
Перем глЗначениеПереходкКТекстуВРедакторе;

&НаКлиенте
Перем СпецСимволыРегулярныхВыражений, СпецСимволыРегулярныхВыраженийДляЛинукс;

&НаКлиенте
Перем БылиВыполненыНастройкиПриЗаписиИнтерактивнойСправки;

&НаКлиенте
Перем БылоПрикреплениеФайловКШагам;

&НаКлиенте
Перем ВыполнитьПослеОткрытияФормы2, ВыполнитьИнициализироватьVanessaEditorКлиент2;

&НаКлиенте
Перем НужноОчиститьВременныйКаталогVanessaEditor;

&НаКлиенте
Перем ОстановитьВыполнениеШагов;

&НаКлиенте
Перем VanessaEditorКаталог;

&НаКлиенте
Перем ВерсияРедактора;

&НаКлиенте
Перем ВидОтображенияОтличийВРедакторе;

&НаКлиенте
Перем ВстроенныеБиблиотекиФорма;

&НаКлиенте
Перем ДанныеТекстВстроенныхСценариевСервер;

&НаКлиенте
Перем ЕстьЗащитаОтОпасныхДействий, ЕстьПоддержкаНемодальныхФорм;

&НаКлиенте
Перем ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок;

&НаКлиенте
Перем ЗакрытьФормуVA;

&НаКлиенте
Перем ИнициализироватьVanessaEditorНаКлиенте;

&НаКлиенте
Перем МакетШаблонПеревода;

&НаКлиенте
Перем МестоположениеБиблиотекиJavaScript, МестоположениеВнешнейКомпонентыДляCentOS, МестоположениеВнешнейКомпонентыДляСкриншотов, МестоположениеКлючевыеСловаGherkin;

&НаКлиенте
Перем НадоВыполнитьСценарийСоСтрокиПереданнойИзвне, НомерСтрокиСценарияПереданныйИзвне;

&НаКлиенте
Перем РежимСовместимостиКорректноАктивизируетПолеHTMLДокумента, РежимСовместимостиПозволяетИспользоватьНовыеСтроковыеФункции;

&НаКлиенте
Перем ФайлФлагВыполненияСценариев;

&НаКлиенте
Перем ИмяФайлаОстановкаВыполненияСценария;

&НаКлиенте
Перем НомерПопыткиВыполненияСценария;

&НаКлиенте
Перем ЭтоМенеджерТестирования;

&НаКлиенте
Перем НастройкиTeamCity;

&НаКлиенте
Перем СохраненныеДанныеСборДанныхДляОтчетов;

&НаКлиенте
Перем ЗакрыватьСистемныеДиалогиЕслиПослеИзЗакрытияМожноПродолжитьВыполнениеСценария;

&НаКлиенте
Перем ОкнаДляКоторыхНеНужноОтключатьОбновлениеТекстаРедактирования;

#КонецОбласти

#КонецОбласти

#Область ОбработкаСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Служебная строка. Не удалять. Определение режима поставки.
	Объект.ВерсияПоставки = "standart";

	Если Параметры.Свойство("ВыполнитьПриСозданииНаСервере") И НЕ Параметры.ВыполнитьПриСозданииНаСервере Тогда
		Возврат;
	КонецЕсли;	 

	Если Параметры.Свойство("ПараметрЗапуска") Тогда
		ЗаписатьЛогВЖРИнформацияСервер("VanessaAutomation.ПараметрЗапуска", Параметры.ПараметрЗапуска);
	КонецЕсли;	 

	ОбъектНаСервере = ЭтотОбъектНаСервере();
	
	Если ТипЗнч(Объект.ДополнительныеПараметры) <> Тип("Структура") Тогда
		Объект.ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	VAОткрытаКакВнешняяОбработка = VAОткрытаКакВнешняяОбработка(ОбъектНаСервере);
	Если VAОткрытаКакВнешняяОбработка Тогда
		ИспользуемоеИмяФайла = ОбъектНаСервере.ИспользуемоеИмяФайла;
	КонецЕсли;
	
	Объект.ДополнительныеПараметры.Вставить("СтруктураОбщихНастроек", ОбъектНаСервере.СтруктураОбщихНастроек());
	
	Объект.ДополнительныеПараметры.Вставить("ВерсияРедактора", ОбъектНаСервере.ВерсияРедактора());
	
	Объект.ДополнительныеПараметры.Вставить("РеквизитТекстStopVideoRec", ОбъектНаСервере.ПолучитьМакет("StopVideoRec").ПолучитьТекст());
	
	Если Параметры.Свойство("ЗапрещеныСинхронныеВызовы") Тогда
		ЗапрещеныСинхронныеВызовы = Параметры.ЗапрещеныСинхронныеВызовы;
		Объект.ДополнительныеПараметры.Вставить("ВыполняласьПроверкаНаЗапретСинхронныхВызовов", Истина);
	Иначе	
		ЗапрещеныСинхронныеВызовы = ЗапрещеныСинхронныеВызовы();
	КонецЕсли;	
	Объект.ДополнительныеПараметры.Вставить("ЕстьЗащитаОтОпасныхДействий", ЕстьЗащитаОтОпасныхДействийСервер());
	Объект.ДополнительныеПараметры.Вставить("ЕстьПоддержкаНемодальныхФорм", ЕстьПоддержкаНемодальныхФорм());
	Объект.ДополнительныеПараметры.Вставить("ЗапрещеныСинхронныеВызовы", ЗапрещеныСинхронныеВызовы);
	
	Если ЗапрещеныСинхронныеВызовы И Параметры.Свойство("ПроверкаОптимизацииРаботыСФайлами") Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ПроверкаОптимизацииРаботыСФайлами", Параметры.ПроверкаОптимизацииРаботыСФайлами);
		ДопПараметры.Вставить("ВозможнаОптимизацияРаботыСФайлами", Ложь);
		ПроверкаВозможностиОптимизацииРаботыСФайлами(ДопПараметры);
		Объект.ДополнительныеПараметры.Вставить("ВозможнаОптимизацияРаботыСФайлами", ДопПараметры.ВозможнаОптимизацияРаботыСФайлами);
	КонецЕсли;	
	
	Если Параметры.Свойство("КаталогИнструментов") Тогда
		Объект.КаталогИнструментов = Параметры.КаталогИнструментов;
	КонецЕсли;	
	
	Если Параметры.Свойство("КаталогПроекта") Тогда
		Объект.КаталогПроекта = Параметры.КаталогПроекта;
	КонецЕсли;	
	
	Если Параметры.Свойство("РежимСамотестирования") Тогда
		Объект.РежимСамотестирования = Параметры.РежимСамотестирования;
	КонецЕсли;
	
	Если Параметры.Свойство("КешПараметровЗапуска") Тогда
		Если Объект.ДополнительныеПараметры = Неопределено Тогда
			Объект.ДополнительныеПараметры = Новый Структура;
		КонецЕсли;
		
		Объект.ДополнительныеПараметры.Вставить("КешПараметровЗапуска", Параметры.КешПараметровЗапуска);
	КонецЕсли;	
	
	Объект.КоличествоСекундПоискаОкна = 5;
	Объект.КоличествоПопытокВыполненияДействия = 3;
	Объект.ОбновлятьСтатистикуВДереве = Истина;
	Объект.ОбновлятьДеревоПриНачалеВыполненияСценария = Истина;
	Объект.ТегTreeВключенПоУмолчанию = Истина;
	Объект.ЗаписьВидеоИнструмент = "ffmpeg";
	Объект.ГенерироватьУФ = Истина;
	Объект.СлужебныеПараметры = Новый Структура;
	
	Объект.ДополнительныеПараметры.Вставить("МакетШаблонПеревода", ОбъектНаСервере.ПолучитьМакет("ШаблонПеревода"));
	
	СтатусыРезультатаТестирования = ОбъектНаСервере.СтатусыРезультатаТестирования;
	
	Если ПустаяСтрока(Объект.КаталогИнструментов) Тогда
		ПутьКОбработке = ПолучитьПутьКОбработкеСервер();
		Если ЗначениеЗаполнено(ПутьКОбработке) Тогда
			Объект.КаталогИнструментов = КаталогИзИмениФайла(ПутьКОбработке);
			Если ЕстьКонстантаВКонфигурацииСервер("ПутьКVanessaAutomation") Тогда
				УстановитьЗначениеКонстантыСервер("ПутьКVanessaAutomation", ПутьКОбработке);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НадоПолучатьМакетыЛинукс = Истина;
	Если Параметры.Свойство("ЭтоLinuxКлиент") И НЕ Параметры.ЭтоLinuxКлиент Тогда
		НадоПолучатьМакетыЛинукс = Ложь;
	КонецЕсли;	
	
	Если НадоПолучатьМакетыЛинукс Тогда
		МакетВнешнейКомпонентыCentOS = ОбъектНаСервере.ПолучитьМакет("VanessaExtCentOS");
		Объект.ДополнительныеПараметры.Вставить("МестоположениеВнешнейКомпонентыДляCentOS", ПоместитьВоВременноеХранилище(МакетВнешнейКомпонентыCentOS, УникальныйИдентификатор));
	КонецЕсли;	
	МакетКлючевыеСловаGherkin = ОбъектНаСервере.ПолучитьМакет("КлючевыеСловаGherkin");
	МакетВнешнейКомпонентыСкриншотов = ОбъектНаСервере.ПолучитьМакет("WindowCaptureComponent");
	МакетБиблиотекиJavaScript = ОбъектНаСервере.ПолучитьМакет("БиблиотекаJavaScript");
	
	Объект.ДополнительныеПараметры.Вставить("МестоположениеБиблиотекиJavaScript", ПоместитьВоВременноеХранилище(МакетБиблиотекиJavaScript, УникальныйИдентификатор));
	Объект.ДополнительныеПараметры.Вставить("МестоположениеВнешнейКомпонентыДляСкриншотов", ПоместитьВоВременноеХранилище(МакетВнешнейКомпонентыСкриншотов, УникальныйИдентификатор));
	Объект.ДополнительныеПараметры.Вставить("МестоположениеКлючевыеСловаGherkin", ПоместитьВоВременноеХранилище(МакетКлючевыеСловаGherkin, УникальныйИдентификатор));
	
	КорректнаяРаботаПолеHTMLДокумента = Истина;
	РежимСовместимостиБольшеИлиРавен837 = Истина;
	РежимСовместимостиПозволяетИспользоватьНовыеСтроковыеФункции = ВычислитьОсобенностиРежимаСовместимости(КорректнаяРаботаПолеHTMLДокумента, РежимСовместимостиБольшеИлиРавен837);
	РежимСовместимостиКорректноАктивизируетПолеHTMLДокумента = КорректнаяРаботаПолеHTMLДокумента;
	
	Объект.ДополнительныеПараметры.Вставить("РежимСовместимостиБольшеИлиРавен837", РежимСовместимостиБольшеИлиРавен837);
	Объект.ДополнительныеПараметры.Вставить("РежимСовместимостиКорректноАктивизируетПолеHTMLДокумента", РежимСовместимостиКорректноАктивизируетПолеHTMLДокумента);
	Объект.ДополнительныеПараметры.Вставить("РежимСовместимостиПозволяетИспользоватьНовыеСтроковыеФункции", РежимСовместимостиПозволяетИспользоватьНовыеСтроковыеФункции);
	
	Если Объект.ВерсияПоставки = "single" Тогда
		Объект.ДополнительныеПараметры.Вставить("ВстроенныеБиблиотекиФорма", ОбъектНаСервере.ВстроенныеБиблиотеки());
		Объект.ДополнительныеПараметры.Вставить("ДанныеТекстВстроенныхСценариевСервер", ОбъектНаСервере.ПолучитьМакет("ЭкспортныеСценарии").ПолучитьТекст());
	КонецЕсли;
	
	Элементы.ГруппаДереваФайлов.Видимость = Ложь;
	Элементы.ГруппаGit.Видимость = Ложь;
	Элементы.ГруппаVanessaEditorПереходКРазличиямВФайлах.Видимость = Ложь;
	
	ТекущаяВерсияVA = ОбъектНаСервере.ПолучитьВерсиюОбработки(Ложь, Истина);
	ПроверитьВерсиюVA(ТекущаяВерсияVA);
	
	СкрытьКнопкиКоманднойПанели();
	
	ЗаполнитьМенюНедавноЗагруженныеФичи();
	
	ИнициализироватьVanessaEditor = Истина;
	Если Параметры.Свойство("ИнициализироватьVanessaEditor") Тогда
		ИнициализироватьVanessaEditor = Параметры.ИнициализироватьVanessaEditor;
	КонецЕсли;
	
	Если НЕ РежимСовместимостиБольшеИлиРавен837 Тогда
		ИнициализироватьVanessaEditor = Ложь;
	КонецЕсли;	
	
	Объект.ДополнительныеПараметры.Вставить("ИнициализироватьVanessaEditorНаКлиенте", Ложь);
	Если ИнициализироватьVanessaEditor Тогда
		СуществуетКешРедактора = Ложь;
		Если Параметры.Свойство("СуществуетКешРедактора") Тогда
			СуществуетКешРедактора = Параметры.СуществуетКешРедактора;
		КонецЕсли;
		
		ИнициализироватьVanessaEditorНаКлиенте = Ложь;
		ИнициализироватьVanessaEditorСервер(Истина, ИнициализироватьVanessaEditorНаКлиенте, СуществуетКешРедактора);
		Объект.ДополнительныеПараметры.Вставить("ИнициализироватьVanessaEditorНаКлиенте", ИнициализироватьVanessaEditorНаКлиенте);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//Оставлено для отладки
	//Если ИмяСобытия = "ОповещениеVA1" Тогда
	//	Сообщить("Отктытие VA. ВЭтомСеансеИдётОбучение =" + ЗначениеДополнительногоПараметра("ВЭтомСеансеИдётОбучение") + ", " + ЭтаФорма.УникальныйИдентификатор);
	//КонецЕсли;	 
	
	Если НЕ ЭтаФорма.Открыта() И НЕ ВыполнениеСценариевБезОткрытияФормы Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ИмяСобытия = "ВыборИзвестногоШага" Тогда
		Если Параметр.ИдФормы = ЭтаФорма.УникальныйИдентификатор Тогда
			Если Объект.ИспользоватьРедакторVanessaEditor И НЕ ОтсутствуетVanessaEditor() И ВозможенЗапускСценариевИзТекущейВкладки() Тогда
				МодульРедакторТекста().ВставитьТекстСУчетомФорматирования(Параметр.Текст);
			Иначе	
				Объект.СгенерированныйСценарий = Объект.СгенерированныйСценарий + Символы.ПС + Символы.Таб + СокрП(Параметр.Текст);
			КонецЕсли;	 
		КонецЕсли;	 
	ИначеЕсли ИмяСобытия = "РедактированиеТаблицыGherkin" Тогда
		Если Параметр.UID <> УникальныйИдентификатор Тогда
			Возврат;
		КонецЕсли;	
		
		МассивТаблицы = Параметр.МассивСтрок; 
		ЗаменитьТаблицуGherkinПослеРедактирования(МассивТаблицы);
	ИначеЕсли ИмяСобытия = "ПерейтиКСтрокеДереваСОшибкой" Тогда
		Если Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
			ПерейтиКСтрокеДереваСОшибкой(Параметр.НомерСтрокиДерева);  
		КонецЕсли;	
	ИначеЕсли Найти(ИмяСобытия, "ВыполнитьСценарий") > 0 ИЛИ Найти(ИмяСобытия, "ЗагрузитьСценарий") Тогда
		
		НадоПерейтиКСтрокеДерева = -1;
		
		ИдОповещения = Параметр.ИдОповещения;
		Если ИдОповещения = ОбработанноеИдОповещения Тогда
			Возврат;
		КонецЕсли;	 
		
		ОбработанноеИдОповещения = ИдОповещения; 
		
		Объект.КаталогПроекта = Параметр.КаталогПроекта;
		Объект.КаталогФич     = Параметр.ПутьКСценариям;
		
		Объект.ВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Ложь;
		
		Если Параметр.Свойство("ОстановкаПриВозникновенииОшибки") Тогда
			Объект.ОстановкаПриВозникновенииОшибки = Параметр.ОстановкаПриВозникновенииОшибки;
		КонецЕсли;	 
		
		НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Ложь;
		
		Если Параметр.Свойство("СТекущегоШага") И Параметр.СТекущегоШага Тогда
			НомерСтрокиСценарияПереданныйИзвне           = Параметр.НомерСтрокиДляЗапускаСТекущегоШагаСценария;
			Если ФормаVanessaAutomationОткрылась Тогда
				ЗагрузитьФичиИЗапуститьСценарийСоСтрокиПрисланнойИзвне();
			Иначе
				НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Истина;
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		Объект.ВыполнениеСценарияИзОбработкиОповещения = Истина;
		
		Если Найти(ИмяСобытия, "ВыполнитьСценарий") > 0 Тогда
			Объект.ВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Истина;
			Если ФормаVanessaAutomationОткрылась Тогда
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("ПерезагрузитьИВыполнить", Истина);
				ЗагрузитьФичи(ДопПараметры);
			КонецЕсли;
		ИначеЕсли Найти(ИмяСобытия, "ЗагрузитьСценарий") > 0 Тогда
			ТекущиеДанныеДерева = Элементы.ДеревоТестов.ТекущиеДанные;
			Если ТекущиеДанныеДерева <> Неопределено Тогда
				НадоПерейтиКСтрокеДерева = ТекущиеДанныеДерева.ИДСтроки;
			КонецЕсли;
			Если ФормаVanessaAutomationОткрылась Тогда
				ЗагрузитьФичи();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗагрузитьФичи" Тогда
		ЗагрузитьФичи(Параметр);
		ПоказатьОповещениеПользователя(,, Локализовать("Сценарии загружены в дерево запуска сценариев"));	
	ИначеЕсли ИмяСобытия = "ПерейтиКСтрокеРедактора" Тогда
		
		Если НЕ ОтсутствуетVanessaEditor() Тогда
			ОбновитьТекущуюСтрокуРедактораСРасчетомВиджета(Параметр);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОткрытаФормаVAВРежимеОбучения" Тогда
		ОбъектКонтекстСохраняемый.Вставить("ФормаVAВРежимеОбучения", Параметр);
	ИначеЕсли ИмяСобытия = "ЗагрузкаФичВРежимеОбучения" Тогда
		
		ВЭтомСеансеИдётОбучение = ЗначениеДополнительногоПараметра("ВЭтомСеансеИдётОбучение");
		Если ВЭтомСеансеИдётОбучение = Истина Тогда
			Объект.КаталогФич = Параметр;
			ЗагрузитьФичи();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗагрузкаМаркдаунВРежимеОбучения" Тогда
		ВЭтомСеансеИдётОбучение = ЗначениеДополнительногоПараметра("ВЭтомСеансеИдётОбучение");
		Если ВЭтомСеансеИдётОбучение = Истина Тогда
			ПоказатьФайлДокументации(Параметр);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "СохранитьВФайлИОткрытьНастройкиВРедактореРежимОбучения" Тогда
		ВЭтомСеансеИдётОбучение = ЗначениеДополнительногоПараметра("ВЭтомСеансеИдётОбучение");
		Если ВЭтомСеансеИдётОбучение = Истина Тогда
			СохранитьВФайлИОткрытьНастройкиВРедактореРежимОбучения();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ПоказатьФайлСравненияНастроекРежимОбучения" Тогда
		ВЭтомСеансеИдётОбучение = ЗначениеДополнительногоПараметра("ВЭтомСеансеИдётОбучение");
		Если ВЭтомСеансеИдётОбучение = Истина Тогда
			ПоказатьФайлСравненияНастроекРежимОбучения();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗакрытиеVanessaAutomationВРежимеОбучения" Тогда
		Если ТипЗнч(ОбъектКонтекстСохраняемый) = Тип("Структура") И ОбъектКонтекстСохраняемый.Свойство("ФормаVAВРежимеОбучения") Тогда
			ОбъектКонтекстСохраняемый.Удалить("ФормаVAВРежимеОбучения");
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "SHADOW_BUTTON" Тогда
		Если Параметр = "Далее" ИЛИ Параметр = Локализовать("Далее")  Тогда
			Переход = ОбъектКонтекст._ТекущееСостояниеOnboarding.Переход;
			УстановитьПредыдущееСостояниеOnboarding(ОбъектКонтекст._ТекущееСостояниеOnboarding.Имя, Переход);
			НовоеСостояние = ОбъектКонтекст.СостоянияOnboarding[НРег(Переход)];
			Если НовоеСостояние = Неопределено Тогда
				ВызватьИсключение ПодставитьПараметрыВСтроку(Локализовать("Не найдено состояние Onboarding <%1>."), Переход);
			КонецЕсли;	
			ОбъектКонтекст.Вставить("_ТекущееСостояниеOnboarding", НовоеСостояние);
			ЯЗапускаюOnboardingОбработчик();
		ИначеЕсли Параметр = "Назад" ИЛИ Параметр = Локализовать("Назад") Тогда
			ТекИмя = ОбъектКонтекст._ТекущееСостояниеOnboarding.Имя;
			ПредыдущееИмя = ОбъектКонтекст._ПредыдущееСостояниеOnboarding[НРег(ТекИмя)];
			ОбъектКонтекст.Вставить("_ТекущееСостояниеOnboarding", ОбъектКонтекст.СостоянияOnboarding[НРег(ПредыдущееИмя)]);
			ЯЗапускаюOnboardingОбработчик();
		ИначеЕсли Параметр = "Завершить" ИЛИ Параметр = Локализовать("Завершить") Тогда
			Если ТипЗнч(ОбъектКонтекст) = Тип("Структура") И ОбъектКонтекст.Свойство("ИдетРаботаПомощникаПриПервомЗапуске") Тогда
				ОбъектКонтекст.Удалить("ИдетРаботаПомощникаПриПервомЗапуске");
				ОткрытьСписокУроковСлужебный();
			КонецЕсли;
			ПродолжитьВыполнениеШагов();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбновитьНастройкиДымовыхТестов" Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметр);
	КонецЕсли;
	
КонецПроцедуры

//Оставлено для отладки
//&НаКлиенте
//Процедура СделатьОповещение()
//	Оповестить("ОповещениеVA1", "ОповещениеVA2");
//КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Оставлено для отладки
	//ПодключитьОбработчикОжидания("СделатьОповещение", 0.1, Истина);
	
	ИнициализацияПеременныхМодуляФормы();  
	
	Если ПустаяСтрока(VanessaEditorURL) ИЛИ НЕ РежимСовместимостиКорректноАктивизируетПолеHTMLДокумента Тогда
		Если НЕ АсинхронноеПодключениеМодулейВыполнялось Тогда
			АсинхронноеПодключениеМодулейВыполнялось = Истина;
			АсинхронноеПодключениеМодулей();
		КонецЕсли;
	ИначеЕсли ВыполнениеСценариевБезОткрытияФормы Тогда
		АсинхронноеПодключениеМодулейВыполнялось = Истина;
		АсинхронноеПодключениеМодулей();
	КонецЕсли;
	
	Элементы.ПутьКШаблонуНовойФичи.Видимость = Объект.ИспользоватьШаблонНовойФичи;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	глЗавершениеРаботы = ЗавершениеРаботы;
   
	Если ЗавершениеРаботы = Истина Тогда // для совместимости с 8.2
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗакрытьФормуVA И НЕ Объект.РежимСамотестирования И НЕ Объект.ЗавершитьРаботуСистемыПослеВыполненияВсехСценариев Тогда
		
		ДопПараметрыОповещения = Новый Структура;
		ДопПараметрыОповещения.Вставить("ВызовЧерезПерезапуститьКакМенеджерТестирования", Ложь);
		
		ВопросПередЗакрытиемФормы(Отказ, ДопПараметрыОповещения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте 
Процедура ВопросПередЗакрытиемФормы(Отказ, ДопПараметрыОповещения)
	
	ЗадатьВопросПоИзмененнымФайлам = Ложь;
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если VanessaTabs <> Неопределено Тогда
			Для Сч = 0 По VanessaTabs.tabStack.length - 1 Цикл
				Если VanessaTabs.tabStack[Сч].modified Тогда
					ЗадатьВопросПоИзмененнымФайлам = Истина;
				КонецЕсли;	 
			КонецЦикла;	
		КонецЕсли;	 
	КонецЕсли;	
	
	Если (ЗадатьВопросПоИзмененнымФайлам ИЛИ ЗапрашиватьПодтверждениеПриЗакрытии = "Да") Тогда
		Если ЭтаФорма.Открыта() И НЕ УжеЕстьМодальныйДиалогВЭтомСеансе() Тогда
			Отказ = Истина;
			ТекстВопроса = Локализовать("Вы уверены?");
			Если ЗадатьВопросПоИзмененнымФайлам Тогда
				ТекстВопроса = Локализовать("Есть несохраненные изменения. Вы уверены?");
			КонецЕсли;	 
			
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.ОК, Локализовать("Закрыть форму"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена); 
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтаФорма, ДопПараметрыОповещения);			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 
		ИначеЕсли УжеЕстьМодальныйДиалогВЭтомСеансе() Тогда	
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьМодульДляОтключения(ТекМодуль)
	МодулиДляОтключения.Добавить(ТекМодуль);
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьОтключениеМодулей(ПроисходитЗавершениеРаботы)
	
	Если ПроисходитЗавершениеРаботы = Истина Тогда
		//Происходит закрытие сеанса 1С.
		Возврат;
	КонецЕсли;	 
	
	Для Каждого ТекМодуль Из МодулиДляОтключения Цикл
		ТекМодуль.ОтключениеМодуля();
	КонецЦикла;
	
	МодулиДляОтключения.Очистить();
	
	Для Каждого СтрокаТаблицаКонтекстовОбработок Из ТаблицаКонтекстовОбработок Цикл
		
		Если СтрокаТаблицаКонтекстовОбработок.Обработка = Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		Попытка
			СтрокаТаблицаКонтекстовОбработок.Обработка.ОтключениеМодуля();
		Исключение
			Если ПроисходитЗавершениеРаботы <> Истина И ПроисходитЗавершениеРаботы <> Неопределено Тогда
				Попытка
					ЗаписатьЛогВЖРОшибка("ВыполнитьОтключениеМодулей", СтрокаТаблицаКонтекстовОбработок.ИмяФайла);
					ЗаписатьЛогВЖРОшибка("ВыполнитьОтключениеМодулей", ОписаниеОшибки());
				Исключение
				КонецПопытки;
			КонецЕсли;	 
		КонецПопытки;
		
	КонецЦикла;	 
	
	Ванесса = Неопределено;
	ОбъектКонтекст = Неопределено;
	ОбъектКонтекстСохраняемый = Неопределено;
	Контекст = Неопределено;
	КонтекстСохраняемый = Неопределено;
	
	МодульПарсерФич = Неопределено;
	МодульРедакторТекста = Неопределено;
	МодульРаботаСБраузером = Неопределено;
	МодульРаботаСGit = Неопределено;
	МодульПарсерGherkin = Неопределено;
	МодульОбщегоНазначенияVA = Неопределено;
	МодульПодготовкаИЗагрузкаДанных = Неопределено;
	МодульНастройкиРаботыСБраузером = Неопределено;
	МодульИсследовательФормы = Неопределено;
	МодульИнициаторДанных = Неопределено;
	МодульРаботаСоСтроками = Неопределено;
	МодульСерверныеВызовы = Неопределено;
	МодульРаботыСВидео = Неопределено;
	МодульСообщенийПользователю = Неопределено;
	МодульПереводШагов = Неопределено;
	МодульSikuliXСевер = Неопределено;
	ХостСистема = Неопределено;
	
	ТаблицаКонтекстовОбработок = Неопределено;
	КешДанныеПеревода = Неопределено;
	БуферОбменаVA = Неопределено;
	VanessaTabs = Неопределено;
	VanessaGherkinProvider = Неопределено;
	ЗначенияЭлементовТекущегоОкнаVanessaEditor = Неопределено;
	ТекущаяПозицияVanessaEditor = Неопределено;
	ОкнаДляСкриншотов = Неопределено;
	КешЗагрузкиФич = Неопределено;
	КешПараметрыВСтроке = Неопределено;
	КешРассчитатьПараметрыТаблицы = Неопределено;
	КешОпределенияТипа = Неопределено;
	КешПоискаКлючевыхСлов = Неопределено;
	КешСоответствияШаговПоискПоИмени = Неопределено;
	КешСнипетов = Неопределено;
	КэшФормПлагинов = Неопределено;
	МассивСостоянияКонтекстовДоВыполненияШага = Неопределено;
	ТаблицаУжеСуществующихСценариев = Неопределено;
	ТаблицаУжеСуществующихСценариевSingle = Неопределено;
	ДанныеСекцииПеременныхФич = Неопределено;
	ОбработкаСвязаннаяСИсполняемойФичей = Неопределено;
	МассивИменКонтекстовОбработок = Неопределено;
	МассивСценариевДляВыполнения = Неопределено;
	МассивСтрокДереваДанныеФормы = Неопределено;
	СохраненноеСостояниеФормыTestClient = Неопределено;
	МассивИДСтрокиДерева = Неопределено;
	МассивРезультатПрохожденияТестовСценария = Неопределено;
	ПараметрыСтатистикаВыполненияТестов = Неопределено;
	ТаблицаОбработокДляОтладки = Неопределено;
	СтрокаШагаСКоторогоНадоВыполнятьСценарий = Неопределено;
	ЗначениеПараметровДляСнятияСкриншотов = Неопределено;
	WshShell = Неопределено;
	СтруктураПоискаСтрокДерева = Неопределено;
	КешВерсияОбработки = Неопределено;
	Регулярка = Неопределено;
	ГлобальныеЗначенияШагов = Неопределено;
	ЗафиксированнаяФормаИлиГруппаTestClient = Неопределено;
	КешДанныхПереводовШагов = Неопределено;
	БиблиотекаДляПодключения = Неопределено;
	глСтруктураПараметров = Неопределено;
	СлужебныеПеременныеКонтекста = Неопределено;
	ВнешняяКомпонентаДляСкриншотов = Неопределено;
	ВнешняяКомпонентаРаботаСGit = Неопределено;
	ИдентификаторФрейма = Неопределено;
	КонтекстJavaScript = Неопределено;
	КешГруппКоманднойПанелиФорм = Неопределено;
	ШагиСОшибкамиVanessaEditor = Неопределено;
	ПодключенныеEPF = Неопределено;
	глСтруктураКартинокДляДереваФайлов = Неопределено;
	ДанныеРедактораПослеЗагрузкиФичи = Неопределено;
	ДанныеВкладокРедактора = Неопределено;
	КешСнипетовНаКлиенте = Неопределено;
	ИменаНайденныхEpfНаКлиенте = Неопределено;
	глПараметрыЗаполнитьДеревоФичПродолжение2 = Неопределено;
	ФормаОбработкиПроизвольногоДвижкаTTS = Неопределено;
	ШагДляКоторогоЗапущенаОзвучка = Неопределено;
	ДанныеСекцииПеременные = Неопределено;
	КопияДанныеСекцииПеременные = Неопределено;
	КешДанныеСловоряЗамен = Неопределено;
	ДанныеКешОзвучкиИнтерактивнойСправки = Неопределено;
	ЗаполненыДанныеДляВыполненияОдногоШага = Неопределено;
	КешЭлементовФормыVanessaAutomationПодсказка = Неопределено;
	КешЭлементовФормыVanessaAutomationЗаголовок = Неопределено;
	ВкладкаРедактораВКоторойЗапущеноВыполнениеСценария = Неопределено;
	ФормаРедактораТаблиц = Неопределено;
	глДопПараметры = Неопределено;
	СохраненныеДанныеСборДанныхДляОтчетов = Неопределено;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриЗакрытии()    
	
	Если БылоПодключениеГорячихКлавиш Тогда
		Попытка
			ВнешняяКомпонентаДляСкриншотов.НачатьВызовСброситьГорячиеКлавиши(ОписаниеПустогоОбработчика(3));
			БылоПодключениеГорячихКлавиш = Ложь;
		Исключение
		КонецПопытки;
	КонецЕсли;	 

	ВЭтомСеансеИдётОбучение = ЗначениеДополнительногоПараметра("ВЭтомСеансеИдётОбучение");
	Если ВЭтомСеансеИдётОбучение = Истина Тогда
		Оповестить("ЗакрытиеVanessaAutomationВРежимеОбучения");
	КонецЕсли;	 
	
	ОтключитьОбработчикОжидания("ОпросЭлементовФормTestClient");
	ОтключитьОбработчикОжидания("ПроверкаВнешнихКоманд");
	ОтключитьОбработчикОжидания("ЯЗапускаюOnboardingОбработчик");
	Если МодульРедакторТекста <> Неопределено Тогда
		МодульРедакторТекста().ВыключитьЧтениеДанныхТекущейФормыVanessaEditor();
		МодульРедакторТекста().ВыгрузитьДанныеVanessaEditor();
	КонецЕсли;	 
	
	Если НЕ ЭтоЗапускВРежимеБезЗагрузкиНастроек Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если Не ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.8.0") Тогда
			СохранитьНастройки();
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ОбъектКонтекстСохраняемый <> Неопределено
		И ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Попытка
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.РазорватьСоединение();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ПриЗакрытии", Истина);
	ОстановитьSikuliXСервер(ДопПараметры);
	
	Если НужноПоказатьОкноОстановкиЗаписиДействийПользователя() Тогда
		ЗакрытьОкноОстановкиЗаписиДействийПользователя();
	КонецЕсли;	 	
	Если НужноПоказатьОкноОстановкиВыполненияСценария() Тогда
		ЗакрытьОкноОстановкиВыполненияСценария();
	КонецЕсли;	 
	
	ВыполнитьОтключениеМодулей(глЗавершениеРаботы);
	
	Если ЗначениеЗаполнено(VanessaEditorКаталог) И НужноОчиститьВременныйКаталогVanessaEditor Тогда
		Попытка
			УдалитьФайлыКомандаСистемы(VanessaEditorКаталог);
		Исключение
			ЗаписатьЛогВЖРОшибка("ОчисткаКаталогаVanessaEditorКаталог", ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Оповестить("ЗакрытиеVanessaAutomation", УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если НЕ ЭтаФорма.Открыта() И НЕ ВыполнениеСценариевБезОткрытияФормы Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Источник = "AddIn.GherkinParser" Тогда
		Если Событие = "PARSING_PROGRESS" Тогда
			Если ОжиданиеСобытияЧтенияОтКомпоненты Тогда
				Стр = ПрочитатьСтрокуJSON(Данные);
				Прогресс = Окр(Стр.Pos * 100 / Стр.Max);
				Если (Стр.Pos % 20) = 0 Тогда
					ТекстСообщения = Локализовать("Анализ фича файлов.");
					Состояние(ТекстСообщения, Прогресс, Стр.Name);
				КонецЕсли;	  
			КонецЕсли;	 
		ИначеЕсли Событие = "PARSING_FINISHED" Тогда
			Если ОжиданиеСобытияЧтенияОтКомпоненты Тогда
				ОжиданиеСобытияЧтенияОтКомпоненты = Ложь;
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("КаталогФич", Объект.КаталогФич);
				СтруктураПараметров.Вставить("ДанныеСекцииПеременные", ПустыеДанныеСекцииПеременные());
				МодульПарсерGherkin().ПолученРезультатЧтения(Данные, Новый Массив, СтруктураПараметров);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Событие = "MEDIA_FINISHED" Тогда
		Если НужноОжидатьОкончанияОзвучкиШага И Данные = ИДВоспроизведенияMp3 И КешИДВоспроизведенияMp3[ИДВоспроизведенияMp3] = Неопределено Тогда
			КешИДВоспроизведенияMp3.Вставить(ИДВоспроизведенияMp3, Истина);
			НужноОжидатьОкончанияОзвучкиШага = Ложь;
			Если Объект.ОзвучиватьВыполнениеСценария ИЛИ ВключенРежимОбучения Тогда
				Отладка("MEDIA_FINISHED");
			КонецЕсли;	 
		КонецЕсли;	 
	ИначеЕсли Источник = "AddIn.WindowsControl" И Данные = "ALT+H" Тогда
		Если БылоПодключениеГорячихКлавиш = Истина И Событие = Строка(УникальныйИдентификатор) Тогда
			ПоискУроковИнтерактивнойСправкиПоЭлементуПодКурсором();
		КонецЕсли;	 
	ИначеЕсли Событие = "EXECUTE_SCRIPT" Тогда
		Выполнить(Данные);
	ИначеЕсли Событие = "StopScenarioRun" Тогда
		КомандаОстановитьСценарии();
	ИначеЕсли Событие = "StopRecordActions" Тогда
		ЗавершитьЗаписьДействийПользователяКнопка();
		АктивизироватьОкноВКоторомЗапущенаVanessaAutomation();
	ИначеЕсли Источник = "AddIn.WindowsControl" Тогда
		Если Событие = "SHADOW_BUTTON" Тогда
			Оповестить(Событие, Данные);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура ТестГолосаОткрытьВПлеере(Команда)
	Если Объект.ЗаписьВидеоТипОзвучкиTTS = -1
		 И ФормаОбработкиПроизвольногоДвижкаTTS = Неопределено Тогда
		   
		ОбработчикОповещения = Новый ОписаниеОповещения("ТестГолосаОткрытьВПлеереПродолжение", ЭтаФорма);
		ПодключитьОбработкуДвижкаTTS(ОбработчикОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	ТестГолосаОткрытьВПлеереПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ТестГолосаОткрытьВПлеереПродолжение(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт	
	ИмяФайла = ПолучитьФайлTTSДляВоспроизведения();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗапускТестаФайлаОзвучки", ЭтаФорма);
	НачатьЗапускПриложения(ОписаниеОповещения, ИмяФайла);
КонецПроцедуры

&НаКлиенте
Процедура ТестГолосаПроизнести(Команда)
	Если Объект.ЗаписьВидеоТипОзвучкиTTS = -1 
		 И ФормаОбработкиПроизвольногоДвижкаTTS = Неопределено Тогда
		   
		ОбработчикОповещения = Новый ОписаниеОповещения("ТестГолосаПроизнестиПродолжение", ЭтаФорма);
		ПодключитьОбработкуДвижкаTTS(ОбработчикОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	ТестГолосаПроизнестиПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ТестГолосаПроизнестиПродолжение(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт	
	#Если НЕ ВебКлиент Тогда
	ИмяФайла = ПолучитьФайлTTSДляВоспроизведения();
	Файл = Новый Файл(ИмяФайла);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Файл.Расширение);
	ПереместитьФайлКомандаСистемы(ИмяФайла, ИмяВременногоФайла);
	ВнешняяКомпонентаДляСкриншотов.НачатьВызовВоспроизвестиМедиа(ОписаниеПустогоОбработчика(3), ИмяВременногоФайла, ИмяВременногоФайла);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСтрокеСОшибкой(Команда)
	
	ПерейтиКСтрокеСОшибкойОбработчик();
	
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorПоказатьСкрытьДеревоКаталогов(Команда)
	Если Элементы.ФункциональностьЗакладки.ТекущаяСтраница <> Элементы.ГруппаЗапускТестов Тогда
		Элементы.ФункциональностьЗакладки.ТекущаяСтраница = Элементы.ГруппаЗапускТестов;
		НазначитьГорячиеКлавишиКнопкамКоманднойПанелиРедактора(Истина);
	КонецЕсли;	 
	
	Элементы.ГруппаДереваФайлов.Видимость = НЕ Элементы.ГруппаДереваФайлов.Видимость;
	Если Элементы.ГруппаДереваФайлов.Видимость Тогда
		Элементы.ГруппаGit.Видимость = Ложь;
	КонецЕсли;	 
	
	Если Элементы.ГруппаДереваФайлов.Видимость Тогда
		Если ПустаяСтрока(ПутьКПапкеСФичами) Тогда
			Если НЕ ПустаяСтрока(Объект.КаталогФич) Тогда
				Если ФайлСуществуетКомандаСистемы(Объект.КаталогФич) Тогда
					Если ЭтоКаталогКомандаСистемы(Объект.КаталогФич) Тогда
						ПутьКПапкеСФичами = Объект.КаталогФич;
					Иначе
						Файл = Новый Файл(Объект.КаталогФич);
						ПутьКПапкеСФичами = Файл.Путь;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	
		
		Если ПустаяСтрока(ПутьКПапкеСФичами) Тогда
			Если ЗначениеЗаполнено(Объект.КаталогПроекта) Тогда
				ПутьКПапкеСФичами = Объект.КаталогПроекта;
			КонецЕсли;	 
		КонецЕсли;	 
		
		ОбновитьДеревоФайлов();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorПоказатьСкрытьДеревоGit(Команда)
	Если НЕ Объект.ИспользоватьКомпонентуVanessaExt Тогда
		СообщитьПользователю(Локализовать("Необходимо включить использование внешней компоненты VanessaExt."));
		Возврат;
	КонецЕсли;	 
	
	Если Элементы.ФункциональностьЗакладки.ТекущаяСтраница <> Элементы.ГруппаЗапускТестов Тогда
		Элементы.ФункциональностьЗакладки.ТекущаяСтраница = Элементы.ГруппаЗапускТестов;
		НазначитьГорячиеКлавишиКнопкамКоманднойПанелиРедактора(Истина);
	КонецЕсли;
	Элементы.ГруппаGit.Видимость = НЕ Элементы.ГруппаGit.Видимость;
	Если Элементы.ГруппаGit.Видимость Тогда
		Элементы.ГруппаДереваФайлов.Видимость = Ложь;
		Элементы.ДеревоGitДеревоGitЗафиксировать.КнопкаПоУмолчанию = Истина;
		Если НЕ ЗначениеЗаполнено(ВидОтображенияОтличийВРедакторе) Тогда
			ВидОтображенияОтличийВРедакторе = "Раздельно";
		КонецЕсли;	 
	Иначе	
		Элементы.ДеревоGitДеревоGitЗафиксировать.КнопкаПоУмолчанию = Ложь;
	КонецЕсли;	 
	
	Если Элементы.ГруппаGit.Видимость Тогда
		Если ПустаяСтрока(ПутьКПапкеGit) Тогда
			ПутьКПапкеGit = Объект.КаталогПроекта;
		КонецЕсли;	 
		ДеревоGit.ПолучитьЭлементы().Очистить();
		ПутьКПапкеGitПриИзменении();
	Иначе
		Элементы.ГруппаVanessaEditorПереходКРазличиямВФайлах.Видимость = Ложь;
		МодульРаботаСGit().ЗакрытьВсеВкладкиDiff();
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура Брейкпоинт(Команда)
	ОбработатьУстановкуСнятиеБрейкпоинта();
КонецПроцедуры

&НаКлиенте
Процедура БрейкпоинтУбратьВсе(Команда)
	КопияБрейкпоинты = Новый Массив;
	
	Для каждого Элем Из Брейкпоинты Цикл
		КопияБрейкпоинты.Добавить(Элем);
	КонецЦикла;
	Для каждого Элем Из КопияБрейкпоинты Цикл
		УдалитьБрейкПоинт(Элем);
	КонецЦикла;
	
	СнятьПометкуБрейкпоинтаРекурсивно(Объект.ДеревоТестов.ПолучитьЭлементы());
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыделенныйСценарийФорма(Команда)
	ВыполнитьВыделенныйСценарий();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьФичуФорма(Команда)
	ВыполнитьФичу();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОдинШагФорма(Команда)
	ВыполнитьОдинШаг();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФичиИзКаталога(Команда)
	
	Объект.текЗначениеОперации = "ЗагрузитьФичиИзКаталога";
	ОбновитьКнопкуЗагрузитьФичи();
	
	Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага                  = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением     = Ложь;
	Объект.РежимВыполненияОдногоШага                                    = Ложь;
	СтрокаШагаСКоторогоНадоВыполнятьСценарий      = Неопределено;
	МассивСостоянияКонтекстовДоВыполненияШага     = Новый Массив;
	
	НадоОбновитьДанныеРедактораПриПереходеИзДерева = Истина;
	
	ЗагрузитьТестыЗагрузитьФичиИзКаталога();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОднуФичу(Команда)
	Объект.текЗначениеОперации = "ЗагрузитьОднуФичу";
	ОбновитьКнопкуЗагрузитьФичи();
	
	Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага                  = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением     = Ложь;
	Объект.РежимВыполненияОдногоШага                                    = Ложь;
	СтрокаШагаСКоторогоНадоВыполнятьСценарий      = Неопределено;
	МассивСостоянияКонтекстовДоВыполненияШага     = Новый Массив;
	
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		НадоОбновитьДанныеРедактораПриПереходеИзДерева = Истина;
	КонецЕсли;	 
	
	ЗагрузитьТестыЗагрузитьОднуФичу();
КонецПроцедуры

&НаКлиенте
Процедура Перезагрузить(Команда)
	КомандаПерезагрузить();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСценарииФорма(Команда)
	КомандаВыполнитьСценарии();
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьСценарии(Команда)
	КомандаОстановитьСценарии();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПомощникПриПервомЗапускеКоманда(Команда)
	Если НЕ Объект.ИспользоватьКомпонентуVanessaExt Тогда
		ВызватьИсключение Локализовать("Необходимо включить использование внешней компоненты VanessaExt.");
	КонецЕсли;	 
	
	ПоказатьПомощникПриПервомЗапускеOnBoarding();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьШаблоныОбработокКоманда(Команда)
	СоздатьШаблоныОбработок();
КонецПроцедуры

&НаКлиенте
Процедура ПерезагрузитьИВыполнить(Команда)
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если VanessaTabs = Неопределено ИЛИ VanessaTabs.current = Неопределено ИЛИ НЕ ЭтоВкладкаEdit(VanessaTabs.current) Тогда
			Возврат;
		КонецЕсли;	 
		Если VanessaTabs.current <> Неопределено И ЭтоВкладкаDiff(VanessaTabs.current) Тогда
			Возврат;
		КонецЕсли;	 
		Если НЕ МодульРедакторТекста().МожноЗапуститьСценарийИзДаннойВкладки() Тогда
			СообщитьПользователю(Локализовать("Для выполнения данного действия необходимо сохранить файл."));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Объект.ИдетВыполнениеСценариев                                  = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.ВыполнитьСценарииПослеЗагрузкиФичОдинРаз 			= Истина;
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоТестов;
	КонецЕсли;	 
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ПерезагрузитьИВыполнитьДанныйСценарийФорма(Команда)
	ПерезагрузитьИВыполнитьДанныйСценарий();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФичаФайл(Команда)
	ОткрытьФичаФайлОбработчик();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодсценарийВНовойВкладке(Команда)
	ОткрытьПодсценарийВНовойВкладкеОбработчик();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФичи(Команда)
	ОткрытьКаталогФичиОбработчик();
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьДействийПользователяКнопка(Команда)
	Если ИдетЗаписьДействийПользователя Тогда
		ЗавершитьЗаписьДействийПользователяКнопка();
		Возврат;
	КонецЕсли;	 
	
	ТекущиеДанные = ТекущиеДанныеКлиентаТестирования();
	
	Если ТекущиеДанные = Неопределено Тогда
		СообщитьПользователю(Локализовать("Не найден Клиент тестирования для подключения."));
		Возврат;
	КонецЕсли;	 
	
	Если ТекущиеДанные.ТипКлиента = "Web" Тогда
		СообщитьПользователю(Локализовать("Web клиент не поддерживает запись действий пользователя."));
		Возврат;
	КонецЕсли;	 
	
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.РаботасUI;
	КонецЕсли;	 
	ИдетЗаписьДействийПользователя = Истина;
	НачатьЗаписьДействийПользователя();
	УправлениеВидимостьюЗаписиДействийПользователя("НачатьЗапись");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриостановитьЗаписьДействийПользователя(Команда)
	НачатьЗаписьДействийПользователя();
	УправлениеВидимостьюЗаписиДействийПользователя("ПриостановитьЗапись");
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗаписьДействийПользователя(Команда)
	НачатьЗаписьДействийПользователя();
	УправлениеВидимостьюЗаписиДействийПользователя("ПродолжитьЗапись");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодключитьTestClient(Команда)
	ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующий();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗаписьДействийПользователяКнопка()
	ИдетЗаписьДействийПользователя = Ложь;
	ЗавершитьЗаписьДействийПользователя();
	УправлениеВидимостьюЗаписиДействийПользователя("ЗавершитьЗапись");
	Если НужноПоказатьОкноОстановкиЗаписиДействийПользователя() Тогда
		ЗакрытьОкноОстановкиЗаписиДействийПользователя();
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьСостояниеФормыTestClientКнопка(Команда)
	ЗапомнитьСостояниеФормыTestClient();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСостояниеТекущейФормыКлиентаТестированияВФайл(Команда)
	
	Попытка
		ТабДок = СостояниеФормыВВидеМакета();
		Если ТабДок = Неопределено Тогда
			ТабДок = Новый ТабличныйДокумент;
		КонецЕсли;	 
	Исключение
		ТабДок = Новый ТабличныйДокумент;
	КонецПопытки;
	
	СохранитьМакетВФайл(ТабДок);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСостояниеВсехФормКлиентаТестированияВФайл(Команда)
	
	Попытка
		ТабДок = СостояниеВсехФормВВидеМакета();
		Если ТабДок = Неопределено Тогда
			ТабДок = Новый ТабличныйДокумент;
		КонецЕсли;	 
	Исключение
		ТабДок = Новый ТабличныйДокумент;
	КонецПопытки;
	
	СохранитьМакетВФайл(ТабДок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗабытьСостояниеФормыTestClientКнопка(Команда)
	ЗабытьСостояниеФормыTestClient();
КонецПроцедуры

&НаКлиенте
Процедура ИсследовательФормы(Команда)
	Если НЕ ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		СообщитьПользователю(Локализовать("Клиент тестирования не подключен."));
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Язык", Объект.ЯзыкГенератораGherkin);
	ПараметрыФормы.Вставить("ТекущийTestclientЭтоWebКлиент", ТекущийTestclientЭтоWebКлиент);
	ПараметрыФормы.Вставить("ВладелецУникальныйИдентификатор", УникальныйИдентификатор);
	ОткрытьФорму(ПолучитьИмяОбработкиVA() + ".Форма.ИсследовательФормы", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИзмененияФормыGherkinКнопка(Команда)
	ПолучитьИзмененияФормыGherkin();
	СделатьПереводСгенерированногоТекстаGherkin();
	
	Если Объект.ИспользоватьРедакторVanessaEditor И Элементы.ФункциональностьЗакладки.ТекущаяСтраница = Элементы.ГруппаЗапускТестов Тогда
		Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
			Возврат;
		КонецЕсли;	 
		МодульРедакторТекста().ВставитьТекстСУчетомФорматирования(Объект.СгенерированныйСценарий);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьШагПроверкиШапкиФормы(Команда)
	Если ТипЗнч(ОбъектКонтекстСохраняемый) <> Тип("Структура") Тогда
		СообщитьПользователю(Локализовать("TestClient НЕ подключен."));
		Возврат;
	КонецЕсли;	 
	
	Если Не ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		СообщитьПользователю(Локализовать("TestClient НЕ подключен."));
		Возврат;
	КонецЕсли;	 

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ШагПроверкиШапки", Истина);
	ТекущееСостояниеФормы = ПолучитьСостояниеФормыTestClient(ДопПараметры);
	Объект.СгенерированныйСценарий = ВывестиИзмененияФормыGherkin(СохраненноеСостояниеФормыTestClient, ТекущееСостояниеФормы, ДопПараметры);
	
	СделатьПереводСгенерированногоТекстаGherkin();
	
	Если Объект.ИспользоватьРедакторVanessaEditor И Элементы.ФункциональностьЗакладки.ТекущаяСтраница = Элементы.ГруппаЗапускТестов Тогда
		Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
			Возврат;
		КонецЕсли;	 
		МодульРедакторТекста().ВставитьТекстСУчетомФорматирования(Объект.СгенерированныйСценарий);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСостояниеТекущегоЭлементаФормыКнопка(Команда)
	ПолучитьСостояниеТекущегоЭлементаФормы();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПроверкуСообщенийПользователя(Команда)
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
		Возврат;
	КонецЕсли;	 
	
	Попытка
		МассивСообщений = ПолучитьАктивноеОкноИзТестовоеПриложение().ПолучитьТекстыСообщенийПользователю();
		МассивСообщений = Новый Массив(МассивСообщений);
		Для Сч = 0 По МассивСообщений.Количество()-1 Цикл
			МассивСообщений[Сч] = СтрЗаменить(МассивСообщений[Сч], Символы.ПС,"\n");
		КонецЦикла;	
	Исключение
		СообщитьПользователю(Локализовать("Не вышло получить текст сообщений."));
		Возврат;
	КонецПопытки;
	
	//Могут быть сообщения, содержащие перевод строки.
	Стр = МассивВСтроку(МассивСообщений, Символы.ПС);
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Стр, Символы.ПС);
	Результат = "Тогда в логе сообщений TestClient есть строки:" + Символы.ПС;
	Для Каждого Стр Из МассивСтрок Цикл
		Стр = СтрЗаменить(Стр,"'","\'");
		Стр = СтрЗаменить(Стр,"|","\|");
		Стр = СтрЗаменить(Стр,Символы.ПС,"\n");
		Результат = Результат + "	|'" + Стр + "'|" + Символы.ПС;
	КонецЦикла;
	
	Объект.СгенерированныйСценарий = Результат;
	СделатьПереводСгенерированногоТекстаGherkin();
	
	МодульРедакторТекста().ВставитьТекстСУчетомФорматирования(Объект.СгенерированныйСценарий);	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьШагПроверкиТекущегоОкна(Команда)
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
		Возврат;
	КонецЕсли;	 
	
	АктивноеОкно = ПолучитьАктивноеОкноИзТестовоеПриложение();
	Если АктивноеОкно = Неопределено Тогда
		ВызватьИсключение Локализовать("Не обнаружено активное окно.");
	КонецЕсли;	
	
	Результат = "Тогда открылось окно """ + АктивноеОкно.Заголовок + """";
	
	Объект.СгенерированныйСценарий = Результат;
	СделатьПереводСгенерированногоТекстаGherkin();
	
	МодульРедакторТекста().ВставитьТекстСУчетомФорматирования(Объект.СгенерированныйСценарий);	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьШагОткрытияНавигационнойСсылкиТекущегоОкна(Команда)
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
		Возврат;
	КонецЕсли;	 
	
	АктивноеОкно = ПолучитьАктивноеОкноИзТестовоеПриложение();
	Если АктивноеОкно = Неопределено Тогда
		ВызватьИсключение Локализовать("Не обнаружено активное окно.");
	КонецЕсли;	
	
	ПанельОткрытых = ПанельОткрытых();
	КнопкаКомандногоИнтерфейса = ПанельОткрытых.НайтиОбъект(Тип("ТестируемаяКнопкаКомандногоИнтерфейса"), АктивноеОкно.Заголовок);
	Если КнопкаКомандногоИнтерфейса = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Результат = "Дано Я открываю навигационную ссылку '" + КнопкаКомандногоИнтерфейса.НавигационнаяСсылка + "'";
	
	Объект.СгенерированныйСценарий = Результат;
	СделатьПереводСгенерированногоТекстаGherkin();
	
	МодульРедакторТекста().ВставитьТекстСУчетомФорматирования(Объект.СгенерированныйСценарий);	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДеревоДоФич(Команда)
	ДеревоФормыСтроки = Объект.ДеревоТестов.ПолучитьЭлементы();
	СвернутьДеревоДоФичРекурсивно(ДеревоФормыСтроки);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДеревоДоСценариев(Команда)
	ДеревоФормыСтроки = Объект.ДеревоТестов.ПолучитьЭлементы();
	СвернутьДеревоДоСценариевРекурсивно(ДеревоФормыСтроки);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДеревоДоШагов(Команда)
	ДеревоФормыСтроки = Объект.ДеревоТестов.ПолучитьЭлементы();
	СвернутьДеревоДоШаговРекурсивно(ДеревоФормыСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЧтоЗаписьВидеоБудетРаботать(Команда)
	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПодключитьБиблиотекуРаботыСВидео();
	МодульРаботыСВидео.ПроверитьЧтоЗаписьВидеоБудетРаботать(ПараметрыВидео);
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьНастройки(Команда)
	
	Объект.СлужебныеПараметры.Вставить("НастройкиВидимостиКнопокКоманднойПанелиРедактора", НастройкиВидимостиКнопокКоманднойПанелиРедактора);
	СохранитьНастройки();
	СохранитьНастройкиВХранилище("КаталогиБиблиотек", Объект.КаталогиБиблиотек, ПараметрыДляСохраненияНастроек());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьНастройкиВФайл(Команда)
	
	ВыгрузитьНастройкиВФайлПродолжение(Истина, Неопределено);
			
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДеревоНаПечать(Команда)
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Область(1, 1, 1, 1).Текст = "ИдСтроки";
	ТабДок.Область(1, 2, 1, 2).Текст = "Имя";
	ТабДок.Область(, 2, , 2).ШиринаКолонки = 70;
	ТабДок.Область(1, 3, 1, 3).Текст = "Тип";
	ТабДок.Область(1, 4, 1, 4).Текст = "ДопТип";
	ТабДок.Область(1, 5, 1, 5).Текст = "Адрес снипета";
	ТабДок.Область(, 5, , 5).ШиринаКолонки = 70;
	ТабДок.Область(1, 6, 1, 6).Текст = "Строка таблицы";
	ТабДок.Область(1, 7, 1, 7).Текст = "№ строки фичи";
	ВывестиДеревоВМакетРекурсивно(Объект.ДеревоТестов, ТабДок, 1, 0);
	ТабДок.Показать(Локализовать("Дерево шагов"));
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВыключитьЗаписьВидео(Команда)
	
	Объект.СоздаватьИнструкциюВидео = НЕ Объект.СоздаватьИнструкциюВидео;
	Если Объект.СоздаватьИнструкциюВидео Тогда
		Объект.ОзвучиватьВыполнениеСценария = Ложь;
	КонецЕсли;
	Если Объект.СоздаватьИнструкциюВидео Тогда
		ПоказатьОповещениеПользователя(Локализовать("Запись видео включена."));
	Иначе	
		ПоказатьОповещениеПользователя(Локализовать("Запись видео выключена."));
	КонецЕсли;	 
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВыключитьОзвучиваниеВыполненияСценария(Команда)
	Объект.ОзвучиватьВыполнениеСценария = НЕ Объект.ОзвучиватьВыполнениеСценария;
	Если Объект.ОзвучиватьВыполнениеСценария Тогда
		Объект.СоздаватьИнструкциюВидео = Ложь;
	КонецЕсли;
	Если Объект.ОзвучиватьВыполнениеСценария Тогда
		ПоказатьОповещениеПользователя(Локализовать("Озвучивание сценария включено."));
	Иначе	
		ПоказатьОповещениеПользователя(Локализовать("Озвучивание сценария выключено."));
	КонецЕсли;	 
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайла(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Заголовок = Локализовать("Выберите файл настроек Vanessa Automation.");
	Диалог.Фильтр = Локализовать("Настройки VA (*.json)|*.json");	
	
	ДопПараметры = Новый Структура;
	ВернутьНастройки = Новый Структура;
	ВернутьНастройки.Вставить("КаталогФич", Объект.КаталогФич);
	ДопПараметры.Вставить("ВернутьНастройки", ВернутьНастройки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьНастройкиИзФайлаЗавершение", ЭтаФорма, ДопПараметры);
	Диалог.Показать(ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСписокКлиентовТестированияИзФайла(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Заголовок = Локализовать("Выберите файл настроек.");
	Диалог.Фильтр = Локализовать("Настройки VA (*.json)|*.json");	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТолькоКлиентыТестирования", Истина);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьНастройкиИзФайлаЗавершение", ЭтаФорма, ДопПараметры);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьТекущиеНастройкиСФайлом(Команда)
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	 
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Заголовок = Локализовать("Выберите файл настроек Vanessa Automation.");
	Диалог.Фильтр = Локализовать("Настройки VA (*.json)|*.json");	
	ОписаниеОповещения = Новый ОписаниеОповещения("СравнитьТекущиеНастройкиСФайломЗавершение", ЭтаФорма);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСДругимФичаФайлом(Команда)
	
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ЭтоРежимОбучения() Тогда
		ИмяФайлаДляСравнения = ЗначениеДополнительногоПараметра("ИмяФайлаДляСравнения");
		Если ЗначениеЗаполнено(ИмяФайлаДляСравнения) Тогда
			ВыбранныеФайлы = Новый Массив;
			ВыбранныеФайлы.Добавить(ИмяФайлаДляСравнения);
			ДополнительныеПараметры = Новый Структура;
			СравнитьСДругимФичаФайломЗавершение(ВыбранныеФайлы, ДополнительныеПараметры);
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Заголовок = Локализовать("Выберите фича файл.");
	Диалог.Фильтр = Локализовать("Настройки VA (*.feature)|*.feature");	
	ОписаниеОповещения = Новый ОписаниеОповещения("СравнитьСДругимФичаФайломЗавершение", ЭтаФорма);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтчетAllure(Команда)
	
	#Если НЕ ВебКлиент Тогда
	
	Каталог = ПолучитьКаталогОтчетаAllure();
	
	Если Каталог = Неопределено Тогда
		СообщитьПользователю(Локализовать("Не заданы настройки для формирования отчета в формате Allure."));
		Возврат;
	КонецЕсли;	 
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	Команда = "allure > """ + ИмяВременногоФайла + """";
	Результат = ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяВременногоФайла) Тогда
		СообщитьПользователю(Локализовать("Не получилось выполнить проверку установки Allure."));
		Возврат;
	КонецЕсли;	 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяВременногоФайла, "UTF-8");
	ТекстФайла = Текст.Прочитать();
	Текст.Закрыть();
	Если Найти(ТекстФайла, "Usage:") = 0 Тогда
		СообщитьПользователю(Локализовать("Необходимо выполнить установку Allure."));
		Возврат;
	КонецЕсли;	 
	
	Файл = Новый Файл(Каталог);
	КаталогРодитель = Файл.Путь;
	ИмяКаталога = Файл.Имя;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("bat");
	
	// эти две строки нужны для записи файла без BOM - начало
	ЗТ = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.ANSI, , Ложь); 
	ЗТ.Закрыть();
	// эти две строки нужны для записи файла без BOM - окончание
	
	ЗТ = Новый ЗаписьТекста(ИмяВременногоФайла,"UTF-8",, Истина); 
	Стр = "cd /d ""%1""
	|call allure generate --clean .\%2
	|start """" call allure open .\allure-report"; 
	
	Стр = СтрЗаменить(Стр, "%1", КаталогРодитель);
	Стр = СтрЗаменить(Стр, "%2", ИмяКаталога);
	ЗТ.ЗаписатьСтроку(Стр);
	ЗТ.Закрыть();
	
	КомандаСистемы("""" + ИмяВременногоФайла + """");
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorОзвучитьТекущуюСтрокуРедактора(Команда)
	Если Объект.ЗаписьВидеоТипОзвучкиTTS = -1 
		 И ФормаОбработкиПроизвольногоДвижкаTTS = Неопределено Тогда
		   
		ОбработчикОповещения = Новый ОписаниеОповещения("VanessaEditorОзвучитьТекущуюСтрокуРедактораПродолжение", ЭтаФорма);
		ПодключитьОбработкуДвижкаTTS(ОбработчикОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	VanessaEditorОзвучитьТекущуюСтрокуРедактораПродолжение(Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorОткрытьСписокУроков(Команда)
	
	Если МодульРедакторТекста().СуществуетВкладкаСЧастьюЗаголовка("List_of_lessons") Тогда
		МодульРедакторТекста().ЗакрытьВкладкуСЧастьюЗаголовка("List_of_lessons");
		ПодключитьОбработчикОжидания("ОткрытьСписокУроковСлужебный", 0.1, Истина);
		Возврат;
	КонецЕсли;	
	
	ОткрытьСписокУроковСлужебный();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиПоУмолчанию(Команда)
	#Если НЕ ВебКлиент Тогда
	
	ИмяФайла = Объект.КаталогИнструментов;
	
	Если Не ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(Локализовать("Не найден каталог инструментов: %1"),
			ИмяФайла
		);
	КонецЕсли;	 
	
	ИмяФайла = Объект.КаталогИнструментов + "\tools\JSON\VBParams836UF.json";
	Если Не ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(Локализовать("Файл <%1> не существует."),
			ИмяФайла
		);
	КонецЕсли;	 
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ИмяФайла);
	Попытка
		ПараметрыФайла = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ПараметрыФайла = Неопределено;
	КонецПопытки;
	ЧтениеJSON.Закрыть();
		
	Если ПараметрыФайла <> Неопределено Тогда
		Для Каждого Элем Из ПараметрыФайла Цикл
			Если Лев(Элем.Ключ, 11) <> "ЗаписьВидео" Тогда
				Продолжить;
			КонецЕсли;
			
			КлючиЗаписиВидео = Найти(Элем.Ключ, "ВодянойЗнак") > 0 
									ИЛИ Найти(Элем.Ключ, "ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм") > 0 
									ИЛИ Найти(Элем.Ключ, "ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы") > 0 
									ИЛИ Найти(Элем.Ключ, "ЗаписьВидеоКаталогМузыки") > 0;
			Если КлючиЗаписиВидео Тогда
				Продолжить;
			КонецЕсли;

			Если Найти(Элем.Ключ, "СловарьЗаменСписок") > 0 Тогда
				Объект.ЗаписьВидеоСловарьЗамен.Очистить();
				Для Каждого ПутьКСловарюЗамен Из Элем.Значение Цикл
					Объект.ЗаписьВидеоСловарьЗамен.Добавить(ПреобразоватьПутьСТочкамиКНормальномуПути(ПутьКСловарюЗамен));
				КонецЦикла;
				Продолжить;
			КонецЕсли;

			Если Найти(Элем.Ключ, "СловарьЗамен") > 0 Тогда
				Объект.ЗаписьВидеоСловарьЗамен.Очистить();
				Объект.ЗаписьВидеоСловарьЗамен.Добавить(ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение));
				Продолжить;
			КонецЕсли;

			Значение = Элем.Значение;
			Если Лев(Элем.Значение, 1) = "." Тогда
				Значение = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);
			КонецЕсли;

			Объект[Элем.Ключ] = Значение;
		КонецЦикла;
	КонецЕсли;
		
	Объект.ЗаписьВидеоКоличествоКадров = 30;
	Объект.ЗаписьВидеоИнструмент = "ffmpeg";
	Объект.ЗаписьВидеоПроцентУскорения = 35;
	Объект.ЗаписьВидеоГруппаШаговКакШаг = Истина;
	Объект.ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи = Истина;
	Объект.ЗаписьВидеоОтключитьСлайдСценария = Истина;
	
	УстановитьУсловноеОформление();
	
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКлиентовТестированияКоманда(Команда)
	СохранитьКлиентовТестирования();
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьВыбранногоКлиентаТестирования(Команда)
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	ПодключитьПрофильTestClientПоИмени(ТекущиеДанные.Имя);
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьДействийПользователяВВыбранномКлиентеТестирования(Команда)
	
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипКлиента = "Web" Тогда
		СообщитьПользователю(Локализовать("Web клиент не поддерживает запись действий пользователя."));
		Возврат;
	КонецЕсли;	 
	
	Если Не ТекущиеДанные.Подключен Тогда
		ПодключитьВыбранногоКлиентаТестирования("");
	КонецЕсли;
	
	НачатьЗаписьДействийПользователя(Ложь);
	ЭтаФорма.ТекущийЭлемент = Элементы.ГруппаДополнительно;
	
	УправлениеВидимостьюЗаписиДействийПользователя("НачатьЗапись");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВыбранногоКлиентаТестирования(Команда)
	РазорватьСоединениеTestClient("ОтключитьВыбранногоКлиентаТестирования");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу1(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[0].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу2(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[1].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу3(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[2].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу4(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[3].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу5(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[4].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу6(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[5].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу7(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[6].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу8(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[7].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу9(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[8].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОпределениеШага(Команда)
	ОткрытьФормуИзвестныхШагов(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДублированиеСценариев(Команда)
	ПротоколОшибок="";
	ПроверитьДублированиеСценариевНаСервере(ПротоколОшибок);
	Если ЗначениеЗаполнено(ПротоколОшибок) Тогда 
		ТекстДок = новый ТекстовыйДокумент;
		ТекстДок.УстановитьТекст(ПротоколОшибок);
		ТекстДок.Показать("Дубли сценариев");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзвестныйШаг(Команда)
	ОткрытьФормуИзвестныхШагов(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДанныйСценарийСТекущегоШагаФорма(Команда)
	ВыполнитьДанныйСценарийСТекущегоШага();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДанныйСценарийСТекущегоШагаСПродолжениемФорма(Команда)
	ВыполнитьДанныйСценарийСТекущегоШагаСПродолжением();
КонецПроцедуры

&НаКлиенте
Процедура СброситьКешИзвестныхStepDefinition(Команда)
	СброситьКешИзвестныхStepDefinitionСервер();
	СообщитьПользователю(Локализовать("Необходимо выполнить перезапуск фреймворка тестирования."));
	ТаблицаУжеСуществующихСценариев = Новый Массив;
	ДанныеВерсийFeatureИмяФайла = Новый Соответствие;
КонецПроцедуры

&НаКлиенте
Процедура СброситьНастройкиVanessaAutomation(Команда)
	
	ТекстВопроса = Локализовать("Вы уверены? Данное действие нельзя отменить.");
	ЗаголовокОкна = Локализовать("Сброс настроек");
	ОписаниеОповещения = Новый ОписаниеОповещения("СброситьНастройкиVanessaAutomationЗавершение", ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,, ЗаголовокОкна);
	
КонецПроцедуры

//	{ управление видимостью колонок ДереваТестов
&НаКлиенте
Процедура ПоказатьСкрытьПутьКФайлу(Команда)
	
	Если Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовПолныйПуть.Видимость Или Команда = "Показать" Тогда
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовПолныйПуть.Видимость = Истина;
		Элементы.ПоказатьСкрытьПутьКФайлу.Картинка = БиблиотекаКартинок.УстановитьФлажки;
	Иначе
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовПолныйПуть.Видимость = Ложь;
		Элементы.ПоказатьСкрытьПутьКФайлу.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьСнипет(Команда)
	
	Если Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСнипет.Видимость  Или Команда = "Показать" Тогда
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСнипет.Видимость = Истина;
		Элементы.ПоказатьСкрытьСнипет.Картинка = БиблиотекаКартинок.УстановитьФлажки;
	Иначе
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСнипет.Видимость = Ложь;
		Элементы.ПоказатьСкрытьСнипет.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьАдресСнипета(Команда)
	
	Если Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовАдресСнипета.Видимость  Или Команда = "Показать" Тогда
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовАдресСнипета.Видимость = Истина;
		Элементы.ПоказатьСкрытьАдресСнипета.Картинка = БиблиотекаКартинок.УстановитьФлажки;
	Иначе
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовАдресСнипета.Видимость = Ложь;
		Элементы.ПоказатьСкрытьАдресСнипета.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьСтрокаРеальнойПроцедуры(Команда)
	Если Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСтрокаРеальнойПроцедуры.Видимость  Или Команда = "Показать" Тогда
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСтрокаРеальнойПроцедуры.Видимость = Истина;
		Элементы.ПоказатьСкрытьСтрокаРеальнойПроцедуры.Картинка = БиблиотекаКартинок.УстановитьФлажки;
	Иначе
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСтрокаРеальнойПроцедуры.Видимость = Ложь;
		Элементы.ПоказатьСкрытьСтрокаРеальнойПроцедуры.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьВсеКолонки(Команда)

	Если Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСтрокаРеальнойПроцедуры.Видимость Или
		 Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовАдресСнипета.Видимость Или
		 Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСнипет.Видимость Или
		 Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовПолныйПуть.Видимость Или
		 Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовИДСтроки.Видимость Тогда

		ПоказатьСкрытьСтрокаРеальнойПроцедуры("Показать");
		ПоказатьСкрытьАдресСнипета("Показать");
		ПоказатьСкрытьСнипет("Показать");
		ПоказатьСкрытьПутьКФайлу("Показать");
		
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.УстановитьФлажки;
		
	Иначе
		ПоказатьСкрытьСтрокаРеальнойПроцедуры("");
		ПоказатьСкрытьАдресСнипета("");
		ПоказатьСкрытьСнипет("");
		ПоказатьСкрытьПутьКФайлу("");
		
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьИДСтроки(Команда)
	
	Если Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовИДСтроки.Видимость  Или Команда = "Показать" Тогда
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовИДСтроки.Видимость = Истина;
		Элементы.ПоказатьСкрытьИДСтроки.Картинка = БиблиотекаКартинок.УстановитьФлажки;
	Иначе
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовИДСтроки.Видимость = Ложь;
		Элементы.ПоказатьСкрытьИДСтроки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;
	
КонецПроцедуры
//	} управление видимостью колонок ДереваТестов

&НаКлиенте
Процедура РедактироватьТаблицуТекст(Команда)
	ОткрытьРедактированиеТаблицыGherkin();
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьШагПроверкиПоИмениНаШагПроверкиПоЗаголовку(Команда)
	Если Объект.ИспользоватьРедакторVanessaEditor И Элементы.ФункциональностьЗакладки.ТекущаяСтраница = Элементы.ГруппаЗапускТестов Тогда
		Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
			Возврат;
		КонецЕсли;
		
		ЭкземплярVanessaEditor = ПолучитьVanessaEditor();
		ПозицияVanessaEditor = ЭкземплярVanessaEditor.getPosition();
		Если НЕ ПустаяСтрока(ПозицияVanessaEditor.codeWidget) Тогда
			//Опция доступна только для основного текста фичи
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрокаVanessaEditor = ПозицияVanessaEditor.LineNumber;
		ОригиналСтроки = ЭкземплярVanessaEditor.getLineContent(ТекущаяСтрокаVanessaEditor);
		ТекстСтроки = СокрЛ(ОригиналСтроки);
		Если Лев(ТекстСтроки, 1) = "|" ИЛИ Лев(ТекстСтроки, 1) = "/" ИЛИ Лев(ТекстСтроки, 1) = "*" ИЛИ Лев(ТекстСтроки, 1) = "@" ИЛИ Лев(ТекстСтроки, 1) = "#" Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеШагаИзСтроки = МодульПарсерФич().ПолучитьДанныеШагаИзСтроки(ТекстСтроки);
		Если ДанныеШагаИзСтроки.ЗначенияПараметров.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;	
		
		Если Найти(НРег(ДанныеШагаИзСтроки.СнипетБезПараметров), "сименем") > 0 Тогда
			ТекущийШагВыполняетПоискПоИмени = Истина;
		Иначе	
			ТекущийШагВыполняетПоискПоИмени = Ложь;
		КонецЕсли;
		
		Если Найти(НРег(ДанныеШагаИзСтроки.СнипетБезПараметров), "втаблице") > 0 Тогда
			ЭтоШагРаботыСТаблицей = Истина;
		Иначе	
			ЭтоШагРаботыСТаблицей = Ложь;
		КонецЕсли;
		
		Если КешСоответствияШаговПоискПоИмени = Неопределено Тогда
			КешСоответствияШаговПоискПоИмени = ЗаполнитьКешСоответствияШаговПоискПоИмени();
		КонецЕсли;
		
		СтрокаПоискаПарногоШага = "";
		Если ТекущийШагВыполняетПоискПоИмени Тогда
			СтрокаПоискаПарногоШага = КешСоответствияШаговПоискПоИмени.СоответствиеИмя[НРег(ДанныеШагаИзСтроки.СнипетБезПараметров)];
		Иначе	
			СтрокаПоискаПарногоШага = КешСоответствияШаговПоискПоИмени.СоответствиеЗаголовок[НРег(ДанныеШагаИзСтроки.СнипетБезПараметров)];
		КонецЕсли;
		
		СтрокаПарногоШагаТаблицаИзвестныхStepDefinition = Неопределено;
		Если ЗначениеЗаполнено(СтрокаПоискаПарногоШага) Тогда
			ДанныеОтбора = Новый Структура;
			ДанныеОтбора.Вставить("СтрокаДляПоиска", СтрокаПоискаПарногоШага);
			СтрокиТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinition.НайтиСтроки(ДанныеОтбора);
			Если СтрокиТаблицаИзвестныхStepDefinition.Количество() > 0 Тогда
				СтрокаПарногоШагаТаблицаИзвестныхStepDefinition = СтрокиТаблицаИзвестныхStepDefinition[0];
			КонецЕсли;	
		КонецЕсли;
		
		Если СтрокаПарногоШагаТаблицаИзвестныхStepDefinition = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		НайденныйЭлемент = Неопределено;
		ИдПараметраДляЗамены = Неопределено;
		ДанныеИзXMLДействийПользователя = Неопределено;
		
		МожноИскатьВФормеАктивногоОкна = Истина;
		Попытка
			ТекущееОкно = ПолучитьАктивноеОкноИзТестовоеПриложение();
		Исключение
			ТекущееОкно = Неопределено;
		КонецПопытки;
		Если ТекущееОкно = Неопределено Тогда
			МожноИскатьВФормеАктивногоОкна = Ложь;
		КонецЕсли;
		
		//Сначала ищем элемент в форме текущего окна, т.к. окон может быть много и могут совпадать заголовки или имена элементов
		Если МожноИскатьВФормеАктивногоОкна Тогда
			Если СтрокаПарногоШагаТаблицаИзвестныхStepDefinition.Параметры.Количество() = 1 Тогда
				ИдПараметраДляЗамены = 0;
			Иначе
				
				НайденнаяТаблица = Неопределено;
				Если ЭтоШагРаботыСТаблицей Тогда
					Для Сч = 0 По СтрокаПарногоШагаТаблицаИзвестныхStepDefinition.Параметры.Количество() - 1 Цикл
						ИмяТаблицы = ДанныеШагаИзСтроки.ЗначенияПараметров[Сч].Значение.Значение;
						ТекТаблица = ТекущееОкно.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"),,ИмяТаблицы);
						Если ТекТаблица <> Неопределено Тогда
							НайденнаяТаблица = ТекТаблица;
							Прервать;
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;	
				
				Для Сч = 0 По СтрокаПарногоШагаТаблицаИзвестныхStepDefinition.Параметры.Количество() - 1 Цикл
					ЗначениеПараметра = ДанныеШагаИзСтроки.ЗначенияПараметров[Сч].Значение.Значение;
					
					Если НайденнаяТаблица <> Неопределено Тогда
						ГдеИскать = НайденнаяТаблица;
					Иначе	
						ГдеИскать = ТекущееОкно;
					КонецЕсли;	
					
					ПромЭлемент = ЭлементФормыПоСтроке(ГдеИскать, ЗначениеПараметра, ТекущийШагВыполняетПоискПоИмени, Ложь);
					Если ПромЭлемент <> Неопределено И ТипЗнч(ПромЭлемент) <> Тип("ТестируемаяТаблицаФормы") Тогда
						ИдПараметраДляЗамены = Сч;
						НайденныйЭлемент = ПромЭлемент;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;
		
		//Попытка найти значение для замены в XML записи действий пользователя
		ДанныеПоискаПоДействиямПользователя = Неопределено;
		Попытка
			Если ЗначениеЗаполнено(Объект.СгенерированныйXML) Тогда
				ДанныеПоискаПоДействиямПользователя = ПоискЭлементаФормыВXMLДействийПользователя(Объект.СгенерированныйXML);
			КонецЕсли;	
		Исключение
			ДанныеПоискаПоДействиямПользователя = Неопределено;
		КонецПопытки;
		
		Если ДанныеПоискаПоДействиямПользователя <> Неопределено Тогда
			Для Сч = 0 По СтрокаПарногоШагаТаблицаИзвестныхStepDefinition.Параметры.Количество() - 1 Цикл
				ЗначениеПараметра = ДанныеШагаИзСтроки.ЗначенияПараметров[Сч].Значение.Значение;
				
				Если ТекущийШагВыполняетПоискПоИмени Тогда
					ДанныеИзXMLДействийПользователя = ДанныеПоискаПоДействиямПользователя.ЭлементыСУказаннымИменем[ЗначениеПараметра];
				Иначе
					ДанныеИзXMLДействийПользователя = ДанныеПоискаПоДействиямПользователя.ЭлементыСУказаннымЗаголовком[ЗначениеПараметра];
				КонецЕсли;	
				
				Если ДанныеИзXMLДействийПользователя <> Неопределено Тогда
					ИдПараметраДляЗамены = Сч;
					Прервать;
				КонецЕсли;	
				
			КонецЦикла;	
		КонецЕсли;	

		Если ИдПараметраДляЗамены = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗначениеПараметраВТекущемШаге = ДанныеШагаИзСтроки.ЗначенияПараметров[ИдПараметраДляЗамены].Значение.Значение;
		
		НовоеЗначение = Неопределено;
		Если МожноИскатьВФормеАктивногоОкна Тогда
			Если НайденныйЭлемент = Неопределено Тогда
				
				Если ДанныеИзXMLДействийПользователя = Неопределено Тогда
					НайденныйЭлемент = ЭлементФормыПоСтроке(ТекущееОкно, ЗначениеПараметраВТекущемШаге, ТекущийШагВыполняетПоискПоИмени, Истина);
				Иначе
					НайденныйЭлемент = ЭлементФормыПоСтроке(ТекущееОкно, ЗначениеПараметраВТекущемШаге, ТекущийШагВыполняетПоискПоИмени, Ложь);
				КонецЕсли;	
				
			КонецЕсли;
			
			Если НайденныйЭлемент <> Неопределено Тогда
				Если ТекущийШагВыполняетПоискПоИмени Тогда
					НовоеЗначение = НайденныйЭлемент.ТекстЗаголовка;
				Иначе	
					НовоеЗначение = НайденныйЭлемент.Имя;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НовоеЗначение = Неопределено И ДанныеИзXMLДействийПользователя <> Неопределено Тогда
			Если ТекущийШагВыполняетПоискПоИмени Тогда
				НовоеЗначение = ДанныеИзXMLДействийПользователя.ЗаголовокЭлемента;
			Иначе
				НовоеЗначение = ДанныеИзXMLДействийПользователя.ИмяЭлемента;
			КонецЕсли;	
		КонецЕсли;
		
		Если НовоеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		НоваяСтрокаШага = СтрокаПарногоШагаТаблицаИзвестныхStepDefinition.ПредставлениеТеста;
		ДанныеНовогоШага = МодульПарсерФич().ПолучитьДанныеШагаИзСтроки(НоваяСтрокаШага);
		
		ЗначениеЗаменыВНовомШаге = ДанныеНовогоШага.ЗначенияПараметров[ИдПараметраДляЗамены].Значение.Значение;
		
		НоваяСтрокаШага = СтрЗаменить(НоваяСтрокаШага, """" + ЗначениеЗаменыВНовомШаге + """", """" + ЭкранироватьСпецСимволыДляЗначенияШага(НовоеЗначение) + """");
		НоваяСтрокаШага = СтрЗаменить(НоваяСтрокаШага, "'" + ЗначениеЗаменыВНовомШаге + "'", "'" + ЭкранироватьСпецСимволыДляЗначенияШага(НовоеЗначение) + "'");
		
		//Надо заменить оставшиеся параметры
		Для Сч = 0 По СтрокаПарногоШагаТаблицаИзвестныхStepDefinition.Параметры.Количество() - 1 Цикл
			ЗначениеПараметра = ДанныеШагаИзСтроки.ЗначенияПараметров[Сч].Значение.Значение;
			Если ЗначениеПараметраВТекущемШаге = ЗначениеПараметра Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеЗаменыВНовомШаге = ДанныеНовогоШага.ЗначенияПараметров[Сч].Значение.Значение;
			НоваяСтрокаШага = СтрЗаменить(НоваяСтрокаШага, """" + ЗначениеЗаменыВНовомШаге + """", """" + (ЗначениеПараметра) + """");
			НоваяСтрокаШага = СтрЗаменить(НоваяСтрокаШага, "'" + ЗначениеЗаменыВНовомШаге + "'", "'" + (ЗначениеПараметра) + "'");
		КонецЦикла;	
		
		ОтступСлева = Лев(ОригиналСтроки, СтрДлина(ОригиналСтроки) - СтрДлина(СокрЛ(ОригиналСтроки)));
		НоваяСтрокаШага = ОтступСлева + НоваяСтрокаШага;
		
		Соответствие = Новый Соответствие;
		Соответствие.Вставить("startLineNumber", ТекущаяСтрокаVanessaEditor);
		Соответствие.Вставить("startColumn", 1);
		Соответствие.Вставить("endLineNumber", ТекущаяСтрокаVanessaEditor);
		Соответствие.Вставить("endColumn", СтрДлина(ОригиналСтроки) + 1);
		ЭкземплярVanessaEditor.insertText(НоваяСтрокаШага, ЗаписатьОбъектJSON(Соответствие));
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьМакетПоТаблице(Команда)
	
	Если Объект.ИспользоватьРедакторVanessaEditor И Элементы.ФункциональностьЗакладки.ТекущаяСтраница = Элементы.ГруппаЗапускТестов Тогда
		Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
			Возврат;
		КонецЕсли;
		
		ЭкземплярVanessaEditor = ПолучитьVanessaEditor();
		ПозицияVanessaEditor = ЭкземплярVanessaEditor.getPosition();
		Если НЕ ПустаяСтрока(ПозицияVanessaEditor.codeWidget) Тогда
			//Опция доступна только для основного текста фичи
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрокаVanessaEditor = ПозицияVanessaEditor.LineNumber;
		ТекстСтроки = СокрЛ(ЭкземплярVanessaEditor.getLineContent(ТекущаяСтрокаVanessaEditor));
		Если Лев(ТекстСтроки, 1) <> "|" Тогда
			Возврат;
		КонецЕсли;
		
		МинСтр = 0;
		МаксСтр = 0;
		ДлинаМаксСтр = 0;
		МассивСтрокДляРедактирования = МодульРедакторТекста().ТаблицаGherkinИзVanessaEditor(ТекущаяСтрокаVanessaEditor, МинСтр, МаксСтр, ДлинаМаксСтр);
		
	Иначе
		
		НачалоСтроки = 0;
		НачалоКолонки = 0;
		КонецСтроки = 0;
		КонецКолонки = 0;
		ВерхняяГраница = 0;
		НижняяГраница = 0;
		ОпределитьГраницыТаблицыGherkin(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки, ВерхняяГраница, НижняяГраница);
		
		МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Объект.СгенерированныйСценарий, Символы.ПС);
		
		Если МассивСтрок.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		МассивСтрокДляРедактирования = Новый Массив;
		Для Ккк = (НижняяГраница - 1) По ВерхняяГраница - 1 Цикл
			МассивСтрокДляРедактирования.Добавить(МассивСтрок[Ккк]);
		КонецЦикла;
		
		Если МассивСтрокДляРедактирования.Количество() = 0 Тогда
			СообщитьПользователю(Локализовать("Не найдена таблица для редактирования."));
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ТабДок = ТабличныйДокументПоМассивуСтрокТаблицыGherkin(МассивСтрокДляРедактирования);
	
	ТабДок.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроизвольныйКод(Команда)
	Выполнить(РеквизитПроизвольныйКод);
КонецПроцедуры

&НаКлиенте
Процедура ВычислитьPIDЭтогоСеанса(Команда)
	ВычислитьPIDЭтогоСеансаСлужебный();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуВСписокБиблиотек(Команда)
	Элементы.КаталогиБиблиотек.ДобавитьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСгенерированныйСценарий(Команда)
	Объект.СгенерированныйСценарий = "";
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиТекстНаДругойЯзык(Команда)
	Если Объект.ЯзыкГенератораGherkin = "ru" Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ИспользоватьРедакторVanessaEditor И Элементы.ФункциональностьЗакладки.ТекущаяСтраница = Элементы.ГруппаЗапускТестов Тогда
		Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
			Возврат;
		КонецЕсли;	 
		Объект.СгенерированныйСценарий = ПолучитьVanessaEditor().getContent();
	КонецЕсли;	 
	
	Перевод = ПеревестиТекст(Объект.СгенерированныйСценарий);
	Объект.СгенерированныйСценарий = Перевод;
	
	Если Объект.ИспользоватьРедакторVanessaEditor И Элементы.ФункциональностьЗакладки.ТекущаяСтраница = Элементы.ГруппаЗапускТестов Тогда
		Соответствие = Новый Соответствие;
		Соответствие.Вставить("startLineNumber", 1);
		Соответствие.Вставить("startColumn", 1);
		Соответствие.Вставить("endLineNumber", 1000000);
		Соответствие.Вставить("endColumn", 1);
		ПолучитьVanessaEditor().insertText(Объект.СгенерированныйСценарий, ЗаписатьОбъектJSON(Соответствие));
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура КомментарийСтрокиСценария(Команда)
	Если Объект.ИспользоватьРедакторVanessaEditor И Элементы.ФункциональностьЗакладки.ТекущаяСтраница = Элементы.ГруппаЗапускТестов Тогда
		Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
			Возврат;
		КонецЕсли;	 

		ЭкземплярVanessaEditor = ПолучитьVanessaEditor();
		ВыделеннаяОбласть = ЭкземплярVanessaEditor.getSelection();
		НачалоДиапазона = ВыделеннаяОбласть.startLineNumber;
		ОкончаниеДиапазона = ВыделеннаяОбласть.endLineNumber;
		
		Если ПустаяСтрока(ЭкземплярVanessaEditor.getLineContent(ОкончаниеДиапазона)) ИЛИ ВыделеннаяОбласть.endColumn = 1 Тогда
			ОкончаниеДиапазона = ОкончаниеДиапазона - 1;
		КонецЕсли;	 
		
		ПолныйТекстСтроки = ЭкземплярVanessaEditor.getLineContent(НачалоДиапазона);
		Если Лев(СокрЛ(ПолныйТекстСтроки), 2) = "//" Тогда
			ДобавлятьКомментарий = Ложь;
		Иначе	
			ДобавлятьКомментарий = Истина;
		КонецЕсли;	 
		
		ПолныйТекстСтроки = ЭкземплярVanessaEditor.getLineContent(ОкончаниеДиапазона);
		ДлинаМаксСтр = СтрДлина(ПолныйТекстСтроки);
		
		Массив = Новый Массив;
		Для Сч = НачалоДиапазона По ОкончаниеДиапазона Цикл
			ПолныйТекстСтроки = ЭкземплярVanessaEditor.getLineContent(Сч);
			Если ДобавлятьКомментарий Тогда
				ПолныйТекстСтроки = "//" + ПолныйТекстСтроки;
			Иначе	
				Поз = Найти(ПолныйТекстСтроки, "//");
				Если Поз > 0 Тогда
					ПолныйТекстСтроки = Сред(ПолныйТекстСтроки, Поз + 2);
				КонецЕсли;	 
			КонецЕсли;
			Массив.Добавить(ПолныйТекстСтроки);
		КонецЦикла;	
		
		СтрокаЗамены = СокрП(МассивВСтроку(Массив));
		
		Соответствие = new Соответствие;
		Соответствие.Вставить("startLineNumber", НачалоДиапазона);
		Соответствие.Вставить("startColumn", 1);
		Соответствие.Вставить("endLineNumber", ОкончаниеДиапазона);
		Соответствие.Вставить("endColumn", ДлинаМаксСтр+1);
		ЭкземплярVanessaEditor.insertText(СтрокаЗамены, ЗаписатьОбъектJSON(Соответствие));
	Иначе	
		
		Если ПустаяСтрока(Объект.СгенерированныйСценарий) Тогда
			Возврат;
		КонецЕсли;	
		
		НомерНачальнойСтроки = 0;
		НомерНачальнойКолонки = 0;
		НомерКонечнойСтроки = 0;
		НомерКонечнойКолонки = 0;
		Элементы.СгенерированныйСценарий.ПолучитьГраницыВыделения(НомерНачальнойСтроки, НомерНачальнойКолонки, НомерКонечнойСтроки, НомерКонечнойКолонки);
		
		КомментироватьРаскомментироватьСтрокиСценарияНаСервере(НомерНачальнойСтроки, НомерКонечнойСтроки);	
		Если Версия8310ИлиВыше Тогда
			Выполнить("ОбновитьОтображениеДанных(Элементы.СгенерированныйСценарий)");
		КонецЕсли;	 
		Элементы.СгенерированныйСценарий.УстановитьГраницыВыделения(НомерНачальнойСтроки, НомерНачальнойКолонки, НомерКонечнойСтроки, НомерКонечнойКолонки);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьСтрокиСценарияКакКодВстроенногоЯзыка(Команда)
	Если Объект.ИспользоватьРедакторVanessaEditor И Элементы.ФункциональностьЗакладки.ТекущаяСтраница = Элементы.ГруппаЗапускТестов Тогда
		Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
			Возврат;
		КонецЕсли;	 
		ЭкземплярVanessaEditor = ПолучитьVanessaEditor();
		ВыделеннаяОбласть = ЭкземплярVanessaEditor.getSelection();
		НачалоДиапазона = ВыделеннаяОбласть.startLineNumber;
		ОкончаниеДиапазона = ВыделеннаяОбласть.endLineNumber;
		
		Если ПустаяСтрока(ЭкземплярVanessaEditor.getLineContent(ОкончаниеДиапазона)) ИЛИ ВыделеннаяОбласть.endColumn = 1 Тогда
			ОкончаниеДиапазона = ОкончаниеДиапазона - 1;
		КонецЕсли;	 
		
		ПолныйТекстСтроки = ЭкземплярVanessaEditor.getLineContent(ОкончаниеДиапазона);
		ДлинаМаксСтр = СтрДлина(ПолныйТекстСтроки);
		
		СтрокаЗамены = "";
		Для Сч = НачалоДиапазона По ОкончаниеДиапазона Цикл
			ПолныйТекстСтроки = ЭкземплярVanessaEditor.getLineContent(Сч);
			ПолныйТекстСтрокиСокрЛ = СокрЛ(ПолныйТекстСтроки);
			ПолныйТекстСтрокиСокрП = СокрП(ПолныйТекстСтроки);
			Если НЕ (Лев(ПолныйТекстСтрокиСокрЛ, 1) = "|" ИЛИ Прав(ПолныйТекстСтрокиСокрП, 1) = "|") Тогда
				ДлинаПрефикса = СтрДлина(ПолныйТекстСтроки) - СтрДлина(ПолныйТекстСтрокиСокрЛ);
				ДлинаПостфикса = СтрДлина(ПолныйТекстСтроки) - СтрДлина(ПолныйТекстСтрокиСокрП);
				
				ПолныйТекстСтроки = СтрЗаменить(ПолныйТекстСтроки, "\'", "~ЭкранированиеАпострофа~");
				ПолныйТекстСтроки = СтрЗаменить(ПолныйТекстСтроки, "'", "\'");
				ПолныйТекстСтроки = СтрЗаменить(ПолныйТекстСтроки, "~ЭкранированиеАпострофа~", "\'");
				
				ПолныйТекстСтроки = Лев(ПолныйТекстСтроки, ДлинаПрефикса) + "|'" + СокрЛП(ПолныйТекстСтроки) + "'|" + Прав(ПолныйТекстСтроки, ДлинаПостфикса);
			КонецЕсли;	 
			
			СтрокаЗамены = СтрокаЗамены + ПолныйТекстСтроки + Символы.ПС;
		КонецЦикла;	
		
		СтрокаЗамены = СокрП(СтрокаЗамены);
		
		Соответствие = new Соответствие;
		Соответствие.Вставить("startLineNumber", НачалоДиапазона);
		Соответствие.Вставить("startColumn", 1);
		Соответствие.Вставить("endLineNumber", ОкончаниеДиапазона);
		Соответствие.Вставить("endColumn", ДлинаМаксСтр+1);
		ЭкземплярVanessaEditor.insertText(СтрокаЗамены, ЗаписатьОбъектJSON(Соответствие));
	Иначе	
		
		Если ПустаяСтрока(Объект.СгенерированныйСценарий) Тогда
			Возврат;
		КонецЕсли;
		
		НомерНачальнойСтроки = 0;
		НомерНачальнойКолонки = 0;
		НомерКонечнойСтроки = 0;
		НомерКонечнойКолонки = 0;
		Элементы.СгенерированныйСценарий.ПолучитьГраницыВыделения(НомерНачальнойСтроки, НомерНачальнойКолонки, НомерКонечнойСтроки, НомерКонечнойКолонки);
		
		ВыделитьСтрокиСценарияКакКодВстроенногоЯзыкаНаСервере(НомерНачальнойСтроки, НомерКонечнойСтроки);	
		Если Версия8310ИлиВыше Тогда
			Выполнить("ОбновитьОтображениеДанных(Элементы.СгенерированныйСценарий)");
		КонецЕсли;	 
		Элементы.СгенерированныйСценарий.УстановитьГраницыВыделения(НомерНачальнойСтроки, НомерНачальнойКолонки, НомерКонечнойСтроки, НомерКонечнойКолонки);
	КонецЕсли;	  
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеСтрокиДереваСлужебный(Команда)
	РазвернутьВсеСтрокиДереваСлужебныйЭкспорт();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИнструкциюПоОписаниюЭлементов(Команда)
	
	Попытка
		
		Если ПустаяСтрока(Объект.КаталогИнструментов) Тогда
			Возврат;
		КонецЕсли;	
		
		КоллекцияКомандЗапуска = КоллекцияКомандЗапуска();
		ИменаПолейJson = Новый Соответствие;
		Для Каждого Элем Из КоллекцияКомандЗапуска Цикл
			Если Элем.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;	 
			
			ИменаПолейJson.Вставить(НРег(Элем.Ключ), Элем.Значение);
		КонецЦикла;	 
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить("# " + Локализовать("Описание параметров, которые можно передавать в файле VAParams.json, который используется при запуске Vanessa Automation из командной строки."));
		МассивСтрок.Добавить("#### " + Локализовать("Данный файл создан автоматически на основании данных формы Vanessa Automation. Пулреквесты нужно отправлять в подсказки к элементам формы."));
		МассивСтрок.Добавить("#### " + Локализовать("Заготовку для этого файла можно получить выгрузив настройки Vanessa Automation в файл VAParams.json."));
		МассивСтрок.Добавить("");
		
		//Глобальные переменные
		МассивСтрок.Добавить("## " + Локализовать("Глобальные переменные"));
		МассивСтрок.Добавить("");
		МассивСтрок.Добавить("* " + Локализовать("Специальные"));
		МассивСтрок.Добавить("");
		МассивСтрок.Добавить("      * **GlobalVars {GlobalVars}**:");
		МассивСтрок.Добавить(Локализовать("Массив объектов вида ключ и значение. Данный массив будет загружен в глобальные переменные и будет доступен при выполнении сценария в объекте КонтекстСохраняемый."));
		МассивСтрок.Добавить("");
		
		//Сервис
		МассивСтрок.Добавить("## " + Элементы.СтраницаСервисОсновные.Заголовок);
		МассивСтрок.Добавить("");
		ДобавитьОписаниеСтраницыВНастройкиЗапуска(Элементы.СтраницаСервисОсновные, МассивСтрок, 0, ИменаПолейJson);
		
		МассивСтрок.Добавить("## " + Элементы.СтраницаКлиентыТестирования.Заголовок);
		МассивСтрок.Добавить("");
		ДобавитьОписаниеСтраницыВНастройкиЗапуска(Элементы.СтраницаКлиентыТестирования, МассивСтрок, 0, ИменаПолейJson);
		
		МассивСтрок.Добавить("## " + Элементы.СтраницаВыполнениеСценариев.Заголовок);
		МассивСтрок.Добавить("");
		ДобавитьОписаниеСтраницыВНастройкиЗапуска(Элементы.СтраницаВыполнениеСценариев, МассивСтрок, 0, ИменаПолейJson);
		
		МассивСтрок.Добавить("## " + Элементы.СтраницаСкриншоты.Заголовок);
		МассивСтрок.Добавить("");
		ДобавитьОписаниеСтраницыВНастройкиЗапуска(Элементы.СтраницаСкриншоты, МассивСтрок, 0, ИменаПолейJson);
		
		МассивСтрок.Добавить("## " + Элементы.СтраницаОтчетыОЗапуске.Заголовок);
		МассивСтрок.Добавить("");
		ДобавитьОписаниеСтраницыВНастройкиЗапуска(Элементы.СтраницаОтчетыОЗапуске, МассивСтрок, 0, ИменаПолейJson);
		
		МассивСтрок.Добавить("## " + Элементы.СтраницаАвтоИнструкции.Заголовок);
		МассивСтрок.Добавить("");
		ДобавитьОписаниеСтраницыВНастройкиЗапуска(Элементы.СтраницаАвтоИнструкции, МассивСтрок, 0, ИменаПолейJson);
		
		МассивСтрок.Добавить("## " + Элементы.СтраницаНастройкиVanessaEditor.Заголовок);
		МассивСтрок.Добавить("");
		ДобавитьОписаниеСтраницыВНастройкиЗапуска(Элементы.СтраницаНастройкиVanessaEditor, МассивСтрок, 0, ИменаПолейJson);
		
		//Библиотеки
		МассивСтрок.Добавить("## " + Элементы.ГруппаКаталогиБиблиотек.Заголовок);
		МассивСтрок.Добавить("");
		ДобавитьОписаниеСтраницыВНастройкиЗапуска(Элементы.ГруппаКаталогиБиблиотек, МассивСтрок, 0, ИменаПолейJson);
		
		//Клиенты тестирования
		МассивСтрок.Добавить("## " + Элементы.ГруппаНесколькоКлиентовТестирования.Заголовок);
		МассивСтрок.Добавить("");
		ДобавитьОписаниеСтраницыВНастройкиЗапуска(Элементы.ГруппаНесколькоКлиентовТестирования, МассивСтрок, 0, ИменаПолейJson);
		
		Путь = ДополнитьСлешВПуть(ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "docs") + "JsonParams";
		Если НЕ ФайлСуществуетКомандаСистемы(Путь) Тогда
			СоздатьКаталогКомандаСистемы(Путь);
		КонецЕсли;	 
		
		ИмяФайла = ДополнитьСлешВПуть(Путь) + "JsonParams" + ВРег(Объект.ЯзыкГенератораGherkin) + ".md";
		
		ЗТ = Новый ЗаписьТекста(ИмяФайла,"UTF-8",, Ложь); 
		ЗТ.ЗаписатьСтроку(МассивВСтроку(МассивСтрок, Символы.ПС)); 
		ЗТ.Закрыть();
	Исключение
		ТекстИсключения = "Каждый новый реквизит надо прописать в:
	    |форма ОбщегоНазначенияVA - КоллекцияКомандЗапуска()
	    |форма УправляемаяФорма - ИменаКлючейОбщихНастроек()
		|модуль объекта - СтруктураОбщихНастроек()" + Символы.ПС + ОписаниеОшибки();
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКешMp3ВКаталогеПоТекущемуКешуMp3(Команда)
	
	#Если НЕ ВебКлиент Тогда
	
	СообщитьПользователю(Локализовать("Кеш mp3 для обновления надо указать в поле КаталогФич."));

	
	ДанныеКешОзвучкиИнтерактивнойСправки = Неопределено;
	ПрочитатьДанныеКешОзвучкиИнтерактивнойСправки();
	КешИзКоторогоНадоСкопировать = ДанныеКешОзвучкиИнтерактивнойСправки;
	
	ДанныеКешОзвучкиИнтерактивнойСправки = Неопределено;
	ПрочитатьДанныеКешОзвучкиИнтерактивнойСправки(Объект.КаталогФич);
	КешКоторыйНадоДополнить = ДанныеКешОзвучкиИнтерактивнойСправки;
	
	ИмяФайлаТест = Неопределено;
	Для Каждого Элем Из КешКоторыйНадоДополнить Цикл
		ИмяФайлаТест = Элем.Значение.FileName;
		ФайлКаталог1 = Новый Файл(ИмяФайлаТест);
		ФайлКаталог2 = Новый Файл(ФайлКаталог1.Путь);
		ФайлКаталог3 = Новый Файл(ФайлКаталог2.Путь);
		Прервать;
	КонецЦикла;
	
	Если ИмяФайлаТест = Неопределено Тогда
		ВызватьИсключение Локализовать("В кеше для дополнения нет ни одного файла.");
	КонецЕсли; 
	
	ПутьКJsonДляЗаписи = ДополнитьСлешВПуть(ФайлКаталог3.ПолноеИмя) + "data.json";
	
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайлаТест) Тогда
		ВызватьИсключение Локализовать(ПодставитьПараметрыВСтроку("Файл <%1> не существует.", ИмяФайлаТест));
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайлаТест);
	КаталогMp3 = Файл.Путь;
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;
	НайтиФайлыКомандаСистемы(КаталогMp3, СписокКаталогов, СписокФайлов, Истина, "*.mp3");
	МаксНомер = -1;
	Для Каждого Элем Из СписокФайлов Цикл
		ТекФайл = Элем.Значение;
		ТекИмя = ТекФайл.ИмяБезРасширения;
		Если Число(ТекИмя) > МаксНомер Тогда
			МаксНомер = Число(ТекИмя);
		КонецЕсли;	
	КонецЦикла;
	Если МаксНомер = -1 Тогда
		ВызватьИсключение Локализовать("В кеше для дополнения нет ни одного файла.");
	КонецЕсли;	
	
	МассивИменФайловДляОбработки = НайтиФичаФайлыУроковДляОбработки();
	Для Каждого ИмяФайла Из МассивИменФайловДляОбработки Цикл
		Сообщить(ИмяФайла);
		
		ДанныеОшибки = Неопределено;
		Если НЕ ВКешЕстьВсеMp3ДляДаннойФичи(ДанныеКешОзвучкиИнтерактивнойСправки, ИмяФайла) Тогда
			Текст = Новый ЧтениеТекста;
			Текст.Открыть(ИмяФайла, "UTF-8");
			ТекстФайла = Текст.Прочитать();
			Текст.Закрыть();
			
			МассивСтрок = _СтрРазделить(ТекстФайла, Символы.ПС);
			КолШаговДляОзвучки = 0;
			Для Каждого Стр Из МассивСтрок Цикл
				Стр = СокрЛП(Стр);
				Если Лев(Стр, 1) = "*" Тогда
					КолШаговДляОзвучки = КолШаговДляОзвучки + 1;
				КонецЕсли;	 
			КонецЦикла;	 
			НомерШага = 0;
			ДанныеКэшMp3 = Неопределено;
			Для Каждого Стр Из МассивСтрок Цикл
				Стр = СокрЛП(Стр);
				Если Лев(Стр, 1) = "*" Тогда
					НомерШага = НомерШага + 1;
					
					ТекстШага = СокрЛ(Сред(Стр, 2));
					
					Если КешИзКоторогоНадоСкопировать[ТекстШага] <> Неопределено И КешКоторыйНадоДополнить[ТекстШага] = Неопределено Тогда
						ДанныеШага = КешИзКоторогоНадоСкопировать[ТекстШага];
						ИмяMp3 = ДанныеШага.FileName;
						
						Если НЕ ФайлСуществуетКомандаСистемы(ИмяMp3) Тогда
							Сообщить(ПодставитьПараметрыВСтроку(Локализовать("Не найден полный путь к файлу кеша: <%1>."), ИмяMp3));
							Продолжить;
						КонецЕсли;	
						
						МаксНомер = МаксНомер + 1;
						
						ФайлИмяMp3 = Новый Файл(ИмяMp3);
						
						НовоеИмяФайла = ДополнитьСлешВПуть(КаталогMp3) + ДобавитьНулей(МаксНомер,8) + ".mp3";
						
						ФайлКаталог1 = Новый Файл(НовоеИмяФайла);
						ФайлКаталог2 = Новый Файл(ФайлКаталог1.Путь);
						ФайлКаталог3 = Новый Файл(ФайлКаталог2.Путь);
						ДанныеШага.Вставить("FileName", ДополнитьСлешВПуть(ФайлКаталог2.Имя) + ФайлКаталог1.Имя);
						
						КешКоторыйНадоДополнить.Вставить(ТекстШага, ДанныеШага);
						КопироватьФайлКомандаСистемы(ИмяMp3, НовоеИмяФайла);
						
					КонецЕсли;	
					
				КонецЕсли;	 
			КонецЦикла;	 
		КонецЕсли;	 
	КонецЦикла;	
	
	Результат = Новый Структура;
	Результат.Вставить("data", Новый Массив);
	Для Каждого Элем Из КешКоторыйНадоДополнить Цикл
		Результат.data.Добавить(Элем.Значение);
	КонецЦикла;	
	
	ЗаписьJson = Новый ЗаписьJson();
	ЗаписьJson.ОткрытьФайл(ПутьКJsonДляЗаписи);
	ЗаписатьJSON(ЗаписьJson, Результат); 
	ЗаписьJson.Закрыть();
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьMp3ПоКаталогуФичИнтерактивнойСправки(Команда)
	
	ПрочитатьДанныеКешОзвучкиИнтерактивнойСправки();
	
	МассивИменФайловДляОбработки = НайтиФичаФайлыУроковДляОбработки();
	Для Каждого ИмяФайла Из МассивИменФайловДляОбработки Цикл
		Сообщить(ИмяФайла);
		
		ДанныеОшибки = Неопределено;
		Если НЕ ВКешЕстьВсеMp3ДляДаннойФичи(ДанныеКешОзвучкиИнтерактивнойСправки, ИмяФайла) Тогда
			Если НЕ СгенерироватьMP3ДляИнтерактивнойСправки(ИмяФайла, ДанныеОшибки) Тогда
				ВызватьИсключение Локализовать("Ошибка создания mp3 по каталогу фич.");
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьПодключениеSikuliXСервера(Команда)
	Если SikuliXСеверЗапущен <> Истина Тогда
		СообщитьПользователю(Локализовать("Не найдено подключение SikuliX сервера."));
		Возврат;
	КонецЕсли;	 
	ОстановитьSikuliXСервер();
	SikuliXСеверЗапущен = Ложь;
	СообщитьПользователю(Локализовать("Подключение SikuliX сервера сброшено."));
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьТаблоПеременных(Команда)
	Элементы.ГруппаПросмотрПеременных.Видимость = НЕ Элементы.ГруппаПросмотрПеременных.Видимость;
	
	ОбновитьЗначенияВТаблоПеременных();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнструментПодготовкаИЗагрузкаДанных(Команда)
	МодульПодготовкаИЗагрузкаДанных = МодульПодготовкаИЗагрузкаДанных();
	МодульПодготовкаИЗагрузкаДанных.Открыть();
	ОткрываласьФормаСозданияТестовыхДанных = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблоПеременных(Команда)
	ОбновитьЗначенияВТаблоПеременных();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьТаблоПеременных(Команда)
	Элементы.ГруппаПросмотрПеременных.Видимость = НЕ Элементы.ГруппаПросмотрПеременных.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура КаталогиСкриптовSikuliXПоУмолчанию(Команда)
	
	Объект.КаталогиСкриптовSikuliX = ОбъединитьПути(Объект.КаталогИнструментов, "tools", "sikuli");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСервисныеУтилиты(Команда)
	
	ТекстВопроса = Локализовать("Скачать и установить необходимы сервисные утилиты для шагов SikuliX?");
	ЗаголовокОкна = Локализовать("Сервисные утилиты");
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСервисныеУтилитыЗавершение", ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, ЗаголовокОкна);
		
КонецПроцедуры

&НаКлиенте
Процедура ТестПодсветкиКликаМышки(Команда)
	ВнешняяКомпонентаДляСкриншотов.НачатьВызовПоказатьНажатиеМыши(
		ОписаниеПустогоОбработчика(3),
		Объект.ЦветПодсветкиКликаМышкиVanessaExt,
		Объект.РадиусПодсветкиКликаМышкиVanessaExt,
		Объект.ТолщинаПодсветкиКликаМышкиVanessaExt,
		Объект.ДлительностьПодсветкиКликаМышкиVanessaExt,
		Объект.ПрозрачностьПодсветкиКликаМышкиVanessaExt,
		0
	);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТиповыеПрофилиЦветов(Команда)
	ЗаполнитьТиповыеПрофилиЦветовСервер();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВидимостиКнопокПанелиРедактора(Команда)
	ДанныеКнопок = НастройкаВидимостиКнопокПанелиРедактораСервер();
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДанныеКнопок", ДанныеКнопок);
	ОткрытьФорму(ПолучитьИмяОбработкиVA() + ".Форма.НастройкаВидимостиКнопокКоманднойПанелиРедактора", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorПоказыватьРазличияВРедактореОтдельно(Команда)
	Объект.ПоказыватьРазличияВРедактореОтдельно = НЕ Объект.ПоказыватьРазличияВРедактореОтдельно;
	ПоказыватьРазличияВРедактореОтдельноПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorПриГенерацииШаговИскатьЭлементыФормыПоИмени(Команда)
	Объект.ИскатьЭлементыФормыПоИмени = НЕ Объект.ИскатьЭлементыФормыПоИмени;
	ИскатьЭлементыФормыПоИмениПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьРазмерОкнаКлиентаТестирования(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МестоположениеВнешнейКомпонентыДляСкриншотов", МестоположениеВнешнейКомпонентыДляСкриншотов);
	ПараметрыФормы.Вставить("ДескрипторОсновногоОкнаТекущегоКлиентаТестирования", ДескрипторОсновногоОкнаТекущегоКлиентаТестирования);
	ПараметрыФормы.Вставить("PIDТекущегоКлиентаТестирования", PIDТекущегоКлиентаТестирования);
	ПараметрыФормы.Вставить("ЭтоLinux", ЭтоLinux);
	
	ОткрытьФорму(ПолучитьИмяОбработкиVA() + ".Форма.УправлениеОкномКлиентаТестирования", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗапускаChrome(Команда)
	
	МодульРаботаСБраузером().НайтиБраузерChrome(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗапускаChromeСОтладкой(Команда)
	
	МодульРаботаСБраузером().НайтиБраузерChrome(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВVanessaEditor(Команда)

	Если НЕ ВозможноИспользованиеVanessaEditor И НЕ ВыполнениеСценариевБезОткрытияФормы Тогда
		СообщитьПользователю(Локализовать(
			"Использование Vanessa editor в данном окружении (версия платформы и режим совместимости) невозможно."));
		Возврат;
	КонецЕсли;	
	
	Если НЕ РедакторБылПроинициализирован Тогда
		Если НЕ ЗначениеЗаполнено(VanessaEditorМакет) Тогда
			ИнициализироватьVanessaEditorСервер(Ложь, ИнициализироватьVanessaEditorНаКлиенте);
		КонецЕсли;	
		ИнициализироватьVanessaEditorКлиент();
		ПодключитьОбработчикОжидания("ПерейтиВVanessaEditorПродолжение", 0.1, Истина);
		Возврат;
	КонецЕсли;	 
	
	ПерейтиВVanessaEditorПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеГруппыВНастройках(Команда)
	РазвернутьСвернутьГруппыСтраницыДляРаботыТестов(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПереводаЭлементовФормы(Команда)
	
	ИменаЭлементовСРасширеннойПодсказкой = Неопределено;
	Если ОбъектКонтекстСохраняемый.Свойство("ИменаЭлементовСРасширеннойПодсказкой") Тогда
		ИменаЭлементовСРасширеннойПодсказкой = ОбъектКонтекстСохраняемый.ИменаЭлементовСРасширеннойПодсказкой;
	КонецЕсли;	
	
	Ошибки = ПроверкаПереводаЭлементовФормыСлужебный(ИменаЭлементовСРасширеннойПодсказкой);
	Если Ошибки.Количество() > 0 Тогда
		Стр = _СтрСоединить(Ошибки, Символы.ПС);
		ВызватьИсключение Локализовать("В английском интерфейсе в элементах формы не должно встречаться русских букв.")
		+ Символы.ПС + Локализовать("Найденные проблемы:") + Символы.ПС + Стр;
	Иначе
		СообщитьПользователю("Ok.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаУникальностиЗаголовков(Команда)
	Ошибки = ПроверкаУникальностиЗаголовковЭлементов();
	Если Ошибки.Количество() > 0 Тогда
		Стр = _СтрСоединить(Ошибки, Символы.ПС);
		ВызватьИсключение Стр;
	Иначе
		СообщитьПользователю("Ok.");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоискСообщенийПользователюДляКоторыхНеУказанПеревод(Команда)
	
	Строки = Новый Соответствие;
	
	СтрокиПоиска = Новый Массив;
	СтрокиПоиска.Добавить("Локализовать(""");
	СтрокиПоиска.Добавить("ПолучитьТекстСообщенияПользователю(""");
	
	Путь = Объект.КаталогИнструментов;
	
	Если НЕ ЗначениеЗаполнено(Путь) Тогда
		ВызватьИсключение Локализовать("Не заполнен служебный параметр КаталогИнструментов.");
	КонецЕсли;	
	
	Файлы = НайтиФайлы(Путь, "*.bsl", Истина);
	Для Каждого Файл Из Файлы Цикл
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(Файл.ПолноеИмя, "UTF-8");
		ТекстФайла = Текст.Прочитать();
		Текст.Закрыть();
		
		Нашли = Ложь;
		МассивСтрок = _СтрРазделить(ТекстФайла, Символы.ПС);
		Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
			Стр = МассивСтрок[Сч];
			Для Каждого СтрокаПоиска Из СтрокиПоиска Цикл
				Пока Найти(Стр, СтрокаПоиска) > 0 Цикл
					Поз = Найти(Стр, СтрокаПоиска);
					Нашли = Истина;
					Стр = Сред(Стр, Поз + СтрДлина(СтрокаПоиска));
					Поз = Найти(Стр, """)");
					Стр = Лев(Стр, Поз - 1);
					Если Стр <> """" Тогда
						Строки.Вставить(СокрЛП(Стр), Истина);
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;	
		
	КонецЦикла;
	
	ПодключитьБиблиотекуСообщенийПользователю(Истина);
	ДанныеПеревода = МодульСообщенийПользователю.ДанныеПереводаСообщенийЯзыка(Объект.ВерсияПоставки, ЭтаФорма, "en");
	
	Проблемы = Новый СписокЗначений;
	Для Каждого Элем Из Строки Цикл
		Если ДанныеПеревода[Элем.Ключ] = Неопределено Тогда
			Проблемы.Добавить(Элем.Ключ);
		КонецЕсли;	
	КонецЦикла;	
	
	Если Проблемы.Количество() > 0 Тогда
		Проблемы.СортироватьПоЗначению();
		СообщитьПользователю(Локализовать("Не найден перевод для строк:")
			+ Символы.ПС + _СтрСоединить(Проблемы.ВыгрузитьЗначения(), Символы.ПС));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВДеревоШагов(Команда)
	ПерейтиВДеревоШаговОбработчик();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыделенныеСтроки(Команда)
	ВыполнитьВыделенныеСтрокиОбработчик();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСлужебныеПеременные(Команда)
	ПоказыватьСлужебныеПеременные = НЕ ПоказыватьСлужебныеПеременные;
	ОбновитьЗначенияВТаблоПеременных();
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorОчиститьРаскраскуСтрок(Команда)
	VanessaEditorОчиститьРаскраскуСтрокОбработчик();
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorПоказатьКраткуюИнформациюОШаге(Команда)
	
	ЭкземплярVanessaEditor = ПолучитьVanessaEditor(); 
	ПозицияVanessaEditor = ЭкземплярVanessaEditor.getPosition();
	ТекНомерСтроки = ПозицияVanessaEditor.lineNumber;
	ТекстСтроки = СокрЛ(ЭкземплярVanessaEditor.getLineContent(ТекНомерСтроки));
	ДанныеШагаИзСтроки = МодульПарсерФич().ПолучитьДанныеШагаИзСтроки(ТекстСтроки);
	МодульРедакторТекста().ПоказатьПодробнуюИнформациюОШаге("#info:" + ДанныеШагаИзСтроки.СнипетБезПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorЗакрытьВкладку(Команда)
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	
	
	VanessaTabs.close();
КонецПроцедуры  

&НаКлиенте
Процедура VanessaEditorПерезапуститьКакМенеджерТестирования(Команда) 
	
	Если НЕ Объект.РежимСамотестирования Тогда

		Отказ = Ложь;
		
		ДопПараметрыОповещения = Новый Структура;
		ДопПараметрыОповещения.Вставить("ВызовЧерезПерезапуститьКакМенеджерТестирования", Истина);
		
		ВопросПередЗакрытиемФормы(Отказ, ДопПараметрыОповещения);
		Если Не Отказ Тогда
			ПерезапускВРежимеТестМенеджер();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorPreviousDiff(Команда)
	Попытка
		VanessaTabs.previousDiff();
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorNextDiff(Команда)
	Попытка
		VanessaTabs.nextDiff();
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorСтандартныеКоманды(Команда)
	Если VanessaTabs.current = Неопределено Тогда
		Возврат;
	КонецЕсли;	 

	Соответствие = New Соответствие;
	Соответствие.Вставить("ClipboardCut", "editor.action.clipboardCutAction");
	Соответствие.Вставить("ClipboardCopy", "editor.action.clipboardCopyAction");
	Соответствие.Вставить("ClipboardPaste", "editor.action.clipboardPasteAction");
	Соответствие.Вставить("EditFind", "actions.find");
	Соответствие.Вставить("EditFindNext", "editor.action.nextMatchFindAction");
	Соответствие.Вставить("EditFindPrevious", "editor.action.previousMatchFindAction");
	Соответствие.Вставить("EditUndo", "undo");
	Соответствие.Вставить("EditRedo", "redo");
	Соответствие.Вставить("EditReplace", "editor.action.startFindReplaceAction");
	Соответствие.Вставить("ViewFoldAll", "editor.foldAll");
	Соответствие.Вставить("ViewUnfold1", "editor.foldLevel1");
	Соответствие.Вставить("ViewUnfold2", "editor.foldLevel2");
	Соответствие.Вставить("ViewUnfold3", "editor.foldLevel3");
	Соответствие.Вставить("ViewUnfold4", "editor.foldLevel4");
	Соответствие.Вставить("ViewUnfold5", "editor.foldLevel5");
	Соответствие.Вставить("ViewUnfold6", "editor.foldLevel6");
	Соответствие.Вставить("ViewUnfold7", "editor.foldLevel7");
	Соответствие.Вставить("ViewUnfoldAll", "editor.unfoldAll");
	Соответствие.Вставить("ViewZoomIn", "editor.action.fontZoomIn");
	Соответствие.Вставить("ViewZoomOut", "editor.action.fontZoomOut");
	Соответствие.Вставить("ViewZoomReset", "editor.action.fontZoomReset");
	ИмяКоманды = СтрЗаменить(Команда.Имя, "VanessaEditor", "");
	
	ЭкземплярVanessaEditor = ПолучитьVanessaEditor(); 
	ЭкземплярVanessaEditor.focus();
	
	Если Найти(Соответствие[ИмяКоманды], "editor.foldLevel") > 0 Тогда
		ЭкземплярVanessaEditor.trigger("", "editor.unfoldAll");
	КонецЕсли;	 
	
	ЭкземплярVanessaEditor.trigger("", Соответствие[ИмяКоманды]);
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorContextMenu(Команда)
	
	VanessaTabs.showContextMenu();
	
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorИспользоватьДанныеТекущейФормыПриПодбореШагов(Команда)
	Объект.ИспользоватьДанныеТекущейФормыПриПодбореШагов = НЕ Объект.ИспользоватьДанныеТекущейФормыПриПодбореШагов;
	Элементы.VanessaEditorИспользоватьДанныеТекущейФормыПриПодбореШагов.Пометка = Объект.ИспользоватьДанныеТекущейФормыПриПодбореШагов;
	ИспользоватьДанныеТекущейФормыПриПодбореШаговПриИзмененииОбработчик();
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorСоздатьНовыйСценарий(Команда)
	VanessaTabs.edit("", ".feature", "memory:" + Строка(Новый УникальныйИдентификатор), "Новый сценарий.feature");
	МодульРедакторТекста().ДействияПриСозданииВкладки();
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("startLineNumber", 1);
	Соответствие.Вставить("startColumn", 1);
	Соответствие.Вставить("endLineNumber", 1);
	Соответствие.Вставить("endColumn", 1);
	ПолучитьVanessaEditor().insertText(МодульРедакторТекста().ТекстНовогоСценария(), ЗаписатьОбъектJSON(Соответствие));
	
	АктивизироватьСтраницуЗапускТестов();
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorПоказыватьСтрокиПодсценариев(Команда)
	
	Объект.ПоказыватьСтрокиПодсценариевVanessaEditor = НЕ Объект.ПоказыватьСтрокиПодсценариевVanessaEditor;
	VanessaEditorПоказыватьСтрокиПодсценариевПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorПоказыватьМиниатюруКода(Команда)
	Объект.ПоказыватьМиниатюруКода = НЕ Объект.ПоказыватьМиниатюруКода;
	VanessaEditorПоказыватьМиниатюруКодаОбработчик();
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorПоказыватьЗначенияПеременныхВСтрокахРедактора(Команда)
	Объект.ПоказыватьЗначенияПеременныхВСтрокахРедактора = НЕ Объект.ПоказыватьЗначенияПеременныхВСтрокахРедактора;
	VanessaEditorПоказыватьЗначенияПеременныхВСтрокахРедактораОбработчик()
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorПроверкаСинтаксисаВРедакторе(Команда)
	Объект.ПроверкаСинтаксисаВРедакторе = НЕ Объект.ПроверкаСинтаксисаВРедакторе;
	VanessaEditorПроверкаСинтаксисаВРедактореОбработчик();
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorСохранитьФайл(Команда)
	VanessaEditorСохранитьФайлОбработчик();
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorСохранитьФайлКак(Команда)
	ЗапроситьИмяФайлаПриСохраненииФайлаВРедакторе = Истина;
	VanessaEditorСохранитьФайлОбработчик();
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorSetBreakPoint(Команда)
	ОбработатьУстановкуСнятиеБрейкпоинта();
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorRemoveBreakPoints(Команда)
	Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
		Возврат;
	КонецЕсли;	 
	
	ДанныеВкладкиРедактора = ДанныеВкладкиРедактора();
	
	ДанныеВкладкиРедактора.БрейкпоинтыVanessaEditor.Очистить();
	ДанныеВкладкиРедактора.БрейкпоинтыVanessaEditorВиджеты.Очистить();
	МодульРедакторТекста().ОтрисоватьБрейкпоинтыVanessaEditor();
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorПоказатьСписокТочекОстанова(Команда)
	Если VanessaTabs = Неопределено ИЛИ VanessaTabs.current = Неопределено ИЛИ НЕ ЭтоВкладкаEdit(VanessaTabs.current) Тогда
		Возврат;
	КонецЕсли;	 
	
	ДанныеВкладкиРедактора = ДанныеВкладкиРедактора();
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("БрейкпоинтыVanessaEditor", ДанныеВкладкиРедактора.БрейкпоинтыVanessaEditor);
	
	ЭкземплярVanessaEditor = ПолучитьVanessaEditor();
	Для Каждого Элем Из ДанныеВкладкиРедактора.БрейкпоинтыVanessaEditor Цикл
		Элем.Вставить("ТекстСтроки", ЭкземплярVanessaEditor.getLineContent(Элем.НомерСтроки, Элем.ИдВиджета));
		Если НЕ ПустаяСтрока(Элем.ИдВиджета) Тогда
			Элем.Вставить("РеальныйНомерСтроки", ЭкземплярVanessaEditor.getWidgetLine(Элем.ИдВиджета));
		Иначе	
			Элем.Вставить("РеальныйНомерСтроки", Элем.НомерСтроки);
		КонецЕсли;	 
	КонецЦикла;	 
	
	ОткрытьФорму(ПолучитьИмяОбработкиVA() + ".Форма.СписокТочекОстанова", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorТема1c(Команда)
	Объект.ТемаРедактораVanessaEditor = "1c";
	МодульРедакторТекста().УстановитьТемуVanessaEditor();
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorТема_vs(Команда)
	Объект.ТемаРедактораVanessaEditor = "vs";
	МодульРедакторТекста().УстановитьТемуVanessaEditor();
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorТема_vsdark(Команда)
	Объект.ТемаРедактораVanessaEditor = "vs-dark";
	МодульРедакторТекста().УстановитьТемуVanessaEditor();
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorТема_hcblack(Команда)
	Объект.ТемаРедактораVanessaEditor = "hc-black";
	МодульРедакторТекста().УстановитьТемуVanessaEditor();
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorWelcome()
	
	Если VanessaTabs = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МодульРедакторТекста().ПоказатьСтраницуWelcome(НедавноЗагруженныеФичи);
	
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorНастройкиРедактора(Команда)
	
	Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
		ПоказатьПредупреждение(Неопределено, "Для управления настройками редактора откройте в редакторе сценарий");
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ИмяФормыНастроекРедактора = ПолучитьИмяОбработкиVA() + ".Форма.НастройкаРедактора";
	ОписаниеОповещения = Новый ОписаниеОповещения("VanessaEditorПолученыНастройки", ЭтаФорма);
	ОткрытьФорму(ИмяФормыНастроекРедактора, ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorПолученыНастройки(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 

	Если ТипЗнч(РезультатЗакрытия) = Тип("Строка") Тогда
		Сообщить(РезультатЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЭлементИзДереваКаталогов(Команда)
	
	ДревоФайлаФичВыбор(Неопределено, Элементы.ДревоФайлаФич.ТекущаяСтрока, Неопределено, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьStyleHTML(Команда)
	
	ТекстСтилей = ПрочитатьСтилиHTMLИнструкции();
	ФайлДокумента = Новый Файл(Объект.СтилиHTMLИнструкции);
	VanessaTabs.VanessaTabs.edit(
		ТекстСтилей, 
		ФайлДокумента.ПолноеИмя, 
		ФайлДокумента.ПолноеИмя, 
		ФайлДокумента.ИмяБезРасширения, 
		0, 
		Ложь, 
		Истина);
	
	ЭтаФорма.ТекущийЭлемент = Элементы.VanessaEditor;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСтандартныйМакетHTML(Команда)
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораКаталога.Фильтр = "Текстовый документ (*.css)|*.css";
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""СохранитьСтандартныйМакетHTMLЗавершение"", ЭтаФорма)"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВключенияПоказаСправкиПоЭлементуПодКурсоромМышки(Команда)
	
	Если Объект.ПодключатьГорячуюКлавишуДляПолученияСправкиОбЭлементе Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.ИспользоватьКомпонентуVanessaExt Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПодключатьГорячуюКлавишуДляПолученияСправкиОбЭлементе = Истина;
	ПодключатьГорячуюКлавишуДляПолученияСправкиОбЭлементе(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийДеревоТестов

&НаКлиенте
Процедура ФункциональностьЗакладкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если ТекущаяСтраница = Элементы.ГруппаЗапускТестов Тогда
			НазначитьГорячиеКлавишиКнопкамКоманднойПанелиРедактора(Истина);
		Иначе	
			НазначитьГорячиеКлавишиКнопкамКоманднойПанелиРедактора(Ложь);
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОбработкаДвойногоКликаПоДеревуШагов(СтандартнаяОбработка, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если Копирование Тогда // F9
		ОбработатьУстановкуСнятиеБрейкпоинта();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестовПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	глПараметрыПеретаскивания = ПараметрыПеретаскивания;
	ПодключитьОбработчикОжидания("ДеревоТестовПеретаскиваниеОбработчик", 0.1, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийТаблоПеременных

&НаКлиенте
Процедура ТаблоПеременныхЗначениеПриИзменении(Элемент)
	Если Элементы.ТаблоПеременных.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.ТаблоПеременных.ТекущиеДанные.ИсточникДанных = "Контекст" Тогда
		Имя      = Элементы.ТаблоПеременных.ТекущиеДанные.Имя;
		Значение = Элементы.ТаблоПеременных.ТекущиеДанные.Значение;
		Тип = Элементы.ТаблоПеременных.ТекущиеДанные.Тип;
		
		Значение = ПреобразоватьЗначениеИзТаблоПеременныхКТипу(Значение, Тип);
		
		ТекЗначение = ОбъектКонтекст[Имя];
		
		ОбъектКонтекст.Вставить(Имя, Значение);
		
		СообщитьПользователю(ПодставитьПараметрыВСтроку(
			Локализовать("Значение переменной <%1> изменено с <%2> на <%3>."),
			Имя,
			ТекЗначение,
			Значение
		));
	ИначеЕсли Элементы.ТаблоПеременных.ТекущиеДанные.ИсточникДанных = "КонтекстСохраняемый" Тогда
		Имя      = Элементы.ТаблоПеременных.ТекущиеДанные.Имя;
		Значение = Элементы.ТаблоПеременных.ТекущиеДанные.Значение;
		Тип = Элементы.ТаблоПеременных.ТекущиеДанные.Тип;
		
		Значение = ПреобразоватьЗначениеИзТаблоПеременныхКТипу(Значение, Тип);
		
		ТекЗначение = ОбъектКонтекстСохраняемый[Имя];
		
		ОбъектКонтекстСохраняемый.Вставить(Имя, Значение);
		
		СообщитьПользователю(ПодставитьПараметрыВСтроку(
			Локализовать("Значение глобальной переменной <%1> изменено с <%2> на <%3>."),
			Имя,
			ТекЗначение,
			Значение
		));
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблоПеременныхПередУдалением(Элемент, Отказ)
	Если Элементы.ТаблоПеременных.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.ТаблоПеременных.ТекущиеДанные.СлужебнаяСтрока Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	Если Элементы.ТаблоПеременных.ТекущиеДанные.ИсточникДанных = "Контекст" Тогда
		Имя = Элементы.ТаблоПеременных.ТекущиеДанные.Имя;
		ОбъектКонтекст.Вставить(Имя, Неопределено);
		ОбъектКонтекст.Удалить(Имя);
		
		СообщитьПользователю(ПодставитьПараметрыВСтроку(
			Локализовать("Переменная <%1> удалена."),
			Имя
		));
	ИначеЕсли Элементы.ТаблоПеременных.ТекущиеДанные.ИсточникДанных = "КонтекстСохраняемый" Тогда
		Имя = Элементы.ТаблоПеременных.ТекущиеДанные.Имя;
		ОбъектКонтекстСохраняемый.Вставить(Имя, Неопределено);
		ОбъектКонтекстСохраняемый.Удалить(Имя);
		
		СообщитьПользователю(ПодставитьПараметрыВСтроку(
			Локализовать("Глобальная переменная <%1> удалена."),
			Имя
		));
	КонецЕсли;	 

КонецПроцедуры

&НаКлиенте
Процедура ТаблоПеременныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблоПеременныхПередНачаломИзменения(Элемент, Отказ)
	Если Элементы.ТаблоПеременных.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.ТаблоПеременных.ТекущиеДанные.СлужебнаяСтрока Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблоПеременныхПриАктивизацииСтроки(Элемент)
	
	ШагПроверкиЗначенияПеременной = "";
	
	ТекущиеДанные = Элементы.ТаблоПеременных.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Имя) И ЗначениеЗаполнено(ТекущиеДанные.Значение) Тогда
		Если ТекущиеДанные.Тип = "Строка" Тогда
			Если СтрокаРодитель.СлужебнаяСтрока Тогда
				ТекстШага = "Тогда переменная '%1' имеет значение '%2'";
			Иначе	
				ТекстШага = "Тогда выражение внутреннего языка '" + ТекущиеДанные.ИсточникДанных + ".%1' имеет значение '%2'";
			КонецЕсли;	
			
			ЗначениеПеременной = СтрЗаменить(ТекущиеДанные.Значение, "'", "\'");
			ЗначениеПеременной = СтрЗаменить(ЗначениеПеременной, "|", "\|");
			ШагПроверкиЗначенияПеременной = ПодставитьПараметрыВСтроку(ТекстШага, ТаблоПеременныхДополнитьИмяПеременной(ТекущиеДанные.Имя, ТекущиеДанные), ЗначениеПеременной);
			
		ИначеЕсли ТекущиеДанные.Тип = "Булево" Тогда
			ТекстШага = "Тогда выражение внутреннего языка '%1' Истинно";
			Если ТекущиеДанные.Значение Тогда
				ЗначениеПараметра = ТекущиеДанные.ИсточникДанных + "." + ТаблоПеременныхДополнитьИмяПеременной(ТекущиеДанные.Имя, ТекущиеДанные);
			Иначе	
				ЗначениеПараметра = "НЕ " + ТекущиеДанные.ИсточникДанных + "." + ТаблоПеременныхДополнитьИмяПеременной(ТекущиеДанные.Имя, ТекущиеДанные);
			КонецЕсли;	
			ШагПроверкиЗначенияПеременной = ПодставитьПараметрыВСтроку(ТекстШага, ЗначениеПараметра);
			
		ИначеЕсли ТекущиеДанные.Тип = "Число" Тогда
			Если СтрокаРодитель.СлужебнаяСтрока Тогда
				ТекстШага = "Тогда переменная '%1' имеет значение %2";
			Иначе	
				ТекстШага = "Тогда выражение внутреннего языка '" + ТекущиеДанные.ИсточникДанных + ".%1' имеет значение %2";
			КонецЕсли;	
			
			ЗначениеПеременной = XMLСтрока(ТекущиеДанные.Значение);
			ШагПроверкиЗначенияПеременной = ПодставитьПараметрыВСтроку(ТекстШага, ТаблоПеременныхДополнитьИмяПеременной(ТекущиеДанные.Имя, ТекущиеДанные), ЗначениеПеременной);
			
		ИначеЕсли ТекущиеДанные.Тип = "Массив" ИЛИ ТекущиеДанные.Тип = "Структура" ИЛИ ТекущиеДанные.Тип = "Соответствие" Тогда
			ТекстШага = "Тогда выражение внутреннего языка '" + ТекущиеДанные.ИсточникДанных + ".%1.Количество()' имеет значение %2";
			ЗначениеПеременной = XMLСтрока(ТекущиеДанные.ПолучитьЭлементы().Количество());
			ШагПроверкиЗначенияПеременной = ПодставитьПараметрыВСтроку(ТекстШага, ТаблоПеременныхДополнитьИмяПеременной(ТекущиеДанные.Имя, ТекущиеДанные), ЗначениеПеременной);
			
		Иначе
			ЗначениеПеременной = XMLСтрока(ТекущиеДанные.Значение);
			ШагПроверкиЗначенияПеременной = ПодставитьПараметрыВСтроку(ТекстШага, ТекущиеДанные.Имя, ЗначениеПеременной);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийЭлементовФормы

#Область ВыборКаталогов

&НаКлиенте
Процедура ЗаписьВидеоПутьКСлайдуЗаголовокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Показать(Вычислить("Новый ОписаниеОповещения(""ЗаписьВидеоПутьКСлайдуЗаголовокЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоПутьКСлайдуЗаголовокЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоПутьКСлайдуЗаголовок = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоЗаписьВидеоПутьКСлайдуФиналНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Показать(Вычислить("Новый ОписаниеОповещения(""ЗаписьВидеоПутьКЗаписьВидеоПутьКСлайдуФиналЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоПутьКЗаписьВидеоПутьКСлайдуФиналЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоПутьКСлайдуФинал = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогПроектаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	Если ЗначениеЗаполнено(Объект.КаталогПроекта) Тогда
		ДиалогВыбораКаталога.ПолноеИмяФайла = Объект.КаталогПроекта;
	КонецЕсли; 
	ПараметрыОбъекта = Новый Структура("МножественныйВыбор, ИмяРеквизитаОбъекта, ИмяРеквизитаФормы", 
								ДиалогВыбораКаталога.МножественныйВыбор, "КаталогПроекта", "");
	Если ЗапрещеныСинхронныеВызовы Тогда
		ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогВыборЗавершение"", ЭтаФорма, ПараметрыОбъекта)"));
	ИначеЕсли ДиалогВыбораКаталога.Выбрать() Тогда
		МассивВыбранныхФайлов = Новый Массив;
		МассивВыбранныхФайлов.Добавить(ДиалогВыбораКаталога.Каталог);
		КаталогВыборЗавершение(МассивВыбранныхФайлов, ПараметрыОбъекта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогПроектаОткрытие(Элемент, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(Объект.КаталогПроекта) Тогда
		Возврат;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	
	НачатьЗапускПриложения(ОписаниеПустогоОбработчика(1), Объект.КаталогПроекта);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьШаблонНовойФичиПриИзменении(Элемент)
	
	Элементы.ПутьКШаблонуНовойФичи.Видимость = Объект.ИспользоватьШаблонНовойФичи; 
	Если Не Объект.ИспользоватьШаблонНовойФичи Тогда 
		Объект.ПутьКШаблонуНовойФичи = "";
	КонецЕсли;
	
КонецПроцедуры       

&НаКлиенте
Процедура ПутьКШаблонуНовойФичиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = "Текстовый файл (*.txt)|*.txt"; 
	ДиалогВыбораФайла.Заголовок = "Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр = Истина;
	ДиалогВыбораФайла.ИндексФильтра = 0;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
			
		Объект.ПутьКШаблонуНовойФичи = ДиалогВыбораФайла.ПолноеИмяФайла;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИнструментовОткрытие(Элемент, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(Объект.КаталогИнструментов) Тогда
		Возврат;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	
	НачатьЗапускПриложения(ОписаниеПустогоОбработчика(1), Объект.КаталогИнструментов);
КонецПроцедуры

&НаКлиенте
Процедура КаталогВременныхФайловОткрытие(Элемент, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(Объект.КаталогВременныхФайлов) Тогда
		Возврат;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	
	НачатьЗапускПриложения(ОписаниеПустогоОбработчика(1), Объект.КаталогВременныхФайлов);
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыборЗавершение(ВыбранныеФайлы, ПараметрыОбъекта) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	ВыборОбъектаМножественный = Ложь;
	Если ПараметрыОбъекта.Свойство("МножественныйВыбор") Тогда
		ВыборОбъектаМножественный = ПараметрыОбъекта["МножественныйВыбор"];
	КонецЕсли;
	
	ИмяРеквизитаОбъекта = ""; ИмяРеквизитаФормы = "";
	Если ПараметрыОбъекта.Свойство("ИмяРеквизитаОбъекта", ИмяРеквизитаОбъекта) И ЗначениеЗаполнено(ИмяРеквизитаОбъекта) Тогда 
		Объект[ИмяРеквизитаОбъекта] =  ?(ВыборОбъектаМножественный, ВыбранныеФайлы, ВыбранныеФайлы[0]);
	КонецЕсли;
	
	Если ПараметрыОбъекта.Свойство("ИмяРеквизитаФормы", ИмяРеквизитаФормы) И ЗначениеЗаполнено(ИмяРеквизитаФормы) Тогда 
		Объект[ИмяРеквизитаФормы] =  ?(ВыборОбъектаМножественный, ВыбранныеФайлы, ВыбранныеФайлы[0]);
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогиБиблиотекЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.КаталогиБиблиотек.ТекущиеДанные;
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КаталогиБиблиотекЗначениеНачалоВыбораЗавершение", ЭтаФорма, ТекущиеДанные);
	ДиалогВыбораКаталога.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура КаталогиБиблиотекЗначениеНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.КаталогиБиблиотек Цикл
		Если Строка.Значение = Элементы.КаталогиБиблиотек.ТекущиеДанные.Значение Тогда
			Строка.Значение = ВыбранныеФайлы[0];
			СохранитьНастройкиВХранилище("КаталогиБиблиотек", Объект.КаталогиБиблиотек, ПараметрыДляСохраненияНастроек());
			Прервать;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputAllureНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогOutputAllureНачалоВыбораЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputAllureНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогВыгрузкиAllure = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputСкриншотыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогOutputСкриншотыЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputСкриншотыЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогВыгрузкиСкриншотов = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиJUnitНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогOutputjUnitНачалоВыбораЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputjUnitНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогВыгрузкиJUnit = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputCucumberJsonНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогOutputCucumberJsonНачалоВыбораЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputCucumberJsonНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогВыгрузкиCucumberJson = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогДляЗаписиВидеоВыполненияТестовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогДляЗаписиВидеоВыполненияТестовНачалоВыбораЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогДляЗаписиВидеоВыполненияТестовНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогДляЗаписиВидеоВыполненияТестов = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputВнутреннийФорматНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогOutputВнутреннийФорматНачалоВыбораЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputВнутреннийФорматНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ИмяФайлаЛогВыполненияСценариев = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиСППРНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);	
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Каталог = Объект.КаталогВыгрузкиСППР;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КаталогВыгрузкиСППРНачалоВыбораЗавершение", ЭтаФорма);
	
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиСППРНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогВыгрузкиСППР = ВыбранныеФайлы[0];
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаЛогОшибокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""ИмяКаталогаЛогОшибокНачалоВыбораЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаЛогОшибокНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ИмяКаталогаЛогОшибок = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputИнструкцияHTMLНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогOutputИнструкцияHTMLЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputИнструкцияMarkdownНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогOutputИнструкцияMarkdownЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputИнструкцияHTMLЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогВыгрузкиИнструкцийHTML = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputИнструкцияMarkdownЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогВыгрузкиИнструкцийMarkdown = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоИнструментПриИзменении(Элемент)
	Если Объект.ЗаписьВидеоИнструмент = "ffmpeg" Тогда
		Объект.ИспользоватьКомпонентуVanessaExt = Истина;
		ВыполнитьПодключениеВнешнейКомпоненты();
	КонецЕсли;
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputИнструкцияВидеоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогOutputИнструкцияВидеоЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputИнструкцияВидеоЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогВыгрузкиИнструкцийВидео = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКэшВидеоВставокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""ЗаписьВидеоКэшВидеоВставокЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКэшВидеоВставокЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоКэшВидеоВставок = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоПутьКОбработкеДвижкаTTSНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""ЗаписьВидеоПутьКОбработкеДвижкаTTSЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоПутьКОбработкеДвижкаTTSЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоПутьКОбработкеДвижкаTTS = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКаталогМузыкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""ЗаписьВидеоКаталогМузыкиЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКаталогМузыкиЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоКаталогМузыки = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоПутьКДвижкуTTSНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""ЗаписьВидеоПутьКДвижкуTTSЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоПутьКДвижкуTTSЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоПутьКДвижкуTTS = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКэшФайловTTSНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""ЗаписьВидеоКэшФайловTTSНачалоВыбораЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКэшФайловTTSНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоКэшФайловTTS = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогКешОзвучкиДляИнтерактивнойСправкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогКешОзвучкиДляИнтерактивнойСправкиНачалоВыбораЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогКешОзвучкиДляИнтерактивнойСправкиНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогКешОзвучкиДляИнтерактивнойСправки = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоФайлКурсораМышкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""ЗаписьВидеоФайлКурсораМышкиЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоФайлКурсораМышкиЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоФайлКурсораМышки = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоФайлВодянойЗнакНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""ЗаписьВидеоФайлВодянойЗнакЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоФайлВодянойЗнакЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоФайлВодянойЗнак = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогИнструментовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогИнструментовЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогИнструментовЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогИнструментов = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогВременныхФайловНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогВременныхФайловЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогВременныхФайловЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогВременныхФайлов = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ВерсияПлатформыДляГенерацииEPFНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.КаталогиБиблиотек.ТекущиеДанные;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВерсияПлатформыДляГенерацииEPFНачалоВыбораЗавершение", ЭтаФорма, ТекущиеДанные);
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВерсияПлатформыДляГенерацииEPFНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда		
		Объект.ВерсияПлатформыДляГенерацииEPF = ВыбранныеФайлы[0];
		СохранитьНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоСловарьЗаменЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ЗаписьВидеоСловарьЗамен.ТекущиеДанные;
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписьВидеоСловарьЗаменНачалоВыбораЗавершение", ЭтаФорма, ТекущиеДанные);
	ДиалогВыбораКаталога.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоСловарьЗаменНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.ЗаписьВидеоСловарьЗамен Цикл
		Если Строка.Значение = Элементы.ЗаписьВидеоСловарьЗамен.ТекущиеДанные.Значение Тогда
			Строка.Значение = ВыбранныеФайлы[0];
			Прервать;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КаталогОтносительноКоторогоНадоСтроитьИерархию1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(
		Вычислить("Новый ОписаниеОповещения(""КаталогОтносительноКоторогоНадоСтроитьИерархию1НачалоВыбораЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогОтносительноКоторогоНадоСтроитьИерархию1НачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогОтносительноКоторогоНадоСтроитьИерархию = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоAmazonСекретныйКлючНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""ЗаписьВидеоAmazonСекретныйКлючЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоAmazonСекретныйКлючЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоAmazonСекретныйКлюч = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоYandexTTSOauthTokenНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""ЗаписьВидеоYandexTTSOauthTokenЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоYandexTTSOauthTokenЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоYandexTTSOauthToken = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоYandexTTSСкоростьРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Направление > 0 Тогда
		Если Объект.ЗаписьВидеоYandexTTSСкорость < Элемент.МаксимальноеЗначение Тогда 
			Объект.ЗаписьВидеоYandexTTSСкорость = Объект.ЗаписьВидеоYandexTTSСкорость + 0.1;
		КонецЕсли;
	Иначе
		Если Объект.ЗаписьВидеоYandexTTSСкорость > Элемент.МинимальноеЗначение Тогда 
			Объект.ЗаписьВидеоYandexTTSСкорость = Объект.ЗаписьВидеоYandexTTSСкорость - 0.1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКаталогДляВременныхФайловНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Каталог = Объект.ЗаписьВидеоКаталогДляВременныхФайлов;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаписьВидеоКаталогДляВременныхФайловНачалоВыбораЗавершение",
		ЭтаФорма);
		
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКаталогДляВременныхФайловНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
	
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоКаталогДляВременныхФайлов = ВыбранныеФайлы[0];
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКомандаConvertНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	 СтандартнаяОбработка = Ложь;
	 
	 Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	 Диалог.МножественныйВыбор = Ложь;
	 Диалог.Каталог = "C:\Program Files\";
	 Диалог.Фильтр = "convert.exe|convert.exe|*.exe|*.exe";
	 
	 ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаписьВидеоКомандаConvertНачалоВыбораЗавершение",
		ЭтаФорма);
		
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКомандаFfmpegНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	 СтандартнаяОбработка = Ложь;
	 
	 Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	 Диалог.МножественныйВыбор = Ложь;
	 Диалог.Каталог = "C:\Program Files\";
	 Диалог.Фильтр = "ffmpeg.exe|ffmpeg.exe|*.exe|*.exe";
	 
	 ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаписьВидеоКомандаFfmpegНачалоВыбораЗавершение",
		ЭтаФорма);
		
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКомандаConvertНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
	
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоКомандаConvert = ВыбранныеФайлы[0];	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКомандаFfmpegНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
	
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоКомандаFfmpeg = ВыбранныеФайлы[0];	
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогДляГенерацииКартинокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Каталог = Объект.КаталогиСкриптовSikuliX;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"КаталогДляГенерацииКартинокНачалоВыбораЗавершение",
		ЭтаФорма);
	
	Диалог.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура КаталогДляГенерацииКартинокНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогДляГенерацииКартинок = ВыбранныеФайлы[0];
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогиСкриптовSikuliXНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Каталог = Объект.КаталогиСкриптовSikuliX;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"КаталогиСкриптовSikuliXНачалоВыбораЗавершение",
		ЭтаФорма);
	
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогиСкриптовSikuliXНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогиСкриптовSikuliX = ВыбранныеФайлы[0];
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиAllureБазовыйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогВыгрузкиAllureБазовыйНачалоВыбораЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиAllureБазовыйНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогВыгрузкиAllureБазовый = ВыбранныеФайлы[0];
КонецПроцедуры

#Область ДымовыеТесты

&НаКлиенте
Процедура ОткрытьФормуГенератораСценариев(Команда)

	ФормаГенератораСценариев = ПолучитьФорму(ПолучитьИмяОбработкиVA() + ".Форма.ГенераторДымовыхТестов", ПолучитьПараметрыФормыГенератораДымовыхТестов(), ЭтаФорма);
	ФормаГенератораСценариев.Открыть();

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыФормыГенератораДымовыхТестов()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СоответствиеТекстовСообщений", Объект.ТекстСообщенийПользователю);
	ПараметрыФормы.Вставить("ЯзыкШагов", Объект.ДымовыеТестыЯзыкШагов);
	ПараметрыФормы.Вставить("КаталогВыходныхФайлов", Объект.ДымовыеТестыКаталогВыходныхФайлов);
	ПараметрыФормы.Вставить("ОчищатьКаталогВыходныхФайлов", Объект.ДымовыеТестыОчищатьКаталогВыходныхФайлов);
	ПараметрыФормы.Вставить("КаталогФайловИсключений", Объект.ДымовыеТестыКаталогФайловИсключений);
	ПараметрыФормы.Вставить("ТолькоИзмененныеОтностительноКонфигурацииПоставщика", Объект.ДымовыеТестыТолькоИзмененныеОтностительноКонфигурацииПоставщика);
	ПараметрыФормы.Вставить("ИмяКонфигурацииПоставщика", Объект.ДымовыеТестыИмяКонфигурацииПоставщика);
	ПараметрыФормы.Вставить("ТолькоВведенныеОбъекты", Объект.ДымовыеТестыТолькоВведенныеОбъекты);
	ПараметрыФормы.Вставить("ПутьКФайлуНастроекСценариев", Объект.ДымовыеТестыПутьКФайлуНастроекСценариев);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФайлКаталог(ПутьДляОткрытия, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ПутьДляОткрытия) Тогда
		
		НачатьЗапускПриложения(ОписаниеПустогоОбработчика(1), ПутьДляОткрытия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДымовыеТестыКаталогВыходныхФайловНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	Если ЗначениеЗаполнено(Объект.ДымовыеТестыКаталогВыходныхФайлов) Тогда
		ДиалогВыбораКаталога.ПолноеИмяФайла = Объект.ДымовыеТестыКаталогВыходныхФайлов;
	КонецЕсли;
	ПараметрыОбъекта = Новый Структура("МножественныйВыбор, ИмяРеквизитаОбъекта, ИмяРеквизитаФормы",
		ДиалогВыбораКаталога.МножественныйВыбор, "ДымовыеТестыКаталогВыходныхФайлов", "");
	Если ЗапрещеныСинхронныеВызовы Тогда
		ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогВыборЗавершение"", ЭтаФорма, ПараметрыОбъекта)"));
	ИначеЕсли ДиалогВыбораКаталога.Выбрать() Тогда
		МассивВыбранныхФайлов = Новый Массив;
		МассивВыбранныхФайлов.Добавить(ДиалогВыбораКаталога.Каталог);
		КаталогВыборЗавершение(МассивВыбранныхФайлов, ПараметрыОбъекта);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДымовыеТестыКаталогВыходныхФайловОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьФайлКаталог(Объект.ДымовыеТестыКаталогВыходныхФайлов, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДымовыеТестыКаталогФайловИсключенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	Если ЗначениеЗаполнено(Объект.ДымовыеТестыКаталогФайловИсключений) Тогда
		ДиалогВыбораКаталога.ПолноеИмяФайла = Объект.ДымовыеТестыКаталогФайловИсключений;
	КонецЕсли;
	ПараметрыОбъекта = Новый Структура("МножественныйВыбор, ИмяРеквизитаОбъекта, ИмяРеквизитаФормы",
		ДиалогВыбораКаталога.МножественныйВыбор, "ДымовыеТестыКаталогФайловИсключений", "");
	Если ЗапрещеныСинхронныеВызовы Тогда
		ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогВыборЗавершение"", ЭтаФорма, ПараметрыОбъекта)"));
	ИначеЕсли ДиалогВыбораКаталога.Выбрать() Тогда
		МассивВыбранныхФайлов = Новый Массив;
		МассивВыбранныхФайлов.Добавить(ДиалогВыбораКаталога.Каталог);
		КаталогВыборЗавершение(МассивВыбранныхФайлов, ПараметрыОбъекта);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДымовыеТестыКаталогФайловИсключенийОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьФайлКаталог(Объект.ДымовыеТестыКаталогФайловИсключений, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДымовыеТестыПутьКФайлуНастроекСценариевНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь; 
	ДиалогВыбораКаталога.Фильтр = "Файл (*.csv,*.CSV)|*.csv;*.CSV";
	Если ЗначениеЗаполнено(Объект.ДымовыеТестыПутьКФайлуНастроекСценариев) Тогда
		ДиалогВыбораКаталога.ПолноеИмяФайла = Объект.ДымовыеТестыПутьКФайлуНастроекСценариев;
	КонецЕсли;
	ПараметрыОбъекта = Новый Структура("МножественныйВыбор, ИмяРеквизитаОбъекта, ИмяРеквизитаФормы",
		ДиалогВыбораКаталога.МножественныйВыбор, "ДымовыеТестыПутьКФайлуНастроекСценариев", "");
	Если ЗапрещеныСинхронныеВызовы Тогда
		ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогВыборЗавершение"", ЭтаФорма, ПараметрыОбъекта)"));
	ИначеЕсли ДиалогВыбораКаталога.Выбрать() Тогда
		МассивВыбранныхФайлов = Новый Массив;
		МассивВыбранныхФайлов.Добавить(ДиалогВыбораКаталога.ПолноеИмяФайла);
		КаталогВыборЗавершение(МассивВыбранныхФайлов, ПараметрыОбъекта);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ДымовыеТестыПутьКФайлуНастроекСценариевОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьФайлКаталог(Объект.ДымовыеТестыПутьКФайлуНастроекСценариев, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДымовыеТестыТолькоИзмененныеОтностительноКонфигурацииПоставщикаПриИзменении(Элемент)
	
	Элементы.ДымовыеТестыИмяКонфигурацииПоставщика.Доступность = Объект.ДымовыеТестыТолькоИзмененныеОтностительноКонфигурацииПоставщика;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПрочиеЭлементыФормы

&НаКлиенте
Процедура КаталогФичНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФичаФайлОбработчик(Объект.КаталогФич);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоЗаменитьIntroФайлПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоЗаменитьOutroФайлПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаРаботыVanessaAutomationВРежимеTestClientПриИзменении(Элемент)
	ДопПараметры = Новый Структура;
	Если ЕстьКонстантаВКонфигурацииПутьКVA = Неопределено Тогда
		ЕстьКонстантаВКонфигурацииПутьКVA = ЕстьКонстантаВКонфигурацииСервер("ПутьКVanessaAutomation");
	КонецЕсли;	 
	ДопПараметры.Вставить("ЕстьКонстантаВКонфигурацииПутьКVA", ЕстьКонстантаВКонфигурацииПутьКVA);
	УстановитьВидимостьСлужебныхЭлементов(ДопПараметры);
	Объект.ВыполнятьШагиАсинхронно = Ложь;
	ОбновитьЗаголовокФормы();
КонецПроцедуры

&НаКлиенте
Процедура КаталогИнструментовСлужебныйПриИзменении(Элемент)
	ПодключитьБиблиотекуРаботыСВидео();
	ЗагрузитьПлагины();
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьИнструкциюВидеоПриИзменении(Элемент)
	Если Объект.СоздаватьИнструкциюВидео Тогда
		Объект.ОзвучиватьВыполнениеСценария = Ложь;
	КонецЕсли;
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ОзвучиватьВыполнениеСценарияПриИзменении(Элемент)
	Если Объект.ОзвучиватьВыполнениеСценария Тогда
		Объект.СоздаватьИнструкциюВидео = Ложь;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоФормироватьИнструкциюТипMarkdownПриИзменении(Элемент)
	ПриИзмененииТипаВидеоИнструкции();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоФормироватьИнструкциюТипHTMLПриИзменении(Элемент)
	ПриИзмененииТипаВидеоИнструкции();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоФормироватьИнструкциюТипВидеоПриИзменении(Элемент)
	ПриИзмененииТипаВидеоИнструкции();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьSikuliXСерверПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоЭмулироватьДвиженияМышкиSikuliXПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьИнструкциюHTMLПриИзменении(Элемент)
	УстановитьУсловноеОформление(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьИнструкциюMarkdownПриИзменении(Элемент)
	УстановитьУсловноеОформление(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДелатьСкриншотПриВозникновенииОшибкиПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьОтчетВФорматеАллюрПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ДобавлятьКИмениСценарияУсловияВыгрузкиПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьСтатусВыполненияСценариевВФайлПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьОтчетВФорматеxUnitПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьОтчетВФорматеСППРПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьОтчетВФорматеCucumberJsonПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьЛогВыполненияСценариевВТекстовыйФайлПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЛогВКонсольПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписыватьВидеоВыполненияТестовПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьЛогОшибокВТекстовыйФайлПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоДелатьНаложениеTTSПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКэшироватьФайлыTTSПриИзменении(Элемент)
	Элементы.ЗаписьВидеоКэшФайловTTS.Видимость = Объект.ЗаписьВидеоКэшироватьФайлыTTS;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКэшироватьВидеоВставкиПриИзменении(Элемент)
	Элементы.ЗаписьВидеоКэшВидеоВставок.Видимость = Объект.ЗаписьВидеоКэшироватьВидеоВставки;
КонецПроцедуры

&НаКлиенте
Процедура ЗапускатьТестКлиентВРежимеОтладкиПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрыватьКлиентТестированияПринудительноПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ПовторноЗапускатьСеансКлиентаТестированияПриПодключенииЕслиНеНайденЕгоПроцессПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура РежимСамотестированияПриИзменении(Элемент)
	ОбновитьЗаголовокФормы();
КонецПроцедуры

&НаКлиенте
Процедура КаталогиБиблиотекПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования
			И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Значение) Тогда
				
		СообщитьПользователю(Локализовать("Нельзя оставлять пустую строку в списке Библиотек."));
		// Отказ делать не хочу, не всегда вспоминаешь что надо нажать ESC
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогиБиблиотекПослеУдаления(Элемент)
	СохранитьНастройкиВХранилище("КаталогиБиблиотек", Объект.КаталогиБиблиотек, ПараметрыДляСохраненияНастроек());
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКлиентовТестированияПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтотКлиент
	И Элементы.ДанныеКлиентовТестирования.ТекущийЭлемент.Имя <> "ДанныеКлиентовТестированияДопПараметры"
	И Элементы.ДанныеКлиентовТестирования.ТекущийЭлемент.Имя <> "ДанныеКлиентовТестированияТипКлиента"
	И Элементы.ДанныеКлиентовТестирования.ТекущийЭлемент.Имя <> "ДанныеКлиентовТестированияПорт"
	И Элементы.ДанныеКлиентовТестирования.ТекущийЭлемент.Имя <> "ДанныеКлиентовТестированияПутьКИнфобазе"
	Тогда
		СообщитьПользователю(Локализовать("Нельзя изменять текущее поле у зарезервированного подключения <Этот клиент>."));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКлиентовТестированияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	// проверка на дубли в колонке "Имя"
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя", Элемент.ТекущиеДанные.Имя);
	
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 1 Тогда
		СообщитьПользователю(Локализовать(ПодставитьПараметрыВСтроку(Локализовать("В таблице подключений уже есть подключение с именем <%1>"),
			Элемент.ТекущиеДанные.Имя
		)));
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.ИмяКомпьютера) Тогда
		Элемент.ТекущиеДанные.ИмяКомпьютера = "localhost";
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКлиентовТестированияПослеУдаления(Элемент)
	
	Если ДанныеКлиентовТестирования.Количество() = 0 Тогда
		СообщитьПользователю(Локализовать("Должна оставаться строка подключения текущего клиента"));
		ЗаполнитьДанныеТекущейИнфобазы();
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ЭтотКлиент", Истина);
	
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		СообщитьПользователю(Локализовать("Данные по основному подключению Клиента тестирования перезаполнены."));
		ЗаполнитьДанныеТекущейИнфобазы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКлиентовТестированияТипКлиентаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.ТипКлиента = "Web" Тогда
		Если НРег(ТекущиеДанные.ИмяКомпьютера) = "localhost" Тогда
			ТекущиеДанные.ПортЗапускаТестКлиента = 1538;
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКлиентовТестированияИмяКомпьютераПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.ТипКлиента = "Web" Тогда
		Если НРег(ТекущиеДанные.ИмяКомпьютера) <> "localhost" Тогда
			Если ТекущиеДанные.ПортЗапускаТестКлиента = 1538 Тогда
				ТекущиеДанные.ПортЗапускаТестКлиента = 1541;
			КонецЕсли;	 
		Иначе	
			Если ТекущиеДанные.ПортЗапускаТестКлиента = 1541 Тогда
				ТекущиеДанные.ПортЗапускаТестКлиента = 1538;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ЯзыкГенератораGherkinПриИзменении(Элемент)
	
	ЯзыкГенератораGherkinПриИзмененииОбработчик();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнятьШагиАсинхронноПриИзменении(Элемент)
	Элементы.ИнтервалВыполненияШагаЗаданныйПользователем.Видимость = Объект.ВыполнятьШагиАсинхронно;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоТипОзвучкиTTSПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура БезопасноеВыполнениеШаговПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьSikuliXСерверРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, 
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьСправкуФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИскатьЭлементыФормыПоИмениПриИзменении(Элемент)
	
	Элементы.VanessaEditorПриГенерацииШаговИскатьЭлементыФормыПоИмени.Пометка
		= Объект.ИскатьЭлементыФормыПоИмени;
		
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКомпонентуVanessaExtПриИзменении()
	
	Если Объект.ИспользоватьКомпонентуVanessaExt Тогда
		ВыполнитьПодключениеВнешнейКомпоненты();
	Иначе
		ВнешняяКомпонентаДляСкриншотов = "";
		Объект.ИспользоватьВнешнююКомпонентуДляСкриншотов = Ложь;
		УстановитьУсловноеОформление();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПарсерGherkinИзКомпонентыVanessaExtПриИзменении(Элемент)
	Если Объект.ИспользоватьПарсерGherkinИзКомпонентыVanessaExt Тогда
		МодульПарсерGherkin().ИнициализацияПарсера();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПользовательскихНастроекПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ЭмулироватьДвиженияМышкиVanessaExtПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ПоискКартинокСПомощьюКомпонентыVanessaExtПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ВыборЦветаПодсветкиКликовМышкиПриИзменении(Элемент)
	Объект.ЦветПодсветкиКликаМышкиVanessaExt = ЦветЧислом(ВыборЦветаПодсветкиКликовМышки);
КонецПроцедуры

&НаКлиенте
Процедура ПодсвечиватьКликМышкиВБраузереVanessaExtПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВнешнююКомпонентуДляСкриншотовПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытияФичиВТекстовомРедактореАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Элементы.КомандаОткрытияФичиВТекстовомРедакторе.СписокВыбора.Количество() = 0 Тогда
		КомандыЗапускаТекстовогоРедактораПоУмолчанию();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДанныеКлиентовТестированияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.ЭтотКлиент = Ложь;
		Элемент.ТекущиеДанные.Подключен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаРедактораVanessaEditorПриИзменении(Элемент)
	
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;
	
	Если VanessaTabs = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	VanessaTabs.theme = Объект.ТемаРедактораVanessaEditor;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДанныеТекущейФормыПриПодбореШаговПриИзменении(Элемент)
	ИспользоватьДанныеТекущейФормыПриПодбореШаговПриИзмененииОбработчик();
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьМиниатюруКодаПриИзменении(Элемент)
	VanessaEditorПоказыватьМиниатюруКодаОбработчик();
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЗначенияПеременныхВСтрокахРедактораПриИзменении(Элемент)
	VanessaEditorПоказыватьЗначенияПеременныхВСтрокахРедактораОбработчик();
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьРазличияВРедактореОтдельноПриИзменении(Элемент)
	Элементы.VanessaEditorПоказыватьРазличияВРедактореОтдельно.Пометка
		= Объект.ПоказыватьРазличияВРедактореОтдельно;
		
	МодульРаботаСGit().ВидОтображенияОтличийВРедактореПриИзменении();	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменятьТабыНаПробелыПриИзменении(Элемент)
	МодульРедакторТекста().УстановитьЗаменуТабуляцииНаПробелы();
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЗакладкиСверхуПриИзменении(Элемент)
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеТабуляцииИПробеловПриИзменении(Элемент)
	МодульРедакторТекста().УстановитьОтображениеТабуляцииИПробелов();
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСинтаксисаВРедактореПриИзменении(Элемент)
	VanessaEditorПроверкаСинтаксисаВРедактореОбработчик();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоYandexTTSВариантЗапросаПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ПодключатьГорячуюКлавишуДляПолученияСправкиОбЭлементеПриИзменении(Элемент)
	ПодключатьГорячуюКлавишуДляПолученияСправкиОбЭлементе(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СтилиHTMLИнструкцииПриИзменении(Элемент)
	УстановитьУсловноеОформление(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТемпОзвучкиHTMLПриИзменении(Элемент)
	УстановитьЗаголовокТемпОзвучкиHTML();
КонецПроцедуры

&НаКлиенте
Процедура ДиапазонОзвучкиHTMLПриИзменении(Элемент)
	УстановитьЗаголовокДиапазонОзвучкиHTML();
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОзвучкуHTMLПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ВариантСтилейHTMLИнструкцииПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСтрокиПодсценариевVanessaEditorПриИзменении(Элемент)
	VanessaEditorПоказыватьСтрокиПодсценариевОбработчик();
КонецПроцедуры

&НаКлиенте
Процедура СписокТеговОтборПриИзменении(Элемент)

	Если Объект.ИспользоватьРедакторVanessaEditor И VanessaTabs.tabStack.length > 0 Тогда 
		Для Каждого ВкладкаРедактора Из VanessaTabs.tabStack Цикл 
			Если ЭтоВкладкаEdit(ВкладкаРедактора) Тогда
				//В открытых вкладках нашли вкладку фичи
				СообщитьПользователю(Локализовать("Чтобы применились изменения перезагрузите открытые .feature файлы"));
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЭкспортныеПроцедурыИФункции

#Область Редактор

// Конвертирует коллекцию значений в строку
&НаКлиенте
Функция ЗаписатьОбъектJSON(ДанныеJSON) Экспорт
	#Если НЕ ВебКлиент Тогда

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеJSON);
	Возврат ЗаписьJSON.Закрыть();
	
	#КонецЕсли
КонецФункции

// Читает коллекцию значений из строки
&НаКлиенте
Функция ПрочитатьОбъектJSON(ДанныеJSON, ПрочитатьВСоответствие = Ложь) Экспорт
	#Если НЕ ВебКлиент Тогда

	ЧтениеJSON = New ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ДанныеJSON);
	Значение = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
	ЧтениеJSON.Закрыть();
	Возврат Значение;
	
	#КонецЕсли
КонецФункции	 

//Возвращает строку дерева по номеру строки фичи.
&НаКлиенте
Функция СтрокаДереваПоНомеруСтрокиФичи(Ном) Экспорт
	СтрокиДерева = Объект.ДеревоТестов.ПолучитьЭлементы();
	
	НадоПрервать = Ложь;
	Результат = Неопределено;
	СтрокаДереваПоНомеруСтрокиФичиРекурсивно(СтрокиДерева, Ном, НадоПрервать, Результат);
	Возврат Результат;
КонецФункции

//Возвращает строку дерева по ид строки.
&НаКлиенте
Функция СтрокаДереваПоИдСтроки(Ном) Экспорт
	СтрокиДерева = Объект.ДеревоТестов.ПолучитьЭлементы();
	
	НадоПрервать = Ложь;
	Результат = Неопределено;
	СтрокаДереваПоИдСтрокиРекурсивно(СтрокиДерева, Ном, НадоПрервать, Результат);
	Возврат Результат;
КонецФункции

//Активизирует строку дерева по номеру строки фичи.
&НаКлиенте
Функция СделатьСтрокуДереваТекущейПоНомеруСтрокиФичи(Ном) Экспорт
	СтрокиДерева = Объект.ДеревоТестов.ПолучитьЭлементы();
	
	НадоПрервать = Ложь;
	СделатьСтрокуДереваТекущейПоНомеруРекурсивно(СтрокиДерева, Ном, НадоПрервать);
	Возврат НадоПрервать;
КонецФункции

//Активизирует строку дерева по номеру строки фичи.
&НаКлиенте
Функция СделатьБлижайшуюСтрокуДереваТекущейПоНомеруСтрокиФичи(Ном) Экспорт
	СтрокиДерева = Объект.ДеревоТестов.ПолучитьЭлементы();
	
	НадоПрервать = Ложь;
	СделатьБлижайшуюСтрокуДереваТекущейПоНомеруРекурсивно(СтрокиДерева, Ном, НадоПрервать);
	Возврат НадоПрервать;
КонецФункции

//Активизирует строку дерева по номеру строки фичи.
&НаКлиенте
Процедура СделатьСтрокуДереваТекущейПоИдСтроки(Ном) Экспорт
	СтрокиДерева = Объект.ДеревоТестов.ПолучитьЭлементы();
	
	НадоПрервать = Ложь;
	СделатьСтрокуДереваТекущейПоИдСтрокиРекурсивно(СтрокиДерева, Ном, НадоПрервать);
КонецПроцедуры

// Устанавливает видимость кнопок командной панели по переданным данным
&НаКлиенте
Процедура ОбработатьВидимостьКнопокКоманднойПанели(Данные) Экспорт
	ОбработатьВидимостьКнопокКоманднойПанелиСервер(Данные, НастройкиВидимостиКнопокКоманднойПанелиРедактора);
КонецПроцедуры 

// Проверяет, что вкладка является вкладкой, показывающей сравнение файлов
&НаКлиенте
Функция ЭтоВкладкаDiff(Вкладка) Экспорт
	Возврат Вкладка.isDiffEditor = Истина;
КонецФункции	 

// Проверяет, что вкладка является вкладкой, предназначенной для редактирования
&НаКлиенте
Функция ЭтоВкладкаEdit(Вкладка) Экспорт
	Возврат Вкладка.isCodeEditor = Истина;
КонецФункции	 

// Проверяет, что вкладка является начальной страницей
&НаКлиенте
Функция ЭтоВкладкаНачальнаяСтраница(Вкладка) Экспорт
	Возврат НРег(Вкладка.filename) = "memory:welcome";
КонецФункции	 

// Проверяет, что данная вкладка не является пустой  и вкладкой, показывающей различие в файлах
&НаКлиенте
Функция ВозможенЗапускСценариевИзТекущейВкладки() Экспорт
	Если VanessaTabs = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	Если VanessaTabs.current = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	Если ЭтоВкладкаDiff(VanessaTabs.current) Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если НЕ ЭтоВкладкаEdit(VanessaTabs.current) Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	 

// Возвращает флаг нужно ли передать новые шаги в редактор
&НаКлиенте
Функция НадоУстановитьСписокШаговVanessaEditor() Экспорт
	Возврат НадоУстановитьСписокШаговVanessaEditor; 
КонецФункции	 

// Обработчик после передачи редактору списка шагов
&НаКлиенте
Процедура ПослеУстановкиШаговВРедакторVanessaEditor() Экспорт
	НадоУстановитьСписокШаговVanessaEditor = Ложь;
КонецПроцедуры 

// Устанавливает, что этот сеанс Vanessa Automation ожидает результат чтения файлов от компоненты VanessaExt
&НаКлиенте
Процедура УстановитьФлагОжиданияСобытияЧтенияОтКомпоненты(Значение) Экспорт
	ОжиданиеСобытияЧтенияОтКомпоненты = Значение;
КонецПроцедуры 

// Закрывает все вкладки редактора
&НаКлиенте
Процедура ЗакрытьВсеВкладкиРедактора() Экспорт
	МодульРедакторТекста().ЗакрытьВсеВкладкиРедактора();
КонецПроцедуры 

// Проверяет, что существует экземплят редактора
&НаКлиенте
Функция ОтсутствуетVanessaEditor() Экспорт

	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если VanessaTabs = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если VanessaTabs.current = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

// Возвращает editor текущей вкладки редактора
&НаКлиенте
Функция ПолучитьVanessaEditor() Экспорт

	Если ОтсутствуетVanessaEditor() Тогда
		ВызватьИсключение Локализовать("Отсутствует редактор Vanessa Automation Editor")
	КонецЕсли;

	Возврат VanessaTabs.current.editor;
	
КонецФункции

// Возвращает editor, вкладки редактора, в которой было запущено выполнение сценария
&НаКлиенте
Функция ПолучитьVanessaEditorВыполняемогоСценария() Экспорт

	Если ОтсутствуетVanessaEditor() Тогда
		ВызватьИсключение Локализовать("Отсутствует редактор Vanessa Automation Editor")
	КонецЕсли;

	Если ВкладкаРедактораВКоторойЗапущеноВыполнениеСценария <> Неопределено Тогда
		Возврат ВкладкаРедактораВКоторойЗапущеноВыполнениеСценария; 
	КонецЕсли;	 
	
	Возврат VanessaTabs.current.editor;
	
КонецФункции

// Очищает окно сообщения
&НаКлиенте
Процедура ОчиститьОкноСообщений() Экспорт
	ОчиститьСообщения();
КонецПроцедуры 

// Создаёт временный фича файл
&НаКлиенте
Процедура VanessaEditorБыстроСоздатьВременныйФичаФайл() Экспорт
	ПодготовитьСценарийКВыполнению();
КонецПроцедуры 

// Возвращает версию редактора
&НаКлиенте
Функция ВерсияРедактора() Экспорт
	Возврат ВерсияРедактора;
КонецФункции	

// Возвращает МестоположениеКлючевыеСловаGherkin
&НаКлиенте
Функция МестоположениеКлючевыеСловаGherkin() Экспорт
	Возврат МестоположениеКлючевыеСловаGherkin;
КонецФункции	

#КонецОбласти

#Область ВыполнениеШагов

// Возвращает значения параметров сценария как они переданы в тексте сценария
&НаКлиенте
Функция ЗначенияПараметровТекущегоСценария() Экспорт
	СостояниеVanessaAutomation = ПолучитьСостояниеVanessaAutomation();
	Массив = Новый Массив;
	Для Каждого Элем Из СостояниеVanessaAutomation.ТекущийШаг.ЗначенияПараметров Цикл
		Массив.Добавить(Элем.Значение.Значение);
	КонецЦикла;	 
	
	Возврат Массив;
КонецФункции	 

&НаКлиенте
Функция ДанныеШагаСценария() Экспорт
	
	Если НЕ ИдетВыполнениеСценариев() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ТекИД_ВыполненногоШагаВМассиве = ТекИД_ШагаВМассиве;
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	Возврат Шаги[ТекИД_ШагаВМассиве];
	
КонецФункции

// Включает режим асинхронного выполнения шагов
&НаКлиенте
Процедура ВключитьАсинхронныйРежимВыполненияШаговСИнтервалом(Интервал) Экспорт
	Объект.ВыполнятьШагиАсинхронно = Истина;
	Объект.ИнтервалВыполненияШагаЗаданныйПользователем = Число(Интервал);
	Объект.ИнтервалВыполненияШага = Объект.ИнтервалВыполненияШагаЗаданныйПользователем;
	Элементы.ИнтервалВыполненияШагаЗаданныйПользователем.Видимость = Истина;
КонецПроцедуры 

// Выключает режим асинхронного выполнения шагов
&НаКлиенте
Процедура ОтключитьАсинхронныйРежимВыполненияШагов() Экспорт
	Объект.ВыполнятьШагиАсинхронно = Ложь;
	Элементы.ИнтервалВыполненияШагаЗаданныйПользователем.Видимость = Ложь;
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьОграничениеНаКоличествоПопытокДействий(Параметр) Экспорт
	ОграничениеНаКоличествоПопытокДействий = Параметр;
КонецПроцедуры 

// Действие, соответствующее нажатию на кнопку "Выполнить сценарии"
&НаКлиенте
Процедура КомандаВыполнитьСценарии() Экспорт
	
	Если Объект.ИдетВыполнениеСценариев Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
			Возврат;
		КонецЕсли;	 
		Если НЕ МодульРедакторТекста().МожноЗапуститьСценарийИзДаннойВкладки() Тогда
			СообщитьПользователю(Локализовать("Для выполнения данного действия необходимо сохранить файл."));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ДеревоБудетПерезагружено("КомандаВыполнитьСценарии") Тогда
		Возврат;
	КонецЕсли;	 
	
	АктивизироватьСтраницуЗапускТестов();
	СделатьПараметрыКорректными();
	
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Ложь;
	
	ВыполнитьСценарии();
	
КонецПроцедуры 

&НаКлиенте
Процедура КомандаОстановитьСценарии() Экспорт
	
	Если Объект.ИдетВыполнениеСценариев Тогда		
		ПрекратитьВыполнениеВсехСценариев = Истина;
		ОбновитьСтатусыКнопокСценариев(Истина);
		АктивизироватьСтрокуДереваТекущегоШага();		
		Если Объект.ЗапускИзКоманднойСтроки Тогда
			СообщитьПользователю(Локализовать("Выполнение сценариев остановлено."));
		КонецЕсли;	
	КонецЕсли;
	
	Объект.ИдетВыполнениеСценариев = Ложь;
	ОбновитьСтатусыКнопокСценариев();
	
	ВыключитьАнимациюКликовМышки();
	
	Если НужноПоказатьОкноОстановкиВыполненияСценария() Тогда
		ЗакрытьОкноОстановкиВыполненияСценария();
	КонецЕсли;	 
	
КонецПроцедуры 

// Действие, соответствующее нажатию на кнопку "Перезагрузить сценарии"
&НаКлиенте
Процедура КомандаПерезагрузить(ДопПараметры = Неопределено) Экспорт
	
	ПереходВРедакторИзДерева = Ложь;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ПереходВРедакторИзДерева") Тогда
		ПереходВРедакторИзДерева = ДопПараметры.ПереходВРедакторИзДерева;
	КонецЕсли;	 
	
	Если Объект.ИспользоватьРедакторVanessaEditor И НЕ ПереходВРедакторИзДерева Тогда
		Если VanessaTabs.current <> Неопределено И ЭтоВкладкаНачальнаяСтраница(VanessaTabs.current) Тогда
			Возврат;
		КонецЕсли;	 
		Если VanessaTabs.current <> Неопределено И ЭтоВкладкаDiff(VanessaTabs.current) Тогда
			Возврат;
		КонецЕсли;	 
		Если НЕ МодульРедакторТекста().МожноЗапуститьСценарийИзДаннойВкладки() Тогда
			СообщитьПользователю(Локализовать("Для выполнения данного действия необходимо сохранить файл."));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Объект.ИдетВыполнениеСценариев = Ложь;
	НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Ложь;
	Объект.ВыполнитьСценарииПослеЗагрузкиФич = Ложь;
	Объект.ВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Ложь;
	ТекущиеДанныеДерева = Элементы.ДеревоТестов.ТекущиеДанные;
	Если ТекущиеДанныеДерева <> Неопределено Тогда
		НадоПерейтиКСтрокеДерева = ТекущиеДанныеДерева.ИДСтроки;
	КонецЕсли;	 
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоТестов;
	КонецЕсли;	 
	ЗагрузитьФичи(ДопПараметры);
	
КонецПроцедуры 

&НаКлиенте
Процедура Шаг(Стр, ВыполнятьЧерезВременнуюФичу = Ложь, ДопПараметры = Неопределено) Экспорт
	
	Если Объект.ВерсияПоставки = "single" И НадоПодключитьШагиSingleИзИзМакета Тогда
		МассивИменФайловКоторыеСовпалиСКеш = Новый Соответствие;
		СтруктураПараметров = Новый Структура;
		ПодключитьОбработкиSingle(СтруктураПараметров,
		    МассивИменФайловКоторыеСовпалиСКеш, МассивИменКонтекстовОбработок, ТаблицаКонтекстовОбработок, Объект.КаталогФич);
	КонецЕсли;	 																							   
		
	Поз = Найти(Стр, Символы.ПС);
	Если (Поз > 0) ИЛИ ВыполнятьЧерезВременнуюФичу Тогда // значит это многострочный текст - для него будем работать через временную фичу
		ВыполнитьМетодШагЧерезВременныйФичаФайл(Стр, ДопПараметры);
	Иначе
		ДвДанныеvbFeatureReader = Неопределено;
		Если Объект.ВерсияПоставки = "standart" Тогда
			Если НЕ ВозможнаОптимизацияРаботыСФайлами Тогда
				ДвДанныеvbFeatureReader = Новый ДвоичныеДанные(ПолучитьПутьКFeatureReader());
			КонецЕсли;	 
		КонецЕсли;	 
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("КешСнипетов", КешСнипетов);
		СтруктураПараметров.Вставить("СтрокаПробелов", СтрокаПробелов);
		ТекШаг = ПолучитьДанныеДляВыполненияОдногоШага(Стр, ДвДанныеvbFeatureReader, Объект.КаталогИнструментов, СтруктураПараметров);
		
		Если НЕ ТекШаг.ШагНайден Тогда
			ВыполнитьМетодШагЧерезВременныйФичаФайл(Стр, ДопПараметры);
			Возврат;
		КонецЕсли;	 
		
		ОбработкаТеста = ПолучитьКонтекстТестаПоАдресСнипета(ТекШаг.ИмяФайла);
		
		Если ОбработкаТеста = Неопределено Тогда
			ЗапретитьВыполнениеШагов();
			ПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеПроцедурыШаг(ТекШаг.ИмяФайла, ТекШаг);
			Возврат;
		КонецЕсли;	 
		
		ВыполнитьПроцедуруШагПродолжение(ОбработкаТеста, ТекШаг);
		// это одна строка. для неё будем вызывать преобразование строки Gherkin
	КонецЕсли;	 
КонецПроцедуры

// Оставлена для совместимости.
&НаКлиенте
Функция ПолучитьСостояниеVanessaBehavior() Экспорт 
	Возврат ПолучитьСостояниеVanessaAutomation(); 
КонецФункции	 

//Возвращает значение параметра текущего сценария по его номеру
&НаКлиенте
Функция ЗначениеПараметраТекущегоСценария(НомерПараметра) Экспорт
	СостояниеVanessaAutomation = ПолучитьСостояниеVanessaAutomation();
	
	Попытка
		Возврат СостояниеVanessaAutomation.ТекущийШаг.ЗначенияПараметров[НомерПараметра].Значение.Значение;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

//Возвращает значение переменной, учитывая, что ИмяПеременной могло быть заменено в процессе подстановки значений переменных
&НаКлиенте
Функция ЗначениеПеременнойИзКонтекстаИлиПоНомеруПараметра(Знач ИмяПеременной, НомерПараметра) Экспорт
	
	Попытка
		ЗначениеПеременной = ПолучитьЗначениеПеременнойИзКонтекста(ИмяПеременной);
	Исключение
		Попытка
			//На тот случай, если ИмяПеременной было заменено на значение переменной
			ИмяПеременной = ЗначениеПараметраТекущегоСценария(НомерПараметра);
			ЗначениеПеременной = ПолучитьЗначениеПеременнойИзКонтекста(ИмяПеременной);
		Исключение
			ЗначениеПеременной = Неопределено;
		КонецПопытки;
	КонецПопытки;
	
	Возврат ЗначениеПеременной; 
	
КонецФункции	 

&НаКлиенте
Процедура ПродолжитьВыполнениеШаговОбработчикОжидания() Экспорт
	ПродолжитьВыполнениеШагов();
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьРезультатУсловия(Результат) Экспорт
	Если ТипЗнч(Результат) <> Тип("Булево") Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("В процедуру <УстановитьРезультатУсловия> передан неверный тип параметра <%1>. Ожидаемый тип: Булево."),
			Результат
		);
	КонецЕсли;	 
	
	Объект.РезультатУсловия = Результат;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСценарии(ТекСценарий = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	Если (Объект.СоздаватьИнструкциюВидео ИЛИ Объект.ОзвучиватьВыполнениеСценария ИЛИ ВключенРежимОбучения)
			И Объект.ЗаписьВидеоТипОзвучкиTTS = -1 Тогда
			
		Если ФормаОбработкиПроизвольногоДвижкаTTS = Неопределено Тогда
				
			ДополнительныеПараметры = Новый Структура("ТекСценарий", ТекСценарий);
			ОбработчикОповещения = Новый ОписаниеОповещения("ВыполнитьСценарии", ЭтаФорма, ДополнительныеПараметры);
			ПодключитьОбработкуДвижкаTTS(ОбработчикОповещения);
			
			Возврат;
			
		ИначеЕсли ДопПараметры <> Неопределено И ДопПараметры.Свойство("ТекСценарий") Тогда
			
			ТекСценарий = ДопПараметры.ТекСценарий;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Оповестить("ЗапускСценариевVanessaAutomation");

	ФлагСценарииВыполнены               = Ложь;
	ВозниклаОшибкаПодключенияTestClient = Ложь;
	ВозниклаОшибкаВШагеКонтекста        = Ложь;
	ВозниклаОшибкаОшибкаСетевогоВзаимодействия = Ложь;
	КоличествоЗапущенныхКлиентовТестирования = 0;
	
	Объект.ИдетВыполнениеСценариев    = Истина;
	ОбновитьСтатусыКнопокСценариев();
	
	БылаОшибкаСкриптовСборкиВидео     = Ложь;
	ОстановитьВыполнениеШагов  = Ложь;
	Объект.ИдетЗаписьВидео            = Ложь;
	
	СтатусЗапускаСценариев            = Истина;
	ПрекратитьВыполнениеВсехСценариев = Ложь;
	ПрекратитьВыполнениеДанногоСценария = Ложь;
	ТекущийИсполняемыйФичаФайл        = Неопределено;
	ШагиСОшибкамиVanessaEditor = Новый Массив;
	ДанныеОшибокVanessaEditor = Новый Соответствие;
	СтруктураПоискаСтрокДерева = Неопределено;
	ЗвуковоеОповещениеВыполнялось = Ложь;
	ИменаФайловДляПрикрепления = Новый Массив;
	ВыполненаОбработкаЗавершенияВыполненияСценариев = Ложь;
	ПрекратитьВыполнениеСценариевДаннойФичи = Ложь;
	ШагДляКоторогоЗапущенаОзвучка = -1;
	КешДанныеСловоряЗамен = Неопределено;
	БылоВыведеноСообщениеОЗавершенииСценариев = Ложь;
	НужноОжидатьОкончанияОзвучкиШага = Ложь;
	КешИДВоспроизведенияMp3 = Новый Соответствие;
	ВкладкаРедактораВКоторойЗапущеноВыполнениеСценария = Неопределено;
	ИдШагаДляКоторогоВыполнялсяСкриншотБраузера = Неопределено;
	СохраненныеДанныеСборДанныхДляОтчетов = Неопределено;
	ЗакрыватьСистемныеДиалогиЕслиПослеИзЗакрытияМожноПродолжитьВыполнениеСценария = НЕ ЗначениеПараметраЗапуска("DisableCloseSystemDialogsThatCanBeSkipped", Ложь);
	
	Если Объект.ДелатьОтчетВФорматеАллюр И Объект.ПодставлятьВОтчетеAllureЗначенияПеременных Тогда
		ЗапоминатьЗначенияПеременыхПриПодстановкеВШаг = Истина;
	Иначе	
		ЗапоминатьЗначенияПеременыхПриПодстановкеВШаг = Ложь;
	КонецЕсли;	 
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если ОстановкаНаПроблемномШаге = Истина Тогда
			ПолучитьVanessaEditor().toggleBreakpoint(НомерСтрокиПроблемногоШага);
		КонецЕсли;	 
		МодульРедакторТекста().ЗагрузитьБрейкпоинтыИзVanessaEditor();
		ТекущаяПозицияVanessaEditor = ПолучитьТекущаяПозицияVanessaEditor();
	КонецЕсли;	 
	
	ДанныеВкладкиРедактора = ДанныеВкладкиРедактора();
	Если ДанныеВкладкиРедактора = Неопределено Тогда
		БрейкпоинтыVanessaEditor = Новый Массив;
		БрейкпоинтыVanessaEditorВиджеты = Новый Массив;
		
		Если ОстановкаНаПроблемномШаге Тогда
			ОстановкаНаПроблемномШаге = Ложь;
			СтрокаДерева = СтрокаДереваПоНомеруСтрокиФичи(НомерСтрокиПроблемногоШага);
			Если СтрокаДерева <> Неопределено Тогда
				СтрокаДерева.БрейкПоинт = Истина;
				ДобавитьБрейкПоинт(СтрокаДерева.ПолныйПуть)
			КонецЕсли;	 
		КонецЕсли;	 
	Иначе	
		БрейкпоинтыVanessaEditor = ДанныеВкладкиРедактора.БрейкпоинтыVanessaEditor;
		БрейкпоинтыVanessaEditorВиджеты = ДанныеВкладкиРедактора.БрейкпоинтыVanessaEditorВиджеты;
		Если Объект.ИспользоватьРедакторVanessaEditor И ОстановкаНаПроблемномШаге Тогда
			ОстановкаНаПроблемномШаге = Ложь;
			БрейкпоинтыVanessaEditor.Добавить(МодульРедакторТекста().ДанныеБрейкПоинта(НомерСтрокиПроблемногоШага, "", Истина));
		КонецЕсли;	 
	КонецЕсли;	 
	
	ЕстьБрейкпоинтыVanessaEditorВиджеты = Ложь;
	Если БрейкпоинтыVanessaEditorВиджеты.Количество() > 0 Тогда
		ЕстьБрейкпоинтыVanessaEditorВиджеты = Истина;
	КонецЕсли;
	
	Если Объект.ИспользоватьРедакторVanessaEditor И БрейкпоинтыVanessaEditor.Количество() > 0 Тогда
		Брейкпоинты.Очистить();
		Для Каждого Элем Из БрейкпоинтыVanessaEditor Цикл
			Если ПустаяСтрока(Элем.ИдВиджета) Тогда
				Брейкпоинты.Добавить(Элем.НомерСтроки);
			КонецЕсли;	 
		КонецЦикла;	 
	КонецЕсли;	 

	УстановленыБрейкПоинты = Ложь;
	Если Брейкпоинты.Количество() > 0 ИЛИ БрейкпоинтыVanessaEditor.Количество() > 0
		ИЛИ БрейкпоинтыVanessaEditorВиджеты.Количество() > 0 Тогда
		УстановленыБрейкПоинты = Истина;
	КонецЕсли;	 
	
	МодульРедакторТекста().ВыключитьЧтениеДанныхТекущейФормыVanessaEditor();
	
	ВыполнениеДиапазонаШаговVanessaEditor = Ложь;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ВыполнениеДиапазонаШаговVanessaEditor") Тогда
		ВыполнениеДиапазонаШаговVanessaEditor = ДопПараметры.ВыполнениеДиапазонаШаговVanessaEditor;
		Если ВыполнениеДиапазонаШаговVanessaEditor Тогда
			ДиапазонСтрокДляВыполненияСценария = Новый Структура;
			ДиапазонСтрокДляВыполненияСценария.Вставить("НачалоДиапазона", ДопПараметры.НачалоДиапазона);
			ДиапазонСтрокДляВыполненияСценария.Вставить("ОкончаниеДиапазона", ДопПараметры.ОкончаниеДиапазона);
			ДопПараметры.Вставить("ДиапазонСтрокДляВыполненияСценария", ДиапазонСтрокДляВыполненияСценария);
		КонецЕсли;
	КонецЕсли;	 
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;	 
	
	ДопПараметры.Вставить("ВыполнениеДиапазонаШаговVanessaEditor", ВыполнениеДиапазонаШаговVanessaEditor);
	
	СчетчикШаговБезТаймера = 0;
	
	ЭтоПример   = Ложь;
	ЭтоКонтекст = Ложь;
	ИдСценарияПоСтрокеШага = ОпределитьИдСценарияПоСтрокеШагаКлиент(Элементы.ДеревоТестов.ТекущиеДанные, ЭтоПример, ЭтоКонтекст);
	
	ТекущаяСтрокаДереваИдСтроки = Неопределено;
	Если Элементы.ДеревоТестов.ТекущиеДанные <> Неопределено Тогда
		НужнаяСтрока = Неопределено;
		ТекущаяСтрокаДереваИдСтроки = ОпределитьИдИсполняемойСтрокиДерева(Элементы.ДеревоТестов.ТекущиеДанные, НужнаяСтрока);
	КонецЕсли;	 
	
	МассивИДСтрокиДерева                     = Новый Соответствие;
	МассивРезультатПрохожденияТестовСценария = Новый Массив;
	
	ИнициализироватьПараметрыСтатистикиТестов();
	
	МассивСценариевДляВыполнения             = Новый Массив;
	МассивСтрокДереваДанныеФормы             = Новый Соответствие;
	
	ЕстьСохранённыйКонтекст = Ложь;
	Если ТекСценарий = Неопределено 
			И (Объект.РежимВыполненияДанногоСценарияСТекущегоШага ИЛИ Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением) Тогда
		ТекСценарий = Новый Массив;
		ТекСценарий.Добавить(ИдСценарияПоСтрокеШага);
	КонецЕсли;	
		
	Если Не ДопПараметры.Свойство("ЭтоПример") Тогда
		ДопПараметры.Вставить("ЭтоПример", ЭтоПример);
	КонецЕсли;	 
	
	ДопПараметры.Вставить("ДобавлятьШаги", Истина);
	ДопПараметры.Вставить("ЭтоLinux", ЭтоLinux);
	ДопПараметры.Вставить("УровеньПодсценария", 0);	
	ДопПараметры.Вставить("ТекстСообщенийПользователю", Объект.ТекстСообщенийПользователю);	
	ДопПараметры.Вставить("РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов", 
		Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов И ЕстьСохранённыйКонтекст);
	ДопПараметры.Вставить("РежимВыполненияДанногоСценарияСТекущегоШага", Объект.РежимВыполненияДанногоСценарияСТекущегоШага);
	ДопПараметры.Вставить("РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением", Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением);
	ДопПараметры.Вставить("РежимВыполненияОдногоШага", Объект.РежимВыполненияОдногоШага);
	ДопПараметры.Вставить("ДобавитьСценарииПослеНайденного", Ложь);
	ДопПараметры.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага", Неопределено);
	Если Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов Тогда
		ДопПараметры.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийССохранениемКонтекстов", СтрокаШагаСКоторогоНадоВыполнятьСценарий.ИдСтроки);
	ИначеЕсли Объект.РежимВыполненияДанногоСценарияСТекущегоШага Тогда
		ДопПараметры.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага", ТекущаяСтрокаДереваИдСтроки);
		ДопПараметры.Вставить("НашелСценарий", Ложь);
	ИначеЕсли Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением Тогда
		ДопПараметры.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага", ТекущаяСтрокаДереваИдСтроки);
		ДопПараметры.Вставить("ДобавитьСценарииПослеНайденного", Истина);
		ДопПараметры.Вставить("НашелСценарий", Ложь);
	ИначеЕсли Объект.РежимВыполненияОдногоШага Тогда
		ДопПараметры.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага", ТекущаяСтрокаДереваИдСтроки);
	КонецЕсли;	 
	
	ДопПараметры.Вставить("ДанныеСекцииПеременные", ДанныеСекцииПеременные);
	ДопПараметры.Вставить("ОзвучиватьВыполнениеСценария", Объект.ОзвучиватьВыполнениеСценария);
	ДопПараметры.Вставить("СоздаватьИнструкциюВидео", Объект.СоздаватьИнструкциюВидео);
	ДопПараметры.Вставить("ВключенРежимОбучения", ВключенРежимОбучения);
	ДопПараметры.Вставить("ЭтоSingle", Объект.ВерсияПоставки = "single");
	ДопПараметры.Вставить("VAОткрытаКакВнешняяОбработка", VAОткрытаКакВнешняяОбработка);
	
	НадоВыполнитьПодсценарий = Ложь;
	Если Объект.РежимВыполненияОдногоШага Тогда
		
		Если НЕ ЗаполненыДанныеДляВыполненияОдногоШага Тогда
			//Эти данные хранятся в дереве. Позволяют определить следующий шаг при переходе по F11.
			
			ТекущийИдСтроки = Неопределено;
			Если Элементы.ДеревоТестов.ТекущиеДанные <> Неопределено  Тогда
				ТекущийИдСтроки = Элементы.ДеревоТестов.ТекущиеДанные.ИдСтроки;
				ИдБрейкпоинты = Брейкпоинты.Найти(Элементы.ДеревоТестов.ТекущиеДанные.НомерСтрокиВФиче);
				Если ИдБрейкпоинты <> Неопределено Тогда
					//Значит на строке, которая сейчас активна установлена точка останова. Строку всё равно надо выполнить.
					Брейкпоинты.Удалить(ИдБрейкпоинты);
				КонецЕсли;	
			КонецЕсли;	 
			
			МассивСценариевДляВыполненияВременный = Новый Массив;
			ДопПараметрыВременый = СкопироватьСтруктуру(ДопПараметры);
			ДопПараметрыВременый.Вставить("РежимВыполненияОдногоШага", Ложь);
			ЗаполнитьМассивСценариевДляВыполненияСервер(МассивСценариевДляВыполненияВременный, МассивСтрокДереваДанныеФормы, 
				Неопределено, МассивИменКонтекстовОбработок, ДопПараметрыВременый);
			ЗаполненыДанныеДляВыполненияОдногоШага = Истина;	
			
			Если ТекущийИдСтроки <> Неопределено Тогда
				НужнаяСтрокаДерева = СтрокаДереваПоИдСтроки(ТекущийИдСтроки);
				Если НужнаяСтрокаДерева <> Неопределено Тогда
					Элементы.ДеревоТестов.ТекущаяСтрока = НужнаяСтрокаДерева.ПолучитьИдентификатор();
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		СтрокаДерева = Неопределено;
		Если Объект.ИспользоватьРедакторVanessaEditor Тогда
			Если Элементы.ДеревоТестов.ТекущиеДанные <> Неопределено  Тогда
				ТекущийИдСтроки = Элементы.ДеревоТестов.ТекущиеДанные.ИдСтроки;
				ИдБрейкпоинты = Брейкпоинты.Найти(Элементы.ДеревоТестов.ТекущиеДанные.НомерСтрокиВФиче);
				Если ИдБрейкпоинты <> Неопределено Тогда
					//Значит на строке, которая сейчас активна установлена точка останова. Строку всё равно надо выполнить.
					Брейкпоинты.Удалить(ИдБрейкпоинты);
				КонецЕсли;	
			КонецЕсли;
			
			ЭтоПодсценарий = МодульРедакторТекста().ТекущаяСтрокаРедактораЭтоПодсценарий(СтрокаДерева);
			Если ЭтоПодсценарий Тогда
				НадоВыполнитьПодсценарий = Истина;
			КонецЕсли;
			
		КонецЕсли;	 
		
		Если НадоВыполнитьПодсценарий Тогда
			ДопПараметры.Вставить("БратьШагиТолькоИзВеткиДерева", СтрокаДерева.ИдСтроки);
			
			ЭтоПример = Ложь;
			ЭтоШагКонтекста = Ложь;
			СтрокаСценария  = НайтиСтрокуСценарияЧерезРодителя(СтрокаДерева, ЭтоПример, ЭтоШагКонтекста);
			
			МассивИДСценариев = Новый Массив;
			МассивИДСценариев.Добавить(СтрокаСценария.ИдСтроки);
			
			ЗаполнитьМассивСценариевДляВыполненияСервер(МассивСценариевДляВыполнения, МассивСтрокДереваДанныеФормы, 
				МассивИДСценариев, МассивИменКонтекстовОбработок, ДопПараметры);
			//Объект.РежимВыполненияОдногоШага = Ложь;
		Иначе	
			Если ТекущаяСтрокаДереваИдСтроки <> Элементы.ДеревоТестов.ТекущиеДанные.ИдСтроки Тогда
				НужнаяСтрока = СтрокаДереваПоИдСтроки(ТекущаяСтрокаДереваИдСтроки);
				Элементы.ДеревоТестов.ТекущаяСтрока = НужнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;	 
			СоздатьСтруктуруПоискаДляСтрокиДерева(Элементы.ДеревоТестов.ТекущиеДанные);
			ЗапомнитьАктивноеОкно(Неопределено);
			ЗаполнитьМассивСценариевДляВыполненияКлиент(МассивСценариевДляВыполнения);
		КонецЕсли;	 
		
	Иначе	
		ЗаполнитьМассивСценариевДляВыполненияСервер(МассивСценариевДляВыполнения, МассивСтрокДереваДанныеФормы, 
			ТекСценарий, МассивИменКонтекстовОбработок, ДопПараметры);
		ЗаполненыДанныеДляВыполненияОдногоШага = Истина;
	КонецЕсли;	 
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если ЭтаФорма.ТекущийЭлемент <> Элементы.VanessaEditor Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.VanessaEditor;
		КонецЕсли;	 
	Иначе	
		Если ЭтаФорма.ТекущийЭлемент <> Элементы.ДеревоТестов Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоТестов;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ЗапомнитьСтрокиДереваДанныеФормы(НадоВыполнитьПодсценарий);
	// Ниже не должно быть серверных вызовов, которые бы изменили ДеревоТестов, иначе кеш данных формы надо будет строить заново
	
	ТекущаяФичаИнструкцииHTML     = "";
	ТекущиеДанныеИнструкцииHTML   = Неопределено;
	ТекущаяФичаИнструкцииMarkdown = "";
	ТекущиеДанныеИнструкцииMarkdown = Неопределено;
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		ВкладкаРедактораВКоторойЗапущеноВыполнениеСценария = ПолучитьVanessaEditor();
		VanessaEditorОчиститьРаскраскуСтрокОбработчик();
	КонецЕсли;	 
	
	Если Объект.ДелатьСкриншотПриВозникновенииОшибки И НЕ
		(Объект.ИспользоватьКомпонентуVanessaExt И Объект.ИспользоватьВнешнююКомпонентуДляСкриншотов) И НЕ Объект.РежимВыполненияОдногоШага Тогда
		Если Не ЗначениеЗаполнено(Объект.КомандаСделатьСкриншот) Тогда
			СообщитьПользователю(ПодставитьПараметрыВСтроку(
				Локализовать("Не указана команада для выполнения скриншотов. Например <%1>"),
				"""C:\Program Files (x86)\IrfanView\i_view32.exe"" /capture=1 /convert="
			));
			Возврат;
		КонецЕсли;	 
		ОчиститьСодержимоеКаталога(Объект.КаталогВыгрузкиСкриншотов, "*.png");
	КонецЕсли;	 
		
	Если Объект.СоздаватьИнструкциюВидео Тогда
		Если Не ЗначениеЗаполнено(Объект.КаталогВыгрузкиИнструкцийВидео) Тогда
			ВызватьИсключение Локализовать("Не указан каталог для формирования видео инструкции.");
		КонецЕсли;	 
		
		ОчиститьСодержимоеКаталога(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийВидео), "*.mp4");
		ОчиститьСодержимоеКаталога(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ЗаписьВидеоКаталогДляВременныхФайлов));
		СписокКаталогов = Новый СписокЗначений;
		СписокФайлов    = Новый СписокЗначений;
		НайтиФайлыКомандаСистемы(Объект.ЗаписьВидеоКаталогДляВременныхФайлов, СписокКаталогов, СписокФайлов, Истина, "*");
		Если СписокФайлов.Количество() > 0 Тогда
			ВызватьИсключение Локализовать(_СтрШаблон("Не получилось очистить каталог <%1>. Возможно файлы заблокированы другими приложениями.", Объект.ЗаписьВидеоКаталогДляВременныхФайлов));
		КонецЕсли;	
		ВыполнитьПодготовкуКЗаписиВидео();
	КонецЕсли;	 
	
	Если Объект.ЗаписыватьВидеоВыполненияТестов И Объект.ИспользоватьКомпонентуVanessaExt Тогда
		Если НЕ ПустаяСтрока(Объект.КаталогДляЗаписиВидеоВыполненияТестов) Тогда
			ОчиститьСодержимоеКаталога(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогДляЗаписиВидеоВыполненияТестов), "*.mp4");
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Объект.СоздаватьИнструкциюHTML Тогда
		Если ЗапрещеныСинхронныеВызовы И Объект.ИспользоватьКомпонентуVanessaExt И Объект.ИспользоватьВнешнююКомпонентуДляСкриншотов Тогда
			ВызватьИсключение "Для создания HTML инструкций необходимо использовать внешнюю программу для снятия скриншотов или разрешить синхронные вызовы.";
		КонецЕсли;	 
		ОчиститьСодержимоеКаталога(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийHTML));
	КонецЕсли;	 
	
	Если Объект.СоздаватьИнструкциюMarkdown Тогда
		Если ЗапрещеныСинхронныеВызовы И Объект.ИспользоватьКомпонентуVanessaExt И Объект.ИспользоватьВнешнююКомпонентуДляСкриншотов Тогда
			ВызватьИсключение "Для создания Markdown инструкций необходимо использовать внешнюю программу для снятия скриншотов или разрешить синхронные вызовы.";
		КонецЕсли;	 
		ОчиститьСодержимоеКаталога(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийMarkdown));
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеАллюр Тогда
		// TODO: Процедура ВыполнитьСценарии #475
		Если ПустаяСтрока(Объект.КаталогВыгрузкиAllure) И ПустаяСтрока(Объект.КаталогВыгрузкиAllureБазовый) Тогда
			СообщитьПользователю(Локализовать("Не задан каталог отчета Allure."));
		Иначе
			Если ЗначениеЗаполнено(Объект.КаталогВыгрузкиAllure) Тогда
				СоздатьКаталогЕслиЕгоНет(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиAllure)); // тут уже не должно быть относительных путей		
			КонецЕсли;	
			Если ЗначениеЗаполнено(Объект.КаталогВыгрузкиAllureБазовый) Тогда
				СоздатьКаталогЕслиЕгоНет(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиAllureБазовый)); // тут уже не должно быть относительных путей		
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.КаталогВыгрузкиAllure) И НЕ Объект.ЗапускИзКоманднойСтроки Тогда
			Попытка
				ОчиститьСодержимоеКаталога(Объект.КаталогВыгрузкиAllure);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеjUnit Тогда
		СоздатьКаталогЕслиЕгоНет(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиJUnit));
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеСППР Тогда
		СоздатьКаталогЕслиЕгоНет(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиСППР));
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеCucumberJson Тогда
		СоздатьКаталогЕслиЕгоНет(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиCucumberJson));
	КонецЕсли;	 
	
	Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл 
			И ФайлСуществуетКомандаСистемы(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ИмяФайлаЛогВыполненияСценариев)) 
			И (Не ЭтоLinux Или Объект.ИмяФайлаЛогВыполненияСценариев <> "/dev/stdout") Тогда
			
		Если НЕ ЭтоКаталогКомандаСистемы(Объект.ИмяФайлаЛогВыполненияСценариев) Тогда
			УдалитьФайлыКомандаСистемы(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ИмяФайлаЛогВыполненияСценариев));
		КонецЕсли;	 
	КонецЕсли;
	
	Если Объект.ДелатьЛогОшибокВТекстовыйФайл 
			И ФайлСуществуетКомандаСистемы(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ИмяКаталогаЛогОшибок)) Тогда
		ОчиститьСодержимоеКаталога(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ИмяКаталогаЛогОшибок));
	КонецЕсли;	 
	
	Если Объект.СоздаватьИнструкциюВидео ИЛИ Объект.ОзвучиватьВыполнениеСценария ИЛИ ВключенРежимОбучения Тогда
		ПрочитатьИзФичиПараметрыСборкиВидео();
	КонецЕсли;	 
	
	ВключитьАнимациюКликовМышки();
	
	Если НужноПоказатьОкноОстановкиВыполненияСценария() Тогда
		ПоказатьОкноОстановкиВыполненияСценария();
	КонецЕсли;	 
	
	Если ВыполнятьСценарииАсинхронно Тогда
		ТекИД_СценарияВМассиве = -1;
		Если Объект.НомерПервогоСценарияДляЗапуска > 0 Тогда
			Если МассивСценариевДляВыполнения.Количество() < Объект.НомерПервогоСценарияДляЗапуска Тогда
				ВызватьИсключение ПодставитьПараметрыВСтроку(
					Локализовать("Обнаружена попытка начать выполнение сценариев начиная со сценария №<%1>, но найдено только <%2> сценариев."),
					Объект.НомерПервогоСценарияДляЗапуска, МассивСценариевДляВыполнения.Количество() 
				);
			КонецЕсли;	
			// НомерПервогоСценарияДляЗапуска начинается с 1.
			// Также ТекИД_СценарияВМассиве будет увеличен далее по коду.
			// Поэтому надо делать минус 2.
			ТекИД_СценарияВМассиве = Объект.НомерПервогоСценарияДляЗапуска - 2;
		КонецЕсли;	
		ПерейтиКВыполнениюСледующегоСценария();
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДанныйСценарийСТекущегоШага() Экспорт
	Если Объект.ИдетВыполнениеСценариев Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
			Возврат;
		КонецЕсли;	 
		Если НЕ МодульРедакторТекста().МожноЗапуститьСценарийИзДаннойВкладки() Тогда
			СообщитьПользователю(Локализовать("Для выполнения данного действия необходимо сохранить файл."));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ДеревоБудетПерезагружено("ВыполнитьДанныйСценарийСТекущегоШага") Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если НЕ МодульРедакторТекста().АктивизироватьСтрокуДереваСоответствующуюVanessaEditor() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	 
	
	УдалитьИзКонтекстаСчетчикиЦиклов();
	
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Истина;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоТестов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЭтуСтрокуМожноИсполнитьИлиВНейЕстьПодчиненныеИсполняемыеСтроки(ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;	 
	
	ВыполнитьСценарии();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДанныйСценарийСТекущегоШагаСПродолжением() Экспорт
	Если Объект.ИдетВыполнениеСценариев Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
			Возврат;
		КонецЕсли;	 
		Если НЕ МодульРедакторТекста().МожноЗапуститьСценарийИзДаннойВкладки() Тогда
			СообщитьПользователю(Локализовать("Для выполнения данного действия необходимо сохранить файл."));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ДеревоБудетПерезагружено("ВыполнитьДанныйСценарийСТекущегоШагаСПродолжением") Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если НЕ МодульРедакторТекста().АктивизироватьСтрокуДереваСоответствующуюVanessaEditor() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	 
	
	ТекущиеДанные = Элементы.ДеревоТестов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	

	Если НЕ ЭтуСтрокуМожноИсполнитьИлиВНейЕстьПодчиненныеИсполняемыеСтроки(ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;	 
	
	УдалитьИзКонтекстаСчетчикиЦиклов();
	
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Истина;
	Объект.РежимВыполненияОдногоШага                                = Ложь;
	
	ВыполнитьСценарии();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОдинШаг() Экспорт
	Если Объект.ИдетВыполнениеСценариев Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
			Возврат;
		КонецЕсли;	 
		Если НЕ МодульРедакторТекста().МожноЗапуститьСценарийИзДаннойВкладки() Тогда
			СообщитьПользователю(Локализовать("Для выполнения данного действия необходимо сохранить файл."));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 

	Если ДеревоБудетПерезагружено("ВыполнитьОдинШаг") Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если НЕ МодульРедакторТекста().АктивизироватьСтрокуДереваСоответствующуюVanessaEditor() Тогда
			Возврат;
		КонецЕсли;	 
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоТестов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЭтуСтрокуМожноИсполнитьИлиВНейЕстьПодчиненныеИсполняемыеСтроки(ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ТекущиеДанные.ДопТип = "УсловиеИначе" ИЛИ ТекущиеДанные.ДопТип = "Попытка" ИЛИ ТекущиеДанные.ДопТип = "Исключение" Тогда
		Возврат;
	КонецЕсли;	 
	
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Истина;
	
	ВыполнитьСценарии();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыделенныйСценарий() Экспорт
	Если Объект.ИдетВыполнениеСценариев Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
			Возврат;
		КонецЕсли;	 
		Если НЕ МодульРедакторТекста().МожноЗапуститьСценарийИзДаннойВкладки() Тогда
			СообщитьПользователю(Локализовать("Для выполнения данного действия необходимо сохранить файл."));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ДеревоБудетПерезагружено("ВыполнитьВыделенныйСценарий") Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если НЕ МодульРедакторТекста().АктивизироватьСтрокуДереваСоответствующуюVanessaEditor() Тогда
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Ложь;
	
	СтрокаСценария = Элементы.ДеревоТестов.ТекущиеДанные;
	Если СтрокаСценария = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЭтоПример = Ложь;
	Если СтрокаСценария.Тип <> "Сценарий" Тогда
		ЭтоШагКонтекста = Ложь;
		СтрокаСценария = НайтиСтрокуСценарияЧерезРодителя(СтрокаСценария, ЭтоПример, ЭтоШагКонтекста);
		Если СтрокаСценария = Неопределено Тогда
			СообщитьПользователю(Локализовать("Не найдена строка сценария."));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ЭтоПример", ЭтоПример);
	
	Массив = Новый Массив;
	Массив.Добавить(СтрокаСценария.ИДСтроки);
	ВыполнитьСценарии(Массив, ДопПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ПерезагрузитьИВыполнитьДанныйСценарий() Экспорт
	Если Объект.ИдетВыполнениеСценариев Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
			Возврат;
		КонецЕсли;	 
		Если НЕ МодульРедакторТекста().МожноЗапуститьСценарийИзДаннойВкладки() Тогда
			СообщитьПользователю(Локализовать("Для выполнения данного действия необходимо сохранить файл."));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 

	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Ложь;
	
	СтрокаСценария = Элементы.ДеревоТестов.ТекущиеДанные;
	Если СтрокаСценария = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЭтоПример = Ложь;
	Если СтрокаСценария.Тип <> "Сценарий" Тогда
		ЭтоШагКонтекста = Ложь;
		СтрокаСценария = НайтиСтрокуСценарияЧерезРодителя(СтрокаСценария, ЭтоПример, ЭтоШагКонтекста);
		Если СтрокаСценария = Неопределено Тогда
			СообщитьПользователю(Локализовать("Не найдена строка сценария."));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ИмяСценарияКоторыйНадоВыполнитьПослеПерезагрузки             = СтрокаСценария.Имя;
	СтрокаСценарияКоторыйНадоВыполнитьПослеПереазгрузкиЭтоПример = ЭтоПример;
	Объект.ВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Истина;
	
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагОстановкиВыполненияШаговВсехСценариев() Экспорт
	ПрекратитьВыполнениеВсехСценариев = Истина;
КонецПроцедуры

// Останавливает выполнение сценария, который выполняется в данный момент.
// Параметр СтатусСценария является необязательным. Если передан, то он установит статус сценария в отчете Allure.
&НаКлиенте
Процедура УстановитьФлагОстановкиВыполненияШаговОдногоСценария(СтатусСценария = Неопределено) Экспорт
	Если СтатусСценария <> Неопределено Тогда
		СтатусСценарияНРег = НРег(СтатусСценария);
		НужныйСтатус = Неопределено;
		Если СтатусСценарияНРег <> "passed"
			И СтатусСценарияНРег <> "broken"
			И СтатусСценарияНРег <> "failed"
			И СтатусСценарияНРег <> "skipped"
			И СтатусСценарияНРег <> "pending"
			Тогда
				ВызватьИсключение ПодставитьПараметрыВСтроку(
					Локализовать("Передано недопустимое значение статуса сценария <%1>."),
					СтатусСценария
				);
		КонецЕсли;	 
		
		Если СтатусСценарияНРег = "passed" Тогда
			НужныйСтатус = "Success";
		ИначеЕсли СтатусСценарияНРег = "broken" Тогда
			НужныйСтатус = "Broken";
		ИначеЕсли СтатусСценарияНРег = "failed" Тогда
			НужныйСтатус = "Failed";
		ИначеЕсли СтатусСценарияНРег = "skipped" Тогда
			НужныйСтатус = "Skipped";
		ИначеЕсли СтатусСценарияНРег = "pending" Тогда
			НужныйСтатус = "Pending";
		КонецЕсли;	 
		
		ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		РезультатПрохожденияТестовСценария.Вставить("УстановленСтатусВручную", НужныйСтатус);
		
	КонецЕсли;	 
	ПрекратитьВыполнениеДанногоСценария = Истина;
КонецПроцедуры

// Останавливает выполнение сценариев данной фичи. Сценарии других фич выполняться будут.
&НаКлиенте
Процедура УстановитьФлагОстановкиВыполненияСценариевДаннойФичи() Экспорт
	ПрекратитьВыполнениеСценариевДаннойФичи = Истина;
	СостояниеVanessaAutomation = ПолучитьСостояниеVanessaAutomation();
	ИмяФайлаФичиВКоторойПрекращеноВыполнениеСценариев = СостояниеVanessaAutomation.ТекущаяФича.ПолныйПуть;
КонецПроцедуры

&НаКлиенте
// Возвращает Истина, если всё ещё идёт выполнение сценариев.
// Используется, чтобы шаги, подключающие обработчик ожидания могли корректно обработать остановку сценариев.
Функция ИдетВыполнениеСценариев() Экспорт
	Возврат Объект.ИдетВыполнениеСценариев; 
КонецФункции	 

// Метод вызывается, чтобы установить признак прерывания цикла
&НаКлиенте
Процедура УстановитьПризнакЧтоСледующимШагомДолженБытьШагЦикла() Экспорт
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат;
	КонецЕсли;	 
	
	Шаги   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	ТекШаг = Шаги[ТекИД_ШагаВМассиве];
	Попытка
		СтрокаДерева = ПолучитьСтрокуШагаИзДанныхФормы(ТекШаг.ИдСтроки);
	Исключение
		ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(,, Истина);
		СтрокаДерева = ПолучитьСтрокуШагаИзДанныхФормы(ТекШаг.ИдСтроки);
	КонецПопытки;
	
	ИдСтрокиЦикла = Неопределено;
	ТекРодитель = СтрокаДерева.ПолучитьРодителя();
	Пока Истина Цикл
		Если ТекРодитель = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		Если ТекРодитель.ДопТип = "Цикл" Тогда
			ИдСтрокиЦикла = ТекРодитель.ИдСтроки;
			Прервать;
		КонецЕсли;	 
		
		ТекРодитель = ТекРодитель.ПолучитьРодителя();
	КонецЦикла;	
	
	Если ИдСтрокиЦикла = Неопределено Тогда
		ВызватьИсключение Локализовать("Не найден цикл для прерывания.");
	КонецЕсли;	
	
	ИдСтрокиДляВыполненияСледующегоШага = ИдСтрокиЦикла;
	
КонецПроцедуры 

// Возвращает текст ошибки, возникший в конструкции языка сценариев Попытка/Исключение или в шаге, проверяющего другой шаг на исключение
&НаКлиенте
Функция ПолучитьТекстОшибкиВозникшейВИсключении() Экспорт
	Возврат ТекстОшибкиВозникшейВИсключении; 
КонецФункции	 

// Устанавливает текст ошибки, возникший в конструкции языка сценариев Попытка/Исключение или в шаге, проверяющего другой шаг на исключение
&НаКлиенте
Процедура УстановитьТекстОшибкиВозникшейВИсключении(Стр) Экспорт
	ТекстОшибкиВозникшейВИсключении = Стр;
КонецПроцедуры

// Возвращает состояние выполнение сценариев по ид строки дерева
&НаКлиенте
Функция ПолучитьРезультатПрохожденияТестовСценария(ИДСтроки) Экспорт
	ИД = МассивИДСтрокиДерева[ИДСтроки];
	Если ИД = Неопределено  Тогда
		СообщитьПользователю(Локализовать("Неизвестная ошибка в ПолучитьРезультатПрохожденияТестовСценария."));
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат МассивРезультатПрохожденияТестовСценария[ИД]; 
КонецФункции

// Возвращает состояние выполнение сценариев по ид сценария
&НаКлиенте
Функция ПолучитьРезультатПрохожденияТестовСценарияПоНомеруСценария(ТекИД_СценарияВМассиве) Экспорт
	ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	Возврат ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
КонецФункции

// Возвращает статус предыдущего сценария
&НаКлиенте
Функция СтатусПредыдущегоСценария() Экспорт
	СостояниеVanessaAutomation = ПолучитьСостояниеVanessaAutomation();
	
	Если СостояниеVanessaAutomation.ТекущийСценарий.ИдСценария >= 1 Тогда
		РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценарияПоНомеруСценария(СостояниеVanessaAutomation.ТекущийСценарий.ИдСценария-1);
		Возврат РезультатПрохожденияТестовСценария.Статус;
	Иначе
		Возврат "Success"; 
	КонецЕсли;	 
	
КонецФункции	  

// Выполняет проверку, что нужно остановить выполнение сценариев, например, если пользователь нажал на кнопку Стоп
&НаКлиенте
Функция ВыполнениеСценариевБудетОстановлено() Экспорт
	
	Если ИмяФайлаОстановкаВыполненияСценария <> Неопределено И Объект.ИспользоватьДляОстановкиВыполненияСценарияФайл Тогда
		Если ФайлСуществуетКомандаСистемы(ИмяФайлаОстановкаВыполненияСценария) Тогда
			Попытка
				УдалитьФайлыКомандаСистемы(ИмяФайлаОстановкаВыполненияСценария);
			Исключение
			КонецПопытки;
			
			КомандаОстановитьСценарии();
			
			Возврат Истина;
			
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	

#КонецОбласти

#Область УправлениеСостояниемVA_EN

// Возвращает структуру, позволяющую понять состояние выполнения шагов.
//
// СостояниеVanessaAutomation.ТекущаяФича.Имя - Имя фичи
// СостояниеVanessaAutomation.ТекущаяФича.ПолныйПуть - Полный путь к фича файлу.
// СостояниеVanessaAutomation.ТекущаяФича.Каталог - Каталог, где находится фича файл.
//
// СостояниеVanessaAutomation.ТекущийСценарий.Имя - Имя сценария.
// СостояниеVanessaAutomation.ТекущийСценарий.ИдСценария - Внутренний ИД сценария.
//
// СостояниеVanessaAutomation.ТекущийШаг.Имя - Имя текущего шага.
// СостояниеVanessaAutomation.ТекущийШаг.ИдСтроки - ИД строки в дереве шагов.
// СостояниеVanessaAutomation.ТекущийШаг.ЗначенияПараметров - Значения параметров шага.
// СостояниеVanessaAutomation.ТекущийШаг.НомерСтрокиФичи - Номер строки в фича файле для этого шага.
// СостояниеVanessaAutomation.ТекущийШаг.МассивТеговШага - Теги данного шага.
// СостояниеVanessaAutomation.ТекущийШаг.МассивКомментариевШага - Комментарии данного шага.
// СостояниеVanessaAutomation.ТекущийШаг.ЭтоШагКонтекста - Флаг того, что это шаг контекста.
&НаКлиенте
Функция GetVanessaAutomationState() Экспорт
	Возврат ПолучитьСостояниеVanessaAutomation();
КонецФункции

&НаКлиенте
Процедура StopRunning() Экспорт
	ЗапретитьВыполнениеШагов();
КонецПроцедуры

&НаКлиенте
Процедура ContinueRunning(IsError = Ложь, ErrorDescription = "") Экспорт
	ПродолжитьВыполнениеШагов(IsError, ErrorDescription);
КонецПроцедуры

// Позволяет вызывающей системе указать, что нужно прервать выполнени сценария
&НаКлиенте
Процедура AddError(ErrorDescription) Экспорт
	ДобавитьОшибкуСценария(ErrorDescription);
КонецПроцедуры

#КонецОбласти

#Область УправлениеСостояниемVA_RU

// Возвращает структуру, позволяющую понять состояние выполнения шагов.
//
// СостояниеVanessaAutomation.ТекущаяФича.Имя - Имя фичи
// СостояниеVanessaAutomation.ТекущаяФича.ПолныйПуть - Полный путь к фича файлу.
// СостояниеVanessaAutomation.ТекущаяФича.Каталог - Каталог, где находится фича файл.
// СостояниеVanessaAutomation.ТекущаяФича.ЯзыкФичи - Язык фича файла в виде ru, en и т.д.
//
// СостояниеVanessaAutomation.ТекущийСценарий.Имя - Имя сценария.
// СостояниеVanessaAutomation.ТекущийСценарий.ИдСценария - Внутренний ИД сценария.
//
// СостояниеVanessaAutomation.ТекущийШаг.Имя - Имя текущего шага.
// СостояниеVanessaAutomation.ТекущийШаг.ИдСтроки - ИД строки в дереве шагов.
// СостояниеVanessaAutomation.ТекущийШаг.ЗначенияПараметров - Значения параметров шага.
// СостояниеVanessaAutomation.ТекущийШаг.НомерСтрокиФичи - Номер строки в фича файле для этого шага.
// СостояниеVanessaAutomation.ТекущийШаг.МассивТеговШага - Теги данного шага.
// СостояниеVanessaAutomation.ТекущийШаг.МассивКомментариевШага - Комментарии данного шага.
// СостояниеVanessaAutomation.ТекущийШаг.ЭтоШагКонтекста - Флаг того, что это шаг контекста.
&НаКлиенте
Функция ПолучитьСостояниеVanessaAutomation() Экспорт 
	Рез = Новый Структура;
	
	ИДСтрокиСценария = Неопределено;
	
	ТекущаяФича = Новый Структура;
	ТекущаяФича.Вставить("Имя", Неопределено);
	ТекущаяФича.Вставить("ПолныйПуть", Неопределено);
	
	ТекущийСценарий = Новый Структура;
	ТекущийСценарий.Вставить("Имя", Неопределено);
	ТекущийСценарий.Вставить("ИдСценария", Неопределено);
	Если ТекИД_СценарияВМассиве <> Неопределено И ТекИД_СценарияВМассиве <= МассивСценариевДляВыполнения.Количество() - 1 Тогда
		ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		ТекущийСценарий.Вставить("ОписаниеСценария", МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве]);
		ТекущийСценарий.Вставить("РезультатПрохожденияТестовСценария", РезультатПрохожденияТестовСценария);
	КонецЕсли;	 
	
	ТекущийШаг = Новый Структура;
	ТекущийШаг.Вставить("Имя", Неопределено);
	ТекущийШаг.Вставить("ЗначенияПараметров", Неопределено);
	ТекущийШаг.Вставить("ИдСтроки", Неопределено);
	ТекущийШаг.Вставить("ЭтоОбычныйШагОбернутыйВУсловие", Неопределено);
	
	Рез.Вставить("ТекущаяФича", ТекущаяФича);
	Рез.Вставить("ТекущийСценарий", ТекущийСценарий);
	Рез.Вставить("ТекущийШаг", ТекущийШаг);
	
	Если ТекИД_СценарияВМассиве = Неопределено ИЛИ (МассивСценариевДляВыполнения.Количество() - 1) < ТекИД_СценарияВМассиве Тогда
		//Особый случай. Скоре всего это метод Шаг()
		ТекущаяФича.Вставить("ЯзыкФичи", Объект.ЯзыкГенератораGherkin);
		Возврат Рез;
	КонецЕсли;	 
	
	ТекущийСценарий.Вставить("Имя", МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Имя);
	ТекущийСценарий.Вставить("ИдСценария", ТекИД_СценарияВМассиве);
	ТекущийСценарий.Вставить("МассивТегов", Новый Массив);

	Если ИДСтрокиСценария <> Неопределено Тогда
		СтрокаСценария   = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
		Если СтрокаСценария <> Неопределено Тогда
			Если ТипЗнч(СтрокаСценария.ПроизвольныеЗначения) = Тип("Структура") Тогда
				Если СтрокаСценария.ПроизвольныеЗначения.Свойство("МассивТегов") Тогда
					ТекущийСценарий.Вставить("МассивТегов", СтрокаСценария.ПроизвольныеЗначения.МассивТегов);
				КонецЕсли;	
			КонецЕсли;
			СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаСценария);
			Если СтрокаФичи <> Неопределено Тогда
				Если ТипЗнч(СтрокаФичи.ПроизвольныеЗначения) = Тип("Структура") Тогда
					Если СтрокаФичи.ПроизвольныеЗначения.Свойство("МассивТегов") Тогда
						ТекущаяФича.Вставить("МассивТегов", СтрокаФичи.ПроизвольныеЗначения.МассивТегов);
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	ТекущаяФича.Вставить("Имя", МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИмяФичи);
	ТекущаяФича.Вставить("ПолныйПуть", МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ПолныйПутьКФиче);
	Файл = Новый Файл(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ПолныйПутьКФиче);
	ТекущаяФича.Вставить("Каталог", Файл.Путь);
	ТекущаяФича.Вставить("ЯзыкФичи", МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ЯзыкФичи);
	Если ТипЗнч(ДанныеСекцииПеременные) = Тип("Структура") Тогда
		ИмяФичи = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ПолныйПутьКФиче;
		ЕстьСекцияПеременные = ВФичеЕстьСекцияПеременные(ИмяФичи, ДанныеСекцииПеременные);
		ТекущаяФича.Вставить("ЕстьСекцияПеременные", ЕстьСекцияПеременные);
		Если ЕстьСекцияПеременные Тогда
			ТекущаяФича.Вставить("ТаблицыПеременных", ДанныеСекцииПеременные.ТаблицыПеременных[УниверсальноеПолноеИмяФайла(ИмяФичи, Истина)]);
		Иначе	
			ТекущаяФича.Вставить("ТаблицыПеременных", Неопределено);
		КонецЕсли;	 
	Иначе	
		ТекущаяФича.Вставить("ЕстьСекцияПеременные", Ложь);
		ТекущаяФича.Вставить("ТаблицыПеременных", Неопределено);
	КонецЕсли;	 
	
	Шаги   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	
	Если (Шаги.Количество() - 1) < ТекИД_ШагаВМассиве Тогда
		Возврат Рез;
	КонецЕсли;	 
	
	Если ТекИД_ШагаВМассиве < 0 Тогда
		Возврат Рез;
	КонецЕсли;	 
	
	ТекШаг = Шаги[ТекИД_ШагаВМассиве];
	ТекущийШаг.Вставить("Имя", ТекШаг.Имя);
	ТекущийШаг.Вставить("ИдСтроки", ТекШаг.СтрокаШага);
	ТекущийШаг.Вставить("ЗначенияПараметров", ТекШаг.ЗначенияПараметров.Скопировать());
	ТекущийШаг.Вставить("НомерСтрокиФичи", ТекШаг.НомерСтрокиВФиче);
	Если ТекШаг.Свойство("МассивТеговШага") Тогда
		ТекущийШаг.Вставить("МассивТеговШага", ТекШаг.МассивТеговШага);
	Иначе	
		ТекущийШаг.Вставить("МассивТеговШага", Новый Массив);
	КонецЕсли;
	Если ТекШаг.Свойство("МассивКомментариевШага") Тогда
		ТекущийШаг.Вставить("МассивКомментариевШага", ТекШаг.МассивКомментариевШага);
	Иначе	
		ТекущийШаг.Вставить("МассивКомментариевШага", Новый Массив);
	КонецЕсли;	
	Если ТекШаг.Свойство("ЭтоШагКонтекста") Тогда
		ТекущийШаг.Вставить("ЭтоШагКонтекста", ТекШаг.ЭтоШагКонтекста);
	Иначе	
		ТекущийШаг.Вставить("ЭтоШагКонтекста", Ложь);
	КонецЕсли;	
	Если ТекШаг.Свойство("ЭтоОбычныйШагОбернутыйВУсловие") Тогда
		ТекущийШаг.Вставить("ЭтоОбычныйШагОбернутыйВУсловие", ТекШаг.ЭтоОбычныйШагОбернутыйВУсловие);
	Иначе	
		ТекущийШаг.Вставить("ЭтоОбычныйШагОбернутыйВУсловие", Ложь);
	КонецЕсли;	 
	
	Возврат Рез;
КонецФункции	 

&НаКлиенте
Процедура ЗапретитьВыполнениеШагов() Экспорт
	ОстановитьВыполнениеШагов = Истина;
	АктивизироватьСтрокуДереваТекущегоШага();
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыполнениеШагов(Знач ШагУпал = Ложь, ОписаниеОшибки = "") Экспорт
	Если ОстановитьВыполнениеШагов <> Истина Тогда
		ВызватьИсключение Локализовать("Вызвано продолжение шагов, но не было остановки выполения шагов.");
	КонецЕсли;
	
	ОстановитьВыполнениеШагов = Ложь;
	
	ШагУпалВСекцииПопыткаИсключение = Ложь;
	ТекШаг = Неопределено;
	ИдСледующегоаШага = Неопределено;
	
	Если МассивСценариевДляВыполнения <> Неопределено
		И ТекИД_СценарияВМассиве <> Неопределено
		И ТекИД_ШагаВМассиве <> Неопределено
		И ТекИД_СценарияВМассиве >=0
		И ТекИД_ШагаВМассиве >= 0
		И (МассивСценариевДляВыполнения.Количество() - 1) >= ТекИД_СценарияВМассиве Тогда
		
		Если ШагУпал Тогда
			Если НаЭкранеСистемныйДиалогКоторыйМожноЗакрытьИПродолжитьСценарий() Тогда
				Если ЗакрытьСистемныйДиалогКоторыйМешаетПродолжитьСценарий() Тогда
					sleep(1);
					ДанныеСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве];
					ТекШаг = ДанныеСценария.Шаги[ТекИД_ШагаВМассиве];
					СлужебныеДанные = Новый Структура;
					СлужебныеДанные.Вставить("ИД", ТекШаг.ИдСтроки);
					СлужебныеДанные.Вставить("ИскатьПоИдСтроки", Истина);
					ПерейтиКВыполнениюСледующегоШага(Истина, Истина, СлужебныеДанные);
					Возврат;
				КонецЕсли;	
			КонецЕсли;		
		КонецЕсли;
		
		Если (МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги.Количество() - 1) >= ТекИД_ШагаВМассиве Тогда
			ДанныеСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве];
			ТекШаг = ДанныеСценария.Шаги[ТекИД_ШагаВМассиве];
			
			ЭтоОбычныйШагОбернутыйВУсловие = Ложь;
			Если ТекШаг.Свойство("ЭтоОбычныйШагОбернутыйВУсловие") Тогда
				ЭтоОбычныйШагОбернутыйВУсловие = ТекШаг.ЭтоОбычныйШагОбернутыйВУсловие;
				Если ЭтоОбычныйШагОбернутыйВУсловие И ШагУпал Тогда
					УстановитьРезультатУсловия(Ложь);
					ШагУпал = Ложь;
				КонецЕсли;	 
			КонецЕсли;	 
			
			ИДСтрокиШага                       = ТекШаг.СтрокаШага;
			ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
			РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
			
			Если ШагУпал И ТекШаг.Свойство("ВПопытке") И ТекШаг.ВПопытке И НЕ ЭтоОбычныйШагОбернутыйВУсловие Тогда
				ШагУпал = Ложь;
				ТекШаг.Вставить("ШагУпалВСекцииПопыткаИсключение", Истина);
				ШагУпалВСекцииПопыткаИсключение = Истина;
				ОписаниеОшибкиСтр = ОписаниеОшибки;
				ИнфоОбОшибке = Неопределено;
				ТекстИсключенияПлатформы = "";
				СтрОшибка = СформироватьОписаниеОшибки(ОписаниеОшибкиСтр, ТекШаг.АдресСнипета, ТекШаг.СтрокаРеальнойПроцедуры, ИнфоОбОшибке, ТекстИсключенияПлатформы);
				ТекШаг.Вставить("ТекстИсключенияПлатформы", ТекстИсключенияПлатформы);
				ЗаписатьВЖРДанныеОНастройкахVanessaAutomation();
				ПодробноеПредставлениеОшибки = СтрОшибка;
				ОписаниеОшибкиКраткоVanessaEditor = МодульРедакторТекста().ОписаниеОшибкиКраткоVanessaEditor(ОписаниеОшибкиСтр);
				ТекстОшибкиВозникшейВИсключении = ОписаниеОшибкиКраткоVanessaEditor;
				ЗаписатьЛогВЖРИнформация("ВыполнитьШаг.ПопыткаИсключение", ТекШаг.Имя + Символы.ПС + СтрОшибка);
				ЗаписатьЛогВЖРИнформация("ВыполнитьШаг.СтекВызова", ПодробноеПредставлениеОшибки);
				ТекШаг.Вставить("ОписаниеОшибки", ПодробноеПредставлениеОшибки);
				
				Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл И НЕ Объект.РежимСамотестирования Тогда
					ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(ПодставитьПараметрыВСтроку(
					Локализовать("Шаг упал в секции Попытка/Исключение: <%1>"),
					ТекШаг.Имя
					));
					ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(СтрОшибка + Символы.ПС);
				КонецЕсли;
				
				РезультатПрохожденияТестовСценария.Вставить("ШагУпавшийВПопыткеИсключении", ТекШаг);
			ИначеЕсли ШагУпал Тогда	
				РезультатПрохожденияТестовСценария.Вставить("ВозниклаОшибкаВШагеНеВСекцииИсключение", Истина);
			КонецЕсли;	 
			
			ИдСледующегоШага = ПолучитьИдСледующегоШага(ТекШаг);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
		ЗаписатьЛогВЖРИнформация("ПродолжитьВыполнениеШагов", ПодставитьПараметрыВСтроку(
			Локализовать("ШагУпал=%1; ВсёЕщёИдётВыполнениеШагов=%2; ОписаниеОшибки=%3;"),
			ШагУпал,
			ВсёЕщёИдётВыполнениеШагов,
			ОписаниеОшибки
		));
	КонецЕсли;	 
	
	Если ШагУпал Тогда
		УстановитьТекущемуШагуФлагЧтоОнДолженСчитатьсяУпавшим(ОписаниеОшибки, Ложь);
	Иначе	
		Если ТипЗнч(ОшибкиАссертов) = Тип("Массив") Тогда
			Если ОшибкиАссертов.Количество() > 0 Тогда
				ЗначениеExpected = ОшибкиАссертов[0].ЗначениеExpected;
				ЗначениеActual   = ОшибкиАссертов[0].ЗначениеActual;
				ОписаниеОшибки   = ОшибкиАссертов[0].ОписаниеОшибки;
				
				УстановитьТекущемуШагуФлагЧтоОнДолженСчитатьсяУпавшим(ОписаниеОшибки, Истина);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;
	
	Если ОшибкиСценарияПереданныеИзвне.Количество() > 0 Тогда
		СтрокаИсключения = СтрокаИсключенияОшибкиСценарияПереданныеИзвне();
		УстановитьТекущемуШагуФлагЧтоОнДолженСчитатьсяУпавшим(СтрокаИсключения, Истина);
	КонецЕсли;	 
	
	Если ВсёЕщёИдётВыполнениеШагов > 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	Если МассивСценариевДляВыполнения <> Неопределено Тогда
		Если (МассивСценариевДляВыполнения.Количество() - 1) < ТекИД_СценарияВМассиве Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли; 
	
	Если ТекШаг <> Неопределено И Объект.ИспользоватьРедакторVanessaEditor Тогда
		Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		
		ИдШагаДляРаскраскиТекущим = ОпределитьИдШагаДляРаскраскиТекущим(Шаги, ТекШаг, ИдСледующегоШага, ДанныеСценария);
		
		Если ИдШагаДляРаскраскиТекущим <> Неопределено И ИдШагаДляРаскраскиТекущим <= Шаги.Количество()-1 Тогда
			МодульРедакторТекста().УстановитьТекущийШагVanessaEditor(Шаги[ИдШагаДляРаскраскиТекущим]);
		ИначеЕсли ИдШагаДляРаскраскиТекущим = Неопределено Тогда
			ПолучитьVanessaEditor().setCurrentProgress(0);
		КонецЕсли;	 
		МодульРедакторТекста().УстановитьВыполненныйШагVanessaEditor(ТекШаг);
		
	КонецЕсли;	 
	
	Если ТекШаг <> Неопределено И НЕ ШагУпал И ТекШаг.Свойство("НадоСнятьСкриншотШагаПослеВыполнения")
	    	И ТекШаг.НадоСнятьСкриншотШагаПослеВыполнения Тогда
		// снятие скриншота шага, если указан тег @screenshot
		ДопПараметрыСкриншота = Новый Структура;
		ДопПараметрыСкриншота.Вставить("ИмяПроцедуры","ПерейтиКВыполнениюСледующегоШагаОбработчик");
		ДопПараметрыСкриншота.Вставить("ЭтоСкриншотПередВыполнениемШага", Ложь);
		ДопПараметрыСкриншота.Вставить("ТегScreenShot", Истина);
		
		ПараметрыВызоваПерейтиКВыполнениюСледующегоШагаОкончание = Новый Структура;
		ПараметрыВызоваПерейтиКВыполнениюСледующегоШагаОкончание.Вставить("ВыполнитьШагЧерезТаймер", Истина);
		ПараметрыВызоваПерейтиКВыполнениюСледующегоШагаОкончание.Вставить("НадоОбновитьСтатусШага", Истина);
		ПараметрыВызоваПерейтиКВыполнениюСледующегоШагаОкончание.Вставить("ИдСледующегоШага", ИдСледующегоШага);
		
		ИДСтрокиШага                       = ТекШаг.СтрокаШага;
		ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
		
		СнятьСкриншотШагаЕслиЭтоНеобходимо(ТекШаг, РезультатПрохожденияТестовСценария, ДопПараметрыСкриншота);
		Возврат;
	КонецЕсли;	 
	
	ПерейтиКВыполнениюСледующегоШага(Истина, Истина, ИдСледующегоШага);
КонецПроцедуры

// Позволяет вызывающей системе указать, что нужно прервать выполнени сценария
&НаКлиенте
Процедура ДобавитьОшибкуСценария(ТекстОшибки) Экспорт
	ОшибкиСценарияПереданныеИзвне.Добавить(ТекстОшибки);
КонецПроцедуры 

// Возвращает массив шагов данного сценария
&НаКлиенте
Функция ШагиДанногоСценария() Экспорт
	
	Если Объект.РежимВыполненияОдногоШага Тогда
		ПромМассивСценариевДляВыполнения = Новый Массив;
		ПромМассивСтрокДереваДанныеФормы = Новый Массив;
		
		ЭтоПример   = Ложь;
		ЭтоКонтекст = Ложь;
		ИдСценарияПоСтрокеШага = ОпределитьИдСценарияПоСтрокеШагаКлиент(Элементы.ДеревоТестов.ТекущиеДанные, ЭтоПример, ЭтоКонтекст);
		ТекСценарий = Новый Массив;
		ТекСценарий.Добавить(ИдСценарияПоСтрокеШага);
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("РежимВыполненияОдногоШага", Ложь);
		ДопПараметры.Вставить("ДанныеСекцииПеременные", ДанныеСекцииПеременные);
		ДопПараметры.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага", Неопределено);
		ДопПараметры.Вставить("ДобавлятьШаги", Истина);
		ДопПараметры.Вставить("УровеньПодсценария", 0);	
		ДопПараметры.Вставить("ЭтоLinux", ЭтоLinux);
		ДопПараметры.Вставить("ВыполнениеДиапазонаШаговVanessaEditor", Ложь);
		ДопПараметры.Вставить("ДобавитьСценарииПослеНайденного", Ложь);
		ДопПараметры.Вставить("ЭтоПример", ЭтоПример);
		
		ЗаполнитьМассивСценариевДляВыполненияСервер(ПромМассивСценариевДляВыполнения, МассивСтрокДереваДанныеФормы, 
			ТекСценарий, МассивИменКонтекстовОбработок, ДопПараметры);
			
		Возврат ПромМассивСценариевДляВыполнения[0].Шаги;	
	Иначе	
		Возврат МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	КонецЕсли;	
	
	
КонецФункции	

#КонецОбласти

#Область СообщенияПользователю

&НаКлиенте
Процедура СообщитьПользователю(Знач Сообщение) Экспорт
		
	ТекстСообщения = Формат(ТекущаяДата(), "ДЛФ=DT") + " " + Сообщение;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
		
КонецПроцедуры

&НаКлиенте
Процедура СообщитьПользователюИВызватьИсключение(Сообщение) Экспорт
	СообщитьПользователю(Сообщение);
	ВызватьИсключение Сообщение;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СообщитьПользователюСеврер(Знач Сообщение)
		
	ТекстСообщения = Формат(ТекущаяДата(), "ДЛФ=DT") + " " + Сообщение;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СообщитьПользователюСеврерИВызватьИсключение(Знач Сообщение)
	СообщитьПользователюСеврер(Сообщение);
	ВызватьИсключение Сообщение;
КонецПроцедуры

// Делает сообщение пользователю, если установлен флаг "Включить отладочные сообщения"
&НаКлиенте
Процедура Отладка(Знач Сообщение) Экспорт
	Если Объект.DebugLog Тогда
		СообщитьПользователю(Сообщение);
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область TestClient

// Убирает из макета отступы снизу и справа
&НаКлиенте
Функция УбратьОтступыИзМакета(Макет) Экспорт
	
	Массив = ПреобразоватьТабличныйДокументВМассив(Макет, Неопределено); 
	УбратьПустыеСтрокиИКолонкиСКраёвМакета(Массив);
	Возврат ПреобразоватьЗначениеВМакет(Массив); 
	
КонецФункции	 

// Преобразовывает макет в массив
&НаКлиенте
Функция ПреобразоватьФайлМакетаВМассив(ФайлМакета, ДопПараметры) Экспорт
	Возврат ПреобразоватьФайлМакетаВМассивСервер(ФайлМакета, ДопПараметры); 
КонецФункции	 

// Возвращает данные текущего клиента тестирования
&НаКлиенте
Функция ТекущиеДанныеКлиентаТестирования() Экспорт
	
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Возврат ТекущиеДанные;
	КонецЕсли;	
	
	Если ТипЗнч(ОбъектКонтекстСохраняемый) = Тип("Структура") Тогда
		Если ОбъектКонтекстСохраняемый.Свойство("ТекущийПрофильTestClient") Тогда
			ИмяТекПрофиля = ОбъектКонтекстСохраняемый.ТекущийПрофильTestClient;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Имя", ИмяТекПрофиля);
			НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Возврат НайденныеСтроки[0]; 
			КонецЕсли;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Синоним", ИмяТекПрофиля);
			НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Возврат НайденныеСтроки[0]; 
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ТекущиеДанные = Неопределено Тогда
		Если ДанныеКлиентовТестирования.Количество() > 0 Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ЭтотКлиент", Истина);
			
			НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ДанныеЗапускаКлиентаТестирования = НайденныеСтроки[0];
				Элементы.ДанныеКлиентовТестирования.ТекущаяСтрока = ДанныеЗапускаКлиентаТестирования.ПолучитьИдентификатор();
				ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
			КонецЕсли;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат ТекущиеДанные;
КонецФункции	 

// Производит проверку на вхождение строк в таблицу
&НаКлиенте
Функция ПроизвестиСравнениеТаблицНаВхождениеСтрок(ИмяТЧ, ТабПарам, ЗначениеТЧ, МассивОшибок, ДопПараметры) Экспорт
	Возврат ПроизвестиСравнениеТаблицНаВхождениеСтрокНаСервере(ИмяТЧ, ТабПарам, ЗначениеТЧ, МассивОшибок, ДопПараметры);
КонецФункции	 

// Возвращает стандартизированное представление флага
&НаКлиенте
Функция ПривестиЗначениеФлагаКСтандарту(Значение) Экспорт
	НРегЗначение = НРег(Значение);
	
	Если НРегЗначение = "истина" Тогда
		ЗначениеПоиска = "Да";
	ИначеЕсли НРегЗначение = "да" Тогда
		ЗначениеПоиска = "Да";
	ИначеЕсли НРегЗначение = "ложь" Тогда
		ЗначениеПоиска = "Нет";
	ИначеЕсли НРегЗначение = "нет" Тогда
		ЗначениеПоиска = "Нет";
	ИначеЕсли НРегЗначение = "yes" Тогда
		ЗначениеПоиска = "Да";
	ИначеЕсли НРегЗначение = "no" Тогда
		ЗначениеПоиска = "Нет";
	ИначеЕсли НРегЗначение = "true" Тогда
		ЗначениеПоиска = "Да";
	ИначеЕсли НРегЗначение = "false" Тогда
		ЗначениеПоиска = "Нет";
	Иначе	
		ЗначениеПоиска = Значение;
	КонецЕсли;	
	
	Возврат ЗначениеПоиска; 
КонецФункции	 

// Возвращает данные клиента тестирования по имени профиля или синониму
&НаКлиенте
Функция ПолучитьДанныеКлиентаТестирования(ИмяTestClient) Экспорт
	
	Для Каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
		
		Если СтрокаДанныеКлиентовТестирования.Имя = ИмяTestClient Тогда
			Возврат СтрокаДанныеКлиентовТестирования;
		КонецЕсли;
		
		Если СтрокаДанныеКлиентовТестирования.Синоним = ИмяTestClient Тогда
			Возврат СтрокаДанныеКлиентовТестирования;
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение ПодставитьПараметрыВСтроку(
		Локализовать("Не существует клиента тестирования <%1>."),
		ИмяTestClient
	);
	
КонецФункции

// Обновляет данные после отключения клиента тестирования
&НаКлиенте
Процедура ОбновитьДанныеКлиентовТестированияПослеОтключенияКлиентаТестирования() Экспорт
	
	ОбъектКонтекстСохраняемый.Вставить("ТестовоеПриложение", Неопределено);
	
	Если ОбъектКонтекстСохраняемый.Свойство("ПодключенныеTestClient") Тогда
		ПодключенныеTestClient = ОбъектКонтекстСохраняемый.ПодключенныеTestClient;
		УдалитьЭлементПодключенныеTestClient(ПодключенныеTestClient, ОбъектКонтекстСохраняемый.ТекущийПрофильTestClient);
	КонецЕсли;

	// снимем флаг подключения в таблице TestClient
	Для каждого СтрокаПодключения Из ДанныеКлиентовТестирования Цикл
		СтрокаПодключения.Подключен = Ложь;
	КонецЦикла;
	
КонецПроцедуры

// Удаляет данные о подключении клиента тестирования
&НаКлиенте
Процедура УдалитьЭлементПодключенныеTestClient(ПодключенныеTestClient, ИмяTestClient, Синоним = Неопределено) Экспорт
	Если ПодключенныеTestClient = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Ккк = 0 По ПодключенныеTestClient.Количество() - 1 Цикл
		Если ПодключенныеTestClient[Ккк].Имя = ИмяTestClient Тогда
			Синоним = ПодключенныеTestClient[Ккк].Синоним;
			ПодключенныеTestClient.Удалить(Ккк);
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Возвращает переменную типа ТестируемоеПриложение
&НаКлиенте
Функция ПолучитьТестовоеПриложение() Экспорт
	Если Не ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		ВызватьИсключение Локализовать("Клиент тестирования не подключен.");
	КонецЕсли;	 
	
	Если ОбъектКонтекстСохраняемый.ТестовоеПриложение = Неопределено Тогда
		ВызватьИсключение Локализовать("Клиент тестирования не подключен.");
	КонецЕсли;	 
	
	Возврат ОбъектКонтекстСохраняемый.ТестовоеПриложение; 
КонецФункции	  

// Фиксирует форму или группу элементов клиента тестирования, с которой будет происходить работа.
// В ней будет происходить поиск элементов формы.
&НаКлиенте
Процедура ЗафиксироватьФормуГруппуTestClient(ФормаПриложенияИлиГруппа) Экспорт
	ЗафиксированнаяФормаИлиГруппаTestClient = ФормаПриложенияИлиГруппа;
КонецПроцедуры

//Возвращает значение закфиксированной для поиска группы или формы.
&НаКлиенте
Функция ЗначениеЗафиксированногоКонтейнера() Экспорт
	Возврат ЗафиксированнаяФормаИлиГруппаTestClient; 
КонецФункции	 

// Отменяет фиксирование группы элементов, в которой происходит поиск элементов
// В ней будет происходить поиск элементов формы.
&НаКлиенте
Процедура УбратьФиксированиеГруппыДляПоискаЭлементов() Экспорт
	Если ТипЗнч(ЗафиксированнаяФормаИлиГруппаTestClient) = Тип("ТестируемаяГруппаФормы") Тогда
		ЗафиксированнаяФормаИлиГруппаTestClient = Неопределено;
	КонецЕсли;	 
КонецПроцедуры

// проверяет видимость элмента формы с учетом родительских групп
&НаКлиенте
Функция ВидимостьЭлементаСУчетомРодителя(ТекущаяФормаЭлемента, ЭлементФормы, ТекущаяВидимость) Экспорт
	Если ТекущаяФормаЭлемента = Неопределено Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Для элемента с именем <%1> не найдена форма."),
			ЭлементФормы.Имя
		);
	КонецЕсли;	 
	
	Если ПроверятьВидимостьЭлементаСУчетомРодителя <> Истина Тогда
		Возврат ТекущаяВидимость;
	КонецЕсли;	 
	
	Если НЕ ТекущаяВидимость Тогда
		// нет смысла проверять для невидимых элементов
		Возврат ТекущаяВидимость; 
	КонецЕсли;
	
	ГруппыФормы = ТекущаяФормаЭлемента.НайтиОбъекты(Тип("ТестируемаяГруппаФормы"));
	Для Каждого ТекГруппа Из ГруппыФормы Цикл
		ЭлементыГруппы = ТекГруппа.НайтиОбъекты();
		Если ЭлементыГруппы.Найти(ЭлементФормы) <> Неопределено Тогда
			Если НЕ ТекГруппа.ТекущаяВидимость() Тогда
				// значит элемент лежит в невидимой группе
				Возврат Ложь;
			КонецЕсли;	 
		КонецЕсли;	
	КонецЦикла;	 
	
	Возврат ТекущаяВидимость;
КонецФункции	

// Устанаваливает статус проверки видимости элемента с учетом видимости родительской группы
&НаКлиенте
Процедура УстановитьСтатусПроверятьВидимостьЭлементаСУчетомРодителя(Значение) Экспорт
	ПроверятьВидимостьЭлементаСУчетомРодителя = Значение;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСменуАктивногоОкна(ДопПараметры = Неопределено) Экспорт
	ОчиститьКешАктивнойТаблицыTestClient();
	
	СбрасыватьЗафиксированнуюФорму = Истина;
	СбрасыватьЗафиксированнуюГруппу = Истина;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("СбрасыватьЗафиксированнуюФорму") Тогда
			СбрасыватьЗафиксированнуюФорму = ДопПараметры.СбрасыватьЗафиксированнуюФорму;
		КонецЕсли;	 
		Если ДопПараметры.Свойство("СбрасыватьЗафиксированнуюГруппу") Тогда
			СбрасыватьЗафиксированнуюФорму = ДопПараметры.СбрасыватьЗафиксированнуюГруппу;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если СбрасыватьЗафиксированнуюФорму Тогда
		// убираем фиксацию формы, т.к. окно сменилось
		НадоСбросить = Истина;
		Если ТипЗнч(ЗафиксированнаяФормаИлиГруппаTestClient) = Тип("ТестируемаяГруппаФормы") И НЕ СбрасыватьЗафиксированнуюГруппу Тогда
			НадоСбросить = Ложь;
		КонецЕсли;	 
		
		Если НадоСбросить Тогда
			ЗафиксироватьФормуГруппуTestClient(Неопределено);
		КонецЕсли;	 
	КонецЕсли;	 
	
	ЗапомнитьАктивноеОкно(Неопределено);
КонецПроцедуры

// Закрывает все окна клиентсткого приложения
&НаКлиенте
Процедура ЗакрытьОкнаКлиентскогоПриложения() Экспорт
	
	Если Не КонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Возврат;
	КонецЕсли;	
	
	Если КонтекстСохраняемый.ТестовоеПриложение = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	НайденДиалогАвторизации = НаЭкранеДиалогАвторизации();
	Если НайденДиалогАвторизации Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не удалось авторизоваться в базе.");
	КонецЕсли;	 
	
	Попытка
		ЕслиНаЭкранеДиалогМодальныйДиалогТоНадоЕгоЗакрыть();//диалог мог остаться от предыдущего сценария
	Исключение
	КонецПопытки;

	Попытка
		ОкнаПриложения = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	Исключение
		Возврат;
	КонецПопытки;
	
	ЗаголовокиОконТиповыхКонфигураций = ЗаголовокиОконТиповыхКонфигурацийНРег();
	
	ПроблемныеОкна = Новый Массив;
	ПроблемныеОкна2 = Новый Массив;
	
	//Перебираем окна в обратном порядке.
	//Тогда больше шанс, сначала будет закрыто окно нового объекта, а потом уже форма списка.
	Для Ккк = 0 По ОкнаПриложения.Количество()-1 Цикл
		ОкноПриложение = ОкнаПриложения[ОкнаПриложения.Количество()-1-Ккк];
	
		Если ОкноПриложение.Основное Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если ОкноПриложение.НачальнаяСтраница Тогда
			Продолжить;
		КонецЕсли;	 
		
		ЗаголовокНрег = НРег(ОкноПриложение.Заголовок);
		
		//не будем закрывать служебные окна, т.к. возможно сценарий будет с ними работать
		Если ЗаголовокНрег = Нрег("Легальность получения обновлений") Тогда
			Продолжить;
		ИначеЕсли ЗаголовокНрег = Нрег("Initial configuration setup") Тогда
			Продолжить;
		ИначеЕсли ЗаголовокНрег = Нрег("Legitimate software") Тогда
			Продолжить;
		ИначеЕсли ЗаголовокиОконТиповыхКонфигураций.Найти(ЗаголовокНрег) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		Попытка
			ФормаОкна = ОкноПриложение.НайтиОбъект(Тип("ТестируемаяФорма"));
		Исключение
			ФормаОкна = Неопределено;
		КонецПопытки;
		
		Если ФормаОкна <> Неопределено Тогда
			НРег_ИмяФормы = НРег(ФормаОкна.ИмяФормы);
			Если НРег_ИмяФормы = НРег("ОбщаяФорма.Вопрос") Тогда
				МногострочныйТекстСообщения = ФормаОкна.НайтиОбъект(,,"МногострочныйТекстСообщения");
				Если МногострочныйТекстСообщения <> Неопределено Тогда
					ПредставлениеДанных = МногострочныйТекстСообщения.ПолучитьПредставлениеДанных();
					Если Найти(НРег(ПредставлениеДанных),"ошибк") > 0
					ИЛИ  Найти(НРег(ПредставлениеДанных),"вход в программу временно невозможен") > 0
					Тогда
						ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Найдено окно с текстом ошибки: %1.");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Символы.ПС + СокрЛП(ПредставлениеДанных));
						ВызватьИсключение ТекстСообщения;
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли НРег_ИмяФормы = НРег("Обработка.РезультатыОбновленияПрограммы.Форма.ОтложенноеОбновлениеНеЗавершено") Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не выполнены дополнительные процедуры обработки данных.");
				ВызватьИсключение ТекстСообщения;
			ИначеЕсли НРег_ИмяФормы = НРег("Обработка.РезультатыОбновленияПрограммы.Форма.ИндикацияХодаОбновленияИБ") Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Обнаружено окно обновления конфигурации.");
				ВызватьИсключение ТекстСообщения;
			ИначеЕсли НРег_ИмяФормы = НРег("Обработка.РезультатыОбновленияПрограммы.Форма.СообщениеОНеудачномОбновлении") Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Обнаружено окно c сообщением о неудачном обновлением конфигурации.");
				ВызватьИсключение ТекстСообщения;
			ИначеЕсли НРег_ИмяФормы = НРег("Обработка.ОбновлениеПрограммы.Форма.Форма") Тогда
				КнопкаПродолжить = ФормаОкна.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ПродолжитьРаботуНаТекущейВерсии");
				Попытка
					КнопкаПродолжить.Нажать();
					ЗаписатьВЖурналРегистрацииСообщениеОЗакрытииОкна(ОкноПриложение.Заголовок);
					Ванесса.sleep(1);
				Исключение
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Обнаружено окно перехода на новую версию платформы 1С:Предприятие.");
					ВызватьИсключение ТекстСообщения;
				КонецПопытки;
			ИначеЕсли НРег_ИмяФормы = НРег("ОбщаяФорма.РегиональныеНастройки") Тогда 
				КнопкаОК = ФормаОкна.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ОК");
				Попытка
					КнопкаОК.Нажать();
				Исключение
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не удалось нажать <ОК> в окне Региональных настроек.");
					ВызватьИсключение ТекстСообщения;
				КонецПопытки;
				Если ФормаОкна.ОжидатьЗакрытие() Тогда
					ЗаписатьВЖурналРегистрацииСообщениеОЗакрытииОкна(ОкноПриложение.Заголовок);
					Продолжить;
				Иначе
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не дождался закрытия окна Региональных настроек");
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Попытка
			ОкноПриложение.Закрыть();
			ЗаписатьВЖурналРегистрацииСообщениеОЗакрытииОкна(ОкноПриложение.Заголовок);
		Исключение
			ПроблемныеОкна.Добавить(ОкноПриложение);
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось закрыть окно %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОкноПриложение.Заголовок); 
			Сообщить(Ванесса.ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		КонецПопытки;
		
		Если Ванесса.ТекущийTestclientЭтоWebКлиент Тогда
			Ванесса.Sleep(1);
		КонецЕсли;	 
		
		ЕслиНаЭкранеДиалогМодальныйДиалогТоНадоЕгоЗакрыть();//диалог мог появиться при закрытии окна.
	КонецЦикла;
	
	ОкноПриложение = Неопределено;
	//попробуем закрыть проблемыные окна ещё раз
	Для Каждого ОкноПриложение Из ПроблемныеОкна Цикл
		Попытка
			ОкноПриложение.Закрыть();
			ЗаписатьВЖурналРегистрацииСообщениеОЗакрытииОкна(ОкноПриложение.Заголовок);
		Исключение
			ПроблемныеОкна2.Добавить(ОкноПриложение);
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось закрыть окно повторно %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОкноПриложение.Заголовок); 
			Сообщить(Ванесса.ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		КонецПопытки;
		
		Если Ванесса.ТекущийTestclientЭтоWebКлиент Тогда
			Ванесса.Sleep(1);
		КонецЕсли;
		
		ЕслиНаЭкранеДиалогМодальныйДиалогТоНадоЕгоЗакрыть();//диалог мог появиться при закрытии окна.
	КонецЦикла;	
	
	ОкноПриложение = Неопределено;
	//попробуем закрыть проблемыные окна ещё раз
	Для Каждого ОкноПриложение Из ПроблемныеОкна2 Цикл
		Попытка
			ОкноПриложение.Закрыть();
			ЗаписатьВЖурналРегистрацииСообщениеОЗакрытииОкна(ОкноПриложение.Заголовок);
		Исключение
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось закрыть окно повторно %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОкноПриложение.Заголовок); 
			Сообщить(Ванесса.ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		КонецПопытки;
		
		Если Ванесса.ТекущийTestclientЭтоWebКлиент Тогда
			Ванесса.Sleep(1);
		КонецЕсли;
		
		ЕслиНаЭкранеДиалогМодальныйДиалогТоНадоЕгоЗакрыть();//диалог мог появиться при закрытии окна.
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКешАктивнойТаблицыTestClient() Экспорт
	Если ОбъектКонтекст <> Неопределено Тогда
		ОбъектКонтекст.Вставить("АктивнаяТаблицаTestClient", Новый Структура("ИмяТаблицы,Значение", Неопределено, Неопределено));
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВКешТаблицуTestClient(ИмяТаблицы, Таблица) Экспорт
	Если ТипЗнч(Таблица) = Тип("ТестируемаяТаблицаФормы") Тогда
		ОбъектКонтекст.Вставить("АктивнаяТаблицаTestClient", Новый Структура("ИмяТаблицы,Значение", ИмяТаблицы, Таблица));
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКорректноеЗначениеДляРаботыСПолем(Знач Значение) Экспорт
	Если Значение = "$"  ИЛИ Значение = "$$" Тогда
		Возврат Значение;
	ИначеЕсли Лев(Значение, 2) = "$$" И  Прав(Значение, 2) = "$$" Тогда
		ИмяПеременной = Сред(Значение, 3, СтрДлина(Значение) - 4);
		ИмяПеременной = УбратьЗапрещенныеСимволыИзКлючаСтруктуры(ИмяПеременной);
		
		Попытка
			ЕстьТакаяПеременная = ОбъектКонтекстСохраняемый.Свойство(ИмяПеременной);
		Исключение
			ЕстьТакаяПеременная = Ложь;
		КонецПопытки;
		
		Если ЕстьТакаяПеременная Тогда
			Возврат ОбъектКонтекстСохраняемый[ИмяПеременной]; 
		КонецЕсли;	 
		
		СохраненноеЗначение = ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого(ИмяПеременной);
		
		Если СохраненноеЗначение = Неопределено Тогда
			ВызватьИсключение ПодставитьПараметрыВСтроку(
				Локализовать("Не получилось найти сохранненное значение по переменой <%1>"),
				ИмяПеременной
			);
		КонецЕсли;	 
		
		Возврат СохраненноеЗначение;
	ИначеЕсли Лев(Значение, 1) = "$" И  Прав(Значение, 1) = "$" Тогда
		ИмяПеременной = Сред(Значение, 2, СтрДлина(Значение) - 2);
		ИмяПеременной = УбратьЗапрещенныеСимволыИзКлючаСтруктуры(ИмяПеременной);
		
		Попытка
			ЕстьТакаяПеременная = ОбъектКонтекст.Свойство(ИмяПеременной);
		Исключение
			ЕстьТакаяПеременная = Ложь;
		КонецПопытки;
		
		Если ЕстьТакаяПеременная Тогда
			Возврат ОбъектКонтекст[ИмяПеременной];
		Иначе
			Возврат Значение;
		КонецЕсли;	 
	Иначе
		Возврат Значение;
	КонецЕсли;	 
КонецФункции	 

&НаКлиенте
Функция ПолучитьКорректныйТекстДляВставкиВПоле(Знач Текст) Экспорт
	Если ТипЗнч(Текст) = Тип("Массив") Тогда
		НовыйТекст = "";
		КолЗначений = Текст.Количество();
		Счетчик = 0;
		Для Каждого Элем Из Текст Цикл
			Счетчик = Счетчик + 1;
			Если Счетчик < КолЗначений Тогда
				НовыйТекст = НовыйТекст + Элем.Кол1 + Символы.ПС;
			Иначе	
				НовыйТекст = НовыйТекст + Элем.Кол1;
			КонецЕсли;	 
		КонецЦикла;	
		
		Текст = НовыйТекст;
	КонецЕсли;
	
	Возврат Текст;
КонецФункции	 

&НаКлиенте
Функция СтрокиОжидаемойТаблицыСодержатсяВТаблицеTestclient(ОжидаемаяТаблица, ТаблицаTestClient, СтрокаОшибки, СтруктураПараметров) Экспорт
	Возврат СтрокиОжидаемойТаблицыСодержатсяВТаблицеTestclientСервер(ОжидаемаяТаблица, ТаблицаTestClient, СтрокаОшибки, СтруктураПараметров);
КонецФункции	

&НаКлиенте
Функция НайтиОкноTestClientПоЗаголовку(ЗаголовокОкна) Экспорт
	Если Не ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		ВызватьИсключение Локализовать("Клиент тестирования не подключен.");
	КонецЕсли;	 
	
	Возврат ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), ЗаголовокОкна);
КонецФункции

&НаКлиенте
Функция НайтиТаблицыКонтейнераTestClient(ТекущаяФорма) Экспорт
	Возврат ТекущаяФорма.НайтиОбъекты(Тип("ТестируемаяТаблицаФормы"));
КонецФункции	

//Открывает в клиенте тестирования навигационную ссылку
&НаКлиенте
Процедура ОткрытьНавигационнуюСсылку(Стр) Экспорт
	
	Стр = ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(Стр);
	КоличествоПопыток = ЗначениеКоличествоПопытокВыполненияДействия();
	ОписаниеОшибки = "";
	Для Ккк = 1 По КоличествоПопыток Цикл
		Попытка
			АктивноеОкно = ПолучитьГлавноеОкноИзТестовоеПриложение();
			АктивноеОкно.ВыполнитьКоманду(Стр);
			ОбработатьСменуАктивногоОкна();
			Возврат;
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			Sleep(1);
		КонецПопытки;
	КонецЦикла;

	ВызватьИсключение ОписаниеОшибки;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиРеквизитОткрытойФормыПоЗаголовку(
		Знач ИмяРеквизита,
		ИскатьПоИмени = Ложь,
		ВызыватьИсключение = Истина,
		ТипПоля = Неопределено,
		ДопПараметры = Неопределено) Экспорт

	КоличествоПопыток = ЗначениеКоличествоПопытокВыполненияДействия();
	ТекстСообщения = "";
	КонтейнерДляПоиска = Неопределено;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		ДопПараметры.Свойство("КонтейнерДляПоиска", КонтейнерДляПоиска);
		Если ДопПараметры.Свойство("КоличествоПопыток") Тогда
			КоличествоПопыток = ДопПараметры.КоличествоПопыток;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		ТекстСообщения = "";
		БылаОшибка = Ложь;
		
		Попытка
			
			ПолеРеквизит = Неопределено;
			Если КонтейнерДляПоиска <> Неопределено Тогда
				МассивФорм = Новый Массив;
				МассивФорм.Добавить(КонтейнерДляПоиска);
				НайтиРеквизитВМассивеКонтейнеров(МассивФорм, ПолеРеквизит, ИмяРеквизита, ИскатьПоИмени, ТипПоля, ДопПараметры);
			ИначеЕсли ЗафиксированнаяФормаИлиГруппаTestClient = Неопределено Тогда
				НайтиРеквизитВАктивномОкне(ПолеРеквизит, ИмяРеквизита, ИскатьПоИмени, ТипПоля, ДопПараметры);
			Иначе	
				МассивФорм = НайтиКонтейнерыТекущегоОкнаTestClient();
				НайтиРеквизитВМассивеКонтейнеров(МассивФорм, ПолеРеквизит, ИмяРеквизита, ИскатьПоИмени, ТипПоля, ДопПараметры);
			КонецЕсли;	

			Если ПолеРеквизит <> Неопределено Тогда
				Возврат ПолеРеквизит;
			КонецЕсли;	 
			
			Если НЕ Версия8311ИлиВыше Тогда
				// Проверим, что возможно есть окно, которое некорректно определяется как активное окно
				МассивФорм = НайтиФормыОкнаИзКонтекста();
				Если МассивФорм <> Неопределено Тогда
					НайтиРеквизитВМассивеКонтейнеров(МассивФорм, ПолеРеквизит, ИмяРеквизита, ИскатьПоИмени, ТипПоля, ДопПараметры);
					Если ПолеРеквизит <> Неопределено Тогда
						Возврат ПолеРеквизит;
					КонецЕсли;	 
				КонецЕсли;
			КонецЕсли;	 
			
			Если ПолеРеквизит = Неопределено 
					И Версия8315ИлиВыше 
					И ИмяРеквизита = "" Тогда
				НайтиРеквизитВАктивномОкне(ПолеРеквизит, "SpreadsheetDocument", ИскатьПоИмени, ТипПоля, ДопПараметры);
				Если ПолеРеквизит <> Неопределено Тогда
					Возврат ПолеРеквизит;
				КонецЕсли;
			КонецЕсли;	 
			
			Если НЕ ВызыватьИсключение Тогда
				Прервать;
			КонецЕсли;

			Если ИскатьПоИмени Тогда
				ТекстСообщения = Локализовать("Элемента формы с именем <%1> не найдено.");
			Иначе	
				ТекстСообщения = Локализовать("Элемента формы с заголовком <%1> не найдено.");
			КонецЕсли;	 
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяРеквизита); 
			
			ВызватьИсключение ТекстСообщения;
			
		Исключение
			Если ТекстСообщения = "" Тогда
				ТекстСообщения = ОписаниеОшибки();
			КонецЕсли;	 
			
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				sleep(1);
			КонецЕсли;	 
			ЗапомнитьАктивноеОкно(Неопределено);
		КонецПопытки;
	КонецЦикла;	
	
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		ДопПараметры.Вставить("ТекстОшибки", ТекстСообщения);
	КонецЕсли;	 
	
	ЗапомнитьАктивноеОкно(Неопределено);
	Если ВызыватьИсключение И БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции

// Возвращает текущее поле формы. Для таблицы/дерева формы - текущее поле таблицы дерева.
// Возвращает Неопределено, если не получилось определить активный элемент формы.
&НаКлиенте
Функция ТекущееПолеФормы() Экспорт
    АктивноеОкно = ПолучитьАктивноеОкноИзТестовоеПриложение();
    АктивнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
	
	ТекущееПоле = АктивнаяФорма.ПолучитьТекущийЭлемент();
	
	Если ТекущееПоле = Неопределено Тогда
		ТекстСообщения = Локализовать("Не найден активный элемент формы.");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если ТипЗнч(ТекущееПоле) = Тип("ТестируемаяТаблицаФормы") Тогда
		ТекущееПоле = ТекущееПоле.ПолучитьТекущийЭлемент();
	КонецЕсли;	 
	
	Возврат ТекущееПоле; 
КонецФункции	 

&НаКлиенте
Функция ПолучитьПредставлениеДанныхЭлементаФормы(ПолеРеквизит, ДопПараметры = Неопределено) Экспорт
	Тип = ТипЗнч(ПолеРеквизит);
	
	Если Тип = Тип("ТестируемоеПолеФормы") Тогда
		
		Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ЯчейкаТаблицы") И ДопПараметры.ЯчейкаТаблицы Тогда
			Попытка
				Возврат ДопПараметры.ТаблицаФормы.ПолучитьТекстЯчейки(ПолеРеквизит.Имя);
			Исключение
			КонецПопытки;
		КонецЕсли;	
		
		Если ПолеРеквизит.Вид = ВидПоляФормы.ПолеВвода Тогда
			Попытка
				Если Версия8323ИлиВыше Тогда
					ТекстРедактирования = ПолеРеквизит.ПолучитьТекстРедактирования();
					Если НЕ ЗначениеЗаполнено(ТекстРедактирования) Тогда
						Возврат ПолеРеквизит.ПолучитьОтображаемыйТекст();
					Иначе
						Возврат ТекстРедактирования;
					КонецЕсли;	
				Иначе	
					Возврат ПолеРеквизит.ПолучитьТекстРедактирования();
				КонецЕсли;	
				
			Исключение
				// если поле невидимое - тогда получим представление данных
				Возврат ПолеРеквизит.ПолучитьПредставлениеДанных();
			КонецПопытки;
		ИначеЕсли Версия8325ИлиВыше И
			(ПолеРеквизит.Вид = ВидПоляФормы.ПолеФорматированногоДокумента ИЛИ ПолеРеквизит.Вид = ВидПоляФормы.ПолеHTMLДокумента) Тогда
			
				Возврат ПолучитьПредставлениеПоляHTML(ПолеРеквизит);
				
		КонецЕсли;	 
		
		Возврат ПолеРеквизит.ПолучитьПредставлениеДанных();
	ИначеЕсли Тип = Тип("ТестируемаяДекорацияФормы") Тогда
		Попытка
			Стр = ПолеРеквизит.ПолучитьПредставлениеДанных();
		Исключение
			Стр = Неопределено;
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(Стр) Тогда
			Стр = ПолеРеквизит.ТекстЗаголовка;
		КонецЕсли;	 
		Возврат Стр;
	ИначеЕсли Тип = Тип("ТестируемаяТаблицаФормы") Тогда
		ТабДок = ПолучитьЗначениеТестируемаяТаблицаФормы(ПолеРеквизит, ДопПараметры);
		Возврат ТабДок;
	ИначеЕсли Тип = Тип("ТестируемаяГруппаФормы") Тогда
		Возврат ПолеРеквизит.ТекстЗаголовка;
	КонецЕсли;	 
КонецФункции	

// Значение реквизита открытой формы по заголовку
//
// Параметры:
//  ИмяРеквизита	 - Строка - Имя реквизита формы
//  ИскатьПоИмени	 - Булево - Определяет поиск по имени или заголовку поля
//  ДопПараметры	 - Структура - Дополнительным параметры переданные функции
// 
// Возвращаемое значение:
//  Строка, - Значение поля формы
//
&НаКлиенте
Функция ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени = Ложь, ДопПараметры = Неопределено) Экспорт
	ПолеРеквизит = ПолучитьЭлементФормыИзКешЕслиЭтоВозможно(ИмяРеквизита);
	Если ПолеРеквизит <> Неопределено Тогда
		Возврат ПолучитьПредставлениеДанныхЭлементаФормы(ПолеРеквизит, ДопПараметры);
	КонецЕсли;	 
	
	ВызыватьИсключение = Истина;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ВызыватьИсключение") Тогда
			ВызыватьИсключение = ДопПараметры.ВызыватьИсключение;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Нашли = Ложь;
	МассивФорм = НайтиКонтейнерыТекущегоОкнаTestClient();
	Для каждого ТекущаяФорма Из МассивФорм Цикл
		
		Попытка
			Если ИскатьПоИмени Тогда
				МассивЭлементов = Новый Массив;
				НужныйЭлемент = ТекущаяФорма.НайтиОбъект(, , ИмяРеквизита);
				Если НужныйЭлемент <> Неопределено Тогда
					МассивЭлементов.Добавить(НужныйЭлемент);
				КонецЕсли;	 
			Иначе
				МассивЭлементов = ТекущаяФорма.НайтиОбъекты(, ИмяРеквизита);
			КонецЕсли;
			
		Исключение
			// это возможно, если форма закрылась по ходу выполнения сценария
			Продолжить;
		КонецПопытки;
		
		Если МассивЭлементов = Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если МассивЭлементов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если МассивЭлементов.Количество() > 1  Тогда
			ВывестиСообщениеОТомЧтоПоЗаголовкуНайденоБольшеОдногоЭлемента(МассивЭлементов, ИмяРеквизита);
			ВызватьИсключение ПодставитьПараметрыВСтроку(
				Локализовать("Найдено более одного поля формы с заголовком <%1>. Рекомендуется искать элемент по имени."),
				ИмяРеквизита
			);
		КонецЕсли;	 
		
		ПолеРеквизит = МассивЭлементов[0];
		СохранитьВКешТаблицуTestClient(ИмяРеквизита, ПолеРеквизит);
		
		Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
			ДопПараметры.Вставить("ПолеРеквизит", ПолеРеквизит);
			ДопПараметры.Вставить("ФормаРеквизита", ТекущаяФорма); 
		КонецЕсли;	 
		
		Возврат ПолучитьПредставлениеДанныхЭлементаФормы(ПолеРеквизит, ДопПараметры);
	КонецЦикла;

	Если Не ВызыватьИсключение Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если НЕ Нашли Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Локализовать("Элемента формы с именем <%1> не найдено.");
		Иначе	
			ТекстСообщения = Локализовать("Элемента формы с заголовком <%1> не найдено.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяРеквизита); 
		
		СообщитьПользователю(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
Функция НайтиРеквизитТаблицы(ИмяТаблицы, ИмяРеквизита, ИскатьПоИмени = Ложь, Таблица = Неопределено, ДопПараметры = Неопределено) Экспорт
	Если Таблица = Неопределено Тогда
		Таблица = НайтиТЧПоИмени(ИмяТаблицы);
	КонецЕсли;	 
	
	ПолеРеквизит = Неопределено;
	
	ТипПоля = Неопределено;
	КоличествоПопыток = ЗначениеКоличествоПопытокВыполненияДействия();
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("КоличествоПопыток") Тогда
			КоличествоПопыток = ДопПараметры.КоличествоПопыток;
		КонецЕсли;	 
		Если ДопПараметры.Свойство("ТипПоля") Тогда
			ТипПоля = ДопПараметры.ТипПоля;
		КонецЕсли;	 
	КонецЕсли;
	
	Если ТипПоля = Неопределено Тогда
		ТипПоля = Тип("ТестируемоеПолеФормы");
	КонецЕсли;	
	
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			Если ИскатьПоИмени Тогда
				ПолеРеквизит = Таблица.НайтиОбъект(ТипПоля,, ИмяРеквизита);
			Иначе	
				ПолеРеквизит = Таблица.НайтиОбъект(ТипПоля, ИмяРеквизита);
			КонецЕсли;	 
			
			Если ПолеРеквизит <> Неопределено Тогда
				Прервать;
			КонецЕсли;	 
		Исключение
			Если СчетчикПопыток < КоличествоПопыток Тогда
				sleep(1);
			КонецЕсли;	 
		КонецПопытки;
	КонецЦикла;	 
	
	Возврат ПолеРеквизит;
КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеРеквизитаОткрытойФормыПоИмени(ИмяРеквизита) Экспорт
	Возврат ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяРеквизита, Истина);
КонецФункции

// Вводит текст в поле. Если идёт формирование автоинструкции, то возможна эмуляция ввода текста посимвольно.
&НаКлиенте
Процедура ВвестиВПолеТекст(Поле, Текст, ЭтоТаблица = Ложь, ЭмулироватьКлик = Истина) Экспорт
	#Если НЕ ВебКлиент Тогда
	Если Поле.Вид = ВидПоляФормы.ПолеФорматированногоДокумента ИЛИ Поле.Вид = ВидПоляФормы.ПолеHTMLДокумента Тогда
		Поле.Активизировать();
		Поле.ВвестиHTML(Текст);
		Возврат;
	КонецЕсли;	 
	
	Если НужноЭмулироватьДействияМышки() И ЭмулироватьКлик Тогда
		Если ЭмуляцияДвиженияМышкиКомпонентаВБраузере() Тогда
			КликПоПолюБраузер(Поле, ЭтоТаблица);
		ИначеЕсли ЭмуляцияДвиженияМышкиКомпонентаUIAutomation() Тогда
			КликПоПолюUIAutomation(Поле, ЭтоТаблица);
		Иначе	
			КликЛевойКнопкойМышкиПоСгенерированнойКартинке(Поле.ТекстЗаголовка + ":", "MainForm");
		КонецЕсли;	 
	КонецЕсли;	
	
	Если Объект.ЗаписьВидеоЭмулироватьВводСКлавиатуры 
		И (Объект.СоздаватьИнструкциюВидео Или Объект.СоздаватьИнструкциюHTML Или Объект.СоздаватьИнструкциюMarkdown) Тогда
		
		НадоЭмулироватьКлавиатуру = Ложь;
		Попытка
			Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
			ТекШаг = Шаги[ТекИД_ШагаВМассиве];
			Если НЕ ТекШаг.Свойство("ЭтоШагКонтекста") ИЛИ НЕ ТекШаг.ЭтоШагКонтекста Тогда
				НадоЭмулироватьКлавиатуру = Истина;
			КонецЕсли;	 
		Исключение
			НадоЭмулироватьКлавиатуру = Ложь;
		КонецПопытки;
		
		Если НадоЭмулироватьКлавиатуру Тогда
			KeyboardType = Объект.КаталогИнструментов + "\tools\VideoTools\KeyboardType.exe";
			Если Не ФайлСуществуетКомандаСистемы(KeyboardType) Тогда
				ВызватьИсключение ПодставитьПараметрыВСтроку(
					Локализовать("Файл <%1> не найден."),
					KeyboardType
				);
			КонецЕсли;	 
			
			ИмяФайла = ПолучитьИмяВременногоФайла("txt");
			ЗТ = Новый ЗаписьТекста(ИмяФайла, "windows-1251",, Ложь); 
			ЗТ.Записать(Текст); 
			ЗТ.Закрыть();
			Команда = KeyboardType + " typespeed=100 ""filename=" + ИмяФайла + """";
			
			Поле.Активизировать();
			Результат = ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
			ПроверитьРавенство(Результат, 0 , "Выполнен шаг ЯЭмулируюНаборТекстаИзФайла <" + ИмяФайла + ">");
		Иначе	
			Поле.Активизировать();
			Поле.ВвестиТекст(Строка(Текст));
		КонецЕсли;	 
	ИначеЕсли Объект.ЭмулироватьВводКлавиатурыVanessaExt И Объект.ИспользоватьКомпонентуVanessaExt Тогда
		Поле.Активизировать();
		ВнешняяКомпонентаДляСкриншотов.ЭмуляцияВводаТекста(Строка(Текст), 100);
	Иначе	
		Поле.Активизировать();
		Поле.ВвестиТекст(Строка(Текст));
	КонецЕсли;	 
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Функция НайтиТЧПоИмени(ИмяТЧ, НужнаяФорма = Неопределено, ИскатьПоИмени = Истина, ВызыватьИсключение = Истина, ДопПараметры = Неопределено) Экспорт
	
	ФормаДляПоиска    = НужнаяФорма;
	КоличествоПопыток = ЗначениеКоличествоПопытокВыполненияДействия();
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("КоличествоПопыток") Тогда
			КоличествоПопыток = ДопПараметры.КоличествоПопыток;
		КонецЕсли;	 
	КонецЕсли;	 
	ТекстОшибки       = "";
	
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		ТекстОшибки = "";
		
		Попытка
			
			Если ОбъектКонтекст.Свойство("АктивнаяТаблицаTestClient") 
					И ОбъектКонтекст.АктивнаяТаблицаTestClient <> Неопределено 
					И ОбъектКонтекст.АктивнаяТаблицаTestClient.ИмяТаблицы = ИмяТЧ Тогда

				Возврат ОбъектКонтекст.АктивнаяТаблицаTestClient.Значение;
			КонецЕсли;	 
			
			Если ФормаДляПоиска = Неопределено Тогда
				
				Если ЗафиксированнаяФормаИлиГруппаTestClient = Неопределено Тогда
					ОкноПриложения = ПолучитьАктивноеОкноИзТестовоеПриложение();
					Если ОкноПриложения <> Неопределено Тогда
						ФормаДляПоиска = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"));
					КонецЕсли;	 
				Иначе	
					ФормаДляПоиска = ЗафиксированнаяФормаИлиГруппаTestClient;
				КонецЕсли;	 

				Если ФормаДляПоиска = Неопределено Тогда
					// это бывает когда ОкноПриложения это начальная страница и на ней нет форм
					ОкноПриложения = ПолучитьАктивноеОкноИзКонтекста();
					Если ОкноПриложения <> Неопределено Тогда
						ФормаДляПоиска = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"));
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
			ТЧ = НайтиТЧВДаннойФорме(ИмяТЧ, ФормаДляПоиска, ИскатьПоИмени);
			
			Если ФормаДляПоиска = Неопределено ИЛИ ТЧ = Неопределено Тогда
				// Иногда 1С некорректно отдаёт текущее окно, тогда будем искать во всех окнах
				// сначала поищем в недавно открытом окне
				
				Попытка
					ОкноПриложения = ПолучитьАктивноеОкноИзКонтекста();
					ФормаДляПоиска    = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"));
					ТЧ             = НайтиТЧВДаннойФорме(ИмяТЧ, ФормаДляПоиска, ИскатьПоИмени);
				Исключение
					
				КонецПопытки;
			КонецЕсли;	 
			
			Если ФормаДляПоиска = Неопределено Тогда
				ВызватьИсключение Локализовать("Не найдена активная форма.");
			КонецЕсли;	 
			
			Если ТЧ = Неопределено И ВызыватьИсключение Тогда
				СообщитьПользователюИВызватьИсключение(ПодставитьПараметрыВСтроку(
					Локализовать("Таблица формы с именем <%1> не найдена."),
					ИмяТЧ
				));
			КонецЕсли;	 
			
			Прервать;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Если СчетчикПопыток < КоличествоПопыток Тогда
				sleep(1);
			КонецЕсли;	 
			ЗапомнитьАктивноеОкно(Неопределено);
			ФормаДляПоиска = Неопределено;
		КонецПопытки;
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 
	
	Если ТЧ <> Неопределено Тогда
		ОбъектКонтекст.Вставить("ТекущаяТЧ", ТЧ);
	КонецЕсли;	 
	
	СохранитьВКешТаблицуTestClient(ИмяТЧ, ТЧ);
	НужнаяФорма = ФормаДляПоиска;
	
	Возврат ТЧ;
КонецФункции	

&НаКлиенте
Процедура ЗапомнитьАктивноеОкно(АктивноеОкно, ДопПараметры = Неопределено) Экспорт
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ЗапомнитьАктивноеОкно") Тогда
			Если Не ДопПараметры.ЗапомнитьАктивноеОкно Тогда
				Возврат;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ОбъектКонтекст.Свойство("АктивноеОкно") Тогда
		Если ОбъектКонтекст.АктивноеОкно <> Неопределено Тогда
			ОбъектКонтекст.Вставить("ПредыдущееАктивноеОкно", ОбъектКонтекст.АктивноеОкно);
		КонецЕсли;	 
	КонецЕсли;	 
	ОбъектКонтекст.Вставить("АктивноеОкно", АктивноеОкно);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьАктивноеОкноИзТестовоеПриложение(ДопПараметры = Неопределено) Экспорт
	Если Не ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		ВызватьИсключение Локализовать("Клиент тестирования не подключен.");
	КонецЕсли;	 
	
	Если НЕ Версия8311ИлиВыше Тогда
		// обход ошибки платформы определения активного окна, когда открыт модальный диалог
		ИскатьМодальныйДиалог = Ложь;
		Если ДопПараметры <> Неопределено Тогда
			Если ДопПараметры.Свойство("ИскатьМодальныйДиалог") Тогда
				ИскатьМодальныйДиалог = ДопПараметры.ИскатьМодальныйДиалог;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если ИскатьМодальныйДиалог Тогда
			// Если в платформе не исправлена ошибка определения активного окна
			// указать версию
			ОкноМодальногоДиалога = НайтиОкноМодальногоДиалога();
			Если ОкноМодальногоДиалога <> Неопределено Тогда
				Возврат ОкноМодальногоДиалога;
			КонецЕсли;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	Попытка
		АктивноеОкно = ОбъектКонтекстСохраняемый.ТестовоеПриложение.ПолучитьАктивноеОкно();
	Исключение
		ЗапомнитьАктивноеОкно(Неопределено);
		Возврат Неопределено;
	КонецПопытки;
	
	ЗапомнитьАктивноеОкно(АктивноеОкно, ДопПараметры);
	Возврат АктивноеОкно;
КонецФункции

&НаКлиенте
Функция ПолучитьГлавноеОкноИзТестовоеПриложение() Экспорт
	Если Не ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		ВызватьИсключение Локализовать("Клиент тестирования не подключен.");
	КонецЕсли;	 
	
	ОкнаПриложения = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	
	Для Каждого ОкноПриложения Из ОкнаПриложения Цикл
		Если ОкноПриложения.Основное Тогда
			Возврат ОкноПриложения; 
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция НайтиКонтейнерыТекущегоОкнаTestClient(ДопПараметры = Неопределено) Экспорт
	Если ЗафиксированнаяФормаИлиГруппаTestClient <> Неопределено Тогда
		Массив = Новый Массив;
		Массив.Добавить(ЗафиксированнаяФормаИлиГруппаTestClient);
		Возврат Массив;
	КонецЕсли;	 
	
	ОкноПриложения = ПолучитьАктивноеОкноИзТестовоеПриложение(ДопПараметры);
	Если ОкноПриложения = Неопределено Тогда
		ВызватьИсключение Локализовать("Не получилось определить активное окно Клиента тестирования.");
	КонецЕсли;
	
	Если ОкноПриложения.НачальнаяСтраница Тогда
		МассивФорм = ОкноПриложения.НайтиОбъекты(Тип("ТестируемаяФорма"));
	Иначе	
		ТекФорма = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"));
		МассивФорм = Новый Массив;
		МассивФорм.Добавить(ТекФорма);
	КонецЕсли;	 
	
	Если ДопПараметры <> Неопределено Тогда
		ДопПараметры.Вставить("АктивноеОкно", ОкноПриложения);
	КонецЕсли;	 
	Возврат МассивФорм;
КонецФункции	

&НаКлиенте
Функция НайтиФормыОкнаИзКонтекста(ДопПараметры = Неопределено) Экспорт
	ОкноПриложения         = ПолучитьАктивноеОкноИзКонтекста();
	Если ОкноПриложения = Неопределено Тогда
		ВызватьИсключение Локализовать("Не получилось определить активное окно Клиента тестирования из Контекста.");
	КонецЕсли;	 
	
	Попытка
		МассивФорм = ОкноПриложения.НайтиОбъекты(Тип("ТестируемаяФорма"));
	Исключение
		// Скорее всего окно уже закрылось, но пока ещё есть в контексте.
		Возврат Неопределено;
	КонецПопытки;	
	
	Возврат МассивФорм;
КонецФункции	

&НаКлиенте
Функция НайтиОкноМодальногоДиалога(ТолькоПредупреждение = Ложь) Экспорт
	НужноеОкно = Неопределено;
	
	ОкнаПриложения = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	Для Каждого ОкноПриложения Из ОкнаПриложения Цикл
		Если ЭтоЗаголовокОкнаМодальногоДиалога(ОкноПриложения.Заголовок)
			ИЛИ ((ОкноПриложения.Заголовок = "Выбор типа данных") И НЕ ТолькоПредупреждение)
			ИЛИ ((ОкноПриложения.Заголовок = "Список значений") И НЕ ТолькоПредупреждение)
			ИЛИ ((ОкноПриложения.Заголовок = "Данные были изменены") И НЕ ТолькоПредупреждение)
			ИЛИ ((ОкноПриложения.Заголовок = "Предупреждение безопасности") И НЕ ТолькоПредупреждение)
			Тогда
			НужноеОкно = ОкноПриложения;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если НужноеОкно <> Неопределено Тогда
		ЗапомнитьАктивноеОкно(НужноеОкно);
	КонецЕсли;	 
	
	Возврат НужноеОкно;
КонецФункции	

// Проверяет, что переданное окно является модальным диалогом
&НаКлиенте
Функция ЭтоМодальныйДиалог(ОкноПриложения) Экспорт
	Если ЭтоЗаголовокОкнаМодальногоДиалога(ОкноПриложения.Заголовок) Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Если ОкноПриложения.Основное Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Попытка
		ФормаОкна = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"));
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если ФормаОкна = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если ФормаОкна.ИмяФормы = "" Тогда
		Возврат Истина;
	КонецЕсли;	 
	Если ФормаОкна.ИмяФормы = "MessageBox" Тогда
		Возврат Истина;
	ИначеЕсли ФормаОкна.ИмяФормы = "ErrorWindow" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция ЭтоЗаголовокОкнаМодальногоДиалога(Заголовок) Экспорт
	Если Заголовок = "1С:Предприятие" Тогда
		Возврат Истина;
	ИначеЕсли Заголовок = "1C:Enterprise" Тогда
		Возврат Истина;
	ИначеЕсли Заголовок = "Отчет об ошибке" Тогда
		Возврат Истина;
	ИначеЕсли Заголовок = "Report about error" Тогда
		Возврат Истина;
	ИначеЕсли Заголовок = "Подробный текст ошибки" Тогда
		Возврат Истина;
	ИначеЕсли Заголовок = "Error info" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция НайтиФормуПоЗаголовку(ИмяФормы) Экспорт
	ОкноПриложения = ПолучитьАктивноеОкноИзТестовоеПриложение();
	НужнаяФорма = Неопределено;
	Если ОкноПриложения <> Неопределено Тогда
		НужнаяФорма = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"), ИмяФормы);
	КонецЕсли;	 
	Если НужнаяФорма = Неопределено Тогда
		// Иногда 1С некорректно отдаёт текущее окно, тогда будем искать во всех окнах
		// сначала поищем в недавно открытом окне
		
		Попытка
			ОкноПриложения = ПолучитьАктивноеОкноИзКонтекста();
			НужнаяФорма    = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"), ИмяФормы);
			Если НужнаяФорма <> Неопределено Тогда
				ЗапомнитьАктивноеОкно(ОкноПриложения); // произошла неявная смена активного окна
				Возврат НужнаяФорма;
			КонецЕсли;	 
		Исключение
			
		КонецПопытки;

		// затем будем искать во всех окнах
		МассивОкон = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
		Для каждого ТекОкно Из МассивОкон Цикл
			
			НужнаяФорма    = ТекОкно.НайтиОбъект(Тип("ТестируемаяФорма"), ИмяФормы);
			Если НужнаяФорма <> Неопределено Тогда
				ЗапомнитьАктивноеОкно(ТекОкно); // произошла неявная смена активного окна
				Возврат НужнаяФорма;
			КонецЕсли;	 
			
		КонецЦикла;
	КонецЕсли;	 
	
	Если НужнаяФорма = Неопределено Тогда
		СообщитьПользователюИВызватьИсключение(ПодставитьПараметрыВСтроку(
			Локализовать("Форма с заголовком <%1> не найдена."),
			ИмяФормы
		));
	КонецЕсли;	 
	
	ЗапомнитьАктивноеОкно(ОкноПриложения); // произошла неявная смена активного окна
	Возврат НужнаяФорма;
КонецФункции	

// Использовать, когда известно, что у текущего окна только одна форма, иначе надо использовать НайтиФормыТекущегоОкна()
&НаКлиенте
Функция НайтиТекущуюФормуTestClient() Экспорт
    Получилось = Истина;
    Попытка
        ОкноПриложения         = ПолучитьАктивноеОкноИзКонтекста();
        ТекущаяФорма           = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"));
    Исключение
        Получилось = Ложь;    
    КонецПопытки;
    
    Если Не Получилось Тогда
        ОкноПриложения = ПолучитьАктивноеОкноИзТестовоеПриложение();
		
		Попытка
	        ТекущаяФорма = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"));
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		
		ЗапомнитьАктивноеОкно(ОкноПриложения); // произошла неявная смена активного окна
    КонецЕсли;     
    
    Возврат ТекущаяФорма;
КонецФункции	

&НаКлиенте
Процедура ПолучитьПараметрыОбластиМакета(Знач ИмяОбласти, НачСтр, НачКол, КолСтр, КолКол) Экспорт
	ИмяОбластиОригинал = ИмяОбласти;
	
	ИмяОбласти = СокрЛП(ВРег(ИмяОбласти));
	Поз = Найти(ИмяОбласти, "R");
	Если Поз = 0 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Неверный формат области <%1>"),
			ИмяОбластиОригинал
		);
	КонецЕсли;	 
	
	ИмяОбласти = Сред(ИмяОбласти, Поз + 1);
	Поз = Найти(ИмяОбласти, "C");
	Если Поз = 0 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Неверный формат области <%1>"),
			ИмяОбластиОригинал
		);
	КонецЕсли;	 
	НачСтр = Число(Лев(ИмяОбласти, Поз - 1));	
	
	ИмяОбласти = Сред(ИмяОбласти, Поз + 1);
	Поз = Найти(ИмяОбласти, ":");
	Если Поз = 0 Тогда
		КолСтр = НачСтр;
		Поз = Найти(ИмяОбластиОригинал, "C");
		НачКол = Число(Сред(ИмяОбластиОригинал, Поз + 1));
		КолКол = НачКол;
		Возврат;
	КонецЕсли;	 
	НачКол = Число(Лев(ИмяОбласти, Поз - 1));	

	ИмяОбласти = Сред(ИмяОбласти, Поз + 1);
	
	ИмяОбласти = СокрЛП(ВРег(ИмяОбласти));
	Поз = Найти(ИмяОбласти, "R");
	Если Поз = 0 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Неверный формат области <%1>"),
			ИмяОбластиОригинал
		);
	КонецЕсли;	 
	
	// вторая часть, после символа :
	
	ИмяОбласти = Сред(ИмяОбласти, Поз + 1);
	Поз = Найти(ИмяОбласти, "C");
	Если Поз = 0 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Неверный формат области <%1>"),
			ИмяОбластиОригинал
		);
	КонецЕсли;	 
	КолСтр = Число(Лев(ИмяОбласти, Поз - 1)) - НачСтр + 1;	
	
	ИмяОбласти = Сред(ИмяОбласти, Поз + 1);
	КолКол = Число(ИмяОбласти) - НачКол + 1;	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьДействийПользователя(ОдинКлиентТестирования = Истина) Экспорт 
	Если ОдинКлиентТестирования Тогда
		ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующий();
	КонецЕсли;
	
	Если ТекущийTestclientЭтоWebКлиент Тогда
		СообщитьПользователю(Локализовать("Web клиент не поддерживает запись действий пользователя."));
		Возврат;
	КонецЕсли;	 
	
	Если Элементы.кнНачатьЗаписьДействийПользователя.Видимость = Истина Тогда
		Попытка
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.НачатьЗаписьЖурналаДействийПользователя();
			ПоказатьОповещениеПользователя(Локализовать("Запись действий пользователя начата."));
			Отладка(Локализовать("Запись действий пользователя начата."));
		Исключение
			// TODO: Почему такой текст сообщения?
			СообщитьПользователю (ПодставитьПараметрыВСтроку(
				Локализовать("НачатьЗаписьДействийПользователя:%1"),
				ОписаниеОшибки()
			));
			Возврат;
		КонецПопытки;
		
	ИначеЕсли Элементы.кнПриостановитьЗаписьДействийПользователя.Видимость = Истина Тогда
		Элементы.кнНачатьЗаписьДействийПользователя.Заголовок = "Продолжить запись поведения";

		Попытка
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.ПриостановитьЗаписьЖурналаДействийПользователя();
			СообщитьПользователю(Локализовать("Запись действий пользователя приостановлена."));
		Исключение
			// TODO: Почему такой текст сообщения?
			СообщитьПользователю (ПодставитьПараметрыВСтроку(
				Локализовать("НачатьЗаписьДействийПользователя:%1"),
				ОписаниеОшибки()
			));
			Возврат;
		КонецПопытки;
		
	ИначеЕсли Элементы.кнПродолжитьЗаписьДействийПользователя.Видимость = Истина Тогда
		
		Попытка
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.ПродолжитьЗаписьЖурналаДействийПользователя(); ;
			СообщитьПользователю(Локализовать("Запись действий пользователя продолжена."));
		Исключение
			// TODO: Почему такой текст сообщения?
			СообщитьПользователю (ПодставитьПараметрыВСтроку(
				Локализовать("НачатьЗаписьДействийПользователя:%1"),
				ОписаниеОшибки()
			));
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Если НужноПоказатьОкноОстановкиЗаписиДействийПользователя() Тогда
		ПоказатьОкноОстановкиЗаписиДействийПользователя();
	КонецЕсли;	 
	
	ИдетОпросЭлементовФормTestClient = Ложь;
	МассивСостояниеФормTestClient    = Новый Массив;
	ПодключитьОбработчикОжидания("ОпросЭлементовФормTestClient", 4);
КонецПроцедуры

// Преобразует значение таблицы полученное из элемента формы в таблицу Gherkin
&НаКлиенте
Функция ЗначениеТаблицыФормыВТаблицуGherkin(ЗначениеТаблицы) Экспорт
	Если ЗначениеТаблицы = Неопределено Тогда
		Возврат "";
	КонецЕсли;	 
	
	Возврат ПолучитьСтрокуСТЧФормаTestClient(ЗначениеТаблицы);
КонецФункции	 

// Преобразует таблицу Gherkin в многострочную строку
&НаКлиенте
Функция МногострочнаяСтрокаИзПараметраШага(Параметр) Экспорт
	
	Если ТипЗнч(Параметр) = Тип("Строка") Тогда
		Текст = Параметр;
	Иначе	
		Текст = "";
		Для Сч = 0 По Параметр.Количество() - 1 Цикл
			СтрокаТабПарам = Параметр[Сч];
			Текст = Текст + СтрокаТабПарам.Кол1;
			Если СтрокаТабПарам.Свойство("Кол2") Тогда
				Текст = Текст + СтрокаТабПарам.Кол2;
			КонецЕсли;
			Если СтрокаТабПарам.Свойство("Кол3") Тогда
				Текст = Текст + СтрокаТабПарам.Кол3;
			КонецЕсли;
			Если СтрокаТабПарам.Свойство("Кол4") Тогда
				Текст = Текст + СтрокаТабПарам.Кол4;
			КонецЕсли;
			Если СтрокаТабПарам.Свойство("Кол5") Тогда
				Текст = Текст + СтрокаТабПарам.Кол5;
			КонецЕсли;
			Если СтрокаТабПарам.Свойство("Кол6") Тогда
				Текст = Текст + СтрокаТабПарам.Кол6;
			КонецЕсли;
			Если СтрокаТабПарам.Свойство("Кол7") Тогда
				Текст = Текст + СтрокаТабПарам.Кол7;
			КонецЕсли;
			Если Сч < Параметр.Количество() - 1 Тогда
				Текст = Текст + Символы.ПС;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Текст; 
	
КонецФункции	 

&НаКлиенте
Процедура ФорматироватьТаблицуGherkin(МассивТаблицы) Экспорт
	
	МассивПараметров = ЗначенияИзСтрокиТаблицыGherkin(МассивТаблицы[0]);
	КолПараметров = МассивПараметров.Количество();
	МассивДлин = Новый Массив;
	Для каждого Элем Из МассивПараметров Цикл
		МассивДлин.Добавить(0);
	КонецЦикла;
	
	Для каждого СтрТзн Из МассивТаблицы Цикл
		МассивПараметров = ЗначенияИзСтрокиТаблицыGherkin(СтрТзн);
		Для Ккк = 0 По МассивДлин.Количество() - 1 Цикл
			ДлинаСтроки = СтрДлина(СокрЛП(МассивПараметров.Получить(Ккк)));
			Если ДлинаСтроки > МассивДлин[Ккк] Тогда
				МассивДлин[Ккк] = ДлинаСтроки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Ррр = 0 По (МассивТаблицы.Количество() - 1) Цикл
		СтрТзн = МассивТаблицы[Ррр];
		МассивПараметров = ЗначенияИзСтрокиТаблицыGherkin(СтрТзн);
		СтрПараметров = "| ";
		Для Ккк = 0 По МассивДлин.Количество() - 1 Цикл
			Зн = СокрЛП(МассивПараметров[Ккк]);
			Пока СтрДлина(Зн) < МассивДлин[Ккк] Цикл
				Зн = Зн + " ";
			КонецЦикла;
			СтрПараметров = СтрПараметров + Зн + " | ";
		КонецЦикла;
		
		СтрПараметров = СокрЛП(СтрПараметров);
		
		МассивТаблицы[Ррр] = СтрПараметров;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтрокуЗапуска(Команда)
	
	#Если НЕ ВебКлиент Тогда
	
	ИмяEpf = "vanessa-automation.epf";
	Если Объект.ВерсияПоставки = "single" Тогда
		ИмяEpf = "vanessa-automation-single.epf";
	КонецЕсли;	 
	
	Стр = """%1"" /N""%2"" /TestManager /Execute ""%3"" /IBConnectionString ""%4"" /C""%5""";
	Стр = ПодставитьПараметрыВСтроку(Стр,
		КаталогПрограммы() + ИмяИсполняемогоФайлаТонкийКлиент,
		ИмяПользователя(),
		Объект.КаталогИнструментов + "\" + ИмяEpf,
		СтрЗаменить(СтрокаСоединенияИнформационнойБазы(),"""",""""""),
		"StartFeaturePlayer;QuietInstallVanessaExt;VAParams=C:\Temp\VAParams.json");
		
	Если НЕ Объект.ИспользоватьКомпонентуVanessaExt Тогда
		Стр = СтрЗаменить(Стр, "QuietInstallVanessaExt;", "");
	КонецЕсли;	 	
		
	Если ЭтоLinux Тогда
		Стр = СтрЗаменить(Стр,"\","/");
	КонецЕсли;	 	
	
	Сообщить(Стр);
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтрокуЗапускаСВыводомЛогаВКонсоль(Команда)
	
	#Если НЕ ВебКлиент Тогда
	
	ИмяEpf = "vanessa-automation.epf";
	Если Объект.ВерсияПоставки = "single" Тогда
		ИмяEpf = "vanessa-automation-single.epf";
	КонецЕсли;	 
	
	Стр = " oscript _quote_%6_quote_ ""%1"" /N""%2"" /TestManager /Execute ""%3"" /IBConnectionString ""%4"" /C""%5""";
	Стр = ПодставитьПараметрыВСтроку(Стр,
		КаталогПрограммы() + ИмяИсполняемогоФайлаТонкийКлиент,
		ИмяПользователя(),
		Объект.КаталогИнструментов + "\" + ИмяEpf,
		СтрЗаменить(СтрокаСоединенияИнформационнойБазы(),"""",""""""),
		"StartFeaturePlayer;QuietInstallVanessaExt;VAParams=C:\Temp\VAParams.json",
		ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "tools\onescript\RunVA.os"
		);
		
	Если НЕ Объект.ИспользоватьКомпонентуVanessaExt Тогда
		Стр = СтрЗаменить(Стр, "QuietInstallVanessaExt;", "");
	КонецЕсли;	 	
		
	Если ЭтоLinux Тогда
		Стр = СтрЗаменить(Стр,"\","/");
	КонецЕсли;	 	
	
	Стр = СтрЗаменить(Стр, """", "\""");
	Стр = СтрЗаменить(Стр, "_quote_", """");
	
	Сообщить("chcp 65001");
	Сообщить(Стр);
	Сообщить(Локализовать("Нужно в VAParams.json указать параметры:"));
	Сообщить("""ВыводитьЛогВКонсоль"": true");
	Сообщить("""ДелатьЛогВыполненияСценариевВТекстовыйФайл"": true");
	Сообщить("""ВыгружатьСтатусВыполненияСценариевВФайл"": true");
	Сообщить("""ИмяФайлаЛогВыполненияСценариев"": """"");
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьИсходныйXML() Экспорт
	Стр = Объект.СгенерированныйXML;
	ОбработатьXMLВUILogToScript(Стр);
	СделатьПереводСгенерированногоТекстаGherkin();
	
	ЭтаФорма.ТекущийЭлемент = Элементы.СценарийПоведения;
КонецПроцедуры

&НаКлиенте
Функция НаЭкранеОкноПредупреждения()
	Если Не ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Попытка
		МассивОкон = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Для Каждого ТекущееОкно Из МассивОкон Цикл
		Если ЭтоЗаголовокОкнаМодальногоДиалога(ТекущееОкно.Заголовок) Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция НаЭкранеДиалогАвторизации() Экспорт
	Если Версия8316ИлиВыше Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если Не ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Попытка
		НужноеОкно = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения")
		, "1С:Предприятие. Доступ к информационной базе");
	Исключение
		Возврат Ложь;
	КонецПопытки;
		  
	Если НужноеОкно = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	

&НаКлиенте
Функция ПроверитьПортНаЗанятость(Знач Порт = 48000) Экспорт
	
	Если Порт <= 0 Или Порт > 65536 Тогда
		Порт = 48000;
	КонецЕсли;
	
	НачалоДиапазонаПортов    = 48000;
	ОкончаниеДиапазонаПортов = 50000;
	
	Если ЗначениеЗаполнено(Объект.ДиапазонПортовTestclient) Тогда
		// там должна быть строка вида 48000-48020
		МассивЗначений = РазложитьСтрокуВМассивПодстрокКлиент(Объект.ДиапазонПортовTestclient, "-");
		Если МассивЗначений.Количество() <> 2 Тогда
			ВызватьИсключение ПодставитьПараметрыВСтроку(
				Локализовать("Указан неверный диапазон портов: <%1>"),
				Объект.ДиапазонПортовTestclient
			);
		КонецЕсли;	 
		НачалоДиапазонаПортов = Число(МассивЗначений[0]);
		ОкончаниеДиапазонаПортов = Число(МассивЗначений[1]);
		Порт = НачалоДиапазонаПортов;
	КонецЕсли;	 
	
	МассивЗанятыхПортов = ПолучитьМассивЗанятыхПортов();
	Для Каждого ТекПорт Из МассивЗанятыхПортов Цикл
		ПортыКоторыеСчиталисьЗанятыми.Вставить(ТекПорт, Истина);
	КонецЦикла;	 
	
	//Первый проход. Проверяем, что порт свободен сейчас и никогда не был занят.
	Если МассивЗанятыхПортов.Найти(Порт) <> Неопределено Тогда
		СвободныйПорт = НачалоДиапазонаПортов;
		// найти свободный порт в диапазоне
		Для Счетчик = НачалоДиапазонаПортов По ОкончаниеДиапазонаПортов Цикл
			Если МассивЗанятыхПортов.Найти(Счетчик) = Неопределено И ПортыКоторыеСчиталисьЗанятыми[Счетчик] = Неопределено Тогда
				Возврат Счетчик;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;	
	
	//Второй проход. Проверяем, что порт свободен сейчас.
	Если МассивЗанятыхПортов.Найти(Порт) <> Неопределено Тогда
		СвободныйПорт = НачалоДиапазонаПортов;
		// найти свободный порт в диапазоне
		Для Счетчик = НачалоДиапазонаПортов По ОкончаниеДиапазонаПортов Цикл
			Если МассивЗанятыхПортов.Найти(Счетчик) = Неопределено Тогда
				Возврат Счетчик;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;	
	
	Возврат Порт;
	
КонецФункции // ПолучитьСвободныйПорт()

&НаКлиенте
Функция ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующий(ДопПараметр = "", СтрокаОшибки = Неопределено) Экспорт 
	
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ЭтотКлиент", Истина);
	Иначе	
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Имя", ТекущиеДанные.Имя);
	КонецЕсли;	 

	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДанныеЗапускаКлиентаТестирования = НайденныеСтроки[0];
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДопПараметр) Тогда
		ДанныеЗапускаКлиентаТестирования.ДопПараметры = ДопПараметр;
	КонецЕсли;	 
	
	РезультатПодключения = ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующийДляНесколькихКлиентов(ДанныеЗапускаКлиентаТестирования, СтрокаОшибки);
	
	Возврат РезультатПодключения;
	
КонецФункции

// Возвращает массив
// каждая строка массива - массив значений исходного табличного документа
// если возможно используется ЗаписатьСодержимоеВФайл
// для web клиента и для платформы меньше 8.3.8 - считывает макет по ячейкам, согласно указанных параметров
// если использовался метод ЗаписатьСодержимоеВФайл - будет взята только часть макета, согласно указанных параметров
// чтения макета параметры чтения макета задаются через шаг: Тогда Я задаю системные параметры считывания макета НачСтр
// 1 НачКол 1 КолСтр 5 КолКол 3
&НаКлиенте
Функция ПолучитьТабДокИзTestClientКакМассив(ЭлементФормы, ДопПараметры = Неопределено) Экспорт
	#Если НЕ ВебКлиент Тогда
		
	ДанныеМакета = Неопределено;
	Если Объект.ПолучатьМакетыСПомощьюРасширенияVAExtension И НЕ ЗапрещеныСинхронныеВызовы Тогда
		ДанныеМакета = ТабличныйДокументИзКлиентаТестированияЧерезРасширение(ЭлементФормы);
	КонецЕсли;	 	
	
	ИмяВременногоФайла = Неопределено;
	
	Если ДанныеМакета = Неопределено Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		ОжиданиеЗаполненияТабличногоДокумента(ЭлементФормы);
		Если ТекущийTestclientЭтоWebКлиент ИЛИ НЕ Версия838ИлиВыше ИЛИ НЕ СохранениеМакетовВФайлПриЧтенииДанных Тогда
			// значит надо считывать макет по каждой ячейке
			Возврат МакетTestClientПоЯчейкеКакМассив(ЭлементФормы, ДопПараметры);
		КонецЕсли;

		// значит можно сохранить макет в файл и пробросить в TestManager
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");
			
		ТекущаяДоступность = Истина;
		Попытка
			ТекущаяДоступность = ЭлементФормы.ТекущаяДоступность();
		Исключение
		КонецПопытки;
			
		Если НЕ ТекущаяДоступность Тогда
			Возврат МакетTestClientПоЯчейкеКакМассив(ЭлементФормы, ДопПараметры);
		КонецЕсли;
		
		УстановитьРезультатДиалогаВыбораФайла(Истина, ИмяВременногоФайла, Неопределено);
		Если Версия8325ИлиВыше Тогда
			ЭлементФормы.ЗаписатьСодержимоеВФайл(Истина);
		Иначе
			ЭлементФормы.ЗаписатьСодержимоеВФайл();
		КонецЕсли;	
				
		КоличествоПопытокПроверкиСуществованияФайла     = 0;
		МаксКоличествоПопытокПроверкиСуществованияФайла = ЗначениеКоличествоПопытокВыполненияДействия();
		МаксКоличествоПопытокПроверкиСуществованияФайла = Макс(МаксКоличествоПопытокПроверкиСуществованияФайла, 2);
		Пока Истина Цикл
			КоличествоПопытокПроверкиСуществованияФайла = КоличествоПопытокПроверкиСуществованияФайла + 1;
			Если КоличествоПопытокПроверкиСуществованияФайла > МаксКоличествоПопытокПроверкиСуществованияФайла 
					ИЛИ ФайлСуществуетКомандаСистемы(ИмяВременногоФайла)Тогда
				Прервать;
			КонецЕсли;	 
			
			Если КоличествоПопытокПроверкиСуществованияФайла = 1 Тогда
				ПромФайл = ФайлМакетаВФайлахКоторыеИспользовалисьРанееВЭтомЖеСценарии();
				Если ПромФайл <> Неопределено Тогда
					ИмяВременногоФайла = ПромФайл;
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Sleep(1);
		КонецЦикла;	
			
		Если Не ФайлСуществуетКомандаСистемы(ИмяВременногоФайла) Тогда
			ИмяВременногоФайла = ФайлМакетаВФайлахКоторыеИспользовалисьРанееВЭтомЖеСценарии();
			Если ИмяВременногоФайла = Неопределено Тогда
				// Значит либо файл не успел сохраниться, либо ТабличныйДокумент не доступен для редактирования, и просто не может
				// сохранить файл значит надо считать ТабличныйДокумент по ячейкам
				Возврат МакетTestClientПоЯчейкеКакМассив(ЭлементФормы, ДопПараметры);
			КонецЕсли;	 
		КонецЕсли;	 
			
		КоличествоПопытокПолученияДвоичныхДанных     = 0;
		МаксКоличествоПопытокПолученияДвоичныхДанных = ЗначениеКоличествоПопытокВыполненияДействия();
		МаксКоличествоПопытокПолученияДвоичныхДанных = Макс(МаксКоличествоПопытокПолученияДвоичныхДанных, 5);
		Пока Истина Цикл
			КоличествоПопытокПолученияДвоичныхДанных = КоличествоПопытокПолученияДвоичныхДанных + 1;
			
			Попытка
				ДанныеМакета = Новый ДвоичныеДанные(ИмяВременногоФайла);
				Прервать;
			Исключение
				
			КонецПопытки;
			
			Если КоличествоПопытокПолученияДвоичныхДанных > МаксКоличествоПопытокПолученияДвоичныхДанных Тогда
				ВызватьИсключение ПодставитьПараметрыВСтроку(
					Локализовать("Не вышло получить данные файла <%1>"),
					ИмяВременногоФайла
				);
			КонецЕсли;	 
			
			Sleep(1);
		КонецЦикла;	 

		ЗапомнитьДанныеФайлаПриСохраненииМакета(ИмяВременногоФайла);
	КонецЕсли;	 
	
	ТабДок = ПреобразоватьФайлМакетаВМассивСервер(ДанныеМакета, ДопПараметры);
		
	УдалятьПустыеСтрокиИзМакета = Истина;
	Если ДопПараметры <> Неопределено И ДопПараметры.Свойство("УдалятьПустыеСтрокиИзМакета") Тогда
		УдалятьПустыеСтрокиИзМакета = ДопПараметры.УдалятьПустыеСтрокиИзМакета;
	КонецЕсли;	 
		
	Если УдалятьПустыеСтрокиИзМакета Тогда
		УбратьПустыеСтрокиИКолонкиСКраёвМакета(ТабДок);
	КонецЕсли;	 

	Если ИмяВременногоФайла <> Неопределено  Тогда
		УдалитьФайлыКомандаСистемы(ИмяВременногоФайла);
	КонецЕсли;	 
		
	Возврат ТабДок;
	#КонецЕсли
КонецФункции	

// Возвращает ТабличныйДокумент
// для тонкого клиента, если возможно - использует ЗаписатьСодержимоеВФайл, при этом макет сохраняется целиком как есть
// для web клиента и для платформы меньше 8.3.8 - считывает макет по ячейкам, согласно указанных параметров чтения макета
// параметры чтения макета задаются через шаг: Тогда Я задаю системные параметры считывания макета НачСтр 1 НачКол 1
// КолСтр 5 КолКол 3
&НаКлиенте
Функция ПолучитьТабличныйДокументTestClient(ЭлементФормы, ДопПараметры = Неопределено) Экспорт
	#Если НЕ ВебКлиент Тогда
		
	Если Объект.ПолучатьМакетыСПомощьюРасширенияVAExtension Тогда
		Возврат ТабличныйДокументИзКлиентаТестированияЧерезРасширение(ЭлементФормы, ДопПараметры);
	КонецЕсли;	 	
		
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ОжиданиеЗаполненияТабличногоДокумента(ЭлементФормы);
	Если НЕ ТекущийTestclientЭтоWebКлиент И Версия838ИлиВыше И СохранениеМакетовВФайлПриЧтенииДанных Тогда
		
		// значит можно сохранить макет в файл и пробросить в TestManager
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");
		
		ТекущаяДоступность = Истина;
		Попытка
			ТекущаяДоступность = ЭлементФормы.ТекущаяДоступность();
		Исключение
		КонецПопытки;
		
		Если ТекущаяДоступность Тогда
			УстановитьРезультатДиалогаВыбораФайла(Истина, ИмяВременногоФайла, Неопределено);
			Если Версия8325ИлиВыше Тогда
				ЭлементФормы.ЗаписатьСодержимоеВФайл(Истина);
			Иначе
				ЭлементФормы.ЗаписатьСодержимоеВФайл();
			КонецЕсли;	
			
			КоличествоПопытокПроверкиСуществованияФайла     = 0;
			МаксКоличествоПопытокПроверкиСуществованияФайла = ЗначениеКоличествоПопытокВыполненияДействия();
			МаксКоличествоПопытокПроверкиСуществованияФайла = Макс(МаксКоличествоПопытокПроверкиСуществованияФайла, 2);
			Пока Истина Цикл
				КоличествоПопытокПроверкиСуществованияФайла = КоличествоПопытокПроверкиСуществованияФайла + 1;
				Если КоличествоПопытокПроверкиСуществованияФайла > МаксКоличествоПопытокПроверкиСуществованияФайла Тогда
					Прервать;
				КонецЕсли;	 
				
				Если ФайлСуществуетКомандаСистемы(ИмяВременногоФайла) Тогда
					Прервать;
				КонецЕсли;	 
				
				Если КоличествоПопытокПроверкиСуществованияФайла = 1 Тогда
					ПромФайл = ФайлМакетаВФайлахКоторыеИспользовалисьРанееВЭтомЖеСценарии();
					Если ПромФайл <> Неопределено Тогда
						ИмяВременногоФайла = ПромФайл;
						Прервать;
					КонецЕсли;	 
				КонецЕсли;	 
				
				Sleep(1);
			КонецЦикла;	
		Иначе	
			Возврат ТабличныйДокументTestClientПоЯчейкам(ЭлементФормы, ДопПараметры);
		КонецЕсли;	 
		
		Если Не ФайлСуществуетКомандаСистемы(ИмяВременногоФайла) Тогда
			ИмяВременногоФайла = ФайлМакетаВФайлахКоторыеИспользовалисьРанееВЭтомЖеСценарии();
			// Значит либо файл не успел сохраниться, либо ТабличныйДокумент не доступен для редактирования, и просто не может
			// сохранить файл значит надо считать ТабличныйДокумент по ячейкам
			Если ИмяВременногоФайла = Неопределено Тогда
				Возврат ТабличныйДокументTestClientПоЯчейкам(ЭлементФормы, ДопПараметры);
			КонецЕсли;	 
		КонецЕсли;	 
		
		КоличествоПопытокПолученияДвоичныхДанных     = 0;
		МаксКоличествоПопытокПолученияДвоичныхДанных = ЗначениеКоличествоПопытокВыполненияДействия();
		МаксКоличествоПопытокПолученияДвоичныхДанных = Макс(МаксКоличествоПопытокПолученияДвоичныхДанных, 5);
		Пока Истина Цикл
			КоличествоПопытокПолученияДвоичныхДанных = КоличествоПопытокПолученияДвоичныхДанных + 1;
			
			Попытка
				ФайлМакета = Новый ДвоичныеДанные(ИмяВременногоФайла);
				Прервать;
			Исключение
				
			КонецПопытки;
			
			Если КоличествоПопытокПолученияДвоичныхДанных > МаксКоличествоПопытокПолученияДвоичныхДанных Тогда
				ВызватьИсключение ПодставитьПараметрыВСтроку(
					Локализовать("Не вышло получить данные файла <%1>"),
					ИмяВременногоФайла
				);
			КонецЕсли;	 
			
			Sleep(1);
		КонецЦикла;	
		
		ЗапомнитьДанныеФайлаПриСохраненииМакета(ИмяВременногоФайла);
		
		НадоСчитатьОбласть = Ложь;
		Если ДопПараметры <> Неопределено Тогда
			Если ДопПараметры.Свойство("НадоСчитатьОбласть") Тогда
				НадоСчитатьОбласть = ДопПараметры.НадоСчитатьОбласть;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если НадоСчитатьОбласть Тогда
			ТабДок = ОставитьЧастьМакетаСогласноПараметровЧтенияМакета(ФайлМакета, ДопПараметры.НачСтр, 
				ДопПараметры.НачКол, ДопПараметры.КолСтр, ДопПараметры.КолКол);
		Иначе	
			ТабДок = ТабличныйДокументИзДвоичныхДанных(ФайлМакета);
		КонецЕсли;	 
		
		УдалитьФайлыКомандаСистемы(ИмяВременногоФайла);
		
		Возврат ТабДок;
	Иначе	
		// значит надо считывать макет по ячейке
		Возврат ТабличныйДокументTestClientПоЯчейкам(ЭлементФормы, ДопПараметры);
	КонецЕсли;	 
	#КонецЕсли
КонецФункции	

&НаКлиенте
Функция ПолучитьЗначениеТестируемаяТаблицаФормы(ЭлементФормы, ДопПараметры = Неопределено) Экспорт
	ВыделятьВсеСтроки = Истина;
	ПроверкаКоличестваСтрок = Ложь;
	ВидСравненияТаблицы = Неопределено;
	ЗначениеСравнения = 0;
	НадоПолучитьТолькоНесколькоСтрок = Ложь;
	ВыполнятьОбновлениеТаблицы = Ложь;
	ВыполнятьУпорядочиваниеПоКолонкам = Ложь;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ВыделятьВсеСтроки") Тогда
			ВыделятьВсеСтроки = ДопПараметры.ВыделятьВсеСтроки;
		КонецЕсли;	 
		Если ДопПараметры.Свойство("ПроверкаКоличестваСтрок") Тогда
			ПроверкаКоличестваСтрок = ДопПараметры.ПроверкаКоличестваСтрок;
		КонецЕсли;	 
		Если ДопПараметры.Свойство("ВидСравненияТаблицы") Тогда
			ВидСравненияТаблицы = ДопПараметры.ВидСравненияТаблицы;
		КонецЕсли;	 
		Если ДопПараметры.Свойство("ЗначениеСравнения") Тогда
			ЗначениеСравнения = ДопПараметры.ЗначениеСравнения;
		КонецЕсли;	 
		Если НРег(ВидСравненияТаблицы) = "больше" ИЛИ ВидСравненияТаблицы = ">" Тогда
			НадоПолучитьТолькоНесколькоСтрок = Истина;
		КонецЕсли;	 
		Если ДопПараметры.Свойство("ВыполнятьОбновлениеТаблицы") Тогда
			ВыполнятьОбновлениеТаблицы = ДопПараметры.ВыполнятьОбновлениеТаблицы;
		КонецЕсли;
		Если ДопПараметры.Свойство("ВыполнятьУпорядочиваниеПоКолонкам") Тогда
			ВыполнятьУпорядочиваниеПоКолонкам = ДопПараметры.ВыполнятьУпорядочиваниеПоКолонкам;
		КонецЕсли;
	КонецЕсли;	 
	
	КоличествоПопыток = ЗначениеКоличествоПопытокВыполненияДействия();
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("КоличествоПопыток") Тогда
			КоличествоПопыток = ДопПараметры.КоличествоПопыток;
		КонецЕсли;	 
	КонецЕсли;
	
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		ТекущийРежимРедактирование = Ложь;
		Попытка
			ТекущийРежимРедактирование = ЭлементФормы.ТекущийРежимРедактирование();
		Исключение
		КонецПопытки;
		
		Если ТекущийРежимРедактирование Тогда
			Попытка
				ЭлементФормы.ЗакончитьРедактированиеСтроки();
			Исключение
			КонецПопытки;
		КонецЕсли;	 
		
		НадоПолучатьСтроки = Истина;
		ЗначениеТЧ         = Новый Массив;
		
		Попытка
			Если СчетчикПопыток > 1 Или ВыполнятьОбновлениеТаблицы Тогда
				ОбновитьСодержимоеТестируемойТаблицыФормы(ЭлементФормы, ДопПараметры);
			КонецЕсли;	 
		Исключение
		КонецПопытки;
		
		Попытка
			Если ВыделятьВсеСтроки Тогда
				ЭлементФормы.ПерейтиКПервойСтроке();
			КонецЕсли;	 
		Исключение
			// значит это не таблица
			НадоПолучатьСтроки = Ложь;
			ЗначениеТЧ         = Неопределено;
		КонецПопытки;
		
		Если НадоПолучатьСтроки  Тогда
			Попытка
				ТекЭлемент = ЭлементФормы.ПолучитьТекстЯчейки();
				
				Если ВыделятьВсеСтроки Тогда
					ЭлементФормы.ВыделитьВсеСтроки();
					// чтобы дать web клиенту успеть выделить строки
					Если ТекущийTestclientЭтоWebКлиент И БезопасноеВыполнениеШагов() Тогда
						sleep(1);
					КонецЕсли;	 
				КонецЕсли;

				ЗначениеТЧ = ЭлементФормы.ПолучитьВыделенныеСтроки();
				НадоПолучатьСтроки = Ложь;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если НадоПолучатьСтроки Тогда
			// для случая когда в таблице нет строк
			Попытка
				ЗначениеТЧ = ЭлементФормы.ПолучитьВыделенныеСтроки();
			Исключение
				СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;	 
		
		Если ВыделятьВсеСтроки И (ЗначениеТЧ <> Неопределено) И (ЗначениеТЧ.Количество() = 1) Тогда
			// значит возможна ситуация, когда в таблице запрещено получение всех строк
			
			ЗначениеТЧ = Новый Массив;
			
			// будем получать значение таблицы через переход к каждой строке
			ЭлементФормы.ПерейтиКПервойСтроке();
			
			КоличествоПолученныхСтрок = 0;
			Пока Истина Цикл
				СтрокаТаблицы = ЭлементФормы.ПолучитьВыделенныеСтроки();
				Если СтрокаТаблицы.Количество() <> 1 Тогда
					ВызватьИсключение Локализовать("Ожидали получить только одну строку таблицы.");
				КонецЕсли;	 
				
				ЗначениеТЧ.Добавить(СтрокаТаблицы[0]);
				КоличествоПолученныхСтрок = КоличествоПолученныхСтрок + 1;
				
				Если ПроверкаКоличестваСтрок 
						И НадоПолучитьТолькоНесколькоСтрок 
						И КоличествоПолученныхСтрок > ЗначениеСравнения Тогда
					Прервать;
				КонецЕсли;	 
				
				Попытка
					ЭлементФормы.ПерейтиКСледующейСтроке();
				Исключение
					Прервать;
				КонецПопытки;
			КонецЦикла;	
		КонецЕсли;
		
		Если ЗначениеТЧ <> Неопределено Тогда
			Если ВыполнятьУпорядочиваниеПоКолонкам Тогда
				УпорядочитьЗначениеТаблицыФормыПоПорядкуКолонокЕслиЭтоВозможно(ЭлементФормы, ЗначениеТЧ);
			КонецЕсли;	
			Прервать;
		КонецЕсли;
		
		Если СчетчикПопыток < КоличествоПопыток Тогда
			sleep(1);
		КонецЕсли;	 
		
	КонецЦикла;	
	
	Возврат ЗначениеТЧ;
КонецФункции

&НаКлиенте
Процедура ОбновитьСодержимоеТестируемойТаблицыФормы(ЭлементФормы, ДопПараметры = Неопределено) Экспорт 
	
	Если НЕ Объект.ОбновлятьТаблицыФормыПриПолученииЗначения Тогда
		Возврат;
	КонецЕсли;	 
		
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		
		Если НЕ ДопПараметры.Свойство("ВыполнятьОбновлениеТаблицы") Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ДопПараметры.ВыполнятьОбновлениеТаблицы Тогда
			Возврат;			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ДопПараметры) <> Тип("Структура") 
		И ДопПараметры <> Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Попытка
		ОбновитьСодержимоеТестируемойТаблицыФормыВПопытке(ЭлементФормы, ДопПараметры);
	Исключение
		// По каким то причинам обновить таблицу формы не получилось	
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьСостояниеФормыTestClient() Экспорт
	ДопПараметры = Новый Структура;
	СохраненноеСостояниеФормыTestClient = ПолучитьСостояниеФормыTestClient(ДопПараметры);
	Элементы.ПолучитьИзмененияФормыGherkin.Заголовок = Локализовать("Получить изменения формы в виде шагов");
	Элементы.VanessaEditorПолучитьИзмененияФормыGherkin.Заголовок = Элементы.ПолучитьИзмененияФормыGherkin.Заголовок;
	Элементы.VanessaEditorКонтекстноеМенюПолучитьИзмененияФормыGherkin.Заголовок = Элементы.ПолучитьИзмененияФормыGherkin.Заголовок;
КонецПроцедуры

&НаКлиенте
Процедура ЗабытьСостояниеФормыTestClient() Экспорт
	СохраненноеСостояниеФормыTestClient = Неопределено;
	Элементы.ПолучитьИзмененияФормыGherkin.Заголовок = Локализовать("Получить состояние всей формы в виде шагов");
	Элементы.VanessaEditorПолучитьИзмененияФормыGherkin.Заголовок = Элементы.ПолучитьИзмененияФормыGherkin.Заголовок;
	Элементы.VanessaEditorКонтекстноеМенюПолучитьИзмененияФормыGherkin.Заголовок = Элементы.ПолучитьИзмененияФормыGherkin.Заголовок;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСостояниеТекущегоЭлементаФормы() Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТолькоАктивныйЭлемент", Истина);
	ДопПараметры.Вставить("ВыполнятьУпорядочиваниеПоКолонкам", Истина);
	ПолучитьИзмененияФормы("Gherkin", ДопПараметры);
	СделатьПереводСгенерированногоТекстаGherkin();
	
	Если Объект.ИспользоватьРедакторVanessaEditor И Элементы.ФункциональностьЗакладки.ТекущаяСтраница = Элементы.ГруппаЗапускТестов Тогда
		Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
			Возврат;
		КонецЕсли;	 
		МодульРедакторТекста().ВставитьТекстСУчетомФорматирования(Объект.СгенерированныйСценарий);
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ПолучитьИзмененияФормыGherkin() Экспорт
	ДопПараметры = Новый Структура;
	ПолучитьИзмененияФормы("Gherkin", ДопПараметры);
КонецПроцедуры

&НаКлиенте
Функция ПодключитьПрофильTestClientПоИмени(ИмяКлиентаТестирования, ДопПараметры = Неопределено) Экспорт
	РазорватьСоединениеTestClient("ПодключитьПрофильTestClientПоИмени");

	// отключить существующий сеанс, если это не повторный запуск
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Подключен", Истина);
	
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ОбъектКонтекстСохраняемый.Удалить("ТестовоеПриложение");
		ОбъектКонтекстСохраняемый.Удалить("ГлавноеОкноТестируемого");
	КонецЕсли;	

	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя", ИмяКлиентаТестирования);
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		СообщитьПользователю (ПодставитьПараметрыВСтроку(
			Локализовать("Не найден профиль клиента тестирования <%1>."),
			ИмяКлиентаТестирования
		));
		Возврат Ложь;
	КонецЕсли;	 
	
	СтрокаПрофиля = НайденныеСтроки[0];
	
	ЕстьПодключение = ПолучитьКлиентаТестирования(ИмяКлиентаТестирования,,,ДопПараметры);
	Если Не ЕстьПодключение Тогда
		СтрокаПрофиля.Подключен = Ложь;
	Иначе
		Для Каждого НайденнаяСтрока Из ДанныеКлиентовТестирования Цикл
			НайденнаяСтрока.Подключен = Ложь;
		КонецЦикла;
		
		СтрокаПрофиля.Подключен = Истина;
		
	КонецЕсли;
	
	Элементы.ДанныеКлиентовТестирования.ТекущаяСтрока = СтрокаПрофиля.ПолучитьИдентификатор();
	
	Возврат ЕстьПодключение;
КонецФункции

&НаКлиенте
Функция ПолучитьКлиентаТестирования(ИмяКлиентаТестирования, ДопПараметр = "", СтрокаОшибки = Неопределено, 
		ДополнительныеПараметры = Неопределено) Экспорт
	// отключаем существующее подключение
	РазорватьСоединениеTestClient("ПолучитьКлиентаТестирования");
	
	ДанныеЗапускаКлиентаТестирования = НайтиДанныеЗапускаКлиентаТестирования(ИмяКлиентаТестирования);
	Если ДанныеЗапускаКлиентаТестирования = Неопределено Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не получилось найти данные для подключения профиля клиента тестирования <%1>"),
			ИмяКлиентаТестирования
		);
	КонецЕсли;	 
	ДанныеЗапускаКлиентаТестирования.ДопПараметры = ДопПараметр + ДанныеЗапускаКлиентаТестирования.ДопПараметры;
	ЕстьПодключение = ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующийДляНесколькихКлиентов(ДанныеЗапускаКлиентаТестирования, 
		СтрокаОшибки, ДополнительныеПараметры);
	
	Если ЕстьПодключение Тогда
		СохранитьКлиентовТестирования();
	КонецЕсли;	 
	
	Возврат ЕстьПодключение;
КонецФункции

&НаКлиенте
Функция НайтиДанныеЗапускаКлиентаТестирования(ИмяКлиентаТестирования) Экспорт
	Результат = Неопределено;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя", ИмяКлиентаТестирования);
	
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Результат = НайденныеСтроки[0];
	Иначе	
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Синоним", ИмяКлиентаТестирования);
		
		НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Результат = НайденныеСтроки[0];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Делает переход к нужной строке таблицы
//
&НаКлиенте
Функция СделатьПереход(ТаблицаСписок, ОписаниеСтроки, ОшибкаПереходВниз, ОшибкаПереходВверх, ПереключитьВыделение = Ложь, ЗаданноеНаправление = Неопределено) Экспорт
	
	ПолучилосьПерейти = Ложь;
	
	Если ЗаданноеНаправление = Неопределено Тогда
		
		Попытка
			ПолучилосьПерейти = ТаблицаСписок.ПерейтиКСтроке(ОписаниеСтроки, Вычислить("НаправлениеПереходаКСтроке.Вниз"), ПереключитьВыделение);
		Исключение
			ОшибкаПереходВниз = ОписаниеОшибки();
			
		КонецПопытки;
		
		Если НЕ ПолучилосьПерейти Тогда
			Попытка
				ПолучилосьПерейти = ТаблицаСписок.ПерейтиКСтроке(ОписаниеСтроки, Вычислить("НаправлениеПереходаКСтроке.Вверх"), ПереключитьВыделение);
			Исключение
				ОшибкаПереходВверх = ОписаниеОшибки();
				
			КонецПопытки;
		КонецЕсли;	
	Иначе
		
		Если ЗаданноеНаправление = "Вверх" Тогда
			ПолучилосьПерейти = ТаблицаСписок.ПерейтиКСтроке(ОписаниеСтроки, Вычислить("НаправлениеПереходаКСтроке.Вверх"), ПереключитьВыделение);
		ИначеЕсли ЗаданноеНаправление = "Вниз" Тогда
			ПолучилосьПерейти = ТаблицаСписок.ПерейтиКСтроке(ОписаниеСтроки, Вычислить("НаправлениеПереходаКСтроке.Вниз"), ПереключитьВыделение);
		Иначе
			ВызватьИсключение ПодставитьПараметрыВСтроку(Локализовать("Неверно задано направление перехода в таблице: %1"), ЗаданноеНаправление);
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	Возврат ПолучилосьПерейти;
	
КонецФункции	

// Пытается получить значение переменной из контекста
// Если значение вида $ИмяПеременной$, тогда будет возвращено ОбъектКонтекст.ИмяПеременной
// ИначеЕсли значение вида $$ИмяПеременной$$, тогда будет возвращено ОбъектКонтекстСохраняемый.ИмяПеременной
// ИначеЕсли значение вида $$$ИмяПеременной$$$, это значит, что надо отбросить $$ слева и справа, т.е. символ $ экранирован
// Иначе будет возвращено просто значение
//
&НаКлиенте
Функция ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(Знач Значение, ВызыватьИсключение = Истина) Экспорт
	Если Значение = "$" ИЛИ Значение = "$$" Тогда
		Возврат Значение;
	ИначеЕсли НЕ (Лев(Значение, 1) = "$" И Прав(Значение, 1) = "$") Тогда
		Возврат Значение;
	КонецЕсли;

	Если (Лев(Значение, 3) = "$$$") И (Прав(Значение, 3) = "$$$") Тогда
		// это значит, что надо отбросить $$ слева и справа
		Значение = Сред(Значение, 3);
		Возврат Лев(Значение, СтрДлина(Значение) - 2);

	ИначеЕсли Лев(Значение, 2) = "$$" И Прав(Значение, 2) = "$$" Тогда

		ИмяПеременной = Сред(Значение, 3);
		ИмяПеременной = Лев(ИмяПеременной, СтрДлина(ИмяПеременной) - 2);
		Если Найти(ИмяПеременной, "$") > 0 Тогда
			Возврат Значение;
		КонецЕсли;	 
		ИмяПеременнойПолное = ИмяПеременной;
		ИмяПеременной = УбратьЗапрещенныеСимволыИзКлючаСтруктуры(ИмяПеременной);
		
		Попытка
			ЕстьТакаяПеременная = ОбъектКонтекстСохраняемый.Свойство(ИмяПеременной);
		Исключение
			ЕстьТакаяПеременная = Ложь;
		КонецПопытки;
		
		Если ЕстьТакаяПеременная Тогда
			Возврат ОбъектКонтекстСохраняемый[ИмяПеременной];
		КонецЕсли;

		// попробуем найти значение по ключу
		ЗначениеДляПроверки = ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого(ИмяПеременнойПолное);
		Если ЗначениеДляПроверки <> Неопределено Тогда
			Возврат ЗначениеДляПроверки; 
		КонецЕсли;

		Если ВызыватьИсключение Тогда
			ВызватьИсключение ПодставитьПараметрыВСтроку(
				Локализовать("Не получилось по переменной <%1> найти сохраненное значение."),
				ИмяПеременной
			);
		КонецЕсли;
		
	Иначе
		
		ИмяПеременной = Сред(Значение, 2);
		ИмяПеременной = Лев(ИмяПеременной, СтрДлина(ИмяПеременной) - 1);
		Если Найти(ИмяПеременной, "$") > 0 Тогда
			Возврат Значение;
		КонецЕсли;	 
		ИмяПеременнойПолное = ИмяПеременной;
		ИмяПеременной = УбратьЗапрещенныеСимволыИзКлючаСтруктуры(ИмяПеременной);
		
		Попытка
			ЕстьТакаяПеременная = ОбъектКонтекст.Свойство(ИмяПеременной);
		Исключение
			ЕстьТакаяПеременная = Ложь;
		КонецПопытки;
		
		Если ЕстьТакаяПеременная Тогда
			Возврат ОбъектКонтекст[ИмяПеременной];
		КонецЕсли;

		ЗначениеДляПроверки = ПолучитьСохраненноеЗначениеИзКонтекста(ИмяПеременной);
		Если ЗначениеДляПроверки <> Неопределено Тогда
			Возврат ЗначениеДляПроверки; 
		КонецЕсли;	 
			
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ПодставитьПараметрыВСтроку(
				Локализовать("Не получилось по переменной <%1> найти сохраненное значение."),
				ИмяПеременной
			);
		КонецЕсли;

	КонецЕсли;	 
	
	Возврат Значение; 
КонецФункции	 

// Пытается получить значение переменной из контекста
// Если значение вида $ИмяПеременной$, тогда будет возвращено ОбъектКонтекст.ИмяПеременной
// ИначеЕсли значение вида $$ИмяПеременной$$, тогда будет возвращено ОбъектКонтекстСохраняемый.ИмяПеременной
// ИначеЕсли значение вида $$$ИмяПеременной$$$, это значит, что надо отбросить $$ слева и справа, т.е. символ $ экранирован
// ИначеЕсли значение вида ИмяПеременной, это значит, что надо попытаться искать значение в ОбъектКонтекст
// Иначе будет возвращено Неопределено
//
&НаКлиенте
Функция ЗначениеПеременной(Знач ИмяПеременной) Экспорт
	Попытка
		Значение = ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(ИмяПеременной);
	Исключение
		Значение = Неопределено;
	КонецПопытки;
	
	Если Значение <> Неопределено И Значение <> ИмяПеременной Тогда
		Возврат Значение;
	КонецЕсли;	 
	
	
	Попытка
		Значение = ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно("$" + ИмяПеременной + "$");
	Исключение
		Значение = Неопределено;
	КонецПопытки;
	
	Если Значение <> Неопределено И Значение <> ИмяПеременной Тогда
		Возврат Значение;
	КонецЕсли;	 
	
	
	Попытка
		Значение = ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно("$$" + ИмяПеременной + "$$");
	Исключение
		Значение = Неопределено;
	КонецПопытки;
	
	Если Значение <> Неопределено И Значение <> ИмяПеременной Тогда
		Возврат Значение;
	КонецЕсли;	 
	
	Возврат Неопределено;
	
КонецФункции	 

&НаКлиенте
Функция ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам, ИмяТаблицы = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	ЗаменятьИмяКолонки = Истина;
	ИсключитьКолонку = Неопределено;
	СравнениеПоШаблону = Ложь;
	ТаблицаКлиентаТестирования = Неопределено;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ЗаменятьИмяКолонки") Тогда
			ЗаменятьИмяКолонки = ДопПараметры.ЗаменятьИмяКолонки;
		КонецЕсли;	 
		Если ДопПараметры.Свойство("ИсключитьКолонку") Тогда
			ИсключитьКолонку = ДопПараметры.ИсключитьКолонку;
		КонецЕсли;	 
		Если ДопПараметры.Свойство("СравнениеПоШаблону") Тогда
			СравнениеПоШаблону = ДопПараметры.СравнениеПоШаблону;
		КонецЕсли;	 
		Если ДопПараметры.Свойство("ТаблицаКлиентаТестирования") Тогда
			ТаблицаКлиентаТестирования = ДопПараметры.ТаблицаКлиентаТестирования;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ОписаниеСтроки = Новый Соответствие();
	
	Строка1    = ТабПарам[0];
	Строка2    = ТабПарам[1];
	КолКолонок = Строка1.Количество();
	
	Для Ккк = 1 По КолКолонок Цикл
		Если ИсключитьКолонку = Ккк Тогда
			Продолжить;
		КонецЕсли;	 
		
		Ключ = Строка1["Кол" + Формат(Ккк, "ЧГ=; ЧН=0")];
		
		НеобходимПоискКлючаПоШаблону = СравнениеПоШаблону 
										И ТаблицаКлиентаТестирования <> Неопределено 
										И ТаблицаКлиентаТестирования.Количество() > 0 
										И Найти(Ключ, "*") > 0;
		Если НеобходимПоискКлючаПоШаблону  Тогда
			Для Каждого ДанныеПервойСтроки Из ТаблицаКлиентаТестирования[0] Цикл
				Если СтрокаСоответствуетШаблону(ДанныеПервойСтроки.Ключ, Ключ) Тогда
					Ключ = ДанныеПервойСтроки.Ключ;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;
		КонецЕсли;	 
		
		Если Найти(Ключ, "\n") > 0 Тогда
			ПереводСтроки = Истина;
			Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ПереводСтроки") Тогда
				ПереводСтроки = ДопПараметры.ПереводСтроки;
			КонецЕсли;	 
			
			СтрокаЗаменыПереводаСтроки = Символы.ПС;
			Если НЕ ПереводСтроки Тогда
				СтрокаЗаменыПереводаСтроки = Символы.ВК + СтрокаЗаменыПереводаСтроки;
			КонецЕсли;	 
			Ключ = СтрЗаменить(Ключ, "\n", СтрокаЗаменыПереводаСтроки);
			
			Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
				ДопПараметры.Вставить("ПереводСтроки", НЕ ПереводСтроки);
			КонецЕсли;	 
		КонецЕсли;	 
		Значение = Строка2["Кол" + Формат(Ккк, "ЧГ=; ЧН=0")];
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Значение = СтрЗаменить(Значение, Символы.НПП, "");
		КонецЕсли;	 
		
		Значение = СтрЗаменить(Значение, "\n", Символы.ПС);
		
		Если ЗаменятьИмяКолонки Тогда
			ОбходОшибкиПустойКлюч = ИмяТаблицы = "TypeTree" И Ключ = "Значение" 
								ИЛИ ИмяТаблицы = "TypeTree" И Ключ = "Колонка1" И НЕ (ТекущийTestclientЭтоWebКлиент);
			Если ОбходОшибкиПустойКлюч Тогда
				// Обход бага разного представления таблицы выбора типа в тонком клиенте и в web клиенте
				Ключ = "";
			ИначеЕсли ИмяТаблицы = "ValueList" И Ключ = "" Тогда
				// Обход бага разного представления таблицы выбора типа в тонком клиенте и в web клиенте
				Ключ = "Значение";
			КонецЕсли;	
		КонецЕсли;	 
		
		ОписаниеСтроки.Вставить(Ключ, Значение);
	КонецЦикла;
	
	Возврат ОписаниеСтроки;
КонецФункции	

&НаКлиенте
Процедура АктивизироватьЭлементформы(ЭлементФормы) Экспорт
	Попытка
		ЭлементФормы.Активизировать();
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура РазорватьСоединениеTestClient(Источник = Неопределено) Экспорт
	Если ОбъектКонтекстСохраняемый <> Неопределено Тогда
		Если ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
			ТестовоеПриложение = ОбъектКонтекстСохраняемый.ТестовоеПриложение;
			Попытка
				ТестовоеПриложение.РазорватьСоединение();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийTestclientЭтоWebКлиент = Ложь;

	ОбъектКонтекстСохраняемый.Удалить("ТестовоеПриложение");
	ОбъектКонтекстСохраняемый.Удалить("ГлавноеОкноТестируемого");
	
	ДескрипторОсновногоОкнаТекущегоКлиентаТестирования 	= Неопределено;
	PIDТекущегоКлиентаТестирования 						= Неопределено;
	УстановитьУсловноеОформление();
	
	СброситьФлагПодключенияКлиентаТестирования();
	
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьКорректоеЗначениеДляСравненияТекста(Знач Стр) Экспорт
	Стр = СтрЗаменить(Стр, Символы.НПП, " ");
	Возврат Стр; 
КонецФункции	 

// проверяет значение флага по его представлению
&НаКлиенте
Функция ЗначениеФлагаСоответствуетИстина(ПредставлениеДанных) Экспорт
	Если Найти(ПредставлениеДанных, Строка(Истина)) = 1 Тогда
		Возврат Истина;
	ИначеЕсли НРег(ПредставлениеДанных) = "да" Тогда
		Возврат Истина;
	ИначеЕсли НРег(ПредставлениеДанных) = "yes" Тогда
		Возврат Истина;
	ИначеЕсли НРег(ПредставлениеДанных) = "1" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

// проверяет значение флага по его представлению
&НаКлиенте
Функция ЗначениеФлагаСоответствуетСреднееПоложение(ПредставлениеДанных) Экспорт
	Если НРег(ПредставлениеДанных) = "2" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

// Преобразует переданное значение в макет.
// например массив структур или массив соответствий
&НаКлиенте
Функция ПреобразоватьЗначениеВМакет(Значение, МассивКлючей = Неопределено, ТолькоТекстЯчеек = Ложь) Экспорт
	ПереданМассивКлючей = МассивКлючей <> Неопределено;
	
	ТипЗначения = Неопределено;
	Если ТипЗнч(Значение) = Тип("Структура") Тогда
		ТипЗначения = Значение.Тип;
		Значение    = Значение.Значение;
	КонецЕсли;	 
	
	Если ТипЗнч(Значение) = Тип("Массив") ИЛИ ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
		Если Значение.Количество() = 0 Тогда
			Возврат Новый ТабличныйДокумент; 
		КонецЕсли;	 
		
		ЧитаемИзМассиваСтруктур = Ложь;
		ПерваяСтрокаСлужебная = Ложь;
		ПерваяСтрока = Значение[0];
		Если ТипЗнч(ПерваяСтрока) = Тип("Структура") И ТипЗначения <> "Макет" Тогда
			ЧитаемИзМассиваСтруктур = Истина;
			// из первой строки берём массив ключей
			ПерваяСтрокаСлужебная = Истина;
			
			Если Не ПереданМассивКлючей Тогда
				МассивКлючей = Новый Массив;
				Для Каждого Элем Из ПерваяСтрока Цикл
					МассивКлючей.Добавить(Элем.Значение);
				КонецЦикла;	
			КонецЕсли;	 
		ИначеЕсли ТипЗнч(ПерваяСтрока) = Тип("Соответствие") И ТипЗначения <> "Макет" Тогда
			Если Не ПереданМассивКлючей  Тогда
				МассивКлючей = Новый Массив;
				Для Каждого Элем Из ПерваяСтрока Цикл
					МассивКлючей.Добавить(Элем.Ключ);
				КонецЦикла;	
			КонецЕсли;	 
		КонецЕсли;	 	
		
		НовоеЗначение = Новый ТабличныйДокумент;
		
		ИдСтроки = 1;
		ИдКолонки = 0;
		Если МассивКлючей <> Неопределено Тогда
			НужноДобавитьСтроку = НЕ (ТипЗнч(Значение) = Тип("Массив") И Значение.Количество() > 0 И ТипЗнч(Значение[0]) = Тип("Массив"));

			Если НужноДобавитьСтроку Тогда
				Для Каждого Ключ Из МассивКлючей Цикл
					ИдКолонки = ИдКолонки + 1;
					НовоеЗначение.Область(ИдСтроки, ИдКолонки, ИдСтроки, ИдКолонки).Текст = Ключ;
				КонецЦикла;	
				ИдСтроки = ИдСтроки + 1;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если ЧитаемИзМассиваСтруктур Тогда
			Для Ккк = (ИдСтроки - 1) По Значение.Количество() - 1 Цикл
				СтрокаЗначение = Значение[Ккк];
				
				ИдКолонки = 0;
				Если МассивКлючей <> Неопределено Тогда
					Для Каждого Элем Из МассивКлючей Цикл
						ИдКолонки = ИдКолонки + 1;
						НовоеЗначение.Область(ИдСтроки, ИдКолонки, ИдСтроки, ИдКолонки).Текст = СтрокаЗначение["Кол" + Формат(ИдКолонки, "ЧГ=; ЧН=0")];
					КонецЦикла;	
				КонецЕсли;	 
				
				ИдСтроки = ИдСтроки + 1;
			КонецЦикла;	
		Иначе	
			Если ИдСтроки = 2 Тогда
				НачЗначениеСчетчика = ИдСтроки - 2;
			Иначе	
				НачЗначениеСчетчика = ИдСтроки - 1;
			КонецЕсли;	 
			
			Для Ккк = НачЗначениеСчетчика По Значение.Количество() - 1 Цикл
				СтрокаЗначение = Значение[Ккк];
				
				ИдКолонки = 0;
				Если МассивКлючей <> Неопределено И (ТипЗнч(СтрокаЗначение) = Тип("Структура") ИЛИ ТипЗнч(СтрокаЗначение) = Тип("Соответствие") ) Тогда
					Для Каждого Ключ Из МассивКлючей Цикл
						ИдКолонки = ИдКолонки + 1;
						ТекЗначение = СтрокаЗначение[Ключ];
						Если ТекЗначение = Неопределено И ТипЗнч(СтрокаЗначение) = Тип("Соответствие") Тогда
							ТекЗначение = ЗначениеИзСоответствияПоКлючуСУчетомЗаменыПереносаСтроки(СтрокаЗначение, Ключ);
						КонецЕсли;	
						НовоеЗначение.Область(ИдСтроки, ИдКолонки, ИдСтроки, ИдКолонки).Текст = ТекЗначение;
					КонецЦикла;
				ИначеЕсли ТипЗнч(СтрокаЗначение) = Тип("Структура") Тогда
					Для СчетчикКолонок = 1 По СтрокаЗначение.Количество() Цикл
						НовоеЗначение.Область(ИдСтроки, СчетчикКолонок, ИдСтроки, СчетчикКолонок).Текст = СтрокаЗначение["Кол" + Формат(СчетчикКолонок, "ЧГ=; ЧН=0")];
					КонецЦикла;	
				Иначе	
					Для СчетчикКолонок = 0 По СтрокаЗначение.Количество() - 1 Цикл
						НовоеЗначение.Область(ИдСтроки, СчетчикКолонок + 1, ИдСтроки, СчетчикКолонок + 1).Текст = СтрокаЗначение[СчетчикКолонок];
					КонецЦикла;	
				КонецЕсли;	 
				
				ИдСтроки = ИдСтроки + 1;
			КонецЦикла;	
		КонецЕсли;	 
		
		Возврат НовоеЗначение;
	ИначеЕсли ТипЗнч(Значение) = Тип("ТабличныйДокумент") И ТолькоТекстЯчеек Тогда
		НовоеЗначение = Новый ТабличныйДокумент;
			
		Для ИдСтроки = 1 По Значение.ВысотаТаблицы Цикл
			Для ИдКолонки = 1 По Значение.ШиринаТаблицы Цикл
				НовоеЗначение.Область(ИдСтроки, ИдКолонки, ИдСтроки, ИдКолонки).Текст = Значение.Область(ИдСтроки, ИдКолонки, ИдСтроки, ИдКолонки).Текст;
			КонецЦикла;	
		КонецЦикла;	
			
		Возврат НовоеЗначение;
	КонецЕсли;	

	Возврат Значение;
КонецФункции	 

// Определяет как надо искать элемент формы
// если ИмяПоля начинается с символа !, тогда поиск будет по имени поля
// иначе по заголовку
// если заголовок поля начинается с символа !, тогда в значении ИмяПоля он должен быть проэкранирован \!
&НаКлиенте
Процедура ОпределитьРежимПоискаЭлементаНаФорме(ИмяПоля, ИскатьПоИмени) Экспорт
	Если Лев(ИмяПоля, 2) = "\!" Тогда
		ИмяПоля = Сред(ИмяПоля, 2);
		ИскатьПоИмени = Ложь;
		Возврат;
	ИначеЕсли Лев(ИмяПоля, 1) = "!" Тогда
		ИмяПоля = Сред(ИмяПоля, 2);
		ИскатьПоИмени = Истина;
		Возврат;
	КонецЕсли;	 
	ИскатьПоИмени = Ложь;
КонецПроцедуры

// Возвращает максимум из переданного значения и Объект.ТаймаутДляАсинхронныхШагов
&НаКлиенте
Функция ЗначениеТаймаутаДляАсинхронногоШага(Знач КолСекунд) Экспорт
	
	Попытка
		КолСекунд = Число(КолСекунд);
	Исключение
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Значение параметра таймаута ожидания должно быть числом. Переданное значение: %1"),
			КолСекунд
		);
	КонецПопытки;
	
	ДанныеШагаСценария = ДанныеШагаСценария();
	Если ДанныеШагаСценария <> Неопределено Тогда
		Если ДанныеШагаСценария.Свойство("ЭтоОбычныйШагОбернутыйВУсловие") Тогда
			ЭтоОбычныйШагОбернутыйВУсловие = ДанныеШагаСценария.ЭтоОбычныйШагОбернутыйВУсловие;
		Иначе	
			ЭтоОбычныйШагОбернутыйВУсловие = Ложь;
		КонецЕсли;	
		
		Если ЭтоОбычныйШагОбернутыйВУсловие Тогда
			Возврат Макс(5, КолСекунд);
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Макс(Объект.ТаймаутДляАсинхронныхШагов, КолСекунд); 
	
КонецФункции	 

// Возвращает количество попыток выполнения действия при работе с объектами TestClient
&НаКлиенте
Функция ЗначениеКоличествоПопытокВыполненияДействия() Экспорт
	Если ОграничениеНаКоличествоПопытокДействий Тогда
		Возврат 1;
	КонецЕсли;
	
	ДанныеШагаСценария = ДанныеШагаСценария();
	Если ДанныеШагаСценария <> Неопределено Тогда
		Если ДанныеШагаСценария.Свойство("ЭтоОбычныйШагОбернутыйВУсловие") Тогда
			ЭтоОбычныйШагОбернутыйВУсловие = ДанныеШагаСценария.ЭтоОбычныйШагОбернутыйВУсловие;
		Иначе	
			ЭтоОбычныйШагОбернутыйВУсловие = Ложь;
		КонецЕсли;	
		
		Если ЭтоОбычныйШагОбернутыйВУсловие Тогда
			Если Объект.КоличествоПопытокВыполненияДействия > 5 Тогда
				Возврат 5;
			Иначе
				Возврат Макс(Объект.КоличествоПопытокВыполненияДействия, 1); 
			КонецЕсли;
		Иначе
			Если ДанныеШагаСценария.Свойство("ВПопытке") Тогда
				ВПопытке = ДанныеШагаСценария.ВПопытке;
			Иначе	
				ВПопытке = Ложь;
			КонецЕсли;
			
			Если ВПопытке Тогда
				Если Объект.КоличествоПопытокВыполненияДействия > 5 Тогда
					Возврат 5;
				Иначе
					Возврат Макс(Объект.КоличествоПопытокВыполненияДействия, 1); 
				КонецЕсли;
			КонецЕсли;	
			
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Макс(Объект.КоличествоПопытокВыполненияДействия, 1); 
КонецФункции	 

// Возвращает количество секунд, которое нужно подождать после открытия окна
&НаКлиенте
Функция ЗначениеПаузаПриОткрытииОкна() Экспорт
	Возврат Макс(Объект.ПаузаПриОткрытииОкна, 0); 
КонецФункции	 

// проверяет доступность элмента формы с учетом родительских групп
&НаКлиенте
Функция ДоступностьЭлементаСУчетомРодителя(ТекущаяФормаЭлемента, ЭлементФормы, ТекущаяДоступность) Экспорт
	Если ТекущаяФормаЭлемента = Неопределено Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Для элемента с именем <%1> не найдена форма."),
			ЭлементФормы.Имя
		);
	КонецЕсли;	 
	
	Если ПроверятьДоступностьЭлементаСУчетомРодителя <> Истина Тогда
		Возврат ТекущаяДоступность;
	КонецЕсли;	 
	
	Если НЕ ТекущаяДоступность Тогда
		// нет смысла проверять для недоступных элементов
		Возврат ТекущаяДоступность; 
	КонецЕсли;
	
	ГруппыФормы = ТекущаяФормаЭлемента.НайтиОбъекты(Тип("ТестируемаяГруппаФормы"));
	Для Каждого ТекГруппа Из ГруппыФормы Цикл
		ЭлементыГруппы = ТекГруппа.НайтиОбъекты();
		Если ЭлементыГруппы.Найти(ЭлементФормы) <> Неопределено Тогда
			Если НЕ ТекГруппа.ТекущаяДоступность() Тогда
				// значит элемент лежит в невидимой группе
				Возврат Ложь;
			КонецЕсли;	 
		КонецЕсли;	
	КонецЦикла;	 
	
	Возврат ТекущаяДоступность;
КонецФункции	

// Устанавливает статус проверки доступности элемента с учетом доступности родительской группы
&НаКлиенте
Процедура УстановитьСтатусПроверятьДоступностьЭлементаСУчетомРодителя(Значение) Экспорт
	ПроверятьДоступностьЭлементаСУчетомРодителя = Значение;
КонецПроцедуры

// Проверяет доступность элемента формы с учетом родительских групп
&НаКлиенте
Функция ТолькоПросмотрЭлементаСУчетомРодителя(ТекущаяФормаЭлемента, ЭлементФормы, ТекущееТолькоПросмотр) Экспорт
	Если ТекущаяФормаЭлемента = Неопределено Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Для элемента с именем <%1> не найдена форма."),
			ЭлементФормы.Имя
		);
	КонецЕсли;	 
	
	Если ПроверятьТолькоПросмотрСУчетомРодителя <> Истина Тогда
		Возврат ТекущееТолькоПросмотр;
	КонецЕсли;	 
	
	Если ТекущееТолькоПросмотр Тогда
		Возврат ТекущееТолькоПросмотр; 
	КонецЕсли;
	
	ГруппыФормы = ТекущаяФормаЭлемента.НайтиОбъекты(Тип("ТестируемаяГруппаФормы"));
	Для Каждого ТекГруппа Из ГруппыФормы Цикл
		ЭлементыГруппы = ТекГруппа.НайтиОбъекты();
		СообщитьПользователю(ТекГруппа.ТекстЗаголовка);
		
		Если ЭлементыГруппы.Найти(ЭлементФормы) <> Неопределено Тогда
			Если ТекГруппа.ТекущееТолькоПросмотр() Тогда
				// значит элемент лежит в невидимой группе
				Возврат Истина;
			КонецЕсли;	 
		КонецЕсли;	
	КонецЦикла;	 
	
	Возврат ТекущееТолькоПросмотр;
КонецФункции	

// Устанавливает статус проверки доступности элемента с учетом доступности родительской группы
&НаКлиенте
Процедура УстановитьСтатусПроверятьТолькоПросмотрЭлементаСУчетомРодителя(Значение) Экспорт
	ПроверятьТолькоПросмотрСУчетомРодителя = Значение;
КонецПроцедуры

// Возвращает ссылку на панель разделов TestClient
&НаКлиенте
Функция ПанельРазделов() Экспорт
	Если НЕ ОбъектКонтекстСохраняемый.Свойство("ГлавноеОкноТестируемого") Тогда
		ОбработатьОшибкуПодключенияTestClient();
		ВызватьИсключение Локализовать("Клиент тестирования не подключен.");
	КонецЕсли;	 
	
	ОбработатьСменуАктивногоОкна();
	
	Если ОбъектКонтекстСохраняемый.ГлавноеОкноТестируемого = Неопределено Тогда
		ОбработатьОшибкуПодключенияTestClient();
		ВызватьИсключение Локализовать("Клиент тестирования не подключен.");
	КонецЕсли;	 
	
	Попытка
		ОкноПриложенияОсновноеCommandInterface = ОбъектКонтекстСохраняемый.ГлавноеОкноТестируемого.ПолучитьКомандныйИнтерфейс();
	Исключение
		ОбработатьОшибкуПодключенияTestClient();
		ТекстСообщения = Локализовать("Не вышло получить командный интерфейс клиента тестирования.");
		ТекстСообщения = ТекстСообщения + Символы.ПС + ОписаниеОшибки();
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	ПодчиненныеОбъекты = ОкноПриложенияОсновноеCommandInterface.ПолучитьПодчиненныеОбъекты();
	ПанельРазделов = Неопределено;
	Для каждого Элем Из ПодчиненныеОбъекты Цикл
		Если ЭтоПанельРазделов(Элем.ТекстЗаголовка) Тогда
			ПанельРазделов = Элем;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если ПанельРазделов = Неопределено Тогда
		ВызватьИсключение Локализовать("Не нашли панель разделов.");
	КонецЕсли;	
	
	Возврат ПанельРазделов;
КонецФункции	 

// Возвращает ссылку на панель функций TestClient
&НаКлиенте
Функция ПанельФункций(МенюФункцийТекущегоРаздела = Неопределено) Экспорт
	ОбработатьСменуАктивногоОкна();
	ОкноПриложенияОсновноеCommandInterface = ОбъектКонтекстСохраняемый.ГлавноеОкноТестируемого.ПолучитьКомандныйИнтерфейс();
	ПодчиненныеОбъекты = ОкноПриложенияОсновноеCommandInterface.ПолучитьПодчиненныеОбъекты();
	МенюФункций                = Неопределено;
	МенюФункцийТекущегоРаздела = Неопределено;
	Для каждого Элем Из ПодчиненныеОбъекты Цикл
		Если ЭтоМенюФункций(Элем.ТекстЗаголовка) Тогда
			МенюФункций = Элем;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если (МенюФункций = Неопределено) И (МенюФункцийТекущегоРаздела = Неопределено) Тогда
		ВызватьИсключение Локализовать("Не нашли меню функций раздела.");
	КонецЕсли;	 
	
	Возврат МенюФункций; 
КонецФункции	 

// Возвращает корректное значение для строки, которая может располагаться в ячейке таблицы Gherkin
&НаКлиенте
Функция ПолучитьКорректноеЗначениеТаблицыGherkin(Стр) Экспорт
	ПромСтр = СтрЗаменить(Стр, "|", "\|");
	ПромСтр = СтрЗаменить(ПромСтр, "'", "\'");
	
	ПромСтр = СтрЗаменить(ПромСтр, Символы.ВК, "");
	Возврат СтрЗаменить(ПромСтр, Символы.ПС, "\n"); 
КонецФункции	 

// Проверяет, что это текст диалога, который предлагает пометить элемент на удаление
&НаКлиенте
Функция ЭтоТекстДиалогаПредлагающегоПометитьЭлементНаУдаление(Текст) Экспорт
	Если Найти(Текст, "Пометить") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Текст, "for deletion") > 0 Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

// Проверяет, что это текст диалога, который предлагает снять пометку удаления
&НаКлиенте
Функция ЭтоТекстДиалогаПредлагающегоСнятьПометкуУдаления(Текст) Экспорт
	Если Найти(Текст, "Снять") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Текст, "Clear") > 0 Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

// Возвращает текст модального предупреждения пользователю. Окно предупреждения ищется среди открытых окон.
// Также в переменную ОкноПредупреждения будет передана ссылка на модальный диалог.
&НаКлиенте
Функция ПолучитьТекстПредупреждения(ОкноПредупреждения = Неопределено) Экспорт
	ОкноПредупреждения = Неопределено;
	ФормаБСП           = Неопределено;
	Попытка
		Если ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
			ОкнаПредупреждения = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
			Для Каждого ТекущееОкно Из ОкнаПредупреждения Цикл
				Если ЭтоЗаголовокОкнаМодальногоДиалога(ТекущееОкно.Заголовок) Тогда
					ОкноПредупреждения = ТекущееОкно;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	 
		КонецЕсли;	 
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если ОкноПредупреждения = Неопределено Тогда
		Попытка			
			Если ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
				ФормаБСП = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемаяФорма"), , "ОбщаяФорма.Вопрос");
			КонецЕсли;
		Исключение			
		КонецПопытки;
		
		Если ФормаБСП <> Неопределено Тогда
			МногострочныйТекстСообщения = ФормаБСП.НайтиОбъект(,,"МногострочныйТекстСообщения");
			Если МногострочныйТекстСообщения <> Неопределено Тогда
				ПредставлениеДанных = МногострочныйТекстСообщения.ПолучитьПредставлениеДанных();
				Если НЕ ПустаяСтрока(ПредставлениеДанных) Тогда
					Возврат ПредставлениеДанных; 
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	Если ОкноПредупреждения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Текст = "";
	
	Попытка
		ПоляПредупреждения = ОкноПредупреждения.НайтиОбъекты(Тип("ТестируемоеПолеФормы"));
	Исключение
		ПоляПредупреждения = Новый Массив;
	КонецПопытки;
	
	Если ПоляПредупреждения.Количество() > 0 Тогда
		Для Каждого ПолеПредупреждения Из ПоляПредупреждения Цикл
			Если ЗначениеЗаполнено(Текст) Тогда
				Текст = Текст + Символы.ПС;
			КонецЕсли;	 
			
			Текст = Текст + ПолеПредупреждения.ТекстЗаголовка;
		КонецЦикла;	
	Иначе
		Попытка
			ПолеMessage = ОкноПредупреждения.НайтиОбъект(,, "Message");
			Если ПолеMessage <> Неопределено Тогда
				Текст = Текст + ПолеMessage.ТекстЗаголовка;
			КонецЕсли;	 
		Исключение
		КонецПопытки;
	КонецЕсли;	 
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Попытка
			НадписьErrorInfo = ОкноПредупреждения.НайтиОбъект(,, "ErrorInfo");
			Если НадписьErrorInfo <> Неопределено Тогда
				Текст = Текст + НадписьErrorInfo.ТекстЗаголовка;
			КонецЕсли;	 
		Исключение
		КонецПопытки;
	КонецЕсли;	 
	
	Возврат Текст; 
КонецФункции	

// Возвращает текст предупреждения из переданного окна.
&НаКлиенте
Функция ТекстПредупреждения(ОкноДиалога) Экспорт
	Если Версия8315ИлиВыше Тогда
		ПолеФормы = ОкноДиалога.НайтиОбъект(,, "message");
		Если ПолеФормы = Неопределено Тогда
			ПолеФормы = ОкноДиалога.НайтиОбъект(,, "Поле");
		КонецЕсли;	 
		
		Если ПолеФормы = Неопределено Тогда
			ПолеФормы = ОкноДиалога.НайтиОбъект(,, "ErrorInfo");
		КонецЕсли;	 
		
		Если ПолеФормы = Неопределено Тогда
			ВызватьИсключение ПодставитьПараметрыВСтроку(
				Локализовать("У окна <%1> не найдено ни одного элемента с типом <ТестируемоеПолеФормы>."),
				ОкноДиалога.Заголовок
			);
		КонецЕсли;	 
	Иначе	
		ПоляФормы = ОкноДиалога.НайтиОбъекты(Тип("ТестируемоеПолеФормы"));
		Если ПоляФормы.Количество() = 0 Тогда
			ВызватьИсключение ПодставитьПараметрыВСтроку(
				Локализовать("У окна <%1> не найдено ни одного элемента с типом <ТестируемоеПолеФормы>."),
				ОкноДиалога.Заголовок
			);
		КонецЕсли;	 
		
		ПолеФормы = ПоляФормы[0];
	КонецЕсли;	 
	
	Возврат ПолеФормы.ТекстЗаголовка;
КонецФункции	 

// Возвращает количество попыток поиска активного окна
&НаКлиенте
Функция ЗначениеКоличествоСекундПоискаОкна() Экспорт
	Возврат Макс(Объект.КоличествоСекундПоискаОкна, 1); 
КонецФункции	 

// Возвращает ссылку на панель функций TestClient
&НаКлиенте
Функция ПанельОткрытых() Экспорт
	ОбработатьСменуАктивногоОкна();
	ОкноПриложенияОсновноеCommandInterface = ОбъектКонтекстСохраняемый.ГлавноеОкноТестируемого.ПолучитьКомандныйИнтерфейс();
	ПодчиненныеОбъекты = ОкноПриложенияОсновноеCommandInterface.ПолучитьПодчиненныеОбъекты();
	ПанельОткрытых = Неопределено;
	
	Для каждого Элем Из ПодчиненныеОбъекты Цикл
		Если ЭтоПанельОткрытых(Элем.ТекстЗаголовка) Тогда
			ПанельОткрытых = Элем;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если ПанельОткрытых = Неопределено Тогда
		ВызватьИсключение Локализовать("Не найдена панель открытых окон.");
	КонецЕсли;	 
	
	Возврат ПанельОткрытых; 
КонецФункции	 

&НаКлиенте
Функция ЭтоСтрокаОшибкиНедоступныйПользователюЭлементУправленияНеМожетВыполнятьИнтерактивныеДействия(СтрокаОшибки) Экспорт
	Если Найти(СтрокаОшибки, "Недоступный пользователю элемент управления не может выполнять интерактивные действия") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(СтрокаОшибки, "Cannot perform an interactive operation on an object that is not available") > 0 Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция ЭтоСтрокаОшибкиНевидимыйПользователюЭлементУправленияНеМожетВыполнятьИнтерактивныеДействия(СтрокаОшибки) Экспорт
	Если Найти(СтрокаОшибки, "Невидимый пользователю элемент управления не может выполнять интерактивные действия") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(СтрокаОшибки, "Cannot perform an interactive action on a hidden object") > 0 Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ЭтоСтрокаОшибкиЭлементНеМожетВыполнятьИнтерактивныеДействия(СтрокаОшибки) Экспорт
	
	Если ЭтоСтрокаОшибкиНедоступныйПользователюЭлементУправленияНеМожетВыполнятьИнтерактивныеДействия(СтрокаОшибки) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Если ЭтоСтрокаОшибкиНевидимыйПользователюЭлементУправленияНеМожетВыполнятьИнтерактивныеДействия(СтрокаОшибки) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	

&НаКлиенте
Процедура ПоместитьВБуферОбменаVA(Значение) Экспорт
	
	Если БуферОбменаVA <> Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПоместитьВБуферОбменаVA", ЭтаФорма);
		
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			
			БуферОбменаVA.НачатьВызовЗаписатьТекст(ОписаниеОповещения, Значение);
			
		ИначеЕсли ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
			
			БуферОбменаVA.НачатьВызовЗаписатьКартинку(ОписаниеОповещения, Значение);
			
		КонецЕсли;
		
		ЗапретитьВыполнениеШагов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗаписьДействийПользователя() Экспорт
	
	Элементы.кнНачатьЗаписьДействийПользователя.Заголовок = Локализовать("Начать запись поведения");
	
	ОтключитьОбработчикОжидания("ОпросЭлементовФормTestClient");
	Попытка
		Стр = ОбъектКонтекстСохраняемый.ТестовоеПриложение.ЗавершитьЗаписьЖурналаДействийПользователя();
		Отладка(Локализовать("Запись действий пользователя закончена."));
	Исключение
		// TODO: Почему такой текст сообщения?
		СообщитьПользователю (ПодставитьПараметрыВСтроку(
			Локализовать("ЗавершитьЗаписьДействийПользователя:%1"),
			ОписаниеОшибки()
		));
		Возврат;
	КонецПопытки;
	
	Текст = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(Стр);
	
	Объект.СгенерированныйXML = Текст.ПолучитьТекст();
	
	ОбработатьXMLВUILogToScript(Стр);
	
	СделатьПереводСгенерированногоТекстаGherkin();
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
			Возврат;
		КонецЕсли;	 
		Если НЕ ПустаяСтрока(Объект.СгенерированныйСценарий) И Элементы.ФункциональностьЗакладки.ТекущаяСтраница = Элементы.ГруппаЗапускТестов Тогда
			МодульРедакторТекста().ВставитьТекстСУчетомФорматирования(Объект.СгенерированныйСценарий);
		КонецЕсли;	 
	КонецЕсли;	 

КонецПроцедуры

&НаКлиенте
Процедура СохранениеМакетовВФайлПриЧтенииДанных(Значение) Экспорт
	СохранениеМакетовВФайлПриЧтенииДанных = Значение;
КонецПроцедуры 

// Выполняет ожидание окончания обработки. Происходит ожидание установки флага РеквизитВыражениеВычислено.
&НаКлиенте
Процедура ОжиданиеОкончанияОбработки(БылаОшибка, РеквизитВыражениеВычислено) Экспорт
	КоличествоПопытокПолученияОкнаИзПриложения = ЗначениеКоличествоПопытокВыполненияДействия();
	Для Сч = 1 По КоличествоПопытокПолученияОкнаИзПриложения Цикл
		ПредставлениеДанных = ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитВыражениеВычислено);
		ПредставлениеДанных = ПривестиЗначениеФлагаКСтандарту(ПредставлениеДанных);
		Если ПредставлениеДанных <> "Да" И ПредставлениеДанных <> "Yes" Тогда
			sleep(1);
			Продолжить;
		КонецЕсли;	 
		
		БылаОшибка = Ложь;
		Прервать;
	КонецЦикла;	
КонецПроцедуры 

// Добавляет элемент в коллекцию ПодключенныеTestClient
&НаКлиенте
Процедура ДобавитьПодключенныйКлиентТестирования(Имя, Синоним, ТестовоеПриложение, ГлавноеОкноТестируемого, ДопПараметры) Экспорт
	
	Если НЕ ОбъектКонтекстСохраняемый.Свойство("ПодключенныеTestClient") Тогда
		ОбъектКонтекстСохраняемый.Вставить("ПодключенныеTestClient", Новый Массив);
	КонецЕсли;	
	
	ОбъектКонтекстСохраняемый.ПодключенныеTestClient.Добавить(Новый Структура("Имя, Синоним, ТестовоеПриложение, ГлавноеОкноТестируемого",
	    Имя, Синоним, ТестовоеПриложение, ГлавноеОкноТестируемого));
		
	Если Объект.РазрешеноЗапускатьТолькоОдинКлиентТестирования И ОбъектКонтекстСохраняемый.ПодключенныеTestClient.Количество() >= 2 Тогда
		ДопПараметры.Вставить("ВызватьИсключение", Истина);
		ДопПараметры.Вставить("ТекстОшибки", Локализовать("Настройками запрещено подключать больше одного клиента тестирования одновременно.")
			 + Символы.ПС + Локализовать("Имя сценария:") + " " + ПолучитьСостояниеVanessaAutomation().ТекущийСценарий.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуСерверныхВызововВОбработчикахСобытий() Экспорт
	
	Если НЕ Объект.ПроверкаСерверныхВызововВОбработчикахСобытий Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ОбъектКонтекстСохраняемый) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Возврат;
	КонецЕсли;	
	
	Если ОбъектКонтекстСохраняемый.ТестовоеПриложение = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ Объект.ИспользоватьКомпонентуVanessaExt Тогда
		ВызватьИсключение Локализовать("Необходимо включить использование внешней компоненты VanessaExt.");
	КонецЕсли;
	
	Если ЗапрещеныСинхронныеВызовы Тогда
		ВызватьИсключение Локализовать("Чтобы выполнить проверку серверных вызовов в обработчиках событий нужно разрешить синхронные вызовы.");
	КонецЕсли;
	
	Если ЭтоLinux Тогда
		
		КаталогКартинок = МодульОбщегоНазначенияVA().КаталогСлужебныхКартинок();
		
		ДанныеПодключения = ТекущиеДанныеКлиентаТестирования();
		ВнешняяКомпонентаДляСкриншотов.АктивироватьПроцесс(ДанныеПодключения.PIDКлиентаТестирования);
		Sleep(1);
		КликНаКартинкуИзБиблиотекиКартинок("Hamburger", КаталогКартинок);
		Sleep(1);
		КликНаКартинкуИзБиблиотекиКартинок("SettingsAboutTheProgram", КаталогКартинок);
		Sleep(1);
		
	Иначе
		
		PID = PIDТекущегоКлиентаТестирования();
		Если НЕ ЗначениеЗаполнено(PID) Тогда
			Возврат;
		КонецЕсли;	
		
		ДанныеЭлементов = НайтиЭлементыПроцессаUIAutomation(PID, "Сервис и настройки", Неопределено);
		Если ДанныеЭлементов = Неопределено ИЛИ ДанныеЭлементов.Количество() = 0 Тогда
			ДанныеЭлементов = НайтиЭлементыПроцессаUIAutomation(PID, "Service and settings", Неопределено);
		КонецЕсли;	
		КликПоЭлементуБезПеремещенияМышкиUIAutomation(ДанныеЭлементов[0].size, Ложь, Истина);
		Sleep(1);
		
		ДанныеЭлементов = НайтиЭлементыПроцессаUIAutomation(PID, "О программе...", Неопределено);
		Если ДанныеЭлементов = Неопределено ИЛИ ДанныеЭлементов.Количество() = 0 Тогда
			ДанныеЭлементов = НайтиЭлементыПроцессаUIAutomation(PID, "About...", Неопределено);
		КонецЕсли;	
		КликПоЭлементуБезПеремещенияМышкиUIAutomation(ДанныеЭлементов[0].size, Ложь, Истина);
		Sleep(1);
		
	КонецЕсли;

	ОкноОПрограмме = Неопределено;
	Для Сч = 1 По 3 Цикл
		Попытка
			АктивноеОкно = ПолучитьАктивноеОкноИзТестовоеПриложение();
			Гиперссылка = АктивноеОкно.НайтиОбъект(,,"StaticTechInfo");
			Гиперссылка.Нажать();
			Sleep(1);
			ОкноОПрограмме = АктивноеОкно;
			Прервать;
		Исключение
		КонецПопытки;
	КонецЦикла;	
	
	ОкноИнформацияДляТехническойПоддержки = Неопределено;
	Для Сч = 1 По 3 Цикл
		Попытка
			АктивноеОкно = ПолучитьАктивноеОкноИзТестовоеПриложение();
			ЭлементФормыСДаннымиОбОшибках = АктивноеОкно.НайтиОбъект(,,"TechInfo");
			Текст = ЭлементФормыСДаннымиОбОшибках.ПолучитьОтображаемыйТекст();
			ОкноИнформацияДляТехническойПоддержки = АктивноеОкно;
			Прервать;
		Исключение
			Sleep(1);
		КонецПопытки;
	КонецЦикла;	
	
	ЗаписатьЛогВЖРОшибка("ВыполнитьПроверкуСерверныхВызововВОбработчикахСобытий", Текст);
	
	Текст = ПодготовитьТекстИсключенияПроверкиСерверныхВызововВОбработчикахСобытий(Текст);
	
	Если ОкноИнформацияДляТехническойПоддержки <> Неопределено Тогда
		Попытка
			ОкноИнформацияДляТехническойПоддержки.Закрыть();
			Sleep(1);
		Исключение
			ЗаписатьЛогВЖРОшибка("ВыполнитьПроверкуСерверныхВызововВОбработчикахСобытий", ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;	
	
	Если ОкноОПрограмме <> Неопределено Тогда
		Попытка
			ОкноОПрограмме.Закрыть();
			Sleep(1);
		Исключение
			ЗаписатьЛогВЖРОшибка("ВыполнитьПроверкуСерверныхВызововВОбработчикахСобытий", ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;	
	
	Если СтрокаСодержитТекстИсключенияПроверкиСерверныхВызововВОбработчикахСобытий(Текст) Тогда
		ВызватьИсключение Локализовать("Найдены случаи серверных вызовов в обработчиках событий:") + Символы.ПС + Текст;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРезультатДиалогаВыбораФайла(Результат, ИмяФайла, ИндексФильтра) Экспорт
	
	Если ИдетВыполнениеСценариев() Тогда
		СостояниеVanessaAutomation = ПолучитьСостояниеVanessaAutomation();
		Данные = Новый Структура;
		Данные.Вставить("ИмяФичи", СостояниеVanessaAutomation.ТекущаяФича.Имя);
		Данные.Вставить("ИмяФайлаФичи", СостояниеVanessaAutomation.ТекущаяФича.ПолныйПуть);
		Данные.Вставить("ИмяСценария", СостояниеVanessaAutomation.ТекущийСценарий.Имя);
		Данные.Вставить("ИмяШага", СостояниеVanessaAutomation.ТекущийШаг.Имя);
		Данные.Вставить("НомерСтрокиФичи", СостояниеVanessaAutomation.ТекущийШаг.НомерСтрокиФичи);
		Данные.Вставить("РезультатВыбораФайла", Результат);
		Данные.Вставить("ИмяФайла", ИмяФайла);
		Данные.Вставить("ИндексФильтра", ИндексФильтра);
		
		ЗаписатьЛогВЖРИнформация("УстановитьРезультатДиалогаВыбораФайла", ЗаписатьОбъектJSON(Данные));
	КонецЕсли;		
	
	Если Версия8325ИлиВыше Тогда
		ОбъектКонтекстСохраняемый.ТестовоеПриложение.ОчиститьРезультатДиалогаВыбораФайла();
	КонецЕсли;	
	
	Если ИндексФильтра = Неопределено Тогда
		ОбъектКонтекстСохраняемый.ТестовоеПриложение.УстановитьРезультатДиалогаВыбораФайла(Результат, ИмяФайла);
	Иначе	
		ОбъектКонтекстСохраняемый.ТестовоеПриложение.УстановитьРезультатДиалогаВыбораФайла(Результат, ИмяФайла, ИндексФильтра);
	КонецЕсли;	
	
КонецПроцедуры

// Пытается заменить колонки, указанные с символом * на реальные заголовки колонок
&НаКлиенте
Процедура НайтиКолонкиТаблицыРегулярныеВыражения(ТабПарам, Таблица) Экспорт
	
	Если ТипЗнч(ТабПарам) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТабПарам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеАктивнойСтроки = Неопределено;
	
	ПерваяСтрока = ТабПарам[0];
	Для Каждого ТекЗначение Из ПерваяСтрока Цикл
		Если Найти(ТекЗначение.Значение, "*") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяКолонкиДляЗамены = ТекЗначение.Значение;
		
		Если ДанныеАктивнойСтроки = Неопределено Тогда
			Попытка
				ВыделенныеСтроки = Таблица.ПолучитьВыделенныеСтроки();
				Если ВыделенныеСтроки.Количество() > 0 Тогда
					ДанныеАктивнойСтроки = ВыделенныеСтроки[0];
				КонецЕсли;	
			Исключение
				Возврат;
			КонецПопытки;
		КонецЕсли;
		
		Если ДанныеАктивнойСтроки[ИмяКолонкиДляЗамены] <> Неопределено Тогда
			//Значит есть колонка в точности совпадающая с указанным значением. Видимо в таблице есть колонки содержащие в заголовке символы *
			Продолжить;
		КонецЕсли;	
		
		НайденныеКолонки = Новый Массив;
		Для Каждого ТекКолонкаТаблицыИзТаблицыФормы Из ДанныеАктивнойСтроки Цикл
			Если СтрокаСоответствуетШаблону(ТекКолонкаТаблицыИзТаблицыФормы.Ключ, ИмяКолонкиДляЗамены) Тогда
				НайденныеКолонки.Добавить(ТекКолонкаТаблицыИзТаблицыФормы.Ключ);
			КонецЕсли;	
		КонецЦикла;
		
		Если НайденныеКолонки.Количество() = 0 Тогда
			Продолжить;
		ИначеЕсли НайденныеКолонки.Количество() = 1 Тогда
			НовоеЗначение = НайденныеКолонки[0];
			ПерваяСтрока.Вставить(ТекЗначение.Ключ, НовоеЗначение);
			
			ТекстСообщения = Локализовать("Для колонки <%1> было найдено соответствие <%2>.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяКолонкиДляЗамены);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", НовоеЗначение);
			ЗаписатьЛогВЖРИнформация("НайтиКолонкиТаблицыРегулярныеВыражения", ТекстСообщения);
			
			Продолжить;
		Иначе
			
			ТекстСообщения = Локализовать("Для колонки <%1> было найдено несколько вариантов, замена не возможна: <%2>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяКолонкиДляЗамены);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", _СтрСоединить(НайденныеКолонки, ","));
			ЗаписатьЛогВЖРОшибка("НайтиКолонкиТаблицыРегулярныеВыражения", ТекстСообщения);
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

//Существует проблема, что при синхронизации состояния формы после завершения серверного вызова, может затираться текст, который в данный момент редактирует пользователь.
//В тестах это может проявляться так, что тест ввёл значение в поле, но до того как он начал работать с другим полем данное значение было возвращено в предыдущее состояние.
//Данный метод меняет свойство "ОбновлениеТекстаРедактирования" у полей формы, чтобы избежать этого эффекта.
&НаКлиенте
Процедура ОтключитьДляПолейВозможностьЗатиранияТекстаПриЗавершенииСерверногоВызоваПриОткрытииОкна(ИмяТекущегоОкна = Неопределено) Экспорт
	
	Если ТипЗнч(ИмяТекущегоОкна) = Тип("Строка") Тогда
		Если ЭтоЗаголовокОкнаМодальногоДиалога(ИмяТекущегоОкна)
			ИЛИ ПустаяСтрока(ИмяТекущегоОкна)
			ИЛИ ОкнаДляКоторыхНеНужноОтключатьОбновлениеТекстаРедактирования[НРег(ИмяТекущегоОкна)] <> Неопределено
			Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если НЕ Объект.ОтключатьДляПолейВозможностьЗатиранияТекстаПриСерверномВызове Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОтключитьОбновлениеТекстаРедактированияПолейВТекущемОкнеРасширение(Ложь);	
	Исключение
		ТекстСообщения = Локализовать("Не получилось в текущем окне отключить возможность затирания текста в полях");
		ЗаписатьЛогВЖРОшибка("ОтключитьДляПолейВозможностьЗатиранияТекстаПриЗавершенииСерверногоВызоваПриОткрытииОкна", ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначения

// Возвращет данные по строке Json
&НаКлиенте
Функция ПрочитатьСтрокуJSON(ТекстJSON) Экспорт
	#Если НЕ ВебКлиент Тогда
	
	Если ПустаяСтрока(ТекстJSON) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПоляДаты = Новый Массив;
	ПоляДаты.Добавить("CreationDate");
	ПоляДаты.Добавить("date");
		
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	Возврат ПрочитатьJSON(ЧтениеJSON, , ПоляДаты);
	
	#КонецЕсли
КонецФункции

// Возвращает объект внешней компоненты
&НаКлиенте
Функция ВнешняяКомпонентаДляСкриншотов() Экспорт
	Возврат ВнешняяКомпонентаДляСкриншотов; 
КонецФункции	 

// Функция ДополнитьСлешВПуть
//
// Параметры:
//   ИмяКаталога
//
// Описание:
// Функция дополняет и возвращает слеш в путь в конец строки, если он отсутствует
//
&НаКлиенте
Функция ДополнитьСлешВПуть(Знач Каталог) Экспорт
	разделитель = "\";
	
	Если ПустаяСтрока(Каталог) Тогда
		Возврат Каталог;
	КонецЕсли;
	Если ЭтоLinux Тогда
		разделитель = "/";
		Каталог = СтрЗаменить(Каталог, "\", "/");
	КонецЕсли;
		
	Если Прав(Каталог, 1) <> разделитель Тогда
		Каталог = Каталог + разделитель;
	КонецЕсли;
	Возврат Каталог;
КонецФункции

// Сохраняет данные об ошибке, чтобы они потом использовались при открытии деталей ошибки
&НаКлиенте
Процедура СохранитьДанныеОбОшибкеVanessaEditor(ТекШаг, ДанныеПоОшибке, ТекстОшибки, СтрокаШага) Экспорт
	ДанныеОшибки = Новый Структура;
	ДанныеОшибки.Вставить("КраткйТекстОшибки", ТекстОшибки);
	ДанныеОшибки.Вставить("ПолныйТекстОшибки", ДанныеПоОшибке.ErrorText);
	ДанныеОшибки.Вставить("ПроизвольныеЗначения", СтрокаШага.ПроизвольныеЗначения);
	ДанныеОшибки.Вставить("НомерСтрокиДерева", СтрокаШага.ИдСтроки);
	
	ДанныеОшибокVanessaEditor.Вставить(ДанныеПоОшибке.ID, ДанныеОшибки);
КонецПроцедуры 

// Возвращает имя обработки, которое соответствует режиму использования Vanessa Automation
&НаКлиенте
Функция ПолучитьИмяОбработкиVA() Экспорт
	
	Возврат ПолучитьИмяОбработкиVAСлужебный(Объект.ВерсияПоставки, VAОткрытаКакВнешняяОбработка);
	
КонецФункции	 

// Асинхронно обновляет текущую строку редактора
&НаКлиенте
Процедура ОбновитьТекущуюСтрокуРедактораСРасчетомВиджета(Данные) Экспорт
	ДанныеДляОбновленияСтрокиРедактора = Новый Структура;
	ДанныеДляОбновленияСтрокиРедактора.Вставить("LineNumber", Данные.LineNumber);
	ДанныеДляОбновленияСтрокиРедактора.Вставить("Column", Данные.Column);
	ДанныеДляОбновленияСтрокиРедактора.Вставить("codeWidget", Данные.codeWidget);
	
	Если НЕ ПустаяСтрока(Данные.codeWidget) Тогда
		ВиджетыСтроки = ПрочитатьОбъектJSON(ПолучитьVanessaEditor().getLineWidgets(Данные.РеальныйНомерСтроки));
		Если ВиджетыСтроки.Количество() > 0 Тогда
			ДанныеДляОбновленияСтрокиРедактора.Вставить("codeWidget", ВиджетыСтроки[0]);
		КонецЕсли;	 
	КонецЕсли;	 
	
	ПодключитьОбработчикОжидания("ОбновитьТекущуюСтрокуРедактораОбработчик", 0.1, Истина);
КонецПроцедуры 

// Возвращает данные, относящиеся к текущей вкладке редактора 
&НаКлиенте
Функция ДанныеВкладкиРедактора() Экспорт
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если VanessaTabs.current = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	filename = VanessaTabs.current.filename;
	Если ДанныеВкладокРедактора[filename] = Неопределено Тогда
		ДанныеВкладокРедактора[filename] = Новый Структура;
		ДанныеВкладокРедактора[filename].Вставить("ДанныеВиджетов", Новый Соответствие);
		ДанныеВкладокРедактора[filename].Вставить("ИдВиджетов", Новый Соответствие);
		ДанныеВкладокРедактора[filename].Вставить("БрейкпоинтыVanessaEditor", Новый Массив);
		ДанныеВкладокРедактора[filename].Вставить("БрейкпоинтыVanessaEditorВиджеты", Новый Массив);
	КонецЕсли;	 
	
	Возврат ДанныеВкладокРедактора[filename]; 
КонецФункции	 

// Сохраняет данные виджета
&НаКлиенте
Функция ДобавитьДанныеВиджета(ИДВиджета, ДанныеВиджета) Экспорт
	ДанныеВкладкиРедактора = ДанныеВкладкиРедактора();
	ДанныеВиджетов = ДанныеВкладкиРедактора.ДанныеВиджетов;
	ИдВиджетов = ДанныеВкладкиРедактора.ИдВиджетов;
	
	ДанныеВиджетов.Вставить(ИДВиджета, ДанныеВиджета);
	Для Каждого ЭлементДанныеВиджета Из ДанныеВиджета Цикл
		ИдВиджетов.Вставить(ЭлементДанныеВиджета.Ключ, ИДВиджета);
	КонецЦикла;	 
КонецФункции	

// Возвращает ИД виджета по ИД строки дерева шагов
&НаКлиенте
Функция ИдВиджетаПоИдСтроки(ИдСтроки) Экспорт
	Если VanessaTabs.current = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ДанныеВкладок = ДанныеВкладокРедактора[VanessaTabs.current.filename];
	
	Если ДанныеВкладок = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ИдВиджетов = ДанныеВкладок.ИдВиджетов;
	Возврат ИдВиджетов[ИдСтроки]; 
КонецФункции	 

// Возвращает данные виджета по ИД виджета
&НаКлиенте
Функция ДанныеВиджетаПоИд(ИДВиджета) Экспорт
	ДанныеВкладкиРедактора = ДанныеВкладкиРедактора();
	ДанныеВиджетов = ДанныеВкладкиРедактора.ДанныеВиджетов;
	Возврат ДанныеВиджетов[ИДВиджета]; 
КонецФункции	 

// Очищает данные виджетов
&НаКлиенте
Функция ОчиститьДанныеВиджетов() Экспорт
	ДанныеВкладкиРедактора = ДанныеВкладкиРедактора();
	ДанныеВиджетов = ДанныеВкладкиРедактора.ДанныеВиджетов;
	ИдВиджетов = ДанныеВкладкиРедактора.ИдВиджетов;
	
	ИдВиджетов.Очистить();
	ДанныеВиджетов.Очистить();
КонецФункции	 

// Аналог СтрШаблон. 
&НаКлиенте
Функция ПодставитьПараметрыВСтроку(Знач Стр, Парам1 = Неопределено,
                                             Парам2 = Неопределено,
                                             Парам3 = Неопределено,
                                             Парам4 = Неопределено,
                                             Парам5 = Неопределено,
                                             Парам6 = Неопределено,
                                             Парам7 = Неопределено,
											 Парам8 = Неопределено,
											 Парам9 = Неопределено) Экспорт
											 
											 
	Если Парам1 <> Неопределено Тогда
		Стр = СтрЗаменить(Стр,"%1",Парам1);
	КонецЕсли;	 											 
	Если Парам2 <> Неопределено Тогда
		Стр = СтрЗаменить(Стр,"%2",Парам2);
	КонецЕсли;	 											 
	Если Парам3 <> Неопределено Тогда
		Стр = СтрЗаменить(Стр,"%3",Парам3);
	КонецЕсли;	 											 
	Если Парам4 <> Неопределено Тогда
		Стр = СтрЗаменить(Стр,"%4",Парам4);
	КонецЕсли;	 											 
	Если Парам5 <> Неопределено Тогда
		Стр = СтрЗаменить(Стр,"%5",Парам5);
	КонецЕсли;	 											 
	Если Парам6 <> Неопределено Тогда
		Стр = СтрЗаменить(Стр,"%6",Парам6);
	КонецЕсли;	 											 
	Если Парам7 <> Неопределено Тогда
		Стр = СтрЗаменить(Стр,"%7",Парам7);
	КонецЕсли;
	Если Парам8 <> Неопределено Тогда
		Стр = СтрЗаменить(Стр,"%8",Парам8);
	КонецЕсли;
	Если Парам9 <> Неопределено Тогда
		Стр = СтрЗаменить(Стр,"%9",Парам9);
	КонецЕсли;
	
	Возврат Стр;
КонецФункции	 

//Записывает произвольное событие в журнал регистрации с типом "Информация"
&НаКлиенте
Процедура ЗаписатьЛогВЖРИнформация(Знач ИмяСобытия, Знач Стр) Экспорт
	ЗаписатьЛогВЖРИнформацияСервер(ИмяСобытия, Стр);
КонецПроцедуры

//Записывает произвольное событие в журнал регистрации с типом "Ошибка"
&НаКлиенте
Процедура ЗаписатьЛогВЖРОшибка(Знач ИмяСобытия, Знач Стр) Экспорт
	ЗаписатьЛогВЖРОшибкаСервер(ИмяСобытия, Стр);
КонецПроцедуры

// Возвращает значение флага ВозможнаОптимизацияРаботыСФайлами
&НаКлиенте
Функция ВозможнаОптимизацияРаботыСФайлами() Экспорт
	Возврат ВозможнаОптимизацияРаботыСФайлами; 
КонецФункции	 

// Убирает символы их строки, которые нельзя использовать в ключе структуры
&НаКлиенте
Функция УбратьЗапрещенныеСимволыИзКлючаСтруктуры(Знач Стр) Экспорт
	Стр = СтрЗаменить(Стр, """", "");
	Стр = СтрЗаменить(Стр, Символы.ПС, "");
	Стр = СтрЗаменить(Стр, Символы.ВК, "");
	ЗапрещенныеСимволы = " <>.,\/|':;!№%?*()@#$%^&*+-`~↓↑–";
	
	Для НомерСимвола = 1 По СтрДлина(ЗапрещенныеСимволы) Цикл
		ЗапрещенныйСимвол = Сред(ЗапрещенныеСимволы, НомерСимвола, 1);
		Стр = СтрЗаменить(Стр, ЗапрещенныйСимвол, "");
	КонецЦикла;
	
	Возврат Стр;
КонецФункции

// Возвращает многострочную строку по переданному массиву. Для замены СтрСоединить.
&НаКлиенте
Функция МассивВСтроку(Массив, Символ = Неопределено) Экспорт
	
	Если ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок Тогда
		Если Символ = Неопределено Тогда
			Символ = Символы.ПС;
		КонецЕсли;
		Возврат Вычислить("СтрСоединить(Массив, Символ)"); 
	КонецЕсли;
	
	Результат = МассивВСтрокуНаСервереБезКонтекста(Массив, Символ, ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок);
	Возврат Результат;
	
КонецФункции

// Возвращает многострочную строку по переданному массиву. Для замены СтрСоединить.
&НаКлиентеНаСервереБезКонтекста
Функция МассивВСтрокуНаСервереБезКонтекста(Знач Массив, Знач Символ = Неопределено,
	Знач ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок = Ложь) Экспорт
	
	Если Символ = Неопределено Тогда
		Символ = Символы.ПС;
	КонецЕсли;
	
	Если ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок Тогда
		Возврат Вычислить("СтрСоединить(Массив, Символ)"); 
	КонецЕсли;
	
	Стр = "";
	Для Ккк = 0 По Массив.Количество() - 1 Цикл
		Стр = Стр + Массив[Ккк];
		Если Ккк < Массив.Количество() - 1 Тогда
			Стр = Стр + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Стр;
КонецФункции

// Возвращает строку, дополненную нулями слева.
&НаКлиенте
Функция ПолучитьФорматированныйНомер(НомШага, КолСимволов) Экспорт
	Стр = Формат(НомШага, "ЧГ=; ЧН=0");
	Стр = СтрЗаменить(Стр, Символы.НПП, "");
	
	Пока СтрДлина(Стр) < КолСимволов Цикл
		Стр = "0" + Стр;
	КонецЦикла; 
	
	Возврат Стр; 
КонецФункции	

// Возвращает ИД под которым будут сохранятся и читаться настройки.
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИДСохраненияОбщихНастроек(РежимСамотестирования, ВерсияПоставки, РежимОбучения)
	
	Ид = "VanessaAutomationUF";
	
	Если РежимСамотестирования Тогда
		Ид = "VanessaAutomationUF_autotest";
	КонецЕсли;	 
	
	Если ВерсияПоставки = "single" Тогда
		Ид = Ид + "_" + ВерсияПоставки;
	КонецЕсли;
	
	Если РежимОбучения Тогда
		Ид = Ид + "_Обучение";
	КонецЕсли;	 
	
	Возврат Ид;

КонецФункции	

// Возвращает префикс, который используется при сохранении настроек
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПрефиксИнструмента(РежимСамотестирования, ВерсияПоставки, РежимОбучения)
	ПрефиксИнструмента = "vanessabehavior_";
	Если РежимСамотестирования Тогда
		ПрефиксИнструмента = ПрефиксИнструмента + "autotest_";
	КонецЕсли;	 
	
	Если ВерсияПоставки <> "standart" Тогда
		ПрефиксИнструмента = ПрефиксИнструмента + "_" + СокрЛП(ВерсияПоставки);
	КонецЕсли;	 
	
	Если РежимОбучения Тогда
		ПрефиксИнструмента = ПрефиксИнструмента + "_Обучение";
	КонецЕсли;	 
	
	Возврат ПрефиксИнструмента;
КонецФункции	 

// Выполняет команду системы без показа черного окна и возвращает результат потока вывода
&НаКлиенте
Функция ВыполнитьКомандуСПотокомВывода(Команда, Кодировка = Неопределено) Экспорт
	#Если НЕ ВебКлиент Тогда
	Если Кодировка = Неопределено Тогда 
		Кодировка = КодировкаТекста.OEM;
	КонецЕсли;
	
	ИмяФайлаПотокаВывода = ПолучитьИмяВременногоФайла("stdout.tmp");
	Команда = Команда + " > ""%1""";
	Команда = СтрЗаменить(Команда, "%1", ИмяФайлаПотокаВывода);
	
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
	
	ЧтениеПотокаОшибок = Новый ЧтениеТекста(ИмяФайлаПотокаВывода, Кодировка);
	ПотокВывода = ЧтениеПотокаОшибок.Прочитать();
	ЧтениеПотокаОшибок.Закрыть();
	
	Попытка
		УдалитьФайлыКомандаСистемы(ИмяФайлаПотокаВывода);
	Исключение
		ТекстСообщения = Локализовать("Не получилось удалить файл %1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяФайлаПотокаВывода); 
		ЗаписатьЛогВЖРОшибка("VanessaAutomation.УдалениеВременногоФайла", ТекстСообщения);
	КонецПопытки;
	
	Возврат ПотокВывода;
	#КонецЕсли
КонецФункции

// Устарела. Использовать Локализовать(Сообщение)
//
&НаКлиенте
Функция ПолучитьТекстСообщенияПользователю(Текст) Экспорт
	Возврат Локализовать(Текст); 
КонецФункции	 

// Возвращает текст сообщения пользователю с учетом языка, на котором запущен Менеджер тестирования
// 
// Параметры:
// 	Сообщение - Строка
// Возвращаемое значение:
// 	Строка
//
&НаКлиенте
Функция Локализовать(Сообщение) Экспорт

	Если ЗначениеЗаполнено(Объект.ТекстСообщенийПользователю) Тогда
		Значение = Объект.ТекстСообщенийПользователю[Сообщение];
		Если ЗначениеЗаполнено(Значение) Тогда
			Возврат Значение;
		КонецЕсли;
	КонецЕсли;

	Возврат Сообщение;
	
КонецФункции	 

&НаСервере
Функция ЛокализоватьСервер(Знач Сообщение) Экспорт
	
	Возврат ТекстСообщенияПользователюВызовСервера(Сообщение, Объект.ТекстСообщенийПользователю);
	
КонецФункции	 

// Служебная
//
&НаСервереБезКонтекста
Функция ТекстСообщенияПользователюВызовСервера(Знач Сообщение, Знач ТекстыСообщенийПользователю)
	
	Если ЗначениеЗаполнено(ТекстыСообщенийПользователю) Тогда
		Значение = ТекстыСообщенийПользователю[Сообщение];
		Если ЗначениеЗаполнено(Значение) Тогда
			Возврат Значение;
		КонецЕсли;
	КонецЕсли;

	Возврат Сообщение;
	
КонецФункции	 

// Делает паузу во время исполнения кода на указанное число секунд
// Для реализации используется команда ping либо поиск окна клиента тестирования с заданным таймаутом.
// Кроссплатформено
&НаКлиенте
Процедура Sleep(КолСекунд) Экспорт
	#Если НЕ ВебКлиент Тогда
		
	Если Объект.ИспользоватьКомпонентуVanessaExt И ВнешняяКомпонентаДляСкриншотов <> Неопределено И НЕ ЗапрещеныСинхронныеВызовы Тогда
		ВнешняяКомпонентаДляСкриншотов.sleep(КолСекунд * 1000);
		Возврат;
	КонецЕсли;	 	
		
	Если ТипЗнч(ОбъектКонтекстСохраняемый) = Тип("Структура") 
		И ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") 
		И ОбъектКонтекстСохраняемый.ТестовоеПриложение <> Неопределено
		И НЕ Объект.ВыполнятьSleepЧерезPing
		Тогда
		
		Попытка
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), 
				Строка(Новый УникальныйИдентификатор),, КолСекунд);
			Возврат;
		Исключение
			
		КонецПопытки;
		
	КонецЕсли;	 
	
    Попытка
        Если ЭтоLinux Тогда
            Команда = "ping -i " + Формат(КолСекунд, "ЧГ=; ЧН=0") + " 127.0.0.1 -c 2 > /dev/null";
            КомандаСистемы(Команда);
        Иначе
            Команда = "ping 127.0.0.1 -n " + Формат(КолСекунд + 1, "ЧГ=; ЧН=0"); // +1 нужен, т.к. в реальности происходит на один пинг меньше
            ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
        КонецЕсли;	    
    Исключение
        СообщитьПользователю (ПодставитьПараметрыВСтроку(
        	Локализовать("Sleep:%1"),
        	ОписаниеОшибки()
        ));
    КонецПопытки;
	#КонецЕсли
КонецПроцедуры

// Делает паузу во время исполнения кода на указанное число секунд
// Для реализации используется команда ping
// Кроссплатформено
&НаСервереБезКонтекста
Процедура SleepOnServer(Знач КолСекунд) Экспорт
    Попытка
        Если ЭтоLinux() Тогда
            Команда = "ping -i " + Формат(КолСекунд, "ЧГ=; ЧН=0") + " 127.0.0.1 -c 2 > /dev/null";
            ЗапуститьПриложение(Команда,, Истина);
        Иначе
            Команда = "ping 127.0.0.1 -n " + Формат(КолСекунд + 1, "ЧГ=; ЧН=0"); // +1 нужен, т.к. в реальности происходит на один пинг меньше
            ЗапуститьПриложение(Команда,, Истина);
        КонецЕсли;	    
    Исключение
    КонецПопытки;
КонецПроцедуры

// Делает преобразование русской строки в английскую с помощью транслита
&НаКлиенте
Функция Транслит(Стр) Экспорт
    Рез = СокрЛП(Стр);   
    Рез = СтрЗаменить(Рез, "а", "a");
    Рез = СтрЗаменить(Рез, "б", "b");
    Рез = СтрЗаменить(Рез, "в", "v");
    Рез = СтрЗаменить(Рез, "г", "g");
    Рез = СтрЗаменить(Рез, "д", "d");
    Рез = СтрЗаменить(Рез, "е", "e");
    Рез = СтрЗаменить(Рез, "ё", "e");
    Рез = СтрЗаменить(Рез, "ж", "zh");
    Рез = СтрЗаменить(Рез, "з", "z");
    Рез = СтрЗаменить(Рез, "и", "i");
    Рез = СтрЗаменить(Рез, "к", "k");
    Рез = СтрЗаменить(Рез, "л", "l");
    Рез = СтрЗаменить(Рез, "м", "m");
    Рез = СтрЗаменить(Рез, "н", "n");
    Рез = СтрЗаменить(Рез, "о", "o");
    Рез = СтрЗаменить(Рез, "п", "p");
    Рез = СтрЗаменить(Рез, "р", "r");
    Рез = СтрЗаменить(Рез, "с", "s");
    Рез = СтрЗаменить(Рез, "т", "t");
    Рез = СтрЗаменить(Рез, "у", "u");
    Рез = СтрЗаменить(Рез, "ф", "f");
    Рез = СтрЗаменить(Рез, "х", "h");
    Рез = СтрЗаменить(Рез, "ч", "ch");
    Рез = СтрЗаменить(Рез, "ш", "sh");
    Рез = СтрЗаменить(Рез, "щ", "sch");
    Рез = СтрЗаменить(Рез, "ъ", "");
    Рез = СтрЗаменить(Рез, "ь", "");
    Рез = СтрЗаменить(Рез, "э", "e");
    Рез = СтрЗаменить(Рез, "ю", "yu");
    Рез = СтрЗаменить(Рез, "й", "i");
    Рез = СтрЗаменить(Рез, "ц", "c");
    Рез = СтрЗаменить(Рез, "я", "ya");
    Рез = СтрЗаменить(Рез, "ы", "i");
    Рез = СтрЗаменить(Рез, "А", "A");
    Рез = СтрЗаменить(Рез, "Б", "B");
    Рез = СтрЗаменить(Рез, "В", "V");
    Рез = СтрЗаменить(Рез, "Г", "G");
    Рез = СтрЗаменить(Рез, "Д", "D");
    Рез = СтрЗаменить(Рез, "Е", "E");
    Рез = СтрЗаменить(Рез, "Ё", "E");
    Рез = СтрЗаменить(Рез, "Ж", "ZH");
    Рез = СтрЗаменить(Рез, "З", "Z");
    Рез = СтрЗаменить(Рез, "И", "I");
    Рез = СтрЗаменить(Рез, "К", "K");
    Рез = СтрЗаменить(Рез, "Л", "L");
    Рез = СтрЗаменить(Рез, "М", "M");
    Рез = СтрЗаменить(Рез, "Н", "N");
    Рез = СтрЗаменить(Рез, "О", "O");
    Рез = СтрЗаменить(Рез, "П", "P");
    Рез = СтрЗаменить(Рез, "Р", "R");
    Рез = СтрЗаменить(Рез, "С", "S");
    Рез = СтрЗаменить(Рез, "Т", "T");
    Рез = СтрЗаменить(Рез, "У", "U");
    Рез = СтрЗаменить(Рез, "Ф", "F");
    Рез = СтрЗаменить(Рез, "Х", "H");
    Рез = СтрЗаменить(Рез, "Ч", "CH");
    Рез = СтрЗаменить(Рез, "Ш", "SH");
    Рез = СтрЗаменить(Рез, "Щ", "SCH");
    Рез = СтрЗаменить(Рез, "Ъ", "");
    Рез = СтрЗаменить(Рез, "Ь", "");
    Рез = СтрЗаменить(Рез, "Ы", "I");
    Рез = СтрЗаменить(Рез, "Ц", "C");
    Рез = СтрЗаменить(Рез, "Э", "E");
    Рез = СтрЗаменить(Рез, "Ю", "YU");
    Рез = СтрЗаменить(Рез, "Я", "YA");
    Рез = СтрЗаменить(Рез, "Й", "I");
    Возврат(Рез);
КонецФункции

// Выполняет SikuliX-скрипт
//
// Параметры:
//  СтрокаКоманды		 - Строка 	 - путь к Sikuli-скрипту и аргументы
//  ЖдатьОкончания		 - Число	 - флаг ожидания окончания выполнения Sikuli-скрипта:
//									   -1	 - ожидать окончания выполнения скрипта;
//									   0	 - не ожидать окончания выполнения скрипта.
//  ЗапускЧерезСкрипт	 - Булево	 - флаг способа запуска Sikuli-скриптов:
//									   Ложь	 - устаревший способ запуска для Windows,
//											   используется по умолчанию для совместимости
//									   Истина	 - запуск через скрипт runsikulix
// 
// Возвращаемое значение:
//   - Результат выполнения скрипта. 0 - если не было ошибок.
//
&НаКлиенте
Функция ВыполнитьSikuliСкрипт(СтрокаКоманды, ЖдатьОкончания = -1, ЗапускЧерезСкрипт = Истина, 
		ОписаниеОшибки = Неопределено, ДопПараметры = Неопределено) Экспорт
		
	#Если НЕ ВебКлиент Тогда	
		
	СлужебныйВызов = Ложь;
	Если ДопПараметры <> Неопределено Тогда
		ДопПараметры.Свойство("СлужебныйВызов", СлужебныйВызов);
	КонецЕсли;
	
	ЗаписатьЛогВЖРИнформация("ВыполнитьSikuliСкрипт.Логирование", СтрокаКоманды);
	
	Если Объект.ИспользоватьSikuliXСервер И СлужебныйВызов <> Истина Тогда
		Возврат ВыполнитьSikuliСкриптЧерезSikuliXСервер(СтрокаКоманды, ЖдатьОкончания, ЗапускЧерезСкрипт, ОписаниеОшибки, ДопПараметры);
	КонецЕсли;	 
	
	Поз = Найти(СтрокаКоманды, ".sikuli");
	Если Поз > 0 Тогда
		ИмяФайлаСкрипта = Лев(СтрокаКоманды, Поз + 6);
		ИмяФайлаСкрипта = СтрЗаменить(ИмяФайлаСкрипта, """", "");
		Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайлаСкрипта) Тогда
			ВызватьИсключение ПодставитьПараметрыВСтроку(
				Локализовать("Файл <%1> не найден."),
				ИмяФайлаСкрипта
			);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Стр = ПолучитьСтрокуВызоваSikuli(ЗапускЧерезСкрипт) + " " + СтрокаКоманды;
	
	ВременныйФайлЛог = Неопределено;
	Если ОписаниеОшибки <> Неопределено ИЛИ Найти(Стр, ">") = 0 Тогда
		ВременныйФайлЛог = ПолучитьИмяВременногоФайла("txt");
		Стр = Стр + " > """ + ВременныйФайлЛог + """ 2>&1 ";
		Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
			Если ДопПараметры.Свойство("ИмяФайлаВыводаКонсоли") Тогда
				ДопПараметры.Вставить("ИмяФайлаВыводаКонсоли", ВременныйФайлЛог);
			КонецЕсли;	 
		КонецЕсли;
	КонецЕсли;	 
	
	Отладка(Стр);
	ЗаписатьЛогВЖРИнформация("ВыполнитьSikuliСкрипт.СтрокаКоманды", Стр);
	Статус = ВыполнитьКомандуОСБезПоказаЧерногоОкна(Стр, ЖдатьОкончания);
	Если ВременныйФайлЛог <> Неопределено Тогда
		Если ФайлСуществуетКомандаСистемы(ВременныйФайлЛог) Тогда
			Попытка
				Текст = Новый ЧтениеТекста;
				Текст.Открыть(ВременныйФайлЛог,,,,Ложь);
				ОписаниеОшибки = Текст.Прочитать();
				Текст.Закрыть();
				ЗаписатьЛогВЖРИнформация("ВыполнитьSikuliСкрипт.ВыводКонсоли", ОписаниеОшибки);
			Исключение
				ОписаниеОшибки = Локализовать("Не получилось прочитать вывод консоли.");
			КонецПопытки;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Статус;
	
	#КонецЕсли
КонецФункции

// Возврашает значение переменной ИмяФайлаОтветаSikuliXСевер
&НаКлиенте
Функция ИмяФайлаОтветаSikuliXСевер() Экспорт
	Возврат ИмяФайлаОтветаSikuliXСевер; 
КонецФункции	 

// Выполняет команду системы, при этом на экране не будет показано окно cmd
// Использует WshShell.
//
// Параметры:
//  СтрокаКоманды		 - Строка - выполняемая команда
//  ЖдатьОкончания		 - Число  - флаг ожидания окончания выполнения команды:
//
// Возвращаемое значение:
//   - Результат выполнения скрипта. 0 - если не было ошибок.
//
&НаКлиенте
Функция ВыполнитьКомандуОСБезПоказаЧерногоОкна(Знач ТекстКоманды, ЖдатьОкончания = -1) Экспорт
	
	Возврат МодульОбщегоНазначенияVA().ВыполнитьКомандуОСБезПоказаЧерногоОкна(ТекстКоманды, ЖдатьОкончания);
	
КонецФункции	

// Устаревшее. Нужно использовать ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль. Выполняет запись строки в текстовый лог.
//
// Параметры:
//  Стр - Строка - нужная строка для записи в лог
//
// Запись в лог будет работать если выставлен флаг ДелатьЛогВыполненияСценариевВТекстовыйФайл
// 
// Возможно задать параметр при запуске VA через командную строку.
//
// Скрипты, которые входят в комплект VA позволяют читать этот файл на CI в реальном времени.
// Это позволяет видеть на CI какой сценарий сейчас выполняется.
&НаКлиенте
Процедура ЗаписатьСтрокуВТекстовыйЛог(Стр) Экспорт
	ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(Стр);
КонецПроцедуры 

// Выполняет запись строки в текстовый лог.
//
// Параметры:
//  Стр - Строка - нужная строка для записи в лог
//
// Запись в лог будет работать если выставлен флаг ДелатьЛогВыполненияСценариевВТекстовыйФайл
// 
// Возможно задать параметр при запуске VA через командную строку.
//
// Скрипты, которые входят в комплект VA позволяют читать этот файл на CI в реальном времени.
// Это позволяет видеть на CI какой сценарий сейчас выполняется.
&НаКлиенте
Процедура ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(Стр) Экспорт
	
	Если Не Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(Объект.ИмяФайлаЛогВыполненияСценариев) Тогда
		КоличествоПопыток = 0;
		Пока Истина Цикл
			Попытка
				КоличествоПопыток = КоличествоПопыток + 1;
				ЗТ = Новый ЗаписьТекста(Объект.ИмяФайлаЛогВыполненияСценариев, "UTF-8", , Истина); 
				ЗТ.ЗаписатьСтроку(Стр); 
				ЗТ.Закрыть();
				Прервать;
			Исключение
				СообщитьПользователю(ОписаниеОшибки());
				ЗаписатьЛогВЖРОшибкаСервер("VanessaAutomation.ЗаписьЛогаВТекстовыйФайл", ОписаниеОшибки());
				Если КоличествоПопыток > 10 Тогда
					Прервать;
				ИначеЕсли КоличествоПопыток > 5 Тогда
					Sleep(1);
				КонецЕсли;	 
			КонецПопытки;
		КонецЦикла;	
	КонецЕсли;	 
	
	Если Объект.ИспользоватьКомпонентуVanessaExt И ВнешняяКомпонентаДляСкриншотов <> Неопределено И Объект.ВыводитьЛогВКонсоль И НЕ ЗапрещеныСинхронныеВызовы Тогда
		ВнешняяКомпонентаДляСкриншотов.ВывестиВКонсоль(Стр + Символы.ПС, 65001);
	КонецЕсли;	 
		
КонецПроцедуры

// Позволяет в отладке посмотреть значение переменной
//
// Параметры:
//  Парам - Произвольный - нужная переменная
//  ПараметрВызватьИсключение - Булево - флаг того, что надо вызвать исключение
//
// Процедура полезна, когда нужно из внешней обработки посмотреть значение переменной, не перезапуская сеанс TestManager.
// Нужна для отладки кода внешних обработок.
&НаКлиенте
Процедура ПосмотретьЗначение(Парам, ПараметрВызватьИсключение = Истина) Экспорт
	Если ПараметрВызватьИсключение Тогда
		Попытка
			// Эта попытка/исключение нужна, чтобы можно было выставить флаг "Останавливаться по ошибке".
			// Тогда будет остановка на данном исключении, но сценарий продолжит свою работу.
			ВызватьИсключение Локализовать("Исключение для просмотра значения.");
		Исключение
			Отладка(Локализовать("Вызов процедуры ""ПосмотретьЗначение""."));
		КонецПопытки;
	КонецЕсли;  
КонецПроцедуры

// Аналог СтрРазделить() для старых версий платформы
// Описание параметров аналогично описанию параметров для СтрРазделить()
&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
		Знач ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок = Ложь)
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

	Если ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок И СтрДлина(Разделитель) = 1 Тогда
		Если ПропускатьПустыеСтроки = Истина Тогда
			Возврат Вычислить("СтрРазделить(Строка,Разделитель,Ложь)");
		Иначе
			Возврат Вычислить("СтрРазделить(Строка,Разделитель,Истина)");
		КонецЕсли;	 
	КонецЕсли;	 
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Обертка для функции РазложитьСтрокуВМассивПодстрок()
// Нужна, т.к. не работает вызов Ванесса.РазложитьСтрокуВМассивПодстрок() из других обработок.
&НаКлиенте
Функция РазложитьСтрокуВМассивПодстрокКлиент(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	Если ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок И СтрДлина(Разделитель) = 1 Тогда
		Если МодульРаботаСоСтроками = Неопределено Тогда МодульРаботаСоСтроками = МодульРаботаСоСтроками() КонецЕсли;	 
		Возврат ?(ПропускатьПустыеСтроки = Истина, МодульРаботаСоСтроками._СтрРазделить(Строка, Разделитель, Ложь), МодульРаботаСоСтроками._СтрРазделить(Строка, Разделитель, Истина)); 
	КонецЕсли;	 
	Возврат РазложитьСтрокуВМассивПодстрок(Строка, Разделитель, ПропускатьПустыеСтроки, ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок);
КонецФункции 

// Позволяет программно подключить внешнюю обработку, когда она уже помещена в хранилище
&НаСервереБезКонтекста
Функция ПодключитьВнешнююОбработкуСервер(Знач АдресХранилища, Знач ИспользуетсяЗащитаОтОпасныхДействий, ДополнительныеПараметры = Неопределено) Экспорт
	ИмяОбработки = Неопределено;
	Если ИспользуетсяЗащитаОтОпасныхДействий Тогда
		ОписаниеЗащитыОтОпасныхДействий = Вычислить("Новый ОписаниеЗащитыОтОпасныхДействий");
		ОписаниеЗащитыОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
		
		Обработка = ПолучитьОбработкуИзФайлаЧерезМетодСоздать(ДополнительныеПараметры, ИмяОбработки);
		Если Обработка = Неопределено И ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			Если ДополнительныеПараметры.Свойство("АдресХранилища") Тогда
				ИмяОбработки = ВнешниеОбработки.Подключить(ДополнительныеПараметры.АдресХранилища, , Ложь, ОписаниеЗащитыОтОпасныхДействий);
			Иначе	
				ИмяОбработки = ВнешниеОбработки.Подключить(АдресХранилища, , Ложь, ОписаниеЗащитыОтОпасныхДействий);
			КонецЕсли;
		КонецЕсли;	 

		Возврат ИмяОбработки;
	Иначе	
		Обработка = ПолучитьОбработкуИзФайлаЧерезМетодСоздать(ДополнительныеПараметры, ИмяОбработки);
		Если Обработка = Неопределено Тогда
			Если ДополнительныеПараметры.Свойство("АдресХранилища") Тогда
				ИмяОбработки = ВнешниеОбработки.Подключить(ДополнительныеПараметры.АдресХранилища, , Ложь); 
			Иначе	
				ИмяОбработки = ВнешниеОбработки.Подключить(АдресХранилища, , Ложь); 
			КонецЕсли;	 
			
		КонецЕсли;	 
		Возврат ИмяОбработки;
	КонецЕсли;	 
КонецФункции 

// Позволяет программно подключить внешнюю обработку
&НаКлиенте
Функция ПодключитьВнешнююОбработкуКлиент(ИмяФайла, ПараметрыПодключения = Неопределено) Экспорт
	Попытка
		ДополнительныеПараметры = Новый Структура;
		Если ТипЗнч(ПараметрыПодключения) = Тип("Структура")  Тогда
			Для Каждого Элем Из ПараметрыПодключения Цикл
				ДополнительныеПараметры.Вставить(Элем.Ключ, Элем.Значение);
			КонецЦикла;	 
		КонецЕсли;	 
		Если ЕстьПоддержкаНемодальныхФорм Тогда
			Оповещение = Новый ОписаниеОповещения("ОбработкаПослеПомещенияФайла", ЭтаФорма, ДополнительныеПараметры);
			НачатьПомещениеФайла(Оповещение, , ИмяФайла, Ложь, УникальныйИдентификатор);
		Иначе
			АдресХранилища = "";
			ФайлДляПомещения = Новый Массив;
			ФайлДляПомещения.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла));
			ПомещенныеФайлы = Новый Массив;
			ПоместитьФайлы(ФайлДляПомещения, ПомещенныеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор);
			
			Если ПомещенныеФайлы.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;	 
			
			АдресХранилища = ПомещенныеФайлы[0].Хранение;
			ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
			ИмяОбработки = ПодключитьВнешнююОбработкуСервер(АдресХранилища, ЕстьЗащитаОтОпасныхДействий, ДополнительныеПараметры);
			Возврат ИмяОбработки;
		КонецЕсли;	 
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции 

// Возвращает путь к парсеру фича файлов
&НаКлиенте
Функция ПолучитьПутьКFeatureReader() Экспорт
	ПутьКФайлу = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "lib/FeatureReader/vbFeatureReader.epf";
	
	Если Не ФайлСуществуетКомандаСистемы(ПутьКФайлу, "ПолучитьПутьКFeatureReader") Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Файл <vbFeatureReader.epf> не найден в каталоге инструментов <%1>"),
			СокрЛП(Объект.КаталогИнструментов)
		);
	КонецЕсли;	 
	
	Возврат ПутьКФайлу;
КонецФункции

// TODO: Из данного метода требуется убрать обработку  "workspaceRoot" и "instrumentsRoot"
&НаКлиенте
Функция ПреобразоватьПутьСТочкамиКНормальномуПути(Знач ОригСтр = "") Экспорт
	
	Если ПустаяСтрока(ОригСтр) Тогда
		Возврат ОригСтр;
	КонецЕсли; 
	
	Если Найти(ОригСтр, "$workspaceRoot") > 0 Тогда 
		ОригСтр = СтрЗаменить(ОригСтр, "$workspaceRoot", ДополнитьСлешВПуть(Объект.КаталогПроекта));
	КонецЕсли;
		
	Если Найти(ОригСтр, "$instrumentsRoot") > 0 И НЕ ПустаяСтрока(Объект.КаталогИнструментов) Тогда
		ОригСтр = СтрЗаменить(ОригСтр, "$instrumentsRoot", ДополнитьСлешВПуть(Объект.КаталогИнструментов));
	КонецЕсли;	
	
	ФайлПути = Новый Файл(ОригСтр);
	Если ЗначениеЗаполнено(Объект.КаталогПроекта) Тогда
		Если Лев(ОригСтр, 1) = "." Тогда
			ФайлПути = Новый Файл(ДополнитьСлешВПуть(Объект.КаталогПроекта) + ОригСтр);
		КонецЕсли;
	Иначе
		Если Лев(ОригСтр, 1) = "." Тогда
			ФайлПути = Новый Файл(ДополнитьСлешВПуть(Объект.КаталогИнструментов) + ОригСтр);
		КонецЕсли;
	КонецЕсли;	 
	
	Возврат ФайлПути.ПолноеИмя;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(Знач Версия1, Знач Версия2)
	
	Массив1 = РазложитьСтрокуВМассивПодстрок(Версия1, ".");
	Массив2 = РазложитьСтрокуВМассивПодстрок(Версия2, ".");
	
	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Массив1.Количество() - 1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);
		
		Если Число(Элем2) > Число(Элем1) Тогда
			Возврат Ложь;
		ИначеЕсли Число(Элем2) < Число(Элем1) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Версия1БольшеИлиРавно;
КонецФункции

// TODO: Из данного метода требуется убрать обработку  "workspaceRoot" и "instrumentsRoot"
&НаКлиенте
Функция ВерсияПриложенияБольшеИлиРавнаЧемЗаданнаяКлиент(Версия1, Версия2) Экспорт
	
	Возврат ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(Версия1, Версия2); 

КонецФункции	

&НаСервере
Функция ПолучитьВстроенныйМакетПоИмени(Знач ИмяМакета, Знач ИмяФичи)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Попытка
		Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета); 
	Исключение
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ИмяФичи) Тогда
		Попытка
			Файл = Новый Файл(ИмяФичи);
			ИмяМакета = "МакетОбработки_" + Файл.ИмяБезРасширения + "_" + ИмяМакета;
			Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета); 
		Исключение
		КонецПопытки;
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция ПолучитьМакетОбработки(ИмяМакета, ДопПараметры = Неопределено) Экспорт
	
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	
	ИмяФичи = Неопределено;
	Если (ТекИД_ШагаВМассиве >= 0) И (ТекИД_ШагаВМассиве <= (Шаги.Количество() - 1)) Тогда
		ТекШаг       = Шаги[ТекИД_ШагаВМассиве];
		ИДСтрокиШага = ТекШаг.СтрокаШага;
		СтрокаШага   = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);
		
		ИмяФичи = ПолучитьИмяФичиИзПолногоПути(СтрокаШага.ПолныйПуть);
		
		Попытка
			Обработка = ПолучитьОбработкаСвязаннаяСИсполняемойФичей(ИмяФичи);
			
			// Далее будет попытка получить макет из обработки, которая относится к данному шагу (это либо обработка подчиненного
			// сценария, либо обработка связанная с основной фичей). Его может не быть, если это подчиненный сценарий, а хотели
			// получить макет из основной фичи. Если макет не был получен - значит далее будет попытка получить макет из
			// обработки связанной с основной фичей, если такая обработка существует.
			Если Обработка <> Неопределено Тогда
				Макет = Обработка.ПолучитьМакетОбработки(ИмяМакета);
				Возврат Макет;
			КонецЕсли;	 
		Исключение
			
		КонецПопытки;
	КонецЕсли;	 
	
	ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	СтрокаСценария   = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	Если СтрокаСценария.ФичаИмеетСвоюEPF Тогда
		СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаСценария);
		Обработка  = ПолучитьОбработкаСвязаннаяСИсполняемойФичей(СтрокаФичи.ПолныйПуть);
		Макет      = Неопределено;
		Попытка
			Макет = Обработка.ПолучитьМакетОбработки(ИмяМакета);
		Исключение
		КонецПопытки;
		
		Если Макет <> Неопределено Тогда
			Возврат Макет;
		КонецЕсли;	 
	КонецЕсли; 
	
	Если Объект.ВерсияПоставки = "single" Тогда
		Макет = ПолучитьВстроенныйМакетПоИмени(ИмяМакета, ИмяФичи);
		Если Макет <> Неопределено Тогда
			Возврат Макет; 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(Объект.КаталогПроекта) Тогда
		Попытка
			ТабДок = НайтиМакетВКаталогеПроекта(ИмяМакета, ДопПараметры);
		Исключение
			ТабДок = Неопределено;
		КонецПопытки;
		
		Если ТабДок <> Неопределено Тогда
			Возврат ТабДок;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(ИмяФичи) Тогда
		Файл = Новый Файл(ИмяФичи);
		СписокКаталогов = Новый СписокЗначений;
		СписокФайлов    = Новый СписокЗначений;
		НайтиФайлыКомандаСистемы(Файл.Путь, СписокКаталогов, СписокФайлов, Истина, ИмяМакета + ".mxl");
		Если СписокФайлов.Количество() > 0 Тогда
			ИмяФайлаМакета = СписокФайлов[0].Значение.ПолноеИмя;
			
			Попытка
				ТабДок = ПолучитьМакетИзФайла(ИмяФайлаМакета);
			Исключение
				ТабДок = Неопределено;
			КонецПопытки;
			
			Если ТабДок <> Неопределено Тогда
				Возврат ТабДок;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	

// Возвращает макет по переданному имени макета.
// Ищет макет в обработке связанной со сценарием, затем ищет макет в каталоге проекта.
&НаКлиенте
Функция ПолучитьЭталонМакета(ИмяМакета, ИмяФайлаМакета = Неопределено) Экспорт
	
	ДопПараметрыПолучнияМакета = Новый Структура;
	Результат = ПолучитьМакетОбработки(ИмяМакета, ДопПараметрыПолучнияМакета);
	
	ИмяФайлаМакета = Неопределено;
	Если ДопПараметрыПолучнияМакета.Свойство("ИмяФайла") Тогда
		ИмяФайлаМакета = ДопПараметрыПолучнияМакета.ИмяФайла;
	КонецЕсли;	
	
	Если Результат = Неопределено Тогда
		//будем искать макет в каталоге проекта
		Результат = НайтиМакетВКаталогеПроекта(ИмяМакета);
	КонецЕсли;	
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не получилось найти/прочитать макет <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяМакета);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Функция НайтиМакетВКаталогеПроекта(ИмяМакета, ДопПараметры = Неопределено) Экспорт
	Если ЗначениеЗаполнено(ИмяМакета) И ФайлСуществуетКомандаСистемы(ИмяМакета) Тогда
		Возврат ПолучитьМакетИзФайла(ИмяМакета);
	КонецЕсли;	 
	
	Если НЕ ЗначениеЗаполнено(Объект.КаталогПроекта) Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не найден эталон макета <%1>. Пустой каталог проекта."),
			ИмяМакета
		);
	КонецЕсли;	 
	
	Нашли = Ложь;
	
	ИмяМакетаДляПоиска = ИмяМакета;
	ИмяФайла           = Неопределено;
	Нашли              = НайтиМакетВКаталогеПроектаСлужебный(ИмяМакетаДляПоиска, ИмяФайла);
	
	Если Не Нашли Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не найден файл макета <%1> в каталоге проекта <%2>"),
			ИмяМакета,
			Объект.КаталогПроекта
		);
	КонецЕсли;	 
	
	ТабДок = ПолучитьМакетИзФайла(ИмяФайла);
	
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		ДопПараметры.Вставить("ИмяФайла", ИмяФайла);
	КонецЕсли;	

	Возврат Табдок;
КонецФункции	

// Ищет файл по переданному имени, затем около фича файла каталоге фичи и в подкаталогах, затем в каталоге проекта.
&НаКлиенте
Функция НайтиФайлСвязанныйСТестами(ИмяФайла) Экспорт
	Если ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		Возврат ИмяФайла;
	КонецЕсли;	 
	
	// Поиск рядом с фичей
	СостояниеVanessaAutomation = ПолучитьСостояниеVanessaAutomation();
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;
	НайтиФайлыКомандаСистемы(СостояниеVanessaAutomation.ТекущаяФича.Каталог, СписокКаталогов, СписокФайлов, Истина, ИмяФайла);
	
	Если СписокФайлов.Количество() > 0 Тогда
		Возврат СписокФайлов[0].Значение.ПолноеИмя;
	КонецЕсли;	 
	
	// Поиск в каталоге проекта
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;
	НайтиФайлыКомандаСистемы(Объект.КаталогПроекта, СписокКаталогов, СписокФайлов, Истина, ИмяФайла);
	
	Если СписокФайлов.Количество() > 0 Тогда
		Возврат СписокФайлов[0].Значение.ПолноеИмя;
	КонецЕсли;	 
	
	Возврат Неопределено;
	
КонецФункции	

// Возвращает объект на сервере.
// Вызвать метод можно только в контексте сервера.
&НаСервере
Функция Объект() Экспорт
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектНаСервере;
КонецФункции

// Возвращает контекст фреймворка.
// Для сервера возвращает  Объект().
&НаСервере
Функция Контекст() Экспорт
	Возврат Объект();
КонецФункции	 

// Возвращает контекст фреймворка.
// Для сервера возвращает  Объект().
&НаСервере
Функция Context() Экспорт
	Возврат Контекст();
КонецФункции	 

// Внимание. Где-то есть данная функция
&НаКлиенте
Функция УстановленOneScript() Экспорт
	#Если НЕ ВебКлиент Тогда

	ИнструментУстановлен = Ложь;
	
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	Стр = "oscript > """ + ИмяФайлаЛога + """ 2>&1";
	
	ВыполнитьКомандуОС(Стр);
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаЛога, "UTF-8");
	
	Стр = Текст.ПрочитатьСтроку();
		
	Если Стр <> Неопределено Тогда
		Образец = "1Script Execution Engine";
		Если Лев(Стр, СтрДлина(Образец)) = Образец Тогда
			ИнструментУстановлен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Текст.Закрыть();
	УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
	
	Возврат ИнструментУстановлен;

	#КонецЕсли
КонецФункции

&НаКлиенте
Процедура СоздатьШаблоныОбработок() Экспорт
	Если ДеревоБудетПерезагружено("СоздатьШаблоныОбработок") Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Не ЗначениеЗаполнено(Объект.ВерсияПлатформыДляГенерацииEPF) Тогда
		СообщитьПользователю(Локализовать("Не указан каталог с нужной версией платформы 8.3.10 или выше."));
		Возврат;
	КонецЕсли;	 
	
	ИмяФайла = ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + ИмяИсполняемогоФайлаТолстыйКлиент + ".exe";
	Если ЭтоLinux Тогда
		ИмяФайла = ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + ИмяИсполняемогоФайлаТолстыйКлиент;
	КонецЕсли;	 
	
	Если Не ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		СообщитьПользователю (ПодставитьПараметрыВСтроку(
			Локализовать("Не найден файл <%1>"),
			ИмяФайла
		));
		Возврат;
	КонецЕсли;	 

	МассивДействий = Новый Массив;
	ДобавитьМассивСостоянийФайлов(МассивДействий);
	ДобавитьСканированиеКаталогов(МассивДействий);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекИдМассива", 0);
	ДопПараметры.Вставить("МассивДействий", МассивДействий);
	ДопПараметры.Вставить("НадоЗагрузитьФичи", Ложь);
	ДопПараметры.Вставить("НадоГенерироватьEPF", Истина);
	ДопПараметры.Вставить("ОткрытьФормуИзвестныхШагов", Ложь);
	Если ЗапрещеныСинхронныеВызовы Тогда
		ПолучитьАсинронноСостоянияОбъектовФайловойСистемы(ДопПараметры);
	Иначе
		СоздатьШаблоныОбработокПродолжение();
	КонецЕсли;	 
	
КонецПроцедуры

#Область Работа_с_процессами_ОС

#Область Получить_ид_процессов

// Возвращает массив PID процессов сеансов 1С.
&НаКлиенте
Функция ПолучитьМассивPIDПроцессов1С(ДопПараметры = Неопределено) Экспорт
	Возврат ПолучитьМассивPIDОкон1С(ДопПараметры);
КонецФункции	

&НаКлиенте
Функция ПолучитьМассивPIDПроцессов(ИмяОбраза) Экспорт
	МассивProcessID = Новый Массив;
	
	#Если НЕ ВебКлиент Тогда
		
		Если ЭтоLinux Тогда
			
			МассивProcessID = МассивPIDПроцессовLinux(ИмяОбраза);
			
		Иначе
			
			МассивProcessID = МассивPIDПроцессовWindows(ИмяОбраза);
			
		КонецЕсли;
	
	#КонецЕсли
	
	Возврат МассивProcessID;
КонецФункции	

&НаКлиенте
Функция МассивPIDПроцессовWindows(ИмяОбраза)
	
	#Если НЕ ВебКлиент Тогда
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ИмяВременногоBat = ПолучитьИмяВременногоФайла("bat");
	ЗТ = Новый ЗаписьТекста(ИмяВременногоBat, "UTF-8", , Истина); 
	ЗТ.ЗаписатьСтроку("chcp 65001"); 
	ЗТ.ЗаписатьСтроку("tasklist /v /fo list /fi ""imagename eq " + ИмяОбраза + """ > """ + ИмяВременногоФайла + """"); 
	ЗТ.Закрыть();
	
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(ИмяВременногоBat);
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяВременногоФайла, "UTF-8");
	
	МассивProcessID = Новый Массив;
	ProcessID = Неопределено;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = НРег(Стр);
		Если Лев(Стр, 4) = "pid:" Тогда
			ProcessID = СокрЛП(Сред(Стр, 5));
		КонецЕсли;	 
		
		Если ProcessID <> Неопределено Тогда
			Если (Лев(Стр, 15) = "заголовок окна:") ИЛИ (Лев(Стр, 13) = "window title:") Тогда
				МассивProcessID.Добавить(ProcessID);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	
	Текст.Закрыть();
	
	Возврат МассивProcessID;
	
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Функция МассивPIDПроцессовLinux(ИмяОбраза)
	
	#Если НЕ ВебКлиент Тогда
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	КомандаПоиска = ПодставитьПараметрыВСтроку("ps -Af|awk '$8~""%1"" {print $2}' > %2"
												, ИмяОбраза
												, ИмяВременногоФайла);
												
	КомандаСистемы(КомандаПоиска);
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяВременногоФайла);
	
	МассивProcessID = Новый Массив;
	Стр = Текст.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл
		
		ProcessID = НРег(Стр);
		МассивProcessID.Добавить(ProcessID);
		
		Стр = Текст.ПрочитатьСтроку();
		
	КонецЦикла;	
	Текст.Закрыть();
	
	Возврат МассивProcessID;
	
	#КонецЕсли
	
КонецФункции

#КонецОбласти

#Область Завершить_процессы

&НаКлиенте
Процедура ЗавершитьСеансыTestClientПринудительно() Экспорт
	#Если НЕ ВебКлиент Тогда
		
	Если ЭтоLinux Тогда 
		СтрокаЗапуска = СтрЗаменить("kill -9 `ps aux | grep -ie TESTCLIENT | grep -ie %ИмяИсполняемогоФайлаТонкийКлиент% | awk '{print $2}'`","%ИмяИсполняемогоФайлаТонкийКлиент%",ИмяИсполняемогоФайлаТонкийКлиент);
		ЗапуститьПриложение(СтрокаЗапуска);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗапрещеныСинхронныеВызовы И Объект.ИспользоватьКомпонентуVanessaExt И ВнешняяКомпонентаДляСкриншотов <> Неопределено Тогда
		ЗавершитьВсеСеансыКлиентовТестированияВК();
		Возврат;
	КонецЕсли;	 
	
	ВычислитьPIDЭтогоСеансаСлужебный();
		
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ИмяВременногоBat = ПолучитьИмяВременногоФайла("bat");
	Команда = СтрЗаменить("tasklist /v /fo list /fi ""imagename eq %ИмяИсполняемогоФайлаТонкийКлиент%.exe"" > """ + ИмяВременногоФайла + """","%ИмяИсполняемогоФайлаТонкийКлиент%",ИмяИсполняемогоФайлаТонкийКлиент);
	
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
		
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяВременногоФайла, "UTF-8");
		
	МассивProcessID = Новый Массив;
	ProcessID = Неопределено;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
			
		Стр = НРег(Стр);
		Если Лев(Стр, 4) = "pid:" Тогда
			ProcessID = СокрЛП(Сред(Стр, 5));
		КонецЕсли;	 
			
		ЭтоСеансТестКлиента = ProcessID <> Неопределено 
				И (Лев(Стр, 15) = "заголовок окна:" ИЛИ Лев(Стр, 13) = "window title:") 
				И Найти(Стр, "vanessa") = 0 
				И PIDЭтогоСеанса <> ProcessID;
		Если ЭтоСеансТестКлиента Тогда
			МассивProcessID.Добавить(ProcessID);
		КонецЕсли;
	КонецЦикла;	
	Текст.Закрыть();
	
	УдалитьФайлыКомандаСистемы(ИмяВременногоФайла);
	УдалитьФайлыКомандаСистемы(ИмяВременногоBat);
	Если МассивProcessID.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	ЗавершитьСеансыОСПринудительно(МассивProcessID);
	
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьСеансыОСПринудительно(МассивProcessID) Экспорт
	#Если НЕ ВебКлиент Тогда
		
		Если ЭтоLinux Тогда
			
			ЗавершитьСеансыОСLinux(МассивProcessID);
			
		Иначе
			
			ЗавершитьСеансыОСWindows(МассивProcessID);
			
		КонецЕсли;
	
	#КонецЕсли
КонецПроцедуры 

&НаКлиенте
Процедура ЗавершитьСеансыОСWindows(МассивProcessID)
	
	#Если НЕ ВебКлиент Тогда
	
	Если МассивProcessID.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	ИмяВременногоBat = ПолучитьИмяВременногоФайла("bat");
	Команда = "taskkill /F ";
	Для каждого ProcessID Из МассивProcessID Цикл
		Команда = Команда + "/pid " + Формат(ProcessID, "ЧГ=; ЧН=0") + " ";
	КонецЦикла;
		
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
	УдалитьФайлыКомандаСистемы(ИмяВременногоBat);
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьСеансыОСLinux(МассивProcessID)
	
	Если МассивProcessID.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	Для каждого ProcessID Из МассивProcessID Цикл
		
		Стр = "kill -9 " + Формат(ProcessID, "ЧГ=");
		ЗапуститьПриложение(Стр);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ПолучитьМассивPIDОкон1С(ДопПараметры = Неопределено) Экспорт
	
	Если Объект.ИспользоватьКомпонентуVanessaExt И ВнешняяКомпонентаДляСкриншотов <> Неопределено И НЕ ЗапрещеныСинхронныеВызовы Тогда
		Рез = Новый Массив;
		ПолучатьОкнаПолучениеЛицензии = Истина;
		Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
			Если ДопПараметры.Свойство("ПолучатьОкнаПолучениеЛицензии") Тогда
				ПолучатьОкнаПолучениеЛицензии = ДопПараметры.ПолучатьОкнаПолучениеЛицензии;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Попытка
			ТекущиеПроцессы1С = ПрочитатьСтрокуJSON(ВнешняяКомпонентаДляСкриншотов.ПолучитьСписокПроцессов(Истина));
			Для Каждого ТекДанныеПроцесса Из ТекущиеПроцессы1С Цикл
				Если НЕ ПолучатьОкнаПолучениеЛицензии Тогда
					НадоПропуститьПроцесс = Ложь;
					СписокОкон = ПрочитатьСтрокуJSON(ВнешняяКомпонентаДляСкриншотов.ПолучитьСписокОкон(ТекДанныеПроцесса.ProcessId));
					Для Каждого ТекОкно Из СписокОкон Цикл
						Если ТипЗнч(ТекОкно) = Тип("Структура") И ТекОкно.Свойство("Title") И Найти(НРег(ТекОкно.Title), "получение лицензии") > 0 Тогда
							
							НадоПропуститьПроцесс = Истина;
							ЗаписатьЛогВЖРИнформация("ПолучитьМассивPIDОкон1С.ОкноПолученияЛицензии",
								ПодставитьПараметрыВСтроку(Локализовать("Найдено окно получения лицензии. Процесс <%1>."), ТекДанныеПроцесса.ProcessId));
							
							Прервать;
									
						КонецЕсли;	 
					КонецЦикла;	 
					
					Если НадоПропуститьПроцесс Тогда
						Продолжить;
					КонецЕсли;	 
					
				КонецЕсли;	 
				
				Рез.Добавить(ТекДанныеПроцесса.ProcessId);
			КонецЦикла;	 
			
			Если Рез.Количество() > 0 Тогда
				Возврат Рез; 
			КонецЕсли;	 
			
		Исключение
		КонецПопытки;
		
	КонецЕсли;	 
	
	Рез = Новый Массив;
	
	Если ЭтоLinux Тогда
		
		ЗаполнитьМассивPIDПоИмениПроцесса(ИмяИсполняемогоФайлаТолстыйКлиент, Рез);
		
	Иначе
		
		ЗаполнитьМассивPIDПоИмениПроцесса(ИмяИсполняемогоФайлаТолстыйКлиент + ".exe", Рез);
		ЗаполнитьМассивPIDПоИмениПроцесса(ИмяИсполняемогоФайлаТонкийКлиент + ".exe", Рез);
		
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции	

// Проверяет, существует ли процесс системы с указанным PID
&НаКлиенте
Функция ПроцессОССуществует(PID) Экспорт
	Результат = Ложь;
	
	Если Объект.ИспользоватьКомпонентуVanessaExt И ВнешняяКомпонентаДляСкриншотов <> Неопределено И НЕ ЗапрещеныСинхронныеВызовы Тогда
		Попытка
			СвойстваПроцесса = ПрочитатьСтрокуJSON(ВнешняяКомпонентаДляСкриншотов.ПолучитьСвойстваПроцесса(Число(PID)));
		Исключение
			СвойстваПроцесса = Неопределено;
		КонецПопытки;
		
		Если СвойстваПроцесса = Неопределено Тогда
			Возврат Ложь;
		Иначе	
			Возврат Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	#Если НЕ ВебКлиент Тогда
		
		Если ЭтоLinux Тогда
			
			Результат = ПроцессОССуществуетLinux(PID);
			
		Иначе
			
			Результат = ПроцессОССуществуетWindows(PID);
			
		КонецЕсли;
	
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции	 

&НаКлиенте
Функция ПроцессОССуществуетWindows(PID) 
	
	#Если НЕ ВебКлиент Тогда
	
	ЛогФайл = ПолучитьИмяВременногоФайла("txt");
	Команда = "tasklist /FI ""PID eq " + Формат(PID, "ЧГ=; ЧН=0") +  """ > """ + ЛогФайл + """";
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
	
	Если НЕ ФайлСуществуетКомандаСистемы(ЛогФайл) Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ЛогФайл, "UTF-8");
	ТекстФайла = Текст.Прочитать();
	Текст.Закрыть();
	УдалитьФайлыКомандаСистемы(ЛогФайл);
	
	Если Найти(ТекстФайла, Формат(PID, "ЧГ=; ЧН=0")) > 0 Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
	
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Функция ПроцессОССуществуетLinux(PID)
	
	#Если НЕ ВебКлиент Тогда
	
	ЛогФайл = ПолучитьИмяВременногоФайла("txt");
	Команда = ПодставитьПараметрыВСтроку("ps -p %1 > %2"
											, PID
											, ЛогФайл);
											
	ВыполнитьКомандуОС(Команда);
	
	Если НЕ ФайлСуществуетКомандаСистемы(ЛогФайл) Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ЛогФайл);
	ТекстФайла = Текст.Прочитать();
	Текст.Закрыть();
	УдалитьФайлыКомандаСистемы(ЛогФайл);
	
	Если Найти(ТекстФайла, PID) > 0 Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
	
	#КонецЕсли
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура TASKKILL(ИмяПриложения) Экспорт
	
	Если ЭтоLinux Тогда
		СтрокаКоманды = "killall -9 " + ИмяПриложения;
	Иначе	
		СтрокаКоманды = "TASKKILL /F /IM " + ИмяПриложения;
	КонецЕсли;	
	
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(СтрокаКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШагВМассивТестов(МассивТестов, Снипет, ИмяПроцедуры, ПредставлениеТеста = Неопределено, 
		ОписаниеШага = Неопределено, ТипШагаДляОписания = Неопределено, ТипШагаВДереве = Неопределено) Экспорт	

	Структура = Новый Структура;
	
	Структура.Вставить("Снипет", Снипет);
	Структура.Вставить("ИмяПроцедуры", ИмяПроцедуры);
	Структура.Вставить("ПредставлениеТеста", ПредставлениеТеста);
	Структура.Вставить("ОписаниеШага", ОписаниеШага);
	Структура.Вставить("ТипШага", ТипШагаДляОписания);
	Структура.Вставить("ТипШагаВДереве", ТипШагаВДереве);
	Структура.Вставить("Транзакция", Неопределено);
	МассивТестов.Добавить(Структура);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКлиентовТестирования() Экспорт
	Если НЕ ЗначениеЗаполнено(ПрефиксИнструментаДляСохраненияНастроек) Тогда
		СохранитьНастройкиВХранилище("ДанныеКлиентовТестирования", ДанныеКлиентовТестирования, ПараметрыДляСохраненияНастроекСервер(СтруктураДляСохраненияНастроек()));
	Иначе
		СохранитьНастройкиВХранилище("ДанныеКлиентовТестирования", ДанныеКлиентовТестирования, ПараметрыДляСохраненияНастроек());
		СохранитьНастройкиВХранилище("ДанныеАллюрМеток", ДанныеАллюрМеток, ПараметрыДляСохраненияНастроек());
	КонецЕсли;
КонецПроцедуры

// Устанавливает флаг, что надо сохранить клиентов тестирования после открытия формы
&НаКлиенте
Процедура СохранитьКлиентовТестированияПослеОткрытияФормы() Экспорт
	СохранитьКлиентовТестированияПослеОткрытияФормы = Истина;
КонецПроцедуры 

// Преобразует строки вида "больше или равно" в ">="
// Это нужно для работы "Вычислить"
&НаКлиенте
Функция ПолучитьОператорПоТексту(Знач Стр) Экспорт
	Стр = СокрЛП(НРег(Стр));
	
	Если Стр = "больше" ИЛИ Стр = "more" ИЛИ Стр = "greater" Тогда
		Стр = ">";
	ИначеЕсли Стр = "меньше" ИЛИ Стр = "less" Тогда
		Стр = "<";
	ИначеЕсли Стр = "больше или равно" ИЛИ Стр = "more or equal" Тогда
		Стр = ">=";
	ИначеЕсли Стр = "меньше или равно" ИЛИ Стр = "less or equal" Тогда
		Стр = "<=";
	ИначеЕсли Стр = "равно" ИЛИ Стр = "equal" ИЛИ Стр = "equal to" Тогда
		Стр = "=";
	ИначеЕсли Стр = "неравно" ИЛИ Стр = "unequally" Тогда
		Стр = "<>";
	ИначеЕсли Стр = "не равно" ИЛИ Стр = "not equal" ИЛИ Стр = "not equal to" Тогда
		Стр = "<>";
	КонецЕсли;	
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Процедура ВычислитьPIDЭтогоСеансаСлужебный() Экспорт
	
	Если НЕ ПустаяСтрока(ВнешняяКомпонентаДляСкриншотов) И Версия8313ИлиВыше И НЕ ЗапрещеныСинхронныеВызовы Тогда
		PIDЭтогоСеанса = Формат(ВнешняяКомпонентаДляСкриншотов.ИдентификаторПроцесса, "ЧГ=; ЧН=0");
	Иначе
		ВычислитьPIDЭтогоСеансаСлужебныйCOM();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ЗаменитьСлужебныеСимволыВВыраженииДляВычисления(Знач Текст, ВставлятьЗначение = Ложь) Экспорт
	Если Найти(Текст, "$") = 0 Тогда
		Возврат Текст; 
	КонецЕсли;	 
	
	// проверим строку на корректость
	ЭтоВыражениеКонтекст                = Ложь;
	ЭтоВыражениеКонтекстСохраняемый     = Ложь;
	ЗакрытоВыражениеКонтекст            = Ложь;
	ЗакрытоВыражениеКонтекстСохраняемый = Ложь;
	
	НовыйТекст = "";
	ПредыдущийСимвол = Неопределено;
	ДлинаСтроки = СтрДлина(Текст);
	Для Ккк = 1 По СтрДлина(Текст) Цикл
		Символ = Сред(Текст, Ккк, 1);
		
		Если Символ <> "$" Тогда
			НовыйТекст = НовыйТекст + Символ;
			ПредыдущийСимвол = Символ;
			ЗакрытоВыражениеКонтекст = Ложь;
			Продолжить;
		КонецЕсли;

		Если ПредыдущийСимвол = "$" И НЕ ЗакрытоВыражениеКонтекст Тогда
			ЭтоВыражениеКонтекстСохраняемый = НЕ ЭтоВыражениеКонтекстСохраняемый;
			Если ЗакрытоВыражениеКонтекстСохраняемый Тогда
				НовыйТекст = НовыйТекст + "~СпецРазделитель~";
			КонецЕсли;	 
			
			НовыйТекст = НовыйТекст + "~Экранирование$$~";
			ПредыдущийСимвол = Символ;
			
			ЗакрытоВыражениеКонтекстСохраняемый = НЕ ЭтоВыражениеКонтекстСохраняемый;
			
		Иначе

			Если Ккк < ДлинаСтроки Тогда
				СледующийСимвол = Сред(Текст, Ккк + 1, 1);
				Если СледующийСимвол = "$" И Не ЭтоВыражениеКонтекст Тогда
					// значит это глобальная переменная
					ПредыдущийСимвол = Символ;
					Продолжить;
				КонецЕсли;	 
			КонецЕсли;	 

			ЭтоВыражениеКонтекст = НЕ ЭтоВыражениеКонтекст;
			Если ЗакрытоВыражениеКонтекст Тогда
				НовыйТекст = НовыйТекст + "~СпецРазделитель~";
			КонецЕсли;	 
			
			НовыйТекст = НовыйТекст + "~Экранирование$~";
			ПредыдущийСимвол = Символ;
			
			ЗакрытоВыражениеКонтекст = НЕ ЭтоВыражениеКонтекст;
		КонецЕсли;
		
	КонецЦикла;	
	
	Текст = НовыйТекст;

	МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Текст, "~Экранирование$$~");
	ЭтоВыражение = Лев(Текст, СтрДлина("~Экранирование$$~")) = "~Экранирование$$~";

	Результат = "";
	Для Каждого Стр Из МассивСтрок Цикл
		Если Стр = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если ЭтоВыражение Тогда
			Если ВставлятьЗначение Тогда
				Результат = Результат + ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого(Стр);
			Иначе	
				Результат = Результат + "ОбъектКонтекстСохраняемый." + Стр;
			КонецЕсли;	 
		Иначе	
			Результат = Результат + Стр;
		КонецЕсли;	 
		
		ЭтоВыражение = Не ЭтоВыражение;
	КонецЦикла;	
	
	Текст = Результат;
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Текст, "~Экранирование$~");
	ЭтоВыражение = Лев(Текст, СтрДлина("~Экранирование$~")) = "~Экранирование$~";
	
	Результат = "";
	Для Каждого Стр Из МассивСтрок Цикл
		Если Стр = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если ЭтоВыражение Тогда
			Если ВставлятьЗначение Тогда
				Результат = Результат + ПолучитьСохраненноеЗначениеИзКонтекста(Стр);
			Иначе	
				Результат = Результат + "ОбъектКонтекст." + Стр;
			КонецЕсли;	 
		ИначеЕсли Стр <> "~СпецРазделитель~" Тогда
			Результат = Результат + Стр;
		КонецЕсли;	 
		
		ЭтоВыражение = Не ЭтоВыражение;
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ВычислитьВнутреннееВыражение(Знач Выражение, ТекстСообщения = Неопределено) Экспорт
	Если ТипЗнч(Выражение) = Тип("Булево") Тогда
		Возврат Выражение;
	КонецЕсли;	 
	
	Выражение = ЗаменитьСлужебныеСимволыВВыраженииДляВычисления(Выражение);
	// @skip-warning Используется в методе Вычислить() ниже
	
	Попытка
		ЗначениеВыражения = Вычислить(Выражение);
	Исключение
		ТекстСообщения = Локализовать("Не получилось вычислить выражение: %1");
		ТекстСообщения = ТекстСообщения + Символы.ПС;
		ТекстСообщения = ТекстСообщения + ОписаниеОшибки();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Выражение);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Возврат ЗначениеВыражения; 
КонецФункции	 

&НаКлиенте
Функция ПолучитьСтрокуВычисливВнутренниеВыражения(Знач Текст) Экспорт
	Результат = "";	
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Текст, "$");
	ЭтоВыражение = Ложь;
	Если Лев(Текст, 1) = "$" Тогда
		ЭтоВыражение = Истина;
	КонецЕсли;	 
	
	Результат = "";
	Для Каждого Стр Из МассивСтрок Цикл
		Если ЭтоВыражение Тогда
			Результат = Результат + Вычислить(Стр);
		Иначе	
			Результат = Результат + Стр;
		КонецЕсли;	 
		
		ЭтоВыражение = Не ЭтоВыражение;
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции	

// Позволяет сделать поиск в строке "ПроверяемаяСтрока" подстроки "Шаблон"
// при этом подстрока "Шаблон" может содержать символы *
// например СтрокаСоответствуетШаблону("Привет","*вет")
&НаКлиенте
Функция СтрокаСоответствуетШаблону(Знач ПроверяемаяСтрока, Знач Шаблон) Экспорт
	Если ПроверяемаяСтрока = Шаблон Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Если ЭтоLinux Тогда
		Шаблон = ПодготовитьШаблонКИспользованиюВРегулярке(Шаблон, ЭтоLinux, СпецСимволыРегулярныхВыраженийДляЛинукс);
	Иначе	
		Шаблон = ПодготовитьШаблонКИспользованиюВРегулярке(Шаблон, ЭтоLinux, СпецСимволыРегулярныхВыражений);
	КонецЕсли;	
	
	Если ЭтоLinux Тогда
		#Если ВебКлиент Тогда
			Возврат СтрокаСоответствуетШаблонуСервер(ПроверяемаяСтрока, Шаблон);
		#Иначе
			Возврат ПроверитьСтрокуRegExpLinux(ПроверяемаяСтрока, Шаблон);
		#КонецЕсли
	Иначе	
		Если Регулярка = Неопределено Тогда
			Регулярка = Новый COMОбъект("VBScript.RegExp");
		КонецЕсли;
		
		Регулярка.Global = Истина;
		Регулярка.Multiline = Истина;
		// для VBScript.RegExp явно указываем что есть начало и конец строки
		Шаблон            = "^" + Шаблон + "$";
		Регулярка.Pattern = Шаблон;
		Возврат Регулярка.Test(ПроверяемаяСтрока);
	КонецЕсли;	 
КонецФункции 

// Делает склейку параметров в одну строку, если они переданы.
&НаКлиенте
Процедура СоединитьСтрокиЕслиЭтоВозможно(Стр, Стр2 = Неопределено, Стр3 = Неопределено, Стр4 = Неопределено, Стр5 = Неопределено, Стр6 = Неопределено, Стр7 = Неопределено) Экспорт
	Если ТипЗнч(Стр) = Тип("Массив") Тогда
		Массив = Стр;
		Стр = "";
		НомерСтроки = 0;
		Для Каждого Элем Из Массив Цикл
			НомерСтроки = НомерСтроки + 1;
			Стр = Стр + Элем.Кол1;
			Если НомерСтроки < Массив.Количество() Тогда
				Стр = Стр + Символы.ПС;
			КонецЕсли;	 
		КонецЦикла;	 
	КонецЕсли;	 
	
	Если Стр2 <> Неопределено Тогда
		Стр = Стр + Стр2;
	КонецЕсли;	 
	Если Стр3 <> Неопределено Тогда
		Стр = Стр + Стр3;
	КонецЕсли;	 
	Если Стр4 <> Неопределено Тогда
		Стр = Стр + Стр4;
	КонецЕсли;	 
	Если Стр5 <> Неопределено Тогда
		Стр = Стр + Стр5;
	КонецЕсли;	 
	Если Стр6 <> Неопределено Тогда
		Стр = Стр + Стр6;
	КонецЕсли;	 
	Если Стр7 <> Неопределено Тогда
		Стр = Стр + Стр7;
	КонецЕсли;	 
КонецПроцедуры

// Позволяет указать значения таблиц или макетов, которые потом можно будет сравнить между собой
// также эти значения потом будут прикреплены к отчету Allure
// Если Тип = Неопределено, тогда считается, что переданы таблицы
&НаКлиенте
Процедура УстановитьЗначенияТаблицДляСравнения(Эталон, ТекущееЗначение, Тип = Неопределено) Экспорт
	Если Тип = Неопределено Тогда
		ГлобальныеЗначенияШагов.Вставить("ТаблицаЭталон", Эталон);
		ГлобальныеЗначенияШагов.Вставить("ТаблицаТекущееЗначение", ТекущееЗначение);
	Иначе
		ЗначениеЭталон = Новый Структура;
		ЗначениеЭталон.Вставить("Тип", Тип);
		ЗначениеЭталон.Вставить("Значение", Эталон);
		ГлобальныеЗначенияШагов.Вставить("ТаблицаЭталон", ЗначениеЭталон);
		
		ЗначениеТекущееЗначение = Новый Структура;
		ЗначениеТекущееЗначение.Вставить("Тип", Тип);
		ЗначениеТекущееЗначение.Вставить("Значение", ТекущееЗначение);
		ГлобальныеЗначенияШагов.Вставить("ТаблицаТекущееЗначение", ЗначениеТекущееЗначение);
	КонецЕсли;	 
КонецПроцедуры

// Позволяет указать описание строки таблицы, которое использовалось при попытке перехода к строке таблицы
&НаКлиенте
Процедура УстановитьЗначенияОписанияСтрокиПриПереходеКСтрокеТаблицы(ОписаниеСтроки, ИмяТаблицы) Экспорт
	
	ГлобальныеЗначенияШагов.Вставить("ОписанияСтрокиПриПереходеКСтрокеТаблицы", ОписаниеСтроки);
	ГлобальныеЗначенияШагов.Вставить("ИмяТаблицыПриПереходеКСтрокеТаблицы", ИмяТаблицы);
	
КонецПроцедуры

// Позволяет указать установить для упавшего шага значения, которые будут потом использоваться для актуализации значения шага
&НаКлиенте
Процедура УстановитьЗначенияДляАктуализацииПараметровШага(ДопПараметры) Экспорт
	
	Для Каждого ТекЗначение Из ДопПараметры Цикл
		ГлобальныеЗначенияШагов.Вставить(ТекЗначение.Ключ, ТекЗначение.Значение);
	КонецЦикла;	
	
КонецПроцедуры

// Преобразует табличный документ в массив структур
// в первой строке макета должна быть строка с именами колонок
&НаКлиенте
Функция ПреобразоватьТабличныйДокументВМассивСтруктур(ТабДок) Экспорт
	Массив = Новый Массив;
	
	Если ТабДок.ВысотаТаблицы = 0 Тогда
		Возврат Массив;
	КонецЕсли;	 
	
	СтрокаТаблицы = Новый Структура;
	Для Ррр = 1 По ТабДок.ШиринаТаблицы Цикл
		СтрокаТаблицы.Вставить("Кол" + Формат(Ррр, "ЧГ=; ЧН=0"), ТабДок.Область(1, Ррр, 1, Ррр).Текст);
	КонецЦикла;	
	Массив.Добавить(СтрокаТаблицы);
	
	Для Ккк = 2 По ТабДок.ВысотаТаблицы Цикл
		СтрокаТаблицы = Новый Структура;
		Для Ррр = 1 По ТабДок.ШиринаТаблицы Цикл
			СтрокаТаблицы.Вставить("Кол" + Формат(Ррр, "ЧГ=; ЧН=0"), ТабДок.Область(Ккк, Ррр, Ккк, Ррр).Текст);
		КонецЦикла;	
		Массив.Добавить(СтрокаТаблицы);
	КонецЦикла;	
	
	Возврат Массив;
КонецФункции	 

&НаКлиенте
Процедура ПрикрепитьКСценариюДополнительныеФайлыСравненияЗначенияСЭталоном(Макет1, Макет2) Экспорт
	
	#Если НЕ ВебКлиент Тогда
	
	Если НЕ Объект.ДелатьОтчетВФорматеАллюр Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ Объект.ПрикладыватьДополнительныеДанныеПриСравненииЗначенияСЭталономAllure Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(Макет1) = Тип("Массив") ИЛИ ТипЗнч(Макет1) = Тип("ФиксированныйМассив") Тогда
		ЗначениеМакет1 = ПреобразоватьЗначениеВМакет(Макет1);
	Иначе
		ЗначениеМакет1 = Макет1;
	КонецЕсли;
	
	Если ТипЗнч(Макет2) = Тип("Массив") ИЛИ ТипЗнч(Макет2) = Тип("ФиксированныйМассив") Тогда
		ЗначениеМакет2 = ПреобразоватьЗначениеВМакет(Макет2);
	Иначе
		ЗначениеМакет2 = Макет2;
	КонецЕсли;
	
	ИмяФайла1 = ПолучитьИмяВременногоФайла("pdf");
	ЗначениеМакет1.Записать(ИмяФайла1,ТипФайлаТабличногоДокумента.PDF_A_3);	
	
	ИмяФайла2 = ПолучитьИмяВременногоФайла("pdf");
	ЗначениеМакет2.Записать(ИмяФайла2,ТипФайлаТабличногоДокумента.PDF_A_3);	
	
	ФайлКартинки1 = ПреобразоватьPDFВКартинку(ИмяФайла1);
	ФайлКартинки2 = ПреобразоватьPDFВКартинку(ИмяФайла2);
	
	Если ФайлКартинки1 = Неопределено ИЛИ ФайлКартинки2 = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	КартинкаРазницаМеждуКартинками = КартинкаРазницаМеждуКартинками(ФайлКартинки1, ФайлКартинки2);
	Если КартинкаРазницаМеждуКартинками = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	КартинкаАнимацияСРазницейКартинок = КартинкаАнимацияСРазницейКартинок(ФайлКартинки1, ФайлКартинки2);
	Если КартинкаАнимацияСРазницейКартинок = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(Неопределено, ИДСтрокиСценария, Истина);
	СтрокаСценария   = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	
	Если СтрокаСценария = Неопределено Тогда
		ВызватьИсключение Локализовать("Не вышло получить строку сценария.");
	КонецЕсли;	 
	
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	РезультатПрохожденияТестовСценария.Вставить("ЕстьДополнительныеФайлыСравненияЗначенияСЭталоном", Истина);
	РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
	РезультатПрохожденияШага = РезультатПрохожденияТестовШагов[РезультатПрохожденияТестовШагов.Количество() - 1];
	
	Если НЕ РезультатПрохожденияШага.Свойство("МассивСкриншотов") Тогда
		РезультатПрохожденияШага.Вставить("МассивСкриншотов", Новый Массив);
	КонецЕсли;	 
	
	//expected
	ДанныеФайлаКартинки = Новый Структура;
	ДанныеФайлаКартинки.Вставить("ДвоичныеДанные", Новый ДвоичныеДанные(ФайлКартинки1));
	ДанныеФайлаКартинки.Вставить("ИмяСкриншотаДляОтчета", "expected");
	ИмяФайла =  ИмяФайлаСкриншотаБезКаталога();
	ДанныеФайлаКартинки.Вставить("ИмяФайла", ИмяФайла);
	ДобавитьСкриншотКСценариюИлиШагу(РезультатПрохожденияТестовСценария, ДанныеФайлаКартинки);
	
	ИмяФайла =  ИмяФайлаСкриншотаБезКаталога();
	ДанныеФайлаКартинки.Вставить("ИмяФайла", ИмяФайла);
	ДобавитьСкриншотКСценариюИлиШагу(РезультатПрохожденияШага, ДанныеФайлаКартинки);
	
	//actual
	ДанныеФайлаКартинки = Новый Структура;
	ДанныеФайлаКартинки.Вставить("ДвоичныеДанные", Новый ДвоичныеДанные(ФайлКартинки2));
	ДанныеФайлаКартинки.Вставить("ИмяСкриншотаДляОтчета", "actual");
	ИмяФайла =  ИмяФайлаСкриншотаБезКаталога();
	ДанныеФайлаКартинки.Вставить("ИмяФайла", ИмяФайла);
	ДобавитьСкриншотКСценариюИлиШагу(РезультатПрохожденияТестовСценария, ДанныеФайлаКартинки);
	
	ИмяФайла =  ИмяФайлаСкриншотаБезКаталога();
	ДанныеФайлаКартинки.Вставить("ИмяФайла", ИмяФайла);
	ДобавитьСкриншотКСценариюИлиШагу(РезультатПрохожденияШага, ДанныеФайлаКартинки);
	
	//diff
	ДанныеФайлаКартинки = Новый Структура;
	ДанныеФайлаКартинки.Вставить("ДвоичныеДанные", Новый ДвоичныеДанные(КартинкаРазницаМеждуКартинками));
	ДанныеФайлаКартинки.Вставить("ИмяСкриншотаДляОтчета", "diff");
	ИмяФайла =  ИмяФайлаСкриншотаБезКаталога();
	ДанныеФайлаКартинки.Вставить("ИмяФайла", ИмяФайла);
	ДобавитьСкриншотКСценариюИлиШагу(РезультатПрохожденияТестовСценария, ДанныеФайлаКартинки);
	
	ИмяФайла =  ИмяФайлаСкриншотаБезКаталога();
	ДанныеФайлаКартинки.Вставить("ИмяФайла", ИмяФайла);
	ДобавитьСкриншотКСценариюИлиШагу(РезультатПрохожденияШага, ДанныеФайлаКартинки);
	
	//diff-animation
	ДанныеФайлаКартинки = Новый Структура;
	ДанныеФайлаКартинки.Вставить("ДвоичныеДанные", Новый ДвоичныеДанные(КартинкаАнимацияСРазницейКартинок));
	ДанныеФайлаКартинки.Вставить("ИмяСкриншотаДляОтчета", "diff-animation");
	ИмяФайла =  ИмяФайлаСкриншотаБезКаталога();
	ИмяФайла = СтрЗаменить(ИмяФайла, ".png", ".gif");
	ДанныеФайлаКартинки.Вставить("ИмяФайла", ИмяФайла);
	ДобавитьСкриншотКСценариюИлиШагу(РезультатПрохожденияТестовСценария, ДанныеФайлаКартинки);
	
	ИмяФайла =  ИмяФайлаСкриншотаБезКаталога();
	ИмяФайла = СтрЗаменить(ИмяФайла, ".png", ".gif");
	ДанныеФайлаКартинки.Вставить("ИмяФайла", ИмяФайла);
	ДобавитьСкриншотКСценариюИлиШагу(РезультатПрохожденияШага, ДанныеФайлаКартинки);
	
	#КонецЕсли
	
КонецПроцедуры 

// Прикрепляет к строке сценария макет
&НаКлиенте
Процедура ПрикрепитьМакетКСценарию(Макет, Имя) Экспорт
	Если ТекИД_СценарияВМассиве > МассивСценариевДляВыполнения.Количество() - 1 Тогда
		ВызватьИсключение Локализовать("Не вышло получить строку сценария.");
	КонецЕсли;	 
	
	ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(Неопределено, ИДСтрокиСценария, Истина);
	СтрокаСценария   = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	
	Если СтрокаСценария = Неопределено Тогда
		ВызватьИсключение Локализовать("Не вышло получить строку сценария.");
	КонецЕсли;	 
	
	Если СтрокаСценария.ПроизвольныеЗначения = Неопределено Тогда
		СтрокаСценария.ПроизвольныеЗначения = Новый Структура;
	КонецЕсли;	 
	
	ПроизвольныеЗначения = СтрокаСценария.ПроизвольныеЗначения;
	Если Не ПроизвольныеЗначения.Свойство("ПрикрепленныеМакеты") Тогда
		ПроизвольныеЗначения.Вставить("ПрикрепленныеМакеты", Новый Соответствие);
	КонецЕсли;	 
	
	ПрикрепленныеМакеты = ПроизвольныеЗначения.ПрикрепленныеМакеты;
	ПрикрепленныеМакеты.Вставить(Имя, Новый Структура("Макет,Имя", Макет, Имя));
КонецПроцедуры 

// Прикрепляет произвольный файл к строке сценария
//  Параметры
//
//  ДвоичныеДанныеФайла - двоичные данные файла, который нужно прикрепить
//  ИмяФайла - имя файла с расширением
//  УникальностьИмени - флаг того, что надо добавлять уникальную строку к имени файла
&НаКлиенте
Процедура ПрикрепитьФайлКСценарию(ДвоичныеДанныеФайла, ИмяФайла, УникальностьИмени = Истина) Экспорт
	Если ТекИД_СценарияВМассиве > МассивСценариевДляВыполнения.Количество() - 1 Тогда
		ВызватьИсключение Локализовать("Не вышло получить строку сценария.");
	КонецЕсли;	 
	
	ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(Неопределено, ИДСтрокиСценария, Истина);
	СтрокаСценария   = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	
	Если СтрокаСценария = Неопределено Тогда
		ВызватьИсключение Локализовать("Не вышло получить строку сценария.");
	КонецЕсли;	 
	
	Если СтрокаСценария.ПроизвольныеЗначения = Неопределено Тогда
		СтрокаСценария.ПроизвольныеЗначения = Новый Структура;
	КонецЕсли;	 
	
	ПроизвольныеЗначения = СтрокаСценария.ПроизвольныеЗначения;
	Если Не ПроизвольныеЗначения.Свойство("ПрикрепленныеФайлы") Тогда
		ПроизвольныеЗначения.Вставить("ПрикрепленныеФайлы", Новый Массив);
	КонецЕсли;	 
	
	ПрикрепленныеФайлы = ПроизвольныеЗначения.ПрикрепленныеФайлы;
	ПрикрепленныеФайлы.Добавить(Новый Структура("ДвоичныеДанныеФайла,ИмяФайла,УникальностьИмени", ДвоичныеДанныеФайла, ИмяФайла, УникальностьИмени));
КонецПроцедуры 

// Добавляет произвольный файл к сценарию
&НаКлиенте
Процедура ДобавитьФайлКСценарию(ДанныеФайла, ВызыватьИсключение = Истина) Экспорт
	ИмяФайла = ДанныеФайла.ИмяФайла;
	ТипФайла = ДанныеФайла.Расширение;
	ИмяФайлаДляОтчета = ДанныеФайла.Представление;
	
	ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	
	Если НЕ РезультатПрохожденияТестовСценария.Свойство("СписокФайлов") Тогда
		СписокФайлов = Новый Массив();
		РезультатПрохожденияТестовСценария.Вставить("СписокФайлов", СписокФайлов);
	Иначе
		СписокФайлов = РезультатПрохожденияТестовСценария.СписокФайлов;
	КонецЕсли;
	
	ФайлИмяФайла = Новый Файл(ИмяФайла);
	
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		ТекстСообщения = ПодставитьПараметрыВСтроку(Локализовать("Не найден файл: %1"), ИмяФайла);
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстСообщения;
		Иначе
			ЗаписатьЛогВЖРОшибка("ДобавитьФайлКСценарию", ТекстСообщения);
			Возврат;	
		КонецЕсли;
	КонецЕсли;	
	
	СтруктураФайл = Новый Структура;
	СтруктураФайл.Вставить("ИмяФайла", ?(ИмяФайлаДляОтчета = Неопределено, ФайлИмяФайла.Имя, ИмяФайлаДляОтчета));
	СтруктураФайл.Вставить("ДвоичныеДанные", Новый ДвоичныеДанные(ИмяФайла));
	СтруктураФайл.Вставить("ТипФайла", ТипФайла);
	СписокФайлов.Добавить(СтруктураФайл);
	
	Если ДанныеФайла.Свойство("ПрикрепитьФайлКшагу") Тогда
		ШагДляПрикрепления = ДанныеФайла.ПрикрепитьФайлКшагу;
		РезультатПрохожденияТестовШагов = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
		Для Каждого ТекРезультатПрохожденияШага Из РезультатПрохожденияТестовШагов Цикл
			Если ТекРезультатПрохожденияШага.ИДСтроки = ШагДляПрикрепления.ИдСтроки Тогда
				ДобавлятьФайлКСценарию = Истина;
				Если ДанныеФайла.Свойство("ДобавлятьФайлКСценарию") Тогда
					ДобавлятьФайлКСценарию = ДанныеФайла.ДобавлятьФайлКСценарию;
				КонецЕсли;	 
				ДобавитьФайлКШагу(ИмяФайла, ТипФайла, ИмяФайлаДляОтчета, ДобавлятьФайлКСценарию, ТекРезультатПрохожденияШага);
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	 
	КонецЕсли;	 
	
КонецПроцедуры

// Добавляет произвольный файл к шагу сценария
&НаКлиенте
Процедура ДобавитьФайлКШагу(ИмяФайла, ТипФайла = "text/plain", ИмяФайлаДляОтчета = Неопределено, ДобавлятьФайлКСценарию = Истина, РезультатПрохожденияШага = Неопределено) Экспорт
	
	Если РезультатПрохожденияШага = Неопределено Тогда
		ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
		РезультатПрохожденияШага = РезультатПрохожденияТестовШагов[РезультатПрохожденияТестовШагов.Количество() - 1];
	КонецЕсли;	 
	
	Если НЕ РезультатПрохожденияШага.Свойство("СписокФайлов") Тогда
		СписокФайлов = Новый Массив();
		РезультатПрохожденияШага.Вставить("СписокФайлов", СписокФайлов);
	Иначе
		СписокФайлов = РезультатПрохожденияШага.СписокФайлов;
	КонецЕсли;
	
	ФайлИмяФайла = Новый Файл(ИмяФайла);
	
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не найден файл: %1"),
			ИмяФайла
		);
	КонецЕсли;
	
	БылоПрикреплениеФайловКШагам = Истина;
	
	СтруктураФайл = Новый Структура;
	СтруктураФайл.Вставить("ИмяФайла", ?(ИмяФайлаДляОтчета = Неопределено, ФайлИмяФайла.Имя, ИмяФайлаДляОтчета));
	СтруктураФайл.Вставить("ДвоичныеДанные", Новый ДвоичныеДанные(ИмяФайла));
	СтруктураФайл.Вставить("ТипФайла", ТипФайла);
	СтруктураФайл.Вставить("ДобавлятьФайлКСценарию", ДобавлятьФайлКСценарию);
	СписокФайлов.Добавить(СтруктураФайл); 
	
	ЗаписатьЛогВЖРИнформация("ДобавитьФайлКШагу", ИмяФайла);
	
КонецПроцедуры

// Возвращает макет, показывающий отличия в переданных макетах
&НаКлиенте
Функция ПолучитьРазличияВМакетах(Макет1, Макет2, СтрокаШапки = Неопределено) Экспорт
	ПустойЦвет = Новый Цвет();
	
	Если ТипЗнч(Макет1) = Тип("Массив") ИЛИ ТипЗнч(Макет1) = Тип("ФиксированныйМассив") Тогда
		ЗначениеМакет1 = ПреобразоватьЗначениеВМакет(Макет1);
	Иначе
		ЗначениеМакет1 = Макет1;
	КонецЕсли;	 
	Если ТипЗнч(Макет2) = Тип("Массив") ИЛИ ТипЗнч(Макет2) = Тип("ФиксированныйМассив") Тогда
		ЗначениеМакет2 = ПреобразоватьЗначениеВМакет(Макет2);
	Иначе
		ЗначениеМакет2 = Макет2;
	КонецЕсли;	 
	
	КопияМакет2 = СкопироватьТабличныйДокументСервер(ЗначениеМакет2);
	
	Высота = Max(ЗначениеМакет1.ВысотаТаблицы, КопияМакет2.ВысотаТаблицы);
	Ширина = Max(ЗначениеМакет1.ШиринаТаблицы, КопияМакет2.ШиринаТаблицы);
	
	Если СтрокаШапки <> Неопределено Тогда
		КешИменКолонок = Новый Соответствие;
		Для Каждого Элем Из СтрокаШапки Цикл
			КешИменКолонок.Вставить(НРег(Элем.Значение), Истина);
		КонецЦикла;	 
		
		ИдКолонокДляСравения2 = Новый Массив;
		Для Колонка = 1 По Ширина Цикл
			Значение = ЗначениеМакет2.Область(1, Колонка, 1, Колонка).Текст;
			Если НЕ ПустаяСтрока(Значение) И КешИменКолонок[НРег(Значение)] <> Неопределено Тогда
				ИдКолонокДляСравения2.Добавить(Колонка);
			КонецЕсли;	 
		КонецЦикла;	 
		
		ИдКолонокДляСравения1 = Новый Соответствие;
		Для Колонка = 1 По Ширина Цикл
			Значение1 = ЗначениеМакет1.Область(1, Колонка, 1, Колонка).Текст;
			Если НЕ ПустаяСтрока(Значение1) И КешИменКолонок[НРег(Значение1)] <> Неопределено Тогда
				Для Каждого ИДКолонки2 Из ИдКолонокДляСравения2 Цикл
					Если ИДКолонки2 = Неопределено Тогда
						Продолжить;
					КонецЕсли;	 
					
					Значение2 = ЗначениеМакет2.Область(1, ИДКолонки2, 1, ИДКолонки2).Текст;
					Если Значение1 = Значение2 Тогда
						ИдКолонокДляСравения1.Вставить(ИДКолонки2, Колонка);
						Прервать;
					КонецЕсли;	 
				КонецЦикла;	 
			КонецЕсли;	 
		КонецЦикла;	 
	КонецЕсли;	 
	
	Для Ряд = 1 По Высота Цикл
		
		Если СтрокаШапки = Неопределено Тогда
			Для Колонка = 1 По Ширина Цикл
				
				ОбластьЛево = ЗначениеМакет1.Область(Ряд, Колонка, Ряд, Колонка);
				ОбластьПраво = КопияМакет2.Область(Ряд, Колонка, Ряд, Колонка);
				
				Если ОбластьЛево.Текст <> ОбластьПраво.Текст И ОбластьЛево.Текст <> "*" Тогда
					ОбластьПраво.ЦветФона = WebЦвета.ТусклоРозовый;
				Иначе
					ОбластьПраво.ЦветФона = ПустойЦвет;
				КонецЕсли;
			КонецЦикла;
		Иначе	
			Для Каждого ИдКолонки2 Из ИдКолонокДляСравения2 Цикл
				Если ИдКолонки2 = Неопределено Тогда
					Продолжить;
				КонецЕсли;	 
				
				ИдКолонки1 = ИдКолонокДляСравения1[ИдКолонки2];
				
				ОбластьЛево = ЗначениеМакет1.Область(Ряд, ИдКолонки1, Ряд, ИдКолонки1);
				ОбластьПраво = КопияМакет2.Область(Ряд, ИдКолонки2, Ряд, ИдКолонки2);
				
				Если ОбластьЛево.Текст <> ОбластьПраво.Текст И ОбластьЛево.Текст <> "*" Тогда
					ОбластьПраво.ЦветФона = WebЦвета.ТусклоРозовый;
				Иначе
					ОбластьПраво.ЦветФона = ПустойЦвет;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат КопияМакет2; 
КонецФункции	 

// Сравнивает строки без учета регистра, и некоторых спецсимволов
&НаКлиенте
Функция СтрокиРавны(Знач Стр1, Знач Стр2) Экспорт
	Стр1 = СтрЗаменить(Стр1, Символы.НПП, " ");
	Стр2 = СтрЗаменить(Стр2, Символы.НПП, " ");
	Возврат (НРег(Стр1) = НРег(Стр2)); 
КонецФункции	 

// Сравнивает строки как массив строк
&НаКлиенте
Функция СтрокиРавныКакМассивСтрок(Стр1, Стр2) Экспорт
	
	МассивСтрок1 = _СтрРазделить(Стр1, Символы.ПС);
	МассивСтрок2 = _СтрРазделить(Стр2, Символы.ПС);
	
	Если МассивСтрок1.Количество() <> МассивСтрок2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;	     
	
	Для Сч = 0 По МассивСтрок1.Количество()-1 Цикл
		Если СокрЛП(МассивСтрок1[Сч]) <> СокрЛП(МассивСтрок2[Сч]) Тогда
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;	         
	
	Возврат Истина;
	
КонецФункции	

// Проверяет что строка соответствует панели разделов
&НаКлиенте
Функция ЭтоПанельРазделов(Стр) Экспорт
	Если НРег(Стр) = НРег("Панель разделов") Тогда
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег("Section panel") Тогда // en 
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег("Sections panel") Тогда // en
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег("Panoul compartimentelor") Тогда // ro
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

// проверяет что строка соответствует панели открытых
&НаКлиенте
Функция ЭтоПанельОткрытых(Стр) Экспорт
	Если НРег(Стр) = НРег("Панель открытых") Тогда
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег("Open items panel") Тогда // en
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег("Opened items panel") Тогда // en
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег("Panoul celor deschise") Тогда // ro
		Возврат Истина;
	КонецЕсли;	 
	                         
	Возврат Ложь;
КонецФункции	 

// проверяет что строка соответствует меню функций
&НаКлиенте
Функция ЭтоМенюФункций(Стр) Экспорт
	Если НРег(Стр) = НРег("Меню функций") Тогда
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег("Панель функций текущего раздела") И НЕ ЭтоМобильныйКлиентТестирования() Тогда
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег("Functions menu") Тогда // en
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег("Function menu") Тогда // en
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег("Panoul funcțiilor secțiunii curente") Тогда // ro
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег("Meniul funcțiilor") Тогда // ro
		Возврат Истина;
	КонецЕсли;	      
	
	Возврат Ложь;
КонецФункции	 

// возвращает признак того, что надо шаги выполнять в безопасно
&НаКлиенте
Функция БезопасноеВыполнениеШагов() Экспорт
	Возврат Объект.БезопасноеВыполнениеШагов; 
КонецФункции	 

// Возвращает значение переменной ИмяУправляющиегоФайлаSikuliXСервер
&НаКлиенте
Функция ИмяУправляющиегоФайлаSikuliXСервер() Экспорт
	Возврат ИмяУправляющиегоФайлаSikuliXСервер; 
КонецФункции	 

// возвращает значение переменной ИмяФайлаВыводаКонсолиSikuliXСервер
&НаКлиенте
Функция ИмяФайлаВыводаКонсолиSikuliXСервер() Экспорт
	Возврат ИмяФайлаВыводаКонсолиSikuliXСервер; 
КонецФункции	 

// Выполняет переданные код на сервере без передачи переменных
&НаСервере
Процедура ЯВыполняюКодВстроенногоЯзыкаНаСервереСервер(Знач Текст) Экспорт
	Выполнить(Текст);
КонецПроцедуры

// Выполняет переданные код на сервере с контекстом с передачей переменных
&НаКлиенте
Процедура ЯВыполняюКодВстроенногоЯзыкаНаСервереСПередачейПеременных(Текст) Экспорт
	
	КонтекстДляПередачиНаСервер = КонтекстДляПередачиНаСервер();
	КонтекстСохранямыйДляПередачиНаСервер = КонтекстСохранямыйДляПередачиНаСервер();
	
	ЯВыполняюКодВстроенногоЯзыкаНаСервереСПередачейПеременныхСервер(Текст,
		КонтекстДляПередачиНаСервер,
		КонтекстСохранямыйДляПередачиНаСервер,
		СлужебныеПеременныеДляПередачиНаСервер());
	
	Для Каждого КлючЗначение Из КонтекстДляПередачиНаСервер Цикл
		ОбъектКонтекст.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	Для Каждого КлючЗначение Из КонтекстСохранямыйДляПередачиНаСервер Цикл
		ОбъектКонтекстСохраняемый.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет переданные код на сервере без контекста с передачей переменных
&НаКлиенте
Процедура ЯВыполняюКодВстроенногоЯзыкаНаСервереБезКонтекстаСПередачейПеременных(Текст) Экспорт
	
	КонтекстДляПередачиНаСервер = КонтекстДляПередачиНаСервер();
	КонтекстСохранямыйДляПередачиНаСервер = КонтекстСохранямыйДляПередачиНаСервер();
	
	ЯВыполняюКодВстроенногоЯзыкаНаСервереБезКонтекстаСПередачейПеременныхСервер(Текст,
		КонтекстДляПередачиНаСервер,
		КонтекстСохранямыйДляПередачиНаСервер,
		СлужебныеПеременныеДляПередачиНаСервер());
		
	Для Каждого КлючЗначение Из КонтекстДляПередачиНаСервер Цикл
		ОбъектКонтекст.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	Для Каждого КлючЗначение Из КонтекстСохранямыйДляПередачиНаСервер Цикл
		ОбъектКонтекстСохраняемый.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
		
КонецПроцедуры

// Возвращает ссылку на коллекцию точек останов дерева шагов
&НаКлиенте
Функция Брейкпоинты() Экспорт
	Возврат Брейкпоинты; 
КонецФункции	 

//Возвращает ссылку на коллекцию точек останова редактора
&НаКлиенте
Функция БрейкпоинтыVanessaEditor() Экспорт
	ДанныеВкладкиРедактора = ДанныеВкладкиРедактора();
	Если ДанныеВкладкиРедактора = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	Возврат ДанныеВкладкиРедактора.БрейкпоинтыVanessaEditor; 
КонецФункции	 

//Возвращает ссылку на коллекцию точек останова вставок редактора
&НаКлиенте
Функция БрейкпоинтыVanessaEditorВиджеты() Экспорт
	ДанныеВкладкиРедактора = ДанныеВкладкиРедактора();
	Если ДанныеВкладкиРедактора = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	Возврат ДанныеВкладкиРедактора.БрейкпоинтыVanessaEditorВиджеты; 
КонецФункции	 

// Возвращает ссылку на буфер обмена
&НаКлиенте
Функция БуферОбменаVA() Экспорт
	Возврат БуферОбменаVA; 
КонецФункции	 

//Возвращает коллекцию найденных ошибок/проблем
&НаКлиенте
Функция НайденныеПроблемы() Экспорт
	Возврат НайденныеПроблемы; 
КонецФункции	 

// Возвращает имена служебных переменных
&НаКлиенте
Функция СлужебныеПеременныеКонтекста() Экспорт
	Возврат СлужебныеПеременныеКонтекста; 
КонецФункции	 

// Проверяет, что данная переменная Контекст или КонтекстСохраняемый является служебной
&НаКлиенте
Функция ЭтоСлужебнаяПеременаяКонтекста(ИмяПеременной) Экспорт
	
	Если СлужебныеПеременныеКонтекста[ИмяПеременной] <> Неопределено Тогда
		Возврат Истина;
	ИначеЕсли Найти(ИмяПеременной, "_Цикл_") > 0 Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
	
КонецФункции	 

// Возвращает кеш данных переводов шагов
&НаКлиенте
Функция КешДанныеПеревода() Экспорт
	Возврат КешДанныеПеревода;
КонецФункции	 

// Возвращает модуль редактора текста
&НаКлиенте
Функция МодульРедакторТекста() Экспорт
	Если МодульРедакторТекста = Неопределено Тогда МодульРедакторТекста = ПолучитьМодульРедакторТекста(); КонецЕсли;
	
	Возврат МодульРедакторТекста;
КонецФункции	 

// Возвращает модуль редактора текста
&НаКлиенте
Функция МодульНастройкиРаботыСБраузером() Экспорт
	Если МодульНастройкиРаботыСБраузером = Неопределено Тогда МодульНастройкиРаботыСБраузером = ПолучитьМодульНастройкиРаботыСБраузером(); КонецЕсли;
	
	Возврат МодульНастройкиРаботыСБраузером;
КонецФункции

// Возвращает модуль редактора текста
&НаКлиенте
Функция МодульРаботаСGit() Экспорт
	Если МодульРаботаСGit = Неопределено Тогда МодульРаботаСGit = ПолучитьМодульРаботаСGit(); КонецЕсли;
	
	Возврат МодульРаботаСGit;
КонецФункции	 

// Возвращает модуль редактора текста
&НаКлиенте
Функция МодульПарсерGherkin() Экспорт
	Если МодульПарсерGherkin = Неопределено Тогда МодульПарсерGherkin = ПолучитьМодульПарсерGherkin(); КонецЕсли;
	
	Возврат МодульПарсерGherkin;
КонецФункции	 

// Возвращает модуль общего назначения Vanessa Automation
&НаКлиенте
Функция МодульОбщегоНазначенияVA() Экспорт
	Если МодульОбщегоНазначенияVA = Неопределено Тогда МодульОбщегоНазначенияVA = ПолучитьМодульОбщегоНазначенияVA(); КонецЕсли;
	
	Возврат МодульОбщегоНазначенияVA;
КонецФункции	 

// Возвращает модуль работы с браузером
&НаКлиенте
Функция МодульРаботаСБраузером() Экспорт
	Если МодульРаботаСБраузером = Неопределено Тогда МодульРаботаСБраузером = ПолучитьМодульРаботаСБраузером(); КонецЕсли;
	
	Возврат МодульРаботаСБраузером;
КонецФункции	 

// Возвращает модуль работы с инструментом Подготовка и загрузка данных
&НаКлиенте
Функция МодульПодготовкаИЗагрузкаДанных() Экспорт
	Если МодульПодготовкаИЗагрузкаДанных = Неопределено Тогда МодульПодготовкаИЗагрузкаДанных = ПолучитьМодульПодготовкаИЗагрузкаДанных(); КонецЕсли;
	
	Возврат МодульПодготовкаИЗагрузкаДанных;
КонецФункции	 

// Возвращает модуль исследователя формы
&НаКлиенте
Функция МодульИсследовательФормы() Экспорт
	
	Если МодульИсследовательФормы = Неопределено Тогда
		МодульИсследовательФормы = ПолучитьМодульИсследовательФормы();
	КонецЕсли;
	
	Возврат МодульИсследовательФормы;
КонецФункции	 

// Возвращает модуль исследователя формы
&НаКлиенте
Функция МодульРаботаСоСтроками() Экспорт
	
	Если МодульРаботаСоСтроками = Неопределено Тогда
		МодульРаботаСоСтроками = ПолучитьМодульРаботаСоСтроками();
	КонецЕсли;
	
	Возврат МодульРаботаСоСтроками;
КонецФункции	 

// Возвращает модуль исследователя формы
&НаКлиенте
Функция МодульСерверныеВызовы() Экспорт
	
	Если МодульСерверныеВызовы = Неопределено Тогда
		МодульСерверныеВызовы = ПолучитьМодульСерверныеВызовы();
	КонецЕсли;
	
	Возврат МодульСерверныеВызовы;
КонецФункции	 

// Возвращает модуль парсера фич
&НаКлиенте
Функция МодульПарсерФич() Экспорт
	
	Если МодульПарсерФич = Неопределено Тогда
		МодульПарсерФич = ПолучитьМодульПарсерФич();
	КонецЕсли;
	
	Возврат МодульПарсерФич;
КонецФункции	 

// Возвращает таблицу уже существующих сценариев 
&НаКлиенте
Функция ТаблицаУжеСуществующихСценариев() Экспорт
	Возврат ТаблицаУжеСуществующихСценариев; 
КонецФункции	 

//Устанавливает видимость и доступность элементов формы.
&НаКлиенте
Процедура УстановитьУсловноеОформление(Элемент = Неопределено) Экспорт
	
	Если Объект.СоздаватьИнструкциюВидео Тогда
		Объект.ОзвучиватьВыполнениеСценария = Ложь;
	КонецЕсли;	
	
	Если Объект.ОзвучиватьВыполнениеСценария Тогда
		Объект.СоздаватьИнструкциюВидео = Ложь;
	КонецЕсли;	

	Элементы.ПеревестиТекстНаДругойЯзык.Видимость = Объект.ЯзыкГенератораGherkin <> "ru";
	Элементы.VanessaEditorПеревестиТекстНаДругойЯзык.Доступность = Объект.ЯзыкГенератораGherkin <> "ru";
	
	Элементы.КаталогВыгрузкиИнструкцийВидео.Видимость = Объект.СоздаватьИнструкциюВидео;
	Элементы.КаталогПроекта1.Видимость = Объект.СоздаватьИнструкциюВидео;
	Элементы.ГруппаТипВидеоИнструкций.Видимость = Объект.СоздаватьИнструкциюВидео;
	Элементы.ИмяТекущейСборки.Видимость = Объект.ДобавлятьКИмениСценарияУсловияВыгрузки;
	Элементы.ПанельVanessaEditorФормаВключитьВыключитьЗаписьВидео.Пометка = Объект.СоздаватьИнструкциюВидео;
	Элементы.ПанельVanessaEditorОзвучиваниеВыполненияСценария.Пометка = Объект.ОзвучиватьВыполнениеСценария;
	
	ПриИзмененииТипаВидеоИнструкции();
	
	Элементы.ТекстовыеИнструкцииГруппаШаговКакШаг.Доступность = Объект.СоздаватьИнструкциюHTML Или Объект.СоздаватьИнструкциюMarkdown;
	Элементы.ДобавлятьИмяФичиВТекстовуюИнструкцию.Доступность = Объект.СоздаватьИнструкциюHTML Или Объект.СоздаватьИнструкциюMarkdown;
	Элементы.ДобавлятьИмяСценарияВТекстовуюИнструкцию.Доступность = Объект.СоздаватьИнструкциюHTML Или Объект.СоздаватьИнструкциюMarkdown;
	
	Элементы.КаталогиHTML.Видимость = Объект.СоздаватьИнструкциюHTML;
	Элементы.СтилиHTML.Видимость = Объект.СоздаватьИнструкциюHTML;
	Элементы.ФайлСтилей.Видимость = Объект.ВариантСтилейHTMLИнструкции <> 1;
	Элементы.ОткрытьРедакторHTML.Доступность = Не ПустаяСтрока(Объект.СтилиHTMLИнструкции);
	Элементы.ОзвучкаHTML.Видимость = Объект.ВариантСтилейHTMLИнструкции = 2;
	
	УстановитьЗаголовокТемпОзвучкиHTML();
	УстановитьЗаголовокДиапазонОзвучкиHTML();
	УстановитьГолосОзвучкиПоУмолчанию();
	
	Элементы.КаталогВыгрузкиИнструкцийMarkdown.Доступность = Объект.СоздаватьИнструкциюMarkdown;
	
	//КонецЕсли;
	Элементы.АвтонумерацияШагов.Доступность = Объект.СоздаватьИнструкциюHTML Или Объект.СоздаватьИнструкциюMarkdown;
	
	Элементы.ГруппаjUnitНастройки.Видимость = Объект.ДелатьОтчетВФорматеjUnit;
	Элементы.ГруппаCucumberНастройки.Видимость = Объект.ДелатьОтчетВФорматеCucumberJson;
	Элементы.ГруппаСППРНастройки.Видимость = Объект.ДелатьОтчетВФорматеСППР;
	
	Элементы.ВыводитьЛогВКонсоль.Видимость = Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл;
	Элементы.ВыводитьВЛогВыполнениеШагов.Видимость = Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл;
	Элементы.ПодробныйЛогВыполненияСценариев.Видимость = Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл;
	Элементы.ИмяФайлаЛогВыполненияСценариев.Видимость = Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл;
	
	Элементы.ГруппаВидеоНастройки.Видимость = Объект.СоздаватьИнструкциюВидео;
	Элементы.ЗаписьВидеоКомандаНачатьЗаписьВидео.Видимость = (Объект.ЗаписьВидеоИнструмент = "vlc");
	
	//Элементы.ГруппаОзвучкаГолосомВнутренняя.Видимость = Объект.ЗаписьВидеоДелатьНаложениеTTS;
	//Элементы.ГруппаТестГолоса.Видимость = Объект.ЗаписьВидеоДелатьНаложениеTTS;
	
	Если Объект.ЗаписьВидеоТипОзвучкиTTS = 0 Тогда
		
		Элементы.СтраницыНастроекОзвучания.ТекущаяСтраница = Элементы.ГруппаMicrosoftTTS;
		
	ИначеЕсли Объект.ЗаписьВидеоТипОзвучкиTTS = 1 Тогда
		
		Элементы.СтраницыНастроекОзвучания.ТекущаяСтраница = Элементы.ГруппаYandexTTS;
		ЗаполнитьЗначенияПоУмолчаниюYandexTTS();
		
	ИначеЕсли Объект.ЗаписьВидеоТипОзвучкиTTS = 2 Тогда
		
		Элементы.СтраницыНастроекОзвучания.ТекущаяСтраница = Элементы.ГруппаAmazonTTS;
		ЗаполнитьЗначенияПоУмолчаниюAmazonTTS();
		
	ИначеЕсли Объект.ЗаписьВидеоТипОзвучкиTTS = 3 Тогда
		
		Элементы.СтраницыНастроекОзвучания.ТекущаяСтраница = Элементы.ГруппаСберTTS;
		ЗаполнитьЗначенияПоУмолчаниюСберTTS();
		
	Иначе	
		
		Элементы.СтраницыНастроекОзвучания.ТекущаяСтраница = Элементы.ГруппаДругойДвижокTTS;
		
	КонецЕсли;
	
	Элементы.ЗаписьВидеоYandexTTSИдентификаторКаталога.Видимость 	= Объект.ЗаписьВидеоYandexTTSВариантЗапроса = 0;
	Элементы.ЗаписьВидеоYandexTTSOauthToken.Видимость 				= Объект.ЗаписьВидеоYandexTTSВариантЗапроса = 0;
	Элементы.ЗаписьВидеоYandexTTSApiKey.Видимость 	= Объект.ЗаписьВидеоYandexTTSВариантЗапроса = 0;
	Элементы.ГруппаЗаписьВидеоYandexTTSИли.Видимость 	= Объект.ЗаписьВидеоYandexTTSВариантЗапроса = 0;

	Элементы.ИнтервалВыполненияШагаЗаданныйПользователем.Видимость = Объект.ВыполнятьШагиАсинхронно;
	
	Элементы.ЗаписьВидеоКэшФайловTTS.Видимость = Объект.ЗаписьВидеоКэшироватьФайлыTTS;
	
	Элементы.ЗаписьВидеоКэшВидеоВставок.Видимость = Объект.ЗаписьВидеоКэшироватьВидеоВставки;
	
	Элементы.КлючиОтладки.Видимость 	= Объект.ЗапускатьТестКлиентВРежимеОтладки;
	Элементы.АдресОтладчика.Видимость 	= Объект.ЗапускатьТестКлиентВРежимеОтладки;
	
	Элементы.ИнтервалВыполненияШагаЗаданныйПользователем.Видимость = Объект.ВыполнятьШагиАсинхронно;
	
	Элементы.КаталогиСкриптовSikuliX.Видимость = Объект.ИспользоватьSikuliXСервер;
	Элементы.СброситьПодключениеSikuliXСервера.Видимость = Объект.ИспользоватьSikuliXСервер;
	Элементы.КаталогиСкриптовSikuliXПоУмолчанию.Видимость = Объект.ИспользоватьSikuliXСервер;
	Элементы.ГруппаПрофилиЦветов.Видимость = Объект.ИспользоватьSikuliXСервер;
	Элементы.ЗаписьВидеоЭмулироватьДвиженияМышкиSikuliX.Видимость = Объект.ИспользоватьSikuliXСервер;
	Элементы.КаталогДляГенерацииКартинок.Видимость = Объект.ЗаписьВидеоЭмулироватьДвиженияМышкиSikuliX;
	Элементы.ГруппаПрофилиЦветов.Видимость = Объект.ЗаписьВидеоЭмулироватьДвиженияМышкиSikuliX;

	Элементы.ЗаписьВидеоДобавитьМузыкуКСлайдуЗаголовок.Видимость = Объект.ЗаписьВидеоЗаменитьСлайдЗаголовок;
	Элементы.ЗаписьВидеоПутьКСлайдуЗаголовок.Видимость = Объект.ЗаписьВидеоЗаменитьСлайдЗаголовок;
	
	Элементы.ЗаписьВидеоДобавитьМузыкуКСлайдуФинал.Видимость = Объект.ЗаписьВидеоЗаменитьСлайдФинал;
	Элементы.ЗаписьВидеоПутьКСлайдуФинал.Видимость = Объект.ЗаписьВидеоЗаменитьСлайдФинал;
	
	Элементы.ЗадатьРазмерОкнаКлиентаТестирования.Доступность = 
		ЗначениеЗаполнено(ДескрипторОсновногоОкнаТекущегоКлиентаТестирования)
		И ЗначениеЗаполнено(PIDТекущегоКлиентаТестирования);
	Элементы.ИспользоватьВнешнююКомпонентуДляСкриншотов.Доступность = Объект.ИспользоватьКомпонентуVanessaExt;
	Элементы.СпособСнятияСкриншотовВнешнейКомпонентой.Доступность = Объект.ИспользоватьВнешнююКомпонентуДляСкриншотов;
	Элементы.КомандаСделатьСкриншот.Доступность = НЕ Объект.ИспользоватьВнешнююКомпонентуДляСкриншотов;
	Элементы.ПоискКартинокСПомощьюКомпонентыVanessaExt.Доступность = Объект.ИспользоватьКомпонентуVanessaExt;
	Элементы.ПодключатьГорячуюКлавишуДляПолученияСправкиОбЭлементе.Доступность = Объект.ИспользоватьКомпонентуVanessaExt;
	Элементы.ПорогПоискаКартинки.Видимость = Объект.ПоискКартинокСПомощьюКомпонентыVanessaExt;

	Элементы.ИспользоватьБраузерПлюсWebSocket.Доступность = Объект.ИспользоватьКомпонентуVanessaExt;
	Элементы.ИспользоватьБраузерПлюсWebSocket1.Доступность = Объект.ИспользоватьКомпонентуVanessaExt;
	
	Элементы.СобиратьДанныеОСостоянииАктивнойФормыПриОшибке.Видимость = Объект.ДелатьЛогОшибокВТекстовыйФайл;
	Элементы.СобиратьДанныеОСостоянииВсехФормПриОшибке.Видимость = Объект.ДелатьЛогОшибокВТекстовыйФайл;
	Элементы.СобиратьДанныеОСетевыхСоединениях.Видимость = Объект.ДелатьЛогОшибокВТекстовыйФайл;
	Элементы.СобиратьДанныеОПроцессахОС.Видимость = Объект.ДелатьЛогОшибокВТекстовыйФайл;
	Элементы.СобиратьДанныеОЗначенияхПеременных.Видимость = Объект.ДелатьЛогОшибокВТекстовыйФайл;
	Элементы.ИмяКаталогаЛогОшибок.Видимость = Объект.ДелатьЛогОшибокВТекстовыйФайл;
	
	Элементы.КоличествоКадровВидеоВыполненияТестов.Видимость = Объект.ЗаписыватьВидеоВыполненияТестов;
	Элементы.КомандаЗаписиВидеоВыполненияТестов.Видимость = Объект.ЗаписыватьВидеоВыполненияТестов;
	Элементы.КаталогДляЗаписиВидеоВыполненияТестов.Видимость = Объект.ЗаписыватьВидеоВыполненияТестов;
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Элементы.СтраницыДляОтображенияДереваИРедактора.ТекущаяСтраница = Элементы.СтраницаVanessaEditor;
	Иначе
		Элементы.СтраницыДляОтображенияДереваИРедактора.ТекущаяСтраница = Элементы.СтраницаДеревоШагов;
	КонецЕсли;
	Элементы.ФормаПерейтиВДеревоШагов.Видимость = Объект.ИспользоватьРедакторVanessaEditor;
	Элементы.ФормаПерейтиВVanessaEditor.Видимость = НЕ Объект.ИспользоватьРедакторVanessaEditor;
	Элементы.ФормаЗагрузитьФичиИзКаталога.Видимость = НЕ Объект.ИспользоватьРедакторVanessaEditor;
	Элементы.ГруппаВидимостьКолонок.Видимость = НЕ Объект.ИспользоватьРедакторVanessaEditor;
	Элементы.ФормаРазвернутьВсеСтрокиДереваСлужебный.Видимость = НЕ Объект.ИспользоватьРедакторVanessaEditor;
	Элементы.VanessaEditorИспользоватьДанныеТекущейФормыПриПодбореШагов.Пометка
		= Объект.ИспользоватьДанныеТекущейФормыПриПодбореШагов;
	Элементы.VanessaEditorПроверкаСинтаксисаВРедакторе.Пометка = Объект.ПроверкаСинтаксисаВРедакторе;
	Элементы.VanessaEditorПоказыватьРазличияВРедактореОтдельно.Пометка
		= Объект.ПоказыватьРазличияВРедактореОтдельно;
	Элементы.VanessaEditorПриГенерацииШаговИскатьЭлементыФормыПоИмени.Пометка
		= Объект.ИскатьЭлементыФормыПоИмени;
	Элементы.VanessaEditorПоказыватьСтрокиПодсценариев.Пометка = Объект.ПоказыватьСтрокиПодсценариевVanessaEditor;		
	Элементы.VanessaEditorПоказыватьМиниатюруКода.Пометка = Объект.ПоказыватьМиниатюруКода;
	Элементы.VanessaEditorПоказыватьЗначенияПеременныхВСтрокахРедактора.Пометка = Объект.ПоказыватьЗначенияПеременныхВСтрокахРедактора;
	
	Элементы.ГруппаНастройкиАвтоинструкцийПриРаботеСБраузером.ТолькоПросмотр = НЕ Объект.ИспользоватьКомпонентуVanessaExt;
	
	Элементы.ГруппаКоманднаяПанельVanessaEditor.Видимость = Объект.ИспользоватьРедакторVanessaEditor;
	
	Элементы.СтрокаДляПоискаВнутриФичи.ТолькоПросмотр = НЕ Объект.ИспользоватьКомпонентуVanessaExt;
	Элементы.ТестГолосаПроизнести.Доступность = Объект.ИспользоватьКомпонентуVanessaExt;
	Элементы.ВыводитьЛогВКонсоль.Доступность = Объект.ИспользоватьКомпонентуVanessaExt;
	
	Если Объект.ИспользоватьКомпонентуVanessaExt Тогда
		Элементы.ТестГолосаПроизнести.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
	Иначе	
		Элементы.ТестГолосаПроизнести.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	КонецЕсли;
	
	Элементы.ГруппаGit.ТолькоПросмотр = НЕ Объект.ИспользоватьКомпонентуVanessaExt;
	Элементы.ИспользоватьПарсерGherkinИзКомпонентыVanessaExt.Доступность = Объект.ИспользоватьКомпонентуVanessaExt;
	Элементы.ПоискФайловСПомощьюКомпонентыVanessaExt.Доступность = Объект.ИспользоватьКомпонентуVanessaExt;
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Элементы.ПодменюЗагрузитьФичи.Видимость = Ложь;
		Элементы.Перезагрузить.Видимость = Ложь;
		Элементы.ВыполнитьСценарии.Видимость = Ложь;
		Элементы.ОстановитьСценарии.Видимость = Ложь;
		Элементы.ФормаПерезагрузитьИВыполнить.Видимость = Ложь;
		Элементы.ГруппаВидимостьКолонок.Видимость = Ложь;
		Элементы.ФормаПерейтиВVanessaEditor.Видимость = НЕ Объект.ИспользоватьРедакторVanessaEditor;
		Элементы.ФормаПерейтиВДеревоШагов.Видимость = Ложь;
		Элементы.ФормаГруппаНастройки.Видимость = Ложь;
		
		Элементы.ГруппаVanessaEditorВыполнениеСценариев.Видимость = Истина;
	Иначе	
		Элементы.ПодменюЗагрузитьФичи.Видимость = Истина;
		Элементы.Перезагрузить.Видимость = Истина;
		Элементы.ВыполнитьСценарии.Видимость = Истина;
		Элементы.ОстановитьСценарии.Видимость = Истина;
		Элементы.ФормаПерезагрузитьИВыполнить.Видимость = Истина;
		Элементы.ГруппаВидимостьКолонок.Видимость = Истина;
		Элементы.ФормаПерейтиВVanessaEditor.Видимость = НЕ Объект.ИспользоватьРедакторVanessaEditor;
		Элементы.ФормаПерейтиВДеревоШагов.Видимость = Объект.ИспользоватьРедакторVanessaEditor;
		Элементы.ФормаГруппаНастройки.Видимость = Истина;
		
		Элементы.ГруппаVanessaEditorВыполнениеСценариев.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев.Видимость = Объект.ВыгружатьСтатусВыполненияСценариевВФайл;
	
	Элементы.ИнтервалЗапускаПроцессаКлиентаТестирования.Доступность = Объект.ПовторноЗапускатьСеансКлиентаТестированияПриПодключенииЕслиНеНайденЕгоПроцесс;
	
	Если Объект.ОтображатьЗакладкиСверху Тогда
		Элементы.ФункциональностьЗакладки.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Иначе
		Элементы.ФункциональностьЗакладки.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСправаГоризонтально;
	КонецЕсли;
	
	Элементы.ПоказыватьОкноОстановкиВыполненияСценария.Доступность = Объект.ИспользоватьКомпонентуVanessaExt;
	Элементы.ПоказыватьОкноОстановкиЗаписиДействийПользователя.Доступность = Объект.ИспользоватьКомпонентуVanessaExt;
	
	Элементы.АдресПользовательскихНастроек.Видимость = Объект.ПоставщикПользовательскихНастроек <> "NotUse";
	Элементы.ТаймаутПередПринудительнымЗакрытиемКлиентаТестирования.Видимость = Объект.ЗакрыватьКлиентТестированияПринудительно;
	
	Элементы.ГруппаНастройкиСмещенийКоординатМышки.ТолькоПросмотр = НЕ Объект.ЭмулироватьДвиженияМышкиVanessaExt;
	Элементы.ГруппаСкоростьПеремещенияМышки.ТолькоПросмотр = НЕ Объект.ЭмулироватьДвиженияМышкиVanessaExt;
	Элементы.ГруппаПодсвечиватьКликиМышкой.ТолькоПросмотр = НЕ Объект.ЭмулироватьДвиженияМышкиVanessaExt;
	
	Элементы.VanessaEditorПерезапуститьКакМенеджерТестирования.Видимость = Не ЭтоМенеджерТестирования;
	
	Элементы.ДымовыеТестыИмяКонфигурацииПоставщика.Доступность = Объект.ДымовыеТестыТолькоИзмененныеОтностительноКонфигурацииПоставщика;
	
КонецПроцедуры

// Возвращает объект внешней компоненты VanessaExt
&НаКлиенте
Функция ВнешняяКомпонента() Экспорт
	Возврат ВнешняяКомпонентаДляСкриншотов;
КонецФункции

// Возвращает объект типа Цвет
// Параметры
//   ИсходныйЦвет - цвет в одном из его представлений
&НаКлиенте
Функция АбсолютыйЦвет(ИсходныйЦвет) Экспорт
	Возврат АбсолютыйЦветСервер(ИсходныйЦвет); 
КонецФункции	 

// Возвращает число соответствующее данному цвету
// Параметры
//   Цвет - WebЦвета
&НаКлиенте
Функция ЦветЧислом(Цвет) Экспорт
	АбсолютныйЦвет = АбсолютыйЦвет(Цвет);
	Возврат АбсолютныйЦвет.Красный + 256 * АбсолютныйЦвет.Зеленый + 256 * 256 * АбсолютныйЦвет.Синий;
КонецФункции	 

// Добавляет в массив ПредставлениеДанных и ОтображаемыйТекст, если значения заданы на английском
&НаКлиенте
Функция ДополнитьПредставлениеСпискаВыбора(ФиксМассив) Экспорт
	
	Если ФиксМассив.Количество() = 0 Тогда
		Возврат ФиксМассив; 
	КонецЕсли;	 
	
	Если НЕ ФиксМассив[0].Свойство("DataPresentation") Тогда
		Возврат ФиксМассив; 
	КонецЕсли;	 
	
	Для Каждого Данные Из ФиксМассив Цикл
		Данные.Вставить("ПредставлениеДанных", Данные.DataPresentation);
		Если Данные.Свойство("ShownText") Тогда
			Данные.Вставить("ОтображаемыйТекст", Данные.ShownText);
		ИначеЕсли Данные.Свойство("DisplayedText") Тогда
			Данные.Вставить("ОтображаемыйТекст", Данные.DisplayedText);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Возврат ФиксМассив; 
	
КонецФункции	 

&НаКлиенте
Процедура ОткрытьФормуИзвестногоШага(АктивизироватьСтрокуШага, ПараметрыТекущегоШага = Неопределено) Экспорт
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТаблицаИзвестныхStepDefinition", ТаблицаИзвестныхStepDefinition);
	ПараметрыФормы.Вставить("ТаблицаУжеСуществующихСценариев", ТаблицаУжеСуществующихСценариев);
	ПараметрыФормы.Вставить("ЯзыкГенератораGherkin", Объект.ЯзыкГенератораGherkin);
	ПараметрыФормы.Вставить("КаталогИнструментов", Объект.КаталогИнструментов);
	ПараметрыФормы.Вставить("МакетШаблонПеревода", МакетШаблонПеревода);
	Если ЗначениеЗаполнено(Объект.ЯзыкГенератораGherkin) И Объект.ЯзыкГенератораGherkin <> "ru" Тогда
		ПараметрыФормы.Вставить("ДвоичныеДанныеФайлПеревода", ПолучитьФайлыПеревода());
	Иначе	
		ПараметрыФормы.Вставить("ДвоичныеДанныеФайлПеревода", Неопределено);
	КонецЕсли;	 
	ПараметрыФормы.Вставить("Снипет", Неопределено);
	ПараметрыФормы.Вставить("СтрокаРеальнойПроцедуры", Неопределено);
	
	Если АктивизироватьСтрокуШага И Элементы.ДеревоТестов.ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("Снипет", Элементы.ДеревоТестов.ТекущиеДанные.Снипет);
		ПараметрыФормы.Вставить("СтрокаРеальнойПроцедуры", Элементы.ДеревоТестов.ТекущиеДанные.СтрокаРеальнойПроцедуры);
	КонецЕсли;	 
	
	Если ТипЗнч(ПараметрыТекущегоШага) = Тип("Структура") Тогда
		ПараметрыФормы.Вставить("Снипет", ПараметрыТекущегоШага.Снипет);
		ПараметрыФормы.Вставить("СтрокаРеальнойПроцедуры", ПараметрыТекущегоШага.СтрокаРеальнойПроцедуры);
	КонецЕсли;	 
	
	ОткрытьФорму(ПолучитьИмяОбработкиVA() + ".Форма.ВыборИзвестногоШага", ПараметрыФормы, ЭтаФорма);
	ОткрываласьФормаБиблиотекиШагов = Истина;
КонецПроцедуры 

// Конвертирует дату в строку
&НаКлиенте
Функция СтрокуВДату(Стр) Экспорт
	Возврат ПреобразоватьСтрокуВДату(Стр); 
КонецФункции	 

// Возвращает версию Vanessa Automation
&НаКлиенте
Функция ВерсияVanessaAutomation() Экспорт
	
	Возврат ПолучитьВерсиюОбработкиКлиент(); 
	
КонецФункции	 

// Возвращает данные команды
&НаКлиенте
Функция ДанныеКомандыVanessaAutomation(ИмяКоманды) Экспорт
	Возврат ДанныеКомандыVanessaAutomationСервер(ИмяКоманды); 
КонецФункции	 

// Возвращает строку возможного шаблона, если в Стр2 заменить часть символов на *
&НаКлиенте
Функция СтрокаВозможногоШаблона(Стр1, Стр2) Экспорт
	
	ЗаписатьЛогВЖРИнформация("СтрокаВозможногоШаблона", "Начало");
	
	МаксСчетчикПроверок1 = 20000;
	МаксСчетчикПроверок2 = 1000;
	
	Результат = ШаблонРазличийДвухСтрок(Стр1, Стр2, МаксСчетчикПроверок1);
	Если СтрокаШаблонаНеТривиальна(Результат) Тогда
		ЗаписатьЛогВЖРИнформация("СтрокаВозможногоШаблона", "Окончание");
		Возврат УбратьЛишниеСимволыЗвездочки(Результат); 
	Иначе	
		//Попытка убрать одно слово
		МассивСтрок = Ванесса._СтрРазделить(Стр2, " ");
		Если МассивСтрок.Количество() > 1 Тогда
			Для Сч = 0 По Мин(МассивСтрок.Количество()-1,10) Цикл
				КопияМассивСтрок = ЗаменитьПозициюВМассиве(МассивСтрок, Сч, "*");
				НовСтр2 = Ванесса._СтрСоединить(КопияМассивСтрок, " ");
				Результат = ШаблонРазличийДвухСтрок(Стр1, НовСтр2, МаксСчетчикПроверок2);
				Если СтрокаШаблонаНеТривиальна(Результат) Тогда
					ЗаписатьЛогВЖРИнформация("СтрокаВозможногоШаблона", "Окончание");
					Возврат УбратьЛишниеСимволыЗвездочки(Результат);
				КонецЕсли;	 
			КонецЦикла;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	ЗаписатьЛогВЖРИнформация("СтрокаВозможногоШаблона", "Окончание");
	
	Возврат Неопределено;
	
КонецФункции

// Дополняет строку сообщения строкой возможного шаблона
&НаКлиенте
Функция ДобавитьСтрокуВозможногоШаблона(ТекстСообщения, Стр1, Стр2) Экспорт
	СтрокаВозможногоШаблона = Ванесса.СтрокаВозможногоШаблона(Стр1, Стр2);
	Если ЗначениеЗаполнено(СтрокаВозможногоШаблона) Тогда
		Стр = СтрЗаменить(Локализовать("Возможная строка шаблона <%1>."), "%1", СтрокаВозможногоШаблона);
		ТекстСообщения = ТекстСообщения + Символы.ПС + Стр;
	КонецЕсли;	 
	
	Возврат ТекстСообщения; 
	
КонецФункции	 

// Возвращает строку с версией обработки
&НаКлиенте
Функция ПолучитьВерсиюОбработкиКлиент(РелизнаяВерсия = Ложь) Экспорт
	Если Не ЗначениеЗаполнено(КешВерсияОбработки) Тогда
		КешВерсияОбработки = ПолучитьВерсиюОбработкиСервер();
	КонецЕсли;	 
	
	Если РелизнаяВерсия Тогда
		ТекВерсия = КешВерсияОбработки;
		ДобавлятьПрефикс = Ложь;
		Если Найти(ТекВерсия, "ver") > 0 Тогда
			ДобавлятьПрефикс = Истина;
			ТекВерсия = СокрЛП(СтрЗаменить(ТекВерсия, "ver", ""));
		КонецЕсли;	
		МассивСтрок = _СтрРазделить(ТекВерсия, ".");
		Если МассивСтрок.Количество() = 4 Тогда
			МассивСтрок[3] = "1";
			МассивСтрок[2] = ДобавитьНулей(Число(МассивСтрок[2])+1, 3);
			ТекВерсия = _СтрСоединить(МассивСтрок, ".");
			КешВерсияОбработки = ТекВерсия;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат КешВерсияОбработки;
КонецФункции	

// Проверяет, запущен ли данный сеанс Vanessa Automation в режиме обучения
&НаКлиенте
Функция ЭтоРежимОбучения() Экспорт
	Возврат ЗначениеДополнительногоПараметра("ВЭтомСеансеИдётОбучение") = Истина; 
КонецФункции	 

// Добавлет нулей к строке слева
&НаКлиенте
Функция ДобавитьНулей(Парам, КоличествоСимволов) Экспорт
	Стр = СтрЗаменить(Формат(Парам, "ЧГ=; ЧН=0"), Символы.НПП, "");
	
	Пока СтрДлина(Стр) < КоличествоСимволов Цикл
		Стр = "0" + Стр;
	КонецЦикла;	
	
	Возврат Стр;
КонецФункции

// Убирает из строки подробные данные исключения и данные стека вызова
&НаКлиенте
Функция УбратьТехническиеДанныеИзСтроки(Знач Стр) Экспорт
	
	СтрокаПоиска = Локализовать("Технические данные");
	Поз = Найти(Стр, СтрокаПоиска);
	Если Поз > 0 Тогда
		Стр = СокрП(Лев(Стр, Поз - 1));
	КонецЕсли;
	
	Пока Найти(Стр, "}:") > 0 Цикл
		Поз = Найти(Стр, "}:");
		Сч = Поз;
		Нашли = Ложь;
		Пока Истина Цикл
			Сч = Сч - 1;
			Если Сч = 0 Тогда
				Прервать;
			КонецЕсли;	
			Символ = Сред(Стр, Сч, 1);
			Если Символ = "{" Тогда
				Нашли = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		
		Если Нашли Тогда
			Стр = Лев(Стр, Сч - 1) + СокрЛ(Сред(Стр, Поз + 2));
		КонецЕсли;	
		
	КонецЦикла;	 
	
	Возврат Стр;
	
КонецФункции	

// Проверяет является ли текущий клиент тестирования МобильныйКлиент, МобильноеПриложение, МобильныйКлиентАвтономный 
&НаКлиенте
Функция ЭтоМобильныйКлиентТестирования() Экспорт
	
	Если Найти(НРег(ТекущиеДанныеКлиентаТестирования().ТипКлиента), "мобильный") > 0 Тогда
		Возврат Истина;		
	КонецЕсли;
	
	Возврат Ложь;		
	
КонецФункции	

// Возвращает флаг ЗащитаОтОпасныхДействий
&НаКлиенте
Функция ЕстьЗащитаОтОпасныхДействий() Экспорт
	Возврат ЕстьЗащитаОтОпасныхДействий;
КонецФункции	

// Возвращаяет основную (мажорную) релизную версию для текущей версии Vanessa Automation
// Например, для версии 1.2.040.3 мажорной версией будет 1.2.040.1
&НаКлиенте
Функция МажорнаяРелизнаяВерсия() Экспорт
	
	НомерРелиза = ВерсияVanessaAutomation();
	НомерРелиза = СокрЛП(СтрЗаменить(НомерРелиза, "ver", ""));
	МассивСтрок = _СтрРазделить(НомерРелиза, ".");
	Если МассивСтрок.Количество() <> 4 Тогда
		ВызватьИсключение _СтрШаблон(Локализовать("Не получилось корректно определить номер версии Vanessa Automation по строке <%1>."), НомерРелиза);
	КонецЕсли;	 
	
	МассивСтрок[3] = "1";
	НомерРелиза = _СтрСоединить(МассивСтрок, ".");
	
	Возврат НомерРелиза; 
	
КонецФункции	

// Кодирует строку для работы с браузером
&НаКлиенте
Функция КодироватьСтрокуUrl(Стр) Экспорт
	Возврат КодироватьСтрокуСервер(Стр);
КонецФункции	

// Исправляет найденные опечатки в именах параметров, чтобы сохранить совместимость поведения
&НаКлиенте
Функция РеальноеИмяНастройкиVA(ИмяНастройки) Экспорт
	
   ДанныеПоЗамене = МодульОбщегоНазначенияVA().ЗаменыСинонимовПараметров();
   
   Для Каждого ТекДанныеПоЗамене Из ДанныеПоЗамене Цикл
	   Если НРег(ТекДанныеПоЗамене.ЧтоЗаменяем) = НРег(ИмяНастройки) Тогда
		   Возврат ТекДанныеПоЗамене.НаЧтоЗаменяем;
	   КонецЕсли;	
   КонецЦикла;	
   
   Возврат ИмяНастройки;
	
КонецФункции

//Существует проблема, что при синхронизации состояния формы после завершения серверного вызова, может затираться текст, который в данный момент редактирует пользователь.
//В тестах это может проявляться так, что тест ввёл значение в поле, но до того как он начал работать с другим полем данное значение было возвращено в предыдущее состояние.
//Данный метод меняет свойство "ОбновлениеТекстаРедактирования" у полей формы, чтобы избежать этого эффекта.
&НаКлиенте
Процедура ОтключитьОбновлениеТекстаРедактированияПолейВТекущемОкнеРасширение(ВызыватьИсключение) Экспорт
	
	АктивноеОкно = ПолучитьАктивноеОкноИзТестовоеПриложение();
	ЗаголовокАктивногоОкна = АктивноеОкно.Заголовок;
	
	Если ЭтоМодальныйДиалог(АктивноеОкно) Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(ЗаголовокАктивногоОкна) Тогда
		Возврат;
	ИначеЕсли ОкнаДляКоторыхНеНужноОтключатьОбновлениеТекстаРедактирования[НРег(ЗаголовокАктивногоОкна)] <> Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Найти(ЗаголовокАктивногоОкна, "(") = 0 И Найти(ЗаголовокАктивногоОкна, " от ") = 0 Тогда
		// Проверка на формы справочников и документов.
		// У справочников в скобках указано имя справочника.
		// У документов либо написано (создание) либо есть в заголовоке дата, и там написано " от "
		Возврат;
	КонецЕсли;
		
	ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_ДанныеТекущегоОкна");
	
	ФормаОбработки = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемаяФорма"),,"*VAExtension_ДанныеТекущегоОкна*",10);
	Если ФормаОбработки = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	РеквизитВыражениеВычислено = ФормаОбработки.НайтиОбъект(,,"ВыражениеВычислено");
	РеквизитЗначениеРезультат = ФормаОбработки.НайтиОбъект(,,"ЗначениеРезультат");
	РеквизитЗначениеВыражение = ФормаОбработки.НайтиОбъект(,,"ЗначениеВыражение");

	Если НЕ ВызыватьИсключение Тогда
		РеквизитВызыватьИсключение = ФормаОбработки.НайтиОбъект(,,"ВызыватьИсключение");
		//Снятие флага вызова исключения
		РеквизитВызыватьИсключение.УстановитьОтметку();
	КонецЕсли;	
	
	РеквизитЗначениеЗаголовокОкна = ФормаОбработки.НайтиОбъект(,,"ЗначениеЗаголовокОкна");
	РеквизитЗначениеЗаголовокОкна.ВвестиТекст(ЗаголовокАктивногоОкна);
	
	КнопкаУстановитьСвойствоОбновлениеТекстаРедактирования = ФормаОбработки.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"УстановитьСвойствоОбновлениеТекстаРедактирования");
	КнопкаУстановитьСвойствоОбновлениеТекстаРедактирования.Нажать();
	
	Попытка
		БылаОшибка = Истина;
		ОжиданиеОкончанияОбработки(БылаОшибка, РеквизитВыражениеВычислено);
		Если БылаОшибка Тогда
			СтрокаСообщения = Локализовать("Не получилось выполнить выражение в контексте текущей формы клиента тестирования.");
			ВызватьИсключение СтрокаСообщения;
		КонецЕсли;
		
		ПредставлениеДанных = ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитЗначениеРезультат);
		
		КнопкаЗакрытьФорму = ФормаОбработки.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ЗакрытьФорму");
		Попытка
			КнопкаЗакрытьФорму.Нажать();
		Исключение
			ЗаписатьЛогВЖРИнформация("ВычислениеВыражения", ОписаниеОшибки());
		КонецПопытки;
	Исключение
		ЗаписатьЛогВЖРИнформация("ЯВыполняюВыражениеВТекущемОкнеРасширение", ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПеременнымиКонтекста

&НаКлиенте
Функция ПодставитьПеременныеВСтроку(Знач Стр, ТолькоСтроки = Истина) Экспорт
	Стр = СтрЗаменить(Стр, "$КаталогПроекта$", Объект.КаталогПроекта);
	Стр = СтрЗаменить(Стр, "$КаталогИнструментов$", Объект.КаталогИнструментов);
	Стр = СтрЗаменить(Стр, "$КаталогФичи$", КаталогТекущегоИсполняемогоФичаФайла);
	Стр = СтрЗаменить(Стр, "$InstrPath$", Объект.КаталогИнструментов);
	Стр = СтрЗаменить(Стр, "$ProjectPath$", Объект.КаталогПроекта);
	Стр = СтрЗаменить(Стр, "$FeaturePath$", КаталогТекущегоИсполняемогоФичаФайла);
	
	Если ЗапоминатьЗначенияПеременыхПриПодстановкеВШаг Тогда
		Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		Если ТекИД_ШагаВМассиве <> Неопределено И ТекИД_ШагаВМассиве >=0 И ТекИД_ШагаВМассиве <= Шаги.Количество() - 1 Тогда
			ТекШаг = Шаги[ТекИД_ШагаВМассиве];
		Иначе
			ТекШаг = Неопределено;
		КонецЕсли;	
		Если ТекШаг = Неопределено ИЛИ НЕ ТекШаг.Свойство("ПеременныеДляСохраненияВШаг") Тогда
			ПеременныеДляСохраненияВШаг = Новый Массив;
		Иначе	
			ПеременныеДляСохраненияВШаг = ТекШаг.ПеременныеДляСохраненияВШаг;
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	Для Каждого Элем Из ОбъектКонтекст Цикл
		Если ТипЗнч(Элем.Значение) = глТипСтрока ИЛИ НЕ ТолькоСтроки Тогда
			//Для других типов это делать нельзя, т.к. шаги могут ожидать числа, строки, массивы и т.д., а тут идёт преобразование к строке.
			//Если убрать ограничение, то не будет работать передача переменных других типов, т.к. значения обернутые в $ будут сразу преобразовываться к строке
			//Т.е. перестанут работать такие шаги:
			//Тогда в переменной "$ЧисловаяПеременная$" будет находится значение типа "Число"
			Если ЗапоминатьЗначенияПеременыхПриПодстановкеВШаг Тогда
				СтароеЗначение = Стр;
			КонецЕсли;	 
			Стр = СтрЗаменить(Стр, "$" + Элем.Ключ + "$", Элем.Значение);
			Если ЗапоминатьЗначенияПеременыхПриПодстановкеВШаг Тогда
				Если Стр <> СтароеЗначение Тогда
					ПеременныеДляСохраненияВШаг.Добавить(Новый Структура("Имя,Значение,Тип",  Элем.Ключ, Элем.Значение, Ложь));
				КонецЕсли;	 
			КонецЕсли;	 
			
		КонецЕсли;	 	
	КонецЦикла;	 
	
	Для Каждого Элем Из ОбъектКонтекстСохраняемый Цикл
		Если ТипЗнч(Элем.Значение) = глТипСтрока ИЛИ НЕ ТолькоСтроки Тогда
			//Для других типов это делать нельзя, т.к. шаги могут ожидать числа, строки, массивы и т.д., а тут идёт преобразование к строке.
			Если ЗапоминатьЗначенияПеременыхПриПодстановкеВШаг Тогда
				СтароеЗначение = Стр;
			КонецЕсли;	 
			Стр = СтрЗаменить(Стр, "$$" + Элем.Ключ + "$$", Элем.Значение);
			Если ЗапоминатьЗначенияПеременыхПриПодстановкеВШаг Тогда
				Если Стр <> СтароеЗначение Тогда
					ПеременныеДляСохраненияВШаг.Добавить(Новый Структура("Имя,Значение,Тип",  Элем.Ключ, Элем.Значение, Истина));
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 	
	КонецЦикла;	 
	
	Если ЗапоминатьЗначенияПеременыхПриПодстановкеВШаг И ПеременныеДляСохраненияВШаг.Количество() > 0 Тогда
		Если ТекШаг <> Неопределено И НЕ ТекШаг.Свойство("ПеременныеДляСохраненияВШаг") Тогда
			ТекШаг.Вставить("ПеременныеДляСохраненияВШаг", ПеременныеДляСохраненияВШаг);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Стр; 
КонецФункции		 

// Устаревшее
&НаКлиенте
Процедура СохранитьЗначениеВКонтекст(ИмяПеременной, Значение) Экспорт
	Если НЕ ОбъектКонтекст.Свойство("СохраняемыеЗначения") Тогда
		ОбъектКонтекст.Вставить("СохраняемыеЗначения", Новый Соответствие);
	КонецЕсли;	 
	
	ОбъектКонтекст.СохраняемыеЗначения.Вставить(ИмяПеременной, Значение);
КонецПроцедуры

// Устаревшее
&НаКлиенте
Процедура СохранитьЗначениеВКонтекстСохраняемый(Знач ИмяПеременной, Значение) Экспорт
	Если НЕ ОбъектКонтекстСохраняемый.Свойство("СохраняемыеЗначения") Тогда
		ОбъектКонтекстСохраняемый.Вставить("СохраняемыеЗначения", Новый Соответствие);
	КонецЕсли;	 
	
	// уберём служебные символы
	Если Лев(ИмяПеременной, 2) = "$$" И Прав(ИмяПеременной, 2) = "$$" Тогда
		ИмяПеременной = Сред(ИмяПеременной, 3, СтрДлина(ИмяПеременной) - 4);
	КонецЕсли;	 
	
	Если Лев(ИмяПеременной, 1) = "$" И Прав(ИмяПеременной, 1) = "$" Тогда
		ИмяПеременной = Сред(ИмяПеременной, 2, СтрДлина(ИмяПеременной) - 2);
	КонецЕсли;	 
	
	ОбъектКонтекстСохраняемый.СохраняемыеЗначения.Вставить(ИмяПеременной, Значение);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСохраненноеЗначениеИзКонтекста(ИмяПеременной) Экспорт
	Попытка
		Если ОбъектКонтекст.Свойство(ИмяПеременной) Тогда
			Возврат ОбъектКонтекст[ИмяПеременной];
		КонецЕсли;	 
	Исключение
	КонецПопытки;
	
	Если НЕ ОбъектКонтекст.Свойство("СохраняемыеЗначения") Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат ОбъектКонтекст.СохраняемыеЗначения[ИмяПеременной];
КонецФункции

&НаКлиенте
Функция ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого(ИмяПеременной) Экспорт
	
	Попытка
		Если ОбъектКонтекстСохраняемый.Свойство(ИмяПеременной) Тогда
			Возврат ОбъектКонтекстСохраняемый[ИмяПеременной];
		КонецЕсли;	 
	Исключение
	КонецПопытки;
	
	Если НЕ ОбъектКонтекстСохраняемый.Свойство("СохраняемыеЗначения") Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат ОбъектКонтекстСохраняемый.СохраняемыеЗначения[ИмяПеременной];

КонецФункции

// заменяет в ячейках макета значения вида $Переменная$ на значение из Контекста
&НаКлиенте
Функция ВычислитьВМакетеЗначенияКонтекста(ТабДок) Экспорт
	Если ТабДок.НайтиТекст("$") = Неопределено Тогда
		Возврат ТабДок;
	КонецЕсли;	
	
	ТабДокНовый = СкопироватьТабличныйДокументСервер(ТабДок);
	
	Для НомерСтроки = 1 По ТабДокНовый.ВысотаТаблицы Цикл
		Для НомерКолонки = 1 По ТабДокНовый.ШиринаТаблицы Цикл
			ТекстЯчейки = ТабДокНовый.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).Текст;
			ТабДокНовый.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).Текст = ЗаменитьСлужебныеСимволыВВыраженииДляВычисления(ТекстЯчейки, Истина);
		КонецЦикла;	
	КонецЦикла;
	
	Возврат ТабДокНовый;
	
КонецФункции 

// Сохраняет значение в Контекст или в КонтекстСохраняемый
// ИмяПеременной - Строка
// Значение - ПроизвольноеЗначение
//
// Допустимо передавать значения вида:
// ИмяПеременной = будет сохранено в Контекст
// $ИмяПеременной$ = будет сохранено в Контекст
// $$ИмяПеременной$$ = будет сохранено в КонтекстСохраняемый
//
&НаКлиенте
Процедура СохранитьЗначениеПеременнойВКонтекст(Знач ИмяПеременной, Значение, ПоместитьВИнициатор = Истина, ВсегдаПропускатьПроверкуПерезаписи = Ложь) Экспорт
	
	СвойстваСохранения = СвойстваСохраненияПеременной(ИмяПеременной);
	ПроверитьЗапретПерезаписиКонтекста(СвойстваСохранения.ИмяПриведенное, ВсегдаПропускатьПроверкуПерезаписи);
	Если СвойстваСохранения.ЭтоКонтекст Тогда
		ОбъектКонтекст.Вставить(СвойстваСохранения.ИмяПриведенное, Значение);	
		
	ИначеЕсли СвойстваСохранения.ЭтоКонтекстСохраняемый Тогда
		ОбъектКонтекстСохраняемый.Вставить(СвойстваСохранения.ИмяПриведенное, Значение);	
		
	КонецЕсли;
	
	СохранятьЗначениеПеременной = СвойстваСохранения.ЭтоКонтекст ИЛИ СвойстваСохранения.ЭтоКонтекстСохраняемый;
	Если СохранятьЗначениеПеременной И ПоместитьВИнициатор Тогда
		ИнициаторДанных().ЗапомнитьЗначение(СвойстваСохранения.ИмяПриведенное, Значение, Ложь);		
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Функция СвойстваСохраненияПеременной(ИмяПеременной)
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтоКонтекст", Ложь);
	Результат.Вставить("ЭтоКонтекстСохраняемый", Ложь);
	Результат.Вставить("ИмяПриведенное", "");
	
	Результат.ЭтоКонтекстСохраняемый = Лев(ИмяПеременной, 2) = "$$" И Прав(ИмяПеременной, 2) = "$$";
	Если НЕ Результат.ЭтоКонтекстСохраняемый Тогда
		Результат.ЭтоКонтекст = ЛОЖЬ
			ИЛИ (Лев(ИмяПеременной, 1) = "$" И Прав(ИмяПеременной, 1) = "$")
			ИЛИ (Найти(ИмяПеременной, "$") = 0);		
	КонецЕсли; 
		
	Если Результат.ЭтоКонтекст ИЛИ Результат.ЭтоКонтекстСохраняемый Тогда
		ИмяПеременнойПриведенное = УбратьЗапрещенныеСимволыИзКлючаСтруктуры(ИмяПеременной);
		Попытка
			 Результат.Свойство(ИмяПеременнойПриведенное);
		Исключение
			ИмяПеременнойПриведенное = "_" + ИмяПеременнойПриведенное;
		КонецПопытки;
		
		Результат.ИмяПриведенное = ИмяПеременнойПриведенное;		
	КонецЕсли; 	
	
	Возврат Результат;
			
КонецФункции 

// Получает значение из Контекст или из КонтекстСохраняемый
// ИмяПеременной - Строка
// Значение - ПроизвольноеЗначение
//
// Допустимо передавать значения вида:
// ИмяПеременной = будет получено из Контекст
// $ИмяПеременной$ = будет получено из Контекст
// $$ИмяПеременной$$ = будет получено из КонтекстСохраняемый
&НаКлиенте
Функция ПолучитьЗначениеПеременнойИзКонтекста(Знач ИмяПеременной) Экспорт
	Если Найти(ИмяПеременной, "$") = 0 Тогда
		ИмяПеременной = УбратьЗапрещенныеСимволыИзКлючаСтруктуры(ИмяПеременной);
		Если Не ОбъектКонтекст.Свойство(ИмяПеременной) Тогда
				ВызватьИсключение ПодставитьПараметрыВСтроку(
				Локализовать("Переменная <%1> не найдена."),
				ИмяПеременной
			);
		КонецЕсли;	 
		
		Возврат ОбъектКонтекст[ИмяПеременной];
	КонецЕсли;	
	
	Возврат ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(ИмяПеременной); 
КонецФункции

// Пытается получить значения таблицы Gherkin из Контекста
// Оставлена для совместимости.
&НаКлиенте
Функция ПолучитьЗначенияТаблицыGherkinИзКонтекста(ТабПарам) Экспорт
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		Для Каждого Колонка Из СтрокаТабПарам Цикл
			СтрокаТабПарам[Колонка.Ключ] = ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(Колонка.Значение);
		КонецЦикла;	
	КонецЦикла;	
	Возврат ТабПарам;
КонецФункции	 

#КонецОбласти

#Область РаботаСФайлами

// Снимает скриншот и сохраняет его по указанному пути
&НаКлиенте
Процедура СделатьСкриншот(ДопПараметры, СтруктураШага = Неопределено) Экспорт    
	
	ЗаписатьЛогВЖРИнформация("СнятиеСкриншота.СделатьСкриншот", ЗаписатьОбъектJSON(ДопПараметры));

	Если ТипЗнч(СтруктураШага) = Тип("Структура") И 
		 СтруктураШага.СтрокаРеальнойПроцедуры = "ЯВставляюИзображениеИзФайлаВАвтоинструкцию" Тогда
		 
		ИмяФайла = СтруктураШага.ЗначенияПараметров[0].Значение.Значение;
		ФайлКартинка = ПолучитьФайлКартинки(ИмяФайла);
		ПутьКФайлу = СтрЗаменить(ФайлКартинка.ПолноеИмя, "\", "/");
		КопироватьФайлКомандаСистемы(ПутьКФайлу, ДопПараметры.ИмяФайла);
		
		Возврат;
	КонецЕсли;
	
	Если Объект.ДелатьСкриншотПриВозникновенииОшибки 
		И (ТекущиеДанныеКлиентаТестирования().ТипКлиента = "МобильныйКлиент" 
		Или ТекущиеДанныеКлиентаТестирования().ТипКлиента = "МобильныйКлиентАвтономный"
		Или ТекущиеДанныеКлиентаТестирования().ТипКлиента = "МобильноеПриложение") Тогда
		СделатьСкриншотМобильногоКлиента(ДопПараметры);	
	ИначеЕсли Объект.ИспользоватьВнешнююКомпонентуДляСкриншотов
		И Не ПустаяСтрока(ВнешняяКомпонентаДляСкриншотов) Тогда
		СделатьСкриншотКомпонента(ДопПараметры, СтруктураШага);
	Иначе
		СделатьСкриншотВнешнейПрограммой(ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученСнимокЭкранаОбработчикОповещения(ДвоичныеДанные, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	#Если НЕ ВебКлиент Тогда
	
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	ProcessId = ДополнительныеПараметры.ProcessId;
	ИмяПроцедуры = ДополнительныеПараметры.ИмяПроцедуры;
		
	Если ДвоичныеДанные = Неопределено Тогда
		Если Объект.ЗапускИзКоманднойСтроки Тогда
			ЗаписатьЛогВЖРОшибкаСервер("VanessaAutomation.ПолученСнимокЭкранаОбработчикОповещения",
				Локализовать("Не получилось снять скриншот с помощью внешней компоненты."));
			ПодключитьОбработчикОжидания(ИмяПроцедуры, 0.1, Истина);
			Возврат;
		Иначе	
			ВызватьИсключение ПодставитьПараметрыВСтроку(
				Локализовать("Не получилось снять скриншот с помощью внешней компоненты."));
		КонецЕсли;	 
	КонецЕсли;
		
	РезультатПрохождения = Неопределено;	
	РезультатПрохожденияСценария = Неопределено;
	ДополнительноПрикреплятьСкриншотКСценарию = Ложь;
	Если ЗначениеПараметровДляСнятияСкриншотов <> Неопределено Тогда
		Если ЗначениеПараметровДляСнятияСкриншотов.Свойство("РезультатПрохожденияТестовСценария") Тогда
			РезультатПрохождения = ЗначениеПараметровДляСнятияСкриншотов.РезультатПрохожденияТестовСценария;
		КонецЕсли;	 
		Если ЗначениеПараметровДляСнятияСкриншотов.Свойство("ПрикреплятьСкриншотКШагу") И ЗначениеПараметровДляСнятияСкриншотов.ПрикреплятьСкриншотКШагу Тогда
			ДополнительноПрикреплятьСкриншотКСценарию = Истина;
			Если ЗначениеПараметровДляСнятияСкриншотов.Свойство("РезультатПрохожденияШага") Тогда
				РезультатПрохождения = ЗначениеПараметровДляСнятияСкриншотов.РезультатПрохожденияШага;
			КонецЕсли;	 
			Если ЗначениеПараметровДляСнятияСкриншотов.Свойство("РезультатПрохожденияТестовСценария") Тогда
				РезультатПрохожденияСценария = ЗначениеПараметровДляСнятияСкриншотов.РезультатПрохожденияТестовСценария;
			КонецЕсли;	 
		КонецЕсли;	 
	Иначе	
		Попытка
			ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
			РезультатПрохождения = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		Исключение
			РезультатПрохождения = Неопределено;
		КонецПопытки;
	КонецЕсли;	 
	
	Если ТипЗнч(ИмяФайла) = Тип("Строка") Тогда
		ДвоичныеДанные.Записать(ИмяФайла);
		
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("ИмяФайла", ИмяФайла);
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			Если ДополнительныеПараметры.Свойство("ИмяСкриншотаДляОтчета") Тогда
				ДанныеФайла.Вставить("ИмяСкриншотаДляОтчета", ДополнительныеПараметры.ИмяСкриншотаДляОтчета);
			КонецЕсли;	 
		КонецЕсли;	 
		
		ДобавитьИмяФайлаСкриншотаКСтрокеТекущегоСценария(ДанныеФайла);
		Если РезультатПрохождения <> Неопределено Тогда
			ЗаписатьЛогВЖРИнформация("СнятиеСкриншота.ПолученСнимокЭкранаОбработчикОповещения.ДобавитьСкриншотКСценариюИлиШагу", ИмяФайла);
			ДобавитьСкриншотКСценариюИлиШагу(РезультатПрохождения, ДанныеФайла);
		КонецЕсли;	 
	Иначе	
		ИмяФайлаСкриншота = СформироватьИмяФайлаСкриншота();
		ДвоичныеДанные.Записать(ИмяФайлаСкриншота);
		
		Если  ДополнительныеПараметры.Свойство("ИмяСкриншотаДляОтчета")
			И ДополнительныеПараметры.ИмяСкриншотаДляОтчета <> Неопределено Тогда
			ДанныеФайла = Новый Структура;
			ДанныеФайла.Вставить("ИмяФайла", ИмяФайлаСкриншота);
			ДанныеФайла.Вставить("ЗаголовокВнутреннегоОкна", ДополнительныеПараметры.ИмяСкриншотаДляОтчета);
			ИмяФайла.Добавить(ДанныеФайла);
			ДобавитьИмяФайлаСкриншотаКСтрокеТекущегоСценария(ДанныеФайла);
		Иначе	
			ИмяФайла.Добавить(ИмяФайлаСкриншота);
			ДобавитьИмяФайлаСкриншотаКСтрокеТекущегоСценария(ИмяФайлаСкриншота);
		КонецЕсли;	 
		
		Если РезультатПрохождения <> Неопределено Тогда
			Для Каждого Элем Из ИмяФайла Цикл
				ЗаписатьЛогВЖРИнформация("СнятиеСкриншота.ПолученСнимокЭкранаОбработчикОповещения.ДобавитьСкриншотКСценариюИлиШагу", Элем);
				ДобавитьСкриншотКСценариюИлиШагу(РезультатПрохождения, Элем);
				
				Если ДополнительноПрикреплятьСкриншотКСценарию Тогда
					
					Если ТипЗнч(Элем) = Тип("Структура") Тогда
						
						ФайлСкриншота = Новый Файл(Элем.ИмяФайла);
						ДанныеСкриншотаДляСценария = СкопироватьСтруктуру(Элем);
						
					Иначе	
						
						ФайлСкриншота = Новый Файл(Элем);
						ДанныеСкриншотаДляСценария = Новый Структура;
						
					КонецЕсли;	 
					
					ИмяВременногоФайла = ПолучитьИмяВременногоФайла("png");
					ФайлИмяВременногоФайла = Новый Файл(ИмяВременногоФайла);
					
					ИмяФайлаСкриншота = СформироватьИмяФайлаСкриншота();
					ФайлИмяФайлаСкриншота = Новый Файл(ИмяФайлаСкриншота);
					НужноеИмяФайла = ФайлИмяВременногоФайла.Путь + ФайлИмяФайлаСкриншота.Имя;
					
					ДанныеСкриншотаДляСценария.Вставить("ИмяФайла", НужноеИмяФайла);
					ДанныеСкриншотаДляСценария.Вставить("ИсходноеИмяФайла", ФайлСкриншота.Имя);
					КопироватьФайлКомандаСистемы(ФайлСкриншота.ПолноеИмя, ДанныеСкриншотаДляСценария.ИмяФайла);
					
					ДобавитьСкриншотКСценариюИлиШагу(РезультатПрохожденияСценария, ДанныеСкриншотаДляСценария);
					
				КонецЕсли;	 
				
			КонецЦикла;	 
		КонецЕсли;	 
	КонецЕсли;	
	
	ПодключитьОбработчикОжидания(ИмяПроцедуры, 0.1, Истина);
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеКлиентаТестированияПоProcessId(PIDКлиентаТестирования)
	
	Для Каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
		Если СтрокаДанныеКлиентовТестирования.PIDКлиентаТестирования = PIDКлиентаТестирования Тогда
			Возврат СтрокаДанныеКлиентовТестирования;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Возврат Неопределено;
	
КонецФункции	 

&НаКлиенте
Процедура ПолученСнимокОкна(ДвоичныеДанные, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	#Если НЕ ВебКлиент Тогда
	
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	ИмяФайлаСкриншота = СформироватьИмяФайлаСкриншота();
	
	Если ДвоичныеДанные = Неопределено Тогда
		Если Объект.ЗапускИзКоманднойСтроки Тогда
			ЗаписатьЛогВЖРОшибкаСервер("VanessaAutomation.ПолученСнимокОкна", Локализовать("Не получилось снять скриншот с помощью внешней компоненты."));
			СнятьСкриншотОкнаАсинхронно(ДополнительныеПараметры);
			Возврат;
		Иначе	
			ВызватьИсключение ПодставитьПараметрыВСтроку(
				Локализовать("Не получилось снять скриншот с помощью внешней компоненты."));
		КонецЕсли;	 
	КонецЕсли;	 
	
	ДвоичныеДанные.Записать(ИмяФайлаСкриншота);
	
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("ИмяФайла",ИмяФайлаСкриншота);
	Если ДополнительныеПараметры.Свойство("ДанныеОкна") Тогда
		Попытка
			ДанныеФайла.Вставить("ЗаголовокВнутреннегоОкна",ДополнительныеПараметры.ДанныеОкна.Title);
		Исключение
			
		КонецПопытки;
	КонецЕсли;	 
	Если ДополнительныеПараметры.Свойство("ProcessId") Тогда
		ProcessId = ДополнительныеПараметры.ProcessId;
		Если ProcessId <> Неопределено И ProcessId > 0 Тогда
			ДанныыеКлиентаТестирования = ДанныеКлиентаТестированияПоProcessId(ProcessId);
			Если ДанныыеКлиентаТестирования <> Неопределено Тогда
				ДанныеФайла.Вставить("ИмяКлиентаТестирования",ДанныыеКлиентаТестирования.Имя);
			Иначе
				Попытка
					PIDЭтогоСеансаЧисло = Число(PIDЭтогоСеанса);
				Исключение
					PIDЭтогоСеансаЧисло = 0;
				КонецПопытки;
				Если (ProcessId = PIDЭтогоСеансаЧисло) И (PIDЭтогоСеансаЧисло > 0) Тогда
					ДанныеФайла.Вставить("ИмяКлиентаТестирования","TestManager");
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	ИмяФайла.Добавить(ДанныеФайла);
	ДобавитьИмяФайлаСкриншотаКСтрокеТекущегоСценария(ДанныеФайла);
	
	ЗаписатьЛогВЖРИнформация("СнятиеСкриншота.ПолученСнимокОкна", ЗаписатьОбъектJSON(ДанныеФайла));
	
	ПрикреплятьСкриншотКШагу = Истина;
	Если ПрикреплятьСкриншотКШагу Тогда
		ДанныеФайла2 = Новый Структура;
		ИмяФайлаСкриншота2 = ПолучитьИмяВременногоФайла("png");
		КопироватьФайлКомандаСистемы(ИмяФайлаСкриншота, ИмяФайлаСкриншота2);
		ДанныеФайла2.Вставить("ИмяФайла", ИмяФайлаСкриншота2);
		Если ДанныеФайла.Свойство("ЗаголовокВнутреннегоОкна") Тогда
			ДанныеФайла2.Вставить("ЗаголовокВнутреннегоОкна", ДанныеФайла.ЗаголовокВнутреннегоОкна);
		КонецЕсли;	 
		Если ДанныеФайла.Свойство("ИмяКлиентаТестирования") Тогда
			ДанныеФайла2.Вставить("ИмяКлиентаТестирования", ДанныеФайла.ИмяКлиентаТестирования);
		КонецЕсли;	 
		ДанныеФайла2.Вставить("ПрикреплятьСкриншотКШагу",ПрикреплятьСкриншотКШагу);
		
		ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		РезультатПрохожденияТестовШагов = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
		Если РезультатПрохожденияТестовШагов.Количество() > 0 Тогда
			РезультатПрохожденияШага = РезультатПрохожденияТестовШагов[РезультатПрохожденияТестовШагов.Количество() - 1];
			ДобавитьСкриншотКСценариюИлиШагу(РезультатПрохожденияШага, ДанныеФайла2);
		КонецЕсли;	 
	КонецЕсли;	 
	
	СнятьСкриншотОкнаАсинхронно(ДополнительныеПараметры);
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьСкриншотОкнаАсинхронно(ДополнительныеПараметры)
	ИдОкнаДляСкриншотов = ИдОкнаДляСкриншотов + 1;
	Если ИдОкнаДляСкриншотов > (ОкнаДляСкриншотов.Количество() - 1) Тогда
		РезультатПрохожденияТестовСценария = ЗначениеПараметровДляСнятияСкриншотов.РезультатПрохожденияТестовСценария;
		Для Каждого Элем Из ДополнительныеПараметры.ИмяФайла Цикл
			ЗаписатьЛогВЖРИнформация("СнятиеСкриншота.СнятьСкриншотОкнаАсинхронно.ДобавитьСкриншотКСценариюИлиШагу", Элем);
			ДобавитьСкриншотКСценариюИлиШагу(РезультатПрохожденияТестовСценария, Элем);
		КонецЦикла;	 
		
		ПодключитьОбработчикОжидания(ДополнительныеПараметры.ИмяПроцедуры, 0.1, Истина);
		Возврат;
	КонецЕсли;	
	
	ДополнительныеПараметры.Вставить("ДанныеОкна",ОкнаДляСкриншотов[ИдОкнаДляСкриншотов]);
	
	ЗаписатьЛогВЖРИнформация("СнятиеСкриншота.СнятьСкриншотОкнаАсинхронно.НачатьВызовПолучитьСнимокОкна", ЗаписатьОбъектJSON(ДополнительныеПараметры));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученСнимокОкна", ЭтаФорма, ДополнительныеПараметры);
	ВнешняяКомпонентаДляСкриншотов.НачатьВызовПолучитьСнимокОкна(ОписаниеОповещения,
		ОкнаДляСкриншотов[ИдОкнаДляСкриншотов].window);
	
КонецПроцедуры 

&НаКлиенте
Функция ОкноДанногоТипаНеДляСнятияСкриншотов(ТипыОкон)
	
	Если ТипЗнч(ТипыОкон) = Тип("Массив") Тогда
		Для Каждого Элем Из ТипыОкон Цикл
			Если НРег(Элем) = НРег("UTILITY") Тогда
				Возврат Истина;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	

&НаКлиенте
Процедура ПолученСписокОконПроцессаОбработчикОповещения(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	ДанныеОкон = ПрочитатьСтрокуJSON(РезультатВызова);
	ОкнаДляСкриншотов = Новый Массив;
	Если ТипЗнч(ДанныеОкон) = Тип("Массив") Тогда
		Для каждого ДанныеОкна из ДанныеОкон Цикл
			Если ЭтоОкноНеДляСнятияСкриншотов(ДанныеОкна.Class) Тогда
				ЗаписатьЛогВЖРИнформация("СнятиеСкриншота.ОкноПропущено.Class", ЗаписатьОбъектJSON(ДанныеОкна));
				Продолжить;
			КонецЕсли;
			
			Если ДанныеОкна.Свойство("Types") И ОкноДанногоТипаНеДляСнятияСкриншотов(ДанныеОкна.Types) Тогда
				ЗаписатьЛогВЖРИнформация("СнятиеСкриншота.ОкноПропущено.Types", ЗаписатьОбъектJSON(ДанныеОкна));
				Продолжить;
			КонецЕсли;	
			
			ОкнаДляСкриншотов.Добавить(ДанныеОкна);
		КонецЦикла;
		
		ЗаписатьЛогВЖРИнформация("СнятиеСкриншота.ПолученСписокОконПроцессаОбработчикОповещения",
			"КоличествоОкон=" + ОкнаДляСкриншотов.Количество());
		
		Если ОкнаДляСкриншотов.Количество() = 0 Тогда
			ПодключитьОбработчикОжидания(ДополнительныеПараметры.ИмяПроцедуры, 0.1, Истина);
			Возврат;
		КонецЕсли;	
		
		ИдОкнаДляСкриншотов = -1;
		СнятьСкриншотОкнаАсинхронно(ДополнительныеПараметры);
	Иначе
		ПодключитьОбработчикОжидания(ДополнительныеПараметры.ИмяПроцедуры, 0.1, Истина);
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура СделатьСкриншотКомпонента(ПараметрыСкриншотов, СтруктураШага = Неопределено)
	
	ИмяФайла = ПараметрыСкриншотов.ИмяФайла;
	
	СтрокаРодитель = Неопределено;
	Если ТипЗнч(СтруктураШага) = Тип("Структура") Тогда 
		НужнаяСтрока = Неопределено;
		НайтиСтрокуДереваПоИдСтроки(СтруктураШага.ИдСтроки, Объект.ДеревоТестов.ПолучитьЭлементы(), НужнаяСтрока);
		СтрокаРодитель = НужнаяСтрока.ПолучитьРодителя();
	КонецЕсли;
	
	МассивКомментариевШага = Неопределено;
	Если ТипЗнч(СтруктураШага) = Тип("Структура") 
		И СтруктураШага.Свойство("МассивКомментариевШага") 
			И ТипЗнч(СтруктураШага.МассивКомментариевШага) = Тип("Массив") Тогда
		
		МассивКомментариевШага = СтруктураШага.МассивКомментариевШага;  
		
	ИначеЕсли СтрокаРодитель <> Неопределено Тогда   
		
		// Для директивы #[autodoc.groupsteps]: Если #[autodoc.screenarea] расположен над ней.
		Если ТипЗнч(СтрокаРодитель.ПроизвольныеЗначения) = Тип("Структура") 
			И СтрокаРодитель.ПроизвольныеЗначения.Свойство("МассивКомментариевШага") 
				И ТипЗнч(СтрокаРодитель.ПроизвольныеЗначения.МассивКомментариевШага) = Тип("Массив") Тогда
				
			МассивКомментариевШага = СтрокаРодитель.ПроизвольныеЗначения.МассивКомментариевШага; 
			
		КонецЕсли;		
		
	КонецЕсли;	
	
	// Если была передана директива #[autodoc.screenarea], то снимок делаем по переданным координатам.
	КоординатыОбласти = Новый Массив;
	Если ТипЗнч(МассивКомментариевШага) = Тип("Массив") Тогда
		
		ДирективаСнимкаПоОбласти = "[autodoc.screenarea]";
		
		Для Каждого КомментарийШага Из МассивКомментариевШага Цикл
			Поз = Найти(НРег(КомментарийШага), ДирективаСнимкаПоОбласти); 
			Если Поз > 0 Тогда
				СлужебнаяСтрокаСнимкаПоОбласти = СокрЛП(Сред(КомментарийШага, Поз + СтрДлина(ДирективаСнимкаПоОбласти)));
				КоординатыОбласти = _СтрРазделить(СлужебнаяСтрокаСнимкаПоОбласти, ",", Ложь);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЭтоСкриншотБраузера = Ложь;
	Если ТипЗнч(МассивКомментариевШага) = Тип("Массив") Тогда
		
		ДирективаСнимкаПоОбласти = "[autodoc.screenareabrowser]";
		
		Для Каждого КомментарийШага Из МассивКомментариевШага Цикл
			Поз = Найти(НРег(КомментарийШага), ДирективаСнимкаПоОбласти); 
			Если Поз > 0 Тогда
				СлужебнаяСтрокаСнимкаПоОбласти = СокрЛП(Сред(КомментарийШага, Поз + СтрДлина(ДирективаСнимкаПоОбласти)));
				КоординатыОбласти = _СтрРазделить(СлужебнаяСтрокаСнимкаПоОбласти, ",", Ложь);
				ЭтоСкриншотБраузера = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	
	Режим = Неопределено;
	ProcessId = Неопределено;
	ИмяПроцедуры = Неопределено;
	СпособСнятияСкриншотовВнешнейКомпонентой = Неопределено;
	ИмяСкриншотаДляОтчета = Неопределено;
	ПараметрыСкриншотов.Свойство("Режим",Режим);
	ПараметрыСкриншотов.Свойство("ProcessId",ProcessId);
	ПараметрыСкриншотов.Свойство("ИмяПроцедуры",ИмяПроцедуры);
	ПараметрыСкриншотов.Свойство("СпособСнятияСкриншотовВнешнейКомпонентой",СпособСнятияСкриншотовВнешнейКомпонентой);
	ПараметрыСкриншотов.Свойство("ИмяСкриншотаДляОтчета",ИмяСкриншотаДляОтчета);
	
	ЗаполнитьПараметрыДляСнятияСкриншотов(ПараметрыСкриншотов);
		
	Если СпособСнятияСкриншотовВнешнейКомпонентой = Неопределено Тогда
		СпособСнятияСкриншотовВнешнейКомпонентой = Объект.СпособСнятияСкриншотовВнешнейКомпонентой;
	КонецЕсли;
	
	Если ПараметрыСкриншотов.Свойство("ТолькоПроцессКлиентаТестирования") И ПараметрыСкриншотов.ТолькоПроцессКлиентаТестирования Тогда
		ПараметрыСкриншотов.Вставить("СпособСнятияСкриншотовВнешнейКомпонентой", 1); //используется, когда идёт снятие скриншотов после того, как был закрыт модальный диалог
	КонецЕсли;
	
	Если ВнешняяКомпонентаДляСкриншотов = Неопределено Тогда
		ЗаписатьЛогВЖРОшибка("VanessaAutomation.СделатьСкриншотКомпонента", "Комонента VanessaExt не была корректно установлена.");
		Если ИмяПроцедуры <> Неопределено Тогда
			ПодключитьОбработчикОжидания(ИмяПроцедуры, 0.1, Истина);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если Режим = "Проверка" Тогда
		// Снимаем область экрана.
		ДвоичныеДанные = ВнешняяКомпонентаДляСкриншотов.ПолучитьСнимокЭкрана(0);
		Если ДвоичныеДанные = Неопределено Тогда
			ВызватьИсключение ПодставитьПараметрыВСтроку(
				Локализовать("Не получилось снять скриншот с помощью внешней компоненты."));
		КонецЕсли;	 
		
		Если ТипЗнч(ИмяФайла) = Тип("Строка") Тогда
			ДвоичныеДанные.Записать(ИмяФайла);
			ДобавитьИмяФайлаСкриншотаКСтрокеТекущегоСценария(ИмяФайла);
		Иначе	
			ИмяФайлаСкриншота = СформироватьИмяФайлаСкриншота();
			ДвоичныеДанные.Записать(ИмяФайлаСкриншота);
			ИмяФайла.Добавить(ИмяФайлаСкриншота);
			ДобавитьИмяФайлаСкриншотаКСтрокеТекущегоСценария(ИмяФайлаСкриншота);
		КонецЕсли;
		
	ИначеЕсли СпособСнятияСкриншотовВнешнейКомпонентой = 0 Тогда
		
		СкриншотКомпонентойВсегоЭкрана(ИмяПроцедуры, ИмяФайла, ИмяСкриншотаДляОтчета, Режим, ProcessId, КоординатыОбласти);
		Если ЭтоСкриншотБраузера Тогда
			СнимокЭкранаБраузера(ИмяФайла, КоординатыОбласти);
		КонецЕсли;
		
	ИначеЕсли СпособСнятияСкриншотовВнешнейКомпонентой = 1 Тогда
		Если ProcessId = Неопределено Тогда
			ProcessId = PIDТекущегоКлиентаТестирования;
		КонецЕсли;	 
		
		Если ProcessId = Неопределено Тогда
			СкриншотКомпонентойВсегоЭкрана(ИмяПроцедуры, ИмяФайла, ИмяСкриншотаДляОтчета, Режим, ProcessId);
			Возврат;
		КонецЕсли;	 
		
		Если ИмяПроцедуры = Неопределено Тогда
			ЗаписатьЛогВЖРИнформация("СнятиеСкриншота.ПолучитьСнимокПроцесса", "ProcessId=" + ProcessId);
			ДвоичныеДанные = ВнешняяКомпонентаДляСкриншотов.ПолучитьСнимокПроцесса(ProcessId);
			Если ДвоичныеДанные = Неопределено Тогда
				ЗаписатьЛогВЖРИнформация("СнятиеСкриншота.ПолучитьСнимокЭкрана", "");
				ДвоичныеДанные = ВнешняяКомпонентаДляСкриншотов.ПолучитьСнимокЭкрана(0);
			КонецЕсли;	 
			
			Если ТипЗнч(ИмяФайла) = Тип("Строка") Тогда
				ДвоичныеДанные.Записать(ИмяФайла);
				ДобавитьИмяФайлаСкриншотаКСтрокеТекущегоСценария(ИмяФайла);
			Иначе	
				ИмяФайлаСкриншота = СформироватьИмяФайлаСкриншота();
				ДвоичныеДанные.Записать(ИмяФайлаСкриншота);
				ИмяФайла.Добавить(ИмяФайлаСкриншота);
				ДобавитьИмяФайлаСкриншотаКСтрокеТекущегоСценария(ИмяФайлаСкриншота);
			КонецЕсли;	 
			
		Иначе	
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ИмяФайла",ИмяФайла);
			ДопПараметры.Вставить("Режим",Режим);
			ДопПараметры.Вставить("ProcessId",ProcessId);
			ДопПараметры.Вставить("ИмяПроцедуры",ИмяПроцедуры);
			ЗаписатьЛогВЖРИнформация("СнятиеСкриншота.ТекущееОкноКлиентаТестирования", ЗаписатьОбъектJSON(ДопПараметры));
			ОписаниеОповещения = Новый ОписаниеОповещения("ПолученСнимокЭкранаОбработчикОповещения", ЭтаФорма, ДопПараметры);
			ВнешняяКомпонентаДляСкриншотов.НачатьВызовПолучитьСнимокПроцесса(ОписаниеОповещения, ProcessId);
		КонецЕсли;	 
		
	ИначеЕсли СпособСнятияСкриншотовВнешнейКомпонентой = 2 Тогда
		Если ProcessId = Неопределено Тогда
			PIDТекущегоКлиентаТестирования = PIDТекущегоКлиентаТестирования();
			ProcessId = PIDТекущегоКлиентаТестирования;
		КонецЕсли;	 
		
		Если (ProcessId = Неопределено ИЛИ ProcessId = 0) И ИмяПроцедуры <> Неопределено Тогда
			СкриншотКомпонентойВсегоЭкрана(ИмяПроцедуры, ИмяФайла, ИмяСкриншотаДляОтчета, Режим, ProcessId);
			Возврат;
		КонецЕсли;	 
		
		Если ИмяПроцедуры = Неопределено Тогда
			ЗаписатьЛогВЖРИнформация("СнятиеСкриншота.ПолучитьСписокОкон", "ProcessId=" + ProcessId);
			РезультатВызова = ВнешняяКомпонентаДляСкриншотов.ПолучитьСписокОкон(ProcessId);
			ДанныеОкон = ПрочитатьСтрокуJSON(РезультатВызова);
			Если ТипЗнч(ДанныеОкон) = Тип("Массив") Тогда
				
				ОкнаДляСкриншотов = Новый Массив;
				
				Для каждого ДанныеОкна из ДанныеОкон Цикл
					Если ЭтоОкноНеДляСнятияСкриншотов(ДанныеОкна.Class) Тогда
						Продолжить;
					КонецЕсли;	 
					
					ОкнаДляСкриншотов.Добавить(ДанныеОкна);
				КонецЦикла;
				
				ЗаписатьЛогВЖРИнформация("СписокПроцессовСкриншоты", _СтрШаблон("Найдено <%1> окон для снятия скриншотов.", ОкнаДляСкриншотов.Количество()));
				
				Для каждого ДанныеОкна из ОкнаДляСкриншотов Цикл
					
					ЗаписатьЛогВЖРИнформация("СнятиеСкриншота.ПолучитьСнимокОкна", ЗаписатьОбъектJSON(ДанныеОкна));
					ДвоичныеДанные = ВнешняяКомпонентаДляСкриншотов.ПолучитьСнимокОкна(ДанныеОкна.window);
					
					Если ДвоичныеДанные = Неопределено Тогда
						Если Объект.ЗапускИзКоманднойСтроки Тогда
							ЗаписатьЛогВЖРОшибкаСервер("VanessaAutomation.СделатьСкриншотКомпонента",
								Локализовать("Не получилось снять скриншот с помощью внешней компоненты."));
							Возврат;
						Иначе	
							ВызватьИсключение ПодставитьПараметрыВСтроку(
								Локализовать("Не получилось снять скриншот с помощью внешней компоненты."));
						КонецЕсли;	 
					КонецЕсли;	 
					Если ТипЗнч(ИмяФайла) = Тип("Строка") Тогда
						ДвоичныеДанные.Записать(ИмяФайла);
					Иначе	
						ИмяФайлаСкриншота = СформироватьИмяФайлаСкриншота();
						ДвоичныеДанные.Записать(ИмяФайлаСкриншота);
						ИмяФайла.Добавить(ИмяФайлаСкриншота);
					КонецЕсли;	 
				КонецЦикла;
				
			КонецЕсли;

		Иначе	
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ИмяФайла",ИмяФайла);
			ДопПараметры.Вставить("Режим",Режим);
			ДопПараметры.Вставить("ProcessId",ProcessId);
			ДопПараметры.Вставить("ИмяПроцедуры",ИмяПроцедуры);
			ЗаписатьЛогВЖРИнформация("СнятиеСкриншота.НачатьВызовПолучитьСписокОкон", ЗаписатьОбъектJSON(ДопПараметры));
			ОписаниеОповещения = Новый ОписаниеОповещения("ПолученСписокОконПроцессаОбработчикОповещения", ЭтаФорма, ДопПараметры);
			ВнешняяКомпонентаДляСкриншотов.НачатьВызовПолучитьСписокОкон(ОписаниеОповещения, ProcessId);
		КонецЕсли;
		
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Неизвестный вариант снятия скриншота: <%1>."),
			СпособСнятияСкриншотовВнешнейКомпонентой
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотВнешнейПрограммой(ДопПараметры)
	#Если НЕ ВебКлиент Тогда
	
	ИмяФайла = ДопПараметры.ИмяФайла;
	
	Если ТипЗнч(ИмяФайла) = Тип("Строка") Тогда
		ИмяФайлаСкриншота = ИмяФайла;
	Иначе	
		ИмяФайлаСкриншота = СформироватьИмяФайлаСкриншота();
		ИмяФайла.Добавить(ИмяФайлаСкриншота);
	КонецЕсли;	 
	
	Если ПустаяСтрока(Объект.КомандаСделатьСкриншот) Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не указана команада для выполнения скриншотов. Например <%1>"),
			"""C:\Program Files (x86)\IrfanView\i_view32.exe"" /capture=1 /convert="
		);
	КонецЕсли;
	
	Если ЭтоLinux Тогда
	Иначе
		ИмяФайлаСкриншота = СтрЗаменить(ИмяФайлаСкриншота, "/", "\");
	КонецЕсли;	 
	
	Команда = Объект.КомандаСделатьСкриншот + " """ + ИмяФайлаСкриншота + """";
	Попытка
		Если ЭтоLinux Тогда
			КомандаСистемы(Команда);
		Иначе
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
		КонецЕсли;
		Отладка("Команда создания скриншота=" + Команда);

		КоличествоПопыток = 0;
		МаксКоличествоПопыток = 5;
		Пока Истина Цикл
			Если ФайлСуществуетКомандаСистемы(ИмяФайлаСкриншота) Тогда
				Прервать;
			КонецЕсли;
			sleep(1);
			КоличествоПопыток = КоличествоПопыток + 1;
			Если КоличествоПопыток > МаксКоличествоПопыток Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПрикреплятьСкриншотКШагу = Истина;
		
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("ИмяФайла", ИмяФайлаСкриншота);
		Если ДопПараметры.Свойство("ИмяСкриншотаДляОтчета") Тогда
			ДанныеФайла.Вставить("ИмяСкриншотаДляОтчета", ДопПараметры.ИмяСкриншотаДляОтчета);
		КонецЕсли;	 
		ДанныеФайла.Вставить("ПрикреплятьСкриншотКШагу",ПрикреплятьСкриншотКШагу);
		
		ДобавитьИмяФайлаСкриншотаКСтрокеТекущегоСценария(ДанныеФайла);
		Если ПрикреплятьСкриншотКШагу Тогда
			ДанныеФайла = Новый Структура;
			ИмяФайлаСкриншота2 = ПолучитьИмяВременногоФайла("png");
			КопироватьФайлКомандаСистемы(ИмяФайлаСкриншота, ИмяФайлаСкриншота2);
			ДанныеФайла.Вставить("ИмяФайла", ИмяФайлаСкриншота2);
			Если ДопПараметры.Свойство("ИмяСкриншотаДляОтчета") Тогда
				ДанныеФайла.Вставить("ИмяСкриншотаДляОтчета", ДопПараметры.ИмяСкриншотаДляОтчета);
			КонецЕсли;	 
			ДанныеФайла.Вставить("ПрикреплятьСкриншотКШагу",ПрикреплятьСкриншотКШагу);
			
			ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
			РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
			РезультатПрохожденияТестовШагов = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
			РезультатПрохожденияШага = РезультатПрохожденияТестовШагов[РезультатПрохожденияТестовШагов.Количество() - 1];
			ДобавитьСкриншотКСценариюИлиШагу(РезультатПрохожденияШага, ДанныеФайла);
		КонецЕсли;	 
		
	Исключение
		СообщитьПользователю (ПодставитьПараметрыВСтроку(
			Локализовать("Ошибка создания скриншота:%1 команда:%2"),
			ОписаниеОшибки(),
			Команда
		));
	КонецПопытки;
	
	Если ДопПараметры.Свойство("ИмяПроцедуры") Тогда
		Если НЕ ПустаяСтрока(ДопПараметры.ИмяПроцедуры) Тогда
			ПодключитьОбработчикОжидания(ДопПараметры.ИмяПроцедуры, 0.1, Истина);
		КонецЕсли;	 
	КонецЕсли;	 
	
	#КонецЕсли
КонецПроцедуры

// Возвращает макет по переданному имени файла
&НаКлиенте
Функция ПолучитьМакетИзФайла(ИмяФайла, Расширение = Неопределено) Экспорт
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	Возврат ПолучитьТабличныйДокументНаСервере(АдресВременногоХранилища, Расширение);
КонецФункции	 

// Убирает из строки символы, запрещенные к использованию в файловой системе.
&НаКлиенте
Функция УбратьВсеЗапрещенныеСимволыИзИмениФайла(Знач Стр) Экспорт
	Стр = СтрЗаменить(Стр, "@", "");
	Стр = СтрЗаменить(Стр, "\", "");
	Стр = СтрЗаменить(Стр, "/", "");
	Стр = СтрЗаменить(Стр, ":", "");
	Стр = СтрЗаменить(Стр, "*", "");
	Стр = СтрЗаменить(Стр, "?", "");
	Стр = СтрЗаменить(Стр, """", "");
	Стр = СтрЗаменить(Стр, "<", "");
	Стр = СтрЗаменить(Стр, ">", "");
	Стр = СтрЗаменить(Стр, "|", "");
	Стр = СтрЗаменить(Стр, "+", "");
	Стр = СтрЗаменить(Стр, Символы.НПП, "");

	Стр = СтрЗаменить(Стр, "%", "");
	Стр = СтрЗаменить(Стр, "!", "");

	Возврат Стр;
КонецФункции

&НаКлиенте
Процедура УдалитьФайлыКомандаСистемы(Знач ИмяФайла) Экспорт
	#Если НЕ ВебКлиент Тогда
		
	Если НЕ ЗапрещеныСинхронныеВызовы Тогда
		УдалитьФайлы(ИмяФайла);
	ИначеЕсли ЗапрещеныСинхронныеВызовы И ВозможнаОптимизацияРаботыСФайлами Тогда
		УдалитьФайлыСервер(ИмяФайла);
	Иначе
		Если ЭтоLinux Тогда 
			ИмяФайла = СтрЗаменить(ИмяФайла, "\", "/");
			КомандаСистемы("rm -Rf """ + ИмяФайла + """");
		Иначе 
			ИмяФайла = СтрЗаменить(ИмяФайла, "/", "\");
			ВыполнитьКомандуОСБезПоказаЧерногоОкна("DEL /Q """ + ИмяФайла + """");
		КонецЕсли;
	КонецЕсли;
	
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКаталогКомандаСистемы(Знач ИмяФайла) Экспорт
	#Если НЕ ВебКлиент Тогда
	
	Если ЗапрещеныСинхронныеВызовы Тогда
		Если ЭтоLinux Тогда 
			ИмяФайла = СтрЗаменить(ИмяФайла, "\", "/");
			КомандаСистемы("rm -Rf """ + ИмяФайла + """");
		Иначе 
			
			ИмяФайла = СтрЗаменить(ИмяФайла, "/", "\");
			ВыполнитьКомандуОСБезПоказаЧерногоОкна("RD /S /Q """ + ИмяФайла + """");
		КонецЕсли;

	Иначе
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;	 
	
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьФайлКомандаСистемы(Знач Откуда, Знач Куда) Экспорт
	#Если НЕ ВебКлиент Тогда
	
	Если ЗапрещеныСинхронныеВызовы Тогда
		
		Если ЭтоLinux Тогда 
			Откуда = СтрЗаменить(Откуда, "\", "/");
			Куда   = СтрЗаменить(Куда, "\", "/");
			КомандаСистемы("mv """ + Откуда + """ """ + Куда + """");
		Иначе 
			
			Откуда = СтрЗаменить(Откуда, "/", "\");
			Куда   = СтрЗаменить(Куда, "/", "\");
			ВыполнитьКомандуОСБезПоказаЧерногоОкна("MOVE """ + Откуда + """ """ + Куда + """");
		КонецЕсли;
	Иначе
		ПереместитьФайл(Откуда, Куда);
	КонецЕсли;	 
	
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Функция ВремяИзмененияФайлаКомандаСистемы(ИмяФайла) Экспорт
	#Если НЕ ВебКлиент Тогда
		
	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат Дата(1, 1, 1, 0, 0, 0); 
	КонецЕсли;	 	
		
	Если НЕ ЗапрещеныСинхронныеВызовы Тогда
		Файл = Новый Файл(ИмяФайла);
		Возврат Файл.ПолучитьВремяИзменения();
	ИначеЕсли ЗапрещеныСинхронныеВызовы И ВозможнаОптимизацияРаботыСФайлами Тогда
		Возврат ФайлВремяИзмененияСервер(ИмяФайла); 
	Иначе
		Файл = Новый Файл(ИмяФайла);
		
		ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
		Если ЭтоLinux Тогда
			Команда = "date +""%d.%m.%Y %H:%M:%S"" -r " + Файл.ПолноеИмя + " > " + ИмяФайлаЛога;
			ВыполнитьКомандуОС(Команда);
		Иначе
			Путь = Файл.Путь;
			Если Прав(Путь, 1) = "\" ИЛИ Прав(Путь, 1) = "/" Тогда
				Путь = Лев(Путь, СтрДлина(Путь) - 1);
			КонецЕсли;	 
			ТолькоИмяФайла = Файл.Имя;
			Команда = "forfiles /p """ + Путь + """ /m """ + ТолькоИмяФайла + """ /c ""cmd /c echo @fdate @ftime"" > """ + ИмяФайлаЛога + """";
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
		КонецЕсли;
		
		Попытка
			Текст = Новый ЧтениеТекста;
			Текст.Открыть(ИмяФайлаЛога, "UTF-8");
			ТекстЛога = СокрЛП(Текст.Прочитать());
			Текст.Закрыть();
		Исключение
			Возврат Дата(1, 1, 1, 0, 0, 0); 
		КонецПопытки;

		Попытка
			Возврат ДатаИзСтрокиКомандыСистемы(ТекстЛога); 
		Исключение
			Возврат Дата(1, 1, 1, 0, 0, 0); 
		КонецПопытки;
	КонецЕсли;
	
	#КонецЕсли
КонецФункции

&НаКлиенте
Процедура НайтиФайлыКомандаСистемы(Путь, СписокКаталогов, СписокФайлов, ИскатьВПодкаталогах, 
		ИскомоеИмяФайла = Неопределено, ФильтрРасширение = Неопределено) Экспорт
		
	#Если НЕ ВебКлиент Тогда	
		
	Если НЕ ЗапрещеныСинхронныеВызовы Тогда
		ФильтрФайловДляПоиска = "*";
		Если ИскомоеИмяФайла <> Неопределено Тогда
			ФильтрФайловДляПоиска = ИскомоеИмяФайла;
		ИначеЕсли ФильтрРасширение <> Неопределено Тогда
			ФильтрФайловДляПоиска = ФильтрРасширение;
		КонецЕсли;	 

		Если Объект.ИспользоватьКомпонентуVanessaExt И Объект.ПоискФайловСПомощьюКомпонентыVanessaExt И ВнешняяКомпонентаДляСкриншотов <> Неопределено Тогда
			ДанныеПоиска = ПрочитатьСтрокуJSON(ВнешняяКомпонентаДляСкриншотов.НайтиФайлы(Путь, ФильтрФайловДляПоиска,, Истина, ИскатьВПодкаталогах, Истина));
			//ВнешняяКомпонента.НайтиФайлы(Директория, МаскаПоиска, ИскомыйТекст, ИгнорироватьРегистр, ИскатьВПодкаталогах ВключитьПапкиВРезультатыПоиска);
			
			Если ДанныеПоиска = Неопределено Тогда
				ДанныеПоиска = Новый Массив;
			КонецЕсли;	 
			
			НайденныеФайлы = Новый Массив;
			Для Каждого Элем Из ДанныеПоиска Цикл
				Файл = Новый Файл(Элем.path);
				Если Элем.Свойство("dir") И Элем.dir Тогда
					СписокКаталогов.Добавить(Файл, Файл.ПолноеИмя);
				Иначе	
					СписокФайлов.Добавить(Файл, Файл.ПолноеИмя);
				КонецЕсли;	 
			КонецЦикла;	 
		Иначе	
			НайденныеФайлы = НайтиФайлы(Путь, ФильтрФайловДляПоиска, ИскатьВПодкаталогах);
			Для Каждого Файл Из НайденныеФайлы Цикл
				Если Файл.ЭтоКаталог() Тогда
					СписокКаталогов.Добавить(Файл, Файл.ПолноеИмя);
				Иначе	
					СписокФайлов.Добавить(Файл, Файл.ПолноеИмя);
				КонецЕсли;	 
			КонецЦикла;	
		КонецЕсли;	 
		
	ИначеЕсли ЗапрещеныСинхронныеВызовы И ВозможнаОптимизацияРаботыСФайлами Тогда
		МассивФайлов    = Новый Массив;
		МассивКаталогов = Новый Массив;
		НайтиФайлыСервер(Путь, МассивКаталогов, МассивФайлов, ИскатьВПодкаталогах, ИскомоеИмяФайла, ФильтрРасширение);
		Для Каждого Элем Из МассивФайлов Цикл
			СписокФайлов.Добавить(Новый Файл(Элем), Элем);
		КонецЦикла;	 
		Для Каждого Элем Из МассивКаталогов Цикл
			СписокКаталогов.Добавить(Новый Файл(Элем), Элем);
		КонецЦикла;	 
	Иначе
		// получение каталогов
		ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");

		Если ЭтоLinux Тогда
			КомандаКаталоги = "find """ + Путь + """ " + ?(ИскатьВПодкаталогах, "", "-maxdepth 1") + "-type d -name '*'" + " > """ + ИмяФайлаЛога + """";
			КомандаСистемы(КомандаКаталоги);	
		Иначе
			КомандаКаталоги = "DIR """ + Путь + """ /A:D /B " + ?(ИскатьВПодкаталогах, "/S", "") + " > """ + ИмяФайлаЛога + """";
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаКаталоги);
		КонецЕсли;	 
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайлаЛога, "UTF-8");
		
		СтрокаФайла = Текст.ПрочитатьСтроку();
		Пока СтрокаФайла <> Неопределено Цикл
			Если НЕ ИскатьВПодкаталогах Тогда
				СтрокаФайла = ДополнитьСлешВПуть(Путь) + СтрокаФайла;
			КонецЕсли;	 
			СписокКаталогов.Добавить(Новый Файл(СтрокаФайла), СтрокаФайла);
			СтрокаФайла = Текст.ПрочитатьСтроку();
		КонецЦикла;	
		
		Текст.Закрыть();
		УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
		
		// получение файлов
		ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
		
		Если ЭтоLinux Тогда
			КомандаКаталоги = "find """ + Путь + """ " + ?(ИскатьВПодкаталогах, "", "-maxdepth 1") + "-type f -name '*'" + " > """ + ИмяФайлаЛога + """";
			КомандаСистемы(КомандаКаталоги);	
		Иначе
			КомандаФайлы = "DIR """ + Путь + """ /A:-D /B " + ?(ИскатьВПодкаталогах, "/S", "") + " > """ + ИмяФайлаЛога + """";
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаФайлы);
		КонецЕсли;
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайлаЛога, "UTF-8");
		
		СтрокаФайла = Текст.ПрочитатьСтроку();
		Пока СтрокаФайла <> Неопределено Цикл
			Если НЕ ИскатьВПодкаталогах Тогда
				СтрокаФайла = ДополнитьСлешВПуть(Путь) + СтрокаФайла;
			КонецЕсли;	 
			СписокФайлов.Добавить(Новый Файл(СтрокаФайла), СтрокаФайла);
			СтрокаФайла = Текст.ПрочитатьСтроку();
		КонецЦикла;	
		
		Текст.Закрыть();
		УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
		
		Если ИскомоеИмяФайла <> Неопределено Тогда
			ИспользоватьРегулярныеВыражения = Найти(ИскомоеИмяФайла, "*") > 0;
			
			СписокФайловНовый = Новый СписокЗначений;
			
			Для Каждого ЭлементСписка Из СписокФайлов Цикл
				Если ИспользоватьРегулярныеВыражения Тогда
					Если СтрокаСоответствуетШаблону(НРег(ЭлементСписка.Значение.Имя), НРег(ИскомоеИмяФайла)) Тогда
						СписокФайловНовый.Добавить(ЭлементСписка.Значение);
					КонецЕсли;	
				Иначе	
					Если НРег(ЭлементСписка.Значение.Имя) = НРег(ИскомоеИмяФайла) Тогда
						СписокФайловНовый.Добавить(ЭлементСписка.Значение);
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	 
			
			СписокФайлов = СписокФайловНовый;
		КонецЕсли;	 
	КонецЕсли;	 
	
	#КонецЕсли
КонецПроцедуры

// Делает фильтр по расширению для списка файлов
&НаКлиенте
Процедура ОставитьТолькоФайлыСРасширением(СписокФайлов, Расширение) Экспорт
	НовыйСписок = Новый СписокЗначений;
	Для Каждого Элем Из СписокФайлов Цикл
		Если НРег(Элем.Значение.Расширение) = НРег(Расширение) Тогда
			НовыйСписок.Добавить(Элем.Значение, Элем.Значение.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;

	СписокФайлов = НовыйСписок;
КонецПроцедуры 

&НаКлиенте
Процедура КопироватьКаталогКомандаСистемы(Знач Откуда, Знач Куда)
	Куда = СтрЗаменить(Куда, "\", "/");
	Если Прав(Куда, 1) = "/" Тогда
		Куда = Лев(Куда, СтрДлина(Куда) - 1);
	КонецЕсли;	 
	
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;
	НайтиФайлыКомандаСистемы(Откуда, СписокКаталогов, СписокФайлов, Истина);

	СписокКаталогов.СортироватьПоПредставлению();
	
	Позиция = СтрДлина(Откуда) + 1 + 1;
	
	Для Каждого Каталог Из СписокКаталогов Цикл
		ВтораяЧастьПути = СтрЗаменить(Сред(Каталог.Значение.ПолноеИмя, Позиция), "\", "/");
		НовыйКаталогИмя = Куда + "/" + ВтораяЧастьПути;
		
		СоздатьКаталогКомандаСистемы(НовыйКаталогИмя);
	КонецЦикла;	
	
	Для Каждого ЭлементФайл Из СписокФайлов Цикл
		Файл            = ЭлементФайл.Значение;
		ВтораяЧастьПути = СтрЗаменить(Сред(Файл.ПолноеИмя, Позиция), "\", "/");
		НовоеИмяФайла   = Куда + "/" + ВтораяЧастьПути;
		
		КопироватьФайлКомандаСистемы(Файл.ПолноеИмя, НовоеИмяФайла);
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура КопироватьФайлКомандаСистемы(Знач Откуда, Знач Куда) Экспорт
	#Если НЕ ВебКлиент Тогда
	
    Если ЗапрещеныСинхронныеВызовы Тогда
        Команда = "";
        Если ЭтоLinux Тогда 
            Откуда = СтрЗаменить(Откуда, "\", "/");
            Куда   = СтрЗаменить(Куда, "\", "/");
            Команда = "cp -r """ + Откуда + """ """ + Куда + """";
        Иначе 
            Откуда = СтрЗаменить(Откуда, "/", "\");
            Куда   = СтрЗаменить(Куда, "/", "\");
            Команда = "COPY """ + Откуда + """ """ + Куда + """";
        КонецЕсли;    

		Попытка
			Если ЭтоLinux Тогда
				КомандаСистемы(Команда);
			Иначе
				ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
			КонецЕсли;
		Исключение
			СообщитьПользователю (ПодставитьПараметрыВСтроку(
				Локализовать("КопироватьФайлКомандаСистемы:%1 команда:%2"),
				ОписаниеОшибки(),
				Команда
			));
		КонецПопытки;
	Иначе
		КопироватьФайл(Откуда, Куда);
	КонецЕсли;	 
	
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталогКомандаСистемы(Знач ИмяФайла, ДополнительныеПараметрыАсинхронности = Неопределено) Экспорт
	#Если НЕ ВебКлиент Тогда
	
	Если ЗапрещеныСинхронныеВызовы Тогда
		ИмяФайла = СтрЗаменить(ИмяФайла, "/", "\");
		Если НЕ ЭтоLinux Тогда 
			ВыполнитьКомандуОСБезПоказаЧерногоОкна("MKDIR """ + ИмяФайла + """");
		Иначе 
			ИмяФайла = СтрЗаменить(ИмяФайла, "\", "/");
			КомандаСистемы("mkdir -p """ + ИмяФайла + """");
		КонецЕсли;
	Иначе
		Попытка
			СоздатьКаталог(ИмяФайла);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
				ВызватьИсключение ТекстОшибки + Символы.ПС + ИмяФайла;
		КонецПопытки;
		
	КонецЕсли;
	
	#КонецЕсли
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВерсияФайлаСервер(Знач ИмяФайла)
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.ПолучитьВремяИзменения();
КонецФункции	 

&НаКлиенте
Функция ВерсияФайлаКомандаСистемы(ИмяФайла)
	Если НЕ ЗапрещеныСинхронныеВызовы Тогда
		Файл = Новый Файл(ИмяФайла);
		Возврат Файл.ПолучитьВремяИзменения();
	ИначеЕсли ЗапрещеныСинхронныеВызовы И ВозможнаОптимизацияРаботыСФайлами Тогда
		Возврат ВерсияФайлаСервер(ИмяФайла); 
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не получилось определить версию файла <%1>."),
			ИмяФайла
		);
	КонецЕсли;	 
КонецФункции	 

&НаКлиенте
Функция ФайлСуществуетКомандаСистемы(Знач ИмяФайла, ДопПараметры = Неопределено) Экспорт
	
	#Если НЕ ВебКлиент Тогда

	Если ПустаяСтрока(ИмяФайла) Тогда
		Возврат Ложь;
	ИначеЕсли НЕ ЗапрещеныСинхронныеВызовы Тогда
		ФайлПроверкаСуществования = Новый Файл(ИмяФайла);
		Возврат ФайлПроверкаСуществования.Существует();
	ИначеЕсли ЗапрещеныСинхронныеВызовы И ВозможнаОптимизацияРаботыСФайлами Тогда
		Возврат ФайлСуществуетСервер(ИмяФайла);
	Иначе
		ИмяВременногоЛог = ПолучитьИмяВременногоФайла("log");
		
		Если НЕ ЭтоLinux Тогда
			ИмяФайла = СтрЗаменить(ИмяФайла, "/", "\");
			ВыполнитьКомандуОСБезПоказаЧерногоОкна("(If Exist """ + ИмяФайла + """ (Echo yes) Else (Echo no)) > """ + ИмяВременногоЛог + """");
		Иначе 
			ИмяВременнгоФайла = ПолучитьИмяВременногоФайла("sh");
			ЗТ = Новый ЗаписьТекста(ИмяВременнгоФайла, "UTF-8", Символы.ПС, Истина, Символы.ПС); 
			
			ЗТ.ЗаписатьСтроку("#!/bin/sh");

			Если Найти(ИмяФайла, " ") > 0 Тогда
				ИмяФайла = СтрЗаменить(ИмяФайла, " ", "\ ");
			КонецЕсли;

			СтрокаКоманды = "sh -c 'test -f " + ИмяФайла + " && echo yes || echo no' > " + ИмяВременногоЛог + "";
			ЗТ.ЗаписатьСтроку(СтрокаКоманды); 
			СтрокаКоманды = "sh -c 'test -d " + ИмяФайла + " && echo yes || echo no' >> " + ИмяВременногоЛог + "";
			ЗТ.ЗаписатьСтроку(СтрокаКоманды);
			ЗТ.Закрыть();
			
			КомандаСистемы("sh " + ИмяВременнгоФайла);
		КонецЕсли;

		ФайлСуществует = Ложь;
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяВременногоЛог, "UTF-8");
		
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
			
			Если Стр = "yes" Тогда
				ФайлСуществует = Истина;
			КонецЕсли;	 
		КонецЦикла;	
		Текст.Закрыть();
		
		Возврат ФайлСуществует;
	КонецЕсли;	 
	
	#КонецЕсли
КонецФункции	

&НаКлиенте
Процедура ОчиститьСодержимоеКаталога(Знач ИмяКаталога, ТипФайлов = "*.*") Экспорт
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяКаталога, "ОчиститьСодержимоеКаталога") Тогда
		Возврат;
	КонецЕсли;	 
	
	Если СтрДлина(ИмяКаталога) <= 3 Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Найти(Прав(ИмяКаталога, 1), "\/") > 0 Тогда
		ИмяКаталога = Лев(ИмяКаталога, СтрДлина(ИмяКаталога) - 1);
	КонецЕсли;	 
	
	Если ЗапрещеныСинхронныеВызовы Тогда
		УдалитьКаталогКомандаСистемы(ИмяКаталога);
		СоздатьКаталогКомандаСистемы(ИмяКаталога);
	Иначе	
		МассивФайлов = НайтиФайлы(ИмяКаталога, ТипФайлов, Ложь);
		Для каждого Файл Из МассивФайлов Цикл
			Попытка
				УдалитьФайлыКомандаСистемы(Файл.ПолноеИмя);
			Исключение
				СообщитьПользователю (ПодставитьПараметрыВСтроку(
					Локализовать("Не получилось удалить файл %1"),
					Файл.ПолноеИмя
				));
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;	 
	
КонецПроцедуры

// Возвращает файл с картинкой.
// Поиск картинки сначала происходит в каталоге проекта, затем в каталоге фичи.
// ИмяФайла  - Строка - путь к файлу
//
&НаКлиенте
Функция ПолучитьФайлКартинки(Знач ИмяФайла) Экспорт
	Путь = Объект.КаталогПроекта;
	Если НЕ ЗначениеЗаполнено(Путь) Тогда
		ВызватьИсключение Локализовать("Не указано значение настройки Vanessa-automation: <КаталогПроекта>.");
	КонецЕсли;
	
	Если ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		Возврат Новый Файл(ИмяФайла);
	КонецЕсли;	
	
	Если Найти(ИмяФайла, ".") = 0 Тогда
		ИмяФайла = ИмяФайла + ".png";
	КонецЕсли;	
	
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов = Новый СписокЗначений;
	НайтиФайлыКомандаСистемы(Путь, СписокКаталогов, СписокФайлов, Истина, ИмяФайла);
	Если СписокФайлов.Количество() = 0 Тогда
		Если ИдетВыполнениеСценариев() Тогда
			Путь = ПолучитьСостояниеVanessaAutomation().ТекущаяФича.Каталог;
			СписокКаталогов = Новый СписокЗначений;
			СписокФайлов = Новый СписокЗначений;
			НайтиФайлыКомандаСистемы(Путь, СписокКаталогов, СписокФайлов, Истина, ИмяФайла);
		КонецЕсли;	
		
		Если СписокФайлов.Количество() = 0 Тогда
			ВызватьИсключение ПодставитьПараметрыВСтроку(
				Локализовать("В каталоге проекта и в каталоге фичи не найден файл <%1>."),
				ИмяФайла
			);
		КонецЕсли;	
	КонецЕсли;

	Если СписокФайлов.Количество() > 1 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("В каталоге <%1> найдено больше одного файла <%2>: %3."),
			Путь,
			ИмяФайла,
			СписокФайлов.Количество()
		);
	КонецЕсли;

	Возврат СписокФайлов[0].Значение;
КонецФункции	 

// Возвращает файл с картинкой
// ИмяФайла  - Строка - путь к файлу
//
&НаКлиенте
Функция ПолучитьФайлКартинкиДляРаботыVA(ИмяФайла) Экспорт
	Путь = Объект.КаталогИнструментов;
	Если НЕ ЗначениеЗаполнено(Путь) Тогда
		ВызватьИсключение Локализовать("Не указано значение настройки Vanessa-automation: <КаталогИнструментов>.");
	КонецЕсли;

	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов = Новый СписокЗначений;
	НайтиФайлыКомандаСистемы(Путь, СписокКаталогов, СписокФайлов, Истина, ИмяФайла	+ ".png");
	Если СписокФайлов.Количество() = 0 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("В каталоге <%1> не найден файл <%2>."),
			Путь,
			ИмяФайла
		);
	КонецЕсли;

	Если СписокФайлов.Количество() > 1 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("В каталоге <%1> найдено больше одного файла <%2>: %3."),
			Путь,
			ИмяФайла,
			СписокФайлов.Количество()
		);
	КонецЕсли;

	Возврат СписокФайлов[0].Значение;
КонецФункции	 

// Возвращает файл с картинкой
// ИмяФайла  - Строка - путь к файлу
//
&НаКлиенте
Функция ПолучитьФайлКартинкиИзТекста(Текст, ДанныеПрофиля = Неопределено) Экспорт
	Путь = Объект.КаталогДляГенерацииКартинок;
	Если НЕ ЗначениеЗаполнено(Путь) Тогда
		ВызватьИсключение Локализовать("Не указано значение настройки Vanessa-automation: <КаталогДляГенерацииКартинок>.");
	КонецЕсли;	 
	
	Шрифт = "arial";
	ЦветФона = "white";
	ЦветШрифта = "black";
	Размер = 13;
	
	Если ТипЗнч(ДанныеПрофиля) = Тип("Структура") Тогда
		Шрифт = ДанныеПрофиля.Шрифт;
		ЦветФона = ДанныеПрофиля.ЦветФона;
		ЦветШрифта = ДанныеПрофиля.ЦветШрифта;
		Размер = ДанныеПрофиля.Размер;
	ИначеЕсли ТипЗнч(ОбъектКонтекстСохраняемый) = Тип("Структура") Тогда
		Если ОбъектКонтекстСохраняемый.Свойство("ОсновнойПрофильПоискаКартинкиСТекстом") Тогда
			ОсновнойПрофильПоискаКартинкиСТекстом = ОбъектКонтекстСохраняемый.ОсновнойПрофильПоискаКартинкиСТекстом;
			Шрифт      = ОсновнойПрофильПоискаКартинкиСТекстом.Шрифт;
			ЦветФона   = ОсновнойПрофильПоискаКартинкиСТекстом.ЦветФона;
			ЦветШрифта = ОсновнойПрофильПоискаКартинкиСТекстом.ЦветШрифта;
			Размер     = ОсновнойПрофильПоискаКартинкиСТекстом.Размер;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ИмяКартинки = Текст + "_" + Шрифт + "_" + ЦветФона + "_" + ЦветШрифта + "_" + Размер + ".png";
	ИмяКартинки = СтрЗаменить(ИмяКартинки, ":", КодСимвола(":"));
	ИмяКартинки = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяКартинки);
	ИмяКартинки = СтрЗаменить(ИмяКартинки, "#", "");
	ИмяКартинки = ДополнитьСлешВПуть(Путь) + ИмяКартинки;
	
	Если ФайлСуществуетКомандаСистемы(ИмяКартинки) Тогда
		Возврат Новый Файл(ИмяКартинки); 
	КонецЕсли;	 
	
	Если ПустаяСтрока(Объект.ЗаписьВидеоКомандаConvert) Тогда
		ВызватьИсключение Локализовать("Не заполнена команда ""Convert"" из пакета ImageMagic.");
	КонецЕсли;	 
	
	Если НужноОбернутьВКавычкиКомандуКоверт(Объект.ЗаписьВидеоКомандаConvert) Тогда
		Команда = """" + Объект.ЗаписьВидеоКомандаConvert + """";
	Иначе	
		Команда = Объект.ЗаписьВидеоКомандаConvert;
	КонецЕсли;	 
	
	Команда = Команда + " -background ""%1"" -fill ""%2"" -font ""%3"" -pointsize %4 label:""%5""  ""%6""";
	Команда = СтрЗаменить(Команда, "%1", ЦветФона);
	Команда = СтрЗаменить(Команда, "%2", ЦветШрифта);
	Команда = СтрЗаменить(Команда, "%3", Шрифт);
	Команда = СтрЗаменить(Команда, "%4", Размер);
	Команда = СтрЗаменить(Команда, "%5", Текст);
	Команда = СтрЗаменить(Команда, "%6", ИмяКартинки);
	
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
	
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяКартинки) Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не получилось создать картинку по тексту <%1>."),
			Текст
		);
	КонецЕсли;	 
	
	Возврат Новый Файл(ИмяКартинки); 
КонецФункции	 

&НаСервереБезКонтекста
Функция ЭтоКаталогКомандаСистемыСервер(Знач Путь)
	Файл = Новый Файл(Путь);
	Если НЕ Файл.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Файл.ЭтоКаталог();
КонецФункции	 

&НаКлиенте
Функция ЭтоКаталогКомандаСистемы(Путь) Экспорт
	
	#Если НЕ ВебКлиент Тогда
	
	Если ПустаяСтрока(Путь) Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если НЕ ЗапрещеныСинхронныеВызовы Тогда
		Файл = Новый Файл(Путь);
		Возврат Файл.ЭтоКаталог();
	ИначеЕсли ЗапрещеныСинхронныеВызовы И ВозможнаОптимизацияРаботыСФайлами Тогда
		Возврат ЭтоКаталогКомандаСистемыСервер(Путь); 
	Иначе	
		
		Если ЭтоLinux Тогда
			СписокКаталогов = Новый СписокЗначений;
			СписокФайлов    = Новый СписокЗначений;
			НайтиФайлыКомандаСистемы(Путь, СписокКаталогов, СписокФайлов, Истина);
			Если СписокКаталогов.Количество() = 0 И СписокФайлов.Количество() = 0 Тогда
				Возврат Ложь;
			Иначе
				Возврат Истина;
			КонецЕсли;	 
		Иначе
			Если ЭтоКаталогКомандаСистемыСлужебныйФайл = Неопределено Тогда
				
				ИмяВременногоФайлаКоманды = ПолучитьИмяВременногоФайла("bat");
				
				// эти две строки нужны для записи файла без BOM - начало
				ЗТ = Новый ЗаписьТекста(ИмяВременногоФайлаКоманды, КодировкаТекста.ANSI, , Ложь); 
				ЗТ.Закрыть();
				// эти две строки нужны для записи файла без BOM - окончание
				
				ЗТ = Новый ЗаписьТекста(ИмяВременногоФайлаКоманды, КодировкаТекста.UTF8, , Истина); 
				Если НЕ ЭтоWindowsXP Тогда
					ЗТ.ЗаписатьСтроку("chcp 65001"); 
				КонецЕсли;	 
				ТекстКоманды = "echo ""%~a1""|findstr ""d"" && echo Folder || echo File";
				ЗТ.ЗаписатьСтроку(ТекстКоманды); 
				ЗТ.Закрыть();
				
				ЭтоКаталогКомандаСистемыСлужебныйФайл = ИмяВременногоФайлаКоманды;
			КонецЕсли;	 
			
			ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
			КомандаКаталоги = """" + ЭтоКаталогКомандаСистемыСлужебныйФайл + """ """ + Путь + """ > """ + ИмяФайлаЛога + """";
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаКаталоги);
			
			Текст = Новый ЧтениеТекста;
			Текст.Открыть(ИмяФайлаЛога, "UTF-8");
			
			ЭтоКаталог = Ложь;
			Пока Истина Цикл
				Стр = Текст.ПрочитатьСтроку();
				Если Стр = Неопределено Тогда
					Прервать;
				КонецЕсли;
				
				Если НРег(СокрЛП(Стр)) = "folder" Тогда
					ЭтоКаталог = Истина;
					Прервать;
				КонецЕсли;	 
				
			КонецЦикла;	
			
			Текст.Закрыть();
			УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
			
			Возврат ЭтоКаталог; 
			
		КонецЕсли;	 
	КонецЕсли;	 
	
	#КонецЕсли
	
КонецФункции	 

&НаКлиенте
Функция ПолучитьДопОписаниеСкриншота()
	Если ТипЗнч(ЗначениеПараметровДляСнятияСкриншотов) = Тип("Структура") Тогда
		Если ЗначениеПараметровДляСнятияСкриншотов.Свойство("ДобавлятьКИменамСкриншотовОписаниеОшибки")
			И ЗначениеПараметровДляСнятияСкриншотов.ДобавлятьКИменамСкриншотовОписаниеОшибки Тогда
			
			Если НЕ ЗначениеЗаполнено(ЗначениеПараметровДляСнятияСкриншотов.ОписаниеОшибкиВнутриСценария) Тогда
				Возврат "_" + Формат(ЗначениеПараметровДляСнятияСкриншотов.ТекШаг.ИдСтроки, "ЧГ=; ЧН=0");
			КонецЕсли;	 
			
			Возврат "_" + ЗначениеПараметровДляСнятияСкриншотов.ОписаниеОшибкиВнутриСценария; 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция ОпределитьПрикреплятьСкриншотКШагу()
	Если ТипЗнч(ЗначениеПараметровДляСнятияСкриншотов) = Тип("Структура") Тогда
		Если ЗначениеПараметровДляСнятияСкриншотов.Свойство("ПрикреплятьСкриншотКШагу")
			И ЗначениеПараметровДляСнятияСкриншотов.ПрикреплятьСкриншотКШагу Тогда
			
			Возврат Истина;
		КонецЕсли;	 
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Процедура СнимокЭкранаБраузера(ИмяФайлаСкриншота, КоординатыОбласти)
	
	#Если НЕ ВебКлиент Тогда
	
	ПараметрыМетода = Новый Структура("format,quality,fromSurface", "png", 85, Ложь);
	ДанныеJSON = Новый Структура("id,method,params", 1, "Page.captureScreenshot", ПараметрыМетода);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеJSON);
	КомандаJSON = ЗаписьJSON.Закрыть();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученСнимокБраузера", ЭтаФорма, 
		Новый Структура("ИмяФайлаСкриншота,КоординатыОбласти", ИмяФайлаСкриншота,КоординатыОбласти) );
	ВнешняяКомпонентаДляСкриншотов.НачатьВызовВебСокет(ОписаниеОповещения, АдресВебСокет, КомандаJSON);
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура CжатьФотоБраузера(ИмяФайлаСкриншота, КоординатыОбласти)
	
	МаксимальнаяШирина	= 1440; 
	МаксимальнаяВысота	= 900;

	ОбрезкаЛ	=  Число(КоординатыОбласти[0]);
	ОбрезкаВ	=  Число(КоординатыОбласти[1]);
	ОбрезкаП	=  МаксимальнаяШирина - Число(КоординатыОбласти[2]) - Число(КоординатыОбласти[0]);
	ОбрезкаН	=  МаксимальнаяВысота - Число(КоординатыОбласти[3]) - Число(КоординатыОбласти[1]);
	
    // Создаем объект
    ФайлКартинка = Новый COMОбъект("WIA.ImageFile");
    ФайлКартинка.LoadFile(ИмяФайлаСкриншота);
        
    ФайлПрогресс = Новый COMОбъект("WIA.ImageProcess"); ///ФайлПрогресс.Filters - список Фильтров, всего 8
    ФайлПрогресс.Filters.Add(ФайлПрогресс.FilterInfos("Crop").FilterID);     ///Обрезка
		
	///Обрезка
	ФайлПрогресс.Filters(1).Properties("Left").Value   =  ОбрезкаЛ;       /// лево;    
	ФайлПрогресс.Filters(1).Properties("Top").Value    =  ОбрезкаВ;       /// верх;     
	ФайлПрогресс.Filters(1).Properties("Right").Value  =  ОбрезкаП;       /// право;    
	ФайлПрогресс.Filters(1).Properties("Bottom").Value =  ОбрезкаН;	      /// низ;      
	
	///Применить фильтры к фотографии
    ФайлКартинка = ФайлПрогресс.Apply(ФайлКартинка);

	УдалитьФайлы(ИмяФайлаСкриншота);
	
	///Удалить старое фото и создать новое
    ФайлКартинка.SaveFile(ИмяФайлаСкриншота);
	
КонецПроцедуры


&НаКлиенте
Процедура ПолученСнимокБраузера(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	#Если НЕ ВебКлиент Тогда
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(РезультатВызова);
	ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
	Если ДанныеJSON.Свойство("result") Тогда
		ДвоичныеДанные = Base64Значение(ДанныеJSON.result.data);
		ДвоичныеДанные.Записать(ДополнительныеПараметры.ИмяФайлаСкриншота);
		//ДанныеКартинки = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		Если ДополнительныеПараметры.КоординатыОбласти <> Неопределено И ДополнительныеПараметры.КоординатыОбласти.Количество() = 4 Тогда
			CжатьФотоБраузера(ДополнительныеПараметры.ИмяФайлаСкриншота, ДополнительныеПараметры.КоординатыОбласти)
		КонецЕсли;
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СкриншотКомпонентойВсегоЭкрана(ИмяПроцедуры, ИмяФайла, Знач ИмяСкриншотаДляОтчета, Режим, ProcessId, КоординатыОбласти = Неопределено)
	Если ИмяСкриншотаДляОтчета = Неопределено Тогда
		ИмяСкриншотаДляОтчета = "MainScreen";
	КонецЕсли;
	
	ДопОписаниеСкриншота = ПолучитьДопОписаниеСкриншота();
	Если ЗначениеЗаполнено(ДопОписаниеСкриншота) Тогда
		ИмяСкриншотаДляОтчета = ИмяСкриншотаДляОтчета + ДопОписаниеСкриншота;
	КонецЕсли;
	ПрикреплятьСкриншотКШагу = ОпределитьПрикреплятьСкриншотКШагу();
	
	Если ИмяПроцедуры = Неопределено Тогда
		ЗаписатьЛогВЖРИнформация("СнятиеСкриншота.СкриншотКомпонентойВсегоЭкрана", ИмяСкриншотаДляОтчета);
		
		Если ЗначениеЗаполнено(КоординатыОбласти) И КоординатыОбласти.Количество() > 0 Тогда
			ДвоичныеДанные = ВнешняяКомпонентаДляСкриншотов.ПолучитьСнимокОбласти(
				Число(КоординатыОбласти[0]), 
				Число(КоординатыОбласти[1]), 
				Число(КоординатыОбласти[2]), 
				Число(КоординатыОбласти[3]));
		Иначе
			ДвоичныеДанные = ВнешняяКомпонентаДляСкриншотов.ПолучитьСнимокЭкрана(0);
		КонецЕсли;
		
		Если ДвоичныеДанные = Неопределено Тогда
			Если Объект.ЗапускИзКоманднойСтроки Тогда
				ЗаписатьЛогВЖРОшибкаСервер("VanessaAutomation.СкриншотКомпонентойВсегоЭкрана",
					Локализовать("Не получилось снять скриншот с помощью внешней компоненты."));
				Возврат;
			Иначе	
				ВызватьИсключение ПодставитьПараметрыВСтроку(
					Локализовать("Не получилось снять скриншот с помощью внешней компоненты."));
			КонецЕсли;	 
		КонецЕсли;	 
		Если ТипЗнч(ИмяФайла) = Тип("Строка") Тогда
			ДвоичныеДанные.Записать(ИмяФайла);
			ДобавитьИмяФайлаСкриншотаКСтрокеТекущегоСценария(ИмяФайла);
		Иначе	
			ИмяФайлаСкриншота = СформироватьИмяФайлаСкриншота();
			ДвоичныеДанные.Записать(ИмяФайлаСкриншота);
			
			Если ИмяСкриншотаДляОтчета = Неопределено Тогда
				ИмяФайла.Добавить(ИмяФайлаСкриншота);
				ДобавитьИмяФайлаСкриншотаКСтрокеТекущегоСценария(ИмяФайлаСкриншота);
			Иначе	
				ДанныеФайла = Новый Структура;
				ДанныеФайла.Вставить("ИмяФайла",ИмяФайлаСкриншота);
				ДанныеФайла.Вставить("ЗаголовокВнутреннегоОкна", ИмяСкриншотаДляОтчета);
				ДанныеФайла.Вставить("ПрикреплятьСкриншотКШагу", ПрикреплятьСкриншотКШагу);
				ИмяФайла.Добавить(ДанныеФайла);
				ДобавитьИмяФайлаСкриншотаКСтрокеТекущегоСценария(ДанныеФайла);
			КонецЕсли;	 
			
		КонецЕсли;	 
	Иначе	
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИмяФайла",ИмяФайла);
		ДопПараметры.Вставить("Режим",Режим);
		ДопПараметры.Вставить("ProcessId",ProcessId);
		ДопПараметры.Вставить("ИмяПроцедуры",ИмяПроцедуры);
		ДопПараметры.Вставить("ИмяСкриншотаДляОтчета",ИмяСкриншотаДляОтчета);
		ДопПараметры.Вставить("ПрикреплятьСкриншотКШагу",ПрикреплятьСкриншотКШагу);
		
		ЗаписатьЛогВЖРИнформация("СнятиеСкриншота.СкриншотКомпонентойВсегоЭкрана", ЗаписатьОбъектJSON(ДопПараметры));
		
		// Лучше тут сделать проверку структуры и вызов другово метода компоненты
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолученСнимокЭкранаОбработчикОповещения", ЭтаФорма, ДопПараметры);
		ВнешняяКомпонентаДляСкриншотов.НачатьВызовПолучитьСнимокЭкрана(ОписаниеОповещения, 0);
	КонецЕсли;	 
КонецПроцедуры 

#КонецОбласти

#Область ЗагрузкаФич

&НаКлиенте
Процедура ЗагрузитьФичи(ДопПараметры = Неопределено) Экспорт
	
	ДобавитьСтандартнуюБиблиотекуЕслиНеобходимо();
	
	ПереходВРедакторИзДерева = Ложь;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ПереходВРедакторИзДерева") Тогда
		ПереходВРедакторИзДерева = ДопПараметры.ПереходВРедакторИзДерева;
	КонецЕсли;	 
	
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		НадоОбновитьДанныеРедактораПриПереходеИзДерева = Истина;
	Иначе	
		Если НЕ ПустаяСтрока(Объект.КаталогФич) Тогда
			Если ФайлСуществуетКомандаСистемы(Объект.КаталогФич) Тогда
				Если ЭтоКаталогКомандаСистемы(Объект.КаталогФич) Тогда
					Если ПереходВРедакторИзДерева Тогда
						//Это переход из дерева, в котором нет строк
						Объект.КаталогФич = "";
					Иначе	
						Объект.ИспользоватьРедакторVanessaEditor = Ложь;
						НадоОбновитьДанныеРедактораПриПереходеИзДерева = Истина;
						УстановитьУсловноеОформление();
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	
	КонецЕсли;	 
	
	ЗагрузитьПеременныеКонтекстаИзФайлаНастроек();	
	Если ДопПараметры <> Неопределено Тогда
		Если ДопПараметры.Свойство("КаталогФич") Тогда
			Объект.КаталогФич = ДопПараметры.КаталогФич;
		КонецЕсли;
		
		Если ДопПараметры.Свойство("УстановитьТекущийЭлемент") Тогда
			АктивизироватьСтраницуЗапускТестов();
		КонецЕсли;
	КонецЕсли;
	
	ФлагСценарииЗагружены                                           = Ложь;
	Объект.ИдетВыполнениеСценариев                                  = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Ложь;
	
	ЗаполненыДанныеДляВыполненияОдногоШага = Ложь;
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Попытка
			ТекущаяПозицияVanessaEditor = ПолучитьТекущаяПозицияVanessaEditor();
		Исключение
			ВыключитьИспользованиеVanessaEditor();
		КонецПопытки;
	КонецЕсли;	 
	
	ОбновитьСтатусыКнопокСценариев();
	
	ДобавитьФичуВСписокНедавноЗагруженныхФич(Объект.КаталогФич);

	МассивДействий = Новый Массив;
	ДобавитьМассивСостоянийФайлов(МассивДействий);
	ДобавитьСканированиеКаталогов(МассивДействий);
	
	ПреобразоватьПутиБиблиотек();
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;	 
	
	ВключенРежимОбучения = Ложь;
	Если ДопПараметры.Свойство("ВключенРежимОбучения") Тогда
		ВключенРежимОбучения = ДопПараметры.ВключенРежимОбучения;
	КонецЕсли;	
	
	Если ВключенРежимОбучения Тогда
		ДанныеОшибки = Неопределено;
		Если НЕ ВКешЕстьВсеMp3ДляДаннойФичи(ДанныеКешОзвучкиИнтерактивнойСправки, Объект.КаталогФич) Тогда
			Если НЕ СгенерироватьMP3ДляИнтерактивнойСправки(Объект.КаталогФич, ДанныеОшибки) Тогда
				ОткрытьМастерНастройкиИнтерактивнойСправки(ДанныеОшибки, Объект.КаталогФич);
				Возврат;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	ДопПараметры.Вставить("ТекИдМассива", 0);
	ДопПараметры.Вставить("МассивДействий", МассивДействий);
	ДопПараметры.Вставить("НадоЗагрузитьФичи", Истина);
	ДопПараметры.Вставить("НадоГенерироватьEPF", Ложь);
	ДопПараметры.Вставить("ОткрытьФормуИзвестныхШагов", Ложь);
	Если ЗапрещеныСинхронныеВызовы И ВозможнаОптимизацияРаботыСФайлами Тогда
		ЗагрузитьФичиПродолжение(ДопПараметры);
	ИначеЕсли ЗапрещеныСинхронныеВызовы Тогда
		ПолучитьАсинронноСостоянияОбъектовФайловойСистемы(ДопПараметры);
	Иначе
		ЗагрузитьФичиПродолжение(ДопПараметры);
	КонецЕсли;	 
	
КонецПроцедуры

#КонецОбласти

#Область АвтоИнструкции

// Возвращает массив снипетов, которые создают видеовставку в автоинструкциях
&НаКлиенте
Функция ПолучитьМассивСнипетовВидеовставка() Экспорт
	Массив = Новый Массив;
	Массив.Добавить("обратитевнимание");
	Массив.Добавить("видеовставка");
	Массив.Добавить("видеовставкатолькотекст");
	
	Возврат Массив;
КонецФункции	

// Возвращает массив снипетов, которые особенно создают слайд с субтитрами в автоинструкциях
&НаКлиенте
Функция ПолучитьМассивСнипетовСубтитров() Экспорт
	Массив = Новый Массив;
	Массив.Добавить("текстсубтитров");
	Массив.Добавить("текстдиктора");
	
	Возврат Массив;
КонецФункции	

// Возвращает массив снипетов, которые создают слайд из картинки
&НаКлиенте
Функция ПолучитьМассивСнипетовСлайдИзкартинки() Экспорт
	Массив = Новый Массив;
	Массив.Добавить("видеовставкакартинки");
	
	Возврат Массив;
КонецФункции	

// Возвращает массив снипетов, для которых текст в автоинструкциях берётся из параметров шагов
&НаКлиенте
Функция СнипетыШаговТекстКоторыхВычисляетсяЧерезПараметры()
	
	Массив = Новый Массив;
	
	ТекДанные = ПолучитьМассивСнипетовВидеовставка();
	Для Каждого Элем Из ТекДанные Цикл
		Массив.Добавить(Элем);
	КонецЦикла;	 
	
	ТекДанные = ПолучитьМассивСнипетовСубтитров();
	Для Каждого Элем Из ТекДанные Цикл
		Массив.Добавить(Элем);
	КонецЦикла;	 
	
	ТекДанные = ПолучитьМассивСнипетовСлайдИзкартинки();
	Для Каждого Элем Из ТекДанные Цикл
		Массив.Добавить(Элем);
	КонецЦикла;	 
	
	Возврат Массив;
	
КонецФункции	 

&НаКлиенте
Процедура ЭтотШагНеНадоМасштабироватьВВидео() Экспорт
	Если ТекИД_СценарияВМассиве >= 0 Тогда
		Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		
		Если ТекИД_ШагаВМассиве >= 0 Тогда
			ТекШаг = Шаги[ТекИД_ШагаВМассиве];
			
			ТекШаг.Вставить("МасштабироватьВВидео", Ложь);
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстИнструкции(Стр) Экспорт
	Если ТекИД_СценарияВМассиве >= 0 Тогда
		Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		
		Если ТекИД_ШагаВМассиве >= 0 Тогда
			ТекШаг = Шаги[ТекИД_ШагаВМассиве];
			
			ТекШаг.Вставить("ТекстИнструкция", Стр);
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Функция ЭтоПрерывающйВидеоШаг(ТекШаг) Экспорт
	Поз = Найти(ТекШаг.Снипет, "(");
	Стр = НРег(Лев(ТекШаг.Снипет, Поз - 1));
	
	Если МассивСнипетовВидеовставкаИзТекста.Найти(Стр) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	 
КонецФункции	

// Проверяет является ли этот шаг шагом, который создаёт видеовставку из картинки.
&НаКлиенте
Функция ЭтоШагВидеовставкиКартинки(ТекШаг) Экспорт
	Поз = Найти(ТекШаг.Снипет, "(");
	Стр = НРег(Лев(ТекШаг.Снипет, Поз - 1));
	
	МассивСнипетовСлайдИзкартинки = ПолучитьМассивСнипетовСлайдИзкартинки();
	
	Если МассивСнипетовСлайдИзкартинки.Найти(Стр) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	 
КонецФункции	

// рисует рамку вокруг активного элемента формы
&НаКлиенте
Процедура ПодсветитьАктивноеОкно(Длительность, ЖдатьЗавершения = Истина) Экспорт
	Если Не Объект.ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм Тогда
		Возврат;
	КонецЕсли;	 
	
	ПутьКПриложению = Объект.КаталогИнструментов + "\tools\VideoTools\FrameShow.exe";
	Если Не ФайлСуществуетКомандаСистемы(ПутьКПриложению) Тогда
		Возврат;
	КонецЕсли;	 
	
	Путь = ПутьКПриложению + " -showframeofactivecontrol timeshowframe=" + СтрЗаменить(
			СтрЗаменить(Формат(Длительность, "ND=10; NGS=*"), Символы.НПП, ""), "*", "");
	Если ЗапрещеныСинхронныеВызовы Тогда
		Если ЖдатьЗавершения Тогда
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(Путь);	
		Иначе	
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(Путь, 0);	
		КонецЕсли;	 
	Иначе
		ЗапуститьПриложение(Путь, , ЖдатьЗавершения);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПодсветитьАктивныйЭлементФормы() Экспорт
	Если Не Объект.ИдетЗаписьВидео Тогда
		Возврат;
	КонецЕсли;	 
	
	ПодсветитьАктивноеОкно(2000, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодсветитьАктивныйЭлементФормыHTML() Экспорт
	Если Не Объект.СоздаватьИнструкциюHTML И Не Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;	 
	
	ПодсветитьАктивноеОкно(20000, Ложь);
	
	Sleep(3);
КонецПроцедуры

&НаКлиенте
Процедура УбратьПодсветкуАктвиногоЭлемента() Экспорт
	TASKKILL("FrameShow.exe");
КонецПроцедуры

&НаКлиенте
Процедура СделатьДействияПриЗаписиВидео(ПарамСтр = "") Экспорт
	Если Объект.ИдетЗаписьВидео Тогда
		Если ПарамСтр = "толькофрейм" Тогда
			ПодсветитьАктивныйЭлементФормы();
		ИначеЕсли ПарамСтр = "толькомышь" Тогда
			ПереместитьКурсорМышиКАктивномуОбъекту();
		ИначеЕсли ПарамСтр <> "толькоскриншот" Тогда
			ПереместитьКурсорМышиКАктивномуОбъекту();
			ПодсветитьАктивныйЭлементФормы();
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура СделатьДействияПриЗаписиHTML(ПарамСтр = "") Экспорт
	Если Объект.СоздаватьИнструкциюHTML ИЛИ Объект.СоздаватьИнструкциюMarkdown Тогда
		Попытка
			Шаги   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
			ТекШаг = Шаги[ТекИД_ШагаВМассиве];
			Если ТекШаг.Свойство("ЭтоШагКонтекста") И ТекШаг.ЭтоШагКонтекста Тогда
				Возврат;
			КонецЕсли;	 
		Исключение
			
		КонецПопытки;
	КонецЕсли;	 
	
	Если Объект.СоздаватьИнструкциюHTML Тогда
		Если ПарамСтр = "толькофрейм" Тогда
			ПодсветитьАктивныйЭлементФормыHTML();
		ИначеЕсли ПарамСтр = "толькомышь" Тогда
			ПереместитьКурсорМышиКАктивномуОбъектуHTML();
		ИначеЕсли ПарамСтр <> "толькоскриншот" Тогда
			ПереместитьКурсорМышиКАктивномуОбъектуHTML();
			ПодсветитьАктивныйЭлементФормыHTML();
		КонецЕсли;	 
		
		ДобавитьВЛогИнструкцииHTMLВыполненияШага();
		СкриншотСделанВСценарии = Истина;
		УбратьПодсветкуАктвиногоЭлемента();
	КонецЕсли;	 
	
	Если Объект.СоздаватьИнструкциюMarkdown Тогда
		Если ПарамСтр = "толькофрейм" Тогда
			ПодсветитьАктивныйЭлементФормыHTML();
		ИначеЕсли ПарамСтр = "толькомышь" Тогда
			ПереместитьКурсорМышиКАктивномуОбъектуHTML();
		ИначеЕсли ПарамСтр <> "толькоскриншот" Тогда
			ПереместитьКурсорМышиКАктивномуОбъектуHTML();
			ПодсветитьАктивныйЭлементФормыHTML();
		КонецЕсли;	 
		
		ДобавитьВЛогИнструкцииMarkdownВыполненияШага();
		СкриншотСделанВСценарии = Истина;
		УбратьПодсветкуАктвиногоЭлемента();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьКурсорМышиКАктивномуОкну(Скорость, ЖдатьЗавершения = Истина) Экспорт
	Если Не Объект.ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы Тогда
		Возврат;
	КонецЕсли;	 
	
	ПутьКПриложению = Объект.КаталогИнструментов + "\tools\VideoTools\MouseMove.exe";
	Если Не ФайлСуществуетКомандаСистемы(ПутьКПриложению) Тогда
		Возврат;
	КонецЕсли;	 
	
	Путь = ПутьКПриложению + " -movemousetoactivecontrol mousespeed=" + СтрЗаменить(Скорость, Символы.НПП, "");
	Если ЗапрещеныСинхронныеВызовы Тогда
		Если ЖдатьЗавершения Тогда
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(Путь);	
		Иначе	
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(Путь, 0);	
		КонецЕсли;	 
	Иначе
		ЗапуститьПриложение(Путь, , ЖдатьЗавершения);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьКурсорМышиКАктивномуОбъекту() Экспорт
	Если Не Объект.ИдетЗаписьВидео Тогда
		Возврат;
	КонецЕсли;	 
	
	ПереместитьКурсорМышиКАктивномуОкну(500);
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьКурсорМышиКАктивномуОбъектуHTML() Экспорт
	Если Не Объект.СоздаватьИнструкциюHTML И НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;	 
	
	ПереместитьКурсорМышиКАктивномуОкну(50);
КонецПроцедуры

// Проверяет, нужно ли добавить кавычки к команаде.
// Нужно для совместимости ImageMagick 6 и 7
&НаКлиенте
Функция НужноОбернутьВКавычкиКомандуКоверт(ЗаписьВидеоКомандаConvert) Экспорт
	Если СокрЛП(НРег(ЗаписьВидеоКомандаConvert)) = "magick convert" Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	 
КонецФункции	 

// Возвращает порог поиска картинки компонентой на экране
&НаКлиенте
Функция ПорогПоискаКартинки() Экспорт
	Возврат Объект.ПорогПоискаКартинки; 
КонецФункции	 

#КонецОбласти

#Область Плагины
// Плагины
// портировано из xUnitFor1C 4.1.1.0

&НаКлиенте
Процедура ОбработчикПоискаКлиентскихПлагинов(Знач НайденныеФайлы, Знач ДополнительныеПараметры) Экспорт
	
	ПомещаемыеФайлы = Новый Массив;
	ИдентификаторыПлагинов = Новый Соответствие;
	Для каждого ФайлОбработки Из НайденныеФайлы Цикл
		
		ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ФайлОбработки.ПолноеИмя);
		ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
		
		ИмяПлагина = ФайлОбработки.ИмяБезРасширения;
		ИдентификаторыПлагинов.Вставить(ФайлОбработки.ПолноеИмя, ИмяПлагина);
		
	КонецЦикла;
	
	Если ПомещаемыеФайлы.Количество() Тогда
		ПараметрыЗавершения = Новый Структура("ИдентификаторыПлагинов", ИдентификаторыПлагинов);
		Если Версия836ИлиВыше Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикПоискаКлиентскихПлагиновЗавершение", ЭтаФорма, ПараметрыЗавершения);
			
			БылаОшибка = Истина;
			ТекстОшибки = "";
			КоличествоПопыток = 10;
			Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
				Попытка
					НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор);
					БылаОшибка = Ложь;
					Прервать;
				Исключение
					ТекстОшибки = ОписаниеОшибки();
					Sleep(1);
				КонецПопытки;
			КонецЦикла;	
			
			Если БылаОшибка Тогда
				Стр = "";
				Для Каждого Элем Из ПомещаемыеФайлы Цикл
					Стр = Стр + Элем.Имя + Символы.ПС; 
				КонецЦикла;	 
				
				ВызватьИсключение ПодставитьПараметрыВСтроку(
					Локализовать("Не получилось выполнить помещение файлов: <%1>."),
					Стр + Символы.ПС + ТекстОшибки
				);
			КонецЕсли;	 
			
		Иначе	
			ПомещенныеФайлы = Новый Массив;
			ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор);
			ПодключитьНайденныеКлиентскиеПлагиныНаСервере(ПомещенныеФайлы, ИдентификаторыПлагинов);
		КонецЕсли;	 
	Иначе
		ПодключитьНайденныеКлиентскиеПлагиныНаСервере(Новый Массив, ИдентификаторыПлагинов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПоискаКлиентскихПлагиновЗавершение(Знач ПомещенныеФайлы, Знач ДополнительныеПараметры) Экспорт
	
	ПодключитьНайденныеКлиентскиеПлагиныНаСервере(ПомещенныеФайлы, ДополнительныеПараметры.ИдентификаторыПлагинов);

КонецПроцедуры

&НаКлиенте
Функция Плагин(Знач Идентификатор) Экспорт
	
	ОбъектПлагин = Неопределено;
	ИдентификаторБезПрефиксовПодсистемы = Идентификатор; 
	Если КэшФормПлагинов.Свойство(ИдентификаторБезПрефиксовПодсистемы) Тогда
		ОбъектПлагин = КэшФормПлагинов[ИдентификаторБезПрефиксовПодсистемы];		
	КонецЕсли;
	
	Если ОбъектПлагин = Неопределено Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Неизвестный идентификатор плагина: <%1>"),
			Идентификатор
		);
	ИначеЕсли ОбъектПлагин = Истина Тогда
		// загрузка клиентского плагина "По требованию"
		ИмяПлагина = Объект.Плагины[Идентификатор];
		Попытка
			
			Если Объект.ВерсияПоставки = "single" Тогда
				ИмяФормыПлагина = ПолучитьИмяОбработкиVA() + ".Форма." + "Плагин_" +  ИмяПлагина;
			Иначе	
				ИмяФормыПлагина = "ВнешняяОбработка." + ИмяПлагина + ".Форма";
			КонецЕсли;	 
			ОбъектПлагин = ПолучитьФорму(ИмяФормыПлагина, , ЭтаФорма);
			ОбъектПлагин.УстановитьСлужебныеПеременные(ЭтаФорма);
			МодулиДляОтключения.Добавить(ОбъектПлагин);
			КэшФормПлагинов.Вставить(ИдентификаторБезПрефиксовПодсистемы, ОбъектПлагин);
		Исключение
			// TODO добавить поведение при отсутствии управляемой формы у плагина
			ВызватьИсключение;
		КонецПопытки;

	КонецЕсли;
	
	Возврат ОбъектПлагин;
КонецФункции

&НаКлиенте
Функция ПолучитьОписанияПлагиновПоТипу(Знач ТипПлагина) Экспорт
	Результат = ПолучитьОписанияПлагиновПоТипуНаСервере(ТипПлагина);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗагрузкаПлагиновЗавершение() Экспорт
	
	ПодключитьОбработчикОжидания("ПослеОткрытияФормы", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ДляАвтотестирования

// Позволяет получить доступ к переменной КонтекстСохраняемый тестируемой формы VA
&НаКлиенте
Функция ПолучитьКонтекстСохраняемый() Экспорт
	Возврат ОбъектКонтекстСохраняемый; 
КонецФункции	

&НаКлиенте
Процедура ПолучитьТекстШагаИзТекстаФичиЕслиОнТамЗадан(Текст, Шаг, Сценарий) Экспорт
	МассивТекстФичи = Сценарий.МассивТекстФичи;
	
	СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи, "[autodoc.mute]", Шаг.НомерСтрокиВФиче);
	Если СлужебнаяСтрока <> Неопределено Тогда
		Текст = "<НЕ ОЗВУЧИВАТЬ>";
		Возврат;
	КонецЕсли;
	
	СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи, "[autodoc.text]", Шаг.НомерСтрокиВФиче);
	Если Не ЗначениеЗаполнено(СлужебнаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ОбработкаПараметровШага", Истина);
	ПараметрыОбработки.Вставить("ВычислитьВыражения", Истина);
	ПараметрыОбработки.Вставить("Шаг", Шаг);
	ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока, ПараметрыОбработки);
	
	Текст = СлужебнаяСтрока;
КонецПроцедуры

&НаКлиенте
Процедура СделатьСлужебноеОповещение()Экспорт
	ПодключитьОбработчикОжидания("ДляСлужебногоОповещения", 1, Истина);
КонецПроцедуры

&НаКлиенте
Функция РазвернутьВсеСтрокиДереваСлужебныйЭкспорт() Экспорт
	
	ДеревоФормыСтроки = Объект.ДеревоТестов.ПолучитьЭлементы();
	РазвернутьВсеСтрокиДерева(ДеревоФормыСтроки);
	
КонецФункции	

&НаКлиенте
Функция ВСтрокеЕстьРусскиеБуквы(Стр) Экспорт
	
	Возврат ВСтрокеЕстьРусскиеБуквыСлужебный(Стр);
	
КонецФункции	

&НаКлиенте
Функция ЭтоАвтокнопкиТаблиц(ИмяЭлемента, Элем) Экспорт
	
	ИмяРодителя = Неопределено;
	Если Прав(ИмяЭлемента, 5) = "Найти" Тогда
		ИмяРодителя = Лев(ИмяЭлемента, СтрДлина(ИмяЭлемента) - 5);
	ИначеЕсли Прав(ИмяЭлемента, 6) = "Найти1" Тогда
		ИмяРодителя = Лев(ИмяЭлемента, СтрДлина(ИмяЭлемента) - 6);
	ИначеЕсли Прав(ИмяЭлемента, 13) = "ОтменитьПоиск" Тогда
		ИмяРодителя = Лев(ИмяЭлемента, СтрДлина(ИмяЭлемента) - 13);
	ИначеЕсли Прав(ИмяЭлемента, 14) = "ОтменитьПоиск1" Тогда
		ИмяРодителя = Лев(ИмяЭлемента, СтрДлина(ИмяЭлемента) - 14);
	ИначеЕсли Прав(ИмяЭлемента, 23) = "ПоискПоТекущемуЗначению" Тогда
		ИмяРодителя = Лев(ИмяЭлемента, СтрДлина(ИмяЭлемента) - 23);
	ИначеЕсли Прав(ИмяЭлемента, 24) = "ПоискПоТекущемуЗначению1" Тогда
		ИмяРодителя = Лев(ИмяЭлемента, СтрДлина(ИмяЭлемента) - 24);
	ИначеЕсли Прав(ИмяЭлемента, 13) = "ВывестиСписок" Тогда
		ИмяРодителя = Лев(ИмяЭлемента, СтрДлина(ИмяЭлемента) - 13);
	ИначеЕсли Прав(ИмяЭлемента, 8) = "Добавить" Тогда
		ИмяРодителя = Лев(ИмяЭлемента, СтрДлина(ИмяЭлемента) - 8);
	ИначеЕсли Прав(ИмяЭлемента, 23) = "ЗакончитьРедактирование" Тогда
		ИмяРодителя = Лев(ИмяЭлемента, СтрДлина(ИмяЭлемента) - 23);
	ИначеЕсли Прав(ИмяЭлемента, 8) = "Изменить" Тогда
		ИмяРодителя = Лев(ИмяЭлемента, СтрДлина(ИмяЭлемента) - 8);
	ИначеЕсли Прав(ИмяЭлемента, 16) = "ПереместитьВверх" Тогда
		ИмяРодителя = Лев(ИмяЭлемента, СтрДлина(ИмяЭлемента) - 16);
	ИначеЕсли Прав(ИмяЭлемента, 15) = "ПереместитьВниз" Тогда
		ИмяРодителя = Лев(ИмяЭлемента, СтрДлина(ИмяЭлемента) - 15);
	ИначеЕсли Прав(ИмяЭлемента, 11) = "Скопировать" Тогда
		ИмяРодителя = Лев(ИмяЭлемента, СтрДлина(ИмяЭлемента) - 11);
	ИначеЕсли Прав(ИмяЭлемента, 30) = "СортироватьСписокПоВозрастанию" Тогда
		ИмяРодителя = Лев(ИмяЭлемента, СтрДлина(ИмяЭлемента) - 30);
	ИначеЕсли Прав(ИмяЭлемента, 27) = "СортироватьСписокПоУбыванию" Тогда
		ИмяРодителя = Лев(ИмяЭлемента, СтрДлина(ИмяЭлемента) - 27);
	ИначеЕсли Прав(ИмяЭлемента, 7) = "Удалить" Тогда
		ИмяРодителя = Лев(ИмяЭлемента, СтрДлина(ИмяЭлемента) - 7);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ИмяРодителя) Тогда
		Попытка
			Если ТипЗнч(Ванесса.Элементы[ИмяРодителя]) = Тип("ТаблицаФормы") Тогда
				Возврат Истина;
			КонецЕсли;	 
		Исключение
		КонецПопытки;
	КонецЕсли;	 
	
	Возврат Ложь;
	
КонецФункции	

#КонецОбласти

#Область ПрочиеЭкспортные

&НаКлиенте
Функция КешСнипетовНаКлиенте() Экспорт
	Возврат КешСнипетовНаКлиенте; 
КонецФункции	 

&НаКлиенте
Функция ИменаНайденныхEpfНаКлиенте() Экспорт
	Возврат ИменаНайденныхEpfНаКлиенте; 
КонецФункции	 

&НаКлиенте
Процедура ПослеВыбораВетки(SelectedElement, AdditionalParameters) Экспорт
	МодульРаботаСGit().ПослеВыбораВетки(SelectedElement, AdditionalParameters);
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияВетки(Значение, ДопПараметры) Экспорт
	
	Данные = ПрочитатьОбъектJSON(Значение);
	Если Данные.Success Тогда
		Если ТипЗнч(Данные.result) = Тип("Массив") Тогда
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.ЗагрузитьЗначения(Данные.result);
			СписокЗначений.Добавить(1, "<" + Локализовать("Создать новую") + ">");
			ВыбранныйЭлемент = СписокЗначений.НайтиПоЗначению(Элементы.ДеревоGitВыборВетки.Заголовок);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораВетки", ЭтаФорма);
			ShowChooseFromList(ОписаниеОповещения, СписокЗначений, Элементы.ДеревоGitВыборВетки, ВыбранныйЭлемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СлужебныеДанныеДляПарсераФич() Экспорт
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтрокаПробелов", СтрокаПробелов);
	СтруктураПараметров.Вставить("КешСнипетов", КешСнипетов);
	Возврат СтруктураПараметров; 
КонецФункции	 

&НаКлиенте
Процедура ОбработкаПослеПомещенияФайлаДвижкаTTS(Результат, АдресХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	НовыеДополнительныеПараметры = Новый Структура;
	НовыеДополнительныеПараметры.Вставить("ИмяФайла", ВыбранноеИмяФайла);

	ИмяОбработки = ПодключитьВнешнююОбработкуСервер(АдресХранилища, ЕстьЗащитаОтОпасныхДействий, НовыеДополнительныеПараметры);
	ДополнительныеПараметры.Вставить("ИмяОбработки", ИмяОбработки);
	
	ФормаОбработкиПроизвольногоДвижкаTTS = ПолучитьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма.Форма",,, Истина);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Истина);
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаПослеПомещенияФайла(Результат, АдресХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	КопияДополнительныеПараметры = СкопироватьСтруктуру(ДополнительныеПараметры);
	КопияДополнительныеПараметры.Вставить("ИмяФайла", ВыбранноеИмяФайла);

	ИмяОбработки = ПодключитьВнешнююОбработкуСервер(АдресХранилища, ЕстьЗащитаОтОпасныхДействий, КопияДополнительныеПараметры);
	ДополнительныеПараметры.Вставить("ИмяОбработки", ИмяОбработки);
	
	Если ДополнительныеПараметры.Свойство("ПодключитьФормуВСлужебнуюПеременную") Тогда
		СлужебнаяПеременная = ПолучитьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма." + ДополнительныеПараметры.ИмяФормы,,, Истина);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачатьПолучитьВремяИзмененияФайла(ВерсияФайла, ДополнительныеПараметры) Экспорт
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];
	СтруктураФайла.Вставить("ВерсияФайла", ВерсияФайла);
	
	ОбработатьАсинронноСледующийФайл(ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачатьПроверкуЭтоКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];
	СтруктураФайла.Вставить("ЭтоКаталог", ЭтоКаталог);
	
	Отладка("ОбработчикНачатьПроверкуЭтоКаталог. " + СтруктураФайла.ИмяПараметра + ": " + СтруктураФайла.ИмяФайла + ". ЭтоКаталог=" + ЭтоКаталог);
	
	Если ЭтоКаталог Тогда
		ОбработатьАсинронноСледующийФайл(ДополнительныеПараметры);
	Иначе	
		Файл = Новый Файл(СтруктураФайла.ИмяФайла);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикНачатьПолучитьВремяИзмененияФайла", ЭтаФорма, ДополнительныеПараметры);
		Файл.НачатьПолучениеВремениИзменения(ОписаниеОповещения);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачатьПроверкуСуществования(Существует, ДополнительныеПараметры) Экспорт
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];
	СтруктураФайла.Вставить("Существует", Существует);
	
	Отладка("ОбработчикНачатьПроверкуСуществования. " + СтруктураФайла.ИмяПараметра + ": " + СтруктураФайла.ИмяФайла + ". Существует=" + Существует);
	
	Если Существует Тогда
		Файл = Новый Файл(СтруктураФайла.ИмяФайла);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикНачатьПроверкуЭтоКаталог", ЭтаФорма, ДополнительныеПараметры);
		Файл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	Иначе
		ОбработатьАсинронноСледующийФайл(ДополнительныеПараметры);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачатьПолучитьВремяИзмененияФайлаМассив(ВерсияФайла, ДополнительныеПараметры) Экспорт
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];
	НайденныеФайлы = СтруктураФайла.НайденныеФайлы;
	
	ИДФайлаДляОбработки = СтруктураФайла.ИДФайлаДляОбработки;
	НайденныеФайлы[ИДФайлаДляОбработки].Вставить("ВерсияФайла", ВерсияФайла);
	
	ПолучитьВерсиюФайловАсинхронно(ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачатьПоискФайлов(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];
	
	НайденныеФайлыМассив = Новый Массив;
	Для Каждого Элем Из НайденныеФайлы Цикл
		НайденныеФайлыМассив.Добавить(Новый Структура("Файл", Элем));
	КонецЦикла;	
	СтруктураФайла.Вставить("НайденныеФайлы", НайденныеФайлыМассив);
	
	СтруктураФайла.Вставить("ИДФайлаДляОбработки", - 1);
	ПолучитьВерсиюФайловАсинхронно(ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросНадоЛиЗагружатьФичи(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ЗагрузитьФичи();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗаписиДвоичныхДанныхПрикрепленныеФайлы(ДополнительныеПараметры) Экспорт
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайлаЗагрузкаФичи(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Объект.КаталогФич = ВыбранныеФайлы[0];
	
	СохранитьНастройкиВХранилище("КаталогФич", Объект.КаталогФич , ПараметрыДляСохраненияНастроек());
	
	// Очистим кеш при смене фичи
	КешStepDefinition.Очистить();
	
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	Если КодВозврата <> 0 Тогда 
		Отладка(КодВозврата);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗапускТестаФайлаОзвучки(КодВозврата, ДополнительныеПараметры) Экспорт
	Если КодВозврата <> 0 Тогда 
		Отладка(КодВозврата);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОткрытьКаталогФичи(КодВозврата, ДополнительныеПараметры) Экспорт
	Если КодВозврата <> 0 Тогда 
		Отладка(КодВозврата);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьНастройкиВФайлПродолжение(Ответ, ДополнительныеПараметры) Экспорт 
		
	Если Ответ = КодВозвратаДиалога.ОК Тогда		
		СохранитьНастройки();
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);		
	Диалог.Заголовок = Локализовать("Файл сохранения настроек VA");
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Фильтр = Локализовать("Настройки VA (*.json)|*.json");
	Диалог.ПолноеИмяФайла = "VAParams";
	Диалог.Расширение = "json";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьНастройкиВФайлЗавершение", ЭтаФорма);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Функция МетаданныеИмя() Экспорт
	Возврат МетаданныеИмяСервер();
КонецФункции

&НаКлиенте
Процедура ПодготовитьСценарийКВыполнению() Экспорт
	
	#Если НЕ ВебКлиент Тогда
	
	Если ЭтоLinux Тогда
		Разделитель = "/";
	Иначе
		Разделитель = "\";
	КонецЕсли;
	 
	ИмяВременногоFeature = ПолучитьИмяВременногоФайла("feature");
	ВременныйФайл = Новый Файл(ИмяВременногоFeature);
	КаталогВременногоFeature = ВременныйФайл.Путь + "vanessa-automation";
	
	УдалитьКаталогКомандаСистемы(КаталогВременногоFeature);
	СоздатьКаталогКомандаСистемы(КаталогВременногоFeature);	
	
	ИмяВременногоFeature = КаталогВременногоFeature + Разделитель + "temp.feature";
	
	ЗТ = Новый ЗаписьТекста(ИмяВременногоFeature, КодировкаТекста.UTF8, , Истина); 
	Если Лев(СокрЛ(Объект.СгенерированныйСценарий), 9) <> "#language"
		И Лев(СокрЛ(Объект.СгенерированныйСценарий), 10) <> "# language" Тогда
		// надо дописать заголовок сценария
		Если Объект.ЯзыкГенератораGherkin = "en" Тогда
			СтрокаЗаголовка = "#language: en
			|
			|@tree
			|
			|Functionality: <description features>
			|
			|As <Role>
			|I want <functional description>
			|To <business effect>
			|
			|Scenario: <description of the scenario>
			|
			|";
		Иначе	
			СтрокаЗаголовка = "#language: ru
			|
			|@tree
			|
			|Функционал: <описание фичи>
			|
			|Как <Роль> я хочу
			|<описание функционала> 
			|чтобы <бизнес-эффект> 
			|
			|Сценарий: <описание сценария> 
			|
			|";
		КонецЕсли;	 
		
		ЗТ.ЗаписатьСтроку(СтрокаЗаголовка);
	КонецЕсли;	 
	ЗТ.ЗаписатьСтроку(Объект.СгенерированныйСценарий);
	ЗТ.Закрыть();
	
	Объект.КаталогФич = ИмяВременногоFeature;
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.VanessaEditor;
	Иначе	
		ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоТестов;
	КонецЕсли;	 
	ЗагрузитьФичи();
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУстановкуСнятиеБрейкпоинта() Экспорт
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
			Возврат;
		КонецЕсли;	 
		ПолучитьVanessaEditor().toggleBreakpoint();
	Иначе	
		
		ТекущаяСтрокаДереваИдСтроки = Неопределено;
		Если Элементы.ДеревоТестов.ТекущиеДанные <> Неопределено Тогда
			ТекущаяСтрокаДереваИдСтроки = Элементы.ДеревоТестов.ТекущиеДанные.ИдСтроки;
		КонецЕсли;	 
		
		Если ТекущаяСтрокаДереваИдСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		Если НЕ ЭтуСтрокуМожноИсполнить(Элементы.ДеревоТестов.ТекущиеДанные) Тогда
			Возврат;
		КонецЕсли;	 
		
		Элементы.ДеревоТестов.ТекущиеДанные.Брейкпоинт = Не Элементы.ДеревоТестов.ТекущиеДанные.Брейкпоинт;
		Брейкпоинт                                     = Элементы.ДеревоТестов.ТекущиеДанные.Брейкпоинт;
		
		Элементы.ДеревоТестовБрейкпоинт.Заголовок = " ";
		
		Если Брейкпоинт Тогда
			//ПолныйПуть потому что в дереве может быть загружено много фич
			ДобавитьБрейкПоинт(Элементы.ДеревоТестов.ТекущиеДанные.ПолныйПуть);
		Иначе	
			УдалитьБрейкПоинт(Элементы.ДеревоТестов.ТекущиеДанные.ПолныйПуть);
		КонецЕсли;	 
		
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуПодключенияTestClient() Экспорт
	ВозниклаОшибкаПодключенияTestClient = Истина;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТаблицуGherkinИзМакета(Макет) Экспорт
	ТаблицаGherkin = Новый Массив;
	
	Для Ккк = 1 По Макет.ВысотаТаблицы Цикл
		СтрокаТаблицы = Новый Структура;
		Для Ррр = 1 По Макет.ШиринаТаблицы Цикл
			СтрокаТаблицы.Вставить("Кол" + Формат(Ррр, "ЧГ=; ЧН=0"), Макет.Область(Ккк, Ррр, Ккк, Ррр).Текст);
		КонецЦикла;	
		
		ТаблицаGherkin.Добавить(СтрокаТаблицы);
	КонецЦикла;	
	
	Возврат ТаблицаGherkin; 
КонецФункции	 

&НаКлиенте
Процедура ПослеПоместитьВБуферОбменаVA(Результат, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ПродолжитьВыполнениеШагов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЧтенияФичаФайловПарсеромИзКомпоненты(СтруктураПараметров) Экспорт
	Если СтруктураПараметров.Свойство("РассчитыватьСтатистику") Тогда
		Если СтруктураПараметров.КоличествоPending > 0 Тогда
			СтрокаНеРеализованныхСпипетовВсего = Новый ФорматированнаяСтрока(
					"(" + Формат(СтруктураПараметров.КоличествоPending, "ЧГ=; ЧН=0") + ")", 
					Новый Шрифт(, , Истина), Новый Цвет(255, 92, 0)); // Жирный, оранжевый
		Иначе
			СтрокаНеРеализованныхСпипетовВсего = "";
		КонецЕсли;								  
		
		ОбщаяСтатистикаПоФиче = "" + Формат(СтруктураПараметров.КоличествоФич, "ЧГ=; ЧН=0") + "/" + Формат(СтруктураПараметров.КоличествоСценариев, "ЧГ=; ЧН=0") + "/" + Формат(СтруктураПараметров.КоличествоШагов, "ЧГ=; ЧН=0");
		ОбщаяСтатистикаПоФиче = Новый ФорматированнаяСтрока(ОбщаяСтатистикаПоФиче, Новый Шрифт(, , Истина));
		ОбщаяСтрока = "";
		СтруктураПараметров.Вставить("Статистика_Заголовок", Новый ФорматированнаяСтрока(ОбщаяСтатистикаПоФиче, СтрокаНеРеализованныхСпипетовВсего, ОбщаяСтрока));
		Если ТипЗнч(глСтруктураПараметров) = Тип("Структура") Тогда
			глСтруктураПараметров.Вставить("Статистика_Заголовок", Новый ФорматированнаяСтрока(ОбщаяСтатистикаПоФиче, СтрокаНеРеализованныхСпипетовВсего, ОбщаяСтрока));
		КонецЕсли;	
		
	КонецЕсли;	 
	
	МассивДействий = Неопределено;
	ДанныеФичи = Неопределено;
	Если СтруктураПараметров.Свойство("ДополнительныеПараметры")
		И ТипЗнч(СтруктураПараметров.ДополнительныеПараметры) = Тип("Структура")
		И СтруктураПараметров.ДополнительныеПараметры.Свойство("МассивДействий") Тогда
		МассивДействий = СтруктураПараметров.ДополнительныеПараметры.МассивДействий;
	КонецЕсли;	 
	Если СтруктураПараметров.Свойство("ДанныеФичи") Тогда
		ДанныеФичи = СтруктураПараметров.ДанныеФичи;
	КонецЕсли;	 
	ЗаполнитьДанныеВозможнаОптимизацияЗагрузкиФичи(СтруктураПараметров, ДанныеФичи, МассивДействий);	
	ДанныеСекцииПеременные = СтруктураПараметров.ДанныеСекцииПеременные;
	
	ДоступностьЭлементовПанелиВоВремяЗагрузкиФичи(Истина);
	ЗаполнитьДеревоФичПродолжение2(глПараметрыЗаполнитьДеревоФичПродолжение2.СтруктураПараметров,
		глПараметрыЗаполнитьДеревоФичПродолжение2.ДополнительныеПараметры);
КонецПроцедуры 

&НаКлиенте
Процедура ВключитьИспользованиеВнешнейКомпоненты() Экспорт
	
	Объект.ИспользоватьКомпонентуVanessaExt = Истина;
	ИспользоватьКомпонентуVanessaExtПриИзменении();
	
КонецПроцедуры 

&НаКлиенте
Процедура ВключитьИспользованиеВнешнейКомпонентыИзСтраницыWelcome() Экспорт
	
	НадоОбновитьСтраницуWelcome = Истина;
	НадоПоказатьПодсказкуРекомендуетсяСохранитьНастройки = Истина;
	ВключитьИспользованиеВнешнейКомпоненты();
	
КонецПроцедуры 

&НаКлиенте
Функция КаталогВременнойФичиСодержащейЭкспортныеСценарииИзОсновнойПоставки() Экспорт
	
	#Если НЕ ВебКлиент Тогда
	
	Если ЗначениеЗаполнено(КаталогВременнойФичиСодержащейЭкспортныеСценарииИзОсновнойПоставки) Тогда
		Возврат КаталогВременнойФичиСодержащейЭкспортныеСценарииИзОсновнойПоставки; 
	КонецЕсли;	 
	
	Если ТекстВстроенныхСценариевСервер = Неопределено Тогда
		ТекстВстроенныхСценариевСервер = ДанныеТекстВстроенныхСценариевСервер;
		ДанныеТекстВстроенныхСценариевСервер = "";
	КонецЕсли;
	
	ТекстФичи = ТекстВстроенныхСценариевСервер;
	
	КаталогВременнойФичиСодержащейЭкспортныеСценарииИзОсновнойПоставки = ПолучитьИмяВременногоФайла();
	СоздатьКаталогКомандаСистемы(КаталогВременнойФичиСодержащейЭкспортныеСценарииИзОсновнойПоставки);
	
	ИмяВременнойФичи = ПолучитьИмяВременногоФайла("feature");
	ЗТ = Новый ЗаписьТекста(ИмяВременнойФичи, "UTF-8",, Истина); 
	ЗТ.Записать(ТекстФичи); 
	ЗТ.Закрыть();
	
	ФайлВременнойФичи = Новый Файл(ИмяВременнойФичи);
	
	ПереместитьФайлКомандаСистемы(ФайлВременнойФичи.ПолноеИмя,
		ДополнитьСлешВПуть(КаталогВременнойФичиСодержащейЭкспортныеСценарииИзОсновнойПоставки) + "VASingleExport.feature");
		
	Возврат КаталогВременнойФичиСодержащейЭкспортныеСценарииИзОсновнойПоставки; 
	
	#КонецЕсли
		
КонецФункции	 

&НаКлиенте
Функция ПолучитьСтруктуруТекущегоШагаИзМассивСценариевДляВыполнения() Экспорт
	
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	Возврат Шаги[ТекИД_ШагаВМассиве];
	
КонецФункции	

// Проверяет, что каждая настройка корректно указана в специальных методах
&НаКлиенте
Процедура ПроверитьРегистрациюНастроекVA() Экспорт 
	
	СтруктураПараметровЗапуска = СтруктураПараметровЗапуска();
	КоллекцияКомандЗапуска = КоллекцияКомандЗапуска();
	ПроверитьРегистрациюНастроекVAСервер(СтруктураПараметровЗапуска, КоллекцияКомандЗапуска);
	
КонецПроцедуры

#КонецОбласти

#Область ПереводТекста

// Переводит текст с русского языка на переданный Язык или на Объект.ЯзыкГенератораGherkin
&НаКлиенте
Функция ПеревестиТекст(Текст, Язык = Неопределено, АдресВХранилище = Неопределено) Экспорт
	Если Язык = Неопределено Тогда
		Язык = Объект.ЯзыкГенератораGherkin;
	КонецЕсли;	 
	
	ДанныеПеревода = Новый Структура;
	ДанныеПеревода.Вставить("ЯзыкПеревода", Язык);
	Если КешДанныеПеревода.ТаблицаПеревода = Неопределено Тогда
		ДанныеПеревода.Вставить("ДвоичныеДанныеФайлПеревода", ПолучитьФайлыПеревода());
	Иначе	
		ДанныеПеревода.Вставить("ДвоичныеДанныеФайлПеревода", Неопределено);
	КонецЕсли;	 
	ДанныеПеревода.Вставить("ТекстДляПеревода", Текст);
	ДанныеПеревода.Вставить("КешДанныеПеревода", КешДанныеПеревода);
	ДвДанныеvbFeatureReader = Неопределено;
	Если Объект.ВерсияПоставки = "standart" Тогда
		Если НЕ ВозможнаОптимизацияРаботыСФайлами Тогда
			ДвДанныеvbFeatureReader = Новый ДвоичныеДанные(ПолучитьПутьКFeatureReader());
		КонецЕсли;	 
	КонецЕсли;	 
	ДанныеПеревода.Вставить("ДвДанныеvbFeatureReader", ДвДанныеvbFeatureReader);
	ДанныеПеревода.Вставить("Перевод", Неопределено);
	ДанныеПеревода.Вставить("СтруктураПараметров", СлужебныеДанныеДляПарсераФич());
	
	СделатьПереводСгенерированногоТекстаGherkinСервер(ДанныеПеревода);
	Если ДанныеПеревода.Перевод <> Неопределено Тогда
		КешДанныеПеревода.Вставить("Язык", Язык);
		КешДанныеПеревода.Вставить("ТаблицаПеревода", ДанныеПеревода.ТаблицаПеревода);
		
		Для Каждого Элем Из ДанныеПеревода.КешДанныеПеревода.СоответствиеПоЯзыкам Цикл
			КешДанныеПеревода.СоответствиеПоЯзыкам.Вставить(Элем.Ключ, Элем.Значение);
		КонецЦикла;	 
		
		АдресВХранилище = ДанныеПеревода.ТаблицаПеревода;
		КешСнипетов = ДанныеПеревода.СтруктураПараметров.КешСнипетов;
		
		Возврат ДанныеПеревода.Перевод;
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция ДанныеПереводаСообщенийПользователю() Экспорт
	Возврат Объект.ТекстСообщенийПользователю; 
КонецФункции	 

#КонецОбласти

#Область SikuliXСервер

// Сбрасывает флаг подключения SikuliXServer
&НаКлиенте
Функция СброситьФлагЗапускаSikuliXServer() Экспорт
	SikuliXСеверЗапущен = Ложь;
КонецФункции	 

// Вызывает скрипт SikuliX для перемещения курсора к картинке
&НаКлиенте
Функция ПереместитьКурсорМышкиККартинке(ПутьКФайлу) Экспорт
	Возврат ВыполнитьSikuliСкрипт(Объект.КаталогИнструментов
	    + "\tools\Sikuli\MoveMouseToPicture.sikuli --args """ + ПутьКФайлу + """" , -1, Истина);
	КонецФункции
	
// Вызывает скрипт SikuliX для эмуляции клика по картинке
&НаКлиенте
Функция КликЛевойКнопкойМышкиПоКартинке(ПутьКФайлу) Экспорт
	Возврат ВыполнитьSikuliСкрипт(Объект.КаталогИнструментов
	    + "\tools\Sikuli\ClickOnPicture.sikuli --args """ + ПутьКФайлу + """" , -1, Истина);
КонецФункции

// Перемещает курсор к флагу
&НаКлиенте
Процедура ПереместитьКурсорКФлагу(ПолеРеквизит) Экспорт
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ЭмуляцияДвиженияМышкиКомпонентаВБраузере() Тогда
		КликПоФлагуБраузер(ПолеРеквизит);
		МодульРаботаСБраузером().АнимацияКлика(ПолеРеквизит);
	ИначеЕсли ЭмуляцияДвиженияМышкиКомпонентаUIAutomation() Тогда
		КликПоФлагуUIAutomation(ПолеРеквизит);
		МодульРаботаСБраузером().АнимацияКлика(ПолеРеквизит);
	Иначе	
		ПереместитьКурсорМышкиПоСгенерированнойКартинке(ПолеРеквизит.ТекстЗаголовка + ":", "MainForm");
	КонецЕсли;	 
КонецПроцедуры 

// Перемещает курсор к флагу
&НаКлиенте
Процедура ПереместитьКурсорКПолю(ПолеРеквизит, ЭтоТаблица = Ложь) Экспорт
	Если ЭмуляцияДвиженияМышкиКомпонентаВБраузере() Тогда
		КликПоПолюБраузер(ПолеРеквизит, ЭтоТаблица);
	ИначеЕсли ЭмуляцияДвиженияМышкиКомпонентаUIAutomation() Тогда
		КликПоПолюUIAutomation(ПолеРеквизит, ЭтоТаблица);
	КонецЕсли;	 
КонецПроцедуры 

// Выбирает значение переключателя
&НаКлиенте
Процедура ВыбратьЗначениеПереключателя(ПолеРеквизит, Значение) Экспорт
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		ВыбратьВариантПереключателя(ПолеРеквизит, Значение);
		Возврат;
	КонецЕсли;	
	
	Если ЭмуляцияДвиженияМышкиКомпонентаВБраузере() Тогда
		КликПоПереключателюБраузер(ПолеРеквизит, Значение);
		МодульРаботаСБраузером().АнимацияКлика(ПолеРеквизит);
		ВыбратьВариантПереключателя(ПолеРеквизит, Значение);
	ИначеЕсли ЭмуляцияДвиженияМышкиКомпонентаUIAutomation() Тогда
		КликПоПереключателюUIAutomation(ПолеРеквизит, Значение);
		ВыбратьВариантПереключателя(ПолеРеквизит, Значение);
	Иначе	
		КликЛевойКнопкойМышкиПоСгенерированнойКартинке(Значение, "MainForm");
	КонецЕсли;	 
	
КонецПроцедуры 

// Активизирует закладку
&НаКлиенте
Процедура АктивизироватьЗакладку(ПолеЗакладка) Экспорт
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		ПолеЗакладка.Активизировать();
		Возврат;
	КонецЕсли;	
	
	Если ЭмуляцияДвиженияМышкиКомпонентаВБраузере() Тогда
		КликПоЗакладкеБраузер(ПолеЗакладка);
	ИначеЕсли ЭмуляцияДвиженияМышкиКомпонентаUIAutomation() Тогда
		КликПоЗакладкеUIAutomation(ПолеЗакладка);
	Иначе	
		КликЛевойКнопкойМышкиПоСгенерированнойКартинке(ПолеЗакладка.ТекстЗаголовка, "MainForm");
	КонецЕсли;	 
	
КонецПроцедуры 

// Нажимает на кнопку КИ
&НаКлиенте
Процедура НажатьНаКнопкуКИ(Кнопка, Тип = "ПанельРазделов") Экспорт
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		Кнопка.Нажать();
		Возврат;
	КонецЕсли;	
	
	Если Объект.ИспользоватьSikuliXСервер И Объект.ЗаписьВидеоЭмулироватьДвиженияМышкиSikuliX Тогда
		КликЛевойКнопкойМышкиПоСгенерированнойКартинке(Кнопка.ТекстЗаголовка, "CommandInterface");
	ИначеЕсли ЭмуляцияДвиженияМышкиКомпонентаВБраузере() Тогда
			
		Если Тип = "ПанельРазделов" Тогда
			КликПоКнопкеПанельРазделовБраузер(Кнопка);
		ИначеЕсли Тип = "ПанельОткрытых" Тогда
			КликПоКнопкеПанельОткрытыхБраузер(Кнопка);
		Иначе	
			КликПоКнопкеПанельФункцийБраузер(Кнопка);
		КонецЕсли;	 	
	ИначеЕсли ЭмуляцияДвиженияМышкиКомпонентаUIAutomation() Тогда
		Если Тип = "ПанельРазделов" Тогда
			КликПоКнопкеКИUIAutomation(Кнопка, "TabItem", Ложь);
		ИначеЕсли Тип = "ПанельФункций" Тогда	
			КликПоКнопкеКИUIAutomation(Кнопка, "MenuItem", Ложь);
		ИначеЕсли Тип = "ПанельОткрытых" Тогда
			Кнопка.Нажать();
		КонецЕсли;	 	
	КонецЕсли;	 
КонецПроцедуры 

// Нажимает на кнопку конмандного интерфейса в окне
&НаКлиенте
Процедура НажатьВОкнеНаКнопкуКомандногоИнтерфейса(Кнопка) Экспорт
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		Кнопка.Нажать();
		Возврат;
	КонецЕсли;	
	
	Если ЭмуляцияДвиженияМышкиКомпонентаВБраузере() Тогда
		КликПоКнопкеКИВОкнеБраузер(Кнопка);
	ИначеЕсли ЭмуляцияДвиженияМышкиКомпонентаUIAutomation() Тогда
		Кнопка.Нажать();
		Возврат;
	Иначе	
		Кнопка.Нажать();
	КонецЕсли;	 
КонецПроцедуры 

// Нажимает на кнопку формы
&НаКлиенте
Процедура НажатьНаКнопкуФормы(Кнопка, ЭтоГиперссылка = Ложь, ЭмулироватьКлик = Ложь) Экспорт
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		Кнопка.Нажать();
		Возврат;
	КонецЕсли;	
	
	Если Объект.ИспользоватьSikuliXСервер И Объект.ЗаписьВидеоЭмулироватьДвиженияМышкиSikuliX Тогда
		Текст = ТекстДляГенерацииКартинкиПоКнопке(Кнопка.ТекстЗаголовка);
		КликЛевойКнопкойМышкиПоСгенерированнойКартинке(Текст, "MainForm");
	ИначеЕсли ЭмуляцияДвиженияМышкиКомпонентаВБраузере() Тогда
		КликПоКнопкеБраузер(Кнопка, ЭтоГиперссылка, ЭмулироватьКлик);
	ИначеЕсли ЭмуляцияДвиженияМышкиКомпонентаUIAutomation() Тогда
		Если ЭтоГиперссылка Тогда
			КликПоКнопкеКИUIAutomation(Кнопка, "Text", ЭтоГиперссылка);
		Иначе	
			КликПоКнопкеКИUIAutomation(Кнопка, "Button", ЭтоГиперссылка);
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры 

// Нажимает на гиперссылку у поля
&НаКлиенте
Процедура НажатьНаГиперссылкуВФорматированнойСтроке(ЭлементФормы, Гиперссылка) Экспорт
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		ЭлементФормы.НажатьНаГиперссылкуВФорматированнойСтроке(Гиперссылка);
		Возврат;
	КонецЕсли;	
	
	Если ЭмуляцияДвиженияМышкиКомпонентаВБраузере() Тогда
		Стр = ".querySelector('*[_url=""%1""]')";
		Стр = СтрЗаменить(Стр, "%1", Гиперссылка);
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Гиперссылка", Гиперссылка);
		ДопПараметры.Вставить("ФорматированнаяСтрока", Истина);
		
		КликПоЭлементуФормыБраузерСлужебный(ЭлементФормы, "elem", Истина, , Стр, , Ложь, , ДопПараметры);
		МодульРаботаСБраузером().АнимацияКлика(ЭлементФормы);
		ЭлементФормы.НажатьНаГиперссылкуВФорматированнойСтроке(Гиперссылка);
	ИначеЕсли ЭмуляцияДвиженияМышкиКомпонентаUIAutomation() Тогда
		ЭлементФормы.НажатьНаГиперссылкуВФорматированнойСтроке(Гиперссылка);
	КонецЕсли;	 
КонецПроцедуры 

//Перемещает курсор к активному элементу формы
&НаКлиенте
Процедура ПереместитьКурсорКТекущемуЭлементу(Элемент) Экспорт
	Если НЕ ЭмуляцияДвиженияМышкиКомпонентаВБраузере() Тогда
		Возврат;
	КонецЕсли;	 
	
	КликПоЭлементуФормыБраузерСлужебный(Элемент, "selected", Истина);
	
КонецПроцедуры 

//Нажимает на кнопку очистки у поля
&НаКлиенте
Процедура ПереместитьКурсорККнопкеОчиститьПоле(ПолеРеквизит) Экспорт
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		Возврат;
	КонецЕсли;	

	Если ЭмуляцияДвиженияМышкиКомпонентаВБраузере() Тогда
		КликПоКнопкеПоляБраузер(ПолеРеквизит, "iCLR");
	ИначеЕсли ЭмуляцияДвиженияМышкиКомпонентаUIAutomation() Тогда
		КликПоКнопкеПоляUIAutomation(ПолеРеквизит, "ОчисткаЭлемента", Неопределено);
	КонецЕсли;	 
	
КонецПроцедуры 

// Пытается найти на форме строку таблицы с помощью UI Automation и отрисовать клик мышкой
&НаКлиенте
Процедура ВыборТекущейСтрокиТаблицыUIAutomation(ТаблицаФормы) Экспорт
	
	ТекущиеДанныеКлиентаТестирования = ТекущиеДанныеКлиентаТестирования();
	
	Если ЭмуляцияДвиженияМышкиКомпонентаUIAutomation() Тогда
		Попытка              
			
			ВыделенныеСтроки = ТаблицаФормы.ПолучитьВыделенныеСтроки();
			Если ВыделенныеСтроки.Количество() > 0 Тогда
				ТекСтрока = ВыделенныеСтроки[0];
				
				ТекстЯчейки = ТаблицаФормы.ПолучитьТекстЯчейки();
				Для Каждого ТекКолонкаКлючЗначение Из ТекСтрока Цикл
					Если ТекстЯчейки = ТекКолонкаКлючЗначение.Значение Тогда
						СтрокаПоиска = ТекКолонкаКлючЗначение.Значение + " " + ТекКолонкаКлючЗначение.Ключ;
						
						ДанныеПолей = НайтиЭлементыПроцессаUIAutomation(
							ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, СтрокаПоиска);
							
						Если ТипЗнч(ДанныеПолей) = Тип("Массив") И ДанныеПолей.Количество() = 1 Тогда
							ПереместитьМышкуПоКоординатамUIAutomation(ДанныеПолей[0].Size);
							МодульРаботаСБраузером().АнимацияКлика(ТаблицаФормы);
							Возврат;
						КонецЕсли;	
							
					КонецЕсли;	
				КонецЦикла;	

				Для Каждого ТекКолонкаКлючЗначение Из ТекСтрока Цикл
					Если НЕ ЗначениеЗаполнено(ТекКолонкаКлючЗначение.Значение) Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаПоиска = ТекКолонкаКлючЗначение.Значение + " " + ТекКолонкаКлючЗначение.Ключ;
					
					ДанныеПолей = НайтиЭлементыПроцессаUIAutomation(
						ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, СтрокаПоиска);
						
					Если ТипЗнч(ДанныеПолей) = Тип("Массив") И ДанныеПолей.Количество() = 1 Тогда
						ПереместитьМышкуПоКоординатамUIAutomation(ДанныеПолей[0].Size);
						МодульРаботаСБраузером().АнимацияКлика(ТаблицаФормы);
						Возврат;
					КонецЕсли;	
						
				КонецЦикла;	
			КонецЕсли;	
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

//Делает выбор точного значения из выпадающего списка
&НаКлиенте
Процедура ВыполнитьВыборИзВыпадающегоСписка(ПолеРеквизит, ВыбираемоеЗначение, ДопПараметры = Неопределено) Экспорт
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		ПолеРеквизит.ВыполнитьВыборИзВыпадающегоСписка(ВыбираемоеЗначение);
		Возврат;
	КонецЕсли;	
	
	Если ЭмуляцияДвиженияМышкиКомпонентаВБраузере() Тогда
		КликПоЗначениюВыпадающегоСпискаБраузер(ПолеРеквизит, ВыбираемоеЗначение);
	ИначеЕсли ЭмуляцияДвиженияМышкиКомпонентаUIAutomation() Тогда
		КликПоЗначениюВыпадающегоСпискаUIAutomation(ПолеРеквизит, ВыбираемоеЗначение, ДопПараметры);
	КонецЕсли;	 
КонецПроцедуры

//Закрывает окно клиентского приложения
&НаКлиенте
Процедура ЗакрытьОкноКлиентскогоПриложения(ЗакрываемоеОкно) Экспорт
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		ЗакрываемоеОкно.Закрыть();
		Возврат;
	КонецЕсли;	
	
	Если ЭмуляцияДвиженияМышкиКомпонентаВБраузере() Тогда
		КликПоКнопкеЗакрытияОкнаБраузер(ЗакрываемоеОкно);
	ИначеЕсли ЭмуляцияДвиженияМышкиКомпонентаUIAutomation() Тогда
		КликПоКнопкеЗакрытияОкнаUIAutomation(ЗакрываемоеОкно);
	КонецЕсли;	 
КонецПроцедуры

//Делает нажатие на кнопку создать у открытого выпадающего списка
&НаКлиенте
Процедура НажатиеНаКнопкуСоздать(ПолеРеквизит) Экспорт
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЭмуляцияДвиженияМышкиКомпонентаВБраузере() Тогда
		КликПоКнопкеПоляБраузер(ПолеРеквизит, "PlusBtn");
	ИначеЕсли ЭмуляцияДвиженияМышкиКомпонентаUIAutomation() Тогда
		ОткрытьВыпадающийСписок(ПолеРеквизит);
		НажатиеНаКнопкуСоздатьUIAutomation();
	КонецЕсли;
	
КонецПроцедуры 

// Перемещает курсор мыши к кнопке выбора выпадающего списка элемента
&НаКлиенте
Процедура ОткрытьВыпадающийСписок(ПолеРеквизит, ДопПараметры = Неопределено) Экспорт
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЭмуляцияДвиженияМышкиКомпонентаВБраузере() Тогда
		Попытка
			Если ПолеРеквизит.ВыпадающийСписокОткрыт() Тогда
				Возврат;
			КонецЕсли;	 
		Исключение
		КонецПопытки;
		
		КликПоКнопкеПоляБраузер(ПолеРеквизит, "iDLB");
	ИначеЕсли ЭмуляцияДвиженияМышкиКомпонентаUIAutomation() Тогда
		Попытка
			Если ПолеРеквизит.ВыпадающийСписокОткрыт() Тогда
				Возврат;
			КонецЕсли;	 
		Исключение
		КонецПопытки;
		
		Если НЕ ПолеРеквизит.ВыпадающийСписокОткрыт() Тогда
			КликПоКнопкеПоляUIAutomation(ПолеРеквизит, "ВыпадающийСписок", ДопПараметры);
			Попытка
				ПолеРеквизит.ОткрытьВыпадающийСписок();
				ПолеРеквизит.ОжидатьФормированияВыпадающегоСписка(5);
				ВнешняяКомпонентаДляСкриншотов.sleep(200);
				
				Если ТипЗнч(ДопПараметры) =  Тип("Структура") Тогда
					ДопПараметры.Вставить("ПроисходилоОткрытиеСписка", Истина);
				КонецЕсли;	 
				
			Исключение
			КонецПопытки;
		КонецЕсли;	 
		
	КонецЕсли;	 
КонецПроцедуры 

// Перемещает курсор мыши к кнопке выбора из списка выбора
&НаКлиенте
Процедура ОткрытьКнопкуВыбораБраузер(ПолеРеквизит) Экспорт
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЭмуляцияДвиженияМышкиКомпонентаВБраузере() Тогда
		КликПоКнопкеПоляБраузер(ПолеРеквизит, "iCB");
	ИначеЕсли ЭмуляцияДвиженияМышкиКомпонентаUIAutomation() Тогда
		Результат = КликПоКнопкеПоляUIAutomation(ПолеРеквизит, "ВыборИзСписка", Неопределено);
		//Если НЕ Результат Тогда
		//	Результат = КликПоКнопкеПоляUIAutomation(ПолеРеквизит, "ВыпадающийСписок", Неопределено);
		//КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

// Перемещает курсор мыши к кнопке открытия
&НаКлиенте
Процедура ОткрытьКнопкуОткрытияБраузер(ПолеРеквизит) Экспорт
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЭмуляцияДвиженияМышкиКомпонентаВБраузере() Тогда
		КликПоКнопкеПоляБраузер(ПолеРеквизит, "iOB");
	ИначеЕсли ЭмуляцияДвиженияМышкиКомпонентаUIAutomation() Тогда
		КликПоКнопкеПоляUIAutomation(ПолеРеквизит, "ОткрытиеЭлемента", Неопределено);
	КонецЕсли;	 
КонецПроцедуры

// Устанавливат профиль поиска картинки с текстом по имени профиля
&НаКлиенте
Процедура УстановитьПрофильПоискаКартинкиСТекстом(ИмяПрофиля, ДанныеПрофиля) Экспорт
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя", ИмяПрофиля);
	
	НайденныеСтроки = ПрофилиПоискаКартинокСТекстом.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаПрофилиПоискаКартинокСТекстом = НайденныеСтроки[0];
	Иначе	
		СтрокаПрофилиПоискаКартинокСТекстом = ПрофилиПоискаКартинокСТекстом.Добавить();
		СтрокаПрофилиПоискаКартинокСТекстом.Имя = ИмяПрофиля;
	КонецЕсли;	 
	
	СтрокаПрофилиПоискаКартинокСТекстом.Шрифт = ДанныеПрофиля.Шрифт;
	СтрокаПрофилиПоискаКартинокСТекстом.ЦветФона = ДанныеПрофиля.ЦветФона;
	СтрокаПрофилиПоискаКартинокСТекстом.ЦветШрифта = ДанныеПрофиля.ЦветШрифта;
	СтрокаПрофилиПоискаКартинокСТекстом.Размер = ДанныеПрофиля.Размер;
КонецПроцедуры 

// Возвращает данные профиля из таблицы ПрофилиПоискаКартинокСТекстом
&НаКлиенте
Функция ДанныеПрофиляПоискаКартинкиСТекстом(ИмяПрофиля) Экспорт
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя", ИмяПрофиля);
	
	НайденныеСтроки = ПрофилиПоискаКартинокСТекстом.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаПрофилиПоискаКартинокСТекстом = НайденныеСтроки[0];
		ДанныеПрофиля = Новый Структура;
		ДанныеПрофиля.Вставить("Имя", ИмяПрофиля);
		ДанныеПрофиля.Вставить("Шрифт", СтрокаПрофилиПоискаКартинокСТекстом.Шрифт);
		ДанныеПрофиля.Вставить("ЦветФона", СтрокаПрофилиПоискаКартинокСТекстом.ЦветФона);
		ДанныеПрофиля.Вставить("ЦветШрифта", СтрокаПрофилиПоискаКартинокСТекстом.ЦветШрифта);
		ДанныеПрофиля.Вставить("Размер", СтрокаПрофилиПоискаКартинокСТекстом.Размер);
		
		Возврат ДанныеПрофиля;
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не найден профиль поиска картинки с текстом <%1>."),
			ИмяПрофиля
		);
	КонецЕсли;	 
КонецФункции	 

// Запускает SikuliX сервер
// ДопПараметры - структура, в которой будут заполнены переменные для вызова SikuliX сервера
&НаКлиенте
Процедура ЗапуститьSikuliXСевер(ДопПараметры = Неопределено) Экспорт
	Если SikuliXСеверЗапущен = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;	 
	ДопПараметры.Вставить("SikuliXСеверЗапущен", Ложь);
	ПолучитьМодульSikuliXСевер().ЗапуститьSikuliXСевер(ЭтаФорма, ДопПараметры);
	
	Если ДопПараметры.SikuliXСеверЗапущен <> Истина Тогда
		ВызватьИсключение Локализовать("Не получилось запустить SikuliX сервер.");
	КонецЕсли;	
	
	ИмяУправляющиегоФайлаSikuliXСервер = ДопПараметры.ИмяУправляющиегоФайла;
	ИмяФайлаОтветаSikuliXСевер         = ДопПараметры.ИмяФайлаОтвета;
	SikuliXСеверЗапущен                = ДопПараметры.SikuliXСеверЗапущен;
	ИмяФайлаВыводаКонсолиSikuliXСервер = ДопПараметры.ИмяФайлаВыводаКонсолиSikuliXСервер;
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьСервисныеУтилитыЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	#Если НЕ ВебКлиент Тогда
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;	
	КонецЕсли;	

	НомерРелиза = "1.05";
	АдресРесурса = "//github.com/";
	
	Адрес = "//github.com/Pr-Mex/UItoolsFor1C/releases/download/%НомерРелиза%/UItoolsFor1C.zip";
	Адрес = СтрЗаменить(Адрес, "%НомерРелиза%", НомерРелиза);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("zip");
	
	Соединение = Новый HTTPСоединение(АдресРесурса,,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	
	Заголовки = Новый Соответствие;
	
	Запрос = Новый HTTPЗапрос(Адрес, Заголовки);
	Запрос.Заголовки.Вставить("Accept-Charset", "utf-8");
	
	Ответ = Соединение.Получить(Запрос);
	
	Если Ответ.КодСостояния = 302 Тогда
		ПутьКФайлу = Ответ.Заголовки["Location"];
		Если ПутьКФайлу = Неопределено Тогда
			ПутьКФайлу = Ответ.Заголовки["location"];
		КонецЕсли;	 
		ПутьКФайлу = СтрЗаменить(ПутьКФайлу, "https:", "");
		Запрос = Новый HTTPЗапрос(ПутьКФайлу, Заголовки);
		Ответ = Соединение.Получить(Запрос, ИмяВременногоФайла);				
	КонецЕсли;
	
	Файл = Новый Файл(ИмяВременногоФайла);
	
	Если Файл.Существует() Тогда
		КаталогИнструментов = ОбъединитьПути(Объект.КаталогИнструментов, "tools", "VideoTools"); 
		Архив = Новый ЧтениеZipФайла(ИмяВременногоФайла);
		Попытка
			Архив.ИзвлечьВсе(КаталогИнструментов);
			ТекстСообщения = Локализовать("Сервисные утилиты установлены.");	
		Исключение
			ТекстСообщения = Локализовать("Не удалось установить сервисные утилиты. Выролните действие вручную.");
		КонецПопытки;
		
		СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	УдалитьФайлыКомандаСистемы(ИмяВременногоФайла);

	#КонецЕсли
КонецПроцедуры

#КонецОбласти

#Область БраузерИUIAutomation

&НаКлиенте
Функция ВыполнитьJavaScriptБраузер(Скрипт, ВКонтекстеСтраницы = Ложь) Экспорт
	Возврат ВыполнитьJavaScriptБраузерСлужебный(Скрипт, ВКонтекстеСтраницы);
КонецФункции

&НаКлиенте
Функция ЭмуляцияДвиженияМышкиКомпонентаВБраузере() Экспорт
	Если Объект.ИспользоватьБраузерПлюсWebSocket И Объект.ЭмулироватьДвиженияМышкиVanessaExt
		И ТекущийTestclientЭтоWebКлиент И Объект.ИспользоватьКомпонентуVanessaExt Тогда
		Возврат Истина;	
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция ЭмуляцияДвиженияМышкиКомпонентаUIAutomation() Экспорт
	Если Объект.ЭмулироватьДвиженияМышкиVanessaExt
		И НЕ ТекущийTestclientЭтоWebКлиент И Объект.ИспользоватьКомпонентуVanessaExt И Объект.ИспользоватьUIAutomation Тогда
		Возврат Истина;	
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Процедура КликПоКнопкеПанельРазделовБраузер(Кнопка)
	
	КликПоЭлементуФормыБраузерСлужебный(Кнопка, "theme");
	
КонецПроцедуры 

&НаКлиенте
Функция НайтиЭлементыПроцессаUIAutomation(PID, Наименование, ТипЭлемента = Неопределено, ПроверятьПустойЗаголовок = Истина) Экспорт

	ОтборЭлементов = Новый Структура("ProcessId", PID);
	Если ЗначениеЗаполнено(Наименование) Тогда
		ОтборЭлементов.Вставить("Name", Наименование)
	ИначеЕсли НЕ ЗначениеЗаполнено(Наименование) И ПроверятьПустойЗаголовок Тогда
		ОтборЭлементов.Вставить("Name", Наименование)
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(ТипЭлемента) Тогда
		ОтборЭлементов.Вставить("ControlType", ТипЭлемента)
	КонецЕсли;

	Если НЕ Объект.ИспользоватьКомпонентуVanessaExt Тогда
		ВызватьИсключение Локализовать("Необходимо включить использование внешней компоненты VanessaExt.");
	КонецЕсли;	 
	
	Результат = ПрочитатьОбъектJSON(ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ЗаписатьОбъектJSON(ОтборЭлементов)));
	
	Если Результат = Неопределено И Найти(Наименование, "\n") > 0 Тогда
		ОтборЭлементов.Вставить("Name", СтрЗаменить(Наименование, "\n", Символы.ПС));
		Результат = ПрочитатьОбъектJSON(ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ЗаписатьОбъектJSON(ОтборЭлементов)));
	КонецЕсли;	
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция НайтиЭлементыРодителяUIAutomation(Родитель, Наименование, ТипЭлемента = Неопределено) Экспорт

	ОтборЭлементов = Новый Структура("Parent,Name", Родитель, Наименование);
	Если ЗначениеЗаполнено(ТипЭлемента) Тогда
		ОтборЭлементов.Вставить("ControlType", ТипЭлемента)
	КонецЕсли;

	Возврат ПрочитатьОбъектJSON(ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ЗаписатьОбъектJSON(ОтборЭлементов)));

КонецФункции

// Возвращает идентификатор текущей вкладки браузера
&НаКлиенте
Функция ИдентификаторТекущейВкладкиБраузера() Экспорт
	
	Возврат ИдентификаторФрейма;
	
КонецФункции	

&НаКлиенте
Функция ДанныеКнопокUIAutomation(Кнопка, Тип)
	ТекущиеДанныеКлиентаТестирования = ТекущиеДанныеКлиентаТестирования();
	ДанныеКнопок = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, Кнопка.ТекстЗаголовка, Тип);
	
	Если ДанныеКнопок = Неопределено Тогда
		ТекОкно = ПолучитьАктивноеОкноИзТестовоеПриложение();
		Если ЭтоМодальныйДиалог(ТекОкно) Тогда
			СтрокаПробелов = Символы.НПП + Символы.НПП + Символы.НПП;
			ДанныеКнопок = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, СтрокаПробелов + Кнопка.ТекстЗаголовка + СтрокаПробелов);
			Если ДанныеКнопок = Неопределено Тогда
				СтрокаПробелов = Символы.НПП;
				ДанныеКнопок = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, СтрокаПробелов + Кнопка.ТекстЗаголовка + СтрокаПробелов);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;
	
	Если ДанныеКнопок = Неопределено И ЗначениеЗаполнено(Тип) Тогда
		ТекстДляСравнения = ЗаменитьСпецСимволыДляСравненияСтрокUIAutomation(Кнопка.ТекстЗаголовка);
		ПромДанныеКнопок = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, , Тип, Ложь);
		Если ТипЗнч(ПромДанныеКнопок) = Тип("Массив") Тогда
			Для Каждого Элем Из ПромДанныеКнопок Цикл
				ИмяЭлемента = ЗаменитьСпецСимволыДляСравненияСтрокUIAutomation(Элем.Name);
				Если ИмяЭлемента = ТекстДляСравнения Тогда
					Если ДанныеКнопок = Неопределено Тогда
						ДанныеКнопок = Новый Массив;
					КонецЕсли;	
					ДанныеКнопок.Добавить(Элем);
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ДанныеКнопок; 
	
КонецФункции

&НаКлиенте
Функция ОставитьТолькоКнопкуУКоторойУстановленФокус(ДанныеКнопок)
	Если ДанныеКнопок = Неопределено Тогда
		Возврат ДанныеКнопок;
	КонецЕсли;	
	
	Если ДанныеКнопок.Количество() < 2 Тогда
		Возврат ДанныеКнопок;
	КонецЕсли;	
	
	КоличествоКнопокСФокусом = 0;
	Для Каждого ТекКнопка Из ДанныеКнопок Цикл
		Если ТекКнопка.Focus Тогда
			КоличествоКнопокСФокусом = КоличествоКнопокСФокусом + 1;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если КоличествоКнопокСФокусом <> 1 Тогда
		Возврат ДанныеКнопок;
	КонецЕсли;	 
	
	Результат = Новый Массив;
	Для Каждого ТекКнопка Из ДанныеКнопок Цикл
		Если НЕ ТекКнопка.Focus Тогда
			Продолжить;
		КонецЕсли;	 
		
		Результат.Добавить(ТекКнопка);
	КонецЦикла;	 
	
	Возврат Результат; 
	
КонецФункции	 

&НаКлиенте
Процедура КликПоКнопкеКИUIAutomation(Кнопка, Тип, ЭтоГиперссылка)
	ТекущиеДанныеКлиентаТестирования = ТекущиеДанныеКлиентаТестирования();
	
	Если ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования = 0 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не определен PID клиента тестирования с именем <%1>."),
				ТекущиеДанныеКлиентаТестирования.Имя);
	КонецЕсли;	 
	
	Если ЭтоГиперссылка ИЛИ (ТипЗнч(Кнопка) = Тип("ТестируемаяКнопкаФормы") И Кнопка.Вид = ВидКнопкиФормы.Гиперссылка) Тогда
		СтрокаПоиска = Кнопка.ТекстЗаголовка + ": " + Кнопка.ПолучитьПредставлениеДанных();
		ДанныеКнопок = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, СтрокаПоиска, "Hyperlink");
		Если ДанныеКнопок = Неопределено Тогда
			СтрокаПоиска = Кнопка.ТекстЗаголовка;
			ДанныеКнопок = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, СтрокаПоиска, "Hyperlink");
		КонецЕсли;	 
	Иначе
		ДанныеКнопок = ДанныеКнопокUIAutomation(Кнопка, Тип);
		Если ТипЗнч(ДанныеКнопок) = Тип("Массив") Тогда
			//Если ДанныеКнопок.Количество() > 1 Тогда
			//	Кнопка.Активизировать();
			//	ВнешняяКомпонентаДляСкриншотов.sleep(100);
			//	ДанныеКнопок = ДанныеКнопокUIAutomation(Кнопка, Тип);
			//КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	
	
	//ДанныеКнопок = ОставитьТолькоКнопкуУКоторойУстановленФокус(ДанныеКнопок);
	
	ЭлементНаходитсяВГруппе = Ложь;
	Если ДанныеКнопок = Неопределено И ТипЗнч(Кнопка) = Тип("ТестируемаяКнопкаФормы") И Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели Тогда
		РаскрытьПодменюКнопкиUIAutomation(Кнопка);
		ДанныеКнопок = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, Кнопка.ТекстЗаголовка, "MenuItem");
		Если ДанныеКнопок  <> Неопределено И ДанныеКнопок.Количество() > 0 Тогда
			ЭлементНаходитсяВГруппе = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ДанныеКнопок = Неопределено Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не получилось найти кнопку средствами UI Automation <%1>."),
				ТекущиеДанныеКлиентаТестирования.Имя);
	КонецЕсли;	 
			
	Если ДанныеКнопок.Количество() = 0 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не получилось найти кнопку средствами UI Automation <%1>."),
				ТекущиеДанныеКлиентаТестирования.Имя);
	КонецЕсли;	 
	
	Если ДанныеКнопок.Количество() > 1 Тогда
		ПромДанныеКнопок = ОставитьТолькоЭлементыТекущегоОкна(ДанныеКнопок);
		Если ПромДанныеКнопок.Количество() > 0 Тогда
			ДанныеКнопок = ПромДанныеКнопок;
		КонецЕсли;	
	КонецЕсли;	 
	
	НужныйЭлемент = ДанныеКнопок[0];
	
	Если ЭтоГиперссылка Тогда
		НужныйЭлемент.Size.Width = Окр(НужныйЭлемент.Size.Width / 10);
		НужныйЭлемент.Size.Right = НужныйЭлемент.Size.Left + НужныйЭлемент.Size.Width;
	КонецЕсли;	 
	
	Если ДанныеКнопок.Количество() > 1 И НЕ ЭлементНаходитсяВГруппе Тогда
		Попытка
			Кнопка.Активизировать();
			ВнешняяКомпонентаДляСкриншотов.sleep(100);
		Исключение
		КонецПопытки;
		
		АктивныйЭлемент = ПрочитатьОбъектJSON(ВнешняяКомпонентаДляСкриншотов.АктивныйЭлемент);
		Если АктивныйЭлемент.Type = Тип И АктивныйЭлемент.Name = Кнопка.ТекстЗаголовка Тогда
			НужныйЭлемент = АктивныйЭлемент;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ЭлементНаходитсяВГруппе Тогда
		ПереместитьМышкуПоКоординатамUIAutomation(НужныйЭлемент.Size);
		ЭмуляцияНажатияМышиUIAutomation(НужныйЭлемент);
		ВнешняяКомпонентаДляСкриншотов.sleep(500);
	Иначе	
		КликПоЭлементуUIAutomation(НужныйЭлемент, Кнопка);
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура КликПоПолюUIAutomation(Поле, ЭтоТаблица)
	ТекущиеДанныеКлиентаТестирования = ТекущиеДанныеКлиентаТестирования();
	
	Если ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования = 0 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не определен PID клиента тестирования с именем <%1>."),
				ТекущиеДанныеКлиентаТестирования.Имя);
	КонецЕсли;	 
	
	Если ТипЗнч(Поле) = Тип("ТестируемаяГруппаФормы") Тогда
		ТекущиеДанныеКлиентаТестирования = ТекущиеДанныеКлиентаТестирования();
		
		Если ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования = 0 Тогда
			ВызватьИсключение ПодставитьПараметрыВСтроку(
				Локализовать("Не определен PID клиента тестирования с именем <%1>."),
					ТекущиеДанныеКлиентаТестирования.Имя);
		КонецЕсли;	 
		
		ДанныеЭлементов = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, Поле.ТекстЗаголовка, "Hyperlink");
		Если ДанныеЭлементов <> Неопределено И ДанныеЭлементов.Количество() = 1 Тогда
			НужныйЭлемент = ДанныеЭлементов[0];
		Иначе
			ДанныеЭлементов = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, Поле.ТекстЗаголовка, "Group");	
			Если ДанныеЭлементов <> Неопределено И ДанныеЭлементов.Количество() = 1 Тогда
				НужныйЭлемент = ДанныеЭлементов[0];
			КонецЕсли;
		КонецЕсли;	 
	Иначе	
		Попытка
			Поле.Активизировать();
			ВнешняяКомпонентаДляСкриншотов.sleep(50);
		Исключение
		КонецПопытки;

		НужныйЭлемент = ПрочитатьОбъектJSON(ВнешняяКомпонентаДляСкриншотов.АктивныйЭлемент);
	КонецЕсли;	 
	
	КликПоЭлементуUIAutomation(НужныйЭлемент, Поле);
КонецПроцедуры 

&НаКлиенте
Функция ИсключитьТекстовыеПоляИзНайденыхЭлементовUIAutomation(ДанныеЭлементов)
	
	Если ДанныеЭлементов = Неопределено Тогда
		Возврат ДанныеЭлементов;
	КонецЕсли;	
	
	Рез = Новый Массив;
	Для Каждого Элем Из ДанныеЭлементов Цикл
		Если Элем.Type = "Text" Тогда
			Продолжить;
		КонецЕсли;
		
		Рез.Добавить(Элем);
	КонецЦикла;	 
	
	Возврат Рез;
	
КонецФункции

&НаКлиенте
Функция ОставитьТолькоЭлементыТекущегоОкна(ДанныеЭлементов)
	
	Если ДанныеЭлементов = Неопределено Тогда
		Возврат ДанныеЭлементов;
	КонецЕсли;	
	
	ТекущееОкно = ПолучитьАктивноеОкноИзТестовоеПриложение();
	
	Если ТекущееОкно = Неопределено Тогда
		Возврат ДанныеЭлементов; 
	КонецЕсли;	 
	
	ТекЗаголовок = ТекущееОкно.Заголовок;
	
	Рез = Новый Массив;
	Для Каждого Элем Из ДанныеЭлементов Цикл
		Если Элем.Window <> ТекЗаголовок Тогда
			Продолжить;
		КонецЕсли;
		
		Рез.Добавить(Элем);
	КонецЦикла;	 
	
	Возврат Рез;
	
КонецФункции	 

&НаКлиенте
Функция ОставитьТолькоЭлементыСПодсказкой(ДанныеЭлементов)
	
	Если ДанныеЭлементов = Неопределено Тогда
		Возврат ДанныеЭлементов;
	КонецЕсли;	
	
	Рез = Новый Массив;
	Для Каждого Элем Из ДанныеЭлементов Цикл
		Если НЕ ЗначениеЗаполнено(Элем.HelpText) Тогда
			Продолжить;
		КонецЕсли;
		
		Рез.Добавить(Элем);
	КонецЦикла;	 
	
	Если Рез.Количество() = 0 Тогда
		Возврат ДанныеЭлементов; 
	КонецЕсли;	 
	
	Возврат Рез;
	
КонецФункции	 

&НаКлиенте
Процедура КликПоКнопкеЗакрытияОкнаUIAutomation(ЗакрываемоеОкно)
	ТекущиеДанныеКлиентаТестирования = ТекущиеДанныеКлиентаТестирования();
	
	Если ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования = 0 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не определен PID клиента тестирования с именем <%1>."),
				ТекущиеДанныеКлиентаТестирования.Имя);
	КонецЕсли;	 
	
	ЭлементыСЗаголовокомОкна = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, ЗакрываемоеОкно.Заголовок, "Button");
	Если ЭлементыСЗаголовокомОкна = Неопределено Тогда
		ЭлементыСЗаголовокомОкна = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, ЗакрываемоеОкно.Заголовок, "Pane");
	КонецЕсли;	 
	
	Если ЭлементыСЗаголовокомОкна <> Неопределено И ЭлементыСЗаголовокомОкна.Количество() > 0 Тогда
		РодительЭлемента = ПрочитатьОбъектJSON(ВнешняяКомпонентаДляСкриншотов.ПолучитьРодителяЭлемента(ЭлементыСЗаголовокомОкна[0].ID));
		Если РодительЭлемента <> Неопределено Тогда
			КнопкаЗакрыть = НайтиЭлементыРодителяUIAutomation(РодительЭлемента.ID, "Закрыть", "Button");
			Если КнопкаЗакрыть <> Неопределено И КнопкаЗакрыть.Количество() = 1 Тогда
				ПереместитьМышкуПоКоординатамUIAutomation(КнопкаЗакрыть[0].Size);
				МодульРаботаСБраузером().АнимацияКлика(ЗакрываемоеОкно);
				ВнешняяКомпонентаДляСкриншотов.sleep(100);
			ИначеЕсли КнопкаЗакрыть <> Неопределено И КнопкаЗакрыть.Количество() > 1 Тогда
				Для Каждого ТекКнопка Из КнопкаЗакрыть Цикл
					РодительКнопки = ПрочитатьОбъектJSON(ВнешняяКомпонентаДляСкриншотов.ПолучитьРодителяЭлемента(ТекКнопка.ID));
					Если РодительКнопки <> Неопределено Тогда
						Если РодительКнопки.ID = РодительЭлемента.ID Тогда
							ПереместитьМышкуПоКоординатамUIAutomation(ТекКнопка.Size);
							МодульРаботаСБраузером().АнимацияКлика(ЗакрываемоеОкно);
							ВнешняяКомпонентаДляСкриншотов.sleep(100);
							Прервать;
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЦикла;	 
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	ЗакрываемоеОкно.Закрыть();
	
КонецПроцедуры 

&НаКлиенте
Процедура КликПоЗакладкеUIAutomation(ПолеЗакладка)
	ТекущиеДанныеКлиентаТестирования = ТекущиеДанныеКлиентаТестирования();
	
	Если ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования = 0 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не определен PID клиента тестирования с именем <%1>."),
				ТекущиеДанныеКлиентаТестирования.Имя);
	КонецЕсли;	 
	
	ДанныеПолей = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, ПолеЗакладка.ТекстЗаголовка, "TabItem");
	Если ДанныеПолей <> Неопределено И ДанныеПолей.Количество() = 1 Тогда
		КликПоЭлементуUIAutomation(ДанныеПолей[0], ПолеЗакладка);
	Иначе	
		ПолеЗакладка.Активизировать();
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура КликПоФлагуUIAutomation(ПолеРеквизит)
	ТекущиеДанныеКлиентаТестирования = ТекущиеДанныеКлиентаТестирования();
	
	Если ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования = 0 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не определен PID клиента тестирования с именем <%1>."),
				ТекущиеДанныеКлиентаТестирования.Имя);
	КонецЕсли;	 
	
	ДанныеПолей = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, ПолеРеквизит.ТекстЗаголовка, "CheckBox");
	Если ДанныеПолей <> Неопределено И ДанныеПолей.Количество() = 1 Тогда
		КликПоЭлементуUIAutomation(ДанныеПолей[0], ПолеРеквизит);
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура КликПоПереключателюUIAutomation(ПолеРеквизит, Значение)
	ТекущиеДанныеКлиентаТестирования = ТекущиеДанныеКлиентаТестирования();
	
	Если ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования = 0 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не определен PID клиента тестирования с именем <%1>."),
				ТекущиеДанныеКлиентаТестирования.Имя);
	КонецЕсли;	 
	
	ДанныеПолей = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, Значение, "Text");
	Если ДанныеПолей = Неопределено Тогда
		ДанныеПолей = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, Значение, "RadioButton");
	КонецЕсли;	 
	
	Если ДанныеПолей <> Неопределено И ДанныеПолей.Количество() = 1 Тогда
		КликПоЭлементуUIAutomation(ДанныеПолей[0], ПолеРеквизит);
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура НажатиеНаКнопкуСоздатьUIAutomation()
	ТекущиеДанныеКлиентаТестирования = ТекущиеДанныеКлиентаТестирования();
	
	Если ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования = 0 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не определен PID клиента тестирования с именем <%1>."),
				ТекущиеДанныеКлиентаТестирования.Имя);
	КонецЕсли;	 
	
	ДанныеКнопок = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, "", "Button");
	НужнаяКнопка = Неопределено;
	Если ДанныеКнопок <> Неопределено И ДанныеКнопок.Количество() > 0 Тогда
		Для Каждого ТекКнопка Из ДанныеКнопок Цикл
			Если Найти(ТекКнопка.HelpText, "(F8)") > 0 Тогда
				НужнаяКнопка = ТекКнопка;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	 
	КонецЕсли;	 
	
	Если НужнаяКнопка <> Неопределено Тогда
		КликПоЭлементуUIAutomation(НужнаяКнопка, Неопределено);
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Функция КликПоКнопкеПоляUIAutomation(Поле, ТипКнопки, ДопПараметры)
	ТекущиеДанныеКлиентаТестирования = ТекущиеДанныеКлиентаТестирования();
	
	Если ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования = 0 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не определен PID клиента тестирования с именем <%1>."),
				ТекущиеДанныеКлиентаТестирования.Имя);
	КонецЕсли;	 
	
	ДанныеПолей = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, Поле.ТекстЗаголовка);
	ДанныеПолей = ИсключитьТекстовыеПоляИзНайденыхЭлементовUIAutomation(ДанныеПолей);
	НужныйЭлемент = Неопределено;
	Если ДанныеПолей <> Неопределено И ДанныеПолей.Количество() = 1 Тогда
		НужныйЭлемент = ДанныеПолей[0];
	КонецЕсли;	 
	
	Если НужныйЭлемент = Неопределено Тогда
		Попытка
			Поле.Активизировать();
			ВнешняяКомпонентаДляСкриншотов.sleep(50);
			НужныйЭлемент = ПрочитатьОбъектJSON(ВнешняяКомпонентаДляСкриншотов.АктивныйЭлемент);
		Исключение
		КонецПопытки;
	КонецЕсли;	 

	МасштабЭкрана = ПолучитьМасштабЭкрана();
	
	ЭлементыРодитель = ПрочитатьОбъектJSON(ВнешняяКомпонентаДляСкриншотов.ПолучитьРодителяЭлемента(НужныйЭлемент.Id));
	Если ЭлементыРодитель.Type = "Pane"
		И ЭлементыРодитель.Size.Left >= НужныйЭлемент.Size.Left - МасштабЭкрана / 100 - 1
		И ЭлементыРодитель.Size.Top >= НужныйЭлемент.Size.Top - МасштабЭкрана / 100 - 1
		И ЭлементыРодитель.Size.Bottom <= НужныйЭлемент.Size.Bottom + МасштабЭкрана / 100 + 1 
	Тогда
		НужныйЭлемент = ЭлементыРодитель;
	КонецЕсли;
	
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		ДопПараметры.Вставить("ИДЭлемента", НужныйЭлемент.Id);
	КонецЕсли;	 

	СнимокОкна = ВнешняяКомпонентаДляСкриншотов.ПолучитьСнимокОкна(НужныйЭлемент.Handle);
	ТекстJSON = ВнешняяКомпонентаДляСкриншотов.ПолучитьРазмерОкна(НужныйЭлемент.Handle);
	РазмерыОкна = ПрочитатьСтрокуJSON(ТекстJSON);
	СнимокОбласти = ВнешняяКомпонентаДляСкриншотов.ОбрезатьИзображение(СнимокОкна
		, НужныйЭлемент.Size.Left - РазмерыОкна.Left
		, НужныйЭлемент.Size.Top - РазмерыОкна.Top
		, НужныйЭлемент.Size.Width
		, НужныйЭлемент.Size.Height);
	
	ОписаниеКартинки = ПолучитьКартинкуНаСервере(УникальныйИдентификатор, МасштабЭкрана);
	
	Если ОписаниеКартинки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НомерКартинки = 0;
	Если ТипКнопки = "ВыпадающийСписок" Тогда
		НомерКартинки = 5;
	ИначеЕсли ТипКнопки = "ОткрытиеЭлемента" Тогда
		НомерКартинки = 4;
	ИначеЕсли ТипКнопки = "ОчисткаЭлемента" Тогда
		НомерКартинки = 6;
	ИначеЕсли ТипКнопки = "ВыборИзСписка" Тогда
		НомерКартинки = 7;
	КонецЕсли;	 
	
	X = ОписаниеКартинки.ВысотаКартинки * НомерКартинки;
	Y = 0;
	W = ОписаниеКартинки.ВысотаКартинки;
	H = ОписаниеКартинки.ВысотаКартинки;
	
	Если (НомерКартинки = 2) ИЛИ (НомерКартинки = 3) Тогда
		Y = ОписаниеКартинки.ВысотаКартинки / 4;
		H = ОписаниеКартинки.ВысотаКартинки / 2;
	КонецЕсли;
	
	КартинкаКнопки = ПолучитьИзВременногоХранилища(ОписаниеКартинки.АдресКартинки);
	УдалитьИзВременногоХранилища(ОписаниеКартинки.АдресКартинки);
	КартинкаКнопки  = ВнешняяКомпонентаДляСкриншотов.ОбрезатьИзображение(КартинкаКнопки, X, Y, W, H);	
	
	КартинкаЭлемента = СнимокОбласти;
	ФрагментЭлемента = ВнешняяКомпонентаДляСкриншотов.НайтиФрагмент(КартинкаЭлемента, КартинкаКнопки);
	
	Координаты = ПрочитатьСтрокуJSON(ФрагментЭлемента);
	Если Координаты = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Координаты.match < 0.99 Тогда
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НомерКартинки = 7 Тогда
		//три точки
		Если Координаты.match < 1 Тогда
			ОткрытьВыпадающийСписок(Поле);
			ДанныеКнопок = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, "Показать все", "Text");
			Если ДанныеКнопок <> Неопределено И ДанныеКнопок.Количество() = 1 Тогда
				ПереместитьМышкуПоКоординатамUIAutomation(ДанныеКнопок[0].Size);
				МодульРаботаСБраузером().АнимацияКлика(Поле);
				Возврат Истина;
			КонецЕсли;	 
			Возврат Ложь;
		КонецЕсли;	 
	КонецЕсли;	 
		
	Координаты.Left = Координаты.Left + НужныйЭлемент.Size.Left;
	Координаты.Right = Координаты.Left + Координаты.Width;
	Координаты.Top = Координаты.Top + НужныйЭлемент.Size.Top;
	Координаты.Bottom = Координаты.Top + Координаты.Height;
	
	ПереместитьМышкуПоКоординатамUIAutomation(Координаты);
	МодульРаботаСБраузером().АнимацияКлика(Поле);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура КликПоЗначениюВыпадающегоСпискаUIAutomation(ПолеРеквизит, ВыбираемоеЗначение, ДопПараметры)
	ТекущиеДанныеКлиентаТестирования = ТекущиеДанныеКлиентаТестирования();
	
	Если ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования = 0 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не определен PID клиента тестирования с именем <%1>."),
				ТекущиеДанныеКлиентаТестирования.Имя);
	КонецЕсли;	 
	
	Если Версия8323ИлиВыше Тогда
		ДанныеЭлементов = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, ВыбираемоеЗначение, "Custom");
	Иначе	
		ДанныеЭлементов = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, ВыбираемоеЗначение, "ListItem");
	КонецЕсли;	
	Если ТипЗнч(ДанныеЭлементов) = Тип("Массив") И ДанныеЭлементов.Количество() > 0 Тогда
		ПереместитьМышкуПоКоординатамUIAutomation(ДанныеЭлементов[0].Size);
		МодульРаботаСБраузером().АнимацияКлика(ПолеРеквизит);
	КонецЕсли;	 	
		
	ПолеРеквизит.ВыполнитьВыборИзВыпадающегоСписка(ВыбираемоеЗначение);
		
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьКартинкуНаСервере(Знач УникальныйИдентификатор, Знач Масштаб)
	
	ФайлРесурса = "v8res://core83/edtButtons.zip";
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	КопироватьФайл(ФайлРесурса, ВременныйФайл);
	
	ОтборКартинки = Новый Соответствие;
	ОтборРазмеров = Новый Соответствие;
	ОтборРазмеров.Вставить(100, "ldpi");
	ОтборРазмеров.Вставить(125, "aldpi");
	ОтборРазмеров.Вставить(150, "mdpi");
	ОтборРазмеров.Вставить(175, "amdpi");
	ОтборРазмеров.Вставить(200, "hdpi");
	ОтборРазмеров.Вставить(300, "xdpi");
	ОтборРазмеров.Вставить(400, "udpi");
	ЗначениеОтбора = ОтборРазмеров.Получить(Масштаб);
	ОтборКартинки.Вставить("screenDensity", ЗначениеОтбора);
	
	Картинка = Новый Картинка(ВременныйФайл);
	УдалитьФайлы(ВременныйФайл);
	ДвоичныеДанныеКартинки = Картинка.ПолучитьДвоичныеДанные(Ложь, ОтборКартинки);
	АдресКартинки = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, УникальныйИдентификатор);
	ЭкземелярКартинки = Новый Картинка(ДвоичныеДанныеКартинки);
	ВысотаКартинки = ЭкземелярКартинки.Высота();
	Результат = Новый Структура("АдресКартинки,ВысотаКартинки", АдресКартинки, ВысотаКартинки);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПереместитьМышкуПоКоординатамUIAutomation(Данные)
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	X =  Окр((Данные.Right + Данные.Left) / 2, 0);
	Y = Окр((Данные.Top + Данные.Bottom) / 2, 0);
	
	Если X <> 0 И Y <> 0 Тогда
		ВыполнитьПеремещениеМышкиВнешнейКомпонентой(X, Y);
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ЭмуляцияНажатияМышиUIAutomation(Данные)
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	X =  Окр((Данные.Size.Right + Данные.Size.Left) / 2, 0);
	Y = Окр((Данные.Size.Top + Данные.Size.Bottom) / 2, 0);
	
	Если X = 0 И Y = 0 Тогда
		Возврат;
	КонецЕсли;	 

	ТекстJSON = ВнешняяКомпонентаДляСкриншотов.ПолучитьРазмерОкна(Данные.Handle);
	КоординатыОкна = ПрочитатьСтрокуJSON(ТекстJSON);
	КоординатыТочки = (X - КоординатыОкна.Left) + 65536 * (Y - КоординатыОкна.Top);
	
	WM_LBUTTONDOWN = 513;
	WM_LBUTTONUP = 514;
	MK_LBUTTON = 1;
	
	ВнешняяКомпонентаДляСкриншотов.PostMessage(Данные.Handle, WM_LBUTTONDOWN, MK_LBUTTON, КоординатыТочки);
	ВнешняяКомпонентаДляСкриншотов.Пауза(100);
	ВнешняяКомпонентаДляСкриншотов.PostMessage(Данные.Handle, WM_LBUTTONUP, 0, КоординатыТочки);
	
КонецПроцедуры 

&НаКлиенте
Процедура КликПоЭлементуUIAutomation(ДанныеUIAutomation, Элемент)
	
	ПереместитьМышкуПоКоординатамUIAutomation(ДанныеUIAutomation.Size);
	КликПоЭлементу_Автоинструкции(Элемент);
	
КонецПроцедуры 

&НаКлиенте
Функция КликПоКнопкеКИВОкнеБраузер(Кнопка)
	
	КликПоЭлементуФормыБраузерСлужебный(Кнопка, "navigationItem");
	
КонецФункции

&НаКлиенте
Процедура КликПоКнопкеПанельОткрытыхБраузер(Кнопка)
	
	КликПоЭлементуФормыБраузерСлужебный(Кнопка, "openedFormCaption");
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДанныеКоординатСУчетомМасштабирования(ДанныеКоординат, X, Y) Экспорт
	КоэффициентМасштабированияЭкрана = Объект.КоэффициентМасштабированияЭкрана;
	Если КоэффициентМасштабированияЭкрана = 0 Тогда
		КоэффициентМасштабированияЭкрана = 1;
	КонецЕсли;	 
	
	X = Окр(ДанныеКоординат.X * КоэффициентМасштабированияЭкрана);
	Y = Окр(ДанныеКоординат.Y * КоэффициентМасштабированияЭкрана);
КонецПроцедуры 

&НаКлиенте
Процедура КликПоЗначениюВыпадающегоСпискаБраузер(Элемент, Значение)
	
	#Если НЕ ВебКлиент Тогда
	
	Попытка
		ПредставлениеСпискаВыбора = ДополнитьПредставлениеСпискаВыбора(Элемент.ПолучитьПредставлениеСпискаВыбора());
	Исключение
		ПредставлениеСпискаВыбора = Новый Массив;
	КонецПопытки;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Ид = 0;
		Для Сч = 0 По ПредставлениеСпискаВыбора.Количество() - 1 Цикл
			Если НРег(ПредставлениеСпискаВыбора[Сч].ОтображаемыйТекст) = НРег(Значение) Тогда
				Ид = Сч;
			КонецЕсли;	 
		КонецЦикла;
	Иначе
		Ид = Значение;
	КонецЕсли;	 
	
	ТекстJavaScript = "
	|{
	|function pos(){
	|    let r = document.querySelector('#editDropDown').querySelectorAll('li')[%1].getBoundingClientRect();
	|    return {
	|       x: Math.round(r.left + r.width / 2) + window.screenLeft,
	|       y: Math.round(r.top + r.height / 2) + window.screenTop + window.outerHeight - window.innerHeight,    
	|       sw: screen.width, 
	|       sh:screen.height,    
	|    }
	|}; JSON.stringify(pos())
	|}
	|";
	
	ТекстJavaScript = СтрЗаменить(ТекстJavaScript,"%1", Ид);
	
	КоординатыЭлемента = ВыполнитьJavaScriptБраузерСлужебный(ТекстJavaScript);
	
	Попытка
		СтрокаКоординаты = КоординатыЭлемента.result.result.value;
	Исключение
		СтрокаКоординаты = Неопределено;
	КонецПопытки;
	
	Если СтрокаКоординаты = Неопределено Тогда
		ТекстСообщения = ПодставитьПараметрыВСтроку(
			Локализовать("Не вышло получить координаты элемента <%1> в браузере: %2."),
			Элемент.ТекстЗаголовка,
			СтрокаКоординаты);
		Попытка
			ТекстСообщения = ТекстСообщения + Символы.ПС + КоординатыЭлемента.result.exceptionDetails.exception.description;
		Исключение
		КонецПопытки;
		
		ЗаписатьЛогВЖРОшибка("КликПоЗначениюВыпадающегоСпискаБраузер", ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(СтрокаКоординаты);
		ДанныеКоординат = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ДанныеКоординат = Неопределено;
	КонецПопытки;

	Если ДанныеКоординат = Неопределено Тогда
		ТекстСообщения = ПодставитьПараметрыВСтроку(
			Локализовать("Не вышло получить координаты элемента <%1> в браузере: %2."),
			Элемент.ТекстЗаголовка,
			СтрокаКоординаты
		);
		Попытка
			ТекстСообщения = ТекстСообщения + Символы.ПС + КоординатыЭлемента.result.exceptionDetails.exception.description;
		Исключение
		КонецПопытки;
		ЗаписатьЛогВЖРОшибка("КликПоЗначениюВыпадающегоСпискаБраузер", ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	X = 0;
	Y = 0;
	ПересчитатьДанныеКоординатСУчетомМасштабирования(ДанныеКоординат, X, Y);
	
	ВыполнитьПеремещениеМышкиВнешнейКомпонентой(X, Y);
	
	МодульРаботаСБраузером().АнимацияКлика(Элемент);
	Элемент.ВыполнитьВыборИзВыпадающегоСписка(Значение);
	
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура КликПоКнопкеЗакрытияОкнаБраузер(ЗакрываемоеОкно)
	
	#Если НЕ ВебКлиент Тогда	 
		
	ЗакрываемоеОкноАктивно = ЗакрываемоеОкно = ПолучитьАктивноеОкноИзТестовоеПриложение();	
	
	ТекстJavaScript = "
	|{
	|function pos(){
	|	const windowCaption = '" + ЗакрываемоеОкно.Заголовок + "';
	|	const windowIsActive = " + ?(ЗакрываемоеОкноАктивно, "true", "false") + ";
	|	let closeButton = null;
	|	let selectedOpenedItem = document.querySelector('.openedItem.select');
	|	if(windowIsActive && selectedOpenedItem != null && selectedOpenedItem.getAttribute('title') === windowCaption) {
	|			closeButton = selectedOpenedItem.querySelector('.openedClose'); 			
	|	}
	|	
	|	if(closeButton === null) {
	|		closeButton = document.querySelector('.openedItem[title=""' + windowCaption + '""] .openedClose');
	|	}	
	|
	|	if(closeButton === null) {
	|   	closeButton = document.querySelector('.toplineBox[data-title=""' + windowCaption + '""]')
	|			.closest('.topline').querySelector('span[id$=""TopLine_cmd_CloseButton""]');
	|	}
	|
	|	let r = closeButton.getBoundingClientRect();
	|    return {
	|       x: Math.round(r.left + r.width / 2) + window.screenLeft,
	|       y: Math.round(r.top + r.height / 2) + window.screenTop + window.outerHeight - window.innerHeight,    
	|       sw: screen.width, 
	|       sh:screen.height,    
	|    }
	|}; JSON.stringify(pos())
	|}
	|";
	
	КоординатыЭлемента = ВыполнитьJavaScriptБраузерСлужебный(ТекстJavaScript);
	
	Попытка
		СтрокаКоординаты = КоординатыЭлемента.result.result.value;
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(СтрокаКоординаты);
		ДанныеКоординат = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не вышло получить координаты кнопки закрытия окна <%1> в браузере: %2."),
			ЗакрываемоеОкно.Заголовок,
			СтрокаКоординаты
		);
	КонецПопытки;
		
	X = 0;
	Y = 0;
	ПересчитатьДанныеКоординатСУчетомМасштабирования(ДанныеКоординат, X, Y);
	
	ВыполнитьПеремещениеМышкиВнешнейКомпонентой(X, Y);
	
	МодульРаботаСБраузером().АнимацияКлика();
	ЗакрываемоеОкно.Закрыть();
	
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Функция КликПоКнопкеБраузер(Кнопка, ЭтоГиперссылка, ЭмулироватьКлик = Ложь)
	
	КликПоЭлементуФормыБраузерСлужебный(Кнопка, "elem", Истина, ,,ЭмулироватьКлик,, ЭтоГиперссылка);
	
КонецФункции	 

&НаКлиенте
Функция КликПоКнопкеПоляБраузер(Поле, ИмяКнопкиПоля)
	
	КликПоЭлементуФормыБраузерСлужебный(Поле, "elem", Истина, , ИмяКнопкиПоля);
	
КонецФункции	 

&НаКлиенте
Процедура КликПоКнопкеПанельФункцийБраузер(Кнопка)
	
	КликПоЭлементуФормыБраузерСлужебный(Кнопка, "command");
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучитьКоординатыЗначенияПереключателяПоНомеру(Элемент, НомерЗначения, X, Y)
	X = 0;
	Y = 0;
	
	ТекстJavaScript = "
	|	{
	|	function pos(){
	|	    let r = elem('ИмяЭлемента', НомерЗначения).getBoundingClientRect();
	|	    return {
	|	        x: Math.round(r.left + r.width / 2) + window.screenLeft,
	|	        y: Math.round(r.top + r.height / 2) + window.screenTop + window.outerHeight - window.innerHeight,		
	|	        sw: screen.width, 
	|	        sh:screen.height,		
	|	    }
	|	}; JSON.stringify(pos())
	|	}
	|";
	
	ТекстJavaScript = СтрЗаменить(ТекстJavaScript,"ИмяЭлемента", Элемент.Имя);
	ТекстJavaScript = СтрЗаменить(ТекстJavaScript,"НомерЗначения", НомерЗначения);
	
	КоординатыЭлементаJavaScript(Элемент, ТекстJavaScript, X, Y);
КонецПроцедуры 

&НаКлиенте
Процедура КликПоПереключателюБраузер(Поле, Значение)
	ТипПереключателя = "Кнопки";
	
	Попытка
		ПредставлениеСпискаВыбора = ДополнитьПредставлениеСпискаВыбора(Поле.ПолучитьПредставлениеСпискаВыбора());
		
	Исключение
		ПредставлениеСпискаВыбора = Новый Массив;
	КонецПопытки;
	
	Если ПредставлениеСпискаВыбора.Количество() > 1 Тогда
		Получилось0 = Истина;
		Попытка
			X = 0;
			Y = 0;
			ПолучитьКоординатыЗначенияПереключателяПоНомеру(Поле, 0, X, Y);
			
			Если X = 0 ИЛИ Y = 0 Тогда
				Получилось0 = Ложь;
			КонецЕсли;	 
		Исключение
			Получилось0 = Ложь;
		КонецПопытки;
		
		Получилось1 = Истина;
		Попытка
			X = 0;
			Y = 0;
			ПолучитьКоординатыЗначенияПереключателяПоНомеру(Поле, 1, X, Y);
			
			Если X = 0 ИЛИ Y = 0 Тогда
				Получилось1 = Ложь;
			КонецЕсли;	 
		Исключение
			Получилось1 = Ложь;
		КонецПопытки;
		
		Если Получилось0 И Получилось1 Тогда
			ТипПереключателя = "Раидобаттоны";
		КонецЕсли;	 
	КонецЕсли;	 
		
	Если ТипПереключателя = "Раидобаттоны" Тогда
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Ид = 0;
			Для Сч = 0 По ПредставлениеСпискаВыбора.Количество() - 1 Цикл
				Если НРег(ПредставлениеСпискаВыбора[Сч].ОтображаемыйТекст) = НРег(Значение) Тогда
					Ид = Сч;
				КонецЕсли;	 
			КонецЦикла;
		Иначе
			Ид = Значение;
		КонецЕсли;	 
		
		КликПоЭлементуФормыБраузерСлужебный(Поле, "elem", Истина, Ид);
	Иначе
		КликПоЭлементуФормыБраузерСлужебный(Поле, "findSwitchButton", Истина, "'" + Значение + "'");
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура КликПоФлагуБраузер(Поле)
	
	КликПоЭлементуФормыБраузерСлужебный(Поле, "elem", Истина);
	
КонецПроцедуры 

&НаКлиенте
Процедура КликПоПолюБраузер(Поле, ЭтоТаблица)
	
	Если ЭтоТаблица Тогда
		ВнешняяКомпонентаДляСкриншотов.sleep(100);
		КликПоЭлементуФормыБраузерСлужебный(Поле, "selected", Истина);
	Иначе	
		КликПоЭлементуФормыБраузерСлужебный(Поле, "elem", Истина);
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура КликПоЗакладкеБраузер(Поле)
	
	КликПоЭлементуФормыБраузерСлужебный(Поле, "elem", Истина);
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьКоманднуюПанельВКеш(АктивноеОкно, ГруппаФормы)
	Если КешГруппКоманднойПанелиФорм = Неопределено Тогда
		КешГруппКоманднойПанелиФорм = Новый Соответствие;
	КонецЕсли;	 
	
	ГруппыКоманднойПанели = КешГруппКоманднойПанелиФорм[АктивноеОкно.Заголовок];
	Если ГруппыКоманднойПанели = Неопределено Тогда
		ГруппыКоманднойПанели = Новый Массив;
		КешГруппКоманднойПанелиФорм.Вставить(АктивноеОкно.Заголовок, ГруппыКоманднойПанели);
	КонецЕсли;	 
	
	ГруппыКоманднойПанели.Добавить(ГруппаФормы);
КонецПроцедуры 

&НаКлиенте
Функция РодителиКнопкиКоманднойПанели(Элемент, КоманднаяПанельФормы)
	АктивноеОкно = ПолучитьАктивноеОкноИзТестовоеПриложение();
	Если АктивноеОкно = Неопределено Тогда
		Возврат Новый Массив; 
	КонецЕсли;	 
	
	КоманднаяПанельФормы = Неопределено;
	
	Если  КешГруппКоманднойПанелиФорм <> Неопределено
		И КешГруппКоманднойПанелиФорм[АктивноеОкно.Заголовок] <> Неопределено Тогда
		ГруппыКешКоманднойПанели = КешГруппКоманднойПанелиФорм[АктивноеОкно.Заголовок];
		
		Попытка
			Для Каждого ГруппаФормы Из ГруппыКешКоманднойПанели Цикл
				Если ГруппаФормы.НайтиОбъект(,,Элемент.Имя) <> Неопределено Тогда
					КоманднаяПанельФормы = ГруппаФормы;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	 
		Исключение
			КоманднаяПанельФормы = Неопределено;
			ГруппыКешКоманднойПанели.Очистить();
		КонецПопытки;
	КонецЕсли;	 
	
	Если КоманднаяПанельФормы = Неопределено Тогда
		ГруппыФормы = АктивноеОкно.НайтиОбъекты(Тип("ТестируемаяГруппаФормы"));
		ГруппыКоманднойПанели = Новый Массив;
		Для Каждого ГруппаФормы Из ГруппыФормы Цикл
			
			Если ТекущийTestclientЭтоWebКлиент Тогда
				Если ГруппаФормы.Вид <> ВидГруппыФормы.КоманднаяПанель Тогда
					Продолжить;
				КонецЕсли;	 
			Иначе	
				Если ГруппаФормы.Вид = Неопределено Тогда
				ИначеЕсли ГруппаФормы.Вид <> ВидГруппыФормы.КоманднаяПанель Тогда
					Продолжить;
				КонецЕсли;	 
			КонецЕсли;	 
			
			ДобавитьКоманднуюПанельВКеш(АктивноеОкно, ГруппаФормы);
			ГруппыКоманднойПанели.Добавить(ГруппаФормы);
			
		КонецЦикла;	
		
		Для Каждого ГруппаФормы Из ГруппыКоманднойПанели Цикл
			Если ГруппаФормы.НайтиОбъект(,,Элемент.Имя) <> Неопределено Тогда
				КоманднаяПанельФормы = ГруппаФормы;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	 
	КонецЕсли;	 
	
	Если КоманднаяПанельФормы = Неопределено Тогда
		Возврат Новый Массив; 
	КонецЕсли;	 
	
	Нашли = Ложь;
	РодителиЭлемента = Новый Массив;
	НайтиРодителейЭлементаРекурсивно(КоманднаяПанельФормы, РодителиЭлемента, Элемент, Нашли);
	
	Если РодителиЭлемента.Количество() > 0 Тогда
		Если РодителиЭлемента[0] = КоманднаяПанельФормы Тогда
			РодителиЭлемента.Удалить(0);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если РодителиЭлемента.Количество() = 0 Тогда
		РодителиЭлемента.Добавить("Ещё");
	КонецЕсли;	 
	
	Возврат РодителиЭлемента; 
	
КонецФункции	 

&НаКлиенте
Процедура НайтиРодителейЭлементаРекурсивно(ГруппаЭлементов, РодителиЭлемента, НужныйЭлемент, Нашли)
	Если Нашли Тогда
		Возврат;
	КонецЕсли;	 
	
	РодителиЭлемента.Добавить(ГруппаЭлементов);
	
	ЭлементыГруппы = ГруппаЭлементов.ПолучитьПодчиненныеОбъекты();
	
	Для Каждого Элем Из ЭлементыГруппы Цикл
		Если Нашли Тогда
			Возврат;
		КонецЕсли;	 
		
		Если Элем = НужныйЭлемент Тогда
			Нашли = Истина;
			Возврат;
		КонецЕсли;
		Если ТипЗнч(Элем) = Тип("ТестируемаяГруппаФормы") Тогда
			НайтиРодителейЭлементаРекурсивно(Элем, РодителиЭлемента, НужныйЭлемент, Нашли);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если Нашли Тогда
		Возврат;
	КонецЕсли;	 
	
	РодителиЭлемента.Удалить(РодителиЭлемента.Количество() - 1);
	
КонецПроцедуры

&НаКлиенте
Процедура РаскрытьПодменюКнопки(Элемент)
	ПолучилосьНайтиЭлемент = Ложь;
	Попытка
		ТекстJavaScript = ТекстJavaScriptБраузер();
		УстановитьИмяЭлементаВJavaScript(ТекстJavaScript, Истина, Элемент, Неопределено);
		УстановитьИмяВнутреннейКнопкиJavaScript(ТекстJavaScript, Неопределено);
		УстановитьИмяФукцииJavaScript(ТекстJavaScript, "elem");
		X = 0;
		Y = 0;
		КоординатыЭлементаJavaScript(Элемент, ТекстJavaScript, X, Y);
		Если X > 0 И Y > 0 Тогда
			ПолучилосьНайтиЭлемент = Истина;
		КонецЕсли;	 
	Исключение
		ПолучилосьНайтиЭлемент = Ложь;
	КонецПопытки;
	
	Если ПолучилосьНайтиЭлемент Тогда
		Возврат;
	КонецЕсли;	 
	
	КоманднаяПанельФормы = Неопределено;
	РодителиКнопки = РодителиКнопкиКоманднойПанели(Элемент, КоманднаяПанельФормы);
	
	Сч = 0;
	ДопСтрока = "";
	Для Каждого ТекРодитель Из РодителиКнопки Цикл
		Если ТекРодитель = "Ещё" И КоманднаяПанельФормы <> Неопределено  Тогда
			
			Если НЕ ПолучилосьНайтиЭлемент Тогда
				КликПоЭлементуФормыБраузерСлужебный(КоманднаяПанельФормы, "buttonMore", Истина, , , Истина);
			КонецЕсли;	 
			
		ИначеЕсли ТекРодитель.Вид = ВидГруппыФормы.Подменю Тогда
			КликПоЭлементуФормыБраузерСлужебный(ТекРодитель, "elem", Истина, , , Истина);
		КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Функция ЭлементUIAutomationРеальноВидим(Элемент)
	Если Элемент.Size.Left = 0 И Элемент.Size.Right = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	 

&НаКлиенте
Процедура РаскрытьПодменюКнопкиUIAutomation(Элемент)
	КоманднаяПанельФормы = Неопределено;
	РодителиКнопки = РодителиКнопкиКоманднойПанели(Элемент, КоманднаяПанельФормы);
	Сч = 0;
	ДопСтрока = "";
	
	ТекущиеДанныеКлиентаТестирования = ТекущиеДанныеКлиентаТестирования();
	
	Если РодителиКнопки.Количество() > 0 Тогда
		Если РодителиКнопки[0] <> "Ещё" Тогда
			НужныйТип = "Button";
			ПервыйРодитель = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, РодителиКнопки[0].ТекстЗаголовка, НужныйТип);
			Если ПервыйРодитель = Неопределено Тогда
				РодителиКнопки.Вставить(0, "Ещё");
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если РодителиКнопки[0] = "Ещё" Тогда
			ПанельКнопок = Неопределено;
			ЭлементыКоманднойПанели = КоманднаяПанельФормы.НайтиОбъекты();
			Для Каждого Элем Из ЭлементыКоманднойПанели Цикл
				ДанныеЭлемента = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, Элем.ТекстЗаголовка);
				Если ДанныеЭлемента <> Неопределено И ДанныеЭлемента.Количество() = 1 Тогда
					//Значит найден реальный элемент в этой же панели, где находится кнопка Еще
					ПанельКнопок = ПрочитатьОбъектJSON(ВнешняяКомпонентаДляСкриншотов.ПолучитьРодителяЭлемента(ДанныеЭлемента[0].ID));
					Если ПанельКнопок <> Неопределено Тогда
						Прервать;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЦикла;	 
			Если ПанельКнопок <> Неопределено Тогда
				НужныйТип = "Button";
				КнопкаЕщёТойЖеПанели = НайтиЭлементыРодителяUIAutomation(ПанельКнопок.ID, "Еще", НужныйТип);
				Если КнопкаЕщёТойЖеПанели <> Неопределено И КнопкаЕщёТойЖеПанели.Количество() = 1 Тогда
					РодителиКнопки = Новый Массив;
					РодителиКнопки.Добавить(КнопкаЕщёТойЖеПанели[0]);
				КонецЕсли;	 
			КонецЕсли;	 
		Иначе	
			НужныйТип = "Button";
			ПервыйРодитель = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, РодителиКнопки[0].ТекстЗаголовка, НужныйТип);
			Если ПервыйРодитель <> Неопределено И ПервыйРодитель.Количество() = 1 Тогда
				Если НЕ ЭлементUIAutomationРеальноВидим(ПервыйРодитель[0]) Тогда
					ПанельКнопок = ПрочитатьОбъектJSON(ВнешняяКомпонентаДляСкриншотов.ПолучитьРодителяЭлемента(ПервыйРодитель[0].ID));
					Если ПанельКнопок <> Неопределено Тогда
						КнопкаЕщёТойЖеПанели = НайтиЭлементыРодителяUIAutomation(ПанельКнопок.ID, "Еще", НужныйТип);
						Если КнопкаЕщёТойЖеПанели <> Неопределено И КнопкаЕщёТойЖеПанели.Количество() = 1 Тогда
							РодителиКнопки.Вставить(0, КнопкаЕщёТойЖеПанели[0]);
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	УровеньВложенности = 0;
	Для Каждого ТекРодитель Из РодителиКнопки Цикл
		УровеньВложенности = УровеньВложенности + 1;
		
		Если ТипЗнч(ТекРодитель) = Тип("Структура") Тогда
			ПереместитьМышкуПоКоординатамUIAutomation(ТекРодитель.Size);
			ЭмуляцияНажатияМышиUIAutomation(ТекРодитель);
			ВнешняяКомпонентаДляСкриншотов.sleep(500);
			Продолжить;
		КонецЕсли;	 
		
		Если УровеньВложенности = 1 Тогда
			НужныйТип = "Button";
		Иначе
			НужныйТип = "MenuItem";
		КонецЕсли;	  
		
		Если ТипЗнч(ТекРодитель) = Тип("Строка") Тогда
			СтрокаЗаголовок = ТекРодитель;
		Иначе	
			СтрокаЗаголовок = ТекРодитель.ТекстЗаголовка;
		КонецЕсли;	 
		ДанныеГрупп = НайтиЭлементыПроцессаUIAutomation(ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, СтрокаЗаголовок, НужныйТип);
		Если ДанныеГрупп <> Неопределено И ДанныеГрупп.Количество() = 1 Тогда
			ПереместитьМышкуПоКоординатамUIAutomation(ДанныеГрупп[0].Size);
			ЭмуляцияНажатияМышиUIAutomation(ДанныеГрупп[0]);
			ВнешняяКомпонентаДляСкриншотов.sleep(500);
		КонецЕсли;	 
		//Если ТекРодитель = "Ещё" И КоманднаяПанельФормы <> Неопределено  Тогда
		//	
		//КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Функция ТекстJavaScriptБраузер(КоординатыЛевогоКрая = Ложь)
	ТекстJavaScript = "
	|{
	|function pos(){
	|    let r = %2(%1)%3.getBoundingClientRect();
	|    return {
    |        x: Math.round(r.left + r.width / 2) + window.screenLeft,
    |        y: Math.round(r.top + r.height / 2) + window.screenTop + window.outerHeight - window.innerHeight,		
    |        sw: screen.width, 
    |        sh:screen.height,		
	|    }
	|}; JSON.stringify(pos())
	|}
	|";
	
	Если КоординатыЛевогоКрая Тогда
		ТекстJavaScript = СтрЗаменить(ТекстJavaScript,"r.width / 2","r.width / 10");
	КонецЕсли;	 
	
	Возврат ТекстJavaScript; 
КонецФункции	 

&НаКлиенте
Функция ТекстJavaScriptБраузерФорматированнаяГиперссылка(ИмяСсылки, КоординатыЛевогоКрая = Ложь)
	ТекстJavaScript = "
	|{
	|function pos(){
	|    let res = undefined;
	|	elem(%1).querySelectorAll('*[_url]').forEach(e => { 
	|	    if (e.innerText == '%2') res = e;
	|	});res;
	|    let r = res.getBoundingClientRect();
	|    return {
    |        x: Math.round(r.left + r.width / 2) + window.screenLeft,
    |        y: Math.round(r.top + r.height / 2) + window.screenTop + window.outerHeight - window.innerHeight,		
    |        sw: screen.width, 
    |        sh:screen.height,		
	|    }
	|}; JSON.stringify(pos())
	|}
	|";
	
	ТекстJavaScript = СтрЗаменить(ТекстJavaScript, "%2", ИмяСсылки);
	
	Если КоординатыЛевогоКрая Тогда
		ТекстJavaScript = СтрЗаменить(ТекстJavaScript,"r.width / 2","r.width / 10");
	КонецЕсли;	 
	
	Возврат ТекстJavaScript; 
КонецФункции	

&НаКлиенте
Процедура УстановитьИмяЭлементаВJavaScript(ТекстJavaScript, ИскатьПоИмени, Элемент, ИдЗначенияПереключателя)
	Если ИскатьПоИмени Тогда
		ЗначениеЗамены = Элемент.Имя;
		Если Найти("0123456789", ЗначениеЗамены) > 0 И СтрДлина(ЗначениеЗамены) = 1 Тогда
			ЗначениеЗамены = "Button0";
		КонецЕсли;	 
	Иначе	
		ЗначениеЗамены = Элемент.ТекстЗаголовка;
	КонецЕсли;	 
	
	Если ИдЗначенияПереключателя <> Неопределено Тогда
		ЗначениеЗамены  = "'" + ЗначениеЗамены + "', " + ИдЗначенияПереключателя;
	Иначе	
		ЗначениеЗамены  = "'" + ЗначениеЗамены + "'";
	КонецЕсли;	 
	ТекстJavaScript = СтрЗаменить(ТекстJavaScript, "%1", ЗначениеЗамены);
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьИмяВнутреннейКнопкиJavaScript(ТекстJavaScript, ИмяВнутреннейКнопки)
	Если ИмяВнутреннейКнопки <> Неопределено И Найти(ИмяВнутреннейКнопки, "querySelector") = 0 Тогда
		ТекстJavaScript = СтрЗаменить(ТекстJavaScript, "%3", ".querySelector('.btn." + ИмяВнутреннейКнопки + "')");
	ИначеЕсли ИмяВнутреннейКнопки <> Неопределено Тогда
		ТекстJavaScript = СтрЗаменить(ТекстJavaScript, "%3", ИмяВнутреннейКнопки);
	Иначе	
		ТекстJavaScript = СтрЗаменить(ТекстJavaScript, "%3", "");
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Функция УстановитьИмяФукцииJavaScript(ТекстJavaScript, ИмяФункции)
	ТекстJavaScript = СтрЗаменить(ТекстJavaScript, "%2", ИмяФункции);
КонецФункции	 

&НаКлиенте
Процедура КоординатыЭлементаJavaScript(Элемент, ТекстJavaScript, X, Y)
	#Если НЕ ВебКлиент Тогда
	
	КоординатыЭлемента = ВыполнитьJavaScriptБраузерСлужебный(ТекстJavaScript);
	
	Попытка
		СтрокаКоординаты = КоординатыЭлемента.result.result.value;
	Исключение
		СтрокаКоординаты = "";
	КонецПопытки;
	
	Если СтрокаКоординаты = Неопределено И НЕ Объект.ИгнорироватьОшибкиПоискаЭлементовВБраузере Тогда
		ТекстСообщения = ПодставитьПараметрыВСтроку(
			Локализовать("Не вышло получить координаты элемента <%1> в браузере: %2."),
			Элемент.ТекстЗаголовка,
			СтрокаКоординаты
		);
		Попытка
			ТекстСообщения = ТекстСообщения + Символы.ПС + КоординатыЭлемента.result.exceptionDetails.exception.description;
		Исключение
		КонецПопытки;
		ЗаписатьЛогВЖРОшибка("КоординатыЭлементаJavaScript", ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(СтрокаКоординаты);
		ДанныеКоординат = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ДанныеКоординат = Неопределено;
	КонецПопытки;

	Если ДанныеКоординат = Неопределено И НЕ Объект.ИгнорироватьОшибкиПоискаЭлементовВБраузере Тогда
		ТекстСообщения = ПодставитьПараметрыВСтроку(
			Локализовать("Не вышло получить координаты элемента <%1> в браузере: %2."),
			Элемент.ТекстЗаголовка,
			СтрокаКоординаты
		);
		Попытка
			ТекстСообщения = ТекстСообщения + Символы.ПС + КоординатыЭлемента.result.exceptionDetails.exception.description;
		Исключение
		КонецПопытки;
		ЗаписатьЛогВЖРОшибка("КоординатыЭлементаJavaScript", ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если ДанныеКоординат <> Неопределено Тогда
		ПересчитатьДанныеКоординатСУчетомМасштабирования(ДанныеКоординат, X, Y);
	КонецЕсли;	 
	
	#КонецЕсли
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьПеремещениеМышкиВнешнейКомпонентой(X, Y) Экспорт
	
	Если Объект.ЭмулироватьДвиженияМышкиVanessaExt Тогда
		КоличествоШагов = 150;
		Если Объект.КоличествоШаговПриДвиженииМышкиVanessaExt <> 0 Тогда
			КоличествоШагов = Объект.КоличествоШаговПриДвиженииМышкиVanessaExt;
		КонецЕсли;	 
		
		ПаузаМеждуШагами = 3;
		Если Объект.ПаузаМеждуШагамиПриДвиженииМышкиVanessaExt <> 0 Тогда
			ПаузаМеждуШагами = Объект.ПаузаМеждуШагамиПриДвиженииМышкиVanessaExt;
		КонецЕсли;	 
		
		ВнешняяКомпонентаДляСкриншотов.ЭмуляцияДвиженияМыши(X + Объект.СмещениеПоГоризонталиДвиженияМышкиVanessaExt,
			Y + Объект.СмещениеПоВертикалиДвиженияМышкиVanessaExt, КоличествоШагов, ПаузаМеждуШагами);
	Иначе
		ВнешняяКомпонентаДляСкриншотов.УстановитьПозициюКурсора(X, Y);
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЭмуляциюКликаПоКоординатам(Знач X, Знач Y) Экспорт
	
	ДанныеКоординат = Новый Структура("X, Y", X, Y);
	X = 0;
	Y = 0;
	ПересчитатьДанныеКоординатСУчетомМасштабирования(ДанныеКоординат, X, Y);
	ВыполнитьПеремещениеМышкиВнешнейКомпонентой(X, Y);
	ВнешняяКомпонентаДляСкриншотов.ЭмуляцияНажатияМыши(0);
		
КонецПроцедуры

&НаКлиенте
Функция КликПоЭлементуФормыБраузерСлужебный(Элемент, ИмяФункции, ИскатьПоИмени = Ложь, ИдЗначенияПереключателя = Неопределено, ИмяВнутреннейКнопки = Неопределено, ЭмулироватьКлик = Ложь, ВыполнитьДействие = Истина, КоординатыЛевогоКрая = Ложь, ДопПараметры = Неопределено)
	Если ТипЗнч(Элемент) = Тип("ТестируемаяКнопкаФормы") И Элемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели Тогда
		РаскрытьПодменюКнопки(Элемент);
	КонецЕсли;	 
	
	ТекстJavaScript = "";
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ФорматированнаяСтрока") И ДопПараметры.ФорматированнаяСтрока Тогда
			ТекстJavaScript = ТекстJavaScriptБраузерФорматированнаяГиперссылка(ДопПараметры.Гиперссылка, КоординатыЛевогоКрая);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ПустаяСтрока(ТекстJavaScript) Тогда
		ТекстJavaScript = ТекстJavaScriptБраузер(КоординатыЛевогоКрая);
	КонецЕсли;	 
	
	УстановитьИмяЭлементаВJavaScript(ТекстJavaScript, ИскатьПоИмени, Элемент, ИдЗначенияПереключателя);
	УстановитьИмяВнутреннейКнопкиJavaScript(ТекстJavaScript, ИмяВнутреннейКнопки);
	УстановитьИмяФукцииJavaScript(ТекстJavaScript, ИмяФункции);
	
	Если ИмяФункции = "findSwitchButton" Тогда
		ТекстJavaScript = СтрЗаменить(ТекстJavaScript,"findSwitchButton(","findSwitchButton(elem(");
		ТекстJavaScript = СтрЗаменить(ТекстJavaScript,"', ","'), ");
	КонецЕсли;	 
	
	Если ИмяВнутреннейКнопки = "PlusBtn" Тогда
		ТекстJavaScript = "
		|{
		|    let s = 
		|        '.eddBottom .webBtn,' + // 8.3.17
		|        '.editDropDownBottom .editDropDownButton'; // 8.3.16
		|    let e = $(s).filter((i, e) => isElementVisible(e)).last()[0];
		|    let r = e.getBoundingClientRect();
		|    JSON.stringify({
		|        x: Math.round(r.left + r.width / 2) + window.screenLeft,
		|        y: Math.round(r.top + r.height / 2) + window.screenTop + window.outerHeight - window.innerHeight,    
		|        sw: screen.width, 
		|        sh:screen.height,    
		|    });
		|}		
		|";
		
		X = 0;
		Y = 0;
		КоординатыЭлементаJavaScript(Элемент, ТекстJavaScript, X, Y);
	Иначе	
		X = 0;
		Y = 0;
		КоординатыЭлементаJavaScript(Элемент, ТекстJavaScript, X, Y);
	КонецЕсли;	 
	
	Если ИмяВнутреннейКнопки = "iCB" И (X <= 0 ИЛИ Y <= 0) Тогда
		Попытка
			Если НЕ Элемент.ВыпадающийСписокОткрыт() Тогда
				ОткрытьВыпадающийСписок(Элемент);
				Элемент.ОткрытьВыпадающийСписок();
				ВнешняяКомпонентаДляСкриншотов.sleep(500);
			КонецЕсли;	 
		Исключение
		КонецПопытки;
		
		ТекстJavaScript = "
		|{
		|    let s = 
		|        '.eddBottom .hyperlink,' + // 8.3.16
		|        '.editDropDownBottom .editDropDownLink'; // 8.3.17
		|    let e = $(s).filter((i, e) => isElementVisible(e)).last()[0];
		|    let r = e.getBoundingClientRect();
		|    JSON.stringify({
		|        x: Math.round(r.left + r.width / 2) + window.screenLeft,
		|        y: Math.round(r.top + r.height / 2) + window.screenTop + window.outerHeight - window.innerHeight,    
		|        sw: screen.width, 
		|        sh:screen.height,    
		|    });
		|}		
		|";
		
		X = 0;
		Y = 0;
		КоординатыЭлементаJavaScript(Элемент, ТекстJavaScript, X, Y);
	КонецЕсли;	 
	
	Если (X = 0 ИЛИ Y = 0) И НЕ Объект.ИгнорироватьОшибкиПоискаЭлементовВБраузере Тогда
		ТекстСообщения = ПодставитьПараметрыВСтроку(
			Локализовать("Не вышло получить координаты элемента <%1> в браузере: %2."),
			Элемент.ТекстЗаголовка,
			""
		);
		ЗаписатьЛогВЖРОшибка("КликПоЭлементуФормыБраузерСлужебный", ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если X <> 0 И Y <> 0 Тогда
		ВыполнитьПеремещениеМышкиВнешнейКомпонентой(X, Y);
	КонецЕсли;	 
	
	КликПоЭлементу_Автоинструкции(Элемент, ВыполнитьДействие, ЭмулироватьКлик);
	
КонецФункции	 

&НаКлиенте
Процедура КликПоЭлементу_Автоинструкции(Элемент, ВыполнитьДействие = Истина, ЭмулироватьКлик = Ложь)
	НадоЭмулироватьАнимациюКлика = ВыполнитьДействие = Истина;
	
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ТипЗнч(Элемент) = Тип("ТестируемаяКнопкаКомандногоИнтерфейса")
	ИЛИ  (ТипЗнч(Элемент) = Тип("ТестируемаяДекорацияФормы") И Элемент.Вид = ВидДекорацииФормы.Надпись)
	ИЛИ  (ТипЗнч(Элемент) = Тип("ТестируемоеПолеФормы") И Элемент.Вид = ВидПоляФормы.ПолеНадписи)
	ИЛИ  (ТипЗнч(Элемент) = Тип("ТестируемоеПолеФормы") И Элемент.Вид = ВидПоляФормы.ПолеКартинки)
	ИЛИ  ТипЗнч(Элемент) = Тип("ТестируемаяКнопкаФормы") Тогда
		Если ВыполнитьДействие Тогда
			МодульРаботаСБраузером().АнимацияКлика(Элемент);
			НадоЭмулироватьАнимациюКлика = Ложь;
			
			Элемент.Нажать();
		КонецЕсли;	 
	ИначеЕсли  ТипЗнч(Элемент) = Тип("ТестируемаяГруппаФормы") Тогда
		Если ВыполнитьДействие Тогда
			Если НЕ ЭмулироватьКлик Тогда
				МодульРаботаСБраузером().АнимацияКлика(Элемент);
				НадоЭмулироватьАнимациюКлика = Ложь;
			КонецЕсли;	 
			Элемент.Активизировать();
		КонецЕсли;	 
	КонецЕсли;
	
	Если ЭмулироватьКлик Тогда
		ВнешняяКомпонентаДляСкриншотов.ЭмуляцияНажатияМыши(0);
		НадоЭмулироватьАнимациюКлика = Ложь;
		ВнешняяКомпонентаДляСкриншотов.sleep(500);
	КонецЕсли;
	
	Если НадоЭмулироватьАнимациюКлика Тогда
		МодульРаботаСБраузером().АнимацияКлика(Элемент);
	КонецЕсли;	 
	
КонецПроцедуры 

// Делает клик по переданным координатам UI Automation
&НаКлиенте
Процедура КликПоЭлементуБезПеремещенияМышкиUIAutomation(ДанныеКоординат, ДвойнойКлик = Ложь, ЛеваяКнопка = Истина) Экспорт
	
	X =  Окр((ДанныеКоординат.Right + ДанныеКоординат.Left) / 2, 0);
	Y = Окр((ДанныеКоординат.Top + ДанныеКоординат.Bottom) / 2, 0);
	
	Если X = 0 и Y = 0 Тогда
		ВызватьИсключение Локализовать("Не получилось сделать клик по элементу UIAutomation. Элемент невидим.");
	КонецЕсли;	 
	
	ВнешняяКомпонентаДляСкриншотов.УстановитьПозициюКурсора(X , Y);
	Если ДвойнойКлик Тогда
		ВнешняяКомпонентаДляСкриншотов.ЭмуляцияДвойногоНажатия();	
	Иначе	
		Если ЛеваяКнопка Тогда
			ВнешняяКомпонентаДляСкриншотов.ЭмуляцияНажатияМыши(0);	
		Иначе	
			ВнешняяКомпонентаДляСкриншотов.ЭмуляцияНажатияМыши(1);	
		КонецЕсли;	 
	КонецЕсли;	 
	ВнешняяКомпонентаДляСкриншотов.sleep(300);
	
КонецПроцедуры 

// Определяет координаты прямоугольника по переданному массиву элементов UI Automation
&НаКлиенте
Процедура ОпределитьКоординатыПоМассивуЭлементовUIAutomation(МассивЭлементов, Left, Top, Bottom, Right) Экспорт
	
	Для Каждого ДанныеЭлемента Из МассивЭлементов Цикл
		ТолькоВертикальныеКоординаты = Ложь;
		
		Если ДанныеЭлемента.Свойство("ТолькоВертикальныеКоординаты") Тогда
			ТолькоВертикальныеКоординаты = ДанныеЭлемента.ТолькоВертикальныеКоординаты;
		КонецЕсли;	 
		
		Если ДанныеЭлемента.Свойство("Элемент") Тогда
			ТекДанныеЭлемента = ДанныеЭлемента.Элемент;
		Иначе	
			ТекДанныеЭлемента = ДанныеЭлемента;
		КонецЕсли;
		
		Если ТекДанныеЭлемента.Size.Left < Left И НЕ ТолькоВертикальныеКоординаты Тогда
			Left = ТекДанныеЭлемента.Size.Left;
		КонецЕсли;	 
		Если ТекДанныеЭлемента.Size.Top < Top Тогда
			Top = ТекДанныеЭлемента.Size.Top;
		КонецЕсли;	 
		Если ТекДанныеЭлемента.Size.Bottom > Bottom Тогда
			Bottom = ТекДанныеЭлемента.Size.Bottom;
		КонецЕсли;	 
		Если ТекДанныеЭлемента.Size.Right > Right И НЕ ТолькоВертикальныеКоординаты Тогда
			Right = ТекДанныеЭлемента.Size.Right;
		КонецЕсли;	 
	КонецЦикла;
	
КонецПроцедуры 

// Возвращает масштаб экрана с помощью внешней компоненты
&НаКлиенте
Функция ПолучитьМасштабЭкрана() Экспорт
	
	МасштабЭкрана = ВнешняяКомпонентаДляСкриншотов.ПолучитьМасштаб();
	Если МасштабЭкрана = 0 Тогда
		МасштабЭкрана = 100;
	КонецЕсли;
	
	Возврат МасштабЭкрана; 
	
КонецФункции	 

&НаКлиенте
Функция ВыполнитьКомандуХрома(ИмяКоманды, Параметры) Экспорт
	Если НЕ Объект.ИспользоватьКомпонентуVanessaExt Тогда
		ВызватьИсключение Локализовать("Необходимо включить использование внешней компоненты VanessaExt.");
	КонецЕсли;	 
	
	Если НЕ Объект.ИспользоватьБраузерПлюсWebSocket Тогда
		ВызватьИсключение Локализовать("Необходимо включить использование браузера через websocket.");
	КонецЕсли;	 
	
	ДанныеJSON = Новый Структура("id,method,params", 1, ИмяКоманды, Параметры);
	ТекстJSON = ВнешняяКомпонентаДляСкриншотов.ПослатьВебСокет(ЗаписатьОбъектJSON(ДанныеJSON));
	Возврат ПрочитатьСтрокуJSON(ТекстJSON);
	
КонецФункции 

&НаКлиенте
// Возвращет текущий ИдентификаторФрейма браузера
Функция ИдентификаторФрейма() Экспорт
	Возврат ИдентификаторФрейма;
КонецФункции	

&НаКлиенте
// Открывает вкладку браузера. Браузер уже должен был быть запущен ранее.
Процедура ОткрытьВкладкуБраузера(Адрес) Экспорт
	
	#Если НЕ ВебКлиент Тогда
	
	Заголовки = Новый Соответствие;
	Заголовки["Content-Type"] = "application/x-www-form-urlencoded";
	HTTPЗапрос = Новый HTTPЗапрос("/json/new?" + КодироватьСтрокуUrl(Адрес), Заголовки);
	HTTPСоединение = Новый HTTPСоединение("localhost", МодульРаботаСБраузером().ПортБраузера, , , , 10);
	Попытка
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("PUT", HTTPЗапрос);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	ТекстJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	Попытка
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ВызватьИсключение Ванесса.Локализовать("Ошибка чтения Json.") + Символы.ПС + ОписаниеОшибки() + Символы.ПС + ТекстJSON;
	КонецПопытки;
	АдресВебСокет = ДанныеJSON.webSocketDebuggerUrl;
	
	РезультатПодключения = ВнешняяКомпонентаДляСкриншотов.ОткрытьВебСокет(АдресВебСокет);
	Если Не ПустаяСтрока(РезультатПодключения) Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Ошибка подключения WebSocket.")
		);
	КонецЕсли;
	
	ИдентификаторФрейма = ДанныеJSON.id;
	ПараметрыКоманды = Новый Структура("frameId", ИдентификаторФрейма);
	ДанныеJSON = ВыполнитьКомандуХрома("Page.createIsolatedWorld", ПараметрыКоманды);
	КонтекстJavaScript = ДанныеJSON.result.executionContextId;
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
// Запускает браузер
Процедура ЗапуститьБраузер(SilentLaunch = Истина) Экспорт
	МодульРаботаСБраузером().ЗапуститьБраузер(SilentLaunch);
КонецПроцедуры

&НаКлиенте
// Возвращает данные вкладок браузера
Функция ДанныеВкладокБраузера() Экспорт
	
	#Если НЕ ВебКлиент Тогда
	
	HTTPЗапрос = Новый HTTPЗапрос("/json/list");
	HTTPСоединение = Новый HTTPСоединение("localhost", МодульРаботаСБраузером().ПортБраузера, , , , 10);
	Попытка
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	ТекстJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
	Возврат ДанныеJSON;
	
	#КонецЕсли
	
КонецФункции	

&НаКлиенте
// Активизирует вкладку бразуера по заголовку или части заголовка. Вкладка уже должна существовать.
Процедура АктивизироватьВкладкуБраузераПоЗаголовкуВкладки(ЗаголовокВкладки) Экспорт
	
	ДанныеJSON = ДанныеВкладокБраузера();
	
	Нашли = Ложь;
	Для Каждого Элем Из ДанныеJSON Цикл
		Если НРег(Элем.title) = НРег(ЗаголовокВкладки) Тогда
			Нашли = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	

	Если НЕ Нашли Тогда
		Для Каждого Элем Из ДанныеJSON Цикл
			Если СтрокаСоответствуетШаблону(НРег(Элем.title), НРег(ЗаголовокВкладки)) Тогда
				Нашли = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	Если НЕ Нашли Тогда
		ТекстИсключения = Локализовать("Не найдена вкладка браузера <%1>.");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%1", ЗаголовокВкладки);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос("/json/activate/" + Элем.id);
	HTTPСоединение = Новый HTTPСоединение("localhost", МодульРаботаСБраузером().ПортБраузера, , , , 10);
	Попытка
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	ТекстJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	АдресВебСокет = Элем.webSocketDebuggerUrl;
	
	РезультатПодключения = ВнешняяКомпонентаДляСкриншотов.ОткрытьВебСокет(АдресВебСокет);
	Если Не ПустаяСтрока(РезультатПодключения) Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Ошибка подключения WebSocket.")
		);
	КонецЕсли;
	
	ИдентификаторФрейма = Элем.id;
	ПараметрыКоманды = Новый Структура("frameId", ИдентификаторФрейма);
	ДанныеJSON = ВыполнитьКомандуХрома("Page.createIsolatedWorld", ПараметрыКоманды);
	КонтекстJavaScript = ДанныеJSON.result.executionContextId;
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияОшибок

&НаКлиенте
Процедура ЗарегистрироватьОшибкуПоПоследнемуУпавшемуШагуВПопыткеИсключении(ТекстОписаниеОшибки) Экспорт
	НадоЗарегистрироватьОшибкуИзСекцииИсключение = Ложь;
	ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	
	Если НЕ РезультатПрохожденияТестовСценария.Свойство("ШагУпавшийВПопыткеИсключении") Тогда
		ВызватьИсключение Локализовать("Не найден шаг, упавший в секции Попытка/Исключение.");
	КонецЕсли;	
	
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	ТекШаг = Шаги[ТекИД_ШагаВМассиве];
	
	РезультатПрохожденияТестовСценария.Вставить("СчитатьСценарийУпавшим", Истина);
	РезультатПрохожденияТестовСценария.Вставить("ВСценарииБылиШагиРегистрирующиеОшибкиИзПопыткиИсключение", Истина);
	
	НадоЗарегистрироватьОшибкуИзСекцииИсключение = Истина;
	ТекШаг.Вставить("ТекстОписаниеОшибки", ТекстОписаниеОшибки);
	ТекШаг.Вставить("РегистрацияОшибки", Истина);
	
КонецПроцедуры 

// Устанавливает текущему шагу данные для актуализации ошибки
&НаКлиенте
Процедура УстановитьДанныеДляАктуализации(ДанныеДляАктуализации) Экспорт
	
	ДанныеШагаСценария = ДанныеШагаСценария();
	
	СтрокаДереваШаг = Неопределено;
	НайтиСтрокуДереваПоИдСтроки(ДанныеШагаСценария.ИдСтроки, Объект.ДеревоТестов.ПолучитьЭлементы(), СтрокаДереваШаг);
	Если СтрокаДереваШаг <> Неопределено Тогда
		Если ТипЗнч(СтрокаДереваШаг.ПроизвольныеЗначения) <> Тип("Структура") Тогда
			СтрокаДереваШаг.ПроизвольныеЗначения = Новый Структура;
		КонецЕсли;	
		СтрокаДереваШаг.ПроизвольныеЗначения.Вставить("ДанныеДляАктуализации", ДанныеДляАктуализации);
	КонецЕсли;	
	
КонецПроцедуры

// Выполняет актуализацию текста шага по данным ошибки
&НаКлиенте
Процедура АктуализироватьПоДаннымОшибки(ДанныеОшибки) Экспорт
	
	Если ДанныеОшибки.Свойство("id") Тогда
		СохраненныеДанные = ДанныеОшибокVanessaEditor[ДанныеОшибки.id];
		НомерСтрокиДерева = СохраненныеДанные.НомерСтрокиДерева;
	ИначеЕсли ДанныеОшибки.Свойство("НомерСтрокиДерева") Тогда
		НомерСтрокиДерева = ДанныеОшибки.НомерСтрокиДерева;
	Иначе
		НомерСтрокиДерева = Неопределено;
	КонецЕсли;	
	
	Если НомерСтрокиДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДереваШаг = Неопределено;
	НайтиСтрокуДереваПоИдСтроки(НомерСтрокиДерева, Объект.ДеревоТестов.ПолучитьЭлементы(), СтрокаДереваШаг);
	Если СтрокаДереваШаг = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаДереваШаг.ПроизвольныеЗначения) = Тип("Структура")
		И СтрокаДереваШаг.ПроизвольныеЗначения.Свойство("ТипСравненияЗначения")
		И СтрокаДереваШаг.ПроизвольныеЗначения.ТипСравненияЗначения = "СравнениеТаблицыСМакетом"
		Тогда
		
		глДопПараметры = Новый Структура;
		глДопПараметры.Вставить("НомерСтрокиВФиче", СтрокаДереваШаг.НомерСтрокиВФиче);
		глДопПараметры.Вставить("ПроизвольныеЗначения", СтрокаДереваШаг.ПроизвольныеЗначения);
		ПодключитьОбработчикОжидания("АктуализироватьМакетТаблицыОбработчикОжидания", 0.1, Истина);
		
	ИначеЕсли ТипЗнч(СтрокаДереваШаг.ПроизвольныеЗначения) = Тип("Структура")
		И СтрокаДереваШаг.ПроизвольныеЗначения.Свойство("ТипСравненияЗначения")
		И СтрокаДереваШаг.ПроизвольныеЗначения.ТипСравненияЗначения = "СравнениеТабличногоДокументаСМакетом"
		Тогда
		
		глДопПараметры = Новый Структура;
		глДопПараметры.Вставить("НомерСтрокиВФиче", СтрокаДереваШаг.НомерСтрокиВФиче);
		глДопПараметры.Вставить("ПроизвольныеЗначения", СтрокаДереваШаг.ПроизвольныеЗначения);
		ПодключитьОбработчикОжидания("АктуализироватьМакетПриСравненииМакетовТаблицыОбработчикОжидания", 0.1, Истина);
		
	ИначеЕсли ТипЗнч(СтрокаДереваШаг.ПроизвольныеЗначения) = Тип("Структура")
		И СтрокаДереваШаг.ПроизвольныеЗначения.Свойство("ДанныеДляАктуализации")
		Тогда
		
			АктуализироватьПараметрыШагаПоДаннымОшибкиВРедакторе(СтрокаДереваШаг.НомерСтрокиВФиче, СтрокаДереваШаг.ПроизвольныеЗначения.ДанныеДляАктуализации);
			
	ИначеЕсли ТипЗнч(СтрокаДереваШаг.ПроизвольныеЗначения) = Тип("Структура")
		И СтрокаДереваШаг.ПроизвольныеЗначения.Свойство("ТипСравненияЗначения")
		И СтрокаДереваШаг.ПроизвольныеЗначения.ТипСравненияЗначения = "СравнениеТабличногоДокументаСТаблицейGherkin"
		И СтрокаДереваШаг.ПроизвольныеЗначения.Свойство("ТаблицаТекущееЗначение")
		И СтрокаДереваШаг.ПроизвольныеЗначения.Свойство("ТаблицаЭталон")
		Тогда
		
			ПолнаяЗамена = Ложь;
			Если СтрокаДереваШаг.ПроизвольныеЗначения.Свойство("ПолнаяЗамена") Тогда
				ПолнаяЗамена = СтрокаДереваШаг.ПроизвольныеЗначения.ПолнаяЗамена;
			КонецЕсли;	
			глДопПараметры = Новый Структура;
			глДопПараметры.Вставить("НомерСтрокиВФиче", СтрокаДереваШаг.НомерСтрокиВФиче);
			глДопПараметры.Вставить("ПроизвольныеЗначения", СтрокаДереваШаг.ПроизвольныеЗначения);
			глДопПараметры.Вставить("ПолнаяЗамена", ПолнаяЗамена);
			ПодключитьОбработчикОжидания("АктуализироватьТаблицуGherkinПриСравненииТабличногоДокументаПоДаннымОшибкиВРедактореОбработчик", 0.1, Истина);
			
	ИначеЕсли ТипЗнч(СтрокаДереваШаг.ПроизвольныеЗначения) = Тип("Структура")
		И СтрокаДереваШаг.ПроизвольныеЗначения.Свойство("ТаблицаЭталон")
		И СтрокаДереваШаг.ПроизвольныеЗначения.Свойство("ТаблицаТекущееЗначение")
		Тогда
		
			глДопПараметры = Новый Структура;
			глДопПараметры.Вставить("НомерСтрокиВФиче", СтрокаДереваШаг.НомерСтрокиВФиче);
			глДопПараметры.Вставить("ПроизвольныеЗначения", СтрокаДереваШаг.ПроизвольныеЗначения);
			ПодключитьОбработчикОжидания("АктуализироватьТаблицуGherkinПоДаннымОшибкиВРедактореОбработчик", 0.1, Истина);
			
	ИначеЕсли ТипЗнч(СтрокаДереваШаг.ПроизвольныеЗначения) = Тип("Структура")
		И СтрокаДереваШаг.ПроизвольныеЗначения.Свойство("ОписанияСтрокиПриПереходеКСтрокеТаблицы")
		И СтрокаДереваШаг.ПроизвольныеЗначения.Свойство("ИмяТаблицыПриПереходеКСтрокеТаблицы")
		Тогда
		
			глДопПараметры = Новый Структура;
			глДопПараметры.Вставить("НомерСтрокиВФиче", СтрокаДереваШаг.НомерСтрокиВФиче);
			глДопПараметры.Вставить("ПроизвольныеЗначения", СтрокаДереваШаг.ПроизвольныеЗначения);
			ПодключитьОбработчикОжидания("АктуализироватьТаблицуОписанияСтрокиПриПереходеКСтрокеОбработчикОжидания", 0.1, Истина);
			
	Иначе		
		СообщитьПользователю(Локализовать("Для данного типа ошибки не предусмотрена актуализация шага."));
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерактивнаяСправкаЭкспорт

// Воспроизводит текст согласно заданных настроек диктора
&НаКлиенте
Процедура ВоспроизвестиФразуАсинхронно(Текст) Экспорт
	ТекШаг = Новый Структура;
	ТекШаг.Вставить("ТекстИнструкция", Текст);
	ТекШаг.Вставить("МассивТеговШага", Новый Массив);
	НачатьОзвучкуШага(ТекШаг);
КонецПроцедуры 

// Возвращает имя заголовок команды по её имени
&НаКлиенте
Функция ЗаголовокКоманды(ИмяКоманды) Экспорт
	Возврат ЗаголовокКомандыСервер(ИмяКоманды);
КонецФункции

// Выполняет чтение файла кеш озвучки интерактивной справки
&НаКлиенте
Функция ПрочитатьДанныеКешОзвучкиИнтерактивнойСправки(КаталогКеша = Неопределено) Экспорт
	#Если НЕ ВебКлиент Тогда
	
	Если ДанныеКешОзвучкиИнтерактивнойСправки <> Неопределено Тогда
		Возврат ДанныеКешОзвучкиИнтерактивнойСправки;
	КонецЕсли;	 
	
	//Это значение кешируется в глобальных переменных
	ДанныеКешОзвучкиИнтерактивнойСправки = Новый Соответствие;
	
	Если НЕ ЗначениеЗаполнено(КаталогКеша) Тогда
		КаталогКеша = Объект.КаталогКешОзвучкиДляИнтерактивнойСправки;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(КаталогКеша) Тогда
		ДанныеКешОзвучкиИнтерактивнойСправки = Неопределено;
		Возврат ДанныеКешОзвучкиИнтерактивнойСправки;
	КонецЕсли;	
	
	ИмяФайла = ДополнитьСлешВПуть(КаталогКеша) + "Voices.json";
	
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		ДанныеКешОзвучкиИнтерактивнойСправки = Неопределено;
		Отладка (ПодставитьПараметрыВСтроку(Локализовать("Файл <%1> не существует."),
			ИмяФайла
		));
		Возврат ДанныеКешОзвучкиИнтерактивнойСправки;
	КонецЕсли;	 
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ИмяФайла);
	Попытка
		ДанныеФайла = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ДанныеФайла = Неопределено;
		ДанныеКешОзвучкиИнтерактивнойСправки = Неопределено;
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	
	Если ДанныеФайла = Неопределено Тогда
		ДанныеКешОзвучкиИнтерактивнойСправки = Неопределено;
		Отладка (ПодставитьПараметрыВСтроку(Локализовать("Не получилось прочитать данные файла <%1>."),
			ИмяФайла
		));
		Возврат ДанныеКешОзвучкиИнтерактивнойСправки;
	КонецЕсли;
	
	Для Каждого Элем Из ДанныеФайла.data Цикл
		ИмяФайла = ДополнитьСлешВПуть(ДополнитьСлешВПуть(КаталогКеша) + Элем.Driver + "_" + Элем.Voice) + "data.json";
		Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
			ДанныеКешОзвучкиИнтерактивнойСправки = Неопределено;
			Отладка (ПодставитьПараметрыВСтроку(Локализовать("Файл <%1> не существует."),
				ИмяФайла
			));
			Возврат ДанныеКешОзвучкиИнтерактивнойСправки;
		КонецЕсли;
		
		Файл = Новый Файл(ИмяФайла);
		ЧастьПути = Файл.Путь;
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.ОткрытьФайл(ИмяФайла);
		Попытка
			ДанныеФайлаОзвучки = ПрочитатьJSON(ЧтениеJSON);
		Исключение
			ДанныеКешОзвучкиИнтерактивнойСправки = Неопределено;
			ДанныеФайлаОзвучки = Неопределено;
			Возврат ДанныеКешОзвучкиИнтерактивнойСправки;
		КонецПопытки;
		ЧтениеJSON.Закрыть();
		
		Для Каждого ДанныеMp3 Из ДанныеФайлаОзвучки.data Цикл
			Если НЕ ДанныеMp3.Свойство("Orig") Тогда
				Продолжить;
			КонецЕсли;	
			Если Найти(ДанныеMp3.FileName, ЧастьПути) = 0 Тогда
				ДанныеMp3.FileName = ЧастьПути + ДанныеMp3.FileName;
			КонецЕсли;	
			ДанныеКешОзвучкиИнтерактивнойСправки.Вставить(ДанныеMp3.Text, ДанныеMp3);
			
			//Также добавляются данные по оригинальной строке, чтобы можно было понять есть ли для текста озвучка
			ДанныеКешОзвучкиИнтерактивнойСправки.Вставить(ДанныеMp3.Orig, ДанныеMp3);
		КонецЦикла;	 
		
	КонецЦикла;	 
	
	Возврат ДанныеКешОзвучкиИнтерактивнойСправки;
	
	#КонецЕсли
	
КонецФункции

// Выполняет проверку, что в для данной фичи есть озвучка в кеш
&НаКлиенте
Функция ВКешЕстьВсеMp3ДляДаннойФичи(ДанныеКеш, ИмяФайла) Экспорт
	
	Если ДанныеКеш = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");
	ТекстФайла = Текст.Прочитать();
	Текст.Закрыть();
	
	МассивСтрок = _СтрРазделить(ТекстФайла, Символы.ПС);
	Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
		Стр = СокрЛП(МассивСтрок[Сч]);
		
		Если Лев(Стр, 1) = "*" Тогда
			ТекстДиктора = СокрЛП(Сред(Стр, 2));
			ДанныеИзКеш = ДанныеКеш[ТекстДиктора];
			Если ДанныеИзКеш = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции

// Проверяет, что версия, указанная в кеш озвучки совпадает с мажорной версией релиза Vanessa Automation.
// Например, для версии 1.2.040.3 мажорной версией будет 1.2.040.1
&НаКлиенте
Функция ВерисияКешФайлаОзвучкиСовпадаетСМажорнойВерсией() Экспорт
	#Если НЕ ВебКлиент Тогда
	
	ИмяФайла = ДополнитьСлешВПуть(Объект.КаталогКешОзвучкиДляИнтерактивнойСправки) + "Voices.json";
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ИмяФайла);
	Попытка
		ДанныеФайла = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ДанныеФайла = Неопределено;
		ДанныеКешОзвучкиИнтерактивнойСправки = Неопределено;
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	
	Если НЕ ДанныеФайла.Свойство("version") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеФайла.version = МажорнаяРелизнаяВерсия() Тогда
		Возврат Истина;
	КонецЕсли;
	
	#КонецЕсли

	Возврат Ложь;
	
КонецФункции	

// Сбрасывает кеш интерактивной справки
&НаКлиенте
Функция СброситьКешОзвучкиИнтерактивнойСправки() Экспорт
	ДанныеКешОзвучкиИнтерактивнойСправки = Неопределено;
КонецФункции	 

// Запускает урок интеракивной справки по имени фича файла
&НаКлиенте
Процедура ЗапуститьУрокИнтерактивнойСправки(Стр) Экспорт
	
	КаталогПоиска = КаталогУроков();
	ИмяФайла = Стр + ".feature";
	
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;
	НайтиФайлыКомандаСистемы(КаталогПоиска, СписокКаталогов, СписокФайлов, Истина, ИмяФайла);
	
	Если СписокФайлов.Количество() = 0 Тогда
		Если Объект.ВерсияПоставки = "single" Тогда
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("СкачатьУроки", Истина);
			ОткрытьМастерНастройкиИнтерактивнойСправки(Неопределено, Неопределено, ДопПараметры);
			Возврат;
		Иначе	
			ВызватьИсключение ПодставитьПараметрыВСтроку(
				Локализовать("Файл <%1> не найден."),
				ИмяФайла
			);
		КонецЕсли;	 
	КонецЕсли;	 
	
	ПолноеИмяФайла = СписокФайлов[0].Значение.ПолноеИмя;
	
	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	Если НЕ ПроверкаЧтоРежимОбученияБудетРаботать(ПараметрыВидео, ПолноеИмяФайла) Тогда
		//Тут надо открыть мастер настройки
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("СтрокаMDФайла", Стр);
		ОткрытьМастерНастройкиИнтерактивнойСправки(ПараметрыВидео, ПолноеИмяФайла, ДопПараметры);
		Возврат;
	КонецЕсли;	 
	
	ПрочитатьДанныеКешОзвучкиИнтерактивнойСправки();
	
	Объект.КаталогФич = ПолноеИмяФайла;
	
	Объект.ВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Истина;
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВключенРежимОбучения", Истина);
	ЗагрузитьФичи(ДопПараметры);
	
КонецПроцедуры 

// Возвращает заголовок элемента формы Vanessa Automation с помощью данных объекта
&НаКлиенте
Функция ЗаголовокЭлементаФормыVAИзДанныхОбъекта(ИмяЭлемента) Экспорт
	
	Возврат ЗаголовокЭлементаФормыVAИзДанныхОбъектаСервер(ИмяЭлемента);
	
КонецФункции	 

// Возвращает имя связанного объекта данных
&НаКлиенте
Функция ИмяОбъектаДанныхЭлементаФормыVAИзДанныхОбъекта(ИмяЭлемента) Экспорт
	
	Возврат ИмяОбъектаДанныхЭлементаФормыVAИзДанныхОбъектаСервер(ИмяЭлемента);
	
КонецФункции	 

// Позволяет выполнить текст в контексте основной формы Vanessa Automation
&НаКлиенте
Процедура ВыполнитьКодВКонтекстеОсновнойФормыVanessaAutomation(Текст) Экспорт
	
	Выполнить(Текст);
	
КонецПроцедуры 

// Возвращает настройки по умолчанию для отрисовки эффектов компонентой VanessaExt
&НаКлиенте
Функция ПолучитьНастройкиРисования() Экспорт
	
	ВремСтруктура = Новый Структура;
	ВремСтруктура.Вставить("color", ОсновнойЗеленыйЦвет());
	ВремСтруктура.Вставить("transparency", 127);
	ВремСтруктура.Вставить("duration", 4000);
	ВремСтруктура.Вставить("thickness", 6);
	ВремСтруктура.Вставить("frameDelay", 20);
	ВремСтруктура.Вставить("text", "Текст");
	Возврат ВремСтруктура;
	
КонецФункции	 

// Выполняет подготовку сеанса, чтобы на нём можно было проводить обучение
&НаКлиенте
Процедура ОбработкаДляСеансаВрежимеОбучения() Экспорт
	
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Элементы.ГруппаДереваФайлов.Видимость Тогда
		VanessaEditorПоказатьСкрытьДеревоКаталогов(Неопределено);
	КонецЕсли;	 
	Если Элементы.ГруппаGit.Видимость Тогда
		VanessaEditorПоказатьСкрытьДеревоGit(Неопределено);
	КонецЕсли;	 
	
	АктивизироватьСтраницуЗапускТестов();
	
	Если Объект.СоздаватьИнструкциюВидео Тогда
		ВключитьВыключитьЗаписьВидео(Неопределено);
	КонецЕсли;	 
	Если Объект.ОзвучиватьВыполнениеСценария Тогда
		ВключитьВыключитьОзвучиваниеВыполненияСценария(Неопределено);
	КонецЕсли;
	
	Если Объект.ПодсвечиватьКликМышкиВБраузереVanessaExt Тогда
		Объект.ПодсвечиватьКликМышкиВБраузереVanessaExt = Ложь;
	КонецЕсли;	 
	
	ТемаРедактораVanessaEditorПриИзменении(Неопределено);
	
КонецПроцедуры 

// Устанавливает отображение строк подсценариев в редакторе
&НаКлиенте
Процедура УстановитьОтображениеСтрокПодсценариевВРедакторе(Значение) Экспорт
	
	Объект.ПоказыватьСтрокиПодсценариевVanessaEditor = Значение;
	VanessaEditorПоказыватьСтрокиПодсценариевПриИзменении();
	
КонецПроцедуры 

// Возвращает каталог уроков
&НаКлиенте
Функция КаталогУроков() Экспорт
	Возврат ДополнитьСлешВПуть(ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "training"); 	
КонецФункции	 

// Скрывает часть кнопок командной панели редактора, чтобы показать кнопки на экранах с маленьким разрешением.
&НаКлиенте
Процедура СкрытьЧастьКнопокКоманднойПанелиРедактораВРежимеОбучения() Экспорт
	МассивКнопок = ЧастьКнопокКоманднойПанелиРедактораВРежимеОбученияДляСкрытия();
	Для Каждого Элем Из МассивКнопок Цикл
		ОбъектКонтекстСохраняемый.ФормаVAВРежимеОбучения.Элементы[Элем].Видимость = Ложь;
	КонецЦикла;	 
КонецПроцедуры 

// Показывает часть кнопок командной панели редактора, скрытые на экранах с маленьким разрешением.
&НаКлиенте
Процедура ПоказатьЧастьКнопокКоманднойПанелиРедактораВРежимеОбучения() Экспорт
	МассивКнопок = ЧастьКнопокКоманднойПанелиРедактораВРежимеОбученияДляСкрытия();
	Для Каждого Элем Из МассивКнопок Цикл
		ОбъектКонтекстСохраняемый.ФормаVAВРежимеОбучения.Элементы[Элем].Видимость = Истина;
	КонецЦикла;	 
КонецПроцедуры 

// Вызывает обработчик поля языка Gherkin
&НаКлиенте
Процедура ЯзыкГенератораGherkinПриИзмененииОбработчикЭкспорт() Экспорт
	ЯзыкГенератораGherkinПриИзмененииОбработчик();
КонецПроцедуры 

// Скрывает табло переменных
&НаКлиенте
Функция СкрытьТаблоПеременных() Экспорт
	
	Если Элементы.ГруппаПросмотрПеременных.Видимость Тогда
		Элементы.ГруппаПросмотрПеременных.Видимость = Ложь;
	КонецЕсли;	 
	
КонецФункции	 

// Закрывает форму известных шагов, если она открывалась в режиме обучения и могла остаться открытой
&НаКлиенте
Процедура ЗакрытьФормуИзвестныхШаговЕслиОнаОткрывалась() Экспорт
	Если ОткрываласьФормаБиблиотекиШагов Тогда
		Попытка
			ТекФорма = ПолучитьФорму(ПолучитьИмяОбработкиVA() + ".Форма.ВыборИзвестногоШага", , ЭтаФорма);
			ТекФорма.Закрыть();
		Исключение
		КонецПопытки;
	КонецЕсли;	 
КонецПроцедуры 

// Закрывает форму редактора таблиц, если она открывалась в режиме обучения и могла остаться открытой
&НаКлиенте
Процедура ЗакрытьФормуРедактораТаблицЕслиОнаОткрывалась() Экспорт
	Если ОткрываласьФормаРедактораТаблиц Тогда
		Попытка
			Если ФормаРедактораТаблиц <> Неопределено И ФормаРедактораТаблиц.Открыта() Тогда
				ФормаРедактораТаблиц.Закрыть();
			КонецЕсли;	
		Исключение
		КонецПопытки;
	КонецЕсли;	 
КонецПроцедуры 

// Закрывает форму создания тестовых данных, если она открывалась в режиме обучения и могла остаться открытой
&НаКлиенте
Процедура ЗакрытьФормуСозданияТестовыхДанных() Экспорт
	Если ОткрываласьФормаСозданияТестовыхДанных И МодульПодготовкаИЗагрузкаДанных <> Неопределено Тогда
		Попытка
			МодульПодготовкаИЗагрузкаДанных.Закрыть();
		Исключение
		КонецПопытки;
	КонецЕсли;	 
КонецПроцедуры 

// Возвращает состояния состояния Onboarding()
&НаКлиенте
Функция СостоянияOnboarding() Экспорт
	Если НЕ ОбъектКонтекст.Свойство("СостоянияOnboarding") Тогда
		ОбъектКонтекст.Вставить("СостоянияOnboarding", Новый Соответствие);
	КонецЕсли;	
	
	Возврат ОбъектКонтекст.СостоянияOnboarding;
	
КонецФункции	

// Создаёт новое состояние Onboarding
&НаКлиенте
Функция НовоеСостояниеOnboarding() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Имя", Неопределено);
	Структура.Вставить("Переход", Неопределено);
	Структура.Вставить("ИмяЭлемента", Неопределено);
	Структура.Вставить("Текст", "Текст");
	Структура.Вставить("НачальноеСостояние", Ложь);
	Структура.Вставить("КонечноеСостояние", Ложь);
	Структура.Вставить("Окно", Неопределено);
	
	Возврат Структура;
	
КонецФункции	 

// Возвращает текущее состояние Onboarding
&НаКлиенте
Функция ТекущееСостояниеOnboarding() Экспорт
	
	Если НЕ ОбъектКонтекст.Свойство("_ТекущееСостояниеOnboarding") Тогда
		Возврат Неопределено;
	КонецЕсли;	             
	
	Возврат ОбъектКонтекст._ТекущееСостояниеOnboarding;
	
КонецФункции	

// Запускает показ Onboarding
&НаКлиенте
Процедура ЯЗапускаюOnboarding() Экспорт
	
	ЗапретитьВыполнениеШагов();
	ПодключитьОбработчикОжидания("ЯЗапускаюOnboardingОбработчик",0.1,Истина);
	
КонецПроцедуры 

// Запускает обработчик Onboarding
&НаКлиенте
Процедура ЯЗапускаюOnboardingОбработчик() Экспорт
	
	ТекущееСостояниеOnboarding = Ванесса.ТекущееСостояниеOnboarding();
	
	Если ТекущееСостояниеOnboarding = Неопределено Тогда
		НачальноеСостояниеOnboarding = НачальноеСостояниеOnboarding();
		Если НачальноеСостояниеOnboarding = Неопределено Тогда
			ВызватьИсключение Ванесса.Локализовать("Не найдено начальное состояние.");
		КонецЕсли;
		
		ТекущееСостояниеOnboarding = НачальноеСостояниеOnboarding;
		Если ТекущееСостояниеOnboarding.Окно <> Неопределено Тогда
			ОбъектКонтекст.Вставить("_ЗаголовокОкнаOnboarding", ТекущееСостояниеOnboarding.Окно);
		КонецЕсли;
		
	КонецЕсли;	
	
	ОбъектКонтекст.Вставить("_ТекущееСостояниеOnboarding", ТекущееСостояниеOnboarding);
	СделатьЭффектЗатемненияOnboarding(ТекущееСостояниеOnboarding);
	
КонецПроцедуры

// Рисует затемнение по переданным координатам
&НаКлиенте
Функция НарисоватТеньПоКоординатам(Left, Top, Right, Bottom, ПараметрыОтрисовки, ОбработчикПродолжения = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	ЗапретитьВыполнениеШагов();
	
	Если НЕ ОбработчикПродолжения = Неопределено Тогда
		Если ДопПараметры = Неопределено Тогда
			ДопПараметры = Новый Структура;
		КонецЕсли;	
		ДопПараметры.Вставить("ИмяОбработчика", ОбработчикПродолжения);
	КонецЕсли;
	
	НастройкиРисованияПоУмолчанию = ПолучитьНастройкиРисования();
	НастройкиРисования = ДополнитьПараметрыОтрисовкиПереданныеПользователем(НастройкиРисованияПоУмолчанию, ПараметрыОтрисовки);
	ПроверитьКорректностьПараметровДляВыполненияУроков(НастройкиРисования);
	НастройкиРисованияJSON = ЗаписатьОбъектJSON(НастройкиРисования); 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПустоеОповещениеСПродолжениемВыполненияСценария", ЭтаФорма, ДопПараметры);
	
	Если РисоватьЗатемнениеПоНастоящему() Тогда
		ВнешняяКомпонентаДляСкриншотов.НачатьВызовНарисоватьТень(
			ОписаниеОповещения,
			НастройкиРисованияJSON,
			Left,
			Top,
			Right - Left,
			Bottom - Top);
	Иначе
		ПустоеОповещениеСПродолжениемВыполненияСценария(,,ДопПараметры);
	КонецЕсли;
	
КонецФункции 

// Добавляет к переданным настройкам значения из второго параметра
&НаКлиенте
Функция ДополнитьПараметрыОтрисовкиПереданныеПользователем(НастройкиРисования, ПараметрыОтрисовки) Экспорт
	
	Если ПараметрыОтрисовки = Неопределено Тогда
		Возврат НастройкиРисования; 
	КонецЕсли;	 
	
	Для Каждого СтрокаПараметрыОтрисовки Из ПараметрыОтрисовки Цикл
		Если ТипЗнч(СтрокаПараметрыОтрисовки) = Тип("Структура") И СтрокаПараметрыОтрисовки.Свойство("Кол1") Тогда
			НастройкиРисования.Вставить(СтрокаПараметрыОтрисовки.Кол1, СтрокаПараметрыОтрисовки.Кол2);
		Иначе	
			НастройкиРисования.Вставить(СтрокаПараметрыОтрисовки.Ключ, СтрокаПараметрыОтрисовки.Значение);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Возврат НастройкиРисования;
	
КонецФункции	 

// Возвращает данные реквизитов формы для работы алгоритма Onboarding
&НаКлиенте
Функция ДанныеРеквизитовФормыOnboarding(ФормаOnboarding) Экспорт
	
	ИмяФормыOnboarding = ФормаOnboarding.ИмяФормы;
	
	Если НЕ ОбъектКонтекст.Свойство("_КешДанныхФормOnboarding") Тогда
		ОбъектКонтекст.Вставить("_КешДанныхФормOnboarding", Новый Соответствие);
	КонецЕсли;
	
	Если ОбъектКонтекст._КешДанныхФормOnboarding[ИмяФормыOnboarding] <> Неопределено Тогда
		Возврат ОбъектКонтекст._КешДанныхФормOnboarding[ИмяФормыOnboarding];
	КонецЕсли;
	
	Если Найти(ФормаOnboarding.ИмяФормы, "VanessaAutomation") > 0 Тогда
		Результат = ФормаOnboarding.ДанныеРеквизитовФормыOnboardingVA();
	Иначе	
		Результат = ФормаOnboarding.ДанныеРеквизитовФормыOnboarding();
	КонецЕсли;	 
	
	ОбъектКонтекст._КешДанныхФормOnboarding.Вставить(ИмяФормыOnboarding, Результат);
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные реквизитов формы для работы OnBoarding по форме VA
&НаСервере
Функция ДанныеРеквизитовФормыOnboardingVA() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ДанныеМетаданных", Новый Структура);
	Результат.Вставить("ДанныеФормы", Новый Структура);
	ДанныеФормы = Результат.ДанныеФормы;
	
	ДополнитьДанныеМетаданныхVA(Объект().Метаданные().Реквизиты, Результат.ДанныеМетаданных);
	
	Для Каждого ЭлементФормы Из ЭтаФорма.Элементы Цикл
		ДанныеФормы.Вставить(ЭлементФормы.Имя, ДанныеЭлементаФормыVA(ЭлементФормы));
	КонецЦикла;	

	Возврат Результат;
КонецФункции	 

// Возвращает числовое значение PID
// Можно передать значение ЭтотСеанс или ЭтотПроцесс, тогда будет возвращён PID сеанса, где запущена VA
&НаКлиенте
Функция ПолучитьКорректныйPID(PID) Экспорт
	
	НайденныйКлиент = ДанныеКлиентовТестирования.НайтиСтроки(Новый Структура("Имя", PID));

    Если НайденныйКлиент.Количество() > 0 Тогда
          Возврат НайденныйКлиент[0].PIDКлиентаТестирования;
    КонецЕсли;

    Если PID = "" Тогда
        Для Каждого КлиентТеста Из ДанныеКлиентовТестирования Цикл
            Если КлиентТеста.Подключен Тогда
                Возврат КлиентТеста.PIDКлиентаТестирования;
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;

	Если НРег(PID) <> НРег("ЭтотСеанс") И НРег(PID) <> НРег("ЭтотПроцесс")
		И НРег(PID) <> НРег("Этот сеанс") И НРег(PID) <> НРег("This session") Тогда
		Возврат Число(PID); 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(PIDЭтогоСеанса) Тогда
		Возврат Число(PIDЭтогоСеанса);
	КонецЕсли;
	
	ВычислитьPIDЭтогоСеансаСлужебный();
	
	Возврат Число(PIDЭтогоСеанса);
	
КонецФункции

// Открывает список уроков
&НаКлиенте
Функция ОткрытьСписокУроков() Экспорт
	
	ОткрытьСписокУроковСлужебный();
	
КонецФункции	 

// Закрывает группы, чтобы тест мог выполняться повторно
&НаКлиенте
Процедура ЗакрытьГруппыКоторыеОткрываютсяВРежимеСамотестирования() Экспорт
	РазвернутьСвернутьГруппыСтраницыДляРаботыТестов(Ложь);
КонецПроцедуры 

// Отменяет действия, которые могли остаться после работы интерактивной справки
&НаКлиенте
Процедура СкрытьЭлементыКоторыеМоглиБытьПоказаныПриРаботеИнтерактивнойСправки() Экспорт
	Объект.ПовторноЗапускатьСеансКлиентаТестированияПриПодключенииЕслиНеНайденЕгоПроцесс = Ложь;
	Объект.ЗапускатьТестКлиентВРежимеОтладки = Ложь;
	Объект.КомандаЗапускаБраузера = "";
	Объект.ВыполнятьШагиАсинхронно = Ложь;
	Объект.ДобавлятьКИмениСценарияУсловияВыгрузки = Ложь;
	Объект.ВыгружатьСтатусВыполненияСценариевВФайл = Ложь;
	Объект.ЗаписыватьВидеоВыполненияТестов = Ложь;
	Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл = Ложь;
	Объект.ДелатьОтчетВФорматеАллюр = Ложь;
	Объект.ДелатьОтчетВФорматеjUnit = Ложь;
	Объект.ДелатьОтчетВФорматеСППР = Ложь;
	Объект.ДелатьОтчетВФорматеCucumberJson = Ложь;
	Объект.ДелатьЛогОшибокВТекстовыйФайл = Ложь;
	Объект.ДелатьОтчетВоВнутреннемФормате = Ложь;
	Объект.ЗвуковоеОповещениеПриОкончанииВыполненияСценария = Ложь;
	Объект.СоздаватьИнструкциюHTML = Ложь;
	Объект.СоздаватьИнструкциюMarkdown = Ложь;
	Объект.ЗаписьВидеоТипОзвучкиTTS = 1;
	Объект.ЗаписьВидеоКэшироватьФайлыTTS = Ложь;
	Объект.СоздаватьИнструкциюВидео = Ложь;
	
	Объект.ПоказыватьСтрокиПодсценариевVanessaEditor = Истина;
	Объект.ПоказыватьМиниатюруКода = Истина;
	Объект.ПоказыватьЗначенияПеременныхВСтрокахРедактора = Истина;
	Объект.ПроверкаСинтаксисаВРедакторе = Истина;
	Объект.ПоказыватьРазличияВРедактореОтдельно = Истина;
	
	УстановитьУсловноеОформление();
КонецПроцедуры 

// Проверяет, что перевод уроков был выполнен корректно и в тексте подсказки нет русских букв.
&НаКлиенте
Процедура ПроверитьКорректностьПараметровДляВыполненияУроков(НастройкиРисования) Экспорт
	Если ТипЗнч(ОбъектКонтекстСохраняемый) = Тип("Структура") И ОбъектКонтекстСохраняемый.Свойство("ПроверкаУроковEN")
		И ОбъектКонтекстСохраняемый.ПроверкаУроковEN Тогда
		Если НастройкиРисования.Свойство("Text") И ВСтрокеЕстьРусскиеБуквы(НастройкиРисования.text) Тогда
			ВызватьИсключение ПодставитьПараметрыВСтроку(
				Локализовать("В строке <%1> есть русские буквы."),
				НастройкиРисования.text
			);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеСценариевСЗакрытойФормой

// Устанавливает фича файл для выполнения
&НаКлиенте
Процедура УстановитьФичаФайл(ИмяФайла) Экспорт
	Объект.КаталогФич = ИмяФайла;
	ПереданныйТекстФичаФайла = Неопределено;
	ФичаФайлПереданТекстом = Ложь;
	Объект.ЗагрузкаФичПриОткрытии = "Не загружать";
КонецПроцедуры

// Выполняет сценарии согласно текущим настройкам без открытия формы
&НаКлиенте
Процедура ВыполнитьСценарииБезОткрытияФормы() Экспорт
	ВыполнениеСценариевБезОткрытияФормы = Истина;
	
	УстанановитьЗначениеДополнительногоПараметра("ВыполнениеСценариевБезОткрытияФормы", Истина);
	
	Если НЕ ВыполняласьИнициализацияФормы = Истина Тогда
		ПриОткрытии(Ложь);
	Иначе	
		ПерезагрузитьИВыполнить(Неопределено);
	КонецЕсли;	 
	
КонецПроцедуры 

// Выполняет сценарии согласно текущим настройкам без открытия формы
&НаКлиенте
Процедура ВыполнитьСценарииСЧтениемПараметровИзКоманднойСтроки() Экспорт
	ВыполнениеСценариевБезОткрытияФормы = Истина;
	ВыполнитьСценарииСЧтениемПараметровИзКоманднойСтроки = Истина;
	
	УстанановитьЗначениеДополнительногоПараметра("ВыполнениеСценариевБезОткрытияФормы", Истина);
	
	ПриОткрытии(Ложь);
	
КонецПроцедуры 

// Открывает основную форму VA
&НаКлиенте
Процедура ОткрытьОсновнуюФорму() Экспорт
	УстановитьУсловноеОформление();
	Открыть();
КонецПроцедуры 

// Устанавливает настройки для режима работы без октрытия формы
&НаКлиенте
Процедура УстановитьНастройкиПриЗапускеБезОткрытияФормы(СтруктураНастроек) Экспорт
	НастройкиПриЗапускеБезОткрытияФормы = СтруктураНастроек;
КонецПроцедуры 

// Устанавливает текст фича файла для выполнения без использования реального файла
&НаКлиенте
Процедура УстановитьТекстФичаФайла(Текст) Экспорт
	ПереданныйТекстФичаФайла = Текст;
	ФичаФайлПереданТекстом = Истина;
	Объект.КаталогФич = "";
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область ИнициаторДанных

&НаКлиенте
Функция ИнициаторДанных() Экспорт
	
	Если МодульИнициаторДанных = Неопределено Тогда
		ИмяФормыИД = ПолучитьИмяОбработкиVA() + ".Форма.ИнициаторДанных";
		МодульИнициаторДанных = ПолучитьФорму(ИмяФормыИД, , ЭтаФорма);
		МодульИнициаторДанных.ИнициализацияФормы(ЭтаФорма);
		ЗарегистрироватьМодульДляОтключения(МодульИнициаторДанных);
	КонецЕсли; 
	
	Возврат МодульИнициаторДанных;
	
КонецФункции

#КонецОбласти 

#Область ЗагрузкаГлобальныхПеременныхИзФайлаНастроек

&НаКлиенте
Процедура ЗагрузитьПеременныеКонтекстаИзФайлаНастроек()

	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеПараметраЗапуска("DisableUserSettingsLoader", Ложь) Тогда
		Возврат;
	КонецЕсли;	 

	Если ПустаяСтрока(Объект.ПоставщикПользовательскихНастроек) Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НРег(Объект.ПоставщикПользовательскихНастроек) = "notuse" Тогда
		Возврат;
	КонецЕсли;	 
	
	ЗагрузчикНастроек = Плагин("ЗагрузчикПользовательскихНастроек");
	
	Попытка
		Если Объект.ПоставщикПользовательскихНастроек = ЗагрузчикНастроек.ИмяПоставщикаNotUse() Тогда
			Возврат;
		КонецЕсли;	 
	Исключение
		СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Объект.Плагины.Вставить("ЗагрузчикПользовательскихНастроек", "ЗагрузчикПользовательскихНастроек");
	КэшФормПлагинов.Вставить("ЗагрузчикПользовательскихНастроек", Истина);

	Попытка
		ЗагрузчикНастроек.ЗагрузитьНастройки(Объект.ПоставщикПользовательскихНастроек, Объект.АдресПользовательскихНастроек);
	Исключение
		СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииРаботаСоСтроками

&НаКлиенте

// Обертка для эмуляции вызова СтрНайти
&НаКлиенте
Функция _СтрНайти(Стр, Подстрока) Экспорт
	Возврат Найти(Стр, Подстрока); 
КонецФункции	 

// Обертка для эмуляции вызова СтрРазделить
&НаКлиенте
Функция _СтрРазделить(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	Возврат РазложитьСтрокуВМассивПодстрокКлиент(Строка, Разделитель, ПропускатьПустыеСтроки); 
КонецФункции	 

// Обертка для эмуляции вызова СтрСоединить
&НаКлиенте
Функция _СтрСоединить(Массив, Символ = Неопределено) Экспорт
	Возврат МассивВСтроку(Массив, Символ);
КонецФункции	 

// Обертка для эмуляции вызова СтрШаблон
&НаКлиенте
Функция _СтрШаблон(Знач Стр, Парам1 = Неопределено,
                                             Парам2 = Неопределено,
                                             Парам3 = Неопределено,
                                             Парам4 = Неопределено,
                                             Парам5 = Неопределено,
                                             Парам6 = Неопределено,
                                             Парам7 = Неопределено,
											 Парам8 = Неопределено,
											 Парам9 = Неопределено) Экспорт
	Возврат ПодставитьПараметрыВСтроку(Стр, Парам1, Парам2, Парам3, Парам4, Парам5, Парам6, Парам7, Парам8, Парам9); 
КонецФункции	 

&НаКлиенте
Функция КоличествоВхожденийСтроки(Знач ТекстСтроки, СтрокаПоиска) Экспорт
	
	КолВхождений = 0;
	Поз = Найти(ТекстСтроки, СтрокаПоиска);
	Пока Поз > 0 Цикл
		ТекстСтроки = Сред(ТекстСтроки, Поз + СтрДлина(СтрокаПоиска));
		КолВхождений = КолВхождений + 1;
		Поз = Найти(ТекстСтроки, СтрокаПоиска);
	КонецЦикла;
	
	Возврат КолВхождений;
	
КонецФункции	

&НаКлиенте
Функция ЗначениеИзСоответствияПоКлючуСУчетомЗаменыПереносаСтроки(Соответствие, Ключ) Экспорт
	
	ТекЗначение = Соответствие[Ключ];
	Если ТекЗначение <> Неопределено Тогда
		Возврат ТекЗначение;
	КонецЕсли;
	
	Если Найти(Ключ, "\n") = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ТекКлюч = СтрЗаменить(Ключ, "\n", Символы.ПС);
	ТекЗначение = Соответствие[ТекКлюч];
	Если ТекЗначение <> Неопределено Тогда
		Возврат ТекЗначение;
	КонецЕсли;
	
	ТекКлюч = СтрЗаменить(Ключ, "\n", " ");
	ТекЗначение = Соответствие[ТекКлюч];
	Если ТекЗначение <> Неопределено Тогда
		Возврат ТекЗначение;
	КонецЕсли;
	
	ТекКлюч = СтрЗаменить(Ключ, "\n", Символы.ВК + Символы.ПС);
	ТекЗначение = Соответствие[ТекКлюч];
	Если ТекЗначение <> Неопределено Тогда
		Возврат ТекЗначение;
	КонецЕсли;
	
	ТекКлюч = СтрЗаменить(Ключ, "\n", Символы.ПС + Символы.ВК);
	ТекЗначение = Соответствие[ТекКлюч];
	Если ТекЗначение <> Неопределено Тогда
		Возврат ТекЗначение;
	КонецЕсли;
	
	ТекКлюч = СтрЗаменить(Ключ, "\n", Символы.ВК);
	ТекЗначение = Соответствие[ТекКлюч];
	Если ТекЗначение <> Неопределено Тогда
		Возврат ТекЗначение;
	КонецЕсли;
	
	Возврат ТекЗначение;
	
КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПерезапускВРежимеТестМенеджер() 
	
	Если VAОткрытаКакВнешняяОбработка Тогда
		ЗавершитьРаботуСистемы(Истина, Истина, "/TESTMANAGER /Execute " + """" + ИспользуемоеИмяФайла + """");
	Иначе
		ЗавершитьРаботуСистемы(Истина, Истина, "/TESTMANAGER");
	КонецЕсли; 
	
КонецПроцедуры 
			
&НаСервере
Функция ДвоичныеДанныеГолосСервер()
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет("ОзвучкаОкончанияСценария");
КонецФункции	 

&НаКлиенте
Процедура ВыполнитьЗвуковоеОповещениеПриОкончанииВыполненияСценария(ОстановкаНаБрейкпоинте = Ложь)
	#Если НЕ ВебКлиент Тогда
	Если НЕ Объект.ЗвуковоеОповещениеПриОкончанииВыполненияСценария
		ИЛИ ЭтоLinux
		ИЛИ НЕ Объект.ИспользоватьКомпонентуVanessaExt
		ИЛИ ЭтоЗапускИзКоманднойСтроки() Тогда
		
			Возврат;
		
	КонецЕсли;	
	
	Если ВключенРежимОбучения Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ЗвуковоеОповещениеВыполнялось Тогда
		Возврат;
	КонецЕсли;	 
	
	Если КаталогСФайламиОзвучкиОкончанияВыполненияСценария = Неопределено Тогда
		ДвоичныеДанныеГолос = ДвоичныеДанныеГолосСервер();	
		ЧтениеZipФайла = Новый ЧтениеZipФайла(ДвоичныеДанныеГолос.ОткрытьПотокДляЧтения());
		ВременныйКаталог = ПолучитьИмяВременногоФайла("");
		СоздатьКаталогКомандаСистемы(ВременныйКаталог);
		ЧтениеZipФайла.ИзвлечьВсе(ВременныйКаталог);
		КаталогСФайламиОзвучкиОкончанияВыполненияСценария = ВременныйКаталог;
	КонецЕсли;	 
	
	Язык = "ru";
	Если ЗначениеЗаполнено(Объект.ЯзыкГенератораGherkin) И Объект.ЯзыкГенератораGherkin <> "ru" Тогда
		Язык = "en";
	КонецЕсли;	 
	
	Если ОстановкаНаБрейкпоинте Тогда
		ИмяФайла = "breakpoint";
	Иначе	
		Если СтатусЗапускаСценариев Тогда
			ИмяФайла = "success";
		Иначе	
			ИмяФайла = "error";
		КонецЕсли;	 
	КонецЕсли;	 
	
	ИмяФайла = ИмяФайла + "_" + Язык + ".mp3";
	ПолноеИмяФайла = КаталогСФайламиОзвучкиОкончанияВыполненияСценария + "\" + ИмяФайла;
	ВнешняяКомпонентаДляСкриншотов.НачатьВызовВоспроизвестиМедиа(ОписаниеПустогоОбработчика(3), ПолноеИмяФайла, ПолноеИмяФайла);
	ЗвуковоеОповещениеВыполнялось = Истина;
	#КонецЕсли
КонецПроцедуры 

&НаКлиенте
Процедура ПодключитьОбработкуДвижкаTTS(ОбработчикОповещения)
	
	Если ПустаяСтрока(Объект.ЗаписьВидеоПутьКОбработкеДвижкаTTS) Тогда
		ВызватьИсключение Локализовать("Не указан путь к обработке, реализующей движок TTS.");
	КонецЕсли;
	
	Если НЕ ФайлСуществуетКомандаСистемы(Объект.ЗаписьВидеоПутьКОбработкеДвижкаTTS) Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(Локализовать("Файл <%1> не найден."), (Объект.ЗаписьВидеоПутьКОбработкеДвижкаTTS));
	КонецЕсли;
	
	Если ФормаОбработкиПроизвольногоДвижкаTTS = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", ОбработчикОповещения);
		Оповещение = Новый ОписаниеОповещения("ОбработкаПослеПомещенияФайлаДвижкаTTS", ЭтаФорма, ДополнительныеПараметры);
		НачатьПомещениеФайла(Оповещение, , Объект.ЗаписьВидеоПутьКОбработкеДвижкаTTS, Ложь, УникальныйИдентификатор);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФайлTTSДляВоспроизведения()
	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПараметрыВидео.Вставить("ТестГолоса", Истина);
	ПодключитьБиблиотекуРаботыСВидео();
	Если ПустаяСтрока(ТекстДляТестаГолоса) Тогда
		ПараметрыВидео.Вставить("ТекстДляТестаГолоса", "Привет! Я Ванесса!");
	Иначе	
		ПараметрыВидео.Вставить("ТекстДляТестаГолоса", ТекстДляТестаГолоса);
	КонецЕсли;	 
	Возврат МодульРаботыСВидео.ТестГолоса(ПараметрыВидео);
КонецФункции	 

&НаКлиенте
Процедура ОткрытьКаталогФичиОбработчик()
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
			
			Если VanessaTabs <> Неопределено И VanessaTabs.current <> Неопределено И НЕ ЭтоВкладкаНачальнаяСтраница(VanessaTabs.current)
				И ЗначениеЗаполнено(VanessaTabs.current.filename) И ФайлСуществуетКомандаСистемы(VanessaTabs.current.filename) Тогда
				ОткрытьКаталогФайлаВПроводнике(VanessaTabs.current.filename);
				Возврат;
			КонецЕсли;
			
			Возврат;
		КонецЕсли;	 
		Если НЕ МодульРедакторТекста().МожноЗапуститьСценарийИзДаннойВкладки() Тогда
			СообщитьПользователю(Локализовать("Для выполнения данного действия необходимо сохранить файл."));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ДеревоБудетПерезагружено("ОткрытьКаталогФичиОбработчик") Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если НЕ МодульРедакторТекста().АктивизироватьСтрокуДереваСоответствующуюVanessaEditor() Тогда
			//Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаФичи = Элементы.ДеревоТестов.ТекущиеДанные;
	
	ПутьКФайлу = "";
	Если СтрокаФичи = Неопределено Тогда
		Если НЕ ПустаяСтрока(Объект.КаталогФич) Тогда
			Если НЕ ЭтоКаталогКомандаСистемы(Объект.КаталогФич) Тогда
				Если ФайлСуществуетКомандаСистемы(Объект.КаталогФич) Тогда
					 ПутьКФайлу = Объект.КаталогФич;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если ПустаяСтрока(ПутьКФайлу) Тогда
			Возврат;
		КонецЕсли;	 
	КонецЕсли; 
	
	Если ПустаяСтрока(ПутьКФайлу) И ПустаяСтрока(СтрокаФичи.ПолныйПуть) Тогда
		СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаФичи);
		Если СтрокаФичи = Неопределено Тогда
			СообщитьПользователю(Локализовать("Строка с фича-файлом не найдена."));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ПустаяСтрока(ПутьКФайлу) Тогда
		Если НЕ ФайлСуществуетКомандаСистемы(СтрокаФичи.ПолныйПуть) Тогда
			ПутьКФайлу = ПолучитьИмяФичиИзПолногоПути(СтрокаФичи.ПолныйПуть);
		Иначе	
			ПутьКФайлу = СтрокаФичи.ПолныйПуть;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ОткрытьКаталогФайлаВПроводнике(ПутьКФайлу);

КонецПроцедуры 

&НаКлиенте
Функция ДанныеКлиентаТестированияСтрокой(Данные)
	Возврат Локализовать("Данные клиента тестирования") + ":" + Символы.ПС 
		+ Элементы.ДанныеКлиентовТестированияИмя.Заголовок + "=" + Данные.Имя + Символы.ПС 
		+ Элементы.ДанныеКлиентовТестированияСиноним.Заголовок + "=" + Данные.Синоним + Символы.ПС 
		+ Элементы.ДанныеКлиентовТестированияТипКлиента.Заголовок + "=" + Данные.ТипКлиента + Символы.ПС 
		+ Элементы.ДанныеКлиентовТестированияПутьКИнфобазе.Заголовок + "=" + Данные.ПутьКИнфобазе + Символы.ПС 
		+ Элементы.ДанныеКлиентовТестированияДопПараметры.Заголовок + "=" + Данные.ДопПараметры + Символы.ПС 
		+ Элементы.ДанныеКлиентовТестированияИмяКомпьютера.Заголовок + "=" + Данные.ИмяКомпьютера + Символы.ПС 
		+ Элементы.ДанныеКлиентовТестированияПорт.Заголовок + "=" + Формат(Данные.ПортЗапускаТестКлиента, "ЧГ=; ЧН=0") + Символы.ПС 
		+ Элементы.ДанныеКлиентовТестированияPIDКлиента.Заголовок + "=" + Формат(Данные.PIDКлиентаТестирования, "ЧГ=; ЧН=0");
КонецФункции	 

&НаКлиенте
Процедура НазначитьГорячиеКлавишиКнопкамКоманднойПанелиРедактора(Назначить)
	Если Версия8318ИлиВыше Тогда
		// для старых версий платформы нужно назначать горячие клавиши на специальные команды.
		Возврат;
	КонецЕсли;	 
	
	Если Назначить Тогда
		НазначитьГорячиеКлавишиКнопкамКоманднойПанелиРедактораСервер(Назначить);
		НадоВыполнитьУстановкуГорячихКлавишКнопокКоманднойПанелиРедактора = Истина;
	Иначе	
		Если НадоВыполнитьУстановкуГорячихКлавишКнопокКоманднойПанелиРедактора Тогда
			НазначитьГорячиеКлавишиКнопкамКоманднойПанелиРедактораСервер(Ложь);
		КонецЕсли;	 
		НадоВыполнитьУстановкуГорячихКлавишКнопокКоманднойПанелиРедактора = Ложь;
	КонецЕсли;	 
КонецПроцедуры 

&НаСервере
Процедура НазначитьГорячиеКлавишиКнопкамКоманднойПанелиРедактораСервер(Знач Назначить)
	Если Назначить Тогда
		Команды.VanessaEditorEditUndo.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Z,,Истина);
		Команды.VanessaEditorEditRedo.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Y,,Истина);
		Команды.VanessaEditorEditReplace.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.H,,Истина);
	Иначе	
		Команды.VanessaEditorEditUndo.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Нет);
		Команды.VanessaEditorEditRedo.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Нет);
		Команды.VanessaEditorEditReplace.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Нет);
	КонецЕсли;	 
КонецПроцедуры 

&НаСервере
Процедура ОбработатьВидимостьКнопокКоманднойПанелиСервер(Знач Данные, НеВидимыеКнопки)
	НеВидимыеКнопки = Новый Массив;
	Для Каждого ДанныеКнопки Из Данные Цикл
		Попытка
			Если НЕ ДанныеКнопки.ВидимостьКнопки Тогда
				Элементы[ДанныеКнопки.ИмяКнопки].ПоложениеВКоманднойПанели = Вычислить("ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю");
				НеВидимыеКнопки.Добавить(ДанныеКнопки.ИмяКнопки);
			Иначе	
				Элементы[ДанныеКнопки.ИмяКнопки].ПоложениеВКоманднойПанели = Вычислить("ПоложениеКнопкиВКоманднойПанели.Авто");
			КонецЕсли;	 
		Исключение
		КонецПопытки; 
	КонецЦикла;	 
КонецПроцедуры 

&НаСервере
Процедура НастройкаВидимостиКнопокПанелиРедактораСерверРекурсивно(ДанныеКнопок, Контейнер)
	Для Каждого Элем Из Контейнер.ПодчиненныеЭлементы Цикл
		Если Элем.Вид = ВидГруппыФормы.ГруппаКнопок ИЛИ Элем.Вид = ВидГруппыФормы.Подменю Тогда
			НастройкаВидимостиКнопокПанелиРедактораСерверРекурсивно(ДанныеКнопок, Элем)
		ИначеЕсли Элем.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели Тогда
			Если Найти(Элем.Имя, "ЗагрузитьФич") > 0 Тогда
				Продолжить;
			ИначеЕсли Найти(Элем.Имя, "ЗагрузитьОднуФичу") > 0 Тогда
				Продолжить;
			КонецЕсли;	 
			
			ДанныеКнопки = Новый Структура;
			ДанныеКнопки.Вставить("Имя", Элем.Имя);
			ДанныеКнопки.Вставить("Заголовок", Элем.Заголовок);
			ДанныеКнопки.Вставить("Видимость", НЕ Элем.ПоложениеВКоманднойПанели = Вычислить("ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю"));
			ДанныеКнопки.Вставить("Картинка", Элем.Картинка);
			ДанныеКнопки.Вставить("ИмяКоманды", Элем.ИмяКоманды);
			ДанныеКнопки.Вставить("ЗаголовокКоманды", Неопределено);
			ДанныеКнопки.Вставить("КартинкаКомандыВнутр", Неопределено);
			Если НЕ ПустаяСтрока(Элем.ИмяКоманды) Тогда
				ДанныеКнопки.Вставить("ЗаголовокКоманды", Команды[Элем.ИмяКоманды].Заголовок);
				ДанныеКнопки.Вставить("КартинкаКомандыВнутр", ЗначениеВСтрокуВнутр(Команды[Элем.ИмяКоманды].Картинка));
			КонецЕсли;	 
			
			ДанныеКнопок.Добавить(ДанныеКнопки);
		КонецЕсли;	 	
	КонецЦикла;	 
КонецПроцедуры 

&НаСервере
Функция НастройкаВидимостиКнопокПанелиРедактораСервер()
	ДанныеКнопок = Новый Массив;
	НастройкаВидимостиКнопокПанелиРедактораСерверРекурсивно(ДанныеКнопок, Элементы.ГруппаКоманднаяПанельVanessaEditor);
	Возврат ДанныеКнопок; 
КонецФункции

&НаСервере
Процедура СкрытьКнопкиКоманднойПанели()
	Элементы.ПодменюЗагрузитьФичи.Видимость = Ложь;
	Элементы.Перезагрузить.Видимость = Ложь;
	Элементы.ВыполнитьСценарии.Видимость = Ложь;
	Элементы.ОстановитьСценарии.Видимость = Ложь;
	Элементы.ФормаПерезагрузитьИВыполнить.Видимость = Ложь;
	Элементы.ГруппаВидимостьКолонок.Видимость = Ложь;
	Элементы.ФормаПерейтиВVanessaEditor.Видимость = Ложь;
	Элементы.ФормаПерейтиВДеревоШагов.Видимость = Ложь;
	Элементы.ФормаГруппаНастройки.Видимость = Ложь;
	Элементы.ГруппаКоманднаяПанельVanessaEditor.Видимость = Ложь;
КонецПроцедуры 

&НаСервереБезКонтекста
Функция АбсолютыйЦветСервер(Знач ИсходныйЦвет)
    ТабДок = Новый ТабличныйДокумент;
    ТабДок.Область("R1C1").ЦветФона = ИсходныйЦвет;
	ВременныйФайл = ПолучитьИмяВременногоФайла("mxl");
    ТабДок.Записать(ВременныйФайл, ТипФайлаТабличногоДокумента.MXL7); 
	ТабДок = ПрочитатьФайлВТабличныйДокументНаСервере(ВременныйФайл);
	Попытка
		УдалитьФайлы(ВременныйФайл);
	Исключение
	КонецПопытки;
    АЦвет = ТабДок.Область("R1C1").ЦветФона;
    Возврат АЦвет;
КонецФункции	 

&НаКлиенте
Процедура VanessaEditorПоказыватьМиниатюруКодаОбработчик()
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	
	
	Элементы.VanessaEditorПоказыватьМиниатюруКода.Пометка = Объект.ПоказыватьМиниатюруКода;
	МодульРедакторТекста().ПоказатьМиниатюруКода();
КонецПроцедуры 

&НаКлиенте
Процедура VanessaEditorПоказыватьЗначенияПеременныхВСтрокахРедактораОбработчик()
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	
	
	Элементы.VanessaEditorПоказыватьЗначенияПеременныхВСтрокахРедактора.Пометка = Объект.ПоказыватьЗначенияПеременныхВСтрокахРедактора;
КонецПроцедуры 

&НаКлиенте
Процедура VanessaEditorПоказыватьСтрокиПодсценариевОбработчик()
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	
	
	Элементы.VanessaEditorПоказыватьСтрокиПодсценариев.Пометка = Объект.ПоказыватьСтрокиПодсценариевVanessaEditor;
	Если НЕ Объект.ПоказыватьСтрокиПодсценариевVanessaEditor Тогда
		Попытка
			ПолучитьVanessaEditor().clearRuntimeCodes();
		Исключение
		КонецПопытки;
		ОчиститьДанныеВиджетов();
	Иначе
		Если ДеревоБудетПерезагружено("ОтобразитьДанныеВиджетов") Тогда
			Возврат;
		КонецЕсли;	 
		
		ТекущаяПозицияVanessaEditor = ПолучитьТекущаяПозицияVanessaEditor();
		
		МодульРедакторТекста().ОтобразитьДанныеВиджетов();
		
		Если ТекущаяПозицияVanessaEditor <> Неопределено Тогда
			ОбновитьТекущуюСтрокуРедактораСРасчетомВиджета(ТекущаяПозицияVanessaEditor);
			ТекущаяПозицияVanessaEditor = Неопределено;
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура VanessaEditorПроверкаСинтаксисаВРедактореОбработчик()
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	
	Элементы.VanessaEditorПроверкаСинтаксисаВРедакторе.Пометка = Объект.ПроверкаСинтаксисаВРедакторе;
	МодульРедакторТекста().ПроверкаСинтаксисаВРедакторе();
КонецПроцедуры 

&НаСервере
Процедура ПроверитьВерсиюVA(Знач ТекущаяВерсияVA)
	ИДСохраненияОбщихНастроек = ПолучитьИДСохраненияОбщихНастроек(Объект.РежимСамотестирования, Объект.ВерсияПоставки, ЭтоРежимОбученияСервер());
	СохраненнаяВерсияVA = ХранилищеОбщихНастроек.Загрузить(ИДСохраненияОбщихНастроек, "ВерсияVA");
	Если ТекущаяВерсияVA <> СохраненнаяВерсияVA Тогда
		ХранилищеОбщихНастроек.Сохранить(ИДСохраненияОбщихНастроек, "ВерсияVA", ТекущаяВерсияVA);
		Объект.СлужебныеПараметры.Вставить("ЗагружатьКешStepDefinition", Ложь);
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура АктивизироватьСтраницуЗапускТестов()
	Если Объект.ИспользоватьРедакторVanessaEditor И Элементы.ФункциональностьЗакладки.ТекущаяСтраница <> Элементы.ГруппаЗапускТестов Тогда
		Элементы.ФункциональностьЗакладки.ТекущаяСтраница = Элементы.ГруппаЗапускТестов;
		НазначитьГорячиеКлавишиКнопкамКоманднойПанелиРедактора(Истина);
	Иначе		
		Если Элементы.ФункциональностьЗакладки.ТекущаяСтраница <> Элементы.ГруппаЗапускТестов Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.ГруппаЗапускТестов;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Элементы.ГруппаКоманднаяПанельVanessaEditor.Видимость = Истина;
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура VanessaEditorОчиститьРаскраскуСтрокОбработчик()
	Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
		Возврат;
	КонецЕсли;	 
	
	ЭкземплярVanessaEditor = ПолучитьVanessaEditor();
	ЭкземплярVanessaEditor.clearRuntimeStatus();
	ЭкземплярVanessaEditor.clearRuntimeErrors();
	ЭкземплярVanessaEditor.clearLinesStyle();
КонецПроцедуры 

&НаКлиенте
Процедура VanessaEditorСохранитьФайлОбработчик()
	Если VanessaTabs = Неопределено ИЛИ VanessaTabs.current = Неопределено ИЛИ НЕ ЭтоВкладкаEdit(VanessaTabs.current) Тогда
		Возврат;
	КонецЕсли;	 
	
	Если МодульРедакторТекста().ИмяФайлаСоответствуетПустойНовойРедактора(VanessaTabs.current.filename) ИЛИ ЗапроситьИмяФайлаПриСохраненииФайлаВРедакторе Тогда
		ЗапроситьИмяФайлаПриСохраненииФайлаВРедакторе = Ложь;
		ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
		ДиалогВыбораКаталога.Фильтр = "Фича файл (*.feature)|*.feature";
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяОбработчика", "VanessaEditorСохранитьФайлОбработчик");
		ДиалогВыбораКаталога.Показать(Новый ОписаниеОповещения("ОбработчикСохранениеФайлаРедактораСНовымИменем", ЭтаФорма, ДополнительныеПараметры));
		Возврат;
	КонецЕсли;	 
	
	МодульРедакторТекста().СохранитьТекстИзVanessaEditorВФайл();
	
	Для Сч = 0 По VanessaTabs.tabStack.length - 1 Цикл
		Если VanessaTabs.tabStack[Сч].filename = VanessaTabs.current.filename Тогда
			VanessaTabs.tab(Сч).resetModified();
		КонецЕсли;	 
	КонецЦикла;	
	
	Объект.КаталогФич = VanessaTabs.current.filename;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ЗагрузкаФичиИзVanessaEditor", Истина);
	ДопПараметры.Вставить("СохранениеФайла", Истина);
	ЗагрузитьФичи(ДопПараметры);
КонецПроцедуры 

&НаКлиенте
Процедура ОбработчикСохранениеФайлаРедактораСНовымИменем(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ВыбранныеФайлы[0]);
	VanessaTabs.current.doSaveAs(Файл.ПолноеИмя, Файл.ИмяБезРасширения);
	ПодключитьОбработчикОжидания(ДополнительныеПараметры.ИмяОбработчика, 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПередЗакрытиемВкладкиРедактора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ВыбранныеФайлы[0]);
	VanessaTabs.current.doSaveAs(Файл.ПолноеИмя, Файл.ИмяБезРасширения);
	СохранитьТекстФайлаВкладкиИЗакрытьВкладку(ДополнительныеПараметры.Data, VanessaTabs.current.filename);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыделенныеСтрокиОбработчик()
	Если Объект.ИдетВыполнениеСценариев Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
			Возврат;
		КонецЕсли;	 
		Если НЕ МодульРедакторТекста().МожноЗапуститьСценарийИзДаннойВкладки() Тогда
			СообщитьПользователю(Локализовать("Для выполнения данного действия необходимо сохранить файл."));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ДеревоБудетПерезагружено("ВыполнитьВыделенныеСтрокиОбработчик") Тогда
		Возврат;
	КонецЕсли;	 
	
	МодульРедакторТекста().ВыполнитьВыделенныйТекстVanessaEditor();
КонецПроцедуры 

&НаКлиенте
Процедура ВыключитьИспользованиеVanessaEditor()
	ВозможноИспользованиеVanessaEditor = Ложь;
	Объект.ИспользоватьРедакторVanessaEditor = Ложь;
	УстановитьУсловноеОформление();
	Если НЕ Объект.РежимСамотестирования И НЕ ВыполнениеСценариевБезОткрытияФормы И НЕ Объект.ЗапускИзКоманднойСтроки Тогда
		СообщитьПользователю(Локализовать(
			"Использование Vanessa editor в данном окружении (версия платформы и режим совместимости) невозможно."));
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ПерейтиКСтрокеСОшибкойОбработчик()
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
			Возврат;
		КонецЕсли;	 
		Если НЕ МодульРедакторТекста().МожноЗапуститьСценарийИзДаннойВкладки() Тогда
			СообщитьПользователю(Локализовать("Для выполнения данного действия необходимо сохранить файл."));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ДеревоБудетПерезагружено("ПерейтиКСтрокеСОшибкойОбработчик") Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.ДеревоТестов.ТекущиеДанные = Неопределено Тогда
		ИДСтроки = 0;
	Иначе	
		ИДСтроки = Элементы.ДеревоТестов.ТекущиеДанные.ИДСтроки;
	КонецЕсли;	 
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		ЭкземплярVanessaEditor = ПолучитьVanessaEditor();
		НомераСтрокСОшибкой = ПрочитатьОбъектJSON(ЭкземплярVanessaEditor.getRuntimeProgress("error"));
		ТекНомерСтроки = ЭкземплярVanessaEditor.getPosition().lineNumber;
		Если НомераСтрокСОшибкой.Найти(ТекНомерСтроки) <> Неопределено Тогда
			ЭкземплярVanessaEditor.setPosition(ТекНомерСтроки + 1, 1, "");
		КонецЕсли;	 
	КонецЕсли;	 
	
	ПолучатьСтрокиСценариев = Истина;
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		ЭкземплярVanessaEditor = ПолучитьVanessaEditor();
		Если НЕ СделатьСтрокуДереваТекущейПоНомеруСтрокиФичи(ЭкземплярVanessaEditor.getPosition().lineNumber) Тогда
			СделатьБлижайшуюСтрокуДереваТекущейПоНомеруСтрокиФичи(ЭкземплярVanessaEditor.getPosition().lineNumber) 
		КонецЕсли;	 
		ПолучатьСтрокиСценариев = Ложь;
		
		Если Элементы.ДеревоТестов.ТекущиеДанные <> Неопределено Тогда
			ИДСтроки = Элементы.ДеревоТестов.ТекущиеДанные.ИДСтроки;
		КонецЕсли;	 
	КонецЕсли;	 
	
	КоллекцияЭлементов = Объект.ДеревоТестов.ПолучитьЭлементы();
	СтрокаСОшибкой = Неопределено;
	ПолучитьСтрокуСОшибкойРекурсивно(КоллекцияЭлементов, СтрокаСОшибкой, ПолучатьСтрокиСценариев, ИДСтроки);
	
	Если СтрокаСОшибкой = Неопределено Тогда
		ИДСтроки = 0;
		ПолучитьСтрокуСОшибкойРекурсивно(КоллекцияЭлементов, СтрокаСОшибкой, ПолучатьСтрокиСценариев, ИДСтроки);
	КонецЕсли;	 
	
	Если СтрокаСОшибкой = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаСОшибкой;
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если Элементы.ДеревоТестов.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;	 
		
		НомерСтрокиВФиче = Элементы.ДеревоТестов.ТекущиеДанные.НомерСтрокиВФиче;
		Если НЕ Объект.ПоказыватьСтрокиПодсценариевVanessaEditor Тогда
			НомерСтрокиВФиче = ПолучитьСтрокуПодсценарияПоСтрокеДерева(Элементы.ДеревоТестов.ТекущиеДанные).НомерСтрокиВФиче;
		КонецЕсли;	 
		
		АктивизироватьСтрокуРедактораПоИдСтрокиИНомеруСтрокиФичи(Элементы.ДеревоТестов.ТекущиеДанные.ИДСтроки,
			НомерСтрокиВФиче);
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Функция НомерСтрокиВнутриВиджета(ИдВиджета, ИДСтроки)
	ДанныеВкладок = ДанныеВкладокРедактора[VanessaTabs.current.filename];
	
	Если ДанныеВкладок = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если ДанныеВкладок.ДанныеВиджетов[ИдВиджета] = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеВкладок.ДанныеВиджетов[ИдВиджета][ИДСтроки];
	
КонецФункции	

&НаКлиенте
Процедура АктивизироватьСтрокуРедактораПоИдСтрокиИНомеруСтрокиФичи(ИДСтроки, НомерСтрокиВФиче)
	Если VanessaTabs.current = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеДляОбновленияСтрокиРедактора = Неопределено;
	
	СтрокаДереваПоИдСтроки = СтрокаДереваПоИдСтроки(ИДСтроки);
	СтрокаПодсценария = Неопределено;
	ЭтаСтрокаВПодсценарии = МодульРедакторТекста().СтрокаДереваНаходитсяВПодсценарии(СтрокаДереваПоИдСтроки, СтрокаПодсценария);
	
	Если ЭтаСтрокаВПодсценарии И НЕ Ванесса.Объект.ПоказыватьСтрокиПодсценариевVanessaEditor Тогда
		//Тогда не получится активизировать строку из подсценария, т.к. в редакторе не отображаются HTML вставки
		АктивизироватьСтрокуРедактораПоИдСтрокиИНомеруСтрокиФичи(СтрокаПодсценария.ИДСтроки, СтрокаПодсценария.НомерСтрокиВФиче);
		Возврат;
	КонецЕсли;
	
	Если ЭтаСтрокаВПодсценарии И Ванесса.Объект.ПоказыватьСтрокиПодсценариевVanessaEditor Тогда
		
		СтрокаПодсценария2 = Неопределено;
		СтрокаПодсценарияВПодсценарии = МодульРедакторТекста().СтрокаДереваНаходитсяВПодсценарии(СтрокаПодсценария, СтрокаПодсценария2);
		
		Если СтрокаПодсценарияВПодсценарии Тогда
			АктивизироватьСтрокуРедактораПоИдСтрокиИНомеруСтрокиФичиСлужебный(ИДСтроки, НомерСтрокиВФиче);
			Возврат;
		КонецЕсли;	
		
		НужнаяСтрока = Неопределено;
		ИдПерваяИсполняемаяСтрока = ОпределитьИдИсполняемойСтрокиДерева(СтрокаПодсценария, НужнаяСтрока);
		
		Если ИдПерваяИсполняемаяСтрока = ИДСтроки Тогда
			//Значит идет попытка выполнить переход к первой строке подсценария, когда отображаются HTML вставки
			//Делаем переход к строке подсценария
			//Таким образом при выходе из HTML вставки всегда будет единое поведение - далее будет идти движение по верхнему уровню
			АктивизироватьСтрокуРедактораПоИдСтрокиИНомеруСтрокиФичи(СтрокаПодсценария.ИДСтроки, СтрокаПодсценария.НомерСтрокиВФиче);
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	АктивизироватьСтрокуРедактораПоИдСтрокиИНомеруСтрокиФичиСлужебный(ИДСтроки, НомерСтрокиВФиче);
	
КонецПроцедуры 

&НаКлиенте
Процедура АктивизироватьСтрокуРедактораПоИдСтрокиИНомеруСтрокиФичиСлужебный(ИДСтроки, НомерСтрокиВФиче)
	
	ИдВиджета = ИдВиджетаПоИдСтроки(ИДСтроки);
	Если ИдВиджета <> Неопределено Тогда
		НомерСтроки = НомерСтрокиВнутриВиджета(ИдВиджета, ИДСтроки);
		Если НомерСтроки = Неопределено Тогда
			НомерСтроки = ПолучитьVanessaEditor().getWidgetLine(ИдВиджета);
		КонецЕсли;	
		ПолучитьVanessaEditor().revealLineInCenter(НомерСтроки, ИдВиджета);
		ПолучитьVanessaEditor().setPosition(НомерСтроки, 1, ИдВиджета);
	Иначе	
		ПолучитьVanessaEditor().revealLineInCenter(НомерСтрокиВФиче);
		ПолучитьVanessaEditor().setPosition(НомерСтрокиВФиче, 1, "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущаяПозицияVanessaEditor()
	Если VanessaTabs = Неопределено ИЛИ VanessaTabs.current = Неопределено ИЛИ НЕ ЭтоВкладкаEdit(VanessaTabs.current) Тогда
		ТекДанные = Неопределено;
	Иначе	
		ТекДанные = ПолучитьVanessaEditor().getPosition();
	КонецЕсли;	 
	Если ТекДанные = Неопределено Тогда
		Результат = Новый Структура;
		Результат.Вставить("codeWidget", Неопределено);
		Результат.Вставить("column", Неопределено);
		Результат.Вставить("lineNumber", Неопределено);
		Результат.Вставить("РеальныйНомерСтроки", Неопределено);
		
		Возврат Результат;
	КонецЕсли;	 
	
	Результат = Новый Структура;
	Результат.Вставить("codeWidget", ТекДанные.codeWidget);
	Результат.Вставить("column", ТекДанные.column);
	Результат.Вставить("lineNumber", ТекДанные.lineNumber);
	Результат.Вставить("РеальныйНомерСтроки", ТекДанные.lineNumber);
	
	Если НЕ ПустаяСтрока(Результат.codeWidget) Тогда
		Результат.Вставить("РеальныйНомерСтроки", ПолучитьVanessaEditor().getWidgetLine(Результат.codeWidget));
	КонецЕсли;	 
	
	Возврат Результат; 
КонецФункции	 

&НаКлиенте
Процедура ОбновитьТекущуюСтрокуРедактораПоТекущейСтрокеДереваОбработчик()
	Если ДанныеДляОбновленияСтрокиРедактораПоТекущейСтрокеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	 
	
	АктивизироватьСтрокуРедактораПоИдСтрокиИНомеруСтрокиФичи(
		ДанныеДляОбновленияСтрокиРедактораПоТекущейСтрокеДерева.ИДСтроки,
		ДанныеДляОбновленияСтрокиРедактораПоТекущейСтрокеДерева.НомерСтрокиВФиче);
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьТекущуюСтрокуРедактораОбработчик()
	Если ДанныеДляОбновленияСтрокиРедактора = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	 
	
	Попытка
		ЭкземплярVanessaEditor = ПолучитьVanessaEditor();
		Если ПустаяСтрока(ДанныеДляОбновленияСтрокиРедактора.codeWidget) Тогда
			ЭкземплярVanessaEditor.revealLineInCenter(ДанныеДляОбновленияСтрокиРедактора.LineNumber);
		Иначе	
			ЭкземплярVanessaEditor.revealLineInCenter(ДанныеДляОбновленияСтрокиРедактора.LineNumber, ДанныеДляОбновленияСтрокиРедактора.codeWidget);
		КонецЕсли;	 
		ЭкземплярVanessaEditor.setPosition(ДанныеДляОбновленияСтрокиРедактора.LineNumber,
			ДанныеДляОбновленияСтрокиРедактора.Column, ДанныеДляОбновленияСтрокиРедактора.codeWidget);
	Исключение
	КонецПопытки;
		
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФичаФайлОбработчик(ИмяФайлаФичи = Неопределено)
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
			Возврат;
		КонецЕсли;	 
		Если НЕ МодульРедакторТекста().МожноЗапуститьСценарийИзДаннойВкладки() Тогда
			СообщитьПользователю(Локализовать("Для выполнения данного действия необходимо сохранить файл."));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ИмяФайлаФичи = Неопределено Тогда
		Если Объект.ИспользоватьРедакторVanessaEditor Тогда
			ПозицияVanessaEditor = ПолучитьVanessaEditor().getPosition();
			Если ПустаяСтрока(ПозицияVanessaEditor.codeWidget) Тогда
				НомерСтрокиВФиче = ПозицияVanessaEditor.LineNumber;
				ПолныйПуть = Объект.КаталогФич;
			Иначе
				ИдСтрокиДерева = МодульРедакторТекста().ИдСтрокиДереваПоНомеруСтрокиВВиджете(ПозицияVanessaEditor.codeWidget, ПозицияVanessaEditor.LineNumber);
				Если ИдСтрокиДерева = Неопределено Тогда
					Возврат;
				КонецЕсли;	 
				СделатьСтрокуДереваТекущейПоИдСтроки(ИдСтрокиДерева);
				СтрокаФичи = Элементы.ДеревоТестов.ТекущиеДанные;
				Если СтрокаФичи = Неопределено Тогда
					Возврат;
				КонецЕсли; 
				НомерСтрокиВФиче = СтрокаФичи.НомерСтрокиВФиче;
				ПолныйПуть = СтрокаФичи.ПолныйПуть;
			КонецЕсли;	 
		Иначе	
			СтрокаФичи = Элементы.ДеревоТестов.ТекущиеДанные;
			Если СтрокаФичи = Неопределено Тогда
				Возврат;
			КонецЕсли; 
			НомерСтрокиВФиче = СтрокаФичи.НомерСтрокиВФиче;
			ПолныйПуть = СтрокаФичи.ПолныйПуть;
		КонецЕсли;	 
		
		ИмяФайлаФичи = Неопределено;
		Если Найти(НРег(ПолныйПуть), ".feature") > 0 Тогда
			ИмяФайлаФичи = ИмяФайлаФичиИзПолногоПути(ПолныйПуть);
		КонецЕсли;	 
		
		Если ИмяФайлаФичи = Неопределено Тогда
			Если СтрокаФичи.Тип <> "Фича" Тогда
				СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаФичи);
				Если СтрокаФичи = Неопределено Тогда
					СообщитьПользователю(Локализовать("Строка с фича-файлом не найдена."));
					Возврат;
				КонецЕсли;	
				
				ИмяФайлаФичи = СтрокаФичи.ПолныйПуть;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	КомандаДляЗапуска = ИмяФайлаФичи;
	
	Если ЗначениеЗаполнено(Объект.КомандаОткрытияФичиВТекстовомРедакторе) Тогда
		КомандаДляЗапуска = Объект.КомандаОткрытияФичиВТекстовомРедакторе;
		КомандаДляЗапуска = СтрЗаменить(КомандаДляЗапуска, "%Feature%", """" + ИмяФайлаФичи + """");
		КомандаДляЗапуска = СтрЗаменить(КомандаДляЗапуска, "%LineNumber%", Формат(НомерСтрокиВФиче, "ЧГ=; ЧН=0"));
	КонецЕсли;	 
	
	Если ЗапрещеныСинхронныеВызовы Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗапускПриложения", ЭтаФорма);
		НачатьЗапускПриложения(ОписаниеОповещения, КомандаДляЗапуска);
	Иначе	
		ЗапуститьПриложение(КомандаДляЗапуска);
	КонецЕсли;  
КонецПроцедуры 

&НаКлиенте
Процедура ИспользоватьДанныеТекущейФормыПриПодбореШаговПриИзмененииОбработчик()
	Если Объект.ИспользоватьДанныеТекущейФормыПриПодбореШагов Тогда
		МодульРедакторТекста().ВключитьЧтениеДанныхТекущейФормыVanessaEditor();
	Иначе	
		МодульРедакторТекста().ВыключитьЧтениеДанныхТекущейФормыVanessaEditor();
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ПерейтиВДеревоШаговVanessaEditor()
	МодульРедакторТекста().ПерейтиВДеревоШаговVanessaEditor();
КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьЗапретПерезаписиКонтекста(Знач ИмяПеременной, ВсегдаПропускатьПроверкуПерезаписи = Ложь) Экспорт
	
	Если Объект.ЗапрещатьПерезаписыватьПеременные
		И НЕ ВсегдаПропускатьПроверкуПерезаписи Тогда
		
		Если ОбъектКонтекст.Свойство(ИмяПеременной)
			Или ОбъектКонтекстСохраняемый.Свойство(ИмяПеременной) Тогда
			
			ВызватьИсключение ПодставитьПараметрыВСтроку(
				Локализовать("Переменная <%1> уже объявлена. Включен запрет на перезапись."),
				ИмяПеременной
			);
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайлаВПроводнике(ПутьКФайлу)
	Если Не ЭтоLinux Тогда
		Если WshShell = Неопределено Тогда
			WshShell = ПолучитьWshShell();
			// Далее переменная WshShell будет закеширована, чтобы не создавать ComObject каждый раз
		КонецЕсли;	 
		КомандаСистемы = "explorer.exe /select,""" + ПутьКФайлу + """";
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаСистемы);
	Иначе	
		Файл = Новый Файл(ПутьКФайлу);
		
		Если ЗапрещеныСинхронныеВызовы Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОткрытьКаталогФичи", ЭтаФорма);
			НачатьЗапускПриложения(ОписаниеОповещения, Файл.Путь);
		Иначе	
			ЗапуститьПриложение(Файл.Путь);
		КонецЕсли;  
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ОжиданиеЗаполненияТабличногоДокумента(ЭлементФормы)
	Попытка
		ИмяЭлементаФормы = ЭлементФормы.Имя;
	Исключение
		ИмяЭлементаФормы = "";
	КонецПопытки;
	
	Если ПустаяСтрока(ИмяЭлементаФормы) Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Версия8313ИлиВыше Тогда
		КоличествоПопыток = Макс(ЗначениеКоличествоПопытокВыполненияДействия(), 4);
		Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
			Попытка
				Если ЭлементФормы.ПолучитьРазмерОбластиДанныхДокументаПоВертикали() > 0
					ИЛИ  ЭлементФормы.ПолучитьРазмерОбластиДанныхДокументаПоГоризонтали() > 0 Тогда
					Прервать;
				КонецЕсли;	 
			Исключение
				Возврат; 
			КонецПопытки;
			
			Sleep(1);
		КонецЦикла;	
		
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьПоследнийФайлИзМассиваКТекущемуШагу(СписокФайлов, ТекШаг)
	Если СписокФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ПоследнийФайл = СписокФайлов[СписокФайлов.Количество() - 1];
	Если ТекШаг = Неопределено Тогда
		Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		ТекШаг = Шаги[ТекИД_ШагаВМассиве];
	КонецЕсли;	
	ПоследнийФайл.Вставить("ПрикрепитьФайлКшагу", ТекШаг);
	ПоследнийФайл.Вставить("ДобавлятьФайлКСценарию", Ложь);
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗапомнитьДанныеДляСборДанныхДляОтчетов(РезультатПрохожденияТестовСценария, СтрокаСценария, РезультатПрохожденияШага, ОписаниеОшибкиВнутриСценария, ТекШаг)
	
	СохраненныеДанныеСборДанныхДляОтчетов = Новый Структура;
	СохраненныеДанныеСборДанныхДляОтчетов.Вставить("РезультатПрохожденияТестовСценария", РезультатПрохожденияТестовСценария);
	СохраненныеДанныеСборДанныхДляОтчетов.Вставить("СтрокаСценарияИдСтроки", СтрокаСценария.ИдСтроки);
	СохраненныеДанныеСборДанныхДляОтчетов.Вставить("РезультатПрохожденияШага", РезультатПрохожденияШага);
	СохраненныеДанныеСборДанныхДляОтчетов.Вставить("ОписаниеОшибкиВнутриСценария", ОписаниеОшибкиВнутриСценария);
	СохраненныеДанныеСборДанныхДляОтчетов.Вставить("ТекШаг", ТекШаг);
	
КонецПроцедуры

&НаКлиенте
Процедура СборДанныхДляОтчетов(РезультатПрохожденияТестовСценария, СтрокаСценария, РезультатПрохожденияШага, ОписаниеОшибкиВнутриСценария, ТекШаг = Неопределено)
	
	#Если НЕ ВебКлиент Тогда
	
	Если НЕ РезультатПрохожденияШага.Свойство("СписокФайлов") Тогда
		РезультатПрохожденияШага.Вставить("СписокФайлов", Новый Массив);
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеАллюр И ТипЗнч(СтрокаСценария.ПроизвольныеЗначения) = Тип("Структура") И СтрокаСценария.ПроизвольныеЗначения.Свойство("ПрикрепленныеМакеты") Тогда
		ПрикрепленныеМакеты = СтрокаСценария.ПроизвольныеЗначения.ПрикрепленныеМакеты;
		Для Каждого ТекМакет Из ПрикрепленныеМакеты Цикл
			ДанныеФайла = ТекМакет.Значение;
			Если ТипЗнч(ДанныеФайла.Макет) = Тип("ТабличныйДокумент") Тогда
				
				Если Объект.ПрикладыватьФайлыMxlКОтчетуAllure Тогда
					ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
					ДанныеФайла.Макет.НачатьЗапись(,ИмяФайла,ТипФайлаТабличногоДокумента.MXL);
					ДанныеФайлаДляПрикрепления = Новый Структура("ИмяФайла,Расширение,Представление", ИмяФайла, "mxl", ДанныеФайла.Имя + ".mxl");
					ИменаФайловДляПрикрепления.Добавить(ДанныеФайлаДляПрикрепления);
					ДобавитьПоследнийФайлИзМассиваКТекущемуШагу(ИменаФайловДляПрикрепления, ТекШаг);
				КонецЕсли;	 
				
				Если Объект.ПрикладыватьФайлыMxlСохраненныеВФорматеHTMLКОтчетуAllure Тогда
					ИмяФайла = ПолучитьИмяВременногоФайла("html");
					ДанныеФайла.Макет.НачатьЗапись(,ИмяФайла,ТипФайлаТабличногоДокумента.HTML5);
					ДанныеФайлаДляПрикрепления = Новый Структура("ИмяФайла,Расширение,Представление", ИмяФайла, "html", ДанныеФайла.Имя + ".html");
					ИменаФайловДляПрикрепления.Добавить(ДанныеФайлаДляПрикрепления);
					ДобавитьПоследнийФайлИзМассиваКТекущемуШагу(ИменаФайловДляПрикрепления, ТекШаг);
				КонецЕсли;	 
				
			КонецЕсли;	 
		КонецЦикла;	
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеАллюр И Объект.ПрикладыватьКОтчетуAllureЖурналРегистрацииВыполненияСценария Тогда
		Попытка
			ТабДок = ДанныеЖурналаРегистрацииСервер(РезультатПрохожденияТестовСценария.ДатаНачала);

			Если Объект.ПрикладыватьФайлыMxlКОтчетуAllure Тогда
				ИменаФайловДляПрикрепления.Добавить(
					ПрикрепитьЖурналРегистрацииТекущейБазы(ТабДок, СтрокаСценария, "mxl", ОписаниеОшибкиВнутриСценария));
					
				ДобавитьПоследнийФайлИзМассиваКТекущемуШагу(ИменаФайловДляПрикрепления, ТекШаг);
			КонецЕсли;	 
			
			Если Объект.ПрикладыватьФайлыMxlСохраненныеВФорматеHTMLКОтчетуAllure Тогда
				ИменаФайловДляПрикрепления.Добавить(
					ПрикрепитьЖурналРегистрацииТекущейБазы(ТабДок, СтрокаСценария, "html", ОписаниеОшибкиВнутриСценария));
					
				ДобавитьПоследнийФайлИзМассиваКТекущемуШагу(ИменаФайловДляПрикрепления, ТекШаг);
			КонецЕсли;	 
			
		Исключение
			ЗаписатьЛогВЖРОшибка("VanessaAutomation.ПрикладыватьКОтчетуAllureЖурналРегистрацииВыполненияСценария", ОписаниеОшибки());
		КонецПопытки;
		
		Попытка
			Если Объект.ПрикладыватьФайлыXlsxКОтчетуAllure Тогда
				ИменаФайловДляПрикрепления.Добавить(
				ПрикрепитьЖурналРегистрацииТекущейБазы(ТабДок, СтрокаСценария, "xlsx", ОписаниеОшибкиВнутриСценария));
				
				ДобавитьПоследнийФайлИзМассиваКТекущемуШагу(ИменаФайловДляПрикрепления, ТекШаг);
			КонецЕсли;	 
		Исключение
			ЗаписатьЛогВЖРОшибка("VanessaAutomation.ПрикладыватьКОтчетуAllureЖурналРегистрацииВыполненияСценария", ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеАллюр И Объект.ПрикладыватьКОтчетуAllureДанныеОСостоянииАктивнойФормы Тогда
		Попытка
			ТабДок = СостояниеФормыВВидеМакета();
			Если ТабДок = Неопределено Тогда
				ТабДок = Новый ТабличныйДокумент;
			КонецЕсли;	 
		Исключение
			ТабДок = Новый ТабличныйДокумент;
		КонецПопытки;
		
		Попытка
			Если Объект.ПрикладыватьФайлыMxlКОтчетуAllure Тогда
				ИменаФайловДляПрикрепления.Добавить(
					ПрикрепитьДанныеОСостоянииАктивнойФормы(ТабДок, СтрокаСценария, "mxl", ОписаниеОшибкиВнутриСценария));
					
				ДобавитьПоследнийФайлИзМассиваКТекущемуШагу(ИменаФайловДляПрикрепления, ТекШаг);
			КонецЕсли;
		Исключение
			ЗаписатьЛогВЖРОшибка("VanessaAutomation.ПрикладыватьКОтчетуAllureДанныеОСостоянииАктивнойФормы", ОписаниеОшибки());
		КонецПопытки;
		
		Попытка
			Если Объект.ПрикладыватьФайлыMxlСохраненныеВФорматеHTMLКОтчетуAllure Тогда
				ИменаФайловДляПрикрепления.Добавить(
					ПрикрепитьДанныеОСостоянииАктивнойФормы(ТабДок, СтрокаСценария, "html", ОписаниеОшибкиВнутриСценария));
					
				ДобавитьПоследнийФайлИзМассиваКТекущемуШагу(ИменаФайловДляПрикрепления, ТекШаг);	
			КонецЕсли;
		Исключение
			ЗаписатьЛогВЖРОшибка("VanessaAutomation.ПрикладыватьКОтчетуAllureДанныеОСостоянииАктивнойФормы", ОписаниеОшибки());
		КонецПопытки;
		
		Попытка
			Если Объект.ПрикладыватьФайлыXlsxКОтчетуAllure Тогда
				ИменаФайловДляПрикрепления.Добавить(
				ПрикрепитьДанныеОСостоянииАктивнойФормы(ТабДок, СтрокаСценария, "xlsx", ОписаниеОшибкиВнутриСценария));
				
				ДобавитьПоследнийФайлИзМассиваКТекущемуШагу(ИменаФайловДляПрикрепления, ТекШаг);
			КонецЕсли;	 
		Исключение
			ЗаписатьЛогВЖРОшибка("VanessaAutomation.ПрикладыватьКОтчетуAllureДанныеОСостоянииАктивнойФормы", ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеАллюр И Объект.ПрикладыватьКОтчетуAllureДанныеОСостоянииВсехФорм Тогда
		Попытка
			ТабДок = СостояниеВсехФормВВидеМакета();
			Если ТабДок = Неопределено Тогда
				ТабДок = Новый ТабличныйДокумент;
			КонецЕсли;	 
		Исключение
			ТабДок = Новый ТабличныйДокумент;
		КонецПопытки;
		
		Попытка
			Если Объект.ПрикладыватьФайлыMxlКОтчетуAllure Тогда
				ИменаФайловДляПрикрепления.Добавить(
					ПрикрепитьДанныеОСостоянииВсехФорм(ТабДок, СтрокаСценария, "mxl", ОписаниеОшибкиВнутриСценария));
					
				ДобавитьПоследнийФайлИзМассиваКТекущемуШагу(ИменаФайловДляПрикрепления, ТекШаг);
			КонецЕсли
		Исключение
			ЗаписатьЛогВЖРОшибка("VanessaAutomation.ПрикладыватьКОтчетуAllureДанныеОСостоянииВсехФорм", ОписаниеОшибки());
		КонецПопытки;
		
		Попытка
			Если Объект.ПрикладыватьФайлыMxlСохраненныеВФорматеHTMLКОтчетуAllure Тогда
				ИменаФайловДляПрикрепления.Добавить(
					ПрикрепитьДанныеОСостоянииВсехФорм(ТабДок, СтрокаСценария, "html", ОписаниеОшибкиВнутриСценария));
					
				ДобавитьПоследнийФайлИзМассиваКТекущемуШагу(ИменаФайловДляПрикрепления, ТекШаг);
			КонецЕсли
		Исключение
			ЗаписатьЛогВЖРОшибка("VanessaAutomation.ПрикладыватьКОтчетуAllureДанныеОСостоянииВсехФорм", ОписаниеОшибки());
		КонецПопытки;
		
		Попытка
			Если Объект.ПрикладыватьФайлыXlsxКОтчетуAllure Тогда
				ИменаФайловДляПрикрепления.Добавить(
					ПрикрепитьДанныеОСостоянииВсехФорм(ТабДок, СтрокаСценария, "xlsx", ОписаниеОшибкиВнутриСценария));
					
				ДобавитьПоследнийФайлИзМассиваКТекущемуШагу(ИменаФайловДляПрикрепления, ТекШаг);
			КонецЕсли;	 
		Исключение
			ЗаписатьЛогВЖРОшибка("VanessaAutomation.ПрикладыватьКОтчетуAllureДанныеОСостоянииВсехФорм", ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеАллюр И Объект.ПрикладыватьКОтчетуAllureДанныеОСетевыхСоединениях Тогда
		Попытка
			ИменаФайловДляПрикрепления.Добавить(
				ПрикрепитьДанныеОСетевыхСоединениях(СтрокаСценария, ОписаниеОшибкиВнутриСценария));
				
			ДобавитьПоследнийФайлИзМассиваКТекущемуШагу(ИменаФайловДляПрикрепления, ТекШаг);
		Исключение
			ЗаписатьЛогВЖРОшибка("VanessaAutomation.ПрикладыватьКОтчетуAllureДанныеОСетевыхСоединениях", ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеАллюр И Объект.ПрикладыватьКОтчетуAllureДанныеОПроцессахОС Тогда
		Попытка
			ИменаФайловДляПрикрепления.Добавить(
				ПрикрепитьДанныеОПроцессахОС(СтрокаСценария, ОписаниеОшибкиВнутриСценария));
				
			ДобавитьПоследнийФайлИзМассиваКТекущемуШагу(ИменаФайловДляПрикрепления, ТекШаг);
		Исключение
			ЗаписатьЛогВЖРОшибка("VanessaAutomation.ПрикладыватьКОтчетуAllureДанныеОПроцессахОС", ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Если Объект.ДелатьОтчетВФорматеАллюр И Объект.ПрикладыватьКОтчетуAllureДанныеОЗначенияхПеременных Тогда
		Попытка
			Если Объект.ПрикладыватьФайлыMxlКОтчетуAllure Тогда
				ИменаФайловДляПрикрепления.Добавить(
					ПрикрепитьДанныеОЗначенияхПеременных(СтрокаСценария, ОписаниеОшибкиВнутриСценария, "mxl"));
					
				ДобавитьПоследнийФайлИзМассиваКТекущемуШагу(ИменаФайловДляПрикрепления, ТекШаг);
			КонецЕсли
		Исключение
			ЗаписатьЛогВЖРОшибка("VanessaAutomation.ПрикладыватьКОтчетуAllureДанныеОЗначенияхПеременных", ОписаниеОшибки());
		КонецПопытки;
		
		Попытка
			Если Объект.ПрикладыватьФайлыMxlСохраненныеВФорматеHTMLКОтчетуAllure Тогда
				ИменаФайловДляПрикрепления.Добавить(
					ПрикрепитьДанныеОЗначенияхПеременных(СтрокаСценария, ОписаниеОшибкиВнутриСценария, "html"));
					
				ДобавитьПоследнийФайлИзМассиваКТекущемуШагу(ИменаФайловДляПрикрепления, ТекШаг);
			КонецЕсли
		Исключение
			ЗаписатьЛогВЖРОшибка("VanessaAutomation.ПрикладыватьКОтчетуAllureДанныеОЗначенияхПеременных", ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;

	#КонецЕсли
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроставитьСтрокамДереваСтатусВВерхПоИерархии(СтрокаШага)
	ТекСтрока = СтрокаШага;
	Пока Истина Цикл
		СтрокаРодителя = ТекСтрока.ПолучитьРодителя();
		Если СтрокаРодителя.Тип = "Фича" Тогда
			Прервать;
		КонецЕсли;	
		
		СтрокаРодителя.Статус = СтрокаШага.Статус;
		ТекСтрока = СтрокаРодителя;
	КонецЦикла;	
КонецПроцедуры 

&НаКлиенте
Функция PIDТекущегоКлиентаТестирования()
	ТекущиеДанные = ТекущиеДанныеКлиентаТестирования();
	Если ТекущиеДанные <> Неопределено Тогда
		Возврат ТекущиеДанные.PIDКлиентаТестирования; 
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция ЭтоОкноНеДляСнятияСкриншотов(Class)
	Если Class = "Internet Explorer_Hidden"
		Или Class = "V8Window"
		Или Class = "V8ConfirmationWindowTaxi" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции	 

&НаСервереБезКонтекста
Функция ПодставитьПараметрыВСтрокуСервер(Знач Стр, Парам1 = Неопределено,
                                             Парам2 = Неопределено,
                                             Парам3 = Неопределено,
                                             Парам4 = Неопределено,
                                             Парам5 = Неопределено,
                                             Парам6 = Неопределено,
                                             Парам7 = Неопределено)
											 
											 
	Если Парам1 <> Неопределено Тогда
		Стр = СтрЗаменить(Стр,"%1",Парам1);
	КонецЕсли;	 											 
	Если Парам2 <> Неопределено Тогда
		Стр = СтрЗаменить(Стр,"%2",Парам2);
	КонецЕсли;	 											 
	Если Парам3 <> Неопределено Тогда
		Стр = СтрЗаменить(Стр,"%3",Парам3);
	КонецЕсли;	 											 
	Если Парам4 <> Неопределено Тогда
		Стр = СтрЗаменить(Стр,"%4",Парам4);
	КонецЕсли;	 											 
	Если Парам5 <> Неопределено Тогда
		Стр = СтрЗаменить(Стр,"%5",Парам5);
	КонецЕсли;	 											 
	Если Парам6 <> Неопределено Тогда
		Стр = СтрЗаменить(Стр,"%6",Парам6);
	КонецЕсли;	 											 
	Если Парам7 <> Неопределено Тогда
		Стр = СтрЗаменить(Стр,"%7",Парам7);
	КонецЕсли;	 											 
	
	Возврат Стр;
КонецФункции	 

&НаСервере
Процедура ПроверитьДублированиеСценариевНаСервере(ПротоколОшибок)
	//Перем ПротоколОшибок;
	ПротоколОшибок ="";
	
	
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	
	
	СтрокиСценариев = ОбъектСервер.ДеревоТестов.Строки.НайтиСтроки(Новый Структура("Тип","Сценарий"), Истина);
	Для каждого ЭлементСроки из СтрокиСценариев цикл
		Если ЭлементСроки.ДопТип = "Контекст" Тогда 
			Продолжить; 
		КонецЕсли;
		СтрокиДублей = ОбъектСервер.ДеревоТестов.Строки.НайтиСтроки(Новый Структура("Тип, Имя","Сценарий", ЭлементСроки.Имя), Истина);
		Если СтрокиДублей.Количество()>1 Тогда 
			ПротоколОшибок= ПротоколОшибок+Символы.ПС+ЭлементСроки.Имя +"	"+ЭлементСроки.ПолныйПуть+":"+Формат(ЭлементСроки.ИДСтроки, "ЧГ=0")+Символы.ПС;
			
			Для каждого элементДубль из СтрокиДублей Цикл
				Если элементДубль.ПолныйПуть+":"+элементДубль.ИДСтроки = ЭлементСроки.ПолныйПуть+":"+ЭлементСроки.ИДСтроки Тогда
					Продолжить;
				КонецЕсли;
					
				ПротоколОшибок= ПротоколОшибок+Символы.Таб+элементДубль.Имя +"	"+элементДубль.ПолныйПуть+":"+Формат(элементДубль.ИДСтроки, "ЧГ=0")+Символы.ПС;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
		 
КонецПроцедуры

&НаСервере
Функция ДанныеЖурналаРегистрацииСервер(Знач ДатаНачала)
	СобытияЖурнала = Новый ТаблицаЗначений;
	СобытияЖурнала.Колонки.Добавить("Данные");
	СобытияЖурнала.Колонки.Добавить("Data");
	
	Фильтр = Новый Структура;
	Фильтр.Вставить("ДатаНачала", ДатаНачала);
	ВыгрузитьЖурналРегистрации(СобытияЖурнала, Фильтр);	
	
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Макет        = ОбъектСервер.ПолучитьМакет("ШаблонЖР");
	ТабДок       = Новый ТабличныйДокумент;
	СекцияШапка  = Макет.ПолучитьОбласть("Шапка");
	ТабДок.Вывести(СекцияШапка);
	
	Если СобытияЖурнала.Колонки.Найти("ИмяПриложения") <> Неопределено Тогда
		Язык = "ru";
	Иначе	
		Язык = "en";
	КонецЕсли;	 
	
	НомСтр = 0;
	Для Каждого СтрокаСобытияЖурнала Из СобытияЖурнала Цикл
		НомСтр = НомСтр + 1;
		СекцияСтрока = Макет.ПолучитьОбласть("Строка");
		ЗаполнитьЗначенияСвойств(СекцияСтрока.Параметры,СтрокаСобытияЖурнала);
		
		Если Язык = "ru" Тогда
			СекцияСтрока.Параметры.ApplicationName = СтрокаСобытияЖурнала.ИмяПриложения;
			СекцияСтрока.Параметры.ApplicationPresentation = СтрокаСобытияЖурнала.ПредставлениеПриложения;
			СекцияСтрока.Параметры.AuxiliaryIPPort = СтрокаСобытияЖурнала.ВспомогательныйIPПорт;
			СекцияСтрока.Параметры.Comment = СтрокаСобытияЖурнала.Комментарий;
			СекцияСтрока.Параметры.Computer = СтрокаСобытияЖурнала.Компьютер;
			СекцияСтрока.Параметры.Connection = СтрокаСобытияЖурнала.Соединение;
			СекцияСтрока.Параметры.Data = ДанныеЖурналаРегистрацииВСтроку(СтрокаСобытияЖурнала.Данные);
			СекцияСтрока.Параметры.Данные = СекцияСтрока.Параметры.Data;
			СекцияСтрока.Параметры.DataPresentation = СтрокаСобытияЖурнала.ПредставлениеДанных;
			СекцияСтрока.Параметры.Date = СтрокаСобытияЖурнала.Дата;
			СекцияСтрока.Параметры.Event = СтрокаСобытияЖурнала.Событие;
			СекцияСтрока.Параметры.EventPresentation = СтрокаСобытияЖурнала.ПредставлениеСобытия;
			СекцияСтрока.Параметры.Level = СтрокаСобытияЖурнала.Уровень;
			СекцияСтрока.Параметры.MainIPPort = СтрокаСобытияЖурнала.ОсновнойIPПорт;
			СекцияСтрока.Параметры.Metadata = СтрокаСобытияЖурнала.Метаданные;
			СекцияСтрока.Параметры.MetadataPresentation = СтрокаСобытияЖурнала.ПредставлениеМетаданных;
			СекцияСтрока.Параметры.Session = СтрокаСобытияЖурнала.Сеанс;
			СекцияСтрока.Параметры.Transaction = СтрокаСобытияЖурнала.Транзакция;
			СекцияСтрока.Параметры.TransactionStatus = СтрокаСобытияЖурнала.СтатусТранзакции;
			СекцияСтрока.Параметры.User = СтрокаСобытияЖурнала.Пользователь;
			СекцияСтрока.Параметры.Username = СтрокаСобытияЖурнала.ИмяПользователя;
			СекцияСтрока.Параметры.WorkingServer = СтрокаСобытияЖурнала.РабочийСервер;
		Иначе	
			СекцияСтрока.Параметры.ApplicationName = СтрокаСобытияЖурнала.ApplicationName;
			СекцияСтрока.Параметры.ApplicationPresentation = СтрокаСобытияЖурнала.ApplicationPresentation;
			СекцияСтрока.Параметры.AuxiliaryIPPort = СтрокаСобытияЖурнала.SyncPort;
			СекцияСтрока.Параметры.Comment = СтрокаСобытияЖурнала.Comment;
			СекцияСтрока.Параметры.Computer = СтрокаСобытияЖурнала.Computer;
			СекцияСтрока.Параметры.Connection = СтрокаСобытияЖурнала.Connection;
			СекцияСтрока.Параметры.Data = ДанныеЖурналаРегистрацииВСтроку(СтрокаСобытияЖурнала.Data);
			СекцияСтрока.Параметры.Данные = СекцияСтрока.Параметры.Data;
			СекцияСтрока.Параметры.DataPresentation = СтрокаСобытияЖурнала.DataPresentation;
			СекцияСтрока.Параметры.Date = СтрокаСобытияЖурнала.Date;
			СекцияСтрока.Параметры.Event = СтрокаСобытияЖурнала.Event;
			СекцияСтрока.Параметры.EventPresentation = СтрокаСобытияЖурнала.EventPresentation;
			СекцияСтрока.Параметры.Level = СтрокаСобытияЖурнала.Level;
			СекцияСтрока.Параметры.MainIPPort = СтрокаСобытияЖурнала.Port;
			СекцияСтрока.Параметры.Metadata = СтрокаСобытияЖурнала.Metadata;
			СекцияСтрока.Параметры.MetadataPresentation = СтрокаСобытияЖурнала.MetadataPresentation;
			СекцияСтрока.Параметры.Session = СтрокаСобытияЖурнала.Session;
			СекцияСтрока.Параметры.Transaction = СтрокаСобытияЖурнала.TransactionID;
			СекцияСтрока.Параметры.TransactionStatus = СтрокаСобытияЖурнала.TransactionStatus;
			СекцияСтрока.Параметры.User = СтрокаСобытияЖурнала.User;
			СекцияСтрока.Параметры.Username = СтрокаСобытияЖурнала.Username;
			СекцияСтрока.Параметры.WorkingServer = СтрокаСобытияЖурнала.ServerName;
		КонецЕсли;	 
		
		СекцияСтрока.Параметры.НомСтр = НомСтр;
		ТабДок.Вывести(СекцияСтрока);
	КонецЦикла;	 
	ТабДок.ФиксацияСверху = 1;
	Возврат ТабДок;
КонецФункции 

&НаКлиенте
Функция ПрикрепитьЖурналРегистрацииТекущейБазы(ТабДок, СтрокаСценария, Расширение, ДопОписаниеОшибки)
	#Если НЕ ВебКлиент Тогда
		
	Если ПустаяСтрока(ДопОписаниеОшибки) Тогда
		ДопОписание = "";
	Иначе
		ДопОписание = "_" + ДопОписаниеОшибки;
	КонецЕсли;	 	
		
	Если Расширение = "mxl" Тогда
		
		ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
		ТабДок.НачатьЗапись(,ИмяФайла,ТипФайлаТабличногоДокумента.MXL);
		Возврат Новый Структура("ИмяФайла,Расширение,Представление", ИмяФайла, "mxl", Локализовать("ЖурналРегистрации") + ДопОписание + ".mxl");
			
	ИначеЕсли Расширение = "html" Тогда
		
		ИмяФайла = ПолучитьИмяВременногоФайла("html");
		ТабДок.НачатьЗапись(,ИмяФайла,ТипФайлаТабличногоДокумента.HTML5);
		Возврат Новый Структура("ИмяФайла,Расширение,Представление", ИмяФайла, "html", Локализовать("ЖурналРегистрации") + ДопОписание + ".html");
			
	ИначеЕсли Расширение = "xlsx" Тогда
		
		ИмяФайла = ПолучитьИмяВременногоФайла("xlsx");
		Попытка
			ПривестиРазмерСтрокВМакетеВСоответствиеСТребованиямиФорматаXlsx(ТабДок);
			Если ЗапрещеныСинхронныеВызовы Тогда
				ТабДок.НачатьЗапись(,ИмяФайла,ТипФайлаТабличногоДокумента.XLSX);
			Иначе	
				ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLSX);
			КонецЕсли;	 
		Исключение
			ЗаписатьЛогВЖРОшибка("ПрикрепитьЖурналРегистрацииТекущейБазы", ОписаниеОшибки());
		КонецПопытки;
		
		Возврат Новый Структура("ИмяФайла,Расширение,Представление", ИмяФайла, "xlsx", Локализовать("ЖурналРегистрации") + ДопОписание + ".xlsx");
		
	КонецЕсли;	 
	
	#КонецЕсли
КонецФункции 

&НаКлиенте
Функция ПрикрепитьДанныеОСостоянииАктивнойФормы(ТабДок, СтрокаСценария, Расширение, ДопОписаниеОшибки)
	#Если НЕ ВебКлиент Тогда
		
	Если ПустаяСтрока(ДопОписаниеОшибки) Тогда
		ДопОписание = "";
	Иначе
		ДопОписание = "_" + ДопОписаниеОшибки;
	КонецЕсли;	 	
	
	Если Расширение = "mxl" Тогда
		
			ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
			ТабДок.НачатьЗапись(,ИмяФайла,ТипФайлаТабличногоДокумента.MXL);
			Возврат Новый Структура("ИмяФайла,Расширение,Представление",ИмяФайла,"mxl",Локализовать("СостояниеАктивнойФормы") + ДопОписание + ".mxl");
			
	ИначеЕсли Расширение = "html" Тогда
			
			ИмяФайла = ПолучитьИмяВременногоФайла("html");
			ТабДок.НачатьЗапись(,ИмяФайла,ТипФайлаТабличногоДокумента.HTML5);
			Возврат Новый Структура("ИмяФайла,Расширение,Представление",ИмяФайла,"html",Локализовать("СостояниеАктивнойФормы") + ДопОписание + ".html");
			
	ИначеЕсли Расширение = "xlsx" Тогда
			
		ИмяФайла = ПолучитьИмяВременногоФайла("xlsx");
		ПривестиРазмерСтрокВМакетеВСоответствиеСТребованиямиФорматаXlsx(ТабДок);
		ТабДок.НачатьЗапись(,ИмяФайла,ТипФайлаТабличногоДокумента.XLSX);
		Возврат Новый Структура("ИмяФайла,Расширение,Представление",ИмяФайла,"xlsx",Локализовать("СостояниеАктивнойФормы") + ДопОписание + ".xlsx");
		
	КонецЕсли;	 	
	
	#КонецЕсли
КонецФункции 

&НаКлиенте
Функция ПрикрепитьДанныеОСостоянииВсехФорм(ТабДок, СтрокаСценария, Расширение, ДопОписаниеОшибки)
	#Если НЕ ВебКлиент Тогда
		
	Если ПустаяСтрока(ДопОписаниеОшибки) Тогда
		ДопОписание = "";
	Иначе
		ДопОписание = "_" + ДопОписаниеОшибки;
	КонецЕсли;	 	
	
	Если Расширение = "mxl" Тогда
		
		ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
		ТабДок.НачатьЗапись(,ИмяФайла,ТипФайлаТабличногоДокумента.MXL);
		Возврат Новый Структура("ИмяФайла,Расширение,Представление",ИмяФайла,"mxl",Локализовать("СостояниеВсехФорм") + ДопОписание + ".mxl");
			
	ИначеЕсли Расширение = "html" Тогда
			
		ИмяФайла = ПолучитьИмяВременногоФайла("html");
		ТабДок.НачатьЗапись(,ИмяФайла,ТипФайлаТабличногоДокумента.HTML5);
		Возврат Новый Структура("ИмяФайла,Расширение,Представление",ИмяФайла,"html",Локализовать("СостояниеВсехФорм") + ДопОписание + ".html");
	
	ИначеЕсли Расширение = "xlsx" Тогда
		
		ИмяФайла = ПолучитьИмяВременногоФайла("xlsx");
		ПривестиРазмерСтрокВМакетеВСоответствиеСТребованиямиФорматаXlsx(ТабДок);
		ТабДок.НачатьЗапись(,ИмяФайла,ТипФайлаТабличногоДокумента.XLSX);
		Возврат Новый Структура("ИмяФайла,Расширение,Представление",ИмяФайла,"xlsx",Локализовать("СостояниеВсехФорм") + ДопОписание + ".xlsx");
		
	КонецЕсли;	 	
	
	#КонецЕсли
КонецФункции 

&НаКлиенте
Функция ПрикрепитьДанныеОСетевыхСоединениях(СтрокаСценария, ДопОписаниеОшибки)
	#Если НЕ ВебКлиент Тогда
		
	Если ПустаяСтрока(ДопОписаниеОшибки) Тогда
		ДопОписание = "";
	Иначе
		ДопОписание = "_" + ДопОписаниеОшибки;
	КонецЕсли;	 	
	
	Попытка
		ДанныеОСетевыхСоединениях = ДанныеОСетевыхСоединениях();
		ЗаписатьЛогВЖРИнформация("ДанныеОСетевыхСоединениях",
			ДанныеОСетевыхСоединениях);
	Исключение
		ДанныеОСетевыхСоединениях = "";
	КонецПопытки;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("txt");
	ЗТ = Новый ЗаписьТекста(ИмяФайла,"UTF-8"); 
	ЗТ.Записать(ДанныеОСетевыхСоединениях); 
	ЗТ.Закрыть();
	Возврат Новый Структура("ИмяФайла,Расширение,Представление", ИмяФайла, "txt", Локализовать("ДанныеОСетевыхСоединениях") + ДопОписание + ".txt");
	
	#КонецЕсли
КонецФункции 

&НаКлиенте
Функция ПрикрепитьДанныеОПроцессахОС(СтрокаСценария, ДопОписаниеОшибки)
	#Если НЕ ВебКлиент Тогда
		
	Если ПустаяСтрока(ДопОписаниеОшибки) Тогда
		ДопОписание = "";
	Иначе
		ДопОписание = "_" + ДопОписаниеОшибки;
	КонецЕсли;	 	
	
	Попытка
		ДанныеОПроцессахОС = ДанныеОПроцессахОС();
		ЗаписатьЛогВЖРИнформация("ДанныеОПроцессахОС",
			ДанныеОПроцессахОС);
	Исключение
		ДанныеОПроцессахОС = "";
	КонецПопытки;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("txt");
	ЗТ = Новый ЗаписьТекста(ИмяФайла,"UTF-8"); 
	ЗТ.Записать(ДанныеОПроцессахОС); 
	ЗТ.Закрыть();
	Возврат Новый Структура("ИмяФайла,Расширение,Представление", ИмяФайла, "txt", Локализовать("ДанныеОПроцессахОС") + ДопОписание + ".txt");
	
	#КонецЕсли
КонецФункции 

&НаКлиенте
Функция ПрикрепитьДанныеОЗначенияхПеременных(СтрокаСценария, ДопОписаниеОшибки, Расширение)
	#Если НЕ ВебКлиент Тогда
	
	Если ПустаяСтрока(ДопОписаниеОшибки) Тогда
		ДопОписание = "";
	Иначе
		ДопОписание = "_" + ДопОписаниеОшибки;
	КонецЕсли;	 	
	
	Попытка
		ТабДок = ДанныеОЗначенияхПеременныхВВидеМакета();
	Исключение
		ТабДок = Новый ТабличныйДокумент;
	КонецПопытки;
	
	Если Расширение = "mxl" Тогда
		
		ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
		ТабДок.НачатьЗапись(, ИмяФайла, ТипФайлаТабличногоДокумента.MXL);
		Возврат Новый Структура("ИмяФайла,Расширение,Представление", ИмяФайла, "mxl", Локализовать("ЗначенияПеременных") + ДопОписание + ".mxl");
		
	ИначеЕсли Расширение = "html" Тогда
		
		ИмяФайла = ПолучитьИмяВременногоФайла("html");
		ТабДок.НачатьЗапись(, ИмяФайла, ТипФайлаТабличногоДокумента.HTML5);
		Возврат Новый Структура("ИмяФайла,Расширение,Представление", ИмяФайла, "html", Локализовать("ЗначенияПеременных") + ДопОписание + ".html");
		
	КонецЕсли;	 
	
	#КонецЕсли
КонецФункции 

&НаКлиенте
Процедура ОбработчикОткрытьФормуИзвестныхШаговПодключитьОбработки(Знач ПомещенныеФайлы, Знач ДополнительныеПараметры) Экспорт
	ПодключитьОбработкиКлиент(ПомещенныеФайлы, ДополнительныеПараметры);
	ОткрытьФормуИзвестногоШага(ДополнительныеПараметры.АктивизироватьСтрокуШага);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИзвестныхШаговПодключитьОбработкиПродолжение(ДопПараметры)
	АктивизироватьСтрокуШага = ДопПараметры.АктивизироватьСтрокуШага;
	
	ДанныеДляПолученияСнипетов = Новый Массив;
	ДанныеПоВерсиямОбработок = ПолучитьТаблицыПоТаблицаИзвестныхStepDefinition();
	МассивИменФайловКоторыеСовпалиСКеш = Новый Соответствие;
	
	Для каждого Элем Из Объект.КаталогиБиблиотек Цикл
		КаталогБиблиотеки = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);
		ПолучитьУжеСуществующиеСнипетыИзОбработок(КаталогБиблиотеки, ДанныеДляПолученияСнипетов, ДопПараметры, 
			ДанныеПоВерсиямОбработок.МассивВерсийФайловИзТаблицаИзвестныхStepDefinition, 
			ДанныеПоВерсиямОбработок.МассивИменФайловИзТаблицаИзвестныхStepDefinition, МассивИменФайловКоторыеСовпалиСКеш);
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ДополнительныеПараметры", ДопПараметры);
	СтруктураПараметров.Вставить("МассивИменФайловКоторыеСовпалиСКеш", МассивИменФайловКоторыеСовпалиСКеш);
	СтруктураПараметров.Вставить("Путь", Объект.КаталогФич);
	СтруктураПараметров.Вставить("СписокТеговИсключение", Объект.СписокТеговИсключение);
	СтруктураПараметров.Вставить("СписокТеговОтбор", Объект.СписокТеговОтбор);
	СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога", Ложь);
	СтруктураПараметров.Вставить("Брейкпоинты", Брейкпоинты);
	СтруктураПараметров.Вставить("МассивИменКонтекстовОбработок", МассивИменКонтекстовОбработок);
	СтруктураПараметров.Вставить("РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов", 
		Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов);
	глСтруктураПараметров = СтруктураПараметров;

	ДанныеФайлов = Новый Соответствие;
	
	ПомещаемыеФайлы = Новый Массив;
	Для Каждого Данные Из ДанныеДляПолученияСнипетов Цикл
		ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(Данные.ИмяФайла);
		ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
		
		ДанныеФайлов.Вставить(Данные.ИмяФайла, Новый Структура("Имя,ИмяФайла,ВерсияФайла", Данные.Имя, Данные.ИмяФайла, Данные.ВерсияФайла));
	КонецЦикла;	 
	
	Если ПомещаемыеФайлы.Количество() = 0 Тогда
		ОткрытьФормуИзвестногоШага(АктивизироватьСтрокуШага);
		Возврат;
	КонецЕсли;	 
	
	ПараметрыЗавершения = Новый Структура;	
	ПараметрыЗавершения.Вставить("ДанныеФайлов", ДанныеФайлов);
	ПараметрыЗавершения.Вставить("АктивизироватьСтрокуШага", АктивизироватьСтрокуШага);
	НачатьПомещениеФайлов(Новый ОписаниеОповещения("ОбработчикОткрытьФормуИзвестныхШаговПодключитьОбработки", ЭтаФорма, ПараметрыЗавершения),
		ПомещаемыеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор);
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФормуИзвестныхШаговПодключитьОбработки(АктивизироватьСтрокуШага)
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("АктивизироватьСтрокуШага", АктивизироватьСтрокуШага);
	
	Если Объект.ВерсияПоставки = "single" Тогда
		МассивИменФайловКоторыеСовпалиСКеш = Новый Соответствие;
		СтруктураПараметров = Новый Структура;
		
		ПодключитьОбработкиSingle(СтруктураПараметров,
		    МассивИменФайловКоторыеСовпалиСКеш, МассивИменКонтекстовОбработок, ТаблицаКонтекстовОбработок, "");
	ИначеЕсли ЗапрещеныСинхронныеВызовы И НЕ ВозможнаОптимизацияРаботыСФайлами Тогда
		
		МассивДействий = Новый Массив;
		ДобавитьМассивСостоянийФайлов(МассивДействий);
		ДобавитьСканированиеКаталогов(МассивДействий);
		
		ДопПараметры.Вставить("ТекИдМассива", 0);
		ДопПараметры.Вставить("МассивДействий", МассивДействий);
		ДопПараметры.Вставить("НадоЗагрузитьФичи", Ложь);
		ДопПараметры.Вставить("НадоГенерироватьEPF", Ложь);
		ДопПараметры.Вставить("ОткрытьФормуИзвестныхШагов", Истина);
		ПолучитьАсинронноСостоянияОбъектовФайловойСистемы(ДопПараметры);
		Возврат;
	КонецЕсли;	 
	
	ОткрытьФормуИзвестныхШаговПодключитьОбработкиПродолжение(ДопПараметры);
	
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьПутьК_EPF_Фичи(ИмяФайлаФичи)
	ФайлФичи = Новый Файл(ИмяФайлаФичи);
	Возврат ФайлФичи.Путь + "step_definitions" + ?(ЭтоLinux, "/", "\") + ФайлФичи.ИмяБезРасширения + ".epf";
КонецФункции	 

&НаКлиенте
Процедура ВыполнитьПроцедуруШагПродолжение(ОбработкаТеста, ТекШаг)
	ОбработкаТеста.Контекст            = ОбъектКонтекст;
	ОбработкаТеста.КонтекстСохраняемый = ОбъектКонтекстСохраняемый;
	
	СписокАргументов = ТекШаг.ЗначенияПараметров;
	МассивПараметров = ПолучитьМассивПараметровИзСписокАргументов(СписокАргументов, ТекШаг);

	ИмяПроцедуры = ТекШаг.ИмяПроцедуры;
	ВызватьМетод(ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
КонецПроцедуры 

&НаКлиенте
Функция СтрокаПробелов()
	Результат = Новый Соответствие;
	Стр = "";
	Для Счетчик = 1 По 120 Цикл
		Стр = Стр + " ";
		Результат.Вставить(Счетчик, Стр);
	КонецЦикла;	
	
	Возврат Результат; 
КонецФункции	 

&НаКлиенте
Функция ТекущийШагЭтоШагКонтекста()
	СостояниеVA = ПолучитьСостояниеVanessaAutomation();
	
	Если СостояниеVA.ТекущийШаг.Свойство("ЭтоШагКонтекста") И СостояниеVA.ТекущийШаг.ЭтоШагКонтекста Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция НужноЭмулироватьДействияМышки()
	Если (Объект.ИспользоватьSikuliXСервер И Объект.ЗаписьВидеоЭмулироватьДвиженияМышкиSikuliX)
		ИЛИ ЭмуляцияДвиженияМышкиКомпонентаВБраузере() ИЛИ ЭмуляцияДвиженияМышкиКомпонентаUIAutomation()
		Тогда
			//возможно стоит эмулировать действия мышки
		Иначе
			Возврат Ложь;
	КонецЕсли;	
	
	Если ВТекущемШагеЕстьКомментарий("#[DoNotMoveMouse]") Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если ТекущийШагЭтоШагКонтекста() Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	 

&НаКлиенте
Функция ТекстДляГенерацииКартинкиПоКнопке(Текст)
	Если Текст = "Создать" Тогда
		Возврат "Создать   ";
	ИначеЕсли Текст = "Записать" Тогда
		Возврат "Записать   ";
	КонецЕсли;	 
	
	Возврат Текст;
КонецФункции	 

&НаКлиенте
Процедура ПереместитьКурсорМышкиПоСгенерированнойКартинке(Текст, ИмяПрофиля)
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеПрофиля = ДанныеПрофиляПоискаКартинкиСТекстом(ИмяПрофиля);
	ФайлКартинки = ПолучитьФайлКартинкиИзТекста(Текст, ДанныеПрофиля);
	Рез = ПереместитьКурсорМышкиККартинке(ФайлКартинки.ПолноеИмя);
	Если Рез <> 0 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не получилось переместить курсор мышки к картинке <%1>."),
			ФайлКартинки.ПолноеИмя
		);
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура КликЛевойКнопкойМышкиПоСгенерированнойКартинке(Текст, ИмяПрофиля)
	Если НЕ НужноЭмулироватьДействияМышки() Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеПрофиля = ДанныеПрофиляПоискаКартинкиСТекстом(ИмяПрофиля);
	ФайлКартинки = ПолучитьФайлКартинкиИзТекста(Текст, ДанныеПрофиля);
	Рез = КликЛевойКнопкойМышкиПоКартинке(ФайлКартинки.ПолноеИмя);
	Если Рез <> 0 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не получилось переместить курсор мышки к картинке <%1>."),
			ФайлКартинки.ПолноеИмя
		);
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Функция ВТекущемШагеЕстьКомментарий(Тег)
	СостояниеVA = ПолучитьСостояниеVanessaAutomation();
	
	МассивКомментариевШага = СостояниеVA.ТекущийШаг.МассивКомментариевШага;
	Если МассивКомментариевШага = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	ЕстьТег = ВМассивеЕстьСтрока(МассивКомментариевШага, Тег);
	Если ЕстьТег Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция ВМассивеЕстьСтрока(МассивТегов, Тег)
	Для Каждого Элем Из МассивТегов Цикл
		Если НРег(Элем) = НРег(Тег) Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции	 

&НаСервере
Процедура ЗаполнитьТиповыеПрофилиЦветовСервер()
	ПрофилиЦветовСервер = РеквизитФормыВЗначение("ПрофилиПоискаКартинокСТекстом");
	
	СтрокаCommandInterface = ПрофилиЦветовСервер.Найти("CommandInterface", "Имя");
	Если СтрокаCommandInterface = Неопределено Тогда
		СтрокаCommandInterface = ПрофилиЦветовСервер.Добавить();
		СтрокаCommandInterface.Имя = "CommandInterface";
		СтрокаCommandInterface.Шрифт = "arial";
		СтрокаCommandInterface.ЦветФона = "#FBED9E";
		СтрокаCommandInterface.ЦветШрифта = "black";
		СтрокаCommandInterface.Размер = 13;
	КонецЕсли;	 
	
	СтрокаMainForm = ПрофилиЦветовСервер.Найти("MainForm", "Имя");
	Если СтрокаMainForm = Неопределено Тогда
		СтрокаMainForm = ПрофилиЦветовСервер.Добавить();
		СтрокаMainForm.Имя = "MainForm";
		СтрокаMainForm.Шрифт = "arial";
		СтрокаMainForm.ЦветФона = "white";
		СтрокаMainForm.ЦветШрифта = "black";
		СтрокаMainForm.Размер = 13;
	КонецЕсли;	 
	
	ЗначениеВРеквизитФормы(ПрофилиЦветовСервер, "ПрофилиПоискаКартинокСТекстом");
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФормуИзвестныхШагов(АктивизироватьСтрокуШага)
	
	ДобавитьСтандартнуюБиблиотекуЕслиНеобходимо();
	
	Если ДеревоБудетПерезагружено("ОткрытьФормуИзвестныхШаговОбработчикОжидания") Тогда
		Возврат;
	КонецЕсли;	
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если ВозможенЗапускСценариевИзТекущейВкладки() Тогда
			МодульРедакторТекста().АктивизироватьСтрокуДереваСоответствующуюVanessaEditor();
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ТаблицаИзвестныхStepDefinition.Количество() = 0 Тогда
		ОткрытьФормуИзвестныхШаговПодключитьОбработки(АктивизироватьСтрокуШага);
	Иначе	
		ОткрытьФормуИзвестногоШага(АктивизироватьСтрокуШага);
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Функция ДанныеОСетевыхСоединениях()
	#Если НЕ ВебКлиент Тогда
	
	Данные = Неопределено;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	Если ЭтоLinux Тогда
		
		ВыполнитьКомандуОС("netstat -np > """ + ИмяВременногоФайла + """");
		
	Иначе
		
		ВыполнитьКомандуОСБезПоказаЧерногоОкна("netstat -no > """ + ИмяВременногоФайла + """");
		
	КонецЕсли;
		
	Попытка
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяВременногоФайла);
		Данные = Текст.Прочитать();
		Текст.Закрыть();
		
	Исключение
		Данные = Неопределено;
	КонецПопытки;
	
	Возврат Данные;
	
	#КонецЕсли
КонецФункции	 

&НаКлиенте
Функция ДанныеОПроцессахОС()
	
	Данные = "";
	
#Если НЕ ВебКлиент Тогда
	
	Если ЭтоLinux Тогда
		
		Данные = ДанныеОПроцессахОСLinux();
		
	Иначе
		
		Данные = ДанныеОПроцессахОСWindows();
		
	КонецЕсли;
	
#КонецЕсли

	Возврат Данные;

КонецФункции

&НаКлиенте
Функция ДанныеОПроцессахОСWindows()
	
	#Если НЕ ВебКлиент Тогда
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ВыполнитьКомандуОСБезПоказаЧерногоОкна("tasklist > """ + ИмяВременногоФайла + """");
	
	Попытка
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяВременногоФайла);
		Данные = Текст.Прочитать();
		Текст.Закрыть();
		
	Исключение
		
		Возврат "";
		
	КонецПопытки;
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(СокрЛП(Данные), Символы.ПС);
	Результат = Новый Массив;
	Если МассивСтрок.Количество() > 2 Тогда
		Результат.Добавить(МассивСтрок[0]);
		Результат.Добавить(МассивСтрок[1]);
	КонецЕсли;	 
	
	Спс = Новый СписокЗначений;
	Для Сч = 2 По МассивСтрок.Количество() - 1 Цикл
		Спс.Добавить(МассивСтрок[Сч]);
	КонецЦикла;	
	
	Спс.СортироватьПоЗначению();
	Для Каждого Элем Из Спс Цикл
		Результат.Добавить(Элем.Значение);
	КонецЦикла;	 
	
	Возврат МассивВСтроку(Результат);
	
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Функция ДанныеОПроцессахОСLinux()
	
	#Если НЕ ВебКлиент Тогда
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ВыполнитьКомандуОС("ps -Ao comm:50,pid:8,user:20,ppid:8,pmem:4,pcpu:4,cmd --sort +comm > """ + ИмяВременногоФайла + """");
	
	Попытка
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяВременногоФайла);
		Данные = Текст.Прочитать();
		Текст.Закрыть();
		
	Исключение
		
		Возврат "";
		
	КонецПопытки;
	
	Возврат	Данные;
	
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Функция ТабличныйДокументДляДанныхОЗначенияхПеременных()
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Область(1, 1, 1, 1).Текст = Локализовать("Имя переменной");
	ТабДок.Область(1, 1, 1, 1).ШиринаКолонки = 40;
	ТабДок.Область(1, 2, 1, 2).Текст = Локализовать("Значение");
	ТабДок.Область(1, 2, 1, 2).ШиринаКолонки = 50;
	ТабДок.Область(1, 3, 1, 3).Текст = Локализовать("Тип");
	ТабДок.Область(1, 3, 1, 3).ШиринаКолонки = 50;

	Шрифт = Новый Шрифт(, 12);
	ТабДок.Область(1, , 1, ).Шрифт = Шрифт;
	
	Возврат ТабДок;
КонецФункции

&НаКлиенте
Функция ДанныеОЗначенияхПеременныхВВидеМакета()
	ТабДок = ТабличныйДокументДляДанныхОЗначенияхПеременных();
	Шрифт = Новый Шрифт(, 11);
	
	НомерСтроки = 2;
	НомерСтроки = НомерСтроки + 1;
	ТабДок.Область(НомерСтроки, 1, НомерСтроки, 1).Текст = "Контекст";
	ТабДок.Область(НомерСтроки, 1, НомерСтроки, 1).Шрифт = Шрифт;
	
	ВывестиЗначенияПеременныхВМакет(НомерСтроки, ТабДок, ОбъектКонтекст);
	
	НомерСтроки = НомерСтроки + 1;
	НомерСтроки = НомерСтроки + 1;
	
	ТабДок.Область(НомерСтроки, 1, НомерСтроки, 1).Текст = "Контекст глобальный";
	ТабДок.Область(НомерСтроки, 1, НомерСтроки, 1).Шрифт = Шрифт;
	
	ВывестиЗначенияПеременныхВМакет(НомерСтроки, ТабДок, ОбъектКонтекстСохраняемый);
	
	ТабДок.ФиксацияСверху = 1;
	Возврат ТабДок;
КонецФункции

&НаКлиенте
Процедура ВывестиЗначенияПеременныхВМакет(НомерСтроки, ТабДок, КоллекцияПеременных)
	
	Шрифт10 = Новый Шрифт(, 10);
	
	Для Каждого Элем Из КоллекцияПеременных Цикл
		Если Найти(Элем.Ключ, "_Цикл_") > 0 Тогда
			Продолжить;
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
		
		ТабДок.Область(НомерСтроки, 1, НомерСтроки, 1).Текст = Элем.Ключ;
		ТабДок.Область(НомерСтроки, 1, НомерСтроки, 1).Шрифт = Шрифт10;
		ТабДок.Область(НомерСтроки, 2, НомерСтроки, 2).Текст = Элем.Значение;
		ТабДок.Область(НомерСтроки, 2, НомерСтроки, 2).Шрифт = Шрифт10;
		ТабДок.Область(НомерСтроки, 3, НомерСтроки, 3).Текст = ТипЗнч(Элем.Значение);
		ТабДок.Область(НомерСтроки, 2, НомерСтроки, 3).Шрифт = Шрифт10;
		
		Если ТипЗнч(Элем.Значение) = Тип("Структура") Тогда
			Для Каждого ЭлементСтруктуры Из Элем.Значение Цикл
				НомерСтроки = НомерСтроки + 1;
				ТабДок.Область(НомерСтроки, 1, НомерСтроки, 1).Текст = ЭлементСтруктуры.Ключ;
				ТабДок.Область(НомерСтроки, 2, НомерСтроки, 2).Текст = ЭлементСтруктуры.Значение;
				ТабДок.Область(НомерСтроки, 3, НомерСтроки, 3).Текст = ТипЗнч(ЭлементСтруктуры.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ТабличныйДокументДляСостоянияФормы()
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Область(1, 1, 1, 1).Текст = "Имя";
	ТабДок.Область(1, 1, 1, 1).ШиринаКолонки = 40;
	ТабДок.Область(1, 2, 1, 2).Текст = "Заголовок";
	ТабДок.Область(1, 2, 1, 2).ШиринаКолонки = 30;
	ТабДок.Область(1, 3, 1, 3).Текст = "Тип";
	ТабДок.Область(1, 3, 1, 3).ШиринаКолонки = 32;
	ТабДок.Область(1, 4, 1, 4).Текст = "Вид";
	ТабДок.Область(1, 4, 1, 4).ШиринаКолонки = 30;
	ТабДок.Область(1, 5, 1, 5).Текст = "ПредставлениеДанных";
	ТабДок.Область(1, 5, 1, 5).ШиринаКолонки = 30;
	ТабДок.Область(1, 6, 1, 6).Текст = "ОтображаемыйТекст";
	ТабДок.Область(1, 6, 1, 6).ШиринаКолонки = 30;
	
	ТабДок.Область(1, 1, 1, 6).Шрифт = Новый Шрифт(, 10, Истина);

	Возврат ТабДок;
КонецФункции	 

&НаКлиенте
Процедура ВывестиДанныеЭлементаформыВМакет(ЭлементОкна, ТабДок, НомерСтроки)
	// Имя
	Попытка
		Если ТипЗнч(ЭлементОкна) = Тип("ТестируемаяФорма") Тогда
			ТабДок.Область(НомерСтроки, 1, НомерСтроки, 1).Текст = ЭлементОкна.ИмяФормы;
		Иначе	
			ТабДок.Область(НомерСтроки, 1, НомерСтроки, 1).Текст = ЭлементОкна.Имя;
		КонецЕсли;	 
	Исключение
	КонецПопытки;
	
	// Синоним
	Попытка
		ТабДок.Область(НомерСтроки, 2, НомерСтроки, 2).Текст = ЭлементОкна.ТекстЗаголовка;
	Исключение
	КонецПопытки;
	
	// Тип
	Попытка
		ТабДок.Область(НомерСтроки, 3, НомерСтроки, 3).Текст = Строка(ТипЗнч(ЭлементОкна));
	Исключение
	КонецПопытки;
	
	// Вид
	Попытка
		ТабДок.Область(НомерСтроки, 4, НомерСтроки, 4).Текст = ЭлементОкна.Вид;
	Исключение
	КонецПопытки;
	
	// ПредставлениеДанных
	Попытка
		Если ТипЗнч(ЭлементОкна) = Тип("ТестируемоеПолеФормы") Тогда
			Если Найти(ЭлементОкна.Имя, "УсловноеОформление") = 0 Тогда
				ТабДок.Область(НомерСтроки, 5, НомерСтроки, 5).Текст = ЭлементОкна.ПолучитьПредставлениеДанных();
			КонецЕсли;	 
		КонецЕсли;	 
	Исключение
	КонецПопытки;
	
	
	Если ТипЗнч(ЭлементОкна) = Тип("ТестируемаяТаблицаФормы") Тогда
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			СтрокиТаблицы = ПолучитьЗначениеТестируемаяТаблицаФормы(ЭлементОкна, ДопПараметры);
		Исключение
			СтрокиТаблицы = Неопределено;
		КонецПопытки;
		
		Если СтрокиТаблицы <> Неопределено И СтрокиТаблицы.Количество() > 0 Тогда
			НомерСтроки = НомерСтроки + 2;
			
			//Шапка таблицы
			СписокКлючей = Новый СписокЗначений;
			Для Каждого Элем Из СтрокиТаблицы[0] Цикл
				СписокКлючей.Добавить(Элем.Ключ);
			КонецЦикла;	 
			СписокКлючей.СортироватьПоЗначению();
			
			ИменаКолонок = Новый Массив;
			Ном = 0;
			Для Каждого Элем Из СписокКлючей Цикл
				Ном = Ном + 1;
				ИменаКолонок.Добавить(Элем.Значение);
				ТабДок.Область(НомерСтроки, Ном, НомерСтроки, Ном).Текст = Элем.Значение;
			КонецЦикла;	 
			
			//Строки таблицы
			Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				НомерСтроки = НомерСтроки + 1;
				Ном = 0;
				Для Каждого Элем Из ИменаКолонок Цикл
					Ном = Ном + 1;
					ТабДок.Область(НомерСтроки, Ном, НомерСтроки, Ном).Текст = СтрокаТаблицы[Элем];
				КонецЦикла;	 
			КонецЦикла;	 
			
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;	 
	КонецЕсли;	 
	
	// ОтображаемыйТекст
	Попытка
		ТабДок.Область(НомерСтроки, 6, НомерСтроки, 6).Текст = ЭлементОкна.ПолучитьОтображаемыйТекст();
	Исключение
	КонецПопытки;
КонецПроцедуры 

// получает состояние всех форм в виде макета
&НаКлиенте
Функция СостояниеВсехФормВВидеМакета()
	Если НЕ ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Попытка
		АктивныеОкна = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если АктивныеОкна = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ТабДок = ТабличныйДокументДляСостоянияФормы();
	
	НомерСтроки = 1;
	
	Для Каждого АктивноеОкно Из АктивныеОкна Цикл
		НомерСтроки = НомерСтроки + 1;
		
		ТабДок.Область(НомерСтроки, 2, НомерСтроки, 2).Текст = АктивноеОкно.Заголовок;
		ТабДок.Область(НомерСтроки, 2, НомерСтроки, 2).Шрифт = Новый Шрифт(, 12);
		ТабДок.Область(НомерСтроки, 3, НомерСтроки, 3).Текст = Строка(ТипЗнч(АктивноеОкно));
		
		НомерСтроки = НомерСтроки + 1;
		ТабДок.Область(НомерСтроки, 2, НомерСтроки, 2).Текст = "Окно сообщений";
		
		Попытка
			ТекстОкноСообщений = МассивВСтроку(АктивноеОкно.ПолучитьТекстыСообщенийПользователю());
		Исключение
			ТекстОкноСообщений = Локализовать("Окно сообщений пустое.");
		КонецПопытки;
		ТабДок.Область(НомерСтроки, 5, НомерСтроки, 5).Текст = ТекстОкноСообщений;

		ЭлементыОкна = АктивноеОкно.НайтиОбъекты();
		ЭлементыОкна = СортироватьЭлементыОкнаПоИмени(ЭлементыОкна);
		Для Каждого ЭлементОкна Из ЭлементыОкна Цикл
			НомерСтроки = НомерСтроки + 1;
			ВывестиДанныеЭлементаформыВМакет(ЭлементОкна, ТабДок, НомерСтроки);
		КонецЦикла;	 
		
		// чтобы раздедить окна
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;	 
	
	ТабДок.ФиксацияСверху = 1;
	Возврат ТабДок;
КонецФункции	 

&НаКлиенте
Функция СортироватьЭлементыОкнаПоИмени(ЭлементыОкна)
	Спс = Новый СписокЗначений;
	Для Каждого ЭлементОкна Из ЭлементыОкна Цикл
		Если ТипЗнч(ЭлементОкна) = Тип("ТестируемаяФорма") Тогда
			Спс.Добавить(ЭлементОкна,ЭлементОкна.ИмяФормы);
		Иначе	
			Спс.Добавить(ЭлементОкна,ЭлементОкна.Имя);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Спс.СортироватьПоПредставлению();
	Возврат Спс.ВыгрузитьЗначения();
КонецФункции	 

// получает данные активной формы в виде макета
&НаКлиенте
Функция СостояниеФормыВВидеМакета()
	Если НЕ ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Попытка
		АктивноеОкно = ОбъектКонтекстСохраняемый.ТестовоеПриложение.ПолучитьАктивноеОкно();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если АктивноеОкно = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ТабДок = ТабличныйДокументДляСостоянияФормы();	
	
	НомерСтроки = 1;
	
	НомерСтроки = НомерСтроки + 1;
	ТабДок.Область(НомерСтроки, 2, НомерСтроки, 2).Текст = АктивноеОкно.Заголовок;
	ТабДок.Область(НомерСтроки, 2, НомерСтроки, 2).Шрифт = Новый Шрифт(, 12);
	ТабДок.Область(НомерСтроки, 3, НомерСтроки, 3).Текст = Строка(ТипЗнч(АктивноеОкно));
	
	НомерСтроки = НомерСтроки + 1;
	ТабДок.Область(НомерСтроки, 2, НомерСтроки, 2).Текст = "Окно сообщений";
	
	Попытка
		ТекстОкноСообщений = МассивВСтроку(АктивноеОкно.ПолучитьТекстыСообщенийПользователю());
	Исключение
		ТекстОкноСообщений = Локализовать("Окно сообщений пустое.");
	КонецПопытки;
	ТабДок.Область(НомерСтроки, 5, НомерСтроки, 5).Текст = ТекстОкноСообщений;
	
	ЭлементыОкна = АктивноеОкно.НайтиОбъекты();
	ЭлементыОкна = СортироватьЭлементыОкнаПоИмени(ЭлементыОкна);
	Для Каждого ЭлементОкна Из ЭлементыОкна Цикл
		НомерСтроки = НомерСтроки + 1;
		ВывестиДанныеЭлементаформыВМакет(ЭлементОкна, ТабДок, НомерСтроки);
	КонецЦикла;	 
	
	ТабДок.ФиксацияСверху = 1;
	Возврат ТабДок;
КонецФункции	 

// Позволяет сделать поиск в строке "ПроверяемаяСтрока" подстроки "Шаблон"
// при этом подстрока "Шаблон" может содержать символы *
// например СтрокаСоответствуетШаблону("Привет","*вет")
&НаСервереБезКонтекста
Функция СтрокаСоответствуетШаблонуСервер(Знач ПроверяемаяСтрока, Знач Шаблон) Экспорт
	Если ПроверяемаяСтрока = Шаблон Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Если ЭтоLinux() Тогда
		Шаблон = ПодготовитьШаблонКИспользованиюВРегулярке(Шаблон, Истина);
		Возврат ПроверитьСтрокуRegExpLinux(ПроверяемаяСтрока, Шаблон);
	Иначе	
		Шаблон = ПодготовитьШаблонКИспользованиюВРегулярке(Шаблон, Ложь);
		Регулярка = Новый COMОбъект("VBScript.RegExp");
		Регулярка.Global = Истина;
		Регулярка.Multiline = Истина;
		// для VBScript.RegExp явно указываем что есть начало и конец строки
		Шаблон            = "^" + Шаблон + "$";
		Регулярка.Pattern = Шаблон;
		Результат = Регулярка.Test(ПроверяемаяСтрока);
		Регулярка = Неопределено;
		Возврат Результат;
	КонецЕсли;	 
КонецФункции 

&НаСервереБезКонтекста
Функция ПоискВхожденияСтроки(ТЗБыло, СтрокаТЗБыло, Построитель, ИдКолонкиПропуск)
	ИдКолонки = -1;
	Для каждого Колонка Из ТЗБыло.Колонки Цикл
		ИдКолонки = ИдКолонки + 1;
		Если ИдКолонки = ИдКолонкиПропуск Тогда
			Продолжить;
		КонецЕсли;	 
		
		ЗначениеПоиска = СтрокаТЗБыло[Колонка.Имя];
		Если ЗначениеПоиска = Неопределено ИЛИ СокрЛП(ЗначениеПоиска) = "*" Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеПоиска = СтрЗаменить(ЗначениеПоиска, "\n", Символы.ПС);
		
		тОтбор = Построитель.Отбор.Добавить(Колонка.Имя);
		тОтбор.Использование = Истина;
		Если Сред(ЗначениеПоиска, СтрДлина(ЗначениеПоиска), 1) = "*" Тогда
			тОтбор.Значение     = Сред(ЗначениеПоиска, 1, СтрДлина(ЗначениеПоиска) - 1);
			тОтбор.ВидСравнения = ВидСравнения.Содержит;
		Иначе
			тОтбор.Значение     = ЗначениеПоиска;
			тОтбор.ВидСравнения = ВидСравнения.Равно;
		КонецЕсли;
	КонецЦикла;
	
	Построитель.Выполнить();
	ТабРезультат = Построитель.Результат.Выгрузить();		
	
	Возврат ТабРезультат;
КонецФункции	 

&НаСервереБезКонтекста
Функция ПоискВхожденияСтрокиПоШаблону(Знач ЗначениеТЧ, Знач ЗначениеСтроки)
	Для Каждого СтрокаЗначениеТЧ Из ЗначениеТЧ Цикл
		СтрокаСовпала = Истина;
		Для Каждого Элем Из ЗначениеСтроки Цикл
			ЗначениеИскомойСтроки  = СтрЗаменить(Элем.Значение, "\n", Символы.ПС);
			ЗначениеВСтрокеТаблицы = СтрокаЗначениеТЧ[Элем.Ключ];
			Если НЕ СтрокаСоответствуетШаблонуСервер(ЗначениеВСтрокеТаблицы, ЗначениеИскомойСтроки) Тогда
				СтрокаСовпала = Ложь;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	 
		
		Если СтрокаСовпала Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Возврат Ложь;
КонецФункции	 

&НаСервереБезКонтекста
Процедура УбратьИзИмениКолонокСпецСимволы(Массив)
	Для Ккк = 0 По Массив.Количество() - 1 Цикл
		Если Лев(Массив[Ккк], 1) = "_" Тогда
			Массив[Ккк] = Сред(Массив[Ккк], 2);
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьМассивКолонокКоторыеЕстьТолькоВБыло(ТЗБыло, ТЗСтало)
	Массив = Новый Массив;
	
	Для Каждого Колонка Из ТЗБыло.Колонки Цикл
		Если ТЗСтало.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Массив.Добавить(Колонка.Имя);
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Массив;
КонецФункции	

&НаСервереБезКонтекста
Функция УбратьВсеЗапрещенныеСимволы(Знач Стр)
	
	Стр = СтрЗаменить(Стр, """", "");
	Стр = СтрЗаменить(Стр, Символы.ПС, "");
	Стр = СтрЗаменить(Стр, Символы.ВК, "");
	ЗапрещенныеСимволы = " <>.,\/|':;!№%?*()@#$%^&*+-`~↓↑«»";
	
	Для НомерСимвола = 1 По СтрДлина(ЗапрещенныеСимволы) Цикл
		ЗапрещенныйСимвол = Сред(ЗапрещенныеСимволы, НомерСимвола, 1);
		Стр = СтрЗаменить(Стр, ЗапрещенныйСимвол, "_");
	КонецЦикла;
	
	Если Стр = "" Тогда
		Стр = "_";
	КонецЕсли;	 
	
	// Чтобы экранировать служебные слова построителя запросов, т.к. колонки таблицы могут назвать с их использованием
	Стр = "_" + Стр;
	
	Возврат Стр;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТЗПроверяемыхДанных(ТабПарам, ДопПараметры)

	СтрокаШапки = ТабПарам[0];
	
	ТЗБыло = Новый ТаблицаЗначений;
	Для каждого Колонка Из СтрокаШапки Цикл
		ИмяКолонкиСтарое = УбратьВсеЗапрещенныеСимволы(СтрокаШапки[Колонка.Ключ]);
		
		Попытка
			ТЗБыло.Колонки.Добавить(ИмяКолонкиСтарое, Новый ОписаниеТипов("Строка"));
		Исключение
			ТекстСообщения = ТекстСообщенияПользователюВызовСервера("В эталонной таблице существуют две колонки с одинаковым заголовком: %1", 
				ДопПараметры.ТекстСообщенийПользователю);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаШапки[Колонка.Ключ]);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЦикла;
	
	Для СтрокаБыло = 1 По ТабПарам.Количество() - 1 Цикл // в первой строке шапка
		СтрокаТЗБыло = ТЗБыло.Добавить();
		Для каждого Колонка Из СтрокаШапки Цикл
			ИмяКолонкиСтарое = УбратьВсеЗапрещенныеСимволы(СтрокаШапки[Колонка.Ключ]);
			ЗначениеБыло = Неопределено;
			ТабПарам[СтрокаБыло].Свойство(Колонка.Ключ, ЗначениеБыло);
			СтрокаТЗБыло[ИмяКолонкиСтарое] = ЗначениеБыло;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТЗБыло;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТЗТекущихДанных(ЗначениеТЧ, ДопПараметры)
	
	ТЗСтало = Новый ТаблицаЗначений;
	
	Если ТЗСтало = Неопределено Тогда
		ВызватьИсключение ТекстСообщенияПользователюВызовСервера("Не вышло получить строки таблицы.", ДопПараметры.ТекстСообщенийПользователю);
	КонецЕсли;	 
	
	// создаем колонки
	Для каждого Колонка Из ЗначениеТЧ[0] Цикл
		Попытка
			ТЗСтало.Колонки.Добавить(УбратьВсеЗапрещенныеСимволы(Колонка.Ключ), Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
		Исключение
			ТекстСообщения = ТекстСообщенияПользователюВызовСервера("В результирующей таблице существуют две колонки с одинаковым заголовком: %1", 
				ДопПараметры.ТекстСообщенийПользователю);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Колонка.Ключ);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЦикла;
	
	// создаем строки
	Для каждого СтрокаКолонки Из ЗначениеТЧ Цикл
		СтрокаТЗСтало = ТЗСтало.Добавить();
		Для каждого Колонка Из СтрокаКолонки Цикл
			СтрокаТЗСтало[УбратьВсеЗапрещенныеСимволы(Колонка.Ключ)] = Колонка.Значение;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТЗСтало;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроизвестиСравнениеТаблицНаВхождениеСтрокНаСервере(ИмяТаблицы, ТабПарам, ЗначениеТЧ, МассивОшибок, ДопПараметры)
	Отказ = Ложь;
	
	ПоШаблону = Ложь;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ПоШаблону") Тогда
		ПоШаблону = ДопПараметры.ПоШаблону;
	КонецЕсли;
	
	ПроверятьВхождение = Истина;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ПроверятьВхождение") Тогда
		ПроверятьВхождение = ДопПараметры.ПроверятьВхождение;
	КонецЕсли;
	
	ТолькоСтрокиИзЭталона = Ложь;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ТолькоСтрокиИзЭталона") Тогда
		ТолькоСтрокиИзЭталона = ДопПараметры.ТолькоСтрокиИзЭталона;
	КонецЕсли;
	
	// преобразовать в Таблицу Значений
	ТЗБыло  = ПолучитьТЗПроверяемыхДанных(ТабПарам, ДопПараметры);
	ТЗСтало = ПолучитьТЗТекущихДанных(ЗначениеТЧ, ДопПараметры);
	
	МассивКолонокКоторыеЕстьТолькоВБыло = ПолучитьМассивКолонокКоторыеЕстьТолькоВБыло(ТЗБыло, ТЗСтало);
	Если МассивКолонокКоторыеЕстьТолькоВБыло.Количество() > 0 Тогда
		Стр = "В таблице <" + ИмяТаблицы + "> нет колонок: ";
		УбратьИзИмениКолонокСпецСимволы(МассивКолонокКоторыеЕстьТолькоВБыло);
		Для Каждого Элем Из МассивКолонокКоторыеЕстьТолькоВБыло Цикл
			Стр = Стр + Элем + ", ";
		КонецЦикла;
		
		Стр = Лев(Стр, СтрДлина(Стр) - 2);
		ВызватьИсключение Стр;
	КонецЕсли;	 
	
	// начинаем сравнение	
	Для НомерСтроки = 0 По ТЗБыло.Количество() - 1 Цикл
		СтрокаТЗБыло = ТЗБыло[НомерСтроки];
		Построитель = Новый ПостроительЗапроса;
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗСтало);
		Если ПоШаблону Тогда
			Сч = 0;
			ЗначениеСтроки = Новый Соответствие;
			Для Каждого Элем Из ТабПарам[0] Цикл
				Сч = Сч + 1;
				ИдКолонки = Элем.Ключ;
				ИмяКолонки = Элем.Значение;
				ЗначениеКолонки = ТабПарам[НомерСтроки + 1][ИдКолонки];
				ЗначениеСтроки.Вставить(ИмяКолонки, ЗначениеКолонки);
			КонецЦикла;	 
			Результат = ПоискВхожденияСтрокиПоШаблону(ЗначениеТЧ, ЗначениеСтроки);
			
			Если (НЕ Результат И ПроверятьВхождение) ИЛИ (Результат И НЕ ПроверятьВхождение) Тогда
				Стр = "";
				Для Каждого Элем Из ЗначениеСтроки Цикл
					Стр = Стр + "| ' " + Элем.Значение + "' ";
				КонецЦикла;	 
				Стр = Стр + "|";
				
				МассивОшибок.Добавить(Стр);
				Отказ = Истина;
			КонецЕсли;	 
		Иначе	
			ТабРезультат = ПоискВхожденияСтроки(ТЗБыло, СтрокаТЗБыло, Построитель, Неопределено);
			Если ТабРезультат.Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Стр = "|";
			Для каждого Колонка Из ТЗБыло.Колонки Цикл
				Стр = Стр + " '" + СтрокаТЗБыло[Колонка.Имя] + "' |";
			КонецЦикла;	
				
			ИдКолонки = -1;
			ТекстСообщения = "";
			КоличествоРешений = 0;
			Если ТЗБыло.Колонки.Количество() > 0 Тогда
				Для каждого Колонка Из ТЗБыло.Колонки Цикл
					ИдКолонки = ИдКолонки + 1;
					Построитель = Новый ПостроительЗапроса;
					Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗСтало);
					ТабРезультат = ПоискВхожденияСтроки(ТЗБыло, СтрокаТЗБыло, Построитель, ИдКолонки);
					
					Если ТабРезультат.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					// значит нашли проблемную колонку
					Попытка
						ИмяКолонки      = ТабПарам[0]["Кол" + Формат((ИдКолонки + 1), "ЧГ=; ЧН=0")];
						ЗначениеКолонки = СтрокаТЗБыло[Колонка.Имя];
						ЗначениеКолонки = СтрЗаменить(ЗначениеКолонки, Символы.ПС, "\n");
					Исключение
						// не получилось получить имя колонки
						Прервать;
					КонецПопытки;
						
					ТекстСообщения = ТекстСообщенияПользователюВызовСервера("Не найдено значение <%1> из колонки <%2>.", ДопПараметры.ТекстСообщенийПользователю);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ЗначениеКолонки); 
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ИмяКолонки); 
					КоличествоРешений = КоличествоРешений + 1;
					
				КонецЦикла;	
			КонецЕсли;	 
			
			Если ЗначениеЗаполнено(ТекстСообщения) И КоличествоРешений = 1 Тогда
				Стр = Стр + Символы.ПС + ТекстСообщения;
			КонецЕсли;	 
			
			МассивОшибок.Добавить(Стр);
			Отказ = Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Отказ;
	КонецЕсли;
	
	Если ТолькоСтрокиИзЭталона Тогда
		Сч = 0;
		КолСтрокБыло = ТабПарам.Количество() - 1;
		ПерваяСтрокаБыло = ТабПарам[0];
		Для Каждого СтрСтало Из ЗначениеТЧ Цикл
			СтрокаСовпала = Ложь;
			Сч = Сч + 1;
			
			Для Ном = 1 По КолСтрокБыло Цикл
				СтрБыло = ТабПарам[Ном]; 
				
				НомКол = 0;
				КолонкиСовпали = Истина;
				Для каждого ТекДанныеКолонки Из ПерваяСтрокаБыло Цикл
					НомКол = НомКол + 1;
					
					Попытка
						//Если ЧтениеИзТабличногоДокумента Тогда
							ЗнБыло = СтрБыло[ТекДанныеКолонки.Ключ];
						//Иначе	
						//	ЗнБыло = СтрБыло["Кол" + НомКол];
						//КонецЕсли;	 
					Исключение
						// Не совпало количество колонок
						КолонкиСовпали = Ложь;
						Прервать;
					КонецПопытки;
					
					ЗнСтало = СтрСтало[ТекДанныеКолонки.Значение];
					
					ЗнБыло  = СокрЛП(СтрЗаменить(ЗнБыло,Символы.НПП," "));
					ЗнСтало = СокрЛП(СтрЗаменить(ЗнСтало,Символы.НПП," "));
					
					ЗнБыло = СтрЗаменить(ЗнБыло,Символы.ПС,"\n");
					ЗнСтало = СтрЗаменить(ЗнСтало,Символы.ПС,"\n");
					
					Если ЗнСтало <> ЗнБыло Тогда
						Если ПоШаблону Тогда
							Если СтрокаСоответствуетШаблонуСервер(ЗнСтало, ЗнБыло) Тогда
								Продолжить;
							КонецЕсли;	 
						КонецЕсли;	 
						
						Если ЗнБыло <> "*" Тогда
							КолонкиСовпали = Ложь;
							Прервать;
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЦикла;
				
				Если КолонкиСовпали Тогда
					СтрокаСовпала = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ СтрокаСовпала Тогда
				
				БылаОшибка = Истина;
				
				ПроблемнаяСтрока = "|";
				Для каждого ТекДанныеКолонки Из ПерваяСтрокаБыло Цикл
					ЗнСтало = СтрСтало[ТекДанныеКолонки.Значение];
					ПроблемнаяСтрока = "'" + ПроблемнаяСтрока + ЗнСтало + "'|";
				КонецЦикла;	
				
				ТекстСообщения = ТекстСообщенияПользователюВызовСервера("Строка №%1 таблицы клиента тестирования не найдена в эталоне.", ДопПараметры.ТекстСообщенийПользователю);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Сч); 
				ТекстСообщения = ТекстСообщения + Символы.ПС + ПроблемнаяСтрока;
				МассивОшибок.Добавить(ТекстСообщения);
				Отказ = Истина;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	Возврат Отказ;
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьЗначениеКонстантыСервер(Знач ИмяКонстанты, Знач Значение)
	
	ТекЗначение = Константы[ИмяКонстанты].Получить();
	Если ТекЗначение <> Значение Тогда
		Константы[ИмяКонстанты].Установить(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТипаВидеоИнструкции()
	Если НЕ Объект.ЗаписьВидеоФормироватьИнструкциюТипВидео
	И    НЕ Объект.ЗаписьВидеоФормироватьИнструкциюТипHTML
	И    НЕ Объект.ЗаписьВидеоФормироватьИнструкциюТипMarkdown
	Тогда
		Объект.ЗаписьВидеоФормироватьИнструкциюТипВидео = Истина;
	КонецЕсли;	 
КонецПроцедуры 

// Функция - Получить строку вызова Sikuli
//
// Параметры:
//  ЗапускЧерезСкрипт	 - Булево	 - флаг способа запуска Sikuli-скриптов:
//									   Ложь	 - устаревший способ запуска для Windows,
//											   используется по умолчанию для совместимости
//									   Истина	 - запуск через скрипт runsikulix
// Возвращаемое значение:
//  Строка - строка для запуска Sikuli-скриптов
//
&НаКлиенте
Функция ПолучитьСтрокуВызоваSikuli(ЗапускЧерезСкрипт = Ложь)
	
	Если ЗапускЧерезСкрипт Тогда
		Если ЭтоLinux Тогда
			Возврат "runsikulix -r ";
		Иначе
			Возврат "call runsikulix -r ";
		КонецЕсли;
	Иначе
		Возврат """C:\Program Files (x86)\Java\jre6\bin\java.exe"" -Xms64M -Xmx512M -Dfile.encoding=UTF-8 -Dpython.path=""C:\Program Files (x86)\Sikuli X\sikuli-script.jar/"" -jar ""C:\Program Files (x86)\Sikuli X\sikuli-ide.jar"" -r ";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьWshShell() Экспорт

	Если WshShell = Неопределено Тогда
		Попытка
			WshShell = Новый COMОбъект("WScript.Shell");
		Исключение
			ВызватьИсключение Локализовать("Не удалось подключить COM объект <WScript.Shell>");
		КонецПопытки;
	КонецЕсли;
	
	Возврат WshShell;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СкопироватьСтруктуру(Знач Оригинал)
	Результат = Новый Структура;
	Для каждого Элем Из Оригинал Цикл
		Результат.Вставить(Элем.Ключ, Элем.Значение);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция СкопироватьСоответствие(Оригинал)
	Результат = Новый Соответствие;
	Для каждого Элем Из Оригинал Цикл
		Результат.Вставить(Элем.Ключ, Элем.Значение);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции	

&НаСервереБезКонтекста
Процедура ЗаписатьЛогВЖРПередВыполнениемШагаСервер(Знач ИмяШага)
	ЗаписьЖурналаРегистрации("VanessaAutomation.ПередВыполнениемШага", УровеньЖурналаРегистрации.Информация, , , ИмяШага);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьЛогВЖРОшибкаСервер(Знач ИмяСобытия, Знач Стр)
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , Стр);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьЛогВЖРИнформацияСервер(Знач ИмяСобытия, Знач Стр)
	ЗаписьЖурналаРегистрации("VanessaAutomation." + ИмяСобытия, УровеньЖурналаРегистрации.Информация, , , Стр);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЛогВТекстИнформация(Знач ИмяСобытия, Знач Стр)
	ТекстСообщения = Символы.Таб + Символы.Таб + ?(ЗначениеЗаполнено(ИмяСобытия), ИмяСобытия + ":", "") + Стр;
	ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(ТекстСообщения);
КонецПроцедуры

&НаКлиенте
Процедура ВывестиВЛогТаблицу(МассивСтрок)
	Для Каждого ТекстСообщения Из МассивСтрок Цикл
		ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(Символы.Таб + Символы.Таб + Символы.Таб + ТекстСообщения);
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Процедура ЗаписатьЛогВЖРПередВыполнениемШага(ИмяШага)
	ЗаписатьЛогВЖРПередВыполнениемШагаСервер(ИмяШага);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяФормыИзПоследнегоАктивногоОкна()
	Если ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") 
			И ОбъектКонтекст.Свойство("АктивноеОкно") 
			И ОбъектКонтекст.АктивноеОкно <> Неопределено Тогда
		Попытка
			АктивноеОкно = ОбъектКонтекст.АктивноеОкно;
			Если ЭтоЗаголовокОкнаМодальногоДиалога(АктивноеОкно.Заголовок) 
					И ОбъектКонтекст.Свойство("ПредыдущееАктивноеОкно") Тогда
				АктивноеОкно = ОбъектКонтекст.ПредыдущееАктивноеОкно;
			КонецЕсли;	 
					
			ТестируемаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
			Если ТестируемаяФорма <> Неопределено Тогда
				Возврат ТестируемаяФорма.ИмяФормы;
			КонецЕсли;	 
		Исключение
					
		КонецПопытки;
	КонецЕсли;	 
	
	Если НЕ ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") 
			ИЛИ ОбъектКонтекстСохраняемый.ТестовоеПриложение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Попытка
		МассивОкон = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
		
		// находим ближайшее окно к модальному диалогу
		Для Каждого ТекущееОкно Из МассивОкон Цикл
			Если ТекущееОкно.НачальнаяСтраница 
					ИЛИ ТекущееОкно.Основное 
					ИЛИ ЭтоЗаголовокОкнаМодальногоДиалога(ТекущееОкно.Заголовок) Тогда
				Продолжить;
			КонецЕсли;	 	
			
			АктивноеОкно = ТекущееОкно;
			ТестируемаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
			Если ТестируемаяФорма <> Неопределено Тогда
				Возврат ТестируемаяФорма.ИмяФормы;
			КонецЕсли;	 
		КонецЦикла;	
		
		// находим начальную страницу
		Для Каждого ТекущееОкно Из МассивОкон Цикл
			Если ТекущееОкно.НачальнаяСтраница Тогда
				ТестируемаяФорма = ТекущееОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
				Если ТестируемаяФорма <> Неопределено Тогда
					Возврат "НачальнаяСтраница";
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЦикла;	
		
		// находим основное окно
		Для Каждого ТекущееОкно Из МассивОкон Цикл
			Если ТекущееОкно.Основное Тогда
				Возврат "ОсновноеОкноПриложения";
			КонецЕсли;	 
		КонецЦикла;	
		
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Функция ДеталиОшибки(ТекстОшибки)
	СтрокаПоиска = Локализовать("ДеталиОшибки:");
	Поз = Найти(ТекстОшибки, СтрокаПоиска);
	Если Поз > 0 Тогда
		Возврат СокрЛП(Сред(ТекстОшибки, Поз + СтрДлина(СтрокаПоиска))); 
	КонецЕсли;	 
	
	Возврат ТекстОшибки;
КонецФункции	  

&НаКлиенте
Функция ПолучитьЛогОшибки(СтрокаСценария, ДанныеДляФормированияJsonОбОшибке)
	Если ДанныеДляФормированияJsonОбОшибке.ИдСтрокиУпавшегоШага <> Неопределено Тогда
		СтрокаШага = ПолучитьСтрокуШагаИзДанныхФормы(ДанныеДляФормированияJsonОбОшибке.ИдСтрокиУпавшегоШага);
	Иначе	
		СтрокаШага = Неопределено;
	КонецЕсли;	 
	
	ТекущаяУниверсальнаяДатаСтрока = ТекущаяУниверсальнаяДатаСтрока();

	ЭтоПример          = Ложь;
	ЭтоШагКонтекста    = Ложь;
	СтрокаРодителяШага = Неопределено;
	Если СтрокаШага <> Неопределено Тогда
		СтрокаРодителяШага = НайтиСтрокуСценарияЧерезРодителя(СтрокаШага, ЭтоПример, ЭтоШагКонтекста);
	КонецЕсли;	 
	
	СтруктураЛога = Новый Структура;
	
	Если СтрокаСценария <> Неопределено Тогда
		ИмяСценария = СтрокаСценария.Имя;
	Иначе
		ИмяСценария = Локализовать("Сценарий не определён.");
	КонецЕсли;	 
	СтруктураЛога.Вставить("ИмяСценария", ИмяСценария);
	
	Если ДанныеДляФормированияJsonОбОшибке.Свойство("ДатаНачала") Тогда
		СтруктураЛога.Вставить("ДатаНачала", Формат(ДанныеДляФормированияJsonОбОшибке.ДатаНачала, "ДФ=yyyyMMddHHmmss"));
	КонецЕсли;	
	Если ДанныеДляФормированияJsonОбОшибке.Свойство("ДатаОкончания") Тогда
		СтруктураЛога.Вставить("ДатаОкончания", Формат(ДанныеДляФормированияJsonОбОшибке.ДатаОкончания, "ДФ=yyyyMMddHHmmss"));
	КонецЕсли;	
	
	Если СтрокаШага <> Неопределено Тогда
		СтруктураЛога.Вставить("ИмяШага", СтрокаШага.Имя);
		СтруктураЛога.Вставить("НомерСтрокиВФиче", СтрокаШага.НомерСтрокиВФиче);
		СтруктураЛога.Вставить("СтрокаДерева", СтрокаШага.ИдСтроки);
	Иначе
		СтруктураЛога.Вставить("ИмяШага", "Шаг не определён.");
		СтруктураЛога.Вставить("НомерСтрокиВФиче", 0);
		СтруктураЛога.Вставить("СтрокаДерева", 0);
	КонецЕсли;	 

	Если ЭтоТекстИсключенияПлатформы(ДанныеДляФормированияJsonОбОшибке.ТекстОшибки)
			И ДанныеДляФормированияJsonОбОшибке.ИнфоОбОшибке = Неопределено Тогда
		РезультатТекстОшибки = ДеталиОшибки(ДанныеДляФормированияJsonОбОшибке.ТекстОшибки);
	ИначеЕсли ДанныеДляФормированияJsonОбОшибке.ИнфоОбОшибке = Неопределено Тогда
		РезультатТекстОшибки = ДанныеДляФормированияJsonОбОшибке.ТекстОшибки;
	Иначе
		РезультатТекстОшибки = СокрЛП(ВывестиВСообщениеТекстОшибки(ДанныеДляФормированияJsonОбОшибке.ИнфоОбОшибке));
	КонецЕсли;
	СтруктураЛога.Вставить("ТекстОшибки", РезультатТекстОшибки);
	СтруктураЛога.Вставить("ОписаниеОшибкиШага", ДанныеДляФормированияJsonОбОшибке.ОписаниеОшибкиШага);
	СтруктураЛога.Вставить("ТекстИсключенияПлатформы", Строка(ДанныеДляФормированияJsonОбОшибке.ТекстИсключенияПлатформы));
	СтруктураЛога.Вставить("ТекстИсключенияПлатформыОчищенный",
		УбратьПустыеСтрокиИЛишниеСимволыИзТекстаИсключения(ДанныеДляФормированияJsonОбОшибке.ТекстИсключенияПлатформы));
	СтруктураЛога.Вставить("ЭтоШагКонтекста", ЭтоШагКонтекста);
	СтруктураЛога.Вставить("ОписаниеОшибкиКратко", ДанныеДляФормированияJsonОбОшибке.ОписаниеОшибкиКратко);
	СтруктураЛога.Вставить("ОписаниеОшибкиПодробно", ДанныеДляФормированияJsonОбОшибке.ПодробноеПредставлениеОшибки);
	
	Если Объект.СобиратьДанныеОСостоянииАктивнойФормыПриОшибке Тогда
		Попытка
			МакетСостояниеФормы = СостояниеФормыВВидеМакета();
		Исключение
			МакетСостояниеФормы = Неопределено;
		КонецПопытки;
		
		Если МакетСостояниеФормы <> Неопределено И СтрокаРодителяШага <> Неопределено Тогда
			Если ТипЗнч(СтрокаРодителяШага.ПроизвольныеЗначения) <>  Тип("Структура") Тогда
				СтрокаРодителяШага.ПроизвольныеЗначения = Новый Структура;
			КонецЕсли;	 
			ПроизвольныеЗначения = СтрокаРодителяШага.ПроизвольныеЗначения;
			
			Если НЕ ПроизвольныеЗначения.Свойство("ПрикрепленныеМакеты") Тогда
				ПроизвольныеЗначения.Вставить("ПрикрепленныеМакеты", Новый Соответствие);
			КонецЕсли;	 
			
			ПрикрепленныеМакеты = ПроизвольныеЗначения.ПрикрепленныеМакеты;
			ДанныеФайла = Новый Структура;
			ДанныеФайла.Вставить("Имя", Локализовать("СостояниеАктивнойФормы"));
			ДанныеФайла.Вставить("Макет", МакетСостояниеФормы);
			ПрикрепленныеМакеты.Вставить(ДанныеФайла.Имя, ДанныеФайла);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Объект.СобиратьДанныеОСостоянииВсехФормПриОшибке Тогда
		Попытка
			МакетСостояниеВсехФорм = СостояниеВсехФормВВидеМакета();
		Исключение
			МакетСостояниеВсехФорм = Неопределено;
		КонецПопытки;
		
		Если МакетСостояниеВсехФорм <> Неопределено Тогда
			Если ТипЗнч(СтрокаРодителяШага.ПроизвольныеЗначения) <>  Тип("Структура") Тогда
				СтрокаРодителяШага.ПроизвольныеЗначения = Новый Структура;
			КонецЕсли;	 
			ПроизвольныеЗначения = СтрокаРодителяШага.ПроизвольныеЗначения;
			
			Если НЕ ПроизвольныеЗначения.Свойство("ПрикрепленныеМакеты") Тогда
				ПроизвольныеЗначения.Вставить("ПрикрепленныеМакеты", Новый Соответствие);
			КонецЕсли;	 
			
			ПрикрепленныеМакеты = ПроизвольныеЗначения.ПрикрепленныеМакеты;
			ДанныеФайла = Новый Структура;
			ДанныеФайла.Вставить("Имя", Локализовать("СостояниеВсехФорм"));
			ДанныеФайла.Вставить("Макет", МакетСостояниеВсехФорм);
			ПрикрепленныеМакеты.Вставить(ДанныеФайла.Имя, ДанныеФайла);
		КонецЕсли;	 
	КонецЕсли;	 
		
	Если Объект.СобиратьДанныеОСетевыхСоединениях Тогда
		Попытка
			ДанныеОСетевыхСоединениях = ДанныеОСетевыхСоединениях();
		Исключение
			ДанныеОСетевыхСоединениях = Неопределено;
		КонецПопытки;
		
		Если ДанныеОСетевыхСоединениях <> Неопределено Тогда
			Если ТипЗнч(СтрокаРодителяШага.ПроизвольныеЗначения) <>  Тип("Структура") Тогда
				СтрокаРодителяШага.ПроизвольныеЗначения = Новый Структура;
			КонецЕсли;	 
			ПроизвольныеЗначения = СтрокаРодителяШага.ПроизвольныеЗначения;
			
			Если НЕ ПроизвольныеЗначения.Свойство("ПрикрепленныеТекстовыеДокументы") Тогда
				ПроизвольныеЗначения.Вставить("ПрикрепленныеТекстовыеДокументы", Новый Массив);
			КонецЕсли;	 
			
			ПрикрепленныеТекстовыеДокументы = ПроизвольныеЗначения.ПрикрепленныеТекстовыеДокументы;
			ДанныеФайла = Новый Структура;
			ДанныеФайла.Вставить("Имя", Локализовать("ДанныеОСетевыхСоединениях"));
			ДанныеФайла.Вставить("Данные", ДанныеОСетевыхСоединениях);
			ПрикрепленныеТекстовыеДокументы.Добавить(ДанныеФайла);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Объект.СобиратьДанныеОПроцессахОС Тогда
		Попытка
			ДанныеОПроцессахОС = ДанныеОПроцессахОС();
		Исключение
			ДанныеОПроцессахОС = Неопределено;
		КонецПопытки;
		
		Если ДанныеОПроцессахОС <> Неопределено Тогда
			Если ТипЗнч(СтрокаРодителяШага.ПроизвольныеЗначения) <>  Тип("Структура") Тогда
				СтрокаРодителяШага.ПроизвольныеЗначения = Новый Структура;
			КонецЕсли;	 
			ПроизвольныеЗначения = СтрокаРодителяШага.ПроизвольныеЗначения;
			
			Если НЕ ПроизвольныеЗначения.Свойство("ПрикрепленныеТекстовыеДокументы") Тогда
				ПроизвольныеЗначения.Вставить("ПрикрепленныеТекстовыеДокументы", Новый Массив);
			КонецЕсли;	 
			
			ПрикрепленныеТекстовыеДокументы = ПроизвольныеЗначения.ПрикрепленныеТекстовыеДокументы;
			ДанныеФайла = Новый Структура;
			ДанныеФайла.Вставить("Имя", Локализовать("ДанныеОПроцессахОС"));
			ДанныеФайла.Вставить("Данные", ДанныеОПроцессахОС);
			ПрикрепленныеТекстовыеДокументы.Добавить(ДанныеФайла);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Объект.СобиратьДанныеОЗначенияхПеременных Тогда
		Попытка
			ТабДок = ДанныеОЗначенияхПеременныхВВидеМакета();
		Исключение
			ТабДок = Новый ТабличныйДокумент;
		КонецПопытки;
		
		Если ТипЗнч(СтрокаРодителяШага.ПроизвольныеЗначения) <>  Тип("Структура") Тогда
			СтрокаРодителяШага.ПроизвольныеЗначения = Новый Структура;
		КонецЕсли;	 
		ПроизвольныеЗначения = СтрокаРодителяШага.ПроизвольныеЗначения;
		
		Если НЕ ПроизвольныеЗначения.Свойство("ПрикрепленныеМакеты") Тогда
			ПроизвольныеЗначения.Вставить("ПрикрепленныеМакеты", Новый Соответствие);
		КонецЕсли;	 
		
		ПрикрепленныеМакеты = ПроизвольныеЗначения.ПрикрепленныеМакеты;
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("Имя", Локализовать("ЗначенияПеременных"));
		ДанныеФайла.Вставить("Макет", ТабДок);
		ПрикрепленныеМакеты.Вставить(ДанныеФайла.Имя, ДанныеФайла);
	КонецЕсли;	 
	
	КлючиЗаписанныхФайлов = Новый Соответствие;
	МассивФайлов = Новый Массив;
	СтруктураЛога.Вставить("МассивФайлов", МассивФайлов);
	Если  Объект.ДелатьЛогОшибокВТекстовыйФайл И НЕ ПустаяСтрока(Объект.ИмяКаталогаЛогОшибок)
		И СтрокаРодителяШага <> Неопределено И ТипЗнч(СтрокаРодителяШага.ПроизвольныеЗначения) = Тип("Структура") Тогда
		Если СтрокаРодителяШага.ПроизвольныеЗначения.Свойство("ПрикрепленныеМакеты") Тогда
			ПрикрепленныеМакеты = СтрокаРодителяШага.ПроизвольныеЗначения.ПрикрепленныеМакеты;
			Для Каждого ТекМакет Из ПрикрепленныеМакеты Цикл
				ДанныеФайла = ТекМакет.Значение;
				ИмяМакета = ДанныеФайла.Имя + "_" + ТекущаяУниверсальнаяДатаСтрока;
				ИмяМакета = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяМакета);
				
				ИмяПрикрепленногоФайла = ДополнитьСлешВПуть(Объект.ИмяКаталогаЛогОшибок) + ИмяМакета + ".mxl";
				МассивФайлов.Добавить(ИмяПрикрепленногоФайла);
				
				Попытка
					Если ЗапрещеныСинхронныеВызовы Тогда
						ДанныеФайла.Макет.НачатьЗапись(,ИмяПрикрепленногоФайла);
					Иначе	
						ДанныеФайла.Макет.Записать(ИмяПрикрепленногоФайла);
					КонецЕсли;	
					ДобавитьИмяФайлаВРезультатВыполненияСценария(ИмяПрикрепленногоФайла);
					КлючиЗаписанныхФайлов.Вставить(НРег(ДанныеФайла.Имя), Истина);
				Исключение
					СообщитьПользователю(ОписаниеОшибки());
				КонецПопытки;
			КонецЦикла;	
		КонецЕсли;	
		Если СтрокаРодителяШага.ПроизвольныеЗначения.Свойство("ПрикрепленныеТекстовыеДокументы") Тогда
			ПрикрепленныеТекстовыеДокументы = СтрокаРодителяШага.ПроизвольныеЗначения.ПрикрепленныеТекстовыеДокументы;
			Для Каждого ДанныеФайла Из ПрикрепленныеТекстовыеДокументы Цикл
				ИмяФайла = ДанныеФайла.Имя + "_" + ТекущаяУниверсальнаяДатаСтрока;
				ИмяФайла = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяФайла);
				
				ИмяПрикрепленногоФайла = ДополнитьСлешВПуть(Объект.ИмяКаталогаЛогОшибок) + ИмяФайла + ".txt";
				МассивФайлов.Добавить(ИмяПрикрепленногоФайла);
				
				Попытка
					ЗТ = Новый ЗаписьТекста(ИмяПрикрепленногоФайла,"UTF-8"); 
					ЗТ.Записать(ДанныеФайла.Данные); 
					ЗТ.Закрыть();
					ДобавитьИмяФайлаВРезультатВыполненияСценария(ИмяПрикрепленногоФайла);
					КлючиЗаписанныхФайлов.Вставить(НРег(ДанныеФайла.Имя), Истина);
				Исключение
					СообщитьПользователю(ОписаниеОшибки());
				КонецПопытки;
			КонецЦикла;	
		КонецЕсли;	 
		Если СтрокаРодителяШага.ПроизвольныеЗначения.Свойство("ПрикрепленныеФайлы") Тогда
			ПрикрепленныеФайлы = СтрокаРодителяШага.ПроизвольныеЗначения.ПрикрепленныеФайлы;
			Для Каждого ДанныеФайла Из ПрикрепленныеФайлы Цикл
				ИмяФайла = ДанныеФайла.ИмяФайла;
				ИмяФайла = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяФайла);
				ИмяПрикрепленногоФайла = ДополнитьСлешВПуть(Объект.ИмяКаталогаЛогОшибок) + ИмяФайла;
				Если ДанныеФайла.УникальностьИмени Тогда
					Файл = Новый Файл(ИмяПрикрепленногоФайла);
					ИмяПрикрепленногоФайла = ДополнитьСлешВПуть(Объект.ИмяКаталогаЛогОшибок) + Файл.ИмяБезРасширения 
						+ "_" + ТекущаяУниверсальнаяДатаСтрока + Файл.Расширение;
				КонецЕсли;	 
				
				МассивФайлов.Добавить(ИмяПрикрепленногоФайла);
				
				Попытка
					Если ЗапрещеныСинхронныеВызовы Тогда
						ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗаписиДвоичныхДанныхПрикрепленныеФайлы", ЭтаФорма);
						ДанныеФайла.ДвоичныеДанныеФайла.НачатьЗапись(ОписаниеОповещения,ИмяПрикрепленногоФайла);
					Иначе	
						ДанныеФайла.ДвоичныеДанныеФайла.Записать(ИмяПрикрепленногоФайла);
					КонецЕсли;	
					ДобавитьИмяФайлаВРезультатВыполненияСценария(ИмяПрикрепленногоФайла);
					КлючиЗаписанныхФайлов.Вставить(НРег(ДанныеФайла.ИмяФайла), Истина);
				Исключение
					СообщитьПользователю(ОписаниеОшибки());
				КонецПопытки;
			КонецЦикла;	
		КонецЕсли;	 
		Если СтрокаРодителяШага.ПроизвольныеЗначения.Свойство("МассивСкриншотов") Тогда
			МассивСкриншотов = СтрокаРодителяШага.ПроизвольныеЗначения.МассивСкриншотов;
			МассивДляЗаписи = Новый Массив;
			Для Каждого ДанныеФайла Из МассивСкриншотов Цикл
				Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
					Если ДанныеДляФормированияJsonОбОшибке.Свойство("РегистрацияОшибкиИзСекцииИсключение")
							И ДанныеДляФормированияJsonОбОшибке.РегистрацияОшибкиИзСекцииИсключение Тогда
							
						Если ДанныеФайла.Свойство("ИдШага") Тогда
							ТекИД_ВыполненногоШагаВМассиве = ТекИД_ШагаВМассиве;
							Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
							ШагСвязанныйСФайлом = Шаги[ДанныеФайла.ИдШага];
							ТекШаг = Шаги[ТекИД_ШагаВМассиве];
							
							Если ТекШаг.Свойство("РегистрацияОшибки") Тогда
								//Значит это скриншот добавлен при регистрации ошибки из секции Исключение
								Если ТекШаг.ИдСтроки <> ШагСвязанныйСФайлом.ИдСтроки Тогда
									Продолжить;
								КонецЕсли;	 
							КонецЕсли;	 
							
						КонецЕсли;	 
					КонецЕсли;	 
					
					ЗначениеДляЗаписи = ДанныеФайла;
				Иначе	
					ЗначениеДляЗаписи = Новый Структура;
					ЗначениеДляЗаписи.Вставить("ИмяФайла", ДанныеФайла);
				КонецЕсли;	 
				МассивДляЗаписи.Добавить(ЗначениеДляЗаписи);
			КонецЦикла;	
			СтруктураЛога.Вставить("МассивСкриншотов", МассивДляЗаписи);
		КонецЕсли;	 
	КонецЕсли;
	
	СтруктураЛога.Вставить("КлючиЗаписанныхФайлов", КлючиЗаписанныхФайлов);
	
	ТекИмяФормы = ПолучитьИмяФормыИзПоследнегоАктивногоОкна();
	Если ТекИмяФормы = Неопределено Тогда
		ТекИмяФормы = "";
	КонецЕсли;
	СтруктураЛога.Вставить("ФормаВКоторойВозниклоИсключение", ТекИмяФормы);
	Теги = ПолучитьТегиСценарияИФичи(СтрокаСценария);
	СтруктураЛога.Вставить("Теги", Теги);
	
	БылоВызваноИсключение = НЕ (ДанныеДляФормированияJsonОбОшибке.ИнфоОбОшибке = Неопределено);
	Если НЕ БылоВызваноИсключение И ЭтоТекстИсключенияПлатформы(ДанныеДляФормированияJsonОбОшибке.ТекстОшибки) Тогда
		БылоВызваноИсключение = Истина;
	КонецЕсли;	
	
	СтруктураЛога.Вставить("БылоВызваноИсключение", БылоВызваноИсключение);
	Возврат СтруктураЛога;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТегиСценарияИФичи(СтрокаСценария)
	Теги = Новый Массив;
	
	Если СтрокаСценария <> Неопределено И ТипЗнч(СтрокаСценария.ПроизвольныеЗначения) = Тип("Структура") Тогда
		Если СтрокаСценария.ПроизвольныеЗначения.Свойство("МассивТегов") Тогда
			Для Каждого Элем Из СтрокаСценария.ПроизвольныеЗначения.МассивТегов Цикл
				Теги.Добавить(Элем.ТегИсходный);
			КонецЦикла;
		КонецЕсли;	 
	КонецЕсли;	 
	
	СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаСценария);
	Если СтрокаФичи <> Неопределено И ТипЗнч(СтрокаФичи.ПроизвольныеЗначения) = Тип("Структура") Тогда
		Если СтрокаФичи.ПроизвольныеЗначения.Свойство("МассивТегов") Тогда
			Для Каждого Элем Из СтрокаФичи.ПроизвольныеЗначения.МассивТегов Цикл
				Теги.Добавить(Элем.ТегИсходный);
			КонецЦикла;	 
		КонецЕсли;	 
	КонецЕсли;
	
	Возврат Теги; 
КонецФункции	 

&НаКлиенте
Функция ТекущаяУниверсальнаяДатаСтрока()
	Стр = СтрЗаменить(ТекущаяУниверсальнаяДатаВМиллисекундах(), Символы.НПП, "");
	Стр = СтрЗаменить(Стр, " ", "");
	Возврат СтрЗаменить(Стр, ",", "");
КонецФункции	 

&НаКлиенте
Процедура ЗаписатьЛогОшибки(СтруктураЛога)
	#Если НЕ ВебКлиент Тогда
		
	ТекущаяУниверсальнаяДатаСтрока = ТекущаяУниверсальнаяДатаСтрока();	
		
	Если НЕ Объект.ДелатьЛогОшибокВТекстовыйФайл Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Объект.ИмяКаталогаЛогОшибок) Тогда
		ВызватьИсключение Локализовать("Не указано имя файла лога в параметре <ИмяКаталогаЛогОшибок>");
	КонецЕсли;	 
		
	Если НЕ ФайлСуществуетКомандаСистемы(Объект.ИмяКаталогаЛогОшибок) Тогда
		СоздатьКаталогЕслиЕгоНет(Объект.ИмяКаталогаЛогОшибок);
	КонецЕсли;	       
	
	Если БылоПрикреплениеФайловКШагам Тогда
		Попытка
			ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
			РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
			РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
			Для Каждого РезультатПрохожденияШага Из РезультатПрохожденияТестовШагов Цикл
				Если РезультатПрохожденияШага.Свойство("СписокФайлов") И РезультатПрохожденияШага.СписокФайлов.Количество() > 0 Тогда
					Для Каждого ТекФайл Из РезультатПрохожденияШага.СписокФайлов Цикл
						
						
						Файл = Новый Файл(ТекФайл.ИмяФайла);
						
						Если СтруктураЛога.КлючиЗаписанныхФайлов[НРег(ТекФайл.ИмяФайла)] <> Неопределено
							ИЛИ СтруктураЛога.КлючиЗаписанныхФайлов[НРег(Файл.ИмяБезРасширения)] <> Неопределено
							Тогда
								Продолжить;
						КонецЕсли;	
						
						Если ТипЗнч(ТекФайл) = Тип("Структура") Тогда
							Если ТекФайл.Свойство("ДвоичныеДанные") Тогда
								Попытка
									ИмяФайла = ДополнитьСлешВПуть(Объект.ИмяКаталогаЛогОшибок) + ТекФайл.ИмяФайла;
									ТекФайл.ДвоичныеДанные.Записать(ИмяФайла);
									СтруктураЛога.МассивФайлов.Добавить(ИмяФайла);
								Исключение
									ЗаписатьЛогВЖРОшибка("ЗаписатьЛогОшибки", ОписаниеОшибки());
								КонецПопытки;
							КонецЕсли;	
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;	
			КонецЦикла;	
		Исключение
			ЗаписатьЛогВЖРОшибка("ЗаписатьЛогОшибки", ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;	
	
	ВтораяЧастьФайла = Локализовать("Ошибка") + "_" + ТекущаяУниверсальнаяДатаСтрока + ".json";
	ВтораяЧастьФайла = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ВтораяЧастьФайла);	
		
	ИмяФайла = ДополнитьСлешВПуть(Объект.ИмяКаталогаЛогОшибок) + ВтораяЧастьФайла;
	
	Если ТекИД_СценарияВМассиве <> Неопределено И ТекИД_СценарияВМассиве >= 0 Тогда
		СтруктураЛога.Вставить("НомерСценария", (ТекИД_СценарияВМассиве + 1));
		СтруктураЛога.Вставить("КоличествоСценариев", МассивСценариевДляВыполнения.Количество());
	КонецЕсли;	
	
	ЗаписьJson = Вычислить("Новый ЗаписьJson()");
	ЗаписьJson.ОткрытьФайл(ИмяФайла);
	ЗаписатьJSON(ЗаписьJson, СтруктураЛога); 
	ЗаписьJson.Закрыть();

	ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль("ErrorFileJson: " + ИмяФайла + Символы.ПС);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИмяФайлаВРезультатВыполненияСценария(ИмяФайла)
	ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	Если НЕ РезультатПрохожденияТестовСценария.Свойство("МассивФайлов") Тогда
		РезультатПрохожденияТестовСценария.Вставить("МассивФайлов", Новый Массив);
	КонецЕсли;	 
	
	МассивФайлов = РезультатПрохожденияТестовСценария.МассивФайлов;
	МассивФайлов.Добавить(ИмяФайла);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ЗаписатьЛогВЖРПередВыполнениемСценарияСервер(Знач ИмяСценария)
	ЗаписьЖурналаРегистрации("VanessaAutomation.ПередВыполнениемСценария", УровеньЖурналаРегистрации.Информация, , , ИмяСценария);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЛогВЖРПередВыполнениемСценария(ИмяСценария)
	ЗаписатьЛогВЖРПередВыполнениемСценарияСервер(ИмяСценария);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЛогВТекстПередВыполнениемСценария(ИмяСценария)
	ТекстСообщения = Локализовать("Сценарий: %1");
	ТекстСообщения = Символы.Таб + ТекстСообщения;
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяСценария);
	ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(ТекстСообщения);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПоддержкаНемодальныхФорм()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Массив1 = РазложитьСтрокуВМассивПодстрок(СистемнаяИнформация.ВерсияПриложения, ".");
	Массив2 = РазложитьСтрокуВМассивПодстрок("8.3.3.641", ".");
	
	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Массив1.Количество() - 1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);
		
		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		ИначеЕсли Число(Элем2) < Число(Элем1) Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Версия1БольшеИлиРавно;
КонецФункции

&НаКлиенте
Функция УзнатьРежимСовместимостиКлиент(ЗначениеПоУмолчанию)
	Если Не ЗначениеЗаполнено(КешРежимСовместимости) Тогда
		КешРежимСовместимости = УзнатьРежимСовместимости(ЗначениеПоУмолчанию);
	КонецЕсли;	 
	
	Возврат КешРежимСовместимости;
КонецФункции	

&НаСервереБезКонтекста
Функция УзнатьРежимСовместимости(Знач ЗначениеПоУмолчанию)
	Значение = ЗначениеПоУмолчанию;
	
	Попытка
		Значение = Строка(Метаданные.РежимСовместимости);
	Исключение
		Возврат Значение;
	КонецПопытки;	
	
	Возврат Значение;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ЗапрещеныСинхронныеВызовы()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Версия1БольшеИлиРавно = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.5.1383");
	
	Рез = Версия1БольшеИлиРавно 
		И Вычислить("Метаданные.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент <> Метаданные.СвойстваОбъектов.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент.Использовать");
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ОбновитьКнопкуЗагрузитьФичи()
	Если Объект.текЗначениеОперации = "ЗагрузитьФичиИзКаталога" Тогда
		
	ИначеЕсли Объект.текЗначениеОперации = "ЗагрузитьОднуФичу" Тогда
		
	ИначеЕсли Объект.текЗначениеОперации = "" Тогда
	Иначе	
		СообщитьПользователюИВызватьИсключение(ПодставитьПараметрыВСтроку(
			Локализовать("Ошибка. Неизвестное значение параметра текЗначениеОперации = %1"),
			Объект.текЗначениеОперации
		));
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТестыЗагрузитьФичиИзКаталога()
	
	ОчиститьСообщения();
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Если ЗапрещеныСинхронныеВызовы Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборФайлаЗагрузкаФичи", ЭтаФорма);
		ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	Иначе	
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			Объект.КаталогФич = ДиалогОткрытияФайла.Каталог;
			// очистим кеш при смене фичи
			КешStepDefinition.Очистить();
			ЗагрузитьФичи();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПутьКОбработкеСервер()
	
	Если Не ПустаяСтрока(Объект.КаталогИнструментов) Тогда
		Возврат Объект.КаталогИнструментов;
	КонецЕсли;	 
	
	Если VAОткрытаКакВнешняяОбработка Тогда
		Объект1 = РеквизитФормыВЗначение("Объект");
		ИспользуемоеИмяФайла = Объект1.ИспользуемоеИмяФайла;
		
		Если (Лев(НРег(ИспользуемоеИмяФайла), 6) <> "e1cib/") И (Лев(НРег(ИспользуемоеИмяФайла), 6) <> "e1cib\") Тогда
			Возврат ИспользуемоеИмяФайла;
		Иначе
			Возврат "";
		КонецЕсли;	 
	Иначе
		Возврат "";
	КонецЕсли;
		 
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКОбработкеКлиент() Экспорт
	
	#Если ВебКлиент Тогда
		Возврат "";
	#КонецЕсли
	
	Если НЕ VAОткрытаКакВнешняяОбработка Тогда
		Возврат "";
	КонецЕсли;	 
	
	Если Не ПустаяСтрока(Объект.КаталогИнструментов) Тогда
		Если ФайлСуществуетКомандаСистемы(Объект.КаталогИнструментов) Тогда
			Возврат Объект.КаталогИнструментов;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат ПолучитьПутьКОбработкеСервер();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОбработкуИзФайлаЧерезМетодСоздать(ДополнительныеПараметры, ИмяОбработки)
	Обработка = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ВозможнаОптимизацияРаботыСФайлами") И НЕ ДополнительныеПараметры.ВозможнаОптимизацияРаботыСФайлами Тогда
			Возврат Неопределено;
		КонецЕсли;	 
		
		Если ДополнительныеПараметры.Свойство("ИмяФайла") Тогда
			Файл = Новый Файл(ДополнительныеПараметры.ИмяФайла);
			Если Файл.Существует() Тогда
				Попытка
					Обработка = ВнешниеОбработки.Создать(ДополнительныеПараметры.ИмяФайла, Ложь);
					ИмяОбработки = Обработка.Метаданные().Имя;
				Исключение
					Обработка = Неопределено;
				КонецПопытки;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Обработка; 
КонецФункции	 

&НаСервере
Процедура ДобавитьПустойСнипетВТаблицуИзвестныхStepDefinition(Знач ИмяФайла, Знач ВерсияФайла)
	ДобавитьСнипетВТаблицуИзвестныхStepDefinitionВызовСКлиента("ПустойСнипет" + ИмяФайла, "", ИмяФайла, 
		Новый Массив, НРег("ПустойСнипет" + ИмяФайла), "", "", ВерсияФайла, "", "", Неопределено);	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСнипетВТаблицуИзвестныхStepDefinitionВызовСКлиента(ID, СтрокаРеальнойПроцедуры, ИмяФайла, МассивПараметров, 
		СтрокаДляПоиска, ПредставлениеТеста, Транзакция, ВерсияФайла, ОписаниеШага, ТипШага, ТипШагаВДереве)
		
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	
	СтрТзнТаблицаИзвестныхStepDefinition = ТзнТаблицаИзвестныхStepDefinition.Найти(СтрокаДляПоиска, "СтрокаДляПоиска");
	Если СтрТзнТаблицаИзвестныхStepDefinition = Неопределено Тогда
		ДобавитьСнипетВТаблицуИзвестныхStepDefinitionССервера(ТзнТаблицаИзвестныхStepDefinition, ID, СтрокаРеальнойПроцедуры, 
			ИмяФайла, МассивПараметров, СтрокаДляПоиска, ПредставлениеТеста, Транзакция, 
			ВерсияФайла, ОписаниеШага, ТипШага, ТипШагаВДереве);
		ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition, "ТаблицаИзвестныхStepDefinition");
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСнипетВТаблицуИзвестныхStepDefinitionССервера(ТзнТаблицаИзвестныхStepDefinition, ID, СтрокаРеальнойПроцедуры, 
		ИмяФайла, МассивПараметров, СтрокаДляПоиска, ПредставлениеТеста, 
		Транзакция, ВерсияФайла, ОписаниеШага, ТипШага, ТипШагаВДереве)

	СтрТаблицаИзвестныхStepDefinition                         = ТзнТаблицаИзвестныхStepDefinition.Добавить();
	СтрТаблицаИзвестныхStepDefinition.ID                      = ID;
	СтрТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры = СтрокаРеальнойПроцедуры;
	
	УниверсальноеПолноеИмя = ИмяФайла;

	Попытка
		Файл = Новый Файл(ИмяФайла);		
		УниверсальноеПолноеИмя = УниверсальноеПолноеИмяФайла(Файл);
	Исключение
	КонецПопытки;

	СтрТаблицаИзвестныхStepDefinition.ИмяФайла                = УниверсальноеПолноеИмя;

	СтрТаблицаИзвестныхStepDefinition.Параметры               = МассивПараметров;
	СтрТаблицаИзвестныхStepDefinition.СтрокаДляПоиска         = СтрокаДляПоиска;
	СтрТаблицаИзвестныхStepDefinition.ПредставлениеТеста      = ПредставлениеТеста;
	СтрТаблицаИзвестныхStepDefinition.Транзакция              = Транзакция;	
	СтрТаблицаИзвестныхStepDefinition.ВерсияФайла             = ВерсияФайла;	
	СтрТаблицаИзвестныхStepDefinition.ОписаниеШага            = ОписаниеШага;
	СтрТаблицаИзвестныхStepDefinition.ТипШага                 = ТипШага;
	СтрТаблицаИзвестныхStepDefinition.ТипШагаВДереве          = ТипШагаВДереве;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СравнитьПутиФайлов(Знач Путь1, Знач Путь2)
	
	Возврат УниверсальноеПолноеИмяФайла(Путь1, Истина) = УниверсальноеПолноеИмяФайла(Путь2, Истина);

КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьПутьКФайлуКСтандарту(Знач Путь)

	Возврат УниверсальноеПолноеИмяФайла(Путь);

КонецФункции	

&НаСервереБезКонтекста
Процедура ДобавитьСнипет(Знач Снипет, Знач ИмяФайла, Знач ВерсияФайла, БылиОшибки, ТзнТаблицаИзвестныхStepDefinition, СтруктураПараметров)
	
	ИмяФайла                = УниверсальноеПолноеИмяФайла(ИмяФайла);
	СтрокаРеальнойПроцедуры = СокрЛП(Снипет.ИмяПроцедуры);
	ID                      = СокрЛП(Снипет.Снипет);
	
	// уберем слово "Экспорт"
	Если Прав(НРег(СтрокаРеальнойПроцедуры), 7) = "экспорт" Тогда
		СтрокаРеальнойПроцедуры = Лев(СтрокаРеальнойПроцедуры, СтрДлина(СтрокаРеальнойПроцедуры) - 7);
		СтрокаРеальнойПроцедуры = СокрЛП(СтрокаРеальнойПроцедуры);
	КонецЕсли;
	
	Если Лев(НРег(СтрокаРеальнойПроцедуры), 9) = "процедура" Тогда
		СтрокаРеальнойПроцедуры = СокрЛП(Сред(СтрокаРеальнойПроцедуры, 10));
	КонецЕсли;
	
	Поз = Найти(ID, "(");
	СтрПараметры = Сред(ID, Поз + 1);
	СтрПараметры = Лев(СтрПараметры, СтрДлина(СтрПараметры) - 1);
	
	МассивПром = РазложитьСтрокуВМассивПодстрок(СтрПараметры, ",");
	МассивПараметров = Новый Массив;
	Для Каждого Элем Из МассивПром Цикл
		СтруктураПарам = Новый Структура;
		Тип = "Строка";
		Если Найти(НРег(Элем), "число") > 0 Тогда
			Тип = "Число";
		КонецЕсли;
		Если Найти(НРег(Элем), "дата") > 0 Тогда
			Тип = "Дата";
		КонецЕсли;
		СтруктураПарам.Вставить("Тип", Тип);
		МассивПараметров.Добавить(СтруктураПарам);
	КонецЦикла;
	
	ПромСтр = ТзнТаблицаИзвестныхStepDefinition.Найти(ID, "ID");
	Если ПромСтр <> Неопределено Тогда
		Если СравнитьПутиФайлов(ПромСтр.ИмяФайла, ИмяФайла) Тогда // значит этот снипет из того же файла
			Возврат;
		КонецЕсли;	
	КонецЕсли;	 
	Если ПромСтр <> Неопределено Тогда
		БылиОшибки = Истина;
		ТекстСообщения = ТекстСообщенияПользователюВызовСервера("Warning. В файле %1, снипет %2 уже был в %3", 
			СтруктураПараметров.ТекстСообщенийПользователю);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяФайла);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ID);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ПромСтр.ИмяФайла);
		СообщитьПользователюСеврер(ТекстСообщения); 
		Возврат;
	КонецЕсли;
	
	Если Не Снипет.Свойство("ОписаниеШага") Тогда
		ОписаниеШага        = "";
	Иначе	
		ОписаниеШага        = Снипет.ОписаниеШага;
	КонецЕсли;	 
	Если Не Снипет.Свойство("ТипШага") Тогда
		ТипШага             = "";
	Иначе	
		ТипШага             = Снипет.ТипШага;
	КонецЕсли;	 
	
	ТипШагаВДереве = Неопределено;
	Если Снипет.Свойство("ТипШагаВДереве") Тогда
		ТипШагаВДереве = Снипет.ТипШагаВДереве;
	КонецЕсли;	 
	
	ДобавитьСнипетВТаблицуИзвестныхStepDefinitionССервера(ТзнТаблицаИзвестныхStepDefinition, ID, 
		СтрокаРеальнойПроцедуры, ИмяФайла, МассивПараметров, НРег(Лев(ID, Найти(ID, "(") - 1)), 
		Снипет.ПредставлениеТеста, Снипет.Транзакция, ВерсияФайла, ОписаниеШага, ТипШага, ТипШагаВДереве);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСнипетыСерверМассивом(ДанныеДляСнипетов, ДопПараметры)
	Для Каждого Данные Из ДанныеДляСнипетов Цикл
		Если Данные.МассивСнипетовИзОбработки.Количество() = 0 Тогда
			ДобавитьПустойСнипетВТаблицуИзвестныхStepDefinition(Данные.ИмяФайла, Данные.ВерсияФайла);
		КонецЕсли;	 
	КонецЦикла;	 
	
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	
	Для Каждого Данные Из ДанныеДляСнипетов Цикл
		Если Данные.МассивСнипетовИзОбработки.Количество() > 0 Тогда
			БылиОшибки = Ложь;
			ДобавитьСнипетыСервер(Данные.МассивСнипетовИзОбработки, Данные.ИмяФайла, Данные.ВерсияФайла,
				БылиОшибки, ДопПараметры, ТзнТаблицаИзвестныхStepDefinition);
		КонецЕсли;	 
	КонецЦикла;	 
	
	ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition, "ТаблицаИзвестныхStepDefinition");
КонецПроцедуры 

&НаСервере
Процедура ДобавитьСнипетыСервер(Знач МассивСнипетовИзОбработки, Знач ИмяФайла, Знач ВерсияФайла, БылиОшибки, СтруктураПараметров, ПарамТаблицаИзвестныхStepDefinition = Неопределено)
	НадоПреобразоватьРеквизитФормы = Ложь;
	Если ПарамТаблицаИзвестныхStepDefinition = Неопределено Тогда
		ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
		НадоПреобразоватьРеквизитФормы = Истина;
	Иначе	
		ТзнТаблицаИзвестныхStepDefinition = ПарамТаблицаИзвестныхStepDefinition;
	КонецЕсли;	 
	
	Для каждого ЭлементСодержащийСнипеты Из МассивСнипетовИзОбработки Цикл
		Если ТипЗнч(ЭлементСодержащийСнипеты) = Тип("Структура") И ЭлементСодержащийСнипеты.Свойство("МассивСнипетовИзОбработки") Тогда
			Для Каждого Снипет Из ЭлементСодержащийСнипеты.МассивСнипетовИзОбработки Цикл
				ДобавитьСнипет(Снипет, ЭлементСодержащийСнипеты.ИмяВнутреннейФормы, ВерсияФайла, БылиОшибки, 
					ТзнТаблицаИзвестныхStepDefinition, СтруктураПараметров);
			КонецЦикла;	
		Иначе	
			ДобавитьСнипет(ЭлементСодержащийСнипеты, ИмяФайла, ВерсияФайла, БылиОшибки, ТзнТаблицаИзвестныхStepDefinition, СтруктураПараметров);
		КонецЕсли;	 
		
	КонецЦикла;
	
	Если НадоПреобразоватьРеквизитФормы Тогда
		ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition, "ТаблицаИзвестныхStepDefinition");
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИзТаблицаИзвестныхStepDefinitionДанныеПоФайлуСервер(Знач ИмяФайла)
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяФайла", ИмяФайла);
	МассивСтрок = ТзнТаблицаИзвестныхStepDefinition.НайтиСтроки(Отбор);
	
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		ТзнТаблицаИзвестныхStepDefinition.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition, "ТаблицаИзвестныхStepDefinition");
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзТаблицаИзвестныхStepDefinitionДанныеПоФайлуКлиент(ИмяФайла)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяФайла", ИмяФайла);
	МассивСтрок = ТаблицаИзвестныхStepDefinition.НайтиСтроки(Отбор);
	
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		ТаблицаИзвестныхStepDefinition.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуКонтекстовОбработокНеПодключаяОбработки(Файл)
	СтрТаблицаКонтекстовОбработок = Новый Структура;
	УниверсальноеПолноеИмя = УниверсальноеПолноеИмяФайла(Файл.ПолноеИмя);
	СтрТаблицаКонтекстовОбработок.Вставить("ИмяФайла", УниверсальноеПолноеИмя);
	СтрТаблицаКонтекстовОбработок.Вставить("Обработка", Неопределено);
	
	ТаблицаКонтекстовОбработок.Добавить(СтрТаблицаКонтекстовОбработок);
	МассивИменКонтекстовОбработок.Добавить(Нрег(УниверсальноеПолноеИмя));
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеПроцедурыШагВременныйФичаФайл(ДанныеДляПодключения, Шаги, ДопПараметры)
	
	ПомещаемыеФайлы = Новый Массив;
	ПараметрыЗавершения = Новый Структура;	
	ДанныеФайлов = Новый Соответствие;
	Для Каждого ИмяФайла Из ДанныеДляПодключения Цикл
		ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ИмяФайла);
		ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
		Файл = Новый Файл(ИмяФайла); 
		ДанныеФайлов.Вставить(ИмяФайла, Новый Структура("Имя,ИмяФайла,ВерсияФайла", Файл.Имя, ИмяФайла, Неопределено));
	КонецЦикла;	 
	
	ПараметрыЗавершения.Вставить("ДанныеДляПодключения", ДанныеДляПодключения);
	ПараметрыЗавершения.Вставить("Шаги", Шаги);
	
	ПараметрыЗавершения.Вставить("ДанныеФайлов", ДанныеФайлов);
	ПараметрыЗавершения.Вставить("ДопПараметры", ДопПараметры);
	
	Оповещение = Новый ОписаниеОповещения(
	"ОбработчикКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеПроцедурыШагВременныйФичаФайл", ЭтаФорма, ПараметрыЗавершения);
	
	БылаОшибка = Истина;
	КоличествоПопыток = 10;
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			НачатьПомещениеФайлов(Оповещение, ПомещаемыеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор);
			БылаОшибка = Ложь;
			Прервать;
		Исключение
			Sleep(1);
		КонецПопытки;
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		Стр = "";
		Для Каждого Элем Из ДанныеДляПодключения Цикл
			Стр = Стр + Элем + Символы.ПС; 
		КонецЦикла;	 
		
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не получилось выполнить помещение файлов: <%1>."),
			Стр
		);
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеПроцедурыШаг(ИмяФайла, ТекШаг)
	ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ИмяФайла);
	ПомещаемыеФайлы = Новый Массив;
	ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
	
	ПараметрыЗавершения = Новый Структура;	
	ПараметрыЗавершения.Вставить("ИмяФайла", ИмяФайла);
	ПараметрыЗавершения.Вставить("ТекШаг", ТекШаг);
	
	Файл = Новый Файл(ИмяФайла); 
	
	ДанныеФайлов = Новый Соответствие;
	ДанныеФайлов.Вставить(ИмяФайла, Новый Структура("Имя,ИмяФайла,ВерсияФайла", Файл.Имя, ИмяФайла, Неопределено));
	Файл = Неопределено;
	
	ПараметрыЗавершения.Вставить("ДанныеФайлов", ДанныеФайлов);
	
	Оповещение = Новый ОписаниеОповещения(
	"ОбработчикПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеПроцедурыШаг", ЭтаФорма, ПараметрыЗавершения);
	
	БылаОшибка = Истина;
	КоличествоПопыток = 10;
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			НачатьПомещениеФайлов(Оповещение, ПомещаемыеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор);
			БылаОшибка = Ложь;
			Прервать;
		Исключение
			Sleep(1);
		КонецПопытки;
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не получилось выполнить помещение файла <%1>."),
			ИмяФайла
		);
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеСценария(МассивФайлов, РезультатПрохожденияШага, 
		ДопПараметры = Неопределено)
		
	ПомещаемыеФайлы = Новый Массив;
	ДанныеФайлов = Новый Соответствие;
	Для Каждого ИмяФайла Из МассивФайлов Цикл
		ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ИмяФайла);
		ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
		
		ЗапомнитьПодключеннуюEPF(ИмяФайла);
		
		Файл = Новый Файл(ИмяФайла); 
		ДанныеФайлов.Вставить(ИмяФайла, Новый Структура("Имя,ИмяФайла,ВерсияФайла", Файл.Имя, ИмяФайла, Неопределено));
	КонецЦикла;	 
	
	ПараметрыЗавершения = Новый Структура;	
	ПараметрыЗавершения.Вставить("МассивФайлов", МассивФайлов);
	ПараметрыЗавершения.Вставить("РезультатПрохожденияШага", РезультатПрохожденияШага);
	ПараметрыЗавершения.Вставить("ДанныеФайлов", ДанныеФайлов);
	
	ИмяОбработчика = "ОбработчикПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеШага";
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ИмяОбработчика") Тогда
			ИмяОбработчика = ДопПараметры.ИмяОбработчика;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Оповещение = Новый ОписаниеОповещения(ИмяОбработчика, ЭтаФорма, ПараметрыЗавершения);
	
	БылаОшибка = Истина;
	КоличествоПопыток = 10;
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			НачатьПомещениеФайлов(Оповещение, ПомещаемыеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор);
			БылаОшибка = Ложь;
			Прервать;
		Исключение
			Sleep(1);
		КонецПопытки;
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не получилось выполнить помещение файлов: <%1>."),
			ИмяФайла
		);
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработчикПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеШага(Знач ПомещенныеФайлы, Знач ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Вставить("ПолучатьСнипеты", Ложь);
	ПодключитьОбработкиКлиент(ПомещенныеФайлы, ДополнительныеПараметры);
	
	МассивФайлов = ДополнительныеПараметры.МассивФайлов;
	Для Каждого АдресСнипета Из МассивФайлов Цикл
		ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
		Если ИД = Неопределено Тогда
			ПодключитьКонтекстОбработкиКлиент(АдресСнипета);	
			ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
		КонецЕсли;	 
		
		ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
		Если ОбработкаТеста = Неопределено Тогда
			Если ОбработкаТеста = Неопределено Тогда
				ВызватьИсключение ПодставитьПараметрыВСтроку(
					Локализовать("Не получилось подключить обработку <%1>"),
					АдресСнипета
				);
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;	 
	
	Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
		ЗаписатьЛогВЖРИнформация("ВыполнитьШагПродолжение",
			"ОбработчикПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеШага");
	КонецЕсли;	 
	ВыполнитьШагПродолжение(ДополнительныеПараметры.РезультатПрохожденияШага, ОбработкаТеста);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеСценария(Знач ПомещенныеФайлы, 
		Знач ДополнительныеПараметры) Экспорт
		
	ДополнительныеПараметры.Вставить("ПолучатьСнипеты", Ложь);
	ПодключитьОбработкиКлиент(ПомещенныеФайлы, ДополнительныеПараметры);
	
	МассивФайлов = ДополнительныеПараметры.МассивФайлов;
	Для Каждого АдресСнипета Из МассивФайлов Цикл
		ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
		Если ИД = Неопределено Тогда
			ПодключитьКонтекстОбработкиКлиент(АдресСнипета);	
			ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
		КонецЕсли;	 
		
		ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
		Если ОбработкаТеста = Неопределено Тогда
			Если ОбработкаТеста = Неопределено Тогда
				ВызватьИсключение ПодставитьПараметрыВСтроку(
					Локализовать("Не получилось подключить обработку <%1>"),
					АдресСнипета
				);
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;	 
	
	ВыполнитьСценарийАсинхронноТаймерПродолжение();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеПроцедурыШаг(Знач ПомещенныеФайлы, 
		Знач ДополнительныеПараметры) Экспорт
		
	ДополнительныеПараметры.Вставить("ПолучатьСнипеты", Ложь);
	ПодключитьОбработкиКлиент(ПомещенныеФайлы, ДополнительныеПараметры);
	
	АдресСнипета = ДополнительныеПараметры.ИмяФайла;
	ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
	Если ИД = Неопределено Тогда
		ПодключитьКонтекстОбработкиКлиент(АдресСнипета);	
		ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
	КонецЕсли;	 
	
	ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
	Если ОбработкаТеста = Неопределено Тогда
		Если ОбработкаТеста = Неопределено Тогда
			ВызватьИсключение ПодставитьПараметрыВСтроку(
				Локализовать("Не получилось подключить обработку <%1>"),
				АдресСнипета
			);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Попытка
		ВыполнитьПроцедуруШагПродолжение(ОбработкаТеста, ДополнительныеПараметры.ТекШаг);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ПродолжитьВыполнениеШагов(Истина, ОписаниеОшибки);
		Возврат;
	КонецПопытки;
	
	ПродолжитьВыполнениеШагов();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеПроцедурыШагВременныйФичаФайл(Знач ПомещенныеФайлы, 
		Знач ДополнительныеПараметры) Экспорт
		
	ДополнительныеПараметры.Вставить("ПолучатьСнипеты", Ложь);
	ПодключитьОбработкиКлиент(ПомещенныеФайлы, ДополнительныеПараметры);
	
	ДанныеДляПодключения = ДополнительныеПараметры.ДанныеДляПодключения;
	Для Каждого ИмяФайла Из ДанныеДляПодключения Цикл
		АдресСнипета = ИмяФайла;
		ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
		Если ИД = Неопределено Тогда
			ПодключитьКонтекстОбработкиКлиент(АдресСнипета);	
			ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
		КонецЕсли;	 
		
		ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
		Если ОбработкаТеста = Неопределено Тогда
			Если ОбработкаТеста = Неопределено Тогда
				ВызватьИсключение ПодставитьПараметрыВСтроку(
					Локализовать("Не получилось подключить обработку <%1>"),
					АдресСнипета
				);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	 
	
	Попытка
		ВыполнитьМетодШагЧерезВременныйФичаФайлПродолжение(ДополнительныеПараметры.Шаги, ДополнительныеПараметры.ДопПараметры);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ПродолжитьВыполнениеШагов(Истина, ОписаниеОшибки);
		Возврат;
	КонецПопытки;
	
	ПродолжитьВыполнениеШагов();
КонецПроцедуры

&НаКлиенте
Функция ПодключитьКонтекстОбработкиКлиент(ОбъектСодержащийШаги, ВерсияФайла = Неопределено, ДопПараметры = Неопределено)
	Перем  ФормаОбработки, ИмяОбработки, УниверсальноеПолноеИмя;
	
	ФормаОбработки = Неопределено;
	ЭтоВнутренняяФорма = Ложь;
	Если ЭтоВнутреннийАдресФормы(ОбъектСодержащийШаги) Тогда
		ЭтоВнутренняяФорма = Истина;
		Файл = Неопределено;
	Иначе
		Файл = Новый Файл(ОбъектСодержащийШаги);
	КонецЕсли;	 
	
	Если ЭтоВнутренняяФорма Тогда
		ФормаОбработки         = ПолучитьФорму(ОбъектСодержащийШаги);
		УниверсальноеПолноеИмя = ОбъектСодержащийШаги;
	Иначе	
		Попытка
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ИмяФайла", Файл.ПолноеИмя);
			Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("АдресХранилища") Тогда
				ДополнительныеПараметры.Вставить("АдресХранилища", ДопПараметры.АдресХранилища);
			КонецЕсли;	 
			Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ВозможнаОптимизацияРаботыСФайлами") Тогда
				ДополнительныеПараметры.Вставить("ВозможнаОптимизацияРаботыСФайлами", ДопПараметры.ВозможнаОптимизацияРаботыСФайлами);
			КонецЕсли;	 
			ИмяОбработки = ПодключитьВнешнююОбработкуСервер(Файл.ПолноеИмя, ЕстьЗащитаОтОпасныхДействий, ДополнительныеПараметры);
			Если ИмяОбработки = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;	 
			
			ФормаОбработки = ПолучитьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма.Форма");
			Если ФормаОбработки = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли; 
		Исключение
			Отладка("Не вышло получить список шагов в обработке: " + Файл.ПолноеИмя);
			Отладка("ПолучитьУжеСуществующиеСнипетыИзОбработок:" + ОписаниеОшибки());
			
			Если ВерсияФайла = Неопределено Тогда
				Возврат Ложь; // значит просто не получилось подключить обработку
			КонецЕсли;
			// Значит передали ВерсиюФайла, тогда добавим обработку в кеш, чтобы она не пыталась загрузиться в следующий раз.
			
		КонецПопытки;
		УниверсальноеПолноеИмя = УниверсальноеПолноеИмяФайла(Файл.ПолноеИмя);
	КонецЕсли;	 
	
	СтрТаблицаКонтекстовОбработок = Новый Структура;
	СтрТаблицаКонтекстовОбработок.Вставить("ИмяФайла", УниверсальноеПолноеИмя);
	СтрТаблицаКонтекстовОбработок.Вставить("Обработка", ФормаОбработки);
	
	ИД = МассивИменКонтекстовОбработок.Найти(Нрег(УниверсальноеПолноеИмя));
	Если ИД = Неопределено Тогда
		ТаблицаКонтекстовОбработок.Добавить(СтрТаблицаКонтекстовОбработок);
		МассивИменКонтекстовОбработок.Добавить(Нрег(УниверсальноеПолноеИмя));
	Иначе
		ТаблицаКонтекстовОбработок[ИД] = СтрТаблицаКонтекстовОбработок;
	КонецЕсли;	 
	
	// этот вызов нужен чтобы передать контекст vanessa automation внутрь обработки
	Если ФормаОбработки <> Неопределено Тогда
		Попытка
			МассивСнипетовИзОбработки = ФормаОбработки.ПолучитьСписокТестов(ЭтаФорма);
		Исключение
			ТекстСообщения = Локализовать("Не получилось загрузить снипеты из %1");
			Если ЭтоВнутренняяФорма Тогда
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОбъектСодержащийШаги + " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
			Иначе	
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Файл.ПолноеИмя + " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
			КонецЕсли;	 
			ЗаписатьЛогВЖРОшибка("VanessaAutomation.ПолучитьСписокТестов", ТекстСообщения);
			Отладка(ТекстСообщения);
			
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Если ЭтоВнутренняяФорма Тогда
			ДобавитьПустойСнипетВТаблицуИзвестныхStepDefinition(ОбъектСодержащийШаги, ВерсияФайла);
		Иначе	
			ДобавитьПустойСнипетВТаблицуИзвестныхStepDefinition(Файл.ПолноеИмя, ВерсияФайла);
		КонецЕсли;	 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузитьТаблицаИзвестныхStepDefinitionИзМакетаСервер(Знач ИмяОбработкиVAНрег)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	
	ТекстовыйДокумент = ОбъектСервер.ПолучитьМакет("МакетСлужебныйКеш");
	СлужебнаяСтрока   = ТекстовыйДокумент.ПолучитьТекст();
	Если Не ЗначениеЗаполнено(СлужебнаяСтрока) Тогда
		Возврат 0;
	КонецЕсли;	
	
	ДанныеСлужебногоКеша = ЗначениеИзСтрокиВнутр(СлужебнаяСтрока);
	ТаблицаКешStepDefinition = ДанныеСлужебногоКеша.КешStepDefinition;
	Для Каждого СтрокаМакетСлужебныйКеш Из ТаблицаКешStepDefinition Цикл
		СтрокаДляПоиска = СтрокаМакетСлужебныйКеш.СтрокаДляПоиска;
		СтрокаТзнТаблицаИзвестныхStepDefinition = ТзнТаблицаИзвестныхStepDefinition.Найти(СтрокаДляПоиска, "СтрокаДляПоиска");
		Если СтрокаТзнТаблицаИзвестныхStepDefinition = Неопределено Тогда
			СтрокаТзнТаблицаИзвестныхStepDefinition = ТзнТаблицаИзвестныхStepDefinition.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТзнТаблицаИзвестныхStepDefinition, СтрокаМакетСлужебныйКеш);
		КонецЕсли;	 
		Если Лев(ИмяОбработкиVAНрег, 10) = "обработка." Тогда
			СтрокаТзнТаблицаИзвестныхStepDefinition.СтрокаДляПоиска = СтрЗаменить(СтрокаТзнТаблицаИзвестныхStepDefinition.СтрокаДляПоиска, "внешняяобработка.", "обработка.");
			СтрокаТзнТаблицаИзвестныхStepDefinition.Id = СтрЗаменить(СтрокаТзнТаблицаИзвестныхStepDefinition.Id, "ВнешняяОбработка.", "Обработка.");
			СтрокаТзнТаблицаИзвестныхStepDefinition.ИмяФайла = СтрЗаменить(СтрокаТзнТаблицаИзвестныхStepDefinition.ИмяФайла, "ВнешняяОбработка.", "Обработка.");
		КонецЕсли;	
	КонецЦикла;	
	
	Если НЕ VAОткрытаКакВнешняяОбработка Тогда
		Для Каждого СтрТзнТаблицаИзвестныхStepDefinition Из ТзнТаблицаИзвестныхStepDefinition Цикл
			СтрТзнТаблицаИзвестныхStepDefinition.ИмяФайла 
			    = СтрЗаменить(СтрТзнТаблицаИзвестныхStepDefinition.ИмяФайла, "ВнешняяОбработка.", "Обработка.");
		КонецЦикла;	 
	КонецЕсли;		
	
	ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition, "ТаблицаИзвестныхStepDefinition");
	
	Возврат ТаблицаКешStepDefinition.Количество(); 
КонецФункции

&НаКлиенте
Процедура ПодключитьСнипетыИзВнутреннихФорм(МассивФорм, ВерсияФайла, БылиОшибки, СтруктураПараметров,
	  МассивИменФайловКоторыеСовпалиСКеш, МассивИменКонтекстовОбработок, ТаблицаКонтекстовОбработок, КаталогФич)

	ИмяОбработкиVAНрег = НРег(ПолучитьИмяОбработкиVA());
	  
	НадоПодключитьШагиSingleИзИзМакета = Истина;
	Для Каждого СтрокаТаблицаИзвестныхStepDefinition Из ТаблицаИзвестныхStepDefinition Цикл
		Если Найти(НРег(СтрокаТаблицаИзвестныхStepDefinition.ИмяФайла), ".vanessaautomationsingle.") > 0 Тогда
			Если Лев(НРег(СтрокаТаблицаИзвестныхStepDefinition.ИмяФайла), СтрДлина(ИмяОбработкиVAНрег)) = ИмяОбработкиVAНрег Тогда
				НадоПодключитьШагиSingleИзИзМакета = Ложь;
				Прервать;
			КонецЕсли;	
		КонецЕсли;	 
	КонецЦикла;
	  
	Если НадоПодключитьШагиSingleИзИзМакета Тогда
		ЗагрузитьТаблицаИзвестныхStepDefinitionИзМакетаСервер(НРег(ПолучитьИмяОбработкиVA()));  
		НадоПодключитьШагиSingleИзИзМакета = Ложь;
		ОбновитьКешСнипетовНаКлиенте();
	КонецЕсли;	 
	  
	ПодключатьОбработкиПринудительно = Ложь;
	Если СтруктураПараметров.Свойство("ПодключатьОбработкиПринудительно") Тогда
		ПодключатьОбработкиПринудительно = СтруктураПараметров.ПодключатьОбработкиПринудительно;
	КонецЕсли;	 
	  
	МассивВсехСнипетов = Новый Массив;
	НомерФормы = 0;
	ВсегоФорм = МассивФорм.Количество();
	Для Каждого ИмяВнутреннейФормы Из МассивФорм Цикл
		НомерФормы = НомерФормы + 1;
		Если ПодключатьОбработкиПринудительно Тогда
			Если (НомерФормы % 10) = 0 Тогда
				Состояние(_СтрШаблон(Локализовать("Встроенная форма №%1 из %2"), НомерФормы, ВсегоФорм), Окр((НомерФормы / ВсегоФорм) * 100), СокрЛП(КаталогФич));
			КонецЕсли;	 
		КонецЕсли;	 
		
		МассивИменФайловКоторыеСовпалиСКеш.Вставить(ИмяВнутреннейФормы, Истина);
		МассивИменКонтекстовОбработок.Добавить(УниверсальноеПолноеИмяФайла(ИмяВнутреннейФормы, Истина));
		
		СтрТаблицаКонтекстовОбработок = Новый Структура;
		СтрТаблицаКонтекстовОбработок.Вставить("ИмяФайла", ИмяВнутреннейФормы);
		СтрТаблицаКонтекстовОбработок.Вставить("Обработка", Неопределено);
		ТаблицаКонтекстовОбработок.Добавить(СтрТаблицаКонтекстовОбработок);
		
		Если НЕ ПодключатьОбработкиПринудительно Тогда
			// значит загрузили шаги из предрасчитанного кеша
			Продолжить;
		КонецЕсли;	 
		
		Попытка
			ПараметрыФормы = Новый Структура;
			ФормаОбработки = ПолучитьФорму(ИмяВнутреннейФормы, ПараметрыФормы);
			СтрТаблицаКонтекстовОбработок.Вставить("Обработка", ФормаОбработки);
			МассивСнипетовИзОбработки = ФормаОбработки.ПолучитьСписокТестов(ЭтаФорма);
		Исключение
			Отладка(ПодставитьПараметрыВСтроку(
				Локализовать("Не получилось загрузить снипеты из %1"),
				ИмяВнутреннейФормы
			));
			
			Отладка(ПодставитьПараметрыВСтроку(
				Локализовать("ПолучитьУжеСуществующиеСнипетыИзОбработок:%1"),
				ОписаниеОшибки()
			));
			Продолжить;
		КонецПопытки;
		
		Если МассивСнипетовИзОбработки.Количество() = 0 Тогда
			// добавим пустой снипет, чтобы обработка попала в кэш
			ДобавитьПустойСнипетВТаблицуИзвестныхStepDefinition(ИмяВнутреннейФормы, ВерсияФайла);
			Продолжить;
		КонецЕсли;	
		
		Структура = Новый Структура;
		Структура.Вставить("МассивСнипетовИзОбработки", МассивСнипетовИзОбработки);
		Структура.Вставить("ИмяВнутреннейФормы", ИмяВнутреннейФормы);
		
		МассивВсехСнипетов.Добавить(Структура);
	КонецЦикла;	
	
	Если НЕ ПодключатьОбработкиПринудительно Тогда
		Возврат;
	КонецЕсли;	 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекстСообщенийПользователю", Объект.ТекстСообщенийПользователю);
 	ДобавитьСнипетыСервер(МассивВсехСнипетов, ИмяВнутреннейФормы, ВерсияФайла, БылиОшибки, ДопПараметры);	
КонецПроцедуры

// Подключает обработку и получает из неё снипеты
// Файл - Тип: Файл
&НаКлиенте
Процедура ПодключитьСнипетыИзОбработкиКлиент(Файл, ВерсияФайла, БылиОшибки, ДанныеДляСнипетов, АдресХранилища, ПолучатьСнипеты = Истина)
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("АдресХранилища", АдресХранилища);
	ДопПараметры.Вставить("ВозможнаОптимизацияРаботыСФайлами", ВозможнаОптимизацияРаботыСФайлами);
	
	УниверсальноеПолноеИмя = УниверсальноеПолноеИмяФайла(Файл.ПолноеИмя, Истина);
	ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмя);
	Если ИД = Неопределено Тогда
		БылиОшибки = Ложь;
		Если НЕ ПодключитьКонтекстОбработкиКлиент(Файл.ПолноеИмя, ВерсияФайла, ДопПараметры) Тогда
			Возврат;
		КонецЕсли;	 
		
		ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмя);
	КонецЕсли;	 

	ФормаОбработки = ТаблицаКонтекстовОбработок[ИД].Обработка;
	Если ФормаОбработки = Неопределено Тогда
		ПодключитьКонтекстОбработкиКлиент(Файл.ПолноеИмя,, ДопПараметры);
		ФормаОбработки = ТаблицаКонтекстовОбработок[ИД].Обработка;
	КонецЕсли;	 
	
	Если НЕ ПолучатьСнипеты Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ФормаОбработки = Неопределено Тогда
		Отладка(ПодставитьПараметрыВСтроку(
			Локализовать("Не получилось загрузить снипеты из %1"),
			Файл.ПолноеИмя
		));
		
		ОписаниеОшибки = ОписаниеОшибки();
		Отладка(ПодставитьПараметрыВСтроку(
			Локализовать("ПолучитьУжеСуществующиеСнипетыИзОбработок:%1"),
			ОписаниеОшибки
		));
		Возврат;
	КонецЕсли;	 
	
	Попытка
		МассивСнипетовИзОбработки = ФормаОбработки.ПолучитьСписокТестов(ЭтаФорма);
	Исключение
		Отладка(ПодставитьПараметрыВСтроку(
			Локализовать("Не получилось загрузить снипеты из %1"),
			Файл.ПолноеИмя
		));
		
		ОписаниеОшибки = ОписаниеОшибки();
		Отладка(ПодставитьПараметрыВСтроку(
			Локализовать("ПолучитьУжеСуществующиеСнипетыИзОбработок:%1"),
			ОписаниеОшибки
		));
		Возврат;
	КонецПопытки;
	
	ДанныеОбработки = Новый Структура;
	ДанныеОбработки.Вставить("МассивСнипетовИзОбработки", МассивСнипетовИзОбработки);
	ДанныеОбработки.Вставить("ИмяФайла", Файл.ПолноеИмя);
	ДанныеОбработки.Вставить("ВерсияФайла", ВерсияФайла);
	ДанныеДляСнипетов.Добавить(ДанныеОбработки);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьУжеСуществующиеСнипетыИзОбработок(Знач КаталогФич, ДанныеДляПолученияСнипетов,
	                                                ДополнительныеПараметры,
	                                                МассивВерсийФайловИзТаблицаИзвестныхStepDefinition = Неопределено,
	                                                МассивИменФайловИзТаблицаИзвестныхStepDefinition = Неопределено,
	                                                МассивИменФайловКоторыеСовпалиСКеш = Неопределено)
	
	Файл = Новый Файл(КаталогФич);
	
	НачальныйКаталог = КаталогФич;
	КаталогПоиска    = НачальныйКаталог;
	
	Файл = Новый Файл(НачальныйКаталог);
	Если НРег(Файл.Расширение) = ".feature" Тогда
		КаталогПоиска = Файл.Путь;
	КонецЕсли;	 
	
	Отладка(Локализовать("Ищу снипеты в каталоге") + " " + КаталогПоиска);
	
	ДанныеФайловЗакешированы = Ложь;
	Если ЗапрещеныСинхронныеВызовы И ВозможнаОптимизацияРаботыСФайлами Тогда
		СписокКаталогов = Новый СписокЗначений;
		СписокФайлов    = Новый СписокЗначений;
		НайтиФайлыКомандаСистемы(КаталогПоиска, СписокКаталогов, СписокФайлов, Истина, Неопределено, "*.epf");
		МассивФайлов = Новый Массив;
		Для Каждого Элем Из СписокФайлов Цикл
			МассивФайлов.Добавить(Элем.Значение);
		КонецЦикла;	 
		
	ИначеЕсли ЗапрещеныСинхронныеВызовы Тогда
		МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, КаталогФич, "НайденныеФайлы"); // это файлы по данной библиотеке
		Если МассивФайлов = Неопределено Тогда
			МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "ПоискEPF", "НайденныеФайлы");
		КонецЕсли;	 
	Иначе	
		Если ЗначениеЗаполнено(КаталогПоиска) Тогда
			Если Объект.ИспользоватьКомпонентуVanessaExt И Объект.ПоискФайловСПомощьюКомпонентыVanessaExt И НЕ ЗапрещеныСинхронныеВызовы Тогда
				ДанныеФайловЗакешированы = Истина;
				//МассивФайлов = НайтиФайлыСПомощьюКомпоненты(КаталогПоиска, "*.epf", Истина);
				МассивФайлов = ПрочитатьСтрокуJSON(ВнешняяКомпонентаДляСкриншотов.НайтиФайлы(КаталогПоиска, "*.epf",,Истина, Истина, Ложь));
				Если МассивФайлов =  Неопределено Тогда
					МассивФайлов = Новый Массив;
				КонецЕсли;
				
				Для Каждого Элем Из МассивФайлов Цикл
					Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КешДанныхФайлов") Тогда
						ДополнительныеПараметры.КешДанныхФайлов.Вставить(Элем.path, Элем);
					КонецЕсли;	
				КонецЦикла;	
				
			Иначе	
				МассивФайлов = НайтиФайлы(КаталогПоиска, "*.epf", Истина);
			КонецЕсли;	 
		Иначе	
			МассивФайлов = Новый Массив;
		КонецЕсли;	
	КонецЕсли;	 

	НомерФайла  = 0;
	Для Каждого ОбъектФайл Из МассивФайлов Цикл
		
		Если ДанныеФайловЗакешированы Тогда
			Файл = Новый Файл(ОбъектФайл.path);
		Иначе	
			Файл = ОбъектФайл;
			Если ТипЗнч(ОбъектФайл) <> Тип("Файл") Тогда
				Файл = ОбъектФайл.Файл;
			КонецЕсли;	 
		КонецЕсли;	
		
		НомерФайла = НомерФайла + 1;
		
		Если ДанныеФайловЗакешированы Тогда
			ВерсияФайла = ОбъектФайл.date;
		Иначе 
			ВерсияФайла = ВремяИзмененияФайлаКомандаСистемы(Файл.ПолноеИмя);
		КонецЕсли;	
		
		Если МассивИменФайловКоторыеСовпалиСКеш <> Неопределено 
				И МассивИменФайловКоторыеСовпалиСКеш[ПреобразоватьПутьКФайлуКСтандарту(Файл.ПолноеИмя)] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		УниверсальноеПолноеИмя = УниверсальноеПолноеИмяФайла(Файл.ПолноеИмя);
		Если МассивИменФайловИзТаблицаИзвестныхStepDefinition <> Неопределено Тогда
			ИДМассивИменФайловИзТаблицаИзвестныхStepDefinition = МассивИменФайловИзТаблицаИзвестныхStepDefinition.Найти(УниверсальноеПолноеИмя);
			Если ИДМассивИменФайловИзТаблицаИзвестныхStepDefinition <> Неопределено Тогда
				// значит сравним версию файла
				Если МассивВерсийФайловИзТаблицаИзвестныхStepDefinition[ИДМассивИменФайловИзТаблицаИзвестныхStepDefinition] = ВерсияФайла Тогда
					Отладка(Локализовать("Загрузил снипеты из кеша") + ": " + Файл.ПолноеИмя);
					МассивИменФайловКоторыеСовпалиСКеш.Вставить(УниверсальноеПолноеИмя, Истина);
					
					ЗаполнитьТаблицуКонтекстовОбработокНеПодключаяОбработки(Файл);
					
					Продолжить;
				КонецЕсли;
				
				// значит в кеше уже есть нужные снипеты обработок
				УдалитьИзТаблицаИзвестныхStepDefinitionДанныеПоФайлуКлиент(УниверсальноеПолноеИмя);
					
				ИДМассивИменКонтекстовОбработок = МассивИменКонтекстовОбработок.Найти(Нрег(УниверсальноеПолноеИмя));
				Если ИДМассивИменКонтекстовОбработок <> Неопределено Тогда
					МассивИменКонтекстовОбработок.Удалить(ИДМассивИменКонтекстовОбработок);
					ТаблицаКонтекстовОбработок[ИДМассивИменКонтекстовОбработок].Обработка = Неопределено;
					ТаблицаКонтекстовОбработок.Удалить(ИДМассивИменКонтекстовОбработок);
				КонецЕсли;	 
				
				Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
					ДополнительныеПараметры.Вставить("БылиИзмененияСоставаСнипетов", Истина);
				КонецЕсли;	 
				
				Отладка(Локализовать("Загрузил новую версию") + ": " + Файл.ПолноеИмя);
				
			КонецЕсли;	 
		КонецЕсли;	 
				
		Данные = Новый Структура;
		Данные.Вставить("ИмяФайла", Файл.ПолноеИмя);
		Данные.Вставить("Имя", Файл.Имя);
		Данные.Вставить("ВерсияФайла", ВерсияФайла);
		ДанныеДляПолученияСнипетов.Добавить(Данные);
		
		Если МассивИменФайловКоторыеСовпалиСКеш <> Неопределено Тогда
			МассивИменФайловКоторыеСовпалиСКеш.Вставить(УниверсальноеПолноеИмя, Истина);
		КонецЕсли;	 
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПодключенияБиблиотекШагов(Знач ПомещенныеФайлы, Знач ДополнительныеПараметры) Экспорт
	ПодключитьОбработкиКлиент(ПомещенныеФайлы, ДополнительныеПараметры);
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ДополнительныеПараметры") Тогда
			глСтруктураПараметров.Вставить("ДополнительныеПараметры", ДополнительныеПараметры.ДополнительныеПараметры);
		КонецЕсли;	 
	КонецЕсли;	 
	ОбновитьКешСнипетовНаКлиенте();
	ЗаполнитьДеревоФичПродолжение();
КонецПроцедуры

&НаКлиенте
Процедура ОбходКаталогов(ПутьКаталога, МассивРезультатОбходаКаталогов, Уровень, ДополнительныеПараметры, ТекРодитель, КолЭлементовДобавлено)
	
	Если ЗапрещеныСинхронныеВызовы И НЕ ВозможнаОптимизацияРаботыСФайлами Тогда
		ФайлПутьКаталога = Новый Файл(ПутьКаталога);
		Если НРег(ФайлПутьКаталога.Расширение) = ".feature" Тогда
			НайденныеФайлы = Новый Массив; // вернём одну фичу
			НайденныеФайлы.Добавить(ФайлПутьКаталога);
			ТекРодитель = НайденныеФайлы[0].Путь;
		Иначе	
			НайденныеФайлы = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "ПоискFeature", "НайденныеФайлы");
			Если ТекРодитель = Неопределено И НайденныеФайлы.Количество() > 0 Тогда
				Если ТипЗнч(НайденныеФайлы[0]) = Тип("Структура") Тогда
					ТекРодитель = НайденныеФайлы[0].Файл.Путь;
				Иначе	
					ТекРодитель = НайденныеФайлы[0].Путь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЭтоКаталогКомандаСистемы(ПутьКаталога) Тогда
		СписокКаталогов = Новый СписокЗначений;
		СписокФайлов    = Новый СписокЗначений;
		НайтиФайлыКомандаСистемы(ПутьКаталога, СписокКаталогов, СписокФайлов, Ложь, Неопределено, "*");
		НайденныеФайлы = Новый Массив;
		Для Каждого Элем Из СписокФайлов Цикл
			Если Нрег(Элем.Значение.Расширение) <> ".feature" Тогда
				Продолжить;
			КонецЕсли;	 
			НайденныеФайлы.Добавить(Элем.Значение.ПолноеИмя);
		КонецЦикла;	 
		Для Каждого Элем Из СписокКаталогов Цикл
			НайденныеФайлы.Добавить(Элем.Значение.ПолноеИмя);
		КонецЦикла;	 
	Иначе	
		НайденныеФайлы = Новый Массив; // вернём одну фичу
		ПромФайл = Новый Файл(ПутьКаталога);
		Если НРег(ПромФайл.Расширение) = ".feature" Тогда
			НайденныеФайлы.Добавить(Новый Файл(ПутьКаталога));
		КонецЕсли;
	КонецЕсли;	 
		
	Для каждого ОбъектФайл Из НайденныеФайлы Цикл
		Ф = ОбъектФайл;
		Если ТипЗнч(ф) = Тип("Структура") Тогда
			Ф = ОбъектФайл.Файл; // т.к. для режима запрета синхронных вызовов там будет структура
		ИначеЕсли ТипЗнч(ф) = Тип("Строка") Тогда
			ф = Новый Файл(ОбъектФайл);
		КонецЕсли;	 
		
		Если ЗапрещеныСинхронныеВызовы 
				И НЕ ВозможнаОптимизацияРаботыСФайлами 
				И ф.Путь <> ТекРодитель Тогда
			Продолжить;
		КонецЕсли;  
		
		ЭтоКаталог = ?(Не ЗапрещеныСинхронныеВызовы, ф.ЭтоКаталог(), ф.Расширение = "");
		
		Если ЭтоКаталог Тогда // это каталог
			СтруктураФайла = Новый Структура;
			СтруктураФайла.Вставить("Уровень", Уровень);
			СтруктураФайла.Вставить("Каталог", Истина);
			СтруктураФайла.Вставить("Фича", Ложь);
			СтруктураФайла.Вставить("Имя", ф.Имя);
			СтруктураФайла.Вставить("ПолныйПуть", ф.ПолноеИмя);
			СтруктураФайла.Вставить("УниверсальноеИмя", УниверсальноеПолноеИмяФайла(ф.ПолноеИмя, Истина));
			МассивРезультатОбходаКаталогов.Добавить(СтруктураФайла);
			ТекИД = МассивРезультатОбходаКаталогов.Количество() - 1;
			
			ТекКолЭлементовДобавлено = 0;
			Уровень = Уровень + 1;
			ОбходКаталогов(ДополнитьСлешВПуть(ПутьКаталога) + ф.Имя, МассивРезультатОбходаКаталогов, Уровень, 
				ДополнительныеПараметры, ДополнитьСлешВПуть(ф.ПолноеИмя), ТекКолЭлементовДобавлено);
			Уровень = Уровень - 1;
			
			Если ТекКолЭлементовДобавлено = 0 Тогда
				МассивРезультатОбходаКаталогов.Удалить(ТекИД);
			КонецЕсли;  
			КолЭлементовДобавлено = КолЭлементовДобавлено + ТекКолЭлементовДобавлено;
			
		ИначеЕсли НРег(ф.Расширение) = ".feature" Тогда
			
			ДвоичныеДанные = Неопределено;
			Если НЕ ВозможнаОптимизацияРаботыСФайлами Тогда
				ДвоичныеДанные = Новый ДвоичныеДанные(ф.ПолноеИмя);
			КонецЕсли;	 
			СтруктураФайла = ПолучитьСтруктуруФайлаФичи(Уровень, ф.ИмяБезРасширения, ф.ПолноеИмя, ДвоичныеДанные);
			
			МассивРезультатОбходаКаталогов.Добавить(СтруктураФайла);
			КолЭлементовДобавлено = КолЭлементовДобавлено + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруФайлаФичи(Уровень, ИмяБезРасширения, ПолноеИмя, ДвоичныеДанные)
	СтруктураФайла = Новый Структура;
	СтруктураФайла.Вставить("Уровень", Уровень);
	СтруктураФайла.Вставить("Каталог", Ложь);
	СтруктураФайла.Вставить("Фича", Истина);
	СтруктураФайла.Вставить("Имя", ИмяБезРасширения);
	СтруктураФайла.Вставить("ПолныйПуть", ПолноеИмя);
	СтруктураФайла.Вставить("УниверсальноеИмя", УниверсальноеПолноеИмяФайла(ПолноеИмя, Истина));
	СтруктураФайла.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	
	Возврат СтруктураФайла;
КонецФункции	

&НаСервереБезКонтекста
Процедура УдалитьПустыеКаталогиИзДерева(Дерево)
	КолСтрок = Дерево.Строки.Количество();
	Для Ккк = 0 По КолСтрок - 1 Цикл
		Строка = Дерево.Строки[КолСтрок - 1 - Ккк];
		Если Строка.Тип = "Каталог" Тогда
			Если Строка.Строки.Количество() = 0 Тогда
				Дерево.Строки.Удалить(Строка);
			Иначе	
				УдалитьПустыеКаталогиИзДерева(Строка);
			КонецЕсли;  
		КонецЕсли;  
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПреобразоватьМассивТаблицаУжеСуществующихСценариевВТаблицуЗначений(ИсходныйМассив)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("ИмяСценария");
	Тзн.Колонки.Добавить("ИмяФайла");
	Тзн.Колонки.Добавить("ТаблицаШагов");
	Тзн.Колонки.Добавить("ПолноеИмя");
	Тзн.Колонки.Добавить("ДвоичныеДанные");
	Тзн.Колонки.Добавить("ЭтоСтруктураСценария");
	Тзн.Колонки.Добавить("Снипет", Новый ОписаниеТипов("Строка"));
	Тзн.Колонки.Добавить("НомерСтрокиВФиче");
	Тзн.Колонки.Добавить("ДанныеПеременных");
	Тзн.Индексы.Добавить("Снипет");
	Для каждого Элем Из ИсходныйМассив Цикл
		СтрТзн = Тзн.Добавить();
		
		СтрТзн.ИмяСценария          = Элем.ИмяСценария;
		СтрТзн.ИмяФайла             = Элем.ИмяФайла;
		СтрТзн.ПолноеИмя            = Элем.ПолноеИмя;
		СтрТзн.ТаблицаШагов         = Элем.ТаблицаШагов;
		СтрТзн.ДвоичныеДанные       = Элем.ДвоичныеДанные;
		СтрТзн.ЭтоСтруктураСценария = Элем.ЭтоСтруктураСценария;
		СтрТзн.Снипет               = Элем.Снипет;
		СтрТзн.НомерСтрокиВФиче     = Элем.НомерСтрокиВФиче;
		СтрТзн.ДанныеПеременных     = Элем.ДанныеПеременных;
	КонецЦикла;
	
	Возврат Тзн;
КонецФункции	

&НаСервереБезКонтекста
Процедура УдалитьПустыеКаталоги(МассивКаталоговДляПроверкиНаПустоту)
	Массив = Новый Массив;
	
	Для каждого ВеткаСтроки Из МассивКаталоговДляПроверкиНаПустоту Цикл
		Если ВеткаСтроки.Количество() = 0 Тогда
			ВеткаРодитель = ВеткаСтроки.Родитель.Родитель; // так определяется родитель на один уровень вверх, когда в переменной лежат строки дерева
			Если ВеткаРодитель = Неопределено Тогда
				Продолжить;
			КонецЕсли;	 
			
			Если Массив.Найти(ВеткаРодитель) = Неопределено Тогда
				Массив.Добавить(ВеткаРодитель.Строки);
			КонецЕсли;	 
			
			ВеткаРодитель.Строки.Удалить(ВеткаСтроки.Родитель);
		КонецЕсли;	 
	КонецЦикла;
	
	Если Массив.Количество() > 0 Тогда
		УдалитьПустыеКаталоги(Массив);
	КонецЕсли;	 
КонецПроцедуры

&НаСервереБезКонтекста
Функция УниверсальныеИменаФайлов(Массив)
	Соответствие = Новый Соответствие;
	Ид = -1;
	Для Каждого Элем Из Массив Цикл
		Ид = Ид + 1;
		Соответствие.Вставить(Элем.УниверсальноеИмя, Ид);
	КонецЦикла;	 
	
	Возврат Соответствие;
КонецФункции	 

&НаСервере
// Нельзя менять директиву на &НаСервереБезКонтекста, т.к. тогда перестанет присваиваться переменная ТекущийЗагружаемыйФичаФайл.
// Также надо понимать, что ЗаполнитьСтрокиДереваФичамиСервер вызывается из ЗаполнитьДеревоЗначенийПоМассивуСервер,
// которая вызывается &НаСервере
Процедура ЗаполнитьСтрокиДереваФичамиСервер(Дерево, FeatureReader, ТзнТаблицаИзвестныхStepDefinition, СтруктураПараметров)
	МассивСтрокДляУдаления = Новый Массив;
	Для Каждого Строка Из Дерево.Строки Цикл
		Если Строка.Тип <> "Фича" Тогда
			ЗаполнитьСтрокиДереваФичамиСервер(Строка, FeatureReader, ТзнТаблицаИзвестныхStepDefinition, СтруктураПараметров);
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева", Ложь);
			
		ТекущийЗагружаемыйФичаФайл = Строка.ПолныйПуть;
		СтруктураПараметров.Вставить("ТаблицаИзвестныхStepDefinition", ТзнТаблицаИзвестныхStepDefinition);
			
		Если СтруктураПараметров.КешЗагрузкиФич = Неопределено Тогда
			СтруктураПараметров.КешЗагрузкиФич = Новый Соответствие;
		ИначеЕсли ТипЗнч(СтруктураПараметров.КешЗагрузкиФич) = Тип("Строка") Тогда
			Адрес = СтруктураПараметров.КешЗагрузкиФич;
			СтруктураПараметров.Вставить("КешЗагрузкиФич", ПолучитьИзВременногоХранилища(Адрес));
			УдалитьИзВременногоХранилища(Адрес);
		КонецЕсли;	 
		
		Если СтруктураПараметров.КешЗагрузкиФич = Неопределено Тогда
			СтруктураПараметров.КешЗагрузкиФич = Новый Соответствие;
		КонецЕсли;	 
		
		Если СтруктураПараметров.КешПараметрыВСтроке = Неопределено Тогда
			СтруктураПараметров.КешПараметрыВСтроке = Новый Соответствие;
		ИначеЕсли ТипЗнч(СтруктураПараметров.КешПараметрыВСтроке) = Тип("Строка") Тогда
			Адрес = СтруктураПараметров.КешПараметрыВСтроке;
			СтруктураПараметров.Вставить("КешПараметрыВСтроке", ПолучитьИзВременногоХранилища(Адрес));
			УдалитьИзВременногоХранилища(Адрес);
		КонецЕсли;	 
		
		Если СтруктураПараметров.КешПараметрыВСтроке = Неопределено Тогда
			СтруктураПараметров.КешПараметрыВСтроке = Новый Соответствие;
		КонецЕсли;	 
		
		Если СтруктураПараметров.КешРассчитатьПараметрыТаблицы = Неопределено Тогда
			СтруктураПараметров.КешРассчитатьПараметрыТаблицы = Новый Соответствие;
		ИначеЕсли ТипЗнч(СтруктураПараметров.КешРассчитатьПараметрыТаблицы) = Тип("Строка") Тогда
			Адрес = СтруктураПараметров.КешРассчитатьПараметрыТаблицы;
			СтруктураПараметров.Вставить("КешРассчитатьПараметрыТаблицы", ПолучитьИзВременногоХранилища(Адрес));
			УдалитьИзВременногоХранилища(Адрес);
		КонецЕсли;	 
		
		Если СтруктураПараметров.КешРассчитатьПараметрыТаблицы = Неопределено Тогда
			СтруктураПараметров.КешРассчитатьПараметрыТаблицы = Новый Соответствие;
		КонецЕсли;	 
		
		Если СтруктураПараметров.КешОпределенияТипа = Неопределено Тогда
			СтруктураПараметров.КешОпределенияТипа = Новый Соответствие;
		ИначеЕсли ТипЗнч(СтруктураПараметров.КешОпределенияТипа) = Тип("Строка") Тогда
			Адрес = СтруктураПараметров.КешОпределенияТипа;
			СтруктураПараметров.Вставить("КешОпределенияТипа", ПолучитьИзВременногоХранилища(Адрес));
			УдалитьИзВременногоХранилища(Адрес);
		КонецЕсли;	 
		
		Если СтруктураПараметров.КешОпределенияТипа = Неопределено Тогда
			СтруктураПараметров.КешОпределенияТипа = Новый Соответствие;
		КонецЕсли;	 
		
		Если СтруктураПараметров.КешПоискаКлючевыхСлов = Неопределено Тогда
			СтруктураПараметров.КешПоискаКлючевыхСлов = Новый Соответствие;
		ИначеЕсли ТипЗнч(СтруктураПараметров.КешПоискаКлючевыхСлов) = Тип("Строка") Тогда
			Адрес = СтруктураПараметров.КешПоискаКлючевыхСлов;
			СтруктураПараметров.Вставить("КешПоискаКлючевыхСлов", ПолучитьИзВременногоХранилища(Адрес));
			УдалитьИзВременногоХранилища(Адрес);
		КонецЕсли;	 
		
		Если СтруктураПараметров.КешПоискаКлючевыхСлов = Неопределено Тогда
			СтруктураПараметров.КешПоискаКлючевыхСлов = Новый Соответствие;
		КонецЕсли;	 
		
		FeatureReader.ЗагрузитьФичу(Строка.ПолныйПуть, Строка.Строки, СтруктураПараметров);
		СтруктураПараметров.Вставить("ТаблицаИзвестныхStepDefinition", Неопределено);
		
		UID = Новый УникальныйИдентификатор;
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СтруктураПараметров.КешЗагрузкиФич, UID);
		СтруктураПараметров.Вставить("КешЗагрузкиФич", АдресВременногоХранилища);
		
		UID = Новый УникальныйИдентификатор;
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СтруктураПараметров.КешПараметрыВСтроке, UID);
		СтруктураПараметров.Вставить("КешПараметрыВСтроке", АдресВременногоХранилища);
		
		UID = Новый УникальныйИдентификатор;
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СтруктураПараметров.КешРассчитатьПараметрыТаблицы, UID);
		СтруктураПараметров.Вставить("КешРассчитатьПараметрыТаблицы", АдресВременногоХранилища);
		
		UID = Новый УникальныйИдентификатор;
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СтруктураПараметров.КешОпределенияТипа, UID);
		СтруктураПараметров.Вставить("КешОпределенияТипа", АдресВременногоХранилища);
		
		UID = Новый УникальныйИдентификатор;
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СтруктураПараметров.КешПоискаКлючевыхСлов, UID);
		СтруктураПараметров.Вставить("КешПоискаКлючевыхСлов", АдресВременногоХранилища);
		
		Если СтруктураПараметров.УдалитьСтрокуФичиИзДерева Тогда
			СтруктураРодительПотомок = Новый Структура;
			СтруктураРодительПотомок.Вставить("СтрокиГдеНаходитсяФича", Дерево.Строки);
			СтруктураРодительПотомок.Вставить("СтрокаФичи", Строка);
			МассивСтрокДляУдаления.Добавить(СтруктураРодительПотомок);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ОшибкиЗагрузкиФич")
			И ТипЗнч(СтруктураПараметров.ОшибкиЗагрузкиФич) = Тип("Массив") Тогда
			Для Каждого Стр Из СтруктураПараметров.ОшибкиЗагрузкиФич Цикл
				ЗаписатьЛогВЖРОшибкаСервер("Ошибка загрузки фича файлов", Стр);
			КонецЦикла;	 
		КонецЕсли;	 

	КонецЦикла;

	МассивКаталоговДляПроверкиНаПустоту = СтруктураПараметров.МассивКаталоговДляПроверкиНаПустоту;
	Для каждого Элем Из МассивСтрокДляУдаления Цикл
		Элем.СтрокиГдеНаходитсяФича.Удалить(Элем.СтрокаФичи);
		
		Если МассивКаталоговДляПроверкиНаПустоту.Найти(Элем.СтрокиГдеНаходитсяФича) = Неопределено Тогда
			МассивКаталоговДляПроверкиНаПустоту.Добавить(Элем.СтрокиГдеНаходитсяФича);
		КонецЕсли;	 
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроставитьОтметкуБрейкпоинтовРекурсивно(Дерево, Брейкпоинты, ИспользоватьРедакторVanessaEditor)
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если СтрокаДерева.Тип = "Шаг" Тогда
			Если ИспользоватьРедакторVanessaEditor Тогда
				Если Брейкпоинты.Найти(СтрокаДерева.НомерСтрокиВФиче) <> Неопределено Тогда
					СтрокаДерева.Брейкпоинт = Истина;
				КонецЕсли;	 
			Иначе	
				Если Брейкпоинты.Найти(СтрокаДерева.ПолныйПуть) <> Неопределено Тогда
					СтрокаДерева.Брейкпоинт = Истина;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		ПроставитьОтметкуБрейкпоинтовРекурсивно(СтрокаДерева, Брейкпоинты, ИспользоватьРедакторVanessaEditor);
	КонецЦикла;	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроставитьОтметкуБрейкпоинтов(Дерево, СтруктураПараметров)
	ПроставитьОтметкуБрейкпоинтовРекурсивно(Дерево, СтруктураПараметров.Брейкпоинты,
		СтруктураПараметров.ИспользоватьРедакторVanessaEditor);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьFeatureReader(КаталогИнструментов, ДвДанныеvbFeatureReader, ВременноеИмяФайла)
	
	ПутьКОбработке = ОбъединитьПути(КаталогИнструментов, "lib", "FeatureReader",,, "vbFeatureReader.epf");
	ФайлvbFeatureReader = Новый Файл(ПутьКОбработке);
	ВременноеИмяФайла = Неопределено;
	Если Не ФайлvbFeatureReader.Существует() Тогда
		ВременноеИмяФайла = ПолучитьИмяВременногоФайла("epf");
		ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
		FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла, Ложь);
	Иначе	
		FeatureReader = ВнешниеОбработки.Создать(ФайлvbFeatureReader.ПолноеИмя, Ложь);
	КонецЕсли;	 
	
	Возврат FeatureReader;
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьДеревоЗначенийПоМассивуСервер(МассивРезультатОбходаКаталогов, Знач ДвДанныеvbFeatureReader, СтруктураПараметров)
	
	Если НЕ СтруктураПараметров.ВыполнениеСценариевБезОткрытияФормы Тогда
		СохранитьИСкопироватьНедавноЗагруженныеФичиВИнтерфейс(СтруктураПараметров.НедавноЗагруженныеФичи, Объект.РежимСамотестирования);
	КонецЕсли;	 
	
	КешСнипетовИзХранилищаЗначений(СтруктураПараметров);
	
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	ТзнТаблицаИзвестныхStepDefinition.Сортировать("ТипШага,ПредставлениеТеста");
	ТзнТаблицаИзвестныхStepDefinition.Индексы.Добавить("СтрокаДляПоиска");

	ТзнКешStepDefinition = РеквизитФормыВЗначение("КешStepDefinition");
	ТзнКешStepDefinition.Индексы.Добавить("ИмяШагаБезКлючевогоСлова");
	СтруктураПараметров.Вставить("КешStepDefinition", ТзнКешStepDefinition);
	
	Дерево = ОбъектСервер.ДеревоТестов;
	
	Дерево.Строки.Очистить();
	ТекДерево  = Дерево;
	ТекУровень = 0;
	
	Если Дерево.Колонки.Найти("МассивСценариевЗащитаОтЗацикливания") = Неопределено Тогда
		Дерево.Колонки.Добавить("МассивСценариевЗащитаОтЗацикливания");
	КонецЕсли;	 
	Если Дерево.Колонки.Найти("ЗначениеОтступа") = Неопределено Тогда
		Дерево.Колонки.Добавить("ЗначениеОтступа", Новый ОписаниеТипов("Число"));
	КонецЕсли;	 
	
	Для каждого Элем Из МассивРезультатОбходаКаталогов Цикл
		Если Элем.Уровень > ТекУровень Тогда
			ТекУровень = Элем.Уровень;
			НовСтр     = ТекДерево.Строки.Добавить();
			ТекДерево  = НовСтр;
		ИначеЕсли Элем.Уровень < ТекУровень Тогда
			Разн = ТекУровень - Элем.Уровень;
			Для Ккк = 1 По Разн Цикл
				НовСтр = НовСтр.Родитель;
			КонецЦикла;
			НовСтр     = НовСтр.Родитель.Строки.Добавить();
			ТекУровень = Элем.Уровень;
			ТекДерево  = НовСтр;
		Иначе	
			НовСтр     = ТекДерево.Родитель.Строки.Добавить();
			ТекДерево  = НовСтр;
		КонецЕсли;  
		
		Если Элем.Каталог Тогда
			
			НовСтр.Тип        = "Каталог";
			НовСтр.ПолныйПуть = Элем.ПолныйПуть;
			НовСтр.Имя        = Элем.Имя;
		ИначеЕсли Элем.Фича Тогда
			
			НовСтр.Тип         = "Фича";
			НовСтр.ТипКартинки = 1;
			НовСтр.ПолныйПуть  = Элем.ПолныйПуть;
			НовСтр.Имя         = Элем.Имя;
		КонецЕсли;  
		
	КонецЦикла;
	
	УдалитьПустыеКаталогиИзДерева(Дерево);
	
	Дерево.Строки.Сортировать("ПолныйПуть", Истина);

	ВременноеИмяФайла = Неопределено;
	Если ОбъектСервер.ВерсияПоставки = "standart" Тогда
		FeatureReader = СоздатьFeatureReader(Объект.КаталогИнструментов, ДвДанныеvbFeatureReader, ВременноеИмяФайла);
	Иначе	
		FeatureReader = ОбъектСервер;
	КонецЕсли;	 
	
	Если Не СтруктураПараметров.Свойство("ТаблицаУжеСуществующихСценариев") Тогда
		ТаблицаУжеСуществующихСценариевСервер = ПреобразоватьМассивТаблицаУжеСуществующихСценариевВТаблицуЗначений(СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ);
		СтруктураПараметров.Вставить("ТаблицаУжеСуществующихСценариев", ТаблицаУжеСуществующихСценариевСервер);
	КонецЕсли;	 
	
	МассивКаталоговДляПроверкиНаПустоту = Новый Массив;
	СтруктураПараметров.Вставить("МассивКаталоговДляПроверкиНаПустоту", МассивКаталоговДляПроверкиНаПустоту);
	
	СтруктураПараметров.Вставить("УниверсальныеИменаФайлов", УниверсальныеИменаФайлов(МассивРезультатОбходаКаталогов));
	СтруктураПараметров.Вставить("СтекВызова", Новый Массив);
	ЗаполнитьСтрокиДереваФичамиСервер(Дерево, FeatureReader, ТзнТаблицаИзвестныхStepDefinition, СтруктураПараметров);
	
	Для Каждого Элем Из СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ Цикл
		СтрокаТаблицаУжеСуществующихСценариев = СтруктураПараметров.ТаблицаУжеСуществующихСценариев.Найти(Элем.ИмяСценария, "ИмяСценария");
		Если СтрокаТаблицаУжеСуществующихСценариев <> Неопределено Тогда
			// обновим снипеты для сценариев, которые описаны в фича файлах как экспортные
			Элем.Снипет = СтрокаТаблицаУжеСуществующихСценариев.Снипет;
		КонецЕсли;	 
	КонецЦикла;	 
	
	УдалитьПустыеКаталоги(МассивКаталоговДляПроверкиНаПустоту);
	СтруктураПараметров.МассивКаталоговДляПроверкиНаПустоту = Неопределено;
	СтруктураПараметров.ТаблицаУжеСуществующихСценариев = Неопределено;
	Если СтруктураПараметров.Свойство("КешФич") Тогда
		СтруктураПараметров.КешФич = Неопределено;
	КонецЕсли;	 

	Если СтруктураПараметров.Брейкпоинты.Количество() > 0 Тогда
		ПроставитьОтметкуБрейкпоинтов(Дерево, СтруктураПараметров);
	КонецЕсли;	 

	Если ВременноеИмяФайла <> Неопределено Тогда
		УдалитьФайлы(ВременноеИмяФайла);
	КонецЕсли;	 

	ЗаполнитьИДСтрокиДереваСервер(СтруктураПараметров, Дерево);	

	ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition, "ТаблицаИзвестныхStepDefinition");
	ЗначениеВРеквизитФормы(ТзнКешStepDefinition, "КешStepDefinition");
	ЗначениеВРеквизитФормы(ОбъектСервер, "Объект");
	
	ПараметрыДляСохраненияНастроек = ПараметрыДляСохраненияНастроекСервер(СтруктураДляСохраненияНастроекСервер());
	
	СохранитьНастройкиВХранилище("ТаблицаИзвестныхStepDefinition", ТаблицаИзвестныхStepDefinition, ПараметрыДляСохраненияНастроек);
	СохранитьНастройкиВХранилище("КешStepDefinition", КешStepDefinition, ПараметрыДляСохраненияНастроек);
	
	СтруктураПараметров.Вставить("КешStepDefinition", Неопределено);
	СтруктураПараметров.Вставить("ТаблицаОбластей", Неопределено);	
	СтруктураПараметров.Вставить("ТаблицаПеревода", Неопределено);	
	
	ВывестиСтатистикуНаСервере(Дерево, СтруктураПараметров.ЗапускИзСППР);
	
	КешСнипетовВХранилищаЗначений(СтруктураПараметров);
	
	СтруктураПараметровНовый = Новый Структура;
	СтруктураПараметровНовый.Вставить("КешДанныеПеревода", СтруктураПараметров.КешДанныеПеревода);
	СтруктураПараметровНовый.Вставить("КешСнипетов", СтруктураПараметров.КешСнипетов);
	СтруктураПараметровНовый.Вставить("ТаблицаУжеСуществующихСценариевУФ", СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ);
	СтруктураПараметровНовый.Вставить("БылиОшибкиЗагрузкиФич", СтруктураПараметров.БылиОшибкиЗагрузкиФич);
	СтруктураПараметровНовый.Вставить("КешЗагрузкиФич", СтруктураПараметров.КешЗагрузкиФич);
	СтруктураПараметровНовый.Вставить("КешПараметрыВСтроке", СтруктураПараметров.КешПараметрыВСтроке);
	СтруктураПараметровНовый.Вставить("КешРассчитатьПараметрыТаблицы", СтруктураПараметров.КешРассчитатьПараметрыТаблицы);
	СтруктураПараметровНовый.Вставить("КешОпределенияТипа", СтруктураПараметров.КешОпределенияТипа);
	СтруктураПараметровНовый.Вставить("КешПоискаКлючевыхСлов", СтруктураПараметров.КешПоискаКлючевыхСлов);
	СтруктураПараметровНовый.Вставить("ОшибкиЗагрузкиФич", СтруктураПараметров.ОшибкиЗагрузкиФич);
	СтруктураПараметровНовый.Вставить("НадоОбновитьВставкиVanessaEditor", СтруктураПараметров.НадоОбновитьВставкиVanessaEditor);
	СтруктураПараметровНовый.Вставить("ДанныеСекцииПеременные", СтруктураПараметров.ДанныеСекцииПеременные);
	
	Если СтруктураПараметров.Свойство("ДляПоискаПеревод") Тогда
		СтруктураПараметровНовый.Вставить("ДляПоискаПеревод", СтруктураПараметров.ДляПоискаПеревод);
	КонецЕсли;	 
	Если СтруктураПараметров.Свойство("ДляПоискаРусский") Тогда
		СтруктураПараметровНовый.Вставить("ДляПоискаРусский", СтруктураПараметров.ДляПоискаРусский);
	КонецЕсли;	 
	Если СтруктураПараметров.Свойство("ДанныеОшибки") Тогда
		СтруктураПараметровНовый.Вставить("ДанныеОшибки", СтруктураПараметров.ДанныеОшибки);
	КонецЕсли;	 
	Если СтруктураПараметров.Свойство("ДанныеОшибокДляРедактора") Тогда
		СтруктураПараметровНовый.Вставить("ДанныеОшибокДляРедактора", СтруктураПараметров.ДанныеОшибокДляРедактора);
	КонецЕсли;	 
	Если СтруктураПараметров.Свойство("ЗаполнитьДеревоФичПродолжение2") Тогда
		СтруктураПараметровНовый.Вставить("ЗаполнитьДеревоФичПродолжение2", СтруктураПараметров.ЗаполнитьДеревоФичПродолжение2);
	КонецЕсли;	 
	Если СтруктураПараметров.Свойство("СделатьПереходкКТексту") Тогда
		СтруктураПараметровНовый.Вставить("СделатьПереходкКТексту", СтруктураПараметров.СделатьПереходкКТексту);
	КонецЕсли;	 
	
	СтруктураПараметров = Неопределено;
	СтруктураПараметров = СтруктураПараметровНовый;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкопироватьРекурсивноСценарий(Родитель, СтрокаБаза, Сценарий)
	
	Для каждого Строка из СтрокаБаза.Строки Цикл
		Если Строка.Тип="Сценарий" 
			и НЕ (Строка.ДопТип = "Контекст") 
			И НЕ(Строка.Имя = Сценарий) Тогда
			Продолжить;
		КонецЕсли;
			
		 НоваяСтрока = Родитель.Строки.Добавить();
		 ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		 Если Строка.Строки.Количество() > 0 Тогда 
			 СкопироватьРекурсивноСценарий(НоваяСтрока,Строка, Сценарий);
		 КонецЕсли;
		//КонецЕсли;
			
		 
	КонецЦикла;

	

КонецПроцедуры // СкопироватьРекурсивноСценарий(НоваяСтрока, Строка, Элемент.Представление)()

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыДляСохраненияНастроекСервер(Знач СтруктураНастроек)
	РежимСамотестирования = СтруктураНастроек.РежимСамотестирования;
	ВерсияПоставки = СтруктураНастроек.ВерсияПоставки;
	ЭтоРежимОбучения = СтруктураНастроек.ЭтоРежимОбучения;
	
	Структура = Новый Структура;
	Структура.Вставить("ПрефиксИнструментаДляСохраненияНастроек", ПолучитьПрефиксИнструмента(РежимСамотестирования, ВерсияПоставки, ЭтоРежимОбучения));
	Структура.Вставить("ИДДляОбщегоСохраненияНастроек", ПолучитьИДСохраненияОбщихНастроек(РежимСамотестирования, ВерсияПоставки, ЭтоРежимОбучения));
	Структура.Вставить("ВыполнениеСценариевБезОткрытияФормы", СтруктураНастроек.ВыполнениеСценариевБезОткрытияФормы);
	
	Возврат Структура; 
КонецФункции	 

&НаКлиенте
Функция ПараметрыДляСохраненияНастроек()
	Структура = Новый Структура;
	Структура.Вставить("ПрефиксИнструментаДляСохраненияНастроек", ПрефиксИнструментаДляСохраненияНастроек);
	Структура.Вставить("ИДДляОбщегоСохраненияНастроек", ИДДляОбщегоСохраненияНастроек);
	Структура.Вставить("ВыполнениеСценариевБезОткрытияФормы", ВыполнениеСценариевБезОткрытияФормы);
	
	Возврат Структура; 
КонецФункции	 

&НаКлиенте
Функция ОпределитьВозможнаОптимизацияЗагрузкиФичи(ДанныеТекущейФичи, ДанныеИзмененныхСтрок, МассивДействий)
	
	Если Объект.ИспользоватьКомпонентуVanessaExt И Объект.ИспользоватьПарсерGherkinИзКомпонентыVanessaExt Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если ДанныеВозможнаОптимизацияЗагрузкиФичи = Неопределено Тогда
		Если Объект.РежимСамотестирования Тогда
			ЗаписатьЛогВЖРИнформация("ПроверкаВозможностиОптимизацииЗагрузкиФич.ДанныеВозможнаОптимизацияЗагрузкиФичи", Неопределено);
		КонецЕсли;	 
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеВозможнаОптимизацияЗагрузкиФичи.ИспользоватьПарсерGherkinИзКомпонентыVanessaExt <> Объект.ИспользоватьПарсерGherkinИзКомпонентыVanessaExt Тогда
		Если Объект.РежимСамотестирования Тогда
			ЗаписатьЛогВЖРИнформация("ПроверкаВозможностиОптимизацииЗагрузкиФич.ИспользоватьПарсерGherkinИзКомпонентыVanessaExt",
				"ИспользоватьПарсерGherkinИзКомпонентыVanessaExt=" + Объект.ИспользоватьПарсерGherkinИзКомпонентыVanessaExt);
		КонецЕсли;	 
		Возврат Ложь;
	КонецЕсли;	 
	
	Если ДанныеВозможнаОптимизацияЗагрузкиФичи.КоличествоИзвестныхШагов <> ТаблицаИзвестныхStepDefinition.Количество() Тогда
		Если Объект.РежимСамотестирования Тогда
			ЗаписатьЛогВЖРИнформация("ПроверкаВозможностиОптимизацииЗагрузкиФич.ИзменилосьКоличествошагов",
				"ДанныеВозможнаОптимизацияЗагрузкиФичи.КоличествоИзвестныхШагов=" + ДанныеВозможнаОптимизацияЗагрузкиФичи.КоличествоИзвестныхШагов
				+ ", ТаблицаИзвестныхStepDefinition.Количество()=" + ТаблицаИзвестныхStepDefinition.Количество());
		КонецЕсли;	 
		Возврат Ложь;
	КонецЕсли;	 
	
	Если Объект.КаталогФич <> ДанныеВозможнаОптимизацияЗагрузкиФичи.КаталогФич Тогда
		// Изменилась фича
		Если Объект.РежимСамотестирования Тогда
			ЗаписатьЛогВЖРИнформация("ПроверкаВозможностиОптимизацииЗагрузкиФич.ИзменилсяФичаФайл", Неопределено);
		КонецЕсли;	 
		Возврат Ложь;
	КонецЕсли;	 
	
	Если ДанныеТекущейФичи.ТаблицаСтрокФичи = Неопределено Тогда
		Если Объект.РежимСамотестирования Тогда
			ЗаписатьЛогВЖРИнформация("ПроверкаВозможностиОптимизацииЗагрузкиФич.ТаблицаСтрокФичи", Неопределено);
		КонецЕсли;	 
		Возврат Ложь;
	КонецЕсли;	 
	
	Если ДанныеВозможнаОптимизацияЗагрузкиФичи.ДанныеФичи = Неопределено Тогда
		Если Объект.РежимСамотестирования Тогда
			ЗаписатьЛогВЖРИнформация("ПроверкаВозможностиОптимизацииЗагрузкиФич.ДанныеФичи", Неопределено);
		КонецЕсли;	 
		Возврат Ложь;
	КонецЕсли;	 
	
	Если ДанныеВозможнаОптимизацияЗагрузкиФичи.ДанныеФичи.ТаблицаСтрокФичи = Неопределено Тогда
		Если Объект.РежимСамотестирования Тогда
			ЗаписатьЛогВЖРИнформация("ПроверкаВозможностиОптимизацииЗагрузкиФич.ДанныеФичи.ТаблицаСтрокФичи", Неопределено);
		КонецЕсли;	 
		Возврат Ложь;
	КонецЕсли;	 
	
	Если ДанныеТекущейФичи.ТаблицаСтрокФичи.Количество() <> ДанныеВозможнаОптимизацияЗагрузкиФичи.ДанныеФичи.ТаблицаСтрокФичи.Количество() Тогда
		Если Объект.РежимСамотестирования Тогда
			ЗаписатьЛогВЖРИнформация("ПроверкаВозможностиОптимизацииЗагрузкиФич.ТаблицаСтрокФичи.Количество", Неопределено);
		КонецЕсли;	 
		Возврат Ложь;
	КонецЕсли;	 
	
	ТекТаблицаСтрокФичи  = ДанныеТекущейФичи.ТаблицаСтрокФичи;
	ПредТаблицаСтрокФичи = ДанныеВозможнаОптимизацияЗагрузкиФичи.ДанныеФичи.ТаблицаСтрокФичи;
	
	ДанныеИзмененныхСтрок = Новый Массив;
	
	Для Сч = 0 По ДанныеТекущейФичи.ТаблицаСтрокФичи.Количество() - 1 Цикл
		ТекСтр  = ТекТаблицаСтрокФичи[Сч];
		ПредСтр = ПредТаблицаСтрокФичи[Сч];
		
		Если Найти(ТекСтр, ":") > 0 И ЭтоОпределениеСтруктурыСценария(НРег(ТекСтр)) Тогда
			Если Объект.РежимСамотестирования Тогда
				ЗаписатьЛогВЖРИнформация("ПроверкаВозможностиОптимизацииЗагрузкиФич.ЭтоОпределениеСтруктурыСценария", Неопределено);
			КонецЕсли;	 
			Возврат Ложь;
		КонецЕсли;	 
		
		Если ТекСтр <> ПредСтр Тогда
			Если ЭтоЗакомментированнаяСтрокаСценария(ТекСтр) Тогда
				Если Объект.РежимСамотестирования Тогда
					ЗаписатьЛогВЖРИнформация("ПроверкаВозможностиОптимизацииЗагрузкиФич.ЭтоЗакомментированнаяСтрокаСценария", Неопределено);
				КонецЕсли;	 
				Возврат Ложь;
			КонецЕсли;	 
			
			Если ПустаяСтрока(ТекСтр) Тогда
				Если Объект.РежимСамотестирования Тогда
					ЗаписатьЛогВЖРИнформация("ПроверкаВозможностиОптимизацииЗагрузкиФич.ПустаяСтрока", Неопределено);
				КонецЕсли;	 
				Возврат Ложь;
			КонецЕсли;	 
			
			ТекСтрДлинаСокрЛ = СтрДлина(СокрЛ(ТекСтр));
			ПредСтрДлинаСокрЛ = СтрДлина(СокрЛ(ПредСтр));
			РазмерОтступаТекСтр = СтрДлина(ТекСтр) - ТекСтрДлинаСокрЛ;
			РазмерОтступаПредСтр = СтрДлина(ПредСтр) - ПредСтрДлинаСокрЛ;
			Если РазмерОтступаТекСтр <> РазмерОтступаПредСтр Тогда
				Если Объект.РежимСамотестирования Тогда
					ЗаписатьЛогВЖРИнформация("ПроверкаВозможностиОптимизацииЗагрузкиФич.ИзменилисьОтступыСтроки", Неопределено);
				КонецЕсли;	 
				Возврат Ложь;
			КонецЕсли;	 
			
			ИзмененнаяСтрока = Новый Структура;
			ИзмененнаяСтрока.Вставить("ПредыдущаяСтрока", ПредСтр);
			ИзмененнаяСтрока.Вставить("ТекущаяСтрока", ТекСтр);
			ИзмененнаяСтрока.Вставить("НомерСтрокиВФиче", Сч + 1);
			ИзмененнаяСтрока.Вставить("Обработана", Ложь);
			
			ДанныеИзмененныхСтрок.Добавить(ИзмененнаяСтрока);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Для Каждого ДанныеПодсценария Из ДанныеВозможнаОптимизацияЗагрузкиФичи.ДанныеПодсценариев Цикл
		ВремяИзмененияФайла = ВремяИзмененияФайлаКомандаСистемы(ДанныеПодсценария.Ключ);
		Если ВремяИзмененияФайла <> ДанныеПодсценария.Значение Тогда
			Если Объект.РежимСамотестирования Тогда
				ЗаписатьЛогВЖРИнформация("ПроверкаВозможностиОптимизацииЗагрузкиФич.ВремяИзмененияФайла", Неопределено);
			КонецЕсли;	 
			Возврат Ложь;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Возврат Истина;
	
КонецФункции	 

&НаКлиенте
Процедура ЗаполнитьДанныеВозможнаОптимизацияЗагрузкиФичи(СтруктураПараметров, ДанныеФичи, МассивДействий)
	Если ДанныеВозможнаОптимизацияЗагрузкиФичи = Неопределено Тогда
		ДанныеВозможнаОптимизацияЗагрузкиФичи = Новый Структура;
	КонецЕсли;	 
	ДанныеВозможнаОптимизацияЗагрузкиФичи.Вставить("ИспользоватьПарсерGherkinИзКомпонентыVanessaExt", Объект.ИспользоватьПарсерGherkinИзКомпонентыVanessaExt);
	ДанныеВозможнаОптимизацияЗагрузкиФичи.Вставить("КаталогФич", Объект.КаталогФич);
	ДанныеВозможнаОптимизацияЗагрузкиФичи.Вставить("ДанныеФичи", ДанныеФичи);
	ДанныеВозможнаОптимизацияЗагрузкиФичи.Вставить("КоличествоИзвестныхШагов", ТаблицаИзвестныхStepDefinition.Количество());
	
	ДанныеПодсценариев = ДанныеПодсценариевПоДереву(МассивДействий);
	ДанныеВозможнаОптимизацияЗагрузкиФичи.Вставить("ДанныеПодсценариев", ДанныеПодсценариев);
	
	Если СтруктураПараметров.Свойство("ДляПоискаПеревод") Тогда
		ДанныеВозможнаОптимизацияЗагрузкиФичи.Вставить("ДляПоискаПеревод", СтруктураПараметров.ДляПоискаПеревод);
	КонецЕсли;	 
	Если СтруктураПараметров.Свойство("ДляПоискаРусский") Тогда
		ДанныеВозможнаОптимизацияЗагрузкиФичи.Вставить("ДляПоискаРусский", СтруктураПараметров.ДляПоискаРусский);
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьМодульПарсерФич()
	ПараметрыФормы = Новый Структура;
	ФормаПарсерФич = ПолучитьФорму(ПолучитьИмяОбработкиVA() + ".Форма.ПарсерФич", ПараметрыФормы, ЭтаФорма);
	ФормаПарсерФич.ИнициализацияФормы(ЭтаФорма);
	ЗарегистрироватьМодульДляОтключения(ФормаПарсерФич);
	Возврат ФормаПарсерФич;
КонецФункции	 

&НаКлиенте
Функция ПолучитьМодульРедакторТекста()
	ПараметрыФормы = Новый Структура;
	ФормаМодульРедактора = ПолучитьФорму(ПолучитьИмяОбработкиVA() + ".Форма.РедакторТекста", ПараметрыФормы, ЭтаФорма);
	ФормаМодульРедактора.ИнициализацияФормы(ЭтаФорма);
	ЗарегистрироватьМодульДляОтключения(ФормаМодульРедактора);
	Возврат ФормаМодульРедактора;
КонецФункции	 

&НаКлиенте
Функция ПолучитьМодульРаботаСGit()
	ПараметрыФормы = Новый Структура;
	ФормаМодульРаботаСGit = ПолучитьФорму(ПолучитьИмяОбработкиVA() + ".Форма.РаботаСGit", ПараметрыФормы, ЭтаФорма);
	ФормаМодульРаботаСGit.ИнициализацияФормы(ЭтаФорма);
	ЗарегистрироватьМодульДляОтключения(ФормаМодульРаботаСGit);
	Возврат ФормаМодульРаботаСGit;
КонецФункции	 

&НаКлиенте
Функция ПолучитьМодульПарсерGherkin()
	ПараметрыФормы = Новый Структура;
	ФормаМодульПарсерGherkin = ПолучитьФорму(ПолучитьИмяОбработкиVA() + ".Форма.ПарсерGherkin", ПараметрыФормы, ЭтаФорма);
	ФормаМодульПарсерGherkin.ИнициализацияФормы(ЭтаФорма);
	ЗарегистрироватьМодульДляОтключения(ФормаМодульПарсерGherkin);
	Возврат ФормаМодульПарсерGherkin;
КонецФункции	 

&НаКлиенте
Функция ПолучитьМодульОбщегоНазначенияVA()
	ПараметрыФормы = Новый Структура;
	ФормаМодульОбщегоНазначенияVA = ПолучитьФорму(ПолучитьИмяОбработкиVA() + ".Форма.ОбщегоНазначенияVA", ПараметрыФормы, ЭтаФорма);
	ФормаМодульОбщегоНазначенияVA.ИнициализацияФормы(ЭтаФорма);
	ЗарегистрироватьМодульДляОтключения(ФормаМодульОбщегоНазначенияVA);
	Возврат ФормаМодульОбщегоНазначенияVA;
КонецФункции	 

&НаКлиенте
Функция ПолучитьМодульПодготовкаИЗагрузкаДанных()
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("workspaceRoot", Объект.КаталогПроекта);
	ФормаИнструментПодготовкаИЗагрузкаДанных = ПолучитьФорму(ПолучитьИмяОбработкиVA() + ".Форма.ПодготовкаИЗагрузкаДанных", ПараметрыФормы, ЭтаФорма);
	ФормаИнструментПодготовкаИЗагрузкаДанных.InitForm(ЭтаФорма);
	ЗарегистрироватьМодульДляОтключения(ФормаИнструментПодготовкаИЗагрузкаДанных);
	Возврат ФормаИнструментПодготовкаИЗагрузкаДанных;
КонецФункции	 

&НаКлиенте
Функция ПолучитьМодульРаботаСБраузером()
	ПараметрыФормы = Новый Структура;
	ФормаМодульРедактора = ПолучитьФорму(ПолучитьИмяОбработкиVA() + ".Форма.РаботаСБраузером", ПараметрыФормы, ЭтаФорма);
	ФормаМодульРедактора.ИнициализацияФормы(ЭтаФорма);
	ЗарегистрироватьМодульДляОтключения(ФормаМодульРедактора);
	Возврат ФормаМодульРедактора;
КонецФункции	 

&НаКлиенте
Процедура РассчитатьДанныеСтрокиДереваКлиент(ДанныеФичи, ДанныеСтрокиФичи, СтрокаДеревоЭлементы)
	ДанныеСтрокиФичи.Вставить("Обработана", Истина);
	
	Если МодульПарсерФич = Неопределено Тогда
		МодульПарсерФич = ПолучитьМодульПарсерФич();
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЭтоLinux", ЭтоLinux);
	СтруктураПараметров.Вставить("ДанныеВозможнаОптимизацияЗагрузкиФичи", ДанныеВозможнаОптимизацияЗагрузкиФичи);
	
	МодульПарсерФич.РассчитатьДанныеСтрокиДереваКлиент(ДанныеФичи, ДанныеСтрокиФичи, СтрокаДеревоЭлементы, ЭтаФорма, СтруктураПараметров);
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьДеревоПоИзмененнымСтрокамРекурсивно(ДанныеФичи, СоотДанныеИзмененныхСтрок, ДеревоЭлементы, ДопПараметры)
	Если НЕ ДопПараметры.ВозможнаОптимизацияЗагрузкиФичи Тогда
		Возврат;
	КонецЕсли;	 
	
	Для Каждого СтрокаДеревоЭлементы Из ДеревоЭлементы Цикл
		Если СтрокаДеревоЭлементы.Тип = "ШагСценарий" Тогда
			Продолжить;
		КонецЕсли;	 
		
		СтрокаДеревоЭлементы.Статус = "";
			
		Если СоотДанныеИзмененныхСтрок[СтрокаДеревоЭлементы.НомерСтрокиВФиче] <> Неопределено Тогда
			Если СтрокаДеревоЭлементы.Тип <> "Шаг" И НЕ СтрокаДеревоЭлементы.СтрокаПараметровШагаВВидеТаблицы Тогда
				// Только для шагов
				ДопПараметры.ВозможнаОптимизацияЗагрузкиФичи = Ложь;
				Если Объект.РежимСамотестирования Тогда
					ЗаписатьЛогВЖРИнформация("ПроверкаВозможностиОптимизацииЗагрузкиФич.ТолькоДляШагов", СтрокаДеревоЭлементы.Имя);
				КонецЕсли;	 
				Прервать;
			КонецЕсли;	 
			
			Если СтрокаДеревоЭлементы.ШагСПараметрамиВТаблице Тогда
				// Если есть передача таблицы ниже, тогда надо ещё читать и её.
				ДопПараметры.ВозможнаОптимизацияЗагрузкиФичи = Ложь;
				Если Объект.РежимСамотестирования Тогда
					ЗаписатьЛогВЖРИнформация("ПроверкаВозможностиОптимизацииЗагрузкиФич.ШагСПараметрамиВТаблице", СтрокаДеревоЭлементы.Имя);
				КонецЕсли;	 
				Прервать;
			КонецЕсли;
			
			ДанныеСтрокиФичи = СоотДанныеИзмененныхСтрок[СтрокаДеревоЭлементы.НомерСтрокиВФиче];
			РассчитатьДанныеСтрокиДереваКлиент(ДанныеФичи, ДанныеСтрокиФичи, СтрокаДеревоЭлементы);
			
		КонецЕсли;	 
		ЗаполнитьДеревоПоИзмененнымСтрокамРекурсивно(ДанныеФичи, СоотДанныеИзмененныхСтрок, СтрокаДеревоЭлементы.ПолучитьЭлементы(), ДопПараметры);
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьДеревоПоИзмененнымСтрокам(ДанныеФичи, ДанныеИзмененныхСтрок, ВозможнаОптимизацияЗагрузкиФичи)
	СоотДанныеИзмененныхСтрок = Новый Соответствие;
	Для Каждого Элем Из ДанныеИзмененныхСтрок Цикл
		СоотДанныеИзмененныхСтрок.Вставить(Элем.НомерСтрокиВФиче, Элем);
	КонецЦикла;	 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВозможнаОптимизацияЗагрузкиФичи", ВозможнаОптимизацияЗагрузкиФичи);
	
	ЗаполнитьДеревоПоИзмененнымСтрокамРекурсивно(ДанныеФичи, СоотДанныеИзмененныхСтрок, Объект.ДеревоТестов.ПолучитьЭлементы(), ДопПараметры);
	
	ВозможнаОптимизацияЗагрузкиФичи = ДопПараметры.ВозможнаОптимизацияЗагрузкиФичи;
	Если ВозможнаОптимизацияЗагрузкиФичи Тогда
		Для Каждого Элем Из ДанныеИзмененныхСтрок Цикл
			Если НЕ Элем.Обработана Тогда
				ВозможнаОптимизацияЗагрузкиФичи = Ложь;
				Если Объект.ПроверкаРаботыVanessaAutomationВРежимеTestClient Тогда
					ЗаписатьЛогВЖРИнформация("ПроверкаВозможностиОптимизацииЗагрузкиФич.Обработана", Неопределено);
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЦикла;	 
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьДерево(Каталог, ДополнительныеПараметры, СтруктураПараметров)
	Файл = Новый Файл(Каталог);
	МассивРезультатОбходаКаталогов = Новый Массив;
	
	СтруктураФайла = Новый Структура;
	СтруктураФайла.Вставить("Каталог", Истина);
	СтруктураФайла.Вставить("Имя", Файл.Имя);
	СтруктураФайла.Вставить("УниверсальноеИмя", УниверсальноеПолноеИмяФайла(Файл.ПолноеИмя, Истина));
	СтруктураФайла.Вставить("ПолныйПуть", Каталог);
	СтруктураФайла.Вставить("Уровень", 1);
	Если ФичаФайлПереданТекстом Тогда
		СтруктураФайла.Вставить("Имя", "ФичаФайлПереданТекстом");
		СтруктураФайла.Вставить("УниверсальноеИмя", "ФичаФайлПереданТекстом");
		СтруктураФайла.Вставить("ПолныйПуть", "ФичаФайлПереданТекстом");
	КонецЕсли;	 

	МассивРезультатОбходаКаталогов.Добавить(СтруктураФайла);
	
	Если ФичаФайлПереданТекстом Тогда
		СтруктураФайла = Новый Структура;
		СтруктураФайла.Вставить("Каталог", Ложь);
		СтруктураФайла.Вставить("Имя", "ФичаФайлПереданТекстом");
		СтруктураФайла.Вставить("УниверсальноеИмя", "ФичаФайлПереданТекстом");
		СтруктураФайла.Вставить("ПолныйПуть", "ФичаФайлПереданТекстом");
		СтруктураФайла.Вставить("Уровень", 2);
		СтруктураФайла.Вставить("Фича", Истина);
		МассивРезультатОбходаКаталогов.Добавить(СтруктураФайла);
	Иначе	
		Уровень = 2;
		ТекРодитель = Неопределено;
		КолЭлементовДобавлено = 0;
		ОбходКаталогов(Каталог, МассивРезультатОбходаКаталогов, Уровень, ДополнительныеПараметры, ТекРодитель, КолЭлементовДобавлено);    
	КонецЕсли;	 
	
	ДвДанныеvbFeatureReader = Неопределено;
	Если Объект.ВерсияПоставки = "standart" И НЕ ВозможнаОптимизацияРаботыСФайлами Тогда
		ДвДанныеvbFeatureReader = Новый ДвоичныеДанные(ПолучитьПутьКFeatureReader());
	КонецЕсли;	 
	
	СтруктураПараметров.Вставить("МассивРезультатОбходаКаталогов", МассивРезультатОбходаКаталогов);
	СтруктураПараметров.Вставить("ВозможнаОптимизацияРаботыСФайлами", ВозможнаОптимизацияРаботыСФайлами);
	СтруктураПараметров.Вставить("ТегTreeВключенПоУмолчанию", Объект.ТегTreeВключенПоУмолчанию);
	СтруктураПараметров.Вставить("ЗапускИзКоманднойСтроки", Объект.ЗапускИзКоманднойСтроки);
	СтруктураПараметров.Вставить("КешДанныеПеревода", КешДанныеПеревода);
	СтруктураПараметров.Вставить("БылиОшибкиЗагрузкиФич", Ложь);
	СтруктураПараметров.Вставить("ОшибкиЗагрузкиФич", Новый Массив);
	СтруктураПараметров.Вставить("КешСнипетов", КешСнипетов);
	СтруктураПараметров.Вставить("СтрокаПробелов", СтрокаПробелов);
	СтруктураПараметров.Вставить("КешЗагрузкиФич", КешЗагрузкиФич);
	СтруктураПараметров.Вставить("КешПараметрыВСтроке", КешПараметрыВСтроке);
	СтруктураПараметров.Вставить("КешРассчитатьПараметрыТаблицы", КешРассчитатьПараметрыТаблицы);
	СтруктураПараметров.Вставить("КешОпределенияТипа", КешОпределенияТипа);
	СтруктураПараметров.Вставить("КешПоискаКлючевыхСлов", КешПоискаКлючевыхСлов);
	СтруктураПараметров.Вставить("НедавноЗагруженныеФичи", НедавноЗагруженныеФичи);
	СтруктураПараметров.Вставить("ВыполнениеСценариевБезОткрытияФормы", ВыполнениеСценариевБезОткрытияФормы);
	СтруктураПараметров.Вставить("ЗапускИзСППР", ЗапускИзСППР);
	Если Ванесса.Объект.СписокСценариевДляВыполнения.Количество() > 0 Тогда 
		ОтборСценариевПоИмениСценария = Новый Соответствие;
		Для Каждого Элем Из Ванесса.Объект.СписокСценариевДляВыполнения Цикл
			ОтборСценариевПоИмениСценария.Вставить(Элем.Значение, Истина);
		КонецЦикла;
		СтруктураПараметров.Вставить("ОтборСценариевПоИмениСценария", ОтборСценариевПоИмениСценария);
	КонецЕсли;	
	
	ИспользуетсяПарсерИзКомпоненты = Ложь;
	Если Объект.ИспользоватьКомпонентуVanessaExt
		И Объект.ИспользоватьПарсерGherkinИзКомпонентыVanessaExt
		И НЕ ФичаФайлПереданТекстом
		Тогда
		ИспользуетсяПарсерИзКомпоненты = Истина;
	КонецЕсли;	 
	
	МассивДействий = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("МассивДействий") Тогда
		МассивДействий = ДополнительныеПараметры.МассивДействий;
	КонецЕсли;	 

	ДанныеФичи = СтруктураПараметров.ДанныеФичи;
	ДанныеИзмененныхСтрок = Неопределено;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПереходВРедакторИзДерева")
		И ДополнительныеПараметры.ПереходВРедакторИзДерева Тогда
			ВозможнаОптимизацияЗагрузкиФичи = Ложь;
	Иначе		
		ВозможнаОптимизацияЗагрузкиФичи = ОпределитьВозможнаОптимизацияЗагрузкиФичи(ДанныеФичи, ДанныеИзмененныхСтрок, МассивДействий);
	КонецЕсли;	 
	
	Если ВозможнаОптимизацияЗагрузкиФичи И Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если VanessaTabs.count() = 0 Тогда
			ВозможнаОптимизацияЗагрузкиФичи = Ложь;
		ИначеЕсли VanessaTabs.current.filename <> Каталог Тогда	
			ВозможнаОптимизацияЗагрузкиФичи = Ложь;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если НЕ ИспользуетсяПарсерИзКомпоненты Тогда
		СтруктураПараметров.Вставить("ДанныеФичи", Неопределено);
		СтруктураПараметров.Вставить("ДополнительныеПараметры", Неопределено);
	КонецЕсли;	 

	Если ВозможнаОптимизацияЗагрузкиФичи Тогда
		ЗаполнитьДеревоПоИзмененнымСтрокам(ДанныеФичи, ДанныеИзмененныхСтрок, ВозможнаОптимизацияЗагрузкиФичи);
		ДанныеСекцииПеременные = КопияДанныеСекцииПеременные;
	КонецЕсли;	 
	
	Если Объект.РежимСамотестирования Тогда
		СообщитьПользователю("ВозможнаОптимизацияЗагрузкиФичи=" + ВозможнаОптимизацияЗагрузкиФичи);
	КонецЕсли;	 
	
	НадоСохранитьНедавноЗагруженныеФичи = Ложь;
	
	ИспользовалсяВнешнийПарсер = Ложь;
	Если НЕ ВозможнаОптимизацияЗагрузкиФичи Тогда
		Если ИспользуетсяПарсерИзКомпоненты Тогда
			СтруктураПараметров.Вставить("НадоОбновитьВставкиVanessaEditor", Истина);
			СтруктураПараметров.Вставить("КаталогФич", Объект.КаталогФич);
			Объект.ДеревоТестов.ПолучитьЭлементы().Очистить();
			ДоступностьЭлементовПанелиВоВремяЗагрузкиФичи(Ложь);
			
			МодульПарсерGherkin().ЗагрузитьФичаФайлы(СтруктураПараметров);
			ИспользовалсяВнешнийПарсер = Истина;
			ДобавитьФичуВСписокНедавноЗагруженныхФич(СтруктураПараметров.КаталогФич);
			СкопироватьНедавноЗагруженныеФичиВИнтерфейсКлиент(НедавноЗагруженныеФичи);
			Если НЕ Объект.ЗапускИзКоманднойСтроки Тогда
				НадоСохранитьНедавноЗагруженныеФичи = Истина;
			КонецЕсли;	 
		Иначе	
			СтруктураПараметров.Вставить("НадоОбновитьВставкиVanessaEditor", Истина);
			ЗаполнитьДеревоЗначенийПоМассивуСервер(МассивРезультатОбходаКаталогов, ДвДанныеvbFeatureReader, СтруктураПараметров);
			Если Объект.ИспользоватьРедакторVanessaEditor Тогда
				ТекДанныеЭкспортныхПеременных = СтруктураПараметров.ДанныеСекцииПеременные.ДанныеЭкспортныхПеременных[УниверсальноеПолноеИмяФайла(Каталог, Истина)];
				Если ТекДанныеЭкспортныхПеременных <> Неопределено И VanessaGherkinProvider <> Неопределено Тогда
					VanessaGherkinProvider.setImports(ЗаписатьОбъектJSON(ТекДанныеЭкспортныхПеременных));
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
	Иначе
		ВывестиСтатистикуКлиентКоротко();
	КонецЕсли;	 
	
	Если НЕ Объект.РежимСамотестирования И НЕ ВыполнениеСценариевБезОткрытияФормы Тогда
		Если НадоСохранитьНедавноЗагруженныеФичи Тогда
			СохранитьНастройкиВХранилищеИНедавнозагруженныеФичи("КаталогФич", Объект.КаталогФич, ПараметрыДляСохраненияНастроекСервер(СтруктураДляСохраненияНастроек()),
				НедавноЗагруженныеФичи, Объект.РежимСамотестирования, ЭтоРежимОбучения());
		Иначе	
			СохранитьНастройкиВХранилище("КаталогФич", Объект.КаталогФич, ПараметрыДляСохраненияНастроекСервер(СтруктураДляСохраненияНастроек()));
		КонецЕсли;	 
	ИначеЕсли НадоСохранитьНедавноЗагруженныеФичи Тогда
		СохранитьНедавноЗагруженныеФичи(НедавноЗагруженныеФичи, Объект.РежимСамотестирования, ЭтоРежимОбучения());
	КонецЕсли;	 
	
	СтруктураПараметров.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	Если ИспользуетсяПарсерИзКомпоненты И ИспользовалсяВнешнийПарсер  Тогда
		СтруктураПараметров.Вставить("ЗаполнитьДеревоФичПродолжение2", Ложь);
		Возврат;
	КонецЕсли;	 
	
	ЗаполнитьДанныеВозможнаОптимизацияЗагрузкиФичи(СтруктураПараметров, ДанныеФичи, МассивДействий);
	
	КешСнипетов = СтруктураПараметров.КешСнипетов;
	КешЗагрузкиФич = СтруктураПараметров.КешЗагрузкиФич;
	КешПараметрыВСтроке = СтруктураПараметров.КешПараметрыВСтроке;
	КешРассчитатьПараметрыТаблицы = СтруктураПараметров.КешРассчитатьПараметрыТаблицы;
	КешОпределенияТипа = СтруктураПараметров.КешОпределенияТипа;
	КешПоискаКлючевыхСлов = СтруктураПараметров.КешПоискаКлючевыхСлов;
	Если НЕ ВозможнаОптимизацияЗагрузкиФичи Тогда
		ДанныеСекцииПеременные = СтруктураПараметров.ДанныеСекцииПеременные;
	КонецЕсли;	 
	
	Если СтруктураПараметров.БылиОшибкиЗагрузкиФич И Объект.ЗапускИзКоманднойСтроки Тогда
		ТекстИсключения = "";
		Для Каждого Элем Из СтруктураПараметров.ОшибкиЗагрузкиФич Цикл
			ТекстИсключения = ТекстИсключения + Элем + Символы.ПС;
		КонецЦикла;	 
		
		ДанныеДляФормированияJsonОбОшибке = ДанныеДляФормированияJsonОбОшибке(ТекстИсключения, Неопределено, Неопределено, Неопределено, Неопределено, Неопределено, Неопределено);
		СтруктураЛогаОшибки = ПолучитьЛогОшибки(Неопределено, ДанныеДляФормированияJsonОбОшибке);
		ЗаписатьЛогОшибки(СтруктураЛогаОшибки);
		СтатусЗапускаСценариев = Ложь;
		ВыгрузитьСтатусВыполненияСценариевВФайл(СтатусЗапускаСценариев, 
			ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев));
	КонецЕсли;	 
	
	КешДанныеПеревода.Вставить("СоответствиеПоЯзыкам", СтруктураПараметров.КешДанныеПеревода.СоответствиеПоЯзыкам);

	// Обновим снипеты в таблице известных сценариев.
	ИдСтроки = -1;
	Для Каждого СтрокаТаблицаУжеСуществующихСценариев Из СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ Цикл
		ИдСтроки = ИдСтроки + 1;
		ТаблицаУжеСуществующихСценариев[ИдСтроки].Снипет = СтрокаТаблицаУжеСуществующихСценариев.Снипет;
	КонецЦикла;	 

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиИзХранилищаКеш()
	Если ТипЗнч(Объект.СлужебныеПараметры) = Тип("Структура") И Объект.СлужебныеПараметры.Свойство("ЗагружатьКешStepDefinition")
		И НЕ Объект.СлужебныеПараметры.ЗагружатьКешStepDefinition Тогда
		
		Возврат;
	КонецЕсли;	 
	
	ВосстановитьНастройкиИзХранилища("ТаблицаИзвестныхStepDefinition", "ТаблицаИзвестныхStepDefinition");
	ВосстановитьНастройкиИзХранилища("КешStepDefinition", "КешStepDefinition");
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицыПоТаблицаИзвестныхStepDefinition()
	
	ДанныеПоВерсиямОбработок = Новый Структура;
	
	МассивВерсийФайловИзТаблицаИзвестныхStepDefinition = Новый Массив;
	МассивИменФайловИзТаблицаИзвестныхStepDefinition   = Новый Массив;
	Кеш = Новый Соответствие;
	
	ТаблицаИзвестныхStepDefinitionСервер = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	Для Каждого СтрТаблицаИзвестныхStepDefinitionСервер Из ТаблицаИзвестныхStepDefinitionСервер Цикл
		УниверсальноеПолноеИмяФайла = УниверсальноеПолноеИмяФайла(СтрТаблицаИзвестныхStepDefinitionСервер.ИмяФайла);
		Если Кеш[УниверсальноеПолноеИмяФайла] = Неопределено Тогда
			Кеш.Вставить(УниверсальноеПолноеИмяФайла, Истина);
			МассивВерсийФайловИзТаблицаИзвестныхStepDefinition.Добавить(СтрТаблицаИзвестныхStepDefinitionСервер.ВерсияФайла);
			МассивИменФайловИзТаблицаИзвестныхStepDefinition.Добавить(УниверсальноеПолноеИмяФайла);
		КонецЕсли;	
		СтрТаблицаИзвестныхStepDefinitionСервер.СтрокаОбрабатывалась = Ложь;
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(ТаблицаИзвестныхStepDefinitionСервер, "ТаблицаИзвестныхStepDefinition");
	
	ДанныеПоВерсиямОбработок.Вставить("МассивВерсийФайловИзТаблицаИзвестныхStepDefinition", МассивВерсийФайловИзТаблицаИзвестныхStepDefinition);
	ДанныеПоВерсиямОбработок.Вставить("МассивИменФайловИзТаблицаИзвестныхStepDefinition", МассивИменФайловИзТаблицаИзвестныхStepDefinition);
	
	Возврат ДанныеПоВерсиямОбработок;
КонецФункции

&НаКлиенте
Функция ПолучитьТаблицыПоТаблицаИзвестныхStepDefinitionКлиент()
	
	ДанныеПоВерсиямОбработок = Новый Структура;
	
	МассивВерсийФайловИзТаблицаИзвестныхStepDefinition = Новый Массив;
	МассивИменФайловИзТаблицаИзвестныхStepDefinition   = Новый Массив;
	ДанныеПоВерсиямОбработок.Вставить("МассивВерсийФайловИзТаблицаИзвестныхStepDefinition", МассивВерсийФайловИзТаблицаИзвестныхStepDefinition);
	ДанныеПоВерсиямОбработок.Вставить("МассивИменФайловИзТаблицаИзвестныхStepDefinition", МассивИменФайловИзТаблицаИзвестныхStepDefinition);
	Кеш = Новый Соответствие;
	
	Для Каждого СтрТаблицаИзвестныхStepDefinitionСервер Из ТаблицаИзвестныхStepDefinition Цикл
		УниверсальноеПолноеИмяФайла = УниверсальноеПолноеИмяФайла(СтрТаблицаИзвестныхStepDefinitionСервер.ИмяФайла);
		Если Кеш[УниверсальноеПолноеИмяФайла] = Неопределено Тогда
			Кеш.Вставить(УниверсальноеПолноеИмяФайла, Истина);
			МассивВерсийФайловИзТаблицаИзвестныхStepDefinition.Добавить(СтрТаблицаИзвестныхStepDefinitionСервер.ВерсияФайла);
			МассивИменФайловИзТаблицаИзвестныхStepDefinition.Добавить(УниверсальноеПолноеИмяФайла);
		КонецЕсли;	
		СтрТаблицаИзвестныхStepDefinitionСервер.СтрокаОбрабатывалась = Ложь;
	КонецЦикла;	
	
	Возврат ДанныеПоВерсиямОбработок;
	
КонецФункции

&НаКлиенте
Процедура УдалитьСтрокиТаблицаИзвестныхStepDefinitionКоторыеНеОбрабатывались(МассивИменФайловКоторыеСовпалиСКеш)
	
	Если БылВызовУдалитьСтрокиТаблицаИзвестныхStepDefinitionКоторыеНеОбрабатывались Тогда
		Возврат;
	КонецЕсли;	 
	
	БылВызовУдалитьСтрокиТаблицаИзвестныхStepDefinitionКоторыеНеОбрабатывались = Истина;
	
	Для Каждого СтрТаблицаИзвестныхStepDefinitionСервер Из ТаблицаИзвестныхStepDefinition Цикл
		ИмяФайла = СтрТаблицаИзвестныхStepDefinitionСервер.ИмяФайла;
		Если МассивИменФайловКоторыеСовпалиСКеш[ПреобразоватьПутьКФайлуКСтандарту(ИмяФайла)] <> Неопределено Тогда
			СтрТаблицаИзвестныхStepDefinitionСервер.СтрокаОбрабатывалась = Истина;
		КонецЕсли;	 
	КонецЦикла;	
	
	Отбор = Новый Структура();
	Отбор.Вставить("СтрокаОбрабатывалась", Ложь);
	СтрокиТаблицы = ТаблицаИзвестныхStepDefinition.НайтиСтроки(Отбор);
	
	Для Каждого СтрТаблицаИзвестныхStepDefinitionСервер Из СтрокиТаблицы Цикл
		ТаблицаИзвестныхStepDefinition.Удалить(СтрТаблицаИзвестныхStepDefinitionСервер);
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивФайловИзТаблицы_ТаблицаИзвестныхStepDefinition()
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	ТзнТаблицаИзвестныхStepDefinition.Свернуть("ИмяФайла");
	
	Возврат ТзнТаблицаИзвестныхStepDefinition.ВыгрузитьКолонку("ИмяФайла");
КонецФункции	

&НаКлиенте
Функция ПолучитьМассивФайловИзТаблицы_ТаблицаИзвестныхStepDefinitionКлиент()
	
	Соответствие = Новый Соответствие;
	
	Массив = Новый Массив;
	Для Каждого СтрокаТаблицаИзвестныхStepDefinition Из ТаблицаИзвестныхStepDefinition Цикл
		Если Соответствие[СтрокаТаблицаИзвестныхStepDefinition.ИмяФайла] = Неопределено Тогда
			Соответствие.Вставить(СтрокаТаблицаИзвестныхStepDefinition.ИмяФайла, Истина);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Для Каждого КлючЗначение Из Соответствие Цикл
		Массив.Добавить(КлючЗначение.Ключ);
	КонецЦикла;	 
	
	Возврат Массив;
КонецФункции	

&НаКлиенте
Процедура УдалитьИз_ТаблицаИзвестныхStepDefinition_Файлы(МассивФайловДляОбработки)
	
	Для Каждого ИмяФайла Из МассивФайловДляОбработки Цикл
		МассивСтрок = ТаблицаИзвестныхStepDefinition.НайтиСтроки(Новый Структура("ИмяФайла", ИмяФайла));
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			ТаблицаИзвестныхStepDefinition.Удалить(СтрокаТаблицы);
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДанныеФайлаПоСобраннойРанееИнформации(ИмяФайла, ДополнительныеПараметры)
	ДанныеФайла = Неопределено;
	МассивФайлов = Неопределено;
	Для Каждого ЭлементСписка Из Объект.КаталогиБиблиотек Цикл
		ПутьКаталогаБиблиотеки = ПреобразоватьПутьСТочкамиКНормальномуПути(ЭлементСписка.Значение);
		МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, 
			ПутьКаталогаБиблиотеки, "НайденныеФайлы"); // это файлы по данной библиотеке
		Если МассивФайлов <> Неопределено Тогда
			Для Каждого ЭлементМассива Из МассивФайлов Цикл
				Если СравнитьПутиФайлов(ЭлементМассива.Файл.ПолноеИмя, ИмяФайла) Тогда
					ДанныеФайла = ЭлементМассива;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
		КонецЕсли;	 
	КонецЦикла;	

	Если ДанныеФайла = Неопределено Тогда
		МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "ПоискEPF", "НайденныеФайлы");
		
		Если МассивФайлов <> Неопределено Тогда
			Для Каждого ЭлементМассива Из МассивФайлов Цикл
				Если СравнитьПутиФайлов(ЭлементМассива.Файл.ПолноеИмя, ИмяФайла) Тогда
					ДанныеФайла = ЭлементМассива;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат ДанныеФайла;
	
КонецФункции	

&НаКлиенте
Процедура УдалитьСтрокиИз_ТаблицаИзвестныхStepDefinition_ДляКоторыхНетФайловИСтрокиИзмененныхФайлов(ДанныеПоВерсиямОбработок,
	                                                                                        ДополнительныеПараметры,
																							МассивФайлов)
	МассивФайловДляОбработки = Новый Массив;
	
	Для Каждого ИмяФайла Из МассивФайлов Цикл
		Если ФреймворкЗапущенВWebКлиенте ИЛИ НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
			Если Найти(ИмяФайла, "VanessaAutomationsingle.") = 0 Тогда
				МассивФайловДляОбработки.Добавить(ИмяФайла);
			КонецЕсли;	 
		Иначе
			Если ЗапрещеныСинхронныеВызовы И НЕ ВозможнаОптимизацияРаботыСФайлами Тогда
				
				ДанныеФайла = ПолучитьДанныеФайлаПоСобраннойРанееИнформации(ИмяФайла, ДополнительныеПараметры);
				Если ДанныеФайла = Неопределено Тогда
					ТекВерсия = Неопределено;
				Иначе	
					ТекВерсия   = ДанныеФайла.ВерсияФайла;
				КонецЕсли;	 
				
			Иначе	
				ТекВерсия = ВремяИзмененияФайлаКомандаСистемы(ИмяФайла);
			КонецЕсли;	 
			
			ИД = ДанныеПоВерсиямОбработок.МассивИменФайловИзТаблицаИзвестныхStepDefinition.Найти(УниверсальноеПолноеИмяФайла(ИмяФайла));
			Если ИД <> Неопределено Тогда
				ПрежняяВерсия = ДанныеПоВерсиямОбработок.МассивВерсийФайловИзТаблицаИзвестныхStepDefinition[ИД];
				Если ТекВерсия <> ПрежняяВерсия Тогда
					МассивФайловДляОбработки.Добавить(ИмяФайла);
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;	

	Если МассивФайловДляОбработки.Количество() > 0 Тогда
		УдалитьИз_ТаблицаИзвестныхStepDefinition_Файлы(МассивФайловДляОбработки);
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаДоПостроенияДереваСервер(ДанныеПоВерсиямОбработок, МассивФайлов)
	ВосстановитьНастройкиИзХранилищаКеш();
	ДанныеПоВерсиямОбработок = ПолучитьТаблицыПоТаблицаИзвестныхStepDefinition();
	МассивФайлов = ПолучитьМассивФайловИзТаблицы_ТаблицаИзвестныхStepDefinition();
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработкиSingle(СтруктураПараметров, МассивИменФайловКоторыеСовпалиСКеш, 
		МассивИменКонтекстовОбработок, ТаблицаКонтекстовОбработок, КаталогФич)
		
	ВерсияСнипетов = ТекущаяДата();
	ВстроенныеБиблиотеки = ВстроенныеБиблиотеки();
	БылиОшибки = Ложь;
	
	ПодключитьСнипетыИзВнутреннихФорм(ВстроенныеБиблиотеки, ВерсияСнипетов, БылиОшибки, СтруктураПараметров,
	МассивИменФайловКоторыеСовпалиСКеш, МассивИменКонтекстовОбработок, ТаблицаКонтекстовОбработок, КаталогФич);
	
	Если ТаблицаУжеСуществующихСценариев.Количество() = 0 Тогда
		// Если ТаблицаУжеСуществующихСценариев.Количество() > 0, значит встроенные сценарии уже точно загружались
		ПолучитьУжеСуществующиеСценарииИзВстроенныхФич();  
	КонецЕсли;	  
КонецПроцедуры  

&НаКлиенте
Процедура ПодключитьОбработкиМетаданных(СтруктураПараметров, МассивИменФайловКоторыеСовпалиСКеш, 
		МассивИменКонтекстовОбработок, ТаблицаКонтекстовОбработок, КаталогФич)
		
	Если СтруктураПараметров.МетаданныеБиблиотек.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	 	
		
	Библиотеки = СтруктураПараметров.МетаданныеБиблиотек.ВыгрузитьЗначения();
	БылиОшибки = Ложь;
	
	ПодключитьСнипеты = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПараметров));
	ПодключитьСнипеты.Вставить("ПодключатьОбработкиПринудительно", Истина);
	
	ПодключитьСнипетыИзВнутреннихФорм(Библиотеки, ТекущаяДата(), БылиОшибки, ПодключитьСнипеты,
		МассивИменФайловКоторыеСовпалиСКеш, МассивИменКонтекстовОбработок, ТаблицаКонтекстовОбработок, КаталогФич);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоФич(СтруктураПараметров)
	КаталогИнструментов     = СтруктураПараметров.КаталогИнструментов;
	КаталогФич              = СтруктураПараметров.КаталогФич;
	МассивСообщений         = СтруктураПараметров.МассивСообщений;
	DebugLog                = СтруктураПараметров.DebugLog;
	КаталогиБиблиотек       = СтруктураПараметров.КаталогиБиблиотек;
	ДополнительныеПараметры = СтруктураПараметров.ДополнительныеПараметры;
	
	СтруктураПараметров.ДополнительныеПараметры = Неопределено; // они не могут быть сериализованы в поздних версиях платформы
	
	ПутьКФичам = Новый Файл(КаталогФич);
	Если ЗапрещеныСинхронныеВызовы И НЕ ВозможнаОптимизацияРаботыСФайлами Тогда
		Если Не ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "КаталогФич", "Существует") Тогда
			Возврат;
		КонецЕсли;	 
	Иначе	
		Если НЕ ФреймворкЗапущенВWebКлиенте И НЕ ФайлСуществуетКомандаСистемы(КаталогФич) И Объект.ЗапускИзКоманднойСтроки Тогда
			ТекстОшибки = ПодставитьПараметрыВСтроку(Локализовать("Не найден путь <%1>."), КаталогФич);
			МассивСообщений.Добавить(ТекстОшибки);
			
			СтруктураПараметров.Вставить("ОшибкаЗагрузкиФич", Истина);
			СтруктураПараметров.Вставить("ТекстОшибки", ТекстОшибки);
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ЗапрещеныСинхронныеВызовы И НЕ ВозможнаОптимизацияРаботыСФайлами Тогда
		ТаблицаКонтекстовОбработок = Новый Массив;
		ТаблицаИзвестныхStepDefinition.Очистить();
		МассивИменКонтекстовОбработок.Очистить();
	КонецЕсли;	
	
	Путь = ПутьКФичам.ПолноеИмя;
	СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога", Истина);
	Если ЗапрещеныСинхронныеВызовы И НЕ ВозможнаОптимизацияРаботыСФайлами Тогда
		Если Не ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "КаталогФич", "ЭтоКаталог") Тогда // это файл
			Путь = ПутьКФичам.Путь;
			СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога", Ложь);
		КонецЕсли;	 
	Иначе	
		Если Прав(НРег(ПутьКФичам.ПолноеИмя), 8) = ".feature" Тогда
			Путь = ПутьКФичам.Путь;
			СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога", Ложь);
		КонецЕсли;	 
	КонецЕсли;	 

	ДанныеПоВерсиямОбработок = Неопределено;
	ДанныеПоВерсиямОбработок = ПолучитьТаблицыПоТаблицаИзвестныхStepDefinitionКлиент();
	МассивФайлов = ПолучитьМассивФайловИзТаблицы_ТаблицаИзвестныхStepDefinitionКлиент();
	Если Объект.РежимСамотестирования И ХостСистема <> Неопределено Тогда
		// Для режимка, когда VA открывает в этом же сеансе вторую VA.
		ОбработкаДоПостроенияДереваСервер(ДанныеПоВерсиямОбработок, МассивФайлов);
	КонецЕсли;	 
	
	УдалитьСтрокиИз_ТаблицаИзвестныхStepDefinition_ДляКоторыхНетФайловИСтрокиИзмененныхФайлов(ДанныеПоВерсиямОбработок,
	                                                                                           ДополнительныеПараметры,
																							   МассивФайлов);
	
	МассивИменФайловКоторыеСовпалиСКеш = Новый Соответствие;
																							   
	Если Объект.ВерсияПоставки = "single" Тогда
		ПодключитьОбработкиSingle(СтруктураПараметров,
		    МассивИменФайловКоторыеСовпалиСКеш, МассивИменКонтекстовОбработок, ТаблицаКонтекстовОбработок, КаталогФич);
	КонецЕсли;	 																							   
	
	ПодключитьОбработкиМетаданных(СтруктураПараметров,
		МассивИменФайловКоторыеСовпалиСКеш, МассивИменКонтекстовОбработок, ТаблицаКонтекстовОбработок, КаталогФич);
	
	СтруктураПараметров.Вставить("ДанныеПоВерсиямОбработок", ДанныеПоВерсиямОбработок);
	СтруктураПараметров.Вставить("МассивИменФайловКоторыеСовпалиСКеш", МассивИменФайловКоторыеСовпалиСКеш);
	СтруктураПараметров.Вставить("Путь", Путь);
	
	ДополнительныеПараметры.Вставить("БылиИзмененияСоставаСнипетов", Ложь);
	ДополнительныеПараметры.Вставить("КешДанныхФайлов", Новый Соответствие);
	
	ДанныеДляПолученияСнипетов = Новый Массив;
	ПолучитьУжеСуществующиеСнипетыИзОбработок(Путь, ДанныеДляПолученияСнипетов, ДополнительныеПараметры,
	                                          ДанныеПоВерсиямОбработок.МассивВерсийФайловИзТаблицаИзвестныхStepDefinition,
											  ДанныеПоВерсиямОбработок.МассивИменФайловИзТаблицаИзвестныхStepDefinition,
											  МассивИменФайловКоторыеСовпалиСКеш);
											  
	Для каждого Элем Из КаталогиБиблиотек Цикл
		ПутьКаталогаБиблиотеки = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);

		ПолучитьУжеСуществующиеСнипетыИзОбработок(ПутьКаталогаБиблиотеки, ДанныеДляПолученияСнипетов, ДополнительныеПараметры,
		                                          ДанныеПоВерсиямОбработок.МассивВерсийФайловИзТаблицаИзвестныхStepDefinition,
												  ДанныеПоВерсиямОбработок.МассивИменФайловИзТаблицаИзвестныхStepDefinition,
												  МассивИменФайловКоторыеСовпалиСКеш);
	КонецЦикла;

	Если ДополнительныеПараметры.БылиИзмененияСоставаСнипетов Тогда
		ОбновитьКешСнипетовНаКлиенте();
	КонецЕсли;	 
	
	Если ДополнительныеПараметры.Свойство("СделатьПереходкКТексту") Тогда
		СтруктураПараметров.Вставить("СделатьПереходкКТексту", ДополнительныеПараметры.СделатьПереходкКТексту);
	КонецЕсли;	 
	
	СтруктураПараметров.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	глСтруктураПараметров = СтруктураПараметров;

	ДанныеФайлов = Новый Соответствие;
	
	ПомещаемыеФайлы = Новый Массив;
	Для Каждого Данные Из ДанныеДляПолученияСнипетов Цикл
		ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(Данные.ИмяФайла);
		ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
		
		ДанныеФайлов.Вставить(Данные.ИмяФайла, Новый Структура("Имя,ИмяФайла,ВерсияФайла", Данные.Имя, Данные.ИмяФайла, Данные.ВерсияФайла));
	КонецЦикла;	 
	
	Если ПомещаемыеФайлы.Количество() = 0 Тогда
		ЗаполнитьДеревоФичПродолжение();
		Возврат;
	КонецЕсли;	 
	
	ПараметрыЗавершения = Новый Структура;	
	ПараметрыЗавершения.Вставить("ДанныеФайлов", ДанныеФайлов);
	ПараметрыЗавершения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ВыполнитьПроцедуруЧерезОбработчикОжидания") Тогда
		ДополнительныеПараметры.Вставить("ВыполнитьПроцедуруЧерезОбработчикОжиданияОтложенный", ДополнительныеПараметры.ВыполнитьПроцедуруЧерезОбработчикОжидания);
		ДополнительныеПараметры.Удалить("ВыполнитьПроцедуруЧерезОбработчикОжидания");
	КонецЕсли;	 
	
	БылаОшибка = Истина;
	КоличествоПопыток = 10;
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			Выполнить("НачатьПомещениеФайлов(Новый ОписаниеОповещения(""ОбработчикПодключенияБиблиотекШагов"", ЭтаФорма, ПараметрыЗавершения),
				|ПомещаемыеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор)");
			БылаОшибка = Ложь;
			Прервать;
		Исключение
			Sleep(1);
		КонецПопытки;
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		Стр = "";
		Для Каждого Элем Из ДанныеФайлов Цикл
			Стр = Стр + Элем.ИмяФайла + Символы.ПС; 
		КонецЦикла;	 
		
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не получилось выполнить помещение файлов: <%1>."),
			Стр
		);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКешСнипетовНаКлиенте()
	
	Если ФреймворкЗапущенВWebКлиенте Тогда
		Возврат;
	КонецЕсли;	
	
	ИменаНайденныхEpfНаКлиенте.Очистить();
	КешСнипетовНаКлиенте.Очистить();
	КешСнипетовНаКлиенте = Новый Соответствие;
	Для Каждого СтрокаТаблицаИзвестныхStepDefinition Из ТаблицаИзвестныхStepDefinition Цикл
		Если НЕ ПустаяСтрока(СтрокаТаблицаИзвестныхStepDefinition.СтрокаДляПоиска) Тогда
			ДанныеStepDefinition = Новый Структура;
			ДанныеStepDefinition.Вставить("id", СтрокаТаблицаИзвестныхStepDefinition.Id);
			ДанныеStepDefinition.Вставить("ИмяФайла", СтрокаТаблицаИзвестныхStepDefinition.ИмяФайла);
			ДанныеStepDefinition.Вставить("СтрокаРеальнойПроцедуры", СтрокаТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры);
			ДанныеStepDefinition.Вставить("СтрокаДляПоиска", СтрокаТаблицаИзвестныхStepDefinition.СтрокаДляПоиска);
			ДанныеStepDefinition.Вставить("УниверсальноеИмяEpf", СтрЗаменить(НРег(СтрокаТаблицаИзвестныхStepDefinition.ИмяФайла), "\", "/"));
			ДанныеStepDefinition.Вставить("ТипШагаВДереве", СтрокаТаблицаИзвестныхStepDefinition.ТипШагаВДереве);
			
			КешСнипетовНаКлиенте.Вставить(СтрокаТаблицаИзвестныхStepDefinition.СтрокаДляПоиска, ДанныеStepDefinition);
			
			ИменаНайденныхEpfНаКлиенте.Вставить(УниверсальноеПолноеИмяФайла(СтрокаТаблицаИзвестныхStepDefinition.ИмяФайла, Истина), Истина);
		КонецЕсли;	 
	КонецЦикла;	 
	
	НадоУстановитьСписокШаговVanessaEditor = Истина;
	ПараметрыДляСохраненияНастроек = ПараметрыДляСохраненияНастроекСервер(СтруктураДляСохраненияНастроек());
	Если ТаблицаИзвестныхStepDefinition.Количество() > 0 Тогда
		СохранитьНастройкиВХранилище("ТаблицаИзвестныхStepDefinition", ТаблицаИзвестныхStepDefinition, ПараметрыДляСохраненияНастроек);
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьМассивДляПоискаДублейФайлов(МассивФайлов)
	Массив = Новый Массив;
	
	Для каждого Элем Из МассивФайлов Цикл
		Если ТипЗнч(Элем) = Тип("Структура") Тогда
			Массив.Добавить(Элем.Файл.ПолноеИмя);
		Иначе	
			Массив.Добавить(Элем.ПолноеИмя);
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Массив;
КонецФункции	

&НаКлиенте
Процедура ПолучитьУжеСуществующиеСценарииИзВстроенныхФич()
	#Если НЕ ВебКлиент Тогда
	
	Если ТекстВстроенныхСценариевСервер = Неопределено Тогда
		ТекстВстроенныхСценариевСервер = ДанныеТекстВстроенныхСценариевСервер;
		ДанныеТекстВстроенныхСценариевСервер = "";
	КонецЕсли;	 
	ТекстФичи = ТекстВстроенныхСценариевСервер;
	МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(ТекстФичи, Символы.ПС);
	
	ИмяВременнойФичи = ПолучитьИмяВременногоФайла("feature");
	ЗТ = Новый ЗаписьТекста(ИмяВременнойФичи, "UTF-8",, Истина); 
	ЗТ.Записать(ТекстФичи); 
	ЗТ.Закрыть();
	
	Файл = Новый Файл(ИмяВременнойФичи);
	ОбработатьМассивСтрокФичи(МассивСтрок, ИмяВременнойФичи, Файл);
	
	ТаблицаУжеСуществующихСценариевSingle = СкопироватьМассивСтруктур(ТаблицаУжеСуществующихСценариев);
	
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьУжеСуществующиеСценарииИзФич(Знач КаталогФич, ДополнительныеПараметры, ДанныеУжеОбработанныхаФайлов)
	Файл = Новый Файл(КаталогФич);
	
	НачальныйКаталог = КаталогФич;
	КаталогПоиска    = НачальныйКаталог;
	
	Файл = Новый Файл(НачальныйКаталог);
	Если НРег(Файл.Расширение) = ".feature" Тогда
		КаталогПоиска = Файл.Путь;
	КонецЕсли;	 
	
	Отладка(Локализовать("Ищу сценарии в каталоге") + " " + КаталогПоиска);
	ДанныеФайловЗакешированы = Ложь;
	
	Если ЗапрещеныСинхронныеВызовы И НЕ ВозможнаОптимизацияРаботыСФайлами Тогда
		МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, КаталогФич, "НайденныеФайлы"); // это файлы по данной библиотеке
		Если МассивФайлов = Неопределено Тогда
			МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "ПоискFeature", "НайденныеФайлы");
		КонецЕсли;	 
		
		Для Ном = 1 По Объект.КаталогиБиблиотек.Количество() Цикл
			
			МассивДляПоискаДублейФайлов = ПолучитьМассивДляПоискаДублейФайлов(МассивФайлов);
			
			МассивФайловБиблиотека = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "БиблиотекаФич" + Ном, "НайденныеФайлы");
			Для каждого Элем Из МассивФайловБиблиотека Цикл
				Если МассивДляПоискаДублейФайлов.Найти(Элем.Файл.ПолноеИмя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;	 
				
				МассивФайлов.Добавить(Элем);
			КонецЦикла;
		КонецЦикла;
		
	Иначе	   
		
		Если Объект.ИспользоватьКомпонентуVanessaExt И Объект.ПоискФайловСПомощьюКомпонентыVanessaExt И НЕ ЗапрещеныСинхронныеВызовы Тогда
			ДанныеФайловЗакешированы = Истина;
			МассивФайлов = ПрочитатьСтрокуJSON(ВнешняяКомпонентаДляСкриншотов.НайтиФайлы(КаталогПоиска, "*.feature",,Истина, Истина, Ложь));
			Если МассивФайлов =  Неопределено Тогда
				МассивФайлов = Новый Массив;
			КонецЕсли;
			
		Иначе	
			СписокКаталогов = Новый СписокЗначений;
			СписокФайлов    = Новый СписокЗначений;
			НайтиФайлыКомандаСистемы(КаталогПоиска, СписокКаталогов, СписокФайлов, Истина, Неопределено, "*.feature");
			МассивФайлов = Новый Массив;
			Для Каждого Элем Из СписокФайлов Цикл
				МассивФайлов.Добавить(Элем.Значение);
			КонецЦикла;	 
		КонецЕсли;	
		
	КонецЕсли;	 
	
	Для Каждого ФайлОбъект Из МассивФайлов Цикл
		Если ДанныеФайловЗакешированы Тогда
			Файл = Новый Файл(ФайлОбъект.path);
		Иначе	
			Файл = ФайлОбъект;
			Если Тип(ФайлОбъект) <> Тип("Файл") Тогда
				Файл = ФайлОбъект.Файл;
			КонецЕсли;	 
		КонецЕсли;	
		
		Если НРег(Файл.Расширение) <> ".feature" Тогда
			Продолжить;
		КонецЕсли;	 
		
		ИмяФайла = УниверсальноеПолноеИмяФайла(Файл.ПолноеИмя, Истина);
		
		Если ДанныеУжеОбработанныхаФайлов[ИмяФайла] <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ДанныеУжеОбработанныхаФайлов.Вставить(ИмяФайла, ИмяФайла);
		
		Если НЕ ЗапрещеныСинхронныеВызовы ИЛИ ВозможнаОптимизацияРаботыСФайлами Тогда
			Если ДанныеФайловЗакешированы Тогда
				ВерсияФайла = ФайлОбъект.date;
			Иначе	
				ВерсияФайла = ВерсияФайлаКомандаСистемы(Файл.ПолноеИмя);
			КонецЕсли;	
			
			СохраненнаяВерсииФайла = ДанныеВерсийFeatureИмяФайла[ИмяФайла];
			Если СохраненнаяВерсииФайла = Неопределено Тогда
				ДанныеВерсийFeatureИмяФайла.Вставить(ИмяФайла, ВерсияФайла);
			ИначеЕсли СохраненнаяВерсииФайла <> ВерсияФайла Тогда
				// Значит файл изменился
				// обновляем версию и удаляем старые снипеты
				ДанныеВерсийFeatureИмяФайла.Вставить(ИмяФайла, ВерсияФайла);

				МассивИД = Новый Массив;
				Ном = -1;
				Для каждого Элем Из ТаблицаУжеСуществующихСценариев Цикл
					Ном = Ном + 1;
					Если СравнитьПутиФайлов(Элем.ИмяФайла, ИмяФайла) Тогда
						МассивИД.Добавить(Ном);
					КонецЕсли; 
						
				КонецЦикла;
					
				Для Ккк = 0 По МассивИД.Количество() - 1 Цикл
					ИД = МассивИД[МассивИД.Количество() - 1 - Ккк];
					ТаблицаУжеСуществующихСценариев.Удалить(ИД);
				КонецЦикла;
					
				Отладка("Загрузил новую версию: " + Файл.ПолноеИмя);
			Иначе
				// значит уже актуальная версия файла загружена
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(Файл.ПолноеИмя, "UTF-8");
		
		МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Текст.Прочитать(), Символы.ПС);
		
		Текст.Закрыть();
		
		ОбработатьМассивСтрокФичи(МассивСтрок, Файл.ПолноеИмя, Файл);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьМассивСтрокФичи(МассивСтрок, ИмяВладельца, Файл = Неопределено)
	ТипШага  = "";
	Описание = "";
	Пример   = "";
	
	ПолноеИмяФайла = Неопределено;
	Если Файл <> Неопределено  Тогда
		ПолноеИмяФайла = Файл.ПолноеИмя;
	КонецЕсли;
	
	НашлиТегExportScenarios = Ложь;
	НашлиСекциюПеременных = Ложь;
	ДанныеПеременных = Неопределено;
	ДобавлятьШаги = Ложь;
	Для Ккк = 0 По МассивСтрок.Количество() - 1 Цикл
		Стр = МассивСтрок[Ккк];
		
		Стр = СокрЛП(Стр);
		СтрНРег = НРег(Стр);
		
		Если Стр = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если СтрНРег = "@exportscenarios" Тогда
			НашлиТегExportScenarios = Истина;
			НадоУстановитьСписокШаговVanessaEditor = Истина;
		ИначеЕсли СтрНРег = "variables:" ИЛИ СтрНРег = "переменные:" Тогда
			НашлиСекциюПеременных = Истина;
			ДанныеПеременных = Новый Массив;
		КонецЕсли;	 
		
		Если Лев(СтрНРег, 1) = "@" Тогда
			Если Лев(СтрНРег, 9) = "@типшага:" Тогда 
				ТипШага = Сред(Стр, 10);
			ИначеЕсли Лев(СтрНРег, 10) = "@steptype:" Тогда
				ТипШага = Сред(Стр, 11);
			ИначеЕсли Лев(СтрНРег, 10) = "@описание:" Тогда
				Описание = Сред(Стр, 11);
			ИначеЕсли Лев(СтрНРег, 13) = "@description:" Тогда
				Описание = Сред(Стр, 14);
			ИначеЕсли Лев(СтрНРег, 21) = "@примериспользования:" Тогда
				ПромСтр = Сред(Стр, 22);
				Если Пример = "" Тогда
					Пример = ПромСтр;
				Иначе
					Пример = Пример + Символы.ПС + ПромСтр;
				КонецЕсли;	 
			ИначеЕсли Лев(СтрНРег, 14) = "@exampleofuse:" Тогда
				ПромСтр = Сред(Стр, 15);
				Если Пример = "" Тогда
					Пример = ПромСтр;
				Иначе
					Пример = Пример + Символы.ПС + ПромСтр;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Продолжить;
		КонецЕсли;	 
		
		Если Лев(СтрНРег, 1) = "#" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если НашлиТегExportScenarios Тогда
			Если ЭтоОпределениеСценария(СтрНРег) Тогда
				ДобавлятьШаги = Истина;
				ИмяСценария = СокрЛП(Сред(Стр, 10));
				ТаблицаШагов = Новый Массив;
				
				ТаблицаУжеСуществующихСценариев.Добавить(ПолучитьСтруктуруДляСценария(ИмяСценария, ИмяВладельца, ТаблицаШагов, 
					ДанныеПеременных, ПолноеИмяФайла, Ложь, ТипШага, Описание, Пример, Ккк + 1));
				
				ТипШага  = "";
				Описание = "";
				Пример   = "";
				НашлиСекциюПеременных = Ложь;
				Продолжить;
			ИначеЕсли ЭтоОпределениеСтруктурыСценария(СтрНРег) Тогда
				ДобавлятьШаги = Истина;
				ИмяСценария = СокрЛП(Сред(Стр, 20));
				ТаблицаШагов = Новый Массив;
				ТаблицаУжеСуществующихСценариев.Добавить(ПолучитьСтруктуруДляСценария(ИмяСценария, ИмяВладельца, ТаблицаШагов, 
					ДанныеПеременных, ПолноеИмяФайла, Истина, ТипШага, Описание, Пример, Ккк + 1));
				
				ТипШага  = "";
				Описание = "";
				Пример   = "";
				НашлиСекциюПеременных = Ложь;
				Продолжить;
			КонецЕсли;	
			
			Если ДобавлятьШаги Тогда
				ТаблицаШагов.Добавить(Стр);
			КонецЕсли;	 
		ИначеЕсли ЭтоОпределениеСценария(СтрНРег) Тогда
			НашлиСекциюПеременных = Ложь;
			Прервать;
		КонецЕсли;	 
		
		Если НашлиСекциюПеременных Тогда
			ДанныеСтроки = Новый Структура;
			ДанныеСтроки.Вставить("Стр", Стр);
			ДанныеСтроки.Вставить("НомерСтроки", Ккк + 1);
			ДанныеПеременных.Добавить(ДанныеСтроки);
		КонецЕсли;	 
		
	КонецЦикла;	
	
	Если ДанныеПеременных <> Неопределено И ПолноеИмяФайла <> Неопределено  Тогда
		ДанныеСекцииПеременныхФич.Вставить(УниверсальноеПолноеИмяФайла(ПолноеИмяФайла,Истина),
			Новый Структура("ДанныеПеременных", ДанныеПеременных));
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьСтруктуруДляСценария(ИмяСценария, ИмяФайла, ТаблицаШагов, ДанныеПеременных, ПолноеИмя, ЭтоСтруктураСценария, ТипШага, Описание, Пример, НомерСтрокиВФиче)
	Структура = Новый Структура;
	Структура.Вставить("ИмяСценария", ИмяСценария);
	Структура.Вставить("ИмяФайла", ИмяФайла);
	Структура.Вставить("ПолноеИмя", ПолноеИмя);
	Структура.Вставить("ТаблицаШагов", ТаблицаШагов);
	Структура.Вставить("ЭтоСтруктураСценария", ЭтоСтруктураСценария);
	Если ПолноеИмя <> Неопределено Тогда
		Если ВозможнаОптимизацияРаботыСФайлами Тогда
			Структура.Вставить("ДвоичныеДанные", Неопределено);
		Иначе	
			Структура.Вставить("ДвоичныеДанные", Новый ДвоичныеДанные(ПолноеИмя));
		КонецЕсли;	 
	Иначе	
		Структура.Вставить("ДвоичныеДанные", Неопределено);
	КонецЕсли;	 
	Структура.Вставить("Снипет", "");
	
	Структура.Вставить("ТипШага", СокрЛП(ТипШага));
	Структура.Вставить("ОписаниеШага", СокрЛП(Описание));
	Структура.Вставить("ПримерИспользования", СокрЛП(Пример));
	Структура.Вставить("НомерСтрокиВФиче", НомерСтрокиВФиче);
	Структура.Вставить("ДанныеПеременных", ДанныеПеременных);
	
	Возврат Структура;
КонецФункции	

&НаКлиенте
Функция ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, ИмяПараметра, ЗначениеПараметра)
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	Для каждого Элем Из МассивДействий Цикл
		Если Элем.ИмяПараметра = ИмяПараметра Тогда
			Возврат Элем[ЗначениеПараметра];
		КонецЕсли;	 
	КонецЦикла;
КонецФункции	

&НаКлиенте
Функция ПроверитьСуществованиеКаталогаИнструментов(ИмяФайла, ДополнительныеПараметры, ПутьКОбработке)
	Перем ПутьФайла;
	Если ЗапрещеныСинхронныеВызовы И НЕ ВозможнаОптимизацияРаботыСФайлами Тогда
		Возврат ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "КаталогИнструментов", "Существует");
	Иначе	
		ПутьФайла = ПреобразоватьПутьСТочкамиКНормальномуПути(ИмяФайла);
		Если НЕ ФайлСуществуетКомандаСистемы(ПутьФайла) Тогда
			СообщитьПользователю (ПодставитьПараметрыВСтроку(
				Локализовать("Не найден каталог инструментов: %1"),
				ИмяФайла
			));
			Возврат Ложь;
		КонецЕсли;	   
		
	КонецЕсли;	 
	Возврат Истина;
КонецФункции	

&НаКлиенте
Функция ПроверитьСуществованиеКаталогаБиблиотек(ДополнительныеПараметры, ПутьКОбработке)
	
	Результат = Истина;
	
	Если ЗапрещеныСинхронныеВызовы И НЕ ВозможнаОптимизацияРаботыСФайлами Тогда
		НПП = 0;
		Для каждого Элем Из Объект.КаталогиБиблиотек Цикл
			НПП = НПП + 1;
			
			Если ПустаяСтрока(Элем.Значение) Тогда
				Продолжить;
			КонецЕсли;	 
			
			Если НЕ ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "КаталогиБиблиотек" + НПП, "Существует") Тогда
				Результат = Ложь;
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = ПодставитьПараметрыВСтроку(
					Локализовать("Не найден каталог библиотеки: %1"),
					Объект.КаталогиБиблиотек[НПП - 1].Значение
				);
				СообщениеПользователю.Поле  = "КаталогиБиблиотек[%1].Значение";
				СообщениеПользователю.Поле = СтрЗаменить(СообщениеПользователю.Поле, "%1", Формат(НПП, "ЧГ=; ЧН=0"));
				СообщениеПользователю.ПутьКДанным = "Объект";
				СообщениеПользователю.Сообщить();
			КонецЕсли;	  
		КонецЦикла;	
	Иначе	
		НПП = 0;
		Для каждого Элем Из Объект.КаталогиБиблиотек Цикл
			НПП = НПП + 1;
			ПутьФайла = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);
			
			Если ПустаяСтрока(ПутьФайла) Тогда
				Продолжить;
			КонецЕсли;	 
			
			Если НЕ ФайлСуществуетКомандаСистемы(ПутьФайла) Тогда
				Результат = Ложь;
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = ПодставитьПараметрыВСтроку(
					Локализовать("Не найден каталог библиотеки: %1"),
					Элем.Значение
				);
				СообщениеПользователю.Поле  = "КаталогиБиблиотек[%1].Значение";
				СообщениеПользователю.Поле = СтрЗаменить(СообщениеПользователю.Поле, "%1", Формат(НПП, "ЧГ=; ЧН=0"));
				СообщениеПользователю.ПутьКДанным = "Объект";
				СообщениеПользователю.Сообщить();
			КонецЕсли;	   
		КонецЦикла;
		
	КонецЕсли;	 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИДСтрокиДереваСервер(СтруктураПараметров, Дерево)
	МассивИменКонтекстовОбработок = СтруктураПараметров.МассивИменКонтекстовОбработок;
	
	МассивСтрокДереваДанныеФормы = Новый Соответствие;
	ЗаполнитьИДСтрокиВДереве(Дерево, МассивСтрокДереваДанныеФормы, МассивИменКонтекстовОбработок, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДействиеВМассивАсинхронныхСобытий(Массив, Путь, ИмяПараметра, ТипПараметра)
	
	СтруктураФайла = Новый Структура;
	СтруктураФайла.Вставить("ИмяФайла", Путь);
	СтруктураФайла.Вставить("ИмяПараметра", ИмяПараметра);
	СтруктураФайла.Вставить("ТипПараметра", ТипПараметра);
	
	Массив.Добавить(СтруктураФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСканированиеКаталогов(Массив)

	ДобавитьДействиеВМассивАсинхронныхСобытий(Массив, "", "ПоискEPF", "СканированиеКаталогаПоискEPF");
	ДобавитьДействиеВМассивАсинхронныхСобытий(Массив, "", "ПоискFeature", "СканированиеКаталогаПоискFeature");
	Ном = 0;
	Для каждого Элем Из Объект.КаталогиБиблиотек Цикл
		Ном = Ном + 1;
		ПутьФайла = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);
		ДобавитьДействиеВМассивАсинхронныхСобытий(Массив, "", ПутьФайла, "СканированиеКаталогаПоискEPF");
		ДобавитьДействиеВМассивАсинхронныхСобытий(Массив, "", "БиблиотекаФич" + Ном, "СканированиеКаталогаПоискFeature");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМассивСостоянийФайлов(Массив)
	
	ДобавитьДействиеВМассивАсинхронныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогИнструментов), 
		"КаталогИнструментов", "РаботаСФайлом");
	ДобавитьДействиеВМассивАсинхронныхСобытий(Массив, ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогИнструментов)) 
		+ "lib/FeatureReader/vbFeatureReader.epf", "vbFeatureReader", "РаботаСФайлом");
	ДобавитьДействиеВМассивАсинхронныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиAllure), 
		"КаталогOutputAllure", "РаботаСФайлом");
	ДобавитьДействиеВМассивАсинхронныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиJUnit), 
		"КаталогOutputjUnit", "РаботаСФайлом");
	ДобавитьДействиеВМассивАсинхронныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиCucumberJson), 
		"КаталогOutputCucumberJson", "РаботаСФайлом");
	ДобавитьДействиеВМассивАсинхронныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийHTML), 
		"КаталогOutputИнструкцияHTML", "РаботаСФайлом");
	ДобавитьДействиеВМассивАсинхронныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.СтилиHTMLИнструкции), 
		"СтилиHTMLИнструкции", "РаботаСФайлом");
	ДобавитьДействиеВМассивАсинхронныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогФич), "КаталогФич", "РаботаСФайлом");

	Ном = 0;
	Для каждого Элем Из Объект.КаталогиБиблиотек Цикл
		Ном = Ном + 1;
		ПутьФайла = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);
		ДобавитьДействиеВМассивАсинхронныхСобытий(Массив, ПутьФайла, "КаталогиБиблиотек" + Ном, "РаботаСФайлом");
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработатьАсинронноСледующийФайл(ДополнительныеПараметры)
	ДополнительныеПараметры.ТекИдМассива = ДополнительныеПараметры.ТекИдМассива + 1;
	ПолучитьАсинронноСостоянияОбъектовФайловойСистемы(ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВерсиюФайловАсинхронно(ДополнительныеПараметры)
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];
	НайденныеФайлы = СтруктураФайла.НайденныеФайлы;
	
	СтруктураФайла.ИДФайлаДляОбработки = СтруктураФайла.ИДФайлаДляОбработки + 1;
	Если СтруктураФайла.ИДФайлаДляОбработки > (НайденныеФайлы.Количество() - 1) Тогда
		ОбработатьАсинронноСледующийФайл(ДополнительныеПараметры);
	Иначе
		Файл = Новый Файл(НайденныеФайлы[СтруктураФайла.ИДФайлаДляОбработки].Файл.ПолноеИмя);
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработчикНачатьПолучитьВремяИзмененияФайлаМассив"", ЭтаФорма, ДополнительныеПараметры)");
		Выполнить("Файл.НачатьПолучениеВремениИзменения(ОписаниеОповещения)");
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьАсинронноСостоянияОбъектовФайловойСистемы(ДополнительныеПараметры);
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	Если ТекИдМассива > (МассивДействий.Количество() - 1) Тогда
		Если ДополнительныеПараметры.НадоЗагрузитьФичи Тогда
			ЗагрузитьФичиПродолжение(ДополнительныеПараметры);
		КонецЕсли;
		
		Если ДополнительныеПараметры.НадоГенерироватьEPF Тогда
			СоздатьШаблоныОбработокПродолжение(ДополнительныеПараметры);
		КонецЕсли;	 
		
		Если ДополнительныеПараметры.ОткрытьФормуИзвестныхШагов Тогда
			ОткрытьФормуИзвестныхШаговПодключитьОбработкиПродолжение(ДополнительныеПараметры);
		КонецЕсли;	 
		
		Возврат;
	КонецЕсли;	 
	
	СтруктураФайла = МассивДействий[ТекИдМассива];
	Если СтруктураФайла.ТипПараметра = "РаботаСФайлом" Тогда
		Файл = Новый Файл(СтруктураФайла.ИмяФайла);
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработчикНачатьПроверкуСуществования"", ЭтаФорма, ДополнительныеПараметры)");
		Выполнить("Файл.НачатьПроверкуСуществования(ОписаниеОповещения)");
	ИначеЕсли	Найти(СтруктураФайла.ТипПараметра, "СканированиеКаталогаПоиск") > 0 Тогда
		Если (СтруктураФайла.ИмяПараметра = "ПоискEPF" ИЛИ СтруктураФайла.ИмяПараметра = "ПоискFeature")
			И НЕ ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "КаталогФич", "Существует") Тогда
			ОбработатьАсинронноСледующийФайл(ДополнительныеПараметры);
			Возврат;
		КонецЕсли;	 
		
		Если (СтруктураФайла.ИмяПараметра = "ПоискEPF") 
				ИЛИ (СтруктураФайла.ИмяПараметра = "ПоискFeature") 
				ИЛИ (Лев(СтруктураФайла.ИмяПараметра, 13) = "БиблиотекаФич") Тогда
			// значит мы ищем родные epf для фич

			Если Лев(СтруктураФайла.ИмяПараметра, 13) = "БиблиотекаФич" Тогда
				Ном = СтрЗаменить(СтруктураФайла.ИмяПараметра, "БиблиотекаФич", "");
				Ном = СтрЗаменить(Ном, Символы.НПП, "");
				Ном = Число(Ном);
				Путь = Объект.КаталогиБиблиотек[Ном - 1].Значение;
			Иначе	
				ПутьКФичам = Новый Файл(Объект.КаталогФич);
				Путь = ПутьКФичам.ПолноеИмя;
				Если Не ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "КаталогФич", "ЭтоКаталог") Тогда // это файл
					Путь = ПутьКФичам.Путь;
				КонецЕсли;	 
			КонецЕсли;
			
			Путь = ПреобразоватьПутьСТочкамиКНормальномуПути(Путь);
			
		Иначе
			Путь = СтруктураФайла.ИмяПараметра;
		КонецЕсли;	 
		
		Маска = "*." + НРег(СтрЗаменить(СтруктураФайла.ТипПараметра, "СканированиеКаталогаПоиск", ""));
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработчикНачатьПоискФайлов"", Этаформа, ДополнительныеПараметры)");
		
		Если СтруктураФайла.ТипПараметра = "СканированиеКаталогаПоискFeature" Тогда
			Маска = "*";
		КонецЕсли;	 
		НачатьПоискФайлов(ОписаниеОповещения, Путь, Маска, Истина); 
	Иначе
		СообщитьПользователю (ПодставитьПараметрыВСтроку(
			Локализовать("Неивестный ТипПараметра в ПолучитьАсинронноСостоянияОбъектовФайловойСистемы: %1"),
			СтруктураФайла.ТипПараметра
		));
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервере
Функция НайтиИДСтрокиСценарияПоИмени(Знач Имя)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	
	Дерево = ОбъектСервер.ДеревоТестов;
	Строки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя, Тип", Имя, "Сценарий"), Истина);
	Если Строки.Количество() > 0 Тогда
		Возврат Строки[0].ИдСтроки;
	КонецЕсли;	 
	
	Возврат Неопределено;
	
КонецФункции	

&НаКлиенте
Функция ПустыеДанныеСекцииПеременные()
	Результат = Новый Структура;
	Результат.Вставить("ПростыеПеременные", Новый Соответствие);
	Результат.Вставить("ПростыеПеременныеКакВФайле", Новый Соответствие);
	Результат.Вставить("ТаблицыПеременных", Новый Соответствие);
	Результат.Вставить("ЕстьТаблицаПеременных", Новый Соответствие);
	Результат.Вставить("ДанныеЭкспортныхПеременных", Новый Соответствие);
	Возврат Результат;
КонецФункции	 

&НаКлиенте
Процедура ЗагрузитьФичиПродолжение(ДополнительныеПараметры = Неопределено)
	КаталогИнструментов = Объект.КаталогИнструментов;
	КаталогФич          = Объект.КаталогФич;
	DebugLog            = Объект.DebugLog;
	КаталогиБиблиотек   = Объект.КаталогиБиблиотек.Скопировать();
	ПутьКОбработке		= ПолучитьПутьКОбработкеКлиент();
	
	Для каждого ЭлементБиблиотеки Из КаталогиБиблиотек  Цикл
		ЭлементБиблиотеки.Значение = ПреобразоватьПутьСТочкамиКНормальномуПути(ЭлементБиблиотеки.Значение);
	КонецЦикла; 
	
	Если НЕ ПроверитьСуществованиеКаталогаБиблиотек(ДополнительныеПараметры, ПутьКОбработке) Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ВерсияПоставки = "standart" Тогда
		Если НЕ ПроверитьСуществованиеКаталогаИнструментов(КаталогИнструментов, ДополнительныеПараметры, ПутьКОбработке) Тогда
			СообщитьПользователю(Локализовать("Не заполнен служебный параметр КаталогИнструментов."));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если НЕ ФичаФайлПереданТекстом Тогда
		Если ПустаяСтрока(КаталогФич) Тогда
			ТекстСообщения = Локализовать("Не указан фича файл или каталог фича файлов для загрузки.");
			СообщитьПользователю(ТекстСообщения);
			ЗаписатьЛогВЖРОшибкаСервер("VanessaAutomation.ВыполнениеСценариев", ТекстСообщения);
			Возврат;
		КонецЕсли;	 
		
		Если НЕ ФайлСуществуетКомандаСистемы(КаталогФич) Тогда
			ТекстСообщения = ПодставитьПараметрыВСтроку(Локализовать("Файл <%1> не существует."), КаталогФич);
			СообщитьПользователю(ТекстСообщения);
			ЗаписатьЛогВЖРОшибкаСервер("VanessaAutomation.ВыполнениеСценариев", ТекстСообщения);
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КаталогИнструментов", КаталогИнструментов);
	СтруктураПараметров.Вставить("КаталогФич", КаталогФич);
	СтруктураПараметров.Вставить("ПутьКОбработке", ПутьКОбработке);
	
	СтруктураПараметров.Вставить("ФичаФайлПереданТекстом", ФичаФайлПереданТекстом);
	СтруктураПараметров.Вставить("ПереданныйТекстФичаФайла", ПереданныйТекстФичаФайла);
	
	МассивСообщений = Новый Массив;
	СтруктураПараметров.Вставить("МассивСообщений", МассивСообщений);
	СтруктураПараметров.Вставить("DebugLog", DebugLog);
	СтруктураПараметров.Вставить("КаталогиБиблиотек", КаталогиБиблиотек);
	СтруктураПараметров.Вставить("МетаданныеБиблиотек", Объект.МетаданныеБиблиотек);
	СтруктураПараметров.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	СтруктураПараметров.Вставить("СписокТеговИсключение", Объект.СписокТеговИсключение);
	СтруктураПараметров.Вставить("СписокСценариевДляВыполнения", Объект.СписокСценариевДляВыполнения);
	СтруктураПараметров.Вставить("СписокТеговОтбор", Объект.СписокТеговОтбор);
	СтруктураПараметров.Вставить("Брейкпоинты", Брейкпоинты);
	СтруктураПараметров.Вставить("РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов", 
		Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов);
	СтруктураПараметров.Вставить("МассивИменКонтекстовОбработок", МассивИменКонтекстовОбработок);
	СтруктураПараметров.Вставить("ЭтоЗагрузкаФич", Истина);
	СтруктураПараметров.Вставить("ИспользоватьРедакторVanessaEditor", Объект.ИспользоватьРедакторVanessaEditor);
	
	КопияДанныеСекцииПеременные = ДанныеСекцииПеременные;
	СтруктураПараметров.Вставить("ДанныеСекцииПеременные", ПустыеДанныеСекцииПеременные());
	
	СтруктураПараметров.Вставить("ТекстСообщенийПользователю", Объект.ТекстСообщенийПользователю);
	ТекущийЗагружаемыйФичаФайл = Неопределено;
	Если Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов Тогда
		СтруктураПараметров.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийССохранениемКонтекстов", СтрокаШагаСКоторогоНадоВыполнятьСценарий.ИдСтроки);
	КонецЕсли;	 
	
	Попытка
		ЗаполнитьДеревоФич(СтруктураПараметров);
	Исключение
		ФлагСценарииЗагружены = Истина;
		СообщитьПользователюИВызватьИсключение(ПодставитьПараметрыВСтроку(
			Локализовать("Ошибка при построении дерева из файла <%1>%2%3"),
			ТекущийЗагружаемыйФичаФайл,
			Символы.ПС,
			ОписаниеОшибки()
		));
	КонецПопытки;
	
	Если СтруктураПараметров.Свойство("ОшибкаЗагрузкиФич") Тогда
		Если ДополнительныеПараметры <> Неопределено Тогда
			ДополнительныеПараметры.Вставить("ОшибкаЗагрузкиФич", СтруктураПараметров.ОшибкаЗагрузкиФич);
			Если СтруктураПараметров.Свойство("ТекстОшибки") Тогда
				ДополнительныеПараметры.Вставить("ТекстОшибки", СтруктураПараметров.ТекстОшибки);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Для каждого Элем Из МассивСообщений Цикл
		СообщитьПользователю(Элем);
	КонецЦикла;
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		НадоОбновитьДанныеРедактораПриПереходеИзДерева = Ложь;
		ДанныеРедактораПослеЗагрузкиФичи = Новый Структура;
		Если VanessaTabs = Неопределено ИЛИ VanessaTabs.current = Неопределено ИЛИ НЕ ЭтоВкладкаEdit(VanessaTabs.current) Тогда
			ДанныеРедактораПослеЗагрузкиФичи.Вставить("VersionId", Неопределено);
		Иначе	
			ДанныеРедактораПослеЗагрузкиФичи.Вставить("VersionId", VanessaTabs.current.getVersionId());
		КонецЕсли;	 
		ДанныеРедактораПослеЗагрузкиФичи.Вставить("ИмяФайла", Объект.КаталогФич);
	КонецЕсли;	 
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если ЭтаФорма.ТекущийЭлемент <> Элементы.VanessaEditor Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.VanessaEditor;
		КонецЕсли;	 
	Иначе	
		Если ЭтаФорма.ТекущийЭлемент <> Элементы.ДеревоТестов Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоТестов;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ДополнительныеПараметры.Свойство("ДанныеДляАктивизацииСтрокиПриОткрытииФичи") Тогда
		ОбновитьТекущуюСтрокуРедактораСРасчетомВиджета(ДополнительныеПараметры.ДанныеДляАктивизацииСтрокиПриОткрытииФичи);
	КонецЕсли;	 
	
	Если ДополнительныеПараметры.Свойство("ВыполнитьПроцедуруЧерезОбработчикОжидания") Тогда
		ПодключитьОбработчикОжидания(ДополнительныеПараметры.ВыполнитьПроцедуруЧерезОбработчикОжидания, 0.1, Истина);
		Возврат;
	КонецЕсли;	 
	
	ПодключитьОбработчикОжидания("АсинхронноеОбновлениеФормыПослеЗагрузкиФичи", 0.1, Истина);
    глСтруктураПараметров = СтруктураПараметров;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ПерезагрузитьИВыполнить")
			И ДополнительныеПараметры.ПерезагрузитьИВыполнить Тогда
				ПерезагрузитьИВыполнить("");
		ИначеЕсли ДополнительныеПараметры.Свойство("ВыполнитьСценарии")
			И ДополнительныеПараметры.ВыполнитьСценарии Тогда
				ВыполнитьСценарии();
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура АсинхронноеОбновлениеФормыПослеЗагрузкиФичи()
	
	Если ТипЗнч(глСтруктураПараметров) = Тип("Структура") И глСтруктураПараметров.Свойство("Статистика_Заголовок") Тогда
		Элементы.Статистика.Заголовок = глСтруктураПараметров.Статистика_Заголовок;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеФичи(ИмяФайла)
	ДанныеФичи = Новый Структура;
	ДанныеФичи.Вставить("ЯзыкФичи", Неопределено);
	ДанныеФичи.Вставить("ТаблицаСтрокФичи", Неопределено);
	
	Если ФреймворкЗапущенВWebКлиенте Тогда
		Возврат ДанныеФичи;
	КонецЕсли;	
	
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		Возврат ДанныеФичи;
	КонецЕсли;	
	
	Если Прав(НРег(ИмяФайла), 8) <> ".feature" Тогда
		Возврат ДанныеФичи;
	КонецЕсли;	 
	
	Попытка
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайла, "UTF-8");
		
		ТаблицаСтрокФичи = РазложитьСтрокуВМассивПодстрокКлиент(Текст.Прочитать(), Символы.ПС);
		Текст.Закрыть();
		
		ДанныеФичи.Вставить("ТаблицаСтрокФичи", ТаблицаСтрокФичи);
		
		Для Каждого Стр Из ТаблицаСтрокФичи Цикл
			Стр = СокрЛП(НРег(Стр));
			
			Если Лев(Стр, 1) = "#" Тогда
				Стр = СокрЛ(Сред(Стр, 2));
				
				Если Найти(Стр, "language:") > 0 Тогда
					ДанныеФичи.Вставить("ЯзыкФичи", Прав(Стр, 2));
					Прервать;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;	 
			
			Если ЭтоОпределениеСценария(Стр) Тогда
				ДанныеФичи.Вставить("ЯзыкФичи", "ru");
				Прервать;
			КонецЕсли;	 
			
		КонецЦикла;	
		
	Исключение
		Возврат ДанныеФичи;
	КонецПопытки;
	
	Возврат ДанныеФичи;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДеревоФичПродолжение2(СтруктураПараметров, ДополнительныеПараметры)
	Если Объект.ИспользоватьРедакторVanessaEditor И СтруктураПараметров.Свойство("ДанныеОшибокДляРедактора") Тогда
		ДополнительныеПараметры.Вставить("ДанныеОшибокДляРедактора", СтруктураПараметров.ДанныеОшибокДляРедактора);
	КонецЕсли;	 

	Если Объект.ИспользоватьРедакторVanessaEditor И ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Вставить("НадоОбновитьВставкиVanessaEditor", СтруктураПараметров.НадоОбновитьВставкиVanessaEditor);
		ДополнительныеПараметры.Вставить("СтрокиПодсценариевВиджетов", Новый Массив);
		МодульРедакторТекста().ЗагрузитьФичаФайлVanessaEditor(ДополнительныеПараметры);
	КонецЕсли;	 

	Если Брейкпоинты.Количество() > 0 И Объект.ИспользоватьРедакторVanessaEditor Тогда
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовБрейкпоинт.Видимость = Истина;
	КонецЕсли;	 
	
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor И НЕ Объект.ЗапускИзКоманднойСтроки И НЕ ВыполнениеСценариевБезОткрытияФормы Тогда
		ПоказатьОповещениеПользователя(Локализовать("Фичи загружены"));
	КонецЕсли;	 
	
	Если СтруктураПараметров.БылиОшибкиЗагрузкиФич И Объект.ЗавершитьРаботуСистемыПослеВыполненияВсехСценариев Тогда
		ПрекратитьРаботуСеансаVanessaAutomation();
	ИначеЕсли Объект.ВыполнитьСценарииПослеЗагрузкиФич И НЕ СтруктураПараметров.БылиОшибкиЗагрузкиФич Тогда
		Объект.ВыполнитьСценарииПослеЗагрузкиФич = Ложь;
		ВыполнитьСценарии();
	ИначеЕсли Объект.ВыполнитьСценарииПослеЗагрузкиФичОдинРаз Тогда
		Объект.ВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Ложь;
		МассивИд = Неопределено;
		ДопПараметры = Неопределено;
		Если ЗначениеЗаполнено(ИмяСценарияКоторыйНадоВыполнитьПослеПерезагрузки) Тогда
			ИдСтроки = НайтиИДСтрокиСценарияПоИмени(ИмяСценарияКоторыйНадоВыполнитьПослеПерезагрузки);
			ИмяСценарияКоторыйНадоВыполнитьПослеПерезагрузки = "";
			Если ИдСтроки <> Неопределено Тогда
				МассивИд = Новый Массив;
				МассивИд.Добавить(ИдСтроки);
			КонецЕсли;	 
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ЭтоПример", СтрокаСценарияКоторыйНадоВыполнитьПослеПереазгрузкиЭтоПример);
		КонецЕсли;	 
		
		ВыполнитьСценарии(МассивИд, ДопПараметры);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьФлагСценарииЗагружены", 0.1, Истина);
	Если  ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ЗапуститьСценарийСоСтрокиПрисланнойИзвне")
		И ДополнительныеПараметры.ЗапуститьСценарийСоСтрокиПрисланнойИзвне Тогда
			ПодключитьОбработчикОжидания("ЗапуститьСценарийСоСтрокиПрисланнойИзвне", 0.1, Истина);
	КонецЕсли;	 
		
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ВыполнитьПроцедуруЧерезОбработчикОжиданияОтложенный") Тогда
		ПодключитьОбработчикОжидания(ДополнительныеПараметры.ВыполнитьПроцедуруЧерезОбработчикОжиданияОтложенный, 0.1, Истина);
		Возврат;
	КонецЕсли;	 
	
	Если СтруктураПараметров.Свойство("СделатьПереходкКТексту") Тогда
		глЗначениеПереходкКТекстуВРедакторе = СтруктураПараметров.СделатьПереходкКТексту;
		ПодключитьОбработчикОжидания("СделатьПереходкКТекстуВРедакторе",0.5, Истина);
	КонецЕсли;	 
	
	ПодключитьОбработчикОжидания("АсинхронноеОбновлениеФормыПослеЗагрузкиФичи", 0.1, Истина);
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьДеревоФичПродолжение()
	СтруктураПараметров = глСтруктураПараметров;
	
	КаталогФич              = СтруктураПараметров.КаталогФич;

	КаталогиБиблиотек       = СтруктураПараметров.КаталогиБиблиотек;
	ДополнительныеПараметры = СтруктураПараметров.ДополнительныеПараметры;
	
	МассивИменФайловКоторыеСовпалиСКеш = СтруктураПараметров.МассивИменФайловКоторыеСовпалиСКеш;
	Путь                               = СтруктураПараметров.Путь;
	ПутьКФичам = Новый Файл(КаталогФич);
	
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor И НЕ Объект.ЗапускИзКоманднойСтроки И НЕ ВыполнениеСценариевБезОткрытияФормы Тогда
		Состояние(Локализовать("Построение дерева."));
	КонецЕсли;	 
	
	УдалитьСтрокиТаблицаИзвестныхStepDefinitionКоторыеНеОбрабатывались(МассивИменФайловКоторыеСовпалиСКеш);
	
	Если ЗапрещеныСинхронныеВызовы И НЕ ВозможнаОптимизацияРаботыСФайлами Тогда
		Если Объект.ВерсияПоставки = "single" И ТаблицаУжеСуществующихСценариевSingle <> Неопределено Тогда
			//Есть сценарии VA из основной поставки, которые надо загрузить из кеша Single
			ТаблицаУжеСуществующихСценариев = СкопироватьМассивСтруктур(ТаблицаУжеСуществующихСценариевSingle);
		Иначе	
			ТаблицаУжеСуществующихСценариев = Новый Массив;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Объект.ВерсияПоставки = "single" Тогда
		Если ТаблицаУжеСуществующихСценариев.Количество() = 0 Тогда
			ПолучитьУжеСуществующиеСценарииИзВстроенныхФич();
		КонецЕсли;	 
	КонецЕсли;	 
	
	ДанныеФичи = ДанныеФичи(КаталогФич);
	ЯзыкФичи = ДанныеФичи.ЯзыкФичи;
	
	ДанныеОбработанныхФичаФайлов = Новый Соответствие; //нужен, чтобы не обрабатывать фича файл дважды, когда загружается фича из каталога библиотек
	ПолучитьУжеСуществующиеСценарииИзФич(Путь, ДополнительныеПараметры, ДанныеОбработанныхФичаФайлов);
	Для каждого Элем Из КаталогиБиблиотек Цикл
		ПолучитьУжеСуществующиеСценарииИзФич(Элем.Значение, ДополнительныеПараметры, ДанныеОбработанныхФичаФайлов);
	КонецЦикла;
	
	МодульРедакторТекста().ЗагрузитьБрейкпоинтыИзVanessaEditor();
	
	СтруктураПараметров.Вставить("ТаблицаУжеСуществующихСценариевУФ", ТаблицаУжеСуществующихСценариев);
	СтруктураПараметров.Вставить("ДанныеСекцииПеременныхФич", ДанныеСекцииПеременныхФич);
	СтруктураПараметров.Вставить("ЭтоLinux", ЭтоLinux);
	СтруктураПараметров.Вставить("ЯзыкГенератораGherkin", Объект.ЯзыкГенератораGherkin);
	СтруктураПараметров.Вставить("ДвоичныеДанныеФайлПеревода", ПолучитьФайлыПеревода(ЯзыкФичи));
	СтруктураПараметров.Вставить("БылиОшибкиЗагрузкиФич", Ложь);
	СтруктураПараметров.Вставить("КешСнипетов", КешСнипетов);
	СтруктураПараметров.Вставить("СтрокаПробелов", СтрокаПробелов);
	СтруктураПараметров.Вставить("ДанныеФичи", ДанныеФичи);
	СтруктураПараметров.Вставить("НадоОбновитьВставкиVanessaEditor", Ложь);	
	СтруктураПараметров.Вставить("ЗаполнитьДеревоФичПродолжение2", Истина);	
	
	ТаблицаУжеСуществующихСценариев = СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ;
	
	глПараметрыЗаполнитьДеревоФичПродолжение2 = Новый Структура;
	глПараметрыЗаполнитьДеревоФичПродолжение2.Вставить("СтруктураПараметров", СтруктураПараметров);
	глПараметрыЗаполнитьДеревоФичПродолжение2.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	Попытка
		ЗаполнитьДерево(ПутьКФичам.ПолноеИмя, ДополнительныеПараметры, СтруктураПараметров);
		Если СтруктураПараметров.БылиОшибкиЗагрузкиФич Тогда
			СообщитьПользователю(Локализовать("При загрузке фича файлов возникли ошибки."));
			Для Каждого Стр Из СтруктураПараметров.ОшибкиЗагрузкиФич Цикл
				Если ПустаяСтрока(Стр) Тогда
					Продолжить;
				КонецЕсли;	 
				СообщитьПользователю(Стр);
			КонецЦикла;	 
		КонецЕсли;	 
	Исключение
		Если Объект.ИспользоватьРедакторVanessaEditor Тогда
			СообщитьПользователю(ОписаниеОшибки());
		Иначе	
			ВызватьИсключение ОписаниеОшибки();
		КонецЕсли;	 
	КонецПопытки;
	
	Если СтруктураПараметров.ЗаполнитьДеревоФичПродолжение2 Тогда
		ЗаполнитьДеревоФичПродолжение2(СтруктураПараметров, ДополнительныеПараметры);
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьФлагСценарииЗагружены()
	ФлагСценарииЗагружены = Истина;
	Если НадоПерейтиКСтрокеДерева <> -1 Тогда
		НужнаяСтрока = Неопределено;
		НайтиСтрокуДереваПоИдСтроки(НадоПерейтиКСтрокеДерева, Объект.ДеревоТестов.ПолучитьЭлементы(), НужнаяСтрока);
		Если НужнаяСтрока <> Неопределено Тогда
			Элементы.ДеревоТестов.ТекущаяСтрока = НужнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;	 
		НадоПерейтиКСтрокеДерева = -1;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьПутиБиблиотек()
	Для Каждого Элем Из Объект.КаталогиБиблиотек Цикл
		Если Прав(Элем.Значение, 1) = "\" ИЛИ Прав(Элем.Значение, 1) = "/" Тогда
			Элем.Значение = Лев(Элем.Значение, СтрДлина(Элем.Значение) - 1);
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ПолучитьВерсиюОбработкиСервер(Знач ТолькоЦифры = Ложь)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьВерсиюОбработки(Ложь, ТолькоЦифры);
КонецФункции

&НаСервере
Процедура ЗаполнитьКаталогИнструментовЕслиОнПустой()
	КаталогИнструментов = Объект.КаталогИнструментов;
	
	Если СокрЛП(КаталогИнструментов) = "" Тогда
		
		ИспользуемоеИмяФайла = ПолучитьПутьКОбработкеСервер();
		
		Если ЗначениеЗаполнено(ИспользуемоеИмяФайла) 
				И (Лев(НРег(ИспользуемоеИмяФайла), 6) <> "e1cib/") 
				И (Лев(НРег(ИспользуемоеИмяФайла), 6) <> "e1cib\") Тогда
			Файл = Новый Файл(ИспользуемоеИмяФайла);
			КаталогИнструментов = Файл.Путь;
		Иначе	
			// Попытаемся восстановить из настроек. Это нужно, когда Vanessa Automation вызвали программно, а затем сразу открыли
			// интерактивно. В этом случае 1С подгружает версию из кеша от первой загрузки на сервере, и
			// Объект().ИспользуемоеИмяФайла возвращает адрес в хранилище, а не имя исходного файла.
			Настройки = ХранилищеОбщихНастроек.Загрузить(ПолучитьИДСохраненияОбщихНастроек(Объект.РежимСамотестирования, Объект.ВерсияПоставки, ЭтоРежимОбученияСервер()));
			Если Настройки = Неопределено Тогда
				Настройки = ХранилищеОбщихНастроек.Загрузить(ПолучитьИДДляОбщегоСохраненияНастроек_Old());
			КонецЕсли;	 
			
			Если ТипЗнч(Настройки) = Тип("Структура") Тогда
				Настройки.Свойство("КаталогИнструментов", КаталогИнструментов);
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;	 
	
	Если Прав(КаталогИнструментов, 1) =  "\" Тогда
		КаталогИнструментов = Лев(КаталогИнструментов, СтрДлина(КаталогИнструментов) - 1);
	ИначеЕсли Прав(КаталогИнструментов, 1) =  "/" Тогда
		КаталогИнструментов = Лев(КаталогИнструментов, СтрДлина(КаталогИнструментов) - 1);
	КонецЕсли;	 
	
	Объект.КаталогИнструментов = КаталогИнструментов;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКаталогПроектаЧерезПлагинЗагрузчикНастроек()
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли

	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыполнениеСценариевБезОткрытияФормы Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ЗначениеПараметраЗапуска("DisableUserSettingsLoader", Ложь) Тогда
		Возврат;
	КонецЕсли;	 
	
	КаталогПроекта = Объект.КаталогПроекта;
	Если ПустаяСтрока(КаталогПроекта) И Не Объект.РежимСамотестирования Тогда
		ЗагрузчикНастроек = Плагин(Объект.Плагины.ЗагрузчикПользовательскихНастроек);
		Объект.КаталогПроекта = ЗагрузчикНастроек.КаталогРепозитория();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПутьКRunSikulixЕслиОнПустой()

	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли	
	
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКRunSikulix = Объект.КаталогиСкриптовSikuliX;
	Если ПустаяСтрока(ПутьКRunSikulix) И Не Объект.РежимСамотестирования И НЕ ПустаяСтрока(Объект.КаталогПроекта) Тогда
		Объект.КаталогиСкриптовSikuliX = Объект.КаталогПроекта + "/tools/Sikuli";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоставщикаПользовательскихНастроекЕслиОнПустой()

	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;

	Если ВыполнениеСценариевБезОткрытияФормы Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ЗначениеПараметраЗапуска("DisableUserSettingsLoader", Ложь) Тогда
		Возврат;
	КонецЕсли;	 
	
	ПоставщикПользовательскихНастроек = Объект.ПоставщикПользовательскихНастроек;
	Если ПустаяСтрока(ПоставщикПользовательскихНастроек) Тогда
		ЗагрузчикНастроек = Плагин(Объект.Плагины.ЗагрузчикПользовательскихНастроек);
		Объект.ПоставщикПользовательскихНастроек = ЗагрузчикНастроек.ИмяПоставщикаFILE();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПараметров(Знач СтрокаПараметров)
	
	Результат = Новый Структура;
	
	МассивПараметров = РазложитьСтрокуВМассивПодстрокКлиент(СтрокаПараметров, ";");
	Для каждого ЭлементМассива Из МассивПараметров Цикл
		Позиция = Найти(ЭлементМассива, "=");
		Если Позиция > 0 Тогда
			Ключ     = Лев(ЭлементМассива, Позиция - 1);
			Значение = Сред(ЭлементМассива, Позиция + 1);
			Попытка
				Результат.Вставить(Ключ, Значение);
			Исключение
				СообщитьПользователю (ПодставитьПараметрыВСтроку(
					Локализовать("Не вышло получить значение из строки запуска: %1."),
					Ключ
				));
			КонецПопытки;
		Иначе
			Если НЕ ПустаяСтрока(ЭлементМассива) Тогда 
				Попытка
					Результат.Вставить(ЭлементМассива, Истина);
				Исключение
					СообщитьПользователю(ПодставитьПараметрыВСтроку(
						Локализовать("Не вышло получить значение из строки запуска: %1."),
						ЭлементМассива
					));
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Функция ПолучитьЗначениеПараметра(СтруктураПараметров, ИмяПараметра)
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли СтруктураПараметров.Свойство(ИмяПараметра) Тогда
		Возврат ЗначениеСтрокиВБулево(СтруктураПараметров[ИмяПараметра]);
	ИначеЕсли СтруктураПараметров.Свойство(ВРег(ИмяПараметра)) Тогда 
		Возврат ЗначениеСтрокиВБулево(СтруктураПараметров[ВРег(ИмяПараметра)]);
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции	

// Удалить. Настройки
//
&НаКлиенте
Функция СтруктураПараметровЗапуска()
	
	Возврат МодульОбщегоНазначенияVA().СтруктураПараметровЗапуска();
	
КонецФункции
// Устарела.26
&НаКлиенте
Функция КоллекцияКомандЗапуска()
	
	Возврат МодульОбщегоНазначенияVA().КоллекцияКомандЗапуска();
	
КонецФункции

// Возвращает переменные операционной системы
// 
// Возвращаемое значение:
//  Соответствие - 
//
&НаКлиенте
Функция ПеременныеСреды() Экспорт
	
	Возврат МодульОбщегоНазначенияVA().ПеременныеСреды();
	
КонецФункции

// Возвращает переменные операционной системы начинающиеся на "VANESSA_"
// 
// Возвращаемое значение:
//  Структура - 
//
&НаКлиенте
Функция ПрочитатьПеременныеСреды() Экспорт
	
	Возврат МодульОбщегоНазначенияVA().ПрочитатьПеременныеСреды();
	
КонецФункции

&НаКлиенте
Функция ЗначениеПараметраЗапуска(ИмяПараметра, Знач ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Возврат МодульОбщегоНазначенияVA().ЗначениеПараметраЗапуска(ИмяПараметра, ЗначениеПоУмолчанию);
	
КонецФункции

// Устарело. Настройки.
// TODO: Тк параметры обрабатываются индивидуально, перенести часть по раборте с путями именно в эти методы.
//
&НаКлиенте
Процедура ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(СтруктураПараметров)
	МассивКлючей = Новый Массив;
	
	Для каждого ПараметрСборки Из СтруктураПараметров Цикл
		
		Если Лев(ПараметрСборки.Значение, 1) = "." Тогда
			МассивКлючей.Добавить(ПараметрСборки.Ключ);
		ИначеЕсли Найти(ПараметрСборки.Значение, "$workspaceRoot") > 0 ИЛИ Найти(ПараметрСборки.Значение, "$instrumentsRoot") > 0 Тогда 
			МассивКлючей.Добавить(ПараметрСборки.Ключ);
		КонецЕсли;	 
	КонецЦикла;
	
	Для каждого Ключ Из МассивКлючей Цикл
		Было  = СтруктураПараметров[Ключ];
		Стало = ПреобразоватьПутьСТочкамиКНормальномуПути(СтруктураПараметров[Ключ]);
		
		СтруктураПараметров.Вставить(Ключ, Стало);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВнешнихКоманд()
	#Если НЕ ВебКлиент Тогда
	
	Если НЕ ФайлСуществуетКомандаСистемы(Объект.ИмяФайлаВнешнихКомандФреймворка) Тогда
		Возврат;
	КонецЕсли;	
	
	ТекстКоманды                      = Неопределено;
	НомерСтрокиСценарияПереданныйИзвне = Неопределено;
	
	Файл = Новый Файл(Объект.ИмяФайлаВнешнихКомандФреймворка);
	Расширение = Нрег(Файл.Расширение);
	
	ДанныеНастроек = Неопределено;
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(Объект.ИмяФайлаВнешнихКомандФреймворка);
	Исключение
		ЧтениеJSON.Закрыть();
		Возврат;
	КонецПопытки;
	
	ДанныеКоманды = ПрочитатьJSON(ЧтениеJSON);
	ТекстКоманды = ДанныеКоманды.ТекстКоманды;
	Если ТекстКоманды = "ПерезагрузитьИВыполнитьСТекущегоШага" Тогда
		НомерСтрокиСценарияПереданныйИзвне = ДанныеКоманды.НомерСтрокиДляЗапускаСТекущегоШагаСценария;
	КонецЕсли;	 
	ИмяФайлаНастроек = ДанныеКоманды.ИмяФайлаНастроек;
	
	ЧтениеJSON.Закрыть();
	
	Если ФайлСуществуетКомандаСистемы(ИмяФайлаНастроек) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайлаНастроек);
		
		ДанныеНастроек = ПрочитатьJSON(ЧтениеJSON);
		Если ДанныеНастроек.Свойство("КлиентыТестирования") Тогда
			Для Каждого ПараметрыКлиентаТестирования Из ДанныеНастроек.КлиентыТестирования Цикл
				ПрочитатьДанныеКлиентовТестирования(ПараметрыКлиентаТестирования);
			КонецЦикла;	
		КонецЕсли;	 
		
		ЧтениеJSON.Закрыть();
	КонецЕсли;	 
	
	НадоПерейтиКСтрокеДерева = -1;
	
	УдалитьФайлыКомандаСистемы(Объект.ИмяФайлаВнешнихКомандФреймворка);
	НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Ложь;
	Объект.ВыполнитьСценарииПослеЗагрузкиФич = Ложь;
	
	Если ТекстКоманды = "ПерезагрузитьИВыполнить" Тогда
		ПерезагрузитьИВыполнить("");
	ИначеЕсли ТекстКоманды = "ПерезагрузитьИВыполнитьСТекущегоШага" Тогда
		НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Истина;
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ЗапуститьСценарийСоСтрокиПрисланнойИзвне", Истина);
		ЗагрузитьФичи(ДопПараметры);
	ИначеЕсли ТекстКоманды = "Перезагрузить" Тогда
		ТекущиеДанныеДерева = Элементы.ДеревоТестов.ТекущиеДанные;
		Если ТекущиеДанныеДерева <> Неопределено Тогда
			НадоПерейтиКСтрокеДерева = ТекущиеДанныеДерева.ИДСтроки;
		КонецЕсли;	 
		Если ДанныеНастроек <> Неопределено Тогда
			Объект.КаталогФич = ДанныеНастроек.КаталогФич;
		КонецЕсли;	 
		ЗагрузитьФичи();
	КонецЕсли;	 
	
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеКлиентовТестирования(ПараметрыКлиентаТестирования)

	ИмяКлиентаТестирования = ПараметрыКлиентаТестирования.Имя;
	ТипКлиентаТестирования = ПараметрыКлиентаТестирования.ТипКлиента;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя", ИмяКлиентаТестирования);
	
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаДанныеКлиентовТестирования = НайденныеСтроки[0];
	Иначе	
		СтрокаДанныеКлиентовТестирования     = ДанныеКлиентовТестирования.Добавить();
		СтрокаДанныеКлиентовТестирования.Имя = ИмяКлиентаТестирования;
	КонецЕсли;	 
	
	СтрокаДанныеКлиентовТестирования.ПутьКИнфобазе          = ПараметрыКлиентаТестирования.ПутьКИнфобазе;
	СтрокаДанныеКлиентовТестирования.ДопПараметры           = ПараметрыКлиентаТестирования.ДопПараметры;
	СтрокаДанныеКлиентовТестирования.ТипКлиента             = ТипКлиентаТестирования;
	СтрокаДанныеКлиентовТестирования.ИмяКомпьютера          = ПараметрыКлиентаТестирования.ИмяКомпьютера;
	Если ПараметрыКлиентаТестирования.Свойство("ПортЗапускаТестКлиента") Тогда
		СтрокаДанныеКлиентовТестирования.ПортЗапускаТестКлиента = ПараметрыКлиентаТестирования.ПортЗапускаТестКлиента;
	КонецЕсли;	 
	Если ПараметрыКлиентаТестирования.Свойство("Синоним") Тогда
		СтрокаДанныеКлиентовТестирования.Синоним = ПараметрыКлиентаТестирования.Синоним;
	КонецЕсли;	
	
	АктивизироватьСтроку = Истина;
	Если ПараметрыКлиентаТестирования.Свойство("АктивизироватьСтроку") Тогда
		АктивизироватьСтроку = ПараметрыКлиентаТестирования.АктивизироватьСтроку;
	КонецЕсли;	 
	
	СтрокаДанныеКлиентовТестирования.ПутьКИнфобазе = ОбработатьСпецсимволыПриЧтенииНастроек(СтрокаДанныеКлиентовТестирования.ПутьКИнфобазе,
	    Объект.КаталогПроекта, Объект.КаталогИнструментов);
	СтрокаДанныеКлиентовТестирования.ДопПараметры = ОбработатьСпецсимволыПриЧтенииНастроек(СтрокаДанныеКлиентовТестирования.ДопПараметры,
	    Объект.КаталогПроекта, Объект.КаталогИнструментов);
	
	Если АктивизироватьСтроку Тогда
		Элементы.ДанныеКлиентовТестирования.ТекущаяСтрока = СтрокаДанныеКлиентовТестирования.ПолучитьИдентификатор();
	КонецЕсли;	 
КонецПроцедуры

&НаСервере
Функция ДанныеСлужебногоКешаСтрокой(Знач МассивФайловTemplateEpfUF)
	ДанныеСлужебногоКеша = Новый Структура;
	ДанныеСлужебногоКеша.Вставить("КешStepDefinition", РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition"));
	ДанныеСлужебногоКеша.Вставить("МассивФайловTemplateEpfUF", МассивФайловTemplateEpfUF);
	Возврат ЗначениеВСтрокуВнутр(ДанныеСлужебногоКеша);
КонецФункции	 

&НаСервереБезКонтекста
Функция ЕстьКонстантаВКонфигурацииСервер(Знач ИмяКонстанты)
	Зн = Метаданные.Константы.Найти(ИмяКонстанты);
	Если Зн = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьЗначениеКонстантыСервер(Знач ИмяКонстанты)
	Возврат Константы[ИмяКонстанты].Получить();
КонецФункции	

&НаКлиенте
Процедура УстановитьВидимостьКолонокДерева(ЕстьКонстантаВКонфигурацииПутьКVA)
	Если ЕстьКонстантаВКонфигурацииПутьКVA И Объект.РежимСамотестирования Тогда
		// видимость колонок Дерева тестов
		ПоказатьСкрытьСтрокаРеальнойПроцедуры("Показать");
		ПоказатьСкрытьАдресСнипета("Показать");
		ПоказатьСкрытьСнипет("Показать");
		ПоказатьСкрытьПутьКФайлу("Показать");
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;

	Если НЕ Элементы.ДеревоТестовПолныйПуть.Видимость  Тогда
		Элементы.ПоказатьСкрытьПутьКФайлу.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;	 
	Если НЕ Элементы.ДеревоТестовСнипет.Видимость  Тогда
		Элементы.ПоказатьСкрытьСнипет.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;	 
	Если НЕ Элементы.ДеревоТестовАдресСнипета.Видимость  Тогда
		Элементы.ПоказатьСкрытьАдресСнипета.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;	 
	Если НЕ Элементы.ДеревоТестовСтрокаРеальнойПроцедуры.Видимость  Тогда
		Элементы.ПоказатьСкрытьСтрокаРеальнойПроцедуры.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСлужебныхЭлементов(ДопПараметры)
	ЕстьКонстантаВКонфигурацииПутьКVA = ДопПараметры.ЕстьКонстантаВКонфигурацииПутьКVA;
	Если ЕстьКонстантаВКонфигурацииПутьКVA Тогда
		Если ПоказыватьНастройкуПроверкаРаботыVanessaAutomationВРежимеTestClient = Неопределено Тогда
			ПоказыватьНастройкуПроверкаРаботыVanessaAutomationВРежимеTestClient = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	Элементы.ПроверкаРаботыVanessaAutomationВРежимеTestClient.Видимость = ЕстьКонстантаВКонфигурацииПутьКVA
	  И (ПоказыватьНастройкуПроверкаРаботыVanessaAutomationВРежимеTestClient = Истина);
	Элементы.ГруппаСлужебная.Видимость = Объект.ПроверкаРаботыVanessaAutomationВРежимеTestClient И ЕстьКонстантаВКонфигурацииПутьКVA;
	Элементы.ДеревоТестовСтатус.Видимость = Объект.ПроверкаРаботыVanessaAutomationВРежимеTestClient И ЕстьКонстантаВКонфигурацииПутьКVA;
	УстановитьВидимостьКолонокДерева(ЕстьКонстантаВКонфигурацииПутьКVA);
	
	Попытка
		// При редактировании в конфигураторе старых версий платформы (8.3.6 и раньше) эти флаги слетают
		Элементы.ГруппаЗапускТестов.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаГенерацияEPF.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаКаталогиБиблиотек.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаДополнительно.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаНесколькоКлиентовТестирования.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаНастройки.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаСлужебная.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.КаталогФич.АвтоМаксимальнаяШирина = Ложь;
	Исключение
	КонецПопытки;
	
	Элементы.ФлагСценарииВыполнены.Видимость = Объект.РежимСамотестирования;
	Элементы.ФлагСценарииЗагружены.Видимость = Объект.РежимСамотестирования;
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормы()
	
	ТекстСообщенийПользователю = ТекстСообщенийПользователю();
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекстСообщенийПользователю", ТекстСообщенийПользователю);
	ДопПараметры.Вставить("ЕстьКонстантаВКонфигурацииПутьКVA", ЕстьКонстантаВКонфигурацииПутьКVA);
	ДопПараметры.Вставить("КешВерсияОбработки", КешВерсияОбработки);
	ДопПараметры.Вставить("ЭтоLinux", ЭтоLinux);
	ДопПараметры.Вставить("НедавноЗагруженныеФичи", НедавноЗагруженныеФичи);
	ДопПараметры.Вставить("ПрефиксИнструментаДляСохраненияНастроек", ПрефиксИнструментаДляСохраненияНастроек);
	ДопПараметры.Вставить("ИДДляОбщегоСохраненияНастроек", ИДДляОбщегоСохраненияНастроек);
	ДопПараметры.Вставить("ПараметрыДляСохраненияНастроек", ПараметрыДляСохраненияНастроек());
	ДопПараметры.Вставить("ПроверкаОптимизацииРаботыСФайлами", СоздатьФайлПроверкаОптимизацииРаботыСФайлами());
	ДопПараметры.Вставить("ВозможнаОптимизацияРаботыСФайлами", ВозможнаОптимизацияРаботыСФайлами);
	ДопПараметры.Вставить("ЭтоЗапускВРежимеБезЗагрузкиНастроек", ЭтоЗапускВРежимеБезЗагрузкиНастроек);
	ДопПараметры.Вставить("ВозможноИспользованиеVanessaEditor", ВозможноИспользованиеVanessaEditor);
	
	ПараметрыЗапуска = ПолучитьСтруктуруПараметров(ПараметрЗапуска);
	ДобавитьВСтруктуруПараметрыКоторыеРаньшеМожноБылоПередатьТолькоВКоманднойСтроке(ПараметрыЗапуска);
	
	Если ЗапрещеныСинхронныеВызовы И НЕ ЗначениеПараметраЗапуска("DisableCheckPossibilityOfSynchronousCalls", Ложь) Тогда
		Если ЗначениеДополнительногоПараметра("ВыполняласьПроверкаНаЗапретСинхронныхВызовов") = Неопределено Тогда
			ЗапрещеныСинхронныеВызовы = ЗапрещеныСинхронныеВызовыКлиент();
		Иначе
			УдалитьДополнительныйПараметр("ВыполняласьПроверкаНаЗапретСинхронныхВызовов");
		КонецЕсли;
	КонецЕсли;
	
	ДопПараметры.Вставить("ПараметрыЗапуска", ПараметрыЗапуска);
	ДопПараметры.Вставить("НастройкиВидимостиКнопокКоманднойПанелиРедактора", НастройкиВидимостиКнопокКоманднойПанелиРедактора);
	ДопПараметры.Вставить("ВыполнениеСценариевБезОткрытияФормы", ВыполнениеСценариевБезОткрытияФормы);
	ДопПараметры.Вставить("КаталогФичДоЗагрузкиНастроек", Объект.КаталогФич);
	ДопПараметры.Вставить("НастройкиПриЗапускеБезОткрытияФормы", НастройкиПриЗапускеБезОткрытияФормы);
	ДопПараметры.Вставить("ЗапускИзСППР", ЗапускИзСППР);
	ДопПараметры.Вставить("РазделительПути", ПолучитьРазделительПути());
	ДопПараметры.Вставить("ЭтоПервыйЗапускVA", ЭтоПервыйЗапускVA);
	ДопПараметры.Вставить("Версия8312ИлиВыше", Версия8312ИлиВыше);
	ДопПараметры.Вставить("ПлоскаяСтруктураПараметровЗапуска", СтруктураПараметровЗапуска());
	ДопПараметры.Вставить("НадоВыполнитьСценарийСоСтрокиПереданнойИзвне", НадоВыполнитьСценарийСоСтрокиПереданнойИзвне);
	
	СерверныеВызовыПослеОткрытииФормы(ДопПараметры);
	
	Если Объект.ПоискФайловСПомощьюКомпонентыVanessaExt И ЭтоLinuxКлиент() Тогда
		Объект.ПоискФайловСПомощьюКомпонентыVanessaExt = Ложь;
		СообщитьПользователю (ПодставитьПараметрыВСтроку(
			Локализовать("Настройка <%1> может использоваться только под windows."),
			"ПоискФайловСПомощьюКомпонентыVanessaExt"
		));
	КонецЕсли;	
	
	ЭтоПервыйЗапускVA = ДопПараметры.ЭтоПервыйЗапускVA;
	
	ОбновитьКаталогСтандартныхБиблиотекЕслиСменилсяПутьКVA();
	
	ОбновитьКешСнипетовНаКлиенте();
	
	глДопПараметры = ДопПараметры;
	
	Если НЕ Версия8314ИлиВыше Тогда
		ВозможноИспользованиеVanessaEditor = Ложь;
	КонецЕсли;
	
	Если ЗначениеПараметраЗапуска("GenerateSmokeTest", Ложь) Тогда
		
		Если Объект.ЗапускИзКоманднойСтроки Тогда
			
			Если ДопПараметры.ПараметрыЗапуска.Свойство("VAParams") Тогда
				НастройкиИзфайла = ПрочитатьОбщиеНастройкиИзФайла(ДопПараметры.ПараметрыЗапуска.VAParams);
			ИначеЕсли ДопПараметры.ПараметрыЗапуска.Свойство("VBParams") Тогда
				НастройкиИзфайла = ПрочитатьОбщиеНастройкиИзФайла(ДопПараметры.ПараметрыЗапуска.VBParams);
			Иначе
				ВызватьИсключение Локализовать("Не получилось прочитать параметры командной строки.");
			КонецЕсли;	
			
			ЗаполнитьЗначенияСвойств(Объект, НастройкиИзфайла.ДымовыеТесты);
		КонецЕсли;
		
		ФормаГенератораТестов = ПолучитьФорму(ПолучитьИмяОбработкиVA() + ".Форма.ГенераторДымовыхТестов", ПолучитьПараметрыФормыГенератораДымовыхТестов(), ЭтаФорма);
		ФормаГенератораТестов.СформироватьФайлыНаКлиенте(Истина);
		
	КонецЕсли;
	
	Если НЕ ВозможноИспользованиеVanessaEditor И Объект.ИспользоватьРедакторVanessaEditor Тогда
		ВыключитьИспользованиеVanessaEditor();
	Иначе
		Если НЕ ЭтоLinux
			И ИнициализироватьVanessaEditorНаКлиенте
			И (НЕ ЭтоЗапускИзКоманднойСтроки() ИЛИ ЗначениеПараметраЗапуска("UseEditor", Ложь))
			И Объект.ИспользоватьРедакторVanessaEditor
			И НЕ ВыполнениеСценариевБезОткрытияФормы
			Тогда
			БылоИзменениеUrl = Ложь;
			ИнициализироватьVanessaEditorUrl(БылоИзменениеUrl);
			Если БылоИзменениеUrl Тогда
				ВыполнитьПослеОткрытияФормы2 = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПослеОткрытияФормы2();

КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормы2()
	
	ДопПараметры = глДопПараметры;
	
	ВЭтомСеансеИдётОбучение = ЗначениеДополнительногоПараметра("ВЭтомСеансеИдётОбучение");
	Если ВЭтомСеансеИдётОбучение = Истина Тогда
		Если НЕ Объект.ИспользоватьКомпонентуVanessaExt Тогда
			Объект.ИспользоватьКомпонентуVanessaExt = Истина;
		КонецЕсли;
		Объект.ПоказыватьОкноОстановкиВыполненияСценария = Ложь;
	КонецЕсли;	 
	
	НастройкиВидимостиКнопокКоманднойПанелиРедактора = ДопПараметры.НастройкиВидимостиКнопокКоманднойПанелиРедактора;
	
	// видимость колонок Дерева тестов
	ПоказатьСкрытьИДСтроки("Показать");
		
	УстановитьВидимостьСлужебныхЭлементов(ДопПараметры);	
	КешВерсияОбработки                      = ДопПараметры.КешВерсияОбработки;
	НедавноЗагруженныеФичи                  = ДопПараметры.НедавноЗагруженныеФичи;
	ПрефиксИнструментаДляСохраненияНастроек = ДопПараметры.ПрефиксИнструментаДляСохраненияНастроек;
	ИДДляОбщегоСохраненияНастроек           = ДопПараметры.ИДДляОбщегоСохраненияНастроек;
	ВозможнаОптимизацияРаботыСФайлами       = ДопПараметры.ВозможнаОптимизацияРаботыСФайлами;
	
	Если ЗначениеПараметраЗапуска("DisableFileOptimization", Ложь) ИЛИ ЗначениеПараметраЗапуска("NoFileOptimization", Ложь) Тогда
		ВозможнаОптимизацияРаботыСФайлами = Ложь;
	КонецЕсли;	 
	Если ЗначениеПараметраЗапуска("ClearCacheSteps", Ложь) ИЛИ ЗначениеПараметраЗапуска("ClearStepsCache", Ложь) Тогда
		ТаблицаИзвестныхStepDefinition.Очистить();
	КонецЕсли;	 
	
	МассивСнипетовВидеовставкаИзТекста = ПолучитьМассивСнипетовВидеовставка();
	
	ОбновитьВидимостьЭлементовПослеЗагрузкиНастроек();
	Если ЭтоРежимОбучения() И ЗначениеПараметраЗапуска("УстановитьВерсиюОбработкиНаРелизную", Ложь) Тогда
		ЭтаФорма.Заголовок = ПолучитьВерсиюОбработкиКлиент(Истина);
	Иначе	
		ОбновитьЗаголовокФормы();
	КонецЕсли;	
	
	ЗаполнитьДанныеТекущейИнфобазы();
	
	Объект.ИнтервалВыполненияШага = Объект.ИнтервалВыполненияШагаЗаданныйПользователем;
	Если Объект.ИнтервалВыполненияШага = 0 Тогда
		Объект.ИнтервалВыполненияШага = 0.1;
		Объект.ИнтервалВыполненияШагаЗаданныйПользователем = 0.1;
	КонецЕсли;	 
	
	КаталогФич = Объект.КаталогФич;

	ОбновитьКнопкуЗагрузитьФичи();
	
	Объект.КаталогиБиблиотек.ТипЗначения     = Новый ОписаниеТипов("Строка");
	Объект.СписокТеговИсключение.ТипЗначения = Новый ОписаниеТипов("Строка");
	Объект.СписокТеговОтбор.ТипЗначения      = Новый ОписаниеТипов("Строка");
	Объект.СписокСценариевДляВыполнения.ТипЗначения = Новый ОписаниеТипов("Строка");

	ЗаполнитьПолеВерсияПлатформыДляГенерацииEPFЕслиЭтоВозможно();
	
	ЗаполнитьКаталогПроектаЧерезПлагинЗагрузчикНастроек();
	ЗаполнитьПутьКRunSikulixЕслиОнПустой();
	ЗаполнитьПоставщикаПользовательскихНастроекЕслиОнПустой();
	
	Если СохранитьКлиентовТестированияПослеОткрытияФормы = Истина Тогда
		СохранитьКлиентовТестирования();
	КонецЕсли;	 
	
	Если Объект.ВерсияПоставки = "single" Тогда
		Элементы.НадписьНеНадоДобавлятьБиблиотеки.Видимость = Истина;
	КонецЕсли;	 
	
	ДобавитьСтандартнуюБиблиотекуЕслиНеобходимо();
	
	ФормаVanessaAutomationОткрылась = Истина;
	
	ТихаяУстановкаКомпонентыИВыход = ЗначениеПараметраЗапуска("QuietInstallVanessaExtAndClose", Ложь);
	Если ТихаяУстановкаКомпонентыИВыход Тогда
		Если НЕ БылаВыполненаТихаяУстановкаКомпоненты Тогда
			ДопПараметрыВыполнитьПодключениеВнешнейКомпоненты = ДопПараметрыВыполнитьПодключениеВнешнейКомпоненты("ПослеОткрытияФормыПродолжение");
			ТихаяУстановкаКомпонент(ДопПараметрыВыполнитьПодключениеВнешнейКомпоненты);
			Возврат;
		КонецЕсли;	
	ИначеЕсли Объект.ИспользоватьКомпонентуVanessaExt Тогда
		ДопПараметрыВыполнитьПодключениеВнешнейКомпоненты = ДопПараметрыВыполнитьПодключениеВнешнейКомпоненты("ПослеОткрытияФормыПродолжение");
		
		Если НЕ БылаВыполненаТихаяУстановкаКомпоненты Тогда
			ТихаяУстановкаКомпоненты = ЗначениеПараметраЗапуска("QuietInstallVanessaExt", Ложь) 
				ИЛИ ЗначениеПараметраЗапуска("ТихаяУстановкаVanessaExt", Ложь);
			Если ТихаяУстановкаКомпоненты Тогда
				ТихаяУстановкаКомпонент(ДопПараметрыВыполнитьПодключениеВнешнейКомпоненты);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ВыполнитьПодключениеВнешнейКомпоненты(ДопПараметрыВыполнитьПодключениеВнешнейКомпоненты);
	Иначе	
		ПодключитьОбработчикОжидания("ПослеОткрытияФормыПродолжение", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыПродолжение()
	
	КаталогФич = Объект.КаталогФич;
	
	Если ПустаяСтрока(VanessaEditorМакет) И ПустаяСтрока(VanessaEditorURL) Тогда
		//Внутри есть УстановитьУсловноеОформление().
		ВыключитьИспользованиеVanessaEditor();
	Иначе	
		УстановитьУсловноеОформление();
	КонецЕсли;	
	
	Если Объект.ИспользоватьКомпонентуVanessaExt И Объект.ПодключатьГорячуюКлавишуДляПолученияСправкиОбЭлементе Тогда
		ВЭтомСеансеИдётОбучение = ЗначениеДополнительногоПараметра("ВЭтомСеансеИдётОбучение");
		Если ВЭтомСеансеИдётОбучение = Истина Тогда
			Объект.ПодключатьГорячуюКлавишуДляПолученияСправкиОбЭлементе = Ложь;
			БылоПодключениеГорячихКлавиш = Ложь;
		Иначе	
			ПодключатьГорячуюКлавишуДляПолученияСправкиОбЭлементе(Ложь);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Объект.ЗапускИзКоманднойСтроки И НЕ ЗапускИзСППР Тогда
		ЗаписатьPIDМенеджераТестированияВЖР();
		ЗаписатьЛогВЖРИнформация("VanessaAutomationVersion", "VanessaAutomationVersion = " + ВерсияVanessaAutomation());
	КонецЕсли;	 
	
	НадоПоказатьНачальнуюСтраницуРедактора = Ложь;
	Если НЕ Объект.ВыполнениеСценарияИзОбработкиОповещения Тогда
		ЗапускВРежимеКоманднойСтроки();
		
		Если НЕ Объект.ЗапускИзКоманднойСтроки Тогда
			//Возможно был передан параметр VAParams и надо загрузить настройки.
			ИмяФайла = ЗначениеПараметраЗапускаИмяФайлаНастроек();
			Если ЗначениеЗаполнено(ИмяФайла) Тогда
				ДополнительныеПараметрыЗагрузитьФайлы = Новый Структура;
				Попытка
					ТекКаталогПроекта = ЗначениеПараметраЗапуска("workspaceRoot", Неопределено);
					Если ЗначениеЗаполнено(ТекКаталогПроекта) Тогда
						ДополнительныеПараметрыЗагрузитьФайлы.Вставить("КаталогПроекта", ТекКаталогПроекта);
					КонецЕсли;	
					ЗагрузитьНастройкиИзФайлаСлужебный(ИмяФайла, ДополнительныеПараметрыЗагрузитьФайлы);
				Исключение
					ТекстОшибки = ОписаниеОшибки();
					ЗаписатьЛогВЖРОшибка("ПослеОткрытияФормыПродолжение.ЗагрузкаНастроек", ТекстОшибки);
					СообщитьПользователю(ТекстОшибки);
				КонецПопытки;
			КонецЕсли;	
		КонецЕсли;	
		
		Если НЕ Объект.ЗапускИзКоманднойСтроки И Объект.ОткрыватьНачальнуюСтраницуПриЗапуске И Объект.ИспользоватьРедакторVanessaEditor И НЕ ВключенРежимОбучения Тогда
			НадоПоказатьНачальнуюСтраницуРедактора = Истина;
		ИначеЕсли НЕ Объект.ЗапускИзКоманднойСтроки И Не ПустаяСтрока(КаталогФич) Тогда
			Если Объект.ЗагрузкаФичПриОткрытии = "Загружать" Тогда
				#Если НЕ ВебКлиент Тогда
				ЗагрузитьФичи();
				#КонецЕсли
			ИначеЕсли Объект.ЗагрузкаФичПриОткрытии = "Загружать и выполнять" Тогда
				Объект.ВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Истина;
				ЗагрузитьФичи();
			ИначеЕсли Объект.ЗагрузкаФичПриОткрытии = "Задавать вопрос" Тогда
				ТекстВопроса = Локализовать("Загрузить фичи? <%1>");
					ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", КаталогФич);
				Если ЕстьПоддержкаНемодальныхФорм Тогда
					ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопросНадоЛиЗагружатьФичи", ЭтаФорма);
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, 0, КодВозвратаДиалога.ОК);
				Иначе
					Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, 0, КодВозвратаДиалога.ОК);
					ПослеОтветаНаВопросНадоЛиЗагружатьФичи(Ответ, Неопределено);
				КонецЕсли;	 
			КонецЕсли;	 
		ИначеЕсли НЕ Объект.ЗапускИзКоманднойСтроки И ПустаяСтрока(КаталогФич) И НЕ Объект.РежимСамотестирования И ХостСистема = Неопределено Тогда
			//При первом старте будет создана пустая фича, в которой сразу можно начать создавать сценарий.
			
			ВЭтомСеансеИдётОбучение = ЗначениеДополнительногоПараметра("ВЭтомСеансеИдётОбучение");
			
			Если ВЭтомСеансеИдётОбучение <> Истина Тогда
				ПодготовитьСценарийКВыполнению();
			КонецЕсли;	 
			
		КонецЕсли;
		
		
		
	КонецЕсли;	 
	
	#Если НЕ ВебКлиент Тогда
	Если ВозможноИспользованиеVanessaEditor И ХостСистема = Неопределено И Объект.ИспользоватьРедакторVanessaEditor Тогда
		Попытка
			МодульРедакторТекста().УстановитьЗначенияЭлементовТекущегоОкнаVanessaEditor();
			МодульРедакторТекста().УстановитьЗначенияПеременныхVanessaEditor();
			МодульРедакторТекста().УстановитьСписокШаговVanessaEditor(Объект.ЯзыкГенератораGherkin);
			МодульРедакторТекста().УстановитьТемуVanessaEditor();
			МодульРедакторТекста().УстановитьЛокализациюСообщенийVanessaEditor();
			МодульРедакторТекста().ПоказатьМиниатюруКода();
			МодульРедакторТекста().ПроверкаСинтаксисаВРедакторе();
			МодульРедакторТекста().УстановитьОтображениеТабуляцииИПробелов();
			МодульРедакторТекста().УстановитьЗаменуТабуляцииНаПробелы();
			VanessaTabs.showMinimap = Объект.ПоказыватьМиниатюруКода;
		Исключение
			ВыключитьИспользованиеVanessaEditor();
			ЗаписатьЛогВЖРОшибка("VanessaAutomation.ВозможноИспользованиеVanessaEditor", ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;	 
	#Иначе
		ВыключитьИспользованиеVanessaEditor();
	#КонецЕсли
	
	Если НадоВыполнитьСценарийСоСтрокиПереданнойИзвне Тогда
		ЗагрузитьФичиИЗапуститьСценарийСоСтрокиПрисланнойИзвне();
	ИначеЕсли Объект.ВыполнениеСценарияИзОбработкиОповещения Тогда
		ЗагрузитьФичи();
	КонецЕсли;
	
	Если Объект.ИспользоватьДанныеТекущейФормыПриПодбореШагов Тогда
		МодульРедакторТекста().ВключитьЧтениеДанныхТекущейФормыVanessaEditor();
	КонецЕсли;	 
	
	Если Объект.ИспользоватьРедакторVanessaEditor И НадоПоказатьНачальнуюСтраницуРедактора И НЕ Объект.ЗапускИзКоманднойСтроки Тогда
		ВЭтомСеансеИдётОбучение = ЗначениеДополнительногоПараметра("ВЭтомСеансеИдётОбучение");
		Если ВЭтомСеансеИдётОбучение <> Истина Тогда
			VanessaEditorWelcome();
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТихаяУстановкаКомпонентыИВыход = ЗначениеПараметраЗапуска("QuietInstallVanessaExtAndClose", Ложь);
	Если ТихаяУстановкаКомпонентыИВыход  Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияПрекратитьРаботуСистемы", 1, Истина);
	КонецЕсли;	
	
	СработалиВсеАсинхронныеОбработчикиФормыПриОткрытии = Истина;
	
	Если ВыполнениеСценариевБезОткрытияФормы Тогда
		ДобавитьСтандартнуюБиблиотекуЕслиНеобходимо();
		Если НЕ ВыполнитьСценарииСЧтениемПараметровИзКоманднойСтроки Тогда
			ПерезагрузитьИВыполнить(Неопределено);
		КонецЕсли;	 
	КонецЕсли;
	
	ПоказатьПомощникПриПервомЗапуске();
	ПоказатьСообщениеОЗапретеСинхронныхВызовов();
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ОпределитьМаксВерсиюПлатформы(Знач Массив)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("Версия");
	Тзн.Колонки.Добавить("Параметр");
	
	Для Каждого Элем Из Массив Цикл
		СтрТзн = Тзн.Добавить();
		СтрТзн.Версия = Элем;
		
		Попытка
			МассивСтрок = РазложитьСтрокуВМассивПодстрок(Элем, ".");
			СтрТзн.Параметр = Число(МассивСтрок[3] * 1000);
		Исключение
			СтрТзн.Параметр = 0;
		КонецПопытки;
	КонецЦикла;	
	
	Тзн.Сортировать("Параметр");
	
	Возврат Тзн[Тзн.Количество() - 1].Версия;
КонецФункции	

&НаКлиенте
Процедура ДляГенерацииEPFОбработатьФайлыВКаталоге(ПутьКФайлам,Массив)
	НайденныеФайлы = НайтиФайлы(ПутьКФайлам, "*.exe", Истина);
	Для Каждого Файл Из НайденныеФайлы Цикл
		Если НРег(Файл.ИмяБезРасширения) <> ИмяИсполняемогоФайлаТолстыйКлиент Тогда
			Продолжить;
		КонецЕсли;	 
		
		Путь = Файл.Путь;
		ФайлВерсия = Новый Файл(Путь);
		Версия = ФайлВерсия.Путь;
		
		ФайлВерсия = Новый Файл(Версия);
		Версия = ФайлВерсия.Имя;
		
		Если ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(Версия, "8.3.10.1") Тогда
			Массив.Добавить(Версия);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьПолеВерсияПлатформыДляГенерацииEPFЕслиЭтоВозможно()
	
	Если НЕ VAОткрытаКакВнешняяОбработка Тогда
		Возврат;
	КонецЕсли;	 
	
	#Если НЕ ВебКлиент Тогда
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если Версия8310ИлиВыше Тогда
		Объект.ВерсияПлатформыДляГенерацииEPF = КаталогПрограммы();
		Возврат;
	КонецЕсли;

	Если ЗапрещеныСинхронныеВызовы Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(Объект.ВерсияПлатформыДляГенерацииEPF) Тогда
		Возврат;
	КонецЕсли;
		
	Массив = Новый Массив;
	
	ДляГенерацииEPFОбработатьФайлыВКаталоге("C:\Program Files (x86)\1cv8",Массив);
	ДляГенерацииEPFОбработатьФайлыВКаталоге("C:\Program Files\1cv8",Массив);
	
	Если Массив.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МаксВерсия = ОпределитьМаксВерсиюПлатформы(Массив);

	НайденныеФайлы = НайтиФайлы("C:\Program Files (x86)\1cv8\" + МаксВерсия + "\bin", "*.exe", Истина);
	Файлы32 = НайтиФайлы("C:\Program Files\1cv8\" + МаксВерсия + "\bin", "*.exe", Истина);
	Если НайденныеФайлы.Количество() > 0 Тогда
		Объект.ВерсияПлатформыДляГенерацииEPF = "C:\Program Files (x86)\1cv8\" + МаксВерсия + "\bin";
	ИначеЕсли Файлы32.Количество() > 0 Тогда
		Объект.ВерсияПлатформыДляГенерацииEPF = "C:\Program Files\1cv8\" + МаксВерсия + "\bin";
	КонецЕсли;

	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокФормы()
	ЭтаФорма.Заголовок = ПолучитьВерсиюОбработкиКлиент();
	Если Объект.РежимСамотестирования Тогда
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " autotest";
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция КаталогИзИмениФайла(Знач ИмяФайла)
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.Путь;
КонецФункции	 

&НаКлиенте
Функция КаталогИнструментовИзПутиКФреймворку(ИмяФайла = Неопределено)
	Если ИмяФайла = Неопределено Тогда
		ПутьКОбработке = ПолучитьПутьКОбработкеКлиент();
	Иначе
		ПутьКОбработке = ИмяФайла;
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(ПутьКОбработке) Тогда
		Путь = КаталогИзИмениФайла(ПутьКОбработке);
		Если Прав(Путь, 1) = "/" Тогда
			Стр = Лев(Стр, СтрДлина(Стр) - 1);
		ИначеЕсли Прав(Путь, 1) = "\" Тогда
			Стр = Лев(Стр, СтрДлина(Стр) - 1);
		КонецЕсли;	 
		
		Возврат Путь;
	КонецЕсли;	
	
	Возврат ""; 
КонецФункции

&НаКлиенте
Процедура ПодключитьБиблиотекуРаботыСВидео()
	Если МодульРаботыСВидео <> Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ВерсияПоставки = "single" Тогда
		ПараметрыФормы = Новый Структура;
		МодульРаботыСВидео = ПолучитьФорму(ПолучитьИмяОбработкиVA() + ".Форма.Video_РаботаСВидео", ПараметрыФормы);
	Иначе	
		
		Если ПустаяСтрока(Объект.КаталогИнструментов) Тогда
			Объект.КаталогИнструментов = КаталогИнструментовИзПутиКФреймворку();
		КонецЕсли;
		
		ИмяФайла = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "lib/Video/РаботаСВидео.epf";
		Если СокрЛП(Объект.КаталогИнструментов) = "" Тогда
			ЕстьКонстантаВКонфигурацииПутьКVA = ЕстьКонстантаВКонфигурацииСервер("ПутьКVanessaAutomation");
			Если ЕстьКонстантаВКонфигурацииПутьКVA Тогда
				ПутьКVanessaAutomation     = ПолучитьЗначениеКонстантыСервер("ПутьКVanessaAutomation");
				ФайлПутьКVanessaAutomation = Новый Файл(ПутьКVanessaAutomation);
				ИмяФайла                 = ДополнитьСлешВПуть(ФайлПутьКVanessaAutomation.Путь) + "lib/Video/РаботаСВидео.epf";
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
			СообщитьПользователю (ПодставитьПараметрыВСтроку(
				Локализовать("Файл <%1> не существует."),
				ИмяФайла
			));
			Возврат;
		КонецЕсли;	
		
		МодульРаботыСВидео = ПолучитьФорму("ВнешняяОбработка.РаботаСВидео.Форма.Форма");
	КонецЕсли;	 	
	
	Если МодульРаботыСВидео = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ванесса", ЭтаФорма);
	МодульРаботыСВидео.УстановитьСлужебныеПеременные(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьБиблиотекуСообщенийПользователю(ПодключатьВсегда)
	ИмяМакета = ТекущийЯзык();
	Если НЕ ЭтоТонкийКлиент Тогда
		Если ТипЗнч(ИмяМакета) = Тип("ОбъектМетаданных") Тогда
			ИмяМакета = ИмяМакета.КодЯзыка;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Нрег(ИмяМакета) = "ru" И НЕ ПодключатьВсегда Тогда
		// Не нужно подключать обработку для русского языка.
		Возврат; 
	КонецЕсли;	
	
	Если Объект.ВерсияПоставки = "single" Тогда
		ПараметрыФормы = Новый Структура;
		МодульСообщенийПользователю = ПолучитьФорму(ПолучитьИмяОбработкиVA() + ".Форма.Локализация_Messages", ПараметрыФормы);
		Возврат;
	КонецЕсли;	 
	
	ИмяФайла = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "locales/Messages.epf";
	
	Если СокрЛП(Объект.КаталогИнструментов) = "" Тогда
		ЕстьКонстантаВКонфигурацииПутьКVA = ЕстьКонстантаВКонфигурацииСервер("ПутьКVanessaAutomation");
		Если ЕстьКонстантаВКонфигурацииПутьКVA Тогда
			ПутьКVanessaAutomation     = ПолучитьЗначениеКонстантыСервер("ПутьКVanessaAutomation");
			ФайлПутьКVanessaAutomation = Новый Файл(ПутьКVanessaAutomation);
			ИмяФайла                 = ДополнитьСлешВПуть(ФайлПутьКVanessaAutomation.Путь) + "locales/Messages.epf";
			
			Если Не ЗначениеЗаполнено(Объект.КаталогИнструментов) Тогда
				// ПутьКVanessaAutomation - это полный путь к epf с именем файла 
				Объект.КаталогИнструментов = КаталогИнструментовИзПутиКФреймворку(ПутьКVanessaAutomation);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Файл <%1> не существует."),
			ИмяФайла
		);
	КонецЕсли;	
	
	МодульСообщенийПользователю = ПолучитьФорму("ВнешняяОбработка.Messages.Форма.Форма");
КонецПроцедуры 

&НаКлиенте
Процедура ПодключитьБиблиотекуПереводШагов()
	Если Объект.ВерсияПоставки = "single" Тогда
		ПараметрыФормы = Новый Структура;
		МодульПереводШагов = ПолучитьФорму(ПолучитьИмяОбработкиVA() + ".Форма.Локализация_Steps", ПараметрыФормы);
	Иначе	
		ИмяФайла = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "locales/Steps.epf";
		
		Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
			СообщитьПользователю (ПодставитьПараметрыВСтроку(
				Локализовать("Файл <%1> не существует."),
				ИмяФайла
			));
			Возврат;
		КонецЕсли;	
		
		МодульПереводШагов = ПолучитьФорму("ВнешняяОбработка.Steps.Форма.Форма");
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьТестыЗагрузитьОднуФичу()
	ОчиститьСообщения();
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = "Выберите feature файл";
	ДиалогОткрытияФайла.Фильтр = "Фича файл (*.feature)|*.feature";
	Если ЗапрещеныСинхронныеВызовы Тогда
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработатьВыборФайлаЗагрузкаФичи"", ЭтаФорма)");
		Выполнить("ДиалогОткрытияФайла.Показать(ОписаниеОповещения)");
	Иначе	
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			Объект.КаталогФич = ДиалогОткрытияФайла.ПолноеИмяФайла;
		Иначе
			Возврат;
		КонецЕсли;
		
		// очистим кеш при смене фичи
		КешStepDefinition.Очистить();
		ЗагрузитьФичи();
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьПараметрКорректным(СтрокаПараметр)
	Если Найти(Прав(СтрокаПараметр, 1), "\/") > 0 Тогда
		СтрокаПараметр = Лев(СтрокаПараметр, СтрДлина(СтрокаПараметр) - 1);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СделатьПараметрыКорректными()
	СделатьПараметрКорректным(Объект.КаталогИнструментов);
	СделатьПараметрКорректным(Объект.КаталогВыгрузкиИнструкцийHTML);
	СделатьПараметрКорректным(Объект.СтилиHTMLИнструкции);
	СделатьПараметрКорректным(Объект.КаталогВыгрузкиИнструкцийMarkdown);
	СделатьПараметрКорректным(Объект.КаталогВыгрузкиСкриншотов);
	СделатьПараметрКорректным(Объект.КаталогВыгрузкиИнструкцийВидео);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоСценарий_SceanrioOutline(СтрокаДерева)
	Для каждого СтрСтроки Из СтрокаДерева.Строки Цикл
		Если СтрСтроки.Тип = "Примеры" Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаСервереБезКонтекста
Функция ДалееВДеревеСтрокиУсловийИначе(СтрокаДерева, СтрокиРодителя)
	ИД = СтрокиРодителя.Индекс(СтрокаДерева);
	ДалееТолькоУсловия = Истина;
	
	Пока Истина Цикл
		ИД = ИД + 1;
		Если ИД > СтрокиРодителя.Количество() - 1 Тогда
			Прервать;
		КонецЕсли;	 
		
		ТекСтрока = СтрокиРодителя[ИД];
		
		Если (ТекСтрока.ДопТип = "УсловиеИначеЕсли") ИЛИ (ТекСтрока.ДопТип = "УсловиеИначе") Тогда
			Продолжить;
		КонецЕсли;	 
		
		ДалееТолькоУсловия = Ложь;
		Прервать;
	КонецЦикла;	
	
	Возврат ДалееТолькоУсловия;
КонецФункции	

&НаСервереБезКонтекста
Процедура ОбработатьСлужебныеЗначенияВСтруктуреШага(СтруктураШага, СтрСтроки, Шаги)
	ЕстьЦиклВышеПоДереву = Ложь;
	ТекСтрокаДерева      = СтрСтроки;
	ТекСтрокиРодителя    = ТекСтрокаДерева.Родитель.Строки;
	ИдЦикла              = Неопределено;
	Пока Истина Цикл
		
		Если ТекСтрокиРодителя.Индекс(ТекСтрокаДерева) <> (ТекСтрокиРодителя.Количество() - 1)
			И НЕ ДалееВДеревеСтрокиУсловийИначе(ТекСтрокаДерева, ТекСтрокиРодителя)
			Тогда
			// это должна быть последняя строка в своём уровне
			Прервать;
		КонецЕсли;	 
		
		Если ТекСтрокаДерева.Родитель.Тип = "Сценарий" Тогда
			Прервать;
		КонецЕсли;	 
		
		Если ТекСтрокаДерева.Родитель.ДопТип = "Цикл" Тогда
			ЕстьЦиклВышеПоДереву = Истина;
			ИдСтрокиЦикла        = ТекСтрокаДерева.Родитель.ИдСтроки;
			Прервать;
		КонецЕсли;	 
		
		ТекСтрокаДерева   = ТекСтрокаДерева.Родитель;
		ТекСтрокиРодителя = ТекСтрокаДерева.Родитель.Строки;
	КонецЦикла;	
	
	Если ЕстьЦиклВышеПоДереву Тогда
		СтруктураШага.Вставить("ИдЦикла", ИдСтрокиЦикла);
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервере
Функция СтрокаДереваНаходитсяВСекцииИсключенияУсловия(СтрокаДерева, СтрокаУсловия)
	ТекРодитель = СтрокаДерева.Родитель;
	Пока Истина Цикл
		Если ТекРодитель.ИдСтроки = СтрокаУсловия.ИдСтроки Тогда
			Возврат Ложь;
		КонецЕсли;	 
		
		Если ТекРодитель.ДопТип = "Исключение" Тогда
			Возврат Истина;
		ИначеЕсли ТекРодитель.Тип = "Сценарий" Тогда
			Возврат Ложь;
		КонецЕсли;	 
		
		ТекРодитель = ТекРодитель.Родитель;
		
		Если ТекРодитель = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции	 

&НаСервере
Функция ОпределитьДалееВУсловииНетСтрок(СтрСтроки, СтрокаУсловия)
	ДалееВУсловииНетСтрок = Истина;
	ИдСтроки = СтрСтроки.ИдСтроки;
	СтрокаСоСледующимИД = СтрокаУсловия.Строки.Найти(ИдСтроки + 1, "ИдСтроки", Истина);
	Если СтрокаСоСледующимИД <> Неопределено
		И СтрокаСоСледующимИД.СтрокаПараметровШагаВВидеТаблицы <> Истина
		И СтрокаСоСледующимИД.ДопТип <> "Исключение"
		Тогда
		ДалееВУсловииНетСтрок = Ложь;
	КонецЕсли;	 
	
	Если ДалееВУсловииНетСтрок Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Тип", "Шаг");
		ШагиВУсловии = СтрокаУсловия.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Для Каждого ШагВУсловии Из ШагиВУсловии Цикл
			Если ШагВУсловии.ИдСтроки > ИдСтроки Тогда
				Если НЕ СтрокаДереваНаходитсяВСекцииИсключенияУсловия(ШагВУсловии, СтрокаУсловия) Тогда
					ДалееВУсловииНетСтрок = Ложь;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЦикла;	
	КонецЕсли;	 
	
	Возврат ДалееВУсловииНетСтрок; 
КонецФункции	 

&НаСервере
Функция НайтиСледующуюИсполнимуюСтрокуДерева(СтрокаДерева, ДопПараметры)
	Если СтрокаДерева.Тип = "Область"  ИЛИ СтрокаДерева.Тип = "ШагСценарий" ИЛИ СтрокаДерева.Тип = "Пример" Тогда
		Если ЗначениеЗаполнено(СтрокаДерева.ДопТип) И (СтрокаДерева.ДопТип <> "УсловиеИначе") И (СтрокаДерева.ДопТип <> "Попытка") И (СтрокаДерева.ДопТип <> "Исключение") Тогда
			Возврат СтрокаДерева;
		Иначе
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				Если (СтрокаДерева.ДопТип <> "Исключение") ИЛИ (СтрокаДерева.ДопТип = "Исключение" И ДопПараметры.МожноВозвращатьСтрокиВСекцииИсключение) Тогда
					Возврат НайтиСледующуюИсполнимуюСтрокуДерева(СтрокаДерева.Строки[0], ДопПараметры);
				Иначе	
					Возврат ОпределитьИдСледующейСтроки(СтрокаДерева, СтрокаДерева.Родитель.Строки, ДопПараметры);
				КонецЕсли;	 
				
			Иначе
				Возврат ОпределитьИдСледующейСтроки(СтрокаДерева, СтрокаДерева.Родитель.Строки, ДопПараметры);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если СтрокаДерева.СтрокаПараметровШагаВВидеТаблицы = Истина Тогда
		ИД = СтрокаДерева.Родитель.Строки.Индекс(СтрокаДерева);
		Пока Истина Цикл
			ТекСтрока = СтрокаДерева.Родитель.Строки[ИД + 1];
			Если ЗначениеЗаполнено(ТекСтрока.Тип) Тогда
				Прервать;
			КонецЕсли;
			ИД = ИД + 1;
		КонецЦикла;	
		Возврат НайтиСледующуюИсполнимуюСтрокуДерева(ТекСтрока, ДопПараметры);
	КонецЕсли;	 
	
	Если СтрокаДерева.Тип = "Сценарий" Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат СтрокаДерева;
КонецФункции	

&НаСервере
Функция ОпределитьИдСледующейСтроки(СтрокаДерева, СтрокиРодителя, ДопПараметры)
	Если ДопПараметры.РежимВыполненияОдногоШага И НЕ ДопПараметры.Свойство("БратьШагиТолькоИзВеткиДерева") Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ИдСледующейСтроки = СтрокиРодителя.Индекс(СтрокаДерева) + 1;
	Пока (СтрокиРодителя.Количество() - 1) >= ИдСледующейСтроки Цикл
		Если (СтрокиРодителя[ИдСледующейСтроки].ДопТип = "УсловиеИначе" ИЛИ СтрокиРодителя[ИдСледующейСтроки].ДопТип = "УсловиеИначеЕсли")
				И НЕ ДопПараметры.МожноВозвращатьИначе Тогда
			ИдСледующейСтроки = ИдСледующейСтроки + 1;
			Продолжить;
		ИначеЕсли НЕ ДопПараметры.МожноВозвращатьСтрокиВСекцииИсключение И СтрокиРодителя[ИдСледующейСтроки].ДопТип = "Исключение" Тогда
			ИдСледующейСтроки = ИдСледующейСтроки + 1;
			Продолжить;
		КонецЕсли;	 
		
		Возврат НайтиСледующуюИсполнимуюСтрокуДерева(СтрокиРодителя[ИдСледующейСтроки], ДопПараметры);
	КонецЦикла;
	
	Если СтрокаДерева.Тип = "Сценарий" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтрокаДерева.Родитель.Тип = "Сценарий" Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если СтрокаДерева.Родитель.Тип = "Пример" Тогда
		Если СтрокаДерева.Родитель.Родитель.Родитель.Тип = "ШагСценарий" Тогда
			СтрокиПримеры = СтрокаДерева.Родитель.Родитель.Строки;
			СтрокаПримера = СтрокаДерева.Родитель;
			ИдСледующейСтроки = СтрокиПримеры.Индекс(СтрокаПримера) + 1;
			Пока (СтрокиПримеры.Количество() - 1) >= ИдСледующейСтроки Цикл
				Возврат НайтиСледующуюИсполнимуюСтрокуДерева(СтрокиПримеры[ИдСледующейСтроки], ДопПараметры);
			КонецЦикла;	
			
			Возврат Неопределено;
		Иначе	
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если СтрокаДерева.Родитель.ДопТип = "Цикл" Тогда
		Возврат СтрокаДерева.Родитель;
	КонецЕсли;	 
	
	Если ДопПараметры.МассивУсловий.Количество() > 1 Тогда
		ДопПараметры.Вставить("МожноВозвращатьИначе", Ложь);
	КонецЕсли;	 
	
	Возврат ОпределитьИдСледующейСтроки(СтрокиРодителя.Родитель, СтрокиРодителя.Родитель.Родитель.Строки, ДопПараметры);
КонецФункции	

&НаСервере
Функция ОпределитьИдСледующейСтрокиУсловиеПустоеИИстинно(СтрокаДерева, СтрокиРодителя, ДопПараметры)
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ИдСледующейСтроки = СтрокиРодителя.Индекс(СтрокаДерева) + 1;
	Пока (СтрокиРодителя.Количество() - 1) >= ИдСледующейСтроки Цикл
		Если СтрокиРодителя[ИдСледующейСтроки].ДопТип = "УсловиеИначеЕсли" ИЛИ СтрокиРодителя[ИдСледующейСтроки].ДопТип = "УсловиеИначе" Тогда
			ИдСледующейСтроки = ИдСледующейСтроки + 1;
			Продолжить;
		КонецЕсли;	 
		
		Возврат НайтиСледующуюИсполнимуюСтрокуДерева(СтрокиРодителя[ИдСледующейСтроки], ДопПараметры);
	КонецЦикла;
	
	Возврат ОпределитьИдСледующейСтроки(СтрокиРодителя.Родитель, СтрокиРодителя.Родитель.Родитель.Строки, ДопПараметры);
КонецФункции	

&НаСервере
Функция НайтиСледующуюСтрокаКогдаУсловиеИстинно(СтрокаУсловия, ДопПараметры)
	РодительСтроки = СтрокаУсловия.Родитель;
	ИДСтрокиДерева = РодительСтроки.Строки.Индекс(СтрокаУсловия);
	
	Пока Истина Цикл
		ИДСтрокиДерева = ИДСтрокиДерева + 1;
		Если (РодительСтроки.Строки.Количество() - 1) >= ИДСтрокиДерева Тогда
			СледующаяСтрока = РодительСтроки.Строки[ИДСтрокиДерева];
			
			Если СледующаяСтрока.ДопТип = "УсловиеИначеЕсли" Тогда
				Продолжить;
			ИначеЕсли СледующаяСтрока.ДопТип = "УсловиеИначе" Тогда
				Продолжить;
			КонецЕсли;	 
			
			Возврат НайтиСледующуюИсполнимуюСтрокуДерева(СледующаяСтрока, ДопПараметры);
		Иначе
			
			Если РодительСтроки.ДопТип = "Цикл" Тогда
				Возврат РодительСтроки;
			КонецЕсли;	
			
			Если (РодительСтроки.ДопТип = "Условие") ИЛИ (РодительСтроки.ДопТип = "УсловиеИначеЕсли") 
					ИЛИ (РодительСтроки.ДопТип = "УсловиеИначе")  
					ИЛИ (РодительСтроки.Тип = "Область") 
					ИЛИ (РодительСтроки.Тип = "ШагСценарий") Тогда
				Возврат НайтиСледующуюСтрокаКогдаУсловиеИстинно(РодительСтроки, ДопПараметры); 
			КонецЕсли;	 
			
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции	

&НаСервере
Процедура ПервыйШагВУзлеДереваРекурсивно(СтрокаДерева, Результат)
	Если Результат <> Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если ПодчиненнаяСтрока.Тип = "Шаг" Тогда
			Результат = ПодчиненнаяСтрока; 
			Прервать;
		КонецЕсли;	 
		
		ПервыйШагВУзлеДереваРекурсивно(ПодчиненнаяСтрока, Результат);
	КонецЦикла;	 
КонецПроцедуры 

&НаСервере
Функция ПервыйШагВУзлеДерева(СтрокаДерева)
	Результат = Неопределено;
	
	ПервыйШагВУзлеДереваРекурсивно(СтрокаДерева, Результат);
	
	Возврат Результат;
КонецФункции	 

&НаСервере
Функция ВУзлеДереваЕстьИсполняемыеСтроки(СтрокаДерева)
	Если СтрокаДерева.Строки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	ПервыйШагВУзлеДерева = ПервыйШагВУзлеДерева(СтрокаДерева);
	Если ПервыйШагВУзлеДерева = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	 

&НаСервере
Функция СтрокаИсключенияПоСтрокеДерева(СтрокаДерева)
	ИдСтроки = СтрокаДерева.Родитель.Строки.Индекс(СтрокаДерева);
	Если (СтрокаДерева.Родитель.Строки.Количество()-1) >= ИдСтроки+1 Тогда
		СтрокаИсключения = СтрокаДерева.Родитель.Строки[ИдСтроки+1];
		Если СтрокаИсключения.ДопТип = "Исключение" Тогда
			Возврат СтрокаИсключения; 
		КонецЕсли;	 
		
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаСервере
Процедура ОбновитьДанныеСтрокиДереваПоДаннымШагаСервер(СтруктураШага, СтрокаДерева)
	
	ИдСледующегоШага = Неопределено;
	Если СтруктураШага.Свойство("ИдСледующегоШага") И СтруктураШага.ИдСледующегоШага <> Неопределено Тогда
		ИдСледующегоШага = СтруктураШага.ИдСледующегоШага;
	КонецЕсли;	 
	
	Если ИдСледующегоШага = Неопределено ИЛИ ИдСледующегоШага = -1 Тогда
		Если ТипЗнч(СтрокаДерева.ПроизвольныеЗначения) = Тип("Структура") И СтрокаДерева.ПроизвольныеЗначения.Свойство("ИдСледующегоШага") Тогда
			СтрокаДерева.ПроизвольныеЗначения.Удалить("ИдСледующегоШага");
		КонецЕсли;	 
	Иначе	
		Если ТипЗнч(СтрокаДерева.ПроизвольныеЗначения) <> Тип("Структура") Тогда
			СтрокаДерева.ПроизвольныеЗначения = Новый Структура;
		КонецЕсли;	 
		СтрокаДерева.ПроизвольныеЗначения.Вставить("ИдСледующегоШага", ИдСледующегоШага);
	КонецЕсли;	 
	
КонецПроцедуры 

&НаСервере
Процедура ДобавитьШагиДляВыполненияСценария(Шаги, ДеревоСтроки, СтрокаДерева, СтрокаСценария,
	                                                                ЭтоШагКонтекста, ДопПараметры)
	Для каждого СтрСтроки Из ДеревоСтроки Цикл
		Если СтрСтроки.Тип = "Шаг" Тогда
			Если НЕ ДопПараметры.ДобавлятьШаги Тогда
				Продолжить;
			КонецЕсли;	 
			
			СтруктураШага = ПолучитьСтруктуруШага(СтрСтроки, СтрокаДерева, СтрокаДерева, ЭтоШагКонтекста, ДопПараметры);
			
			Если ДопПараметры.ЕстьЦиклы Тогда
				ОбработатьСлужебныеЗначенияВСтруктуреШага(СтруктураШага, СтрСтроки, Шаги);
			КонецЕсли;	 
			
			СтрокаУсловия = Неопределено;
			ДалееВУсловииНетСтрок = Ложь;
			
			РодительСтроки = СтрСтроки.Родитель;
			ИДСтрокиДерева = РодительСтроки.Строки.Индекс(СтрСтроки);
			Если ИДСтрокиДерева = РодительСтроки.Строки.Количество() - 1 
					И ДопПараметры.МассивУсловий.Количество() > 0 Тогда
				СтрокаУсловия = ДопПараметры.МассивУсловий[ДопПараметры.МассивУсловий.Количество() - 1];
					
				ДалееВУсловииНетСтрок = ОпределитьДалееВУсловииНетСтрок(СтрСтроки, СтрокаУсловия);

				Если ДалееВУсловииНетСтрок Тогда
					ДопПараметры.Вставить("МожноВозвращатьИначе", Истина);
					Если ДопПараметры.МассивПопытка.Количество() > 0 Тогда
						ДопПараметры.Вставить("МожноВозвращатьСтрокиВСекцииИсключение", Ложь);
					КонецЕсли;	 
					СледующаяСтрокаКогдаУсловиеИстинно = НайтиСледующуюСтрокаКогдаУсловиеИстинно(СтрокаУсловия, ДопПараметры);
					Если СледующаяСтрокаКогдаУсловиеИстинно <> Неопределено Тогда
						СтруктураШага.Вставить("ИдСледующегоШага", СледующаяСтрокаКогдаУсловиеИстинно.ИдСтроки);
					ИначеЕсли ДопПараметры.МассивЦиклов.Количество() > 0 Тогда
						// значит это последний шаг в сценарии, но он внутри условия
						ОбработатьСлужебныеЗначенияВСтруктуреШага(СтруктураШага, СтрСтроки, Шаги);
					Иначе
						СтруктураШага.Вставить("ИдСледующегоШага", -1);
					КонецЕсли;
					
					Если ДопПараметры.МассивПопытка.Количество() > 0 Тогда
						ДопПараметры.Вставить("МожноВозвращатьСтрокиВСекцииИсключение", Истина);
					КонецЕсли;	 
				КонецЕсли;
			КонецЕсли;
			
			НадоДобавитьШаг = Истина;
			Если ДопПараметры.ВыполнениеДиапазонаШаговVanessaEditor Тогда
				Если СтруктураШага.Свойство("ЭтоШагПодсценария") И СтруктураШага.ЭтоШагПодсценария Тогда
					НадоДобавитьШаг = Ложь;
				ИначеЕсли СтруктураШага.НомерСтрокиВФиче < ДопПараметры.НачалоДиапазона ИЛИ
					СтруктураШага.НомерСтрокиВФиче > ДопПараметры.ОкончаниеДиапазона Тогда
					НадоДобавитьШаг = Ложь;
				КонецЕсли;	 
			КонецЕсли;
			
			Если ДопПараметры.МассивПопытка.Количество() > 0 Тогда
				СтруктураШага.Вставить("ВПопытке", Истина);
				СтруктураШага.Вставить("ПервыйШагВИсключении", ДопПараметры.МассивПопытка[ДопПараметры.МассивПопытка.Количество()-1].ПервыйШагВИсключении);
				
				Если СтрокаУсловия <> Неопределено И ДалееВУсловииНетСтрок Тогда
					//следующий шаг был определен выше
				Иначе	
					ДопПараметры.Вставить("МожноВозвращатьСтрокиВСекцииИсключение", Ложь);
					СледующаяСтрока = ОпределитьИдСледующейСтроки(СтрСтроки, ДеревоСтроки, ДопПараметры);
					
					Если СледующаяСтрока <> Неопределено Тогда
						СтруктураШага.Вставить("ИдСледующегоШага", СледующаяСтрока.ИдСтроки);
					Иначе	
						//Значит этот шаг последний
						СтруктураШага.Вставить("ИдСледующегоШага", -1);
					КонецЕсли;	 
					ДопПараметры.Вставить("МожноВозвращатьСтрокиВСекцииИсключение", Истина);
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если НадоДобавитьШаг Тогда
				Шаги.Добавить(СтруктураШага);
				ОбновитьДанныеСтрокиДереваПоДаннымШагаСервер(СтруктураШага, СтрСтроки);
			КонецЕсли;	 
		ИначеЕсли СтрСтроки.Тип = "ШагСценарий" Тогда
			
			Если ДопПараметры.Свойство("БратьШагиТолькоИзВеткиДерева") И ДопПараметры.БратьШагиТолькоИзВеткиДерева = СтрСтроки.ИдСтроки Тогда
				ДопПараметры.Вставить("ДобавлятьШаги", Истина);
			КонецЕсли;	 
			
			Если НЕ ДопПараметры.ДобавлятьШаги Тогда
				Продолжить;
			КонецЕсли;	 
			
			ДопПараметры.УровеньПодсценария = ДопПараметры.УровеньПодсценария + 1;
			Если ДопПараметры.УровеньПодсценария = 1 Тогда
				ДопПараметры.Вставить("СтрокаШагаПодсценарияФичи", СтрСтроки.НомерСтрокиВФиче);
			КонецЕсли;	 
			
			Если СтрСтроки.ДопТип = "СтруктураСценария" Тогда // это вложенная структура сценария
				СтрокаПримеров = Неопределено;
				Для Каждого СтрокаДереваСтруктурыСценария Из СтрСтроки.Строки Цикл
					Если СтрокаДереваСтруктурыСценария.Тип = "Примеры" Тогда
						СтрокаПримеров = СтрокаДереваСтруктурыСценария;
					КонецЕсли;	 
				КонецЦикла;	 
				
				Если СтрокаПримеров = Неопределено Тогда
					ТекстСообщения = ЛокализоватьСервер("Не найдена строка примеров во вложенной структуре сценария. <%1>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаДерева.ПолныйПуть);
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				НомерСтрокиПримера = 0;
				Для Каждого СтрокаПримера Из СтрокаПримеров.Строки Цикл
					НомерСтрокиПримера = НомерСтрокиПримера + 1;
					Если НомерСтрокиПримера = 1 Тогда
						Продолжить; // это служебная строка
					КонецЕсли;	 
					
					ДобавитьШагиДляВыполненияСценария(Шаги, СтрокаПримера.Строки, СтрокаПримера, СтрокаСценария, ЭтоШагКонтекста, ДопПараметры);
				КонецЦикла;	
			Иначе	
				ДобавитьШагиДляВыполненияСценария(Шаги, СтрСтроки.Строки, СтрокаДерева, СтрокаСценария, ЭтоШагКонтекста, ДопПараметры);
			КонецЕсли;
			
			ДопПараметры.УровеньПодсценария = ДопПараметры.УровеньПодсценария - 1;
			Если ДопПараметры.Свойство("БратьШагиТолькоИзВеткиДерева") И ДопПараметры.БратьШагиТолькоИзВеткиДерева = СтрСтроки.ИдСтроки Тогда
				ДопПараметры.Вставить("ДобавлятьШаги", Ложь);
			КонецЕсли;	 
			
		ИначеЕсли СтрСтроки.Тип = "Область" Тогда
			Если НЕ ПустаяСтрока(СтрСтроки.ДопТип) И НЕ ДопПараметры.ДобавлятьШаги Тогда
				Если ДопПараметры.Свойство("БратьШагиТолькоИзВеткиДерева") Тогда
					ДобавитьШагиДляВыполненияСценария(Шаги, СтрСтроки.Строки, СтрокаДерева, СтрокаСценария, ЭтоШагКонтекста, ДопПараметры);
				КонецЕсли;	
				Продолжить;
			КонецЕсли;	 
			
			Если (СтрСтроки.ДопТип = "Условие") ИЛИ (СтрСтроки.ДопТип = "УсловиеИначеЕсли")  Тогда
				ДопПараметры.МассивУсловий.Добавить(СтрСтроки);
			ИначеЕсли (СтрСтроки.ДопТип = "Цикл") Тогда
				ДопПараметры.МассивЦиклов.Добавить(СтрСтроки);
			ИначеЕсли (СтрСтроки.ДопТип = "Попытка") Тогда
				СтрокаИсключения = СтрокаИсключенияПоСтрокеДерева(СтрСтроки);
				ПервыйШагВИсключении = Неопределено;
				Если СтрокаИсключения <> Неопределено Тогда
					СтрокаДереваПервыйШагВИсключении = НайтиСледующуюИсполнимуюСтрокуДерева(СтрокаИсключения, ДопПараметры);
					Если СтрокаДереваПервыйШагВИсключении <> Неопределено Тогда
						ПервыйШагВИсключении = СтрокаДереваПервыйШагВИсключении.ИдСтроки;
					КонецЕсли;
				КонецЕсли;
				ИдСледующейСтрокиЗаИсключением = Неопределено;
				Если СтрокаИсключения <> Неопределено Тогда
					ДопПараметры.Вставить("МожноВозвращатьСтрокиВСекцииИсключение", Ложь);
					СледующаяСтрокаЗаСекциейИсключения = ОпределитьИдСледующейСтроки(СтрокаИсключения, ДеревоСтроки, ДопПараметры);
					ДопПараметры.Вставить("МожноВозвращатьСтрокиВСекцииИсключение", Истина);
					Если СледующаяСтрокаЗаСекциейИсключения <> Неопределено Тогда
						ИдСледующейСтрокиЗаИсключением = СледующаяСтрокаЗаСекциейИсключения.ИдСтроки;
					КонецЕсли;	 
				КонецЕсли;	 
				ДопПараметры.МассивПопытка.Добавить(Новый Структура("ИдСтроки,ПервыйШагВИсключении,ИдСледующейСтрокиЗаИсключением",
					СтрСтроки.ИдСтроки, ПервыйШагВИсключении, ИдСледующейСтрокиЗаИсключением));
			ИначеЕсли (СтрСтроки.ДопТип = "Исключение") Тогда
				ДопПараметры.МассивИсключение.Добавить(СтрСтроки);
			КонецЕсли;	 
			
			Если (СтрСтроки.ДопТип = "Условие") ИЛИ (СтрСтроки.ДопТип = "УсловиеИначеЕсли") ИЛИ (СтрСтроки.ДопТип = "Цикл")  Тогда
				СтруктураШага = ПолучитьСтруктуруШага(СтрСтроки, СтрокаДерева, СтрокаДерева, ЭтоШагКонтекста, ДопПараметры);
				
				СледующаяСтрока = Неопределено;
				Если СтрСтроки.ДопТип = "Цикл" Тогда
					ДопПараметры.Вставить("МожноВозвращатьИначе", Ложь);
				Иначе	
					ДопПараметры.Вставить("МожноВозвращатьИначе", Истина);
				КонецЕсли;	 
					
				// Когда условие не истинно
				СледующаяСтрока = ОпределитьИдСледующейСтроки(СтрСтроки, ДеревоСтроки, ДопПараметры);
					
				Если НЕ ВУзлеДереваЕстьИсполняемыеСтроки(СтрСтроки) Тогда
					// Когда условие истинно и оно пустое
					Если ДопПараметры.МассивПопытка.Количество() > 0 Тогда
						ДопПараметры.Вставить("МожноВозвращатьСтрокиВСекцииИсключение", Ложь);
					КонецЕсли;	 
					СледующаяСтрокаУсловиеИстинно = ОпределитьИдСледующейСтрокиУсловиеПустоеИИстинно(СтрСтроки, ДеревоСтроки, ДопПараметры);
					
					Если СледующаяСтрокаУсловиеИстинно = Неопределено И ДопПараметры.МассивЦиклов.Количество() > 0 Тогда
						СледующаяСтрокаУсловиеИстинно = ДопПараметры.МассивЦиклов[ДопПараметры.МассивЦиклов.Количество() - 1];
					КонецЕсли;	
					
					ДопПараметры.Вставить("МожноВозвращатьСтрокиВСекцииИсключение", Истина);
						
					Если СледующаяСтрокаУсловиеИстинно <> Неопределено Тогда
						СтруктураШага.Вставить("СледующаяСтрокаУсловиеИстинно", СледующаяСтрокаУсловиеИстинно.ИдСтроки);
					Иначе	
						СтруктураШага.Вставить("СледующаяСтрокаУсловиеИстинно", -1);
					КонецЕсли;	 
				КонецЕсли;	 
				
				СтруктураШага.Вставить("ИдСледующегоШага", Неопределено);
				Если СледующаяСтрока <> Неопределено Тогда
					СтруктураШага.Вставить("ИдСледующегоШага", СледующаяСтрока.ИдСтроки);
				КонецЕсли;	 
				
				Если СтрСтроки.ДопТип = "Цикл" Тогда
					ДопПараметры.Вставить("ЕстьЦиклы", Истина);
				КонецЕсли;	 
				
				Если ДопПараметры.ЕстьЦиклы Тогда
					ОбработатьСлужебныеЗначенияВСтруктуреШага(СтруктураШага, СтрСтроки, Шаги);
				КонецЕсли;	 
				
				Если ДопПараметры.МассивПопытка.Количество() > 0 Тогда
					СтруктураШага.Вставить("ВПопытке", Истина);
					СтруктураШага.Вставить("ПервыйШагВИсключении", ДопПараметры.МассивПопытка[ДопПараметры.МассивПопытка.Количество()-1].ПервыйШагВИсключении);
					
					ДопПараметры.Вставить("МожноВозвращатьСтрокиВСекцииИсключение", Ложь);
					СледующаяСтрока = ОпределитьИдСледующейСтроки(СтрСтроки, ДеревоСтроки, ДопПараметры);
					
					Если СледующаяСтрока <> Неопределено Тогда
						СтруктураШага.Вставить("ИдСледующегоШага", СледующаяСтрока.ИдСтроки);
					Иначе	
						//Значит этот шаг последний
						СтруктураШага.Вставить("ИдСледующегоШага", -1);
					КонецЕсли;	 
					ДопПараметры.Вставить("МожноВозвращатьСтрокиВСекцииИсключение", Истина);
				КонецЕсли;	 
				
				НадоДобавитьШаг = Истина;
				Если ДопПараметры.ВыполнениеДиапазонаШаговVanessaEditor Тогда
					Если СтруктураШага.Свойство("ЭтоШагПодсценария") И СтруктураШага.ЭтоШагПодсценария Тогда
						НадоДобавитьШаг = Ложь;
					ИначеЕсли СтруктураШага.НомерСтрокиВФиче < ДопПараметры.НачалоДиапазона ИЛИ
						СтруктураШага.НомерСтрокиВФиче > ДопПараметры.ОкончаниеДиапазона Тогда
						НадоДобавитьШаг = Ложь;
					КонецЕсли;	 
				КонецЕсли;
				
				Если НадоДобавитьШаг Тогда
					Шаги.Добавить(СтруктураШага);
					ОбновитьДанныеСтрокиДереваПоДаннымШагаСервер(СтруктураШага, СтрСтроки);
				КонецЕсли;	 
			КонецЕсли;	 
			
			ДобавитьШагиДляВыполненияСценария(Шаги, СтрСтроки.Строки, СтрокаДерева, СтрокаСценария, ЭтоШагКонтекста, ДопПараметры);
			
			ТекВключенРежимОбучения = Ложь;
			Если ДопПараметры.Свойство("ВключенРежимОбучения") Тогда
				ТекВключенРежимОбучения = ДопПараметры.ВключенРежимОбучения;
			КонецЕсли;
			
			ТекОзвучиватьВыполнениеСценария = Ложь;
			Если ДопПараметры.Свойство("ОзвучиватьВыполнениеСценария") Тогда
				ТекОзвучиватьВыполнениеСценария = ДопПараметры.ОзвучиватьВыполнениеСценария;
			КонецЕсли;
			
			ТекСоздаватьИнструкциюВидео = Ложь;
			Если ДопПараметры.Свойство("СоздаватьИнструкциюВидео") Тогда
				ТекСоздаватьИнструкциюВидео = ДопПараметры.СоздаватьИнструкциюВидео;
			КонецЕсли;	
			
			Если СтрСтроки.Строки.Количество() = 0 И НЕ ЗначениеЗаполнено(СтрСтроки.ДопТип) Тогда
				Если Лев(СтрСтроки.Имя, 1) = "*" И ТекВключенРежимОбучения
					ИЛИ ТекОзвучиватьВыполнениеСценария
					ИЛИ ТекСоздаватьИнструкциюВидео
					ИЛИ Объект.СоздаватьИнструкциюHTML
					ИЛИ Объект.СоздаватьИнструкциюMarkdown
					Тогда
					//Значит это группа без шагов во время выполнения/записи автоинструкции
					//В этом случае добавляется шаг - И пауза 0.1
					СтруктураШага = ПолучитьСтруктуруШага(СтрСтроки, СтрокаДерева, СтрокаДерева, ЭтоШагКонтекста, ДопПараметры);
					СтруктураШага.Вставить("ТекстИнструкция", СтрСтроки.Имя);
					СтруктураШага.Вставить("ШагаНетВДереве", Истина);
					СделатьЭтотШагПаузой(СтруктураШага, ДопПараметры);
					Шаги.Добавить(СтруктураШага);
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если (СтрСтроки.ДопТип = "Условие") ИЛИ (СтрСтроки.ДопТип = "УсловиеИначеЕсли") Тогда
				ДопПараметры.МассивУсловий.Удалить(ДопПараметры.МассивУсловий.Количество() - 1);
			ИначеЕсли (СтрСтроки.ДопТип = "Цикл") Тогда
				ДопПараметры.МассивЦиклов.Удалить(ДопПараметры.МассивЦиклов.Количество() - 1);
			ИначеЕсли (СтрСтроки.ДопТип = "Попытка") Тогда
				ДопПараметры.МассивПопытка.Удалить(ДопПараметры.МассивПопытка.Количество() - 1);
			ИначеЕсли (СтрСтроки.ДопТип = "Исключение") Тогда
				ДопПараметры.МассивИсключение.Удалить(ДопПараметры.МассивИсключение.Количество() - 1);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СделатьЭтотШагПаузой(СтруктураШага, ДопПараметры)
	СтруктураШага.Имя = "И пауза 0.1";
	СтруктураШага.СтрокаРеальнойПроцедуры = "Пауза";
	СтруктураШага.Снипет = "Пауза(Парам01)";
	СтруктураШага.ЗначенияПараметров = Новый СписокЗначений;
	ПараметрШага = Новый Структура;
	ПараметрШага.Вставить("Значение", 0.1);
	ПараметрШага.Вставить("Тип", "Число");
	СтруктураШага.ЗначенияПараметров.Добавить(ПараметрШага);
	
	Если ДопПараметры.ЭтоSingle Тогда
		СтруктураШага.АдресСнипета = ПолучитьИмяОбработкиVAСлужебный(Объект.ВерсияПоставки, ДопПараметры.VAОткрытаКакВнешняяОбработка) + ".Форма.Тест_СделатьПаузу";
	Иначе
		Стр = СтрЗаменить(Объект.КаталогИнструментов, "\", "/");
		Если Прав(Стр, 1) <> "/" Тогда
			Стр = Стр + "/";
		КонецЕсли;	 
		СтруктураШага.АдресСнипета = Стр + "features/Libraries/Пауза/step_definitions/СделатьПаузу.epf";
	КонецЕсли;	 
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ОчиститьПроизвольныеЗначения(ПроизвольныеЗначения)
	ПроизвольныеЗначения.Вставить("ПрикрепленныеМакеты", Новый Соответствие);
	ПроизвольныеЗначения.Вставить("ПрикрепленныеТекстовыеДокументы", Новый Массив);
	ПроизвольныеЗначения.Вставить("ПрикрепленныеФайлы", Новый Массив);
	ПроизвольныеЗначения.Вставить("МассивСкриншотов", Новый Массив);
КонецПроцедуры 

&НаСервере
Процедура ДобавитьСценарийАутлайн(СтрокаДерева, МассивСценариевДляВыполнения, ТекПример = Неопределено, ДопПараметры = Неопределено)
	// получим сами именнованные параметры
	
	ИменаПараметров = Неопределено;
	СтрокаПримеров  = Неопределено;
	Для каждого СтрСтроки Из СтрокаДерева.Строки Цикл
		Если СтрСтроки.Тип = "Примеры" Тогда
			ИменаПараметров = СтрСтроки.ИменованныеПараметры;
			СтрокаПримеров = СтрСтроки;
		КонецЕсли; 
	КонецЦикла;
	
	Если ИменаПараметров = Неопределено Тогда
		СообщитьПользователюСеврерИВызватьИсключение(ПодставитьПараметрыВСтрокуСервер(
			ЛокализоватьСервер("Не получилось найти у сценария %1 имена изменяемых параметров."),
			СтрокаДерева.Имя
		));
	КонецЕсли; 
	
	СтрокаФичи = НайтиСтрокуФичиЧерезРодителяСервер(СтрокаДерева);
	
	МассивИДСценариев = ДопПараметры.МассивИДСценариев;
	Ном = 0;
	Для каждого СтрСтрокаПримеров Из СтрокаПримеров.Строки Цикл
		Ном = Ном + 1;
		Если Ном = 1 Тогда
			// в первой строке лежат имена параметров
			Продолжить;
		КонецЕсли; 
		
		Если ТекПример <> Неопределено И СтрСтрокаПримеров <> ТекПример Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ТипЗнч(СтрСтрокаПримеров.ПроизвольныеЗначения) = Тип("Структура") Тогда
			ОчиститьПроизвольныеЗначения(СтрСтрокаПримеров.ПроизвольныеЗначения);
		КонецЕсли;	 
		
		Если МассивИДСценариев <> Неопределено 
				И МассивИДСценариев.Найти(СтрСтрокаПримеров.Родитель.Родитель.ИДСтроки) = Неопределено  // проверка что идёт запуск всей структуры сценария
				И МассивИДСценариев.Найти(СтрСтрокаПримеров.ИдСтроки) = Неопределено Тогда // проверка что надо запускать конкретный пример
				
			Если НЕ ДопПараметры.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением 
					ИЛИ НЕ ДопПараметры.НашелСценарий Тогда
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 

		СтруктураПараметровСценария = Новый Структура;
		СтруктураПараметровСценария.Вставить("Имя", СтрокаДерева.Имя + " (Пример №" + (Ном - 1) + ")");
		СтруктураПараметровСценария.Вставить("ЭтоСтруктураСценария", Истина);
		СтруктураПараметровСценария.Вставить("СтрокаДерева", СтрСтрокаПримеров.ИДСтроки);
		СтруктураПараметровСценария.Вставить("ИмяФичи", ДопПараметры.ИмяФичи);
		СтруктураПараметровСценария.Вставить("ПолныйПутьКФиче", ДопПараметры.ПолныйПутьКФиче);
		СтруктураПараметровСценария.Вставить("НомерСтрокиВФиче", Неопределено);
		СтруктураПараметровСценария.Вставить("ФичаИмеетСвоюEPF", СтрокаФичи.ФичаИмеетСвоюEPF);
		СтруктураПараметровСценария.Вставить("EPFПодключена", Ложь);
		СтруктураПараметровСценария.Вставить("ТекущийНомерСтрокиПодсценария", Неопределено);
		СтруктураПараметровСценария.Вставить("ЕстьСекцияПеременные", ВФичеЕстьСекцияПеременные(СтруктураПараметровСценария.ПолныйПутьКФиче, ДопПараметры.ДанныеСекцииПеременные));
		СтруктураПараметровСценария.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага", 
	                  ДопПараметры.ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага);

		Если ТипЗнч(СтрокаФичи.ПроизвольныеЗначения) = Тип("Структура") Тогда
			Если СтрокаФичи.ПроизвольныеЗначения.Свойство("Язык") Тогда
				СтруктураПараметровСценария.Вставить("ЯзыкФичи", СтрокаФичи.ПроизвольныеЗначения.Язык);
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если НЕ СтруктураПараметровСценария.Свойство("ЯзыкФичи") Тогда
			СтруктураПараметровСценария.Вставить("ЯзыкФичи", "ru");
		КонецЕсли;	 
					  
		Если ДопПараметры.Свойство("БратьШагиТолькоИзВеткиДерева") Тогда
			ДопПараметры.Вставить("ДобавлятьШаги", Ложь);
		КонецЕсли;
					  
		Шаги = Новый Массив;
		
		Если СтрокаДерева.Родитель.Строки[0].ДопТип = "Контекст" И НЕ ДопПараметры.РежимВыполненияОдногоШага Тогда // значит надо добавить шаги контекста к нашим шагам
			ДопПараметры.Вставить("ЕстьЦиклы", Ложь);
			ДопПараметры.Вставить("МассивУсловий", Новый Массив);
			ДопПараметры.Вставить("МассивЦиклов", Новый Массив);
			ДопПараметры.Вставить("МассивПопытка", Новый Массив);
			ДопПараметры.Вставить("МассивИсключение", Новый Массив);
			ДопПараметры.Вставить("МожноВозвращатьИначе", Истина);
			ДопПараметры.Вставить("МожноВозвращатьСтрокиВСекцииИсключение", Истина);
			ДобавитьШагиДляВыполненияСценария(Шаги, СтрокаДерева.Родитель.Строки[0].Строки, СтрокаДерева, СтрСтрокаПримеров,
			       Истина, ДопПараметры);
		КонецЕсли;	 

		ДопПараметры.Вставить("ЕстьЦиклы", Ложь);
		ДопПараметры.Вставить("МассивУсловий", Новый Массив);
		ДопПараметры.Вставить("МассивЦиклов", Новый Массив);
		ДопПараметры.Вставить("МассивПопытка", Новый Массив);
		ДопПараметры.Вставить("МассивИсключение", Новый Массив);
		ДопПараметры.Вставить("МожноВозвращатьИначе", Истина);
		ДопПараметры.Вставить("МожноВозвращатьСтрокиВСекцииИсключение", Истина);
		ДобавитьШагиДляВыполненияСценария(Шаги, СтрСтрокаПримеров.Строки, СтрокаДерева, СтрСтроки.Родитель,
		      Ложь, ДопПараметры);
		
		ДопПараметры.Вставить("НашелСценарий", Истина);

		СтруктураПараметровСценария.Вставить("Шаги", Шаги);
		МассивСценариевДляВыполнения.Добавить(СтруктураПараметровСценария);
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруШага(СтрСтроки, СтрокаДерева, СтрокаСценария, ЭтоШагКонтекста, ДопПараметры)
	СтруктураШага = Новый Структура;
	СтруктураШага.Вставить("Имя", СтрСтроки.Имя);
	СтруктураШага.Вставить("ЗначенияПараметров", СтрСтроки.ЗначенияПараметров);
	СтруктураШага.Вставить("АдресСнипета", СтрСтроки.АдресСнипета);
	СтруктураШага.Вставить("СтрокаРеальнойПроцедуры", СтрСтроки.СтрокаРеальнойПроцедуры);
	СтруктураШага.Вставить("Снипет", СтрСтроки.Снипет);
	СтруктураШага.Вставить("ИмяСценария", СтрокаДерева.Имя);
	СтруктураШага.Вставить("СтрокаСценария", СтрокаСценария.ИДСтроки);
	СтруктураШага.Вставить("СтрокаШага", СтрСтроки.ИДСтроки);
	СтруктураШага.Вставить("НомерСтрокиВФиче", СтрСтроки.НомерСтрокиВФиче);
	СтруктураШага.Вставить("ИдСтроки", СтрСтроки.ИдСтроки);
	Если ЭтоШагКонтекста Тогда
		СтруктураШага.Вставить("ЭтоШагКонтекста", ЭтоШагКонтекста);
	КонецЕсли;	
	Если ДопПараметры.УровеньПодсценария > 0 Тогда
		СтруктураШага.Вставить("ЭтоШагПодсценария", Истина);
		СтруктураШага.Вставить("СтрокаШагаПодсценарияФичи", ДопПараметры.СтрокаШагаПодсценарияФичи);
	КонецЕсли;	 
	Если ЗначениеЗаполнено(СтрСтроки.ДопТип) Тогда
		СтруктураШага.Вставить("ДопТип", СтрСтроки.ДопТип);
	КонецЕсли;	
	СтруктураШага.Вставить("ИдСледующегоШага", Неопределено);
	СтруктураШага.Вставить("ИдЦикла", Неопределено);
	НадоСнятьСкриншотШага = Ложь;
	НадоНачатьЗаписьВыполненияТестов = Ложь;
	Если ТипЗнч(СтрСтроки.ПроизвольныеЗначения) = Тип("Структура") Тогда
		Если СтрСтроки.ПроизвольныеЗначения.Свойство("МассивТеговШага") Тогда
			СтруктураШага.Вставить("МассивТеговШага", СтрСтроки.ПроизвольныеЗначения.МассивТеговШага);
			
			Если ШагИмеетТег(СтруктураШага, "screenshot") Тогда
				НадоСнятьСкриншотШага = Истина;
			КонецЕсли;	 
			
			Если ШагИмеетТег(СтруктураШага, "recordvideo") Тогда
				НадоНачатьЗаписьВыполненияТестов = Истина;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если СтрСтроки.ПроизвольныеЗначения.Свойство("МассивКомментариевШага") Тогда
			СтруктураШага.Вставить("МассивКомментариевШага", СтрСтроки.ПроизвольныеЗначения.МассивКомментариевШага);
		КонецЕсли;	 
		
		Если СтрСтроки.ПроизвольныеЗначения.Свойство("ЭтоОбычныйШагОбернутыйВУсловие") И СтрСтроки.ПроизвольныеЗначения.ЭтоОбычныйШагОбернутыйВУсловие Тогда
			СтруктураШага.Вставить("ЭтоОбычныйШагОбернутыйВУсловие", Истина);
		КонецЕсли;	 
		
	КонецЕсли;
	
	Если НадоСнятьСкриншотШага Тогда
		СтруктураШага.Вставить("НадоСнятьСкриншотШага", НадоСнятьСкриншотШага);
	КонецЕсли;
	
	Если НадоНачатьЗаписьВыполненияТестов Тогда
		СтруктураШага.Вставить("НадоНачатьЗаписьВыполненияТестов", НадоНачатьЗаписьВыполненияТестов);
	КонецЕсли;
	
	ЭтоКлиент = Ложь;
	Если ДопПараметры.Свойство("ЭтоКлиент") Тогда
		ЭтоКлиент = ДопПараметры.ЭтоКлиент;
	КонецЕсли;	 
	
	Если СтрСтроки.ШагСПараметрамиВТаблице = Истина Тогда
		ПараметрыТаблицы = Новый Массив;
		Если ЭтоКлиент Тогда
			Коллекция = СтрСтроки.ПолучитьЭлементы();
		Иначе	
			Коллекция = СтрСтроки.Строки;
		КонецЕсли;	 
		
		Для каждого ПодчиненнаяСтрока Из Коллекция Цикл
			Если НЕ ПодчиненнаяСтрока.СтрокаПараметровШагаВВидеТаблицы Тогда
				Прервать;
			КонецЕсли;	 
			ПараметрыТаблицы.Добавить(ПодчиненнаяСтрока.Имя);
		КонецЦикла;
		СтруктураШага.Вставить("ШагСПараметрамиВТаблице", Истина);
		СтруктураШага.Вставить("ПараметрыТаблицы", ПараметрыТаблицы);
	КонецЕсли;	 
	
	Возврат СтруктураШага;
КонецФункции

&НаСервере
Процедура ДобавитьОбычныйСценарий(СтрокаДерева, МассивСценариевДляВыполнения, ДопПараметры)
	Если СтрокаДерева.ДопТип = "Контекст" Тогда
		Если НЕ ДопПараметры.Свойство("БратьШагиТолькоИзВеткиДерева") Тогда
			Возврат;
		КонецЕсли;	 
	КонецЕсли;
	
	Если СтрокаДерева.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(СтрокаДерева.ПроизвольныеЗначения) = Тип("Структура") Тогда
		ОчиститьПроизвольныеЗначения(СтрокаДерева.ПроизвольныеЗначения);
	КонецЕсли;	 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Имя", СтрокаДерева.Имя);
	СтруктураПараметров.Вставить("ЭтоСтруктураСценария", Ложь);
	СтруктураПараметров.Вставить("СтрокаДерева", СтрокаДерева.ИдСтроки);
	СтруктураПараметров.Вставить("ИмяФичи", ДопПараметры.ИмяФичи);
	СтруктураПараметров.Вставить("ПолныйПутьКФиче", ДопПараметры.ПолныйПутьКФиче);
	СтруктураПараметров.Вставить("ФичаИмеетСвоюEPF", СтрокаДерева.Родитель.ФичаИмеетСвоюEPF);
	СтруктураПараметров.Вставить("EPFПодключена", Ложь);
	СтруктураПараметров.Вставить("ТекущийНомерСтрокиПодсценария", Неопределено);
	СтруктураПараметров.Вставить("НомерСтрокиВФиче", СтрокаДерева.НомерСтрокиВФиче);
	СтруктураПараметров.Вставить("ЕстьСекцияПеременные", ВФичеЕстьСекцияПеременные(СтруктураПараметров.ПолныйПутьКФиче, ДопПараметры.ДанныеСекцииПеременные));
	СтруктураПараметров.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага", 
	                  ДопПараметры.ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага);
					  
	Если ТипЗнч(СтрокаДерева.Родитель.ПроизвольныеЗначения) = Тип("Структура") Тогда
		Если СтрокаДерева.Родитель.ПроизвольныеЗначения.Свойство("Язык") Тогда
			СтруктураПараметров.Вставить("ЯзыкФичи", СтрокаДерева.Родитель.ПроизвольныеЗначения.Язык);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если НЕ СтруктураПараметров.Свойство("ЯзыкФичи") Тогда
		СтруктураПараметров.Вставить("ЯзыкФичи", "ru");
	КонецЕсли;	 
	
	Если ДопПараметры.Свойство("БратьШагиТолькоИзВеткиДерева") Тогда
		ДопПараметры.Вставить("ДобавлятьШаги", Ложь);
	КонецЕсли;
					  
	Шаги = Новый Массив;

	Если СтрокаДерева.Родитель.Строки[0].ДопТип = "Контекст" И НЕ ДопПараметры.РежимВыполненияОдногоШага Тогда // значит надо добавить шаги контекста к нашим шагам
		ДопПараметры.Вставить("ЕстьЦиклы", Ложь);
		ДопПараметры.Вставить("МассивУсловий", Новый Массив);
		ДопПараметры.Вставить("МассивЦиклов", Новый Массив);
		ДопПараметры.Вставить("МассивПопытка", Новый Массив);
		ДопПараметры.Вставить("МассивИсключение", Новый Массив);
		ДопПараметры.Вставить("МожноВозвращатьИначе", Истина);
		ДопПараметры.Вставить("МожноВозвращатьСтрокиВСекцииИсключение", Истина);
		ДобавитьШагиДляВыполненияСценария(Шаги, СтрокаДерева.Родитель.Строки[0].Строки, СтрокаДерева, СтрокаДерева,
		   Истина, ДопПараметры);
	КонецЕсли;	 
	
	ДопПараметры.Вставить("ЕстьЦиклы", Ложь);
	ДопПараметры.Вставить("МассивУсловий", Новый Массив);
	ДопПараметры.Вставить("МассивЦиклов", Новый Массив);
	ДопПараметры.Вставить("МассивПопытка", Новый Массив);
	ДопПараметры.Вставить("МассивИсключение", Новый Массив);
	ДопПараметры.Вставить("МожноВозвращатьИначе", Истина);
	ДопПараметры.Вставить("МожноВозвращатьСтрокиВСекцииИсключение", Истина);
	ДобавитьШагиДляВыполненияСценария(Шаги, СтрокаДерева.Строки, СтрокаДерева, СтрокаДерева, Ложь, ДопПараметры);
	
	СтруктураПараметров.Вставить("Шаги", Шаги);

	МассивСценариевДляВыполнения.Добавить(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСценарийВМассивСценариевДляВыполнения(СтрокаДерева, МассивСценариевДляВыполнения, ДопПараметры)
	
	ЭтоСценариоАутлайн = ЭтоСценарий_SceanrioOutline(СтрокаДерева);
	Если ЭтоСценариоАутлайн Тогда
		ДобавитьСценарийАутлайн(СтрокаДерева, МассивСценариевДляВыполнения, , ДопПараметры);
		Возврат;
	КонецЕсли;	 
	
	ДобавитьОбычныйСценарий(СтрокаДерева, МассивСценариевДляВыполнения, ДопПараметры);
КонецПроцедуры

&НаСервере
Процедура ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(ДеревоСтроки, МассивСценариевДляВыполнения, ДопПараметры)
	Если ТипЗнч(ДеревоСтроки) = Тип("СтрокаДереваЗначений") Тогда
		Если ДеревоСтроки.Тип = "Фича" Тогда
			ДопПараметры.Вставить("ИмяФичи", ДеревоСтроки.Имя);
			ДопПараметры.Вставить("ПолныйПутьКФиче", ДеревоСтроки.ПолныйПуть);
		КонецЕсли;	
		
		Если ДеревоСтроки.Тип = "Сценарий" Тогда
			ДобавитьСценарийВМассивСценариевДляВыполнения(ДеревоСтроки, МассивСценариевДляВыполнения, ДопПараметры);
		ИначеЕсли ДеревоСтроки.Тип = "Пример" Тогда
			ДобавитьСценарийАутлайн(ДеревоСтроки.Родитель.Родитель, МассивСценариевДляВыполнения, ДеревоСтроки, ДопПараметры);
		КонецЕсли; 
	Иначе	
		Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
			Если СтрДеревоСтроки.Тип = "Фича" Тогда
				ДопПараметры.Вставить("ИмяФичи", СтрДеревоСтроки.Имя);
				ДопПараметры.Вставить("ПолныйПутьКФиче", СтрДеревоСтроки.ПолныйПуть);
			КонецЕсли;	
			
			МассивИДСценариев = ДопПараметры.МассивИДСценариев;
			Если СтрДеревоСтроки.Тип = "Сценарий" Тогда
				Если МассивИДСценариев <> Неопределено Тогда
					Если МассивИДСценариев.Найти(СтрДеревоСтроки.ИдСтроки) <> Неопределено Тогда
						ДобавитьСценарийВМассивСценариевДляВыполнения(СтрДеревоСтроки, МассивСценариевДляВыполнения, ДопПараметры);
						ДопПараметры.Вставить("НашелСценарий", Истина);
					ИначеЕсли ДопПараметры.ДобавитьСценарииПослеНайденного И ДопПараметры.НашелСценарий Тогда
						ДобавитьСценарийВМассивСценариевДляВыполнения(СтрДеревоСтроки, МассивСценариевДляВыполнения, ДопПараметры);
					ИначеЕсли ДопПараметры.ЭтоПример И (СтрДеревоСтроки.ДопТип = "СтруктураСценария") Тогда
						ДобавитьСценарийВМассивСценариевДляВыполнения(СтрДеревоСтроки, МассивСценариевДляВыполнения, ДопПараметры);
					КонецЕсли;	 
				Иначе	
					ДобавитьСценарийВМассивСценариевДляВыполнения(СтрДеревоСтроки, МассивСценариевДляВыполнения, ДопПараметры);
				КонецЕсли;	 
			Иначе	
				ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(СтрДеревоСтроки.Строки, МассивСценариевДляВыполнения, ДопПараметры);
			КонецЕсли;	 
		КонецЦикла;
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроставитьИДРекурсивно(ДеревоСтроки, Данные)
	Для каждого СтрокаДерева Из ДеревоСтроки Цикл
		
		СтрокаДерева.Статус     = "";
		Если СтрокаДерева.Тип = "Шаг" Тогда
			Если СтрокаДерева.ТипКартинки <> 3 Тогда
				СтрокаДерева.ТипКартинки = 3;
			КонецЕсли;	 
		ИначеЕсли СтрокаДерева.ДопТип = "Цикл" Тогда
			СтрокаДерева.ТипКартинки = 3;
		ИначеЕсли СтрокаДерева.ДопТип = "Условие" Тогда
			СтрокаДерева.ТипКартинки = 3;
		ИначеЕсли СтрокаДерева.ДопТип = "УсловиеИначеЕсли" Тогда
			СтрокаДерева.ТипКартинки = 3;
		КонецЕсли;	 

		Если СтрокаДерева.Тип = "Фича" Тогда
			ФайлФичи = Новый Файл(СтрокаДерева.ПолныйПуть);
			ФайлEPF  = ФайлФичи.Путь + "step_definitions" + ?(Данные.ДопПараметры.ЭтоLinux, "/", "\") + ФайлФичи.ИмяБезРасширения + ".epf";
			ФайлEPF = УниверсальноеПолноеИмяФайла(ФайлEPF);
			СтрТзнТаблицаИзвестныхStepDefinition = Данные.МассивИменКонтекстовОбработок.Найти(Нрег(ФайлEPF));
			Данные.ЕстьСвояEPFУФичи = Истина;
			Если СтрТзнТаблицаИзвестныхStepDefinition = Неопределено Тогда
				Данные.ЕстьСвояEPFУФичи = Ложь;
			КонецЕсли;  
		КонецЕсли;  
		СтрокаДерева.ФичаИмеетСвоюEPF = Данные.ЕстьСвояEPFУФичи;
		
		СтрокаДерева.ИДСтроки = Данные.ИД;
		Данные.ИД = Данные.ИД + 1;
		ПроставитьИДРекурсивно(СтрокаДерева.Строки, Данные);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьИДСтрокиВДереве(Дерево, МассивСтрокДереваДанныеФормы, МассивИменКонтекстовОбработок, ДопПараметры)
	Ид = 0;
	Данные = Новый Структура;
	Данные.Вставить("ИД", ИД);
	Данные.Вставить("МассивСтрокДереваДанныеФормы", МассивСтрокДереваДанныеФормы);
	Данные.Вставить("МассивИменКонтекстовОбработок", МассивИменКонтекстовОбработок);
	Данные.Вставить("ДопПараметры", ДопПараметры);
	Данные.Вставить("ЕстьСвояEPFУФичи", Ложь);
	ПроставитьИДРекурсивно(Дерево.Строки, Данные);
КонецПроцедуры

&НаСервере
Процедура ДобавитьСлужебныеДанныеВМассивСценариевДляВыполнения(МассивСценариевДляВыполнения)
	Для Каждого ДанныеСценария Из МассивСценариевДляВыполнения Цикл
		ИдШагаПоИдСтроки = Новый Соответствие;
		Ид = -1;
		Для Каждого ТекШаг Из ДанныеСценария.Шаги Цикл
			Ид = Ид + 1;
			ИдШагаПоИдСтроки.Вставить(ТекШаг.ИдСтроки, Ид);
		КонецЦикла;	
		
		ДанныеСценария.Вставить("ИдШагаПоИдСтроки", ИдШагаПоИдСтроки);
	КонецЦикла;	 
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьМассивСценариевДляВыполненияСервер(МассивСценариевДляВыполнения, МассивСтрокДереваДанныеФормы,
	            ТекИДСценария, МассивИменКонтекстовОбработок, ДопПараметры)
	
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	
	Если НЕ ДопПараметры.РежимВыполненияОдногоШага Тогда
		ЗаполнитьИДСтрокиВДереве(ОбъектСервер.ДеревоТестов, МассивСтрокДереваДанныеФормы, МассивИменКонтекстовОбработок, ДопПараметры);
	КонецЕсли;	 
	
	ТекСценарий = Неопределено;
	Если ТекСценарий = Неопределено Тогда
		ТекСценарий = ОбъектСервер.ДеревоТестов.Строки;
	КонецЕсли; 
	
	ДопПараметры.Вставить("МассивИДСценариев", ТекИДСценария);
	ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(ТекСценарий, МассивСценариевДляВыполнения, ДопПараметры);
	ДобавитьСлужебныеДанныеВМассивСценариевДляВыполнения(МассивСценариевДляВыполнения);
	
	МассивИд = Новый Массив;
	Для Ид = 0 По МассивСценариевДляВыполнения.Количество() - 1 Цикл
		Если МассивСценариевДляВыполнения[Ид].Шаги.Количество() = 0 Тогда
			МассивИд.Добавить(Ид);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Для Сч = 0 По МассивИд.Количество() - 1 Цикл
		МассивСценариевДляВыполнения.Удалить(МассивИд[МассивИд.Количество() - Сч - 1]);
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(ОбъектСервер, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтатусСценария(ИД)
	
	Если МассивСценариевДляВыполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ИДСтрокиСценария = МассивСценариевДляВыполнения[ИД].СтрокаДерева;
	СтрокаСценария   = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(СтрокаСценария, ИДСтрокиСценария);
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	Если РезультатПрохожденияТестовСценария = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	Если РезультатПрохожденияТестовСценария.Свойство("Статус") Тогда
		Возврат;
	КонецЕсли;	 
	
	//Если СокрЛП(СтрокаСценария.Статус) <> "" Тогда
	//	РезультатПрохожденияТестовСценария.Вставить("Статус", СтрокаСценария.Статус);
	//	Возврат;
	//КонецЕсли;
	
	РезультатПрохожденияТестовШагов = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
	
	СценарийВыполнен = Истина;
	Для каждого СтрШаг Из РезультатПрохожденияТестовШагов Цикл
		Если СтрШаг.Свойство("ШагУпалВСекцииПопыткаИсключение") И СтрШаг.ШагУпалВСекцииПопыткаИсключение Тогда
			Продолжить;
		КонецЕсли;	
		Если СтрШаг.Статус <> "Success" Тогда
			СценарийВыполнен = Ложь;
			Статус = СтрШаг.Статус;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если СценарийВыполнен Тогда
		ТекСтатус = "Success";
	Иначе	
		ТекСтатус = Статус;
	КонецЕсли; 
	
	СтрокаСценария.Статус = ТекСтатус;
	РезультатПрохожденияТестовСценария.Вставить("Статус", ТекСтатус);
	
	Статистика_ЗафиксироватьСтатус(ТекСтатус);
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьМетод(Обработка, Знач ИмяПроцедуры, МассивАргументов)
	
	Поз = Найти(ИмяПроцедуры, "(");
	Если Поз > 0 Тогда
		ИмяПроцедуры = Лев(ИмяПроцедуры, Поз - 1);
	КонецЕсли;	 
	
	Команда = "Обработка." + ИмяПроцедуры + "(";
	
	Если МассивАргументов <> Неопределено Тогда
		КолАргументов = МассивАргументов.Количество();
		Для Ккк = 0 По КолАргументов - 1 Цикл
			Команда = Команда + "МассивАргументов[" + Формат(Ккк, "ЧГ=; ЧН=0") + "]";
			
			Если Ккк < КолАргументов - 1 Тогда
				Команда = Команда + ",";
			КонецЕсли;	 
		КонецЦикла;
	КонецЕсли;	 
	                                                     
	Команда = Команда + ")";
	
	Если ФреймворкЗапущенВWebКлиенте Тогда
		Результат = Вычислить(Команда);
	Иначе	
		Выполнить(Команда);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Функция ВывестиВСообщениеТекстОшибки(ДанныеОшибки, ТекстОшибкиTestClientБезФорматирования = "")
	Если ТипЗнч(ДанныеОшибки) = Тип("ИнформацияОбОшибке") Тогда
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ДанныеОшибки); 
	Иначе	
		ПредставлениеОшибки = ДанныеОшибки; 
	КонецЕсли;	 
	
	ТекстОшибкиTestClientБезФорматирования = ПредставлениеОшибки;
	
	Отступ = "                ";
	Стр = "";
	МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(ПредставлениеОшибки, Символы.ПС);
	Для Каждого Элем Из МассивСтрок Цикл
		Стр = Стр + Отступ + Элем + Символы.ПС;
	КонецЦикла;	 
	
	Возврат Стр;
КонецФункции	 

&НаКлиенте
Функция ТипАктивногоКлиентаТестирования()
	Если ОбъектКонтекстСохраняемый.Свойство("ТекущийПрофильTestClient") Тогда
		Если ОбъектКонтекстСохраняемый.ТекущийПрофильTestClient <> Неопределено Тогда
			Попытка
				ДанныеКлиентаТестирования = ПолучитьДанныеКлиентаТестирования(ОбъектКонтекстСохраняемый.ТекущийПрофильTestClient);
				Возврат ДанныеКлиентаТестирования.ТипКлиента;
			Исключение
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция ИмяАктивногоКлиентаТестирования()
	Если ОбъектКонтекстСохраняемый.Свойство("ТекущийПрофильTestClient") Тогда
		Если ОбъектКонтекстСохраняемый.ТекущийПрофильTestClient <> Неопределено Тогда
			Попытка
				ДанныеКлиентаТестирования = ПолучитьДанныеКлиентаТестирования(ОбъектКонтекстСохраняемый.ТекущийПрофильTestClient);
				Возврат ДанныеКлиентаТестирования.Имя;
			Исключение
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция СинонимАктивногоКлиентаТестирования()
	Если ОбъектКонтекстСохраняемый.Свойство("ТекущийПрофильTestClient") Тогда
		Если ОбъектКонтекстСохраняемый.ТекущийПрофильTestClient <> Неопределено Тогда
			Попытка
				ДанныеКлиентаТестирования = ПолучитьДанныеКлиентаТестирования(ОбъектКонтекстСохраняемый.ТекущийПрофильTestClient);
				Возврат ДанныеКлиентаТестирования.Синоним;
			Исключение
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция СтрокаСоединенияАктивногоКлиентаТестирования()
	Если ОбъектКонтекстСохраняемый.Свойство("ТекущийПрофильTestClient") Тогда
		Если ОбъектКонтекстСохраняемый.ТекущийПрофильTestClient <> Неопределено Тогда
			Попытка
				ДанныеКлиентаТестирования = ПолучитьДанныеКлиентаТестирования(ОбъектКонтекстСохраняемый.ТекущийПрофильTestClient);
				Возврат ДанныеКлиентаТестирования.ПутьКИнфобазе;
			Исключение
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция ДопПараметрыАктивногоКлиентаТестирования()
	Если ОбъектКонтекстСохраняемый.Свойство("ТекущийПрофильTestClient") Тогда
		Если ОбъектКонтекстСохраняемый.ТекущийПрофильTestClient <> Неопределено Тогда
			Попытка
				ДанныеКлиентаТестирования = ПолучитьДанныеКлиентаТестирования(ОбъектКонтекстСохраняемый.ТекущийПрофильTestClient);
				Возврат ДанныеКлиентаТестирования.ДопПараметры;
			Исключение
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция ЭтоТекстИсключенияПлатформы(Стр)
	Если Найти(Стр, "{(") > 0 И Найти(Стр, ")}:") > 0 
	ИЛИ  Найти(Стр, "/e1cib/logForm:") > 0 
	ИЛИ  Найти(Стр, "Преобразование значения к типу Число не может быть выполнено") > 0 
	ИЛИ  Найти(Стр, "Значение не является значением объектного типа") > 0 
	ИЛИ  Найти(Стр, "Метод объекта не обнаружен") > 0 
	ИЛИ  Найти(Стр, "Поле объекта не обнаружено") > 0 
	ИЛИ  Найти(Стр, "Процедура или функция с указанным именем уже определена") > 0 
	ИЛИ  Найти(Стр, "Процедура или функция с указанным именем не определена") > 0 
	ИЛИ  Найти(Стр, "Переменная не определена") > 0 
	ИЛИ  Найти(Стр, "Нарушение прав доступа") > 0 
	ИЛИ  Найти(Стр, "Обращение к процедуре как к функции") > 0 
	ИЛИ  Найти(Стр, "Показанные в таблице документы не удалось пометить на удаление") > 0 
	ИЛИ  Найти(Стр, "Отображение данных в списке невозможно") > 0 
	ИЛИ  Найти(Стр, "Неопознанный оператор") > 0 
	ИЛИ  Найти(Стр, "Ошибка при вызове метода контекста") > 0 
	ИЛИ  Найти(Стр, "Ошибка при вызове серверного метода") > 0 
	ИЛИ  Найти(Стр, "Ошибка преобразования данных XDTO") > 0 
	ИЛИ  Найти(Стр, "Ошибка передачи данных между клиентом и сервером") > 0 
	ИЛИ  Найти(Стр, "Ошибка инициализации модуля") > 0 
	ИЛИ  Найти(Стр, "Запуск программы невозможен") > 0
	ИЛИ  Найти(Стр, "возникла непредвиденная ошибка") > 0
	ИЛИ  Найти(Стр, "Не удалось заблокировать таблицу") > 0
	ИЛИ  Найти(Стр, "Ошибка компиляции при вычислении выражения или выполнении фрагмента кода") > 0
	ИЛИ  Найти(Стр, "{<Неизвестный модуль>(") > 0
	ИЛИ  Найти(Стр, "Не удалось инициализировать схему запроса") > 0 Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция ТекстОшибкиЧерезДанныеОкнаОшибки()  
	Если НЕ НадоПолучатьДанныеОшибкиИзАктивногоОкнаКлиентаТестирования() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Попытка
		АктивноеОкно  = ПолучитьАктивноеОкноИзТестовоеПриложение();
		Кнопка = АктивноеОкно.НайтиОбъект(,,"OpenReport");
		Если Кнопка = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	
		Кнопка.Нажать();
		Sleep(1);
		АктивноеОкно  = ПолучитьАктивноеОкноИзТестовоеПриложение();
		Поле = АктивноеОкно.НайтиОбъект(,,"SendErrorInfoDecoration");
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	
		Поле.НажатьНаГиперссылкуВФорматированнойСтроке(0);
		Sleep(1);
		АктивноеОкно  = ПолучитьАктивноеОкноИзТестовоеПриложение();
		Поле = АктивноеОкно.НайтиОбъект(,,"Str");
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	
		Возврат Поле.ПолучитьОтображаемыйТекст();
	Исключение
		ЗаписатьЛогВЖРОшибка("ТекстОшибкиЧерезДанныеОкнаОшибки", ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
КонецФункции	

&НаКлиенте
Функция СформироватьОписаниеОшибки(Знач Стр, ИмяФайла, ИмяПроцедуры, ИнфоОбОшибке, ТекстИсключенияПлатформы)
	#Если НЕ ВебКлиент Тогда
	СисИнфо            = Новый СистемнаяИнформация; 
	ВерсияПриложения   = СисИнфо.ВерсияПриложения;
	РежимСовместимости = УзнатьРежимСовместимостиКлиент(Локализовать("Не использовать"));
	ТекстИДРаннера     = "";
	Если ЗначениеЗаполнено(Объект.ИДРаннера) Тогда
		ТекстИДРаннера = ", ИДРаннера=" +Объект.ИДРаннера;
	КонецЕсли;	
	
	ТекстОшибкиTestClient = "";
	ТекстОшибкиTestClientБезФорматирования = "";
	Попытка
		ИнфоОбОшибке = Неопределено;
		Если ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение")
			И ОбъектКонтекстСохраняемый.ТестовоеПриложение <> Неопределено
			И НадоПолучатьДанныеОшибкиИзАктивногоОкнаКлиентаТестирования() Тогда
				ИнфоОбОшибке = ОбъектКонтекстСохраняемый.ТестовоеПриложение.ПолучитьТекущуюИнформациюОбОшибке();
				Если ИнфоОбОшибке <> Неопределено Тогда
					ТекстОшибкиTestClient = ВывестиВСообщениеТекстОшибки(ИнфоОбОшибке, ТекстОшибкиTestClientБезФорматирования);
				Иначе
					ТекстОшибкиTestClient = ТекстОшибкиЧерезДанныеОкнаОшибки();
				КонецЕсли;	 
		КонецЕсли;	 
	Исключение
	КонецПопытки;
	
	ТекстПредупреждения = "";
	Если НЕ ЗначениеЗаполнено(ТекстОшибкиTestClient) И НадоПолучатьДанныеОшибкиИзАктивногоОкнаКлиентаТестирования() Тогда
		ТекстПредупреждения = ПолучитьТекстПредупреждения();
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			Если ЭтоТекстИсключенияПлатформы(ТекстПредупреждения) Тогда
				ТекстОшибкиTestClient = ТекстПредупреждения;
				ТекстОшибкиTestClientБезФорматирования = ТекстОшибкиTestClient;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	  
	
	ТекстИсключенияПлатформы = ТекстОшибкиTestClient;
	
	ЗапомнитьАктивноеОкно(Неопределено);
	ЗаголовокАктивногоОкна = "";
	ИмяАктивнойФормы       = "";
	АктивноеОкно           = Неопределено;
	Попытка
		Если ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") И НадоПолучатьДанныеОшибкиИзАктивногоОкнаКлиентаТестирования() Тогда
			АктивноеОкно  = ПолучитьАктивноеОкноИзТестовоеПриложение();
			ЗаголовокАктивногоОкна = АктивноеОкно.Заголовок;
			АктивнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
			ИмяАктивнойФормы = АктивнаяФорма.ИмяФормы;
		КонецЕсли;	 
	Исключение
		АктивноеОкно = Неопределено;
	КонецПопытки;
	
	ИмяФичи = "";
	ИмяСценария = "";
	НомерСтрокиДерева = "";
	НомерСтрокиФичи = "";
	ПолнйПутьКФиче = "";
	Попытка
		СостояниеVanessaAutomation = ПолучитьСостояниеVanessaAutomation();
		ИмяФичи = СостояниеVanessaAutomation.ТекущаяФича.Имя;
		ИмяСценария = СостояниеVanessaAutomation.ТекущийСценарий.Имя;
		НомерСтрокиДерева = СостояниеVanessaAutomation.ТекущийШаг.ИдСтроки;
		НомерСтрокиФичи = СостояниеVanessaAutomation.ТекущийШаг.НомерСтрокиФичи;
		ПолнйПутьКФиче = СостояниеVanessaAutomation.ТекущаяФича.ПолныйПуть;
	Исключение
	КонецПопытки;
	
	Стр = Стр + Символы.ПС 
	      + Символы.ПС              + Локализовать("Технические данные") + ":"
          + Символы.ПС + "        " + Локализовать("ЗаголовокАктивногоОкна") + ": " + ЗаголовокАктивногоОкна
          + Символы.ПС + "        " + Локализовать("ИмяАктивнойФормы") + ": " + ИмяАктивнойФормы
          + Символы.ПС + "        " + Локализовать("ИмяФичи") + ": " + ИмяФичи
          + Символы.ПС + "        " + Локализовать("ИмяСценария") + ": " + ИмяСценария
          + Символы.ПС + "        " + Локализовать("НомерСтрокиДерева") + ": " + НомерСтрокиДерева
          + Символы.ПС + "        " + Локализовать("НомерСтрокиФичи") + ": " + НомерСтрокиФичи
          + Символы.ПС + "        " + Локализовать("ПолныйПутьКФиче") + ": " + ПолнйПутьКФиче
          + Символы.ПС + "        " + Локализовать("ИмяФайла") + ": " + ИмяФайла
          + Символы.ПС + "        " + Локализовать("ИмяПроцедуры") + ": " + ИмяПроцедуры 
          + Символы.ПС + "        " + Локализовать("ИмяРаннера") + ": " + ИмяКомпьютера() 
          + Символы.ПС + "        " + Локализовать("ИмяКлиентаТестирования") + ": " + Локализовать(ИмяАктивногоКлиентаТестирования()) 
          + Символы.ПС + "        " + Локализовать("СинонимКлиентаТестирования") + ": " + Локализовать(СинонимАктивногоКлиентаТестирования()) 
          + Символы.ПС + "        " + Локализовать("ТипКлиентаТестирования") + ": " + Локализовать(ТипАктивногоКлиентаТестирования()) 
          + Символы.ПС + "        " + Локализовать("СтрокаСоединения") + ": " + СтрокаСоединенияАктивногоКлиентаТестирования() 
          + Символы.ПС + "        " + Локализовать("ДопПараметрыПодключения") + ": " + ДопПараметрыАктивногоКлиентаТестирования() 
          + Символы.ПС + "        " + Локализовать("PIDКлиентаТестирования") + ": " + Формат(PIDТекущегоКлиентаТестирования(), "ЧГ=; ЧН=0") 
          + Символы.ПС + "        " + Локализовать("ВерсияVA") + ": " + ПолучитьВерсиюОбработкиКлиент() 
          + Символы.ПС + "        " + Локализовать("ВерсияПлатформы") + ": " + ВерсияПриложения 
          + Символы.ПС + "        " + Локализовать("ТипПлатформы") + ": " + СисИнфо.ТипПлатформы 
          + Символы.ПС + "        " + Локализовать("РежимСовместимостиTestManager") + ": " + РежимСовместимости
          + Символы.ПС + "        " + Локализовать("ВремяРаботыСценария") + ": " + ВремяРаботыСценария() + " " + Локализовать("(ч:м:с)")
          + Символы.ПС + "        " + Локализовать("ДатаВремяОшибки") + ": " + ТекущаяДата();
        
	Если ЗначениеЗаполнено(ТекстОшибкиTestClient) Тогда
		// значит было вызвано исключение
		Стр = Стр + Символы.ПС + "        " + Локализовать("ДеталиОшибки:") + Символы.ПС + ТекстОшибкиTestClient;
	Иначе
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			Стр = Стр + Символы.ПС + "Текст модального окна:" + Символы.ПС 
			  + "    " + ТекстПредупреждения;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Стр;
	
	#КонецЕсли
КонецФункции

&НаКлиенте
Процедура ДействияПослеЗавершенияСценария(СтрокаСценария, БылаОшибка = Ложь, ОписаниеОшибки = Неопределено, СлужебныеДанныеСценария = Неопределено)
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат;
	КонецЕсли;	 
	ВызватьМетодСценарияЕслиОнЕсть(СтрокаСценария, "ПередОкончаниемСценария", , БылаОшибка, ОписаниеОшибки, СлужебныеДанныеСценария);
КонецПроцедуры

&НаКлиенте
Функция ПроверитьНаличиеИнструментаДляСозданияСкриншотов()
	#Если НЕ ВебКлиент Тогда
	
	Если ЗапрещеныСинхронныеВызовы Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Если НЕ Объект.СоздаватьИнструкциюHTML 
		И НЕ Объект.ДелатьСкриншотПриВозникновенииОшибки 
		И НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Объект.СоздаватьИнструкциюHTML Тогда
		Если ПустаяСтрока(Объект.КаталогВыгрузкиИнструкцийHTML) Тогда
			СообщитьПользователю(Локализовать("КаталогВыгрузкиИнструкцийHTML не задан."));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Если Объект.СоздаватьИнструкциюMarkdown Тогда
		Если ПустаяСтрока(Объект.КаталогВыгрузкиИнструкцийMarkdown) Тогда
			СообщитьПользователю(Локализовать("КаталогВыгрузкиИнструкцийMarkdown не задан."));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Если Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
		Если ПустаяСтрока(Объект.КаталогВыгрузкиСкриншотов) Тогда
			СообщитьПользователю(Локализовать("КаталогВыгрузкиСкриншотов не задан."));
			Возврат Ложь;
		КонецЕсли;	 
	КонецЕсли;
	Если ЭтоLinux Тогда
		Возврат Истина;
	Иначе
		Если Объект.ИспользоватьКомпонентуVanessaExt
			И ВнешняяКомпонентаДляСкриншотов = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ВременныйФайл = ПолучитьИмяВременногоФайла("png");
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИмяФайла",ВременныйФайл);
		ДопПараметры.Вставить("Режим","Проверка");
		СделатьСкриншот(ДопПараметры);
		
		Если НЕ ФайлСуществуетКомандаСистемы(ВременныйФайл, "ПроверитьНаличиеИнструментаДляСозданияСкриншотов") Тогда
			СообщитьПользователю(Локализовать("НЕ найден инструмент по созданию скриншотов."));
			Возврат Ложь;
		КонецЕсли;
		
		Попытка
			УдалитьФайлыКомандаСистемы(ВременныйФайл);
		Исключение
		КонецПопытки;
		
		Возврат Истина;
	КонецЕсли;
	
	#КонецЕсли
КонецФункции

&НаКлиенте
Функция СоздатьИмяФайлаДляСкриншотаТекстовойИнструкции(Каталог, СтруткураШага, НомШага, ТекущиеДанныеИнструкции)
	
	ФайлФичи = Новый Файл(ТекущиеДанныеИнструкции.ПолныйПутьКФиче);
	
	ШаблонИмени = "%1%2_%3.png";
	ИмяФайла = _СтрШаблон(
		ШаблонИмени, 
		ДополнитьСлешВПуть(Каталог), 
		ПолучитьФорматированныйНомер(НомШага, 3), 
		ФайлФичи.ИмяБезРасширения);
	
	Возврат ИмяФайла;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВЛогИнструкцииHTMLВыполненияШага(СтруткураШага = Неопределено)
	
	Если СкриншотСделанВСценарии Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруткураШага = Неопределено Тогда
		ТекИД_ВыполненногоШагаВМассиве = ТекИД_ШагаВМассиве;
		Шаги                           = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		СтруткураШага                  = Шаги[ТекИД_ШагаВМассиве];
	КонецЕсли;
	
	ДанныеШагаДляТекстовойИнструкции = ДанныеШагаДляТекстовойИнструкции(СтруткураШага);
	Если НЕ ДанныеШагаДляТекстовойИнструкции.УчаствуетВИнструкции Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайлаСкриншота = "";
	КаталогВыгрузкиИнструкцийHTML = ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийHTML);
	СделатьСкриншотВТекстовойИнструкции(СтруткураШага, ИмяФайлаСкриншота, КаталогВыгрузкиИнструкцийHTML, ТекущиеДанныеИнструкцииHTML);
	
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииHTML, КодировкаТекста.UTF8, , Истина);
	ТД.ЗаписатьСтроку("НачалоШага");
	СтрокаШага = СтруткураШага.Имя;
	Если СтруткураШага.Свойство("ШагСПараметрамиВТаблице") И СтруткураШага.ШагСПараметрамиВТаблице = Истина Тогда
		Для каждого СтрПараметрыТаблицы Из СтруткураШага.ПараметрыТаблицы Цикл
			СтрокаШага = СтрокаШага + "\n" + СтрПараметрыТаблицы;
		КонецЦикла;
	КонецЕсли;
	
	ТД.ЗаписатьСтроку("ИДШага=" + Формат(ТекИД_ШагаВМассиве, "ЧГ=; ЧН=0"));
	
	Если Не ПустаяСтрока(ИмяФайлаСкриншота) Тогда
		ТД.ЗаписатьСтроку("Скриншот=" + ИмяФайлаСкриншота);
	КонецЕсли;
	
	ЗаписатьДопПараметрыШагаТекстовойИнструкцииВЛог(ТД, ДанныеШагаДляТекстовойИнструкции);
	
	ТД.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВЛогИнструкцииMarkdownВыполненияШага(СтруткураШага = Неопределено)
	
	Если СкриншотСделанВСценарии Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруткураШага = Неопределено Тогда
		ТекИД_ВыполненногоШагаВМассиве = ТекИД_ШагаВМассиве;
		Шаги                           = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		СтруткураШага                  = Шаги[ТекИД_ШагаВМассиве];
	КонецЕсли;
	
	ДанныеШагаДляТекстовойИнструкции = ДанныеШагаДляТекстовойИнструкции(СтруткураШага);
	Если НЕ ДанныеШагаДляТекстовойИнструкции.УчаствуетВИнструкции Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайлаСкриншота = "";
	КаталогВыгрузкиИнструкцийMarkdown = ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийMarkdown);
	СделатьСкриншотВТекстовойИнструкции(СтруткураШага, ИмяФайлаСкриншота, КаталогВыгрузкиИнструкцийMarkdown, ТекущиеДанныеИнструкцииMarkdown);
	
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииMarkdown, КодировкаТекста.UTF8, , Истина);
	
	ТД.ЗаписатьСтроку("НачалоШага");
	
	СтрокаШага = СтруткураШага.Имя;
	Если СтруткураШага.Свойство("ШагСПараметрамиВТаблице") И СтруткураШага.ШагСПараметрамиВТаблице = Истина Тогда
		Для каждого СтрПараметрыТаблицы Из СтруткураШага.ПараметрыТаблицы Цикл
			СтрокаШага = СтрокаШага + "\n" + СтрПараметрыТаблицы;
		КонецЦикла;
	КонецЕсли;
	
	ТД.ЗаписатьСтроку("ИДШага=" + Формат(ТекИД_ШагаВМассиве, "ЧГ=; ЧН=0"));
	
	Если Не ПустаяСтрока(ИмяФайлаСкриншота) Тогда
		ТД.ЗаписатьСтроку("Скриншот=" + ИмяФайлаСкриншота);
	КонецЕсли;
	
	ЗаписатьДопПараметрыШагаТекстовойИнструкцииВЛог(ТД, ДанныеШагаДляТекстовойИнструкции);
	
	ТД.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотВТекстовойИнструкции(СтруткураШага, ИмяФайлаСкриншота, Каталог, ТекущиеДанныеИнструкции)
	
	ДелатьСкриншот = 
		СписокШаговБезСкриншота.Найти(СтруткураШага.СтрокаРеальнойПроцедуры) = Неопределено 
		И ЭтотШагНеНужноИгнорировать(СтруткураШага);
	
	Если ДелатьСкриншот Тогда
		
		КаталогСкриншотов = ДополнитьСлешВПуть(Каталог) + "images";
		ФайлКаталогСкриншотов = Новый Файл(КаталогСкриншотов);
		Если НЕ ФайлСуществуетКомандаСистемы(ФайлКаталогСкриншотов.ПолноеИмя) Тогда
			СоздатьКаталогКомандаСистемы(КаталогСкриншотов);
		КонецЕсли;
		
		ИмяФайлаСкриншота = СоздатьИмяФайлаДляСкриншотаТекстовойИнструкции(КаталогСкриншотов, СтруткураШага, ТекИД_ШагаВМассиве, ТекущиеДанныеИнструкции);
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИмяФайла",ИмяФайлаСкриншота);
		СделатьСкриншот(ДопПараметры, СтруткураШага);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗначениеДляПередачиВМетод(Знач Значение, Тип)
	Если Тип = "Строка" Тогда
		Возврат """" + СтрЗаменить(Значение, """", """""") + """";
	ИначеЕсли Тип = "Число" Тогда
		Возврат Значение;
	ИначеЕсли Тип = "Дата" Тогда
		Возврат ПреобразоватьКДатеСтрокуКакСтроку(Значение);
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Неизвестный Тип: %1 в ПолучитьЗначениеДляПередачиВМетод"),
			Тип
		);
	КонецЕсли;	 
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеДляПередачиВМетодСервер(Значение, Тип, СтруктураПараметров)
	Если Тип = "Строка" Тогда
		Возврат """" + СтрЗаменить(Значение, """", """""") + """";
	ИначеЕсли Тип = "Число" Тогда
		Возврат Значение;
	ИначеЕсли Тип = "Дата" Тогда
		Возврат ПреобразоватьКДатеСтрокуКакСтроку(Значение);
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтрокуСервер(
			ТекстСообщенияПользователюВызовСервера("Неизвестный Тип: %1 в ПолучитьЗначениеДляПередачиВМетод",
				СтруктураПараметров.ТекстСообщенийПользователю),
			Тип
		);
	КонецЕсли;	 
КонецФункции

&НаКлиенте
Функция ПолучитьИдСледующегоШага(ТекШаг)
	ИдСледующегоШага = Неопределено;
	Если ТекШаг.Свойство("ДопТип") И (ТекШаг.ДопТип = "Условие" ИЛИ ТекШаг.ДопТип = "УсловиеИначеЕсли") Тогда
		Если НЕ Объект.РезультатУсловия Тогда
			ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки", ТекШаг.ИдСледующегоШага, Истина);
		Иначе
			Если ТекШаг.Свойство("СледующаяСтрокаУсловиеИстинно") Тогда
				Если ТекШаг.СледующаяСтрокаУсловиеИстинно = -1 Тогда
					ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки", Неопределено, Истина);
				Иначе	
					ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки", ТекШаг.СледующаяСтрокаУсловиеИстинно, Истина);
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
	ИначеЕсли ТекШаг.Свойство("ДопТип") И ТекШаг.ДопТип = "Цикл" Тогда
		Если НЕ Объект.РезультатУсловия Тогда
			ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки", ТекШаг.ИдСледующегоШага, Истина);
			Если ТекШаг.ИдСледующегоШага = Неопределено Тогда
				ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки", ТекШаг.ИдЦикла, Истина);
			КонецЕсли;	 
		КонецЕсли;	 
	ИначеЕсли ТекШаг.ИдЦикла <> Неопределено Тогда
		ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки", ТекШаг.ИдЦикла, Истина);
	ИначеЕсли ТекШаг.ИдСледующегоШага = -1 Тогда
		ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки", Неопределено, Истина);
	ИначеЕсли ТекШаг.ИдСледующегоШага <> Неопределено Тогда
		ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки", ТекШаг.ИдСледующегоШага, Истина);
	КонецЕсли;	 
	
	Если ТекШаг.Свойство("ШагУпалВСекцииПопыткаИсключение") И ТекШаг.ШагУпалВСекцииПопыткаИсключение Тогда
		//ТекШаг.Вставить("ШагУпалВСекцииПопыткаИсключение", Ложь);
		ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки", ТекШаг.ПервыйШагВИсключении, Истина);
	КонецЕсли;	 
	
	Возврат ИдСледующегоШага;
КонецФункции	

&НаКлиенте
Процедура ПоказатьКолонкуСНомеромСтрокиДерева()
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Не Элементы.ДеревоТестовИДСтроки.Видимость Тогда
		ПоказатьСкрытьИДСтроки("Показать");
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура СнятьСкриншотШагаЕслиЭтоНеобходимо(Шаг, РезультатПрохожденияТестовСценария, ДопПараметрыСкриншота)
	
	ИмяШага = Лев(Шаг.Имя, 60);
	
	Если НЕ ФайлСуществуетКомандаСистемы(Объект.КаталогВыгрузкиСкриншотов) Тогда
		СоздатьКаталогКомандаСистемы(Объект.КаталогВыгрузкиСкриншотов);
	КонецЕсли;	 
	
	Если НЕ ФайлСуществуетКомандаСистемы(Объект.КаталогВыгрузкиСкриншотов) Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не найден каталог: %1"),
			Объект.КаталогВыгрузкиСкриншотов
		);
	КонецЕсли;	 
	
	ИмяФайлаСкриншота = ДополнитьСлешВПуть(Объект.КаталогВыгрузкиСкриншотов)
	    + Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=; ЧН=0")
		+  "_" + УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяШага) + ".png";
		
		
	ЭтоСкриншотПередВыполнениемШага = Неопределено;	
	Если ДопПараметрыСкриншота.Свойство("ЭтоСкриншотПередВыполнениемШага") Тогда
		ЭтоСкриншотПередВыполнениемШага = ДопПараметрыСкриншота.ЭтоСкриншотПередВыполнениемШага;
	КонецЕсли;	 
		
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяФайла",ИмяФайлаСкриншота);
	Если ЭтоСкриншотПередВыполнениемШага = Неопределено Тогда
		Файл = Новый Файл(ИмяФайлаСкриншота);
		ДопПараметры.Вставить("ИмяСкриншотаДляОтчета",Файл.ИмяБезРасширения);
	Иначе
		Если ЭтоСкриншотПередВыполнениемШага Тогда
			ДопПараметры.Вставить("ИмяСкриншотаДляОтчета", Локализовать("Перед выполнением шага"));
		Иначе	
			ДопПараметры.Вставить("ИмяСкриншотаДляОтчета", Локализовать("После выполнения шага"));
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ДопПараметрыСкриншота.Свойство("ИмяПроцедуры") Тогда
		ДопПараметры.Вставить("ИмяПроцедуры",ДопПараметрыСкриншота.ИмяПроцедуры);
	КонецЕсли;	 
	
	Если ДопПараметрыСкриншота.Свойство("ТегScreenShot") Тогда
		ДопПараметры.Вставить("ТегScreenShot",ДопПараметрыСкриншота.ТегScreenShot);
	КонецЕсли;	 
	
	ДопПараметры.Вставить("СпособСнятияСкриншотовВнешнейКомпонентой", 0);
	СделатьСкриншот(ДопПараметры, Шаг);
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьДанныеПоАссертамВДерево(СтрокаСценария, СтрокаШага)
	СтрокаСценария.ПроизвольныеЗначения.Вставить("ОшибкаAssert", Истина);
	СтрокаСценария.ПроизвольныеЗначения.Вставить("ЗначениеExpected", ЗначениеExpected);
	СтрокаСценария.ПроизвольныеЗначения.Вставить("ЗначениеActual", ЗначениеActual);
	СтрокаШага.ПроизвольныеЗначения.Вставить("ОшибкаAssert", Истина);
	СтрокаШага.ПроизвольныеЗначения.Вставить("ЗначениеExpected", ЗначениеExpected);
	СтрокаШага.ПроизвольныеЗначения.Вставить("ЗначениеActual", ЗначениеActual);
КонецПроцедуры 

&НаКлиенте
Функция СтрокаИсключенияОшибкиСценарияПереданныеИзвне()
	СтрокаИсключения = "";
	Для Ккк = 0 По ОшибкиСценарияПереданныеИзвне.Количество() - 1 Цикл
		СтрокаИсключения = СтрокаИсключения + ОшибкиСценарияПереданныеИзвне[Ккк];
		Если Ккк < ОшибкиСценарияПереданныеИзвне.Количество() - 1 Тогда
			СтрокаИсключения = СтрокаИсключения + Символы.ПС;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Возврат СтрокаИсключения;
КонецФункции	 

&НаКлиенте
Процедура ВызватьИсключениеТакКакЕстьОшибкиПереданныеИзвне()
	СтрокаИсключения = СтрокаИсключенияОшибкиСценарияПереданныеИзвне();
	ВызватьИсключение СтрокаИсключения;
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьШагПродолжениеОбработчик() Экспорт
	Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
		ЗаписатьЛогВЖРИнформация("ВыполнитьШагПродолжение",
			"ВыполнитьШагПродолжениеОбработчик");
	КонецЕсли;	 
	ВыполнитьШагПродолжение(ПараметрыВызоваПроцедурНачало.РезультатПрохожденияШага,
		ПараметрыВызоваПроцедурНачало.ОбработкаТеста);
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьШагПродолжение(РезультатПрохожденияШага, ОбработкаТеста)
	ТекИД_ВыполненногоШагаВМассиве = ТекИД_ШагаВМассиве;
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	ТекШаг = Шаги[ТекИД_ШагаВМассиве];
	АдресСнипета = ТекШаг.АдресСнипета;
	ИДСтрокиШага                       = ТекШаг.СтрокаШага;
	ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
	
	СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	СтрокаШага     = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);
	
	УстановитьОграничениеНаКоличествоПопытокДействий(Ложь);
	
	// снятие скриншота шага, если указан тег @screenshot
	Если ТекШаг.Свойство("НадоСнятьСкриншотШага") И ТекШаг.НадоСнятьСкриншотШага И Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
		ТекШаг.Вставить("НадоСнятьСкриншотШага", Ложь);
		ТекШаг.Вставить("НадоСнятьСкриншотШагаПослеВыполнения",Истина);
		ДопПараметрыСкриншота = Новый Структура;
		ДопПараметрыСкриншота.Вставить("ИмяПроцедуры", "ВыполнитьШагПродолжениеОбработчик");
		ДопПараметрыСкриншота.Вставить("ТегScreenShot", Истина);
		ДопПараметрыСкриншота.Вставить("ЭтоСкриншотПередВыполнениемШага", Истина);
		
		ПараметрыВызоваПроцедурНачало = Новый Структура;
		ПараметрыВызоваПроцедурНачало.Вставить("РезультатПрохожденияШага",РезультатПрохожденияШага);
		ПараметрыВызоваПроцедурНачало.Вставить("ОбработкаТеста",ОбработкаТеста);
		
		СнятьСкриншотШагаЕслиЭтоНеобходимо(ТекШаг, РезультатПрохожденияТестовСценария, ДопПараметрыСкриншота);
		Возврат;
	КонецЕсли;	

	КонтекстОтладки = ТаблицаОбработокДляОтладки.Получить(ТекШаг.СтрокаРеальнойПроцедуры);
	Если КонтекстОтладки <> Неопределено Тогда 
		ОбработкаТеста = КонтекстОтладки.Обработка;
	КонецЕсли;
	
	ИмяПроцедуры     = ТекШаг.СтрокаРеальнойПроцедуры;
	СписокАргументов = ТекШаг.ЗначенияПараметров;

	МассивПараметров = ПолучитьМассивПараметровИзСписокАргументов(
		СписокАргументов, ТекШаг, МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ЕстьСекцияПеременные);
	
	Если СтрокаШага.ШагСПараметрамиВТаблице = Истина Тогда
		ПарамТаблица = Новый Массив;
		МассивПараметров.Добавить(ПарамТаблица);
		
		ВТаблицахИспользовалисьПеременные = Ложь;
		ПодчиненныеСтроки = СтрокаШага.ПолучитьЭлементы();
		Для каждого СтрокиТаблицы Из ПодчиненныеСтроки Цикл
			Если ЗначениеЗаполнено(СтрокиТаблицы.Тип) Тогда
				// значит это уже не строка таблицы
				Прервать;
			КонецЕсли;	 
			
			СтруктураПарамТаблица = Новый Структура;
			
			Если (СтрокиТаблицы.СтрокаПараметровШагаВВидеТаблицы <> Истина) ИЛИ (НЕ ЗначениеЗаполнено(СтрокиТаблицы.Имя)) Тогда
				ПарамТаблица = Новый Массив;
				МассивПараметров.Добавить(ПарамТаблица);
				Продолжить;
			КонецЕсли;	 
			
			НомерКолонки = 0;
			ДанныеПоПростымПеременным = 0; // Из ДанныеПоПростымПеременнымПоТекущемуСценарию() может вернуться Неопределено, поэтому инициалиция нулём
			ДанныеПоПеременныхВТаблицах = 0; // Тоже самое
			Для каждого Колонка Из СтрокиТаблицы.ПараметрыТаблицы Цикл
				НомерКолонки       = НомерКолонки + 1;
				СтруктураПараметра = Колонка.Значение;
				Если СтруктураПараметра.Тип = "Строка" Тогда
					Если Найти(СтруктураПараметра.Значение, "$") > 0 Тогда
						ВТаблицахИспользовалисьПеременные = Истина;
					КонецЕсли;	 
					Значение = ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(СтруктураПараметра.Значение, Ложь);
					Если Найти(Значение,"$") > 0 Тогда
						Значение = ПодставитьПеременныеВСтроку(Значение);
					КонецЕсли;
					
					Если МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ЕстьСекцияПеременные ИЛИ Объект.ВычислятьВыраженияВФигурныхСкобках Тогда
						Значение = ВычислитьИнлайнВыражениеЕслиЭтоВозможно(Значение, ДанныеПоПростымПеременным, ДанныеПоПеременныхВТаблицах, МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ЕстьСекцияПеременные);
					КонецЕсли;	 
					
				Иначе	
					Значение = ПолучитьЗначениеДляПередачиВМетод(СтруктураПараметра.Значение, СтруктураПараметра.Тип);
					Если СтруктураПараметра.Тип = "Число" И ТипЗнч(Значение) = Тип("Число") Тогда
					Иначе	
						Значение = Вычислить(Значение);
					КонецЕсли;	 
				КонецЕсли;	 
				
				СтруктураПарамТаблица.Вставить("Кол" + Формат(НомерКолонки, "ЧГ=; ЧН=0"), Значение);
			КонецЦикла;
			
			ПарамТаблица.Добавить(СтруктураПарамТаблица);
		КонецЦикла;
		
		Если ЗапоминатьЗначенияПеременыхПриПодстановкеВШаг И ВТаблицахИспользовалисьПеременные Тогда
			ДобавитьКШагуЗначенияПеременных(ТекШаг);
		КонецЕсли;	 
		
		Если ПарамТаблица.Количество() = 0 Тогда
			// значит эта таблица пустая, её передавать не надо
			МассивПараметров.Удалить(МассивПараметров.Количество() - 1);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если МассивПараметров.Количество() > ТекШаг.ЗначенияПараметров.Количество() Тогда
		//Значит в шаг также передаётся одна или несколько таблиц. Они будут доступны в данных шага как ПереданныеВШагТаблицы. 
		ПереданныеВШагТаблицы = Новый Массив;
		Для Сч = ТекШаг.ЗначенияПараметров.Количество() По МассивПараметров.Количество()-1 Цикл
			ПереданныеВШагТаблицы.Добавить(МассивПараметров[Сч]);
		КонецЦикла;	 
		ТекШаг.Вставить("ПереданныеВШагТаблицы", ПереданныеВШагТаблицы);
	КонецЕсли;	 
	
	СтрОшибка       = Неопределено;
	ШагВыполнен     = Ложь;
	ШагНеРеализован = Ложь;
	БылОбновленКешФормы = Ложь;
	ЭтоОбычныйШагОбернутыйВУсловие = Ложь;
	Если ТекШаг.Свойство("ЭтоОбычныйШагОбернутыйВУсловие") Тогда
		ЭтоОбычныйШагОбернутыйВУсловие = ТекШаг.ЭтоОбычныйШагОбернутыйВУсловие;
		Если ЭтоОбычныйШагОбернутыйВУсловие Тогда
			УстановитьРезультатУсловия(Истина);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если (Объект.ОзвучиватьВыполнениеСценария ИЛИ ВключенРежимОбучения) И НЕ ПрекратитьВыполнениеВсехСценариев Тогда
		
		МассивСнипетовСубтитров = ПолучитьМассивСнипетовСубтитров();
		МассивСнипетовВидеовставка = ПолучитьМассивСнипетовВидеовставка();
		ТекСнипет = НРег(ТекШаг.СтрокаРеальнойПроцедуры);
		Если МассивСнипетовСубтитров.Найти(ТекСнипет) <> Неопределено Тогда
			ТекШаг.Вставить("ТекстИнструкция", ТекШаг.ЗначенияПараметров[0].Значение.Значение);
		ИначеЕсли МассивСнипетовВидеовставка.Найти(ТекСнипет) <> Неопределено Тогда
			ТекШаг.Вставить("ТекстИнструкция", ТекШаг.ЗначенияПараметров[0].Значение.Значение);
		КонецЕсли;	 
		
		Если ТекШаг.Свойство("ТекстИнструкция") И НЕ ПустаяСтрока(ТекШаг.ТекстИнструкция) Тогда
			
			Если Найти(ТекШаг.ТекстИнструкция, "$") > 0 Тогда
				ТекШаг.Вставить("ТекстИнструкция", ПодставитьПеременныеВСтроку(ТекШаг.ТекстИнструкция,Истина));
			КонецЕсли;	 
			
			ТекШаг.Вставить("ТекстИнструкция", ПодставитьЗначенияИнлайнВыраженийВСтроку(ТекШаг.ТекстИнструкция, Неопределено, Неопределено));
			
			Если НужноОжидатьОкончанияОзвучкиШага И ТекШаг.ИДСтроки <> ШагДляКоторогоЗапущенаОзвучка Тогда
				//Если нужно выполнить следующий шаг с озвучкой, но ещё не закончилось воспроизведение предыдущего шага, то ждём окончания озвучки.
				ПодключитьОбработчикОжидания("ВыполнитьШаг", 0.2, Истина);
				Возврат;
			КонецЕсли;	 
			Если НЕ НужноОжидатьОкончанияОзвучкиШага И ТекШаг.ИДСтроки <> ШагДляКоторогоЗапущенаОзвучка Тогда
				//Запускаем озвучку шага.
				ШагДляКоторогоЗапущенаОзвучка = ТекШаг.ИдСтроки;
				
				Если ТекШаг.Свойство("ТекстИнструкция") И СокрЛП(ТекШаг.ТекстИнструкция) <> "*" Тогда
					НачатьОзвучкуШага(ТекШаг);
				КонецЕсли;	
				
				//Даём время диктору начать говорить перед выполнением шага с озвучкой.
				ПодключитьОбработчикОжидания("ВыполнитьШаг", 0.5, Истина);
				Возврат;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Попытка
		
		ОбработкаТеста.Контекст            = ОбъектКонтекст;
		ОбработкаТеста.КонтекстСохраняемый = ОбъектКонтекстСохраняемый;
		
		Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
			ЗаписатьЛогВЖРПередВыполнениемШага(ТекШаг.Имя);
		КонецЕсли;	 

		Если НЕ ЗначениеЗаполнено(Объект.АдресДанныеОбОшибке) Тогда
			Объект.АдресДанныеОбОшибке = ПоместитьВоВременноеХранилище(СтруктураОшибкиVA());
		КонецЕсли;	 
		
		СкриншотСделанВСценарии = Ложь;
		
		// вызов процедуры шага
		ВсёЕщёИдётВыполнениеШагов = ВсёЕщёИдётВыполнениеШагов + 1;
		ВызватьМетод(ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
		
		Если Объект.ПроверкаСерверныхВызововВОбработчикахСобытий И (Шаги.Количество() - 1) <= ТекИД_ШагаВМассиве Тогда
			// значит все шаги сценария выполнены и надо проверить данные о проверке серверных вызовов в обработчиках событий
			ВыполнитьПроверкуСерверныхВызововВОбработчикахСобытий();
		КонецЕсли;	
		
		ВсёЕщёИдётВыполнениеШагов = ВсёЕщёИдётВыполнениеШагов - 1;
		
		ШагВыполнен = Истина;
		
		Если НЕ ТекШаг.Свойство("ЭтоШагКонтекста") ИЛИ НЕ ТекШаг.ЭтоШагКонтекста Тогда
			ДобавитьВЛогИнструкцииHTMLВыполненияШага(ТекШаг);
			ДобавитьВЛогИнструкцииMarkdownВыполненияШага(ТекШаг);
		КонецЕсли;	 
		
		Если ОшибкиСценарияПереданныеИзвне.Количество() > 0 Тогда
			ШагВыполнен = Ложь;
			ВызватьИсключениеТакКакЕстьОшибкиПереданныеИзвне();
		КонецЕсли;	 
		
		Если ТекШаг.Свойство("ШагУпалВСекцииПопыткаИсключение") Тогда
			ТекШаг.Удалить("ШагУпалВСекцииПопыткаИсключение");
		КонецЕсли;	
		
	Исключение
		
		Если НЕ ШагВыполнен Тогда
			Если НаЭкранеСистемныйДиалогКоторыйМожноЗакрытьИПродолжитьСценарий() Тогда
				Если ЗакрытьСистемныйДиалогКоторыйМешаетПродолжитьСценарий() Тогда
					sleep(1);
					ВсёЕщёИдётВыполнениеШагов = ВсёЕщёИдётВыполнениеШагов - 1;
					ВыполнитьШагПродолжение(РезультатПрохожденияШага, ОбработкаТеста);
					Возврат;
				КонецЕсли;	
			КонецЕсли;		
		КонецЕсли;	
		
		ШагУпалВСекцииПопыткаИсключение = Ложь;
		Если НЕ ЭтоОбычныйШагОбернутыйВУсловие Тогда
			Если ТекШаг.Свойство("ВПопытке") И ТекШаг.ВПопытке Тогда
				ВсёЕщёИдётВыполнениеШагов = ВсёЕщёИдётВыполнениеШагов - 1;
				ТекШаг.Вставить("ШагУпалВСекцииПопыткаИсключение", Истина);
				ШагУпалВСекцииПопыткаИсключение = Истина;
				ШагВыполнен = Истина;
				ОписаниеОшибкиСтр = ОписаниеОшибки();
				ИнфоОбОшибке = Неопределено;
				ТекстИсключенияПлатформы = "";
				СтрОшибка = СформироватьОписаниеОшибки(ОписаниеОшибкиСтр, АдресСнипета, ИмяПроцедуры, ИнфоОбОшибке, ТекстИсключенияПлатформы);
				ТекШаг.Вставить("ТекстИсключенияПлатформы", ТекстИсключенияПлатформы);
				ЗаписатьВЖРДанныеОНастройкахVanessaAutomation();
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ОписаниеОшибкиКратко = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОписаниеОшибкиКраткоVanessaEditor = МодульРедакторТекста().ОписаниеОшибкиКраткоVanessaEditor(ОписаниеОшибкиКратко);
				ТекстОшибкиВозникшейВИсключении = ОписаниеОшибкиКраткоVanessaEditor;
				ЗаписатьЛогВЖРИнформация("ВыполнитьШаг.ПопыткаИсключение", ТекШаг.Имя + Символы.ПС + СтрОшибка);
				ЗаписатьЛогВЖРИнформация("ВыполнитьШаг.СтекВызова", ПодробноеПредставлениеОшибки);
				
				Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл И НЕ Объект.РежимСамотестирования Тогда
					ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(ПодставитьПараметрыВСтроку(
					Локализовать("Шаг упал в секции Попытка/Исключение: <%1>"),
					ТекШаг.Имя
					));
					
					ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(СтрОшибка + Символы.ПС);
				КонецЕсли;
				
				РезультатПрохожденияТестовСценария.Вставить("ШагУпавшийВПопыткеИсключении", ТекШаг);
				
			КонецЕсли;
		Иначе	
			ВсёЕщёИдётВыполнениеШагов = ВсёЕщёИдётВыполнениеШагов - 1;
		КонецЕсли;	 
		
		Отладка("ОписаниеОшибки()=" + ОписаниеОшибки());
		ОписаниеОшибкиСтр = ОписаниеОшибки();
		ОписаниеОшибкиКратко = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОписаниеОшибкиКраткоVanessaEditor = МодульРедакторТекста().ОписаниеОшибкиКраткоVanessaEditor(ОписаниеОшибкиКратко);
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		БылОбновленКешФормы = Ложь;
		
		Если ТекШаг.Свойство("ЭтоОбычныйШагОбернутыйВУсловие") И ТекШаг.ЭтоОбычныйШагОбернутыйВУсловие Тогда
			ЭтоОбычныйШагОбернутыйВУсловие = Истина;
		Иначе
			ЭтоОбычныйШагОбернутыйВУсловие = Ложь;
		КонецЕсли;	
			
		Если Не ОшибкаAssert И НЕ ЭтоОбычныйШагОбернутыйВУсловие Тогда
			СтруктураОшибки = ПолучитьИзВременногоХранилища(Объект.АдресДанныеОбОшибке);

			Если Найти(ОписаниеОшибкиКратко, "[AssertError]") Тогда
				СтруктураОшибки = ОшибкаАссертаOSL(ОписаниеОшибкиКратко);
			КонецЕсли;

			Если ТипЗнч(СтруктураОшибки) = Тип("Структура") И СтруктураОшибки.ОшибкаAssert Тогда
				ОшибкаAssert = Истина;
				ЗначениеExpected = СтруктураОшибки.ЗначениеExpected;
				ЗначениеActual = СтруктураОшибки.ЗначениеActual;
					
				СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
				ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(СтрокаСценария, ИДСтрокиСценария, Истина);
				БылОбновленКешФормы = Истина;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если НЕ ШагУпалВСекцииПопыткаИсключение И НЕ ЭтоОбычныйШагОбернутыйВУсловие Тогда
			ЗаписатьЛогВЖРОшибка("VanessaAutomation.ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки);
		КонецЕсли;	 
		
		Если Объект.ЗапускИзКоманднойСтроки И НЕ БылОбновленКешФормы Тогда
			ОбновитьКешДанныхФормы();
		КонецЕсли;	 
		
		Если Объект.ОбновлятьДеревоПриНачалеВыполненияСценария И НЕ ШагУпалВСекцииПопыткаИсключение И НЕ ЭтоОбычныйШагОбернутыйВУсловие Тогда
			АктивизироватьСтрокуДереваТекущегоШага();
		КонецЕсли;	 
		
		Если Найти(НРег(ОписаниеОшибкиСтр), НРег("Ошибка сетевого взаимодействия при вызове")) > 0 
			// Это нужно, чтобы сообщить вызывающей системе, что было потеряно соединение с TestClient
				И КоличествоЗапущенныхКлиентовТестирования <= 1 И НЕ ШагУпалВСекцииПопыткаИсключение И НЕ ЭтоОбычныйШагОбернутыйВУсловие Тогда
				// Если в сценарии запускалось больше одного клиента тестирования, то ошибкой считаем только первый запуск
			ВозниклаОшибкаОшибкаСетевогоВзаимодействия = Истина;
		КонецЕсли;	 
		
		Если Найти(ОписаниеОшибкиСтр, "}: Не реализовано.") > 0 Тогда // тогда это Pending
			//Если шаг не реализован, то попытка / исключение не должна это пропускать
			ШагУпалВСекцииПопыткаИсключение = Ложь;
			ТекШаг.Вставить("ШагУпалВСекцииПопыткаИсключение", Ложь);
			ЭтоОбычныйШагОбернутыйВУсловие = Ложь;
			
			ТекстСообщения = Локализовать("Шаг (%1) не реализован.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ТекШаг.Имя); 
			
			ОписаниеОшибкиШага = ТекстСообщения;
			СообщитьПользователю(ОписаниеОшибкиШага);
			
			ТекстСообщения = Локализовать("Не реализовано.");
			СтрОшибка = ТекстСообщения;
			ШагНеРеализован = Истина;
			
			Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
				ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(ПодставитьПараметрыВСтроку(
					Локализовать("Pending: %1"),
					ТекстСообщения
				));
				
				Статистика_ЗафиксироватьПропуск();
				
			КонецЕсли;	 
			
			ОстановитьЗаписьВидеоОдногоШага();
			
			Если Объект.ПриравниватьPendingКFailed Тогда
				СтрокаШага.Статус = "Failed";
				СтрокаСценария.Статус = "Failed";
				
				ДанныеДляФормированияJsonОбОшибке = ДанныеДляФормированияJsonОбОшибке(СтрОшибка, Неопределено, ОписаниеОшибкиШага, ТекШаг.ИДСтроки, ТекстИсключенияПлатформы, ОписаниеОшибкиКратко, ПодробноеПредставлениеОшибки);
				РезультатПрохожденияТестовСценария.Вставить("ДанныеДляФормированияJsonОбОшибке", ДанныеДляФормированияJsonОбОшибке);
				РезультатПрохожденияТестовСценария.Вставить("Статус", "Failed");
			КонецЕсли;	 
			
			Если Объект.ИспользоватьРедакторVanessaEditor Тогда
				ВыполненныеШагиVanessaEditor = Новый Массив;
				ВыполненныеШагиVanessaEditor.Добавить(ТекШаг.НомерСтрокиВФиче);
				ПолучитьVanessaEditor().setRuntimeProgress("pending", ЗаписатьОбъектJSON(ВыполненныеШагиVanessaEditor));
			КонецЕсли;	 
			
		Иначе
			
			// значит возникла ошибка
			ОписаниеОшибкиШага = Локализовать("Шаг") + " (" + ТекШаг.Имя + ") " + Локализовать("не выполнен") + ".";
			
			Если ЭтоОбычныйШагОбернутыйВУсловие Тогда
				Отладка(ОписаниеОшибкиШага);
			Иначе	
				СообщитьПользователю(ОписаниеОшибкиШага);
			КонецЕсли;	 
			ИнфоОбОшибке = Неопределено;
			ТекстИсключенияПлатформы = "";
			Если ЭтоОбычныйШагОбернутыйВУсловие Тогда
				СтрОшибка = "";
			Иначе	
				СтрОшибка = СформироватьОписаниеОшибки(ОписаниеОшибкиСтр, АдресСнипета, ИмяПроцедуры, ИнфоОбОшибке, ТекстИсключенияПлатформы);
				ЗаписатьВЖРДанныеОНастройкахVanessaAutomation();
				Объект.АдресДанныеОбОшибке = Неопределено;
			КонецЕсли;	
			
			Если НЕ ЭтоОбычныйШагОбернутыйВУсловие Тогда
				СообщитьПользователю(СтрОшибка);
			КонецЕсли;	 
			
			Если НЕ БылОбновленКешФормы Тогда
				ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(Неопределено, ИДСтрокиСценария, Истина);
			КонецЕсли;	 
			
			Если НЕ ШагУпалВСекцииПопыткаИсключение И НЕ ЭтоОбычныйШагОбернутыйВУсловие Тогда
				ЗаписатьЛогВЖРОшибка("VanessaAutomation.ОшибкаВыполненияШага", СтрОшибка);
			КонецЕсли;	 
			
			СтрокаШага = ПолучитьСтрокуШагаИзДанныхФормы(ТекШаг.СтрокаШага);
			
			ЭтоПример          = Ложь;
			ЭтоШагКонтекста    = Ложь;
			СтрокаРодителяШага = НайтиСтрокуСценарияЧерезРодителя(СтрокаШага, ЭтоПример, ЭтоШагКонтекста);
			
			Если ЭтоШагКонтекста И НЕ ШагУпалВСекцииПопыткаИсключение И НЕ ЭтоОбычныйШагОбернутыйВУсловие Тогда
				ВозниклаОшибкаВШагеКонтекста = Истина;
			КонецЕсли;	 
			
			СтрокаСценария.ТекстОшибки = СтрОшибка;
			СтрокаШага.ТекстОшибки     = СтрОшибка;
			ТекШаг.Вставить("ОписаниеОшибки", СтрОшибка);
			Если СтрокаСценария.ПроизвольныеЗначения = Неопределено Тогда
				СтрокаСценария.ПроизвольныеЗначения = Новый Структура;
			КонецЕсли;	 
			Если СтрокаШага.ПроизвольныеЗначения = Неопределено Тогда
				СтрокаШага.ПроизвольныеЗначения = Новый Структура;
			КонецЕсли;	 
			
			СтрокаСценария.ПроизвольныеЗначения.Вставить("ТекстОшибкиКратко", ОписаниеОшибкиКратко);
			СтрокаШага.ПроизвольныеЗначения.Вставить("ТекстОшибкиКратко", ОписаниеОшибкиКратко);
			
			ОшибкаAssert = ОшибкаAssert ИЛИ Найти(НРег(ОписаниеОшибкиКратко), "ожидал") > 0;
			
			СтрокаСценария.ПроизвольныеЗначения.Вставить("ОшибкаAssert", ОшибкаAssert);
			СтрокаШага.ПроизвольныеЗначения.Вставить("ОшибкаAssert", ОшибкаAssert);

			Если ОшибкаAssert Тогда
				ДобавитьДанныеПоАссертамВДерево(СтрокаСценария, СтрокаШага);
			КонецЕсли;	
			
			Для Каждого ТекЗначение Из ГлобальныеЗначенияШагов Цикл
				СтрокаШага.ПроизвольныеЗначения.Вставить(ТекЗначение.Ключ, ТекЗначение.Значение);
			КонецЦикла;	
			
			Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл И НЕ ШагУпалВСекцииПопыткаИсключение И НЕ ЭтоОбычныйШагОбернутыйВУсловие Тогда
				ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(ПодставитьПараметрыВСтроку(
					Локализовать("Шаг (%1) не выполнен. Строка дерева №%2"),
					ТекШаг.Имя,
					Формат(ТекШаг.ИдСтроки, "ЧГ=; ЧН=0")
				));
				
				ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(ПодставитьПараметрыВСтроку(
					Локализовать("Failed: %1"),
					СтрОшибка + Символы.ПС
				));
				
				Статистика_ЗафиксироватьОшибка();
				
			КонецЕсли;	 
			
			Если Объект.ИспользоватьРедакторVanessaEditor И НЕ ШагУпалВСекцииПопыткаИсключение И НЕ ЭтоОбычныйШагОбернутыйВУсловие Тогда
				ШагиСОшибкамиVanessaEditor.Добавить(ТекШаг.НомерСтрокиВФиче);
				МодульРедакторТекста().УстановитьУпавшийШагVanessaEditor(ТекШаг, СтрОшибка, ОписаниеОшибкиКраткоVanessaEditor, СтрокаШага);
			КонецЕсли;	 
			
			Если НЕ ШагУпалВСекцииПопыткаИсключение И НЕ ЭтоОбычныйШагОбернутыйВУсловие Тогда
				ОстановитьЗаписьВидеоОдногоШага();
			КонецЕсли;	 
			
			ДанныеДляФормированияJsonОбОшибке = ДанныеДляФормированияJsonОбОшибке(СтрОшибка, ИнфоОбОшибке, ОписаниеОшибкиШага, ИДСтрокиШага, ТекстИсключенияПлатформы, ОписаниеОшибкиКратко, ПодробноеПредставлениеОшибки);
			РезультатПрохожденияТестовСценария.Вставить("ДанныеДляФормированияJsonОбОшибке", ДанныеДляФормированияJsonОбОшибке);
			
			Если Объект.ПоказыватьНомерСтрокиДереваПриВозникновенииОшибки И НЕ ШагУпалВСекцииПопыткаИсключение И НЕ ЭтоОбычныйШагОбернутыйВУсловие Тогда
				ПоказатьКолонкуСНомеромСтрокиДерева();
			КонецЕсли;	 

		КонецЕсли;	 
		
		Если ШагУпалВСекцииПопыткаИсключение ИЛИ ЭтоОбычныйШагОбернутыйВУсловие Тогда
			ШагВыполнен = Истина;
		КонецЕсли;
		
		Если ЭтоОбычныйШагОбернутыйВУсловие Тогда
			УстановитьРезультатУсловия(Ложь);
		КонецЕсли;	 
		
	КонецПопытки;
	
	Если ШагВыполнен И ТекШаг.Свойство("НадоСнятьСкриншотШагаПослеВыполнения") И ТекШаг.НадоСнятьСкриншотШагаПослеВыполнения
		И НЕ ОстановитьВыполнениеШагов Тогда
		// снятие скриншота шага, если указан тег @screenshot
		ДопПараметрыСкриншота = Новый Структура;
		ДопПараметрыСкриншота.Вставить("ИмяПроцедуры","ВыполнитьШагОкончаниеОбработчик");
		ДопПараметрыСкриншота.Вставить("ЭтоСкриншотПередВыполнениемШага", Ложь);
		ДопПараметрыСкриншота.Вставить("ТегScreenShot", Истина);
		
		ПараметрыВызоваПроцедурОкончание = Новый Структура;
		ПараметрыВызоваПроцедурОкончание.Вставить("РезультатПрохожденияТестовСценария",РезультатПрохожденияТестовСценария);
		ПараметрыВызоваПроцедурОкончание.Вставить("РезультатПрохожденияШага",РезультатПрохожденияШага);
		ПараметрыВызоваПроцедурОкончание.Вставить("ШагВыполнен",ШагВыполнен);
		ПараметрыВызоваПроцедурОкончание.Вставить("ШагНеРеализован",ШагНеРеализован);
		ПараметрыВызоваПроцедурОкончание.Вставить("СтрокаШага",СтрокаШага);
		ПараметрыВызоваПроцедурОкончание.Вставить("БылОбновленКешФормы",БылОбновленКешФормы);
		ПараметрыВызоваПроцедурОкончание.Вставить("СтрОшибка",СтрОшибка);
		
		СнятьСкриншотШагаЕслиЭтоНеобходимо(ТекШаг, РезультатПрохожденияТестовСценария, ДопПараметрыСкриншота);
		Возврат;
	КонецЕсли;	 
	
	ВыполнитьШагОкончание(РезультатПрохожденияТестовСценария, РезультатПрохожденияШага, ШагВыполнен, ШагНеРеализован, СтрокаШага, БылОбновленКешФормы, СтрОшибка);
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьКШагуЗначенияПеременных(ТекШаг)
	Если ТекШаг.Свойство("ПеременныеДляСохраненияВШаг") Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ ТекШаг.Свойство("ПеременныеДляСохраненияВШаг") Тогда
		ПеременныеДляСохраненияВШаг = Новый Массив;
	КонецЕсли;	 
	
	Для Каждого Элем Из ОбъектКонтекст Цикл
		ПеременныеДляСохраненияВШаг.Добавить(Новый Структура("Имя,Значение,Тип",  Элем.Ключ, Строка(Элем.Значение), Ложь));
	КонецЦикла;	 
	
	Для Каждого Элем Из ОбъектКонтекстСохраняемый Цикл
		ПеременныеДляСохраненияВШаг.Добавить(Новый Структура("Имя,Значение,Тип",  Элем.Ключ, Строка(Элем.Значение), Истина));
	КонецЦикла;	 
	
	Если ПеременныеДляСохраненияВШаг.Количество() > 0 Тогда
		Если НЕ ТекШаг.Свойство("ПеременныеДляСохраненияВШаг") Тогда
			ТекШаг.Вставить("ПеременныеДляСохраненияВШаг", ПеременныеДляСохраненияВШаг);
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Функция ДанныеДляФормированияJsonОбОшибке(СтрОшибка, ИнфоОбОшибке, ОписаниеОшибкиШага, ИДСтрокиШага, ТекстИсключенияПлатформы, ОписаниеОшибкиКратко, ПодробноеПредставлениеОшибки)
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", СтрОшибка);
	Если ТипЗнч(ИнфоОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		Результат.Вставить("ИнфоОбОшибке", ПодробноеПредставлениеОшибки(ИнфоОбОшибке));
	Иначе	
		Результат.Вставить("ИнфоОбОшибке", ИнфоОбОшибке);
	КонецЕсли;	 
	Результат.Вставить("ОписаниеОшибкиШага", ОписаниеОшибкиШага);
	Результат.Вставить("ТекстИсключенияПлатформы", ТекстИсключенияПлатформы);
	Результат.Вставить("ОписаниеОшибкиКратко", УбратьТехническиеДанныеИзСтроки(ОписаниеОшибкиКратко));
	Результат.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки);
	Результат.Вставить("ИДСтрокиУпавшегоШага", ИДСтрокиШага);

	Если ТекИД_СценарияВМассиве <> Неопределено И ТекИД_СценарияВМассиве >= 0 Тогда
		ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		Если РезультатПрохожденияТестовСценария <> Неопределено Тогда
			Результат.Вставить("ДатаНачала", РезультатПрохожденияТестовСценария.ДатаНачала);
			Результат.Вставить("ДатаОкончания", ТекущаяДата());
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Результат; 
КонецФункции

&НаКлиенте
Процедура ВыполнитьШагОкончаниеОбработчик() Экспорт
	ВыполнитьШагОкончание(ПараметрыВызоваПроцедурОкончание.РезультатПрохожденияТестовСценария,
	ПараметрыВызоваПроцедурОкончание.РезультатПрохожденияШага,
	ПараметрыВызоваПроцедурОкончание.ШагВыполнен,
	ПараметрыВызоваПроцедурОкончание.ШагНеРеализован,
	ПараметрыВызоваПроцедурОкончание.СтрокаШага,
	ПараметрыВызоваПроцедурОкончание.БылОбновленКешФормы,
	ПараметрыВызоваПроцедурОкончание.СтрОшибка);
КонецПроцедуры 

&НаКлиенте
Функция ОпределитьИдШагаДляРаскраскиТекущим(Шаги, ТекШаг, ИдСледующегоШага, ДанныеСценария)
	ИдШагаДляРаскраскиТекущим = Неопределено;
	НадоОпределитьИдШагаДляРаскраскиТекущим = Истина;
	Если ТекШаг.Свойство("ДопТип") И (ТекШаг.ДопТип = "Цикл" ИЛИ ТекШаг.ДопТип = "Условие" ИЛИ ТекШаг.ДопТип = "УсловиеИначеЕсли") Тогда
		Если НЕ Объект.РезультатУсловия Тогда
			НадоОпределитьИдШагаДляРаскраскиТекущим = Ложь;
		КонецЕсли;	 
	КонецЕсли;	 
	Если НадоОпределитьИдШагаДляРаскраскиТекущим И ИдШагаДляРаскраскиТекущим = Неопределено И ТекИД_ШагаВМассиве < Шаги.Количество()-1 Тогда
		ИдШагаДляРаскраскиТекущим = ТекИД_ШагаВМассиве + 1;
	КонецЕсли;	 
	
	Если ТипЗнч(ИдСледующегоШага) = Тип("Структура") Тогда
		ИдШага = ДанныеСценария.ИдШагаПоИдСтроки[ИдСледующегоШага.Ид];
		Если ИдШага <> Неопределено Тогда
			ИдШагаДляРаскраскиТекущим = ИдШага;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат ИдШагаДляРаскраскиТекущим;
КонецФункции	 

// Проверяет, что ошибка вызвана исключением платформы на стороне клиента тестирования
//
// Параметры:
//  ОписаниеОшибки - Строка - см. СформироватьОписаниеОшибки
// 
// Возвращаемое значение:
//  Булево - Истина, если в тестируемом приложении возникла ошибка времени выполнения
//
&НаКлиенте
Функция ЭтоОшибкаНаСторонеКлиентаТестирования(ОписаниеОшибки)
	
	СтрокаДеталиОшибки = Локализовать("ДеталиОшибки:");
	Поз = Найти(ОписаниеОшибки, СтрокаДеталиОшибки);
	
	Возврат Поз > 0;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьШагОкончание(РезультатПрохожденияТестовСценария, РезультатПрохожденияШага, ШагВыполнен, ШагНеРеализован, СтрокаШага, БылОбновленКешФормы, СтрОшибка)
	
	ДанныеСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве];
	Шаги = ДанныеСценария.Шаги;
	ТекШаг = Шаги[ТекИД_ШагаВМассиве];
	ИдСледующегоШага = ПолучитьИдСледующегоШага(ТекШаг);
	ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	ИДСтрокиШага = ТекШаг.СтрокаШага;
	РезультатПрохожденияТестовШагов = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;	
	РезультатПрохожденияШага.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
	
	Если ТекШаг.Свойство("ПеременныеДляСохраненияВШаг") Тогда
		ОбработатьПеременныеДляСохраненияВШаг(РезультатПрохожденияШага, ТекШаг);
	КонецЕсли;	 
	
	РегистрацияОшибки = (ТекШаг.Свойство("РегистрацияОшибки") И ТекШаг.РегистрацияОшибки);
	
	Если ШагВыполнен И НЕ РегистрацияОшибки Тогда
		Если Не ОстановитьВыполнениеШагов Тогда
			Если ТекШаг.Свойство("ШагУпалВСекцииПопыткаИсключение") И ТекШаг.ШагУпалВСекцииПопыткаИсключение Тогда
				СтрокаШага.Статус = "Broken";
				СтрокаШага.ТипКартинки = 5;
				РезультатПрохожденияШага.Вставить("ШагУпалВСекцииПопыткаИсключение", Истина);
			Иначе	
				СтрокаШага.Статус = "Success";
				СтрокаШага.ТипКартинки = 4;
			КонецЕсли;	
			РезультатПрохожденияШага.Вставить("Статус", СтрокаШага.Статус);
		КонецЕсли;	 
		
		Если ШагВыполнен И Объект.ИспользоватьРедакторVanessaEditor И НЕ ОстановитьВыполнениеШагов Тогда
			ИдШагаДляРаскраскиТекущим = ОпределитьИдШагаДляРаскраскиТекущим(Шаги, ТекШаг, ИдСледующегоШага, ДанныеСценария);
			
			Если ИдШагаДляРаскраскиТекущим <> Неопределено И ИдШагаДляРаскраскиТекущим <= Шаги.Количество()-1 Тогда
				МодульРедакторТекста().УстановитьТекущийШагVanessaEditor(Шаги[ИдШагаДляРаскраскиТекущим]);
			ИначеЕсли ИдШагаДляРаскраскиТекущим = Неопределено Тогда
				ПолучитьVanessaEditor().setCurrentProgress(0);
			КонецЕсли;	 
			
			Если ТекШаг.Свойство("ШагУпалВСекцииПопыткаИсключение") И ТекШаг.ШагУпалВСекцииПопыткаИсключение Тогда
				МодульРедакторТекста().УстановитьШагУпалВСекцииПопыткаИсключение(ТекШаг);
			Иначе	
				МодульРедакторТекста().УстановитьВыполненныйШагVanessaEditor(ТекШаг);
			КонецЕсли;	
			
		КонецЕсли;	 
		
		ПерейтиКВыполнениюСледующегоШага(,, ИдСледующегоШага);
	Иначе	
		
		СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
		Если НЕ БылОбновленКешФормы Тогда
			ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(СтрокаСценария, ИДСтрокиСценария);
		КонецЕсли;	 
		
		СтрокаШага = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);
		
		Если Объект.ОбновлятьДеревоПриНачалеВыполненияСценария Тогда
			АктивизироватьСтрокуДереваТекущегоШага();
		КонецЕсли;	 
		
		Если ШагНеРеализован Тогда
			СтрокаШага.Статус = "Pending";
			СтрокаШага.ТипКартинки = 6;
			Если Объект.ПриравниватьPendingКFailed Тогда
				СтрокаШага.Статус = "Failed";
				СтрокаСценария.Статус = "Failed";
				СтатусЗапускаСценариев = Ложь;
			КонецЕсли;
			ПроверитьФлагОстановкаПриВозникновенииОшибки();
		Иначе
			СтатусЗапускаСценариев = Ложь;		
			Если Объект.РазличатьBrokenИFailedПоКлючевомуСловуТогда Тогда

				Если МодульПарсерФич().ШагНачинаетсяСКлючевогоСлова(ДанныеСценария.ЯзыкФичи, ТекШаг.Имя, "then") Тогда
					СтрокаШага.Статус = "Failed";
				ИначеЕсли ЭтоОшибкаНаСторонеКлиентаТестирования(СтрОшибка) Тогда				
					СтрокаШага.Статус = "Failed";
				Иначе
					СтрокаШага.Статус = "Broken";
				КонецЕсли;
			Иначе
				СтрокаШага.Статус = "Failed";
			КонецЕсли;
			
			СтрокаШага.ТипКартинки = 5;
			ПроверитьФлагОстановкаПриВозникновенииОшибки();
			Если ТипЗнч(СтрокаСценария.ПроизвольныеЗначения) <> Тип("Структура") Тогда
				СтрокаСценария.ПроизвольныеЗначения = Новый Структура;
			КонецЕсли;	 
			СтрокаСценария.ПроизвольныеЗначения.Вставить("ИдСтрокиШагаСОшибкой", СтрокаШага.ИдСтроки);
			
			ПроставитьСтрокамДереваСтатусВВерхПоИерархии(СтрокаШага);
		КонецЕсли; 
		
		Если НЕ РегистрацияОшибки Тогда
			РезультатПрохожденияШага.Вставить("ОписаниеОшибки", СтрОшибка);
		КонецЕсли;	 
		РезультатПрохожденияШага.Вставить("Статус", СтрокаШага.Статус);
		РезультатПрохожденияШага.Вставить("НомерСтрокиВФиче", СтрокаШага.НомерСтрокиВФиче);
		
		Если НЕ РегистрацияОшибки Тогда
			РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", СтрОшибка);
			РезультатПрохожденияТестовСценария.Вставить("ВозниклаОшибкаВШагеНеВСекцииИсключение", Истина);
		КонецЕсли;	 
		РезультатПрохожденияТестовСценария.Вставить("Статус", СтрокаШага.Статус);
		РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче", СтрокаСценария.НомерСтрокиВФиче);
		
		СтрокаСценария.Статус = СтрокаШага.Статус;
		
		Если НЕ РегистрацияОшибки Тогда
			БылаОшибка     = Ложь;
			ОписаниеОшибки = "";
			ДействияПослеЗавершенияСценария(СтрокаСценария, БылаОшибка, ОписаниеОшибки);
			
			Если БылаОшибка Тогда
				СтатусЗапускаСценариев = Ложь;		
				СтрокаСценария.Статус  = "Failed";
				РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", ОписаниеОшибки);
				РезультатПрохожденияТестовСценария.Вставить("Статус", СтрокаСценария.Статус);
				
				Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
					ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль("Ошибка в процедуре ПередОкончаниемСценария().");
					
					ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(ПодставитьПараметрыВСтроку(
						Локализовать("Описание ошибки: %1"),
						ОписаниеОшибки
					));
					
					Статистика_ЗафиксироватьОшибка();
					
				КонецЕсли;	 
				
				ПроверитьФлагОстановкаПриВозникновенииОшибки();
			КонецЕсли;
		КонецЕсли;	 

		Если НЕ РегистрацияОшибки Тогда
			ДобавитьШагиВРезультатПрохожденияТестовШаговКоторыеНеВыполнялись(Шаги, ТекИД_ШагаВМассиве, РезультатПрохожденияТестовШагов);
			ПрекратитьВыполнениеШаговТакКакЗакончилсяСценарий = Истина;
			
			ОстановитьЗаписьВидеоОдногоШага();

			РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
			РезультатПрохожденияТестовСценария.Вставить("ДатаОкончания", ТекущаяДата());
		КонецЕсли;	 
		
		ОписаниеОшибкиВнутриСценария = "";
		Если РегистрацияОшибки Тогда
			Если ТекШаг.Свойство("ОписаниеОшибкиВнутриСценария") Тогда
				ОписаниеОшибкиВнутриСценария = ТекШаг.ОписаниеОшибкиВнутриСценария;
			КонецЕсли;	 
		КонецЕсли;	 
		
		ЗапомнитьДанныеДляСборДанныхДляОтчетов(РезультатПрохожденияТестовСценария, СтрокаСценария, РезультатПрохожденияШага, ОписаниеОшибкиВнутриСценария, ТекШаг);
		
		Если РегистрацияОшибки И Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
			СделатьСкриншотВозникновенияОшибкиИПерейтиКВыполнениюСледующегоШага(
				СтрокаШага, СтрокаСценария, РезультатПрохожденияТестовСценария, ИдСледующегоШага,
				ОписаниеОшибкиВнутриСценария, ТекШаг, РезультатПрохожденияШага);
		ИначеЕсли РегистрацияОшибки Тогда
			ПерейтиКВыполнениюСледующегоШага(, , ИдСледующегоШага);
		ИначеЕсли СтатусСценарияСоответствуетВыполненСОшибкой(СтрокаСценария.Статус) И Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
			СделатьСкриншотВозникновенияОшибкиИПерейтиКВыполнениюСледующегоСценария(СтрокаШага, СтрокаСценария, РезультатПрохожденияТестовСценария);
		Иначе	
			ПерейтиКВыполнениюСледующегоСценария();
		КонецЕсли;	 
		
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ПерейтиКВыполнениюСледующегоСценарияПрикреплениеФайлов()
	Для Каждого ДанныеФайла Из ИменаФайловДляПрикрепления Цикл
		ДобавитьФайлКСценарию(ДанныеФайла, Ложь);
	КонецЦикла;	 
	
	ИменаФайловДляПрикрепления = Новый Массив;
	ПерейтиКВыполнениюСледующегоСценария();
КонецПроцедуры 

&НаКлиенте
Функция ОшибкаАссертаOSL(ОписаниеОшибкиКратко)
	
	СтрДлинаОшибки = СтрДлина(ОписаниеОшибкиКратко);
	СтрПозНачалоExpected = Найти(ОписаниеОшибкиКратко, "[Expected]");
	СтрПозКонецExpected = СтрПозНачалоExpected + СтрДлина("[Expected]") + 1;
	СтрПозНачалоActual = Найти(ОписаниеОшибкиКратко, "[Actual]");
	СтрПозКонецActual = СтрПозНачалоActual + СтрДлина("[Actual]") + 1;
	СтрПозНачалоMessage = Найти(ОписаниеОшибкиКратко, "[Message]");

	Результат = СтруктураОшибкаАссерта(ОписаниеОшибкиКратко);
	Результат.ОписаниеОшибки = ОписаниеОшибкиКратко;
	
	Если СтрПозНачалоExpected > 0 И СтрПозНачалоActual > СтрПозКонецExpected
		И (СтрПозНачалоMessage = 0 Или СтрПозНачалоMessage > СтрПозКонецActual) Тогда

		Результат.ЗначениеExpected =
			Сред(
				ОписаниеОшибкиКратко,
				СтрПозКонецExpected,
				СтрПозНачалоActual - СтрПозКонецExpected - 1
			);
		Результат.ЗначениеActual =
			Сред(
				ОписаниеОшибкиКратко,
				СтрПозКонецActual,
				?(СтрПозНачалоMessage > 0,
					СтрПозНачалоMessage - СтрПозКонецActual - 1,
					СтрДлинаОшибки
				)
			);
			
		Результат.Вставить("ОшибкаAssert", Истина);
	Иначе
		Результат.Вставить("ОшибкаAssert", Ложь);
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ВыполнитьШаг()
	Если ПрекратитьВыполнениеШаговТакКакЗакончилсяСценарий Тогда
		Возврат;
	КонецЕсли;      
	
	Если ОстановитьВыполнениеШагов Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыполнениеСценариевБудетОстановлено() Тогда
		Возврат;
	КонецЕсли;	
	
	ОшибкиАссертов = Неопределено;
	
	ТекИД_ВыполненногоШагаВМассиве = ТекИД_ШагаВМассиве;
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	ТекШаг = Шаги[ТекИД_ШагаВМассиве];
	
	Если Объект.ВыводитьВЛогВыполнениеШагов Тогда
		ТекстСообщения = Локализовать("Шаг");
		Если ТекШаг.Свойство("МассивТеговШага") И ТипЗнч(ТекШаг.МассивТеговШага) = Тип("Массив") Тогда
			Для Каждого ЗначениеТега Из ТекШаг.МассивТеговШага Цикл
				ЗаписатьЛогВТекстИнформация("", "@" + ЗначениеТега);
			КонецЦикла;	 
		КонецЕсли;	 
		ЗаписатьЛогВТекстИнформация(_СтрШаблон("%1 (%2). %3", ТекущаяДата(), XMLСтрока(ТекШаг.НомерСтрокиВФиче), ТекстСообщения), " " + ТекШаг.Имя);
		Если ТекШаг.Свойство("ШагСПараметрамиВТаблице") И ТекШаг.ШагСПараметрамиВТаблице И ТекШаг.Свойство("ПараметрыТаблицы") Тогда
			Если ТекШаг.Свойство("ДопТип") И ТекШаг.ДопТип = "Цикл" Тогда
				Если НЕ ТекШаг.Свойство("ЦиклВыводилСвоюТаблицу") Тогда
					ВывестиВЛогТаблицу(ТекШаг.ПараметрыТаблицы); 
					ТекШаг.Вставить("ЦиклВыводилСвоюТаблицу", Истина);
				КонецЕсли;	
			Иначе	
				ВывестиВЛогТаблицу(ТекШаг.ПараметрыТаблицы); 
			КонецЕсли;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	ИДСтрокиШага                       = ТекШаг.СтрокаШага;
	ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
	
	СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	СтрокаШага     = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);
	
	ДанныеВкладкиРедактора = ДанныеВкладкиРедактора();
	
	Если УстановленыБрейкПоинты И
		(
		НЕ Объект.РежимВыполненияОдногоШага
		ИЛИ (Объект.РежимВыполненияОдногоШага И Объект.ИспользоватьРедакторVanessaEditor И Объект.ПоказыватьСтрокиПодсценариевVanessaEditor)
		// Могли по F11 вызвать подсценарий и в нём же поставить точку останова.
		)
		Тогда
		
		ЭтоШагПодсценария = ТекШаг.Свойство("ЭтоШагПодсценария") И ТекШаг.ЭтоШагПодсценария;
		Если ЭтоШагПодсценария Тогда
			СтрокаШагаПодсценарияФичи = ТекШаг.СтрокаШагаПодсценарияФичи;
		Иначе	
			СтрокаШагаПодсценарияФичи = Неопределено;
		КонецЕсли;	
		Если (НЕ Объект.ИспользоватьРедакторVanessaEditor И СтрокаШага.Брейкпоинт)
			
			ИЛИ Объект.ИспользоватьРедакторVanessaEditor И
			(
				( (НЕ ЭтоШагПодсценария) И Брейкпоинты.Найти(ТекШаг.НомерСтрокиВФиче) <> Неопределено)
				ИЛИ (ЭтоШагПодсценария И Брейкпоинты.Найти(СтрокаШагаПодсценарияФичи) <> Неопределено)
				ИЛИ (ЕстьБрейкпоинтыVanessaEditorВиджеты И (ЭтоШагПодсценария ИЛИ НЕ Объект.РежимВыполненияОдногоШага) И ДанныеВкладкиРедактора.БрейкпоинтыVanessaEditorВиджеты.Найти(ТекШаг.ИдСтроки) <> Неопределено)
			)
			Тогда
			
			НадоОстановитьсяНаТочкеОстанова = Истина;
			Если Объект.ИспользоватьРедакторVanessaEditor
				И ТекущаяПозицияVanessaEditor <> Неопределено
				И ПустаяСтрока(ТекущаяПозицияVanessaEditor.codeWidget)
				И (ТекШаг.НомерСтрокиВФиче = ТекущаяПозицияVanessaEditor.lineNumber ИЛИ СтрокаШагаПодсценарияФичи = ТекущаяПозицияVanessaEditor.lineNumber)
				И (Объект.РежимВыполненияДанногоСценарияСТекущегоШага ИЛИ Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением) Тогда
					НадоОстановитьсяНаТочкеОстанова = Ложь;
			КонецЕсли;	 
			
			Если НадоОстановитьсяНаТочкеОстанова Тогда
				СообщитьПользователю(Локализовать("Остановка на брейкпоинте."));
				АктивизироватьСтрокуДереваТекущегоШага();
				ПрекратитьВыполнениеВсехСценариев = Истина;
				ПерейтиКВыполнениюСледующегоСценария();
				Если Объект.ИспользоватьРедакторVanessaEditor Тогда
					Если ТекШаг.Свойство("ЭтоШагПодсценария") И ТекШаг.ЭтоШагПодсценария Тогда
						АктивизироватьСтрокуРедактораПоИдСтрокиИНомеруСтрокиФичи(ТекШаг.ИДСтроки, ТекШаг.СтрокаШагаПодсценарияФичи);
					Иначе	
						АктивизироватьСтрокуРедактораПоИдСтрокиИНомеруСтрокиФичи(СтрокаШага.ИДСтроки, СтрокаШага.НомерСтрокиВФиче);
					КонецЕсли;	 
					
				КонецЕсли;	 
				ВыполнитьЗвуковоеОповещениеПриОкончанииВыполненияСценария(Истина);
				Возврат;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		ДанныеСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве];
		Если ТекШаг.Свойство("ЭтоШагПодсценария") И ТекШаг.ЭтоШагПодсценария Тогда
			Если НЕ ДанныеСценария.ЭтоСтруктураСценария Тогда
				Если ДанныеСценария.ТекущийНомерСтрокиПодсценария = Неопределено
					ИЛИ ДанныеСценария.ТекущийНомерСтрокиПодсценария <> ТекШаг.СтрокаШагаПодсценарияФичи Тогда
					
					Если ДанныеСценария.ТекущийНомерСтрокиПодсценария <> Неопределено Тогда
						МодульРедакторТекста().ОбновитьСтатусВыполненногоПодсценарияФичи(ДанныеСценария.ТекущийНомерСтрокиПодсценария);
					КонецЕсли;	 
					
					Если НЕ Объект.ПоказыватьСтрокиПодсценариевVanessaEditor Тогда
						ПолучитьVanessaEditor().setStackStatus(Истина, ТекШаг.СтрокаШагаПодсценарияФичи);
					КонецЕсли;	 
				КонецЕсли;	 
				ДанныеСценария.ТекущийНомерСтрокиПодсценария = ТекШаг.СтрокаШагаПодсценарияФичи;
			КонецЕсли;	
		Иначе	
			Если НЕ ДанныеСценария.ЭтоСтруктураСценария Тогда
				Если ДанныеСценария.ТекущийНомерСтрокиПодсценария <> Неопределено Тогда
					Если НЕ Объект.ПоказыватьСтрокиПодсценариевVanessaEditor Тогда
						ПолучитьVanessaEditor().setStackStatus(Ложь, ДанныеСценария.ТекущийНомерСтрокиПодсценария);
					КонецЕсли;	 
					МодульРедакторТекста().ОбновитьСтатусВыполненногоПодсценарияФичи(ДанныеСценария.ТекущийНомерСтрокиПодсценария);
					ДанныеСценария.ТекущийНомерСтрокиПодсценария = Неопределено;
				КонецЕсли;	 
			КонецЕсли;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче", СтрокаСценария.НомерСтрокиВФиче);
	
	Если ПрекратитьВыполнениеДанногоСценария Тогда
		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить("ДатаОкончания", ТекущаяДата());
		
		ПрекратитьВыполнениеДанногоСценария = Ложь;
		ПерейтиКВыполнениюСледующегоСценария();
		Возврат;
	КонецЕсли;	 

	РезультатПрохожденияШага = Новый Структура;
	РезультатПрохожденияШага.Вставить("Имя", СтрокаШага.Имя);
	РезультатПрохожденияШага.Вставить("ВремяНачала", ТекущаяУниверсальнаяДатаВМиллисекундах());
	РезультатПрохожденияШага.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
	РезультатПрохожденияШага.Вставить("НомерСтрокиВФиче", СтрокаШага.НомерСтрокиВФиче);
	РезультатПрохожденияШага.Вставить("ИДСтроки", ИДСтрокиШага);
	Если ТекШаг.Свойство("ЭтоШагКонтекста") И ТекШаг.ЭтоШагКонтекста Тогда
		РезультатПрохожденияШага.Вставить("ЭтоШагКонтекста", Истина);
	Иначе	
		РезультатПрохожденияШага.Вставить("ЭтоШагКонтекста", Ложь);
	КонецЕсли;	
	РезультатПрохожденияШага.Вставить("Статус", "Broken");
	
	РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);
	
	АдресСнипета = ТекШаг.АдресСнипета;
	Если СокрЛП(АдресСнипета) = "" Тогда
		ОстановитьЗаписьВидеоОдногоШага();
		АктивизироватьСтрокуДереваТекущегоШага();
		
		СтрокаШага.Статус = "Pending";
		СтрокаШага.ТипКартинки = 6;
		СтрокаСценария.Статус         = СтрокаШага.Статус;
		ТекстСообщения = Локализовать("Не найдена процедура или функция для выполнения шага: %1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ТекШаг.Имя);
		ОписаниеОшибки = ТекстСообщения;
		
		Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
			ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(ПодставитьПараметрыВСтроку(
				Локализовать("Pending: %1"),
				ОписаниеОшибки
			));
			
			Статистика_ЗафиксироватьПропуск();
			
		КонецЕсли;	 
		
		Если Объект.ПриравниватьPendingКFailed Тогда
			СтатусЗапускаСценариев = Ложь;
			
			СтрокаШага.Статус = "Failed";
			СтрокаСценария.Статус = "Failed";
			ТекстСообщения = Локализовать("Шаг сценария не реализован.");
			ДанныеДляФормированияJsonОбОшибке = ДанныеДляФормированияJsonОбОшибке(ТекстСообщения, Неопределено, Неопределено, ТекШаг.ИДСтроки, Неопределено, Неопределено, Неопределено);
			РезультатПрохожденияТестовСценария.Вставить("ДанныеДляФормированияJsonОбОшибке", ДанныеДляФормированияJsonОбОшибке);
		КонецЕсли;	 
		
		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить("ДатаОкончания", ТекущаяДата());
		РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		РезультатПрохожденияТестовСценария.Вставить("Статус", СтрокаШага.Статус);
		РезультатПрохожденияШага.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		РезультатПрохожденияШага.Вставить("Статус", СтрокаШага.Статус);
		
		Если Объект.ИспользоватьРедакторVanessaEditor Тогда
			ВыполненныеШагиVanessaEditor = Новый Массив;
			ВыполненныеШагиVanessaEditor.Добавить(ТекШаг.НомерСтрокиВФиче);
			ПолучитьVanessaEditor().setRuntimeProgress("pending", ЗаписатьОбъектJSON(ВыполненныеШагиVanessaEditor));
		КонецЕсли;	 
		
		СообщитьПользователю(ОписаниеОшибки);
		
		БылаОшибка     = Ложь;
		ОписаниеОшибки = "";
		ДействияПослеЗавершенияСценария(СтрокаСценария, БылаОшибка, ОписаниеОшибки);
		Если БылаОшибка Тогда
			СтатусЗапускаСценариев = Ложь;		
			СтрокаСценария.Статус  = "Failed";
			РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", ОписаниеОшибки);
			РезультатПрохожденияТестовСценария.Вставить("Статус", СтрокаСценария.Статус);
			
			Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
				ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(ПодставитьПараметрыВСтроку(
					Локализовать("Failed: %1"),
					ОписаниеОшибки
				));
			КонецЕсли;	 
			
		КонецЕсли;
		
		ПроверитьФлагОстановкаПриВозникновенииОшибки();
		
		ПрекратитьВыполнениеШаговТакКакЗакончилсяСценарий = Истина;
		
		Если Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
			СделатьСкриншотВозникновенияОшибкиИПерейтиКВыполнениюСледующегоСценария(СтрокаШага, СтрокаСценария, РезультатПрохожденияТестовСценария);
		Иначе	
			// выполняем следующий сценарий
			ПерейтиКВыполнениюСледующегоСценария();
		КонецЕсли;	 
		
		Возврат;
	КонецЕсли; 	
	
	// ТаблицаКонтекстовОбработок
	ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
	Если ИД = Неопределено Тогда
		ПодключитьКонтекстОбработкиКлиент(АдресСнипета);	
		ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
	КонецЕсли;	 
	
	ОбработкаТеста = Неопределено;
	Если ИД <> Неопределено Тогда
		ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
	КонецЕсли;	 
	
	Если ОбработкаТеста = Неопределено Тогда
		Если ЭтоВнутреннийАдресФормы(АдресСнипета) Тогда
			ПодключитьКонтекстОбработкиКлиент(АдресСнипета);
			ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
			Если ОбработкаТеста = Неопределено Тогда
				ВызватьИсключение ПодставитьПараметрыВСтроку(
					Локализовать("Не получилось подключить обработку <%1>"),
					АдресСнипета
				);
			КонецЕсли;	 
			Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
				ЗаписатьЛогВЖРИнформация("ВыполнитьШагПродолжение", "ВыполнитьШаг.Обработка не подключена.");
			КонецЕсли;	 
			ВыполнитьШагПродолжение(РезультатПрохожденияШага, ОбработкаТеста);
			Возврат;
		КонецЕсли;	 
		
		МассивФайлов = Новый Массив;
		Если НадоПодключитьEPFСвязаннуюСФичей(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве]) Тогда
			МассивФайлов.Добавить(ПолучитьПутьК_EPF_Фичи(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ПолныйПутьКФиче));
			МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].EPFПодключена = Истина;
		КонецЕсли;	 
		
		// основная обработка должна быть последней в массиве
		МассивФайлов.Добавить(АдресСнипета);
		ПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеСценария(МассивФайлов, РезультатПрохожденияШага);
		Возврат;
	КонецЕсли;	 
	
	Если НадоПодключитьEPFСвязаннуюСФичей(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве]) Тогда
		
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ПолучитьПутьК_EPF_Фичи(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ПолныйПутьКФиче));
		МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].EPFПодключена = Истина;
		
		// основная обработка должна быть последней в массиве
		МассивФайлов.Добавить(АдресСнипета);
		ПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеСценария(МассивФайлов, РезультатПрохожденияШага);
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
		ЗаписатьЛогВЖРИнформация("ВыполнитьШагПродолжение", "ВыполнитьШаг");
	КонецЕсли;	 
	
	ВыполнитьШагПродолжение(РезультатПрохожденияШага, ОбработкаТеста);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущемуШагуФлагЧтоОнДолженСчитатьсяУпавшим(ОписаниеОшибки, ДобавлятьДанныеПоАссертам)
	Если ТекИД_ШагаВМассиве = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если (МассивСценариевДляВыполнения.Количество() - 1) < ТекИД_СценарияВМассиве Тогда
		Возврат;
	КонецЕсли;	 

	Если ТекИД_ШагаВМассиве >= 0 Тогда
		Шаги   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		ТекШаг = Шаги[ТекИД_ШагаВМассиве];
		ТекШаг.Вставить("ШагСчитаетсяУпавшим", Истина);
		ТекШаг.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		
		Если ДобавлятьДанныеПоАссертам Тогда
			ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
			СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
			ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(СтрокаСценария, ИДСтрокиСценария, Истина);
			СтрокаШага = ПолучитьСтрокуШагаИзДанныхФормы(ТекШаг.СтрокаШага);
			ДобавитьДанныеПоАссертамВДерево(СтрокаСценария, СтрокаШага);
		КонецЕсли;	 
		
	КонецЕсли;	 
КонецПроцедуры

// работа с видео - начало

&НаКлиенте
Функция ЗагрузитьФайлВМассив(ИмяФайла)
	Массив = Новый Массив;
	
	Если ФичаФайлПереданТекстом Тогда
		Возврат _СтрРазделить(ПереданныйТекстФичаФайла, Символы.ПС); 
	Иначе	
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайла, "UTF-8");
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
			
			Массив.Добавить(Стр);
		КонецЦикла;	
		
		Текст.Закрыть();
	КонецЕсли;	 
	
	
	Возврат Массив;
КонецФункции	

&НаКлиенте
Функция ПолучитьПараметрыЗаписиВидео()
	#Если НЕ ВебКлиент Тогда
	
	ПараметрыВидео = Новый Структура;
	ПараметрыВидео.Вставить("КаталогВыгрузкиИнструкцийВидео", Объект.КаталогВыгрузкиИнструкцийВидео);
	ПараметрыВидео.Вставить("ЗаписьВидеоКомандаНачатьЗаписьВидео", Объект.ЗаписьВидеоКомандаНачатьЗаписьВидео);
	ПараметрыВидео.Вставить("ЗаписьВидеоФайлКурсораМышки", Объект.ЗаписьВидеоФайлКурсораМышки);
	ПараметрыВидео.Вставить("ЗаписьВидеоКаталогДляВременныхФайлов", Объект.ЗаписьВидеоКаталогДляВременныхФайлов);
	Если ЭтоLinux Тогда
	Иначе	
		ПараметрыВидео.Вставить("ЗаписьВидеоКаталогДляВременныхФайлов", СтрЗаменить(Объект.ЗаписьВидеоКаталогДляВременныхФайлов, "/", "\"));
	КонецЕсли;	 
	ПараметрыВидео.Вставить("ЗаписьВидеоФайлВодянойЗнак", Объект.ЗаписьВидеоФайлВодянойЗнак);
	ПараметрыВидео.Вставить("ЗаписьВидеоКомандаFfmpeg", Объект.ЗаписьВидеоКомандаFFmpeg);
	ПараметрыВидео.Вставить("ЗаписьВидеоКомандаConvert", Объект.ЗаписьВидеоКомандаConvert);
	ПараметрыВидео.Вставить("ЗаписьВидеоКаталогМузыки", Объект.ЗаписьВидеоКаталогМузыки);
	ПараметрыВидео.Вставить("ЗаписьВидеоГромкостьМузыки", Объект.ЗаписьВидеоГромкостьМузыки);
	ПараметрыВидео.Вставить("ЗаписьВидеоДелатьНаложениеTTS", Объект.ЗаписьВидеоДелатьНаложениеTTS);
	ПараметрыВидео.Вставить("ЗаписьВидеоТипОзвучкиTTS", Объект.ЗаписьВидеоТипОзвучкиTTS);
	
	ПараметрыВидео.Вставить("ЗаписьВидеоYandexTTSЯзык", Объект.ЗаписьВидеоYandexTTSЯзык);
	ПараметрыВидео.Вставить("ЗаписьВидеоYandexTTSГолос", Объект.ЗаписьВидеоYandexTTSГолос);
	ПараметрыВидео.Вставить("ЗаписьВидеоYandexTTSЭмоция", Объект.ЗаписьВидеоYandexTTSЭмоция);
	ПараметрыВидео.Вставить("ЗаписьВидеоYandexTTSСкорость", Объект.ЗаписьВидеоYandexTTSСкорость);
	ПараметрыВидео.Вставить("ЗаписьВидеоYandexTTSИдентификаторКаталога", Объект.ЗаписьВидеоYandexTTSИдентификаторКаталога);
	ПараметрыВидео.Вставить("ЗаписьВидеоYandexTTSOauthToken", Объект.ЗаписьВидеоYandexTTSOauthToken);
	ПараметрыВидео.Вставить("ЗаписьВидеоYandexTTSВариантЗапроса", Объект.ЗаписьВидеоYandexTTSВариантЗапроса);
	ПараметрыВидео.Вставить("ЗаписьВидеоYandexTTSApiKey", Объект.ЗаписьВидеоYandexTTSApiKey);
	
	ПараметрыВидео.Вставить("ЗаписьВидеоAmazonГолос", Объект.ЗаписьВидеоAmazonГолос);
	ПараметрыВидео.Вставить("ЗаписьВидеоAmazonДвижок", Объект.ЗаписьВидеоAmazonДвижок);
	ПараметрыВидео.Вставить("ЗаписьВидеоAmazonЯзык", Объект.ЗаписьВидеоAmazonЯзык);
	ПараметрыВидео.Вставить("ЗаписьВидеоAmazonРегион", Объект.ЗаписьВидеоAmazonРегион);
	ПараметрыВидео.Вставить("ЗаписьВидеоAmazonКлючДоступа", Объект.ЗаписьВидеоAmazonКлючДоступа);
	ПараметрыВидео.Вставить("ЗаписьВидеоAmazonСекретныйКлюч", Объект.ЗаписьВидеоAmazonСекретныйКлюч);
	
	ПараметрыВидео.Вставить("ЗаписьВидеоСберTTSClientID", Объект.ЗаписьВидеоСберTTSClientID);
	ПараметрыВидео.Вставить("ЗаписьВидеоСберTTSClientSecret", Объект.ЗаписьВидеоСберTTSClientSecret);
	ПараметрыВидео.Вставить("ЗаписьВидеоСберTTSГолос", Объект.ЗаписьВидеоСберTTSГолос);
	
	ПараметрыВидео.Вставить("ЗаписьВидеоПутьКДвижкуTTS", Объект.ЗаписьВидеоПутьКДвижкуTTS);
	ПараметрыВидео.Вставить("ЗаписьВидеоИмяTTS", Объект.ЗаписьВидеоИмяTTS);
	ПараметрыВидео.Вставить("ЗаписьВидеоСловарьЗамен", Объект.ЗаписьВидеоСловарьЗамен);
	ПараметрыВидео.Вставить("ЗаписьВидеоИнструмент", Объект.ЗаписьВидеоИнструмент);
	ПараметрыВидео.Вставить("ЗаписьВидеоЭкранШирина", Объект.ЗаписьВидеоЭкранШирина);
	ПараметрыВидео.Вставить("ЗаписьВидеоЭкранВысота", Объект.ЗаписьВидеоЭкранВысота);
	ПараметрыВидео.Вставить("ЗаписьВидеоЭкранСлева", Объект.ЗаписьВидеоЭкранСлева);
	ПараметрыВидео.Вставить("ЗаписьВидеоЭкранСверху", Объект.ЗаписьВидеоЭкранСверху);
	ПараметрыВидео.Вставить("ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", Объект.ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм);
	ПараметрыВидео.Вставить("ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", Объект.ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы);
	ПараметрыВидео.Вставить("ЗаписьВидеоГруппаШаговКакШаг", Объект.ЗаписьВидеоГруппаШаговКакШаг);
	ПараметрыВидео.Вставить("ЗаписьВидеоОтключитьМасштабированиеШаговПоВремени", Объект.ЗаписьВидеоОтключитьМасштабированиеШаговПоВремени);
	ПараметрыВидео.Вставить("ЗаписьВидеоПодсвечиватьНажатияМышки", Объект.ЗаписьВидеоПодсвечиватьНажатияМышки);
	ПараметрыВидео.Вставить("ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи", Объект.ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи);
	ПараметрыВидео.Вставить("ЗаписьВидеоОтключитьСлайдСценария", Объект.ЗаписьВидеоОтключитьСлайдСценария);
	ПараметрыВидео.Вставить("ЗаписьВидеоОтключитьСлайдФинал", Объект.ЗаписьВидеоОтключитьСлайдФинал);
	ПараметрыВидео.Вставить("ЗаписьВидеоЭмулироватьВводСКлавиатуры", Объект.ЗаписьВидеоЭмулироватьВводСКлавиатуры);
	ПараметрыВидео.Вставить("ЗаписьВидеоСкрытьСлужебныеОкна", Объект.ЗаписьВидеоСкрытьСлужебныеОкна);
	ПараметрыВидео.Вставить("ЗаписьВидеоСкоростьПроизношения", Объект.ЗаписьВидеоСкоростьПроизношения);
	ПараметрыВидео.Вставить("ЗаписьВидеоКэшироватьФайлыTTS", Объект.ЗаписьВидеоКэшироватьФайлыTTS);
	ПараметрыВидео.Вставить("ЗаписьВидеоКэшФайловTTS", Объект.ЗаписьВидеоКэшФайловTTS);
	ПараметрыВидео.Вставить("ЗаписьВидеоКэшироватьВидеоВставки", Объект.ЗаписьВидеоКэшироватьВидеоВставки);
	ПараметрыВидео.Вставить("ЗаписьВидеоКэшВидеоВставок", Объект.ЗаписьВидеоКэшВидеоВставок);
	ПараметрыВидео.Вставить("ЗаписьВидеоДобавлятьСубтитры", Объект.ЗаписьВидеоДобавлятьСубтитры);
	ПараметрыВидео.Вставить("ЗаписьВидеоПроцентУскорения", Объект.ЗаписьВидеоПроцентУскорения);
	ПараметрыВидео.Вставить("ЗаписьВидеоФормироватьИнструкциюТипВидео", Объект.ЗаписьВидеоФормироватьИнструкциюТипВидео);
	ПараметрыВидео.Вставить("ЗаписьВидеоФормироватьИнструкциюТипHTML", Объект.ЗаписьВидеоФормироватьИнструкциюТипHTML);
	ПараметрыВидео.Вставить("ЗаписьВидеоФормироватьИнструкциюТипMarkdown", Объект.ЗаписьВидеоФормироватьИнструкциюТипMarkdown);
	ПараметрыВидео.Вставить("ЗаписьВидеоЭмулироватьДвиженияМышкиSikuliX", Объект.ЗаписьВидеоЭмулироватьДвиженияМышкиSikuliX);
	ПараметрыВидео.Вставить("ЗаписьВидеоПутьКОбработкеДвижкаTTS", Объект.ЗаписьВидеоПутьКОбработкеДвижкаTTS);
	
	ПараметрыВидео.Вставить("ЗаписьВидеоЗаменитьСлайдЗаголовок", Объект.ЗаписьВидеоЗаменитьСлайдЗаголовок);
	ПараметрыВидео.Вставить("ЗаписьВидеоПутьКСлайдуЗаголовок", Объект.ЗаписьВидеоПутьКСлайдуЗаголовок);
	ПараметрыВидео.Вставить("ЗаписьВидеоДобавитьМузыкуКСлайдуЗаголовок", Объект.ЗаписьВидеоДобавитьМузыкуКСлайдуЗаголовок);
	ПараметрыВидео.Вставить("ЗаписьВидеоЗаменитьСлайдФинал", Объект.ЗаписьВидеоЗаменитьСлайдФинал);
	ПараметрыВидео.Вставить("ЗаписьВидеоПутьКСлайдуФинал", Объект.ЗаписьВидеоПутьКСлайдуФинал);
	ПараметрыВидео.Вставить("ЗаписьВидеоДобавитьМузыкуКСлайдуФинал", Объект.ЗаписьВидеоДобавитьМузыкуКСлайдуФинал);
	
	ПараметрыВидео.Вставить("ЗаписьВидеоКоличествоКадров", Объект.ЗаписьВидеоКоличествоКадров);
	ПараметрыВидео.Вставить("DebugLog", Объект.DebugLog);
	ПараметрыВидео.Вставить("Ванесса", ЭтаФорма);
	ПараметрыВидео.Вставить("КаталогИнструментов", Объект.КаталогИнструментов);
	ПараметрыВидео.Вставить("ЗапрещеныСинхронныеВызовы", ЗапрещеныСинхронныеВызовы);
	
	ПараметрыВидео.Вставить("ЗаписыватьВидеоВыполненияТестов", Объект.ЗаписыватьВидеоВыполненияТестов);
	ПараметрыВидео.Вставить("КоличествоКадровВидеоВыполненияТестов", Объект.КоличествоКадровВидеоВыполненияТестов);
	ПараметрыВидео.Вставить("КомандаЗаписиВидеоВыполненияТестов", Объект.КомандаЗаписиВидеоВыполненияТестов);
	ПараметрыВидео.Вставить("КаталогДляЗаписиВидеоВыполненияТестов", Объект.КаталогДляЗаписиВидеоВыполненияТестов);
	
	ПараметрыВидео.Вставить("ЭтоИнициализация", Ложь);
	
	Если Объект.ЗаписьВидеоТипОзвучкиTTS = -1 Тогда
		
		ПараметрыВидео.Вставить("ЗаписьВидеоПутьКОбработкеДвижкаTTS", Объект.ЗаписьВидеоПутьКОбработкеДвижкаTTS);
		ПараметрыВидео.Вставить("ФормаОбработкиПроизвольногоДвижкаTTS", ФормаОбработкиПроизвольногоДвижкаTTS);
		
		Для Каждого СтрокаНастройкиДругогоДвижкаTTS Из НастройкиДругогоДвижкаTTS Цикл
			
			Попытка
				
				ПараметрыВидео.Вставить(СтрокаНастройкиДругогоДвижкаTTS.Имя, СтрокаНастройкиДругогоДвижкаTTS.Значение);
				
			Исключение
				
				Сообщить(ОписаниеОшибки());
				
			КонецПопытки;
			
		КонецЦикла;	 
		
	КонецЕсли;	 
	
	Если НЕ ПараметрыВидео.Свойство("Файл_StopVideoRec") Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("os");
		ЗТ = Новый ЗаписьТекста(ИмяВременногоФайла, "UTF-8",, Истина); 
		ЗТ.Записать(глРеквизитТекстStopVideoRec); 
		ЗТ.Закрыть();
		
		ПараметрыВидео.Вставить("Файл_StopVideoRec", ИмяВременногоФайла);
	КонецЕсли;	 

	// уменьшим разрешение экрана, если оно указано больше чем реальное
	ИнформацияЭкранаКлиента = Вычислить("ПолучитьИнформациюЭкрановКлиента()[0]");
	Ширина = ИнформацияЭкранаКлиента.Ширина;
	Высота = ИнформацияЭкранаКлиента.Высота;
	Если (Ширина % 2) = 1 Тогда // нечетное
		Ширина = Ширина - 1;
	КонецЕсли;	 
	Если (Высота % 2) = 1 Тогда // нечетное
		Высота = Высота - 1;
	КонецЕсли;	 
	
	Если Ширина < Объект.ЗаписьВидеоЭкранШирина Тогда
		ПараметрыВидео.Вставить("ЗаписьВидеоЭкранШирина", Ширина);
	КонецЕсли;	 
	Если Высота < Объект.ЗаписьВидеоЭкранВысота Тогда
		ПараметрыВидео.Вставить("ЗаписьВидеоЭкранВысота", Высота);
	КонецЕсли;	 
	ПараметрыВидео.Вставить("ЗаписьВидеоИнструмент", Объект.ЗаписьВидеоИнструмент);
	ПараметрыВидео.Вставить("ИдентификаторВнешнейКомпонентыДляСкриншотов", ИдентификаторВнешнейКомпонентыДляСкриншотов);
	
	Если ПараметрыВидео.ЗаписьВидеоЭкранШирина = 0 Тогда
		ПараметрыВидео.Вставить("ЗаписьВидеоЭкранШирина", Ширина);
	КонецЕсли;	 
	
	Если ПараметрыВидео.ЗаписьВидеоЭкранВысота = 0 Тогда
		ПараметрыВидео.Вставить("ЗаписьВидеоЭкранВысота", Высота);
	КонецЕсли;	 
	
	ПараметрыВидео.Вставить("НадоВыгрузитьКеш", Ложь);
	
	ПараметрыВидео.Вставить("ДанныеСловоряЗамен", ДанныеСловоряЗамен(ПараметрыВидео));
	ПараметрыВидео.Вставить("ОзвучкаВыполненияСценария", Ложь);
	ПараметрыВидео.Вставить("ТестГолоса", Ложь);
	
	ПараметрыВидео.Вставить("ВключенРежимОбучения", ВключенРежимОбучения);
	ПараметрыВидео.Вставить("ДанныеКешОзвучкиИнтерактивнойСправки", ДанныеКешОзвучкиИнтерактивнойСправки);
	ПараметрыВидео.Вставить("СоздаватьФайлыОзвучкиДляСправки", Объект.СоздаватьФайлыОзвучкиДляСправки);
	ПараметрыВидео.Вставить("КаталогКешОзвучкиДляИнтерактивнойСправки", Объект.КаталогКешОзвучкиДляИнтерактивнойСправки);
	
	ПараметрыВидео.Вставить("Дисплей", ?(Ванесса.ЭтоLinux, ПеременныеСреды()["DISPLAY"], "desktop"));
	ПараметрыВидео.Вставить("Устройство", ?(Ванесса.ЭтоLinux, "x11grab", "gdigrab"));
	
	Возврат ПараметрыВидео;
	
	#КонецЕсли
КонецФункции	

&НаКлиенте
Процедура ЗавершитьЗаписьВидео()
	Если НЕ Объект.СоздаватьИнструкциюВидео Тогда
		Возврат;
	КонецЕсли;	 
	
	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПараметрыВидео.Вставить("МассивСценариевДляВыполнения", МассивСценариевДляВыполнения);
	ПараметрыВидео.Вставить("МассивСтрокДереваДанныеФормы", МассивСтрокДереваДанныеФормы);
	
	Если СтатусЗапускаСценариев Тогда // если были упавшие шаги, то делать видео не надо
		ПодключитьБиблиотекуРаботыСВидео();
		Если ТипЗнч(ОбъектКонтекстСохраняемый) = Тип("Структура") И ОбъектКонтекстСохраняемый.Свойство("ВключенРежимОбучения") Тогда
			ПараметрыВидео.Вставить("ВключенРежимОбучения", ОбъектКонтекстСохраняемый.ВключенРежимОбучения);
			ДанныеКешОзвучкиИнтерактивнойСправки = ПрочитатьДанныеКешОзвучкиИнтерактивнойСправки();
			ПараметрыВидео.Вставить("ДанныеКешОзвучкиИнтерактивнойСправки", ДанныеКешОзвучкиИнтерактивнойСправки);
			ПараметрыВидео.Вставить("КопироватьФайлыВоВрменныйКаталог", Истина);
		КонецЕсли;	
		МодульРаботыСВидео.ЗавершитьЗаписьВидео(ПараметрыВидео);
	КонецЕсли;	 
	
	Если Объект.ЗаписьВидеоПодсвечиватьНажатияМышки Тогда
		TASKKILL("MouseClickEvent.exe");
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьЗаписьВидеоОдногоШага()
	Если Не Объект.СоздаватьИнструкциюВидео Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не Объект.ИдетЗаписьВидео Тогда
		Возврат;
	КонецЕсли;	 
	
	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПодключитьБиблиотекуРаботыСВидео();
	МодульРаботыСВидео.ОстановитьЗаписьВидеоОдногоШага(ПараметрыВидео);
	Объект.ИдетЗаписьВидео = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьВидеоОдногоШага(ТекИД_СценарияВМассиве, ТекИД_ШагаВМассиве, ТекШаг)
	Если Не Объект.СоздаватьИнструкциюВидео Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ИдетЗаписьВидео Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ТекШаг.Свойство("ИгнорироватьШагВАвтоинструкции") Тогда
		Если ТекШаг.ИгнорироватьШагВАвтоинструкции Тогда
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПараметрыВидео.Вставить("ТекИД_СценарияВМассиве", ТекИД_СценарияВМассиве);
	ПараметрыВидео.Вставить("ТекИД_ШагаВМассиве", ТекИД_ШагаВМассиве);
	ПараметрыВидео.Вставить("ТекШаг", ТекШаг);
	
	ПодключитьБиблиотекуРаботыСВидео();
	МодульРаботыСВидео.НачатьЗаписьВидеоОдногоШага(ПараметрыВидео);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодготовкуКЗаписиВидео()
	// проверим разрешение экрана
	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПараметрыВидео.Вставить("ЭтоИнициализация", Истина);
	ПодключитьБиблиотекуРаботыСВидео();
	МодульРаботыСВидео.Инициализация(ПараметрыВидео);
	
	ПараметрыВидео.Вставить("МассивСценариевДляВыполнения", МассивСценариевДляВыполнения);
	
	Если Объект.ЗаписьВидеоПодсвечиватьНажатияМышки Тогда
		Рез = Новый Массив;
		ЗаполнитьМассивPIDПоИмениПроцесса("MouseClickEvent.exe", Рез);
		Если Рез.Количество() = 0 Тогда
			ИмяФайла = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "tools\VideoTools\MouseClickEvent.exe";
			Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
				ВызватьИсключение ПодставитьПараметрыВСтроку(
					Локализовать("Не найден файл <%1>"),
					ИмяФайла
				);
			КонецЕсли;	 
			КомандаСистемы = ИмяФайла;
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаСистемы, 0);
		КонецЕсли;	 
		
	КонецЕсли;	 
КонецПроцедуры

// работа с видео - окончание

&НаКлиенте
Функция ОпределитьВозможнуюСледующуюСтрокуДереваПоЭлементуДерева(ЭлементДерева)

	ТекРодитель          = ЭлементДерева.ПолучитьРодителя();
	Если ТекРодитель = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	ЭлементыРодителя     = ТекРодитель.ПолучитьЭлементы();
	ИдВКоллекцииРодителя = ЭлементыРодителя.Индекс(ЭлементДерева);
	
	Если ЭлементыРодителя.Количество() - 1 >= (ИдВКоллекцииРодителя + 1) Тогда
		// значит это следующая строка
		Возврат ЭлементыРодителя[ИдВКоллекцииРодителя + 1].ПолучитьИдентификатор();
	КонецЕсли;	 
	
	Возврат ОпределитьВозможнуюСледующуюСтрокуДереваПоЭлементуДерева(ТекРодитель);
	
КонецФункции	

&НаКлиенте
Функция ОпределитьСледующуюСтрокуДереваИзДанныхТекущейСтрокиДерева(СтрокаДерева)
	
	ПроизвольныеЗначения = СтрокаДерева.ПроизвольныеЗначения;
	Если ТипЗнч(ПроизвольныеЗначения) = Тип("Структура") И ПроизвольныеЗначения.Свойство("ИдСледующегоШага") Тогда
		ИдСледующегоШага = ПроизвольныеЗначения.ИдСледующегоШага;
		Если ИдСледующегоШага <> Неопределено Тогда
			СтрокаДереваПоИдСтроки = СтрокаДереваПоИдСтроки(ИдСледующегоШага);
			Если СтрокаДереваПоИдСтроки <> Неопределено  Тогда
				Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаДереваПоИдСтроки.ПолучитьИдентификатор();
				Возврат Истина;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ОпределитьСледующуюСтрокуДереваИзДанныхТекущейСтрокиДереваКогдаУсловиеИстинно(СтрокаДерева)
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭлементыСтроки = СтрокаДерева.ПолучитьЭлементы();
	Если ЭлементыСтроки.Количество() > 0 Тогда
		НужнаяСтрока = Неопределено;
		ПроверяемаяСтрока = Неопределено;
		Для Каждого ТекСтрока Из ЭлементыСтроки Цикл
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Тип) Тогда
				Продолжить;
			КонецЕсли;
			
			ПроверяемаяСтрока = ТекСтрока;
			
			Прервать;
			
		КонецЦикла;	
		
		Если ПроверяемаяСтрока <> Неопределено Тогда
			ТекущаяСтрокаДереваИдСтроки = ОпределитьИдИсполняемойСтрокиДерева(ПроверяемаяСтрока, НужнаяСтрока);
			Если НужнаяСтрока <> Неопределено Тогда
				Элементы.ДеревоТестов.ТекущаяСтрока = НужнаяСтрока.ПолучитьИдентификатор();
				Возврат Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	ЭлементыДереваРодитель = СтрокаДерева.ПолучитьРодителя().ПолучитьЭлементы();
	НайденаТекущаяСтрока = Ложь;
	Для Каждого ТекСтрока Из ЭлементыДереваРодитель Цикл
		Если НЕ НайденаТекущаяСтрока И СтрокаДерева.ИДСтроки = ТекСтрока.ИДСтроки Тогда
			НайденаТекущаяСтрока = Истина;
			Продолжить;
		КонецЕсли;
		
		Если НЕ НайденаТекущаяСтрока Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ТекСтрока.ДопТип = "УсловиеИначеЕсли" Тогда
			Продолжить;
		ИначеЕсли ТекСтрока.ДопТип = "УсловиеИначе" Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы.ДеревоТестов.ТекущаяСтрока = ТекСтрока.ПолучитьИдентификатор();
		Возврат Истина;
		
	КонецЦикла;	
	
КонецФункции

&НаКлиенте
Процедура ОпределитьСледующуюСтрокуДереваДляВыполненияРежимВыполненияОдногоШага(ЭлементыДерево)
	Если Элементы.ДеревоТестов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	ШагСвязанСПроверкойУсловий = Ложь;
	Если Элементы.ДеревоТестов.ТекущиеДанные.ДопТип = "Условие"
		ИЛИ Элементы.ДеревоТестов.ТекущиеДанные.ДопТип = "УсловиеИначеЕсли"
		ИЛИ  Элементы.ДеревоТестов.ТекущиеДанные.ДопТип = "Цикл"	 Тогда
		
		ШагСвязанСПроверкойУсловий = Истина;
		Если НЕ Объект.РезультатУсловия Тогда
			ОпределитьСледующуюСтрокуДереваИзДанныхТекущейСтрокиДерева(Элементы.ДеревоТестов.ТекущиеДанные);
			Возврат;
		ИначеЕсли Объект.РежимВыполненияОдногоШага Тогда	
			ОпределитьСледующуюСтрокуДереваИзДанныхТекущейСтрокиДереваКогдаУсловиеИстинно(Элементы.ДеревоТестов.ТекущиеДанные);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;	 
	
	Если НЕ ШагСвязанСПроверкойУсловий Тогда
		Если ОпределитьСледующуюСтрокуДереваИзДанныхТекущейСтрокиДерева(Элементы.ДеревоТестов.ТекущиеДанные) Тогда
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТекРодитель = Элементы.ДеревоТестов.ТекущиеДанные.ПолучитьРодителя();
	Если ТекРодитель.ДопТип = "Цикл" Тогда
		ЭлементыРодителя = ТекРодитель.ПолучитьЭлементы();
		ЭлементыСтроки   = Элементы.ДеревоТестов.ТекущиеДанные.ПолучитьЭлементы();
		Если ЭлементыРодителя.Индекс(Элементы.ДеревоТестов.ТекущиеДанные) = ЭлементыРодителя.Количество() - 1
		И    ЭлементыСтроки.Количество() = 0 	
		Тогда
			Элементы.ДеревоТестов.ТекущаяСтрока = ТекРодитель.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Объект.РежимВыполненияОдногоШага И Объект.ИспользоватьРедакторVanessaEditor Тогда
		ИдВиджета = ИдВиджетаПоИдСтроки(Элементы.ДеревоТестов.ТекущиеДанные.ИдСтроки);
		Если ИдВиджета = Неопределено И ТекущаяПозицияVanessaEditor <> Неопределено Тогда //значит это строка основной фичи
			СделатьБлижайшуюСтрокуДереваТекущейПоНомеруСтрокиФичи(ТекущаяПозицияVanessaEditor.LineNumber + 1);
			
			Если Элементы.ДеревоТестов.ТекущиеДанные.ДопТип = "Попытка" Тогда
				СделатьБлижайшуюСтрокуДереваТекущейПоНомеруСтрокиФичи(Элементы.ДеревоТестов.ТекущиеДанные.НомерСтрокиВФиче + 1);
			КонецЕсли;	 
			
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Пока Истина Цикл
		ТекНомерСтроки = Элементы.ДеревоТестов.ТекущаяСтрока;
		Элементы.ДеревоТестов.ТекущаяСтрока = Элементы.ДеревоТестов.ТекущаяСтрока + 1;
		Если Элементы.ДеревоТестов.ТекущиеДанные <> Неопределено И Элементы.ДеревоТестов.ТекущиеДанные.Тип = "Сценарий" Тогда
			Прервать;
		КонецЕсли;	 
		
		Если Элементы.ДеревоТестов.ТекущаяСтрока = Неопределено Тогда
			Элементы.ДеревоТестов.ТекущаяСтрока = ТекНомерСтроки;
			Прервать;
		КонецЕсли;	 
		Если Элементы.ДеревоТестов.ТекущиеДанные.СтрокаПараметровШагаВВидеТаблицы = Истина Тогда
			Продолжить;
		ИначеЕсли Элементы.ДеревоТестов.ТекущиеДанные.Тип = "Область" Тогда
			Если НЕ ЗначениеЗаполнено(Элементы.ДеревоТестов.ТекущиеДанные.ДопТип) Тогда
				Продолжить;
			КонецЕсли;	 
			
		ИначеЕсли Элементы.ДеревоТестов.ТекущиеДанные.Тип = "ШагСценарий" Тогда
			Продолжить;
		ИначеЕсли Элементы.ДеревоТестов.ТекущиеДанные.Тип = "Сценарий" Тогда
			Продолжить;
		ИначеЕсли ПустаяСтрока(Элементы.ДеревоТестов.ТекущиеДанные.Имя) Тогда
			Продолжить;
		КонецЕсли;	 
		
		РазвернутьСтрокуДерева(Элементы.ДеревоТестов.ТекущиеДанные);
		
		Прервать;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СделатьСообщениеВсеСценарииОбработаны()
	
	Если БылоВыведеноСообщениеОЗавершенииСценариев Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(СлужебноеСообщениеПослеОкончанияВыполненияСценария) Тогда
		СообщитьПользователю(СлужебноеСообщениеПослеОкончанияВыполненияСценария);
	КонецЕсли;	 
	
	Если СтатусЗапускаСценариев Тогда
		Если ВключенРежимОбучения Тогда
			СообщитьПользователю(Локализовать("Урок закончен."));
		Иначе	
			СообщитьПользователю(Локализовать("Выполнение сценариев закончено. Ошибок не было."));
			Если ЗначениеЗаполнено(СлужебноеСообщениеПослеУспешногоВыполненияСценария) Тогда
				СообщитьПользователю(СлужебноеСообщениеПослеУспешногоВыполненияСценария);
			КонецЕсли;	 
		КонецЕсли;	 
	Иначе	
		СообщитьПользователю(Локализовать("Выполнение сценариев закончено. БЫЛИ ОШИБКИ."));
	КонецЕсли;	 
	
	БылоВыведеноСообщениеОЗавершенииСценариев = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагиВыполненияСценариевОбработчикОжидания()
	ФлагСценарииВыполнены = Истина;
	Если ЗначениеЗаполнено(ФайлФлагВыполненияСценариев) Тогда
		ЗТ = Новый ЗаписьТекста(ФайлФлагВыполненияСценариев, "UTF-8",, Истина); 
		ЗТ.ЗаписатьСтроку(""); 
		ЗТ.Закрыть();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагиВыполненияСценариев()
	ПодключитьОбработчикОжидания("УстановитьФлагиВыполненияСценариевОбработчикОжидания", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьОшибкуИзСекцииИсключение()
	НадоЗарегистрироватьОшибкуИзСекцииИсключение = Ложь;
	ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	
	Если НЕ РезультатПрохожденияТестовСценария.Свойство("ШагУпавшийВПопыткеИсключении") Тогда
		ВызватьИсключение Локализовать("Не найден шаг, упавший в секции Попытка/Исключение.");
	КонецЕсли;	
	
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	ТекШаг = Шаги[ТекИД_ШагаВМассиве];
	ТекстОписаниеОшибки = ТекШаг.ТекстОписаниеОшибки;
	
	ШагУпавшийВПопыткеИсключении = РезультатПрохожденияТестовСценария.ШагУпавшийВПопыткеИсключении;
	РезультатПрохожденияТестовСценария.Удалить("ШагУпавшийВПопыткеИсключении");
	
	РезультатПрохожденияТестовСценария.Вставить("СчитатьСценарийУпавшим", Истина);
	РезультатПрохожденияТестовСценария.Вставить("ВСценарииБылиШагиРегистрирующиеОшибкиИзПопыткиИсключение", Истина);
	
	Если НЕ РезультатПрохожденияТестовСценария.Свойство("СчетчикОшибок") Тогда
		РезультатПрохожденияТестовСценария.Вставить("СчетчикОшибок", 1);
		РезультатПрохожденияТестовСценария.Вставить("ЗаголовкиОшибок", Новый Массив);
		РезультатПрохожденияТестовСценария.Вставить("ОписанияОшибок", Новый Массив);
	Иначе	
		РезультатПрохожденияТестовСценария.СчетчикОшибок = РезультатПрохожденияТестовСценария.СчетчикОшибок + 1;
	КонецЕсли;	 
	РезультатПрохожденияТестовСценария.ЗаголовкиОшибок.Добавить(ТекстОписаниеОшибки);
	
	ТекстОшибки = ШагУпавшийВПопыткеИсключении.ОписаниеОшибки;
	РезультатПрохожденияТестовСценария.ОписанияОшибок.Добавить(ТекстОшибки);
	
	Если НЕ РезультатПрохожденияТестовСценария.Свойство("ОписаниеОшибки") Тогда
		РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", "");
	Иначе	
		Если РезультатПрохожденияТестовСценария.ОписаниеОшибки = Неопределено Тогда
			РезультатПрохожденияТестовСценария.ОписаниеОшибки = "";
		КонецЕсли;	 
		
		РезультатПрохожденияТестовСценария.ОписаниеОшибки = РезультатПрохожденияТестовСценария.ОписаниеОшибки
			+ Символы.ПС + Символы.ПС;
	КонецЕсли;	 
	
	ОписаниеОшибки = Локализовать("Найдено %1 ошибок:") + Символы.ПС + Символы.ПС;
	ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%1", РезультатПрохожденияТестовСценария.СчетчикОшибок);
	
	Для Сч = 0 По РезультатПрохожденияТестовСценария.СчетчикОшибок - 1 Цикл
		ОписаниеОшибки = ОписаниеОшибки + РезультатПрохожденияТестовСценария.ЗаголовкиОшибок[Сч] + Символы.ПС;
		ОписаниеОшибки = ОписаниеОшибки + РезультатПрохожденияТестовСценария.ОписанияОшибок[Сч] + Символы.ПС + Символы.ПС;
	КонецЦикла;	
	
	РезультатПрохожденияТестовСценария.ОписаниеОшибки = ОписаниеОшибки;
		
	СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);	
	СтрокаСценария.Статус = "Failed";
	СтрокаСценария.ТекстОшибки = РезультатПрохожденияТестовСценария.ОписаниеОшибки;
	РезультатПрохожденияТестовСценария.Вставить("Статус", "Failed");
	
	ТекШаг.Вставить("РегистрацияОшибки", Истина);
	ИДСтрокиШага = ТекШаг.СтрокаШага;
	СтрокаШага = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);
	СтрокаШага.Статус = "Failed";
	СтрокаШага.ТекстОшибки = ТекстОшибки;
	
	РезультатПрохожденияТестовШагов = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
	РезультатПрохожденияШага = РезультатПрохожденияТестовШагов[РезультатПрохожденияТестовШагов.Количество() - 1];
	РезультатПрохожденияШага.Вставить("ОписаниеОшибки", ТекстОшибки);
	
	ТекШаг.Вставить("ОписаниеОшибкиВнутриСценария", "");
	Если ТекШаг.ЗначенияПараметров.Количество() > 0 Тогда
		Попытка
			ТекШаг.Вставить("ОписаниеОшибкиВнутриСценария", ТекШаг.ЗначенияПараметров[0].Значение.Значение);
		Исключение
			ЗаписатьЛогВЖРОшибка("VanessaAutomation.ЗарегистрироватьОшибкуПоПоследнемуУпавшемуШагуВПопыткеИсключении", ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;	 
	
	Если Объект.ДелатьЛогОшибокВТекстовыйФайл И НЕ ПустаяСтрока(Объект.ИмяКаталогаЛогОшибок) Тогда
		
		ОписаниеОшибкиКраткоVanessaEditor = МодульРедакторТекста().ОписаниеОшибкиКраткоVanessaEditor(ОписаниеОшибки);
		ДанныеДляФормированияJsonОбОшибке = ДанныеДляФормированияJsonОбОшибке(ТекстОшибки, Неопределено, ТекстОшибки, ТекШаг.ИдСтроки, ШагУпавшийВПопыткеИсключении.ТекстИсключенияПлатформы, ОписаниеОшибкиКраткоVanessaEditor, ОписаниеОшибки);
		ДанныеДляФормированияJsonОбОшибке.Вставить("РегистрацияОшибкиИзСекцииИсключение", Истина);
		
		СтруктураЛогаОшибки = ПолучитьЛогОшибки(СтрокаСценария, ДанныеДляФормированияJsonОбОшибке);
		ЗаписатьЛогОшибки(СтруктураЛогаОшибки);
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеСППР И НЕ ПустаяСтрока(Объект.КаталогВыгрузкиСППР) Тогда
		ДанныеДляФормированияОшибкиСППР = Новый Структура;
		ДанныеДляФормированияОшибкиСППР.Вставить("СтрокаСценария", СтрокаСценария);
		ДанныеДляФормированияОшибкиСППР.Вставить("РезультатПрохожденияТестовСценария", РезультатПрохожденияТестовСценария);
		ДанныеДляФормированияОшибкиСППР.Вставить("ПрикрепленныеМакеты", СтрокаСценария.ПроизвольныеЗначения.ПрикрепленныеМакеты);
		ДанныеДляФормированияОшибкиСППР.Вставить("РегистрацияОшибкиИзСекцииИсключение", Истина);
		ДанныеДляФормированияОшибкиСППР.Вставить("ТекстОшибки", ТекШаг.ОписаниеОшибкиВнутриСценария + Символы.ПС + ТекстОшибки);
		ДанныеДляФормированияОшибкиСППР.Вставить("ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок",
			ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок);
		
		СформироватьОшибкуСППР(ДанныеДляФормированияОшибкиСППР);
	КонецЕсли;	 
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		ШагиСОшибкамиVanessaEditor.Добавить(ТекШаг.НомерСтрокиВФиче);
		МодульРедакторТекста().УстановитьУпавшийШагVanessaEditor(ТекШаг,
			ТекШаг.ОписаниеОшибкиВнутриСценария + Символы.ПС + ТекстОшибки, ТекШаг.ОписаниеОшибкиВнутриСценария, СтрокаШага);
	КонецЕсли;	 
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция СтруктураФайлаОшибкиСППР()
	
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ВерсияФормата", "");
	СтруктураОтчета.Вставить("УИ", "");
	СтруктураОтчета.Вставить("ТипОшибки", "");
	СтруктураОтчета.Вставить("ИсходнаяИнформация", "");
	СтруктураОтчета.Вставить("ПорядокВоспроизведения", "");
	СтруктураОтчета.Вставить("ОжидаемоеПоведение", "");
	СтруктураОтчета.Вставить("ВерсияПлатформы", "");
	СтруктураОтчета.Вставить("КлиентОперативнаяПамять", 0);
	СтруктураОтчета.Вставить("КлиентВерсияОС", "");
	СтруктураОтчета.Вставить("КлиентПроцессор", "");
	СтруктураОтчета.Вставить("КлиентТипПлатформы", "");
	СтруктураОтчета.Вставить("КлиентИнформацияПрограммыПросмотра", "");
	СтруктураОтчета.Вставить("КлиентТекущаяДата", Дата(1, 1, 1));
	СтруктураОтчета.Вставить("ОбъектыМетаданных", Новый Массив);
	СтруктураОтчета.Вставить("ИменаФайлов", Новый Массив);
	СтруктураОтчета.Вставить("СерверОперативнаяПамять", 0);
	СтруктураОтчета.Вставить("СерверВерсияОС", "");
	СтруктураОтчета.Вставить("СерверПроцессор", "");
	СтруктураОтчета.Вставить("СерверТипПлатформы", "");
	СтруктураОтчета.Вставить("СерверИнформацияПрограммыПросмотра", "");
	СтруктураОтчета.Вставить("ВерсияКонфигурации", "");
	СтруктураОтчета.Вставить("ИмяКонфигурации", "");
	СтруктураОтчета.Вставить("ДатаОбнаружения", Дата(1, 1, 1));
	СтруктураОтчета.Вставить("Ответственный", "");
	СтруктураОтчета.Вставить("КодСценария", "");
	СтруктураОтчета.Вставить("ИмяСценария", "");
	СтруктураОтчета.Вставить("ДостоверностьОбнаружения", "");
	СтруктураОтчета.Вставить("Срочность", "");
	СтруктураОтчета.Вставить("АдресРепозитория", "");
	
	Возврат СтруктураОтчета;

КонецФункции

&НаСервереБезКонтекста
Функция ТекстОшибкиXMLСППР(ДанныеДляФормированияОшибкиСППР, РезультатПрохожденияТестовСценария, КаталогВыгрузкиСППР, МассивТегов, ИмяСценария, ФайлыМакетов)
	СтруктураОшибки = СтруктураФайлаОшибкиСППР();
	
	СтруктураОшибки.ВерсияФормата = "1.4";
	СтруктураОшибки.УИ = Строка(Новый УникальныйИдентификатор);
	СтруктураОшибки.ТипОшибки = "Ошибка сценария";
	
	ОписаниеОшибки = РезультатПрохожденияТестовСценария.ОписаниеОшибки;
	Если ДанныеДляФормированияОшибкиСППР.Свойство("ТекстОшибки") Тогда
		ОписаниеОшибки = ДанныеДляФормированияОшибкиСППР.ТекстОшибки;
	КонецЕсли;
	
	СтруктураОшибки.Вставить("ИсходнаяИнформация", ИмяСценария + Символы.ПС + ОписаниеОшибки);
	
	ПорядокВоспроизведения = ПорядокВоспроизведения(ДанныеДляФормированияОшибкиСППР,
		РезультатПрохожденияТестовСценария, ИмяСценария, МассивТегов, ОписаниеОшибки);
	СтруктураОшибки.Вставить("ПорядокВоспроизведения", ПорядокВоспроизведения);
	
	УточнениеРасположения = УточнениеРасположения(ДанныеДляФормированияОшибкиСППР,
		РезультатПрохожденияТестовСценария, ИмяСценария);
	
	СтруктураОбъектыМетаданных = Новый Структура;
	СтруктураОбъектыМетаданных.Вставить("ОбъектМетаданных", "");
	СтруктураОбъектыМетаданных.Вставить("УточнениеРасположения", УточнениеРасположения);
	СтруктураОшибки.ОбъектыМетаданных.Добавить(СтруктураОбъектыМетаданных);

	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	СтруктураОшибки.Вставить("ВерсияПлатформы", СистемнаяИнформация.ВерсияПриложения);
	СтруктураОшибки.Вставить("КлиентОперативнаяПамять", СистемнаяИнформация.ОперативнаяПамять);
	СтруктураОшибки.Вставить("КлиентВерсияОС", СистемнаяИнформация.ВерсияОС);
	СтруктураОшибки.Вставить("КлиентПроцессор", СистемнаяИнформация.Процессор);
	СтруктураОшибки.Вставить("КлиентТипПлатформы", Строка(СистемнаяИнформация.ТипПлатформы));
	СтруктураОшибки.Вставить("КлиентИнформацияПрограммыПросмотра", СистемнаяИнформация.ИнформацияПрограммыПросмотра);
	СтруктураОшибки.Вставить("КлиентТекущаяДата", ТекущаяДатаСеанса());
											
	ИменаФайлов = Новый Массив;
	Если ДанныеДляФормированияОшибкиСППР.Свойство("МассивСкриншотов") Тогда
		Для Каждого ДанныеФайла Из ДанныеДляФормированияОшибкиСППР.МассивСкриншотов Цикл
			Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
				Если ДанныеДляФормированияОшибкиСППР.Свойство("РегистрацияОшибкиИзСекцииИсключение")
						И ДанныеДляФормированияОшибкиСППР.РегистрацияОшибкиИзСекцииИсключение Тогда
						
					Если ДанныеФайла.Свойство("ШагСвязанныйСФайломИдСтроки") Тогда
						
						Если ДанныеДляФормированияОшибкиСППР.РегистрацияОшибки Тогда
							//Значит это скриншот добавлен при регистрации ошибки из секции Исключение
							Если ДанныеДляФормированияОшибкиСППР.ТекШагИдСтроки <> ДанныеФайла.ШагСвязанныйСФайломИдСтроки Тогда
								Продолжить;
							КонецЕсли;	 
						КонецЕсли;	 
						
					КонецЕсли;	 
				КонецЕсли;	 
				
				Файл = Новый Файл(ДанныеФайла.ИмяФайла);
				ИменаФайлов.Добавить(КаталогВыгрузкиСППР + "\" + Файл.Имя);
			Иначе
				Файл = Новый Файл(ДанныеФайла);
				ИменаФайлов.Добавить(КаталогВыгрузкиСППР + "\" + Файл.Имя);
			КонецЕсли;	 
		КонецЦикла;	
	КонецЕсли;	 
	
	Если ФайлыМакетов <> Неопределено Тогда
		Для Каждого ИмяФайла Из ФайлыМакетов Цикл
			ИменаФайлов.Добавить(ИмяФайла);
		КонецЦикла;	 
	КонецЕсли;
	
	СтруктураОшибки.Вставить("ИменаФайлов", ИменаФайлов);
	СтруктураОшибки.Вставить("ВерсияПлатформы", СистемнаяИнформация.ВерсияПриложения);
	СтруктураОшибки.Вставить("СерверОперативнаяПамять", СистемнаяИнформация.ОперативнаяПамять);
	СтруктураОшибки.Вставить("СерверВерсияОС", СистемнаяИнформация.ВерсияОС);
	СтруктураОшибки.Вставить("СерверПроцессор", СистемнаяИнформация.Процессор);
	СтруктураОшибки.Вставить("СерверТипПлатформы", Строка(СистемнаяИнформация.ТипПлатформы));
	СтруктураОшибки.Вставить("СерверИнформацияПрограммыПросмотра", СистемнаяИнформация.ИнформацияПрограммыПросмотра);					
	СтруктураОшибки.Вставить("ДатаОбнаружения", ТекущаяДатаСеанса());
	СтруктураОшибки.Вставить("ДостоверностьОбнаружения", "Высокая");
	
	СтруктураОшибки.ИмяКонфигурации = ДанныеДляФормированияОшибкиСППР.ИмяКонфигурацииСППР;
	СтруктураОшибки.ВерсияКонфигурации = ДанныеДляФормированияОшибкиСППР.ВерсияКонфигурацииСППР;
	
	Если НЕ ЗначениеЗаполнено(СтруктураОшибки.ИмяКонфигурации) Тогда
		СтруктураОшибки.Вставить("ИмяКонфигурации", Метаданные.Имя);
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(СтруктураОшибки.ВерсияКонфигурации) Тогда
		СтруктураОшибки.Вставить("ВерсияКонфигурации", Метаданные.Версия);
	КонецЕсли;	
	
	ДобавитьЗначенияИзТеговСценария(СтруктураОшибки, МассивТегов);
	СтруктураОшибки.Вставить("ИмяСценария", ИмяСценария);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, СтруктураОшибки);
	
	Возврат ЗаписьXML.Закрыть();
КонецФункции

&НаСервереБезКонтекста
Функция ПорядокВоспроизведения(ДанныеДляФормированияОшибкиСППР, РезультатПрохожденияТестовСценария, ИмяСценария,
	МассивТегов, ОписаниеОшибки)
	
	КомпонентыРезультата = Новый Массив;
	КомпонентыРезультата.Добавить(ИмяСценария);
	ДополнитьСтекомВызова(КомпонентыРезультата, ИмяСценария, МассивТегов);
	ДополнитьРезультатомПрохожденияШагов(КомпонентыРезультата, РезультатПрохожденияТестовСценария);
	ДополнитьСкриншоты(КомпонентыРезультата, РезультатПрохожденияТестовСценария);
	КомпонентыРезультата.Добавить("");
	КомпонентыРезультата.Добавить(ОписаниеОшибки);
	
	Результат = МассивВСтрокуНаСервереБезКонтекста(КомпонентыРезультата, ,
		ДанныеДляФормированияОшибкиСППР.ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок);
		
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьСтекомВызова(КомпонентыРезультата, ИмяСценария, МассивТегов)
	
	Если ТипЗнч(МассивТегов) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСценария = ЗначениеИзТегаСценария(МассивТегов, "UIDСценария=");
	Если Не ЗначениеЗаполнено(ИдентификаторСценария) Тогда
		ИдентификаторСценария = "00000000-0000-0000-0000-000000000000";
	КонецЕсли;
	
	СтрокаСтека = ПодставитьПараметрыВСтрокуСервер("%1;0;%2;", ИмяСценария, ИдентификаторСценария);
	
	КомпонентыРезультата.Добавить("");
	КомпонентыРезультата.Добавить(НСтр("ru = 'Стек вызова:'"));
	КомпонентыРезультата.Добавить(СтрокаСтека);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УточнениеРасположения(ДанныеДляФормированияОшибкиСППР, РезультатПрохожденияТестовСценария, ИмяСценария)
	
	КомпонентыРезультата = Новый Массив;
	КомпонентыРезультата.Добавить(ИмяСценария);
	ДополнитьРезультатомПрохожденияШагов(КомпонентыРезультата, РезультатПрохожденияТестовСценария);
	
	Результат = МассивВСтрокуНаСервереБезКонтекста(КомпонентыРезультата, ,
		ДанныеДляФормированияОшибкиСППР.ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок);
		
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьРезультатомПрохожденияШагов(КомпонентыРезультата, РезультатПрохожденияТестовСценария,
	КоличествоПоследнихШагов = 5)
	
	ИндексСтрокиСОшибкой = Неопределено;
	
	Индекс = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов.ВГраница();
	Пока Индекс >= 0 Цикл
		Если РезультатПрохожденияТестовСценария.Статус
			= РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов[Индекс].Статус Тогда
			ИндексСтрокиСОшибкой = Индекс;
			Прервать;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Если ИндексСтрокиСОшибкой = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоследниеШаги = Новый Массив;
	ПоследниеШаги.Вставить(0,
		РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов[ИндексСтрокиСОшибкой].Имя);
	
	Для Индекс = 1 По КоличествоПоследнихШагов - 1 Цикл
		
		ТекущийИндекс = ИндексСтрокиСОшибкой - Индекс;
		Если ТекущийИндекс < 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если РезультатПрохожденияТестовСценария.Статус
			= РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов[ТекущийИндекс].Статус Тогда
			Прервать;
		КонецЕсли;
		
		ПоследниеШаги.Вставить(0,
			РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов[ТекущийИндекс].Имя);
		
	КонецЦикла;
	
	КомпонентыРезультата.Добавить("");
	КомпонентыРезультата.Добавить(НСтр("ru = 'Шаги'"));
	
	Для Каждого ПоследнийШаг Из ПоследниеШаги Цикл
		КомпонентыРезультата.Добавить(ПоследнийШаг);
	КонецЦикла;
	
	КомпонентыРезультата.Добавить(НСтр("ru = 'Последний шаг не выполнен.'"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьСкриншоты(КомпонентыРезультата, РезультатПрохожденияТестовСценария)
	
	Если Не ЗначениеЗаполнено(РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов) Тогда
		Возврат;
	КонецЕсли;
	
	Для Индекс = 0 По РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов.ВГраница() Цикл
		Если РезультатПрохожденияТестовСценария.Статус
			= РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов[Индекс].Статус Тогда
			Если РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов[Индекс].Свойство(
				"СписокФайлов") Тогда
				КомпонентыРезультата.Добавить("");
				КомпонентыРезультата.Добавить(
					НСтр("ru = 'Для получения дополнительной информации см. приложенные скриншоты.'"));
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьЗначенияИзТеговСценария(СтруктураОшибки, МассивТегов)
	
	Если Не ЗначениеЗаполнено(МассивТегов) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаТегов = Новый Массив;
	ИменаТегов.Добавить("UIDОтветственный");
	ИменаТегов.Добавить("ИмяНастройкиСценария");
	ИменаТегов.Добавить("UIDРазделПроекта");
	ИменаТегов.Добавить("UIDНастройкиСценария");
	ИменаТегов.Добавить("КодНастройкиСценария");
	ИменаТегов.Добавить("UIDСценария");
	ИменаТегов.Добавить("КодСценария");
	
	Для Каждого ТекущееИмяТега Из ИменаТегов Цикл
		НачалоТега = ПодставитьПараметрыВСтрокуСервер("%1=", ТекущееИмяТега);
		ЗначениеТега = ЗначениеИзТегаСценария(МассивТегов, НачалоТега);
		Если ЗначениеТега <> Неопределено Тогда
			СтруктураОшибки.Вставить(ТекущееИмяТега, ЗначениеТега);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеИзТегаСценария(МассивТегов, НачалоТега)
	НрегНачалоТега = Нрег(НачалоТега);
	СтрДлинаНачалоТега = СтрДлина(НачалоТега) + 1;
	Для Каждого Элем Из МассивТегов Цикл
		Если Найти(Элем.Тег, НрегНачалоТега) = 1 Тогда
			Возврат Сред(Элем.Тег, СтрДлинаНачалоТега); 
		КонецЕсли;	 
	КонецЦикла;	 
КонецФункции	 

&НаКлиенте
Процедура СформироватьОшибкуСППР(ДанныеДляФормированияОшибкиСППР)
	СтрокаСценария = ДанныеДляФормированияОшибкиСППР.СтрокаСценария;
	ДанныеДляФормированияОшибкиСППР.Вставить("СтрокаСценария", Неопределено);
	РезультатПрохожденияТестовСценария = ДанныеДляФормированияОшибкиСППР.РезультатПрохожденияТестовСценария;
	
	МассивТегов = Неопределено;
	Если СтрокаСценария <> Неопределено И ТипЗнч(СтрокаСценария.ПроизвольныеЗначения) = Тип("Структура") Тогда
		Если СтрокаСценария.ПроизвольныеЗначения.Свойство("МассивТегов") Тогда
			МассивТегов = СтрокаСценария.ПроизвольныеЗначения.МассивТегов;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТекущаяУниверсальнаяДатаСтрока = ТекущаяУниверсальнаяДатаСтрока();
	
	ФайлыМакетов = Новый Массив;
	Если ДанныеДляФормированияОшибкиСППР.ПрикрепленныеМакеты <> Неопределено Тогда
		Для Каждого ТекМакет Из ДанныеДляФормированияОшибкиСППР.ПрикрепленныеМакеты Цикл
			
			ДанныеФайла = ТекМакет.Значение;
			ИмяМакета = ДанныеФайла.Имя + "_" + ТекущаяУниверсальнаяДатаСтрока;
			ИмяМакета = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяМакета);
			
			ИмяПрикрепленногоФайла = ДополнитьСлешВПуть(Объект.КаталогВыгрузкиСППР) + ИмяМакета + ".mxl";
			ФайлыМакетов.Добавить(ИмяПрикрепленногоФайла);
			
			Попытка
				ДанныеФайла.Макет.НачатьЗапись(,ИмяПрикрепленногоФайла);
			Исключение
				СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;	
	КонецЕсли;	 
	
	ТекИД_ВыполненногоШагаВМассиве = ТекИД_ШагаВМассиве;
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	Если СтрокаСценария.ПроизвольныеЗначения.Свойство("МассивСкриншотов") Тогда
		Для Каждого ДанныеФайла Из СтрокаСценария.ПроизвольныеЗначения.МассивСкриншотов Цикл
			Если ТипЗнч(ДанныеФайла) = Тип("Структура") И ДанныеФайла.Свойство("ИдШага") Тогда
				ШагСвязанныйСФайлом = Шаги[ДанныеФайла.ИдШага];
				ДанныеФайла.Вставить("ШагСвязанныйСФайломИдСтроки", ШагСвязанныйСФайлом.ИдСтроки);
			КонецЕсли;	 
		КонецЦикла;
	КонецЕсли;	
	
	ТекШаг = Шаги[ТекИД_ШагаВМассиве];
	ДанныеДляФормированияОшибкиСППР.Вставить("ТекШагИдСтроки", ТекШаг.ИдСтроки);
	ДанныеДляФормированияОшибкиСППР.Вставить("РегистрацияОшибки", Ложь);
	Если НЕ СтрокаСценария.ПроизвольныеЗначения.Свойство("МассивСкриншотов") Тогда
		СтрокаСценария.ПроизвольныеЗначения.Вставить("МассивСкриншотов", Новый Массив);
	КонецЕсли;	
	ДанныеДляФормированияОшибкиСППР.Вставить("МассивСкриншотов", СтрокаСценария.ПроизвольныеЗначения.МассивСкриншотов);
	Если ТекШаг.Свойство("РегистрацияОшибки") Тогда
		ДанныеДляФормированияОшибкиСППР.Вставить("РегистрацияОшибки", ТекШаг.РегистрацияОшибки);
	КонецЕсли;
	
	ДанныеДляФормированияОшибкиСППР.Вставить("ИмяКонфигурацииСППР", Объект.ИмяКонфигурацииСППР);
	ДанныеДляФормированияОшибкиСППР.Вставить("ВерсияКонфигурацииСППР", Объект.ВерсияКонфигурацииСППР);

	ТекстОшибкиXMLСППР = ТекстОшибкиXMLСППР(ДанныеДляФормированияОшибкиСППР, РезультатПрохожденияТестовСценария,
		Объект.КаталогВыгрузкиСППР, МассивТегов, СтрокаСценария.Имя, ФайлыМакетов);
	
	ТекстовыйДокументОшибка = Новый ТекстовыйДокумент;
	ТекстовыйДокументОшибка.УстановитьТекст(ТекстОшибкиXMLСППР);
		
	ИмяXML = "BDD_Error_%1_%2.xml";
	ИмяXML = СтрЗаменить(ИмяXML, "%1", Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss"));
	ИмяXML = СтрЗаменить(ИмяXML, "%2", Строка(Новый УникальныйИдентификатор()));
	ИмяФайлаОшибки = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиСППР)) + ИмяXML;
	ТекстовыйДокументОшибка.НачатьЗапись(,ИмяФайлаОшибки);	
	
	ПутьВыгрузкиСкриншотоввСППР = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиСППР));
	Если НЕ ФайлСуществуетКомандаСистемы(ПутьВыгрузкиСкриншотоввСППР) Тогда
		СоздатьКаталогКомандаСистемы(ПутьВыгрузкиСкриншотоввСППР);
	КонецЕсли;	 
	
	Для каждого ДанныеФайла Из ДанныеДляФормированияОшибкиСППР.МассивСкриншотов Цикл
		Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
			Файл = Новый Файл(ДанныеФайла.ИмяФайла);
		Иначе
			Файл = Новый Файл(ДанныеФайла);
		КонецЕсли;	 
		Если ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя) Тогда
			ИмяСнимкаЭкранаСППР = ПутьВыгрузкиСкриншотоввСППР + ПолучитьРазделительПутиКлиента() + Файл.Имя;
			КопироватьФайлКомандаСистемы(Файл.ПолноеИмя, ИмяСнимкаЭкранаСППР);
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры 

&НаКлиенте
Процедура ПерейтиКВыполнениюСледующегоСценария()
	
	Если НадоЗарегистрироватьОшибкуИзСекцииИсключение Тогда
		ЗарегистрироватьОшибкуИзСекцииИсключение();
	КонецЕсли;	 

	ОбработатьСохраненныеДанныеСборДанныхДляОтчетов();
	
	Если ИменаФайловДляПрикрепления <> Неопределено И ИменаФайловДляПрикрепления.Количество() > 0 Тогда
		ПодключитьОбработчикОжидания("ПерейтиКВыполнениюСледующегоСценарияПрикреплениеФайлов" ,0.1, Истина);
		Возврат;
	КонецЕсли;	 
	
	Если ТекИД_СценарияВМассиве >= 0 Тогда
		ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		СтрокаСценария   = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
		ЗавершитьЗаписьВыполненияТестов(СтрокаСценария);
		
		РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		Если РезультатПрохожденияТестовСценария <> Неопределено И РезультатПрохожденияТестовСценария.Свойство("Статус") И РезультатПрохожденияТестовСценария.Статус <> "Success" Тогда
			Если НЕ РезультатПрохожденияТестовСценария.Свойство("ВСценарииБылиШагиРегистрирующиеОшибкиИзПопыткиИсключение")
					ИЛИ (РезультатПрохожденияТестовСценария.Свойство("ВозниклаОшибкаВШагеНеВСекцииИсключение") И РезультатПрохожденияТестовСценария.ВозниклаОшибкаВШагеНеВСекцииИсключение) Тогда
					
				//Ошибки в формате Json	
				Если Объект.ДелатьЛогОшибокВТекстовыйФайл И РезультатПрохожденияТестовСценария.Свойство("ДанныеДляФормированияJsonОбОшибке") Тогда
					СтруктураЛогаОшибки = ПолучитьЛогОшибки(СтрокаСценария, РезультатПрохожденияТестовСценария.ДанныеДляФормированияJsonОбОшибке);
					
					РезультатПрохожденияТестовСценария.Вставить("ЛогОшибки", СтруктураЛогаОшибки);
					ЗаписатьЛогОшибки(СтруктураЛогаОшибки);
				КонецЕсли;	 
				
				Если Объект.ДелатьОтчетВФорматеСППР Тогда
					
					Если ТипЗнч(СтрокаСценария.ПроизвольныеЗначения) = Тип("Неопределено")  Тогда
						СтрокаСценария.ПроизвольныеЗначения = Новый Структура;
					КонецЕсли;	
					
					Если НЕ СтрокаСценария.ПроизвольныеЗначения.Свойство("ПрикрепленныеМакеты") Тогда
						СтрокаСценария.ПроизвольныеЗначения.Вставить("ПрикрепленныеМакеты", Новый Соответствие);
					КонецЕсли;	
					
					ДанныеДляФормированияОшибкиСППР = Новый Структура;
					ДанныеДляФормированияОшибкиСППР.Вставить("СтрокаСценария", СтрокаСценария);
					ДанныеДляФормированияОшибкиСППР.Вставить("РезультатПрохожденияТестовСценария", РезультатПрохожденияТестовСценария);
					ДанныеДляФормированияОшибкиСППР.Вставить("ПрикрепленныеМакеты", СтрокаСценария.ПроизвольныеЗначения.ПрикрепленныеМакеты);
					ДанныеДляФормированияОшибкиСППР.Вставить("РегистрацияОшибкиИзСекцииИсключение", Ложь);
					ДанныеДляФормированияОшибкиСППР.Вставить("ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок",
						ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок);
					
					СформироватьОшибкуСППР(ДанныеДляФормированияОшибкиСППР);
					
				КонецЕсли;	 
				
			КонецЕсли;   

		КонецЕсли;	 

		Если НастройкиTeamCity.Используется Тогда      
			ЗавершитьТестTeamCity(СтрокаСценария, РезультатПрохожденияТестовСценария);
		КонецЕсли;
		
		Если Объект.ИспользоватьРедакторVanessaEditor Тогда
			ЭкземплярVanessaEditor = ПолучитьVanessaEditor();
			Если ЭкземплярVanessaEditor <> Неопределено Тогда
				ЭкземплярVanessaEditor.setCurrentProgress(0);
			КонецЕсли;	 
			ДанныеСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве];
			Если НЕ ДанныеСценария.ЭтоСтруктураСценария Тогда
				Если ДанныеСценария.ТекущийНомерСтрокиПодсценария <> Неопределено Тогда
					РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
					
					НадоПоставитьСтатусУспешно = Истина;
					Если РезультатПрохожденияТестовСценария.Свойство("Статус") И СтатусСценарияСоответствуетВыполненСОшибкой(РезультатПрохожденияТестовСценария.Статус) Тогда
						НадоПоставитьСтатусУспешно = Ложь;
					КонецЕсли;	 
					
					Если НадоПоставитьСтатусУспешно Тогда
						МодульРедакторТекста().ОбновитьСтатусВыполненногоПодсценарияФичи(ДанныеСценария.ТекущийНомерСтрокиПодсценария);
					КонецЕсли;	 
					
					ЭкземплярVanessaEditor = ПолучитьVanessaEditor();
					Если ЭкземплярVanessaEditor <> Неопределено Тогда
						ПолучитьVanessaEditor().setStackStatus(Ложь, ДанныеСценария.ТекущийНомерСтрокиПодсценария);
					КонецЕсли;	 
					ДанныеСценария.ТекущийНомерСтрокиПодсценария = Неопределено;
				КонецЕсли;	
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	Если ТекИД_СценарияВМассиве >= 0 Тогда
		Если Не Объект.РежимВыполненияОдногоШага Тогда
			ВывестиСтатистикуКлиент();
		Иначе	
			ОбновитьЗначенияВТаблоПеременных();
		КонецЕсли;	 
	КонецЕсли;	 
	
	ОстановитьЗаписьВидеоОдногоШага();
	
	Если ПрекратитьВыполнениеВсехСценариев Тогда
		СделатьСообщениеВсеСценарииОбработаны();
		Объект.ИдетВыполнениеСценариев = Ложь;
		ОбновитьСтатусыКнопокСценариев();
		УстановитьФлагиВыполненияСценариев();
		Если Объект.ЗапускИзКоманднойСтроки Тогда
			ВыполнитьСценарийАсинхронноТаймер();
		КонецЕсли;	 
		Если Объект.ИспользоватьРедакторVanessaEditor Тогда
			МодульРедакторТекста().УстановитьЗначенияПеременныхVanessaEditor();
			МодульРедакторТекста().ВключитьЧтениеДанныхТекущейФормыVanessaEditor();
		КонецЕсли;	 
		ПодключитьОбработчикОжидания("ВыполнитьСценарийАсинхронноТаймерЗавершение", 0.1, Истина);
		Возврат;
	КонецЕсли;	 
	
	Если Объект.РежимВыполненияОдногоШага Тогда
		Если ТекИД_СценарияВМассиве >= 0 Тогда
			Объект.ИдетВыполнениеСценариев = Ложь;
			ОбновитьСтатусыКнопокСценариев();
			
			Если Объект.ИспользоватьРедакторVanessaEditor И Элементы.ДеревоТестов.ТекущиеДанные = Неопределено И ТекущаяПозицияVanessaEditor <> Неопределено Тогда
				СделатьСтрокуДереваТекущейПоНомеруСтрокиФичи(ТекущаяПозицияVanessaEditor.LineNumber);
			КонецЕсли;	 
			
			ОпределитьСледующуюСтрокуДереваДляВыполненияРежимВыполненияОдногоШага(Элементы.ДеревоТестов);
			УстановитьФлагиВыполненияСценариев();
			
			Если Объект.ИспользоватьРедакторVanessaEditor Тогда
				Если Элементы.ДеревоТестов.ТекущиеДанные <> Неопределено Тогда
					АктивизироватьСтрокуРедактораПоИдСтрокиИНомеруСтрокиФичи(Элементы.ДеревоТестов.ТекущиеДанные.ИдСтроки,
						Элементы.ДеревоТестов.ТекущиеДанные.НомерСтрокиВФиче);
				КонецЕсли;	 
				
				МодульРедакторТекста().УстановитьЗначенияПеременныхVanessaEditor();
			КонецЕсли;	 
			
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ПрекратитьВыполнениеДанногоСценария = Ложь;
	НадоВыполнитьСценарийЕщёРаз = Ложь;
	
	Если Объект.КоличествоПопытокВыполненияСценария > 1
		И НомерПопыткиВыполненияСценария < Объект.КоличествоПопытокВыполненияСценария
		И НомерПопыткиВыполненияСценария >= 1
		И ТекИД_СценарияВМассиве <> Неопределено
		И ТекИД_СценарияВМассиве >= 0
		Тогда
			//Значит сценарий выполнился и надо проверить его статус. Возможно надо запустить сценарий ещё раз.
			ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
			РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
			
			Если ТипЗнч(РезультатПрохожденияТестовСценария) = Тип("Структура")
				И РезультатПрохожденияТестовСценария.Свойство("Статус")
				И РезультатПрохожденияТестовСценария.Статус = "Failed"
				Тогда
				
					НадоВыполнитьСценарийЕщёРаз = Истина;
			КонецЕсли;	
			
	КонецЕсли;
	
	Если НадоВыполнитьСценарийЕщёРаз Тогда
		НомерПопыткиВыполненияСценария = НомерПопыткиВыполненияСценария + 1;
		ЗаписатьЛогВЖРИнформация("ЗапускСценарияЕщёРаз", ПодставитьПараметрыВСтроку(Локализовать("Выполнение сценария <%1> ещё раз. Попытка №%2"),
			МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Имя, НомерПопыткиВыполненияСценария));
	Иначе	
		ТекИД_СценарияВМассиве = ТекИД_СценарияВМассиве + 1;
		НомерПопыткиВыполненияСценария = 1;
	КонецЕсли;	
	
	Если ПрекратитьВыполнениеСценариевДаннойФичи Тогда
		ПрекратитьВыполнениеСценариевДаннойФичи = Ложь;
		Пока Истина Цикл
			Если ТекИД_СценарияВМассиве > (МассивСценариевДляВыполнения.Количество() - 1) Тогда
				Прервать;
			КонецЕсли;	 
			
			ТекСценарий = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве];
			Если НРег(ТекСценарий.ПолныйПутьКФиче) = НРег(ИмяФайлаФичиВКоторойПрекращеноВыполнениеСценариев) Тогда
				ТекИД_СценарияВМассиве = ТекИД_СценарияВМассиве + 1;
				Продолжить;
			КонецЕсли;	 
			
			Прервать;
		КонецЦикла;	
	КонецЕсли;	 
	
	Если Объект.ОбновлятьДеревоПриНачалеВыполненияСценария Тогда
		ПодключитьОбработчикОжидания("ВыполнитьСценарийАсинхронноТаймер", Объект.ИнтервалВыполненияШага, Истина);
	Иначе	
		ВыполнитьСценарийАсинхронноТаймер();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьСтрокуДереваТекущегоШага(ИдСтрокиДерева = Неопределено, ВозниклаОшибка = Ложь)
	Если Объект.ЗапускИзКоманднойСтроки И НЕ ВозниклаОшибка Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	 
	
	ИдСтрокиДляАктивации = ИдСтрокиДерева;
	Если ИдСтрокиДляАктивации = Неопределено Тогда
		ИдСтрокиДляАктивации = ТекИД_ШагаВМассиве;
	КонецЕсли;
	
	Если ИдСтрокиДляАктивации = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Если (ТекИД_СценарияВМассиве >= 0) И (ТекИД_СценарияВМассиве <= (МассивСценариевДляВыполнения.Количество() - 1)) Тогда
		Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		Если (Шаги.Количество() - 1) >= ИдСтрокиДляАктивации Тогда
			Если Объект.РежимВыполненияОдногоШага Тогда
				СтрокаШага = НайтиСтрокуДереваПоДаннымПоиска(СтруктураПоискаСтрокДерева.ДанныеПоискаСтрокиШага);
				Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаШага.ПолучитьИдентификатор();
			Иначе	
				Если ИдСтрокиДляАктивации >= 0 Тогда
					СтрокаШага = МассивСтрокДереваДанныеФормы[Шаги[ИдСтрокиДляАктивации].СтрокаШага];
					Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаШага.ПолучитьИдентификатор();
				КонецЕсли;	 
			КонецЕсли;	 
			
		КонецЕсли;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВыполнениюСледующегоШагаОбработчик() Экспорт
	ПерейтиКВыполнениюСледующегоШага(
		ПараметрыВызоваПерейтиКВыполнениюСледующегоШагаОкончание.ВыполнитьШагЧерезТаймер,
		ПараметрыВызоваПерейтиКВыполнениюСледующегоШагаОкончание.НадоОбновитьСтатусШага,
		ПараметрыВызоваПерейтиКВыполнениюСледующегоШагаОкончание.ИдСледующегоШага
		);
КонецПроцедуры 

&НаКлиенте
Процедура ПерейтиКВыполнениюСледующегоШага(ВыполнитьШагЧерезТаймер = Неопределено, НадоОбновитьСтатусШага = Ложь, Знач ИдСледующегоШага = Неопределено)
	
	Если НадоЗарегистрироватьОшибкуИзСекцииИсключение Тогда
		ЗарегистрироватьОшибкуИзСекцииИсключение();
	КонецЕсли;	 
	
	Если ОстановитьВыполнениеШагов ИЛИ ТекИД_СценарияВМассиве = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ПрекратитьВыполнениеВсехСценариев Тогда
		ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить("ДатаОкончания", ТекущаяДата());
		РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", "");
		СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
		РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче", СтрокаСценария.НомерСтрокиВФиче);
		ПерейтиКВыполнениюСледующегоСценария();
		Возврат;
	КонецЕсли;
	
	ОбработатьСохраненныеДанныеСборДанныхДляОтчетов();
	
	ШагОпределен = (ТекИД_СценарияВМассиве <> Неопределено) И (ТекИД_СценарияВМассиве >= 0) 
				И (ТекИД_ШагаВМассиве >= 0) И (ТекИД_СценарияВМассиве <= (МассивСценариевДляВыполнения.Количество() - 1));
	Если ШагОпределен Тогда
		Шаги   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		Если ТекИД_ШагаВМассиве <= (Шаги.Количество() - 1) Тогда
			ТекШаг = Шаги[ТекИД_ШагаВМассиве];
			
			Если ТекШаг.Свойство("ШагСчитаетсяУпавшим") И ТекШаг.ШагСчитаетсяУпавшим Тогда
				СтатусЗапускаСценариев = Ложь;
				
				ИДСтрокиШага                       = ТекШаг.СтрокаШага;
				ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
				РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
				РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
				
				СтрокаШага     = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);
				СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
				
				СтрокаШага.Статус      = "Failed";
				СтрокаШага.ТипКартинки = 5;
				СтрокаСценария.Статус  = СтрокаШага.Статус;
				АдресСнипета           = ТекШаг.АдресСнипета;
				ИмяПроцедуры           = ТекШаг.СтрокаРеальнойПроцедуры;
				
				СообщитьПользователю (ПодставитьПараметрыВСтроку(
					Локализовать("Шаг (%1) не выполнен."),
					ТекШаг.Имя
				));
				
				Если ТекШаг.Свойство("ОписаниеОшибки") Тогда
					ОписаниеОшибки = ТекШаг.ОписаниеОшибки;
				Иначе	
					ОписаниеОшибки = "";
				КонецЕсли;	
				Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					ОписаниеОшибки = ОписаниеОшибки();
				КонецЕсли;	 
				
				ИнфоОбОшибке = Неопределено;
				ТекстИсключенияПлатформы = "";
				ОписаниеОшибки = СформироватьОписаниеОшибки(ОписаниеОшибки, АдресСнипета, ИмяПроцедуры, ИнфоОбОшибке, ТекстИсключенияПлатформы);
				ЗаписатьВЖРДанныеОНастройкахVanessaAutomation();
				ОписаниеОшибкиКраткоVanessaEditor = МодульРедакторТекста().ОписаниеОшибкиКраткоVanessaEditor(ОписаниеОшибки);
				Если Объект.ИспользоватьРедакторVanessaEditor Тогда
					ШагиСОшибкамиVanessaEditor.Добавить(ТекШаг.НомерСтрокиВФиче);
					МодульРедакторТекста().УстановитьУпавшийШагVanessaEditor(ТекШаг, ОписаниеОшибки, ОписаниеОшибкиКраткоVanessaEditor, СтрокаШага);
				КонецЕсли;	 
				
				СтрокаСценария.ТекстОшибки = ОписаниеОшибки;
				СтрокаШага.ТекстОшибки     = ОписаниеОшибки;
				
				РезультатПрохожденияШага = РезультатПрохожденияТестовШагов[РезультатПрохожденияТестовШагов.Количество() - 1];
				
				РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
				РезультатПрохожденияТестовСценария.Вставить("ДатаОкончания", ТекущаяДата());
				РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", ОписаниеОшибки);
				РезультатПрохожденияТестовСценария.Вставить("Статус", СтрокаШага.Статус);
				РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче", СтрокаСценария.НомерСтрокиВФиче);
				РезультатПрохожденияШага.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
				РезультатПрохожденияШага.Вставить("ОписаниеОшибки", ОписаниеОшибки);
				РезультатПрохожденияШага.Вставить("Статус", СтрокаШага.Статус);
				РезультатПрохожденияШага.Вставить("НомерСтрокиВФиче", СтрокаШага.НомерСтрокиВФиче);
				
				Если ТекШаг.Свойство("ПеременныеДляСохраненияВШаг") Тогда
					ОбработатьПеременныеДляСохраненияВШаг(РезультатПрохожденияШага, ТекШаг);
				КонецЕсли;	 
				
				СообщитьПользователю(ОписаниеОшибки);
				
				ОписаниеОшибкиШага = Локализовать("Шаг") + " (" + ТекШаг.Имя + ") " + Локализовать("не выполнен") + ".";
				
				ДанныеДляФормированияJsonОбОшибке = ДанныеДляФормированияJsonОбОшибке(ОписаниеОшибки, ИнфоОбОшибке, ОписаниеОшибкиШага, ИДСтрокиШага, ТекстИсключенияПлатформы, ОписаниеОшибкиКраткоVanessaEditor, ОписаниеОшибки);
				РезультатПрохожденияТестовСценария.Вставить("ДанныеДляФормированияJsonОбОшибке", ДанныеДляФормированияJsonОбОшибке);
				
				Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
					ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(ПодставитьПараметрыВСтроку(
						Локализовать("Failed: %1"),
						ОписаниеОшибки
					));
					
					Статистика_ЗафиксироватьОшибка();
					
				КонецЕсли;	 
				
				БылаОшибка     = Ложь;
				ОписаниеОшибки = "";
				ДействияПослеЗавершенияСценария(СтрокаСценария, БылаОшибка, ОписаниеОшибки);
				
				СтрокаСценария.Статус = "Failed";
				Статистика_ЗафиксироватьОшибка();
				Если БылаОшибка Тогда
					РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", ОписаниеОшибки);
					РезультатПрохожденияТестовСценария.Вставить("Статус", СтрокаСценария.Статус);
				КонецЕсли;	 
				ПрекратитьВыполнениеШаговТакКакЗакончилсяСценарий = Истина;
				
				СборДанныхДляОтчетов(РезультатПрохожденияТестовСценария, СтрокаСценария, РезультатПрохожденияШага, "");
				
				ОстановитьЗаписьВидеоОдногоШага();
				
				ПроверитьФлагОстановкаПриВозникновенииОшибки();
				
				Если Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
					СделатьСкриншотВозникновенияОшибкиИПерейтиКВыполнениюСледующегоСценария(СтрокаШага, СтрокаСценария, РезультатПрохожденияТестовСценария);
				Иначе	
					ПерейтиКВыполнениюСледующегоСценария();
				КонецЕсли;	 

				Возврат;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если НадоОбновитьСтатусШага И ТекИД_ШагаВМассиве >= 0 Тогда
			
		Шаги   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		ТекШаг = Шаги[ТекИД_ШагаВМассиве];
			
		ИДСтрокиШага                       = ТекШаг.СтрокаШага;
		ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
			
		СтрокаШага     = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);
		СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
		
		ШагаНетВДереве = Ложь;
		Если ТекШаг.Свойство("ШагаНетВДереве") Тогда
			ШагаНетВДереве = ТекШаг.ШагаНетВДереве;
		КонецЕсли;	 
		Если НЕ ШагаНетВДереве Тогда
			СтрокаШага.Статус = "Success";
			СтрокаШага.ТипКартинки = 4;
		КонецЕсли;	 
			
		РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче", СтрокаСценария.НомерСтрокиВФиче);
		
		РезультатПрохожденияШага = РезультатПрохожденияТестовШагов[РезультатПрохожденияТестовШагов.Количество() - 1];
		РезультатПрохожденияШага.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить("Статус", СтрокаШага.Статус);
		РезультатПрохожденияШага.Вставить("НомерСтрокиВФиче", СтрокаШага.НомерСтрокиВФиче);
		Если ТекШаг.Свойство("ПеременныеДляСохраненияВШаг") Тогда
			ОбработатьПеременныеДляСохраненияВШаг(РезультатПрохожденияШага, ТекШаг);
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	
	Если ТекИД_ШагаВМассиве = -1 
			// это надо т.к. в определенных случаях таймер, подключающий следующий шаг, может не сработать
		ИЛИ ТекИД_ШагаВМассиве = ТекИД_ВыполненногоШагаВМассиве Тогда
			
		Если ТекИД_ШагаВМассиве = -1 И Объект.ИспользоватьРедакторVanessaEditor Тогда
			Если Шаги.Количество() > 0 Тогда
				МодульРедакторТекста().УстановитьТекущийШагVanessaEditor(Шаги[0]);
			КонецЕсли;	 	
		КонецЕсли;	 
		
		ТекИД_ШагаВМассиве = ТекИД_ШагаВМассиве + 1;
		
		Если ИдСтрокиДляВыполненияСледующегоШага <> Неопределено Тогда
			Ид = -1;
			Для Каждого ТекШаг Из Шаги Цикл
				Ид = Ид + 1;
				Если ТекШаг.ИдСтроки = ИдСтрокиДляВыполненияСледующегоШага Тогда
					ТекИД_ШагаВМассиве = Ид;
					ИдСтрокиДляВыполненияСледующегоШага = Неопределено;
					ИдСледующегоШага = Неопределено;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ИдСледующегоШага <> Неопределено Тогда
		Если ИдСледующегоШага.ИД <> Неопределено И ИдСледующегоШага.ИД <> -1 Тогда
			// значит явно указано с какого шага надо продолжить
			КопияТекИД_ШагаВМассиве = ТекИД_ШагаВМассиве;
			Если ИдСледующегоШага.ИскатьПоИдСтроки Тогда
					
				НашлиШаг = Ложь;
				Для Сч = ТекИД_ШагаВМассиве - 1 По Шаги.Количество() - 1 Цикл
					Если Сч >= 0 Тогда
						Если ИдСледующегоШага.ИД = Шаги[Сч].СтрокаШага Тогда
							// нашли нужный ИД
							ТекИД_ШагаВМассиве = Сч;
							НашлиШаг           = Истина;
							Прервать;
						ИначеЕсли ИдСледующегоШага.ИД < Шаги[СЧ].СтрокаШага Тогда
							Прервать;
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЦикла;	
					
				Если Не НашлиШаг Тогда
					ТекИД_ШагаВМассиве = ТекИД_ШагаВМассиве - 1;
					Пока ТекИД_ШагаВМассиве >= 0 Цикл
						Если ИдСледующегоШага.ИД = Шаги[ТекИД_ШагаВМассиве].СтрокаШага Тогда
							// нашли нужный ИД
							НашлиШаг           = Истина;
							Прервать;
						КонецЕсли;	 
						ТекИД_ШагаВМассиве = ТекИД_ШагаВМассиве - 1;
					КонецЦикла;	
				КонецЕсли;	 
				
				Если Не НашлиШаг Тогда
					Если ВыполнениеДиапазонаШаговVanessaEditor Тогда
						ТекИД_ШагаВМассиве = КопияТекИД_ШагаВМассиве + 1;
					Иначе	
						Если НЕ Объект.РежимВыполненияОдногоШага Тогда
							ВызватьИсключение Локализовать("Не получилось определить следующий шаг для выполнения.");
						Иначе	
							// Это значит, что далее некуда переходить
							// поэтому ставим ТекИД_ШагаВМассиве таким, чтобы сработало правило, что выполнены все шаги
							ТекИД_ШагаВМассиве = Шаги.Количество();
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;
			Иначе
				ТекИД_ШагаВМассиве = ИдСледующегоШага.ИД;
			КонецЕсли;
			
		ИначеЕсли (ТекИД_ШагаВМассиве - 1 >= 0) И Шаги[ТекИД_ШагаВМассиве - 1].Свойство("ЭтоШагКонтекста") И Шаги[ТекИД_ШагаВМассиве - 1].ЭтоШагКонтекста Тогда
			Для Ккк = ТекИД_ШагаВМассиве По Шаги.Количество() - 1 Цикл
				Если НЕ Шаги[Ккк].Свойство("ЭтоШагКонтекста") ИЛИ НЕ Шаги[Ккк].ЭтоШагКонтекста Тогда
					ТекИД_ШагаВМассиве = Ккк;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
		Иначе
			// Это значит, что далее некуда переходить
			// поэтому ставим ТекИД_ШагаВМассиве таким, чтобы сработало правило, что выполнены все шаги
			ТекИД_ШагаВМассиве = Шаги.Количество();
		КонецЕсли;	 
	КонецЕсли;	 
			
	Если (Шаги.Количество() - 1) < ТекИД_ШагаВМассиве Тогда
		// значит все шаги выполнены, запускаем следующий сценарий
		
		Если Объект.ИспользоватьРедакторVanessaEditor Тогда
			ПолучитьVanessaEditor().setCurrentProgress(0);
		КонецЕсли;	 
		
		ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		СтрокаСценария   = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
		
		БылаОшибка     = Ложь;
		ОписаниеОшибки = "";
		ДействияПослеЗавершенияСценария(СтрокаСценария, БылаОшибка, ОписаниеОшибки);
		
		Если БылаОшибка Тогда
			ИДСтрокиСценария      = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
			СтрокаСценария        = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
			ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(СтрокаСценария, ИДСтрокиСценария, Истина);
		КонецЕсли;	 		
		
		РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить("ДатаОкончания", ТекущаяДата());
		РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче", СтрокаСценария.НомерСтрокиВФиче);
		ПрекратитьВыполнениеШаговТакКакЗакончилсяСценарий = Истина;
		
		Если БылаОшибка Тогда
			СтатусЗапускаСценариев = Ложь;		
			СтрокаСценария.Статус  = "Failed";
			РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", ОписаниеОшибки);
			РезультатПрохожденияТестовСценария.Вставить("Статус", СтрокаСценария.Статус);
			
			Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
				ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(ПодставитьПараметрыВСтроку(
					Локализовать("Failed: %1"),
					ОписаниеОшибки
				));
				
				Статистика_ЗафиксироватьОшибка();
				
			КонецЕсли;	 
		КонецЕсли;
		
		ОстановитьЗаписьВидеоОдногоШага();
		
		Если Объект.ОбновлятьДеревоПриНачалеВыполненияСценария Тогда
			АктивизироватьСтрокуДереваТекущегоШага(ТекИД_ШагаВМассиве - 1, БылаОшибка);
		КонецЕсли;	 
		
		Если СтатусСценарияСоответствуетВыполненСОшибкой(СтрокаСценария.Статус) И Объект.ДелатьСкриншотПриВозникновенииОшибки И НЕ Объект.РежимВыполненияОдногоШага
			И РезультатПрохожденияТестовСценария.Свойство("ВозниклаОшибкаВШагеНеВСекцииИсключение")
			И РезультатПрохожденияТестовСценария.ВозниклаОшибкаВШагеНеВСекцииИсключение Тогда
			
			СделатьСкриншотВозникновенияОшибкиИПерейтиКВыполнениюСледующегоСценария("ПередОкончаниемСценария", 
				СтрокаСценария, РезультатПрохожденияТестовСценария);
		Иначе	
			ПерейтиКВыполнениюСледующегоСценария();
		КонецЕсли;	 
		
		Возврат;
	КонецЕсли;
	
	Если ТекИД_ШагаВМассиве >= 0 Тогда
		ТекШаг = Шаги[ТекИД_ШагаВМассиве];
	
		Если НЕ ТекШаг.Свойство("ЭтоШагКонтекста") ИЛИ НЕ ТекШаг.ЭтоШагКонтекста Тогда
			// Тут надо сделать запись одного шага, плюс записать для каждого шага файл параметров: ИД, строка субтитров, файлTTS
			// если есть
			
			НадоОстановитьЗаписьЭтогоШагаИНачатьСледующий = Истина;
			Если ТекШаг.Свойство("ВнутриГруппыКотораяРаботаетКакОдинШаг") 
					И ТекШаг.ВнутриГруппыКотораяРаботаетКакОдинШаг Тогда
				НадоОстановитьЗаписьЭтогоШагаИНачатьСледующий = ТекШаг.ПервыйВГруппеШагов;
			КонецЕсли;	 
			
			Если НадоОстановитьЗаписьЭтогоШагаИНачатьСледующий Тогда
				ОстановитьЗаписьВидеоОдногоШага();
				НачатьЗаписьВидеоОдногоШага(ТекИД_СценарияВМассиве, ТекИД_ШагаВМассиве, ТекШаг);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Объект.ВыполнятьШагиАсинхронно Тогда
		АктивизироватьСтрокуДереваТекущегоШага();
	КонецЕсли;	 
	
	ИнтервалДляВыполненияШага = Объект.ИнтервалВыполненияШага;
	НуженМинимальныйИнтервал = Объект.ИдетЗаписьВидео 
								И (ЭтоПрерывающйВидеоШаг(ТекШаг) 
									ИЛИ (ТекШаг.Свойство("ЭтоШагКонтекста") И ТекШаг.ЭтоШагКонтекста)
									ИЛИ МассивTTS <> Неопределено);
	Если НуженМинимальныйИнтервал Тогда
		ИнтервалДляВыполненияШага = 0.1;
	КонецЕсли;	 
	
	ОбработкаПрерыванияПользователя();
	
	Если ТекШаг <> Неопределено И ТекШаг.Свойство("НадоНачатьЗаписьВыполненияТестов")
		И ТекШаг.Свойство("НадоНачатьЗаписьВыполненияТестов") И ТекШаг.НадоНачатьЗаписьВыполненияТестов Тогда
		
		ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		СтрокаСценария   = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
		НачатьЗаписьВыполненияТестовПоТегу(СтрокаСценария);
	КонецЕсли;	 
	
	Если (ВыполнитьШагЧерезТаймер = Истина) Тогда
		ПодключитьОбработчикОжидания("ВыполнитьШаг", ИнтервалДляВыполненияШага, Истина); // вызываем шаг через таймер, чтобы дать всем формам обновиться
	ИначеЕсли (НЕ Объект.ВыполнятьШагиАсинхронно) И (СчетчикШаговБезТаймера >= МаксСчетчикШаговБезТаймера) Тогда 
		АктивизироватьСтрокуДереваТекущегоШага();
		СчетчикШаговБезТаймера = 1;
		ПодключитьОбработчикОжидания("ВыполнитьШаг", ИнтервалДляВыполненияШага, Истина); // вызываем шаг через таймер, чтобы дать всем формам обновиться
	ИначеЕсли (НЕ Объект.ВыполнятьШагиАсинхронно) Тогда 
		СчетчикШаговБезТаймера = СчетчикШаговБезТаймера + 1;
		ВыполнитьШаг(); // просто вызываем следующий шаг
	Иначе
		ПодключитьОбработчикОжидания("ВыполнитьШаг", ИнтервалДляВыполненияШага, Истина); // вызываем шаг через таймер, чтобы дать всем формам обновиться
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПеременныеДляСохраненияВШаг(РезультатПрохожденияШага, ТекШаг)
	
	РезультатПрохожденияШага.Вставить("ПеременныеДляСохраненияВШаг", ТекШаг.ПеременныеДляСохраненияВШаг);
	ТекШаг.Удалить("ПеременныеДляСохраненияВШаг");
	
	Если ТекШаг.Свойство("ЕстьПеременныеТаблицыПеременных") Тогда
		РезультатПрохожденияШага.Вставить("ЕстьПеременныеТаблицыПеременных", ТекШаг.ЕстьПеременныеТаблицыПеременных);
	КонецЕсли;
	
	Если ТекШаг.Свойство("ЗначенияИзТаблицыПеременных") Тогда
		РезультатПрохожденияШага.Вставить("ЗначенияИзТаблицыПеременных", ТекШаг.ЗначенияИзТаблицыПеременных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШагиВРезультатПрохожденияТестовШаговКоторыеНеВыполнялись(Шаги, ТекИД, РезультатПрохожденияТестовШагов)
	Ид = ТекИД;
	Пока Истина Цикл
		Ид = Ид + 1;
		Если Шаги.Количество() < (Ид + 1) Тогда
			Прервать;
		КонецЕсли;	 
		
		ТекШаг = Шаги[Ид];
		
		РезультатПрохожденияШага = Новый Структура;
		РезультатПрохожденияШага.Вставить("Имя", ТекШаг.Имя);
		РезультатПрохожденияШага.Вставить("ВремяНачала", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить("ОписаниеОшибки", "Пропущен");
		РезультатПрохожденияШага.Вставить("Статус", "Skipped");
		РезультатПрохожденияШага.Вставить("ИДСтроки", ТекШаг.СтрокаШага);
		Если ТекШаг.Свойство("ЭтоШагКонтекста") И ТекШаг.ЭтоШагКонтекста Тогда
			РезультатПрохожденияШага.Вставить("ЭтоШагКонтекста", Истина);
		Иначе
			РезультатПрохожденияШага.Вставить("ЭтоШагКонтекста", Ложь);
		КонецЕсли;	
		
		РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаДерева)
	Если СтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если СтрокаДерева.Тип = "Фича" Тогда
		Возврат СтрокаДерева.ПолныйПуть;
	КонецЕсли;	 
	
	Возврат ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаДерева.ПолучитьРодителя());
КонецФункции	

&НаКлиенте
Функция ПолучитьКонтекстТестаПоАдресСнипета(АдресСнипета)
	ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
	Если ИД = Неопределено Тогда
		// Скорее всего это обработка не содержащая в себе тесты.
		Возврат Неопределено;
	Иначе
		ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
		Если ОбработкаТеста = Неопределено Тогда
			ПодключитьКонтекстОбработкиКлиент(АдресСнипета);
			ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат ОбработкаТеста;
КонецФункции	

&НаКлиенте
Процедура ВызватьМетодСценарияЕслиОнЕсть(СтрокаДереваСценария, ИмяПроцедуры, МассивПараметров = Неопределено,
	          БылаОшибка = Ложь, ОписаниеОшибки = Неопределено, СлужебныеДанныеСценария = Неопределено)

	ИмяФичаФайла = Неопределено;
	Если СлужебныеДанныеСценария <> Неопределено Тогда
		СлужебныеДанныеСценария.Свойство("ИмяФичаФайла", ИмяФичаФайла);
	КонецЕсли;	 		  
	
	Если ИмяФичаФайла = Неопределено Тогда
		ИмяФичаФайла = ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаДереваСценария);
		Если ИмяФичаФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	 
	
	Если СлужебныеДанныеСценария <> Неопределено Тогда
		СлужебныеДанныеСценария.Вставить("ИмяФичаФайла", ИмяФичаФайла);
	КонецЕсли;	 
	
	ИДМассивИменКонтекстовОбработок = Неопределено;
	
	Файл         = Новый Файл(ИмяФичаФайла);
	КаталогФичи  = Файл.Путь;
	АдресСнипета = ДополнитьСлешВПуть(КаталогФичи) + ДополнитьСлешВПуть("step_definitions") + Файл.ИмяБезРасширения + ".epf";
	АдресСнипета = УниверсальноеПолноеИмяФайла(АдресСнипета);
	ИДМассивИменКонтекстовОбработок = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));

	Если ИДМассивИменКонтекстовОбработок = Неопределено И Объект.ВерсияПоставки = "single"  Тогда
		Файл = Новый Файл(ИмяФичаФайла); 
		ИмяФормыОбработки  = "Тест_" + Файл.ИмяБезРасширения;
		АдресСнипета = ПолучитьИмяОбработкиVA() + ".Форма." + ИмяФормыОбработки;
		ИДМассивИменКонтекстовОбработок = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
	КонецЕсли;	 
	
	Если ИДМассивИменКонтекстовОбработок = Неопределено Тогда // значит у фичи нет своей epf
		Возврат;
	КонецЕсли;	 
	
	ОбработкаТеста = ПолучитьКонтекстТестаПоАдресСнипета(АдресСнипета);
	Если ОбработкаТеста = Неопределено Тогда
		// Это возможно, если у фичи вообще нет своей обработки и она использует только шаги из других фич
		Возврат;
	КонецЕсли;  

	ОбработкаТеста.Контекст            = ОбъектКонтекст;
	ОбработкаТеста.КонтекстСохраняемый = ОбъектКонтекстСохраняемый;
	
	Попытка
		ВызватьМетод(ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
	Исключение
		СообщитьПользователю (ПодставитьПараметрыВСтроку(
			Локализовать("Ошибка в %1. %2"),
			ИмяПроцедуры,
			ОписаниеОшибки()
		));
		БылаОшибка     = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОтметкуВремениДляИмениФайла()
	ТекДат     = Формат(ТекущаяДата(), "ДФ=yyyyMMdd");
	ТекМилиСек = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Стр = ТекДат + "_" + ТекМилиСек;
	
	Стр = СтрЗаменить(Стр, ".", "");
	Стр = СтрЗаменить(Стр, ",", "");
	Стр = СтрЗаменить(Стр, ":", "");
	Стр = СтрЗаменить(Стр, "/", "");
	Стр = СтрЗаменить(Стр, "\", "");
	Стр = СтрЗаменить(Стр, Символы.НПП, "");
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Процедура ПодготовитьСозданиеИнструкцииHTML()
	
	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;
	
	КаталогВыгрузкиИнструкцийHTML = ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийHTML);
	
	Если НЕ ФайлСуществуетКомандаСистемы(КаталогВыгрузкиИнструкцийHTML) Тогда 
		СоздатьКаталогКомандаСистемы(КаталогВыгрузкиИнструкцийHTML);
	КонецЕсли;
	
	Если НЕ ФайлСуществуетКомандаСистемы(КаталогВыгрузкиИнструкцийHTML) Тогда 
		СообщитьПользователюИВызватьИсключение(ПодставитьПараметрыВСтроку(
			Локализовать("Файл КаталогВыгрузкиИнструкцияHTML: %1 не существует."),
			КаталогВыгрузкиИнструкцийHTML
		));
	КонецЕсли;
	
	Если Найти(Прав(КаталогВыгрузкиИнструкцийHTML, 1), "\/") > 0 Тогда
		КаталогВыгрузкиИнструкцийHTML = Сред(КаталогВыгрузкиИнструкцийHTML, СтрДлина(КаталогВыгрузкиИнструкцийHTML) - 1);
	КонецЕсли;
	
	Если МассивСценариевДляВыполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяФичаИнструкцииHTML <> МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИмяФичи Тогда
		Если ЗначениеЗаполнено(ТекущаяФичаИнструкцииHTML) Тогда
			СоздатьФайлHTMLИнструкции();
		КонецЕсли;
		ТекущаяФичаИнструкцииHTML = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИмяФичи;
		ТекущиеДанныеИнструкцииHTML = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве];
	Иначе
		Возврат;
	КонецЕсли;            
	
	ФайлФичи = Новый Файл(ТекущиеДанныеИнструкцииHTML.ПолныйПутьКФиче);
	
	ШаблонИмяФайлаЛогаИнструкцииHTML = "%1InstrHTML_%2_%3_log.txt";
	ИмяФайлаЛогаИнструкцииHTML = _СтрШаблон(
		ШаблонИмяФайлаЛогаИнструкцииHTML, 
		ДополнитьСлешВПуть(КаталогВыгрузкиИнструкцийHTML), 
		УбратьВсеЗапрещенныеСимволыИзИмениФайла(ФайлФичи.ИмяБезРасширения), 
		ПолучитьОтметкуВремениДляИмениФайла());
	ИмяФайлаЛогаИнструкцииHTML = СтрЗаменить(ИмяФайлаЛогаИнструкцииHTML, Символы.НПП, "");
	
	ТД = Новый ТекстовыйДокумент;
	ЗаголовокФичи = ПрочитатьЗаголовокФичи(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ПолныйПутьКФиче);
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииHTML, КодировкаТекста.UTF8);
	Для каждого ТекстСообщения Из ЗаголовокФичи Цикл
		ТД.ЗаписатьСтроку(ТекстСообщения);
	КонецЦикла;
	ТД.ЗаписатьСтроку("--окончание заголовка--");
	ТД.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьЗаголовокФичи(ИмяФайла)
	Массив = Новый Массив;
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если СокрЛП(Стр) = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Стр = СокрЛП(Стр);
		
		Если Лев(Стр, 1) = "@" Тогда
			Продолжить;
		КонецЕсли;	 
		Если Лев(Стр, 1) = "#" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Найти(НРег(Стр), "сценарий:") > 0 Тогда
			Прервать;
		КонецЕсли;	 
		Если Найти(НРег(Стр), "контекст:") > 0 Тогда
			Прервать;
		КонецЕсли;	 
		Если Найти(НРег(Стр), "scenario:") > 0 Тогда
			Прервать;
		КонецЕсли;	 
		Если Найти(НРег(Стр), "background:") > 0 Тогда
			Прервать;
		КонецЕсли;	 
		
		Массив.Добавить(Стр);
		
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат Массив;
КонецФункции	

&НаКлиенте
Процедура ПодготовитьСозданиеИнструкцииMarkdown()
	
	Если НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;
	
	КаталогВыгрузкиИнструкцийMarkdown = ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийMarkdown);
	
	Если НЕ ФайлСуществуетКомандаСистемы(КаталогВыгрузкиИнструкцийMarkdown) Тогда 
		СоздатьКаталогКомандаСистемы(КаталогВыгрузкиИнструкцийMarkdown);
	КонецЕсли;
	
	Если НЕ ФайлСуществуетКомандаСистемы(КаталогВыгрузкиИнструкцийMarkdown) Тогда 
		СообщитьПользователюИВызватьИсключение(ПодставитьПараметрыВСтроку(
			Локализовать("Файл КаталогВыгрузкиИнструкцияMarkdown: %1 не существует."),
			КаталогВыгрузкиИнструкцийMarkdown
		));
	КонецЕсли;
	
	Если Найти(Прав(КаталогВыгрузкиИнструкцийMarkdown, 1), "\/") > 0 Тогда
		КаталогВыгрузкиИнструкцийMarkdown = Сред(КаталогВыгрузкиИнструкцийMarkdown, СтрДлина(КаталогВыгрузкиИнструкцийMarkdown) - 1);
	КонецЕсли;
	
	Если МассивСценариевДляВыполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяФичаИнструкцииMarkdown <> МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИмяФичи Тогда
		Если ТекущаяФичаИнструкцииMarkdown <> "" Тогда
			СоздатьФайлMarkdownИнструкции();
		КонецЕсли;  
		ТекущаяФичаИнструкцииMarkdown = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИмяФичи;
		ТекущиеДанныеИнструкцииMarkdown = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве];
	Иначе
		Возврат;
	КонецЕсли;
	
	ФайлФичи = Новый Файл(ТекущиеДанныеИнструкцииMarkdown.ПолныйПутьКФиче);
	
	ШаблонИмяФайлаЛогаИнструкцииMarkdown = "%1InstrMarkdown_%2_%3_log.txt";
	ИмяФайлаЛогаИнструкцииMarkdown = _СтрШаблон(
		ШаблонИмяФайлаЛогаИнструкцииMarkdown, 
		ДополнитьСлешВПуть(КаталогВыгрузкиИнструкцийMarkdown), 
		УбратьВсеЗапрещенныеСимволыИзИмениФайла(ФайлФичи.ИмяБезРасширения), 
		ПолучитьОтметкуВремениДляИмениФайла());
	ИмяФайлаЛогаИнструкцииMarkdown = СтрЗаменить(ИмяФайлаЛогаИнструкцииMarkdown, Символы.НПП, "");
	
	ЗаголовокФичи = ПрочитатьЗаголовокФичи(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ПолныйПутьКФиче);
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииMarkdown, КодировкаТекста.UTF8);
	Для каждого ТекстСообщения Из ЗаголовокФичи Цикл
		ТД.ЗаписатьСтроку(ТекстСообщения);
	КонецЦикла;
	ТД.ЗаписатьСтроку("--окончание заголовка--");
	ТД.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетАллюрСервер(СтруктураОФ)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	
	ТзнДанныеАллюрМеток = РеквизитФормыВЗначение("ДанныеАллюрМеток");
	СтруктураОФ.Вставить("ДанныеАллюрМеток", ТзнДанныеАллюрМеток);
	
	ОбъектСервер.СформироватьОтчетАллюр(СтруктураОФ);
	
	СтруктураОФ.Удалить("ДанныеАллюрМеток");
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетjUnitСервер(СтруктураОФ)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ОбъектСервер.СформироватьОтчетjUnit(СтруктураОФ);
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетCucumberJsonСервер(СтруктураОФ)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ОбъектСервер.СформироватьОтчетCucumberJson(СтруктураОФ);
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетСППРСервер(СтруктураДанных)

	Объект().СформироватьОтчетСППР(СтруктураДанных);

КонецПроцедуры

//Формирует статус выполения сценариев.
//  0 - ошибок выполнения сценариев не было
//  1 - были ошибки выполнения сценариев
//  2 - была ошибка подключения клиента тестирования либо в шаге секции Контекст
//  3 - тесты не запускались. Возможно была ошибка чтения фича файлов.
&НаКлиенте
Процедура ВыгрузитьСтатусВыполненияСценариевВФайл(Статус, ПутьКФайлу)
	Если НЕ Объект.ВыгружатьСтатусВыполненияСценариевВФайл Тогда
		Возврат;
	КонецЕсли;	 
	
	Файл = Новый Файл(ПутьКФайлу);
	
	Если НЕ ЗапрещеныСинхронныеВызовы Тогда
		Если ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя) Тогда
			Если Файл.ЭтоКаталог() Тогда
				СообщитьПользователю(Локализовать("Не могу выгрузить статус сценариев, т.к. был передан каталог, а не файл."));
				Возврат;
			КонецЕсли;	
		КонецЕсли;	 
	КонецЕсли;	 

	ФайлКаталог = Новый Файл(Файл.Путь);
	Если НЕ ФайлСуществуетКомандаСистемы(ФайлКаталог.ПолноеИмя) Тогда
		СообщитьПользователю (ПодставитьПараметрыВСтроку(
			Локализовать("Не могу выгрузить статус сценариев, т.к. каталог %1 не существует."),
			ФайлКаталог.ПолноеИмя
		));
		Возврат;
	КонецЕсли;	
	
	УдалитьФайлыКомандаСистемы(ПутьКФайлу);
	КодВозврата = "0";
	
	ЗТ = Новый ЗаписьТекста(ПутьКФайлу, "UTF-8", , Ложь); 
	
	Если ТипЗнч(Статус) = Тип("Строка") Тогда
		КодВозврата = Статус;
	Иначе	
		Если Статус Тогда
			КодВозврата = "0";
		Иначе	
			Если ВозниклаОшибкаВШагеКонтекста ИЛИ ВозниклаОшибкаПодключенияTestClient 
			 ИЛИ ВозниклаОшибкаОшибкаСетевогоВзаимодействия Тогда
				КодВозврата = "2";
			Иначе
				КодВозврата = "1";
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если МассивСценариевДляВыполнения <> Неопределено Тогда
			Если МассивСценариевДляВыполнения.Количество() = 0 Тогда
				КодВозврата = "3";
			КонецЕсли;
		Иначе	
			КодВозврата = "3";
		КонецЕсли;	 
	КонецЕсли;	
	
	
	ЗТ.Записать(КодВозврата); 
	
	ЗТ.Закрыть();
	
	ЗаписатьЛогВЖРИнформация("BuildStatus",
		"КодВозврата=" + КодВозврата + Символы.ПС
		+ "ВозниклаОшибкаВШагеКонтекста=" + ВозниклаОшибкаВШагеКонтекста + Символы.ПС
		+ "ВозниклаОшибкаПодключенияTestClient=" + ВозниклаОшибкаПодключенияTestClient + Символы.ПС 
		+ "ВозниклаОшибкаОшибкаСетевогоВзаимодействия=" + ВозниклаОшибкаОшибкаСетевогоВзаимодействия);
	
	СообщитьПользователю (ПодставитьПараметрыВСтроку(
		Локализовать("Записал файл статуса билда: %1"),
		ПутьКФайлу
	));
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяФичиИзПолногоПути(Знач Стр)
	Длина = СтрДлина(Стр);
	Поз   = Длина + 1;
	
	Для Ккк = 1 По Длина Цикл
		Символ = Сред(Стр, Длина - Ккк + 1, 1);
		Если Символ = ":" Тогда
			Поз = Длина - Ккк + 1;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	НовСтр = Лев(Стр, Поз - 1);
	
	Возврат СокрЛП(НовСтр);
КонецФункции	

&НаКлиенте
Функция НайтиМакетВКаталогеПроектаСлужебный(ИмяМакета, ИмяФайла)
	Нашли = Ложь;
	
	СостояниеVanessaBehavior = ПолучитьСостояниеVanessaAutomation();
	ИдСценария               = СостояниеVanessaBehavior.ТекущийСценарий.ИдСценария;
	
	КаталогСценария = ДобавитьНулей(ИдСценария + 1, 4);
	ДопКаталог      = "";
	Если ФайлСуществуетКомандаСистемы(Объект.КаталогПроекта + "\Файлы\" + КаталогСценария) Тогда
		ДопКаталог = КаталогСценария;
	КонецЕсли;	 
	
	Если Не Нашли Тогда
		ИмяФайла = ДополнитьСлешВПуть(Объект.КаталогПроекта) + ДополнитьСлешВПуть("Файлы") + ?(ДопКаталог = "", "", ДополнитьСлешВПуть(ДопКаталог)) + ИмяМакета;
		Если Прав(НРег(ИмяФайла), 4) <> ".mxl" Тогда
			ИмяФайла = ИмяФайла + ".mxl";
		КонецЕсли;	 
		Если ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
			Нашли = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Не Нашли Тогда
		ИмяФайла = ДополнитьСлешВПуть(Объект.КаталогПроекта) + ИмяМакета;
		Если Прав(НРег(ИмяФайла), 4) <> ".mxl" Тогда
			ИмяФайла = ИмяФайла + ".mxl";
		КонецЕсли;	 
		Если ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
			Нашли = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если НЕ Нашли Тогда
		Если ФайлСуществуетКомандаСистемы(Объект.КаталогПроекта) Тогда
			ИмяФайла = ИмяМакета;
			Если Прав(НРег(ИмяФайла), 4) <> ".mxl" Тогда
				ИмяФайла = ИмяФайла + ".mxl";
			КонецЕсли;	 
			
			СписокКаталогов = Новый СписокЗначений;
			СписокФайлов    = Новый СписокЗначений;
			
			КаталогПоиска = ДополнитьСлешВПуть(Объект.КаталогПроекта) + "Файлы";
			
			ПоискВКаталогеПроекта = Истина;
			Если ФайлСуществуетКомандаСистемы(КаталогПоиска) Тогда
				ПоискВКаталогеПроекта = Ложь;
				НайтиФайлыКомандаСистемы(КаталогПоиска, СписокКаталогов, СписокФайлов, Истина);
			Иначе	
				НайтиФайлыКомандаСистемы(Объект.КаталогПроекта, СписокКаталогов, СписокФайлов, Истина);
			КонецЕсли;	 
			
			Для Каждого Элем Из СписокФайлов Цикл
				ТекФайл = Элем.Значение;
				Если НРег(ТекФайл.Имя) = НРег(ИмяФайла) Тогда
					ИмяФайла = ТекФайл.ПолноеИмя;
					Нашли = Истина;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;
			
			Если НЕ Нашли И НЕ ПоискВКаталогеПроекта Тогда
				СписокКаталогов = Новый СписокЗначений;
				СписокФайлов    = Новый СписокЗначений;
				НайтиФайлыКомандаСистемы(Объект.КаталогПроекта, СписокКаталогов, СписокФайлов, Истина);
				Для Каждого Элем Из СписокФайлов Цикл
					ТекФайл = Элем.Значение;
					Если НРег(ТекФайл.Имя) = НРег(ИмяФайла) Тогда
						ИмяФайла = ТекФайл.ПолноеИмя;
						Нашли = Истина;
						Прервать;
					КонецЕсли;	 
				КонецЦикла;
			КонецЕсли;	
			
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Нашли;
КонецФункции	 

&НаСервереБезКонтекста
Функция ПолучитьТабличныйДокументНаСервере(Знач АдресВременногоХранилища, Знач Расширение = Неопределено)
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Попытка
		ТабличныйДокумент = ТабличныйДокументИзДвоичныхДанныхПоток(ДвоичныеДанные);
	Исключение
		Если Расширение = Неопределено Тогда
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");
		Иначе	
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		КонецЕсли;	 
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		ТабличныйДокумент = ПрочитатьФайлВТабличныйДокументНаСервере(ИмяВременногоФайла);
		
		Попытка
			УдалитьФайлы(ИмяВременногоФайла);
		Исключение
		КонецПопытки;
	КонецПопытки;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаКлиенте
Функция ПолучитьОбработкаСвязаннаяСИсполняемойФичей(ИмяФайлаФичи)
	ФайлФичи  = Новый Файл(ИмяФайлаФичи);
	КаталогФайлаEPF = ФайлФичи.Путь + "step_definitions" + ?(ЭтоLinux, "/", "\");
	ФайлEPF   = СклеитьКаталогИИмяФайла(КаталогФайлаEPF, ФайлФичи.ИмяБезРасширения);
	Если НЕ ФайлСуществуетКомандаСистемы(ФайлEPF) Тогда
		// для совместимости va c add
		ИмяБезРасширения = СтрЗаменить(ФайлФичи.ИмяБезРасширения, " ", "_");
		ФайлEPF   = СклеитьКаталогИИмяФайла(КаталогФайлаEPF, ИмяБезРасширения);
		Если НЕ ФайлСуществуетКомандаСистемы(ФайлEPF) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;	 
	ИД        = МассивИменКонтекстовОбработок.Найти(Нрег(ФайлEPF));
	Если ИД <> Неопределено Тогда
		Обработка = ТаблицаКонтекстовОбработок[ИД].Обработка;
	Иначе	
		Обработка = Неопределено;
	КонецЕсли;	 
	
	Если Обработка = Неопределено Тогда
		ПодключитьКонтекстОбработкиКлиент(ФайлEPF);
		Обработка = ТаблицаКонтекстовОбработок[ИД].Обработка;
	КонецЕсли;	 
	
	Возврат Обработка;
КонецФункции

&НаКлиенте
Функция СклеитьКаталогИИмяФайла(КаталогФайлаEPF, ИмяБезРасширения)	
	ФайлEPF   = КаталогФайлаEPF + ИмяБезРасширения + ".epf";
	ФайлEPF   = УниверсальноеПолноеИмяФайла(ФайлEPF);
	
	Возврат ФайлEPF;	
КонецФункции

&НаКлиенте
Процедура ОбновитьКешДанныхФормы()
	КолЭлементов = МассивСтрокДереваДанныеФормы.Количество();
	МассивСтрокДереваДанныеФормы.Очистить();
	Если КолЭлементов > 0 Тогда
		ЗапомнитьСтрокиДереваДанныеФормы(КолЭлементов > 0);
		Возврат;
	КонецЕсли;	 
	Если Не Объект.РежимВыполненияОдногоШага Тогда
		ЗапомнитьСтрокиДереваДанныеФормы();
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(СтрокаСценария, ИД, ОбновитьБезПроверки = Ложь)
	Если ОбновитьБезПроверки ИЛИ СтрокаСценария = Неопределено ИЛИ СтрокаСценария.ПолучитьРодителя() = Неопределено Тогда
		// значит надо обновить кеш строк дерева
		ОбновитьКешДанныхФормы();
		Если Не Объект.РежимВыполненияОдногоШага И ИД <> Неопределено Тогда
			СтрокаСценария = МассивСтрокДереваДанныеФормы[ИД];
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокуДереваПоДаннымПоиска(ДанныеПоиска)
	ТекИдМассива   = -1;
	ЭлементыДерева = Объект.ДеревоТестов.ПолучитьЭлементы();
	НужныйЭлемент  = Неопределено;
	Пока Истина Цикл
		ТекИдМассива = ТекИдМассива + 1;
		
		Если ТекИдМассива > (ДанныеПоиска.Количество() - 1) Тогда
			Прервать;
		КонецЕсли;	 
		
		НужныйИдСтроки = ДанныеПоиска[ТекИдМассива]; 
		
		Нашли = Ложь;
		Для Каждого Элем Из ЭлементыДерева Цикл
			Если Элем.ИдСтроки = НужныйИдСтроки Тогда
				НужныйЭлемент  = Элем;
				ЭлементыДерева = Элем.ПолучитьЭлементы();
				Нашли          = Истина;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	
		
		Если Не Нашли Тогда
			ВызватьИсключение Локализовать("Не найден элемент дерева по данным поиска");
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат НужныйЭлемент;
КонецФункции	

&НаКлиенте
Функция ПолучитьСтрокуСценарияИзДанныхФормы(ИД)
	Если Объект.РежимВыполненияОдногоШага И СтруктураПоискаСтрокДерева <> Неопределено Тогда
		Возврат НайтиСтрокуДереваПоДаннымПоиска(СтруктураПоискаСтрокДерева.ДанныеПоискаСтрокиСценария);
	КонецЕсли;	 
	
	Возврат МассивСтрокДереваДанныеФормы[ИД];
КонецФункции	

&НаКлиенте
Функция ПолучитьСтрокуШагаИзДанныхФормы(ИД)
	Если Объект.РежимВыполненияОдногоШага И СтруктураПоискаСтрокДерева <> Неопределено Тогда
		Возврат НайтиСтрокуДереваПоДаннымПоиска(СтруктураПоискаСтрокДерева.ДанныеПоискаСтрокиШага);
	КонецЕсли;	 
	
	Возврат МассивСтрокДереваДанныеФормы[ИД];
КонецФункции	

&НаКлиенте
Процедура СохранитьДанныеСкриншотаНаДиск(СтруктураСкриншот)
	
	#Если НЕ ВебКлиент Тогда
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("png");
	Попытка
		Если СтруктураСкриншот.ДвоичныеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;	 
		
		СтруктураСкриншот.ДвоичныеДанные.Записать(ВременныйФайл);
		КопироватьФайлКомандаСистемы(ВременныйФайл, ПолучитьКаталогОтчетаAllure() + СтруктураСкриншот.ИмяФайла);
	Исключение
		ЗаписатьЛогВЖРОшибка("СохранитьДанныеСкриншотаНаДиск", ОписаниеОшибки());
	КонецПопытки;
	
	#КонецЕсли
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьСценарийАсинхронноТаймерЗавершение()
	
	Если ВыполненаОбработкаЗавершенияВыполненияСценариев Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ ЭтаФорма.Открыта() И НЕ ВыполнениеСценариевБезОткрытияФормы Тогда
		//Часть старых сценариев может вызывать проблему, что события закрытия формы выполнились раньше отключения модулей.
		//Это бывает, когда в том же сеансе открывается VA для выполнения тестовых сценариев.
		Возврат;
	КонецЕсли;	 
	
	ВыполненаОбработкаЗавершенияВыполненияСценариев = Истина;
	
	ЗаписатьЛогВЖРИнформация("ЗавершениеВыполненияСценариев", Локализовать("Начало работы алгоритма по завершению выполнения сценариев.") + "1");
	
	Если НужноПоказатьОкноОстановкиВыполненияСценария() Тогда
		ЗакрытьОкноОстановкиВыполненияСценария();
	КонецЕсли;	 
	
	#Если НЕ ВебКлиент Тогда
	Если МассивСценариевДляВыполнения.Количество() = 0 Тогда
		// Значит не было сценариев для выполнения.
		Если ЗначениеЗаполнено(Объект.СписокТеговОтбор) Тогда
			СообщитьПользователю(Локализовать("Сценарии для выполнения не обнаружены. Проверьте тэги для запуска:") + " " + Объект.СписокТеговОтбор);
		Иначе
			СообщитьПользователю(Локализовать("Сценарии для выполнения не обнаружены. Если были указаны тэги для запуска попробуйте перезагрузить .feature файл"));
		КонецЕсли;
		СтатусЗапускаСценариев = Ложь;
	КонецЕсли;	 
	
	ВыключитьАнимациюКликовМышки();
	
	МодульРедакторТекста().УстановитьЗначенияПеременныхVanessaEditor();
	
	ЗаписатьЛогВЖРИнформация("ЗавершениеВыполненияСценариев", Локализовать("Начало работы алгоритма по завершению выполнения сценариев.") + "2");
	
	СоздатьФайлHTMLИнструкции();
	СоздатьФайлMarkdownИнструкции();
	ЗавершитьЗаписьВидео();
	ОстановитьSikuliXСервер();
	
	Объект.ИдетВыполнениеСценариев = Ложь;
	ОбновитьСтатусыКнопокСценариев();
	
	СделатьСообщениеВсеСценарииОбработаны();
	
	ЗаписатьЛогВЖРИнформация("ЗавершениеВыполненияСценариев", Локализовать("Начало работы алгоритма по завершению выполнения сценариев.") + "3");
	
	Если Объект.ДелатьОтчетВФорматеАллюр Тогда
		
		ЗаписатьЛогВЖРИнформация("ЗавершениеВыполненияСценариев", "ФормированиеОтчетаAllure");
		
		СтруктураОФ = Новый Структура;
		СтруктураОФ.Вставить("МассивРезультатПрохожденияТестовСценария", МассивРезультатПрохожденияТестовСценария);
		СтруктураОФ.Вставить("МассивИДСтрокиДерева", МассивИДСтрокиДерева);

		ДвоичныеДанные = Неопределено;
		Если Объект.ВерсияПоставки <> "single" Тогда
			ДвоичныеДанные = Новый ДвоичныеДанные(Объект.КаталогИнструментов + "/vendor/allure-framework/allure.xsd");
		КонецЕсли;	 
		СтруктураОФ.Вставить("СхемаAllure", ДвоичныеДанные);
		СтруктураОФ.Вставить("ЗапрещеныСинхронныеВызовы", ЗапрещеныСинхронныеВызовы);
		СтруктураОФ.Вставить("ПодставлятьВОтчетеAllureЗначенияПеременных", Объект.ПодставлятьВОтчетеAllureЗначенияПеременных);
		СтруктураОФ.Вставить("КаталогПроекта", Объект.КаталогПроекта);
		
		Объект.КаталогОтносительноКоторогоНадоСтроитьИерархию = ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогОтносительноКоторогоНадоСтроитьИерархию); 

		СформироватьОтчетАллюрСервер(СтруктураОФ);
		
		ЗаписатьЛогВЖРИнформация("ЗавершениеВыполненияСценариев", "ФормированиеОтчетаAllureЗаписьФайлов");
		
		Для каждого РезультатПрохожденияТестовСценария Из МассивРезультатПрохожденияТестовСценария Цикл
			
			Для Каждого РезультатПрохожденияТестовШага Из РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов Цикл
				Если Не РезультатПрохожденияТестовШага.Свойство("МассивСкриншотов") Тогда
					Продолжить;
				КонецЕсли;	 
				
				Для каждого СтруктураСкриншот Из РезультатПрохожденияТестовШага.МассивСкриншотов Цикл
					СохранитьДанныеСкриншотаНаДиск(СтруктураСкриншот);
				КонецЦикла;
			КонецЦикла;	 
			
			Если Не РезультатПрохожденияТестовСценария.Свойство("МассивСкриншотов") Тогда
				Продолжить;
			КонецЕсли;	 
			
			Для каждого СтруктураСкриншот Из РезультатПрохожденияТестовСценария.МассивСкриншотов Цикл
				СохранитьДанныеСкриншотаНаДиск(СтруктураСкриншот);
			КонецЦикла;
		КонецЦикла;
		
		Если СтруктураОФ.Свойство("МассивXMLОтчетаAllure") Тогда 
			МассивXMLОтчетаAllure = СтруктураОФ.МассивXMLОтчетаAllure;
			КаталогОтчетаAllure = ПолучитьКаталогОтчетаAllure();
			Для каждого Элем Из МассивXMLОтчетаAllure Цикл
				ИмяФайлаОтчета        = КаталогОтчетаAllure + Элем.РеальноеИмяФайла;
				ФайлДвоичныеДанные = Элем.ФайлXMLДвоичныеДанные;
				ФайлДвоичныеДанные.Записать(ИмяФайлаОтчета);
				
				Отладка(ПодставитьПараметрыВСтроку(
					Локализовать("Файл отчета Allure-report (%1) записан."),
					ИмяФайлаОтчета
				));
			КонецЦикла;
		КонецЕсли;
		
		ЗаписатьЛогВЖРИнформация("ЗавершениеВыполненияСценариев", "ФормированиеОтчетаAllureОтчетСформирован");
		
	КонецЕсли; 	
	
	Если Объект.ДелатьОтчетВФорматеjUnit Тогда
		ЗаписатьЛогВЖРИнформация("ЗавершениеВыполненияСценариев", "ФормированиеОтчетаjUnit");
		
		СтруктураОФ = Новый Структура;
		СтруктураОФ.Вставить("МассивРезультатПрохожденияТестовСценария", МассивРезультатПрохожденияТестовСценария);
		СтруктураОФ.Вставить("МассивИДСтрокиДерева", МассивИДСтрокиДерева);
		СтруктураОФ.Вставить("ЗапрещеныСинхронныеВызовы", ЗапрещеныСинхронныеВызовы);
		СтруктураОФ.Вставить("ЭтоОФ", Ложь);
		СтруктураОФ.Вставить("СтрокаТехническиеДанные", Локализовать("Технические данные:"));

		СформироватьОтчетjUnitСервер(СтруктураОФ);
		
		Если Объект.ДобавлятьКИмениСценарияУсловияВыгрузки Тогда
			ИмяСборки = Объект.ИмяТекущейСборки;
			ИмяСборки = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяСборки);
			ИмяФайлаXML = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиJUnit))
			    + Лев(ИмяСборки, 40) + "-junit.xml";
		Иначе	
			ИмяФайлаXML = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиJUnit))
			    + "junit.xml";
		КонецЕсли;	 
		
		СтруктураОФ.xml.Записать(ИмяФайлаXML);
		Отладка(ПодставитьПараметрыВСтроку(
			Локализовать("Файл отчета jUnit-report (%1) записан."),
			ИмяФайлаXML
		));
	КонецЕсли; 
			
	Если Объект.ДелатьОтчетВФорматеCucumberJson Тогда
		ЗаписатьЛогВЖРИнформация("ЗавершениеВыполненияСценариев", "ФормированиеОтчетаCucumberJson");
		
		СтруктураОФ = Новый Структура;
		СтруктураОФ.Вставить("МассивРезультатПрохожденияТестовСценария", МассивРезультатПрохожденияТестовСценария);
		СтруктураОФ.Вставить("МассивИДСтрокиДерева", МассивИДСтрокиДерева);
		СтруктураОФ.Вставить("ЗапрещеныСинхронныеВызовы", ЗапрещеныСинхронныеВызовы);
		СтруктураОФ.Вставить("ЭтоОФ", Ложь);
					
		СформироватьОтчетCucumberJsonСервер(СтруктураОФ);
		
		Если Объект.ДобавлятьКИмениСценарияУсловияВыгрузки Тогда
			ИмяСборки = Объект.ИмяТекущейСборки;
			ИмяСборки = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяСборки);
			ИмяФайлаJson = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиCucumberJson))
			    + СокрЛП(Лев(ИмяСборки, 40)) + "-CucumberJson.json";
		Иначе	
			ИмяФайлаJson = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиCucumberJson))
			    + "CucumberJson.json";
		КонецЕсли;	 
		
		СтруктураОФ.json.Записать(ИмяФайлаJson);
		Отладка(ПодставитьПараметрыВСтроку(
			Локализовать("Файл отчета CucumberJson-report (%1) записан."),
			ИмяФайлаJson
		));
	КонецЕсли; 
	
	Если Объект.ДелатьОтчетВоВнутреннемФормате Тогда
		ЗаписатьЛогВЖРИнформация("ЗавершениеВыполненияСценариев", "ФормированиеОтчетаВоВнутреннемФормате");
		// Сформируем отчет для показа пользователю. 
		СтруктураОФ = Новый Структура;
		СтруктураОФ.Вставить("МассивРезультатПрохожденияТестовСценария", МассивРезультатПрохожденияТестовСценария);
		СтруктураОФ.Вставить("МассивИДСтрокиДерева", МассивИДСтрокиДерева);
		
		Если НЕ Объект.ЗапускИзКоманднойСтроки Тогда
			ТабличныйДокумент = СформироватьОтчетВоВнутреннемФормате(СтруктураОФ);
			ТабличныйДокумент.Показать();
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если Объект.ВыгружатьСтатусВыполненияСценариевВФайл Тогда
		ЗаписатьЛогВЖРИнформация("ЗавершениеВыполненияСценариев", "ВыгружатьСтатусВыполненияСценариевВФайл");
		ВыгрузитьСтатусВыполненияСценариевВФайл(СтатусЗапускаСценариев, 
			ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев));
	КонецЕсли;	 
	
	Если Объект.ЗакрытьTestClientПослеЗапускаСценариев Тогда
		ЗаписатьЛогВЖРИнформация("ЗавершениеВыполненияСценариев", "ЗакрытьTestClientПослеЗапускаСценариев");
		// закроем все TestClient которые были запущены
		Для каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
			Попытка
				Шаг("И я закрываю TestClient '" + ЭкранироватьСпецСимволыДляЗначенияШага(СтрокаДанныеКлиентовТестирования.Имя) + "'");
			Исключение
				// Если не получилось закрыть TestClient, это ещё не означает, что есть ошибка
				// возможно он был закрыт штатно в сценарии
				Стр = ОписаниеОшибки();
				ЗаписатьЛогВЖРОшибка("ЗавершениеВыполненияСценариев", Стр);
				СообщитьПользователю(Стр);
			КонецПопытки;
		КонецЦикла;			
		
	КонецЕсли;	 

	ЗаписатьЛогВЖРИнформация("ЗавершениеВыполненияСценариев", Локализовать("Начало работы алгоритма по завершению выполнения сценариев.") + "4");
	
	Если Объект.ЗавершитьРаботуСистемыПослеВыполненияВсехСценариев Тогда
		ЗаписатьЛогВЖРИнформация("ЗавершениеВыполненияСценариев", "ОбработчикОжиданияПрекратитьРаботуСистемы");
		ПодключитьОбработчикОжидания("ОбработчикОжиданияПрекратитьРаботуСистемы", 1, Истина);
	Иначе	
		УстановитьФлагиВыполненияСценариев();
		
		ВыполнитьЗвуковоеОповещениеПриОкончанииВыполненияСценария();
	КонецЕсли;
	
	Если ВключенРежимОбучения И Объект.ЗакрыватьСценарийИнтерактивнойСправкиПослеВыполнения И СтатусЗапускаСценариев Тогда
		ЗакрытьТекущуюВкладкуРедактора();
	КонецЕсли;	 
	
	ЗаписатьЛогВЖРИнформация("ЗавершениеВыполненияСценариев", Локализовать("Начало работы алгоритма по завершению выполнения сценариев.") + "5");
	
	Оповестить("ОкончаниеВыполненияСценариевVanessaAutomation");
	
	#КонецЕсли
КонецПроцедуры 

&НаКлиенте
Процедура ОбработчикОжиданияПрекратитьРаботуСистемы() Экспорт
	ПрекратитьРаботуСеансаVanessaAutomation();
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ВычислитьВыражениеНаСервере(Знач Стр)
	Возврат Вычислить(Стр);
КонецФункции	 

&НаКлиенте
Функция ВычислитьВыражениеНаКлиенте(Стр)
	Возврат Вычислить(Стр);
КонецФункции	 

&НаКлиенте
Функция ЗначениеИзТаблицыПеременных(Выражение, ДанныеПоПростымПеременным, ДанныеПоПеременныхВТаблицах, ВызыватьИсключение = Истина)
	
	Если ДанныеПоПеременныхВТаблицах <> Неопределено И ДанныеПоПеременныхВТаблицах.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	НайденаПеременная = Ложь;
	ИмяПеременной = Неопределено;
	ИмяПоля = Неопределено;
	Массив = РазложитьСтрокуВМассивПодстрокКлиент(Выражение, ".");
	Если Массив.Количество() = 2 Тогда
		//Это переменная таблицы без имени
		ТаблицаПеременных = ДанныеПоПеременныхВТаблицах[""];
		НайденаПеременная = Истина;
		ИмяПеременной = Массив[0];
		ИмяПоля = Массив[1];
	ИначеЕсли Массив.Количество() = 3 Тогда
		//Это переменная таблицы с именем
		НайденаПеременная = Истина;
		ТаблицаПеременных = ДанныеПоПеременныхВТаблицах[НРег(Массив[0])];
		ИмяПеременной = Массив[1];
		ИмяПоля = Массив[2];
	КонецЕсли;	 
	
	Если НайденаПеременная Тогда
		
		Если ТаблицаПеременных = Неопределено Тогда
			Если НЕ ВызыватьИсключение Тогда
				Возврат Выражение;
			КонецЕсли;	 
			СтрокаОшибки = ПодставитьПараметрыВСтроку(
				Локализовать("Ошибка вычисления переменной из выражения <%1>. Таблица переменных не найдена."), Выражение);
			ЗаписатьЛогВЖРОшибка("ВычислениеЗначенияПеременой", СтрокаОшибки);
			Если НЕ Объект.ЗапускИзКоманднойСтроки Тогда
				ВызватьИсключение СтрокаОшибки;
			КонецЕсли;	 
		КонецЕсли;	
		
		Если ТаблицаПеременных.Значения.Свойство(ИмяПеременной) Тогда
			СтрокаТаблицы = ТаблицаПеременных.Значения[ИмяПеременной];
			Возврат ПодставитьЗначенияИнлайнВыраженийВСтроку(СтрокаТаблицы[ИмяПоля], ДанныеПоПростымПеременным, ДанныеПоПеременныхВТаблицах); 
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// ДанныеПоПростымПеременным и ДанныеПоПеременныхВТаблицах надо инициализировать нулём
&НаКлиенте
Функция ВычислитьИнлайнВыражениеЕслиЭтоВозможно(Знач Выражение, ДанныеПоПростымПеременным, ДанныеПоПеременныхВТаблицах, ИскатьЗначенияИзСекцииПеременные) Экспорт
	
	БылоВычислениеИнлайнВыражения = Ложь;
	
	Если Найти(Выражение, "}") > 0 И Найти(Выражение, "{") > 0 Тогда
		Если ДанныеПоПростымПеременным = 0 Тогда
			ДанныеПоПростымПеременным = ДанныеПоПростымПеременнымПоТекущемуСценарию();
		КонецЕсли;	 
		Если ДанныеПоПеременныхВТаблицах = 0 Тогда
			ДанныеПоПеременныхВТаблицах = ДанныеПоПеременнымВТаблицахПоТекущемуСценарию();
		КонецЕсли;	 
		ИсходноеЗначение = Выражение;
		Выражение = ПодставитьЗначенияИнлайнВыраженийВСтроку(Выражение, ДанныеПоПростымПеременным, ДанныеПоПеременныхВТаблицах);
		Если ИсходноеЗначение <> Выражение Тогда
			БылоВычислениеИнлайнВыражения = Истина;
		КонецЕсли;	 
		
		Если Найти(Выражение, "\{") > 0 Тогда
			Выражение = СтрЗаменить(Выражение, "\{", "{");
		КонецЕсли;	 
		Если Найти(Выражение, "\}") > 0 Тогда
		Выражение = СтрЗаменить(Выражение, "\}", "}");
		КонецЕсли;	 
	КонецЕсли;
	
	Если ИскатьЗначенияИзСекцииПеременные И НЕ БылоВычислениеИнлайнВыражения Тогда
		Если ДанныеПоПростымПеременным = 0 Тогда
			ДанныеПоПростымПеременным = ДанныеПоПростымПеременнымПоТекущемуСценарию();
		КонецЕсли;	 
		Если ДанныеПоПеременныхВТаблицах = 0 Тогда
			ДанныеПоПеременныхВТаблицах = ДанныеПоПеременнымВТаблицахПоТекущемуСценарию();
		КонецЕсли;	 
		
		Если ДанныеПоПростымПеременным <> Неопределено И ДанныеПоПростымПеременным[НРег(Выражение)] <> Неопределено Тогда
			//Значит найдена передача простой переменной из секции переменных в шаг
			Выражение = ПодставитьЗначенияИнлайнВыраженийВСтроку(
				ДанныеПоПростымПеременным[НРег(Выражение)].Значение, ДанныеПоПростымПеременным, ДанныеПоПеременныхВТаблицах);
		ИначеЕсли Найти(Выражение, ".") > 0 И ДанныеПоПеременныхВТаблицах <> Неопределено  Тогда
			НовоеЗначение = ЗначениеИзТаблицыПеременных(Выражение, ДанныеПоПростымПеременным, ДанныеПоПеременныхВТаблицах, Ложь);
			Если НовоеЗначение <> Неопределено Тогда
				Выражение = НовоеЗначение;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	
	
	Возврат Выражение; 
	
КонецФункции	 

&НаКлиенте
Функция ВычислитьВыражениеВнутриФигурныхСкобок(ИсходноеВыражение, ДанныеПоПростымПеременным, ДанныеПоПеременныхВТаблицах)
	Если Лев(ИсходноеВыражение, 2) = "{!" И Прав(ИсходноеВыражение, 1) = "}" Тогда
		//Значит это выражение надо вычислить на сервере
		Попытка
			Выражение = Сред(ИсходноеВыражение, 3, СтрДлина(ИсходноеВыражение) - 3);
			Возврат ВычислитьВыражениеНаСервере(Выражение);
		Исключение
			СтрокаОшибки = ПодставитьПараметрыВСтроку(
			Локализовать("Ошибка вычисления выражения выражения <%1>. Текст ошибки: <%2>."), Выражение, ОписаниеОшибки());
			ЗаписатьЛогВЖРОшибка("ВычислениеЗначенияПеременой", СтрокаОшибки);
			Если НЕ Объект.ЗапускИзКоманднойСтроки Тогда
				ВызватьИсключение СтрокаОшибки;
			КонецЕсли;	 
		КонецПопытки;
	ИначеЕсли Лев(ИсходноеВыражение, 1) = "{" И Прав(ИсходноеВыражение, 1) = "}" Тогда
		//Значит это выражение надо вычислить на клиенте
		Попытка
			Выражение = Сред(ИсходноеВыражение, 2, СтрДлина(ИсходноеВыражение) - 2);
			Если ДанныеПоПростымПеременным <> Неопределено И ДанныеПоПростымПеременным[НРег(Выражение)] <> Неопределено Тогда
				Выражение = ДанныеПоПростымПеременным[НРег(Выражение)].Значение;
				Возврат ПодставитьЗначенияИнлайнВыраженийВСтроку(Выражение, ДанныеПоПростымПеременным, ДанныеПоПеременныхВТаблицах); 
			КонецЕсли;	 
			
			Попытка
				Если ДанныеПоПеременныхВТаблицах <> Неопределено И Найти(Выражение, ".") > 0 Тогда
					НовоеЗначение = ЗначениеИзТаблицыПеременных(Выражение, ДанныеПоПростымПеременным, ДанныеПоПеременныхВТаблицах);
					Если НовоеЗначение <> Неопределено Тогда
						Возврат НовоеЗначение; 
					КонецЕсли;	 
				КонецЕсли;	 
			Исключение
			КонецПопытки;
			
			Возврат ВычислитьВыражениеНаКлиенте(Выражение);
		Исключение
			СтрокаОшибки = ПодставитьПараметрыВСтроку(
			Локализовать("Ошибка вычисления выражения выражения <%1>. Текст ошибки: <%2>."), Выражение, ОписаниеОшибки());
			ЗаписатьЛогВЖРОшибка("ВычислениеЗначенияПеременой", СтрокаОшибки);
			Если НЕ Объект.ЗапускИзКоманднойСтроки Тогда
				ВызватьИсключение СтрокаОшибки;
			КонецЕсли;	 
		КонецПопытки;
	КонецЕсли;
	
	Возврат ИсходноеВыражение; 
	
КонецФункции	 

&НаКлиенте
Функция ДанныеПоПростымПеременнымПоТекущемуСценарию()
	ДанныеСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве];
	ИмяФичи = УниверсальноеПолноеИмяФайла(ДанныеСценария.ПолныйПутьКФиче, Истина);
	
	Возврат ДанныеСекцииПеременные.ПростыеПеременные[ИмяФичи];
КонецФункции	 

&НаКлиенте
Функция ДанныеПоПеременнымВТаблицахПоТекущемуСценарию()
	ДанныеСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве];
	ИмяФичи = УниверсальноеПолноеИмяФайла(ДанныеСценария.ПолныйПутьКФиче, Истина);
	
	Возврат ДанныеСекцииПеременные.ТаблицыПеременных[ИмяФичи];
КонецФункции	 

&НаКлиенте
Функция ПодставитьЗначенияИнлайнВыраженийВСтроку(Знач Стр, ДанныеПоПростымПеременным, ДанныеПоПеременныхВТаблицах)
	Если Найти(Стр, "$") > 0 Тогда
		Стр = ПодставитьПеременныеВСтроку(Стр);
	КонецЕсли;	 
	
	Стр = СтрЗаменить(Стр, "\{", "~ЭкранированиеПервойФигурнойСобки~");
	Стр = СтрЗаменить(Стр, "\}", "~ЭкранированиеВторойФигурнойСобки~");
	
	Результат = "";
	НайденоВыражение = Ложь;
	Выражение = "";
	
	Для Сч = 1 По СтрДлина(Стр) Цикл
		Символ = Сред(Стр, Сч, 1);
		Если Символ = "{" Тогда
			НайденоВыражение = Истина;
			Выражение = Выражение + Символ;
			Продолжить;
		ИначеЕсли Символ = "}" Тогда
			НайденоВыражение = Ложь;
			Выражение = Выражение + Символ; 
			Если ЗначениеЗаполнено(Результат) Тогда
				Результат = Результат + ВычислитьВыражениеВнутриФигурныхСкобок(Выражение, ДанныеПоПростымПеременным, ДанныеПоПеременныхВТаблицах);
			Иначе
				Результат = ВычислитьВыражениеВнутриФигурныхСкобок(Выражение, ДанныеПоПростымПеременным, ДанныеПоПеременныхВТаблицах);
			КонецЕсли;
			Выражение = "";
			Продолжить;
		КонецЕсли;	 
		
		Если НайденоВыражение Тогда
			Выражение = Выражение + Символ;
		Иначе
			Результат = Результат + Символ;
		КонецЕсли;	 
		
	КонецЦикла;	
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Результат = СтрЗаменить(Результат, "~ЭкранированиеПервойФигурнойСобки~", "\{");
		Результат = СтрЗаменить(Результат, "~ЭкранированиеВторойФигурнойСобки~", "\}");
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции	 

&НаКлиенте
Процедура ИнициализироватьПеременныеИзСекцииПеременные(ДанныеСценария)
	ИмяФичи = УниверсальноеПолноеИмяФайла(ДанныеСценария.ПолныйПутьКФиче, Истина);
	
	Если ДанныеСекцииПеременные = Неопределено Тогда
		ДанныеПоПростымПеременным = Неопределено;
		ДанныеПоПеременныхВТаблицах = Неопределено;
		ПростыеПеременныеКакВФайле = Неопределено;
	Иначе	
		ДанныеПоПростымПеременным = ДанныеСекцииПеременные.ПростыеПеременные[ИмяФичи];
		ДанныеПоПеременныхВТаблицах = ДанныеСекцииПеременные.ТаблицыПеременных[ИмяФичи];
		ПростыеПеременныеКакВФайле = ДанныеСекцииПеременные.ПростыеПеременныеКакВФайле[ИмяФичи];
	КонецЕсли;	 
	
	Если ДанныеПоПростымПеременным = Неопределено Тогда
		ДанныеПоПростымПеременным = Новый Соответствие;
	КонецЕсли;	 
	Если ДанныеПоПеременныхВТаблицах = Неопределено Тогда
		ДанныеПоПеременныхВТаблицах = Новый Соответствие;
	КонецЕсли;	
	
	Если ДанныеПоПростымПеременным.Количество() = 0 И ДанныеПоПеременныхВТаблицах.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Если ПростыеПеременныеКакВФайле <> Неопределено Тогда
		Для Каждого ИмяПеременной Из ПростыеПеременныеКакВФайле Цикл
			ДанныеПеременной = ДанныеПоПростымПеременным[НРег(ИмяПеременной)];
			ЗначениеПеременной = ДанныеПеременной.Значение;
			ЗначениеПеременной = ПодставитьЗначенияИнлайнВыраженийВСтроку(ЗначениеПеременной, ДанныеПоПростымПеременным, ДанныеПоПеременныхВТаблицах);
			
			ОбъектКонтекст.Вставить(ДанныеПеременной.Имя, ЗначениеПеременной);
		КонецЦикла;	 
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьСценарийАсинхронноТаймер()
	
	Если МассивСценариевДляВыполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	ИменаФайловДляПрикрепления = Новый Массив;
	
	Объект.ИнтервалВыполненияШага = Объект.ИнтервалВыполненияШагаЗаданныйПользователем;
	
	Если Объект.ОбновлятьДеревоПриНачалеВыполненияСценария Тогда
		Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
			АктивизироватьСтраницуЗапускТестов();
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ТекИД_СценарияВМассиве > 0 Тогда
		ОбработатьСтатусСценария(ТекИД_СценарияВМассиве - 1);
	КонецЕсли;
	
	ПрекратитьВыполнениеШаговТакКакЗакончилсяСценарий = Ложь;
	ЗначениеПараметровДляСнятияСкриншотов = Неопределено;
	ГлобальныеЗначенияШагов = Новый Структура;
	ИдСтрокиДляВыполненияСледующегоШага = Неопределено;
	НадоЗарегистрироватьОшибкуИзСекцииИсключение = Ложь;
	ПродолжитьВыполнениеШаговПослеСнятияВсехСкриншотов = Ложь;
	
	ОшибкиСценарияПереданныеИзвне = Новый Массив;
	
	// сбросим возможные кеши TestClient
	ОчиститьКешАктивнойТаблицыTestClient();
	Если НЕ Объект.РежимВыполненияОдногоШага Тогда
		ЗафиксироватьФормуГруппуTestClient(Неопределено);
	КонецЕсли;	 
	
	Если ПрекратитьВыполнениеВсехСценариев ИЛИ ((МассивСценариевДляВыполнения.Количество() - 1) < ТекИД_СценарияВМассиве) Тогда
		// значит все сценарии выполнены
		ПодключитьОбработчикОжидания("ВыполнитьСценарийАсинхронноТаймерЗавершение", 0.1, Истина);
		Возврат;
	КонецЕсли;	 
	
	Если ОбъектКонтекст = Неопределено Тогда
		ОбъектКонтекст = Новый Структура;
		Контекст = ОбъектКонтекст;
	ИначеЕсли НЕ Объект.РежимВыполненияОдногоШага 
				И НЕ Объект.РежимВыполненияДанногоСценарияСТекущегоШага
				И НЕ Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением
				И НЕ ВыполнениеДиапазонаШаговVanessaEditor Тогда
		ОбъектКонтекст.Очистить();
	КонецЕсли;	 
		
	ПодготовитьСозданиеИнструкцииHTML();
	ПодготовитьСозданиеИнструкцииMarkdown();
	
	ИДСтроки = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	Файл = Новый Файл(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ПолныйПутьКФиче);
	КаталогТекущегоИсполняемогоФичаФайла = Файл.Путь;
	
	РезультатПрохожденияТестовСценария = Новый Структура;
	РезультатПрохожденияТестовСценария.Вставить("ИДСтроки", ИДСтроки);
	РезультатПрохожденияТестовСценария.Вставить("ВремяНачала", ТекущаяУниверсальнаяДатаВМиллисекундах());
	РезультатПрохожденияТестовСценария.Вставить("ДатаНачала", ТекущаяДата());
	РезультатПрохожденияТестовШагов = Новый Массив;
	РезультатПрохожденияТестовСценария.Вставить("РезультатПрохожденияТестовШагов", РезультатПрохожденияТестовШагов);
	
	ДобавитьРезультатПрохожденияТестовСценарияВМассив(РезультатПрохожденияТестовСценария, ИДСтроки);
	
	ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	
	ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(СтрокаСценария, ИДСтрокиСценария);
			
	Если Не Объект.РежимВыполненияОдногоШага И Объект.ОбновлятьДеревоПриНачалеВыполненияСценария Тогда
		Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаСценария.ПолучитьИдентификатор();
	КонецЕсли;	 
	
	ИнициализироватьПеременныеИзСекцииПеременные(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве]);
	
	РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче", СтрокаСценария.НомерСтрокиВФиче);
	
	ОбработкаСвязаннаяСИсполняемойФичей = Неопределено;
	
	Если СтрокаСценария.ФичаИмеетСвоюEPF Тогда
		СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаСценария);
		ОбработкаСвязаннаяСИсполняемойФичей = ПолучитьОбработкаСвязаннаяСИсполняемойФичей(СтрокаФичи.ПолныйПуть);
	КонецЕсли; 
		
	Если НЕ Объект.РежимВыполненияОдногоШага Тогда
		Если ВключенРежимОбучения Тогда
			СообщитьПользователю(ПодставитьПараметрыВСтроку(Локализовать("Выполняется урок: <%1>."), МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Имя));
		Иначе	
			Если НЕ ВыполнениеСценариевБезОткрытияФормы И НЕ Объект.СоздаватьИнструкциюВидео Тогда
				СообщитьПользователю(ПодставитьПараметрыВСтроку(Локализовать("Выполняется сценарий: <%1>."), МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Имя));
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
		ЗаписатьЛогВЖРПередВыполнениемСценария(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Имя);		
	КонецЕсли;	                                                                                         
	
	Если НастройкиTeamCity.Используется Тогда
		НачатьТестTeamCity(СтрокаСценария);
	КонецЕсли;
	
	ИмяФичаФайла = ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаСценария);
	Если НЕ СравнитьПутиФайлов(ТекущийИсполняемыйФичаФайл, ИмяФичаФайла) Тогда
		
		ТекущийИсполняемыйФичаФайл = ИмяФичаФайла;
		
		Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
			
			ТекстСообщения = Локализовать("Фича: %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ТекущийИсполняемыйФичаФайл);
			ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(ТекстСообщения);
			Если НЕ Объект.ПодробныйЛогВыполненияСценариев
					И МассивСценариевДляВыполнения.Количество() > 0 Тогда
					
				Процент = Цел(ТекИД_СценарияВМассиве / МассивСценариевДляВыполнения.Количество() * 100);
				ТекстСообщения = Формат(Процент, "ЧЦ=3; ЧДЦ=0; ЧН=") + "% "; 
				ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;	 
		
	КонецЕсли;	           
	
	Если Объект.ПодробныйЛогВыполненияСценариев
			И Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
		
		ПодробностиВыполнения = ОписаниеТекущегоСостояниеВыполненияТестов(ТекИД_СценарияВМассиве);
		ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(ПодробностиВыполнения);
		
	КонецЕсли;
	
	Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
		ЗаписатьЛогВТекстПередВыполнениемСценария(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Имя);
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеАллюр И НЕ ПустаяСтрока(Объект.ТегиПропускающиеСценарийAllure) И Не Объект.РежимВыполненияОдногоШага Тогда
		МассивТеговСценария = Неопределено;
		Если СтрокаСценария <> Неопределено И ТипЗнч(СтрокаСценария.ПроизвольныеЗначения) = Тип("Структура") Тогда
			Если СтрокаСценария.ПроизвольныеЗначения.Свойство("МассивТегов") Тогда
				МассивТеговСценария = СтрокаСценария.ПроизвольныеЗначения.МассивТегов;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если ТипЗнч(МассивТеговСценария) = Тип("Массив") Тогда
			МассивТеговДляОбработки = РазложитьСтрокуВМассивПодстрокКлиент(Объект.ТегиПропускающиеСценарийAllure, ";");
			ДанныеТегов = Новый Соответствие;
			Если МассивТеговДляОбработки.Количество() > 0 Тогда
				Для Сч = 0 По МассивТеговДляОбработки.Количество() - 1 Цикл
					ДанныеТегов.Вставить(НРег(МассивТеговДляОбработки[Сч]), Истина);
				КонецЦикла;	
				
				НадоПропуститьСценарий = Ложь;
				Для Каждого ТекТег Из МассивТеговСценария Цикл
					Если ДанныеТегов[НРег(ТекТег.Тег)] <> Неопределено Тогда
						НадоПропуститьСценарий = Истина;
						Прервать;
					КонецЕсли;	 
				КонецЦикла;	 
				
				Если НадоПропуститьСценарий Тогда
					РезультатПрохожденияТестовСценария.Вставить("Статус", "Skipped");
					ПерейтиКВыполнениюСледующегоСценария();
					Возврат;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	ДобавитьВЛогИнструкцииHTMLНачалоСценария(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве]);
	ДобавитьВЛогИнструкцииMarkdownНачалоСценария(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве]);
		
	ТекИД_ШагаВМассиве             = -1;
	ТекИД_ВыполненногоШагаВМассиве = -1;
	ВсёЕщёИдётВыполнениеШагов      = 0;
	ОшибкаAssert            = Ложь;
	Объект.АдресДанныеОбОшибке = Неопределено;
		
	Если ТекИД_СценарияВМассиве = 0 
			И (Объект.РежимВыполненияДанногоСценарияСТекущегоШага ИЛИ Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением) Тогда
		Ном = -1;
		Для Каждого Шаг Из МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги Цикл
			Ном = Ном + 1;
			Если Шаг.СтрокаШага = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага Тогда
				ТекИД_ШагаВМассиве = Ном;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;
	КонецЕсли;	 
	
	Если НадоПодключитьEPFСвязаннуюСФичей(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве]) Тогда		
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ПолучитьПутьК_EPF_Фичи(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ПолныйПутьКФиче));
		МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].EPFПодключена = Истина;
		
		ДопПараметрыПодключения = Новый Структура;
		ДопПараметрыПодключения.Вставить("ИмяОбработчика", "ОбработчикПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеСценария");
		ПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеСценария(МассивФайлов, Неопределено, ДопПараметрыПодключения);
		Возврат;
	КонецЕсли;	 	
	
	ВыполнитьСценарийАсинхронноТаймерПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьВыполненияТестов(СтрокаСценария)
	
	#Если НЕ ВебКлиент Тогда
	
	Если НЕ Объект.ИспользоватьКомпонентуVanessaExt Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ Объект.ЗаписыватьВидеоВыполненияТестов Тогда
		Возврат;
	КонецЕсли;	
	
	Если Объект.ИдетЗаписьВыполненияТестов Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ПустаяСтрока(Объект.КаталогДляЗаписиВидеоВыполненияТестов) Тогда
		ИмяВременногоКаталога = ПолучитьИмяВременногоФайла("");
		СоздатьКаталогКомандаСистемы(ИмяВременногоКаталога);
		Объект.КаталогДляЗаписиВидеоВыполненияТестов = ИмяВременногоКаталога;
	КонецЕсли;	 
	
	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПараметрыВидео.Вставить("СтрокаСценария", СтрокаСценария);
	ПараметрыВидео.Вставить("ТекИД_СценарияВМассиве", ТекИД_СценарияВМассиве);
	
	ПодключитьБиблиотекуРаботыСВидео();
	МодульРаботыСВидео.НачатьЗаписьВыполненияТестов(ПараметрыВидео);
	
	#КонецЕсли
	
КонецПроцедуры 

&НаКлиенте
Процедура НачатьЗаписьВыполненияТестовПоТегу(СтрокаСценария)
	#Если НЕ ВебКлиент Тогда
	
	Если НЕ Объект.ИспользоватьКомпонентуVanessaExt Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ИдетЗаписьВыполненияТестов Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ПустаяСтрока(Объект.КаталогДляЗаписиВидеоВыполненияТестов) Тогда
		ИмяВременногоКаталога = ПолучитьИмяВременногоФайла("");
		СоздатьКаталогКомандаСистемы(ИмяВременногоКаталога);
		Объект.КаталогДляЗаписиВидеоВыполненияТестов = ИмяВременногоКаталога;
	КонецЕсли;	 
	
	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПараметрыВидео.Вставить("СтрокаСценария", СтрокаСценария);
	ПараметрыВидео.Вставить("ТекИД_СценарияВМассиве", ТекИД_СценарияВМассиве);
	
	ПодключитьБиблиотекуРаботыСВидео();
	МодульРаботыСВидео.НачатьЗаписьВыполненияТестов(ПараметрыВидео);
	
	#КонецЕсли
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗавершитьЗаписьВыполненияТестов(СтрокаСценария)
	Если НЕ Объект.ИспользоватьКомпонентуVanessaExt Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ Объект.ИдетЗаписьВыполненияТестов Тогда
		Возврат;
	КонецЕсли;	 
	
	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПараметрыВидео.Вставить("СтрокаСценария", СтрокаСценария);
	ПараметрыВидео.Вставить("ТекИД_СценарияВМассиве", ТекИД_СценарияВМассиве);
	
	ПодключитьБиблиотекуРаботыСВидео();
	МодульРаботыСВидео.ЗавершитьЗаписьВыполненияТестов(ПараметрыВидео);
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьСценарийАсинхронноТаймерПродолжение()
	БылаОшибка = Ложь;
	ОписаниеОшибки = "";
	ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	
	НачатьЗаписьВыполненияТестов(СтрокаСценария);
	
	Если НЕ Объект.РежимВыполненияОдногоШага
		И НЕ Объект.РежимВыполненияДанногоСценарияСТекущегоШага
		И НЕ Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением Тогда 
		// Если надо выполнить ПередНачаломСценария и при этом сделать отладку по шагам - надо поставить брейкпоинт на первом
		// шаге сценария
		СлужебныеДанныеСценария = Новый Структура;
		ВызватьМетодСценарияЕслиОнЕсть(СтрокаСценария, "ПередНачаломСценария", , БылаОшибка, ОписаниеОшибки, СлужебныеДанныеСценария);
	КонецЕсли;	 
	
	Если БылаОшибка Тогда
		СтатусЗапускаСценариев = Ложь;		
		
		ИДСтрокиСценария      = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		СтрокаСценария        = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
		ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(СтрокаСценария, ИДСтрокиСценария, Истина);
		
		СтрокаСценария.Статус = "Failed";
		
		ДействияПослеЗавершенияСценария(СтрокаСценария,,, СлужебныеДанныеСценария);
		РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить("ДатаОкончания", ТекущаяДата());
		РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		РезультатПрохожденияТестовСценария.Вставить("Статус", СтрокаСценария.Статус);
		ПрекратитьВыполнениеШаговТакКакЗакончилсяСценарий = Истина;
		
		Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
			ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль("");
			ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль("Ошибка в процедуре ПередНачаломСценария()."); 
			
			ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(ПодставитьПараметрыВСтроку(
				Локализовать("Failed: %1"),
				ОписаниеОшибки
			));
			
			Статистика_ЗафиксироватьОшибка();
			
		КонецЕсли;	 
		
		РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче", СтрокаСценария.НомерСтрокиВФиче);
		
		ОстановитьЗаписьВидеоОдногоШага();
		
		Если Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
			СделатьСкриншотВозникновенияОшибкиИПерейтиКВыполнениюСледующегоСценария("ПередНачаломСценария", 
				СтрокаСценария, РезультатПрохожденияТестовСценария);
		Иначе	
			ПерейтиКВыполнениюСледующегоСценария();
		КонецЕсли;	 
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ОбновлятьДеревоПриНачалеВыполненияСценария Тогда
		АктивизироватьСтрокуДереваТекущегоШага();
	КонецЕсли;
	
	ПерейтиКВыполнениюСледующегоШага();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьВЛогИнструкцииHTMLНачалоСценария(СтруктураСценария)
	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;  
	
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииHTML, КодировкаТекста.UTF8, , Истина);
	
	ТД.ЗаписатьСтроку("НачалоСценария");
	ТД.ЗаписатьСтроку("ИмяСценария=" + СтруктураСценария.Имя);
	ТД.ЗаписатьСтроку("ИдСценария=" + Формат(ТекИД_СценарияВМассиве, "ЧГ=; ЧН=0"));
	ТД.ЗаписатьСтроку("ИмяФичи=" + СтруктураСценария.ИмяФичи);
	ТД.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВЛогИнструкцииMarkdownНачалоСценария(СтруктураСценария)
	Если НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;  
	
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииMarkdown, КодировкаТекста.UTF8, , Истина);
	
	ТД.ЗаписатьСтроку("НачалоСценария");
	ТД.ЗаписатьСтроку("ИмяСценария=" + СтруктураСценария.Имя);
	ТД.ЗаписатьСтроку("ИдСценария=" + Формат(ТекИД_СценарияВМассиве, "ЧГ=; ЧН=0"));
	ТД.ЗаписатьСтроку("ИмяФичи=" + СтруктураСценария.ИмяФичи);
	ТД.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРезультатПрохожденияТестовСценарияВМассив(РезультатПрохожденияТестовСценария, ИДСтроки)
	ИД = МассивИДСтрокиДерева[ИДСтроки];
	Если ИД = Неопределено Тогда
		МассивРезультатПрохожденияТестовСценария.Добавить(РезультатПрохожденияТестовСценария);
		МассивИДСтрокиДерева.Вставить(ИДСтроки, МассивРезультатПрохожденияТестовСценария.Количество()-1);
	Иначе
		МассивРезультатПрохожденияТестовСценария[ИД] = РезультатПрохожденияТестовСценария;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьСтрокиДереваДанныеФормыРекурсивно(ДеревоФормы)
	Для каждого ЭлементДерева Из ДеревоФормы Цикл
		ИДСтроки = ЭлементДерева.ИДСтроки;
		МассивСтрокДереваДанныеФормы.Вставить(ИДСтроки, ЭлементДерева);
		
		ЗапомнитьСтрокиДереваДанныеФормыРекурсивно(ЭлементДерева.ПолучитьЭлементы());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьСтрокиДереваДанныеФормы(ОбновлятьВсегда = Ложь)
	Если Объект.РежимВыполненияОдногоШага И НЕ ОбновлятьВсегда Тогда
		// Поиск строки дерева будет происходить по специальной таблице, которая была создана заранее
		Возврат;
	КонецЕсли;	 
	
	ДеревоФормы = Объект.ДеревоТестов.ПолучитьЭлементы();
	МассивСтрокДереваДанныеФормы.Очистить();
	ЗапомнитьСтрокиДереваДанныеФормыРекурсивно(ДеревоФормы);
КонецПроцедуры

&НаКлиенте
Функция ОпределитьИдСценарияПоСтрокеШагаКлиент(СтрокаДерева, ЭтоПример, ЭтоКонтекст)
	Если СтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 

	ТекРодитель = СтрокаДерева;
	
	Пока Истина Цикл
		Если ТекРодитель = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	 
		
		Если ТекРодитель.ДопТип = "Контекст" Тогда
			ЭтоКонтекст = Истина;
			Прервать;
		КонецЕсли;	 
		
		Если ТекРодитель.Тип = "Сценарий" Тогда
			Прервать;
		КонецЕсли;	 
		
		Если ТекРодитель.Тип = "Пример" Тогда
			ЭтоПример = Истина;
			Прервать;
		КонецЕсли;	 
		
		ТекРодитель = ТекРодитель.ПолучитьРодителя();
	КонецЦикла;	

	Возврат ТекРодитель.ИДСтроки;
КонецФункции	

&НаКлиенте
Процедура ПолучитьМассивСценариевДаннойФичи(Дерево, Массив)
	Для Каждого СтрокаДерева Из Дерево.ПолучитьЭлементы() Цикл
		Если СтрокаДерева.Тип = "Сценарий" Тогда
			Массив.Добавить(СтрокаДерева.ИДСтроки);
		КонецЕсли;	 
			
		ПолучитьМассивСценариевДаннойФичи(СтрокаДерева, Массив);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьФичу()
	Если Объект.ИдетВыполнениеСценариев Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
			Возврат;
		КонецЕсли;	 
		Если НЕ МодульРедакторТекста().МожноЗапуститьСценарийИзДаннойВкладки() Тогда
			СообщитьПользователю(Локализовать("Для выполнения данного действия необходимо сохранить файл."));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Ложь;
	
	СтрокаФичи = Элементы.ДеревоТестов.ТекущиеДанные;
	Если СтрокаФичи = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаФичи);
	Если СтрокаФичи = Неопределено Тогда
		Возврат;
	КонецЕсли;	 

	Массив     = Новый Массив;
	ПолучитьМассивСценариевДаннойФичи(СтрокаФичи, Массив);
	
	ВыполнитьСценарии(Массив);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыКнопокСценариев(ОстановкаВыполнения = Ложь)
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Элементы.ФормаVanessaEditorСоздатьНовыйСценарий.Доступность = НЕ Объект.ИдетВыполнениеСценариев;
		Элементы.ПодменюVanessaEditorЗагрузитьФичи.Доступность = НЕ Объект.ИдетВыполнениеСценариев;
		Элементы.ПанельVanessaEditorФормаПерейтиВДеревоШагов.Доступность = НЕ Объект.ИдетВыполнениеСценариев;
		Элементы.ПанельVanessaEditorПерезагрузить.Доступность = НЕ Объект.ИдетВыполнениеСценариев;
		Элементы.ПанельVanessaEditorСохранитьФайл.Доступность = НЕ Объект.ИдетВыполнениеСценариев;
		Элементы.ПанельVanessaEditorСохранитьФайлКак.Доступность = НЕ Объект.ИдетВыполнениеСценариев;
		Элементы.ПанельVanessaEditorВыполнитьСценарии.Доступность = НЕ Объект.ИдетВыполнениеСценариев;
		Элементы.ПанельVanessaEditorФормаПерезагрузитьИВыполнить.Доступность = НЕ Объект.ИдетВыполнениеСценариев;
		Элементы.ПанельVanessaEditorФормаВключитьВыключитьЗаписьВидео.Доступность = НЕ Объект.ИдетВыполнениеСценариев;
		Элементы.ПанельVanessaEditorОзвучиваниеВыполненияСценария.Доступность = НЕ Объект.ИдетВыполнениеСценариев;
	Иначе	
		Если НЕ ВыполнениеСценариевБезОткрытияФормы Тогда
			Если ОстановкаВыполнения Тогда
				Элементы.ВыполнитьСценарии.Заголовок = ЗаголовокКнопкиВыполнитьСценарии;
			ИначеЕсли Объект.ИдетВыполнениеСценариев Тогда
				Элементы.ВыполнитьСценарии.Заголовок = Локализовать("Выполняется...");
				Элементы.ОстановитьСценарии.Заголовок = ЗаголовокКнопкиОстановитьСценарии;
			Иначе                                       
				Элементы.ВыполнитьСценарии.Заголовок = ЗаголовокКнопкиВыполнитьСценарии;
			КонецЕсли;
			
			Если ОстановкаВыполнения Тогда
				Элементы.ОстановитьСценарии.Заголовок = ЗаголовокКнопкиОстановитьСценарии;
			ИначеЕсли ОстановитьВыполнениеШагов И НЕ ОстановкаВыполнения Тогда
				//Элементы.ОстановитьСценарии.Заголовок = Локализовать("Останавливается...");
			Иначе                                       
				Элементы.ОстановитьСценарии.Заголовок = ЗаголовокКнопкиОстановитьСценарии;
			КонецЕсли;
		КонецЕсли;	 
		
		Элементы.ФормаПерейтиВVanessaEditor.Доступность = НЕ Объект.ИдетВыполнениеСценариев;
		Элементы.ПодменюЗагрузитьФичи.Доступность = НЕ Объект.ИдетВыполнениеСценариев;
		Элементы.Перезагрузить.Доступность = НЕ Объект.ИдетВыполнениеСценариев;
		Элементы.ВыполнитьСценарии.Доступность = НЕ Объект.ИдетВыполнениеСценариев;
		Элементы.ФормаПерезагрузитьИВыполнить.Доступность = НЕ Объект.ИдетВыполнениеСценариев;
		
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Функция СоздатьДанныеДляПоискаСтрокиШага(СтрокаДерева)
	Массив = Новый Массив;
	
	ТекРодитель = СтрокаДерева;
	Пока ТекРодитель <> Неопределено Цикл
		Массив.Вставить(0, ТекРодитель.ИдСтроки);
		ТекРодитель = ТекРодитель.ПолучитьРодителя();
	КонецЦикла;	
	
	Возврат Массив;
КонецФункции	

&НаКлиенте
Процедура СоздатьСтруктуруПоискаДляСтрокиДерева(СтрокаДерева)
	СтруктураПоискаСтрокДерева = Новый Структура;
	СтруктураПоискаСтрокДерева.Вставить("ДанныеПоискаСтрокиШага", СоздатьДанныеДляПоискаСтрокиШага(СтрокаДерева));
	
	ЭтоПример       = Ложь;
	ЭтоШагКонтекста = Ложь;
	СтрокаСценария = НайтиСтрокуСценарияЧерезРодителя(СтрокаДерева, ЭтоПример, ЭтоШагКонтекста);
	СтруктураПоискаСтрокДерева.Вставить("ДанныеПоискаСтрокиСценария", СоздатьДанныеДляПоискаСтрокиШага(СтрокаСценария));
	
	СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаСценария);
	
	ДанныеСценария = Новый Структура;
	ДанныеСценария.Вставить("Имя", СтрокаСценария.Имя);
	ДанныеСценария.Вставить("СтрокаДерева", СтрокаСценария.ИдСтроки);
	ДанныеСценария.Вставить("ИмяФичи", СтрокаФичи.Имя);
	ДанныеСценария.Вставить("ПолныйПутьКФиче", СтрокаФичи.ПолныйПуть);
	ДанныеСценария.Вставить("ФичаИмеетСвоюEPF", СтрокаФичи.ФичаИмеетСвоюEPF);
	ДанныеСценария.Вставить("EPFПодключена", Ложь);
	ДанныеСценария.Вставить("Язык", СтрокаФичи.ПроизвольныеЗначения.Язык);

	Шаги = Новый Массив;
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("УровеньПодсценария", 0);
	ДопПараметры.Вставить("ЭтоКлиент", Истина);
	СтруктураШага = ПолучитьСтруктуруШага(СтрокаДерева, СтрокаСценария, СтрокаСценария, ЭтоШагКонтекста, ДопПараметры);
	Шаги.Добавить(СтруктураШага);
	ДанныеСценария.Вставить("Шаги", Шаги);
	
	СтруктураПоискаСтрокДерева.Вставить("ДанныеСценария", ДанныеСценария);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМассивСценариевДляВыполненияКлиент(МассивСценариевДляВыполнения)
	СтруктураСценария = Новый Структура;
	СтруктураСценария.Вставить("Имя", СтруктураПоискаСтрокДерева.ДанныеСценария.Имя);
	СтруктураСценария.Вставить("ЭтоСтруктураСценария", Ложь);
	СтруктураСценария.Вставить("СтрокаДерева", СтруктураПоискаСтрокДерева.ДанныеСценария.СтрокаДерева);
	СтруктураСценария.Вставить("ИмяФичи", СтруктураПоискаСтрокДерева.ДанныеСценария.ИмяФичи);
	СтруктураСценария.Вставить("ПолныйПутьКФиче", СтруктураПоискаСтрокДерева.ДанныеСценария.ПолныйПутьКФиче);
	СтруктураСценария.Вставить("ФичаИмеетСвоюEPF", СтруктураПоискаСтрокДерева.ДанныеСценария.ФичаИмеетСвоюEPF);
	СтруктураСценария.Вставить("EPFПодключена", СтруктураПоискаСтрокДерева.ДанныеСценария.EPFПодключена);
	СтруктураСценария.Вставить("Шаги", СтруктураПоискаСтрокДерева.ДанныеСценария.Шаги);
	СтруктураСценария.Вставить("ТекущийНомерСтрокиПодсценария", Неопределено);	
	СтруктураСценария.Вставить("ЯзыкФичи", СтруктураПоискаСтрокДерева.ДанныеСценария.Язык);
	СтруктураСценария.Вставить("ЕстьСекцияПеременные", ВФичеЕстьСекцияПеременные(СтруктураСценария.ПолныйПутьКФиче, ДанныеСекцииПеременные));
	
	ИдШагаПоИдСтроки = Новый Соответствие;
	Ид = -1;
	Для Каждого ТекШаг Из СтруктураСценария.Шаги Цикл
		Ид = Ид + 1;
		ИдШагаПоИдСтроки.Вставить(ТекШаг.ИдСтроки, Ид);
	КонецЦикла;	
	
	СтруктураСценария.Вставить("ИдШагаПоИдСтроки", ИдШагаПоИдСтроки);
	
	МассивСценариевДляВыполнения.Добавить(СтруктураСценария);
КонецПроцедуры

&НаКлиенте
Функция ЭтуСтрокуМожноИсполнить(СтрокаДерева)
	Если СтрокаДерева.Тип = "Шаг" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Если СтрокаДерева.Тип = "Область" Тогда
		Если ЗначениеЗаполнено(СтрокаДерева.ДопТип) Тогда
			
			Если СтрокаДерева.ДопТип = "УсловиеИначе" ИЛИ СтрокаДерева.ДопТип = "Попытка" ИЛИ СтрокаДерева.ДопТип = "Исключение" Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Возврат Истина;
			
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	

&НаКлиенте
Функция ЭтуСтрокуМожноИсполнитьИлиВНейЕстьПодчиненныеИсполняемыеСтроки(СтрокаДерева)
	Если СтрокаДерева.Тип = "Сценарий" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Если СтрокаДерева.Тип = "Шаг" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Если СтрокаДерева.Тип = "Область" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Если СтрокаДерева.Тип = "ШагСценарий" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	

&НаКлиенте
Функция ОпределитьИдИсполняемойСтрокиДерева(СтрокаДерева, НужнаяСтрока)
	ТекСтрока = СтрокаДерева;
	
	Если ЭтуСтрокуМожноИсполнить(ТекСтрока) Тогда
		НужнаяСтрока = ТекСтрока;
		Возврат ТекСтрока.ИдСтроки;
	КонецЕсли;	 
	
	Пока Истина Цикл
		ЭлементыДерева = ТекСтрока.ПолучитьЭлементы();
		Если ЭлементыДерева.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;	 
		
		ТекСтрока = Неопределено;
		Для Каждого ПромСтрокаДерева Из ЭлементыДерева Цикл
			Если ПромСтрокаДерева.СтрокаПараметровШагаВВидеТаблицы Тогда
				Продолжить;
			КонецЕсли;	 
			
			Если ПустаяСтрока(ПромСтрокаДерева.Имя) Тогда
				Продолжить;
			КонецЕсли;	 
			
			ТекСтрока = ПромСтрокаДерева;
			
			Прервать;
		КонецЦикла;	 
		
		Если ТекСтрока = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	 
		
		Если ЭтуСтрокуМожноИсполнить(ТекСтрока) Тогда
			НужнаяСтрока = ТекСтрока;
			Возврат ТекСтрока.ИдСтроки;
		КонецЕсли;	 
	КонецЦикла;	
	
КонецФункции	

&НаКлиенте
Функция НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи, СтрокаПоиска, НомерСтрокиВФиче, Нашли = Ложь)
	Если НомерСтрокиВФиче = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ТекИдМассива = НомерСтрокиВФиче - 2;
	Пока Истина Цикл
		Если ТекИдМассива < 0 Тогда
			Прервать;
		КонецЕсли;	 
		
		Если МассивТекстФичи.Количество() - 1 < ТекИдМассива Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = СокрЛП(МассивТекстФичи[ТекИдМассива]);
		
		Если Стр = "" Тогда
			ТекИдМассива = ТекИдМассива - 1;
			Продолжить;
		КонецЕсли;	 
		
		Если Лев(Стр, 1) <> "#" Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = Сред(Стр, 2);
		
		Если Лев(НРег(Стр), СтрДлина(СтрокаПоиска)) <> НРег(СтрокаПоиска) Тогда
			ТекИдМассива = ТекИдМассива - 1;
			Продолжить;
		КонецЕсли;	 
		
		// значит нашли нужную строку
		Стр = СокрЛП(Сред(Стр, СтрДлина(СтрокаПоиска) + 1));
		Нашли = Истина;
		
		Возврат Стр;
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Функция НайтиТегиГруппыДляЭтойГруппы(МассивТекстФичи, НомерСтрокиВФиче, Нашли = Ложь)
	Результат = Новый Массив;
	Если НомерСтрокиВФиче = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;	 
	
	ТекИдМассива = НомерСтрокиВФиче - 2;
	Пока Истина Цикл
		Если ТекИдМассива < 0 Тогда
			Прервать;
		КонецЕсли;	 
		
		Если МассивТекстФичи.Количество() - 1 < ТекИдМассива Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = СокрЛП(МассивТекстФичи[ТекИдМассива]);
		
		Если Стр = "" Тогда
			ТекИдМассива = ТекИдМассива - 1;
			Продолжить;
		КонецЕсли;	 
		
		Если Лев(Стр, 1) <> "@" Тогда
			Прервать;
		КонецЕсли;	 
		
		Результат.Добавить(Сред(Стр, 2));
		Нашли = Истина;
		ТекИдМассива = ТекИдМассива - 1;
		
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции	

&НаКлиенте
Процедура ВычислитьПараметрыВнутриСтроки(СлужебнаяСтрока)
	Стр = "";
	
	НашлиСтрокуДляВычисления = Ложь;
	СтрокаВыражения          = "";
	
	Для Ккк = 1 По СтрДлина(СлужебнаяСтрока) Цикл
		Символ = Сред(СлужебнаяСтрока, Ккк, 1);
		Если Символ = "[" Тогда
			НашлиСтрокуДляВычисления = Истина;
			Продолжить;
		КонецЕсли;	 
		
		Если Символ = "]" Тогда
			НашлиСтрокуДляВычисления = Ложь;
			РезультатВыражения = Вычислить(СтрокаВыражения);
			Стр = Стр + РезультатВыражения;
			СтрокаВыражения = "";
			Продолжить;
		КонецЕсли;	 
		
		Если НашлиСтрокуДляВычисления Тогда
			СтрокаВыражения = СтрокаВыражения + Символ;
		Иначе
			Стр = Стр + Символ;
		КонецЕсли;	 
	КонецЦикла;	
	
	СлужебнаяСтрока = Стр;
КонецПроцедуры

&НаКлиенте
Функция ЭтотШагНеНужноИгнорировать(Шаг)
	Если Шаг.Свойство("МассивКомментариевШага") И Шаг.МассивКомментариевШага <> Неопределено
		И Шаг.МассивКомментариевШага.Найти("[autodoc.ignorestep]") <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	 

&НаКлиенте
Процедура ПроставитьШагамСвойстваГруппировкиПриЗаписиРекурсивно(СтрокаДереваГруппа, Параметры, ДопПараметры)
	ЭлементыГруппы = СтрокаДереваГруппа.ПолучитьЭлементы();
	Для Каждого ЭлементГруппы Из ЭлементыГруппы Цикл
		Если ЭлементГруппы.Тип = "Шаг" ИЛИ ЭлементГруппы.ДопТип = "Условие" ИЛИ ЭлементГруппы.ДопТип = "Цикл" Тогда
			Для Каждого Шаг Из Параметры.Сценарий.Шаги Цикл
				Если ЭлементГруппы.ИдСтроки = Шаг.СтрокаШага Тогда
					Шаг.Вставить("ВнутриГруппыКотораяРаботаетКакОдинШаг", Истина);
					Шаг.Вставить("ПервыйВГруппеШагов", Ложь);
					Шаг.Вставить("ПоследнийВГруппеШагов", Ложь);
					
					Если НЕ ДопПараметры.НашлиПервыйШаг И ЭтотШагНеНужноИгнорировать(Шаг) Тогда
						Шаг.Вставить("ПервыйВГруппеШагов", Истина);
						Шаг.Вставить("ТекстИнструкция", ДопПараметры.ТекстШагаГруппы);
						Шаг.Вставить("ТегиГруппы", ДопПараметры.ТегиГруппы);
						Если ДопПараметры.ТегиГруппы <> Неопределено  Тогда
							Если НЕ Шаг.Свойство("МассивТеговШага") ИЛИ Шаг.МассивТеговШага = Неопределено Тогда
								Шаг.Вставить("МассивТеговШага", Новый Массив);
							КонецЕсли;	 
							Для Каждого ТекТег Из ДопПараметры.ТегиГруппы Цикл
								Шаг.МассивТеговШага.Добавить(ТекТег);
							КонецЦикла;	 
						КонецЕсли;	 
						Шаг.Вставить("МасштабироватьВВидео", ДопПараметры.МасштабироватьВВидео);
						ДопПараметры.НашлиПервыйШаг = Истина;
					ИначеЕсли НЕ ДопПараметры.НашлиПервыйШаг Тогда
						Шаг.Вставить("ИгнорироватьШагВАвтоинструкции", Истина);
						Шаг.Вставить("ВнутриГруппыКотораяРаботаетКакОдинШаг", Ложь);
					КонецЕсли;	 
					
					Если ЭтотШагНеНужноИгнорировать(Шаг) Тогда
						ДопПараметры.ВременныйШаг = Шаг;
					Иначе	
						Шаг.Вставить("ИгнорироватьШагВАвтоинструкции", Истина);
						Шаг.Вставить("ВнутриГруппыКотораяРаботаетКакОдинШаг", Ложь);
					КонецЕсли;	 
					
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
		КонецЕсли;	 
		
		ДопПараметры.Уровень = ДопПараметры.Уровень + 1;
		ПроставитьШагамСвойстваГруппировкиПриЗаписиРекурсивно(ЭлементГруппы, Параметры, ДопПараметры);
		ДопПараметры.Уровень = ДопПараметры.Уровень - 1;
	КонецЦикла;	
	
	Если ДопПараметры.Уровень = 0 Тогда
		ДопПараметры.ВременныйШаг.Вставить("ПоследнийВГруппеШагов", Истина);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьШагамСвойстваИгнорироватьШагВАвтоинструкцииРекурсивно(СтрокаДереваГруппа, Параметры, ДопПараметры)
	ЭлементыГруппы = СтрокаДереваГруппа.ПолучитьЭлементы();
	Для Каждого ЭлементГруппы Из ЭлементыГруппы Цикл
		Если ЭлементГруппы.Тип = "Шаг" ИЛИ ЭлементГруппы.ДопТип = "Условие" ИЛИ ЭлементГруппы.ДопТип = "Цикл" Тогда
			Для Каждого Шаг Из Параметры.Сценарий.Шаги Цикл
				Если ЭлементГруппы.ИдСтроки = Шаг.СтрокаШага Тогда
					Шаг.Вставить("ИгнорироватьШагВАвтоинструкции", Истина);
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
		КонецЕсли;	 
		
		ПроставитьШагамСвойстваИгнорироватьШагВАвтоинструкцииРекурсивно(ЭлементГруппы, Параметры, ДопПараметры);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока, Параметры)
	ПредставлениеКвадратнаяСкобкаЛевая  = "__&КвадратнаяСкобкаЛевая__";
	ПредставлениеКвадратнаяСкобкаПравая = "__&КвадратнаяСкобкаПравая__";
	ПредставлениеДирективаТекст1 = "__&ДирективаТекст1__";
	ПредставлениеДирективаТекст2 = "__&ДирективаТекст2__";
	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока, "\[", ПредставлениеКвадратнаяСкобкаЛевая);
	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока, "\]", ПредставлениеКвадратнаяСкобкаПравая);
	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока, "<[", ПредставлениеДирективаТекст1);
	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока, "]>", ПредставлениеДирективаТекст2);
	
	Если Параметры.Свойство("ОбработкаПараметровШага") Тогда
		Если Параметры.ОбработкаПараметровШага Тогда
			Для Ккк = 1 По Параметры.Шаг.ЗначенияПараметров.Количество() Цикл
				СтрокаЗамены = "%" + Формат(Ккк, "ЧГ=; ЧН=0");
				СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока, СтрокаЗамены, Параметры.Шаг.ЗначенияПараметров[Ккк - 1].Значение.Значение);
			КонецЦикла;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Параметры.Свойство("ВычислитьВыражения") Тогда
		Если Параметры.ВычислитьВыражения Тогда
			ВычислитьПараметрыВнутриСтроки(СлужебнаяСтрока);
		КонецЕсли;	 
	КонецЕсли;	 
	
	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока, ПредставлениеКвадратнаяСкобкаЛевая, "[");	
	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока, ПредставлениеКвадратнаяСкобкаПравая, "]");	
	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока, ПредставлениеДирективаТекст1, "<[");	
	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока, ПредставлениеДирективаТекст2, "]>");	
	
	Если Параметры.Свойство("СтрокаДереваГруппа") Тогда
		// Значит этот шаг относится к группе, которая в видео попадёт как один шаг.
		Если (Параметры.Свойство("ОбработатьГруппыШаговКакОдинШаг") И Параметры.ОбработатьГруппыШаговКакОдинШаг)
			ИЛИ Объект.ЗаписьВидеоГруппаШаговКакШаг Тогда
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Уровень", 0);
			ДопПараметры.Вставить("НашлиПервыйШаг", Ложь);
			ДопПараметры.Вставить("ПоследнийШаг", Ложь);
			ДопПараметры.Вставить("ВременныйШаг", Неопределено);
			ДопПараметры.Вставить("ТекстШагаГруппы", СлужебнаяСтрока);
			ДопПараметры.Вставить("МасштабироватьВВидео", Ложь);
			Если Параметры.Свойство("МасштабироватьВВидео") Тогда
				ДопПараметры.Вставить("МасштабироватьВВидео", Параметры.МасштабироватьВВидео);
			КонецЕсли;	 
			Если Параметры.Свойство("ТегиГруппы") Тогда
				ДопПараметры.Вставить("ТегиГруппы", Параметры.ТегиГруппы);
			Иначе	
				ДопПараметры.Вставить("ТегиГруппы", Новый Массив);
			КонецЕсли;	 
			ПроставитьШагамСвойстваГруппировкиПриЗаписиРекурсивно(Параметры.СтрокаДереваГруппа, Параметры, ДопПараметры);
		КонецЕсли;	 
		
		Если Параметры.Свойство("ПроставитьПодчиненнымШагамИгнорироватьШагВАвтоинструкции") Тогда
			Если Параметры.ПроставитьПодчиненнымШагамИгнорироватьШагВАвтоинструкции Тогда
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("Уровень", 0);
				ПроставитьШагамСвойстваИгнорироватьШагВАвтоинструкцииРекурсивно(Параметры.СтрокаДереваГруппа, Параметры, ДопПараметры);
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРодителяВерхнегоУровняДляСтрокиШага(СтрокаШага)
	НайденнаяСтрока = Неопределено;
	ТекРодитель = СтрокаШага;
	Пока Истина Цикл
		РодительШага = ТекРодитель.ПолучитьРодителя();
		Если РодительШага = Неопределено Тогда
			Прервать;
		ИначеЕсли РодительШага.Тип = "Сценарий" Тогда
			Если НайденнаяСтрока = Неопределено Тогда
				НайденнаяСтрока = РодительШага;
			КонецЕсли;	 
			
			Прервать;
		КонецЕсли;	
		
		ТекРодитель = РодительШага;
		НайденнаяСтрока = РодительШага;
	КонецЦикла;	
	
	Возврат НайденнаяСтрока;
КонецФункции	 

&НаКлиенте
Функция ПервыйЭлементРодителяИсключаяСтрокиТаблицыGherkin(ЭлементыРодителя)
	Для Каждого Элем Из ЭлементыРодителя Цикл
		Если Элем.СтрокаПараметровШагаВВидеТаблицы Тогда
			Продолжить;
		КонецЕсли;	 
		Возврат Элем;
	КонецЦикла;	 
	
	Возврат Неопределено;
КонецФункции	  

&НаКлиенте
Процедура ПервыйШагВгруппеРекурсивно(СтрокаДерева, Результат)
	Если Результат <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыСтроки = СтрокаДерева.ПолучитьЭлементы();
	Для Каждого ТекШаг Из ЭлементыСтроки Цикл
		Если Результат <> Неопределено Тогда
			Возврат;
		КонецЕсли;	 
		
		Если ТекШаг.Тип = "Шаг" Тогда
			Результат = ТекШаг;
			Прервать;
		КонецЕсли;
		
		ПервыйШагВгруппеРекурсивно(ТекШаг, Результат);
		
	КонецЦикла;	 
	
КонецПроцедуры 

&НаКлиенте
Функция ПервыйШагВгруппе(РодительШага)
	Результат = Неопределено;
	ПервыйШагВгруппеРекурсивно(РодительШага, Результат);
	Возврат Результат; 
КонецФункции	 

&НаКлиенте
Функция ЭтотШагСамыйПервыйВГруппеПервогоУровня(СтрокаШага, РодительШага)
	
	ПервыйШагВгруппе = ПервыйШагВгруппе(РодительШага);
	Если ПервыйШагВгруппе = Неопределено Тогда
		Возврат -1;
	КонецЕсли;	 
	
	Если ПервыйШагВгруппе.ИдСтроки = СтрокаШага.ИдСтроки Тогда
		Возврат 0;
	КонецЕсли;	 
	
	Возврат -1;
	
КонецФункции	 

&НаКлиенте
Процедура НайтиГруппыШаговКоторыеНадоОбрабатыватьКакОдинШаг(МассивТекстФичи, Шаг, Сценарий)
	ИДСтрокиШага = Шаг.СтрокаШага;
	СтрокаШага   = МассивСтрокДереваДанныеФормы[ИДСтрокиШага];
	
	РодительШага = ПолучитьРодителяВерхнегоУровняДляСтрокиШага(СтрокаШага);
	
	Если РодительШага = Неопределено Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не получилось определить родителя у шага <%1>."),
			СтрокаШага.Имя
		);
	КонецЕсли;	 
	
	Если (РодительШага.Тип <> "Область") И (РодительШага.Тип <> "ШагСценарий") Тогда // только эти шаги идут как видеовставки
		Возврат;
	КонецЕсли;	 
	
	ЭлементыРодителя = РодительШага.ПолучитьЭлементы();
	Индекс           = ЭлементыРодителя.Индекс(СтрокаШага);
	Если Индекс = -1 Тогда
		// надо проверить, что это самый первый шаг в группе первого уровня
		Индекс = ЭтотШагСамыйПервыйВГруппеПервогоУровня(СтрокаШага, РодительШага);
	КонецЕсли;	 
	Если Индекс = 0 Тогда
		// значит этот шаг первый в группе
		
		Нашли = Ложь;
		СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи, "[autodoc.groupsteps]", РодительШага.НомерСтрокиВФиче, Нашли);
		
		НашлиТегиГруппы = Ложь;
		ТегиГруппы      = НайтиТегиГруппыДляЭтойГруппы(МассивТекстФичи, РодительШага.НомерСтрокиВФиче, НашлиТегиГруппы);
		
		Если Не ЗначениеЗаполнено(СлужебнаяСтрока) Тогда
			// Значит не указан новый текст группы. Оставим прежний.
			СлужебнаяСтрока = РодительШага.Имя;
		КонецЕсли;	 
		
		НашлиДирективуНеМасштабироватьШаг = Ложь;
		НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи, "[autodoc.donotscale]", РодительШага.НомерСтрокиВФиче, НашлиДирективуНеМасштабироватьШаг);
		
		Если Нашли ИЛИ Объект.ЗаписьВидеоГруппаШаговКакШаг Тогда
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить("ВычислитьВыражения", Истина);
			ПараметрыОбработки.Вставить("ОбработатьГруппыШаговКакОдинШаг", Истина);
			ПараметрыОбработки.Вставить("Шаг", Шаг);
			ПараметрыОбработки.Вставить("Сценарий", Сценарий);
			ПараметрыОбработки.Вставить("СтрокаДереваГруппа", РодительШага);
			ПараметрыОбработки.Вставить("ТегиГруппы", ТегиГруппы);
			ПараметрыОбработки.Вставить("МасштабироватьВВидео", Не НашлиДирективуНеМасштабироватьШаг);
			ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока, ПараметрыОбработки);
		КонецЕсли;	 
	КонецЕсли;	 

КонецПроцедуры

&НаКлиенте
Процедура НайтиГруппыШаговКоторыеНадоИгнорировать(МассивТекстФичи, Шаг, Сценарий)
	ИДСтрокиШага = Шаг.СтрокаШага;
	СтрокаШага   = МассивСтрокДереваДанныеФормы[ИДСтрокиШага];
	
	РодительШага = СтрокаШага.ПолучитьРодителя();
	Если (РодительШага.Тип <> "Область") И (РодительШага.Тип <> "ШагСценарий") Тогда // только эти шаги идут как видеовставки
		Возврат;
	КонецЕсли;	 
	
	ЭлементыРодителя = РодительШага.ПолучитьЭлементы();
	Индекс           = ЭлементыРодителя.Индекс(СтрокаШага);
	Если Индекс = 0 Тогда
		// значит этот шаг первый в группе
		
		Нашли = Ложь;
		СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи, "[autodoc.ignorestep]", РодительШага.НомерСтрокиВФиче, Нашли);
		Если НЕ Нашли Тогда
			Возврат;
		КонецЕсли;	 
		
		Если Не Сценарий.Свойство("ГруппыКоторыеНадоИгнорировать") Тогда
			Сценарий.Вставить("ГруппыКоторыеНадоИгнорировать", Новый Массив);
		КонецЕсли;	 
		
		Сценарий.ГруппыКоторыеНадоИгнорировать.Добавить(РодительШага.ИдСтроки);
		
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("ПроставитьПодчиненнымШагамИгнорироватьШагВАвтоинструкции", Истина);
		ПараметрыОбработки.Вставить("Шаг", Шаг);
		ПараметрыОбработки.Вставить("Сценарий", Сценарий);
		ПараметрыОбработки.Вставить("СтрокаДереваГруппа", РодительШага);
		ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока, ПараметрыОбработки);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиШагиКоторыеНеНадоМасштабировать(МассивТекстФичи, Шаг, Сценарий)
	Нашли = Ложь;
	СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи, "[autodoc.donotscale]", Шаг.НомерСтрокиВФиче, Нашли);
	Если Не Нашли Тогда
		Возврат;
	КонецЕсли;	
	
	Шаг.Вставить("МасштабироватьВВидео", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НайтиШагиКоторыеНадоИгнорировать(МассивТекстФичи, Шаг, Сценарий)
	Нашли = Ложь;
	СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи, "[autodoc.ignorestep]", Шаг.НомерСтрокиВФиче, Нашли);
	Если Не Нашли Тогда
		Возврат;
	КонецЕсли;	
	
	Шаг.Вставить("ИгнорироватьШагВАвтоинструкции", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НайтиПризнакЧтоСценарийНадоИгнорировать(МассивТекстФичи, Сценарий)
	Нашли = Ложь;
	СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи, "[autodoc.ignorescenario]", Сценарий.НомерСтрокиВФиче, Нашли);
	Если НЕ Нашли Тогда
		Возврат;
	КонецЕсли;	 
	
	Сценарий.Вставить("ИгнорироватьШагВАвтоинструкции", Истина);
	
	ПараметрыУстановки = Новый Структура;
	ПараметрыУстановки.Вставить("Сценарий", Сценарий);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Уровень", 0);
	ПроставитьШагамСвойстваИгнорироватьШагВАвтоинструкцииРекурсивно(МассивСтрокДереваДанныеФормы[Сценарий.СтрокаДерева], 
		ПараметрыУстановки, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура НайтиПризнакЧтоСлайдСценарияНадоИгнорировать(МассивТекстФичи, Сценарий)
	Если Объект.ЗаписьВидеоОтключитьСлайдСценария И Объект.СоздаватьИнструкциюВидео Тогда
		Сценарий.Вставить("ИгнорироватьСлайдСценарияВАвтоинструкции", Истина);
		Возврат;
	ИначеЕсли (Объект.СоздаватьИнструкциюHTML ИЛИ Объект.СоздаватьИнструкциюMarkdown) И НЕ Объект.ДобавлятьИмяСценарияВТекстовуюИнструкцию Тогда
		Сценарий.Вставить("ИгнорироватьСлайдСценарияВАвтоинструкции", Истина);
		Возврат;
	КонецЕсли;
	
	Нашли = Ложь;
	СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи, "[autodoc.ignore.scenarioslide]", Сценарий.НомерСтрокиВФиче, Нашли);
	Если НЕ Нашли Тогда
		Возврат;
	КонецЕсли;
	
	Сценарий.Вставить("ИгнорироватьСлайдСценарияВАвтоинструкции", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НайтиПризнакЧтоСлайдСЗаголовкомФичиНадоИгнорировать(МассивТекстФичи, Сценарий)
	
	Нашли = Ложь;
	
	Если Объект.ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи И Объект.СоздаватьИнструкциюВидео Тогда
		Нашли = Истина;
	ИначеЕсли (Объект.СоздаватьИнструкциюHTML ИЛИ Объект.СоздаватьИнструкциюMarkdown) И НЕ Объект.ДобавлятьИмяФичиВТекстовуюИнструкцию Тогда
		Нашли = Истина;
	Иначе
		СлужебнаяСтрока = МассивТекстФичи.Найти("#[autodoc.ignore.featureslide]");
		Нашли = ?(СлужебнаяСтрока = Неопределено, Ложь, Истина);
	КонецЕсли;
	
	Если Нашли Тогда
		Сценарий.Вставить("ИгнорироватьСлайдСЗаголовкомФичиВАвтоинструкции", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьИзФичиПараметрыСборкиВидео()
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат;
	КонецЕсли;	 
	
	Для Каждого Сценарий Из МассивСценариевДляВыполнения Цикл
		МассивФичи = ЗагрузитьФайлВМассив(Сценарий.ПолныйПутьКФиче);
		
		НайтиПризнакЧтоСценарийНадоИгнорировать(МассивФичи, Сценарий);
		НайтиПризнакЧтоСлайдСценарияНадоИгнорировать(МассивФичи, Сценарий);
		
		Шаги       = Сценарий.Шаги;
		Для Каждого Шаг Из Шаги Цикл
			Если Шаг.Свойство("ЭтоШагКонтекста") И Шаг.ЭтоШагКонтекста Тогда
				Продолжить;
			КонецЕсли;	 
			
			НайтиГруппыШаговКоторыеНадоОбрабатыватьКакОдинШаг(МассивФичи, Шаг, Сценарий);
			НайтиГруппыШаговКоторыеНадоИгнорировать(МассивФичи, Шаг, Сценарий);
			
			Если НЕ Шаг.Свойство("ЭтоШагПодсценария") ИЛИ НЕ Шаг.ЭтоШагПодсценария Тогда
				НайтиШагиКоторыеНеНадоМасштабировать(МассивФичи, Шаг, Сценарий);
				НайтиШагиКоторыеНадоИгнорировать(МассивФичи, Шаг, Сценарий);
			КонецЕсли;	 
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСвойстваШага(Шаг, Сценарий, ИДШага)
	СценарийИзДерева = МассивСценариевДляВыполнения[Число(Сценарий.ИдСценария)];
	ШагИзДерева      = СценарийИзДерева.Шаги[Число(Шаг.ИдШага)];
	Для Каждого СвойствоШага Из ШагИзДерева Цикл
		Шаг.Вставить(СвойствоШага.Ключ, СвойствоШага.Значение);
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Процедура ПроставитьСвойстваШагаСУчетомСвойствГруппы(Шаг, СтрокаДереваШаг, Сценарий)
	ШагНадоИгнорировать = Ложь;
	ТекСтрока = СтрокаДереваШаг;
	Пока Истина Цикл
		РодительШага     = ТекСтрока.ПолучитьРодителя();
		ЭлементыРодителя = РодительШага.ПолучитьЭлементы();
		
		Если РодительШага = Неопределено Тогда
			Прервать;
		ИначеЕсли РодительШага.Тип = "Сценарий" Тогда
			Прервать;
		ИначеЕсли РодительШага.Тип = "Область" Тогда
			Если ТипЗнч(РодительШага.ПроизвольныеЗначения) = Тип("Структура") Тогда
				Если РодительШага.ПроизвольныеЗначения.Свойство("МассивКомментариевШага")
					И РодительШага.ПроизвольныеЗначения.МассивКомментариевШага <> Неопределено  Тогда
					Для Каждого Комментарий Из РодительШага.ПроизвольныеЗначения.МассивКомментариевШага Цикл
						Если Найти(НРег(Комментарий), "[autodoc.groupsteps]") > 0 Тогда
							
							СлужебнаяСтрока = СокрЛП(РодительШага.Имя);
							Если Найти(НРег(Комментарий), "#[autodoc.groupsteps]") > 0 Тогда
								//Особенность старого парсера
								ПромСтрока = Сред(СокрЛП(Комментарий), 22);
							Иначе
								ПромСтрока = Сред(СокрЛП(Комментарий), 21);
							КонецЕсли;	 
							Если ЗначениеЗаполнено(ПромСтрока) Тогда
								СлужебнаяСтрока = ПромСтрока;
							КонецЕсли;	 
							
							Индекс = ЭлементыРодителя.Индекс(СтрокаДереваШаг);
							Если Индекс <> (ЭлементыРодителя.Количество() - 1) Тогда
								// вызываем проверку только для одного шага
								ШагНадоИгнорировать = Истина;
								Прервать;
							КонецЕсли;	 
							
							ПараметрыОбработки = Новый Структура;
							ПараметрыОбработки.Вставить("ВычислитьВыражения", Истина);
							ПараметрыОбработки.Вставить("ОбработатьГруппыШаговКакОдинШаг", Истина);
							ПараметрыОбработки.Вставить("Шаг", Шаг);
							ПараметрыОбработки.Вставить("Сценарий", Сценарий);
							ПараметрыОбработки.Вставить("СтрокаДереваГруппа", РодительШага);
							ПараметрыОбработки.Вставить("МасштабироватьВВидео", Ложь);
							
							ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока, ПараметрыОбработки);
							
							Шаг.Вставить("ТекстИнструкция", СокрЛП(СлужебнаяСтрока));
						ИначеЕсли Найти(НРег(Комментарий), "[autodoc.ignorestep]") > 0 Тогда
							ШагНадоИгнорировать = Истина;
							Прервать;
						КонецЕсли;	 
					КонецЦикла;	 
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		ТекСтрока = РодительШага;
	КонецЦикла;	
	
	Шаг.Вставить("ИгнорироватьШагВАвтоинструкции", ШагНадоИгнорировать);
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьСлужебныеДирективыАвтоинструкций(Шаг, Сценарий)
	
	ИдСтроки = Шаг.ИдСтроки;
	СтрокаДереваШаг = Неопределено;
	НайтиСтрокуДереваПоИдСтроки(ИдСтроки, Объект.ДеревоТестов.ПолучитьЭлементы(), СтрокаДереваШаг);
	ПроставитьСвойстваШагаСУчетомСвойствГруппы(Шаг, СтрокаДереваШаг, Сценарий);
	
	МассивСтрокПроизвольногоТекстаMarkdown = Новый Массив;
	
	Если Шаг.Свойство("МассивКомментариевШага") И Шаг.МассивКомментариевШага <> Неопределено Тогда
		Для Каждого КомментарийШага Из Шаг.МассивКомментариевШага Цикл
			Директива = "[autodoc.text]";
			Поз = Найти(НРег(КомментарийШага), Директива); 
			Если Поз > 0 Тогда
				СлужебнаяСтрока = СокрЛП(Сред(КомментарийШага, Поз + СтрДлина(Директива)));
				ПараметрыОбработки = Новый Структура;
				ПараметрыОбработки.Вставить("ОбработкаПараметровШага", Истина);
				ПараметрыОбработки.Вставить("ВычислитьВыражения", Истина);
				ПараметрыОбработки.Вставить("Шаг", Шаг);
				ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока, ПараметрыОбработки);
				
				Шаг.Вставить("ТекстИнструкция", СлужебнаяСтрока);
				Продолжить;
			КонецЕсли;
			
			Директива = "[autodoc.ignorestep]";
			Поз = Найти(НРег(КомментарийШага), Директива); 
			Если Поз > 0 Тогда
				Шаг.Вставить("ИгнорироватьШагВАвтоинструкции", Истина);
				Продолжить;
			КонецЕсли;
			
			Директива = "[autodoc.md]";
			Поз = Найти(НРег(КомментарийШага), Директива);
			Если Поз > 0 Тогда
				СлужебнаяСтрока = СокрЛП(Прав(КомментарийШага, СтрДлина(КомментарийШага) - СтрДлина(Директива)));
				МассивСтрокПроизвольногоТекстаMarkdown.Добавить(СлужебнаяСтрока);
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокПроизвольногоТекстаMarkdown.Количество() > 0 Тогда
		Шаг.Вставить("МассивСтрокПроизвольногоТекстаMarkdown", МассивСтрокПроизвольногоТекстаMarkdown);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлHTMLИнструкции()
	
	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОкончанияЗаголовка = 0;
	ЗаголовокФичи = ПолучитьЗаголовокФичиИзЛогаИнструкции(ИмяФайлаЛогаИнструкцииHTML, СтрокаОкончанияЗаголовка);
	
	ТД = Новый ЧтениеТекста(ИмяФайлаЛогаИнструкцииHTML, КодировкаТекста.UTF8);
	
	МассивСценариев = Новый Массив;
	МассивШагов     = Неопределено;
	
	Ном = 0;
	Стр = ТД.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл
		
		Ном = Ном + 1;
		Если Ном <= СтрокаОкончанияЗаголовка Тогда
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;
		
		Если Стр = "НачалоСценария" Тогда
			ТекСтруктура = Новый Структура;
			МассивШагов  = Новый Массив;
			ТекСтруктура.Вставить("Шаги", МассивШагов);
			МассивСценариев.Добавить(ТекСтруктура);
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		ИначеЕсли Стр = "НачалоШага" Тогда
			ТекСтруктура = Новый Структура;
			МассивШагов.Добавить(ТекСтруктура);
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;
		
		Поз = Найти(Стр, "=");
		Если Поз = 0 Тогда
			ВызватьИсключение ПодставитьПараметрыВСтроку(
				Локализовать("Странный параметр в логе инструкции HTML: %1"),
				Стр
			);
		КонецЕсли;
		
		ИмяПараметра      = Лев(Стр, Поз - 1);
		ЗначениеПараметра = Сред(Стр, Поз + 1);
		
		ТекСтруктура.Вставить(ИмяПараметра, ЗначениеПараметра);
		Стр = ТД.ПрочитатьСтроку();
		
	КонецЦикла; 
	ТД.Закрыть();
	
	ИмяФайла = ПодготовитьИмяФайлаТестовойИнструкции(ТекущаяФичаИнструкцииHTML);
	ФайлФичи = Новый Файл(ТекущиеДанныеИнструкцииHTML.ПолныйПутьКФиче);
	
	ШаблонИмениФайлаДляЗаписи = "%1%2.HTML";
	ИмяФайлаДляЗаписи = _СтрШаблон(
		ШаблонИмениФайлаДляЗаписи, 
		ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийHTML)), 
		УбратьВсеЗапрещенныеСимволыИзИмениФайла(ФайлФичи.ИмяБезРасширения));
	
	ДокументHTML = Новый ДокументHTML();
	Если Объект.ВариантСтилейHTMLИнструкции <> 3 Тогда
		
		УзелHEAD = ДокументHTML.СоздатьЭлемент("head");
		ДокументHTML.ЭлементДокумента.ДобавитьДочерний(УзелHEAD);
		
		УзелTITLE = ДокументHTML.СоздатьЭлемент("title");
		УзелTITLE.ТекстовоеСодержимое = ТекущаяФичаИнструкцииHTML;
		УзелHEAD.ДобавитьДочерний(УзелTITLE);
		
		УзелSTYLE = ДокументHTML.СоздатьЭлемент("style");
		УзелSTYLE.УстановитьАтрибут("type", "text/css");
		УзелSTYLE.ТекстовоеСодержимое = "h1{font-size: 40px} h2{font-size: 35px; align: center} p{font-size: 30px}";
		Если Объект.ВариантСтилейHTMLИнструкции = 2 Тогда
			
			Если ПустаяСтрока(Объект.СтилиHTMLИнструкции) Тогда
				ТекстСтилей = ПолучитьСтилиCSSИзМакета("CSS_Skrinkast");
			Иначе
				ТекстСтилей = ПрочитатьСтилиHTMLИнструкции();
			КонецЕсли;
			
			УзелSTYLE.ТекстовоеСодержимое = ТекстСтилей;
			
		КонецЕсли;
		
		УзелHEAD.ДобавитьДочерний(УзелSTYLE);
		
		УзелScript = ДокументHTML.СоздатьЭлемент("script");
		
		Если Объект.ВключитьОзвучкуHTML Тогда
			
			ШаблонСкриптОзвучкиHTMLШаговИнструкции = "
			|	let synth;
			|	document.addEventListener('DOMContentLoaded', ready);
			|	function ready(){
			|		synth = window.speechSynthesis;
			|		const imageBtn = document.querySelectorAll('.image_btn');
			|		imageBtn.forEach((elem) => {
			|			elem.addEventListener('click', onClickImg);
			|		});
			|	};
			|	
			|	function onClickImg(elem){
			|		const utterThis = new SpeechSynthesisUtterance(elem.target.previousSibling.textContent);
			|		utterThis.pitch = %1;
			|		utterThis.rate = %2;
			|		const myVoices = synth.getVoices();;
			|		for (i = 0; i < myVoices.length; i++) {
			|			if (myVoices[i].name === ""%3"") {
			|				utterThis.voice = myVoices[i];
			|			}
			|		};
			|		synth.speak(utterThis);
			|}";
			
			СкриптОзвучкиHTMLШаговИнструкции = Ванесса._СтрШаблон(
				ШаблонСкриптОзвучкиHTMLШаговИнструкции, 
				СтрЗаменить(Строка(?(Объект.ДиапазонОзвучкиHTML = 0, Объект.ДиапазонОзвучкиHTML, Объект.ДиапазонОзвучкиHTML / 10)), ",", "."), 
				СтрЗаменить(Строка(?(Объект.ТемпОзвучкиHTML = 0, Объект.ТемпОзвучкиHTML, Объект.ТемпОзвучкиHTML / 10)), ",", "."), 
				Объект.ГолосОзвучкиHTML);
			
			УзелScript.ТекстовоеСодержимое = УзелScript.ТекстовоеСодержимое + СкриптОзвучкиHTMLШаговИнструкции;
			
		КонецЕсли;
		
		УзелHEAD.ДобавитьДочерний(УзелScript);
		
		УзелBODY = ДокументHTML.СоздатьЭлемент("body");
		ДокументHTML.ЭлементДокумента.ДобавитьДочерний(УзелBODY);
		
		УзелHeader = ДокументHTML.СоздатьЭлемент("header");
		УзелBODY.ДобавитьДочерний(УзелHeader);
		
		УзелMain = ДокументHTML.СоздатьЭлемент("main");
		УзелBODY.ДобавитьДочерний(УзелMain);
		
		
		МассивФичи = ЗагрузитьФайлВМассив(МассивСценариевДляВыполнения[0].ПолныйПутьКФиче);
		НайтиПризнакЧтоСлайдСЗаголовкомФичиНадоИгнорировать(МассивФичи, МассивСценариевДляВыполнения[0]);
		Для Каждого Сценарий Из МассивСценариевДляВыполнения Цикл
			НайтиПризнакЧтоСлайдСценарияНадоИгнорировать(МассивФичи, Сценарий);
		КонецЦикла;
		
		Если Не МассивСценариевДляВыполнения[0].Свойство("ИгнорироватьСлайдСЗаголовкомФичиВАвтоинструкции") Тогда
			ТекстовыйУзел = Неопределено;
			УзелЗаголовок = ДокументHTML.СоздатьЭлемент("h1");
			УзелHeader.ДобавитьДочерний(УзелЗаголовок);
			Для Каждого Стр Из ЗаголовокФичи Цикл
				Если ТекстовыйУзел <> Неопределено Тогда
					ПереносСтроки = ДокументHTML.СоздатьЭлемент("br");
					УзелЗаголовок.ДобавитьДочерний(ПереносСтроки);
				КонецЕсли;
				ТекстовыйУзел = ДокументHTML.СоздатьТекстовыйУзел(Стр);
				УзелЗаголовок.ДобавитьДочерний(ТекстовыйУзел);
			КонецЦикла;
		КонецЕсли;
		
		ИДСкриншота = 0;
		Для Каждого Сценарий Из МассивСценариев Цикл
			
			Если Не МассивСценариевДляВыполнения.Получить(Сценарий.ИдСценария).Свойство("ИгнорироватьСлайдСценарияВАвтоинструкции") Тогда
				УзелЗаголовок = ДокументHTML.СоздатьЭлемент("h2");
				УзелЗаголовок.ТекстовоеСодержимое = Сценарий.ИмяСценария;
				УзелHeader.ДобавитьДочерний(УзелЗаголовок);
			КонецЕсли;
			
			ИмяФичи = Сценарий.ИмяФичи;
			ИмяФичи = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяФичи);
			ИмяФичи = СтрЗаменить(ИмяФичи, " ", "_");
			ИмяСценария = СтрЗаменить(Сценарий.ИмяСценария, " ", "_");
			ИмяСценария = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяСценария);
			
			МассивШагов = Сценарий.Шаги;
			
			УбратьШагиИзТекстовойИнструкцииСОдинаковымИдГруппы(МассивШагов);
			ПометитьШагиТекстовойИнструкцииУКоторыхНеНадоВыводитьТекст(МассивШагов);
			
			НомШагаАвтоинструкции = 1;
			Для Каждого Шаг Из МассивШагов Цикл
				ДополнитьСвойстваШага(Шаг, Сценарий, Шаг.ИДШага);
			КонецЦикла;
			
			СчетчикШагов = 0;
			Для Каждого Шаг Из МассивШагов Цикл
				
				СчетчикШагов = СчетчикШагов + 1;
				
				УШагаВыводитьТолькоСкриншот = Ложь;
				Если Шаг.Свойство("УШагаВыводитьТолькоСкриншот") Тогда
					УШагаВыводитьТолькоСкриншот = Шаг.УШагаВыводитьТолькоСкриншот;
				КонецЕсли;
				
				ЭтоШагБезСкриншота = ?(СписокШаговБезСкриншота.Найти(Шаг.СтрокаРеальнойПроцедуры) = Неопределено, Ложь, Истина);
				
				ОбработатьСлужебныеДирективыАвтоинструкций(Шаг, Сценарий);
				
				ИДСкриншота = ИДСкриншота + 1;
				
				Если Шаг.ИгнорироватьШагВАвтоинструкции Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭтоШагБезСкриншота Тогда
					ПереданныеВШагТаблицы = Новый Массив;
					Если Шаг.Свойство("ПереданныеВШагТаблицы") Тогда
						ПереданныеВШагТаблицы = Шаг.ПереданныеВШагТаблицы[0];
					КонецЕсли;
				Иначе
					ТекстШага = Шаг.Имя;
					Если Шаг.Свойство("ТекстИнструкция") И ЗначениеЗаполнено(Шаг.ТекстИнструкция) Тогда
						ТекстШага = Шаг.ТекстИнструкция;
					КонецЕсли;
					СтрокаШага = СтрЗаменить(ТекстШага, "\n", Символы.ПС);
					ПереданныеВШагТаблицы = РазложитьСтрокуВМассивПодстрокКлиент(СтрокаШага, Символы.ПС);
				КонецЕсли;
				
				УзелСсылка = Неопределено;
				Для Ккк = 0 По ПереданныеВШагТаблицы.Количество() - 1 Цикл
					
					Если ЭтоШагБезСкриншота Тогда
						
						Стр = ПереданныеВШагТаблицы[Ккк].Получить("HTML");
						
						Если ТипЗнч(Стр) = Тип("ДокументHTML") Тогда
							
							НайденныеУзлыStyle = Стр.ПолучитьЭлементыПоИмени("style");
							Если НайденныеУзлыStyle.Количество() Тогда
								НовыйУзелSTYLE = НайденныеУзлыStyle[0];
								УзелSTYLE.ТекстовоеСодержимое = НовыйУзелSTYLE.ТекстовоеСодержимое;
								Продолжить;
							КонецЕсли;
							
							Узел = Стр.ЭлементДокумента.ДочерниеУзлы[0];
							НовыйУзел = ДокументHTML.ИмпортироватьУзел(Узел, Истина);
							УзелMain.ДобавитьДочерний(НовыйУзел);
							
						Иначе
							
							Стр = стрЗаменить(Стр, "|", "");
							Стр = стрЗаменить(Стр, "'", "");
							Стр = СокрП(Стр);
							
							ДобавитьСтрокуКакТекст(ДокументHTML, УзелMain, УбратьСпецсиволыАвтоинструкций(Стр), ЭтоШагБезСкриншота);
							
						КонецЕсли;
						
					Иначе
						
						Стр = ПереданныеВШагТаблицы[Ккк];
						Если Лев(Стр, 1) = "*" Тогда
							Стр = СокрЛ(Сред(Стр, 2));
						КонецЕсли;	
						ДобавитьСтрокуКакТекст(ДокументHTML, УзелMain, УбратьСпецсиволыАвтоинструкций(Стр), ЭтоШагБезСкриншота);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЭтоШагБезСкриншота Тогда
					Продолжить;
				КонецЕсли;
				
				Если Шаг.Свойство("ТекстГруппы") Тогда
					ЗаменятьТекстШаговНаИменаГрупп = Истина;
					Если ОбъектКонтекст.Свойство("ЗаменятьТекстШаговНаИменаГрупп") Тогда
						ЗаменятьТекстШаговНаИменаГрупп = ОбъектКонтекст.ЗаменятьТекстШаговНаИменаГрупп;
					КонецЕсли;
					
					Если ЗаменятьТекстШаговНаИменаГрупп Тогда
						Стр = Шаг.ТекстГруппы;
					КонецЕсли;
				КонецЕсли;
				
				Если Лев(Стр, 1) = "*" Тогда
					Стр = СокрЛ(Сред(Стр, 2));
				КонецЕсли;	
				
				СтрСкриншотаДляHTML = СтрЗаменить(
					Шаг.Скриншот, 
					ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийHTML)), 
					"");
				СтрСкриншотаДляHTML = СтрЗаменить(СтрСкриншотаДляHTML, "\", "/");
				
				УзелФигура = ДокументHTML.СоздатьЭлемент("figure");
				УзелФигура.УстановитьАтрибут("class", "caption");
				
				Если Объект.ТекстовыеИнструкцииГруппаШаговКакШаг Тогда
					УзелРазрывСтраницы = ДокументHTML.СоздатьЭлемент("p");
					УзелРазрывСтраницы.УстановитьАтрибут("class", "new-page");
				Иначе
					УзелРазрывСтраницы = Неопределено;
				КонецЕсли;	
				
				Если Объект.АвтонумерацияШагов И Ккк = 1 Тогда
					Стр = ПолучитьФорматированныйНомер(НомШагаАвтоинструкции, 3) + "." + Символы.НПП + Стр;
					НомШагаАвтоинструкции = НомШагаАвтоинструкции + 1;
				КонецЕсли;
				
				Стр = УбратьСпецсиволыАвтоинструкций(Стр);
				
				УзелПодписьФигуры = ДокументHTML.СоздатьЭлемент("figcaption");
				Если НЕ УШагаВыводитьТолькоСкриншот Тогда
					УзелПодписьФигуры.ТекстовоеСодержимое = Стр;
				Иначе
					УзелПодписьФигуры.ТекстовоеСодержимое = "";
				КонецЕсли;
				
				УзелФигура.ДобавитьДочерний(УзелПодписьФигуры);
				
				УзелКартинка = ДокументHTML.СоздатьЭлемент("img");
				УзелКартинка.УстановитьАтрибут("src", СтрСкриншотаДляHTML);
				УзелКартинка.УстановитьАтрибут("class", "image_btn");
				//УзелКартинка.УстановитьАтрибут("onClick", "onClickImg()");
				
				УзелФигура.ДобавитьДочерний(УзелКартинка);
				
				УзелMain.ДобавитьДочерний(УзелФигура);
				
				Если Объект.ТекстовыеИнструкцииГруппаШаговКакШаг И СчетчикШагов <> МассивШагов.Количество() Тогда
					УзелMain.ДобавитьДочерний(УзелРазрывСтраницы);
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	
	ИначеЕсли Объект.ВариантСтилейHTMLИнструкции = 3 Тогда
		
		ТекстДокумента = ПолучитьСтилиCSSИзМакета("CSS_3D_Сarousel");
		ДокументHTML = ПолучитьДокументHTML(ТекстДокумента);
		
		//Подменяем стили CSS
		Если Не ПустаяСтрока(Объект.СтилиHTMLИнструкции)Тогда
			НайденныеУзлы = ДокументHTML.ПолучитьЭлементыПоИмени("style");
			Если НайденныеУзлы.Количество() > 0 Тогда
				УзелSTYLE = НайденныеУзлы[0];
				УзелSTYLE.ТекстовоеСодержимое = ПрочитатьСтилиHTMLИнструкции();
			КонецЕсли;
		КонецЕсли;
		
		УзелMain = ДокументHTML.ПолучитьЭлементПоИдентификатору("main");
		УзелФигура = ДокументHTML.ПолучитьЭлементПоИдентификатору("figure");
		
		ИДСкриншота = 0;
		Для Каждого Сценарий Из МассивСценариев Цикл
			
			ИмяФичи = Сценарий.ИмяФичи;
			ИмяФичи = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяФичи);
			ИмяФичи = СтрЗаменить(ИмяФичи, " ", "_");
			ИмяСценария = СтрЗаменить(Сценарий.ИмяСценария, " ", "_");
			ИмяСценария = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяСценария);
			
			МассивШагов = Сценарий.Шаги;
			
			УбратьШагиИзТекстовойИнструкцииСОдинаковымИдГруппы(МассивШагов);
			ПометитьШагиТекстовойИнструкцииУКоторыхНеНадоВыводитьТекст(МассивШагов);
			
			НомШагаАвтоинструкции = 1;
			Для Каждого Шаг Из МассивШагов Цикл
				ДополнитьСвойстваШага(Шаг, Сценарий, Шаг.ИДШага);
			КонецЦикла;
			
			СчетчикШагов = 0;
			Для Каждого Шаг Из МассивШагов Цикл
				
				СчетчикШагов = СчетчикШагов + 1;
				
				УШагаВыводитьТолькоСкриншот = Ложь;
				Если Шаг.Свойство("УШагаВыводитьТолькоСкриншот") Тогда
					УШагаВыводитьТолькоСкриншот = Шаг.УШагаВыводитьТолькоСкриншот;
				КонецЕсли;
				
				ЭтоШагБезСкриншота = ?(СписокШаговБезСкриншота.Найти(Шаг.СтрокаРеальнойПроцедуры) = Неопределено, Ложь, Истина);
				
				ОбработатьСлужебныеДирективыАвтоинструкций(Шаг, Сценарий);
				
				ИДСкриншота = ИДСкриншота + 1;
				
				Если Шаг.ИгнорироватьШагВАвтоинструкции Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭтоШагБезСкриншота Тогда
					ПереданныеВШагТаблицы = Новый Массив;
					Если Шаг.Свойство("ПереданныеВШагТаблицы") Тогда
						ПереданныеВШагТаблицы = Шаг.ПереданныеВШагТаблицы[0];
					КонецЕсли;
				Иначе
					ТекстШага = Шаг.Имя;
					Если Шаг.Свойство("ТекстИнструкция") И ЗначениеЗаполнено(Шаг.ТекстИнструкция) Тогда
						ТекстШага = Шаг.ТекстИнструкция;
					КонецЕсли;
					СтрокаШага = СтрЗаменить(ТекстШага, "\n", Символы.ПС);
					ПереданныеВШагТаблицы = РазложитьСтрокуВМассивПодстрокКлиент(СтрокаШага, Символы.ПС);
				КонецЕсли;
				
				УзелСсылка = Неопределено;
				Для Ккк = 0 По ПереданныеВШагТаблицы.Количество() - 1 Цикл
					
					Если ЭтоШагБезСкриншота Тогда
						
						Стр = ПереданныеВШагТаблицы[Ккк].Получить("HTML");
						
						Если ТипЗнч(Стр) = Тип("ДокументHTML") Тогда
							
							// Вставляем в основной документ main
							// в верстке меняем классы на те которые уже в ванессе
							
							Узел = Стр.ЭлементДокумента.ДочерниеУзлы[0];
							НовыйУзел = ДокументHTML.ИмпортироватьУзел(Узел, Истина);
							УзелMain.ДобавитьДочерний(НовыйУзел);
							
						КонецЕсли;
						
					Иначе
						
						Стр = ПереданныеВШагТаблицы[Ккк];
						Если Лев(Стр, 1) = "*" Тогда
							Стр = СокрЛ(Сред(Стр, 2));
						КонецЕсли;	
						ДобавитьСтрокуКакТекст(ДокументHTML, УзелФигура, УбратьСпецсиволыАвтоинструкций(Стр), ЭтоШагБезСкриншота);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЭтоШагБезСкриншота Тогда
					Продолжить;
				КонецЕсли;
				
				Если Шаг.Свойство("ТекстГруппы") Тогда
					ЗаменятьТекстШаговНаИменаГрупп = Истина;
					Если ОбъектКонтекст.Свойство("ЗаменятьТекстШаговНаИменаГрупп") Тогда
						ЗаменятьТекстШаговНаИменаГрупп = ОбъектКонтекст.ЗаменятьТекстШаговНаИменаГрупп;
					КонецЕсли;
					
					Если ЗаменятьТекстШаговНаИменаГрупп Тогда
						Стр = Шаг.ТекстГруппы;
					КонецЕсли;
				КонецЕсли;
				
				Если Лев(Стр, 1) = "*" Тогда
					Стр = СокрЛ(Сред(Стр, 2));
				КонецЕсли;	
				
				СтрСкриншотаДляHTML = СтрЗаменить(
					Шаг.Скриншот, 
					ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийHTML)), 
					"");
				СтрСкриншотаДляHTML = СтрЗаменить(СтрСкриншотаДляHTML, "\", "/");
				
				УзелБлок = ДокументHTML.СоздатьЭлемент("div");
				
				Если Объект.АвтонумерацияШагов И Ккк = 1 Тогда
					Стр = ПолучитьФорматированныйНомер(НомШагаАвтоинструкции, 3) + "." + Символы.НПП + Стр;
					НомШагаАвтоинструкции = НомШагаАвтоинструкции + 1;
				КонецЕсли;
				
				Стр = УбратьСпецсиволыАвтоинструкций(Стр);
				
				УзелПодписьФигуры = ДокументHTML.СоздатьЭлемент("figcaption");
				Если НЕ УШагаВыводитьТолькоСкриншот Тогда
					УзелПодписьФигуры.ТекстовоеСодержимое = Стр;
				Иначе
					УзелПодписьФигуры.ТекстовоеСодержимое = "";
				КонецЕсли;
				
				УзелБлок.ДобавитьДочерний(УзелПодписьФигуры);
				
				УзелКартинка = ДокументHTML.СоздатьЭлемент("img");
				УзелКартинка.УстановитьАтрибут("src", СтрСкриншотаДляHTML);
				УзелКартинка.УстановитьАтрибут("class", "image_btn");
				//УзелКартинка.УстановитьАтрибут("onClick", "onClickImg()");
				
				УзелБлок.ДобавитьДочерний(УзелКартинка);
				
				УзелФигура.ДобавитьДочерний(УзелБлок);
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.ОткрытьФайл(ИмяФайлаДляЗаписи, "UTF-8");
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументHTML, ЗаписьHTML);
	
	СообщитьПользователю (ПодставитьПараметрыВСтроку(
		Локализовать("Записываю %1"),
		ИмяФайлаДляЗаписи
	));
	ЗаписьHTML.Закрыть();
	
	УдалитьФайлыКомандаСистемы(ИмяФайлаЛогаИнструкцииHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуКакТекст(ДокументHTML, УзелРодитель, Стр, ЭтоШагБезСкриншота)
	
	УзелАбзац = ДокументHTML.СоздатьЭлемент("p");
	ТекстовыйУзел = ДокументHTML.СоздатьТекстовыйУзел(Стр);
	
	ЕстьВертЧерта = Найти(Стр, "|") > 0;
	
	Если ЕстьВертЧерта Тогда
		УзелКод = ДокументHTML.СоздатьЭлемент("pre");
		УзелКод.ДобавитьДочерний(ТекстовыйУзел);
		УзелАбзац.ДобавитьДочерний(УзелКод);
		УзелРодитель.ДобавитьДочерний(УзелАбзац);
	ИначеЕсли ЭтоШагБезСкриншота Тогда
		УзелАбзац.ДобавитьДочерний(ТекстовыйУзел);
		УзелРодитель.ДобавитьДочерний(УзелАбзац);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗаголовокФичиИзЛогаИнструкции(ИмяФайла, СтрокаОкончанияЗаголовка)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");
	
	ЗаголовокФичи = Новый Массив;
	Ном = 0;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	
		
		Ном = Ном + 1;
		
		Если Стр = "--окончание заголовка--" Тогда
			СтрокаОкончанияЗаголовка = Ном;
			Прервать;
		КонецЕсли;	 
		
		ЗаголовокФичи.Добавить(Стр);
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат ЗаголовокФичи;
КонецФункции	

&НаСервере
Функция ПолучитьСтилиCSSИзМакета(ИмяМакета);
	
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Макет = ОбъектСервер.ПолучитьМакет(ИмяМакета);
	ТекстДокумента = Макет.ПолучитьТекст();
	
	Возврат ТекстДокумента;
	
КонецФункции

&НаКлиенте

Функция ПолучитьДокументHTML(СтрокаHTML)
	
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(СтрокаHTML);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
	ЧтениеHTML.Закрыть();
	
	Возврат ДокументHTML;
	
КонецФункции

&НаКлиенте
Процедура СоздатьФайлMarkdownИнструкции()
	
	Если НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОкончанияЗаголовка = 0;
	ЗаголовокФичи            = ПолучитьЗаголовокФичиИзЛогаИнструкции(ИмяФайлаЛогаИнструкцииMarkdown, СтрокаОкончанияЗаголовка);
	
	ТД = Новый ЧтениеТекста(ИмяФайлаЛогаИнструкцииMarkdown, КодировкаТекста.UTF8);
	
	МассивСценариев = Новый Массив;
	МассивШагов     = Неопределено;
	Ном = 0;
	Стр = ТД.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл
		
		Ном = Ном + 1;
		Если Ном <= СтрокаОкончанияЗаголовка Тогда
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;
		
		Если Стр = "НачалоСценария" Тогда
			ТекСтруктура = Новый Структура;
			МассивШагов  = Новый Массив;
			
			ТекСтруктура.Вставить("Шаги", МассивШагов);
			
			МассивСценариев.Добавить(ТекСтруктура);
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		ИначеЕсли Стр = "НачалоШага" Тогда
			ТекСтруктура = Новый Структура;
			
			МассивШагов.Добавить(ТекСтруктура);
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;
		
		Поз = Найти(Стр, "=");
		Если Поз = 0 Тогда
			ВызватьИсключение ПодставитьПараметрыВСтроку(
				Локализовать("Странный параметр в логе инструкции Markdown: %1"),
				Стр
			);
		КонецЕсли;
		
		ИмяПараметра      = Лев(Стр, Поз - 1);
		ЗначениеПараметра = Сред(Стр, Поз + 1);
		
		ТекСтруктура.Вставить(ИмяПараметра, ЗначениеПараметра);
		Стр = ТД.ПрочитатьСтроку();
		
	КонецЦикла;
	ТД.Закрыть();
	
	ИмяФайла = ПодготовитьИмяФайлаТестовойИнструкции(ТекущаяФичаИнструкцииMarkdown);
	ФайлФичи = Новый Файл(ТекущиеДанныеИнструкцииMarkdown.ПолныйПутьКФиче);
	
	ИмяФайлаДляЗаписи = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийMarkdown))
	    + УбратьВсеЗапрещенныеСимволыИзИмениФайла(ФайлФичи.ИмяБезРасширения) + ".MD";
	
	ЗТ = Новый ЗаписьТекста(ИмяФайлаДляЗаписи, "Windows-1251", , Ложь); 
	ЗТ.Закрыть(); // убираю BOM, специально для ATOM
	
	Страница = Новый ЗаписьТекста(ИмяФайлаДляЗаписи, "UTF-8", , Истина);
	
	МассивФичи = ЗагрузитьФайлВМассив(МассивСценариевДляВыполнения[0].ПолныйПутьКФиче);
	НайтиПризнакЧтоСлайдСЗаголовкомФичиНадоИгнорировать(МассивФичи, МассивСценариевДляВыполнения[0]);
	Для Каждого Сценарий Из МассивСценариевДляВыполнения Цикл
		НайтиПризнакЧтоСлайдСценарияНадоИгнорировать(МассивФичи, Сценарий);
	КонецЦикла;
	
	// записываю заголовок
	Если Не МассивСценариевДляВыполнения[0].Свойство("ИгнорироватьСлайдСЗаголовкомФичиВАвтоинструкции") Тогда
		Для Каждого Стр Из ЗаголовокФичи Цикл
			
			Стр = СокрЛП(Стр);
			Если Найти(Стр, "Функционал:") > 0 Тогда
				Стр = СтрЗаменить(Стр, "Функционал:", "**Функционал:**");
			ИначеЕсли НРег(Лев(Стр, 3)) = "как" Тогда
				Стр =  "> **Как**" + Сред(Стр, 4);
			ИначеЕсли НРег(Лев(Стр, 4)) = "хочу" Тогда
				Стр =  "> **Хочу**" + Сред(Стр, 5);
			ИначеЕсли НРег(Лев(Стр, 6)) = "я хочу" Тогда
				Стр =  "> **Я хочу**" + Сред(Стр, 7);
			ИначеЕсли НРег(Лев(Стр, 5)) = "чтобы" Тогда
				Стр =  "> **Чтобы**" + Сред(Стр, 6);
			Иначе
				Стр = " > " + Стр;
			КонецЕсли;
			
			Страница.ЗаписатьСтроку(Стр);
			Страница.ЗаписатьСтроку("");
			
		КонецЦикла;
	КонецЕсли;
	
	ИДСкриншота = 0;
	ИДСценария  = 0;
	Для Каждого Сценарий Из МассивСценариев Цикл
		
		Если Не МассивСценариевДляВыполнения.Получить(Сценарий.ИдСценария).Свойство("ИгнорироватьСлайдСценарияВАвтоинструкции") Тогда
			ИДСценария = ИДСценария + 1;
			Если ИДСценария > 1 Тогда
				Страница.ЗаписатьСтроку("");
			КонецЕсли;
			Страница.ЗаписатьСтроку("");
			Страница.ЗаписатьСтроку("**Сценарий:** " + Сценарий.ИмяСценария);
		КонецЕсли;
		
		ИмяФичи = Сценарий.ИмяФичи;
		ИмяФичи = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяФичи);
		ИмяФичи = СтрЗаменить(ИмяФичи, " ", "_");
		
		МассивШагов = Сценарий.Шаги;
		
		УбратьШагиИзТекстовойИнструкцииСОдинаковымИдГруппы(МассивШагов);
		ПометитьШагиТекстовойИнструкцииУКоторыхНеНадоВыводитьТекст(МассивШагов);
		
		НомШагаАвтонумерации = 1;
		Для Каждого Шаг Из МассивШагов Цикл
			ДополнитьСвойстваШага(Шаг, Сценарий, Шаг.ИДШага);
		КонецЦикла;
		
		Для Каждого Шаг Из МассивШагов Цикл
			
			УШагаВыводитьТолькоСкриншот = Ложь;
			Если Шаг.Свойство("УШагаВыводитьТолькоСкриншот") Тогда
				УШагаВыводитьТолькоСкриншот = Шаг.УШагаВыводитьТолькоСкриншот;
			КонецЕсли;
			
			ЭтоШагБезСкриншота = ?(СписокШаговБезСкриншота.Найти(Шаг.СтрокаРеальнойПроцедуры) = Неопределено, Ложь, Истина);
			
			ОбработатьСлужебныеДирективыАвтоинструкций(Шаг, Сценарий);
			
			ИДСкриншота = ИДСкриншота + 1;
			
			Если Шаг.ИгнорироватьШагВАвтоинструкции Тогда
				Продолжить;
			КонецЕсли;
			
			Страница.ЗаписатьСтроку("");
			
			Если Шаг.Свойство("МассивСтрокПроизвольногоТекстаMarkdown")
				И Шаг.МассивСтрокПроизвольногоТекстаMarkdown.Количество() > 0 Тогда
				
				Для Каждого ЭлементМассива Из Шаг.МассивСтрокПроизвольногоТекстаMarkdown Цикл
					Страница.ЗаписатьСтроку(ЭлементМассива);
				КонецЦикла;
				
			Иначе
				
				Если ЭтоШагБезСкриншота Тогда
					МассивСтрок = Шаг.ПереданныеВШагТаблицы[0];
				Иначе
					ТекстШага = Шаг.Имя;
					Если Шаг.Свойство("ТекстИнструкция") И ЗначениеЗаполнено(Шаг.ТекстИнструкция) Тогда
						ТекстШага = Шаг.ТекстИнструкция;
					КонецЕсли;
					
					СтрокаШага = СтрЗаменить(ТекстШага, "\n", Символы.ПС);
					МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(СтрокаШага, Символы.ПС);
				КонецЕсли;
				
				Для Ккк = 0 По МассивСтрок.Количество() - 1 Цикл
					
					Если ЭтоШагБезСкриншота Тогда
						
						Если МассивСтрок[Ккк].Получить("MD") = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						Стр = МассивСтрок[Ккк].Получить("MD");
						Стр = стрЗаменить(Стр, "|", "");
						Стр = стрЗаменить(Стр, "'", "");
						Стр = СокрП(Стр);
						
					Иначе
						
						Стр = МассивСтрок[Ккк];
						
					КонецЕсли;
					
					Если Шаг.Свойство("ТекстГруппы") Тогда
						ЗаменятьТекстШаговНаИменаГрупп = Истина;
						Если ОбъектКонтекст.Свойство("ЗаменятьТекстШаговНаИменаГрупп") Тогда
							ЗаменятьТекстШаговНаИменаГрупп = ОбъектКонтекст.ЗаменятьТекстШаговНаИменаГрупп;
						КонецЕсли;
						
						Если ЗаменятьТекстШаговНаИменаГрупп Тогда
							Стр = Шаг.ТекстГруппы;
						КонецЕсли;
					КонецЕсли;
					
					Если Лев(Стр, 1) = "*" Тогда
						Стр = СокрЛ(Сред(Стр, 2));
					КонецЕсли;
					
					Если УШагаВыводитьТолькоСкриншот Тогда
						ТекстСтроки = "";
					ИначеЕсли Не Объект.АвтонумерацияШагов Или ЭтоШагБезСкриншота Тогда
						ТекстСтроки = Стр;
					ИначеЕсли Ккк = 0 Тогда
						ТекстСтроки = "" + ПолучитьФорматированныйНомер(НомШагаАвтонумерации, 3) + ". " + Стр;
						НомШагаАвтонумерации = НомШагаАвтонумерации + 1;
					Иначе
						ТекстСтроки = "" + Стр;
					КонецЕсли;
					
					Если Лев(ТекстСтроки, 1) = "*" Тогда
						ТекстСтроки = СокрЛ(Сред(ТекстСтроки, 2));
					КонецЕсли;
					
					Страница.ЗаписатьСтроку(УбратьСпецсиволыАвтоинструкций(ТекстСтроки));
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ЭтоШагБезСкриншота Тогда
				Продолжить;
			КонецЕсли;
			
			Страница.ЗаписатьСтроку("");
			СтрСкриншотаДляMarkdown = СтрЗаменить(
				Шаг.Скриншот, 
				ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиИнструкцийMarkdown)), 
				"");
			Страница.ЗаписатьСтроку("![](" + СтрЗаменить(СтрСкриншотаДляMarkdown, "\", "/") + ")");
			
		КонецЦикла;
	КонецЦикла;
	
	СообщитьПользователю (ПодставитьПараметрыВСтроку(
		Локализовать("Записываю %1"),
		ИмяФайлаДляЗаписи
	));
	Страница.Закрыть();
	
	УдалитьФайлыКомандаСистемы(ИмяФайлаЛогаИнструкцииMarkdown);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцедураПереместитьФайл(Знач Стр1, Знач Стр2)
	ПереместитьФайлКомандаСистемы(Стр1, Стр2);
КонецПроцедуры

#Область АссертыСлужебное
// Портирован блок ассертов из проекта xUnitFor1C (https://github.com/xDrivenDevelopment/xUnitFor1C)
// взят релиз 3.0.0.3
// { МЕТОДЫ ДЛЯ ПРОВЕРКИ ЗНАЧЕНИЙ (assertions). 

&НаКлиенте
Функция ФорматДСО(ДопСообщениеОшибки)
	Если ДопСообщениеОшибки = "" Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Символы.ПС + " <" + ДопСообщениеОшибки + ">";
КонецФункции

&НаКлиенте
Функция СтруктураОшибкаАссерта(СообщениеОшибки)
	Возврат Новый Структура("БылаОшибка,ОписаниеОшибки,ЗначениеExpected,ЗначениеActual",
	    Истина, СообщениеОшибки, ЗначениеExpected, ЗначениеActual);
КонецФункции	 

&НаКлиенте
Функция ВызватьОшибкуПроверки(СообщениеОшибки)
	
	Префикс = "[" + СтатусыРезультатаТестирования.ОшибкаПроверки + "]";
	ТекстСообщения = Префикс + " " + СообщениеОшибки;
	Если НЕ ОстановитьВыполнениеШагов Тогда
		ВызватьИсключение ТекстСообщения;
	Иначе
		Если ОшибкиАссертов = Неопределено Тогда
			ОшибкиАссертов = Новый Массив;
		КонецЕсли;	 
		
		СтруктураОшибкаАссерта = СтруктураОшибкаАссерта(СообщениеОшибки);
		ОшибкиАссертов.Добавить(СтруктураОшибкаАссерта);
		Возврат СтруктураОшибкаАссерта;
	КонецЕсли;	 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыСтрокой(Знач Параметры, Знач ИмяПеременной = "Параметры")
	
	ПараметрыСтрока = "";
	Если Параметры <> Неопределено Тогда
		Если ТипЗнч(Параметры) = Тип("Массив") Тогда
			Для Индекс = 0 По Параметры.ВГраница() Цикл 
				ПараметрыСтрока = ПараметрыСтрока + ", " + ИмяПеременной + "[" + Формат(Индекс, "ЧН=0; ЧГ=0") + "]";
			КонецЦикла;
			ПараметрыСтрока = Сред(ПараметрыСтрока, 3);
		Иначе
			ПараметрыСтрока = ИмяПеременной;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыСтрока;
	
КонецФункции

// Только для внутреннего использования
&НаСервереБезКонтекста
Функция ОпределитьКоличествоПередаваемыхТаблиц(СтрокаДерева)
	Если СтрокаДерева.ШагСПараметрамиВТаблице <> Истина Тогда
		Возврат 0;
	КонецЕсли;	 
	
	Количество = 1;
	Для Каждого ПодчиненнаяСтрокаДерева Из СтрокаДерева.Строки Цикл
		Если Не ЗначениеЗаполнено(ПодчиненнаяСтрокаДерева.Имя) Тогда
			Количество = Количество + 1;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Количество;
КонецФункции	

// Устанавливает ожидаемое и реальное значение для ассертов.
//
// Параметры:
//   ОжидаемоеЗначнеие - Произвольный - Ожидаемое значение.
//   РеальноеЗначение  - Произвольный - Реальное значение.
//
&НаКлиенте
Процедура ОбработатьAssertОжидаемоеРеальноеЗначение(ОжидаемоеЗначнеие, РеальноеЗначение) Экспорт
	ОшибкаAssert     = Истина;
	ЗначениеActual   = РеальноеЗначение;
	ЗначениеExpected = ОжидаемоеЗначнеие;
КонецПроцедуры 

#КонецОбласти

&НаСервереБезКонтекста
Процедура ДобавитьШагиВМассив(ДеревоСтроки, Шаги)
	Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
		Если СтрДеревоСтроки.Тип = "Примеры" Тогда
			// эти сценарии уже учтены
			Продолжить;
		КонецЕсли; 
		
		Если СтрДеревоСтроки.Тип = "Шаг" Тогда
			СтруктураШага = Новый Структура;
			СтруктураШага.Вставить("Имя", СтрДеревоСтроки.Имя);
			СтруктураШага.Вставить("ИмяШагаБезКлючевогоСлова", СтрДеревоСтроки.ИмяШагаБезКлючевогоСлова);
			СтруктураШага.Вставить("АдресСнипета", СтрДеревоСтроки.АдресСнипета);
			СтруктураШага.Вставить("ШагСПараметрамиВТаблице", СтрДеревоСтроки.ШагСПараметрамиВТаблице);
			СтруктураШага.Вставить("КоличествоПередаваемыхТаблиц", ОпределитьКоличествоПередаваемыхТаблиц(СтрДеревоСтроки));
			Шаги.Добавить(СтруктураШага);
		КонецЕсли;	 
		ДобавитьШагиВМассив(СтрДеревоСтроки.Строки, Шаги);
	КонецЦикла;	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьИменаФайловФичИзДереваВМассив(ДеревоСтроки, МассивФич, МассивШагов)
	Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
		Если СтрДеревоСтроки.Тип = "Фича" Тогда
			МассивФич.Добавить(СтрДеревоСтроки.ПолныйПуть);
			Шаги = Новый Массив;
			ДобавитьШагиВМассив(СтрДеревоСтроки.Строки, Шаги);
			МассивШагов.Добавить(Шаги);
		КонецЕсли;	 
		ДобавитьИменаФайловФичИзДереваВМассив(СтрДеревоСтроки.Строки, МассивФич, МассивШагов);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокФичПоДеревуИСоздатьEPFПоМассивуФич(СтруктураПараметров, МассивФич, МассивШагов)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Дерево = ОбъектСервер.ДеревоТестов;
	
	ДобавитьИменаФайловФичИзДереваВМассив(Дерево.Строки, МассивФич, МассивШагов);
	
	СтруктураПараметров.Вставить("КонтекстVanessaBehavoir", ОбъектСервер);
	
	СтруктураПараметров.КонтекстVanessaBehavoir = "";
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуОС(Стр)
	#Если НЕ ВебКлиент Тогда
	КомандаСистемы(Стр);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Функция РаспаковатьEPF(СтруктураОписанияEpf)
	#Если НЕ ВебКлиент Тогда

	ИмяФайла = СтруктураОписанияEpf.ИмяФайлаEPF;
	ФайлEPF = Новый Файл(ИмяФайла);
	
	ГенерироватьУФ      = Объект.ГенерироватьУФ;
	КаталогИнструментов = Объект.КаталогИнструментов;
	ЭтоУФ               = Истина;
	
	Попытка
		
		ВременныйКаталогБазы = ПолучитьИмяВременногоФайла();
		СоздатьКаталогКомандаСистемы(ВременныйКаталогБазы);
		ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
		ИмяФайлаOUT = ПолучитьИмяВременногоФайла("txt");
		КомандаСистемы = """" + ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) 
			+ ИмяИсполняемогоФайлаТолстыйКлиент + """ CREATEINFOBASE File="""  + ВременныйКаталогБазы +  """ /out """ + ИмяФайлаOUT + """ > """ + ИмяФайлаЛога + """";
		Отладка(КомандаСистемы);
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаСистемы);
		Если НЕ ФайлСуществуетКомандаСистемы(ВременныйКаталогБазы + "/1Cv8.1CD") Тогда
			СообщитьПользователю(Локализовать("Файл EPF не создан. Не смог создать каталог временной базы."));
			ВывестиТекстФайлаЛога(ИмяФайлаЛога);
			ВывестиТекстФайлаЛога(ИмяФайлаOUT, "");
			
			СообщитьПользователю (ПодставитьПараметрыВСтроку(
				Локализовать("Проверьте работу команды <%1>"),
				КомандаСистемы
			));
			Возврат Неопределено;
		КонецЕсли;	 
		
		УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
		УдалитьФайлыКомандаСистемы(ИмяФайлаOUT);

		ПутьКИсходникам = ПолучитьИмяВременногоФайла();
		СоздатьКаталогКомандаСистемы(ПутьКИсходникам);

		ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
		ИмяФайлаOUT = ПолучитьИмяВременногоФайла("txt");
		
		КомандаСистемы = """" + ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) 
			+ ИмяИсполняемогоФайлаТолстыйКлиент + """ DESIGNER /F """ + ВременныйКаталогБазы + """ /DumpExternalDataProcessorOrReportToFiles  """ 
			+ ПутьКИсходникам + """ """ + СтруктураОписанияEpf.ИмяФайлаEPF + """ /out """ + ИмяФайлаOUT + """ > """ + ИмяФайлаЛога + """";
		Отладка(КомандаСистемы);
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаСистемы);

		СписокКаталогов = Новый СписокЗначений;
		СписокФайлов    = Новый СписокЗначений;
		
		НайтиФайлыКомандаСистемы(ПутьКИсходникам, СписокКаталогов, СписокФайлов, Ложь);
		Если СписокФайлов.Количество() <> 1 Тогда
			ВызватьИсключение ПодставитьПараметрыВСтроку(
				Локализовать("В каталоге <%1> должен был быть один файл xml."),
				ПутьКИсходникам
			);
		КонецЕсли;	 
		
		ФайлXML = СписокФайлов[0].Значение;
		СтруктураОписанияEpf.Вставить("РеальноеИмяОбработки", ФайлXML.ИмяБезРасширения);
		
		СтруктураОписанияEpf.КаталогИсходников = ПутьКИсходникам;
		Если ЭтоУФ Тогда
			СтруктураОписанияEpf.ВременноеИмяМодуля = ПутьКИсходникам + "/" + ФайлXML.ИмяБезРасширения + "/Forms/Форма/Ext/Form/Module.bsl";
		Иначе	
			СтруктураОписанияEpf.ВременноеИмяМодуля = ПутьКИсходникам + "/" + ФайлXML.ИмяБезРасширения + "/Ext/ObjectModule.bsl";
		КонецЕсли;	 
		
		УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
		УдалитьФайлыКомандаСистемы(ИмяФайлаOUT);
		
		ОчиститьСодержимоеКаталога(ВременныйКаталогБазы);
		
	Исключение
		СообщитьПользователю (ПодставитьПараметрыВСтроку(
			Локализовать("Не получилось распаковать %1"),
			ИмяФайла
		));
		СообщитьПользователю(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	#КонецЕсли
КонецФункции

&НаКлиенте
Функция СоздатьПустуюСтруктуруEpf()
	Стр = Новый Структура;
	Стр.Вставить("ИмяФичи", "");
	Стр.Вставить("ИмяФайлаEpf", "");
	Стр.Вставить("ВременноеИмяМодуля", "");
	Стр.Вставить("ТелоМодуля", ""); // таблица значений
	Стр.Вставить("ИмяМодуляEpf", "");
	Стр.Вставить("КаталогИсходников", "");
	Стр.Вставить("ФайлEpfПересоздавался", Ложь);
	Стр.Вставить("РеальноеИмяОбработки", Неопределено);
	
	Возврат Стр;
КонецФункции

&НаСервереБезКонтекста
Функция ЗагрузитьТелоМодуляВТаблицуЗначенийСервер(Знач ДвоичныеДанные, Знач ШагСтрокДляМодуля)
	ПутьКФайлу = ПолучитьИмяВременногоФайла("txt");
	
	ДвоичныеДанные.Записать(ПутьКФайлу);
	
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("НомСтр");
	Тзн.Колонки.Добавить("Стр");
	
	НомСтр = 0;
	ПромФайл = Новый Файл(ПутьКФайлу);
	Если Не ПромФайл.Существует() Тогда
		СтрОшибки = "Файл """ + ПутьКФайлу + """ не существует.";
		СообщитьПользователюСеврер(СтрОшибки);
		ВызватьИсключение СтрОшибки;
	КонецЕсли; 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу, "UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		НомСтр = НомСтр + ШагСтрокДляМодуля;
		
		СтрТзн        = Тзн.Добавить();
		СтрТзн.НомСтр = НомСтр;
		СтрТзн.Стр    = Стр;
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат ЗначениеВСтрокуВнутр(Тзн);
КонецФункции	

&НаКлиенте
Функция ЗагрузитьТелоМодуляВТаблицуЗначений(ПутьКФайлу)
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
	Возврат ЗагрузитьТелоМодуляВТаблицуЗначенийСервер(ДвоичныеДанные, ШагСтрокДляМодуля);
КонецФункции

&НаСервере
Процедура ДобавитьНачальноеЗаполнениеВМодульСервер(ТелоМодуля, Знач ШагСтрокДляМодуля, Знач ГенерироватьУФ, 
		Знач ДвДанныеvbFeatureReader, Знач знСоздаватьОбластиПриГенерацииКода)
		
	Если Объект.ВерсияПоставки = "standart" Тогда
		ВременноеИмяФайла = ПолучитьИмяВременногоФайла("epf");
		ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
		FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла, Ложь);
	Иначе	
		ОбъектСервер  = РеквизитФормыВЗначение("Объект");
		FeatureReader = ОбъектСервер;
	КонецЕсли;	 
	FeatureReader.ДобавитьНачальноеЗаполнениеВМодуль(ТелоМодуля, ШагСтрокДляМодуля, ГенерироватьУФ, 
		Истина, знСоздаватьОбластиПриГенерацииКода);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНачальноеЗаполнениеВМодуль(ТелоМодуля, ШагСтрокДляМодуля, ГенерироватьУФ, 
		ДвДанныеvbFeatureReader, ЗнСоздаватьОбластиПриГенерацииКода)
		
	ДобавитьНачальноеЗаполнениеВМодульСервер(ТелоМодуля, ШагСтрокДляМодуля, ГенерироватьУФ, 
		ДвДанныеvbFeatureReader, ЗнСоздаватьОбластиПриГенерацииКода);
КонецПроцедуры

&НаКлиенте
Функция НайтиФайлВМассивеФайлов(МассивФайлов, ИмяФайла)
	Для каждого Элем Из МассивФайлов Цикл
		
		Если ТипЗнч(Элем) = Тип("Структура") Тогда
			Файл = Элем.Файл;
		Иначе
			Файл = Элем;
		КонецЕсли;	 
		
		Если СравнитьПутиФайлов(Файл.ПолноеИмя, ИмяФайла) Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции	

&НаСервере
Функция ДанныеСлужебныйКешГенерацияEPF()
	ОбъектСервер   = РеквизитФормыВЗначение("Объект");
	ТекстовыйМакет = ОбъектСервер.ПолучитьМакет("МакетСлужебныйКеш");
	Строка         = ТекстовыйМакет.ПолучитьТекст();
	Возврат ЗначениеИзСтрокиВнутр(Строка).МассивФайловTemplateEpfUF;
КонецФункции	  

&НаКлиенте
Функция СоздатьСтруктураОписанияEpf(ОтносительныйКаталогФичи, ИмяТекущейФичи, GenerateEpf, ДвДанныеvbFeatureReader, ДополнительныеПараметры)
	#Если НЕ ВебКлиент Тогда
	
	КаталогИнструментов = Объект.КаталогИнструментов;
	ГенерироватьУФ      = Объект.ГенерироватьУФ;
	
	СтруктураОписанияEpf                    = СоздатьПустуюСтруктуруEpf();
	СтруктураОписанияEpf.ИмяФичи            = ИмяТекущейФичи;
	СтруктураОписанияEpf.ИмяФайлаEpf        = ДополнитьСлешВПуть(ОтносительныйКаталогФичи) + ДополнитьСлешВПуть("step_definitions") 
		+ ИмяТекущейФичи + ".epf";
	Если GenerateEpf Тогда
		ФайлEpf = Новый Файл(СтруктураОписанияEpf.ИмяФайлаEpf);
		Если НЕ ЗапрещеныСинхронныеВызовы Тогда
			ФайлСуществует = ФайлEpf.Существует();
		Иначе	
			МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "ПоискEPF", "НайденныеФайлы");
			ФайлСуществует = НайтиФайлВМассивеФайлов(МассивФайлов, СтруктураОписанияEpf.ИмяФайлаEpf);
		КонецЕсли;	 
		Если ФайлСуществует Тогда // т.е. если мы не первый раз работаем с данной фичей
			Если НЕ Объект.ВыводитьТекстМодуляВместоПерегенерацииEPF Тогда
				СтруктураОписанияEpf.ИмяМодуляEpf          = РаспаковатьEPF(СтруктураОписанияEpf);
				СтруктураОписанияEpf.ФайлEpfПересоздавался = Истина;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;
	
	Если Не СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
		ВременныйКаталогИсходников = ПолучитьИмяВременногоФайла();
		СоздатьКаталогКомандаСистемы(ВременныйКаталогИсходников);
		СтруктураОписанияEpf.КаталогИсходников = ВременныйКаталогИсходников;
		
		ПутьКШаблону = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "lib/TemplateEpf";
		Если ГенерироватьУФ Тогда
			ПутьКШаблону = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "lib/TemplateEpfUF";
		КонецЕсли;
		
		Если Объект.ВерсияПоставки = "single" Тогда
			ПутьКШаблону = ПолучитьИмяВременногоФайла();
			СоздатьКаталогКомандаСистемы(ПутьКШаблону);
			СоздатьКаталогКомандаСистемы(ДополнитьСлешВПуть(ПутьКШаблону) + "Обработка");
			СоздатьКаталогКомандаСистемы(ДополнитьСлешВПуть(ПутьКШаблону) + "Обработка\Forms\Форма");
			СоздатьКаталогКомандаСистемы(ДополнитьСлешВПуть(ПутьКШаблону) + "Обработка\Forms\Форма\Ext");
			СоздатьКаталогКомандаСистемы(ДополнитьСлешВПуть(ПутьКШаблону) + "Обработка\Forms\Форма\Ext\Form");
			ДанныеСлужебныйКеш = ДанныеСлужебныйКешГенерацияEPF();
			Для Каждого ДанныеФайлаКеш Из ДанныеСлужебныйКеш Цикл
				Если ДанныеФайлаКеш.Имя = "Обработка.xml" Тогда
					ПутьКФайлу = ДополнитьСлешВПуть(ПутьКШаблону) + "Обработка.xml";
					ДанныеФайлаКеш.ДвоичныеДанные.Записать(ПутьКФайлу);
				ИначеЕсли ДанныеФайлаКеш.Имя = "Форма.xml" Тогда
					ПутьКФайлу = ДополнитьСлешВПуть(ПутьКШаблону) + "Обработка\Forms\Форма.xml";
					ДанныеФайлаКеш.ДвоичныеДанные.Записать(ПутьКФайлу);
				ИначеЕсли ДанныеФайлаКеш.Имя = "Form.xml" Тогда
					ПутьКФайлу = ДополнитьСлешВПуть(ПутьКШаблону) + "Обработка\Forms\Форма\Ext\Form.xml";
					ДанныеФайлаКеш.ДвоичныеДанные.Записать(ПутьКФайлу);
				ИначеЕсли ДанныеФайлаКеш.Имя = "Module.bsl" Тогда
					ПутьКФайлу = ДополнитьСлешВПуть(ПутьКШаблону) + "Обработка\Forms\Форма\Ext\Form\Module.bsl";
					ДанныеФайлаКеш.ДвоичныеДанные.Записать(ПутьКФайлу);
				КонецЕсли;	 
			КонецЦикла;	 
		КонецЕсли;	 

		ФайлШаблон = Новый Файл(ПутьКШаблону);
		ПутьКШаблону = ФайлШаблон.ПолноеИмя;
		КопироватьКаталогКомандаСистемы(ПутьКШаблону, ВременныйКаталогИсходников);
	КонецЕсли;
	
	Если Не СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
		СтруктураОписанияEpf.ВременноеИмяМодуля = ДополнитьСлешВПуть(СтруктураОписанияEpf.КаталогИсходников) + "Обработка/Ext/ObjectModule.bsl";
		Если ГенерироватьУФ Тогда
			СтруктураОписанияEpf.ВременноеИмяМодуля = ДополнитьСлешВПуть(СтруктураОписанияEpf.КаталогИсходников) + "Обработка/Forms/Форма/Ext/Form/Module.bsl";
		КонецЕсли;
		
		Файл = Новый Файл(СтруктураОписанияEpf.ВременноеИмяМодуля);
		СтруктураОписанияEpf.ВременноеИмяМодуля = Файл.ПолноеИмя;
		ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля, "UTF-8", , Ложь); 
		ЗТ.Закрыть();
	КонецЕсли;	 

	ФайлСуществует = ФайлСуществуетКомандаСистемы(СтруктураОписанияEpf.ИмяМодуляEpf);
	
	СтруктураОписанияEpf.ТелоМодуля = ЗагрузитьТелоМодуляВТаблицуЗначений(СтруктураОписанияEpf.ВременноеИмяМодуля);
	Если НЕ СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
		ДобавитьНачальноеЗаполнениеВМодуль(СтруктураОписанияEpf.ТелоМодуля, ШагСтрокДляМодуля, ГенерироватьУФ, 
			ДвДанныеvbFeatureReader, Объект.СоздаватьОбластиПриГенерацииКода);
	КонецЕсли;
	
	Возврат СтруктураОписанияEpf;
	
	#КонецЕсли
КонецФункции

&НаСервере
Функция СнипетыПолучитьСнипетыПоШагам(Шаги, ДвДанныеvbFeatureReader, СтруктураПараметров)
	КешСнипетовИзХранилищаЗначений(СтруктураПараметров);
	
	Если Объект.ВерсияПоставки = "standart" Тогда
		ВременноеИмяФайла = ПолучитьИмяВременногоФайла("epf");
		ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
		FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла, Ложь);
	Иначе
		ОбъектСервер  = РеквизитФормыВЗначение("Объект");
		FeatureReader = ОбъектСервер;
	КонецЕсли;	 
	
	Снипеты = FeatureReader.СнипетыПолучитьСнипетыПоШагам(Шаги, СтруктураПараметров);
	
	КешСнипетовВХранилищаЗначений(СтруктураПараметров);
	
	Возврат Снипеты;
КонецФункции

&НаСервере
Процедура ЗаполнитьПроцедуруПолучитьСписокТестов(ТелоМодуля, Снипеты, Знач ДвДанныеvbFeatureReader, Знач ИмяФайлаФичи, 
	Знач СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур)
	
	Если Объект.ВерсияПоставки = "standart" Тогда
		ВременноеИмяФайла = ПолучитьИмяВременногоФайла("epf");
		ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
		FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла, Ложь);
	Иначе
		ОбъектСервер  = РеквизитФормыВЗначение("Объект");
		FeatureReader = ОбъектСервер;
	КонецЕсли;	 
	
	FeatureReader.ЗаполнитьПроцедуруПолучитьСписокТестов(ТелоМодуля, Снипеты, Истина, ИмяФайлаФичи, 
		СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);
КонецПроцедуры

&НаСервере
Процедура ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf, Знач StepDefinition, Знач Шаг, Знач ШагСтрокДляМодуля, Знач АдресСнипета, 
		Знач ГенерироватьУФ, Знач ДвДанныеvbFeatureReader, Знач СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур)
		
	Если Объект.ВерсияПоставки = "standart" Тогда
		ВременноеИмяФайла = ПолучитьИмяВременногоФайла("epf");
		ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
		FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла, Ложь);
	Иначе
		ОбъектСервер  = РеквизитФормыВЗначение("Объект");
		FeatureReader = ОбъектСервер;
	КонецЕсли;	 
	
	FeatureReader.ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf, StepDefinition, Шаг, ШагСтрокДляМодуля, 
		АдресСнипета, СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур, ГенерироватьУФ, Истина);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТелоМодуляВМассивСервер(Знач Стр)
	ТелоМодуля = ЗначениеИзСтрокиВнутр(Стр);
	ТелоМодуля.Сортировать("НомСтр");
	Массив = ТелоМодуля.ВыгрузитьКолонку("Стр");
	
	Возврат Массив;
КонецФункции

&НаКлиенте
Функция УбратьСпецсимволыИзИмениОбработи(Знач Стр)
	
	Стр = СтрЗаменить(Стр, " ", "_");
	Стр = СтрЗаменить(Стр, "`", "");
	Стр = СтрЗаменить(Стр, "~", "");
	Стр = СтрЗаменить(Стр, "'", "");
	Стр = СтрЗаменить(Стр, ".", "");
	Стр = СтрЗаменить(Стр, ",", "");
	Стр = СтрЗаменить(Стр, ":", "");
	Стр = СтрЗаменить(Стр, ";", "");
	Стр = СтрЗаменить(Стр, "-", "_");  
	Стр = СтрЗаменить(Стр, "+", "");
	Стр = СтрЗаменить(Стр, "/", "");
	Стр = СтрЗаменить(Стр, "\", "");
	Стр = СтрЗаменить(Стр, "=", "");
	Стр = СтрЗаменить(Стр, "!", "");
	Стр = СтрЗаменить(Стр, "@", "");
	Стр = СтрЗаменить(Стр, "#", "");
	Стр = СтрЗаменить(Стр, "$", "");
	Стр = СтрЗаменить(Стр, "%", "");
	Стр = СтрЗаменить(Стр, "^", "");
	Стр = СтрЗаменить(Стр, "&", "");
	Стр = СтрЗаменить(Стр, "*", "");
	Стр = СтрЗаменить(Стр, "(", "");
	Стр = СтрЗаменить(Стр, ")", "");
	Стр = СтрЗаменить(Стр, "№", "");
	Стр = СтрЗаменить(Стр, "?", "");
	Стр = СтрЗаменить(Стр, "<", "");
	Стр = СтрЗаменить(Стр, ">", "");

	Если Лев(Стр, 1) = "0" 
		Или Лев(Стр, 1) = "1"
		Или Лев(Стр, 1) = "2"
		Или Лев(Стр, 1) = "3"
		Или Лев(Стр, 1) = "4"
		Или Лев(Стр, 1) = "5"
		Или Лев(Стр, 1) = "6"
		Или Лев(Стр, 1) = "7"
		Или Лев(Стр, 1) = "8"
		Или Лев(Стр, 1) = "9" Тогда
		Стр = "_" + Стр;
	КонецЕсли;	 
	
	Возврат Стр;
	
КонецФункции	

&НаКлиенте
Процедура ЗаменитьСтрокиВФайлеОсновыОбработки(ПутьКИсходникам, ИмяОбработки)
	
	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(Новый Файл(ПутьКИсходникам + "/" + ИмяОбработки + ".xml"));
	МассивФайлов.Добавить(Новый Файл(ПутьКИсходникам + "/" + ИмяОбработки +  "/Forms/Форма/Ext/Form.xml"));

	Для Каждого Файл Из МассивФайлов Цикл
		Если НЕ ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя) Тогда
			Продолжить;
		КонецЕсли;	 

		Текст = Новый ЧтениеТекста;
		Текст.Открыть(Файл.ПолноеИмя, "UTF-8");
		
		ВременноеИмяФайла = Файл.ПолноеИмя + "_Temp";
		ЗТ = Новый ЗаписьТекста(ВременноеИмяФайла, "UTF-8", , Истина); 
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
			
			Стр = СтрЗаменить(Стр, "<Name>Обработка</Name>", "<Name>" + ИмяОбработки + "</Name>");
			Стр = СтрЗаменить(Стр, "<v8:content>Обработка</v8:content>", "<v8:content>" + ИмяОбработки + "</v8:content>");
			Стр = СтрЗаменить(Стр, "ExternalDataProcessor.Обработка.", "ExternalDataProcessor." + ИмяОбработки + ".");
			Стр = СтрЗаменить(Стр, "ExternalDataProcessorObject.Обработка", "ExternalDataProcessorObject." + ИмяОбработки);
			
			ЗТ.ЗаписатьСтроку(Стр); 
		КонецЦикла;
		
		ЗТ.Закрыть();
		Текст.Закрыть();
		Текст = "";
		
		УдалитьФайлыКомандаСистемы(Файл.ПолноеИмя);
		ПереместитьФайлКомандаСистемы(ВременноеИмяФайла, Файл.ПолноеИмя);
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталогЕслиЕгоНет(Путь)
	Если СокрЛП(Путь) = "" Тогда
		ВызватьИсключение Локализовать("Передан пустой путь в процедуру <СоздатьКаталогЕслиЕгоНет>.");
	КонецЕсли;	 
	СоздатьКаталогКомандаСистемы(Путь);
КонецПроцедуры

&НаКлиенте
Процедура ВывестиТекстФайлаЛога(ИмяФайла, КодировкаФайла = "UTF-8")
	Текст = Новый ЧтениеТекста;
	Если ПустаяСтрока(КодировкаФайла) Тогда
		Текст.Открыть(ИмяФайла); // Автоопределение кодировки
	Иначе
		Текст.Открыть(ИмяФайла, КодировкаФайла);
	КонецЕсли;
	
	СообщитьПользователю(Текст.Прочитать());
	
	Текст.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлыОбработок(БылиОшибки, СтруктураОписанияEpf, ДополнительныеПараметры = Неопределено)
	#Если НЕ ВебКлиент Тогда
	
	ЭтоУФ = Истина;
	ГенерироватьУФ = Объект.ГенерироватьУФ;
	КаталогИнструментов = Объект.КаталогИнструментов;
	ТекстМодуля = "";
	
	ТелоМодуля = СтруктураОписанияEpf.ТелоМодуля;
	Если ЭтоУФ Тогда
		ТелоМодуля = ПолучитьТелоМодуляВМассивСервер(ТелоМодуля);
	Иначе
		ТелоМодуля.Сортировать("НомСтр");
		ТелоМодуля = ТелоМодуля.ВыгрузитьКолонку("Стр");
	КонецЕсли;	 
	
	Отладка("Буду записывать " + СтруктураОписанияEpf.ВременноеИмяМодуля);
	
	УдалитьФайлыКомандаСистемы(СтруктураОписанияEpf.ВременноеИмяМодуля);
	ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля, "UTF-8", , Ложь); 
	Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
		ЗТ.ЗаписатьСтроку(СтрТелоМодуля); 
	КонецЦикла;
	ЗТ.Закрыть();
	Отладка("Записал " + СтруктураОписанияEpf.ВременноеИмяМодуля);
	
	ПутьКИсходникам = СтруктураОписанияEpf.КаталогИсходников;
	
	ИмяВременногоEPF = ПолучитьИмяВременногоФайла("epf");
	
	ИмяОбработки = УбратьСпецсимволыИзИмениОбработи(СтруктураОписанияEpf.ИмяФичи);
	Если ЗначениеЗаполнено(СтруктураОписанияEpf.РеальноеИмяОбработки) Тогда
		ИмяОбработки = СтруктураОписанияEpf.РеальноеИмяОбработки;
	КонецЕсли;	 
	
	КорневойФайлОбработки = ПутьКИсходникам + "/" + ИмяОбработки + ".xml";
	
	Если НЕ СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
		СоздатьКаталогКомандаСистемы(ПутьКИсходникам + "/" + ИмяОбработки);
		КопироватьКаталогКомандаСистемы(ПутьКИсходникам + "/Обработка", ПутьКИсходникам + "/" + ИмяОбработки);
		ПереместитьФайлКомандаСистемы(ПутьКИсходникам + "/Обработка.xml", КорневойФайлОбработки);
		
		ЗаменитьСтрокиВФайлеОсновыОбработки(ПутьКИсходникам, ИмяОбработки);
		
		ЗаменитьUIDФайлеОбработки(КорневойФайлОбработки, "<ExternalDataProcessor uuid=", Строка(Новый УникальныйИдентификатор));
		ЗаменитьUIDФайлеОбработки(ПутьКИсходникам + "/" + ИмяОбработки + "/Forms/Форма.xml", "<Form uuid=", Строка(Новый УникальныйИдентификатор));
	КонецЕсли;	 
	
	ВременныйКаталогБазы = ПолучитьИмяВременногоФайла();
	СоздатьКаталогКомандаСистемы(ВременныйКаталогБазы);
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	ИмяФайлаOUT = ПолучитьИмяВременногоФайла("txt");
	Если ЭтоLinux Тогда
		СтрокаЗапуска = """" + ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) 
			+ ИмяИсполняемогоФайлаТолстыйКлиент + """ CREATEINFOBASE File="""  + ВременныйКаталогБазы +  """ /out """ + ИмяФайлаOUT + """ > """ + ИмяФайлаЛога + """";
		Отладка(СтрокаЗапуска);
		КомандаСистемы(СтрокаЗапуска);
	Иначе
		КомандаСистемы = """" + ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) 
			+ ИмяИсполняемогоФайлаТолстыйКлиент + """ CREATEINFOBASE File="""  + ВременныйКаталогБазы +  """ /out """ + ИмяФайлаOUT + """ > """ + ИмяФайлаЛога + """";
		Отладка(КомандаСистемы);
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаСистемы);
	КонецЕсли;
	Если НЕ ФайлСуществуетКомандаСистемы(ВременныйКаталогБазы + "/1Cv8.1CD") Тогда
		СообщитьПользователю(Локализовать("Файл EPF не создан. Не смог создать каталог временной базы."));
		ВывестиТекстФайлаЛога(ИмяФайлаЛога);
		ВывестиТекстФайлаЛога(ИмяФайлаOUT, "");
		
		СообщитьПользователю (ПодставитьПараметрыВСтроку(
			Локализовать("Проверьте работу команды <%1>"),
			КомандаСистемы
		));
		Возврат ;
	КонецЕсли;	 

	УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
	УдалитьФайлыКомандаСистемы(ИмяФайлаOUT);

	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	ИмяФайлаOUT = ПолучитьИмяВременногоФайла("txt");
	
	Если ЭтоLinux Тогда
		СтрокаЗапуска = """" + ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) 
			+ ИмяИсполняемогоФайлаТолстыйКлиент + """ DESIGNER /F""" + ВременныйКаталогБазы + """ /LoadExternalDataProcessorOrReportFromFiles """ 
			+ КорневойФайлОбработки + """ """ + ИмяВременногоEPF + """ /out """ + ИмяФайлаOUT + """ > """ + ИмяФайлаЛога + """";
		Отладка(СтрокаЗапуска);
		КомандаСистемы(СтрокаЗапуска);
	Иначе
		СтрокаЗапуска = """" + ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) 
			+ ИмяИсполняемогоФайлаТолстыйКлиент + """ DESIGNER /F """ + ВременныйКаталогБазы + """ /LoadExternalDataProcessorOrReportFromFiles """ 
			+ КорневойФайлОбработки + """ """ + ИмяВременногоEPF + """ /out """ + ИмяФайлаOUT + """ > """ + ИмяФайлаЛога + """";
		Отладка(СтрокаЗапуска);
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(СтрокаЗапуска);
	КонецЕсли;

	Если ФайлСуществуетКомандаСистемы(ИмяВременногоEPF) Тогда
		ФайлИмяФайлаEpf = Новый Файл(СтруктураОписанияEpf.ИмяФайлаEpf);
		Если НЕ ФайлСуществуетКомандаСистемы(ФайлИмяФайлаEpf.Путь) Тогда
			СоздатьКаталогКомандаСистемы(ФайлИмяФайлаEpf.Путь);
		КонецЕсли;	 
		ПереместитьФайлКомандаСистемы(ИмяВременногоEPF, СтруктураОписанияEpf.ИмяФайлаEpf);
		Если СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
			СообщитьПользователю (ПодставитьПараметрыВСтроку(
				Локализовать("Пересоздан %1"),
				СтруктураОписанияEpf.ИмяФайлаEpf
			));
		Иначе	
			СообщитьПользователю(ПодставитьПараметрыВСтроку(
				Локализовать("Создан %1"),
				СтруктураОписанияEpf.ИмяФайлаEpf
			));
		КонецЕсли;	 
	Иначе
		СообщитьПользователю("Файл EPF не создан.");
		СообщитьПользователю(ПодставитьПараметрыВСтроку(
			Локализовать("Проверьте работу команды <%1>"),
			СтрокаЗапуска
		));
		
		ВывестиТекстФайлаЛога(ИмяФайлаЛога);
		ВывестиТекстФайлаЛога(ИмяФайлаOUT, "");
	КонецЕсли;
	
	УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
	УдалитьФайлыКомандаСистемы(ИмяФайлаOUT);
	
	ОчиститьСодержимоеКаталога(ВременныйКаталогБазы);
	
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура СделатьGenerateEpfПродолжение()
	СтруктураПараметров = глСтруктураПараметров;
	ГенерироватьУФ          = СтруктураПараметров.ГенерироватьУФ;
	ШагСтрокДляМодуля       = СтруктураПараметров.ШагСтрокДляМодуля;
	DebugLog                = СтруктураПараметров.DebugLog;
	КаталогФич              = СтруктураПараметров.КаталогФич;
	КонтекстVanessaBehavoir = СтруктураПараметров.КонтекстVanessaBehavoir;
	КаталогиБиблиотек       = СтруктураПараметров.КаталогиБиблиотек;
	ДвДанныеvbFeatureReader = СтруктураПараметров.ДвДанныеvbFeatureReader;
	
	ДополнительныеПараметры = СтруктураПараметров.ДополнительныеПараметры;
	СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур = СтруктураПараметров.СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур;
	
	МассивФич   = СтруктураПараметров.МассивФич;
	МассивШагов = СтруктураПараметров.МассивШагов;
	
	Если МассивФич.Количество() = 0 Тогда
		СообщитьПользователю(Локализовать("Шаги для обработки не найдены."));
		Возврат;
	КонецЕсли;	 
	
	Ном = 0;
	Для каждого ИмяФайлаФичи Из МассивФич Цикл
		Ном = Ном + 1;
		Шаги = МассивШагов.Получить(Ном - 1);
		
		ФайлФичи       = Новый Файл(ИмяФайлаФичи);
		ИмяТекущейФичи = ФайлФичи.ИмяБезРасширения;
		СообщитьПользователю (ПодставитьПараметрыВСтроку(
			Локализовать("Работаю по фиче: %1"),
			ИмяФайлаФичи
		));
		
		МассивДляСозданияEpf = Новый Массив;
		ОтносительныйКаталогФичи = ФайлФичи.Путь;
		Если Найти(Прав(ОтносительныйКаталогФичи, 1), "\/") > 0 Тогда
			ОтносительныйКаталогФичи = Лев(ОтносительныйКаталогФичи, СтрДлина(ОтносительныйКаталогФичи) - 1);
		КонецЕсли;	 
		
		Отладка("ОтносительныйКаталогФичи=" + ОтносительныйКаталогФичи);
		СтруктураОписанияEpf = СоздатьСтруктураОписанияEpf(ОтносительныйКаталогФичи, ФайлФичи.ИмяБезРасширения, 
			Истина, ДвДанныеvbFeatureReader, ДополнительныеПараметры);
		
		Снипеты = СнипетыПолучитьСнипетыПоШагам(Шаги, ДвДанныеvbFeatureReader, СлужебныеДанныеДляПарсераФич());
		ЗаполнитьПроцедуруПолучитьСписокТестов(СтруктураОписанияEpf.ТелоМодуля, Снипеты, ДвДанныеvbFeatureReader, 
			ИмяФайлаФичи, СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);
		Для каждого ЭлемСнипет Из Снипеты Цикл
			ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf, ЭлемСнипет.StepDefinition, ЭлемСнипет.Шаг, 
				ШагСтрокДляМодуля, ЭлемСнипет.АдресСнипета, ГенерироватьУФ, 
				ДвДанныеvbFeatureReader, СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);
		КонецЦикла;
		
		БылиОшибки = Ложь;
		
		Если Объект.ВыводитьТекстМодуляВместоПерегенерацииEPF Тогда
			ВывестиТекстМодуляНаЭкран(СтруктураОписанияEpf);
		Иначе	
			СоздатьФайлыОбработок(БылиОшибки, СтруктураОписанияEpf, ДополнительныеПараметры);
		КонецЕсли;	 
		
	КонецЦикла; 	
	СообщитьПользователю(Локализовать("Создание epf по фичам закончено."));

	// откроем каталог созданной epf
	Если НЕ Объект.РежимСамотестирования Тогда
		ФайлEpf = Новый Файл(СтруктураОписанияEpf.ИмяФайлаEpf); 
		Если ФайлСуществуетКомандаСистемы(ФайлEpf.ПолноеИмя) Тогда
			Если ЗапрещеныСинхронныеВызовы Тогда
				ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработатьОткрытьКаталогСозданнойEPF"", ЭтаФорма)");
				Выполнить("НачатьЗапускПриложения(ОписаниеОповещения, ФайлEpf.Путь)");
			Иначе	
				ЗапуститьПриложение("""" + ФайлEpf.Путь + """");
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ПодключитьОбработкиКлиент(ПомещенныеФайлы, ДополнительныеПараметры)
	ДанныеДляСнипетов = Новый Массив;
	
	ПолучатьСнипеты = Истина;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ПолучатьСнипеты") Тогда
			ПолучатьСнипеты = ДополнительныеПараметры.ПолучатьСнипеты;
		КонецЕсли;	 
	КонецЕсли;	 
	
	НомерФайла  = 0;
	ВсегоФайлов = ПомещенныеФайлы.Количество();
	Для Каждого ПомещенныйФайл Из ПомещенныеФайлы Цикл
		ДанныеФайла = ДополнительныеПараметры.ДанныеФайлов[ПомещенныйФайл.Имя];
		Если ДанныеФайла = Неопределено Тогда
			ДанныеФайла = ДополнительныеПараметры.ДанныеФайлов[ПомещенныйФайл.ПолноеИмя];
		КонецЕсли;	  
		Если ДанныеФайла = Неопределено Тогда
			ДанныеФайла = ДополнительныеПараметры.ДанныеФайлов[СтрЗаменить(ПомещенныйФайл.ПолноеИмя, "\", "/")];
		КонецЕсли;	  
		
		Если ДанныеФайла = Неопределено Тогда
			Если ДополнительныеПараметры.Свойство("ТекШаг") Тогда
				ДанныеФайла = ДополнительныеПараметры.ДанныеФайлов[ДополнительныеПараметры.ТекШаг.ИмяФайла];
				Если ДанныеФайла = Неопределено Тогда
					ДанныеФайла = ДополнительныеПараметры.ДанныеФайлов[СтрЗаменить(ДополнительныеПараметры.ТекШаг.ИмяФайла, "\", "/")];
				КонецЕсли;	  
			КонецЕсли;	 
		КонецЕсли;	 
		
		Файл = Новый Файл(ДанныеФайла.ИмяФайла);
		
		Если НРЕг(Файл.Имя) = "vanessa-automation.epf" Тогда
			Продолжить;
		ИначеЕсли НРЕг(Файл.Имя) = "vanessa-automation-single.epf" Тогда
			Продолжить;
		КонецЕсли;	 
		
		ВерсияФайла = ДанныеФайла.ВерсияФайла;
		БылиОшибки = Ложь;
		
		НомерФайла = НомерФайла + 1;
		Если ПолучатьСнипеты И НЕ Объект.ЗапускИзКоманднойСтроки Тогда
			Если ВсегоФайлов > 10 Тогда
				Если (НомерФайла % 10) = 0 Тогда
					Состояние(_СтрШаблон(Локализовать("Файл №%1 из %2"), НомерФайла, ВсегоФайлов), Окр((НомерФайла / ВсегоФайлов) * 100), СокрЛП(ДанныеФайла.Имя));
				КонецЕсли;	 
			Иначе	
				Состояние(_СтрШаблон(Локализовать("Файл №%1 из %2"), НомерФайла, ВсегоФайлов), Окр((НомерФайла / ВсегоФайлов) * 100), СокрЛП(ДанныеФайла.Имя));
			КонецЕсли;	 
		КонецЕсли;	 
		
		ПодключитьСнипетыИзОбработкиКлиент(Файл, ВерсияФайла, БылиОшибки, ДанныеДляСнипетов, ПомещенныйФайл.Хранение, ПолучатьСнипеты);
	КонецЦикла;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекстСообщенийПользователю", Объект.ТекстСообщенийПользователю);
	Если ДанныеДляСнипетов.Количество() > 0 Тогда
		ДобавитьСнипетыСерверМассивом(ДанныеДляСнипетов, ДопПараметры);
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработчикСделатьGenerateEpf(Знач ПомещенныеФайлы, Знач ДополнительныеПараметры) Экспорт
	ПодключитьОбработкиКлиент(ПомещенныеФайлы, ДополнительныеПараметры);
	СделатьGenerateEpfПродолжение();
КонецПроцедуры

&НаКлиенте
Процедура СделатьGenerateEpf(СтруктураПараметров)
		
	ГенерироватьУФ          = СтруктураПараметров.ГенерироватьУФ;
	ШагСтрокДляМодуля       = СтруктураПараметров.ШагСтрокДляМодуля;
	DebugLog                = СтруктураПараметров.DebugLog;
	КаталогФич              = СтруктураПараметров.КаталогФич;
	КонтекстVanessaBehavoir = СтруктураПараметров.КонтекстVanessaBehavoir;
	КаталогиБиблиотек       = СтруктураПараметров.КаталогиБиблиотек;
	ДвДанныеvbFeatureReader = СтруктураПараметров.ДвДанныеvbFeatureReader;
	
	ДополнительныеПараметры = Неопределено;
	Если СтруктураПараметров.Свойство("ДополнительныеПараметры") Тогда
		ДополнительныеПараметры = СтруктураПараметров.ДополнительныеПараметры;
	КонецЕсли;	 
	
	СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур       = СтруктураПараметров.СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур;

	МассивИменФайловКоторыеСовпалиСКеш = Новый Соответствие;
	ДанныеПоВерсиямОбработок = ПолучитьТаблицыПоТаблицаИзвестныхStepDefinition();
	
	ДанныеДляПолученияСнипетов = Новый Массив;
	ПолучитьУжеСуществующиеСнипетыИзОбработок(КаталогФич, ДанныеДляПолученияСнипетов, ДополнительныеПараметры, 
		ДанныеПоВерсиямОбработок.МассивВерсийФайловИзТаблицаИзвестныхStepDefinition, 
		ДанныеПоВерсиямОбработок.МассивИменФайловИзТаблицаИзвестныхStepDefinition, МассивИменФайловКоторыеСовпалиСКеш);
	
	Для каждого Элем Из КаталогиБиблиотек Цикл
		КаталогБиблиотеки = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);
		ПолучитьУжеСуществующиеСнипетыИзОбработок(КаталогБиблиотеки, ДанныеДляПолученияСнипетов, ДополнительныеПараметры, 
			ДанныеПоВерсиямОбработок.МассивВерсийФайловИзТаблицаИзвестныхStepDefinition, 
			ДанныеПоВерсиямОбработок.МассивИменФайловИзТаблицаИзвестныхStepDefinition, МассивИменФайловКоторыеСовпалиСКеш);
	КонецЦикла;

	СтруктураПараметров.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	СтруктураПараметров.Вставить("МассивИменФайловКоторыеСовпалиСКеш", МассивИменФайловКоторыеСовпалиСКеш);
	СтруктураПараметров.Вставить("Путь", КаталогФич);
	СтруктураПараметров.Вставить("СписокТеговИсключение", Объект.СписокТеговИсключение);
	СтруктураПараметров.Вставить("СписокТеговОтбор", Объект.СписокТеговОтбор);
	СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога", Ложь);
	СтруктураПараметров.Вставить("Брейкпоинты", Брейкпоинты);
	СтруктураПараметров.Вставить("МассивИменКонтекстовОбработок", МассивИменКонтекстовОбработок);
	СтруктураПараметров.Вставить("РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов", 
		Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов);
	глСтруктураПараметров = СтруктураПараметров;

	ДанныеФайлов = Новый Соответствие;
	
	ПомещаемыеФайлы = Новый Массив;
	Для Каждого Данные Из ДанныеДляПолученияСнипетов Цикл
		ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(Данные.ИмяФайла);
		ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
		
		ДанныеФайлов.Вставить(Данные.ИмяФайла, Новый Структура("Имя,ИмяФайла,ВерсияФайла", Данные.Имя, Данные.ИмяФайла, Данные.ВерсияФайла));
	КонецЦикла;	 
	
	Если ПомещаемыеФайлы.Количество() = 0 Тогда
		СделатьGenerateEpfПродолжение();
		Возврат;
	КонецЕсли;	 
	
	ПараметрыЗавершения = Новый Структура;	
	ПараметрыЗавершения.Вставить("ДанныеФайлов", ДанныеФайлов);
	Выполнить("НачатьПомещениеФайлов(Новый ОписаниеОповещения(""ОбработчикСделатьGenerateEpf"", ЭтаФорма, ПараметрыЗавершения),
		|ПомещаемыеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор)");
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОткрытьКаталогСозданнойEPF(КодВозврата, ДополнительныеПараметры) Экспорт
	Если КодВозврата <> 0 Тогда 
		Отладка(КодВозврата);
	КонецЕсли;	 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстМодуляИзСтруктураОписанияEpfСервер(Знач ТекстМодуляВнутр)
	Стр = "";
	
	Тзн = ЗначениеИзСтрокиВнутр(ТекстМодуляВнутр);
	
	Для каждого СтрТзн Из Тзн Цикл
		Стр = Стр + СтрТзн.Стр + Символы.ПС;
	КонецЦикла;
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Процедура ВывестиТекстМодуляНаЭкран(СтруктураОписанияEpf)
	Стр = ПолучитьТекстМодуляИзСтруктураОписанияEpfСервер(СтруктураОписанияEpf.ТелоМодуля);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.ДобавитьСтроку(Стр);
	ТекстовыйДокумент.Показать();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьEPFПоМассивуФич(СтруктураПараметров)
	СообщитьПользователю(Локализовать("Запускаю генерацию epf."));
	СделатьGenerateEpf(СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьШаблоныОбработокПродолжение(ДополнительныеПараметры = Неопределено)
	Если Не Объект.РежимСамотестирования Тогда
		ОчиститьСообщения();
	КонецЕсли;  
	СделатьПараметрыКорректными();	
	
	Если Объект.ВерсияПоставки = "standart" Тогда
		ДвДанныеvbFeatureReader = Новый ДвоичныеДанные(ПолучитьПутьКFeatureReader());
	Иначе	
		ДвДанныеvbFeatureReader = Неопределено;
	КонецЕсли;	 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КаталогИнструментов", Объект.КаталогИнструментов);
	СтруктураПараметров.Вставить("КаталогФич", Объект.КаталогФич);
	СтруктураПараметров.Вставить("DebugLog", Объект.DebugLog);
	СтруктураПараметров.Вставить("ГенерироватьУФ", Объект.ГенерироватьУФ);
	СтруктураПараметров.Вставить("СоздаватьОбластиПриГенерацииКода", Объект.СоздаватьОбластиПриГенерацииКода);
	СтруктураПараметров.Вставить("ШагСтрокДляМодуля", ШагСтрокДляМодуля);
	СтруктураПараметров.Вставить("КаталогиБиблиотек", Объект.КаталогиБиблиотек);
	СтруктураПараметров.Вставить("СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур", 
		Объект.СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);
	
	МассивФич   = Новый Массив;
	МассивШагов = Новый Массив;
	ПолучитьСписокФичПоДеревуИСоздатьEPFПоМассивуФич(СтруктураПараметров, МассивФич, МассивШагов);
	
	СтруктураПараметров.Вставить("МассивФич", МассивФич);
	СтруктураПараметров.Вставить("МассивШагов", МассивШагов);
	СтруктураПараметров.Вставить("ДвДанныеvbFeatureReader", ДвДанныеvbFeatureReader);
	СтруктураПараметров.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	СоздатьEPFПоМассивуФич(СтруктураПараметров);
	ЭтаФорма.Активизировать();
	
КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокуСценарияЧерезРодителя(СтрокаДерева, ЭтоПример, ЭтоШагКонтекста)
	ТекСтрокаДерева = СтрокаДерева;
	
	Пока Истина Цикл
		Если ТекСтрокаДерева = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	 
		
		Если (ТекСтрокаДерева.Тип = "Сценарий") Тогда
			Если ТекСтрокаДерева.ДопТип = "Контекст" Тогда
				ЭтоШагКонтекста = Истина;
			КонецЕсли;	 
			Возврат ТекСтрокаДерева;
		КонецЕсли;	 
		Если (ТекСтрокаДерева.Тип = "Пример") Тогда
			ЭтоПример = Истина;
			Возврат ТекСтрокаДерева;
		КонецЕсли;	 
		
		ТекСтрокаДерева = ТекСтрокаДерева.ПолучитьРодителя();
	КонецЦикла;
КонецФункции	

&НаКлиенте
Функция НайтиСтрокуФичиЧерезРодителя(Стр)
	
	Если Стр = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	СтрокаДерева = Стр;
	Пока Истина Цикл
		Если СтрокаДерева.Тип = "Фича" Тогда
			Возврат СтрокаДерева;
		КонецЕсли;	 
		
		СтрокаДерева = СтрокаДерева.ПолучитьРодителя();
		Если СтрокаДерева = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЦикла;
	
КонецФункции	

&НаСервереБезКонтекста
Функция НайтиСтрокуФичиЧерезРодителяСервер(Стр)
	СтрокаДерева = Стр;
	Пока Истина Цикл
		Если СтрокаДерева.Тип = "Фича" Тогда
			Возврат СтрокаДерева;
		КонецЕсли;	 
		
		СтрокаДерева = СтрокаДерева.Родитель;
		Если СтрокаДерева = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЦикла;
КонецФункции	

&НаКлиенте
Функция НомерСтрокиФичиИзПолногоПути(ПолныйПуть)
	Поз = Найти(НРег(ПолныйПуть), ".feature");
	
	Если Поз > 0 Тогда
		Возврат СокрЛП(Сред(ПолныйПуть, Поз + 1 + СтрДлина(".feature")));
	КонецЕсли;	
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция ИмяФайлаФичиИзПолногоПути(ПолныйПуть)
	Поз = Найти(НРег(ПолныйПуть), ".feature");
	
	Если Поз > 0 Тогда
		Возврат СокрЛП(Лев(ПолныйПуть, Поз + СтрДлина(".feature") - 1));
	КонецЕсли;	
	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Функция ЭтаФормаTestClientУжеОбрабатывалась(ИмяТекущейФормыTestClient)
	Для каждого Элем Из МассивСостояниеФормTestClient Цикл
		Если Элем.ИмяФормы = ИмяТекущейФормыTestClient Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции	

// {работа с TestClient

&НаСервереБезКонтекста
Функция СтрокиОжидаемойТаблицыСодержатсяВТаблицеTestclientСервер(Знач ОжидаемаяТаблица, Знач ТаблицаTestClient, СтрокаОшибки, Знач СтруктураПараметров)
	
	Таблица1 = Новый ТаблицаЗначений;
	Таблица2 = Новый ТаблицаЗначений;
	Для Каждого Элем Из ОжидаемаяТаблица[0] Цикл
		Таблица1.Колонки.Добавить(Элем.Ключ,, Элем.Значение);
		Таблица2.Колонки.Добавить(Элем.Ключ,, Элем.Значение);
	КонецЦикла;	
	
	// Проверим, что в таблице2 есть все нужные колонки	
	Для Каждого Колонка Из Таблица2.Колонки Цикл
		Попытка
			Значение = ТаблицаTestClient[0][Колонка.Заголовок];
			Если Значение = Неопределено Тогда
				ВызватьИсключение ПодставитьПараметрыВСтрокуСервер(
					ТекстСообщенияПользователюВызовСервера("В таблице не найдена колонка <%1>", СтруктураПараметров.ТекстСообщенийПользователю),
					Колонка.Заголовок
				);
			КонецЕсли;	 
		Исключение
			ВызватьИсключение ПодставитьПараметрыВСтрокуСервер(
				ТекстСообщенияПользователюВызовСервера("В таблице не найдена колонка <%1>", СтруктураПараметров.ТекстСообщенийПользователю),
				Колонка.Заголовок
			);
		КонецПопытки;
	КонецЦикла;	
	
	// проверим вхождение строк
	НомОжидаемаяТаблица = 0;
	
	Для Каждого СтрокаОжидаемаяТаблица Из ОжидаемаяТаблица Цикл
		НашлиСтроку = Ложь; 
		
		НомОжидаемаяТаблица = НомОжидаемаяТаблица + 1;
		Если НомОжидаемаяТаблица = 1 Тогда
			Продолжить;
		КонецЕсли;	 
				
		Для Каждого СтрокаТаблицаTestClient Из ТаблицаTestClient Цикл
			ВсеКолонкиСовпали = Истина;
			Для Каждого Колонка Из Таблица1.Колонки Цикл
				ЗначениеОжидаемаяТаблица  = СтрокаОжидаемаяТаблица[Колонка.Имя];
				ЗначениеТаблицаTestClient = СтрокаТаблицаTestClient[Колонка.Заголовок];
				
				Если ЗначениеОжидаемаяТаблица <> ЗначениеТаблицаTestClient Тогда
					ВсеКолонкиСовпали = Ложь;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
			
			Если ВсеКолонкиСовпали Тогда
				НашлиСтроку = Истина; 
				Прервать;
			КонецЕсли;	 
			
		КонецЦикла;	
		
		Если Не НашлиСтроку Тогда
			ЗначениеСтроки = "|";
			Для Каждого Колонка Из Таблица1.Колонки Цикл
				ЗначениеСтроки = " " + ЗначениеСтроки + СтрокаОжидаемаяТаблица[Колонка.Имя] + " |"; 
			КонецЦикла;	
			
			СтрокаОшибки = "Строка <" + ЗначениеСтроки + "> не найдена";
			Возврат Ложь;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции	

&НаКлиенте
Процедура ОчиститьМассивИД(МассивИд, МассивЭлементов)
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество() - 1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество() - Ккк - 1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзМассиваПоляТаблицTestClient(ТекущаяФорма, МассивЭлементов)
	МассивИд = Новый Массив;
	
	ТаблицыФормы = НайтиТаблицыКонтейнераTestClient(ТекущаяФорма);
	Для Каждого ТаблицаФормы Из ТаблицыФормы Цикл
		Ид = -1;
		Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
			Ид = Ид + 1;
			ЭлементТаблицы = ТаблицаФормы.НайтиОбъект(,, ПроверяемыйЭлемент.Имя);
			Если ЭлементТаблицы <> Неопределено Тогда
				МассивИд.Добавить(Ид);
			КонецЕсли;	 
		КонецЦикла;	
		
		ОчиститьМассивИД(МассивИд, МассивЭлементов);
		МассивИд = Новый Массив;
	КонецЦикла;	
КонецПроцедуры 

&НаКлиенте
Процедура ОставитьВМассивеТолькоПоляГиперссылок(МассивЭлементов)
	МассивИд = Новый Массив;
	
	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Если ПроверяемыйЭлемент.Вид <> ВидПоляФормы.ПолеНадписи
			И ПроверяемыйЭлемент.Вид <> ВидДекорацииФормы.Надпись
			И ПроверяемыйЭлемент.Вид <> ВидДекорацииФормы.Картинка
			Тогда
			МассивИд.Добавить(Ид);
		КонецЕсли;	 
	КонецЦикла;	
	
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество() - 1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество() - Ккк - 1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьГруппыФормыИзМассива(МассивЭлементов)
	МассивИд = Новый Массив;
	
	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Если ТипЗнч(ПроверяемыйЭлемент) = Тип("ТестируемаяГруппаФормы") Тогда
			МассивИд.Добавить(Ид);
		КонецЕсли;	 
	КонецЦикла;	
	
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество() - 1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество() - Ккк - 1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьФормыИзМассива(МассивЭлементов)
	МассивИд = Новый Массив;
	
	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Если ТипЗнч(ПроверяемыйЭлемент) = Тип("ТестируемаяФорма") Тогда
			МассивИд.Добавить(Ид);
		КонецЕсли;	 
	КонецЦикла;	
	
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество() - 1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество() - Ккк - 1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзМассиваПоляВКоторыеНеВозможенВводТекстаTestClient(МассивЭлементов)
	МассивИд = Новый Массив;
	
	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Если ПроверяемыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи Тогда
			МассивИд.Добавить(Ид);
			Продолжить;
		ИначеЕсли ПроверяемыйЭлемент.Вид = ВидПоляФормы.ПолеКартинки Тогда
			МассивИд.Добавить(Ид);
			Продолжить;
		ИначеЕсли ПроверяемыйЭлемент.Вид = ВидПоляФормы.ПолеПереключателя Тогда
			МассивИд.Добавить(Ид);
			Продолжить;
		ИначеЕсли ПроверяемыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка Тогда
			МассивИд.Добавить(Ид);
			Продолжить;
		КонецЕсли;	 	
		
		Попытка
			// попытка нужна, т.к. элемент может не позволить проверить своё состояние
			Если НЕ ПроверяемыйЭлемент.ТекущаяВидимость() Тогда
				МассивИд.Добавить(Ид);
			ИначеЕсли НЕ ПроверяемыйЭлемент.ТекущаяДоступность() Тогда
				МассивИд.Добавить(Ид);
			ИначеЕсли ПроверяемыйЭлемент.ТекущееТолькоПросмотр() Тогда
				МассивИд.Добавить(Ид);
			КонецЕсли;	 
		Исключение
		КонецПопытки;
	КонецЦикла;	
	
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество() - 1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество() - Ккк - 1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура УдалитьИзМассиваВсеКромеНужногоВидаTestClient(МассивЭлементов, НужныйВидПоляФормы)
	МассивИд = Новый Массив;
	
	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Если ПроверяемыйЭлемент.Вид <> НужныйВидПоляФормы Тогда
			МассивИд.Добавить(Ид);
		КонецЕсли;
	КонецЦикла;	
	
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество() - 1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество() - Ккк - 1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура УдалитьНевидимыеЭлементыИзМассиваЭлементовTestClient(МассивЭлементов)
	МассивИд = Новый Массив;
	
	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Попытка
			// Могут быть объекты, у которых нет метода ТекущаяВидимость()
			Если НЕ ПроверяемыйЭлемент.ТекущаяВидимость() Тогда
				МассивИд.Добавить(Ид);
			КонецЕсли;	 
		Исключение
			МассивИд.Добавить(Ид);
		КонецПопытки;
	КонецЦикла;	
	
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество() - 1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество() - Ккк - 1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура УдалитьНедоступныеДляИнтерактивнойРаботыПользователюЭлементыИзМассиваЭлементовTestClient(МассивЭлементов, ДопПараметры) Экспорт
	МассивИд = Новый Массив;
	ИсключитьГруппы = Истина;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ИсключитьГруппы") Тогда
			ИсключитьГруппы = ДопПараметры.ИсключитьГруппы;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Попытка
			// попытка нужна, т.к. элемент может не позволить проверить своё состояние
			Если ТипЗнч(ПроверяемыйЭлемент) = Тип("ТестируемаяГруппаФормы") И ИсключитьГруппы Тогда
				МассивИд.Добавить(Ид);
			ИначеЕсли НЕ ПроверяемыйЭлемент.ТекущаяВидимость() Тогда
				МассивИд.Добавить(Ид);
			ИначеЕсли НЕ ПроверяемыйЭлемент.ТекущаяДоступность() Тогда
				МассивИд.Добавить(Ид);
			ИначеЕсли ПроверяемыйЭлемент.ТекущееТолькоПросмотр() Тогда
				Если ТипЗнч(ПроверяемыйЭлемент) <> Тип("ТестируемаяДекорацияФормы")
					И ТипЗнч(ПроверяемыйЭлемент) <> Тип("ТестируемаяКнопкаФормы")
					И ПроверяемыйЭлемент.Вид <> ВидПоляФормы.ПолеНадписи Тогда
					// Если картинка или надпись является гиперссылкой или это кнопка, то по ней можно кликать в режиме ТолькоПросмотр.
					// В реальности у этих элементов вообще нет свойства ТолькоПросмотр.
					МассивИд.Добавить(Ид);
				КонецЕсли;	 
			КонецЕсли;	 
		Исключение
		КонецПопытки;
	КонецЦикла;	
	
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество() - 1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество() - Ккк - 1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ОставитьТолькоСтраницыВМассивеЭлементов(МассивЭлементов)
	МассивИд = Новый Массив;
	
	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Если ПроверяемыйЭлемент.Вид <> ВидГруппыФормы.Страница Тогда
			МассивИд.Добавить(Ид);
		КонецЕсли;	 
	КонецЦикла;	
	
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество() - 1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество() - Ккк - 1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура НайтиРеквизитВМассивеКонтейнеров(МассивКонтейнеров, ПолеРеквизит, ИмяРеквизита, ИскатьПоИмени, ТипПоля, ДопПараметры)
	Для каждого ТекущийКонтейнер Из МассивКонтейнеров Цикл
		
		Если ИскатьПоИмени = Неопределено Тогда
			ОпределитьРежимПоискаЭлементаНаФорме(ИмяРеквизита, ИскатьПоИмени);
		КонецЕсли;	 
		
		Попытка
			Если ИскатьПоИмени Тогда
				ЭлементФормы = ТекущийКонтейнер.НайтиОбъект(ТипПоля, , ИмяРеквизита);
				МассивЭлементов = Новый Массив;
				МассивЭлементов.Добавить(ЭлементФормы);
			Иначе
				МассивЭлементов = ТекущийКонтейнер.НайтиОбъекты(ТипПоля, ИмяРеквизита);
			КонецЕсли;	 
		Исключение
			// некоторые служебные формы могут вызвать исключение на поиск объектов
			Продолжить;
		КонецПопытки;
		
		Если МассивЭлементов = Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если МассивЭлементов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		ОбработатьМассивЭлементовTestClient(ТекущийКонтейнер, МассивЭлементов, ИмяРеквизита, ДопПараметры);
		
		ПолеРеквизит = МассивЭлементов[0];
		Если ДопПараметры <> Неопределено Тогда
			ДопПараметры.Вставить("ТекущийКонтейнерЭлемента", ТекущийКонтейнер);
		КонецЕсли;	 
		
		Возврат;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьМассивЭлементовTestClient(КонтейнерЭлементов, МассивЭлементов, ИмяРеквизита, ДопПараметры)
	Если ТипЗнч(МассивЭлементов) = Тип("ФиксированныйМассив") Тогда
		МассивЭлементов = Новый Массив(МассивЭлементов); // преобразуем фиксированный массив в обычный
	КонецЕсли;	 
	
	Если МассивЭлементов.Количество() > 1 Тогда
		ИсключатьНевидимыеЭлементы = Истина;
		Если ДопПараметры <> Неопределено И ДопПараметры.Свойство("ИсключатьНевидимыеЭлементы") Тогда
			ИсключатьНевидимыеЭлементы = ДопПараметры.ИсключатьНевидимыеЭлементы;
		КонецЕсли;	 
		
		Если ИсключатьНевидимыеЭлементы Тогда
			УдалитьНевидимыеЭлементыИзМассиваЭлементовTestClient(МассивЭлементов);
		КонецЕсли;	 
	КонецЕсли;
	
	Если МассивЭлементов.Количество() > 1 Тогда
		ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы = Истина;
		Если ДопПараметры <> Неопределено И ДопПараметры.Свойство("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы") Тогда
			ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы = ДопПараметры.ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы;
		КонецЕсли;	 
		
		Если ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы Тогда
			УдалитьНедоступныеДляИнтерактивнойРаботыПользователюЭлементыИзМассиваЭлементовTestClient(МассивЭлементов, ДопПараметры);
		КонецЕсли;	 
	КонецЕсли;
	
	Если (ДопПараметры <> Неопределено) И (МассивЭлементов.Количество() > 1) Тогда
		Флаг = Ложь;
		Если ДопПараметры.Свойство("ПоискЗакладки", Флаг) И Флаг = Истина Тогда
			ОставитьТолькоСтраницыВМассивеЭлементов(МассивЭлементов);
		КонецЕсли;	 
		
		Если МассивЭлементов.Количество() > 1 
				И ДопПараметры.Свойство("ИскатьТолькоПоляВКоторыеВозможенВводТекста", Флаг) И Флаг = Истина Тогда
			УдалитьИзМассиваПоляВКоторыеНеВозможенВводТекстаTestClient(МассивЭлементов);
		КонецЕсли;
		
		Если МассивЭлементов.Количество() > 1 
				И ДопПараметры.Свойство("ОставитьТолькоФлаги", Флаг) И Флаг = Истина Тогда
			УдалитьИзМассиваВсеКромеНужногоВидаTestClient(МассивЭлементов, ВидПоляФормы.ПолеФлажка);
		КонецЕсли;
		
		Если МассивЭлементов.Количество() > 1 
				И ДопПараметры.Свойство("ОставитьТолькоПереключатели", Флаг) И Флаг = Истина Тогда
			УдалитьИзМассиваВсеКромеНужногоВидаTestClient(МассивЭлементов, ВидПоляФормы.ПолеПереключателя);
		КонецЕсли;
		
		Если МассивЭлементов.Количество() > 1 
				И ДопПараметры.Свойство("ИскатьТолькоПоляГиперссылок", Флаг) И Флаг = Истина Тогда
			ОставитьВМассивеТолькоПоляГиперссылок(МассивЭлементов);
		КонецЕсли;
		
		Если МассивЭлементов.Количество() > 1 
				И ДопПараметры.Свойство("ИсключитьГруппы", Флаг) И Флаг = Истина Тогда
			ИсключитьГруппыФормыИзМассива(МассивЭлементов);
		КонецЕсли;
		
		Если МассивЭлементов.Количество() > 1 
				И ДопПараметры.Свойство("ИсключитьФормы", Флаг) И Флаг = Истина Тогда
			ИсключитьФормыИзМассива(МассивЭлементов);
		КонецЕсли;
	КонецЕсли;	 
	
	Если МассивЭлементов.Количество() > 1 Тогда
		// это самое тяжелое по времени действие
		УдалитьИзМассиваПоляТаблицTestClient(КонтейнерЭлементов, МассивЭлементов);
	КонецЕсли;	 
	
	Если МассивЭлементов.Количество() > 1  Тогда
		ВывестиСообщениеОТомЧтоПоЗаголовкуНайденоБольшеОдногоЭлемента(МассивЭлементов, ИмяРеквизита);
		ТекстСообщения = Локализовать("Найдено более одного поля формы с заголовком <%1>. Рекомендуется искать элемент по имени.");
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Найдено более одного поля формы с заголовком <%1>. Рекомендуется искать элемент по имени."),
			ИмяРеквизита
		);
	КонецЕсли;	 
	
	Если МассивЭлементов.Количество() = 0 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Реквизит <%1> не найден."),
			ИмяРеквизита
		);
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура НайтиРеквизитВАктивномОкне(ПолеРеквизит, ИмяРеквизита, ИскатьПоИмени, ТипПоля, ДопПараметры)
	Если ИскатьПоИмени = Неопределено Тогда
		ОпределитьРежимПоискаЭлементаНаФорме(ИмяРеквизита, ИскатьПоИмени);
	КонецЕсли;	 
	
	Если ОбъектКонтекст.Свойство("АктивноеОкно") И ОбъектКонтекст.АктивноеОкно <> Неопределено Тогда
		ТекущееОкно = ОбъектКонтекст.АктивноеОкно;
	Иначе	
		ТекущееОкно = ПолучитьАктивноеОкноИзТестовоеПриложение(ДопПараметры);
	КонецЕсли;	 
	
	Попытка
		Если ИскатьПоИмени Тогда
			МассивЭлементов = Новый Массив();
			МассивЭлементов.Добавить(ТекущееОкно.НайтиОбъект(ТипПоля, , ИмяРеквизита));
		Иначе
			МассивЭлементов = ТекущееОкно.НайтиОбъекты(ТипПоля, ИмяРеквизита);
		КонецЕсли;	 
	Исключение
		// некоторые служебные формы могут вызвать исключение на поиск объектов
		Возврат;
	КонецПопытки;
	
	Если МассивЭлементов = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Если МассивЭлементов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	ОбработатьМассивЭлементовTestClient(ТекущееОкно, МассивЭлементов, ИмяРеквизита, ДопПараметры);
	
	ПолеРеквизит = МассивЭлементов[0];
КонецПроцедуры

&НаКлиенте
Функция ПолучитьАктивноеОкноИзКонтекста()
	Если ОбъектКонтекст.Свойство("АктивноеОкно") Тогда
		Если ОбъектКонтекст.АктивноеОкно <> Неопределено Тогда
			Возврат ОбъектКонтекст.АктивноеОкно;
		КонецЕсли;	 
	КонецЕсли;
	
	Возврат ПолучитьАктивноеОкноИзТестовоеПриложение();
КонецФункции	

&НаКлиенте
Функция ПолучитьСвойстваОбъекта(ЭлементФормы, МассивЗаголовковПолей, МассивЗаголовковКнопок, ИмяРодителя)
	Рез = Новый Структура;
	Рез.Вставить("Имя", ЭлементФормы.Имя);
	Рез.Вставить("ТекстЗаголовка", ЭлементФормы.ТекстЗаголовка);
	Рез.Вставить("ИмяРодителя", ИмяРодителя);
	
	Если ТипЗнч(ЭлементФормы) = Тип("ТестируемоеПолеФормы") Тогда
		МассивЗаголовковПолей.Добавить(ЭлементФормы.ТекстЗаголовка);
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТестируемаяКнопкаФормы") Тогда
		МассивЗаголовковКнопок.Добавить(ЭлементФормы.ТекстЗаголовка);
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТестируемаяГруппаФормы") Тогда
		МассивЗаголовковПолей.Добавить(ЭлементФормы.ТекстЗаголовка);
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТестируемаяДекорацияФормы") Тогда
		МассивЗаголовковКнопок.Добавить(ЭлементФормы.ТекстЗаголовка);
	КонецЕсли;	 
	
	Возврат Рез;
КонецФункции	

&НаКлиенте
Функция ПолучитьЭлементыФормыИерархически(Элементформы, МассивЗаголовковПолей, МассивЗаголовковКнопок)
	Рез = Новый Массив;
	
	НайденныеОбъекты = Элементформы.ПолучитьПодчиненныеОбъекты();
	Для каждого Элем Из НайденныеОбъекты Цикл
		
		Если ТипЗнч(Элементформы) = Тип("ТестируемаяФорма") Тогда
			СвойстваОбъекта = ПолучитьСвойстваОбъекта(Элем, МассивЗаголовковПолей, МассивЗаголовковКнопок, Элементформы.ИмяФормы);
		Иначе	
			СвойстваОбъекта = ПолучитьСвойстваОбъекта(Элем, МассивЗаголовковПолей, МассивЗаголовковКнопок, Элементформы.Имя);
		КонецЕсли;	 
		
		Рез.Добавить(СвойстваОбъекта);
		
		ПодчиненныеОбъекты = ПолучитьЭлементыФормыИерархически(Элем, МассивЗаголовковПолей, МассивЗаголовковКнопок);
		СвойстваОбъекта.Вставить("ПодчиненныеОбъекты", ПодчиненныеОбъекты);
		
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ДобавитьСостояниеФормыTestclient(ТекущаяФорма)
	СостояниеФормы = Новый Структура;
	СостояниеФормы.Вставить("ИмяФормы", ТекущаяФорма.ИмяФормы);
	СостояниеФормы.Вставить("ТекстЗаголовка", ТекущаяФорма.ТекстЗаголовка);
	МассивЗаголовковПолей = Новый Массив;
	СостояниеФормы.Вставить("МассивЗаголовковПолей", МассивЗаголовковПолей);
	
	МассивЗаголовковКнопок = Новый Массив;
	СостояниеФормы.Вставить("МассивЗаголовковКнопок", МассивЗаголовковКнопок);

	МассивСостояниеФормTestClient.Добавить(СостояниеФормы);
	Попытка		
		МассивОбъектов = ПолучитьЭлементыФормыИерархически(ТекущаяФорма, МассивЗаголовковПолей, МассивЗаголовковКнопок);	
	Исключение
		СообщитьПользователю (ПодставитьПараметрыВСтроку(
			Локализовать("ДобавитьСостояниеФормыTestclient: %1"),
			ОписаниеОшибки()
		));
	КонецПопытки;
	
	СостояниеФормы.Вставить("МассивОбъектов", МассивОбъектов);
	Отладка("Запомнил имена реквизитов формы: " + ТекущаяФорма.ИмяФормы);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСостояниеТекущейФормыTestClient()
	ОкноПриложения = ПолучитьАктивноеОкноИзТестовоеПриложение();
	МассивФорм     = ОкноПриложения.НайтиОбъекты(Тип("ТестируемаяФорма"));
	Для каждого ТекущаяФорма Из МассивФорм Цикл
		ИмяТекущейФормыTestClient = ТекущаяФорма.ИмяФормы;
		
		Если ЭтаФормаTestClientУжеОбрабатывалась(ИмяТекущейФормыTestClient) Тогда
			Возврат;
		КонецЕсли;	 
		
		ДобавитьСостояниеФормыTestclient(ТекущаяФорма);
	КонецЦикла;

КонецПроцедуры

// }работа с TestClient

&НаКлиенте
Процедура ОпросЭлементовФормTestClient()
	
	Если ИдетОпросЭлементовФормTestClient Тогда
		Возврат;
	КонецЕсли;	 
	
	ИдетОпросЭлементовФормTestClient = Истина;
	Попытка
		ЗаполнитьСостояниеТекущейФормыTestClient();
	Исключение
		Отладка("" + ОписаниеОшибки());
	КонецПопытки;
	
	ИдетОпросЭлементовФормTestClient = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюЗаписиДействийПользователя(МоментЗаписи)

	Если МоментЗаписи = "НачатьЗапись" Тогда
		Элементы.кнНачатьЗаписьДействийПользователя.Видимость        = Ложь;
		Элементы.кнПриостановитьЗаписьДействийПользователя.Видимость = Истина;
		
	ИначеЕсли МоментЗаписи = "ПриостановитьЗапись" Тогда
		Элементы.кнПриостановитьЗаписьДействийПользователя.Видимость = Ложь;
		Элементы.кнПродолжитьЗаписьДействийПользователя.Видимость    = Истина;

	ИначеЕсли МоментЗаписи = "ПродолжитьЗапись" Тогда
		Элементы.кнПриостановитьЗаписьДействийПользователя.Видимость = Истина;
		Элементы.кнПродолжитьЗаписьДействийПользователя.Видимость    = Ложь;
		
	ИначеЕсли МоментЗаписи = "ЗавершитьЗапись" Тогда
		Элементы.кнНачатьЗаписьДействийПользователя.Видимость        = Истина;
		Элементы.кнПриостановитьЗаписьДействийПользователя.Видимость = Ложь;
		Элементы.кнПродолжитьЗаписьДействийПользователя.Видимость    = Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКод1СИзUILogToScriptСервер(Знач ДвоичныеДанные, Знач Стр)
	ИмяВременногоEPF = ПолучитьИмяВременногоФайла("epf");
	ДвоичныеДанные.Записать(ИмяВременногоEPF);
	
	Обработка                           = ВнешниеОбработки.Создать(ИмяВременногоEPF);
	Обработка.ObjectSearch              = 2;
	Обработка.SplitScriptIntoProcedures = Истина;
	Обработка.MainProcedureName         = "ВыполнитьДействия";
	
	Возврат Обработка.Convert(Стр);
	
КонецФункции	

&НаКлиенте
Процедура ОбработатьПолученныйКодUILogToScript(Стр)
	Стр = СтрЗаменить(Стр, "ТестовоеПриложение.НайтиОбъект", "КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект");
	Стр = СтрЗаменить(Стр, "ТестовоеПриложение.ПолучитьПодчиненныеОбъекты()", "КонтекстСохраняемый.ТестовоеПриложение.ПолучитьПодчиненныеОбъекты()");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПервоеКлючевоеСлово(СчетчикДействий, ТипДействия = Неопределено)
	СчетчикДействий = СчетчикДействий + 1;
	Если (СчетчикДействий > 1) И (ТипДействия = "ОткрытиеОкна") Тогда
		Возврат "	Тогда";
	КонецЕсли;	 
	
	Если СчетчикДействий = 1 Тогда
		Возврат "	Когда";
	Иначе
		Возврат "	И";
	КонецЕсли;	 
КонецФункции	

&НаКлиенте
Процедура ДобавитьУзел(МассивОбъектов, МассивСвойств, ИдВМассиве, Имя);
	ИдВМассиве                 = ИдВМассиве + 1;
	МассивОбъектов[ИдВМассиве] = Имя;
	МассивСвойств [ИдВМассиве] = Новый Соответствие;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУзел(МассивОбъектов, МассивСвойств, ИдВМассиве, Имя);
	МассивОбъектов[ИдВМассиве] = Неопределено;
	МассивСвойств [ИдВМассиве] = Неопределено;
	ИдВМассиве                 = ИдВМассиве - 1;
КонецПроцедуры

&НаКлиенте
Функция ЗначенияИзСтрокиТаблицыGherkin(Знач Стр)

	Массив = Новый Массив;

	Стр = СтрЗаменить(Стр, "\|", "~ЭкранированиеВертикальнойЧерты~");
	
	Стр = СокрЛП(Стр);
	Если Лев(Стр, 1) <> "|" Тогда
		Возврат Массив;
	КонецЕсли;
	
	Если Прав(Стр, 1) <> "|" Тогда
		Возврат Массив;
	КонецЕсли;
	
	Стр = Сред(Стр, 2);
	Стр = Сред(Стр, 1, СтрДлина(Стр) - 1);
	// убрали символы |
	
	Массив = РазложитьСтрокуВМассивПодстрокКлиент(Стр, "|");
	Если Массив.Количество() = 0 Тогда
		Массив.Добавить(Стр);
	КонецЕсли;
	
	Для Ккк = 0 По Массив.Количество() - 1 Цикл
		Массив[Ккк] = СокрЛП(Массив[Ккк]);
		Массив[Ккк] = СтрЗаменить(Массив[Ккк], "~ЭкранированиеВертикальнойЧерты~", "\|");
	КонецЦикла;
	
	Спс = Новый СписокЗначений;
	Для каждого Элем Из Массив Цикл
		Спс.Добавить(Элем);
	КонецЦикла;
	
	Возврат Спс;
	
КонецФункции

&НаКлиенте
Процедура УдалитьПредыдущуюСтрокуЕслиЕстьСовпадения(Текст, Стр1, Стр2)
	СтрокаТекста = Текст.ПолучитьСтроку(Текст.КоличествоСтрок());
	
	Если Найти(СтрокаТекста, Стр1) = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Найти(СтрокаТекста, Стр2) = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Текст.УдалитьСтроку(Текст.КоличествоСтрок());
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивДублирующихсяЗаголовковСервер(Знач МассивЗаголовковПолей)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("Заголовок");

	Для Н = 1 По МассивЗаголовковПолей.Количество() Цикл
		Тзн.Добавить();
	КонецЦикла;	
	
	Тзн.ЗагрузитьКолонку(МассивЗаголовковПолей, "Заголовок");
	
	Тзн.Колонки.Добавить("Кол");

	Для каждого СтрТзн Из Тзн Цикл
		СтрТзн.Кол = 1;
	КонецЦикла;

	Тзн.Свернуть("Заголовок", "Кол");
	
	Рез = Новый Массив;
	Для каждого СтрТзн Из Тзн Цикл
		Если СтрТзн.Кол > 1 Тогда
			Рез.Добавить(СтрТзн.Заголовок);
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Рез;
КонецФункции	

&НаКлиенте
Функция ПреобразоватьМассивСостояниеФормTestClient(МассивСостояниеФорм)
	
	Массив = Новый Массив;
	
	Если МассивСостояниеФорм = Неопределено Тогда
		Возврат Массив;
	КонецЕсли;	 
	
	Для каждого СостояниеФормы Из МассивСостояниеФорм Цикл
		Рез = Новый Структура;
		Рез.Вставить("ИмяФормы", СостояниеФормы.ИмяФормы);
		Рез.Вставить("ТекстЗаголовка", СостояниеФормы.ТекстЗаголовка);
		
		МассивЗаголовковПолей = СостояниеФормы.МассивЗаголовковПолей;
		МассивДублирующихсяЗаголовковПолей = ПолучитьМассивДублирующихсяЗаголовковСервер(МассивЗаголовковПолей);
		Рез.Вставить("МассивДублирующихсяЗаголовковПолей", МассивДублирующихсяЗаголовковПолей);
		
		МассивЗаголовковКнопок = СостояниеФормы.МассивЗаголовковКнопок;
		МассивДублирующихсяЗаголовковКнопок = ПолучитьМассивДублирующихсяЗаголовковСервер(МассивЗаголовковКнопок);
		Рез.Вставить("МассивДублирующихсяЗаголовковКнопок", МассивДублирующихсяЗаголовковКнопок);

		Массив.Добавить(Рез);
		
	КонецЦикла;
	
	Возврат Массив;
КонецФункции	

&НаКлиенте
Функция СтрокиРавныСУчётомЗвёздочек(Знач Стр1, Знач Стр2)
	// основная строка первая
	Массив1 = РазложитьСтрокуВМассивПодстрокКлиент(Стр1, " ");
	Массив2 = РазложитьСтрокуВМассивПодстрокКлиент(Стр2, " ");

	Если Массив1.Количество() = (Массив2.Количество() + 1) Тогда
		Если Массив1[Массив1.Количество() - 1] = "*" Тогда // значит тут последний символ *
			Массив1.Удалить(Массив1.Количество() - 1);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Массив1.Количество() <> Массив2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Для Ккк = 0 По Массив1.Количество() - 1 Цикл
		С1 = Массив1[Ккк];
		С2 = Массив2[Ккк];
		Если С1 = С2 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если С1 = "*" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Возврат Ложь;
	
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции	 

&НаКлиенте
Функция ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФормаЗаголовок, ЗаголовокПоля, ТипОбъекта)
	Для каждого СтруктураФормы Из МассивСтруктурФорм Цикл
		Если СтрокиРавныСУчётомЗвёздочек(ТекущаяФормаЗаголовок, СтруктураФормы.ТекстЗаголовка) Тогда
			Если ТипОбъекта = "ПолеФормы" Тогда
				Если СтруктураФормы.МассивДублирующихсяЗаголовковПолей.Найти(ЗаголовокПоля) <> Неопределено Тогда
					Отладка("Поле """ + ЗаголовокПоля + """ имеет дубли с таким же заголовком. Поиск будет происходить по имени.");
					Возврат Истина;
				КонецЕсли;	 
			ИначеЕсли ТипОбъекта = "Кнопка" Тогда
				Если СтруктураФормы.МассивДублирующихсяЗаголовковКнопок.Найти(ЗаголовокПоля) <> Неопределено Тогда
					Отладка("Кнопка """ + ЗаголовокПоля + """ имеет дубли с таким же заголовком. Поиск будет происходить по имени.");
					Возврат Истина;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;

	Возврат Ложь;
КонецФункции	

&НаКлиенте
Процедура ЗаменитьСимволПереводаСтрокВXML(ИмяФайла)
	#Если НЕ ВебКлиент Тогда
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");
	
	Массив = Новый Массив;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = СтрЗаменить(Стр, "|", "\|");
		Стр = СтрЗаменить(Стр, "\n", "~ЭкранированиеСлешЭн~");

		Если Лев(СокрЛП(Стр), 1) <> "<" Тогда
			// тогда нашли перенос строки
			Если Массив.Количество() > 1 Тогда
				Ид = Массив.Количество() - 2 + 1;
				Массив[Ид] = Массив[Ид] + "\n" + Стр;
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Массив.Добавить(Стр);
	КонецЦикла;	
	Текст.Закрыть();

	ИмяВременногоXML = ПолучитьИмяВременногоФайла("xml");
	ЗТ = Новый ЗаписьТекста(ИмяВременногоXML, "UTF-8",, Истина); 
	Для Каждого Стр Из Массив Цикл
		ЗТ.ЗаписатьСтроку(Стр); 
	КонецЦикла;	
	
	ЗТ.Закрыть();
	
	ПереместитьФайлКомандаСистемы(ИмяВременногоXML, ИмяФайла);
	
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьСтрокуКДатеИзДанныхXML(Стр)
	Стр = СтрЗаменить(Стр, "-", "");
	Стр = СтрЗаменить(Стр, ":", "");
	Стр = СтрЗаменить(Стр, "T", "");
	
	Попытка
		Дат = Дата(Стр);
	Исключение
		Возврат Стр;
	КонецПопытки;
	
	Возврат Формат(Дат, "ДФ=dd.MM.yyyy");
КонецФункции	

&НаКлиенте
Процедура ПолучитьТекстФичиИзДействийПользователя(Результат)
	#Если НЕ ВебКлиент Тогда
	Если МассивСостояниеФормTestClient = Неопределено Тогда
		МассивСостояниеФормTestClient = Новый Массив;
	КонецЕсли;	 
	
	МассивСтруктурФорм = ПреобразоватьМассивСостояниеФормTestClient(МассивСостояниеФормTestClient);
	
	ИмяВременногоXML = ПолучитьИмяВременногоФайла("xml");
	
	ЗТ = Новый ЗаписьТекста(ИмяВременногоXML, "UTF-8", , Истина); 
	ЗТ.Записать(Результат); 
	ЗТ.Закрыть();
	
	ЗаменитьСимволПереводаСтрокВXML(ИмяВременногоXML);
	
	ТекстРезультат = Новый ТекстовыйДокумент;
	ТекстРезультат.ДобавитьСтроку("");
	
	XML = Новый ЧтениеXML;
	XML.ОткрытьФайл(ИмяВременногоXML);
	
	МассивОбъектов = Новый Массив(100);
	МассивСвойств  = Новый Массив(МассивОбъектов.Количество());
	ИдВМассиве     = -1;
	
	СчетчикДействий      = 0;
	ТаблицаСвойствСтроки = Неопределено;
	НашлиПанельРазделов  = Ложь; // надо для обхода бага, когда в логе действий пользователя нет нажатия на панель разделов
	
	ФлагРедактированияТекстаМакета = Ложь;
	
	ТекущееОкно            = "";
	ПредыдущееОкно         = "";
	ТекущаяФорма           = "";
	ТекущаяТЧ              = "";
	ТекущееДополнениеФормы = "";
	ДанныеНажатияНаЭлементФормы = Неопределено;
	Узел_setFileDialogResult = Ложь;
	Узел_comment = Ложь;
	
	ЗначениеСтрокиinputText = "";
	Пока XML.Прочитать() Цикл
		
		ИмяУзла = XML.Имя;
		Если XML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ДобавитьУзел(МассивОбъектов, МассивСвойств, ИдВМассиве, ИмяУзла);
			Если (ИмяУзла = "gotoRow") ИЛИ (ИмяУзла = "expand") ИЛИ (ИмяУзла = "collapse") ИЛИ (ИмяУзла = "goOneLevelDown") ИЛИ (ИмяУзла = "goOneLevelUP") Тогда
				ТаблицаСвойствСтроки = Новый Массив();
			ИначеЕсли ИмяУзла = "Field" Тогда
				СвойствоСтроки = Новый Соответствие;
			КонецЕсли;	 
			Пока XML.ПрочитатьАтрибут() Цикл
				МассивСвойств[ИдВМассиве].Вставить(XML.Имя, XML.Значение);
				Если XML.Имя = "name" Тогда
					ЗначениеСтрокиinputText = "";
				КонецЕсли;	 
				
				Если ИмяУзла = "Field" Тогда
					СвойствоСтроки.Вставить(XML.Имя, XML.Значение);
				КонецЕсли;	 
			КонецЦикла;
			
			Если ИмяУзла = "Form" Тогда
				ТекущаяФорма = МассивСвойств[ИдВМассиве]["title"];
				ДанныеНажатияНаЭлементФормы = Неопределено;
				Если Объект.ДобавлятьПриНакликиванииМетаИнформацию Тогда
					Для каждого ЭлМассива Из МассивСостояниеФормTestClient Цикл
						Если ТекущаяФорма <> "" И ЭлМассива.ТекстЗаголовка = ТекущаяФорма  Тогда
							ТекстРезультат.ДобавитьСтроку(Символы.Таб + "//FormName=" + ЭлМассива.ИмяФормы);	
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли ИмяУзла = "ClientApplicationWindow" Тогда
				ТекущееОкно = МассивСвойств[ИдВМассиве]["caption"];
				ДанныеНажатияНаЭлементФормы = Неопределено;
			ИначеЕсли ИмяУзла = "FormTable" Тогда
				ТекущаяТЧ = МассивСвойств[ИдВМассиве]["name"];
				ДанныеНажатияНаЭлементФормы = Неопределено;
			ИначеЕсли ИмяУзла = "FormItemAddition" Тогда
				ТекущееДополнениеФормы = МассивСвойств[ИдВМассиве]["name"];
				ДанныеНажатияНаЭлементФормы = Неопределено;
			КонецЕсли;
			
			Если ИмяУзла = "click" Тогда
				ДанныеНажатияНаЭлементФормы = Неопределено;
				Если МассивОбъектов[ИдВМассиве - 1] = "CommandInterfaceButton" Тогда
					Если НРег(МассивСвойств[1]["isMain"]) = "true" Тогда
						Если ЭтоПанельРазделов(МассивСвойств[ИдВМассиве - 2]["title"]) Тогда
							ДобавитьМетаИнформациюВРезультат(ТекстРезультат, "//SectionPanel=", МассивСвойств, ИдВМассиве);
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " В панели разделов я выбираю """ 
								+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + """");
							НашлиПанельРазделов = Истина;
						ИначеЕсли ЭтоПанельОткрытых(МассивСвойств[ИдВМассиве - 2]["title"]) Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " В панели открытых я выбираю """ 
								+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + """");
						ИначеЕсли ЭтоМенюФункций(МассивСвойств[ИдВМассиве - 2]["title"]) ИЛИ ЭтоМенюФункций(МассивСвойств[ИдВМассиве - 3]["title"]) Тогда
							Если Не НашлиПанельРазделов Тогда
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) 
									+ " в xml не найдено значение клика в панели разделов. Проверьте xml, который был получен с TestClient.");
							КонецЕсли;
							
							ЗаменилиПредыдущуюСтроку = Ложь;
							Если ТекстРезультат.КоличествоСтрок() > 1 Тогда
								ПредыдущаяСтрока = ТекстРезультат.ПолучитьСтроку(ТекстРезультат.КоличествоСтрок());
								Поз = Найти(НРег(ПредыдущаяСтрока), НРег("В панели разделов я выбираю"));
								Если Поз > 0 Тогда
									ЗаменилиПредыдущуюСтроку = Истина;
									
									ИмяПанелиРазделов = СокрЛП(Сред(ПредыдущаяСтрока, Поз + СтрДлина("В панели разделов я выбираю")));
									
									ТекстРезультат.УдалитьСтроку(ТекстРезультат.КоличествоСтрок());
									ДобавитьМетаИнформациюВРезультат(ТекстРезультат, "//FunctionsMenu=", МассивСвойств, ИдВМассиве);
									
									ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " В командном интерфейсе я выбираю " 
										+ ИмяПанелиРазделов +  " """ + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + """");
								КонецЕсли;
							КонецЕсли;
							
							Если НЕ ЗаменилиПредыдущуюСтроку Тогда
								ДобавитьМетаИнформациюВРезультат(ТекстРезультат, "//FunctionsMenu=", МассивСвойств, ИдВМассиве);
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " В панели функций я выбираю """ 
									+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + """");
							КонецЕсли;
							
							НашлиПанельРазделов = Ложь;
						Иначе	
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " Я нажимаю кнопку командного интерфейса """ 
								+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + """");
						КонецЕсли;
					Иначе
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " В текущем окне я нажимаю кнопку командного интерфейса """ 
							+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + """");
					КонецЕсли;
					
				ИначеЕсли МассивОбъектов[ИдВМассиве - 1] = "FormButton" Тогда
					
					ЭтоКонтекстноеМеню = Ложь;
					ИдПоискаМеню = 2;
					Пока Истина Цикл
						Если МассивОбъектов[ИдВМассиве - ИдПоискаМеню] <> "FormGroup" Тогда
							Прервать;
						КонецЕсли;
						
						Если Найти(Нрег(МассивСвойств[ИдВМассиве - ИдПоискаМеню]["name"]), "контекстноеменю") > 0 Тогда
							ЭтоКонтекстноеМеню = Истина;
						КонецЕсли;
						
						Если ЭтоКонтекстноеМеню И МассивОбъектов[ИдВМассиве - ИдПоискаМеню] = "FormField" Тогда
							Прервать;
						КонецЕсли;
						
						ИдПоискаМеню = ИдПоискаМеню + 1;
						
						Если ИдПоискаМеню = ИдВМассиве Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					Если ЭтоКонтекстноеМеню Тогда
						ЗаголовокОбъекта = МассивСвойств[ИдВМассиве - ИдПоискаМеню]["title"];
						ИмяОбъекта = "с именем '" + МассивСвойств[ИдВМассиве - ИдПоискаМеню]["name"] + "'";
						
						Если ЗначениеЗаполнено(ТекущаяТЧ) Тогда
							ИмяОбъекта = "с именем '" + ТекущаяТЧ + "'";
						КонецЕсли;
						
						ЗаголовокКнопки = МассивСвойств[ИдВМассиве - 1]["title"];
						ТекИмяКнопки = МассивСвойств[ИдВМассиве - 1]["name"];
						ИмяКнопки = """" + ЗаголовокКнопки + """";
						Если НЕ ГенерироватьШагПоискаПоЗаголовку(ЗаголовокКнопки, ТекИмяКнопки, МассивСтруктурФорм, ТекущаяФорма, "Кнопка") Тогда
							ИмяКнопки = "с именем '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "'";
						КонецЕсли;
						
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я выбираю пункт контекстного меню " 
							+ ИмяКнопки + " на элементе формы " + ИмяОбъекта);
					Иначе
						
						ЗаголовокОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
						ТекИмяКнопки = МассивСвойств[ИдВМассиве - 1]["name"];
						ИмяОбъекта = """" + ЗаголовокОбъекта + """";
						
						Если НЕ ГенерироватьШагПоискаПоЗаголовку(ЗаголовокОбъекта, ТекИмяКнопки, МассивСтруктурФорм, ТекущаяФорма, "Кнопка") Тогда
							ИмяОбъекта = "с именем '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "'";
						КонецЕсли;
						
						ДобавитьОбычнуюСтроку = Истина;
						Если ТекущаяТЧ = "" Тогда
							ДобавитьОбычнуюСтроку = Истина;
						Иначе	
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" + ТекущаяТЧ 
								+ "' я нажимаю на кнопку " + ИмяОбъекта);
							ДобавитьОбычнуюСтроку = Ложь;
						КонецЕсли;
						
						Если ДобавитьОбычнуюСтроку Тогда
							ДанныеНажатияНаЭлементФормы = Новый Структура;
							ДанныеНажатияНаЭлементФормы.Вставить("ТекущееОкно", ТекущееОкно);
							ДанныеНажатияНаЭлементФормы.Вставить("ИмяКнопки", ЗаголовокОбъекта);
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю на кнопку " + ИмяОбъекта);
							
							Если ЗаголовокОбъекта = "Провести и закрыть"
									Или ЗаголовокОбъекта = "Записать и закрыть"
									Или ЗаголовокОбъекта = "Post and close"
									Или ЗаголовокОбъекта = "Save and close" Тогда
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я жду закрытия окна """ 
									+ ТекущееОкно + """ в течение 20 секунд");
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли (МассивОбъектов[ИдВМассиве - 1] = "FormField") ИЛИ (МассивОбъектов[ИдВМассиве - 1] = "FormDecoration") Тогда	
					ИмяОбъекта = ИмяОбъектаДляГенерацииШага(СчетчикДействий, МассивСвойств, ИдВМассиве, МассивСтруктурФорм, ТекущаяФорма, "Кнопка");
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю на гиперссылку " + ИмяОбъекта);
				КонецЕсли;
			ИначеЕсли ИмяУзла = "gotoDate" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " у поля '" 
					+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "' я перехожу к дате " 
						+ ПреобразоватьСтрокуКДатеИзДанныхXML(МассивСвойств[ИдВМассиве]["date"]));
			ИначеЕсли ИмяУзла = "selectAllRows" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
					+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' я выделяю все строки");
			ИначеЕсли ИмяУзла = "gotoFirstRow" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
					+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' я перехожу к первой строке");
			ИначеЕсли ИмяУзла = "gotoLastRow" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
					+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' я перехожу к последней строке");
			ИначеЕсли ИмяУзла = "deleteRow" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
					+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' я удаляю строку");
			ИначеЕсли ИмяУзла = "close" Тогда
				НадоДобавитьДействие = НЕ (ДанныеНажатияНаЭлементФормы <> Неопределено 
						И ДанныеНажатияНаЭлементФормы.ТекущееОкно = ТекущееОкно 
						И ДанныеНажатияНаЭлементФормы.ИмяКнопки = "Провести и закрыть");	 
				Если НадоДобавитьДействие Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " Я закрываю окно """
						 + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["caption"]) + """");
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "choose" Тогда
				Если ТекущаяТЧ <> "" Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" + ТекущаяТЧ 
						+ "' я выбираю текущую строку");
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "startChoosing" Тогда
				ИмяОбъекта = ИмяОбъектаДляГенерацииШага(СчетчикДействий, МассивСвойств, ИдВМассиве, МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы");
				Если ТекущаяТЧ <> "" Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" + ТекущаяТЧ 
							+ "' я нажимаю кнопку выбора у реквизита " + ИмяОбъекта);
				Иначе
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю кнопку выбора у поля " + ИмяОбъекта);
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "clear" Тогда
				ИмяОбъекта = ИмяОбъектаДляГенерацииШага(СчетчикДействий, МассивСвойств, ИдВМассиве, МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы");
					
				Если ТекущаяТЧ <> "" Тогда
					
					Если ЗначениеЗаполнено(ТекущееДополнениеФормы) Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" + ТекущаяТЧ 
								+ "' я нажимаю кнопку очистить у дополнения формы " + ИмяОбъекта);
					Иначе	
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" + ТекущаяТЧ 
								+ "' я нажимаю кнопку очистить у поля " + ИмяОбъекта);
					КонецЕсли;	
					
				Иначе
					
					Если ЗначениеЗаполнено(ТекущееДополнениеФормы) Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю кнопку очистить у дополнения формы " + ИмяОбъекта);
					Иначе	
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю кнопку очистить у поля " + ИмяОбъекта);
					КонецЕсли;	
					
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "endEditRow" Тогда
				
				Если ТекущаяТЧ <> "" И МассивСвойств[ИдВМассиве]["cancel"] = "false" Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
							+ ТекущаяТЧ + "' я завершаю редактирование строки");
				Иначе
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
							+ ТекущаяТЧ + "' я отменяю редактирование строки");
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "addRow" Тогда
				Если ТекущаяТЧ <> "" Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" + ТекущаяТЧ + "' я добавляю строку");
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "copyRow" Тогда
				Если ТекущаяТЧ <> "" Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" + ТекущаяТЧ + "' я копирую строку");
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "open" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					ИмяОбъекта = ИмяОбъектаДляГенерацииШага(СчетчикДействий, МассивСвойств, ИдВМассиве, МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы");
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю на кнопку открытия поля " + ИмяОбъекта);
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "create" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					ИмяОбъекта = ИмяОбъектаДляГенерацииШага(СчетчикДействий, МассивСвойств, ИдВМассиве, МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы");
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю на кнопку создать поля " + ИмяОбъекта);
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "openDropList" Тогда
				// todo Удалить?
				// Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
				// 	ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
				// 	Если НЕ ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта, МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
				// 		ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
				// 	КонецЕсли;	 
				// КонецЕсли;	 
			ИначеЕсли ИмяУзла = "executeChoiceFromChoiceList" Тогда
				ЗначениеВыбораИзСписка = МассивСвойств[ИдВМассиве]["presentation"];
				ЗначениеВыбораИзСписка = ЭкранироватьСпецСимволыДляЗначенияШага(ЗначениеВыбораИзСписка);
				ТипВыбораЗначенияИзСписка = "точное значение";
				
				ПредыдущаяСтрока = "";
				Если ТекстРезультат.КоличествоСтрок() > 0 Тогда
					ПредыдущаяСтрока = ТекстРезультат.ПолучитьСтроку(ТекстРезультат.КоличествоСтрок());
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗначениеСтрокиinputText) Тогда
					// значит раньше в поле был ввод текста
					Если Найти(ПредыдущаяСтрока, "я ввожу текст") > 0 Тогда
						ВПредыдущейСтрокеСценарияЕстьВВодПоСтроке = Истина;
						ЗначениеВыбораИзСписка = ЭкранироватьСпецСимволыДляЗначенияШага(УбратьКавычкиАпострофы(ЗначениеСтрокиinputText));
						ТипВыбораЗначенияИзСписка = "по строке";
						Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
							ТекстРезультат.УдалитьСтроку(ТекстРезультат.КоличествоСтрок());
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Найти(ПредыдущаяСтрока, "я нажимаю кнопку выбора") > 0 Тогда
					// для выпадающего списка шаг выбора сам выберет нужное значение
					Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
						ТекстРезультат.УдалитьСтроку(ТекстРезультат.КоличествоСтрок());
					КонецЕсли;
				КонецЕсли;
				
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					ИмяОбъекта = ИмяОбъектаДляГенерацииШага(СчетчикДействий, МассивСвойств, ИдВМассиве, МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы");
					Если ТекущаяТЧ <> "" Тогда
						
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
								+ ТекущаяТЧ + "' из выпадающего списка " + ИмяОбъекта + " я выбираю " + ТипВыбораЗначенияИзСписка 
								+ " """ + ЗначениеВыбораИзСписка + """");
					Иначе	
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " из выпадающего списка " 
							+ ИмяОбъекта + " я выбираю " + ТипВыбораЗначенияИзСписка + " """ + ЗначениеВыбораИзСписка + """");
					КонецЕсли;
				Иначе	
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " из выпадающего списка я выбираю """ 
						+ ЗначениеВыбораИзСписка + """");
				КонецЕсли;
				
			ИначеЕсли ИмяУзла = "increaseValue" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					ИмяОбъекта = ИмяОбъектаДляГенерацииШага(СчетчикДействий, МассивСвойств, ИдВМассиве, МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы");
					Если ТекущаяТЧ <> "" Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
							+ ТекущаяТЧ + "' в поле " + ИмяОбъекта + " я увеличиваю значение");
						
					Иначе	
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в поле " + ИмяОбъекта + " я увеличиваю значение");
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ИмяУзла = "decreaseValue" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					ИмяОбъекта = ИмяОбъектаДляГенерацииШага(СчетчикДействий, МассивСвойств, ИдВМассиве, МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы");
					Если ТекущаяТЧ <> "" Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
							+ ТекущаяТЧ + "' в поле " + ИмяОбъекта + " я уменьшаю значение");
					Иначе	
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в поле " + ИмяОбъекта + " я уменьшаю значение");
					КонецЕсли;	 
				КонецЕсли;	
				
			ИначеЕсли ИмяУзла = "executeChoiceFromDropList" Тогда
				ИмяОбъекта = ИмяОбъектаДляГенерацииШага(СчетчикДействий, МассивСвойств, ИдВМассиве, МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы");
				Если ТекущаяТЧ <> "" Тогда	
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
						+ ТекущаяТЧ + "' я выбираю значение реквизита " + ИмяОбъекта + " из формы списка");
					
				Иначе	
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я выбираю значение реквизита " 
							+ ИмяОбъекта + " из формы списка");
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "clickFormattedStringHyperlink" Тогда
				ИмяОбъекта = ИмяОбъектаДляГенерацииШага(СчетчикДействий, МассивСвойств, ИдВМассиве, МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы");
				ИмяГиперссылки = МассивСвойств[ИдВМассиве]["title"];
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " у поля " + ИмяОбъекта 
					+ " я нажимаю гиперссылку '" + ИмяГиперссылки + "'");
			ИначеЕсли ИмяУзла = "activate" Тогда
				// Для обычных полей форм событие "activate" пропускается, чтобы не увеличивать размер сценария
				Если МассивОбъектов[ИдВМассиве - 1] = "FormGroup" Тогда
					ИмяГруппы   = МассивСвойств[ИдВМассиве - 1]["name"];
					
					Если ИмяГруппы <> "ГруппаСтраницы" Тогда
						ИмяОбъекта = ИмяОбъектаДляГенерацииШага(СчетчикДействий, МассивСвойств, ИдВМассиве, МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы");
						// это стандартное название для "Тестируемая группа формы", Вид = "Страницы"
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я перехожу к закладке " + ИмяОбъекта);
					КонецЕсли;	 
					
				ИначеЕсли МассивОбъектов[ИдВМассиве - 1] = "FormField" И ЗначениеЗаполнено(ТекущаяТЧ) Тогда
					// активировали колонку таблицы
					ИмяОбъекта = ИмяОбъектаДляГенерацииШага(СчетчикДействий, МассивСвойств, ИдВМассиве, МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы");
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
							+ ТекущаяТЧ + "' я активизирую поле " + ИмяОбъекта);
				ИначеЕсли МассивОбъектов[ИдВМассиве - 1] = "FormItemAddition" И ЗначениеЗаполнено(ТекущаяТЧ) и ЗначениеЗаполнено(ТекущееДополнениеФормы) Тогда
					// активировали колонку дополнение формы в таблице
					ИмяОбъекта = ИмяОбъектаДляГенерацииШага(СчетчикДействий, МассивСвойств, ИдВМассиве, МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы");
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
							+ ТекущаяТЧ + "' я активизирую дополнение формы " + ИмяОбъекта);
				ИначеЕсли МассивОбъектов[ИдВМассиве - 1] = "FormItemAddition" И ЗначениеЗаполнено(ТекущееДополнениеФормы) Тогда
					ИмяОбъекта = ИмяОбъектаДляГенерацииШага(СчетчикДействий, МассивСвойств, ИдВМассиве, МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы");
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я активизирую дополнение формы " + ИмяОбъекта);
				КонецЕсли;	 
				
			ИначеЕсли ИмяУзла = "expand" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormGroup" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					ТекИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
					Если СокрЛП(ИмяОбъекта) = "" ИЛИ Объект.ИскатьЭлементыФормыПоИмени ИЛИ (НРег(ТекИмяОбъекта) = НРег(ИмяОбъекта)) Тогда
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						УдалитьПредыдущуюСтрокуЕслиЕстьСовпадения(ТекстРезультат, " я перехожу к закладке", ИмяОбъекта);
						
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я разворачиваю группу с именем '" + ИмяОбъекта + "'");
					Иначе	
						УдалитьПредыдущуюСтрокуЕслиЕстьСовпадения(ТекстРезультат, " я перехожу к закладке", ИмяОбъекта);
						
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я разворачиваю группу """ + ИмяОбъекта + """");
					КонецЕсли;	 
				КонецЕсли;	 
				
			ИначеЕсли ИмяУзла = "collapse" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormGroup" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					ТекИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
					Если СокрЛП(ИмяОбъекта) = "" ИЛИ Объект.ИскатьЭлементыФормыПоИмени ИЛИ (НРег(ТекИмяОбъекта) = НРег(ИмяОбъекта)) Тогда
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						УдалитьПредыдущуюСтрокуЕслиЕстьСовпадения(ТекстРезультат, " я перехожу к закладке", ИмяОбъекта);
						
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я сворачиваю группу с именем '" + ИмяОбъекта + "'");
					Иначе
						УдалитьПредыдущуюСтрокуЕслиЕстьСовпадения(ТекстРезультат, " я перехожу к закладке", ИмяОбъекта);
						
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я сворачиваю группу '" + ИмяОбъекта + "'");
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ИмяУзла = "goOneLevelDown" Тогда
				Если ТекущаяТЧ <> "" Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '"
						+ ТекущаяТЧ + "' я перехожу на один уровень вниз");
				КонецЕсли;
			ИначеЕсли ИмяУзла = "gotoPreviousRow" Тогда
				Если ТекущаяТЧ <> "" Тогда
					switchSelection = Ложь;
					Если МассивСвойств[ИдВМассиве]["switchSelection"] = "true" Тогда
						switchSelection = Истина;
					КонецЕсли;
					
					Если switchSelection Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '"
							+ ТекущаяТЧ + "' я перехожу на одну строку вверх с выделением");
					Иначе	
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '"
							+ ТекущаяТЧ + "' я перехожу на одну строку вверх");
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ИмяУзла = "gotoNextRow" Тогда
				Если ТекущаяТЧ <> "" Тогда
					switchSelection = Ложь;
					Если МассивСвойств[ИдВМассиве]["switchSelection"] = "true" Тогда
						switchSelection = Истина;
					КонецЕсли;
					
					Если switchSelection Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
							+ ТекущаяТЧ + "' я перехожу на одну строку вниз с выделением");
					Иначе	
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
							+ ТекущаяТЧ + "' я перехожу на одну строку вниз");
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ИмяУзла = "goOneLevelUp" Тогда
				Если ТекущаяТЧ <> "" Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
						+ ТекущаяТЧ + "' я перехожу на один уровень вверх");
				КонецЕсли;
			ИначеЕсли ИмяУзла = "selectOption" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					ТекИмяПоля = МассивСвойств[ИдВМассиве - 1]["name"];
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта, ТекИмяПоля, МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы")  Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я меняю значение переключателя """ 
							+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + """ на """ 
							+ МассивСвойств[ИдВМассиве]["presentation"] + """");
					Иначе	
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я меняю значение переключателя с именем '" 
							+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' на """ 
							+ МассивСвойств[ИдВМассиве]["presentation"] + """");
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ИмяУзла = "beginEditingCurrentArea" Тогда
				ФлагРедактированияТекстаМакета = Истина;
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в табличном документе '" 
					+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' я делаю двойной клик на текущей ячейке");
			ИначеЕсли ИмяУзла = "finishEditingCurrentArea" Тогда
				ФлагРедактированияТекстаМакета = Ложь;
			ИначеЕсли ИмяУзла = "setCurrentArea" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					ПредыдущаяСтрока = "";
					Если ТекстРезультат.КоличествоСтрок() > 0 Тогда
						ПредыдущаяСтрока = ТекстРезультат.ПолучитьСтроку(ТекстРезультат.КоличествоСтрок());
					КонецЕсли;
					ТекущаяСтрока = ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в табличном документе '" 
						+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' я перехожу к ячейке """ 
						+ МассивСвойств[ИдВМассиве]["area"] + """";
					Если ТекущаяСтрока <> ПредыдущаяСтрока Тогда
						// чтобы не добавлять одинаковых шагов
						ТекстРезультат.ДобавитьСтроку(ТекущаяСтрока);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ИмяУзла = "inputText" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" ИЛИ МассивОбъектов[ИдВМассиве - 1] = "FormItemAddition" Тогда
					
					Если ФлагРедактированияТекстаМакета Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в табличный документ """ 
							+ МассивСвойств[ИдВМассиве - 2]["name"] + """ я ввожу текст " 
							+ ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("""" + МассивСвойств[ИдВМассиве]["text"] + """"));
					Иначе	
						ЗаголовокПоля = МассивСвойств[ИдВМассиве - 1]["title"];
						ТекИмяПоля = МассивСвойств[ИдВМассиве - 1]["name"];
						ИмяОбъекта = ЗаголовокПоля;
						Если ТекущаяТЧ <> "" Тогда
							Если ЗначениеЗаполнено(ТекущееДополнениеФормы) Тогда
								Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта, ТекИмяПоля, МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
									ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
										+ ТекущаяТЧ + "' в дополнение формы """ + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) 
										+ """ я ввожу текст " + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("""" + МассивСвойств[ИдВМассиве]["text"] + """"));
								Иначе
									ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
										+ ТекущаяТЧ + "' в дополнение формы с именем '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) 
										+ "' я ввожу текст " + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("""" + МассивСвойств[ИдВМассиве]["text"] + """"));
								КонецЕсли;
							Иначе	
								Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта, ТекИмяПоля, МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
									ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
										+ ТекущаяТЧ + "' в поле """ + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) 
										+ """ я ввожу текст " + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("""" + МассивСвойств[ИдВМассиве]["text"] + """"));
								Иначе
									ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
										+ ТекущаяТЧ + "' в поле с именем '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) 
										+ "' я ввожу текст " + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("""" + МассивСвойств[ИдВМассиве]["text"] + """"));
								КонецЕсли;
							КонецЕсли;
						ИначеЕсли МассивОбъектов[ИдВМассиве - 1] = "FormItemAddition" И ЗначениеЗаполнено(ТекущееДополнениеФормы) Тогда
							ИмяОбъекта = ИмяОбъектаДляГенерацииШага(СчетчикДействий, МассивСвойств, ИдВМассиве, МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы");
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в дополнение формы " + ИмяОбъекта + " я ввожу текст " 
								+ ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("""" + МассивСвойств[ИдВМассиве]["text"] + """"));
						ИначеЕсли ГенерироватьШагПоискаПоЗаголовку(ЗаголовокПоля, ТекИмяПоля, МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в поле """ 
								+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + """ я ввожу текст " 
								+ ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("""" + МассивСвойств[ИдВМассиве]["text"] + """"));
						Иначе	
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в поле с именем '" 
								+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' я ввожу текст " 
								+ ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("""" + МассивСвойств[ИдВМассиве]["text"] + """"));
						КонецЕсли;
					КонецЕсли;
					ЗначениеСтрокиinputText = ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля(МассивСвойств[ИдВМассиве]["text"]);
				КонецЕсли;
			ИначеЕсли ИмяУзла = "setCheck" Тогда
				ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
				ТекИмяПоля = МассивСвойств[ИдВМассиве - 1]["name"];
				ИмяРеквизита = МассивСвойств[ИдВМассиве - 1]["name"];
				
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					Действие = "изменяю";
					Если ТекущаяТЧ <> "" Тогда
						
						Попытка
							ТаблицаНаФорме = НайтиТЧПоИмени(ТекущаяТЧ);
							ПолеРеквизит = НайтиРеквизитТаблицы(ТекущаяТЧ, ИмяРеквизита, Истина, ТаблицаНаФорме);
							ПредставлениеДанных = ПолеРеквизит.ПолучитьПредставлениеДанных();
							Если ЗначениеФлагаСоответствуетИстина(ПредставлениеДанных) Тогда
								Действие = "устанавливаю";
							Иначе	
								Действие = "снимаю";
							КонецЕсли;
						Исключение
							Действие = "изменяю";
						КонецПопытки;
						
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
						ТекИмяПоля = МассивСвойств[ИдВМассиве - 1]["name"];
						Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта, ТекИмяПоля, МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
							ТекстРезультат.ДобавитьСтроку(СтрЗаменить(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
								+ ТекущаяТЧ + "' я %действие флаг """ + ЭкранироватьСпецСимволыДляЗначенияШага(ИмяОбъекта) + """", 
									"%действие", Действие));
						Иначе	
							ТекстРезультат.ДобавитьСтроку(СтрЗаменить(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
								+ ТекущаяТЧ + "' я %действие флаг с именем '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "'", 
									"%действие", Действие));
						КонецЕсли;
					Иначе	
						
						Попытка
							ПолеРеквизит = НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, Истина, Истина, Тип("ТестируемоеПолеФормы"));
							ПредставлениеДанных = ПолеРеквизит.ПолучитьПредставлениеДанных();
							Если ЗначениеФлагаСоответствуетИстина(ПредставлениеДанных) Тогда
								Действие = "устанавливаю";
							Иначе	
								Действие = "снимаю";
							КонецЕсли;
						Исключение
							Действие = "изменяю";
						КонецПопытки;
						
						Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта, ТекИмяПоля, МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
							ТекстРезультат.ДобавитьСтроку(СтрЗаменить(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я %действие флаг '" 
								+ ЭкранироватьСпецСимволыДляЗначенияШага(ИмяОбъекта) + "'", "%действие", Действие));
						Иначе	
							ТекстРезультат.ДобавитьСтроку(СтрЗаменить(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я %действие флаг с именем '" 
								+ ЭкранироватьСпецСимволыДляЗначенияШага(ИмяРеквизита) + "'", "%действие", Действие));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ИмяУзла = "ClientApplicationWindow" Тогда
				ИмяОкна = МассивСвойств[ИдВМассиве]["caption"];
				Если ИмяОкна <> Неопределено Тогда
					НужноДобавитьШагОткрытияОкна = Истина;
					
					ПромИмяОкна = ИмяОкна;
					Если Прав(ПромИмяОкна, 1) = "*" Тогда
						ПромИмяОкна = Сред(ПромИмяОкна, 1, СтрДлина(ПромИмяОкна) - 1);
						Если СокрП(ПромИмяОкна) = ПредыдущееОкно Тогда
							НужноДобавитьШагОткрытияОкна = Ложь;
						КонецЕсли;	 
					КонецЕсли;	 
					
					Если НужноДобавитьШагОткрытияОкна Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий, "ОткрытиеОкна") + " открылось окно """ + ЭкранироватьСпецСимволыДляЗначенияШага(ИмяОкна) + """");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "gotoNextItem" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я перехожу к следующему реквизиту");
				
			ИначеЕсли ИмяУзла = "executeChoiceFromMenu" Тогда
				ЗначениеМеню = МассивСвойств[ИдВМассиве]["presentation"];
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в меню формы я выбираю '" + ЗначениеМеню + "'");
			ИначеЕсли ИмяУзла = "executeChoiceFromList" Тогда
				ЗначениеМеню = МассивСвойств[ИдВМассиве]["presentation"];
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я выбираю из списка '" + ЗначениеМеню + "'");
			ИначеЕсли ИмяУзла = "filename" И МассивСвойств[ИдВМассиве - 1]["result"] = "true" Тогда
				Узел_setFileDialogResult = Истина;
			ИначеЕсли ИмяУзла = "comment" Тогда
				Узел_comment = Истина;
			ИначеЕсли ИмяУзла = "setOrder" Тогда
				Если ТекущаяТЧ <> "" Тогда	
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
						+ ТекущаяТЧ + "' я устанавливаю сортировку по колонке '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве]["columnTitle"]) + "'");
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "writeContentToFile" Тогда
				Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта, ТекИмяПоля, МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы")  Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я сохраняю данные элемента формы с именем '" 
						+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "' в файл");
				Иначе	
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я сохраняю данные элемента формы с именем '" 
						+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' в файл");
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "executeChoiceDetailsMenu" Тогда
				ЗначениеМеню = МассивСвойств[ИдВМассиве]["presentation"];
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в табличном документе """ 
					+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + """ в меню расшифровки я выбираю " 
					+ ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("""" + ЗначениеМеню + """"));
			КонецЕсли;
		КонецЕсли;
		
		Если XML.ТипУзла = ТипУзлаXML.Текст Тогда
			Если ИмяУзла = "#text" И Узел_setFileDialogResult Тогда
				//Надо добавить шаг выбора файла до того действия, которое вызвало диалог появления файла
				
				ТекущийТекстМассив = _СтрРазделить(ТекстРезультат.ПолучитьТекст(), Символы.ПС);
				ИдПоследнегоДействия = -1;
				Для Сч = 0 По ТекущийТекстМассив.Количество() - 1 Цикл
					ТекСтр = ТекущийТекстМассив[Сч];
					Если ЗначениеЗаполнено(ТекСтр) Тогда
						ИдПоследнегоДействия = Сч;
					КонецЕсли;	
				КонецЦикла;
				
				СтрокаШага = ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я выбираю файл '" + XML.Значение + "'";
				Если ИдПоследнегоДействия >= 0 Тогда
					ТекущийТекстМассив.Вставить(ИдПоследнегоДействия, СтрокаШага);
					ТекстРезультат.УстановитьТекст(_СтрСоединить(ТекущийТекстМассив, Символы.ПС));
				Иначе
					ТекстРезультат.ДобавитьСтроку(СтрокаШага);
				КонецЕсли;	
				
			ИначеЕсли ИмяУзла = "#text" И Узел_comment Тогда
				ТекстРезультат.ДобавитьСтроку("//" + XML.Значение);
			КонецЕсли;	
		КонецЕсли;	
		
		Если XML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
			Если ИмяУзла = "Form" Тогда
				ТекущаяФорма = "";
			ИначеЕсли ИмяУзла = "ClientApplicationWindow" Тогда
				ПредыдущееОкно = ТекущееОкно;
				ТекущееОкно = "";
			ИначеЕсли ИмяУзла = "FormTable" Тогда
				ТекущаяТЧ = "";
			ИначеЕсли ИмяУзла = "FormItemAddition" Тогда
				ТекущееДополнениеФормы = "";
			ИначеЕсли ИмяУзла = "filename" Тогда
				Узел_setFileDialogResult = Ложь;
			ИначеЕсли ИмяУзла = "comment" Тогда
				Узел_comment = Ложь;
			КонецЕсли;	 
			
			Если ТекущаяТЧ <> "" Тогда
				Если (ИмяУзла = "gotoRow") ИЛИ (ИмяУзла = "expand") ИЛИ (ИмяУзла = "collapse") Тогда
					ЕстьЗаполненныеЯчейки = Ложь;
					Для каждого СвойствоСтроки Из ТаблицаСвойствСтроки Цикл
						Если СокрЛП(СвойствоСтроки["cellText"]) <> "" Тогда
							ЕстьЗаполненныеЯчейки = Истина;
							Прервать;
						КонецЕсли;	 
					КонецЦикла;
					
					Стр1 = "| ";
					Стр2 = "| ";
					Для каждого СвойствоСтроки Из ТаблицаСвойствСтроки Цикл
						Если СокрЛП(СвойствоСтроки["cellText"]) = "" И ЕстьЗаполненныеЯчейки Тогда
							Продолжить;
						КонецЕсли;	 
						Стр1 = Стр1 + " """ +  СвойствоСтроки["title"] + """ |";
						Стр2 = Стр2 + " """ + СвойствоСтроки["cellText"] + """ |";
					КонецЦикла;
										
					МассивТаблицы = Новый Массив();
					МассивТаблицы.Добавить(Стр1);
					МассивТаблицы.Добавить(Стр2);
					
					ФорматироватьТаблицуGherkin(МассивТаблицы);
					
					Стр = "		" + МассивТаблицы[0] + Символы.ПС + "		" + МассивТаблицы[1];
					
					Если ТаблицаСвойствСтроки.Количество() > 0 Тогда
						Если (ИмяУзла = "gotoRow") Тогда
							СтрокаДействие = "' я перехожу к строке:";
						ИначеЕсли (ИмяУзла = "expand") Тогда
							СтрокаДействие = "' я разворачиваю строку:";
						ИначеЕсли (ИмяУзла = "collapse") Тогда
							СтрокаДействие = "' я сворачиваю строку:";
						КонецЕсли;	 
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
								+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + СтрокаДействие);
						ТекстРезультат.ДобавитьСтроку(Стр);
					ИначеЕсли (ИмяУзла = "expand") Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
							+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) +  "' я разворачиваю текущую строку");
					КонецЕсли;	 
					
				ИначеЕсли ИмяУзла = "Field" Тогда
					ТаблицаСвойствСтроки.Добавить(СвойствоСтроки);
				ИначеЕсли ИмяУзла = "switchRowDeleteMark" Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" 
						+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) +  "' я меняю пометку удаления строки");
				КонецЕсли;	 
			КонецЕсли;	 
			
			УдалитьУзел(МассивОбъектов, МассивСвойств, ИдВМассиве, XML.Имя);
		КонецЕсли; 
	КонецЦикла; 
	XML.Закрыть();
	
	ТекстРезультатКод = Новый ТекстовыйДокумент;
	
	Для НомерСтроки = 1 По ТекстРезультат.КоличествоСтрок() Цикл
		СтрокаТекста = СокрЛП(ТекстРезультат.ПолучитьСтроку(НомерСтроки));
		СтрокаТекста = СтрЗаменить(СтрокаТекста, """", """""");
		ТекстРезультатКод.ДобавитьСтроку("Ванесса.Шаг(""" + СтрокаТекста + """);");
	КонецЦикла;
	Объект.СгенерированныйСценарийКод = ТекстРезультатКод.ПолучитьТекст();
	
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		ТекстРезультат.ВставитьСтроку(1, "#language: ru
		|
		|Функционал: <описание фичи>
		|
		|Как <Роль>
		|Я хочу <описание функционала> 
		|Чтобы <бизнес-эффект> 
		|
		|Контекст: 
		|	Дано Я запускаю сценарий открытия TestClient или подключаю уже существующий
		|
		|
		|Сценарий: <описание сценария>");
	КонецЕсли;	 
	
	Объект.СгенерированныйСценарий = ТекстРезультат.ПолучитьТекст();
	
	Объект.СгенерированныйСценарий = СтрЗаменить(Объект.СгенерированныйСценарий, "~ЭкранированиеСлешЭн~", "\n");
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМетаИнформациюВРезультат(ТекстРезультат, СтрокаНачала, МассивСвойств, ИдВМассиве)
	Если Объект.ДобавлятьПриНакликиванииМетаИнформацию Тогда
		ТекстРезультат.ДобавитьСтроку(Символы.Таб + СтрокаНачала 
			+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ИмяОбъектаДляГенерацииШага(СчетчикДействий, МассивСвойств, ИдВМассиве, МассивСтруктурФорм, ТекущаяФорма, ТипПоля)
	ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
	ТекИмяПоля = МассивСвойств[ИдВМассиве - 1]["name"];
	Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта, ТекИмяПоля, МассивСтруктурФорм, ТекущаяФорма, ТипПоля) Тогда
		Возврат """" + ИмяОбъекта + """";
	Иначе	
		ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
		Возврат "с именем '" + ИмяОбъекта + "'";
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ОбработатьXMLВUILogToScript(Стр)
	Если Не ЗначениеЗаполнено(Стр) Тогда
		Возврат;
	КонецЕсли;	

	Попытка
		ПутьКОбработке = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "vendor/1C/UILogToScript.epf";
		ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКОбработке);
		Результат = ПолучитьКод1СИзUILogToScriptСервер(ДвоичныеДанные, Стр);
		
		ОбработатьПолученныйКодUILogToScript(Результат);
		
		Текст = Новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(Результат);
		
		Объект.СгенерированныйКод = Текст.ПолучитьТекст();
		
	Исключение
		Отладка(Локализовать("Не получилось обработать XML в UILogToScript."));
		Отладка(ОписаниеОшибки());
	КонецПопытки;
	
	Попытка
		ПолучитьТекстФичиИзДействийПользователя(Стр);
	Исключение
		Отладка(Локализовать("Ошибка при получении текста фичи:"));
		Отладка(ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Функция ПодключитьУжеЗапущенныйTestClient(ДанныеЗапускаКлиентаТестирования)
	Если ТипЗнч(ОбъектКонтекстСохраняемый) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если НЕ ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Попытка
			ТестовоеПриложение = СоздатьТестовоеПриложение(ДанныеЗапускаКлиентаТестирования);
			ТестовоеПриложение.УстановитьСоединение();
			Попытка
				Если НЕ ТестовоеПриложение.ОжидатьОтображениеОбъекта(Тип("ТестируемоеОкноКлиентскогоПриложения"),,, Объект.ТаймаутЗапуска1С) Тогда
					Возврат Ложь;
				КонецЕсли;	 
			Исключение
				Возврат Ложь;
			КонецПопытки;
			
			НайденДиалогАвторизации = НаЭкранеДиалогАвторизации();
			Если НайденДиалогАвторизации Тогда
				ВызватьИсключение Локализовать("Не удалось авторизоваться в базе.");
			КонецЕсли;	 
			
			ДопПараметры = Новый Структура;
			ЗаполнитьКонтекстСохраняемыйДляТестовоеПриложение(ТестовоеПриложение, ДанныеЗапускаКлиентаТестирования, ДопПараметры);
			
			ДанныеЗапускаКлиентаТестирования.Подключен = Истина;
			
			Возврат Истина;
		Исключение
			Возврат Ложь;		
		КонецПопытки;
		
		Возврат Ложь;
	КонецЕсли;	 
	
	ТестовоеПриложение = ОбъектКонтекстСохраняемый.ТестовоеПриложение;
	
	Если ТестовоеПриложение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ТестовоеПриложение.ПолучитьПодчиненныеОбъекты(); // Проверка, что клиент тестирования не отвалился/перезапущен
	Исключение
		Попытка
			ТестовоеПриложение.РазорватьСоединение(); // Клиент тестирования отвалился, но VA не знает об этом
		Исключение
			
		КонецПопытки;
	КонецПопытки;
	
	Попытка
		ТестовоеПриложение.УстановитьСоединение();
		ГлавноеОкноТестируемого = ПолучитьГлавноеОкноТестируемого(ТестовоеПриложение);
		Если ГлавноеОкноТестируемого = Неопределено Тогда
			
			Возврат Ложь;
		КонецЕсли;	 
		ДопПараметры = Новый Структура;
		ЗаполнитьКонтекстСохраняемыйДляТестовоеПриложение(ТестовоеПриложение, ДанныеЗапускаКлиентаТестирования, ДопПараметры);
	Исключение
		Попытка
			ТестовоеПриложение.РазорватьСоединение();
			ОбъектКонтекстСохраняемый.ТестовоеПриложение = Неопределено;
		Исключение
		
		КонецПопытки;
		
		Возврат Ложь;
	КонецПопытки;
	
	Если НЕ ИдетЗаписьДействийПользователя Тогда
		ЗаписатьЛогВЖРИнформация("ПодключитьУжеЗапущенныйTestClient", Локализовать("Подключен уже существующий клиент тестирования."));
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	

&НаКлиенте
Функция ПолучитьМассивЗанятыхПортов()
	#Если НЕ ВебКлиент Тогда

	МассивЗанятыхПортов = Новый Массив;
	Если НЕ ЭтоLinux Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
		
		ТекстКоманды = "netstat -ano > """ + ИмяВременногоФайла + """"; 
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(ТекстКоманды);
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяВременногоФайла, "UTF-8");
		
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Если Стр = "" Тогда
				Продолжить;
			КонецЕсли;	 
			
			Порт_ = Сред(Сред(СокрЛП(Стр), 8), 1, Найти(Сред(СокрЛП(Стр), 8), "  "));
			Порт = "";
			Для НомерСимвола = 0 По СтрДлина(Порт_) - 1 Цикл
				СимволСтроки = Сред(Порт_, СтрДлина(Порт_) - НомерСимвола, 1);
				Если СимволСтроки = ":" Тогда
					Прервать;
				КонецЕсли;			
				Если Найти("0123456789", СимволСтроки) > 0 Тогда
					Порт = СимволСтроки + Порт;
				КонецЕсли;			
			КонецЦикла;
			
			Попытка
				Если НЕ ПустаяСтрока(Порт) Тогда
					Порт = Число(Порт);
					МассивЗанятыхПортов.Добавить(Порт);
				КонецЕсли;	 
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЦикла;	
		Текст.Закрыть();
	Иначе
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
		СтрокаЗапускаСС = "ss -tuwan4 2>/dev/null | awk '{print $5}' | grep ':' | cut -d "":"" -f 2 | sort | uniq  > """ 
			+ ИмяВременногоФайла + """";// взято из #383
		СтрокаЗапускаСШ = "/bin/sh -c " + СтрокаЗапускаСС;
		ВыполнитьКомандуОС(СтрокаЗапускаСШ);
		
		ЗаписатьЛогВЖРИнформация("ПолучениеДанныхОЗанятыхПортах", СтрокаЗапускаСШ);
		
		Если ФайлСуществуетКомандаСистемы(ИмяВременногоФайла) Тогда
			Текст = Новый ЧтениеТекста;
			Текст.Открыть(ИмяВременногоФайла, "UTF-8");
			
			Пока Истина Цикл
				Стр = Текст.ПрочитатьСтроку();
				Если Стр = Неопределено Тогда
					Прервать;
				КонецЕсли;
				
				Если Стр = "" Тогда
					Продолжить;
				КонецЕсли;

				Порт = СокрЛП(Стр);
				Попытка
					Порт = Число(Порт);
					МассивЗанятыхПортов.Добавить(Порт);
				Исключение
					Продолжить;
				КонецПопытки;
			КонецЦикла;	
			Текст.Закрыть();
		Иначе	
			ЗаписатьЛогВЖРОшибка("ПолучениеДанныхОЗанятыхПортах", "Файл ответа не найден.");
		КонецЕсли;	 
	КонецЕсли;
	
	Для каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
		МассивЗанятыхПортов.Добавить(СтрокаДанныеКлиентовТестирования.ПортЗапускаТестКлиента);
	КонецЦикла;
	
	Возврат МассивЗанятыхПортов;

	#КонецЕсли
КонецФункции // ПолучитьЗанятыеПорты()

&НаКлиенте
Функция ПолучитьКорректноеИмяTesClient(Знач Стр)
	Стр = Транслит(Стр);
	Стр = СтрЗаменить(Стр, " ", "");
	Стр = СтрЗаменить(Стр, ".", "");
	Стр = СтрЗаменить(Стр, "=", "");
	Стр = СтрЗаменить(Стр, """", "");
	Стр = СтрЗаменить(Стр, ":", "");
	Стр = СтрЗаменить(Стр, ";", "");
	Стр = СтрЗаменить(Стр, "?", "");
	Стр = СтрЗаменить(Стр, "\", "");
	Стр = СтрЗаменить(Стр, "/", "");
	Стр = СтрЗаменить(Стр, "*", "");
	Стр = СтрЗаменить(Стр, "!", "");
	Стр = СтрЗаменить(Стр, "@", "");
	Стр = СтрЗаменить(Стр, "#", "");
	Стр = СтрЗаменить(Стр, "$", "");
	Стр = СтрЗаменить(Стр, "%", "");
	Стр = СтрЗаменить(Стр, "-", "");
	Стр = СтрЗаменить(Стр, "<", "");
	Стр = СтрЗаменить(Стр, ">", "");
	Стр = СтрЗаменить(Стр, "+", "");
	Стр = СтрЗаменить(Стр, "(", "");
	Стр = СтрЗаменить(Стр, ")", "");
	Возврат Стр;
КонецФункции	

&НаКлиенте
Функция СоздатьТестовоеПриложение(ДанныеЗапускаКлиентаТестирования)
	ИмяКомпьютера = ДанныеЗапускаКлиентаТестирования.ИмяКомпьютера;
	Если Не ЗначениеЗаполнено(ИмяКомпьютера) Тогда
		ИмяКомпьютера = "localhost";
	КонецЕсли;	 
	
	Порт = ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента;
	Если ДанныеЗапускаКлиентаТестирования.ТипКлиента = "Web" И Порт <= 1 Тогда
		Порт = 1538; //порт по умолчанию для web клиента в файловой базе
	КонецЕсли;	 

	ТекстСообщения = Локализовать("ИмяКомпьютера <%1>; порт <%2>");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяКомпьютера); 
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Формат(Порт, "ЧГ=; ЧН=0")); 
	ЗаписатьЛогВЖРИнформация("СозданиеОбъектаТестируемоеПриложение", ТекстСообщения);
	
	Если ДанныеЗапускаКлиентаТестирования.ТипКлиента = "Web" 
		Или ДанныеЗапускаКлиентаТестирования.ТипКлиента = "МобильныйКлиент" 
		Или ДанныеЗапускаКлиентаТестирования.ТипКлиента = "МобильныйКлиентАвтономный"
		Или ДанныеЗапускаКлиентаТестирования.ТипКлиента = "МобильноеПриложение" Тогда
		ВтораяЧастьСтроки = ",""" + ПолучитьКорректноеИмяTesClient(ДанныеЗапускаКлиентаТестирования.Имя) + """)";
	Иначе	
		ВтораяЧастьСтроки = ")";
	КонецЕсли;	 
	ТестовоеПриложение = Вычислить("Новый ТестируемоеПриложение(""" + ИмяКомпьютера + """, " + Формат(Порт, "ЧГ=; ЧН=0")
	                                                                                          + ВтораяЧастьСтроки);
																							  
	ТекущийTestclientЭтоWebКлиент = Ложь;																							  
	Если ДанныеЗапускаКлиентаТестирования.ТипКлиента = "Web" Тогда
		ТекущийTestclientЭтоWebКлиент = Истина;
	КонецЕсли;	 																							  
																							  
	Возврат ТестовоеПриложение;
КонецФункции	

&НаКлиенте
Процедура УстановитьКонектСTestClient(ДанныеЗапускаКлиентаТестирования, ТестовоеПриложение, ДопПараметры)
	
	#Если НЕ ВебКлиент Тогда
	
	Если ТипЗнч(ОбъектКонтекстСохраняемый) <> Тип("Структура") Тогда
		ОбъектКонтекстСохраняемый = Новый Структура;
		КонтекстСохраняемый = ОбъектКонтекстСохраняемый;
	КонецЕсли;	 
	
	ОбъектКонтекстСохраняемый.Вставить("ТестовоеПриложение", ТестовоеПриложение);
	
	МаксДата = ТекущаяДата() + Объект.ТаймаутЗапуска1С;
	Пока Истина Цикл
		Если ТекущаяДата() > МаксДата Тогда
			
			ТекстКлиентБылЗапущенНаДругойВерсииПлатформы = "";
			Если Объект.ИспользоватьКомпонентуVanessaExt И НЕ ЗапрещеныСинхронныеВызовы Тогда
				Попытка
					СписокПроцессов = ПрочитатьСтрокуJSON(ВнешняяКомпонентаДляСкриншотов.ПолучитьСписокПроцессов(Истина));
					
					СтрокаПоиска = XMLСтрока(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента);
					Для Каждого ТекДанныеПроцесса Из СписокПроцессов Цикл
						Если Найти(ТекДанныеПроцесса.CommandLine, СтрокаПоиска) > 0 Тогда
							//Значит скорее всего именно этот процесс был запущен из VA. Надо проверить платформу.
							
							Стр = ТекДанныеПроцесса.CommandLine;
							Стр = СтрЗаменить(Стр, "/", "\");
							МассивСтрок = _СтрРазделить(Стр, "\");
							Для Каждого Стр Из МассивСтрок Цикл
								Стр = СокрЛП(Стр);
								Если Лев(Стр, 2) = "8." И _СтрРазделить(Стр, ".").Количество() = 4 Тогда
									СистемнаяИнформация = Новый СистемнаяИнформация;
									ВерсияМенеджера = СистемнаяИнформация.ВерсияПриложения;
									ВерсияКлиента = Стр;
									Если ВерсияМенеджера <> ВерсияКлиента Тогда
										ТекстКлиентБылЗапущенНаДругойВерсииПлатформы = ПодставитьПараметрыВСтроку(
										Локализовать("Не совпадают версии платформы менеджера тестирования и клиента тестирования. Клиент тестирования был запущен на версии платформы <%1>, а менеджер тестирования на <%2>. Если версии платформы не совпадают, то подключение нельзя установить."),
											ВерсияКлиента,
											ВерсияМенеджера
											);
										Прервать;	
									КонецЕсли;	
									
								КонецЕсли;	
							КонецЦикла;	
							
							Если ЗначениеЗаполнено(ТекстКлиентБылЗапущенНаДругойВерсииПлатформы) Тогда
								Прервать;
							КонецЕсли;	
							
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ТекстКлиентБылЗапущенНаДругойВерсииПлатформы) Тогда
							Прервать;
						КонецЕсли;	
						
					КонецЦикла;	
					
				Исключение
					
				КонецПопытки;
			КонецЕсли;	
			
			ТекстИсключения = ПодставитьПараметрыВСтроку(
				Локализовать("Не получилось подключить TestClient. Прерывание по таймауту <%1>")
				+ Символы.ПС  + ДанныеКлиентаТестированияСтрокой(ДанныеЗапускаКлиентаТестирования),
				Объект.ТаймаутЗапуска1С
				);
			Если ЗначениеЗаполнено(ТекстКлиентБылЗапущенНаДругойВерсииПлатформы) Тогда
				ТекстИсключения = ТекстКлиентБылЗапущенНаДругойВерсииПлатформы + Символы.ПС + ТекстИсключения;
			КонецЕсли;
			
			ВызватьИсключение ТекстИсключения;
			
		КонецЕсли;	 
		
		Если ВыполнениеСценариевБудетОстановлено() Тогда
			ДопПараметры.Вставить("ВыполнениеСценариевБудетОстановлено", Истина);
			Возврат;
		КонецЕсли;	  
		
		Если ВыполнениеСценариевБудетОстановлено() Тогда
			Возврат;
		КонецЕсли;	
		
		ПолучилосьУстановитьСоединение = Ложь;
		Попытка
			ТестовоеПриложение.УстановитьСоединение();
			Если ДанныеЗапускаКлиентаТестирования.ТипКлиента <> "ОбычноеПриложение" Тогда
				ГлавноеОкноТестируемого = ПолучитьГлавноеОкноТестируемого(ТестовоеПриложение);
			КонецЕсли;
			
			Если ТипЗнч(ДопПараметры) <> Тип("Структура") Тогда
				ДопПараметры = Новый Структура;
			КонецЕсли;	
			ЗаполнитьКонтекстСохраняемыйДляТестовоеПриложение(ТестовоеПриложение, ДанныеЗапускаКлиентаТестирования, ДопПараметры);
			ПолучилосьУстановитьСоединение = Истина;
		Исключение
		КонецПопытки;
		
		Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ВызватьИсключение") И ДопПараметры.ВызватьИсключение Тогда
			ВызватьИсключение ДопПараметры.ТекстОшибки;
		КонецЕсли;	
		
		ЗаписатьЛогВЖРИнформация("УстановитьКонектСTestClient", "ПолучилосьУстановитьСоединение = " + ПолучилосьУстановитьСоединение);
		
		Если ПолучилосьУстановитьСоединение Тогда
			Прервать;
		КонецЕсли;	 
		
		Sleep(1);
		
		Если Объект.ПовторноЗапускатьСеансКлиентаТестированияПриПодключенииЕслиНеНайденЕгоПроцесс Тогда
			Если ДатаВремяПоследнейПопыткиЗапускаКлиентаТестирования <> Неопределено И Процессы1СЗапущенныеРанее <> Неопределено Тогда
				Интервал = Макс(20, Объект.ИнтервалЗапускаПроцессаКлиентаТестирования);
				Если ДатаВремяПоследнейПопыткиЗапускаКлиентаТестирования + Интервал <= ТекущаяДата() Тогда
					ДатаВремяПоследнейПопыткиЗапускаКлиентаТестирования = ТекущаяДата();
					ЕстьНовыйПроцесс = Ложь;
					
					ДопПарамеры = Новый Структура;
					ДопПарамеры.Вставить("ПолучатьОкнаПолучениеЛицензии", Ложь);
					СуществующиеПроцессы1С = ПолучитьМассивPIDПроцессов1С(ДопПарамеры);
					ЗаписатьЛогВЖРИнформация("СуществующиеПроцессы1С", ЗаписатьОбъектJSON(СуществующиеПроцессы1С));
						
					Для Каждого ТекPID Из СуществующиеПроцессы1С Цикл
						Если Процессы1СЗапущенныеРанее.Найти(ТекPID) = Неопределено Тогда
							//Значит появился новый процесс
							ЕстьНовыйПроцесс = Истина;
							ЗаписатьЛогВЖРИнформация("УстановитьКонектСTestClient",
								ПодставитьПараметрыВСтроку(Локализовать("Найден ранее запущенный процесс 1С: <%1>."), Формат(ТекPID, "ЧГ=; ЧН=0")));
							
							Прервать;
						КонецЕсли;	 
					КонецЦикла;	 
					
					Если НЕ ЕстьНовыйПроцесс Тогда
						ЗаписатьЛогВЖРИнформация("УстановитьКонектСTestClient", Локализовать("Повторный запуск клиента тестирования, т.к. не найден ранее запущеный процесс."));
						//Значит надо попытаться запустить ещё один процесс, при условии, что предыдущий процесс не запустился
						
						//Надо обновить список процессов на текущее состояние
						ДопПарамеры = Новый Структура;
						ДопПарамеры.Вставить("ПолучатьОкнаПолучениеЛицензии", Ложь);
						Процессы1СЗапущенныеРанее = ПолучитьМассивPIDПроцессов1С(ДопПарамеры);
						
						ЗапуститьКлиентаТестирования(ДанныеЗапускаКлиентаТестирования);
						ТестовоеПриложение = СоздатьТестовоеПриложение(ДанныеЗапускаКлиентаТестирования);
						ОбъектКонтекстСохраняемый.Вставить("ТестовоеПриложение", ТестовоеПриложение);
					КонецЕсли;	 
					
				КонецЕсли;	 
				
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если Объект.ОпределятьРеальныйПортНаКоторомЗапустилсяКлиентТестирования И ЭтоLinux Тогда
			Если ДатаВремяПоследнейПопыткиОпределенияПортаЗапускаКлиентаТестирования <> Неопределено Тогда
				Интервал = 10;
				Если ДатаВремяПоследнейПопыткиОпределенияПортаЗапускаКлиентаТестирования + Интервал <= ТекущаяДата() Тогда
					ДатаВремяПоследнейПопыткиОпределенияПортаЗапускаКлиентаТестирования = ТекущаяДата();
					
					ДопПарамеры = Новый Структура;
					ДопПарамеры.Вставить("ПолучатьОкнаПолучениеЛицензии", Ложь);
					СуществующиеПроцессы1С = ПолучитьМассивPIDПроцессов1С(ДопПарамеры);
					ЗаписатьЛогВЖРИнформация("СуществующиеПроцессы1СОпределениеПортаКлиентаТестирования", ЗаписатьОбъектJSON(СуществующиеПроцессы1С));
					
					ЕстьНовыйПроцесс = Ложь;
					Для Каждого ТекPID Из СуществующиеПроцессы1С Цикл
						Если Процессы1СЗапущенныеРанее.Найти(ТекPID) = Неопределено Тогда
							//Значит появился новый процесс
							ЕстьНовыйПроцесс = Истина;
							ЗаписатьЛогВЖРИнформация("НайденНовыйПроцесс",
								ПодставитьПараметрыВСтроку(Локализовать("Найден ранее запущенный процесс 1С: <%1>."), Формат(ТекPID, "ЧГ=; ЧН=0")));
							
							Прервать;
						КонецЕсли;	 
					КонецЦикла;
					
					Если ЕстьНовыйПроцесс Тогда
						Если ЭтоLinux Тогда
							ТекПортСтрока = Формат(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента, "ЧГ=; ЧН=0");
							
							ИмяВременногоФайлаПолный = ПолучитьИмяВременногоФайла("txt");
							СтрокаКоманды = "ss -t -l -p -n  > """ + ИмяВременногоФайлаПолный + """";
							СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИдПроцесса", Формат(ТекPID, "ЧГ=; ЧН=0"));
							ЗаписатьЛогВЖРИнформация("КомандаОпределенияПортаПолныйВывод", СтрокаКоманды);
							КомандаСистемы(СтрокаКоманды);
							Если ФайлСуществуетКомандаСистемы(ИмяВременногоФайлаПолный) Тогда
								Попытка
									Текст = Новый ЧтениеТекста;
									Текст.Открыть(ИмяВременногоФайлаПолный, "UTF-8");
									ТекстФайла = Текст.Прочитать();
									Текст.Закрыть();
									ЗаписатьЛогВЖРИнформация("РезультатКомандыОпределенияПортаПолныйВывод", ТекстФайла);
								Исключение
									ЗаписатьЛогВЖРОшибка("СуществующиеПроцессы1СОпределениеПортаКлиентаТестированияПолныйВывод", ОписаниеОшибки());
								КонецПопытки;
							КонецЕсли;	 
							
							ИмяВременногоФайлаПолный2 = ПолучитьИмяВременногоФайла("txt");
							СтрокаКоманды = "netstat -tulpn | grep '%ИдПроцесса' | grep LISTEN | grep '0.0.0.0'  > """ + ИмяВременногоФайлаПолный2 + """";
							СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИдПроцесса", Формат(ТекPID, "ЧГ=; ЧН=0"));
							ЗаписатьЛогВЖРИнформация("КомандаОпределенияПортаПолныйВывод2", СтрокаКоманды);
							КомандаСистемы(СтрокаКоманды);
							Если ФайлСуществуетКомандаСистемы(ИмяВременногоФайлаПолный2) Тогда
								Попытка
									Текст = Новый ЧтениеТекста;
									Текст.Открыть(ИмяВременногоФайлаПолный2, "UTF-8");
									ТекстФайла = Текст.Прочитать();
									Текст.Закрыть();
									ЗаписатьЛогВЖРИнформация("РезультатКомандыОпределенияПортаПолныйВывод2", ТекстФайла);
								Исключение
									ЗаписатьЛогВЖРОшибка("СуществующиеПроцессы1СОпределениеПортаКлиентаТестированияПолныйВывод2", ОписаниеОшибки());
								КонецПопытки;
							КонецЕсли;	 
							
							ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
							СтрокаКоманды = "ss -t -l -p -n | grep ""pid=%ИдПроцесса,"" | awk '{print $4}' | grep ':' | cut -d "":"" -f 2 | sed -z 's/\n//g' | uniq > """ + ИмяВременногоФайла + """";
							СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИдПроцесса", Формат(ТекPID, "ЧГ=; ЧН=0"));
							ЗаписатьЛогВЖРИнформация("КомандаОпределенияПорта", СтрокаКоманды);
							КомандаСистемы(СтрокаКоманды);
							Если  ФайлСуществуетКомандаСистемы(ИмяВременногоФайла) Тогда
								Попытка
									Текст = Новый ЧтениеТекста;
									Текст.Открыть(ИмяВременногоФайла, "UTF-8");
									ТекстФайла = Текст.Прочитать();
									Текст.Закрыть();
									ЗаписатьЛогВЖРИнформация("РезультатКомандыОпределенияПорта", ТекстФайла);
									
									Если Найти(ТекстФайла, ТекПортСтрока) = 0 ИЛИ ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента <= 1 Тогда
									
										Если Лев(ТекстФайла, 4) = "1560" Тогда
											ТекстФайла = Сред(ТекстФайла, 5); //Стандартный порт
										ИначеЕсли Прав(ТекстФайла, 4) = "1560" Тогда
											ТекстФайла = Лев(ТекстФайла, СтрДлина(ТекстФайла)-4); //Стандартный порт
										КонецЕсли;	 
										Если Лев(ТекстФайла, 4) = "1561" Тогда
											ТекстФайла = Сред(ТекстФайла, 5); //Стандартный порт
										ИначеЕсли Прав(ТекстФайла, 4) = "1561" Тогда
											ТекстФайла = Лев(ТекстФайла, СтрДлина(ТекстФайла)-4); //Стандартный порт
										КонецЕсли;	 
										
										Если ЗначениеЗаполнено(ТекстФайла) Тогда
											РеальныйПорт = Число(СокрЛП(ТекстФайла));
											
											ПортыКоторыеСчиталисьЗанятыми.Вставить(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента, Истина);
											
											ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента = РеальныйПорт;
											
											ТекДанныеКлиентаТестирования = ПолучитьДанныеКлиентаТестирования(ДанныеЗапускаКлиентаТестирования.Имя);
											ТекДанныеКлиентаТестирования.ПортЗапускаТестКлиента = РеальныйПорт;
											
											ТестовоеПриложение = СоздатьТестовоеПриложение(ДанныеЗапускаКлиентаТестирования);
											ОбъектКонтекстСохраняемый.Вставить("ТестовоеПриложение", ТестовоеПриложение);
											
											ЗаписатьЛогВЖРИнформация("ИзмененияПортаКлиентаТестирования", Формат(РеальныйПорт, "ЧГ=; ЧН=0"));
										КонецЕсли;
										
									Иначе
										ЗаписатьЛогВЖРИнформация("ИзмененияПортаКлиентаТестирования", Локализовать("Клиент тестирования запустился на правильном порте."));
									КонецЕсли;	 

									
								Исключение
									ЗаписатьЛогВЖРОшибка("СуществующиеПроцессы1СОпределениеПортаКлиентаТестирования", ОписаниеОшибки());
								КонецПопытки;
								
							КонецЕсли;	 
						КонецЕсли;	 
					КонецЕсли;	 
					
				КонецЕсли;	 
			КонецЕсли;	 
			
		КонецЕсли;	 
		
	КонецЦикла;	
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьГлавноеОкноТестируемого(ТестовоеПриложение)
	ГлавноеОкноТестируемого = Неопределено;
	КлиентсткиеОкнаТестируемогоПриложения = ТестовоеПриложение.ПолучитьПодчиненныеОбъекты();
	Для Каждого ТестируемоеОкно Из КлиентсткиеОкнаТестируемогоПриложения Цикл
		Если ТестируемоеОкно.Основное Тогда
			ГлавноеОкноТестируемого = ТестируемоеОкно;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ГлавноеОкноТестируемого;
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьКонтекстСохраняемыйДляТестовоеПриложение(ТестовоеПриложение, ДанныеЗапускаКлиентаТестирования, ДопПараметры)
	ОбъектКонтекстСохраняемый.Вставить("ТестовоеПриложение", ТестовоеПриложение);
	Если ДанныеЗапускаКлиентаТестирования.ТипКлиента <> "ОбычноеПриложение" Тогда
		ГлавноеОкноТестируемого = ПолучитьГлавноеОкноТестируемого(ТестовоеПриложение);
		ОбъектКонтекстСохраняемый.Вставить("ГлавноеОкноТестируемого", ГлавноеОкноТестируемого);
	Иначе	
		ОбъектКонтекстСохраняемый.Вставить("ГлавноеОкноТестируемого", Неопределено);
	КонецЕсли;	 
	ОбъектКонтекстСохраняемый.Вставить("ТекущийПрофильTestClient", ДанныеЗапускаКлиентаТестирования.Имя);
	Если НЕ ОбъектКонтекстСохраняемый.Свойство("ПодключенныеTestClient") Тогда
		ОбъектКонтекстСохраняемый.Вставить("ПодключенныеTestClient", Новый Массив);
	КонецЕсли;	 
	ПодключенныеTestClient = ОбъектКонтекстСохраняемый.ПодключенныеTestClient;
	
	НужныйИД = Неопределено;
	Для Ккк = 0 По ПодключенныеTestClient.Количество() - 1 Цикл
		Элем = ПодключенныеTestClient[Ккк];
		Если Элем.Имя = ДанныеЗапускаКлиентаТестирования.Имя Тогда
			НужныйИД = Ккк;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	Если НужныйИД <> Неопределено Тогда
		ПодключенныеTestClient.Удалить(НужныйИД);
	КонецЕсли;	 
	
	ДобавитьПодключенныйКлиентТестирования(ДанныеЗапускаКлиентаТестирования.Имя,
		ДанныеЗапускаКлиентаТестирования.Синоним,
		ТестовоеПриложение, ГлавноеОкноТестируемого, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Функция ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующийДляНесколькихКлиентов(
		ДанныеЗапускаКлиентаТестирования, СтрокаОшибки = Неопределено, ДополнительныеПараметры = Неопределено)
	
	ПроисходилЗапускTescClient = Ложь;
	Процессы1СЗапущенныеРанее = Неопределено;
	
	Если НЕ ИдетЗаписьДействийПользователя Тогда
		ЗаписатьЛогВЖРИнформация("ПодключениеКлиентаТестирования", "Имя=" + ДанныеЗапускаКлиентаТестирования.Имя);
	КонецЕсли;	 
	
	Если ПодключитьУжеЗапущенныйTestClient(ДанныеЗапускаКлиентаТестирования) Тогда
		ТекстСообщения = Локализовать(НСтр("ru='Уже открытый TestClient подключен на %1 порту.';en='Already opened TestClient is connected to port %1.'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента);
		Отладка(ТекстСообщения);
		
		Если НЕ ИдетЗаписьДействийПользователя Тогда
			ЗаписатьЛогВЖРИнформация("ПодключенРанееЗапущенныйКлиентТестирования", ТекстСообщения);
		КонецЕсли;	 
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ПодключенУжеСуществующийСеанс", Истина);
		ЗаполнитьPidДескрипторОкнаКлиентаТестирования(ДанныеЗапускаКлиентаТестирования, ДопПараметры);
		
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ЗапускатьКлиентТестирования") Тогда
			Если НЕ ДополнительныеПараметры.ЗапускатьКлиентТестирования Тогда
				ВызватьИсключение ПодставитьПараметрыВСтроку(
					Локализовать (НСтр("ru='Не получилось подключиться к ранее запущенному клиенту тестирования <%1>, порт <%2>.';en='Cannot connect to previously launched test client  <%1>, port <%2>.'")),
					ДанныеЗапускаКлиентаТестирования.Имя,
					ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента
				);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТестовоеПриложение = Неопределено;
	Попытка
		ТестовоеПриложение = СоздатьТестовоеПриложение(ДанныеЗапускаКлиентаТестирования);
	Исключение
		СтрокаОшибки = Локализовать(НСтр("ru='Сеанс должен быть запущен с ключом TESTMANAGER.';en='The session must be launched with the TESTMANAGER key.'"));
		СтрокаОшибки = СтрокаОшибки + ОписаниеОшибки();
		СообщитьПользователю(СтрокаОшибки);
		СообщитьПользователю(Локализовать(НСтр("ru='TestClient НЕ подключен.';en='TestClient is not connected.'")));
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		ЗапуститьКлиентаТестирования(ДанныеЗапускаКлиентаТестирования);
		
		// надо создать ещё один экземпляр - т.к. возможно сменился порт
		ТестовоеПриложение = СоздатьТестовоеПриложение(ДанныеЗапускаКлиентаТестирования);
		
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			ДопПараметры = ДополнительныеПараметры;
		Иначе	
			ДопПараметры = Новый Структура;
		КонецЕсли;	
		ДопПараметры.Вставить("ВыполнениеСценариевБудетОстановлено", Ложь);
		УстановитьКонектСTestClient(ДанныеЗапускаКлиентаТестирования, ТестовоеПриложение, ДопПараметры);
		
		Если ДопПараметры.ВыполнениеСценариевБудетОстановлено Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		Если ДанныеЗапускаКлиентаТестирования.ТипКлиента <> "ОбычноеПриложение" Тогда
			Если НЕ ТестовоеПриложение.ОжидатьОтображениеОбъекта(Тип("ТестируемоеОкноКлиентскогоПриложения"),,, Объект.ТаймаутЗапуска1С) Тогда
				ВызватьИсключение ПодставитьПараметрыВСтроку(
					Локализовать(НСтр("ru='Не дождались отображения окна TestClient. Таймаут <%1>';en='Failed to wait for the TestClient window display. Timeout <%1> '")),
					Объект.ТаймаутЗапуска1С
				);
			КонецЕсли;
		КонецЕсли;	 
		
		НайденДиалогАвторизации = НаЭкранеДиалогАвторизации();
		Если НайденДиалогАвторизации Тогда
			Sleep(10);
		КонецЕсли;
		
		НайденДиалогАвторизации = НаЭкранеДиалогАвторизации();
		Если НайденДиалогАвторизации Тогда
			ВызватьИсключение Локализовать(НСтр("ru='Не удалось авторизоваться в базе.';en='Cannot sign in to the infobase.'"));
		КонецЕсли;
		
		Если Объект.МодальноеОкноПриЗапускеКлиентаТестированияЭтоОшибка Тогда
			НаЭкранеОкноПредупреждения = НаЭкранеОкноПредупреждения();
			Если НаЭкранеОкноПредупреждения Тогда
				ТекстПредупреждения = ПолучитьТекстПредупреждения();
				ВызватьИсключение ПодставитьПараметрыВСтроку(
					Локализовать(НСтр("ru='При подключении TestClient возникло сообщение:';en='A message appeared while connecting TestClient:'")) + Символы.ПС + ТекстПредупреждения
				);
			КонецЕсли;
		КонецЕсли;	 
		
		Если ДанныеЗапускаКлиентаТестирования.ТипКлиента <> "ОбычноеПриложение" Тогда
			Если НЕ ТестовоеПриложение.ОжидатьОтображениеОбъекта(Тип("ТестируемоеОкноКлиентскогоПриложения"),,, Объект.ТаймаутЗапуска1С) Тогда
				ВызватьИсключение ПодставитьПараметрыВСтроку(
				Локализовать(НСтр("ru='Не дождались отображения окна TestClient. Таймаут <%1>';en='Failed to wait for the TestClient window display. Timeout <%1> '")),
				Объект.ТаймаутЗапуска1С
				);
			КонецЕсли;
		КонецЕсли;	 
		
		Если ТекущийTestclientЭтоWebКлиент И Объект.ИспользоватьБраузерПлюсWebSocket И Объект.ИспользоватьКомпонентуVanessaExt Тогда
			ВыполнитьИнициализациюWebSocket();
		КонецЕсли;	 
		
		Отладка(ПодставитьПараметрыВСтроку(
			Локализовать(НСтр("ru='TestClient подключен на %1 порту.';en='TestClient is connected to port %1.'")),
			ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента
			));
		
		ЗаписатьЛогВЖРИнформация("ПодключениеTestClient", ПодставитьПараметрыВСтроку(
			Локализовать(НСтр("ru='порт <%1>';en='port <%1>'")),
			Формат(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента, "ЧГ=; ЧН=0")
			));
		Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл И НЕ Объект.ИспользоватьКомпонентуVanessaExt Тогда
			ЗаписатьЛогВТекстИнформация("ПодключениеTestClient", ПодставитьПараметрыВСтроку(
				Локализовать(НСтр("ru='порт <%1>';en='port <%1>'")),
				Формат(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента, "ЧГ=; ЧН=0")
			));
		КонецЕсли;
		
		Если ТипЗнч(ДопПараметры) <> Тип("Структура") Тогда
			ДопПараметры = Новый Структура;
		КонецЕсли;	
		ЗаполнитьКонтекстСохраняемыйДляТестовоеПриложение(ТестовоеПриложение, ДанныеЗапускаКлиентаТестирования, ДопПараметры);
		
		Если Версия8312ИлиВыше Тогда
			ТестовоеПриложение.УстановитьМаксимальноеВремяВыполненияДействия(Объект.МаксимальноеВремяВыполненияДействия);
		КонецЕсли;	
		
	Исключение
		СообщитьПользователю(ОписаниеОшибки());
		СообщитьПользователю(Локализовать(НСтр("ru='TestClient НЕ подключен.';en='TestClient is not connected.'")));
		СтрокаОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Если Не ОбъектКонтекстСохраняемый.Свойство("ПодключенныеTestClient") Тогда
		ОбъектКонтекстСохраняемый.Вставить("ПодключенныеTestClient", Новый Массив);
	КонецЕсли;
	
	ПодключенныеTestClient = ОбъектКонтекстСохраняемый.ПодключенныеTestClient;
	
	ТестовоеПриложение      = ОбъектКонтекстСохраняемый.ТестовоеПриложение;
	ГлавноеОкноТестируемого = ОбъектКонтекстСохраняемый.ГлавноеОкноТестируемого;
	ИмяTestClient           = ДанныеЗапускаКлиентаТестирования.Имя;
	Синоним                 = ДанныеЗапускаКлиентаТестирования.Синоним;
	
	СохранитьКлиентовТестирования();
	УдалитьИзПолучитьКлиентаТестированияПрофиль(ПодключенныеTestClient, ИмяTestClient);
	
	ДопПараметры = Новый Структура;
	ДобавитьПодключенныйКлиентТестирования(ИмяTestClient, Синоним, ТестовоеПриложение, ГлавноеОкноТестируемого, ДопПараметры);
		
	ОбъектКонтекстСохраняемый.Вставить("ТекущийПрофильTestClient", ИмяTestClient);
	
	ЗаполнитьPidДескрипторОкнаКлиентаТестирования(ДанныеЗапускаКлиентаТестирования);
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура РазвернутьСтрокуДерева(Строка, СвернутьОбласти = Истина)
	ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
	Если СвернутьОбласти И Строка.Тип = "Область" Тогда
		Если Элементы.ДеревоТестов.Развернут(ИдентификаторСтроки) = Истина Тогда
			Элементы.ДеревоТестов.Свернуть(ИдентификаторСтроки);
		КонецЕсли;	 
		Возврат;
	КонецЕсли;	 
	
	Если Элементы.ДеревоТестов.Развернут(ИдентификаторСтроки) = Ложь Тогда
		Элементы.ДеревоТестов.Развернуть(ИдентификаторСтроки);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура СвернутьСтрокуДерева(Строка)
	ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
	Элементы.ДеревоТестов.Свернуть(ИдентификаторСтроки);
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетВоВнутреннемФормате(СтруктураОФ) 
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Дерево = ОбъектСервер.ДеревоТестов;
	
	Возврат ОбъектСервер.ВывестиОтчетТестированияВоВнутреннемФормате(Дерево, СтруктураОФ);
КонецФункции

&НаСервере
Функция МетаданныеИмяСервер()
	ОсновнойОбъект = Объект();
	НайденноеИмя = ОсновнойОбъект.Метаданные().Имя;
	
	Возврат НайденноеИмя;
КонецФункции

&НаКлиенте
Процедура НайтиСтрокуДереваПоИдСтроки(ИдСтроки, СтрокиДерева, Результат)
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		Если Результат <> Неопределено Тогда
			Возврат;
		КонецЕсли;	 

		Если ИдСтроки = СтрокаДерева.ИдСтроки Тогда
			Результат = СтрокаДерева;
			Возврат;
		КонецЕсли;	 
		
		ПодчиненныеЭлементыСтроки = СтрокаДерева.ПолучитьЭлементы();
		НайтиСтрокуДереваПоИдСтроки(ИдСтроки, ПодчиненныеЭлементыСтроки, Результат);
	КонецЦикла;
КонецПроцедуры	

&НаКлиенте
Функция ЭтоПустаяСтрокаТабличногоДокумента(СтрокаТабДок)
	Для каждого Зн Из СтрокаТабДок Цикл
		Если Зн <> "" Тогда
			Возврат Ложь;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Истина;
КонецФункции	

&НаКлиенте
Функция ЭтоПустаяКолонкаТабличногоДокумента(ТабДок, ИдКолонки)
	КолонкаПустая = Истина;
	Для каждого СтрокаТабДок Из ТабДок Цикл
		Если СтрокаТабДок[ИдКолонки] <> "" Тогда
			КолонкаПустая = Ложь;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;

	Возврат КолонкаПустая;
КонецФункции

&НаКлиенте
Процедура УдалитьПустыеСтрокиТабличногоДокумента(ТабДок, УдалитьСтрокиСверху)
	КоличествоСтрок = ТабДок.Количество() - 1;
	Для Ит = 0 По КоличествоСтрок Цикл
		ИдентификаторСтроки = 0;
		Если НЕ УдалитьСтрокиСверху Тогда
			ИдентификаторСтроки = КоличествоСтрок - Ит;
		КонецЕсли;
		СтрокаТабДок = ТабДок[ИдентификаторСтроки];
		Если НЕ ЭтоПустаяСтрокаТабличногоДокумента(СтрокаТабДок) Тогда
			// значит нашли первую не пустую строку
			Прервать;
		КонецЕсли;
		ТабДок.Удалить(ИдентификаторСтроки);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустыеКолонкиТабличногоДокумента(ТабДок, УдалитьКолонкиСлева)
	КолКолонок = ТабДок[0].Количество() - 1;
	Для Ит = 0 По КолКолонок Цикл
		ИдентификаторКолонки = 0;
		Если Не УдалитьКолонкиСлева Тогда
			ИдентификаторКолонки = КолКолонок - Ит;
		КонецЕсли;

		Если НЕ ЭтоПустаяКолонкаТабличногоДокумента(ТабДок, ИдентификаторКолонки) Тогда
			Прервать;
		КонецЕсли;	 

		Для каждого СтрокаТабДок Из ТабДок Цикл
			СтрокаТабДок.Удалить(ИдентификаторКолонки);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УбратьПустыеСтрокиИКолонкиСКраёвМакета(ТабДок, УдалятьСтрокиСверху = Истина, УдалятьКолонкиСлева = Истина)
	Если ТабДок.Количество() = 0 ИЛИ ТабДок[0].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	

	Если УдалятьСтрокиСверху Тогда
		// пустые строки сверху
		УдалитьПустыеСтрокиТабличногоДокумента(ТабДок, Истина);
	КонецЕсли;	 
	
	// пустые строки снизу
	УдалитьПустыеСтрокиТабличногоДокумента(ТабДок, Ложь);
	
	Если ТабДок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	 

	Если УдалятьКолонкиСлева Тогда
		// пустые колонки слева
		УдалитьПустыеКолонкиТабличногоДокумента(ТабДок, Истина);
	КонецЕсли;	 
	
	// пустые колонки справа
	УдалитьПустыеКолонкиТабличногоДокумента(ТабДок, Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьПлатформаКорректноОпределяетРазмерМакетаВТонкомКлиенте()
	Если НЕ Версия8315ИлиВыше Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Если Версия8315ИлиВыше И НЕ Версия8316ИлиВыше Тогда
		//Значит мы в 8.3.15
		Возврат ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.15.2122");
	ИначеЕсли Версия8316ИлиВыше И НЕ Версия8317ИлиВыше Тогда
		//Значит мы в 8.3.16
		Возврат ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.16.1831");
	ИначеЕсли Версия8317ИлиВыше И НЕ Версия8318ИлиВыше Тогда
		//Значит мы в 8.3.17
		Возврат ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.17.1886");
	ИначеЕсли Версия8318ИлиВыше И НЕ Версия8319ИлиВыше Тогда
		//Значит мы в 8.3.18
		Возврат ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.18.1243");
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции	 

// считывает табличный документ из TestClient по ячейке
// убирает пустые области по краям макета, если они есть, т.к.
// предполагается, что считанные данные будут испльзованы в шагах, которые в качестве параметра получают таблицу Gherkin
// и пустые области убираются, чтобы улучшить читаемость сценария и не заграмождать его текстом вида
// | ''               | '' | '' | '' | '' |
// | ''               | '' | '' | '' | '' |
// | 'Полезная часть' | '' | '' | '' | '' |
//
&НаКлиенте
Функция МакетTestClientПоЯчейкеКакМассив(ЭлементФормы, ДопПараметры = Неопределено)
	НадоСчитатьОбласть = Ложь;
	Если ДопПараметры <> Неопределено И ДопПараметры.Свойство("НадоСчитатьОбласть") Тогда
		НадоСчитатьОбласть = ДопПараметры.НадоСчитатьОбласть;
	КонецЕсли;	 
	
	РазмерОбластиДанныхДокументаПоВертикали   = Неопределено;
	РазмерОбластиДанныхДокументаПоГоризонтали = Неопределено;
	Если ПлатформаКорректноОпределяетРазмерМакетаВТонкомКлиенте = Неопределено Тогда
		ПлатформаКорректноОпределяетРазмерМакетаВТонкомКлиенте = ОпределитьПлатформаКорректноОпределяетРазмерМакетаВТонкомКлиенте();
	КонецЕсли;	 
	
	ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти = Истина;
	Если ТекущийTestclientЭтоWebКлиент Тогда
		Если Версия8312ИлиВыше И НЕ Версия8313ИлиВыше Тогда
			ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти = Ложь;
		КонецЕсли;	 	
		
		Если Версия8313ИлиВыше Тогда
			ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти = Ложь;
			РазмерОбластиДанныхДокументаПоВертикали   = ЭлементФормы.ПолучитьРазмерОбластиДанныхДокументаПоВертикали();
			РазмерОбластиДанныхДокументаПоГоризонтали = ЭлементФормы.ПолучитьРазмерОбластиДанныхДокументаПоГоризонтали();
		КонецЕсли;	 
	Иначе	
		Если ПлатформаКорректноОпределяетРазмерМакетаВТонкомКлиенте Тогда
			РазмерОбластиДанныхДокументаПоВертикали   = ЭлементФормы.ПолучитьРазмерОбластиДанныхДокументаПоВертикали();
			РазмерОбластиДанныхДокументаПоГоризонтали = ЭлементФормы.ПолучитьРазмерОбластиДанныхДокументаПоГоризонтали();
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТабДок        = Новый Массив();
	СчетчикСтрок  = 0;
	ШиринаТаблицы = Неопределено;
	Пока Истина Цикл
		СчетчикСтрок = СчетчикСтрок + 1;
		
		Если НадоСчитатьОбласть Тогда
			Если СчетчикСтрок < ДопПараметры.НачСтр Тогда
				Продолжить;
			КонецЕсли;	 
			
			Если СчетчикСтрок > ДопПараметры.НачСтр + ДопПараметры.КолСтр - 1 Тогда
				Прервать;
			КонецЕсли;	 
		КонецЕсли;	 

		Если (ТекущийTestclientЭтоWebКлиент И Версия8313ИлиВыше) ИЛИ (РазмерОбластиДанныхДокументаПоВертикали <> Неопределено И ПлатформаКорректноОпределяетРазмерМакетаВТонкомКлиенте) Тогда
			Если СчетчикСтрок > РазмерОбластиДанныхДокументаПоВертикали Тогда
				Прервать;
			КонецЕсли;	 
		ИначеЕсли ТекущийTestclientЭтоWebКлиент И ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти Тогда
			
			Адрес = СформироватьАдресЯчейки(СчетчикСтрок, 1);
			АдресТекущейОбласти = Неопределено;
			Если НЕ ПерейтиВТабДокTestClientКЯчейке(ЭлементФормы, АдресТекущейОбласти, Адрес) Тогда
				Прервать;
			КонецЕсли;	 
		Иначе
			// надо читать макет по установленным границам чтения
			
			Если СчетчикСтрок < СчитываниеМакетаНачСтр Тогда
				Продолжить;
			КонецЕсли;	 
			
			Если СчетчикСтрок > (СчитываниеМакетаНачСтр + СчитываниеМакетаКолСтр - 1) Тогда
				Прервать;
			КонецЕсли;	 
			
		КонецЕсли;	 
		
		СтрокаТабДок = Новый Массив;
		СчетчикКолонок = 0;
		Пока Истина Цикл
			СчетчикКолонок = СчетчикКолонок + 1;
			
			Если НадоСчитатьОбласть Тогда
				Если СчетчикКолонок < ДопПараметры.НачКол Тогда
					Продолжить;
				КонецЕсли;	 
				
				Если СчетчикКолонок > ДопПараметры.НачКол + ДопПараметры.КолКол - 1 Тогда
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если (ТекущийTestclientЭтоWebКлиент И Версия8313ИлиВыше) ИЛИ (РазмерОбластиДанныхДокументаПоГоризонтали <> Неопределено И ПлатформаКорректноОпределяетРазмерМакетаВТонкомКлиенте) Тогда
				Если СчетчикКолонок > РазмерОбластиДанныхДокументаПоГоризонтали Тогда
					Прервать;
				КонецЕсли;	 
			ИначеЕсли НЕ ТекущийTestclientЭтоWebКлиент Или (ТекущийTestclientЭтоWebКлиент И Не ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти) Тогда
				Если СчетчикКолонок < СчитываниеМакетаНачКол Тогда
					Продолжить;
				КонецЕсли;	 
				
				Если СчетчикКолонок > (СчитываниеМакетаНачКол + СчитываниеМакетаКолКол - 1) Тогда
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если ШиринаТаблицы <> Неопределено Тогда
				Если СчетчикКолонок > ШиринаТаблицы Тогда
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Адрес = СформироватьАдресЯчейки(СчетчикСтрок, СчетчикКолонок);
			
			Значение = ЭлементФормы.ПолучитьТекстОбласти(Адрес);
			Значение = СтрЗаменить(Значение, Символы.ПС, "\n");
			
			// Проверим, что у нас получилось установить область
			// если не получилось, значит мы пытаемся выйти за границу макета
			Если НЕ Версия8313ИлиВыше И ШиринаТаблицы = Неопределено 
					И ТекущийTestclientЭтоWebКлиент И ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти Тогда
				АдресТекущейОбласти = Неопределено;
				Если НЕ ПерейтиВТабДокTestClientКЯчейке(ЭлементФормы, АдресТекущейОбласти, Адрес) Тогда
					ШиринаТаблицы = СчетчикКолонок - 1;
					Прервать;
				КонецЕсли;
			КонецЕсли;	 
			
			СтрокаТабДок.Добавить(Значение);
		КонецЦикла;
		
		ТабДок.Добавить(СтрокаТабДок);
	КонецЦикла;
	
	УдалятьПустыеСтрокиИзМакета = Истина;
	Если ДопПараметры <> Неопределено И ДопПараметры.Свойство("УдалятьПустыеСтрокиИзМакета") Тогда
		УдалятьПустыеСтрокиИзМакета = ДопПараметры.УдалятьПустыеСтрокиИзМакета;
	КонецЕсли;	 
	
	Если УдалятьПустыеСтрокиИзМакета Тогда
		УбратьПустыеСтрокиИКолонкиСКраёвМакета(ТабДок);
	КонецЕсли;	 
	
	Возврат ТабДок;
КонецФункции	

&НаСервереБезКонтекста
Функция ПреобразоватьТабличныйДокументВМассив(Знач Макет, Знач ДопПараметры)
	
	НадоСчитатьОбласть = Ложь;
	Если ДопПараметры <> Неопределено Тогда
		Если ДопПараметры.Свойство("НадоСчитатьОбласть") Тогда
			НадоСчитатьОбласть = ДопПараметры.НадоСчитатьОбласть;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТабДок = Новый Массив();
	Для Стр = 1 По Макет.ВысотаТаблицы Цикл
		
		Если НадоСчитатьОбласть Тогда
			Если Стр < ДопПараметры.НачСтр Тогда
				Продолжить;
			КонецЕсли;	 
			
			Если Стр > ДопПараметры.НачСтр + ДопПараметры.КолСтр - 1 Тогда
				Прервать;
			КонецЕсли;	 
		КонецЕсли;	 
		
		СтрокаТабДок = Новый Массив;
		Для Кол = 1 По Макет.ШиринаТаблицы Цикл
			
			Если НадоСчитатьОбласть Тогда
				Если Кол < ДопПараметры.НачКол Тогда
					Продолжить;
				КонецЕсли;	 
				
				Если Кол > ДопПараметры.НачКол + ДопПараметры.КолКол - 1 Тогда
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 

			Значение = Макет.Область(Стр, Кол, Стр, Кол).Текст;
			Значение = СтрЗаменить(Значение, Символы.ПС, "\n");
			
			СтрокаТабДок.Добавить(Значение);
		КонецЦикла;
		
		ТабДок.Добавить(СтрокаТабДок);
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции	 

&НаСервереБезКонтекста
Функция ПреобразоватьФайлМакетаВМассивСервер(Знач ДанныеМакета, Знач ДопПараметры)

	Если ТипЗнч(ДанныеМакета) = Тип("ДвоичныеДанные") Тогда
		
		Попытка
			
			ТД = ТабличныйДокументИзДвоичныхДанныхПоток(ДанныеМакета);
			
		Исключение
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");
			
			ДанныеМакета.Записать(ИмяВременногоФайла);
			
			ТД = ПрочитатьФайлВТабличныйДокументНаСервере(ИмяВременногоФайла);
			
			Попытка
				УдалитьФайлы(ИмяВременногоФайла);
			Исключение
			КонецПопытки;
		КонецПопытки;
		
		Возврат ПреобразоватьТабличныйДокументВМассив(ТД, ДопПараметры); 
	Иначе
		Возврат ПреобразоватьТабличныйДокументВМассив(ДанныеМакета, ДопПараметры); 
	КонецЕсли;	 
	
КонецФункции	

&НаКлиенте
Функция ПерейтиВТабДокTestClientКЯчейке(ЭлементФормы, АдресТекущейОбласти, Адрес)
	Если АдресТекущейОбласти = Неопределено Тогда
		ЭлементФормы.УстановитьТекущуюОбласть(Адрес);
		АдресТекущейОбласти = ЭлементФормы.ПолучитьАдресТекущейОбласти();
	КонецЕсли;	 
	
	Если Лев(НРег(АдресТекущейОбласти), 1) = "r" Тогда
		НачСтр1 = -1;
		НачКол1 = -1;
		КолСтр1 = -1;
		КолКол1 = -1;
		ПолучитьПараметрыОбластиМакета(АдресТекущейОбласти, НачСтр1, НачКол1, КолСтр1, КолКол1);
		
		НачСтр2 = -1;
		НачКол2 = -1;
		КолСтр2 = -1;
		КолКол2 = -1;
		ПолучитьПараметрыОбластиМакета(Адрес, НачСтр2, НачКол2, КолСтр2, КолКол2);
		Если НачСтр1 > НачСтр2 Тогда
			Возврат Ложь; // значит АдресТекущейОбласти не находится внутри Адрес
		КонецЕсли;	 
		Если НачКол1 > НачКол2 Тогда
			Возврат Ложь; // значит АдресТекущейОбласти не находится внутри Адрес
		КонецЕсли;	 
		Если КолСтр1 < КолСтр2 Тогда
			Возврат Ложь; // значит АдресТекущейОбласти не находится внутри Адрес
		КонецЕсли;	 
		Если КолКол1 < КолКол2 Тогда
			Возврат Ложь; // значит АдресТекущейОбласти не находится внутри Адрес
		КонецЕсли;	 

	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	

&НаКлиенте
Функция СформироватьАдресЯчейки(НомерСтроки, НомерКолонки)
	Возврат "R" + Формат(НомерСтроки, "ЧГ=; ЧН=0") + "C" + Формат(НомерКолонки, "ЧГ=; ЧН=0"); 
КонецФункции	

&НаСервереБезКонтекста
Функция МакетИзТекстаXML(Знач Строка)
	
    ЧтениеXML = Новый ЧтениеXML;
    ЧтениеXML.УстановитьСтроку(Строка);
    ЧтениеXML.Прочитать();
	
	Результат = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	Если ТипЗнч(Результат) = Тип("ДвоичныеДанные") Тогда
		Поток = Результат.ОткрытьПотокДляЧтения();
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(Поток);
		Поток.Закрыть();
	Иначе	
		ТабДок = Результат;
	КонецЕсли;	
	
    Возврат ТабДок;
	
КонецФункции	 

&НаКлиенте
Функция ТабличныйДокументИзКлиентаТестированияЧерезРасширение(ЭлементФормы, ДопПараметры = Неопределено)
	АктивноеОкно = ПолучитьАктивноеОкноИзТестовоеПриложение();
	ЗаголовокАктивногоОкна = АктивноеОкно.Заголовок;
	
	ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_ПолучениеМакета");
	
	РеквизитВыражениеВычислено = НайтиРеквизитОткрытойФормыПоЗаголовку("ВыражениеВычислено", Истина);
	РеквизитЗначениеИмяЭлементаФормы = НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеИмяЭлементаФормы", Истина);
	РеквизитЗначениеИмяЭлементаФормы.ВвестиТекст(ЭлементФормы.Имя);
	РеквизитЗначениеРезультат = НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеРезультат", Истина);
	РеквизитЗначениеЗаголовокОкна = НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеЗаголовокОкна", Истина);
	РеквизитЗначениеЗаголовокОкна.ВвестиТекст(ЗаголовокАктивногоОкна);
	
	АктивноеОкно = ПолучитьАктивноеОкноИзТестовоеПриложение();
	КнопкаПолучитьЗначениеМакета = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ПолучитьЗначениеМакета");
	КнопкаПолучитьЗначениеМакета.Нажать();
	
	БылаОшибка = Истина;
	ОжиданиеОкончанияОбработки(БылаОшибка, РеквизитВыражениеВычислено);
	Если БылаОшибка Тогда
		СтрокаСообщения = Локализовать("Не получилось выполнить выражение в контексте текущей формы клиента тестирования.");
		ВызватьИсключение СтрокаСообщения;
	КонецЕсли;
	
	ПредставлениеДанных = ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитЗначениеРезультат);
	
	КнопкаВыполнитьЗакрыть = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ЗакрытьФорму");
	КнопкаВыполнитьЗакрыть.Нажать();
	
	НадоСчитатьОбласть = Ложь;
	Если ДопПараметры <> Неопределено Тогда
		Если ДопПараметры.Свойство("НадоСчитатьОбласть") Тогда
			НадоСчитатьОбласть = ДопПараметры.НадоСчитатьОбласть;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если НадоСчитатьОбласть Тогда
		Возврат ОставитьЧастьМакетаСогласноПараметровЧтенияМакета(МакетИзТекстаXML(ПредставлениеДанных), ДопПараметры.НачСтр, 
			ДопПараметры.НачКол, ДопПараметры.КолСтр, ДопПараметры.КолКол);
	Иначе	
		Возврат МакетИзТекстаXML(ПредставлениеДанных);
	КонецЕсли;	 
	
КонецФункции	 

&НаКлиенте
Функция ТабличныйДокументTestClientПоЯчейкам(ЭлементФормы, ДопПараметры = Неопределено)
	НадоСчитатьОбласть = Ложь;
	СмещениеСтрок  = 0;
	СмещениеКолонок = 0;
	
	ПолучатьИменаОбластей = Ложь;
	Если ДопПараметры <> Неопределено Тогда
		ДопПараметры.Вставить("СчитываниеПоЯчейкам", Истина);
		Если ДопПараметры.Свойство("ПолучатьИменаОбластей") Тогда
			ПолучатьИменаОбластей = ДопПараметры.ПолучатьИменаОбластей;
		КонецЕсли;	 
		Если ДопПараметры.Свойство("НадоСчитатьОбласть") Тогда
			НадоСчитатьОбласть = ДопПараметры.НадоСчитатьОбласть;
			СмещениеСтрок      = ДопПараметры.НачСтр - 1;
			СмещениеКолонок    = ДопПараметры.НачКол - 1;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ШиринаТаблицы = Неопределено;
	Если ПлатформаКорректноОпределяетРазмерМакетаВТонкомКлиенте = Неопределено Тогда
		ПлатформаКорректноОпределяетРазмерМакетаВТонкомКлиенте = ОпределитьПлатформаКорректноОпределяетРазмерМакетаВТонкомКлиенте();
	КонецЕсли;	 
	
	РазмерОбластиДанныхДокументаПоВертикали   = Неопределено;
	РазмерОбластиДанныхДокументаПоГоризонтали = Неопределено;
	
	ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти = Истина;
	Если ТекущийTestclientЭтоWebКлиент Тогда
		Если Версия8312ИлиВыше И НЕ Версия8313ИлиВыше Тогда
			ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти = Ложь;
		КонецЕсли;	 
		
		Если Версия8313ИлиВыше Тогда
			ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти = Ложь;
			РазмерОбластиДанныхДокументаПоВертикали   = ЭлементФормы.ПолучитьРазмерОбластиДанныхДокументаПоВертикали();
			РазмерОбластиДанныхДокументаПоГоризонтали = ЭлементФормы.ПолучитьРазмерОбластиДанныхДокументаПоГоризонтали();
		КонецЕсли;	 
	Иначе	
		Если ПлатформаКорректноОпределяетРазмерМакетаВТонкомКлиенте Тогда
			РазмерОбластиДанныхДокументаПоВертикали   = ЭлементФормы.ПолучитьРазмерОбластиДанныхДокументаПоВертикали();
			РазмерОбластиДанныхДокументаПоГоризонтали = ЭлементФормы.ПолучитьРазмерОбластиДанныхДокументаПоГоризонтали();
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТабДок = Новый ТабличныйДокумент;
	СчетчикСтрок = 0;
	Пока Истина Цикл
		СчетчикСтрок = СчетчикСтрок + 1;
		
		Если НадоСчитатьОбласть Тогда
			Если СчетчикСтрок < ДопПараметры.НачСтр Тогда
				Продолжить;
			КонецЕсли;	 
			Если СчетчикСтрок > ДопПараметры.НачСтр + ДопПараметры.КолСтр - 1 Тогда
				Прервать;
			КонецЕсли;	 
		КонецЕсли;	 
			
		Если (ТекущийTestclientЭтоWebКлиент И Версия8313ИлиВыше) ИЛИ (РазмерОбластиДанныхДокументаПоВертикали <> Неопределено И ПлатформаКорректноОпределяетРазмерМакетаВТонкомКлиенте) Тогда
			Если СчетчикСтрок > РазмерОбластиДанныхДокументаПоВертикали Тогда
				Прервать;
			КонецЕсли;	 
		ИначеЕсли ТекущийTestclientЭтоWebКлиент И ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти Тогда
			// проверим, что мы можем перейти на новую строку
			Адрес = СформироватьАдресЯчейки(СчетчикСтрок, 1);
			АдресТекущейОбласти = Неопределено;
			Если НЕ ПерейтиВТабДокTestClientКЯчейке(ЭлементФормы, АдресТекущейОбласти, Адрес) Тогда
				Прервать;
			КонецЕсли;	 
		Иначе
			// надо читать макет по установленным границам чтения
			
			Если СчетчикСтрок < СчитываниеМакетаНачСтр Тогда
				Продолжить;
			КонецЕсли;	 
			
			Если СчетчикСтрок > (СчитываниеМакетаНачСтр + СчитываниеМакетаКолСтр - 1) Тогда
				Прервать;
			КонецЕсли;	 
			
		КонецЕсли;	 
		
		СтрокаТабДок = Новый Массив;
		СчетчикКолонок = 0;
		Пока Истина Цикл
			СчетчикКолонок = СчетчикКолонок + 1;
			
			Если (ТекущийTestclientЭтоWebКлиент И Версия8313ИлиВыше) ИЛИ (РазмерОбластиДанныхДокументаПоГоризонтали <> Неопределено И ПлатформаКорректноОпределяетРазмерМакетаВТонкомКлиенте) Тогда
				Если СчетчикКолонок > РазмерОбластиДанныхДокументаПоГоризонтали Тогда
					Прервать;
				КонецЕсли;	 
			ИначеЕсли НЕ ТекущийTestclientЭтоWebКлиент Или (ТекущийTestclientЭтоWebКлиент И Не ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти) Тогда
				Если СчетчикКолонок < СчитываниеМакетаНачКол Тогда
					Продолжить;
				КонецЕсли;	 
				
				Если СчетчикКолонок > (СчитываниеМакетаНачКол + СчитываниеМакетаКолКол - 1) Тогда
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если НадоСчитатьОбласть Тогда
				Если СчетчикКолонок < ДопПараметры.НачКол Тогда
					Продолжить;
				КонецЕсли;	 
				Если СчетчикКолонок > ДопПараметры.НачКол + ДопПараметры.КолКол - 1 Тогда
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если ШиринаТаблицы <> Неопределено Тогда
				Если СчетчикКолонок > ШиринаТаблицы Тогда
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Адрес    = СформироватьАдресЯчейки(СчетчикСтрок, СчетчикКолонок);
			Значение = ЭлементФормы.ПолучитьТекстОбласти(Адрес);
						
			ТекОбласть = ТабДок.Область(СчетчикСтрок - СмещениеСтрок, СчетчикКолонок - СмещениеКолонок, 
				СчетчикСтрок - СмещениеСтрок, СчетчикКолонок - СмещениеКолонок);
			ТекОбласть.Текст = Значение;
			
			АдресТекущейОбласти = Неопределено;
			Если ПолучатьИменаОбластей Тогда
				ЭлементФормы.УстановитьТекущуюОбласть(Адрес);
				АдресТекущейОбласти = ЭлементФормы.ПолучитьАдресТекущейОбласти();
				Если Лев(НРег(АдресТекущейОбласти), 1) <> "r" Тогда
					ТекОбласть.Имя = АдресТекущейОбласти;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если НЕ Версия8313ИлиВыше И ШиринаТаблицы = Неопределено Тогда
				// Проверим, что у нас получилось установить область
				// если не получилось, значит мы пытаемся выйти за границу макета
				Если ТекущийTestclientЭтоWebКлиент И ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти Тогда
					Если НЕ ПерейтиВТабДокTestClientКЯчейке(ЭлементФормы, АдресТекущейОбласти, Адрес) Тогда
						ШиринаТаблицы = СчетчикКолонок - 1;
						Прервать;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТабДок;
КонецФункции	

&НаСервереБезКонтекста
Функция ТабличныйДокументИзДвоичныхДанных(Знач ФайлМакета)
	
	Попытка
		ТД = ТабличныйДокументИзДвоичныхДанныхПоток(ФайлМакета);
	Исключение
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");
		
		ФайлМакета.Записать(ИмяВременногоФайла);
		
		ТД = ПрочитатьФайлВТабличныйДокументНаСервере(ИмяВременногоФайла);
		
		Попытка
			УдалитьФайлы(ИмяВременногоФайла);
		Исключение
		КонецПопытки;
	КонецПопытки;
	
	Возврат ТД;
	
КонецФункции	

&НаСервереБезКонтекста
Функция СкопироватьТабличныйДокументСервер(Знач ТД)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");
	ТД.Записать(ИмяВременногоФайла);
	
	Результат = ПрочитатьФайлВТабличныйДокументНаСервере(ИмяВременногоФайла);

	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции	 

&НаСервереБезКонтекста
Функция ОставитьЧастьМакетаСогласноПараметровЧтенияМакета(Знач ДанныеМакета, Знач СчитываниеМакетаНачСтр, 
		Знач СчитываниеМакетаНачКол, Знач СчитываниеМакетаКолСтр, Знач СчитываниеМакетаКолКол)
		
	ИмяВременногоФайла = Неопределено;
	Если ТипЗнч(ДанныеМакета) = Тип("ТабличныйДокумент") Тогда
		ТД = ДанныеМакета;
	Иначе
		
		Попытка
			ТД = ТабличныйДокументИзДвоичныхДанныхПоток(ДанныеМакета);
		Исключение
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");
			ДанныеМакета.Записать(ИмяВременногоФайла);
			ТД = ПрочитатьФайлВТабличныйДокументНаСервере(ИмяВременногоФайла);
		КонецПопытки;
		
	КонецЕсли;	 
	
	Если СчитываниеМакетаНачСтр = 1 И СчитываниеМакетаНачКол = 1
			И СчитываниеМакетаКолСтр >= ТД.ВысотаТаблицы
			И СчитываниеМакетаКолКол >= ТД.ШиринаТаблицы Тогда
			// Значит можно сразу вернуть макет
		Если ИмяВременногоФайла <> Неопределено Тогда
			Попытка
				УдалитьФайлы(ИмяВременногоФайла);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		Возврат ТД;
		
	КонецЕсли;	 
	
	// Если оказались тут, значит надо считать только область в макете
	
	ТабДок = Новый ТабличныйДокумент;
	СчетчикСтрок = 0;
	Для Стр = СчитываниеМакетаНачСтр По СчитываниеМакетаНачСтр + СчитываниеМакетаКолСтр - 1 Цикл
		СчетчикСтрок = СчетчикСтрок + 1;
		
		СчетчикКолонок = 0;
		Для Кол = СчитываниеМакетаНачКол По СчитываниеМакетаНачКол + СчитываниеМакетаКолКол - 1 Цикл
			СчетчикКолонок = СчетчикКолонок + 1;
			
			Значение = ТД.Область(Стр, Кол, Стр, Кол).Текст;
			Значение = СтрЗаменить(Значение, Символы.ПС, "\n");
			
			ТабДок.Область(СчетчикСтрок, СчетчикКолонок, СчетчикСтрок, СчетчикКолонок).Текст = Значение;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ИмяВременногоФайла <> Неопределено Тогда
		УдалитьФайлы(ИмяВременногоФайла);
	КонецЕсли;	 
	
	Возврат ТабДок;
КонецФункции	

&НаКлиенте
Функция ПолучитьСостояниеЭлементаФормыTestClient(ЭлементФормы, ДопПараметры)
	СтруктураЗначения = Новый Структура;
	СтруктураЗначения.Вставить("Тип", ТипЗнч(ЭлементФормы));
	СтруктураЗначения.Вставить("Имя", ЭлементФормы.Имя);
	
	Если ТипЗнч(ЭлементФормы) = Тип("ТестируемаяКнопкаФормы") Тогда
		СтруктураЗначения.Вставить("Имя", ЭлементФормы.Имя);
		СтруктураЗначения.Вставить("ТекстЗаголовка", ЭлементФормы.ТекстЗаголовка);
		СтруктураЗначения.Вставить("Вид", ЭлементФормы.Вид);
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТестируемаяТаблицаФормы") Тогда
		СтруктураЗначения.Вставить("Имя", ЭлементФормы.Имя);
		СтруктураЗначения.Вставить("ТекстЗаголовка", ЭлементФормы.ТекстЗаголовка);
		
		Попытка
			ЗначениеТЧ = ПолучитьЗначениеТестируемаяТаблицаФормы(ЭлементФормы, ДопПараметры);
		Исключение
			ЗначениеТЧ = Неопределено;
		КонецПопытки;
		
		СтруктураЗначения.Вставить("ЗначениеТЧ", ЗначениеТЧ);
		
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТестируемаяГруппаФормы") Тогда
		СтруктураЗначения.Вставить("Имя", ЭлементФормы.Имя);
		СтруктураЗначения.Вставить("ТекстЗаголовка", ЭлементФормы.ТекстЗаголовка);
		СтруктураЗначения.Вставить("Вид", ЭлементФормы.Вид);
		Если ЭлементФормы.Вид = ВидГруппыФормы.Страницы Тогда
			Попытка
				СтруктураЗначения.Вставить("ТекущаяСтраницаИмя", ЭлементФормы.ПолучитьТекущуюСтраницу().Имя);
			Исключение
			КонецПопытки;
		КонецЕсли;	
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТестируемоеПолеФормы") Тогда
		СтруктураЗначения.Вставить("Имя", ЭлементФормы.Имя);
		СтруктураЗначения.Вставить("ТекстЗаголовка", ЭлементФормы.ТекстЗаголовка);
		Если ЭлементФормы.Вид <> ВидПоляФормы.ПолеТабличногоДокумента Тогда
			СтруктураЗначения.Вставить("ПредставлениеДанных", ЭлементФормы.ТекстЗаголовка);
		КонецЕсли;	 
		СтруктураЗначения.Вставить("Вид", ЭлементФормы.Вид);
		
		Попытка
			СтруктураЗначения.Вставить("ТекстРедактирования", ЭлементФормы.ПолучитьТекстРедактирования());
		Исключение
		КонецПопытки;
		
		Если ЭлементФормы.Вид = ВидПоляФормы.ПолеТабличногоДокумента Тогда
			Попытка
				Если ЭлементФормы.Имя = "" Или ЭлементФормы.ТекущаяДоступность() Тогда
					// Если табличный документ был открыт как отдельное окно как ТабДок.Показать(), тогда у него не работает
					// ТекущаяДоступность() (проверено в 8.3.10)
					ТабДок = ПолучитьТабДокИзTestClientКакМассив(ЭлементФормы);
					СтруктураЗначения.Вставить("ТабДок", ТабДок);
				КонецЕсли;	 
			Исключение
				СообщитьПользователю (ПодставитьПараметрыВСтроку(
					Локализовать("Не вышло получить значение табличного документа <%1>"),
					ЭлементФормы.Имя
				));
				СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		ИначеЕсли Версия8325ИлиВыше И
			(ЭлементФормы.Вид = ВидПоляФормы.ПолеФорматированногоДокумента ИЛИ ЭлементФормы.Вид = ВидПоляФормы.ПолеHTMLДокумента) Тогда
			
			СтруктураЗначения.Вставить("ПредставлениеДанных", ПолучитьПредставлениеПоляHTML(ЭлементФормы));

		ИначеЕсли ИгнорируемыеВидыЭлементовФорм.Найти(ЭлементФормы.Вид) = Неопределено Тогда
			// для остальных надо сохранить представление данных
			Попытка
				СтруктураЗначения.Вставить("ПредставлениеДанных", ЭлементФормы.ПолучитьПредставлениеДанных());
			Исключение
				
			КонецПопытки;
		КонецЕсли;	 
		
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТестируемаяДекорацияФормы") Тогда
		СтруктураЗначения.Вставить("Имя", ЭлементФормы.Имя);
		СтруктураЗначения.Вставить("ТекстЗаголовка", ЭлементФормы.ТекстЗаголовка);
		СтруктураЗначения.Вставить("ПредставлениеДанных", ЭлементФормы.ТекстЗаголовка);
		СтруктураЗначения.Вставить("Вид", ЭлементФормы.Вид);
	КонецЕсли;	 
	
	Попытка
		СтруктураЗначения.Вставить("ТекущаяВидимость", ЭлементФормы.ТекущаяВидимость());
		СтруктураЗначения.Вставить("ТекущаяДоступность", ЭлементФормы.ТекущаяДоступность());
	Исключение
	КонецПопытки;
	
	Возврат СтруктураЗначения;
КонецФункции	

&НаКлиенте
Процедура ДобавитьЭлементыКолонкиТаблицы(ТаблицыФормы, МассивКолонокТаблиц)
	МассивЭлементовТаблицы = ТаблицыФормы.НайтиОбъекты();
	Для Каждого ЭлементТаблицы Из МассивЭлементовТаблицы Цикл
		МассивКолонокТаблиц.Добавить(ЭлементТаблицы.Имя);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСостояниеФормыTestClient(ДопПараметры)
	ТолькоАктивныйЭлемент = Ложь;
	Если ДопПараметры.Свойство("ТолькоАктивныйЭлемент") Тогда
		ТолькоАктивныйЭлемент = ДопПараметры.ТолькоАктивныйЭлемент;
	КонецЕсли;	 

	Результат       = Новый Структура;
	МассивРезультат = Новый Массив;
	
	Если ТипЗнч(ОбъектКонтекстСохраняемый) <> Тип("Структура") Тогда
		СообщитьПользователю(Локализовать("TestClient НЕ подключен."));
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если Не ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		СообщитьПользователю(Локализовать("TestClient НЕ подключен."));
		Возврат Неопределено;
	КонецЕсли;	 
		
	Попытка
		// попробуем найти окно предупреждения
		АктивноеОкно = НайтиОкноМодальногоДиалога();
		Если АктивноеОкно = Неопределено Тогда
			АктивноеОкно = ОбъектКонтекстСохраняемый.ТестовоеПриложение.ПолучитьАктивноеОкно();
		КонецЕсли;	 
		
		ТекущаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
		Если ТекущаяФорма = Неопределено Тогда
			СообщитьПользователю(Локализовать("Активная форма не найдена"));
			Возврат Неопределено;
		КонецЕсли;	 
		
		ДопПараметры.Вставить("ТекущаяФорма", ТекущаяФорма);
		
		АктивныйЭлемент = Неопределено;
		Если ТолькоАктивныйЭлемент Тогда
			Если ТекущаяФорма.ИмяФормы = "" Тогда
				// скорее всего это форма, полученная через ТабДок.Показать()
				МассивЭлементов = ТекущаяФорма.НайтиОбъекты();
				Если МассивЭлементов.Количество() > 0 Тогда
					АктивныйЭлемент = МассивЭлементов[0];
				Иначе
					Возврат Неопределено;
				КонецЕсли;	 
			Иначе	
				АктивныйЭлемент = ТекущаяФорма.ПолучитьТекущийЭлемент();
			КонецЕсли;	 
			
		КонецЕсли;	 
		
		Отладка(ПодставитьПараметрыВСтроку(
			Локализовать("Найдена форма: ТекстЗаголовка=%1, ИмяФормы=%2. Окно <%3>"),
			ТекущаяФорма.ТекстЗаголовка,
			ТекущаяФорма.ИмяФормы,
			АктивноеОкно.Заголовок
		));
	Исключение

		СообщитьПользователю(ПодставитьПараметрыВСтроку(
			Локализовать("ПолучитьСостояниеФормыTestClient:%1"),
			ОписаниеОшибки()
		));
		Возврат Неопределено;
	КонецПопытки;
	
	Если ТолькоАктивныйЭлемент Тогда
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить(АктивныйЭлемент);
		
		ТаблицыФормы = Новый Массив;
	Иначе	
		МассивЭлементов = ТекущаяФорма.НайтиОбъекты();
		ТаблицыФормы    = ТекущаяФорма.НайтиОбъекты(Тип("ТестируемаяТаблицаФормы"));
	КонецЕсли;	 
	
	МассивКолонокТаблиц = Новый Массив;
	Для Каждого ТаблицаФормы Из ТаблицыФормы Цикл
		ДобавитьЭлементыКолонкиТаблицы(ТаблицаФормы, МассивКолонокТаблиц);
	КонецЦикла;	
	
	Для каждого Элем Из МассивЭлементов Цикл
		Если МассивКолонокТаблиц.Найти(Элем.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		СостояниеЭлемента = ПолучитьСостояниеЭлементаФормыTestClient(Элем, ДопПараметры);
		МассивРезультат.Добавить(СостояниеЭлемента);
	
	КонецЦикла;
	
	Результат.Вставить("ИмяФормы", ТекущаяФорма.ИмяФормы);
	Результат.Вставить("МассивЭлементов", МассивРезультат);
	
	Возврат Результат;
КонецФункции	

&НаКлиенте
Функция ПолучитьЭлементИзСтруктурыПоИмени(Имя, Массив)
	Для каждого Элем Из Массив Цикл
		Если Элем.Имя = Имя Тогда
			Возврат Элем;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Процедура ДобавитьСтрокуИзменения(Стр, Изменение)
	Если Стр = "" Тогда
		Стр = Стр + "	Тогда " + Изменение + Символы.ПС;
	Иначе	
		Стр = Стр + "	И " + Изменение + Символы.ПС;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля(Знач Стр)
	
	Стр = СтрЗаменить(Стр, "\n", Символы.ПС);
	
	ЭтоМногоСтрочнаяСтрока = Ложь;
	Если Найти(Стр, Символы.ПС) > 0 Тогда
		ЭтоМногоСтрочнаяСтрока = Истина;
	КонецЕсли;
	
	Если НЕ ЭтоМногоСтрочнаяСтрока Тогда
		Возврат """" + ЭкранироватьСпецСимволыДляЗначенияШага(УбратьКавычкиАпострофы(Стр)) + """";
	КонецЕсли;
	
	Стр = УбратьКавычкиАпострофы(Стр);
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Стр, Символы.ПС);
	
	НоваяСтрока = "";
	
	ПредставлениеЭкранированныйАпостроф = "__&Апостроф__";
	
	Для Каждого Элем Из МассивСтрок Цикл
		Элем = СтрЗаменить(Элем, "\'", ПредставлениеЭкранированныйАпостроф);
		Элем = СтрЗаменить(Элем, "'", "\'");
		Элем = СтрЗаменить(Элем, ПредставлениеЭкранированныйАпостроф, "\'");
		
		НоваяСтрока = НоваяСтрока + Символы.ПС + Символы.Таб + Символы.Таб + "|'" + Элем + "'|";
	КонецЦикла;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭкранироватьСпецСимволыДляЗначенияШага(Знач Стр)
	Стр = СтрЗаменить(Стр, "\\", "~ЭкранированиеДвойнойСлеш~");
	Стр = СтрЗаменить(Стр, "\""", "~ЭкранированиеСлешКавычка~");
	Стр = СтрЗаменить(Стр, "\'", "~ЭкранированиеСлешАпостроф~");
	Стр = СтрЗаменить(Стр, "\|", "~ЭкранированиеВертикальнойЧерты~");
	Стр = СтрЗаменить(Стр, """", "\""");
	Стр = СтрЗаменить(Стр, "|", "\|");
	Стр = СтрЗаменить(Стр, "'", "\'");
	Стр = СтрЗаменить(Стр, "~ЭкранированиеВертикальнойЧерты~", "\|");
	Стр = СтрЗаменить(Стр, "~ЭкранированиеДвойнойСлеш~", "\\");
	Стр = СтрЗаменить(Стр, "~ЭкранированиеСлешКавычка~", "\""");
	Стр = СтрЗаменить(Стр, "~ЭкранированиеСлешАпостроф~", "\'");
	Возврат Стр;
КонецФункции	

&НаКлиенте
Функция УпорядочитьМассивЭлементовФормы(Массив)
	
	Результат = Новый Массив;
	
	Спс = Новый СписокЗначений;
	Для Каждого Элем Из Массив Цикл
		Спс.Добавить(Элем, Элем.Имя);
	КонецЦикла;
	
	Спс.СортироватьПоПредставлению();
	
	Для Каждого Элем Из Спс Цикл
		Результат.Добавить(Элем.Значение);
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Процедура ДобавитьИзменениеРеквизита(ИзмененияРеквизитов, ЭлемСтало)
	
	Если ЭлемСтало.Свойство("Тип") И ЭлемСтало.Тип = Тип("ТестируемаяГруппаФормы") Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЭлемСтало.Свойство("Вид") Тогда
		Если ЭлемСтало.Вид = ВидПоляФормы.ПолеHTMLДокумента
			ИЛИ ЭлемСтало.Вид = ВидПоляФормы.ПолеТабличногоДокумента
			ИЛИ ЭлемСтало.Вид = ВидПоляФормы.ПолеТекстовогоДокумента
			ИЛИ ЭлемСтало.Вид = ВидПоляФормы.ПолеФорматированногоДокумента
			Тогда
				Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	Структура = СкопироватьСтруктуру(ЭлемСтало);
	Структура.Вставить("ПредставлениеДанныхДляШага",
		ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля(ЭкранироватьСпецСимволыДляЗначенияШага(ЭлемСтало.ПредставлениеДанных)));
	ИзмененияРеквизитов.Добавить(Структура);
КонецПроцедуры

&НаКлиенте
Функция ВывестиИзмененияФормыGherkin(Было, Стало, ДопПараметры)
	Стр = "";
	
	ШагПроверкиШапки = Ложь;
	Если ДопПараметры.Свойство("ШагПроверкиШапки") Тогда
		ШагПроверкиШапки = ДопПараметры.ШагПроверкиШапки;
	КонецЕсли;
	Если ШагПроверкиШапки Тогда
		Стр = "И реквизиты формы имеют значение:";
		ИзмененияРеквизитов = Новый Массив;
	КонецЕсли;	
	
	ТекМассивЭлементов = УпорядочитьМассивЭлементовФормы(Стало.МассивЭлементов);
	
	Для Каждого ЭлемСтало Из ТекМассивЭлементов Цикл
		
		Имя = ЭлемСтало.Имя;
		ЭлемБыло = Неопределено;

		Если Было <> Неопределено Тогда
			ЭлемБыло = ПолучитьЭлементИзСтруктурыПоИмени(Имя, Было.МассивЭлементов);
			Если ЭлемБыло = Неопределено Тогда
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 

		Для каждого Свойство Из ЭлемСтало Цикл
			Ключ = Свойство.Ключ;
			
			Если Ключ = "ПредставлениеДанных" Тогда
				ПредставлениеДанных = ЭлемСтало.ПредставлениеДанных;
				
				Если Было = Неопределено ИЛИ ШагПроверкиШапки Тогда
					Если ШагПроверкиШапки Тогда
						ДобавитьИзменениеРеквизита(ИзмененияРеквизитов, ЭлемСтало);
					Иначе	
						Изменение = "элемент формы с именем '" + ЭлемСтало.Имя + "' стал равен " 
							+ ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("'" + ЭкранироватьСпецСимволыДляЗначенияШага(ПредставлениеДанных) + "'");
						
						ДобавитьСтрокуИзменения(Стр, Изменение);
						
						Если ЭлемСтало.Свойство("ТекстРедактирования") 
								И ЭлемСтало.ТекстРедактирования <> ПредставлениеДанных Тогда
								
							Изменение = "у элемента формы с именем '" + ЭлемСтало.Имя 
									+ "' текст редактирования стал равен " 
									+ ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("'" 
										+ ЭкранироватьСпецСимволыДляЗначенияШага(ЭлемСтало.ТекстРедактирования) + "'");
								
							ДобавитьСтрокуИзменения(Стр, Изменение);
						КонецЕсли;	 
					КонецЕсли;	
					
				ИначеЕсли НЕ ЭлемБыло.Свойство(Ключ) Тогда
					Продолжить;
				Иначе	
					Если СокрЛП(ЭлемСтало[Ключ]) <> СокрЛП(ЭлемБыло[Ключ]) Тогда
						Изменение = "элемент формы с именем '" + ЭлемСтало.Имя + "' стал равен " 
							+ ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("'" 
								+ ЭкранироватьСпецСимволыДляЗначенияШага(ПредставлениеДанных) + "'");
						
						ДобавитьСтрокуИзменения(Стр, Изменение);
					КонецЕсли;	 
					
					Если ЭлемСтало.Свойство("ТекстРедактирования") Тогда
						Если НЕ ЭлемБыло.Свойство("ТекстРедактирования") Тогда
							ЭлемБыло.Вставить("ТекстРедактирования", Неопределено);
						КонецЕсли;	 
						
						Если СокрЛП(ЭлемСтало["ТекстРедактирования"]) <> СокрЛП(ЭлемБыло["ТекстРедактирования"])
								И ПредставлениеДанных <> ЭлемСтало["ТекстРедактирования"] Тогда
							Изменение = "у элемента формы с именем '" + ЭлемСтало.Имя + "' текст редактирования стал равен " 
								+ ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("'" 
									+ ЭкранироватьСпецСимволыДляЗначенияШага(ЭлемСтало.ТекстРедактирования) + "'");
							
							ДобавитьСтрокуИзменения(Стр, Изменение);
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли Ключ = "ТекущаяДоступность" И НЕ ШагПроверкиШапки Тогда
				Значение = "доступен";
				Если ЭлемСтало[Ключ] = Ложь Тогда
					Значение = "не доступен";
				КонецЕсли;	 
				
				Изменение = "элемент формы с именем '" + ЭлемСтало.Имя + "' " + Значение;
				
				Если Было <> Неопределено Тогда
					Если НЕ ЭлемБыло.Свойство(Ключ) Тогда
						Продолжить;
					КонецЕсли;	 
					
					Если СокрЛП(ЭлемСтало[Ключ]) <> СокрЛП(ЭлемБыло[Ключ]) Тогда
						ДобавитьСтрокуИзменения(Стр, Изменение);
					КонецЕсли;	 
				КонецЕсли;	 
				
			ИначеЕсли Ключ = "ТекущаяВидимость" И НЕ ШагПроверкиШапки Тогда
				Значение = "присутствует на форме";
				Если ЭлемСтало[Ключ] = Ложь Тогда
					Значение = "отсутствует на форме";
				КонецЕсли;	 
				
				Изменение = "элемент формы с именем '" + ЭлемСтало.Имя + "' " + Значение;
				
				Если Было <> Неопределено Тогда
					Если НЕ ЭлемБыло.Свойство(Ключ) Тогда
						Продолжить;
					КонецЕсли;
					
					Если СокрЛП(ЭлемСтало[Ключ]) <> СокрЛП(ЭлемБыло[Ключ]) Тогда
						ДобавитьСтрокуИзменения(Стр, Изменение);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Ключ = "ТабДок" И НЕ ШагПроверкиШапки Тогда
				
				СтрТабДок = ПолучитьСтрокуТабличныйДокументФормаTestClient(ЭлемСтало[Ключ]);
				
				Если СтрТабДок = "" Тогда
					Изменение = "табличный документ формы с именем '" + ЭлемСтало.Имя + "' стал пустым";
					ДобавитьСтрокуИзменения(Стр, Изменение);
				Иначе	
					Изменение = "табличный документ '" + ЭлемСтало.Имя + "' равен:";
					
					ДобавитьСтрокуИзменения(Стр, Изменение);
					Стр = Стр + СтрТабДок + Символы.ПС;
				КонецЕсли;

			ИначеЕсли Ключ = "ТекущаяСтраницаИмя" И НЕ ШагПроверкиШапки Тогда
				Если ЭлемСтало[Ключ] = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если ЭлемБыло <> Неопределено И ЭлемСтало[Ключ] <> ЭлемБыло[Ключ] Тогда
					Изменение = "у группы страниц """ + ЭлемСтало.Имя + """ текущая страница """ + ЭлемСтало[Ключ] + """";
					ДобавитьСтрокуИзменения(Стр, Изменение);
				КонецЕсли;
			ИначеЕсли Ключ = "ЗначениеТЧ" И НЕ ШагПроверкиШапки Тогда
				Если ЭлемСтало[Ключ] = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НадоПоказатьЧтоКоличествоСтрокСталоРавноНоль = Ложь;
				Если (ЭлемСтало[Ключ].Количество() = 0) И ЭлемБыло <> Неопределено И ЭлемБыло[Ключ].Количество() <> 0 Тогда
					НадоПоказатьЧтоКоличествоСтрокСталоРавноНоль = Истина;
				ИначеЕсли (ЭлемСтало[Ключ].Количество() = 0) И ЭлемБыло = Неопределено Тогда
					НадоПоказатьЧтоКоличествоСтрокСталоРавноНоль = Истина;
				КонецЕсли;

				Если НадоПоказатьЧтоКоличествоСтрокСталоРавноНоль Тогда
					Стр = Стр + "	Тогда в таблице '" + ЭлемСтало.Имя + "' количество строк ""равно"" 0" + Символы.ПС;
					Продолжить;
				КонецЕсли;
				
				Если (ЭлемБыло = Неопределено) Или (ЭлемБыло[Ключ] = Неопределено) Тогда
					Изменение = "таблица '" + ЭлемСтало.Имя + "' стала равной:";
					
					ДобавитьСтрокуИзменения(Стр, Изменение);
					СтрТЧ = ПолучитьСтрокуСТЧФормаTestClient(ЭлемСтало[Ключ]);
					
					Стр = Стр + СтрТЧ + Символы.ПС;
				Иначе
					// надо сравнить две ТЧ
					ТЧбыло  = ЭлемБыло[Ключ];
					ТЧстало = ЭлемСтало[Ключ];
					
					Если ТЧстало.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если ТЧбыло.Количество() <> ТЧстало.Количество() Тогда
						// значит изменилось количество строк, просто выводим новую таблицу
						Изменение = "таблица '" + ЭлемСтало.Имя + "' стала равной:";
						
						ДобавитьСтрокуИзменения(Стр, Изменение);
						СтрТЧ = ПолучитьСтрокуСТЧФормаTestClient(ЭлемСтало[Ключ]);
						
						Стр = Стр + СтрТЧ + Символы.ПС;
						
						Продолжить;
					КонецЕсли;
					
					ФлагИзмененныеКолонки = Новый Массив;
					Для каждого СтрокаСтало Из ТЧстало Цикл
						Для каждого Колонка Из СтрокаСтало Цикл
							ФлагИзмененныеКолонки.Добавить(Ложь);
						КонецЦикла;
						
						Прервать;
					КонецЦикла;
					
					Ном = -1;
					Для каждого СтрокаСтало Из ТЧстало Цикл
						Ном        = Ном + 1;
						СтрокаБыло = ТЧбыло[Ном];
						
						идКолонки = -1;
						Для каждого Колонка Из СтрокаСтало Цикл
							идКолонки  = идКолонки + 1;
							
							ИмяКолонки = Колонка.Ключ;
							
							ЗначениеБыло  = СтрокаБыло[ИмяКолонки];
							ЗначениеСтало = СтрокаСтало[ИмяКолонки];
							
							Если ЗначениеБыло <> ЗначениеСтало Тогда
								ФлагИзмененныеКолонки[идКолонки] = Истина;
							КонецЕсли;
						КонецЦикла;
					
					КонецЦикла;

					ИзмененныеКолонки = Новый Массив;
					Для каждого СтрокаСтало Из ТЧстало Цикл
						Ном = -1;
						Для каждого Колонка Из СтрокаСтало Цикл
							Ном = Ном + 1;
							ИмяКолонки = Колонка.Ключ;
							Если ФлагИзмененныеКолонки[Ном] Тогда
								ИзмененныеКолонки.Добавить(ИмяКолонки);
							КонецЕсли;
						КонецЦикла;
						
						Прервать;
					КонецЦикла;

					Если ИзмененныеКолонки.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Изменение = "таблица формы с именем '" + ЭлемСтало.Имя + "' стала равной:";
					ДобавитьСтрокуИзменения(Стр, Изменение);
					СтрТЧ = ПолучитьСтрокуСТЧФормаTestClient(ЭлемСтало[Ключ], ИзмененныеКолонки);
					
					Стр = Стр + СтрТЧ + Символы.ПС;

				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ШагПроверкиШапки Тогда
		Массив = Новый Массив;
		СтрИмя = Локализовать("Имя");
		СтрЗначение = Локализовать("Значение");
		СтрКакИскать = Локализовать("КакИскать");
		Массив.Добавить(ПодставитьПараметрыВСтроку("|'%1'|'%2'|'%3'|", СтрИмя, СтрЗначение, СтрКакИскать));
		Для Каждого ТекИзмененияРеквизитов Из ИзмененияРеквизитов Цикл
			//Второй параметр уже обернут в апострофы
			Массив.Добавить(ПодставитьПараметрыВСтроку("|'%1'|%2|'%3'|",
				ТекИзмененияРеквизитов.Имя, ТекИзмененияРеквизитов.ПредставлениеДанныхДляШага, ""));
			КонецЦикла;
		ФорматироватьТаблицуGherkin(Массив);
		Массив.Вставить(0, Стр); 
		Стр = _СтрСоединить(Массив, Символы.ПС);
	КонецЕсли;	
	
	Возврат Стр;
	
КонецФункции

&НаКлиенте
Процедура ФорматироватьМассивСтрокКакТаблицу(МассивСтрок)
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	Стр = СокрЛП(МассивСтрок[0]);
	Стр = Сред(Стр, 2, СтрДлина(Стр) - 2);
	Стр = СтрЗаменить(Стр, "\|", ПредставлениеВертЧертыВТабДок);
	МассивСтолбцов = РазложитьСтрокуВМассивПодстрокКлиент(Стр, "|");
	
	КолПараметров = МассивСтолбцов.Количество();
	МассивДлин = Новый Массив;
	Для каждого Элем Из МассивСтолбцов Цикл
		МассивДлин.Добавить(0);
	КонецЦикла;
	
	Для каждого Стр Из МассивСтрок Цикл
		Стр = Сред(Стр, 2, СтрДлина(Стр) - 2);
		Стр = СтрЗаменить(Стр, "\|", ПредставлениеВертЧертыВТабДок);
		МассивСтолбцов = РазложитьСтрокуВМассивПодстрокКлиент(Стр, "|");
		
		Для Ккк = 0 По МассивДлин.Количество() - 1 Цикл
			Зн = СокрЛП(МассивСтолбцов[Ккк]);
			Зн = СтрЗаменить(Зн, ПредставлениеВертЧертыВТабДок, "|");
			
			ДлинаСтроки = СтрДлина(Зн);
			Если ДлинаСтроки > МассивДлин[Ккк] Тогда
				МассивДлин[Ккк] = ДлинаСтроки;
			КонецЕсли;	 
			
		КонецЦикла;
	КонецЦикла;
	
	Ном = -1;
	Для каждого Стр Из МассивСтрок Цикл
		Ном = Ном + 1;
		Стр = Сред(Стр, 2, СтрДлина(Стр) - 2);
		Стр = СтрЗаменить(Стр, "\|", ПредставлениеВертЧертыВТабДок);
		МассивСтолбцов = РазложитьСтрокуВМассивПодстрокКлиент(Стр, "|");
		
		СтрПараметров = "| ";
		Для Ккк = 0 По МассивДлин.Количество() - 1 Цикл
			Зн = СокрЛП(МассивСтолбцов[Ккк]);
			Зн = СтрЗаменить(Зн, ПредставлениеВертЧертыВТабДок, "\|");
			
			Пока СтрДлина(Зн) < МассивДлин[Ккк] Цикл
				Зн = Зн + " ";
			КонецЦикла;
			СтрПараметров = СтрПараметров + Зн + " | ";
		КонецЦикла;
		
		СтрПараметров = СокрЛП(СтрПараметров);
		
		МассивСтрок[Ном] = СтрПараметров;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуТабличныйДокументФормаTestClient(ТабДок)
	МассивСтрок = Новый Массив;
	
	Стр = "|";
	
	Для каждого СтрокаТабДок Из ТабДок Цикл
		СтрокаТЧ = "|";
		Для каждого КолонкаТабДок Из СтрокаТабДок Цикл
			СтрокаТЧ = СтрокаТЧ + " '" + СтрЗаменить(КолонкаТабДок, "|", ПредставлениеВертЧертыВТабДок) + "' |";
			
		КонецЦикла;
		МассивСтрок.Добавить(СтрокаТЧ);
	КонецЦикла;

	ФорматироватьМассивСтрокКакТаблицу(МассивСтрок);

	Стр = "";
	Для каждого Элем Из МассивСтрок Цикл
		Стр = Стр + Символы.Таб + Символы.Таб +  Элем + Символы.ПС;
	КонецЦикла;
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Функция ПолучитьСтрокуСТЧФормаTestClient(ТЧ, ИзмененныеКолонки = Неопределено)
	
	МассивСтрок = Новый Массив;
	
	Стр = "|";
	
	// шапка ТЧ
	Для каждого СтрТЧ Из ТЧ Цикл
		Для каждого Элем Из СтрТЧ Цикл
			Если ИзмененныеКолонки <> Неопределено Тогда
				// значит выводим только нужные колонки
				Если ИзмененныеКолонки.Найти(Элем.Ключ) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Стр = Стр + " '" + ПолучитьКорректноеЗначениеТаблицыGherkin(Элем.Ключ) + "' |";
		КонецЦикла;
		
		Прервать;
	КонецЦикла;
	
	МассивСтрок.Добавить(Стр);
	
	Для каждого СтрТЧ Из ТЧ Цикл
		
		СтрокаТЧ = "|";
		Для Каждого Элем Из СтрТЧ Цикл
			
			Если ИзмененныеКолонки <> Неопределено Тогда
				// значит выводим только нужные колонки
				Если ИзмененныеКолонки.Найти(Элем.Ключ) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТЧ = СтрокаТЧ + " '" + ПолучитьКорректноеЗначениеТаблицыGherkin(Элем.Значение) + "' |";
			
		КонецЦикла;
		
		МассивСтрок.Добавить(СтрокаТЧ);
	КонецЦикла;
	
	ФорматироватьМассивСтрокКакТаблицу(МассивСтрок);
	
	Стр = "";
	Для каждого Элем Из МассивСтрок Цикл
		Стр = Стр + Символы.Таб + Символы.Таб + Элем + Символы.ПС;
	КонецЦикла;
	
	Возврат Стр;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьИзмененияФормы(Тип, ДопПараметры)
	ТекущаяФорма = Неопределено;
	ТекущееСостояниеФормы = ПолучитьСостояниеФормыTestClient(ДопПараметры);
	Если ТекущееСостояниеФормы = Неопределено Тогда
		Возврат;                                                                   
	КонецЕсли;	 
	
	Если СохраненноеСостояниеФормыTestClient <> Неопределено Тогда
		Если СохраненноеСостояниеФормыTestClient.ИмяФормы <> ТекущееСостояниеФормы.ИмяФормы Тогда
			СообщитьПользователю (ПодставитьПараметрыВСтроку(
				Локализовать("Изменилось имя формы: было: %1, стало: %2"),
				СохраненноеСостояниеФормыTestClient.ИмяФормы,
				ТекущееСостояниеФормы.ИмяФормы
			));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ДопПараметры.Вставить("ТекущаяФорма", ТекущаяФорма);
	
	Если Тип = "Gherkin" Тогда
		Изменения = ВывестиИзмененияФормыGherkin(СохраненноеСостояниеФормыTestClient, ТекущееСостояниеФормы, ДопПараметры);
	Иначе
		ВызватьИсключение Локализовать("Неизвестный тип вывода данных по изменению формы.");
	КонецЕсли;	 
	
	Объект.СгенерированныйСценарий = Изменения;
	
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.СгенерированныйСценарий;
	КонецЕсли;	 
	
	Отладка("Изменения формы обработаны.");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВременнуюФичу(Стр)
	#Если НЕ ВебКлиент Тогда
		
	СостояниеVanessaAutomation = ПолучитьСостояниеVanessaAutomation();
	ЯзыкФичи = СостояниеVanessaAutomation.ТекущаяФича.ЯзыкФичи;
		
	ИмяФайла = ПолучитьИмяВременногоФайла("feature");
	
	ЗТ = Новый ЗаписьТекста(ИмяФайла, "UTF-8", , Истина); 
	
	Если ЯзыкФичи = "ru" Тогда
		ЗТ.ЗаписатьСтроку("Функционал: Тест"); 
		ЗТ.ЗаписатьСтроку("Сценарий: Тестовый сценарий"); 
	Иначе	
		
		КлючевыеСловаGherkin = МодульПарсерGherkin().КлючевыеСловаGherkin();
		ТекКлючевыеСлова = КлючевыеСловаGherkin[ЯзыкФичи];
		Если ТекКлючевыеСлова <> Неопределено Тогда
			ЗТ.ЗаписатьСтроку("#language: " + ЯзыкФичи); 
			ЗТ.ЗаписатьСтроку(ТекКлючевыеСлова["feature"][0] + ": Test"); 
			ЗТ.ЗаписатьСтроку(ТекКлючевыеСлова["scenario"][0] + ": Test scenario"); 
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	ЗТ.ЗаписатьСтроку(Стр); 
	
	ЗТ.Закрыть();
	
	Возврат ИмяФайла; 
	
	#КонецЕсли
КонецФункции	

&НаКлиенте
Функция СоздатьСтруктураПараметровДляЗагрузкиШага(ПутьЗагрузки, ДвоичныеДанные)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("DebugLog", Объект.DebugLog);
	СтруктураПараметров.Вставить("ДополнительныеПараметры", Неопределено);
	СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога", Ложь);
	СтруктураПараметров.Вставить("КаталогИнструментов", Объект.КаталогИнструментов);
	СтруктураПараметров.Вставить("КаталогФич", ПутьЗагрузки);
	СтруктураПараметров.Вставить("КаталогиБиблиотек", Объект.КаталогиБиблиотек);
	СтруктураПараметров.Вставить("ЯзыкГенератораGherkin", Объект.ЯзыкГенератораGherkin);
	
	МассивРезультатОбходаКаталоговДляОднойФичи = Новый Массив;
	Файл = Новый Файл(ПутьЗагрузки);
	СтруктураФайла = ПолучитьСтруктуруФайлаФичи(1, Файл.ИмяБезРасширения, Файл.ПолноеИмя, ДвоичныеДанные);
	МассивРезультатОбходаКаталоговДляОднойФичи.Добавить(СтруктураФайла);
	
	СтруктураПараметров.Вставить("МассивРезультатОбходаКаталогов", МассивРезультатОбходаКаталоговДляОднойФичи);
	СтруктураПараметров.Вставить("ВозможнаОптимизацияРаботыСФайлами", ВозможнаОптимизацияРаботыСФайлами);
	СтруктураПараметров.Вставить("ТегTreeВключенПоУмолчанию", Объект.ТегTreeВключенПоУмолчанию);
	СтруктураПараметров.Вставить("ЗапускИзКоманднойСтроки", Объект.ЗапускИзКоманднойСтроки);
	СтруктураПараметров.Вставить("КешДанныеПеревода", КешДанныеПеревода);
	СтруктураПараметров.Вставить("МассивСообщений", Новый Массив);
	
	СтруктураПараметров.Вставить("СписокТеговИсключение", Объект.СписокТеговИсключение);
	СтруктураПараметров.Вставить("СписокСценариевДляВыполнения", Объект.СписокСценариевДляВыполнения);
	СтруктураПараметров.Вставить("СписокТеговОтбор", Объект.СписокТеговОтбор);
	СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева", Ложь);
	СтруктураПараметров.Вставить("ЭтоЗагрузкаФич", Истина);
	СтруктураПараметров.Вставить("КешСнипетов", КешСнипетов);
	СтруктураПараметров.Вставить("СтрокаПробелов", СтрокаПробелов);
	СтруктураПараметров.Вставить("КешЗагрузкиФич", Новый Соответствие);
	СтруктураПараметров.Вставить("КешПараметрыВСтроке", Новый Соответствие);
	СтруктураПараметров.Вставить("КешРассчитатьПараметрыТаблицы", Новый Соответствие);
	СтруктураПараметров.Вставить("КешОпределенияТипа", Новый Соответствие);
	СтруктураПараметров.Вставить("КешПоискаКлючевыхСлов", Новый Соответствие);
	
	СтруктураПараметров.Вставить("ТаблицаУжеСуществующихСценариевУФ", ТаблицаУжеСуществующихСценариев);
		
	Если Объект.ВерсияПоставки = "single" Тогда
		ДвДанныеvbFeatureReader = Неопределено;
	Иначе	
		ДвДанныеvbFeatureReader = Новый ДвоичныеДанные(ПолучитьПутьКFeatureReader());
	КонецЕсли;	 
	СтруктураПараметров.Вставить("ДвДанныеvbFeatureReader", ДвДанныеvbFeatureReader);
	СтруктураПараметров.Вставить("ДанныеСекцииПеременные", ПустыеДанныеСекцииПеременные());
	
	Возврат СтруктураПараметров;
КонецФункции	

&НаСервере
Процедура ЗагрузитьВременнуюФичуСервер(СтруктураПараметров)
	ВременноеИмяФайла = ПолучитьИмяВременногоФайла("epf");
	Если Объект.ВерсияПоставки = "single" Тогда
		ОбъектСервер = РеквизитФормыВЗначение("Объект");
		FeatureReader = ОбъектСервер;
	Иначе	
		СтруктураПараметров.ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
		FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла, Ложь);
	КонецЕсли;	 
	
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	
	Дерево = Новый ДеревоЗначений;
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ОбъектСервер.СоздатьКолонкиДерева(Дерево);
	
	Если Не СтруктураПараметров.Свойство("ТаблицаУжеСуществующихСценариев") Тогда
		ТаблицаУжеСуществующихСценариевСервер = ПреобразоватьМассивТаблицаУжеСуществующихСценариевВТаблицуЗначений(СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ);
		СтруктураПараметров.Вставить("ТаблицаУжеСуществующихСценариев", ТаблицаУжеСуществующихСценариевСервер);
	КонецЕсли;	 
	
	ПерваяСтрокаДерева = Дерево.Строки.Добавить();
	ПерваяСтрокаДерева.Имя = "Фичи";
	ПерваяСтрокаДерева.ПолныйПуть = "";
	
	СтруктураПараметров.Вставить("ТаблицаИзвестныхStepDefinition", ТзнТаблицаИзвестныхStepDefinition);
	СтруктураПараметров.Вставить("УниверсальныеИменаФайлов", УниверсальныеИменаФайлов(СтруктураПараметров.МассивРезультатОбходаКаталогов));
	СтруктураПараметров.Вставить("СтекВызова", Новый Массив);
	
	КешСнипетовИзХранилищаЗначений(СтруктураПараметров);
	
	FeatureReader.ЗагрузитьФичу(СтруктураПараметров.КаталогФич, ПерваяСтрокаДерева.Строки, СтруктураПараметров);
	СтруктураПараметров.Вставить("ТаблицаИзвестныхStepDefinition", Неопределено);
	
	Если СтруктураПараметров.Свойство("КешФич") Тогда
		СтруктураПараметров.КешФич = Неопределено;
	КонецЕсли;	 
	
	Если СтруктураПараметров.Свойство("ТаблицаУжеСуществующихСценариев") Тогда
		СтруктураПараметров.ТаблицаУжеСуществующихСценариев = Неопределено;
	КонецЕсли;	 
	
	Шаги = Новый Массив;
	ПолучитьШагиИзДерева(Дерево.Строки, Шаги, СтруктураПараметров);
	
	СтруктураПараметров.Вставить("Шаги", Шаги);	
	
	СтруктураПараметров.Вставить("ТаблицаОбластей", Неопределено);
	СтруктураПараметров.Вставить("ТаблицаПеревода", Неопределено);
	СтруктураПараметров.Вставить("КешЗагрузкиФич", Неопределено);
	СтруктураПараметров.Вставить("КешПараметрыВСтроке", Неопределено);
	СтруктураПараметров.Вставить("КешРассчитатьПараметрыТаблицы", Неопределено);
	СтруктураПараметров.Вставить("КешОпределенияТипа", Неопределено);
	СтруктураПараметров.Вставить("КешПоискаКлючевыхСлов", Неопределено);
	КешСнипетовВХранилищаЗначений(СтруктураПараметров);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьШагиИзДерева(ДеревоСтроки, Шаги, СтруктураПараметров)
	Для каждого СтрокаДерева Из ДеревоСтроки Цикл
		Если СтрокаДерева.Тип = "Шаг" Тогда
			
			Если СтрокаДерева.Родитель.ДопТип = "СтруктураСценария" Тогда
				// Эти шаги не выполняются в структуре сценария.
				Продолжить;
			КонецЕсли;	 
			
			Шаг = Новый Структура;
			Шаг.Вставить("Имя", СтрокаДерева.Имя);
			Шаг.Вставить("СтрокаРеальнойПроцедуры", СтрокаДерева.СтрокаРеальнойПроцедуры);
			Шаг.Вставить("ЗначенияПараметров", СтрокаДерева.ЗначенияПараметров);
			Шаг.Вставить("АдресСнипета", СтрокаДерева.АдресСнипета);
			Шаг.Вставить("ШагСПараметрамиВТаблице", СтрокаДерева.ШагСПараметрамиВТаблице);
			
			Если СтрокаДерева.ШагСПараметрамиВТаблице = Истина Тогда
				МассивТаблиц = Новый Массив;
				ПарамТаблица = Новый Массив;
				
				МассивТаблиц.Добавить(ПарамТаблица);
				
				ПодчиненныеСтроки = СтрокаДерева.Строки;
				Для каждого СтрокаТаблицы Из ПодчиненныеСтроки Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Имя) Тогда
						ПарамТаблица = Новый Массив;
						МассивТаблиц.Добавить(ПарамТаблица);
						Продолжить;
					КонецЕсли;	 

					СтрокаПарамТаблица = Новый Структура;
					
					НомерКолонки = 0;
					Для каждого Колонка Из СтрокаТаблицы.ПараметрыТаблицы Цикл
						НомерКолонки       = НомерКолонки + 1;
						СтруктураПараметра = Колонка.Значение;
						Значение           = ПолучитьЗначениеДляПередачиВМетодСервер(СтруктураПараметра.Значение, СтруктураПараметра.Тип, СтруктураПараметров);
						Значение           = Вычислить(Значение);
						
						СтрокаПарамТаблица.Вставить("Кол" + Формат(НомерКолонки, "ЧГ=; ЧН=0"), Значение);
					КонецЦикла;
					
					ПарамТаблица.Добавить(СтрокаПарамТаблица);
				КонецЦикла;
				Шаг.Вставить("МассивТаблиц", МассивТаблиц);
			КонецЕсли;	 

			Шаги.Добавить(Шаг);
		Иначе	
			ПолучитьШагиИзДерева(СтрокаДерева.Строки, Шаги, СтруктураПараметров);
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры	

&НаКлиенте
Функция НужноДелатьПодстановкуПеременных(Знач Стр)
	Если (Лев(Стр,4) = "$$$$" И Прав(Стр,4) = "$$$$") ИЛИ (Лев(Стр,3) = "$$$" И Прав(Стр,3) = "$$$") Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	 

&НаКлиенте
Функция ПолучитьМассивПараметровИзСписокАргументов(СписокАргументов, ТекШаг, ИскатьЗначенияИзСекцииПеременные = Ложь)
	НадоЗапомнитьПеременные = Ложь;
	МассивПараметров = Новый Массив;
	Для Каждого ЭлементМассива Из СписокАргументов Цикл
		Элем = ЭлементМассива.Значение;
		Если Элем.Тип = "Строка" Тогда
			Значение = Элем.Значение;
			Если Найти(Значение, "$") > 0 Тогда
				НадоЗапомнитьПеременные = Истина;
				Если НужноДелатьПодстановкуПеременных(Значение) Тогда
					Значение = ПодставитьПеременныеВСтроку(Значение);
				КонецЕсли;	 
			КонецЕсли;	 
			Если Найти(Значение, "$") > 0 Тогда
				МассивПараметров.Добавить(ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(Значение, Ложь));
			Иначе	
				МассивПараметров.Добавить(Значение);
			КонецЕсли;	 
		ИначеЕсли Элем.Тип = "Число" Тогда
			Попытка
				Зн = Число(Элем.Значение);
			Исключение
				Зн = Элем.Значение;
			КонецПопытки;
			МассивПараметров.Добавить(Зн);
		ИначеЕсли Элем.Тип = "Дата" Тогда
			МассивПараметров.Добавить(ПреобразоватьСтрокуВДату(Элем.Значение));
		Иначе	
			МассивПараметров.Добавить(Элем.Значение);
		КонецЕсли;	 
	КонецЦикла;
	
	ЗначенияИзТаблицыПеременных = Новый Массив;
	Если ИскатьЗначенияИзСекцииПеременные ИЛИ Объект.ВычислятьВыраженияВФигурныхСкобках Тогда
		ДанныеПоПростымПеременным = 0; // Из ДанныеПоПростымПеременнымПоТекущемуСценарию() может вернуться Неопределено, поэтому инициалиция нулём
		ДанныеПоПеременныхВТаблицах = 0; // Тоже самое
		Для Сч = 0 По МассивПараметров.Количество()-1 Цикл
			
			ТекЗначение = МассивПараметров[Сч];
			МассивПараметров[Сч] = ВычислитьИнлайнВыражениеЕслиЭтоВозможно(МассивПараметров[Сч], ДанныеПоПростымПеременным, ДанныеПоПеременныхВТаблицах, ИскатьЗначенияИзСекцииПеременные);
			Если ТекЗначение <> МассивПараметров[Сч] Тогда
				НадоЗапомнитьПеременные = Истина;
				ТекШаг.Вставить("ЕстьПеременныеТаблицыПеременных", Истина);
				
				ЗначениеПеременнойДляЗамены = Новый Структура;
				ЗначениеПеременнойДляЗамены.Вставить("Ключ", ТекЗначение);
				ЗначениеПеременнойДляЗамены.Вставить("Значение", МассивПараметров[Сч]);
				ЗначенияИзТаблицыПеременных.Добавить(ЗначениеПеременнойДляЗамены);
				Если НЕ ТекШаг.Свойство("ЗначенияИзТаблицыПеременных") Тогда
					ТекШаг.Вставить("ЗначенияИзТаблицыПеременных", ЗначенияИзТаблицыПеременных);
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;	 
	
	Если ЗапоминатьЗначенияПеременыхПриПодстановкеВШаг И НадоЗапомнитьПеременные Тогда
		ДобавитьКШагуЗначенияПеременных(ТекШаг);
	КонецЕсли;	 
	
	Возврат МассивПараметров;
КонецФункции	

&НаКлиенте
Процедура ПодготовитьИВызватьМетод(ТекШаг, ОбработкаТеста, ИмяПроцедуры, МассивПараметров)
	ОбработкаТеста.Контекст            = ОбъектКонтекст;
	ОбработкаТеста.КонтекстСохраняемый = ОбъектКонтекстСохраняемый;
	
	Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
		ЗаписатьЛогВЖРПередВыполнениемШага(ТекШаг.Имя);
	КонецЕсли;	 
	
	ВызватьМетод(ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДляВыполненияОдногоШага(Знач Стр, Знач ДвДанныеvbFeatureReader, Знач КаталогИнструментов, СтруктураПараметров)
	КешСнипетовИзХранилищаЗначений(СтруктураПараметров);
	
	ВременноеИмяФайла = Неопределено;
	Если Объект.ВерсияПоставки = "standart" Тогда
		FeatureReader = СоздатьFeatureReader(КаталогИнструментов, ДвДанныеvbFeatureReader, ВременноеИмяФайла);
	Иначе
		FeatureReader = РеквизитФормыВЗначение("Объект");
	КонецЕсли;	 
	
	ОписаниеШага               = FeatureReader.ПолучитьОписаниеШагаПоСтроке(Стр, СтруктураПараметров);
	ТзнИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	
	Поз          = Найти(ОписаниеШага.StepDefinition, "(");
	ИмяПроцедуры = Лев(ОписаниеШага.StepDefinition, Поз - 1);
	ОписаниеШага.Вставить("ИмяПроцедуры", ИмяПроцедуры);
	
	СтрокаТзнИзвестныхStepDefinition = ТзнИзвестныхStepDefinition.Найти(НРег(ИмяПроцедуры), "СтрокаДляПоиска");
	Если СтрокаТзнИзвестныхStepDefinition = Неопределено Тогда
		ОписаниеШага.Вставить("ШагНайден", Ложь);
	Иначе	
		ОписаниеШага.Вставить("ШагНайден", Истина);
		ОписаниеШага.Вставить("ИмяФайла", СтрокаТзнИзвестныхStepDefinition.ИмяФайла);
	КонецЕсли;	 
	
	Если ВременноеИмяФайла <> Неопределено Тогда
		УдалитьФайлы(ВременноеИмяФайла);
	КонецЕсли;	 
	
	КешСнипетовВХранилищаЗначений(СтруктураПараметров);
	
	Возврат ОписаниеШага;
КонецФункции	

&НаКлиенте
Процедура ВыполнитьМетодШагЧерезВременныйФичаФайлПродолжение(Шаги, ДопПараметры)
	Для каждого ТекШаг Из Шаги Цикл
		Если Не ЗначениеЗаполнено(ТекШаг.АдресСнипета) Тогда
			ТекстСообщения = Локализовать("Шаг <%1> не реализован.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ТекШаг.Имя);
			Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
				ДопПараметры.Вставить("ОшибкаПодготовки", Истина);
			КонецЕсли;	 
			
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ИмяПроцедуры     = ТекШаг.СтрокаРеальнойПроцедуры;
		СписокАргументов = ТекШаг.ЗначенияПараметров;
		
		МассивПараметров = ПолучитьМассивПараметровИзСписокАргументов(СписокАргументов, ТекШаг);
		Если ТекШаг.Свойство("ШагСПараметрамиВТаблице") И ТекШаг.ШагСПараметрамиВТаблице = Истина Тогда
			Для Каждого ТабПарам Из ТекШаг.МассивТаблиц Цикл
				МассивПараметров.Добавить(ТабПарам);
			КонецЦикла;	
		КонецЕсли;	 
		
		АдресСнипета   = ТекШаг.АдресСнипета;
		ОбработкаТеста = ПолучитьКонтекстТестаПоАдресСнипета(АдресСнипета);
		
		ПодготовитьИВызватьМетод(ТекШаг, ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
		
	КонецЦикла;
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьМетодШагЧерезВременныйФичаФайл(Стр, ДопПараметры)
	ВременнаяФича = ПолучитьВременнуюФичу(Стр);
	ДвоичныеДанные = Новый ДвоичныеДанные(ВременнаяФича);
	
	СтруктураПараметров = СоздатьСтруктураПараметровДляЗагрузкиШага(ВременнаяФича, ДвоичныеДанные);
	СтруктураПараметров.Вставить("ЭтоLinux", ЭтоLinux);
	СтруктураПараметров.Вставить("ОтборПоТегам", Ложь);
	ЗагрузитьВременнуюФичуСервер(СтруктураПараметров);
	
	Шаги = СтруктураПараметров.Шаги;
	Если Шаги.Количество() = 0 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Метод Шаг() не выполнен. Не удалось прочитать шаги из временного фича файла <%1>. Исходная строка:%2"),
			ВременнаяФича,
			Символы.ПС + Стр
		);
	КонецЕсли;	 
	
	ДанныеДляПодключения = Новый Массив;
	Для каждого ТекШаг Из Шаги Цикл
		Если НЕ ПустаяСтрока(ТекШаг.АдресСнипета) Тогда
			ОбработкаТеста = ПолучитьКонтекстТестаПоАдресСнипета(ТекШаг.АдресСнипета);
			Если ОбработкаТеста = Неопределено Тогда
				ДанныеДляПодключения.Добавить(ТекШаг.АдресСнипета);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;
	
	Если ДанныеДляПодключения.Количество() > 0 Тогда
		ЗапретитьВыполнениеШагов();
		ПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеПроцедурыШагВременныйФичаФайл(ДанныеДляПодключения, Шаги, ДопПараметры);
		Возврат;
	КонецЕсли;	 
	
	ВыполнитьМетодШагЧерезВременныйФичаФайлПродолжение(Шаги, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ДляСлужебногоОповещения()
	Оповестить("СлужебноеОповещение", "СлужебноеОповещение");
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщениеОТомЧтоПоЗаголовкуНайденоБольшеОдногоЭлемента(МассивЭлементов, ИмяРеквизита)
	СообщитьПользователю (ПодставитьПараметрыВСтроку(
		Локализовать("Обнаружено несколько полей с заголовком <%1>"),
		ИмяРеквизита
	));
	Ном = 0;
	Для каждого Элем Из МассивЭлементов Цикл
		Ном = Ном + 1;
		Попытка
			ПредставлениеДанных = Элем.ПолучитьПредставлениеДанных();
		Исключение
			ПредставлениеДанных = "";
		КонецПопытки;
		
		СообщитьПользователю (ПодставитьПараметрыВСтроку(
			Локализовать("№%1. Заголовок=<%2>. Имя=<%3>. ТекстПоля = <%4>"),
			Ном,
			Элем.ТекстЗаголовка,
			Элем.Имя,
			ПредставлениеДанных
		));
	КонецЦикла;
	
КонецПроцедуры

// {снятие скриншота
&НаКлиенте
Функция ИмяФайлаСкриншотаБезКаталога()
	УИД = Новый УникальныйИдентификатор;
	Возврат "" + УИД + "-attachment.png";
КонецФункции	 

&НаКлиенте
Функция СформироватьИмяФайлаСкриншота()
	ИмяФайла = ИмяФайлаСкриншотаБезКаталога();
	Каталог = Объект.КаталогВыгрузкиСкриншотов;
	Если ПустаяСтрока(Каталог) Тогда
		ВызватьИсключение Локализовать("Не указан каталог сохранения скриншотов.");
	КонецЕсли;	 
	Если НЕ ФайлСуществуетКомандаСистемы(Каталог, "СформироватьИмяФайлаСкриншота") Тогда
		СоздатьКаталогКомандаСистемы(Каталог);
	КонецЕсли;	 
	
	ИмяФайла = ДополнитьСлешВПуть(Каталог) + ИмяФайла;
	
	Возврат ИмяФайла;
	
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьМассивPIDПоИмениПроцесса(ИмяПроцесса, Массив)
	
	Для Каждого ProcID Из ПолучитьМассивPIDПроцессов(ИмяПроцесса) Цикл
		
		Массив.Добавить(Число(ProcID));
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотТекущегоОкнаИАктивироватьСледущееОкноSikuliX()
	СообщитьПользователю(Локализовать("Делаю скриншот."));
	СделатьСкриншотОшибкиТекущегоОкна("СделатьСкриншотыОшибкиКаждогоОкна1СSikuliX");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСкриншотКСценариюИлиШагу(РезультатПрохожденияТестовСценария, ДанныеФайлаСкриншота)
	Если НЕ РезультатПрохожденияТестовСценария.Свойство("МассивСкриншотов") Тогда
		МассивСкриншотов = Новый Массив();
		РезультатПрохожденияТестовСценария.Вставить("МассивСкриншотов", МассивСкриншотов);
	Иначе
		МассивСкриншотов = РезультатПрохожденияТестовСценария.МассивСкриншотов;
	КонецЕсли;	 
	
	Если ТипЗнч(ДанныеФайлаСкриншота) = Тип("Структура") Тогда
		ФайлИмяФайлаСкриншота = Новый Файл(ДанныеФайлаСкриншота.ИмяФайла);
	Иначе	
		ФайлИмяФайлаСкриншота = Новый Файл(ДанныеФайлаСкриншота);
	КонецЕсли;	 
	
	СтруктураСкриншот = Новый Структура;
	СтруктураСкриншот.Вставить("ИмяФайла", ФайлИмяФайлаСкриншота.Имя);
	СтруктураСкриншот.Вставить("ДвоичныеДанные", Неопределено);
	
	Если ТипЗнч(ДанныеФайлаСкриншота) = Тип("Структура") И ДанныеФайлаСкриншота.Свойство("ДвоичныеДанные") Тогда
		СтруктураСкриншот.Вставить("ДвоичныеДанные", ДанныеФайлаСкриншота.ДвоичныеДанные);
	Иначе	
		МаксКоличествоПопытокПолученияДвоичныхДанных = 20;
		Для Сч = 1 По МаксКоличествоПопытокПолученияДвоичныхДанных Цикл
			Попытка
				СтруктураСкриншот.Вставить("ДвоичныеДанные", Новый ДвоичныеДанные(ФайлИмяФайлаСкриншота.ПолноеИмя));
				Прервать;
			Исключение
				Sleep(1);
			КонецПопытки;
		КонецЦикла;	
	КонецЕсли;	 
	
	Если ТипЗнч(ДанныеФайлаСкриншота) = Тип("Структура") Тогда
		Если ДанныеФайлаСкриншота.Свойство("ЗаголовокВнутреннегоОкна") Тогда
			СтруктураСкриншот.Вставить("ЗаголовокВнутреннегоОкна", ДанныеФайлаСкриншота.ЗаголовокВнутреннегоОкна);
		КонецЕсли;	 
		Если ДанныеФайлаСкриншота.Свойство("ИмяСкриншотаДляОтчета") Тогда
			СтруктураСкриншот.Вставить("ИмяСкриншотаДляОтчета", ДанныеФайлаСкриншота.ИмяСкриншотаДляОтчета);
		КонецЕсли;	 
		Если ДанныеФайлаСкриншота.Свойство("ИмяКлиентаТестирования") Тогда
			СтруктураСкриншот.Вставить("ИмяКлиентаТестирования", ДанныеФайлаСкриншота.ИмяКлиентаТестирования);
		КонецЕсли;	 
		Если ДанныеФайлаСкриншота.Свойство("ИсходноеИмяФайла") Тогда
			СтруктураСкриншот.Вставить("ИсходноеИмяФайла", ДанныеФайлаСкриншота.ИсходноеИмяФайла);
		КонецЕсли;	 
	КонецЕсли;	 
	МассивСкриншотов.Добавить(СтруктураСкриншот);
КонецПроцедуры 

&НаКлиенте
Процедура СделатьСкриншотОшибкиТекущегоОкна(ИмяПроцедуры, ДопПараметры = Неопределено)
	МассивСкриншотов = Новый Массив;
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;	 
	ДопПараметры.Вставить("ИмяФайла",МассивСкриншотов);
	ДопПараметры.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	СделатьСкриншот(ДопПараметры);
	
	Если НЕ (Объект.ИспользоватьКомпонентуVanessaExt И Объект.ИспользоватьВнешнююКомпонентуДляСкриншотов) Тогда
		РезультатПрохожденияТестовСценария = ЗначениеПараметровДляСнятияСкриншотов.РезультатПрохожденияТестовСценария;
		Для Каждого Элем Из МассивСкриншотов Цикл
			ДобавитьСкриншотКСценариюИлиШагу(РезультатПрохожденияТестовСценария, Элем);
		КонецЦикла;	 
		
		ПодключитьОбработчикОжидания(ИмяПроцедуры, 0.1, Истина);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотыОшибкиКаждогоОкна1СSikuliX() Экспорт
	ТекProcessID = ТекProcessID + 1;
	Если ТекProcessID > (МассивКоординатОкон1С.Количество() - 1) Тогда
		ПерейтиКВыполнениюСледующегоСценария();
		Возврат;
	КонецЕсли;	 
	
	ТекКоординаты = МассивКоординатОкон1С[ТекProcessID];
	
	СообщитьПользователю(ПодставитьПараметрыВСтроку(
		Локализовать("Активирую окно с координатами: %1%2"),
		Формат(ТекКоординаты.x, "ЧГ=; ЧН=0") + " ",
		Формат(ТекКоординаты.y, "ЧГ=; ЧН=0")
	));
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СлужебныйВызов", Истина);
	ВыполнитьSikuliСкрипт(Объект.КаталогИнструментов + "\tools\Sikuli\ClickCoordinates.sikuli --args " 
		+ Формат(ТекКоординаты.x, "ЧГ=; ЧН=0") + " " 
		+ Формат(ТекКоординаты.y, "ЧГ=; ЧН=0") , -1, Истина,, ДопПараметры);
	
	ПодключитьОбработчикОжидания("СделатьСкриншотТекущегоОкнаИАктивироватьСледущееОкноSikuliX", 1, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СортироватьМассивКоординат(Массив)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("x");
	Тзн.Колонки.Добавить("y");
	
	Для Каждого Элем Из Массив Цикл
		СтрТзн = Тзн.Добавить();
		СтрТзн.x = Элем.x;
		СтрТзн.y = Элем.y;
	КонецЦикла;	
	
	Тзн.Сортировать("x");
	
	Массив = Новый Массив;
	
	Для Каждого СтрТзн Из Тзн Цикл
		Массив.Добавить(Новый Структура("x,y", СтрТзн.x, СтрТзн.y));
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивКоординатОкон1С()
	#Если НЕ ВебКлиент Тогда
	
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СлужебныйВызов", Истина);
	Рез = ВыполнитьSikuliСкрипт(Объект.КаталогИнструментов + "/tools/Sikuli/GetAll1CWindowsCoordinates.sikuli > """ 
		+ ИмяФайлаЛога + """", -1, Истина, , ДопПараметры);
	Если Рез <> 0 Тогда
		СообщитьПользователю(Локализовать("Не получилось выполнить команду по получению координат на экране всех окон 1С в панели задач."));
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если Не ФайлСуществуетКомандаСистемы(ИмяФайлаЛога) Тогда
		СообщитьПользователю(Локализовать("Не получилось выполнить команду по получению координат на экране всех окон 1С в панели задач."));
		Возврат Неопределено;
	КонецЕсли;	 
	
	Массив = Новый Массив;
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаЛога, "UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		МассивЗначений = РазложитьСтрокуВМассивПодстрокКлиент(Стр, ";");
		
		Для Ккк = 0 По МассивЗначений.Количество() - 1 Цикл
			МассивЗначений[Ккк] = СокрЛП(МассивЗначений[Ккк]);
		КонецЦикла;
		
		Если МассивЗначений[0] <> "match" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Массив.Добавить(Новый Структура("x,y", Число(МассивЗначений[1]), Число(МассивЗначений[2])));
		
	КонецЦикла;	
	
	Текст.Закрыть();
	
	СортироватьМассивКоординат(Массив);
	
	Возврат Массив;
	
	#КонецЕсли
КонецФункции	

&НаКлиенте
Процедура ЗакрытьМодальныйДиалогИСнятьСкриншотПродолжение() Экспорт
	ПерейтиКВыполнениюСледующегоСценария();
КонецПроцедуры 

&НаКлиенте
Функция ЗакрытьМодальныйДиалогИСнятьСкриншот()
	Если НЕ ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если ОбъектКонтекстСохраняемый.ТестовоеПриложение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИскатьМодальныйДиалог", Истина);
	АктивноеОкно = ПолучитьАктивноеОкноИзТестовоеПриложение(ДопПараметры);
	Если АктивноеОкно = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если НЕ ЭтоЗаголовокОкнаМодальногоДиалога(АктивноеОкно.Заголовок) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Попытка
		КнопкаОК = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), "ОК");
		Если КнопкаОК = Неопределено Тогда
			КнопкаОК = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), "OK");
		КонецЕсли;	 
		Если КнопкаОК = Неопределено Тогда
			АктивноеОкно.Закрыть();
		Иначе	
			КнопкаОК.Нажать();
		КонецЕсли;	  
	Исключение
		// не получилось закрыть модальный диалог
		Возврат Ложь;
	КонецПопытки;	
	
	sleep(2);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТолькоПроцессКлиентаТестирования", Истина);
	СделатьСкриншотОшибкиТекущегоОкна("ЗакрытьМодальныйДиалогИСнятьСкриншотПродолжение", ДопПараметры);
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура СделатьСкриншотыВсехОконКомпонента()
	Если ТекущийTestclientЭтоWebКлиент Тогда
		МассивФайлов = Новый Массив;
		ПараметрыСкриншотов = Новый Структура;
		ПараметрыСкриншотов.Вставить("ИмяФайла", МассивФайлов);
		ПараметрыСкриншотов.Вставить("ИмяПроцедуры", "СделатьСкриншотыВсехОконКомпонентаПродолжение");
		ПараметрыСкриншотов.Вставить("СпособСнятияСкриншотовВнешнейКомпонентой", 0);
		ПараметрыСкриншотов.Вставить("ИмяСкриншотаДляОтчета", "MainScreen");
		СделатьСкриншотКомпонента(ПараметрыСкриншотов);
		Возврат;
	КонецЕсли;	 
	
	СделатьСкриншотыВсехОконКомпонентаПродолжение();
КонецПроцедуры 

&НаКлиенте
Процедура ОпределитьСвойстваПроцессаИСделатьСкриншотЕслиНеобходимоОбработкаОповещения(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	Данные = ПрочитатьСтрокуJSON(РезультатВызова);
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		Если Найти(НРег(Данные.Name),"1cv8") > 0 Тогда
			МассивФайлов = Новый Массив;
			ПараметрыСкриншотов = Новый Структура;
			ПараметрыСкриншотов.Вставить("ИмяФайла",МассивФайлов);
			ПараметрыСкриншотов.Вставить("ProcessId",Данные.ProcessId);
			ПараметрыСкриншотов.Вставить("ИмяПроцедуры","ОпределитьСвойстваПроцессаИСделатьСкриншотЕслиНеобходимо");
			СделатьСкриншотКомпонента(ПараметрыСкриншотов);
			Возврат;
		КонецЕсли;	 
		ОпределитьСвойстваПроцессаИСделатьСкриншотЕслиНеобходимо();
	Иначе	
		ПерейтиКВыполнениюСледующегоСценария();
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ОпределитьСвойстваПроцессаИСделатьСкриншотЕслиНеобходимо()
	ИдДанныеСпискаПроцессов = ИдДанныеСпискаПроцессов + 1;
	Если ИдДанныеСпискаПроцессов > (ДанныеСпискаПроцессов.Количество() - 1) Тогда
		Если НЕ ЗапрещеныСинхронныеВызовы Тогда
			Если ЗакрытьМодальныйДиалогИСнятьСкриншот() Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;	 
		
		Если ПродолжитьВыполнениеШаговПослеСнятияВсехСкриншотов = Истина Тогда
			//тут надо перейти к следующем шагу, если происходило снятие скринов при регистрации ошибки в блоке исключения
			ПродолжитьВыполнениеШаговПослеСнятияВсехСкриншотов = Ложь;
			Если ТипЗнч(ЗначениеПараметровДляСнятияСкриншотов) = Тип("Структура") Тогда
				Если ЗначениеПараметровДляСнятияСкриншотов.Свойство("ВыполнитьСледуюущийШаг") И ЗначениеПараметровДляСнятияСкриншотов.ВыполнитьСледуюущийШаг Тогда
					ИдСледующегоШага = ЗначениеПараметровДляСнятияСкриншотов.ИдСледующегоШага;
					ЗначениеПараметровДляСнятияСкриншотов = Неопределено;
					ПерейтиКВыполнениюСледующегоШага(, , ИдСледующегоШага);
					Возврат;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		ПерейтиКВыполнениюСледующегоСценария();
		
		Возврат;
		
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьСвойстваПроцессаИСделатьСкриншотЕслиНеобходимоОбработкаОповещения", ЭтаФорма);
	ВнешняяКомпонентаДляСкриншотов.НачатьВызовПолучитьСвойстваПроцесса(ОписаниеОповещения,
	   ДанныеСпискаПроцессов[ИдДанныеСпискаПроцессов].ProcessId);
	
КонецПроцедуры 

&НаКлиенте
Процедура СделатьСкриншотыВсехОконКомпонентаСписокПроцессов(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ДанныеСпискаПроцессов = ПрочитатьСтрокуJSON(РезультатВызова);
	
	ИдДанныеСпискаПроцессов = -1;
	Если ТипЗнч(ДанныеСпискаПроцессов) = Тип("Массив") Тогда
		ПроцессыДляСнятиеСкриншотов = Новый Массив;
		Для Каждого ДанныеПроцесса Из ДанныеСпискаПроцессов Цикл
			Если НЕ ДанныеПроцесса.Свойство("CommandLine") Тогда
				Продолжить;
			КонецЕсли;	 
			
			Если Найти(НРег(ДанныеПроцесса.CommandLine),"1cv8") = 0 Тогда
				Продолжить;
			КонецЕсли;	 
			
			Если Найти(НРег(ДанныеПроцесса.CommandLine)," config ") > 0 Тогда
				Продолжить;
			КонецЕсли;	 
			
			ПроцессыДляСнятиеСкриншотов.Добавить(ДанныеПроцесса);
		КонецЦикла;	 
		ДанныеСпискаПроцессов = ПроцессыДляСнятиеСкриншотов;
		ЗаписатьЛогВЖРИнформация("СписокПроцессовСкриншоты", _СтрШаблон("Найдено <%1> процессов для снятия скриншотов.", ПроцессыДляСнятиеСкриншотов.Количество()));
		ОпределитьСвойстваПроцессаИСделатьСкриншотЕслиНеобходимо();
	Иначе
		ПерейтиКВыполнениюСледующегоСценария();
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура СделатьСкриншотыОшибкиПродолжение()
	// Если на экране модальный диалог - закроем его, сделаем паузу и снимем ещё один скриншот
	// т.к. часто после закрытия диалога можно получить дополнительную информацию об ошибке
	Если НЕ (Объект.ИспользоватьКомпонентуVanessaExt И Объект.ИспользоватьВнешнююКомпонентуДляСкриншотов)
	ИЛИ  (Объект.ИспользоватьКомпонентуVanessaExt И Объект.ИспользоватьВнешнююКомпонентуДляСкриншотов) 
	Тогда
		//Закрытие модального диалога надо сделать, если скриншоты снимаются внешней прграммой, либо компонентой, но только одно окно.
		Если ЗакрытьМодальныйДиалогИСнятьСкриншот() Тогда
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ТипЗнч(ЗначениеПараметровДляСнятияСкриншотов) = Тип("Структура") Тогда
		Если ЗначениеПараметровДляСнятияСкриншотов.Свойство("ВыполнитьСледуюущийШаг") И ЗначениеПараметровДляСнятияСкриншотов.ВыполнитьСледуюущийШаг Тогда
			ИдСледующегоШага = ЗначениеПараметровДляСнятияСкриншотов.ИдСледующегоШага;
			ЗначениеПараметровДляСнятияСкриншотов = Неопределено;
			ПерейтиКВыполнениюСледующегоШага(, , ИдСледующегоШага);
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ЗначениеПараметровДляСнятияСкриншотов = Неопределено;
	ПерейтиКВыполнениюСледующегоСценария();
КонецПроцедуры 

&НаКлиенте
Процедура СделатьСкриншотыОшибки()
	
	Если НужноВыполнитьСкриншотБраузера() Тогда
		ВыполнитьСкриншотБраузераИПродолжитьСнятиеСкриншотовОшибки();
		Возврат;
	КонецЕсли;	
	
	Если Объект.СниматьСкриншотКаждогоОкна1С Тогда
		
		Если Объект.ИспользоватьКомпонентуVanessaExt И Объект.ИспользоватьВнешнююКомпонентуДляСкриншотов Тогда
			СделатьСкриншотыВсехОконКомпонента();
			Возврат;
		КонецЕсли;	 
		
		// временное решение через SikuliX скрипт
		СообщитьПользователю(Локализовать("Делаю скриншоты всех окон 1С."));
		ТекProcessID = -1;
		МассивКоординатОкон1С = ПолучитьМассивКоординатОкон1С();
		Если МассивКоординатОкон1С = Неопределено Тогда
			СделатьСкриншотОшибкиТекущегоОкна("ПерейтиКВыполнениюСледующегоСценария");
			//ПерейтиКВыполнениюСледующегоСценария();
			Возврат;
		КонецЕсли;	 

		СообщитьПользователю(ПодставитьПараметрыВСтроку(
			Локализовать("Найдено %1 окон."),
			МассивКоординатОкон1С.Количество()
		));
		
		Если МассивКоординатОкон1С.Количество() = 0 Тогда
			СообщитьПользователю(Локализовать("Не найдено ни одного окна 1С. Делаю обычный скриншот."));
			СделатьСкриншотОшибкиТекущегоОкна("ПерейтиКВыполнениюСледующегоСценария");
			//ПерейтиКВыполнениюСледующегоСценария();
			Возврат;
		КонецЕсли;	 
		
		// Сделаем текущий скриншот - чтобы не получилось ситуации, что активное окно свернулось
		СообщитьПользователю(Локализовать("Делаю общий скриншот."));
		СделатьСкриншотОшибкиТекущегоОкна("СделатьСкриншотыОшибкиКаждогоОкна1СSikuliX");
		
		//СделатьСкриншотыОшибкиКаждогоОкна1СSikuliX();
		Возврат;
	КонецЕсли;	 
	
	СделатьСкриншотОшибкиТекущегоОкна("СделатьСкриншотыОшибкиПродолжение");
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотВозникновенияОшибкиИПерейтиКВыполнениюСледующегоСценария(ОписаниеШага, СтрокаСценария, РезультатПрохожденияТестовСценария)
	Если Не Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
		Возврат;
	КонецЕсли;	 
	
	ЗначениеПараметровДляСнятияСкриншотов = Новый Структура;
	ЗначениеПараметровДляСнятияСкриншотов.Вставить("ОписаниеШага", ОписаниеШага);
	ЗначениеПараметровДляСнятияСкриншотов.Вставить("СтрокаСценария", СтрокаСценария);
	ЗначениеПараметровДляСнятияСкриншотов.Вставить("РезультатПрохожденияТестовСценария", РезультатПрохожденияТестовСценария);
	ЗначениеПараметровДляСнятияСкриншотов.Вставить("ВыполнитьСледуюущийСценарий", Истина);
	
	ПодключитьОбработчикОжидания("СделатьСкриншотыОшибки", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотВозникновенияОшибкиИПерейтиКВыполнениюСледующегоШага(ОписаниеШага, СтрокаСценария, РезультатПрохожденияТестовСценария, ИдСледующегоШага, ОписаниеОшибкиВнутриСценария, ТекШаг, РезультатПрохожденияШага)
	Если Не Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
		Возврат;
	КонецЕсли;	 
	
	ЗначениеПараметровДляСнятияСкриншотов = Новый Структура;
	ЗначениеПараметровДляСнятияСкриншотов.Вставить("ОписаниеШага", ОписаниеШага);
	ЗначениеПараметровДляСнятияСкриншотов.Вставить("СтрокаСценария", СтрокаСценария);
	ЗначениеПараметровДляСнятияСкриншотов.Вставить("РезультатПрохожденияТестовСценария", РезультатПрохожденияТестовСценария);
	ЗначениеПараметровДляСнятияСкриншотов.Вставить("ПрикреплятьСкриншотКШагу", Истина);
	ЗначениеПараметровДляСнятияСкриншотов.Вставить("ВыполнитьСледуюущийШаг", Истина);
	ЗначениеПараметровДляСнятияСкриншотов.Вставить("ИдСледующегоШага", ИдСледующегоШага);
	ЗначениеПараметровДляСнятияСкриншотов.Вставить("ОписаниеОшибкиВнутриСценария", ОписаниеОшибкиВнутриСценария);
	ЗначениеПараметровДляСнятияСкриншотов.Вставить("ДобавлятьКИменамСкриншотовОписаниеОшибки", Истина);
	ЗначениеПараметровДляСнятияСкриншотов.Вставить("ТекШаг", ТекШаг);
	ЗначениеПараметровДляСнятияСкриншотов.Вставить("РезультатПрохожденияШага", РезультатПрохожденияШага);
	
	Если ТекШаг.Свойство("РегистрацияОшибки") И ТекШаг.РегистрацияОшибки Тогда
		ПродолжитьВыполнениеШаговПослеСнятияВсехСкриншотов = Истина;
	КонецЕсли;	 
	
	ПодключитьОбработчикОжидания("СделатьСкриншотыОшибки", 1, Истина);
	
КонецПроцедуры
// }снятие скриншота

// свёртка дерева до строк фич
&НаКлиенте
Процедура СвернутьДеревоДоФичРекурсивно(ДеревоФормыСтроки)
	Для Каждого Строка Из ДеревоФормыСтроки Цикл
		Если Строка.Тип = "Фича" Тогда
			СвернутьСтрокуДерева(Строка);
			Продолжить;
		КонецЕсли;	 
		
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			СвернутьДеревоДоФичРекурсивно(ПодчиненныеСтроки);
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры

// свёртка дерева до строк сценариев
&НаКлиенте
Процедура СвернутьДеревоДоСценариевРекурсивно(ДеревоФормыСтроки)
	Для Каждого Строка Из ДеревоФормыСтроки Цикл
		Если Строка.Тип = "Фича" Тогда
			РазвернутьСтрокуДерева(Строка);
		КонецЕсли;	 
		
		Если Строка.Тип = "Сценарий" Тогда
			СвернутьСтрокуДерева(Строка);
			Продолжить;
		КонецЕсли;	 
		
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			СвернутьДеревоДоСценариевРекурсивно(ПодчиненныеСтроки);
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры

// свёртка дерева до строк шагов и примеров
&НаКлиенте
Процедура СвернутьДеревоДоШаговРекурсивно(ДеревоФормыСтроки)
	Для Каждого Строка Из ДеревоФормыСтроки Цикл
		
		Если Строка.Тип = "Фича" 
			ИЛИ Строка.Тип = "Сценарий" 
			ИЛИ Строка.Тип = "Примеры" Тогда
				РазвернутьСтрокуДерева(Строка);
		КонецЕсли;	 
			
		Если Строка.Тип = "ШагСценарий" 
			ИЛИ Строка.Тип = "Пример" 
			ИЛИ Строка.Тип = "Область" Тогда
				ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
				Если Элементы.ДеревоТестов.Развернут(ИдентификаторСтроки) = Истина Тогда
					СвернутьСтрокуДерева(Строка);
				КонецЕсли;	 
			Продолжить;
		КонецЕсли;
		
		Если Строка.СтрокаПараметровШагаВВидеТаблицы Тогда
			СтрокаРодитель = Строка.ПолучитьРодителя();
			ИдентификаторСтроки = СтрокаРодитель.ПолучитьИдентификатор();
			Если Элементы.ДеревоТестов.Развернут(ИдентификаторСтроки) = Истина Тогда
				СвернутьСтрокуДерева(СтрокаРодитель);
			КонецЕсли;	 
			Продолжить;
		КонецЕсли;	 
		
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			СвернутьДеревоДоШаговРекурсивно(ПодчиненныеСтроки);
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры

// несколько клиентов тестирования {

&НаКлиенте
Процедура СброситьФлагПодключенияКлиентаТестирования()
	Для Каждого НайденнаяСтрока Из ДанныеКлиентовТестирования Цикл
		НайденнаяСтрока.Подключен = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеТекущейИнфобазы()
	
	ДанныеТекущейИнфобазы = Новый Структура;
	ДанныеТекущейИнфобазы.Вставить("Имя", "Этот клиент");
	КаталогБазы = СтрокаСоединенияИнформационнойБазы();
	ДанныеТекущейИнфобазы.Вставить("ПутьКИнфобазе", КаталогБазы);
	
	СвободныйПорт = 1538; // надо так, иначе не подключается уже запущенный TestClient, если была переоткрыта VA
	
	Отбор = Новый Структура;
	Отбор.Вставить("ЭтотКлиент", Истина);
	СтрокиДанныеКлиентовТестирования = ДанныеКлиентовТестирования.НайтиСтроки(Отбор);
	Если СтрокиДанныеКлиентовТестирования.Количество() > 0 Тогда
		СтрокаЭтотКлиент = СтрокиДанныеКлиентовТестирования[0];
		Если ПустаяСтрока(СтрокаЭтотКлиент.ДопПараметры) Тогда
			ДанныеТекущейИнфобазы.Вставить("ДопПараметры", "/N""" + ИмяПользователя() + """");
		КонецЕсли;	 
	Иначе	
		СтрокаЭтотКлиент = ДанныеКлиентовТестирования.Вставить(0); // этот клиент должен быть первым
			
		ДанныеТекущейИнфобазы.Вставить("ИмяКомпьютера",  "localhost");
		ДанныеТекущейИнфобазы.Вставить("ТипКлиента",     "Тонкий");
		ДанныеТекущейИнфобазы.Вставить("ПутьКИнфобазе",  КаталогБазы);
		ДанныеТекущейИнфобазы.Вставить("ПортЗапускаТестКлиента", СвободныйПорт);	
		ДанныеТекущейИнфобазы.Вставить("ДопПараметры", "/N""" + ИмяПользователя() + """");
		ДанныеТекущейИнфобазы.Вставить("ЭтотКлиент", Истина);
	КонецЕсли;	 
	
	ЗаполнитьЗначенияСвойств(СтрокаЭтотКлиент, ДанныеТекущейИнфобазы);
	
	Сч = 0;
	Для Каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
		Сч = Сч + 1;
		Если Сч > 1 Тогда
			Если СтрокаДанныеКлиентовТестирования.ЭтотКлиент Тогда
				СтрокаДанныеКлиентовТестирования.ЭтотКлиент = Ложь;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	 
	
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьПараметрДляWeb(Знач Стр)
	Стр = СтрЗаменить(Стр, "%", "%25");
	Стр = СтрЗаменить(Стр, "#", "%23");
	Стр = СтрЗаменить(Стр, "?", "%3F");
	Стр = СтрЗаменить(Стр, "&", "%26");
	Стр = СтрЗаменить(Стр, "=", "%3D");
	Стр = СтрЗаменить(Стр, " ", "%20");
	Стр = СтрЗаменить(Стр, """", "%22");
	Стр = СтрЗаменить(Стр, "/", "%2F");
	Стр = СтрЗаменить(Стр, "\", "%5C");
	Стр = СтрЗаменить(Стр, "<", "%3C");
	Стр = СтрЗаменить(Стр, ">", "%3E");
	Стр = СтрЗаменить(Стр, "|", "%7C");
	
	Возврат Стр;
КонецФункции

&НаКлиенте
Процедура ДобавитьПараметрКWeb(Стр, ИмяПараметра, Значение = Неопределено)
	Стр = Стр + ?(Найти(Стр, "?") = 0, "?", "&") + ИмяПараметра;
	Если Значение <> Неопределено Тогда
		Стр = Стр + "=" + ПреобразоватьПараметрДляWeb(Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция УбратьКавычки(Стр)
	Если Лев(Стр, 1) = """" И Прав(Стр, 1) = """" Тогда
		Возврат Сред(Стр, 2, СтрДлина(Стр) - 2);
	КонецЕсли;	 
	
	Возврат Стр; 
КонецФункции	

&НаКлиенте
Функция УбратьАпострофы(Стр)
	Если Лев(Стр, 1) = "'" И Прав(Стр, 1) = "'" Тогда
		Возврат Сред(Стр, 2, СтрДлина(Стр) - 2);
	КонецЕсли;	 
	
	Возврат Стр; 
КонецФункции	

&НаКлиенте
Функция УбратьКавычкиАпострофы(Стр)
	Если Лев(Стр, 1) = """" И Прав(Стр, 1) = """" Тогда
		Возврат Сред(Стр, 2, СтрДлина(Стр) - 2);
	КонецЕсли;	 
	
	Если Лев(Стр, 1) = "'" И Прав(Стр, 1) = "'" Тогда
		Возврат Сред(Стр, 2, СтрДлина(Стр) - 2);
	КонецЕсли;	 
	
	Возврат Стр; 
КонецФункции	

&НаКлиенте
Функция ПолучитьМассивПараметровЗапуска(Стр, Разделитель)
	Рез = "";
	КавычкаОткрылась = Ложь;
	Для Ккк = 1 По СтрДлина(Стр) Цикл
		Символ = Сред(Стр, Ккк, 1);
		
		Если Символ = """" Тогда
			КавычкаОткрылась = Не КавычкаОткрылась;
		КонецЕсли;	 
		
		Если КавычкаОткрылась Тогда
			Если Символ = " " Тогда
				Символ = "~ЭкранированиеПробела~";
			КонецЕсли;	 
		КонецЕсли;	 
		
		Рез = Рез + Символ;
	КонецЦикла;	
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Рез, Разделитель);
	
	Для Ккк = 0 По МассивСтрок.Количество() - 1 Цикл
		МассивСтрок[Ккк] = СтрЗаменить(МассивСтрок[Ккк], "~ЭкранированиеПробела~", " ");
	КонецЦикла;	
	
	Возврат МассивСтрок;
КонецФункции	

&НаКлиенте
Функция ПолучитьСтрокуЗапускаWebКлиент(ДанныеЗапускаКлиентаТестирования)
	СтрокаЗапуска = СокрЛП(ДанныеЗапускаКлиентаТестирования.ПутьКИнфобазе);
	Если НРег(Лев(СтрокаЗапуска, 3)) = "ws=" Тогда
		СтрокаЗапуска = Сред(СтрокаЗапуска, 4);
		Если Прав(СтрокаЗапуска, 1) = ";" Тогда
			СтрокаЗапуска = Лев(СтрокаЗапуска, СтрДлина(СтрокаЗапуска) - 1);
		КонецЕсли;	 
		СтрокаЗапуска = УбратьКавычки(СтрокаЗапуска);
	КонецЕсли;	 
	ДобавитьПараметрКWeb(СтрокаЗапуска, "TESTCLIENT");
	ДобавитьПараметрКWeb(СтрокаЗапуска, "TESTCLIENTID", ПолучитьКорректноеИмяTesClient(ДанныеЗапускаКлиентаТестирования.Имя));

	МассивДоппараметров = ПолучитьМассивПараметровЗапуска(ДанныеЗапускаКлиентаТестирования.ДопПараметры, " ");
	Для Каждого Элем Из МассивДоппараметров Цикл
		Если Лев(Элем, 2) = "/N" Тогда
			ДобавитьПараметрКWeb(СтрокаЗапуска, "N", УбратьКавычки(Сред(Элем, 3)));
		ИначеЕсли Лев(Элем, 2) = "/P" Тогда
			ДобавитьПараметрКWeb(СтрокаЗапуска, "P", УбратьКавычки(Сред(Элем, 3)));
		ИначеЕсли Лев(Элем, 2) = "/L" Тогда
			ДобавитьПараметрКWeb(СтрокаЗапуска, "L", УбратьКавычки(Сред(Элем, 3)));
		ИначеЕсли Лев(Элем, 3) = "/VL" Тогда
			ДобавитьПараметрКWeb(СтрокаЗапуска, "VL", УбратьКавычки(Сред(Элем, 4)));
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат СтрокаЗапуска;
КонецФункции	

&НаКлиенте
Функция ПолучитьСтрокуЗапускаDesktopПриложение(ДанныеЗапускаКлиентаТестирования, ДопПараметры)
	ДопПараметры.Вставить("ТипБазыФайловая", Ложь);
	КаталогБазы = ДанныеЗапускаКлиентаТестирования.ПутьКИнфобазе;
	ДопПараметры.Вставить("КаталогБазы", КаталогБазы);
	Если Найти(ВРег(КаталогБазы), ВРег("File=")) > 0 Тогда
		ДопПараметры.Вставить("ТипБазыФайловая", Истина);
		ИмяКаталога = СтрЗаменить(СокрЛП(КаталогБазы), "File=", "");
		ИмяКаталога = СтрЗаменить(ИмяКаталога, ";", "");
		ИмяКаталога = УбратьКавычки(ИмяКаталога);
		ДопПараметры.Вставить("КаталогБазы", ИмяКаталога);
		
		КаталогБазы = СтрЗаменить(КаталогБазы, "File=", " /F");
	ИначеЕсли Найти(ВРег(КаталогБазы), ВРег("Srvr=")) > 0 Тогда
		КаталогБазы = СтрЗаменить(КаталогБазы, "Srvr=", "/S");
		КаталогБазы = СтрЗаменить(КаталогБазы, """;Ref=""", "\");
	ИначеЕсли Найти(ВРег(КаталогБазы), ВРег("ws=")) > 0 Тогда
		КаталогБазы = СтрЗаменить(КаталогБазы, "ws=", " /WS");
	КонецЕсли;
	Если Прав(КаталогБазы, 1) = ";" Тогда
		КаталогБазы = Лев(КаталогБазы, СтрДлина(КаталогБазы)-1);
	КонецЕсли;	 
	
	Если ЭтоLinux = Истина Тогда
		КаталогБазы = СтрЗаменить(КаталогБазы, "\", "/");
	КонецЕсли;	
	
	ПараметрыОтладчика = "";
	Если Объект.ЗапускатьТестКлиентВРежимеОтладки Тогда
		// /debug -http -attach /debuggerURL "http://localhost:1560"
		ПараметрыОтладчика = " /debug " + Объект.КлючиОтладки + " /debuggerURL """ + Объект.АдресОтладчика + """"; 
	КонецЕсли;
	
	СтрокаЗапуска = "ENTERPRISE " + КаталогБазы + ПараметрыОтладчика + " /TESTCLIENT ";
	
	СвободныйПорт = ПроверитьПортНаЗанятость(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента);
	Если СвободныйПорт <> ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента Тогда
		ТекстСообщения = Локализовать("Порт %1 занят или находится вне указанного диапазона, порт подключения изменен на %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Формат(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента, "ЧГ=; ЧН=0")); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", СвободныйПорт);
		Отладка(ТекстСообщения);
		ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента = СвободныйПорт;
		Отбор = Новый Структура;
		Отбор.Вставить("Имя", ДанныеЗапускаКлиентаТестирования.Имя);
		
		НайденныеКлиенты = ДанныеКлиентовТестирования.НайтиСтроки(Отбор);
		Если НайденныеКлиенты.Количество() = 1 Тогда
			НайденныеКлиенты[0].ПортЗапускаТестКлиента = ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаЗапуска = СтрокаЗапуска + "-TPort " + Формат(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента, "ЧГ=; ЧН=0") + " ";	
	
	Если Объект.ОтключитьЗапускРеглЗаданийВФайловойБазе Тогда
		Если Найти(НРег(ДанныеЗапускаКлиентаТестирования.ДопПараметры), НРег("/AllowExecuteScheduledJobs -Off")) = 0 Тогда
			ДанныеЗапускаКлиентаТестирования.ДопПараметры = ДанныеЗапускаКлиентаТестирования.ДопПараметры + " /AllowExecuteScheduledJobs -Off";
		КонецЕсли;	
	КонецЕсли;	
	
	Если Объект.ПроверкаСерверныхВызововВОбработчикахСобытий Тогда
		Если Найти(НРег(ДанныеЗапускаКлиентаТестирования.ДопПараметры), НРег("/EnableCheckServerCalls")) = 0 Тогда
			ДанныеЗапускаКлиентаТестирования.ДопПараметры = ДанныеЗапускаКлиентаТестирования.ДопПараметры + " /EnableCheckServerCalls";
		КонецЕсли;	
	КонецЕсли;	
	
	ДопПараметр = ДанныеЗапускаКлиентаТестирования.ДопПараметры + ДопПараметр;

	Если ЭтоЗапускВРежимеКоманднойСтроки Тогда
		// добавил /CTemp, чтобы убрать передачу параметра /C в TestClient, с которым был запущен TestManager
		СтрокаЗапуска = СтрокаЗапуска + " /CTemp " + ДопПараметр; 
 	Иначе
		СтрокаЗапуска = СтрокаЗапуска + ДопПараметр;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КаталогФайловВыводаСлужебныхСообщений) Тогда
		Если Найти(НРег(СтрокаЗапуска), "/out") = 0 Тогда
			ИмяФйлаOut = ДополнитьСлешВПуть(Объект.КаталогФайловВыводаСлужебныхСообщений)
				+ УбратьВсеЗапрещенныеСимволыИзИмениФайла(СокрЛП(ДанныеЗапускаКлиентаТестирования.Имя) + "_" + Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss")) + ".txt";
			СтрокаЗапуска = СтрокаЗапуска + " /Out""" + ИмяФйлаOut + """";
			
			Если НЕ ФайлСуществуетКомандаСистемы(Объект.КаталогФайловВыводаСлужебныхСообщений) Тогда
				СоздатьКаталогКомандаСистемы(Объект.КаталогФайловВыводаСлужебныхСообщений);
			КонецЕсли;	
			
		КонецЕсли;	
	КонецЕсли;
	
	Возврат СтрокаЗапуска;
КонецФункции	

&НаКлиенте
Процедура ЗапуститьСеанс1СЧерез1cv8(ДанныеЗапускаКлиентаТестирования, СтрокаЗапуска)
	#Если НЕ ВебКлиент Тогда
		
	ДатаВремяПоследнейПопыткиЗапускаКлиентаТестирования = ТекущаяДата();
	ДатаВремяПоследнейПопыткиОпределенияПортаЗапускаКлиентаТестирования = ТекущаяДата();
	Если (Объект.ПовторноЗапускатьСеансКлиентаТестированияПриПодключенииЕслиНеНайденЕгоПроцесс ИЛИ Объект.ОпределятьРеальныйПортНаКоторомЗапустилсяКлиентТестирования)
		И Процессы1СЗапущенныеРанее = Неопределено Тогда
		Если Найти(НРег(ДанныеЗапускаКлиентаТестирования.ТипКлиента), "тонкий") > 0
			ИЛИ Найти(НРег(ДанныеЗапускаКлиентаТестирования.ТипКлиента), "толстый") > 0
			ИЛИ Найти(НРег(ДанныеЗапускаКлиентаТестирования.ТипКлиента), "обычноеприложение") > 0
			Тогда
			
			ДопПарамеры = Новый Структура;
			ДопПарамеры.Вставить("ПолучатьОкнаПолучениеЛицензии", Ложь);
			Процессы1СЗапущенныеРанее = ПолучитьМассивPIDПроцессов1С(ДопПарамеры);
		КонецЕсли;	 
	КонецЕсли;	 
		
	Если Найти(НРег(ДанныеЗапускаКлиентаТестирования.ТипКлиента), "тонкий") > 0 Тогда
		СтрокаЗапуска1с = КаталогПрограммы() + ИмяИсполняемогоФайлаТонкийКлиент;
	Иначе	
		СтрокаЗапуска1с = КаталогПрограммы() + ИмяИсполняемогоФайлаТолстыйКлиент;
	КонецЕсли;
	
	Если НЕ ЭтоLinux Тогда
		СтрокаЗапуска1с = СтрокаЗапуска1с + ".exe";
		Если Объект.ЗапускатьКлиентТестированияСМаксимизированнымОкном Тогда
			СтрокаЗапуска1с = "start /max """" """ + СтрокаЗапуска1с  + """ " + СтрокаЗапуска;
		Иначе	
			СтрокаЗапуска1с = """" + СтрокаЗапуска1с  + """ " + СтрокаЗапуска;
		КонецЕсли;	 
		ЗаписатьЛогВЖРИнформация("ЗапуститьСеанс1СБезПоказаЧерногоОкна", СтрокаЗапуска1с);
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(СтрокаЗапуска1с, 0);	
	Иначе
		СтрокаЗапуска = СтрокаЗапуска1с + " " + СтрокаЗапуска + " &";
		ЗаписатьЛогВЖРИнформация("ЗапуститьСеанс1СЧерезКомандаСистемы", СтрокаЗапуска);
		КомандаСистемы(СтрокаЗапуска);
	КонецЕсли;
	
	#КонецЕсли
КонецПроцедуры 

&НаСервереБезКонтекста
Функция КодироватьСтрокуСервер(Знач Стр)
	Возврат Вычислить("КодироватьСтроку(Стр, СпособКодированияСтроки.КодировкаURL)");
КонецФункции	

&НаКлиенте
Процедура ЗапуститьКлиентаТестирования(ДанныеЗапускаКлиентаТестирования, ДопПараметр = "")
	#Если НЕ ВебКлиент Тогда
	
	НадоЗапускатьПриложение = Ложь;
	Если Не ЗначениеЗаполнено(ДанныеЗапускаКлиентаТестирования.ИмяКомпьютера) Тогда
		// Значит не указано имя ПК для запуска. Это равносильно указанию localhost
		НадоЗапускатьПриложение = Истина;
	ИначеЕсли НРег(ДанныеЗапускаКлиентаТестирования.ИмяКомпьютера) = "localhost" Тогда
		НадоЗапускатьПриложение = Истина;
	ИначеЕсли НРег(ДанныеЗапускаКлиентаТестирования.ИмяКомпьютера) = "127.0.0.1" Тогда
		НадоЗапускатьПриложение = Истина;
	ИначеЕсли ДанныеЗапускаКлиентаТестирования.ТипКлиента = "Web" 
		Или ДанныеЗапускаКлиентаТестирования.ТипКлиента = "МобильныйКлиент"
		Или ДанныеЗапускаКлиентаТестирования.ТипКлиента = "МобильныйКлиентАвтономный"
		Или ДанныеЗапускаКлиентаТестирования.ТипКлиента = "МобильноеПриложение" Тогда
		// браузер или мобильный клиент мы можем спокойно запускать
		НадоЗапускатьПриложение = Истина;
	КонецЕсли;	 
	
	Если НЕ НадоЗапускатьПриложение Тогда
		ЗаписатьЛогВЖРИнформация("ЗапуститьКлиентаТестирования", Локализовать("Клиент тестирования не запускался."));
		Возврат;
	КонецЕсли;	 
	
	ПроисходилЗапускTescClient = Истина;	
	
	ДопПараметрыЗапуска = Новый Структура;
	Если ДанныеЗапускаКлиентаТестирования.ТипКлиента = "Web" Тогда
		СтрокаЗапуска = ПолучитьСтрокуЗапускаWebКлиент(ДанныеЗапускаКлиентаТестирования); 
	ИначеЕсли ДанныеЗапускаКлиентаТестирования.ТипКлиента = "МобильныйКлиент"   
		ИЛИ ДанныеЗапускаКлиентаТестирования.ТипКлиента = "МобильныйКлиентАвтономный"
		ИЛИ ДанныеЗапускаКлиентаТестирования.ТипКлиента = "МобильноеПриложение" Тогда
		СтрокаЗапуска = ПолучитьСтрокуЗапускаМобильныйКлиент(ДанныеЗапускаКлиентаТестирования);
	Иначе	
		Если Найти(ДанныеЗапускаКлиентаТестирования.ПутьКИнфобазе, "=") = 0 И Найти(ДанныеЗапускаКлиентаТестирования.ПутьКИнфобазе, ";") = 0 Тогда
			Если ФайлСуществуетКомандаСистемы(ДанныеЗапускаКлиентаТестирования.ПутьКИнфобазе) Тогда
				ДанныеЗапускаКлиентаТестирования.ПутьКИнфобазе = "File=""" + ДанныеЗапускаКлиентаТестирования.ПутьКИнфобазе + """;";
			КонецЕсли;	 
		КонецЕсли;	 
		СтрокаЗапуска = ПолучитьСтрокуЗапускаDesktopПриложение(ДанныеЗапускаКлиентаТестирования, ДопПараметрыЗапуска);
	КонецЕсли;	 

	ТекстСообщения = Локализовать("СтрокаЗапуска=%1");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаЗапуска);
	Отладка(Локализовать(ТекстСообщения));
	
	Если ДанныеЗапускаКлиентаТестирования.ТипКлиента = "Web" Тогда
		
		Если Объект.ИспользоватьБраузерПлюсWebSocket И ПустаяСтрока(Объект.КомандаЗапускаБраузера)
			И Объект.ИспользоватьКомпонентуVanessaExt Тогда
			ВызватьИсключение Локализовать("Не указана команда запуска браузера.");
		КонецЕсли;	
		
		Если  Объект.ИспользоватьБраузерПлюсWebSocket И НЕ ПустаяСтрока(Объект.КомандаЗапускаБраузера)
			И Объект.ИспользоватьКомпонентуVanessaExt Тогда
			
			КоличествоПопыток = 3;
			БылаОшибка = Ложь;
			ТекстОшибки = "";
			Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
				ТекстОшибки = "";
				БылаОшибка = Ложь;
				
				Попытка
					Заголовки = Новый Соответствие;
    				Заголовки["Content-Type"] = "application/x-www-form-urlencoded";
					HTTPЗапрос = Новый HTTPЗапрос("/json/new?" + КодироватьСтрокуUrl(СтрокаЗапуска), Заголовки);
					HTTPСоединение = Новый HTTPСоединение("localhost", МодульРаботаСБраузером().ПортБраузера, , , , 10);
					Попытка
						HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("PUT", HTTPЗапрос);
					Исключение
						Если СчетчикПопыток = 1 Тогда
							ЗапуститьБраузер();
							sleep(1);
						КонецЕсли;	 
						Попытка
							HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("PUT", HTTPЗапрос);
						Исключение
							ВызватьИсключение ПодставитьПараметрыВСтроку(
							Локализовать("Не получилось выполнить инициализацию WebSocket.")
							);
						КонецПопытки;
					КонецПопытки;
					
					Прервать;
				Исключение
					ТекстОшибки = ОписаниеОшибки();
					БылаОшибка = Истина;
					sleep(1);
				КонецПопытки;
				
			КонецЦикла;
			
			Если БылаОшибка Тогда
				ВызватьИсключение ТекстОшибки; 
			КонецЕсли;	 
			
			ТекстJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ТекстJSON);
			ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
			АдресВебСокет = ДанныеJSON.webSocketDebuggerUrl;
			ИдентификаторФрейма = ДанныеJSON.id;
			ИдентификаторФреймаТекущегоWebКлиента = ИдентификаторФрейма;
			РезультатПодключения = ВнешняяКомпонентаДляСкриншотов.ОткрытьВебСокет(АдресВебСокет);
			Если Не ПустаяСтрока(РезультатПодключения) Тогда
				ВызватьИсключение ПодставитьПараметрыВСтроку(
					Локализовать("Ошибка подключения WebSocket.")
				);
			КонецЕсли;
		Иначе
			Если НЕ ПустаяСтрока(Объект.КомандаЗапускаБраузера) Тогда
				Если Найти(Объект.КомандаЗапускаБраузера, "TestClientUrl") > 0 Тогда
					СтрокаЗапуска = СтрЗаменить(Объект.КомандаЗапускаБраузера, "TestClientUrl", СтрокаЗапуска);
				Иначе	
					СтрокаЗапуска = Объект.КомандаЗапускаБраузера + " " + СтрокаЗапуска;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если ЗапрещеныСинхронныеВызовы Тогда
				СтрокаКоманды = "start """" """ + СтрокаЗапуска + """";
				ЗаписатьЛогВЖРИнформация("ЗапуститьКлиентаТестирования", СтрокаКоманды);
				ВыполнитьКомандуОСБезПоказаЧерногоОкна(СтрокаКоманды, 0);
			Иначе	
				ЗаписатьЛогВЖРИнформация("ЗапуститьКлиентаТестирования", СтрокаЗапуска);
				ЗапуститьПриложение(СтрокаЗапуска);
			КонецЕсли;	 
		КонецЕсли;
	ИначеЕсли ДанныеЗапускаКлиентаТестирования.ТипКлиента = "МобильныйКлиент" 
		ИЛИ ДанныеЗапускаКлиентаТестирования.ТипКлиента = "МобильныйКлиентАвтономный"
		ИЛИ ДанныеЗапускаКлиентаТестирования.ТипКлиента = "МобильноеПриложение" Тогда
		Если ВозможноЗапуститьМобильныйКлиент() Тогда
			ЗаписатьЛогВЖРИнформация("ЗапуститьКлиентаТестирования", СтрокаЗапуска);
			СтартМобильногоКлиентаТестирования(СтрокаЗапуска, ДанныеЗапускаКлиентаТестирования.ТипКлиента, Объект.ТаймаутЗапуска1С);
		Иначе
			ВызватьИсключение ПодставитьПараметрыВСтроку(
					Локализовать("Не обнаружено подключенное устройство.")
				);
		КонецЕсли;
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеЗапускаКлиентаТестирования.ТипКлиента) Или
		Найти(НРег(ДанныеЗапускаКлиентаТестирования.ТипКлиента), "тонкий") > 0 Или 
		ЭтоLinux Тогда
		
		Если ДопПараметрыЗапуска.Свойство("ТипБазыФайловая") Тогда
			Если ДопПараметрыЗапуска.ТипБазыФайловая Тогда
				Если НЕ ФайлСуществуетКомандаСистемы(ДопПараметрыЗапуска.КаталогБазы) Тогда
					ВызватьИсключение ПодставитьПараметрыВСтроку(
						Локализовать("Каталог <%1> не найден."),
						ДопПараметрыЗапуска.КаталогБазы
					);
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		ЗапуститьСеанс1СЧерез1cv8(ДанныеЗапускаКлиентаТестирования, СтрокаЗапуска);
	Иначе
		ЗапуститьСеанс1СЧерез1cv8(ДанныеЗапускаКлиентаТестирования, СтрокаЗапуска);
	КонецЕсли;
	
	Для Каждого НайденнаяСтрока Из ДанныеКлиентовТестирования Цикл
		НайденнаяСтрока.Подключен = Ложь;
	КонецЦикла;	
	ДанныеЗапускаКлиентаТестирования.Подключен = Истина;
	КоличествоЗапущенныхКлиентовТестирования = КоличествоЗапущенныхКлиентовТестирования + 1;
	
	#КонецЕсли
КонецПроцедуры
		
&НаКлиенте
// Возвращает строку обернутую кавычками.
Функция ОбернутьВКавычки(Знач Строка) Экспорт
	Если Лев(Строка, 1) = """" И Прав(Строка, 1) = """" Тогда
		Возврат Строка;
	Иначе
		Возврат """" + Строка + """";
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиВХранилищеИНедавнозагруженныеФичи(Знач Ключ, Знач Значение, Знач ДопПараметры, Знач НедавноЗагруженныеФичи, Знач РежимСамотестирования, Знач РежимОбучения)
	СохранитьНастройкиВХранилище(Ключ, Значение, ДопПараметры);
	СохранитьНедавноЗагруженныеФичи(НедавноЗагруженныеФичи, РежимСамотестирования, РежимОбучения);
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура СохранитьНастройкиВХранилище(Знач Ключ, Знач Значение, Знач ДопПараметры)
	ПрефиксИнструмента = ДопПараметры.ПрефиксИнструментаДляСохраненияНастроек;
	
	Если ДопПараметры.ВыполнениеСценариевБезОткрытияФормы Тогда
		ПрефиксИнструмента = ПрефиксИнструмента + "NoForm_";
	КонецЕсли;	 
	
	Если ПрефиксИнструмента <> Неопределено Тогда  
		Ключ = ПрефиксИнструмента + Ключ;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("ДанныеФормыКоллекция") Тогда
		ХранилищеОбщихНастроек.Сохранить(ДопПараметры.ИДДляОбщегоСохраненияНастроек, Ключ, Значение.Выгрузить());
	Иначе
		ХранилищеОбщихНастроек.Сохранить(ДопПараметры.ИДДляОбщегоСохраненияНастроек, Ключ, Значение);
	КонецЕсли;
КонецПроцедуры

// }

&НаСервереБезКонтекста
Процедура СохранитьНедавноЗагруженныеФичи(Знач НедавноЗагруженныеФичи, Знач РежимСамотестирования, Знач РежимОбучения)
	Если РежимСамотестирования Тогда
		Возврат;
	КонецЕсли; 
	
	ИдНастроек = "VanessaAutomationНедавноЗагруженныеФичи";
	Если РежимОбучения Тогда
		ИдНастроек = ИдНастроек + "_Обучение";
	КонецЕсли;	 
	
	ХранилищеОбщихНастроек.Сохранить(ИдНастроек, , НедавноЗагруженныеФичи);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВосстановитьНедавноЗагруженныеФичи(ДопПараметры, НедавноЗагруженныеФичи)
	
	Если ДопПараметры.ВыполнениеСценариевБезОткрытияФормы Тогда
		Возврат;
	КонецЕсли;	 
	
	НедавноЗагруженныеФичи = ХранилищеОбщихНастроек.Загрузить("VanessaAutomationНедавноЗагруженныеФичи");
	Если НедавноЗагруженныеФичи = Неопределено Тогда
		НедавноЗагруженныеФичи = Новый Массив;
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьНедавноЗагруженныеФичиВИнтерфейс(НедавноЗагруженныеФичи)
	
	КоличествоЭлементовВИнтерфейсе = Элементы.ГруппаКнопокНедавноЗагруженныеФичи.ПодчиненныеЭлементы.Количество();
	Ид = 0;
	Для Каждого Элем Из НедавноЗагруженныеФичи Цикл
		Ид = Ид + 1;
		Если КоличествоЭлементовВИнтерфейсе < Ид Тогда
			Пункт1 = Элементы.Добавить("МенюЗагрузитьФичи" + Ид, Тип("КнопкаФормы"), Элементы.ГруппаКнопокНедавноЗагруженныеФичи);
			Пункт1.Заголовок  = Элем.Представление;
			Пункт1.ИмяКоманды = "ЗагрузитьНедавнююФичу" + Ид;
			
			Пункт1 = Элементы.Добавить("МенюЗагрузитьФичиVanessaEditor" + Ид, Тип("КнопкаФормы"), Элементы.ГруппаКнопокVanessaEditorНедавноЗагруженныеФичи);
			Пункт1.Заголовок  = Элем.Представление;
			Пункт1.ИмяКоманды = "ЗагрузитьНедавнююФичу" + Ид;
		Иначе
			Элементы.ГруппаКнопокНедавноЗагруженныеФичи.ПодчиненныеЭлементы[Ид - 1].Заголовок  = Элем.Представление;
			Элементы.ГруппаКнопокНедавноЗагруженныеФичи.ПодчиненныеЭлементы[Ид - 1].ИмяКоманды = "ЗагрузитьНедавнююФичу" + Ид;
			Элементы.ГруппаКнопокНедавноЗагруженныеФичи.ПодчиненныеЭлементы[Ид - 1].Видимость = Истина;
			
			Элементы.ГруппаКнопокVanessaEditorНедавноЗагруженныеФичи.ПодчиненныеЭлементы[Ид - 1].Заголовок  = Элем.Представление;
			Элементы.ГруппаКнопокVanessaEditorНедавноЗагруженныеФичи.ПодчиненныеЭлементы[Ид - 1].ИмяКоманды = "ЗагрузитьНедавнююФичу" + Ид;
			Элементы.ГруппаКнопокVanessaEditorНедавноЗагруженныеФичи.ПодчиненныеЭлементы[Ид - 1].Видимость = Истина;
		КонецЕсли;	 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьНедавноЗагруженныеФичиВИнтерфейсКлиент(НедавноЗагруженныеФичи)
	
	Ид = 0;
	Для Каждого Элем Из НедавноЗагруженныеФичи Цикл
		Ид = Ид + 1;
		
		ТекЗаголовок = Элементы.ГруппаКнопокНедавноЗагруженныеФичи.ПодчиненныеЭлементы[Ид - 1].Заголовок;
		Если ТекЗаголовок <> Элем.Представление Тогда
			Элементы.ГруппаКнопокНедавноЗагруженныеФичи.ПодчиненныеЭлементы[Ид - 1].Заголовок  = Элем.Представление;
		КонецЕсли;
		
		Если НЕ Элементы.ГруппаКнопокНедавноЗагруженныеФичи.ПодчиненныеЭлементы[Ид - 1].Видимость Тогда
			Элементы.ГруппаКнопокНедавноЗагруженныеФичи.ПодчиненныеЭлементы[Ид - 1].Видимость = Истина;
		КонецЕсли;	
		
		ТекЗаголовок = Элементы.ГруппаКнопокVanessaEditorНедавноЗагруженныеФичи.ПодчиненныеЭлементы[Ид - 1].Заголовок; 
		Если ТекЗаголовок <> Элем.Представление Тогда
			Элементы.ГруппаКнопокVanessaEditorНедавноЗагруженныеФичи.ПодчиненныеЭлементы[Ид - 1].Заголовок  = Элем.Представление;
		КонецЕсли;	
		
		Если НЕ Элементы.ГруппаКнопокVanessaEditorНедавноЗагруженныеФичи.ПодчиненныеЭлементы[Ид - 1].Видимость Тогда
			Элементы.ГруппаКнопокVanessaEditorНедавноЗагруженныеФичи.ПодчиненныеЭлементы[Ид - 1].Видимость = Истина;
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИСкопироватьНедавноЗагруженныеФичиВИнтерфейс(НедавноЗагруженныеФичи, РежимСамотестирования)
	Если НЕ Объект.ЗапускИзКоманднойСтроки Тогда
		СохранитьНедавноЗагруженныеФичи(НедавноЗагруженныеФичи, РежимСамотестирования, ЭтоРежимОбученияСервер());
	КонецЕсли;	 
	СкопироватьНедавноЗагруженныеФичиВИнтерфейс(НедавноЗагруженныеФичи);
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьФичуВСписокНедавноЗагруженныхФич(Знач Путь)

	Ид = -1;
	Для Каждого Элем Из НедавноЗагруженныеФичи Цикл
		Ид = Ид + 1;
		
		Если НРег(Элем.Путь) = НРег(Путь) Тогда
			НедавноЗагруженныеФичи.Удалить(Ид);
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	ЗначениеМассива = Новый Структура;
	ЗначениеМассива.Вставить("Путь", Путь);
	ЗначениеМассива.Вставить("Представление", "1. " + Путь);
	НедавноЗагруженныеФичи.Вставить(0, ЗначениеМассива);
	
	Если НедавноЗагруженныеФичи.Количество() > 9 Тогда
		НедавноЗагруженныеФичи.Удалить(9);
	КонецЕсли;	 
	
	Ид = -1;
	Для Каждого Элем Из НедавноЗагруженныеФичи Цикл
		Ид = Ид + 1;
		Путь = Элем.Путь;
		Элем.Представление = "" + (Ид + 1) + ". " + Путь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьСценарийСоСтрокиПрисланнойИзвне()
	ОбработчикЗапуститьСценарийСоСтрокиПрисланнойИзвнеПодключен = Ложь;
	СделатьСтрокуДереваТекущейПоНомеруСтрокиФичи(НомерСтрокиСценарияПереданныйИзвне);
	ВыполнитьДанныйСценарийСТекущегоШага();
КонецПроцедуры

&НаКлиенте
Процедура СтрокаДереваПоНомеруСтрокиФичиРекурсивно(СтрокиДерева, Ном, НадоПрервать, Результат)
	Если НадоПрервать Тогда
		Возврат;
	КонецЕсли;	 
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.НомерСтрокиВФиче = Ном Тогда
			Результат = СтрокаДерева;
			НадоПрервать = Истина;
			Возврат;
		КонецЕсли;	 
		
		Если СтрокаДерева.Тип = "ШагСценарий" Тогда
			Продолжить;
		КонецЕсли;	 
		
		СтрокаДереваПоНомеруСтрокиФичиРекурсивно(СтрокаДерева.ПолучитьЭлементы(), Ном, НадоПрервать, Результат);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаДереваПоИдСтрокиРекурсивно(СтрокиДерева, Ном, НадоПрервать, Результат)
	Если НадоПрервать Тогда
		Возврат;
	КонецЕсли;	 
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.ИдСтроки = Ном Тогда
			Результат = СтрокаДерева;
			НадоПрервать = Истина;
			Возврат;
		КонецЕсли;	 
		
		СтрокаДереваПоИдСтрокиРекурсивно(СтрокаДерева.ПолучитьЭлементы(), Ном, НадоПрервать, Результат);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СделатьСтрокуДереваТекущейПоНомеруРекурсивно(СтрокиДерева, Ном, НадоПрервать)
	Если НадоПрервать Тогда
		Возврат;
	КонецЕсли;	 
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если НадоПрервать Тогда
			Возврат;
		КонецЕсли;	 
		
		Если СтрокаДерева.НомерСтрокиВФиче = Ном Тогда
			Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
			НадоПрервать = Истина;
			Возврат;
		КонецЕсли;	 
		
		Если СтрокаДерева.Тип = "ШагСценарий" Тогда
			Продолжить;
		КонецЕсли;	 
		
		СделатьСтрокуДереваТекущейПоНомеруРекурсивно(СтрокаДерева.ПолучитьЭлементы(), Ном, НадоПрервать);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СделатьБлижайшуюСтрокуДереваТекущейПоНомеруРекурсивно(СтрокиДерева, Ном, НадоПрервать)
	Если НадоПрервать Тогда
		Возврат;
	КонецЕсли;	 
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если НадоПрервать Тогда
			Возврат;
		КонецЕсли;	 
		
		Если СтрокаДерева.НомерСтрокиВФиче >= Ном Тогда
			СтрокаНайдена = Истина;
			Если СтрокаДерева.Тип = "Область" И ПустаяСтрока(СтрокаДерева.ДопТип) Тогда
				СтрокаНайдена = Ложь;
			ИначеЕсли СтрокаДерева.СтрокаПараметровШагаВВидеТаблицы Тогда	
				СтрокаНайдена = Ложь;
			КонецЕсли;	 
			
			Если СтрокаНайдена Тогда
				Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
				НадоПрервать = Истина;
				Возврат;
			КонецЕсли;	 
			
		КонецЕсли;	 
		
		Если СтрокаДерева.Тип = "ШагСценарий" Тогда
			Продолжить;
		КонецЕсли;	 
		
		СделатьБлижайшуюСтрокуДереваТекущейПоНомеруРекурсивно(СтрокаДерева.ПолучитьЭлементы(), Ном, НадоПрервать);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СделатьСтрокуДереваТекущейПоИдСтрокиРекурсивно(СтрокиДерева, Ном, НадоПрервать)
	Если НадоПрервать Тогда
		Возврат;
	КонецЕсли;	 
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.ИдСтроки = Ном Тогда
			Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
			НадоПрервать = Истина;
			Возврат;
		КонецЕсли;	 
		
		СделатьСтрокуДереваТекущейПоИдСтрокиРекурсивно(СтрокаДерева.ПолучитьЭлементы(), Ном, НадоПрервать);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБрейкПоинт(ПолныйПуть)
	Брейкпоинты.Добавить(ПолныйПуть);
	Если НЕ Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовБрейкпоинт.Видимость  Тогда
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовБрейкпоинт.Видимость = Истина;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура УдалитьБрейкПоинт(ПолныйПуть)
	ИД = Брейкпоинты.Найти(ПолныйПуть);
	Если ИД <> Неопределено Тогда
		Брейкпоинты.Удалить(ИД);
	КонецЕсли;	 
	
	Если Брейкпоинты.Количество() = 0 Тогда
		Если Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовБрейкпоинт.Видимость Тогда
			Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовБрейкпоинт.Видимость = Ложь;
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуБрейкпоинтаРекурсивно(СтрокиДерева)
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.Брейкпоинт Тогда
			СтрокаДерева.Брейкпоинт = Ложь;
		КонецЕсли;
		
		СнятьПометкуБрейкпоинтаРекурсивно(СтрокаДерева.ПолучитьЭлементы());
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура СброситьКешИзвестныхStepDefinitionСервер()
	ПараметрыДляСохраненияНастроек = ПараметрыДляСохраненияНастроекСервер(СтруктураДляСохраненияНастроекСервер());
	
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	Копия = ТзнТаблицаИзвестныхStepDefinition.Скопировать();
	Копия.Очистить();
	СохранитьНастройкиВХранилище("ТаблицаИзвестныхStepDefinition", Копия, ПараметрыДляСохраненияНастроек);
	
	ТзнКешStepDefinition = РеквизитФормыВЗначение("КешStepDefinition");
	Копия = ТзнКешStepDefinition.Скопировать();
	Копия.Очистить();
	СохранитьНастройкиВХранилище("КешStepDefinition", Копия, ПараметрыДляСохраненияНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьГраницыТаблицыGherkin(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки, ВерхняяГраница, НижняяГраница)
	Элементы.СгенерированныйСценарий.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Объект.СгенерированныйСценарий, Символы.ПС);
	
	ВерхняяГраница = НачалоСтроки;
	НижняяГраница  = НачалоСтроки;
	
	НомерСтроки = НижняяГраница;
	Пока Истина Цикл
		НомерСтроки = НомерСтроки - 1;
		Если НомерСтроки < 1 Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = СокрЛП(МассивСтрок[НомерСтроки - 1]);
		
		Если Лев(Стр, 1) <> "|" Тогда
			Прервать;
		КонецЕсли;	 
		
		НижняяГраница = НомерСтроки;
	КонецЦикла;	

	НомерСтроки = ВерхняяГраница;
	Пока Истина Цикл
		НомерСтроки = НомерСтроки + 1;
		Если НомерСтроки > МассивСтрок.Количество() Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = СокрЛП(МассивСтрок[НомерСтроки - 1]);
		
		Если Лев(Стр, 1) <> "|" Тогда
			Прервать;
		КонецЕсли;	 
		
		ВерхняяГраница = НомерСтроки;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРедактированиеТаблицыGherkin()
	
	Если Объект.ИспользоватьРедакторVanessaEditor И Элементы.ФункциональностьЗакладки.ТекущаяСтраница = Элементы.ГруппаЗапускТестов Тогда
		
		Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
			Возврат;
		КонецЕсли;
		
		ЭкземплярVanessaEditor = ПолучитьVanessaEditor();
		ПозицияVanessaEditor = ЭкземплярVanessaEditor.getPosition();
		Если НЕ ПустаяСтрока(ПозицияVanessaEditor.codeWidget) Тогда
			//Опция доступна только для основного текста фичи
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрокаVanessaEditor = ПозицияVanessaEditor.LineNumber;
		ТекстСтроки = СокрЛ(ЭкземплярVanessaEditor.getLineContent(ТекущаяСтрокаVanessaEditor));
		Если Лев(ТекстСтроки, 1) <> "|" Тогда
			Возврат;
		КонецЕсли;
		
		МинСтр = 0;
		МаксСтр = 0;
		ДлинаМаксСтр = 0;
		МассивСтрокДляРедактирования = МодульРедакторТекста().ТаблицаGherkinИзVanessaEditor(ТекущаяСтрокаVanessaEditor, МинСтр, МаксСтр, ДлинаМаксСтр);
		
	Иначе
		
		НачалоСтроки = 0;
		НачалоКолонки = 0;
		КонецСтроки = 0;
		КонецКолонки = 0;
		ВерхняяГраница = 0;
		НижняяГраница = 0;
		ОпределитьГраницыТаблицыGherkin(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки, ВерхняяГраница, НижняяГраница);
		
		МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Объект.СгенерированныйСценарий, Символы.ПС);
		
		Если МассивСтрок.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		МассивСтрокДляРедактирования = Новый Массив;
		Для Ккк = (НижняяГраница - 1) По ВерхняяГраница - 1 Цикл
			МассивСтрокДляРедактирования.Добавить(МассивСтрок[Ккк]);
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокДляРедактирования.Количество() = 0 Тогда
		СообщитьПользователю(Локализовать("Не найдена таблица для редактирования."));
		Возврат;
	КонецЕсли;
	
	Если МассивСтрокДляРедактирования.Количество() = 1 Тогда
		Если Не ЗначениеЗаполнено(МассивСтрокДляРедактирования[0]) Тогда
			СообщитьПользователю(Локализовать("Не найдена таблица для редактирования."));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ФорматироватьТаблицуGherkin(МассивСтрокДляРедактирования);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивСтрокДляРедактирования", МассивСтрокДляРедактирования);
	ФормаРедактораТаблиц = ПолучитьФорму(ПолучитьИмяОбработкиVA() + ".Форма.РедактированиеТаблицы", ПараметрыФормы, ЭтаФорма);
	ОткрываласьФормаРедактораТаблиц = Истина;
	ФормаРедактораТаблиц.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСтрокеДереваСОшибкой(ИдСтроки)
	ИдСтрокиДереваДлаАктивизации = ИдСтроки;
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		ИмяПроцедурыПерейтиВДеревоШаговОбработчик = "ОбработчикАктивизироватьСтрокуДереваПоИдСтроки";
		ПерейтиВДеревоШаговОбработчик();
	Иначе	
		ПодключитьОбработчикОжидания("ОбработчикАктивизироватьСтрокуДереваПоИдСтроки", 0.1, Истина);
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ОбработчикАктивизироватьСтрокуДереваПоИдСтроки()
	СделатьСтрокуДереваТекущейПоИдСтроки(ИдСтрокиДереваДлаАктивизации);
КонецПроцедуры 

&НаКлиенте
Процедура ЗаменитьТаблицуGherkinПослеРедактирования(МассивСтрокТаблицы, НомерПервойСтроки = Неопределено)
	Если Объект.ИспользоватьРедакторVanessaEditor И Элементы.ФункциональностьЗакладки.ТекущаяСтраница = Элементы.ГруппаЗапускТестов Тогда
		Если ОтсутствуетVanessaEditor() Тогда
			Возврат;
		КонецЕсли;	 
		
		ЭкземплярVanessaEditor = ПолучитьVanessaEditor();
		Попытка
			ПозицияVanessaEditor = ЭкземплярVanessaEditor.getPosition();
		Исключение
			Возврат;
		КонецПопытки;
		
		Если НЕ ПустаяСтрока(ПозицияVanessaEditor.codeWidget) Тогда
			//Опция доступна только для основного текста фичи
			Возврат;
		КонецЕсли;
		
		Если НомерПервойСтроки = Неопределено Тогда
			ТекущаяСтрокаVanessaEditor = ПозицияVanessaEditor.LineNumber;
		Иначе
			ТекущаяСтрокаVanessaEditor = НомерПервойСтроки;
		КонецЕсли;	
		ПолныйТекстСтроки = ЭкземплярVanessaEditor.getLineContent(ТекущаяСтрокаVanessaEditor);
		ТекстСтроки = СокрЛ(ПолныйТекстСтроки);
		Префикс = Лев(ПолныйТекстСтроки, СтрДлина(ПолныйТекстСтроки) - СтрДлина(ТекстСтроки));
		
		ФорматироватьТаблицуGherkin(МассивСтрокТаблицы);
		СтрокаЗамены = "";
		Для Каждого Стр Из МассивСтрокТаблицы Цикл
			СтрокаЗамены = СтрокаЗамены + Префикс + Стр + Символы.ПС;
		КонецЦикла;	 
		
		СтрокаЗамены = СокрП(СтрокаЗамены);
		
		МинСтр = 0;
		МаксСтр = 0;
		ДлинаМаксСтр = 0;
		МассивСтрокДляРедактирования = МодульРедакторТекста().ТаблицаGherkinИзVanessaEditorНачинаяСоСтроки(ТекущаяСтрокаVanessaEditor, МинСтр, МаксСтр, ДлинаМаксСтр);
		
		Соответствие = Новый Соответствие;
		Соответствие.Вставить("startLineNumber", МинСтр);
		Соответствие.Вставить("startColumn", 1);
		Соответствие.Вставить("endLineNumber", МаксСтр);
		Соответствие.Вставить("endColumn", ДлинаМаксСтр+1);
		ЭкземплярVanessaEditor.insertText(СтрокаЗамены, ЗаписатьОбъектJSON(Соответствие));
		ЭкземплярVanessaEditor.focus();
		АктивизироватьVanessaEditorАсинхронно();
	Иначе	
		НачалоСтроки = 0;
		НачалоКолонки = 0;
		КонецСтроки = 0;
		КонецКолонки = 0;
		ВерхняяГраница = 0;
		НижняяГраница = 0;
		ОпределитьГраницыТаблицыGherkin(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки, ВерхняяГраница, НижняяГраница);
		
		ФорматироватьТаблицуGherkin(МассивСтрокТаблицы);
		
		МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Объект.СгенерированныйСценарий, Символы.ПС);
		
		НовыйМассивСтрок = Новый Массив;
		НомерСтроки = 0;
		ДобавилиРедактированныеСтроки = Ложь;
		Для Ккк = 0 По МассивСтрок.Количество() - 1 Цикл
			НомерСтроки = НомерСтроки + 1;
			Если НомерСтроки >= НижняяГраница И НомерСтроки <= ВерхняяГраница Тогда
				Если НЕ ДобавилиРедактированныеСтроки Тогда
					ДобавилиРедактированныеСтроки = Истина;
					
					Для Каждого НоваяСтрока Из МассивСтрокТаблицы Цикл
						НовыйМассивСтрок.Добавить(Символы.Таб + Символы.Таб + НоваяСтрока);
					КонецЦикла;	
				КонецЕсли;	 
				
				Продолжить;
			КонецЕсли;	 
			
			НовыйМассивСтрок.Добавить(МассивСтрок[Ккк]);
		КонецЦикла;	
		
		ФинальнаяСтрока = "";
		Для Каждого Стр Из НовыйМассивСтрок Цикл
			ФинальнаяСтрока = ФинальнаяСтрока + Стр + Символы.ПС;
		КонецЦикла;	
		
		Объект.СгенерированныйСценарий = ФинальнаяСтрока;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьVanessaEditorАсинхронно()
	ЭтаФорма.ТекущийЭлемент = Элементы.КаталогФич;
	ПодключитьОбработчикОжидания("АктивизироватьVanessaEditorАсинхронноОбработчик", 0.1, Истина);
КонецПроцедуры 

&НаКлиенте
Процедура АктивизироватьVanessaEditorАсинхронноОбработчик()
	ЭтаФорма.ТекущийЭлемент = Элементы.VanessaEditor;
КонецПроцедуры 

&НаКлиенте
Процедура ВывестиСтатистикуКлиентКоротко()
	Поз = Найти(Элементы.Статистика.Заголовок, ",");
	Если Поз > 0 Тогда
		Стр = Лев(Элементы.Статистика.Заголовок, Поз - 1);
		ДанныеСтроки = РазложитьСтрокуВМассивПодстрокКлиент(Стр, "/");
		Если ДанныеСтроки.Количество() = 3 Тогда
			ОбщаяСтатистикаПоФиче = "" + Формат(ДанныеСтроки[0], "ЧГ=; ЧН=0") + "/" 
				+ Формат(ДанныеСтроки[1], "ЧГ=; ЧН=0") + "/" 
				+ Формат(ДанныеСтроки[2], "ЧГ=; ЧН=0");
			ОбщаяСтатистикаПоФиче = Новый ФорматированнаяСтрока(ОбщаяСтатистикаПоФиче, Новый Шрифт(, , Истина));
			Элементы.Статистика.Заголовок = ОбщаяСтатистикаПоФиче;
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ВывестиСтатистикуКлиент()
	
	Если ЭтоЗапускИзКоманднойСтроки() Тогда
		Возврат;
	КонецЕсли;	 
	
	ОбновитьЗначенияВТаблоПеременных();
	
	Если НЕ Объект.ОбновлятьСтатистикуВДереве Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ Версия836ИлиВыше Тогда
		Возврат;
	КонецЕсли;	 
	
	ВывестиСтатистикуНаСервере(, ЗапускИзСППР);
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.VanessaEditor;
	Иначе	
		ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоТестов;
	КонецЕсли;	 
									 
КонецПроцедуры

&НаСервере
Процедура ВывестиСтатистикуНаСервере(Знач Дерево = Неопределено, Знач ЗапускИзСППР)
	
	Если Объект.ЗапускИзКоманднойСтроки И НЕ ЗапускИзСППР Тогда
		Возврат;
	КонецЕсли;	 

	Если Дерево = Неопределено Тогда
		тДерево = РеквизитФормыВЗначение("Объект").ДеревоТестов;
	Иначе	
		тДерево = Дерево;
	КонецЕсли;	 
	
	ВсегоФич       = тДерево.Строки.НайтиСтроки(Новый Структура("ТипКартинки", 1), Истина).Количество();
	ВсегоСценариев = тДерево.Строки.НайтиСтроки(Новый Структура("ТипКартинки", 2), Истина).Количество();
	ВсегоШагов     = тДерево.Строки.НайтиСтроки(Новый Структура("ТипКартинки", 3), Истина).Количество();
	
	ВсегоШаговSuccess = тДерево.Строки.НайтиСтроки(Новый Структура("ТипКартинки, Статус", 4, "Success"), Истина).Количество();
	ВсегоШаговFailed  = тДерево.Строки.НайтиСтроки(Новый Структура("ТипКартинки, Статус", 5, "Failed"),  Истина).Количество();
	ВсегоШаговPending = тДерево.Строки.НайтиСтроки(Новый Структура("ТипКартинки, Статус", 6, "Pending"), Истина).Количество();
	
	ВсегоШаговОбщее = ВсегоШагов + ВсегоШаговSuccess + ВсегоШаговFailed + ВсегоШаговPending;
	
	СтрокаВсегоШаговSuccess = Новый ФорматированнаяСтрока("" + ВсегоШаговSuccess, Новый Шрифт(, , Истина), Новый Цвет(21, 177, 14)); // Жирный, зеленый
	СтрокаВсегоШаговFailed  = Новый ФорматированнаяСтрока("" + ВсегоШаговFailed,  Новый Шрифт(, , Истина), Новый Цвет(255, 0, 0));   // Жирный, красный
	СтрокаВсегоШаговPending = Новый ФорматированнаяСтрока("" + ВсегоШаговPending, Новый Шрифт(, , Истина), Новый Цвет(255, 92, 0)); // Жирный, оранжевый
	
	ОбщаяСтрока = "";
	Если ВсегоШаговSuccess + ВсегоШаговPending + ВсегоШаговFailed > 0 Тогда
		ОбщаяСтрока = Новый ФорматированнаяСтрока(", ", СтрокаВсегоШаговSuccess, "/", СтрокаВсегоШаговFailed, "/", СтрокаВсегоШаговPending);
	КонецЕсли;

	НеРеализованныхСпипетовВсего = тДерево.Строки.НайтиСтроки(Новый Структура("АдресСнипета, ТипКартинки", "", 3), Истина).Количество() + 
							      тДерево.Строки.НайтиСтроки(Новый Структура("АдресСнипета, ТипКартинки", "", 4), Истина).Количество() + 
							      тДерево.Строки.НайтиСтроки(Новый Структура("АдресСнипета, ТипКартинки", "", 5), Истина).Количество() +
							      тДерево.Строки.НайтиСтроки(Новый Структура("АдресСнипета, ТипКартинки", "", 6), Истина).Количество();
								  
	Если НеРеализованныхСпипетовВсего > 0 Тогда
		СтрокаНеРеализованныхСпипетовВсего = Новый ФорматированнаяСтрока(
				"(" + Формат(НеРеализованныхСпипетовВсего, "ЧГ=; ЧН=0") + ")", 
				Новый Шрифт(, , Истина), Новый Цвет(255, 92, 0)); // Жирный, оранжевый
	Иначе
		СтрокаНеРеализованныхСпипетовВсего = "";
	КонецЕсли;								  
	
	ОбщаяСтатистикаПоФиче = "" + Формат(ВсегоФич, "ЧГ=; ЧН=0") + "/" + Формат(ВсегоСценариев, "ЧГ=; ЧН=0") + "/" + Формат(ВсегоШаговОбщее, "ЧГ=; ЧН=0");
	ОбщаяСтатистикаПоФиче = Новый ФорматированнаяСтрока(ОбщаяСтатистикаПоФиче, Новый Шрифт(, , Истина));
	Элементы.Статистика.Заголовок = Новый ФорматированнаяСтрока(ОбщаяСтатистикаПоФиче, СтрокаНеРеализованныхСпипетовВсего, ОбщаяСтрока);
	
	Элементы.Статистика.Подсказка = НСтр("ru='Всего фич: ';en='Features: '") + ВсегоФич + Символы.ПС +
									НСтр("ru='Всего сценариев: ';en='Scenarios: '") + ВсегоСценариев + Символы.ПС +
									НСтр("ru='Всего шагов: ';en='Steps: '") + ВсегоШаговОбщее + Символы.ПС +
									?(НеРеализованныхСпипетовВсего > 0, НСтр("ru='Не реализовано шагов: ';en='Not implemented steps: '") + НеРеализованныхСпипетовВсего, "") + 
									?(ВсегоШаговSuccess + ВсегоШаговPending + ВсегоШаговFailed > 0, 
										Символы.ПС +
										НСтр("ru='Результат выполнения шагов ';en='Steps result: '") + "(Success, Failed, Pending): " + 
										ВсегоШаговSuccess + "/" + ВсегоШаговFailed + "/" + ВсегоШаговPending + Символы.ПС + 
										НСтр("ru='Пропущено шагов: ';en='Skipped steps: '") + ВсегоШагов, ""
									 );
									 
									 
КонецПроцедуры

// { Плагины
// портировано из xUnitFor1C 4.1.1.0

&НаКлиенте
Процедура ЗагрузитьПлагины()
	Если Объект.ПлагиныЗагружены Тогда
		Возврат;
	КонецЕсли;	 
	
	Объект.Плагины = Новый Структура;
	КэшФормПлагинов = Новый Структура;
		
	КаталогПлагинов = ПолучитьПутьКПлагинам();
	
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;
	НайтиФайлыКомандаСистемы(КаталогПлагинов, СписокКаталогов, СписокФайлов, Ложь);
	ОставитьТолькоФайлыСРасширением(СписокФайлов, ".epf");
	МассивФайлов = Новый Массив;
	Для Каждого Элем Из СписокФайлов Цикл
		МассивФайлов.Добавить(Элем.Значение);
	КонецЦикла;	 
	
	ОбработчикПоискаКлиентскихПлагинов(МассивФайлов, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьНайденныеКлиентскиеПлагиныНаСервере(Знач ЗагруженныеФайлы, Знач ИдентификаторыПлагинов)
	
	Перем ЗагруженныйФайл, ИмяПлагина, ОписаниеПлагина, ОписанияПлагинов;
	
	Если ЗагруженныеФайлы.Количество() = 0 Тогда
		ОписанияПлагинов = Новый Соответствие;
	Иначе	
		ОписанияПлагинов = ПодключитьПлагиныНаСервере(ЗагруженныеФайлы, ВозможнаОптимизацияРаботыСФайлами, ЕстьЗащитаОтОпасныхДействий);
	КонецЕсли;	 
	
	Для Каждого ЗагруженныйФайл Из ЗагруженныеФайлы Цикл
		Объект.ПлагиныЗагружены = Истина;
		
		ИмяПлагина = ИдентификаторыПлагинов[ЗагруженныйФайл.Имя];
		Если ИмяПлагина = Неопределено Тогда
			ИмяПлагина = ИдентификаторыПлагинов[ЗагруженныйФайл.ПолноеИмя];
		КонецЕсли;	 
		
		ОписаниеПлагина = ОписанияПлагинов[ЗагруженныйФайл.Имя];
		Если ОписаниеПлагина = Неопределено Тогда
			ОписаниеПлагина = ОписанияПлагинов[ЗагруженныйФайл.ПолноеИмя];
		КонецЕсли;	 
		Объект.Плагины.Вставить(ОписаниеПлагина.Идентификатор, ИмяПлагина);
		КэшФормПлагинов.Вставить(ОписаниеПлагина.Идентификатор, Истина);
		
	КонецЦикла;
	
	Если Объект.ВерсияПоставки = "single" Тогда
		Объект.Плагины.Вставить("ЗапросыИзБД", "ЗапросыИзБД");
		КэшФормПлагинов.Вставить("ЗапросыИзБД", Истина);
		
		Объект.Плагины.Вставить("СериализаторMXL", "СериализаторMXL");
		КэшФормПлагинов.Вставить("СериализаторMXL", Истина);
		
		Объект.Плагины.Вставить("УтвержденияBDD", "УтвержденияBDD");
		КэшФормПлагинов.Вставить("УтвержденияBDD", Истина);
		
		Объект.Плагины.Вставить("ЗагрузчикПользовательскихНастроек", "ЗагрузчикПользовательскихНастроек");
		КэшФормПлагинов.Вставить("ЗагрузчикПользовательскихНастроек", Истина);
	КонецЕсли;	 
	
	ЗагрузкаПлагиновЗавершение();

КонецПроцедуры

&НаСервере
Функция ПодключитьПлагиныНаСервере(Знач ЗагружаемыеФайлы, Знач ВозможнаОптимизацияРаботыСФайлами, Знач ЕстьЗащитаОтОпасныхДействий)
	ОписанияПлагинов = Новый Соответствие;
	
	Для Каждого ОписаниеФайла Из ЗагружаемыеФайлы Цикл
		ФайлОбъект = Новый Файл(ОписаниеФайла.Имя);
		ИмяПлагина = ФайлОбъект.ИмяБезРасширения;
		ДопПараметры = Новый Структура;
		Попытка
			ДопПараметры.Вставить("ИмяФайла", ОписаниеФайла.ПолноеИмя);
		Исключение
			ДопПараметры.Вставить("ИмяФайла", ОписаниеФайла.Имя);
		КонецПопытки;
		
		ДопПараметры.Вставить("ВозможнаОптимизацияРаботыСФайлами", ВозможнаОптимизацияРаботыСФайлами);
		
		ПодключитьФайлОбработкиНаСервере(ОписаниеФайла.Хранение, ИмяПлагина,, ЕстьЗащитаОтОпасныхДействий, ДопПараметры);
		
		Попытка
			ОбъектОбработки = ВнешниеОбработки.Создать(ИмяПлагина, Ложь);
			ОбъектОбработки.Инициализация(ЭтотОбъектНаСервере());
			ОписанияПлагинов.Вставить(ОписаниеФайла.Имя, ОбъектОбработки.ОписаниеПлагина(Объект.ТипыПлагинов));
		Исключение
			СообщитьПользователюСеврер("Возникла ошибка при загрузке плагина: " + ОписаниеФайла.Имя
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(ОписанияПлагинов);
КонецФункции

&НаСервере
Функция ПолучитьОписанияПлагиновПоТипуНаСервере(Знач ТипПлагина)
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	Результат = ОбъектНаСервере.ПолучитьОписанияПлагиновПоТипу(ТипПлагина);
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Процедура ПодключитьФайлОбработкиНаСервере(Знач АдресХранилища, Знач ИдентификаторОбработки, ЭтоОтчет = Ложь, 
		ПараметрЕстьЗащитаОтОпасныхДействий = Ложь, ДопПараметры = Неопределено)
		
	ПодключитьВнешнююОбработкуСервер(АдресХранилища, ПараметрЕстьЗащитаОтОпасныхДействий, ДопПараметры);
КонецПроцедуры

&НаСервере
Функция ЭтотОбъектНаСервере()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКПлагинам()
	Путь = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "plugins/";
	Возврат Путь;
КонецФункции

// } Плагины

&НаКлиенте
Функция НайтиТЧВДаннойФорме(ИмяТЧ, НужнаяФорма, ИскатьПоИмени)
	Если НужнаяФорма = Неопределено Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не смогли найти таблицу <%1> в активном окне."),
			ИмяТЧ
		);
	КонецЕсли;	 
	Если ИмяТЧ = "" Тогда
		ТЧ = НужнаяФорма.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"));
	Иначе	
		Если ИскатьПоИмени Тогда
			ТЧ = НужнаяФорма.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"), , ИмяТЧ);
		Иначе	
			ТЧ = НужнаяФорма.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"), ИмяТЧ);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ТЧ = Неопределено Тогда
		// попытаемся найти таблицу с другим именем
		Если ИмяТЧ = "TypeTree"  Тогда
			ТЧ = НужнаяФорма.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"),, "ValueList");
		ИначеЕсли ИмяТЧ = "ValueList" Тогда
			ТЧ = НужнаяФорма.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"),, "TypeTree");
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ТЧ;
КонецФункции	

&НаКлиенте
Процедура УдалитьИзПолучитьКлиентаТестированияПрофиль(ПодключенныеTestClient, ИмяTestClient)
	Массив = Новый Массив;
	
	Ид = -1;
	Для Каждого Профиль Из ПодключенныеTestClient Цикл
		Ид = Ид + 1;
		Если Профиль.Имя = ИмяTestClient Тогда
			Массив.Добавить(Ид);
		КонецЕсли;	 
	КонецЦикла;	
	
	Для Ккк = 0 По Массив.Количество() - 1 Цикл
		ИдПрофиля = Массив[Массив.Количество() - 1 - Ккк];
		ПодключенныеTestClient.Удалить(ИдПрофиля);
	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КешСнипетовВХранилищаЗначений(СтруктураПараметров)
	UID = Новый УникальныйИдентификатор;
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СтруктураПараметров.КешСнипетов, UID);
	СтруктураПараметров.Вставить("КешСнипетов", АдресВременногоХранилища);
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура КешСнипетовИзХранилищаЗначений(СтруктураПараметров)
	Если СтруктураПараметров.КешСнипетов = Неопределено Тогда
		СтруктураПараметров.КешСнипетов = Новый Соответствие;
	Иначе
		АдресВременногоХранилища = СтруктураПараметров.КешСнипетов;
		СтруктураПараметров.Вставить("КешСнипетов", ПолучитьИзВременногоХранилища(АдресВременногоХранилища));
	КонецЕсли;	 
КонецПроцедуры 

&НаСервере
Процедура СделатьПереводСгенерированногоТекстаGherkinСервер(ДанныеПеревода)
	КешСнипетовИзХранилищаЗначений(ДанныеПеревода.СтруктураПараметров);
	
	ДвДанныеvbFeatureReader = ДанныеПеревода.ДвДанныеvbFeatureReader;
	ВременноеИмяФайла = Неопределено;
	Если Объект.ВерсияПоставки = "standart" Тогда
		FeatureReader = СоздатьFeatureReader(Объект.КаталогИнструментов, ДвДанныеvbFeatureReader, ВременноеИмяФайла);
	Иначе	
		ОбъектСервер = РеквизитФормыВЗначение("Объект");
		FeatureReader = ОбъектСервер;
	КонецЕсли;	 
	
	FeatureReader.СделатьПереводТекстаGherkin(ДанныеПеревода);
	UID = Новый УникальныйИдентификатор;
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеПеревода.ТаблицаПеревода, UID);
	ДанныеПеревода.Вставить("ТаблицаПеревода", АдресВременногоХранилища);
	
	КешСнипетовВХранилищаЗначений(ДанныеПеревода.СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФайлыПеревода(ЯзыкФичи = Неопределено)
	Если ЯзыкФичи = "ru" Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если КешДанныхПереводовШагов <> Неопределено Тогда
		Возврат КешДанныхПереводовШагов; 
	КонецЕсли;
	
	Если МодульПереводШагов = Неопределено Тогда
		ПодключитьБиблиотекуПереводШагов();
	КонецЕсли;	 
	
	МассивЯзыков = Новый Массив;
	Если ЯзыкФичи <> Неопределено Тогда
		МассивЯзыков.Добавить(ЯзыкФичи);
	Иначе	
		МассивЯзыков.Добавить("en");
		МассивЯзыков.Добавить("ro");
		МассивЯзыков.Добавить("de");
		МассивЯзыков.Добавить("lv");
		МассивЯзыков.Добавить("it");
		МассивЯзыков.Добавить("pl");
		МассивЯзыков.Добавить("vi");
	КонецЕсли;	 
	
	ДанныеМакетовШагов = Новый Структура;
	ДанныеМакетовШагов = МодульПереводШагов.ДанныеМакетовШагов(МассивЯзыков, Объект.ВерсияПоставки);
	
	Соответствие = Новый Соответствие;
	
	Если МассивЯзыков.Найти("en") <> Неопределено Тогда
		Соответствие.Вставить("en", ДанныеМакетовШагов.en);
	КонецЕсли;	 
	Если МассивЯзыков.Найти("ro") <> Неопределено Тогда
		Соответствие.Вставить("ro", ДанныеМакетовШагов.ro);
	КонецЕсли;	 
	Если МассивЯзыков.Найти("de") <> Неопределено Тогда
		Соответствие.Вставить("de", ДанныеМакетовШагов.de);
	КонецЕсли;	 
	Если МассивЯзыков.Найти("lv") <> Неопределено Тогда
		Соответствие.Вставить("lv", ДанныеМакетовШагов.lv);
	КонецЕсли;	 
	Если МассивЯзыков.Найти("it") <> Неопределено Тогда
		Соответствие.Вставить("it", ДанныеМакетовШагов.it);
	КонецЕсли;	 
	Если МассивЯзыков.Найти("pl") <> Неопределено Тогда
		Соответствие.Вставить("pl", ДанныеМакетовШагов.pl);
	КонецЕсли;	 
	Если МассивЯзыков.Найти("vi") <> Неопределено Тогда
		Соответствие.Вставить("vi", ДанныеМакетовШагов.vi);
	КонецЕсли;	 
	
	КешДанныхПереводовШагов = Соответствие;
	
	Возврат Соответствие;
КонецФункции	

&НаКлиенте
Процедура СделатьПереводСгенерированногоТекстаGherkin()
	Если Объект.ЯзыкГенератораGherkin = "ru" Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Объект.ЯзыкГенератораGherkin) Тогда
		Возврат;
	КонецЕсли;	 
	
	Перевод = ПеревестиТекст(Объект.СгенерированныйСценарий);
	
	Объект.СгенерированныйСценарий = Перевод;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПодготовитьШаблонКИспользованиюВРегулярке(Знач Шаблон, Знач ДляЛинукс, Знач СпецСимволы = Неопределено)

	// Экранируем все, кроме звездочки. Ее будем трактовать по-своему.
	
	Если СпецСимволы = Неопределено Тогда
		
		СпецСимволы = СпецСимволыРегулярныхВыражений(ДляЛинукс);
		
	КонецЕсли;	
	
	Если ДляЛинукс Тогда
		Шаблон = СтрЗаменить(Шаблон, "&", "&amp;"); 
		Шаблон = СтрЗаменить(Шаблон, "<", "&lt;"); 
		Шаблон = СтрЗаменить(Шаблон, ">", "&gt;"); 
	КонецЕсли;	 
	
	Для Каждого СпецСимвол Из СпецСимволы Цикл
		Если Найти(Шаблон, СпецСимвол) > 0 Тогда
			Шаблон = СтрЗаменить(Шаблон, СпецСимвол, "\" + СпецСимвол); 
		КонецЕсли;	
	КонецЦикла;
	
	// Трактуем * по-нашему.
	Шаблон = СтрЗаменить(Шаблон, "*", "[\S\s]*");
	
	Возврат Шаблон;
	
КонецФункции

// взято из https://infostart.ru/public/464971/
&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьСтрокуRegExpLinux(Знач Строка, Знач Фасет)
	
    Чтение = Новый ЧтениеXML;
    Чтение.УстановитьСтроку(
                "<Model xmlns=""http://v8.1c.ru/8.1/xdto"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Model"">
                |<package targetNamespace=""sample-my-package"">
                |<valueType name=""testtypes"" base=""xs:string"">
                |<pattern>" + СтрЗаменить(СтрЗаменить(Фасет, """", "&quot;"), Символы.ПС, "~ПереводСтроки~") + "</pattern>
                |</valueType>
                |<objectType name=""TestObj"">
                |<property xmlns:d4p1=""sample-my-package"" name=""TestItem"" type=""d4p1:testtypes""/>
                |</objectType>
                |</package>
                |</Model>");
	
	#Если ВебКлиент Тогда
    Модель = Неопределено;
	#Иначе	
	Попытка
	    Модель = ФабрикаXDTO.ПрочитатьXML(Чтение);
	Исключение
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьЛогВЖРОшибкаСервер("VanessaAutomation.ПроверитьСтрокуRegExpLinux",
			"<" + Строка + ">" + Символы.ПС + "<" + Фасет + ">" + Символы.ПС + СообщениеОбОшибке);
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	#КонецЕсли
    МояФабрикаXDTO = Новый ФабрикаXDTO(Модель);
    Пакет = МояФабрикаXDTO.Пакеты.Получить("sample-my-package");
    Тест = МояФабрикаXDTO.Создать(Пакет.Получить("TestObj"));

    Попытка
        Тест.TestItem = СтрЗаменить(Строка, Символы.ПС, "~ПереводСтроки~");
        Возврат Истина;
    Исключение
        Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьФлагОстановкаПриВозникновенииОшибки()
	Если Объект.ОстановкаПриВозникновенииОшибки Тогда
		СообщитьПользователю(Локализовать("Установлен флаг <Остановка при возникновении ошибки>. Выполнение следующих сценариев/шагов отменено."));
		ПрекратитьВыполнениеВсехСценариев = Истина;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТекстОшибки(ТекстОшибки, ПроизвольныеЗначения, НомерСтрокиДерева, ДопПараметры = Неопределено)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КаталогИнструментов", Объект.КаталогИнструментов);
	ПараметрыФормы.Вставить("ТекстОшибки", ТекстОшибки);
	ПараметрыФормы.Вставить("ДанныеОшибки", ПроизвольныеЗначения);
	ПараметрыФормы.Вставить("НомерСтрокиДерева", НомерСтрокиДерева);
	Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ВозможнаАктуализацияШагаВРедакторе") Тогда
		ПараметрыФормы.Вставить("ВозможнаАктуализацияШагаВРедакторе", ДопПараметры.ВозможнаАктуализацияШагаВРедакторе);
	КонецЕсли;	
	ОткрытьФорму(ПолучитьИмяОбработкиVA() + ".Форма.ДеталиОшибки", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьЭлементФормыИзКешЕслиЭтоВозможно(ИмяРеквизита)
	Если Не ОбъектКонтекст.Свойство("АктивнаяТаблицаTestClient") Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если ИмяРеквизита = ОбъектКонтекст.АктивнаяТаблицаTestClient.ИмяТаблицы Тогда
		Возврат ОбъектКонтекст.АктивнаяТаблицаTestClient.Значение; 
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция ТекстСообщенийПользователю()
	Если МодульСообщенийПользователю = Неопределено Тогда
		Возврат Новый Соответствие; 
	КонецЕсли;	 
	
	Если МодульСообщенийПользователю = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат МодульСообщенийПользователю.ДанныеПереводаСообщений(Объект.ВерсияПоставки, ЭтаФорма);
КонецФункции	 

&НаСервереБезКонтекста
Процедура ПроверкаВозможностиОптимизацииРаботыСФайлами(ДопПараметры)
	Файл = Новый Файл(ДопПараметры.ПроверкаОптимизацииРаботыСФайлами);
	Если Файл.Существует() Тогда

		ДопПараметры.ВозможнаОптимизацияРаботыСФайлами = Истина;
		ТекстовыйДокумент = Новый ТекстовыйДокумент;

		Попытка
			ТекстовыйДокумент.Прочитать(Файл.ПолноеИмя);
			ТекстовыйДокумент.Записать(Файл.ПолноеИмя);
		Исключение
			ОписаниеОшибкиДляОтладки = ОписаниеОшибки();
			ДопПараметры.ВозможнаОптимизацияРаботыСФайлами = Ложь;
		КонецПопытки;

	КонецЕсли;
КонецПроцедуры 

&НаСервере
Процедура СерверныеВызовыПослеОткрытииФормы(ДопПараметры)
	ЗаполнитьКаталогИнструментовЕслиОнПустой();
	
	КешВерсияОбработки = ПолучитьВерсиюОбработкиСервер();
	ДопПараметры.Вставить("КешВерсияОбработки", КешВерсияОбработки);
	
	ЕстьКонстантаВКонфигурацииПутьКVA = ЕстьКонстантаВКонфигурацииСервер("ПутьКVanessaAutomation");
	ДопПараметры.Вставить("ЕстьКонстантаВКонфигурацииПутьКVA", ЕстьКонстантаВКонфигурацииПутьКVA);
	
	ВосстановитьВсеНастройкиСервер(ДопПараметры);
	
	ПрефиксИнструментаДляСохраненияНастроек = ПолучитьПрефиксИнструмента(Объект.РежимСамотестирования, Объект.ВерсияПоставки, ЭтоРежимОбученияСервер());
	ДопПараметры.Вставить("ПрефиксИнструментаДляСохраненияНастроек", ПрефиксИнструментаДляСохраненияНастроек);
	
	ВосстановитьНастройкиИзХранилищаКеш();
	
	ИДДляОбщегоСохраненияНастроек = ПолучитьИДСохраненияОбщихНастроек(Объект.РежимСамотестирования, Объект.ВерсияПоставки, ЭтоРежимОбученияСервер());
	ДопПараметры.Вставить("ИДДляОбщегоСохраненияНастроек", ИДДляОбщегоСохраненияНастроек);
	
	ПроверкаВозможностиОптимизацииРаботыСФайлами(ДопПараметры);
	
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ОбъектСервер.ТекстСообщенийПользователю = ДопПараметры.ТекстСообщенийПользователю;
	
	Если ОбъектСервер.ИспользоватьРедакторVanessaEditor И ОбъектСервер.ОткрыватьНачальнуюСтраницуПриЗапуске Тогда
		НадоУстановитьПустойПуть = Истина;
		Если ДопПараметры.Свойство("ПараметрыЗапуска") И НЕ ДопПараметры.ЗапускИзСППР Тогда
			НадоУстановитьПустойПуть = Ложь;
		КонецЕсли;	 
		
		Если НадоУстановитьПустойПуть Тогда
			ОбъектСервер.КаталогФич = "";
		КонецЕсли;	 
	КонецЕсли;	 
	
	ЗначениеВРеквизитФормы(ОбъектСервер, "Объект");
	
	Если Объект.ОтображатьЗакладкиСверху Тогда
		Элементы.ФункциональностьЗакладки.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьВидимостьЭлементовПослеЗагрузкиНастроек()
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УниверсальноеПолноеИмяФайла(Знач ПолноеИмяФайлаИлиФайл, Знач ВНРегистр = Ложь)
	Если ТипЗнч(ПолноеИмяФайлаИлиФайл) = Тип("Файл") Тогда
		УниверсальноеПолноеИмя = СтрЗаменить(ПолноеИмяФайлаИлиФайл.ПолноеИмя, "\", "/");
	Иначе	
		УниверсальноеПолноеИмя = СтрЗаменить(ПолноеИмяФайлаИлиФайл, "\", "/");
	КонецЕсли;

	Если ВНРегистр Тогда
		УниверсальноеПолноеИмя = НРег(УниверсальноеПолноеИмя);
	КонецЕсли;

	Возврат УниверсальноеПолноеИмя;
КонецФункции

&НаКлиенте
Функция ЭтоТонкийКлиент()
	Значение = Истина;
	#Если ТолстыйКлиентУправляемоеПриложение Тогда	
		Значение = Ложь;
	#КонецЕсли	
	
	Возврат Значение; 
КонецФункции

&НаКлиенте
Функция ЭтоМенеджерТестирования()
	
	Попытка
		Значение = Тип("ТестируемоеПриложение") <> Неопределено;
	Исключение
		Значение = Ложь;
	КонецПопытки;
	
	Возврат Значение; 
	
КонецФункции

&НаКлиенте
Функция ВстроенныеБиблиотеки()
	Массив = ВстроенныеБиблиотекиФорма.ВыгрузитьЗначения();
	
	Если НЕ VAОткрытаКакВнешняяОбработка Тогда
		Для Ккк = 0 По Массив.Количество() - 1 Цикл
			Массив[Ккк] = СтрЗаменить(Массив[Ккк], "ВнешняяОбработка.", "Обработка.");
		КонецЦикла;	
	КонецЕсли;	 
	
	Возврат Массив;
КонецФункции	 

&НаСервереБезКонтекста
Функция ВычислитьОсобенностиРежимаСовместимости(КорректнаяРаботаПолеHTMLДокумента, РежимСовместимостиБольшеЧем837)
	ТекущийРежимСовместимости = Неопределено;
	
	Попытка
		ТекущийРежимСовместимости = Вычислить("Метаданные.РежимСовместимости");
	Исключение
		КорректнаяРаботаПолеHTMLДокумента = Ложь;
		РежимСовместимостиБольшеЧем837 = Ложь;
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости;
	Исключение
		КорректнаяРаботаПолеHTMLДокумента = Ложь;
		РежимСовместимостиБольшеЧем837 = Ложь;
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		Если ТекущийРежимСовместимости = РежимСовместимости.Версия8_1 Тогда
			КорректнаяРаботаПолеHTMLДокумента = Ложь;
			РежимСовместимостиБольшеЧем837 = Ложь;
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимСовместимости.Версия8_2_13 Тогда
			КорректнаяРаботаПолеHTMLДокумента = Ложь;
			РежимСовместимостиБольшеЧем837 = Ложь;
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимСовместимости.Версия8_2_16 Тогда
			КорректнаяРаботаПолеHTMLДокумента = Ложь;
			РежимСовместимостиБольшеЧем837 = Ложь;
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимСовместимости.Версия8_3_1 Тогда
			КорректнаяРаботаПолеHTMLДокумента = Ложь;
			РежимСовместимостиБольшеЧем837 = Ложь;
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимСовместимости.Версия8_3_2 Тогда
			КорректнаяРаботаПолеHTMLДокумента = Ложь;
			РежимСовместимостиБольшеЧем837 = Ложь;
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимСовместимости.Версия8_3_3 Тогда
			КорректнаяРаботаПолеHTMLДокумента = Ложь;
			РежимСовместимостиБольшеЧем837 = Ложь;
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимСовместимости.Версия8_3_4 Тогда
			КорректнаяРаботаПолеHTMLДокумента = Ложь;
			РежимСовместимостиБольшеЧем837 = Ложь;
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимСовместимости.Версия8_3_5 Тогда
			КорректнаяРаботаПолеHTMLДокумента = Ложь;
			РежимСовместимостиБольшеЧем837 = Ложь;
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимСовместимости.Версия8_3_6 Тогда
			КорректнаяРаботаПолеHTMLДокумента = Ложь;
			РежимСовместимостиБольшеЧем837 = Ложь;
		КонецЕсли;	 
	Исключение
		КорректнаяРаботаПолеHTMLДокумента = Ложь;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции	

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ЗакрытьФормуVA = Истина;
		Если ДополнительныеПараметры.ВызовЧерезПерезапуститьКакМенеджерТестирования Тогда 
			ПерезапускВРежимеТестМенеджер();
		Иначе
			Если Открыта() Тогда
				Закрыть();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьМодульSikuliXСевер()
	ПараметрыФормы = Новый Структура;
	Если МодульSikuliXСевер = Неопределено Тогда
		МодульSikuliXСевер = ПолучитьФорму(ПолучитьИмяОбработкиVA() + ".Форма.SikuliXСервер", ПараметрыФормы);
		ЗарегистрироватьМодульДляОтключения(МодульSikuliXСевер);
	КонецЕсли;	 
	
	Возврат МодульSikuliXСевер;
КонецФункции	 

&НаКлиенте
Процедура ОстановитьSikuliXСервер(ДопПараметры = Неопределено)
	Если SikuliXСеверЗапущен = Истина Тогда
		ПолучитьМодульSikuliXСевер().ОстановитьSikuliXСервер(ДопПараметры);
		SikuliXСеверЗапущен = Ложь;
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Функция ВыполнитьSikuliСкриптЧерезSikuliXСервер(СтрокаКоманды, ЖдатьОкончания, ЗапускЧерезСкрипт, ОписаниеОшибки, ДопПараметры)
	ЗапуститьSikuliXСевер();
	Возврат ПолучитьМодульSikuliXСевер().ВыполнитьСкрипт(СтрокаКоманды, ЖдатьОкончания, ЗапускЧерезСкрипт, ОписаниеОшибки, ДопПараметры);	
КонецФункции	 

&НаКлиенте
Функция ЭтоОпределениеСценария(Знач Стр)
	// строка должна быть с нижнем регистре
	Если Найти(Стр, "сценарий:") = 1 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "scenario:") = 1 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "scenariu:") = 1 Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция ЭтоОпределениеСтруктурыСценария(Знач Стр)
	// строка должна быть с нижнем регистре
	Если Найти(Стр, "структура сценария:") = 1 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "scenario outline:") = 1 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "structura scenariu:") = 1 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "structură scenariu:") = 1 Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Процедура ЗапомнитьДанныеФайлаПриСохраненииМакета(ИмяФайла)
	Если НЕ ОбъектКонтекст.Свойство("_ДанныеФайловПриСохраненииМакета") Тогда
		_ДанныеФайловПриСохраненииМакета = Новый Соответствие;
		ОбъектКонтекст.Вставить("_ДанныеФайловПриСохраненииМакета", _ДанныеФайловПриСохраненииМакета);
	Иначе	
		_ДанныеФайловПриСохраненииМакета = ОбъектКонтекст._ДанныеФайловПриСохраненииМакета;
	КонецЕсли;
	
	_ДанныеФайловПриСохраненииМакета.Вставить(ИмяФайла, Истина);
КонецПроцедуры 

&НаКлиенте
Функция ФайлМакетаВФайлахКоторыеИспользовалисьРанееВЭтомЖеСценарии()
	Если НЕ ОбъектКонтекст.Свойство("_ДанныеФайловПриСохраненииМакета") Тогда
		Возврат Неопределено;
	КонецЕсли;	 	
	
	_ДанныеФайловПриСохраненииМакета = ОбъектКонтекст._ДанныеФайловПриСохраненииМакета;
	Для Каждого Элем Из _ДанныеФайловПриСохраненииМакета Цикл
		ИмяФайла = Элем.Ключ;
		Если ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
			Возврат ИмяФайла; 
		КонецЕсли;	 
	КонецЦикла;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция СоздатьФайлПроверкаОптимизацииРаботыСФайлами()
	#Если НЕ ВебКлиент Тогда
	
	ИмяФайла = ПолучитьИмяВременногоФайла("check");
	ЗТ = Новый ЗаписьТекста(ИмяФайла, "UTF-8",, Истина); 
	ЗТ.ЗаписатьСтроку("check"); 
	ЗТ.Закрыть();
	
	Возврат ИмяФайла; 
	
	#КонецЕсли
КонецФункции	 

&НаСервереБезКонтекста
Процедура УдалитьФайлыСервер(Знач ИмяФайла)
	УдалитьФайлы(ИмяФайла);
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ФайлСуществуетСервер(Знач ИмяФайла)
	Файл = Новый Файл(ИмяФайла); 
	Возврат Файл.Существует(); 
КонецФункции

&НаСервереБезКонтекста
Функция ФайлВремяИзмененияСервер(Знач ИмяФайла)
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.ПолучитьВремяИзменения();
КонецФункции	 

&НаСервереБезКонтекста
Процедура НайтиФайлыСервер(Знач Путь, МассивКаталогов, МассивФайлов, Знач ИскатьВПодкаталогах, Знач ИскомоеИмяФайла, Знач ФильтрРасширение)
	Если ИскомоеИмяФайла <> Неопределено Тогда
		НайденныеФайлы = НайтиФайлы(Путь, ИскомоеИмяФайла, ИскатьВПодкаталогах);
	ИначеЕсли ФильтрРасширение <> Неопределено Тогда
		НайденныеФайлы = НайтиФайлы(Путь, ФильтрРасширение, ИскатьВПодкаталогах);
	Иначе	
		НайденныеФайлы = НайтиФайлы(Путь, "*", ИскатьВПодкаталогах);
	КонецЕсли;	 
	
	Для Каждого Файл Из НайденныеФайлы Цикл
		Если Файл.ЭтоКаталог() Тогда
			МассивКаталогов.Добавить(Файл.ПолноеИмя);
		Иначе	
			МассивФайлов.Добавить(Файл.ПолноеИмя);
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры 

&НаКлиенте
Процедура ИнициализацияПеременныхМодуляФормы()
	
	Если ВыполняласьИнициализацияФормы = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	РежимСовместимостиПозволяетИспользоватьНовыеСтроковыеФункции = ПолучитьЗначениеДополнительногоПараметраИУдалить("РежимСовместимостиПозволяетИспользоватьНовыеСтроковыеФункции");
	
	ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок = Ложь;
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.6.1977") Тогда
		Если РежимСовместимостиПозволяетИспользоватьНовыеСтроковыеФункции Тогда
			ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ФреймворкЗапущенВWebКлиенте = Ложь;
	#Если ВебКлиент Тогда
	ФреймворкЗапущенВWebКлиенте = Истина;
	#КонецЕсли
	
	ЭтоLinux = Ложь;
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 
		ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64
		ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86
		ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда 
		ЭтоLinux = Истина;
		ПроверитьCentOS7(СистемнаяИнформация);
	Иначе
		ЭтоCentOS7 = Ложь;
	КонецЕсли;
	
	#Если Клиент Тогда
		СписокШаговБезСкриншота = Новый Массив;
	#КонецЕсли	
	
	ЭтоТонкийКлиент = ЭтоТонкийКлиент();
	
	ФормаVanessaAutomationОткрылась = Ложь;
	СработалиВсеАсинхронныеОбработчикиФормыПриОткрытии = Ложь;
	ТаблицаОбработокДляОтладки = Новый Соответствие;
	
	ВыполнятьСценарииАсинхронно = Истина;
	
	ШагСтрокДляМодуля         = 10000;
	ВсёЕщёИдётВыполнениеШагов = 0;
	
	Если ВыполнениеСценариевБезОткрытияФормы = Неопределено Тогда
		ВыполнениеСценариевБезОткрытияФормы = Ложь;
	КонецЕсли;	 
	
	Если ВыполнитьСценарииСЧтениемПараметровИзКоманднойСтроки = Неопределено Тогда
		ВыполнитьСценарииСЧтениемПараметровИзКоманднойСтроки = Ложь;
	КонецЕсли;	 
	
	Если ФичаФайлПереданТекстом = Неопределено Тогда
		ФичаФайлПереданТекстом = Ложь;
	КонецЕсли;	 
	
	Если РедакторБылПроинициализирован = Неопределено Тогда
		РедакторБылПроинициализирован = Ложь;
	КонецЕсли;	 
	
	ВерсияРедактора = ПолучитьЗначениеДополнительногоПараметраИУдалить("ВерсияРедактора");
	
	Если Объект.ВерсияПоставки = "single" Тогда
		ВстроенныеБиблиотекиФорма = ПолучитьЗначениеДополнительногоПараметраИУдалить("ВстроенныеБиблиотекиФорма");
		ДанныеТекстВстроенныхСценариевСервер = ПолучитьЗначениеДополнительногоПараметраИУдалить("ДанныеТекстВстроенныхСценариевСервер");
	Иначе
		ВстроенныеБиблиотекиФорма = Новый СписокЗначений;
	КонецЕсли;
	
	ЕстьЗащитаОтОпасныхДействий = ПолучитьЗначениеДополнительногоПараметраИУдалить("ЕстьЗащитаОтОпасныхДействий");
	ЕстьПоддержкаНемодальныхФорм = ПолучитьЗначениеДополнительногоПараметраИУдалить("ЕстьПоддержкаНемодальныхФорм");
	ЗапрещеныСинхронныеВызовы = ПолучитьЗначениеДополнительногоПараметраИУдалить("ЗапрещеныСинхронныеВызовы");
	ИнициализироватьVanessaEditorНаКлиенте = ПолучитьЗначениеДополнительногоПараметраИУдалить("ИнициализироватьVanessaEditorНаКлиенте");
	МакетШаблонПеревода = ПолучитьЗначениеДополнительногоПараметраИУдалить("МакетШаблонПеревода");
	
	МестоположениеБиблиотекиJavaScript = ПолучитьЗначениеДополнительногоПараметраИУдалить("МестоположениеБиблиотекиJavaScript");
	МестоположениеВнешнейКомпонентыДляCentOS = ПолучитьЗначениеДополнительногоПараметраИУдалить("МестоположениеВнешнейКомпонентыДляCentOS");
	МестоположениеВнешнейКомпонентыДляСкриншотов = ПолучитьЗначениеДополнительногоПараметраИУдалить("МестоположениеВнешнейКомпонентыДляСкриншотов");
	МестоположениеКлючевыеСловаGherkin = ПолучитьЗначениеДополнительногоПараметраИУдалить("МестоположениеКлючевыеСловаGherkin");
	
	РежимСовместимостиБольшеИлиРавен837 = ПолучитьЗначениеДополнительногоПараметраИУдалить("РежимСовместимостиБольшеИлиРавен837");
	РежимСовместимостиКорректноАктивизируетПолеHTMLДокумента = ПолучитьЗначениеДополнительногоПараметраИУдалить("РежимСовместимостиКорректноАктивизируетПолеHTMLДокумента");
	
	ТекущийTestclientЭтоWebКлиент = Ложь;
	ПроисходилЗапускTescClient = Ложь;
	НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Ложь;
	ЗакрытьФормуVA = Ложь;
	ОстановитьВыполнениеШагов = Ложь;
	ВключенРежимОбучения = Ложь;
	НадоОбновитьДанныеРедактораПриПереходеИзДерева = Истина;
	МассивСостоянияКонтекстовДоВыполненияШага = Новый Массив;
	ВозможноИспользованиеVanessaEditor = Истина;
	ЗначенияЭлементовТекущегоОкнаVanessaEditor = Новый Соответствие;
	ИгнорироватьИзмененияVanessaEditor = Ложь;
	ВыполнениеДиапазонаШаговVanessaEditor = Ложь;
	ТекущаяПозицияVanessaEditor = Неопределено;
	УстановленыБрейкПоинты = Ложь;
	ЕстьБрейкпоинтыVanessaEditorВиджеты = Ложь;
	ШагиСОшибкамиVanessaEditor = Новый Массив;
	ПодключенныеEPF = Новый Соответствие;
	ДанныеОшибокVanessaEditor = Новый Соответствие;
	НастройкиВидимостиКнопокКоманднойПанелиРедактора = Новый Массив;
	НадоВыполнитьУстановкуГорячихКлавишКнопокКоманднойПанелиРедактора = Истина;
	ДанныеВкладокРедактора = Новый Соответствие;
	ОстановкаНаПроблемномШаге = Ложь;
	ЗапроситьИмяФайлаПриСохраненииФайлаВРедакторе = Ложь;
	ПлатформаКорректноОпределяетРазмерМакетаВТонкомКлиенте = Неопределено;
	СохранениеМакетовВФайлПриЧтенииДанных = Истина;
	ИдетЗаписьДействийПользователя = Ложь;
	БылаВыполненаТихаяУстановкаКомпоненты = Ложь;
	ВыполненаОбработкаЗавершенияВыполненияСценариев = Ложь;
	ПрекратитьВыполнениеСценариевДаннойФичи = Ложь;
	ЗапоминатьЗначенияПеременыхПриПодстановкеВШаг = Ложь;
	КешСнипетовНаКлиенте = Новый Соответствие;
	ИменаНайденныхEpfНаКлиенте = Новый Соответствие;
	НадоУстановитьСписокШаговVanessaEditor = Истина;
	НадоЗарегистрироватьОшибкуИзСекцииИсключение = Ложь;
	НужноОжидатьОкончанияОзвучкиШага = Ложь;
	ШагДляКоторогоЗапущенаОзвучка = -1;
	ДанныеСекцииПеременныхФич = Новый Соответствие;
	ЗаполненыДанныеДляВыполненияОдногоШага = Ложь;
	ПортыКоторыеСчиталисьЗанятыми = Новый Соответствие;
	ОжиданиеСобытияЧтенияОтКомпоненты = Ложь;
	БылоПодключениеГорячихКлавиш = Ложь;
	БылоВыведеноСообщениеОЗавершенииСценариев = Ложь;
	Ванесса = ЭтаФорма;
	МодулиДляОтключения = Новый Массив;
	глЗавершениеРаботы = Ложь;
	НадоОбновитьСтраницуWelcome = Ложь;
	НадоПоказатьПодсказкуРекомендуетсяСохранитьНастройки = Ложь;
	КешИДВоспроизведенияMp3 = Новый Соответствие;
	ИмяИсполняемогоФайлаТонкийКлиент = "1cv8c";
	ИмяИсполняемогоФайлаТолстыйКлиент = "1cv8";
	БылВызовУдалитьСтрокиТаблицаИзвестныхStepDefinitionКоторыеНеОбрабатывались = Ложь;
	ИдШагаДляКоторогоВыполнялсяСкриншотБраузера = Неопределено;
	ИмяФайлаОстановкаВыполненияСценария = Неопределено;
	НомерПопыткиВыполненияСценария = 0;
	ЗакрыватьСистемныеДиалогиЕслиПослеИзЗакрытияМожноПродолжитьВыполнениеСценария = Истина;
	ОкнаДляКоторыхНеНужноОтключатьОбновлениеТекстаРедактирования = ОкнаДляКоторыхНеНужноОтключатьОбновлениеТекстаРедактирования();
	
	Если ТипЗнч(Объект.ДополнительныеПараметры) = Тип("Структура") Тогда
		Если Объект.ДополнительныеПараметры.Свойство("КешПараметровЗапуска") Тогда
			МодульОбщегоНазначенияVA().УстановитьКеш(Объект.ДополнительныеПараметры.КешПараметровЗапуска);
			Объект.ДополнительныеПараметры.Удалить("КешПараметровЗапуска");
		КонецЕсли;	
	КонецЕсли;
	
	МодульОбщегоНазначенияVA().УстановитьПлоскуюСтрутуруПараметровЗапуска(ЗначениеДополнительногоПараметра("СтруктураОбщихНастроек"));
	УдалитьДополнительныйПараметр("СтруктураОбщихНастроек");
	
	ЗапускИзСППР = ЗначениеПараметраЗапуска("SPPR", Ложь);
	Объект.ЗапускИзКоманднойСтроки = ЗначениеПараметраЗапуска("StartFeaturePlayer", Ложь);
	ОткрываласьФормаБиблиотекиШагов = Ложь;
	ОткрываласьФормаРедактораТаблиц = Ложь;
	ОткрываласьФормаСозданияТестовыхДанных = Ложь;
	БылоПрикреплениеФайловКШагам = Ложь;
	БылиВыполненыНастройкиПриЗаписиИнтерактивнойСправки = Ложь;
	СпецСимволыРегулярныхВыражений = СпецСимволыРегулярныхВыражений(Ложь);
	СпецСимволыРегулярныхВыраженийДляЛинукс = СпецСимволыРегулярныхВыражений(Истина);
	ВыполнитьПослеОткрытияФормы2 = Ложь;
	ВыполнитьИнициализироватьVanessaEditorКлиент2 = Ложь;
	Если ЭтоПервыйЗапускVA = Неопределено Тогда
		ЭтоПервыйЗапускVA = Ложь;
	КонецЕсли;
	НужноОчиститьВременныйКаталогVanessaEditor = Ложь;
	
	НастройкиTeamCity = НастройкиTeamCity();
	НастройкиTeamCity.Используется = ЗначениеПараметраЗапуска("RunFromTeamCity", Ложь);
	НастройкиTeamCity.IDПотока = ЗначениеПараметраЗапуска("TeamCityTag", "");
	
	// Реквизит формы сохраняетс в глобальной переменной, чтобы не сериализоваться
	глРеквизитТекстStopVideoRec = ПолучитьЗначениеДополнительногоПараметраИУдалить("РеквизитТекстStopVideoRec");
	
	ТаблицаУжеСуществующихСценариев = Новый Массив;
	Брейкпоинты                     = Новый Массив;
	НайденныеПроблемы               = Новый Массив;

	ДанныеВерсийFeatureИмяФайла = Новый Соответствие;
	ДанныеОбработанныхФичаФайлов = Новый Соответствие;
	
	МассивВерсийEPFИмяФайла = Новый Массив;
	МассивВерсийEPFВерсия   = Новый Массив;
	
	ТаблицаКонтекстовОбработок = Новый Массив;
	МассивИменКонтекстовОбработок = Новый Массив;
	НедавноЗагруженныеФичи = Новый Массив;
	
	ПрекратитьВыполнениеШаговТакКакЗакончилсяСценарий = Ложь;
	ИнтервалВыполненияШагаПриЗаписиВидео             = 4;
	БылаОшибкаСкриптовСборкиВидео                    = Ложь;
	СкриншотСделанВСценарии                          = Ложь;
	ЭтоЗапускВРежимеКоманднойСтроки                  = Ложь;
	ЭтоЗапускВРежимеБезЗагрузкиНастроек              = Ложь;
	Версия8310ИлиВыше                                = Ложь;
	Версия8311ИлиВыше                                = Ложь;
	Версия8312ИлиВыше                                = Ложь;
	Версия8313ИлиВыше                                = Ложь;
	Версия8314ИлиВыше                                = Ложь;
	Версия8315ИлиВыше                                = Ложь;
	Версия8316ИлиВыше                                = Ложь;
	Версия8317ИлиВыше                                = Ложь;
	Версия8318ИлиВыше                                = Ложь;
	Версия8319ИлиВыше                                = Ложь;
	Версия8321ИлиВыше                                = Ложь;
	Версия8323ИлиВыше                                = Ложь;
	Версия8325ИлиВыше                                = Ложь;
	
	СтрокаПробелов = СтрокаПробелов();
	
	ОшибкиСценарияПереданныеИзвне = Новый Массив;
	
	ОшибкаAssert = Ложь;
	
	АсинхронноеПодключениеМодулейВыполнялось = Ложь;
	
	МассивTTS = Неопределено;
	
	Объект.АдресДанныеОбОшибке = Неопределено;
	
	ИмяСценарияКоторыйНадоВыполнитьПослеПерезагрузки             = "";
	СтрокаСценарияКоторыйНадоВыполнитьПослеПереазгрузкиЭтоПример = Ложь;
	
	ПредставлениеВертЧертыВТабДок = "__&ВертЧерта__";
	
	НадоПерейтиКСтрокеДерева = -1;
	ВозниклаОшибкаПодключенияTestClient        = Ложь;
	ВозниклаОшибкаВШагеКонтекста               = Ложь;
	ВозниклаОшибкаОшибкаСетевогоВзаимодействия = Ложь;
	КоличествоЗапущенныхКлиентовТестирования   = 0;
	
	ЗвуковоеОповещениеВыполнялось = Ложь;
	
	КешДанныеПеревода = Новый Структура;
	КешДанныеПеревода.Вставить("ТаблицаПеревода", Неопределено);
	КешДанныеПеревода.Вставить("Язык", Неопределено);
	КешДанныеПеревода.Вставить("СоответствиеПоЯзыкам", Новый Соответствие);
	
	ГлобальныеЗначенияШагов = Новый Структура;
	
	МаксСчетчикШаговБезТаймера = 100;
	Если Найти(СистемнаяИнформация.ТипПлатформы, "64") > 0 Тогда
		МаксСчетчикШаговБезТаймера = 50;
	КонецЕсли;	 
	
	ЭтоWindowsXP = ЭтоWindowsXP(СистемнаяИнформация);
	
	ВозможнаОптимизацияРаботыСФайлами = Ложь;
	
	ОграничениеНаКоличествоПопытокДействий = Ложь;
	
	ЗаполнитьИменаСлужебныхПеременныхКонтекста();
	ПоказыватьСлужебныеПеременные = Ложь;
	
	ОбработчикЗапуститьСценарийСоСтрокиПрисланнойИзвнеПодключен = Ложь;
	
	Если ЗапрещеныСинхронныеВызовы Тогда
		ТекЗначение = ЗначениеДополнительногоПараметра("ВозможнаОптимизацияРаботыСФайлами");
		Если ТекЗначение <> Неопределено Тогда
			ВозможнаОптимизацияРаботыСФайлами = ТекЗначение;
			УдалитьДополнительныйПараметр("ВозможнаОптимизацияРаботыСФайлами");
		Иначе	
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ПроверкаОптимизацииРаботыСФайлами", СоздатьФайлПроверкаОптимизацииРаботыСФайлами());
			ДопПараметры.Вставить("ВозможнаОптимизацияРаботыСФайлами", ВозможнаОптимизацияРаботыСФайлами);
			ПроверкаВозможностиОптимизацииРаботыСФайлами(ДопПараметры);
			ВозможнаОптимизацияРаботыСФайлами = ДопПараметры.ВозможнаОптимизацияРаботыСФайлами;
		КонецЕсли;	
	КонецЕсли;	 
	
	ИгнорируемыеВидыЭлементовФорм = Новый Массив();
	ИгнорируемыеВидыЭлементовФорм.Добавить(ВидПоляФормы.ПолеКартинки);
	ИгнорируемыеВидыЭлементовФорм.Добавить(ВидПоляФормы.ПолеГеографическойСхемы);
	ИгнорируемыеВидыЭлементовФорм.Добавить(ВидПоляФормы.ПолеГрафическойСхемы);
	ИгнорируемыеВидыЭлементовФорм.Добавить(ВидПоляФормы.ПолеДендрограммы);
	ИгнорируемыеВидыЭлементовФорм.Добавить(ВидПоляФормы.ПолеДиаграммы);
	ИгнорируемыеВидыЭлементовФорм.Добавить(ВидПоляФормы.ПолеДиаграммыГанта);
	ИгнорируемыеВидыЭлементовФорм.Добавить(ВидПоляФормы.ПолеИндикатора);
	ИгнорируемыеВидыЭлементовФорм.Добавить(ВидПоляФормы.ПолеКалендаря);
	ИгнорируемыеВидыЭлементовФорм.Добавить(ВидПоляФормы.ПолеПолосыРегулирования);

	НадоПодключитьШагиSingleИзИзМакета = Истина;
	глТипСтрока = Тип("Строка");
	
	ЗаголовокКнопкиВыполнитьСценарии = Элементы.ВыполнитьСценарии.Заголовок;
	ЗаголовокКнопкиОстановитьСценарии = Элементы.ОстановитьСценарии.Заголовок;
	
	глСтруктураКартинокДляДереваФайлов = СтруктураКартинокДляДереваФайлов();

	Типы = Новый Массив;
	Типы.Добавить(Тип("Строка"));
	Объект.МетаданныеБиблиотек.ТипЗначения = Новый ОписаниеТипов(Типы);
	
	СписокШаговБезСкриншота.Добавить("ЯДобавляюПроизвольныйТекстВАвтоинструкцию");
	СписокШаговБезСкриншота.Добавить("ЯДобавляюИзображениеВАвтоинструкцию");
	СписокШаговБезСкриншота.Добавить("ЯДобавляюРазрывСтраницыВАвтоинструкцию");
	СписокШаговБезСкриншота.Добавить("ЯДобавляюЗаголовокВАвтоинструкцию");
	СписокШаговБезСкриншота.Добавить("ЯДобавляюЯкорьВАвтоинструкцию");
	СписокШаговБезСкриншота.Добавить("ЯДобавляюГиперссылкуВАвтоинструкцию");
	СписокШаговБезСкриншота.Добавить("ЯДобавляюГоризонтальнуюЛиниюВАвтоинструкцию");
	СписокШаговБезСкриншота.Добавить("ЯДобавляюСтилиВАвтоинструкцию");
	СписокШаговБезСкриншота.Добавить("ЯДобавляюНумерованноеОглавлениеВАвтоинструкцию");
	СписокШаговБезСкриншота.Добавить("ЯДобавляюНеНумерованноеОглавлениеВАвтоинструкцию");
	
	ВыполняласьИнициализацияФормы = Истина;
	
	ЭтоМенеджерТестирования = ЭтоМенеджерТестирования();
	ПерезапускВРежимеМенеджерТестирования = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьCentOS7(СисИнфо)
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		Попытка
			ТекстФайла = "";
			ТекстовыйДокумент = Новый ЧтениеТекста("/etc/os-release");
			Пока Истина Цикл
				Стр = ТекстовыйДокумент.ПрочитатьСтроку();
				Если Стр = Неопределено Тогда
					Прервать;
				Иначе
					ТекстФайла = ТекстФайла + Стр + ";";
				КонецЕсли;
			КонецЦикла;
			Если НСтр(ТекстФайла, "ID") = "centos" И НСтр(ТекстФайла, "VERSION_ID") = "7" Тогда
				МестоположениеВнешнейКомпонентыДляСкриншотов = МестоположениеВнешнейКомпонентыДляCentOS;
				ЭтоCentOS7 = Истина;
			Иначе
				ЭтоCentOS7 = Ложь;
			КонецЕсли;
		Исключение
			ЭтоCentOS7 = Ложь;
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПодключенияБиблиотекПриОткрытии(Знач ПомещенныеФайлы, Знач ДополнительныеПараметры) Экспорт
	Для Каждого ПомещенныйФайл Из ПомещенныеФайлы Цикл
		ДополнительныеПараметрыПодключения = Новый Структура;
		ДополнительныеПараметрыПодключения.Вставить("АдресХранилища", ПомещенныйФайл.Хранение);
		ДополнительныеПараметрыПодключения.Вставить("ВозможнаОптимизацияРаботыСФайлами", ВозможнаОптимизацияРаботыСФайлами);
		Если Найти(НРег(ПомещенныйФайл.Имя), "steps.epf") > 0 Тогда
			ДополнительныеПараметрыПодключения.Вставить("ИмяФайла", ДополнительныеПараметры.ИменаФайлов["steps.epf"]);
			ИмяОбработки = ПодключитьВнешнююОбработкуСервер(ПомещенныйФайл.Хранение, ЕстьЗащитаОтОпасныхДействий, ДополнительныеПараметрыПодключения);
			ПодключитьБиблиотекуПереводШагов();
		ИначеЕсли Найти(НРег(ПомещенныйФайл.Имя), "messages.epf") > 0 Тогда
			ДополнительныеПараметрыПодключения.Вставить("ИмяФайла", ДополнительныеПараметры.ИменаФайлов["messages.epf"]);
			ИмяОбработки = ПодключитьВнешнююОбработкуСервер(ПомещенныйФайл.Хранение, ЕстьЗащитаОтОпасныхДействий, ДополнительныеПараметрыПодключения);
			ПодключитьБиблиотекуСообщенийПользователю(Ложь);
		ИначеЕсли Найти(НРег(ПомещенныйФайл.Имя), "работасвидео.epf") > 0 Тогда
			ДополнительныеПараметрыПодключения.Вставить("ИмяФайла", ДополнительныеПараметры.ИменаФайлов["работасвидео.epf"]);
			ИмяОбработки = ПодключитьВнешнююОбработкуСервер(ПомещенныйФайл.Хранение, ЕстьЗащитаОтОпасныхДействий, ДополнительныеПараметрыПодключения);
		ИначеЕсли Найти(НРег(ПомещенныйФайл.Имя), "работасинтерфейсом.epf") > 0 Тогда
			ДополнительныеПараметрыПодключения.Вставить("ИмяФайла", ДополнительныеПараметры.ИменаФайлов["работасинтерфейсом.epf"]);
			Попытка
				ПодключитьКонтекстОбработкиКлиент(ДополнительныеПараметры.ИменаФайлов["работасинтерфейсом.epf"],,ДополнительныеПараметрыПодключения);
			Исключение
				ЗаписатьЛогВЖРОшибка("ПредварительноеПодключениеБиблиотекиРаботаСИнтерфейсом",ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;	 
	КонецЦикла;	 
	
	ПриОткрытииПродолжение();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуВозможностиОптимизацияРаботыСФайлами()
	Если ПроверяласьВозможностьОптимизацииРаботыСФайлами <> Истина Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ВозможнаОптимизацияРаботыСФайлами", Ложь);
		ДопПараметры.Вставить("ПроверкаОптимизацииРаботыСФайлами", СоздатьФайлПроверкаОптимизацииРаботыСФайлами());
		ПроверкаВозможностиОптимизацииРаботыСФайлами(ДопПараметры);
		ПроверяласьВозможностьОптимизацииРаботыСФайлами = Истина;
		
		ВозможнаОптимизацияРаботыСФайлами = ДопПараметры.ВозможнаОптимизацияРаботыСФайлами;
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура АсинхронноеПодключениеМодулей()
	
	ВыполнитьПроверкуВозможностиОптимизацияРаботыСФайлами();
	
	Если ПустаяСтрока(Объект.КаталогИнструментов) Тогда
		Объект.КаталогИнструментов = КаталогИнструментовИзПутиКФреймворку();
	ИначеЕсли НЕ ФайлСуществуетКомандаСистемы(Объект.КаталогИнструментов) Тогда
		Объект.КаталогИнструментов = "";
		Объект.КаталогИнструментов = КаталогИнструментовИзПутиКФреймворку(); 
	КонецЕсли;
	
	Если Объект.ВерсияПоставки = "single" Тогда
		
		ПодключитьБиблиотекуСообщенийПользователю(Ложь);
		ПриОткрытииПродолжение();
		
		Возврат;
	КонецЕсли;	 
	
	#Если ВебКлиент Тогда
		ПриОткрытииПродолжение();
		Возврат;
	#КонецЕсли	
	
	Если ПустаяСтрока(Объект.КаталогИнструментов) Тогда
		ЕстьКонстантаВКонфигурацииПутьКVA = ЕстьКонстантаВКонфигурацииСервер("ПутьКVanessaAutomation");
		Если ЕстьКонстантаВКонфигурацииПутьКVA Тогда
			ПутьКVanessaAutomation     = ПолучитьЗначениеКонстантыСервер("ПутьКVanessaAutomation");
			ФайлПутьКVanessaAutomation = Новый Файл(ПутьКVanessaAutomation);
			ИмяФайла = ДополнитьСлешВПуть(ФайлПутьКVanessaAutomation.Путь) + "locales/Messages.epf";
			
			Если ПустаяСтрока(Объект.КаталогИнструментов) Тогда
				// ПутьКVanessaAutomation - это полный путь к epf с именем файла 
				Объект.КаталогИнструментов = КаталогИнструментовИзПутиКФреймворку(ПутьКVanessaAutomation);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	ИменаФайлов = Новый Соответствие;
	
	ПомещаемыеФайлы = Новый Массив;
	
	ПутьКФайлу = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "locales/Messages.epf";
	ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПутьКФайлу);
	ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
	ИменаФайлов.Вставить("messages.epf", ПутьКФайлу);
	
	ПутьКФайлу = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "locales/Steps.epf";
	ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПутьКФайлу);
	ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
	ИменаФайлов.Вставить("steps.epf", ПутьКФайлу);
	
	ПутьКФайлу = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "lib/Video/РаботаСВидео.epf";
	ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПутьКФайлу);
	ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
	ИменаФайлов.Вставить("работасвидео.epf", ПутьКФайлу);
	
	// Этот модуль помещается зараннее, т.к. он может вызываться из других модулей.
	// Иначе могут быть проблемы, когда невозможна оптимизация работы с файлами
	Если Объект.ВерсияПоставки = "standart" Тогда
		ПутьКФайлу = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "features/Libraries/UITestRunner/step_definitions/РаботаСИнтерфейсом.epf";
		Если ФайлСуществуетКомандаСистемы(ПутьКФайлу) Тогда
			ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПутьКФайлу);
			ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
			ИменаФайлов.Вставить("работасинтерфейсом.epf", ПутьКФайлу);
		КонецЕсли;	
	КонецЕсли;	
	
	ПараметрыЗавершения = Новый Структура();
	ПараметрыЗавершения.Вставить("ИменаФайлов", ИменаФайлов);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикПодключенияБиблиотекПриОткрытии", ЭтаФорма, ПараметрыЗавершения);
	
	БылаОшибка = Истина;
	ТекстОшибки = "";
	КоличествоПопыток = 10;
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы,, Ложь, ЭтаФорма.УникальныйИдентификатор);
			БылаОшибка = Ложь;
			Прервать;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Sleep(1);
		КонецПопытки;
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		Стр = "";
		Для Каждого Элем Из ПомещаемыеФайлы Цикл
			Стр = Стр + Элем.Имя + Символы.ПС; 
		КонецЦикла;	 
		
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Не получилось выполнить помещение файлов: <%1>."),
			Стр + Символы.ПС + ТекстОшибки
		);
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытииПродолжение()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Версия836ИлиВыше  = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.6.0");
	Версия838ИлиВыше  = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.8.0");
	Версия839ИлиВыше  = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.9.0");
	Версия8310ИлиВыше = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.10.0");
	Версия8311ИлиВыше = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.11.0");
	Версия8312ИлиВыше = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.12.0");
	Версия8313ИлиВыше = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.13.0");
	Версия8314ИлиВыше = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.14.0");
	Версия8315ИлиВыше = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.15.0");
	Версия8316ИлиВыше = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.16.0");
	Версия8317ИлиВыше = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.17.0");
	Версия8318ИлиВыше = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.18.0");
	Версия8319ИлиВыше = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.19.0");
	Версия8321ИлиВыше = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.21.0");
	Версия8323ИлиВыше = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.23.0");
	Версия8325ИлиВыше = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.25.0");
	
	СчитываниеМакетаНачСтр = 1;
	СчитываниеМакетаНачКол = 1;
	СчитываниеМакетаКолСтр = 100;
	СчитываниеМакетаКолКол = 20;
	
	Объект.ВыполнятьШагиАсинхронно = Ложь;
	Объект.ЯзыкГенератораGherkin = "ru";
	
	Если ОбъектКонтекст = Неопределено Тогда
		ОбъектКонтекст = Новый Структура;
		Контекст = ОбъектКонтекст;
	КонецЕсли;	 
	Если ОбъектКонтекстСохраняемый = Неопределено Тогда
		ОбъектКонтекстСохраняемый = Новый Структура;
		КонтекстСохраняемый = ОбъектКонтекстСохраняемый;
	КонецЕсли;	 
	Если Объект.ДополнительныеПараметры  = Неопределено Тогда
		Объект.ДополнительныеПараметры = Новый Структура;
	КонецЕсли;	 
	
	ВосстановитьНастройкиКлиент();
	
	Если ЭтоРежимОбучения() И ЗначениеПараметраЗапуска("УстановитьВерсиюОбработкиНаРелизную", Ложь) Тогда
		ЭтаФорма.Заголовок = ПолучитьВерсиюОбработкиКлиент(Истина);
	КонецЕсли;	
	
	ЗагрузитьПлагины();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоLinux()
	
	Значение = Ложь;
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 
		ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64
		ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.MacOS_x86
		ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда 
		Значение = Истина;
	КонецЕсли;
	
	Возврат Значение;
КонецФункции	 

&НаКлиенте
Функция ЭтоLinuxКлиент()
	
	Если ЭтоLinux <> Неопределено Тогда
		Возврат ЭтоLinux; 
	КонецЕсли;	 
	
	Значение = Ложь;
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 
		ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64
		ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.MacOS_x86
		ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда 
		Значение = Истина;
	КонецЕсли;
	
	Возврат Значение;
КонецФункции	 

&НаКлиенте
Функция ГенерироватьШагПоискаПоЗаголовку(ЗаголовокЭлемента, ИмяЭлемента, МассивСтруктурФорм, ТекущаяФорма, ТипОбъекта) 
	Если Объект.ИскатьЭлементыФормыПоИмени и ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если НРег(ЗаголовокЭлемента) = НРег(ИмяЭлемента) Тогда
		//Значит возможно у поля вообще не указан никакой заголовок и платформа подставляет вместо заголовка имя поля. Тогда лучше поле искать сразу по имени.
		Возврат Ложь;
	КонецЕсли;	 
	
	Если СокрЛП(ЗаголовокЭлемента) <> "" И (Не ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФорма, ЗаголовокЭлемента, ТипОбъекта)) Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция ЭтоВнутреннийАдресФормы(Знач АдресСнипета)
	Если Лев(НРег(АдресСнипета), 34) = "внешняяобработка.vanessaautomation" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Если Лев(НРег(АдресСнипета), 27) = "обработка.vanessaautomation" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Процедура ДанныеКлиентовТестированияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Элементы.ДанныеКлиентовТестирования.Обновить();
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ПустаяСтрока(ТекущиеДанные.ТипКлиента) Тогда
			ТекущиеДанные.ТипКлиента = "Тонкий";
		КонецЕсли;	 
	КонецЕсли;
	
	Сч = 0;
	Для Каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
		Сч = Сч + 1;
		Если Сч > 1 Тогда
			Если СтрокаДанныеКлиентовТестирования.ЭтотКлиент Тогда
				СтрокаДанныеКлиентовТестирования.ЭтотКлиент = Ложь;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначенияВТаблоПеременных()
	Если НЕ Элементы.ГруппаПросмотрПеременных.Видимость Тогда
		Возврат;
	КонецЕсли;	 
	
	ТекИсточникДанных = Неопределено;
	ТекИмя = Неопределено;
	Если Элементы.ТаблоПеременных.ТекущиеДанные <> Неопределено Тогда
		ТекИсточникДанных = Элементы.ТаблоПеременных.ТекущиеДанные.ИсточникДанных;
		ТекИмя = Элементы.ТаблоПеременных.ТекущиеДанные.Имя;
	КонецЕсли;	 
	
	СтрокиТаблоПеременных = ТаблоПеременных.ПолучитьЭлементы();
	СтрокиТаблоПеременных.Очистить();
	
	// Контекст
	СписокЗначенийКонтекст = Новый СписокЗначений;
	Если ТипЗнч(ОбъектКонтекст) = Тип("Структура") Тогда
		Для Каждого Элем Из ОбъектКонтекст Цикл
			СписокЗначенийКонтекст.Добавить(Элем.Ключ);
		КонецЦикла;	 
	КонецЕсли;	 
	СписокЗначенийКонтекст.СортироватьПоЗначению();
	
	СтрокаТаблоПеременных = СтрокиТаблоПеременных.Добавить();	
	СтрокаТаблоПеременных.Имя = Локализовать("Контекст");
	СтрокаТаблоПеременных.СлужебнаяСтрока = Истина;
	
	СтрокиКонтекст = СтрокаТаблоПеременных.ПолучитьЭлементы();
	Для Каждого Элем Из СписокЗначенийКонтекст Цикл
		Если НЕ ПоказыватьСлужебныеПеременные Тогда
			
			Если ЭтоСлужебнаяПеременаяКонтекста(Элем.Значение) Тогда
				Продолжить;
			КонецЕсли;	 
			
		КонецЕсли;	 
		
		ВывестиПеременнуюВТаблоПеременных(СтрокиКонтекст, Элем.Значение, ОбъектКонтекст[Элем.Значение], "Контекст");
		
	КонецЦикла;	 
	
	// КонтекстСохраняемый
	СписокЗначенийКонтекст = Новый СписокЗначений;
	Для Каждого Элем Из ОбъектКонтекстСохраняемый Цикл
		СписокЗначенийКонтекст.Добавить(Элем.Ключ);
	КонецЦикла;	 
	СписокЗначенийКонтекст.СортироватьПоЗначению();
	
	СтрокаТаблоПеременных = СтрокиТаблоПеременных.Добавить();	
	СтрокаТаблоПеременных.Имя = Локализовать("Контекст глобальный");
	СтрокаТаблоПеременных.СлужебнаяСтрока = Истина;
	
	СтрокиКонтекстСохраняемый = СтрокаТаблоПеременных.ПолучитьЭлементы();
	Для Каждого Элем Из СписокЗначенийКонтекст Цикл
		
		Если НЕ ПоказыватьСлужебныеПеременные Тогда
			Если ЭтоСлужебнаяПеременаяКонтекста(Элем.Значение) Тогда
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		ВывестиПеременнуюВТаблоПеременных(СтрокиКонтекстСохраняемый, Элем.Значение, ОбъектКонтекстСохраняемый[Элем.Значение], "КонтекстСохраняемый");
		
	КонецЦикла;	 
	
	ЭлементыТабло = ТаблоПеременных.ПолучитьЭлементы();
	СтрокаТабло = НайтиСтрокуТаблоИмяИсточник(ЭлементыТабло, ТекИмя, ТекИсточникДанных);
	Если СтрокаТабло <> Неопределено Тогда
		Элементы.ТаблоПеременных.ТекущаяСтрока = СтрокаТабло.ПолучитьИдентификатор();
	КонецЕсли;	 
	
	ПодключитьОбработчикОжидания("РазвернутьСвернутьСтрокиТаблоПеременных", 0.1, Истина);
КонецПроцедуры 

&НаКлиенте
Процедура ВывестиПеременнуюВТаблоПеременных(СтрокиДерева, Имя, Значение, ИсточникДанных)
	СтрокаПеременной = СтрокиДерева.Добавить();
	СтрокаПеременной.Имя = Имя;
	СтрокаПеременной.Тип = ТипЗнч(Значение);
	Если СтрокаПеременной.Тип = "Число" Тогда
		СтрокаПеременной.Значение = XMLСтрока(Значение);
	Иначе	
		СтрокаПеременной.Значение = Значение;
	КонецЕсли;	
	СтрокаПеременной.ИсточникДанных = ИсточникДанных;
	
	Если ТипЗнч(Значение) = Тип("Структура") ИЛИ ТипЗнч(Значение) = Тип("Соответствие") Тогда
		ТекСтрокиДерева = СтрокаПеременной.ПолучитьЭлементы();
		
		СписокКлючей = Новый СписокЗначений;
		Для Каждого Элем Из Значение Цикл
			СписокКлючей.Добавить(Элем.Ключ);
		КонецЦикла;	 
		СписокКлючей.СортироватьПоЗначению();
		
		Для Каждого ЭлементСписка Из СписокКлючей Цикл
			Ключ = ЭлементСписка.Значение;
			ВывестиПеременнуюВТаблоПеременных(ТекСтрокиДерева, Ключ, Значение[Ключ], ИсточникДанных)
		КонецЦикла;	 
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		ТекСтрокиДерева = СтрокаПеременной.ПолучитьЭлементы();
		Сч = -1;
		Для Каждого Элем Из Значение Цикл
			Сч = Сч + 1;
			ВывестиПеременнуюВТаблоПеременных(ТекСтрокиДерева, Имя + Формат(Сч, "ЧГ=; ЧН=0"), Элем, ИсточникДанных)
		КонецЦикла;	 
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Функция НайтиСтрокуТаблоИмяИсточник(ЭлементыТабло, Имя, ИсточникДанных)
	НужнаяСтрока = Неопределено;
	НайтиСтрокуТаблоРекурсивно(ЭлементыТабло, Имя, ИсточникДанных, НужнаяСтрока); 
	Возврат НужнаяСтрока;
КонецФункции	 

&НаКлиенте
Процедура НайтиСтрокуТаблоРекурсивно(ЭлементыТабло, Имя, ИсточникДанных, НужнаяСтрока)
	Для Каждого СтрокаЭлементыТабло Из ЭлементыТабло Цикл
		Если НужнаяСтрока <> Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если СтрокаЭлементыТабло.Имя = Имя И СтрокаЭлементыТабло.ИсточникДанных = ИсточникДанных Тогда
			НужнаяСтрока = СтрокаЭлементыТабло; 
			Прервать;
		КонецЕсли;	 
		
		НайтиСтрокуТаблоРекурсивно(СтрокаЭлементыТабло.ПолучитьЭлементы(), Имя, ИсточникДанных, НужнаяСтрока);
	КонецЦикла;	 
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьСтрокиТаблоПеременных()
	Если НЕ Элементы.ГруппаПросмотрПеременных.Видимость Тогда
		Возврат;
	КонецЕсли;	
	
	СтрокиТаблоПеременных = ТаблоПеременных.ПолучитьЭлементы();
	Если СтрокиТаблоПеременных.Количество() > 0 Тогда
		СтрокаТабло = СтрокиТаблоПеременных[0];
		ИдентификаторСтроки = СтрокаТабло.ПолучитьИдентификатор();
		Элементы.ТаблоПеременных.Развернуть(ИдентификаторСтроки, Истина);
		
		Для Каждого ПодчиненнаяСтрока Из СтрокиТаблоПеременных[0].ПолучитьЭлементы() Цикл
			ИдентификаторСтроки = ПодчиненнаяСтрока.ПолучитьИдентификатор();
			Элементы.ТаблоПеременных.Свернуть(ИдентификаторСтроки);
		КонецЦикла;	 
		
		Для Каждого ПодчиненнаяСтрока Из СтрокиТаблоПеременных[1].ПолучитьЭлементы() Цикл
			ИдентификаторСтроки = ПодчиненнаяСтрока.ПолучитьИдентификатор();
			Элементы.ТаблоПеременных.Свернуть(ИдентификаторСтроки);
		КонецЦикла;	 
		
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьИменаСлужебныхПеременныхКонтекста()
	
	СлужебныеПеременныеКонтекста = Новый Соответствие;
	СлужебныеПеременныеКонтекста.Вставить("АктивнаяТаблицаTestClient", Истина);
	СлужебныеПеременныеКонтекста.Вставить("АктивноеОкно", Истина);
	СлужебныеПеременныеКонтекста.Вставить("ЗавершитьВыполнениеЦикла", Истина);
	СлужебныеПеременныеКонтекста.Вставить("ТекущаяТЧ", Истина);
	СлужебныеПеременныеКонтекста.Вставить("ТекущийВыпадающийСписок", Истина);
	СлужебныеПеременныеКонтекста.Вставить("ПредыдущееАктивноеОкно", Истина);
	СлужебныеПеременныеКонтекста.Вставить("ТестовоеПриложение", Истина);
	СлужебныеПеременныеКонтекста.Вставить("ГлавноеОкноТестируемого", Истина);
	СлужебныеПеременныеКонтекста.Вставить("ТекущийПрофильTestClient", Истина);
	СлужебныеПеременныеКонтекста.Вставить("ПодключенныеTestClient", Истина);
	СлужебныеПеременныеКонтекста.Вставить("_ДанныеФайловПриСохраненииМакета", Истина);
	СлужебныеПеременныеКонтекста.Вставить("_ЭлементФормы", Истина);
	СлужебныеПеременныеКонтекста.Вставить("_ОтборЭлементов", Истина);
	СлужебныеПеременныеКонтекста.Вставить("_ПодсказкаЭлементаФормы", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестовПеретаскиваниеОбработчик()
	Если ТипЗнч(глПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		Файл = глПараметрыПеретаскивания.Значение;
		Если НРег(Файл.Расширение) = ".feature" Тогда
			Объект.КаталогФич = Файл.ПолноеИмя;
			ЗагрузитьФичи();
		КонецЕсли;	 
	ИначеЕсли Версия8313ИлиВыше И ТипЗнч(глПараметрыПеретаскивания.Значение) = Тип("СсылкаНаФайл") Тогда
		Файл = глПараметрыПеретаскивания.Значение.Файл;
		Если НРег(Файл.Расширение) = ".feature" Тогда
			Объект.КаталогФич = Файл.ПолноеИмя;
			ЗагрузитьФичи();
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьКДатеСтрокуКакСтроку(Знач Стр) 
	Возврат "'" + Формат(ПреобразоватьСтрокуВДату(Стр), "ДФ=yyyyMMdd; ДП=00010101") + "'";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьСтрокуВДату(Знач Стр) 
	НачСтр = Стр;
	
	Год   = 0;
	Год2000 = 2000;
	Век = 100;
	Месяц = 0;
	День  = 0;
	
	Поз  = Найти(Стр, ".");
	День = Число(Лев(Стр, Поз - 1));
	Стр = Сред(Стр, Поз + 1);
	
	Поз   = Найти(Стр, ".");
	Месяц = Число(Лев(Стр, Поз - 1));
	Стр   = Сред(Стр, Поз + 1);
	
	Год   = Число(Стр);
	Если СтрДлина(Стр) = 2 И Год < Век Тогда
		Год = Год + Год2000;
	КонецЕсли;
	
	Возврат Дата(Год, Месяц, День);
КонецФункции

&НаСервере
Функция VAОткрытаКакВнешняяОбработка(ОбъектНаСервере)
    ПолноеИмяМетаданных = ОбъектНаСервере.Метаданные().ПолноеИмя();
    Возврат Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных) = Неопределено;
КонецФункции

&НаКлиенте
Функция СтруктураОшибкиVA()
	Возврат Новый Структура("ОшибкаAssert,ЗначениеActual,ЗначениеExpected", Ложь, Неопределено, Неопределено); 
КонецФункции	  

&НаКлиенте
Процедура ЗаполнитьЗначенияПоУмолчаниюYandexTTS()
	Если НЕ ЗначениеЗаполнено(Объект.ЗаписьВидеоYandexTTSЯзык) Тогда
		Объект.ЗаписьВидеоYandexTTSЯзык = "ru-RU";
	КонецЕсли;	 
	Если НЕ ЗначениеЗаполнено(Объект.ЗаписьВидеоYandexTTSГолос) Тогда
		Объект.ЗаписьВидеоYandexTTSГолос = "oksana";
	КонецЕсли;	 
	Если НЕ ЗначениеЗаполнено(Объект.ЗаписьВидеоYandexTTSЭмоция) Тогда
		Объект.ЗаписьВидеоYandexTTSЭмоция = "good";
	КонецЕсли;	 
	Если НЕ ЗначениеЗаполнено(Объект.ЗаписьВидеоYandexTTSСкорость) Тогда
		Объект.ЗаписьВидеоYandexTTSСкорость = 1.1;
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьЗначенияПоУмолчаниюAmazonTTS()
	Если НЕ ЗначениеЗаполнено(Объект.ЗаписьВидеоAmazonГолос) Тогда
		Объект.ЗаписьВидеоAmazonГолос = "en-US";
	КонецЕсли;	 
	Если НЕ ЗначениеЗаполнено(Объект.ЗаписьВидеоAmazonДвижок) Тогда
		Объект.ЗаписьВидеоAmazonДвижок = "standard";
	КонецЕсли;	 
	Если НЕ ЗначениеЗаполнено(Объект.ЗаписьВидеоAmazonЯзык) Тогда
		Объект.ЗаписьВидеоAmazonЯзык = "Aditi";
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьЗначенияПоУмолчаниюСберTTS()
	
	Если НЕ ЗначениеЗаполнено(Объект.ЗаписьВидеоСберTTSГолос) Тогда
		Объект.ЗаписьВидеоСберTTSГолос = "Nec_24000";
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЯзыковойПараметрЗапускаТестовогоКлиента(ТекущийЯзык)
	Отбор = Новый Структура;
	Отбор.Вставить("ЭтотКлиент", Истина);
	СтрокиДанныеКлиентовТестирования = ДанныеКлиентовТестирования.НайтиСтроки(Отбор);
	Если СтрокиДанныеКлиентовТестирования.Количество() > 0 Тогда
		СтрокаЭтотКлиент = СтрокиДанныеКлиентовТестирования[0];
		ДопПараметры = СтрокаЭтотКлиент.ДопПараметры;
		СтрокаЭтотКлиент.ДопПараметры = ОпределитьЯзыкЗапуска(ТекущийЯзык, ДопПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ОпределитьЯзыкЗапуска(ТекущийЯзык, ДопПараметры)
	Поз1 = Найти(ДопПараметры, "/L ");
	ПромСтрока = Сред(ДопПараметры, Поз1 + 3);
	Поз2 = Найти(ПромСтрока, "/L ");
	
	ЧислоВхожденийЯзыковогоПараметра = СтрЧислоВхождений(ДопПараметры, "/L ");
	Если (Поз1 > 0) И (Поз2 > 0) Тогда
		СообщитьПользователю(Локализовать("Обнаружен больше чем 1 параметр L"));
		Возврат ДопПараметры;  
	ИначеЕсли (Поз1 > 0) И (Поз2 = 0) Тогда
		ПозицияЯзыковогоПараметра = Найти(ДопПараметры, "/L ");
		ЯзыкСтрока = Сред(ДопПараметры, ПозицияЯзыковогоПараметра + 3, 2);
		ДопПараметрыСНовымЯзыком = СтрЗаменить(ДопПараметры, ЯзыкСтрока, ТекущийЯзык);
		Возврат ДопПараметрыСНовымЯзыком;
	Иначе
		ДопПараметры =  ДопПараметры + " /L " + ТекущийЯзык;
		Возврат ДопПараметры;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура КомандыЗапускаТекстовогоРедактораПоУмолчанию()
	
	МассивРедакторов = МассивТекстовыхРедакторов();
	
	Для каждого Редактор Из МассивРедакторов Цикл
		
		Если ФайлСуществуетКомандаСистемы(Редактор.ИмяФайла) Тогда
			Элементы.КомандаОткрытияФичиВТекстовомРедакторе.СписокВыбора.Добавить(Редактор.СтрокаЗапуска, Редактор.ПредставлениеРедактора);
		КонецЕсли;	 
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция МассивТекстовыхРедакторов()
	
	МассивРедакторов = Новый Массив;
		
	// Notepad++ (x64)
	ПараметрыРедактора = Новый Структура("ПредставлениеРедактора, ИмяФайла, СтрокаЗапуска");
	ПараметрыРедактора.Вставить("ПредставлениеРедактора", "Notepad++ (x64)");
	ПараметрыРедактора.Вставить("ИмяФайла", "C:\Program Files\Notepad++\notepad++.exe");
	ПараметрыРедактора.Вставить("СтрокаЗапуска", """C:\Program Files\Notepad++\notepad++.exe"" %Feature% -n%LineNumber%");	
	МассивРедакторов.Добавить(ПараметрыРедактора);
	
	// Notepad++
	ПараметрыРедактора = Новый Структура("ПредставлениеРедактора, ИмяФайла, СтрокаЗапуска");
	ПараметрыРедактора.Вставить("ПредставлениеРедактора", "Notepad++");
	ПараметрыРедактора.Вставить("ИмяФайла", "C:\Program Files (x86)\Notepad++\notepad++.exe");
	ПараметрыРедактора.Вставить("СтрокаЗапуска", """C:\Program Files (x86)\Notepad++\notepad++.exe"" %Feature% -n%LineNumber%");	
	МассивРедакторов.Добавить(ПараметрыРедактора);

	// VSCode (x64)
	ПараметрыРедактора = Новый Структура("ПредставлениеРедактора, ИмяФайла, СтрокаЗапуска");
	ПараметрыРедактора.Вставить("ПредставлениеРедактора", "VSCode (x64)");
	ПараметрыРедактора.Вставить("ИмяФайла", "C:\Program Files\Microsoft VS Code\code.exe");
	ПараметрыРедактора.Вставить("СтрокаЗапуска", """C:\Program Files\Microsoft VS Code\code.exe"" -g %Feature%:%LineNumber%");	
	МассивРедакторов.Добавить(ПараметрыРедактора);
	
	// VSCode
	ПараметрыРедактора = Новый Структура("ПредставлениеРедактора, ИмяФайла, СтрокаЗапуска");
	ПараметрыРедактора.Вставить("ПредставлениеРедактора", "VSCode");
	ПараметрыРедактора.Вставить("ИмяФайла", "C:\Program Files (x86)\Microsoft VS Code\code.exe");
	ПараметрыРедактора.Вставить("СтрокаЗапуска", """C:\Program Files (x86)\Microsoft VS Code\code.exe"" -g %Feature%:%LineNumber%");	
	МассивРедакторов.Добавить(ПараметрыРедактора);
	
	// VSCode userspace
	Юзерспейс = ЗначениеСистемногоПараметра("%localappdata%");
	ПараметрыРедактора = Новый Структура("ПредставлениеРедактора, ИмяФайла, СтрокаЗапуска");
	ПараметрыРедактора.Вставить("ПредставлениеРедактора", "VSCode (userspace)");
	ПараметрыРедактора.Вставить("ИмяФайла", Юзерспейс + "\Programs\Microsoft VS Code\Code.exe");
	ПараметрыРедактора.Вставить("СтрокаЗапуска", """" + Юзерспейс + "\Programs\Microsoft VS Code\Code.exe"" -g %Feature%:%LineNumber%");	
	МассивРедакторов.Добавить(ПараметрыРедактора);

	Возврат МассивРедакторов;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокуПодсценарияПоСтрокеДерева(СтрокаДерева)
	Результат = СтрокаДерева;
	Родитель = Результат;
	
	Пока Истина Цикл
		Родитель = Родитель.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если Родитель.Тип = "ШагСценарий" Тогда
			Результат = Родитель;
		КонецЕсли;	 
		
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции	 

// Номер строки из дерава шагов со статусом "Failed"
//
// Параметры:
//  ДеревоТестов - ДанныеФормыДерево - 
//  ИДСтроки	 - Число	 - Порядковый номер шага
// 
// Возвращаемое значение:
//   - Число
//
&НаКлиенте
Процедура ПолучитьСтрокуСОшибкойРекурсивно(КоллекцияЭлементов, СтрокаСОшибкой, ПолучатьСтрокиСценариев, ИДСтроки)
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементов Цикл		
		Если СтрокаСОшибкой <> Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если СтатусСценарияСоответствуетВыполненСОшибкой(СтрокаДерева.Статус) И СтрокаДерева.ИДСтроки > ИДСтроки Тогда
			НадоЗафиксироватьРезультат = Истина;
			Если НЕ ПолучатьСтрокиСценариев И СтрокаДерева.Тип = "Сценарий" Тогда
				НадоЗафиксироватьРезультат = Ложь;
			КонецЕсли;	 
			
			Если НадоЗафиксироватьРезультат Тогда
				СтрокаСОшибкой = СтрокаДерева.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;	 
		КонецЕсли;		
		
		ПолучитьСтрокуСОшибкойРекурсивно(СтрокаДерева.ПолучитьЭлементы(), СтрокаСОшибкой, ПолучатьСтрокиСценариев, ИДСтроки);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает полный путь к файлу или каталогу
//
// Параметры:
//  ИмяКаталога	 - Строка	 - Начальный путь
//  Часть1 - 4	 - Строка	 - Части путей
//  ИмяФайла	 - Строка	 - Имя конечного файла
// 
// Возвращаемое значение:
//  Строка - Итоговый полный путь
//
&НаКлиентеНаСервереБезКонтекста
Функция ОбъединитьПути(Знач ИмяКаталога, Знач Часть1 = "", Знач Часть2 = "",	Знач Часть3 = "", Знач Часть4 = "", Знач ИмяФайла = "")

	ПолныйПуть = ИмяКаталога;

	РазделительПути = ПолучитьРазделительПути();

	Если РазделительПути = "\" Тогда
		СлешДо = "/";
	Иначе
		СлешДо = "\";
	КонецЕсли;

	ПолныйПуть = СтрЗаменить(ИмяКаталога, СлешДо, РазделительПути);

	Если Прав(ПолныйПуть, 1) <> РазделительПути Тогда
		ПолныйПуть = ИмяКаталога + РазделительПути;
	КонецЕсли;

	МассивЧастейПути = Новый Массив;
	МассивЧастейПути.Добавить(Часть1);
	МассивЧастейПути.Добавить(Часть2);
	МассивЧастейПути.Добавить(Часть3);
	МассивЧастейПути.Добавить(Часть4);

	Для Каждого ЧастьПути Из МассивЧастейПути Цикл
		Если Не ПустаяСтрока(ЧастьПути) Тогда
			ЧастьПути = СтрЗаменить(СокрЛП(ЧастьПути), СлешДо, РазделительПути);
			ПолныйПуть = ПолныйПуть + ЧастьПути + РазделительПути;
		КонецЕсли;
	КонецЦикла;

	Если Не ПустаяСтрока(ИмяФайла) Тогда
		ПолныйПуть = ПолныйПуть + ИмяФайла;
	КонецЕсли;

	Возврат ПолныйПуть;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДобавлятьСтандартнуюБиблиотеку(Знач ВерсияПоставки)
	
	Если НЕ ЗначениеЗаполнено(ВерсияПоставки) 
		Или ВерсияПоставки = "standart" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;

КонецФункции	 

&НаКлиенте
Функция ЭтоЗакомментированнаяСтрокаСценария(Знач Стр)
    Стр = СокрЛ(Стр);
    Если Лев(Стр, 1) = "#" Тогда
        Возврат Истина;
    ИначеЕсли Лев(Стр, 2) = "//" Тогда
        Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции	 
		
&НаКлиенте
Функция ДанныеВложенногоСценарияДляОптимизации(ИмяФайла, ДанныеПоИзменениюФайловФич)
	ДатаИзменения = ДанныеПоИзменениюФайловФич[ПреобразоватьПутьКФайлуКСтандарту(ИмяФайла)];
	Если ДатаИзменения = Неопределено Тогда
		Если ВозможнаОптимизацияРаботыСФайлами() Тогда
			Возврат ВремяИзмененияФайлаКомандаСистемы(ИмяФайла); 
		КонецЕсли;	 
	Иначе
		Возврат ДатаИзменения;
	КонецЕсли;	 
КонецФункции	 

&НаКлиенте
Процедура ДанныеПодсценариевПоДеревуРекурсивно(ДанныеПодсценариев, ДеревоЭлементы, ДанныеПоИзменениюФайловФич)
	Для Каждого СтрокаДеревоЭлементы Из ДеревоЭлементы Цикл
		Если СтрокаДеревоЭлементы.Тип = "ШагСценарий" Тогда
			Если ДанныеПодсценариев[СтрокаДеревоЭлементы.АдресСнипета] = Неопределено Тогда
				ДанныеПодсценариев.Вставить(СтрокаДеревоЭлементы.АдресСнипета,
				ДанныеВложенногоСценарияДляОптимизации(СтрокаДеревоЭлементы.АдресСнипета, ДанныеПоИзменениюФайловФич));
			КонецЕсли;	 
		КонецЕсли;	 
		ДанныеПодсценариевПоДеревуРекурсивно(ДанныеПодсценариев, СтрокаДеревоЭлементы.ПолучитьЭлементы(), ДанныеПоИзменениюФайловФич);
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Функция ДанныеПодсценариевПоДереву(МассивДействий)
	ДанныеПоИзменениюФайловФич = Новый Соответствие;
	Если МассивДействий <> Неопределено Тогда
		Для Каждого Элем Из МассивДействий Цикл
			Если ТипЗнч(Элем) = Тип("Структура") Тогда
				Если Элем.ТипПараметра = "СканированиеКаталогаПоискFeature" Тогда
					Если Элем.Свойство("НайденныеФайлы") Тогда
						Для Каждого ДанныеФайла Из Элем.НайденныеФайлы Цикл
							ДанныеПоИзменениюФайловФич.Вставить(ПреобразоватьПутьКФайлуКСтандарту(ДанныеФайла.Файл.ПолноеИмя), ДанныеФайла.ВерсияФайла);
						КонецЦикла;	 
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЦикла;	 
	КонецЕсли;	 
	
	ДанныеПодсценариев = Новый Соответствие;
	ДанныеПодсценариевПоДеревуРекурсивно(ДанныеПодсценариев, Объект.ДеревоТестов.ПолучитьЭлементы(), ДанныеПоИзменениюФайловФич);
	Возврат ДанныеПодсценариев;
КонецФункции	  

#Область WindowCaptureComponent

&НаКлиенте
Процедура ВыполнитьПодключениеВнешнейКомпоненты(ДополнительныеПараметры = Неопределено) Экспорт
	#Если ВебКлиент Тогда
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ИмяОбработчика") Тогда
			ПодключитьОбработчикОжидания(ДополнительныеПараметры.ИмяОбработчика, 0.1, Истина);
		КонецЕсли;	 
		
		Возврат;
	#КонецЕсли	
	
	Объект.ИспользоватьКомпонентуVanessaExt = Истина;
	
	Если ПустаяСтрока(ИдентификаторВнешнейКомпонентыДляСкриншотов) Тогда
		ИдентификаторВнешнейКомпонентыДляСкриншотов = "_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Подключение", Истина);
	КонецЕсли;	 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключениеВнешнейКомпонентыЗавершение", ЭтаФорма, ДополнительныеПараметры);
	
	Если Версия8321ИлиВыше Тогда
		Выполнить("НачатьПодключениеВнешнейКомпоненты(ОписаниеОповещения, МестоположениеВнешнейКомпонентыДляСкриншотов, ИдентификаторВнешнейКомпонентыДляСкриншотов, ТипВнешнейКомпоненты.Native, ТипПодключенияВнешнейКомпоненты.НеИзолированно)");
	Иначе	
		НачатьПодключениеВнешнейКомпоненты(ОписаниеОповещения, МестоположениеВнешнейКомпонентыДляСкриншотов, 
			ИдентификаторВнешнейКомпонентыДляСкриншотов, ТипВнешнейКомпоненты.Native); 
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПодключениеВнешнейКомпонентыЗавершение(Подключение, ДополнительныеПараметры) Экспорт
	
	Если Подключение Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолученаВерсияКомпоненты", ЭтаФорма, ДополнительныеПараметры);
		
		Попытка
			ВнешняяКомпонентаПарсерGherkin = Новый("AddIn." + ИдентификаторВнешнейКомпонентыДляСкриншотов + ".GherkinParser");
			ВнешняяКомпонентаПарсерGherkin.НачатьУстановкуЭкранируемыеСимволы(ОписаниеПустогоОбработчика(1), "|""'\");
		Исключение
			Объект.ИспользоватьПарсерGherkinИзКомпонентыVanessaExt = Ложь;
		КонецПопытки;
		
		Если Объект.ИспользоватьПарсерGherkinИзКомпонентыVanessaExt Тогда
			МодульПарсерGherkin().ИнициализацияПарсера();
		КонецЕсли;	 
		
		ВнешняяКомпонентаДляСкриншотов = Новый("AddIn." + ИдентификаторВнешнейКомпонентыДляСкриншотов + ".WindowsControl");
		БуферОбменаVA = Новый("AddIn." + ИдентификаторВнешнейКомпонентыДляСкриншотов + ".ClipboardControl");
		Если НЕ ЭтоLinux Тогда
			ВнешняяКомпонентаРаботаСGit = Новый("AddIn." + ИдентификаторВнешнейКомпонентыДляСкриншотов + ".GitFor1C");
		КонецЕсли;
		ВнешняяКомпонентаДляСкриншотов.НачатьПолучениеВерсия(ОписаниеОповещения);
		
		Если НадоОбновитьСтраницуWelcome Тогда
			МодульРедакторТекста().ПоказатьСтраницуWelcome(НедавноЗагруженныеФичи);
		КонецЕсли;	 
		
		Если НадоПоказатьПодсказкуРекомендуетсяСохранитьНастройки Тогда
			ПоказатьПодсказкуРекомендуетсяСохранитьНастройки();
		КонецЕсли;	 
		
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			Если ДополнительныеПараметры.Свойство("ПоместитьТекстОшибкиВБуферОбмена")
				И ДополнительныеПараметры.ПоместитьТекстОшибкиВБуферОбмена Тогда
					МодульРедакторТекста().СкопироватьТекстОшибкиВБуферОбменаVAVanessaEditor(ДополнительныеПараметры.ДанныеОшибки);
			КонецЕсли;	 
		КонецЕсли;	 
		
	ИначеЕсли ДополнительныеПараметры.Подключение Тогда
		ДополнительныеПараметры.Вставить("Подключение", Ложь);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПодключениеВнешнейКомпоненты", ЭтаФорма, ДополнительныеПараметры);
		НачатьУстановкуВнешнейКомпоненты(ОписаниеОповещения, МестоположениеВнешнейКомпонентыДляСкриншотов);
	Иначе
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ИмяОбработчика") Тогда
			ПодключитьОбработчикОжидания(ДополнительныеПараметры.ИмяОбработчика, 0.1, Истина);
		КонецЕсли;	 
		УстановитьУсловноеОформление();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученаВерсияКомпоненты(Значение, ДополнительныеПараметры) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Локализовать("Версия компоненты") + ": ");
	Массив.Добавить(Новый ФорматированнаяСтрока(СтрЗаменить(Значение, Символ(0), ""),, WebЦвета.Синий,, "https://github.com/lintest/VanessaExt/releases"));
	
	Элементы.ДекорацияВерсияVanessaExt.Заголовок = Новый ФорматированнаяСтрока(Массив);
	УстановитьУсловноеОформление();
	
	ПодключатьГорячуюКлавишуДляПолученияСправкиОбЭлементе(Ложь);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ИмяОбработчика") Тогда
		ПодключитьОбработчикОжидания(ДополнительныеПараметры.ИмяОбработчика, 0.1, Истина);
	КонецЕсли;	 
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьPidДескрипторОкнаКлиентаТестирования(ДанныеЗапускаКлиентаТестирования, ДопПараметры = Неопределено)
	
	Если НЕ ПустаяСтрока(ВнешняяКомпонентаДляСкриншотов) И Объект.ИспользоватьКомпонентуVanessaExt Тогда
		
		Если ДопПараметры = Неопределено Тогда
			ДопПараметры = Новый Структура;
		КонецЕсли;	
		ДопПараметры.Вставить("ДанныеЗапускаКлиентаТестирования",ДанныеЗапускаКлиентаТестирования);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолученКлиентТестирования", ЭтаФорма, ДопПараметры);
		ВнешняяКомпонентаДляСкриншотов.НачатьВызовНайтиКлиентТестирования(ОписаниеОповещения,
			ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученКлиентТестирования(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	СтруктураСвойствПроцесса = ПрочитатьСтрокуJSON(РезультатВызова);
	Если СтруктураСвойствПроцесса <> Неопределено Тогда
		ДескрипторОсновногоОкнаТекущегоКлиентаТестирования 	= СтруктураСвойствПроцесса.Window;
		PIDТекущегоКлиентаТестирования 						= СтруктураСвойствПроцесса.ProcessId;
	КонецЕсли;
	
	ДанныеЗапускаКлиентаТестирования = ДополнительныеПараметры.ДанныеЗапускаКлиентаТестирования;
	ДанныеЗапускаКлиентаТестирования.PIDКлиентаТестирования = PIDТекущегоКлиентаТестирования;
	Если НЕ ИдетЗаписьДействийПользователя Тогда
		ТекстСообщения = ПодставитьПараметрыВСтроку(Локализовать("Подключен клиент тестирования. PID <%1>. Порт <%2>."),
			Формат(ДанныеЗапускаКлиентаТестирования.PIDКлиентаТестирования, "ЧГ=; ЧН=0"),
			Формат(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента, "ЧГ=; ЧН=0"));
			
		ЗаписатьЛогВЖРИнформация("PIDКлиентаТестирования", ТекстСообщения);
		
		Если НЕ (ДополнительныеПараметры.Свойство("ПодключенУжеСуществующийСеанс")
				И ДополнительныеПараметры.ПодключенУжеСуществующийСеанс) Тогда
				
			Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
				ЗаписатьЛогВТекстИнформация("", ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;	 
	УстановитьУсловноеОформление();
	
	Если Объект.ЗапускатьКлиентТестированияСМаксимизированнымОкном
		И Объект.ИспользоватьКомпонентуVanessaExt
		И ДанныеЗапускаКлиентаТестирования.PIDКлиентаТестирования <> 0
		И ЭтоLinux Тогда
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("PIDКлиентаТестирования", ДанныеЗапускаКлиентаТестирования.PIDКлиентаТестирования);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьСписокОконДляМаксимизацииОкна", ЭтаФорма, ДопПараметры);
		ВнешняяКомпонентаДляСкриншотов.НачатьВызовПолучитьСписокОкон(ОписаниеОповещения, ДанныеЗапускаКлиентаТестирования.PIDКлиентаТестирования);
		
		Возврат;
		
	КонецЕсли;	 
	
	Если Объект.ИспользоватьКомпонентуVanessaExt
		И ДескрипторОсновногоОкнаТекущегоКлиентаТестирования <> Неопределено
		Тогда
		Оповещение = ОписаниеПустогоОбработчика(3);
		ВнешняяКомпонентаДляСкриншотов.НачатьВызовАктивироватьОкно(Оповещение, ДескрипторОсновногоОкнаТекущегоКлиентаТестирования);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучитьСписокОконДляМаксимизацииОкна(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	ДанныеОкон = ПрочитатьСтрокуJSON(РезультатВызова);
	
	Если ТипЗнч(ДанныеОкон) = Тип("Массив") Тогда
		Для Каждого ДанныеОкна Из ДанныеОкон Цикл
			Если НРег(ДанныеОкна.Class) = НРег("V8TopLevelFrameSDI") ИЛИ ДанныеОкна.Owner = 0 Тогда
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("PIDКлиентаТестирования", ДополнительныеПараметры.PIDКлиентаТестирования);
				ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаПослеПолучитьСписокОконДляМаксимизацииОкна", ЭтаФорма, ДопПараметры);
				ВнешняяКомпонентаДляСкриншотов.НачатьВызовРаспахнутьОкно(ОписаниеОповещения, ДанныеОкна.Window);
				
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	 
	Иначе
		ТекстОшибки = ПодставитьПараметрыВСтроку(
			Локализовать("Для процесса <%1> не найден список окон."),
			ДополнительныеПараметры.PIDКлиентаТестирования
		);
		ЗаписатьЛогВЖРОшибка("VanessaAutomation.ПолучитьСписокОконДляМаксимизацииОкна", ТекстОшибки);
	КонецЕсли;	 
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаПослеПолучитьСписокОконДляМаксимизацииОкна(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	ДопПараметры = Новый Структура;
	ВнешняяКомпонентаДляСкриншотов.НачатьВызовАктивироватьПроцесс(ОписаниеПустогоОбработчика(3),
		ДополнительныеПараметры.PIDКлиентаТестирования);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ЗначениеСистемногоПараметра(ИмяПараметра)
	#Если НЕ ВебКлиент Тогда
	
	Если ЭтоLinux Тогда 
		Возврат "";
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ВыполнитьКомандуОСБезПоказаЧерногоОкна("echo " + ИмяПараметра + " > """ + ИмяВременногоФайла + """");

	Попытка 
		Чтение = Новый ЧтениеТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
		ЗначениеСтроки = Чтение.ПрочитатьСтроку();
	Исключение 
		ЗначениеСтроки = "";	
	КонецПопытки;

	Если ЗначениеСтроки = Неопределено Тогда
		ЗначениеСтроки = "";
	КонецЕсли;	
			
	Возврат СокрЛП(ЗначениеСтроки);
	
	#КонецЕсли
КонецФункции	

&НаКлиенте
Процедура ЗаменитьUIDФайлеОбработки(ИмяФайла, ЧастьСтроиПоиска, UID)
	
	СтрокаПоиска = Неопределено;
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Поз = Найти(Стр, ЧастьСтроиПоиска);
		Если Поз > 0 Тогда
			СтрокаПоиска = СокрЛП(Стр);
		КонецЕсли;	 
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Если СтрокаПоиска = Неопределено Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("В файле <%1> не найдена строка <%2>."),
			ИмяФайла,
			ЧастьСтроиПоиска
		);
	КонецЕсли;	 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");
	
	ТекстФайла = Текст.Прочитать();
	
	СтрокаЗамены = ЧастьСтроиПоиска + """%1"">";
	СтрокаЗамены = СтрЗаменить(СтрокаЗамены, "%1", UID);
	
	Если Найти(ТекстФайла, СтрокаПоиска) = 0 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("В файле <%1> не найдена строка <%2>."),
			ИмяФайла,
			СтрокаПоиска
		);
	КонецЕсли;	 
	
	ТекстФайла = СтрЗаменить(ТекстФайла, СтрокаПоиска, СтрокаЗамены);
	
	Текст.Закрыть();
	
	УдалитьФайлыКомандаСистемы(ИмяФайла);
	
	ЗТ = Новый ЗаписьТекста(ИмяФайла, "UTF-8",, Истина); 
	ЗТ.Записать(ТекстФайла); 
	ЗТ.Закрыть();
КонецПроцедуры 

&НаКлиенте
Функция ПреобразоватьЗначениеИзТаблоПеременныхКТипу(Значение, ТипСтрокой)
	Если ТипСтрокой = "Строка" Тогда
		Возврат Строка(Значение);
	ИначеЕсли ТипСтрокой = "Число" Тогда
		ТипЧисло  = Новый ОписаниеТипов("Число");
		Возврат ТипЧисло.ПривестиЗначение(Значение);
	ИначеЕсли ТипСтрокой = "Дата" Тогда
		ТипЧисло  = Новый ОписаниеТипов("Дата");
		Возврат ТипЧисло.ПривестиЗначение(Значение);
	ИначеЕсли ТипСтрокой = "Булево" Тогда
		ТипЧисло  = Новый ОписаниеТипов("Булево");
		Возврат ТипЧисло.ПривестиЗначение(Значение);
	КонецЕсли;	
	
	Возврат Значение;
КонецФункции	 

&НаСервере
Процедура ВыделитьСтрокиСценарияКакКодВстроенногоЯзыкаНаСервере(Знач НомерНачальнойСтроки, Знач НомерКонечнойСтроки)

	СимволыНачалаВыделения = "|' ";
	СимволыКонцаВыделения  = " '|";
		
	ТекстКакДокумент = Новый ТекстовыйДокумент; 
	ТекстКакДокумент.УстановитьТекст(Объект.СгенерированныйСценарий);
	СвойстваГруппыВыделенныхСтрок = СвойстваСтрокВИнтервалеТекстовогоДокумента(ТекстКакДокумент, НомерНачальнойСтроки, НомерКонечнойСтроки);
	СвойстваОтдельныхСтрок = СвойстваГруппыВыделенныхСтрок.СвойстваСтрок;
	
	НеобрабатываемыеСтроки = Новый Массив;
	
	Для Каждого СвойстваСтроки Из СвойстваОтдельныхСтрок Цикл
		
		НеобходимоВыделение = Лев(СвойстваСтроки.СтрокаСокрЛП, СтрДлина(СимволыНачалаВыделения)) <> СимволыНачалаВыделения 
								Или Прав(СвойстваСтроки.СтрокаСокрЛП, СтрДлина(СимволыКонцаВыделения)) <> СимволыКонцаВыделения;
								
		Если Не НеобходимоВыделение Тогда
			НеобрабатываемыеСтроки.Добавить(СвойстваСтроки);
			Продолжить;
		КонецЕсли;
		
		Если Не СвойстваСтроки.СтрокаПуста Тогда
			
			ДлинаДоЭкранирования = СтрДлина(СвойстваСтроки.СтрокаУсредненная);
			СвойстваСтроки.СтрокаУсредненная = ЭкранироватьСпецСимволыДляЗначенияШага(СвойстваСтроки.СтрокаУсредненная);
			ДлинаПолеЭкранирования = СтрДлина(СвойстваСтроки.СтрокаУсредненная);
			РазницаДлинДоИПослеЭкранирования = ДлинаПолеЭкранирования - ДлинаДоЭкранирования;
									
			Если СвойстваСтроки.ДлинаСокрПрав = СвойстваГруппыВыделенныхСтрок.МаксимальнаяДлинаСтрокиСокрПрав
				И РазницаДлинДоИПослеЭкранирования > 0 Тогда
				
				СвойстваГруппыВыделенныхСтрок.МаксимальнаяДлинаСтрокиСокрПрав = СвойстваГруппыВыделенныхСтрок.МаксимальнаяДлинаСтрокиСокрПрав
																				+ РазницаДлинДоИПослеЭкранирования;
			КонецЕсли;
						
			СвойстваСтроки.ДлинаСокрПрав = СвойстваСтроки.ДлинаСокрПрав + РазницаДлинДоИПослеЭкранирования; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ПропускаемаяСтрока Из НеобрабатываемыеСтроки Цикл		
		СвойстваОтдельныхСтрок.Удалить(ПропускаемаяСтрока);
	КонецЦикла;
		
	Для Каждого СвойстваСтроки Из СвойстваОтдельныхСтрок Цикл
		
		НехваткаСимволовДоМаксимальнойДлины = 0;
		
		Если СвойстваСтроки.СтрокаПуста Тогда			
			НехваткаСимволовДоМаксимальнойДлины = СвойстваГруппыВыделенныхСтрок.МаксимальнаяДлинаСтрокиСокрПрав 
													- СвойстваГруппыВыделенныхСтрок.МинимальноеКоличествоПустыхСимволовСлева;
		Иначе			
			НехваткаСимволовДоМаксимальнойДлины = СвойстваГруппыВыделенныхСтрок.МаксимальнаяДлинаСтрокиСокрПрав 
													- СвойстваСтроки.ДлинаСокрПрав;
		КонецЕсли;
		
		// Для выравнивания всегда используем пробелы, даже если отступы сформированы табуляцией, так как строки все равно будут
		// оборачиваться в СимволыНачалаВыделения и СимволыКонцаВыделения, а пробелы гарантируют более стаблильное выравнивание.
		ПробелыВыравнивания = "";
		Для Счетчик = 1 По НехваткаСимволовДоМаксимальнойДлины Цикл
			ПробелыВыравнивания = ПробелыВыравнивания + " ";
		КонецЦикла;
		
		НоваяСтрока = СвойстваСтроки.ПустыеСимволыУсреденннойСтрокиСлева
						+ СимволыНачалаВыделения
						+ СвойстваСтроки.СтрокаУсредненная
						+ ПробелыВыравнивания
						+ СимволыКонцаВыделения;
		ТекстКакДокумент.ЗаменитьСтроку(СвойстваСтроки.НомерСтроки, НоваяСтрока);	
		
	КонецЦикла;
	
	Объект.СгенерированныйСценарий = ТекстКакДокумент.ПолучитьТекст();
	
КонецПроцедуры

&НаСервере
Функция СвойстваСтрокВИнтервалеТекстовогоДокумента(Знач ТекстовыйДокумент, Знач НомерНачальнойСтроки, 
		Знач НомерКонечнойСтроки, Знач СимволыКомментария = "")
		
	ДлинаСимволовКомментария = СтрДлина(СимволыКомментария);
	
	СвойстваСтрок = Новый ТаблицаЗначений();
	СвойстваСтрок.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	СвойстваСтрок.Колонки.Добавить("СтрокаСокрПрав", Новый ОписаниеТипов("Строка"));
	СвойстваСтрок.Колонки.Добавить("ДлинаСокрПрав", Новый ОписаниеТипов("Число"));
	СвойстваСтрок.Колонки.Добавить("СтрокаСокрЛП", Новый ОписаниеТипов("Строка"));
	СвойстваСтрок.Колонки.Добавить("СтрокаУсредненная", Новый ОписаниеТипов("Строка"));	
	СвойстваСтрок.Колонки.Добавить("ПустыеСимволыИсходнойСтрокиСлева", Новый ОписаниеТипов("Строка"));
	СвойстваСтрок.Колонки.Добавить("ПустыеСимволыУсреденннойСтрокиСлева", Новый ОписаниеТипов("Строка"));
	СвойстваСтрок.Колонки.Добавить("СтрокаЗакомментирована", Новый ОписаниеТипов("Булево"));
	СвойстваСтрок.Колонки.Добавить("СтрокаПуста", Новый ОписаниеТипов("Булево"));
			
	МинКоличествоПустыхСимволовСлева = Неопределено;
	МинКоличествоПустыхСимволовСправа = Неопределено;
	МаксимальнаяДлинаСтрокиСокрПрав = 0;
	МинимальнаяПустаяСтрокаСлева = "";
	
	ОбрабатываемыеСтроки = Новый Массив;
		
	Для НомерСтроки = НомерНачальнойСтроки По НомерКонечнойСтроки Цикл
				
		ИсходнаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
		СвойстваСтроки = СвойстваСтрок.Добавить();
		СвойстваСтроки.НомерСтроки = НомерСтроки;
				
		СтрокаСокрЛев = СокрЛ(ИсходнаяСтрока);
		СвойстваСтроки.СтрокаСокрПрав = СокрП(ИсходнаяСтрока);
		СвойстваСтроки.СтрокаСокрЛП = СокрП(СтрокаСокрЛев);
		СвойстваСтроки.СтрокаЗакомментирована = ДлинаСимволовКомментария <> 0 
												И СимволыКомментария = Лев(СтрокаСокрЛев, ДлинаСимволовКомментария);
												
		ДлинаИсходная = СтрДлина(ИсходнаяСтрока);												
		ДлинаСокрЛП = СтрДлина(СвойстваСтроки.СтрокаСокрЛП);
		ДлинаСокрЛев = СтрДлина(СтрокаСокрЛев);
		СвойстваСтроки.ДлинаСокрПрав = СтрДлина(СвойстваСтроки.СтрокаСокрПрав);
										
		ПустыхСлева = ДлинаИсходная - ДлинаСокрЛев;
		ПустыхСправа = ДлинаИсходная - СвойстваСтроки.ДлинаСокрПрав;
		
		СвойстваСтроки.ПустыеСимволыИсходнойСтрокиСлева = Лев(ИсходнаяСтрока, ПустыхСлева);
		СвойстваСтроки.СтрокаПуста = (ДлинаСокрЛП = 0);
		
		Если ДлинаСокрЛП <> 0 И (МинКоличествоПустыхСимволовСлева = Неопределено Или ПустыхСлева < МинКоличествоПустыхСимволовСлева) Тогда
			МинКоличествоПустыхСимволовСлева = ПустыхСлева;
			МинимальнаяПустаяСтрокаСлева = СвойстваСтроки.ПустыеСимволыИсходнойСтрокиСлева;
		КонецЕсли;
			
		Если ДлинаСокрЛП <> 0 И (МинКоличествоПустыхСимволовСправа = Неопределено Или ПустыхСправа < МинКоличествоПустыхСимволовСправа) Тогда
			МинКоличествоПустыхСимволовСправа = ПустыхСправа;			
		КонецЕсли;  
		
		Если СвойстваСтроки.ДлинаСокрПрав > МаксимальнаяДлинаСтрокиСокрПрав Тогда
			МаксимальнаяДлинаСтрокиСокрПрав = СвойстваСтроки.ДлинаСокрПрав;
		КонецЕсли;
				
	КонецЦикла;
	
	Если МинКоличествоПустыхСимволовСлева = Неопределено Тогда
		МинКоличествоПустыхСимволовСлева = 0;
	КонецЕсли;
	
	Если МинКоличествоПустыхСимволовСправа = Неопределено Тогда
		МинКоличествоПустыхСимволовСправа = 0;
	КонецЕсли;
		
	Для Каждого СвойстваСтроки Из СвойстваСтрок Цикл
				
		СвойстваСтроки.ПустыеСимволыУсреденннойСтрокиСлева = Лев(СвойстваСтроки.СтрокаСокрПрав, МинКоличествоПустыхСимволовСлева);
		СвойстваСтроки.СтрокаУсредненная = Сред(СвойстваСтроки.СтрокаСокрПрав, МинКоличествоПустыхСимволовСлева + 1); 
		
		// Для корректного выделения пустых строк необходимо выровнять их по правой границе и уточнить для них нехватку до максимальной длины.
		// В этом случае корректное выравнивание пустых строк будет только при условии, что в начале каждой выделенной строки одинаковые символы отступов:
		// либо только табуляции, либо только пробелы.
		Если СтрДлина(СвойстваСтроки.ПустыеСимволыУсреденннойСтрокиСлева) < МинКоличествоПустыхСимволовСлева Тогда
			СвойстваСтроки.ПустыеСимволыУсреденннойСтрокиСлева = МинимальнаяПустаяСтрокаСлева;			
		КонецЕсли;
		
	КонецЦикла;
	
	ВозвращаемыеСвойства = Новый Структура;
	ВозвращаемыеСвойства.Вставить("СвойстваСтрок", СвойстваСтрок);
	ВозвращаемыеСвойства.Вставить("МаксимальнаяДлинаСтрокиСокрПрав", МаксимальнаяДлинаСтрокиСокрПрав);
	ВозвращаемыеСвойства.Вставить("МинимальноеКоличествоПустыхСимволовСлева", МинКоличествоПустыхСимволовСлева); 	
	
	Возврат ВозвращаемыеСвойства;
	
КонецФункции

&НаКлиенте
Процедура РазвернутьВсеСтрокиДерева(ДеревоФормыСтроки)
	Для Каждого Строка Из ДеревоФормыСтроки Цикл
		РазвернутьСтрокуДерева(Строка, Ложь);
		
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			РазвернутьВсеСтрокиДерева(ПодчиненныеСтроки);
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры 

&НаСервере
Процедура КомментироватьРаскомментироватьСтрокиСценарияНаСервере(Знач НомерНачальнойСтроки, Знач НомерКонечнойСтроки)

	СимволыКомментария = "//";
	ДлинаСимволовКомментария = СтрДлина(СимволыКомментария);
		
	ТекстКакДокумент = Новый ТекстовыйДокумент; 
	ТекстКакДокумент.УстановитьТекст(Объект.СгенерированныйСценарий);
	СвойстваГруппыВыделенныхСтрок = СвойстваСтрокВИнтервалеТекстовогоДокумента(ТекстКакДокумент, 
		НомерНачальнойСтроки, НомерКонечнойСтроки, СимволыКомментария);	
	СвойстваОтдельныхСтрок = СвойстваГруппыВыделенныхСтрок.СвойстваСтрок;
	
	ЕстьНезакомментированныйТекст = Ложь; 
	ВсеСтрокиПусты = Истина;
	
	Для Каждого СвойстваСтроки Из СвойстваОтдельныхСтрок Цикл
		
		Если Не СвойстваСтроки.СтрокаПуста Тогда
			ВсеСтрокиПусты = Ложь;
		КонецЕсли;
		
		Если Не СвойстваСтроки.СтрокаЗакомментирована И Не СвойстваСтроки.СтрокаПуста Тогда
			ЕстьНезакомментированныйТекст = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ВыполнятьКомментирование = ЕстьНезакомментированныйТекст Или ВсеСтрокиПусты;	
	
	Для Каждого СвойстваСтроки Из СвойстваОтдельныхСтрок Цикл
		
		НоваяСтрока = "";
		
		Если ВыполнятьКомментирование Тогда
			НоваяСтрока = СвойстваСтроки.ПустыеСимволыУсреденннойСтрокиСлева + СимволыКомментария + " " + СвойстваСтроки.СтрокаУсредненная;
		Иначе
			СимволПослеСимволаКомментария = Сред(СвойстваСтроки.СтрокаСокрЛП, ДлинаСимволовКомментария + 1, 1);
			ПослеСимволаКомментарияЕстьПустойСимвол = СтрДлина(СимволПослеСимволаКомментария) = 1 И ПустаяСтрока(СимволПослеСимволаКомментария);
			ОтступДляПолученияСтроки = ?(ПослеСимволаКомментарияЕстьПустойСимвол, 2, 1);
			НоваяСтрока = СвойстваСтроки.ПустыеСимволыИсходнойСтрокиСлева 
				+ Сред(СвойстваСтроки.СтрокаСокрЛП, ДлинаСимволовКомментария + ОтступДляПолученияСтроки);
		КонецЕсли;
		
		ТекстКакДокумент.ЗаменитьСтроку(СвойстваСтроки.НомерСтроки, НоваяСтрока);
		
	КонецЦикла;
	
	Объект.СгенерированныйСценарий = ТекстКакДокумент.ПолучитьТекст();
	
КонецПроцедуры	

&НаКлиенте
Процедура ВычислитьPIDЭтогоСеансаСлужебныйCOM()
	#Если НЕ ВебКлиент Тогда
	
	Попытка
		Если ЭтоLinux Тогда
			PIDЭтогоСеанса = "";
			ПутьКФайлу = ПолучитьИмяВременногоФайла(".txt");
			
			КодВозврата = Неопределено;
			Команда = "ps -o ppid= -p $(echo $$) > '" + ПутьКФайлу + "'";
			КомандаСистемы(Команда);
			
			Если НЕ ФайлСуществуетКомандаСистемы(ПутьКФайлу) Тогда
				ВызватьИсключение Локализовать("Не удалось выполнить команду получения PID родительского процесса.");
			КонецЕсли;
			
			Текст = Новый ЧтениеТекста;
			Текст.Открыть(ПутьКФайлу,"UTF-8");
			Стр = Текст.Прочитать();
			Текст.Закрыть();
			
			PIDЭтогоСеанса = СокрЛП(Стр);
		Иначе	
			PIDЭтогоСеанса = "";
			
			oLocator = Новый COMObject("WbemScripting.SWbemLocator");
			oService = oLocator.ConnectServer(".", "root\CIMV2");
			
			oShell = Новый COMObject("WScript.Shell");
			oApp = oShell.Exec("rundll32.exe kernel32,Sleep");
			
			oChildProcess = oService.Get("Win32_Process.Handle=" + Формат(oApp.ProcessID, "ЧГ=; ЧН=0"));
			
			PIDЭтогоСеанса = Формат(oChildProcess.ParentProcessID, "ЧГ=; ЧН=0");
			
			oChildProcess.Terminate();
		КонецЕсли;	 
    Исключение
	   СообщитьПользователю(ОписаниеОшибки());
	   ЗаписатьЛогВЖРОшибка("VanessaAutomation.ВычислитьPIDЭтогоСеансаСлужебный", ОписаниеОшибки());
	КонецПопытки;
	
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотыВсехОконКомпонентаПродолжение() Экспорт
	
	Если Объект.ИспользоватьКомпонентуVanessaExt
		И ДескрипторОсновногоОкнаТекущегоКлиентаТестирования <> Неопределено
		И ВнешняяКомпонентаДляСкриншотов <> Неопределено
		Тогда
		Попытка
			Оповещение = ОписаниеПустогоОбработчика(3);
			ВнешняяКомпонентаДляСкриншотов.НачатьВызовАктивироватьОкно(Оповещение, ДескрипторОсновногоОкнаТекущегоКлиентаТестирования);
		Исключение
			ЗаписатьЛогВЖРОшибка("СделатьСкриншотыВсехОконКомпонентаПродолжение", ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	ПараметрыСкриншотов = Новый Структура;
	ПараметрыСкриншотов.Вставить("ИмяФайла", МассивФайлов);
	ПараметрыСкриншотов.Вставить("ИмяПроцедуры", "СделатьСкриншотыВсехОконКомпонентаПродолжение2");
	ПараметрыСкриншотов.Вставить("СпособСнятияСкриншотовВнешнейКомпонентой", 0);
	ПараметрыСкриншотов.Вставить("ИмяСкриншотаДляОтчета", "MainScreen");
	СделатьСкриншотКомпонента(ПараметрыСкриншотов);
КонецПроцедуры 

&НаКлиенте
Процедура СделатьСкриншотыВсехОконКомпонентаПродолжение2() Экспорт
	ВычислитьPIDЭтогоСеансаСлужебный();
	ОписаниеОповещения = Новый ОписаниеОповещения("СделатьСкриншотыВсехОконКомпонентаСписокПроцессов", ЭтаФорма);
	ВнешняяКомпонентаДляСкриншотов.НачатьВызовПолучитьСписокПроцессов(ОписаниеОповещения, Истина);
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьИнициализациюWebSocket()
	#Если НЕ ВебКлиент Тогда
	ПараметрыКоманды = Новый Структура("frameId", ИдентификаторФрейма);
	ДанныеJSON = ВыполнитьКомандуХрома("Page.createIsolatedWorld", ПараметрыКоманды);
	КонтекстJavaScript = ДанныеJSON.result.executionContextId;
	
	ВременныйКаталог = ПолучитьИмяВременногоФайла();
	УдалитьФайлыКомандаСистемы(ВременныйКаталог);
	СоздатьКаталогЕслиЕгоНет(ВременныйКаталог);

	АрихивБиблиотекиJavaScript = ПолучитьИзВременногоХранилища(МестоположениеБиблиотекиJavaScript);
	ЧтениеZipФайла = Новый ЧтениеZipФайла(АрихивБиблиотекиJavaScript.ОткрытьПотокДляЧтения());
	МассивЭлементовБиблиотеки = Новый Массив;
	Для Каждого ЭлементZipФайла из ЧтениеZipФайла.Элементы Цикл
		//Первым должен быть вызван jQuery, это важно!!!
		Если ЭлементZipФайла.Имя = "jquery.min.js" Тогда
			МассивЭлементовБиблиотеки.Вставить(0, ЭлементZipФайла);
		Иначе
			МассивЭлементовБиблиотеки.Добавить(ЭлементZipФайла);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементZipФайла из МассивЭлементовБиблиотеки Цикл
		ЧтениеZipФайла.Извлечь(ЭлементZipФайла, ВременныйКаталог, Вычислить("РежимВосстановленияПутейФайловZIP.Восстанавливать"));
		ИмяФайлаСкрипта = ВременныйКаталог + "/" + ЭлементZipФайла.ПолноеИмя;
		ВыполнятьВКонтекстеСтраницы = ЭлементZipФайла.Имя = "library_mainContext.js";
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаСкрипта);
		СтрокаBase64 = Base64Строка(ДвоичныеДанные);
		СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ПС, "");
		СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ВК, "");
		ДлинаСтроки = СтрДлина(СтрокаBase64);
		РазмерБуфера = 3000;
		Позиция = 1; 
		Пока Позиция <= ДлинаСтроки Цикл
			Буфер = Сред(СтрокаBase64, Позиция, РазмерБуфера);
			Буфер = "window.base64vanessa" + ?(Позиция=1,"","+") + "='" + Буфер + "';";
			ВыполнитьJavaScriptБраузерСлужебный(Буфер, ВыполнятьВКонтекстеСтраницы);
			Позиция = Позиция + РазмерБуфера;
		КонецЦикла;		
		ВыполнитьJavaScriptБраузерСлужебный(
		"eval.apply(null,[decodeURIComponent(atob(window.base64vanessa).split('').map(
		|c => '%'+('00'+c.charCodeAt(0).toString(16)).slice(-2)).join(''))]);", ВыполнятьВКонтекстеСтраницы);
	КонецЦикла;
	УдалитьКаталогКомандаСистемы(ВременныйКаталог);
	
	ТекстJSON = ВнешняяКомпонентаДляСкриншотов.СвойстваЭкрана;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	РазмерыВиртуальногоЭкрана = ПрочитатьJSON(ЧтениеJSON);
	#КонецЕсли
КонецПроцедуры 

&НаКлиенте
Функция ВыполнитьJavaScriptБраузерСлужебный(ТекстJavaScript, ВКонтекстеСтраницы = Ложь)
	
	ПараметрыКоманды = Новый Структура("expression", ТекстJavaScript);
	Если НЕ ВКонтекстеСтраницы И КонтекстJavaScript <> Неопределено Тогда
		ПараметрыКоманды.Вставить("contextId", КонтекстJavaScript);	
	КонецЕсли; 
	Возврат ВыполнитьКомандуХрома("Runtime.evaluate", ПараметрыКоманды);
	
КонецФункции

&НаКлиенте
Функция ДатаИзСтрокиКомандыСистемы(Знач Стр)
	Поз = Найти(Стр, "/");
	Если Поз > 0 Тогда
		Месяц = Число(Лев(Стр, Поз - 1));
		Стр   = Сред(Стр, Поз + 1);
		
		Поз   = Найти(Стр, "/");
		День  = Число(Лев(Стр, Поз - 1));
		Стр   = Сред(Стр, Поз + 1);
		
		Поз   = Найти(Стр, " ");
		Если Поз = 0 Тогда
			Поз   = Найти(Стр, ":");
		КонецЕсли;	 
		Год   = Число(Лев(Стр, Поз - 1));
		Стр   = СокрЛП(Сред(Стр, Поз + 1));
		
		Секунды = 0;
		
		Стр = СтрЗаменить(Стр,"AM","");
		Стр = СокрЛП(СтрЗаменить(Стр,"PM",""));
		
		МассивЗначений = РазложитьСтрокуВМассивПодстрокКлиент(Стр, ":");
		
		Часы    = Число(МассивЗначений[0]);
		Минуты  = Число(МассивЗначений[1]);
		Если МассивЗначений.Количество() > 2 Тогда
			Секунды = Число(МассивЗначений[2]);
		КонецЕсли;	 
		
		Возврат Дата(Год, Месяц, День, Часы, Минуты, Секунды);
	КонецЕсли;	 
	
	Стр = СтрЗаменить(Стр, " ", ":");
	Стр = СтрЗаменить(Стр, ".", ":");
	МассивЗначений = РазложитьСтрокуВМассивПодстрокКлиент(Стр, ":");
	
	День    = Число(МассивЗначений[0]);
	Месяц   = Число(МассивЗначений[1]);
	Год     = Число(МассивЗначений[2]);
	Часы    = Число(МассивЗначений[3]);
	Минуты  = Число(МассивЗначений[4]);
	Секунды = Число(МассивЗначений[5]);
	
	Возврат Дата(Год, Месяц, День, Часы, Минуты, Секунды);
КонецФункции	 

&НаКлиенте
Функция НадоПодключитьEPFСвязаннуюСФичей(ДанныеСценария)
	Если НЕ ДанныеСценария.ФичаИмеетСвоюEPF ИЛИ ДанныеСценария.EPFПодключена Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	ПутьКEPF = ПреобразоватьПутьКФайлуКСтандарту(ПолучитьПутьК_EPF_Фичи(ДанныеСценария.ПолныйПутьКФиче));
	Если ПодключенныеEPF[ПутьКEPF] <> Неопределено Тогда
		ДанныеСценария.EPFПодключена = Истина;
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	 

&НаКлиенте
Процедура ЗапомнитьПодключеннуюEPF(ИмяФайла)
	ПодключенныеEPF.Вставить(ПреобразоватьПутьКФайлуКСтандарту(ИмяФайла), Истина);
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаДвойногоКликаПоДеревуШагов(СтандартнаяОбработка, ДанныеОшибки)
	ТекДанные = Элементы.ДеревоТестов.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекДанные.ТекстОшибки) Тогда
		СтандартнаяОбработка = Ложь;
		ИдСтроки = ТекДанные.ИДСтроки;
		Если ТекДанные.ПроизвольныеЗначения.Свойство("ИдСтрокиШагаСОшибкой") Тогда
			ИдСтроки = ТекДанные.ПроизвольныеЗначения.ИдСтрокиШагаСОшибкой;
		КонецЕсли;	 
		ПоказатьТекстОшибки(ТекДанные.ТекстОшибки, ТекДанные.ПроизвольныеЗначения, ИДСтроки);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеОшибки) = Тип("Структура") Тогда
		ПоказатьТекстОшибки(ДанныеОшибки.ErrorText, Неопределено, Неопределено);
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФормуИзвестныхШаговОбработчикОжидания() Экспорт
	ОткрытьФормуИзвестныхШагов(Истина);
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьМодульИсследовательФормы()
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Язык", Объект.ЯзыкГенератораGherkin);
	ПараметрыФормы.Вставить("ТекущийTestclientЭтоWebКлиент", ТекущийTestclientЭтоWebКлиент);
	ФормаИсследователя = ПолучитьФорму(ПолучитьИмяОбработкиVA() + ".Форма.ИсследовательФормы", ПараметрыФормы, ЭтаФорма);
	ФормаИсследователя.ИнициализацияФормы(ЭтаФорма);
	ЗарегистрироватьМодульДляОтключения(ФормаИсследователя);
	Возврат ФормаИсследователя;
КонецФункции	 

&НаКлиенте
Функция ПолучитьМодульРаботаСоСтроками()
	ПараметрыФормы = Новый Структура;
	ФормаРаботаСоСтроками = ПолучитьФорму(ПолучитьИмяОбработкиVA() + ".Форма.РаботаСоСтроками", ПараметрыФормы, ЭтаФорма);
	Возврат ФормаРаботаСоСтроками;
КонецФункции	 

&НаКлиенте
Функция ПолучитьМодульСерверныеВызовы()
	ПараметрыФормы = Новый Структура;
	ФормаСерверныеВызовы = ПолучитьФорму(ПолучитьИмяОбработкиVA() + ".Форма.СерверныеВызовы", ПараметрыФормы, ЭтаФорма);
	Возврат ФормаСерверныеВызовы;
КонецФункции	 

&НаКлиенте
Функция ЗапрещеныСинхронныеВызовыКлиент()
	Файл = Новый Файл("testfile");
	Попытка
		ФайлСуществует = Файл.Существует();
		Возврат Ложь;
	Исключение
		Возврат Истина;
	КонецПопытки;
КонецФункции	 

#Область ТихаяУстановкаVanessaExt

&НаСервере
Функция DTСлужебнойБазыСервер()
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("InstallVanessaExt");
КонецФункции

&НаКлиенте
Процедура ТихаяУстановкаVanessaExt(ДополнительныеПараметрыУстановкиКомпоненты)
	
#Если НЕ ВебКлиент Тогда
	
	ДополнительныеПараметрыУстановкиКомпоненты.КоличествоПопытокУстановкиКомпоненты
		= ДополнительныеПараметрыУстановкиКомпоненты.КоличествоПопытокУстановкиКомпоненты + 1;
		
	Если ДополнительныеПараметрыУстановкиКомпоненты.КоличествоПопытокУстановкиКомпоненты > 1 Тогда
		sleep(1);
	КонецЕсли;	 	
		
	ДДСлужебнойБазы = DTСлужебнойБазыСервер();
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("dt");
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяФайла", ИмяВременногоФайла);
	ДопПараметры.Вставить("ДополнительныеПараметрыУстановкиКомпоненты", ДополнительныеПараметрыУстановкиКомпоненты);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗаписиДвоичныхДанныхСлужебнойБазы", ЭтаФорма, ДопПараметры);
	ДДСлужебнойБазы.НачатьЗапись(ОписаниеОповещения, ИмяВременногоФайла);
	
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция МаксКолПопытокУстановкиКомпоненты()
	Возврат 5;
КонецФункции

&НаКлиенте
Процедура ОбработкаОшибкиТихойУстановкиКомпоненты(ДополнительныеПараметрыУстановкиКомпоненты, Команда, ИмяФайлаOUT, ИмяФайлаЛога)
	
	Если ДополнительныеПараметрыУстановкиКомпоненты.КоличествоПопытокУстановкиКомпоненты >= МаксКолПопытокУстановкиКомпоненты() Тогда
		ВызватьОшибкуПакетнойКомандыУстановкиКомпоненты(Команда, ИмяФайлаOUT, ИмяФайлаЛога);
		
		Если Объект.ЗавершатьРаботуЕслиНеПолучилосьВыполнитьТихуюУстановкуКомпоненты Тогда
			ЗаписатьЛогВЖРИнформация("ЗавершениеВыполненияСценариев", "ЗавершатьРаботуЕслиНеПолучилосьВыполнитьТихуюУстановкуКомпоненты");
			ВыгрузитьСтатусВыполненияСценариевВФайл("4", 
				ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев));
			ПрекратитьРаботуСеансаVanessaAutomation();
			Возврат;
		КонецЕсли;	
		
		ИмяПараметра = "InstallVanessaExtOnFailOfQuietInstall";
		ВыполнитьПодключениеВнешнейКомпонентыПриОшибкеТихойУстановки = ЗначениеПараметраЗапуска(ИмяПараметра, Ложь);
		
		Если ВыполнитьПодключениеВнешнейКомпонентыПриОшибкеТихойУстановки Тогда
			ВыполнитьПодключениеВнешнейКомпоненты(ДополнительныеПараметрыУстановкиКомпоненты);
		Иначе	
			ПодключитьОбработчикОжидания(ДополнительныеПараметрыУстановкиКомпоненты.ИмяОбработчика, 0.1, Истина);
		КонецЕсли;	 
		
		Возврат;
	Иначе	
		ТихаяУстановкаVanessaExt(ДополнительныеПараметрыУстановкиКомпоненты);
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписиДвоичныхДанныхСлужебнойБазы(ДопПараметры) Экспорт
	
#Если НЕ ВебКлиент Тогда
	
	КаталогПрограммы = ДополнитьСлешВПуть(КаталогПрограммы()) + ИмяИсполняемогоФайлаТолстыйКлиент;
	
	Если НЕ ДопПараметры.ДополнительныеПараметрыУстановкиКомпоненты.Свойство("ВременныйКаталогБазы") Тогда
		
		// Создание временной файловой базы
		ВременныйКаталогБазы = ПолучитьИмяВременногоФайла("");
		ИмяФайлаOUT = ПолучитьИмяВременногоФайла("txt");
		ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
		
		Команда = """%КаталогПрограммы"" CREATEINFOBASE File="""  + ВременныйКаталогБазы + """ /DisableStartupDialogs /DisableStartupMessages /out """ + ИмяФайлаOUT + """ > """ + ИмяФайлаЛога + """";
		Команда = СтрЗаменить(Команда, "%КаталогПрограммы", КаталогПрограммы);
		ЗаписатьЛогВЖРИнформация("СозданиеВременнойБазы", Команда);
		Результат = ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
		ЗаписатьСодержимоеФайлаВЖР("Out", ИмяФайлаOUT);
		ЗаписатьСодержимоеФайлаВЖР("Лог", ИмяФайлаЛога);
		
		Если Результат <> 0
			ИЛИ ВЛогеПодключенияКомпонентыОбнаруженыОшибки(ДопПараметры.ДополнительныеПараметрыУстановкиКомпоненты, Команда, ИмяФайлаOUT, ИмяФайлаЛога)
			Тогда
			ОбработкаОшибкиТихойУстановкиКомпоненты(ДопПараметры.ДополнительныеПараметрыУстановкиКомпоненты, Команда, ИмяФайлаOUT, ИмяФайлаЛога);
			Возврат;
		КонецЕсли;
		
		ДопПараметры.ДополнительныеПараметрыУстановкиКомпоненты.Вставить("ВременныйКаталогБазы", ВременныйКаталогБазы);
		
	Иначе	
		ВременныйКаталогБазы = ДопПараметры.ДополнительныеПараметрыУстановкиКомпоненты.ВременныйКаталогБазы;
	КонецЕсли;	 
	
	Если НЕ ДопПараметры.ДополнительныеПараметрыУстановкиКомпоненты.Свойство("DTВременныйКаталогБазыЗагружен") Тогда
		
		// Загрузка dt
		ИмяФайлаOUT = ПолучитьИмяВременногоФайла("txt");
		ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
		Команда = """%КаталогПрограммы"" DESIGNER /F"""  + ВременныйКаталогБазы + """ /RestoreIB ""%dt"" /DisableStartupDialogs /DisableStartupMessages /out """ + ИмяФайлаOUT + """ > """ + ИмяФайлаЛога + """";
		Команда = СтрЗаменить(Команда, "%КаталогПрограммы", КаталогПрограммы);
		Команда = СтрЗаменить(Команда, "%dt", ДопПараметры.ИмяФайла);
		ЗаписатьЛогВЖРИнформация("ЗагрузкаDt", Команда);
		Результат = ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
		ЗаписатьСодержимоеФайлаВЖР("Out", ИмяФайлаOUT);
		ЗаписатьСодержимоеФайлаВЖР("Лог", ИмяФайлаЛога);
		
		Если Результат <> 0
			ИЛИ ВЛогеПодключенияКомпонентыОбнаруженыОшибки(ДопПараметры.ДополнительныеПараметрыУстановкиКомпоненты, Команда, ИмяФайлаOUT, ИмяФайлаЛога)
			Тогда
			ОбработкаОшибкиТихойУстановкиКомпоненты(ДопПараметры.ДополнительныеПараметрыУстановкиКомпоненты, Команда, ИмяФайлаOUT, ИмяФайлаЛога);
			Возврат;
		КонецЕсли;
		
		ДопПараметры.ДополнительныеПараметрыУстановкиКомпоненты.Вставить("DTВременныйКаталогБазыЗагружен", Истина);
		
	КонецЕсли;
	
	//Запуск служебной базы с установкой компоненты
	ДопПараметры2 = Новый Структура;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("zip");
	ДопПараметры2.Вставить("ИмяФайла", ИмяВременногоФайла);
	ДопПараметры2.Вставить("ВременныйКаталогБазы", ВременныйКаталогБазы);
	ДопПараметры2.Вставить("КаталогПрограммы", КаталогПрограммы);
	ДопПараметры2.Вставить("ДополнительныеПараметрыУстановкиКомпоненты", ДопПараметры.ДополнительныеПараметрыУстановкиКомпоненты);
	ДДКомпоненты = ПолучитьИзВременногоХранилища(МестоположениеВнешнейКомпонентыДляСкриншотов);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗаписиДвоичныхДанныхКомпоненты", ЭтаФорма, ДопПараметры2);
	ДДКомпоненты.НачатьЗапись(ОписаниеОповещения, ИмяВременногоФайла);
	
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиДвоичныхДанныхКомпоненты(ДопПараметры) Экспорт
	
	#Если НЕ ВебКлиент Тогда
	
	//Запуск служебной базы с установкой компоненты
	КаталогПрограммы = ДополнитьСлешВПуть(КаталогПрограммы()) + ИмяИсполняемогоФайлаТонкийКлиент;
	ИмяФайлаOUT = ПолучитьИмяВременногоФайла("txt");
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	Команда = """%КаталогПрограммы"" ENTERPRISE /F"""  + ДопПараметры.ВременныйКаталогБазы + """ /NAdministrator /DisableStartupDialogs /DisableStartupMessages /C""%ПараметрЗапуска""  /out """ + ИмяФайлаOUT + """ > """ + ИмяФайлаЛога + """";
	Команда = СтрЗаменить(Команда, "%КаталогПрограммы", КаталогПрограммы);
	Команда = СтрЗаменить(Команда, "%dt", ДопПараметры.ИмяФайла);
	ИмяВременногоФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	Команда = СтрЗаменить(Команда, "%ПараметрЗапуска", "AddinPath=" + ДопПараметры.ИмяФайла + ";LogPath=" + ИмяВременногоФайлаЛога);
	ЗаписатьЛогВЖРИнформация("ТихаяУстановкаКомпоненты", Команда);
	Результат = ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
	ЗаписатьСодержимоеФайлаВЖР("LogPath", ИмяВременногоФайлаЛога);
	ЗаписатьСодержимоеФайлаВЖР("Out", ИмяФайлаOUT);
	ЗаписатьСодержимоеФайлаВЖР("Лог", ИмяФайлаЛога);
	
	ВЛогеНайденоСообщениеОбУспешнойУстановкеКомпоненты = Ложь;
	Если ФайлСуществуетКомандаСистемы(ИмяВременногоФайлаЛога) Тогда
		Попытка
			Текст = Новый ЧтениеТекста;
			Текст.Открыть(ИмяВременногоФайлаЛога, "UTF-8",,,Ложь);
			ТекстФайла = Текст.Прочитать();
			Текст.Закрыть();
			
			Если Найти(НРег(ТекстФайла), НРег("Installation completed successfully")) > 0 Тогда
				ВЛогеНайденоСообщениеОбУспешнойУстановкеКомпоненты = Истина;
			КонецЕсли;	
			
		Исключение
			ЗаписатьЛогВЖРОшибка("ПослеЗаписиДвоичныхДанныхКомпоненты", ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;	
	
	ЗаписатьЛогВЖРИнформация("ТихаяУстановкаКомпоненты", "ВЛогеНайденоСообщениеОбУспешнойУстановкеКомпоненты=" + ВЛогеНайденоСообщениеОбУспешнойУстановкеКомпоненты);
	
	Если Результат <> 0
		ИЛИ ВЛогеПодключенияКомпонентыОбнаруженыОшибки(ДопПараметры.ДополнительныеПараметрыУстановкиКомпоненты, Команда, ИмяФайлаOUT, ИмяФайлаЛога)
		ИЛИ НЕ ВЛогеНайденоСообщениеОбУспешнойУстановкеКомпоненты
		Тогда
		ОбработкаОшибкиТихойУстановкиКомпоненты(ДопПараметры.ДополнительныеПараметрыУстановкиКомпоненты, Команда, ИмяФайлаOUT, ИмяФайлаЛога);
		Возврат;
	КонецЕсли;
	БылаВыполненаТихаяУстановкаКомпоненты = Истина;
	ТекстСообщения = Локализовать("Была выполнена тихая установка внешней компоненты VanessaExt.");
	СообщитьПользователю(ТекстСообщения);
	ЗаписатьЛогВЖРИнформация("ТихаяУстановкаКомпоненты", ТекстСообщения);
	ВыполнитьПодключениеВнешнейКомпоненты(ДопПараметры.ДополнительныеПараметрыУстановкиКомпоненты);
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСодержимоеФайлаВЖР(ТипФайла, ИмяФайла)
	Если ИмяФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;	
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8",,,Ложь);
	ТекстФайла = Текст.Прочитать();
	Текст.Закрыть();
	
	ЗаписатьЛогВЖРИнформация("СодержимоеФайла." + ТипФайла, ТекстФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОшибкуПакетнойКомандыУстановкиКомпоненты(Команда, ИмяФайлаOUT = Неопределено, ИмяФайлаЛога = Неопределено)
	ТекстОшибки = Локализовать("Не получилось выполнить тихую установку компоненты VanessaExt.")
		+ Символы.ПС + ПодставитьПараметрыВСтроку(Локализовать("Не получилось выполнить команду <%1>."), Команда);
	
	Если ИмяФайлаOUT <> Неопределено И ФайлСуществуетКомандаСистемы(ИмяФайлаOUT) Тогда
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайлаOUT,"UTF-8",,,Ложь);
		ТекстOut = Текст.Прочитать();
		Текст.Закрыть();
		
		ТекстОшибки = ТекстОшибки + Символы.ПС + ТекстOut;
	КонецЕсли;
	
	Если ИмяФайлаЛога <> Неопределено И ФайлСуществуетКомандаСистемы(ИмяФайлаЛога) Тогда
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайлаЛога,"UTF-8",,,Ложь);
		ТекстЛога = Текст.Прочитать();
		Текст.Закрыть();
		
		ТекстОшибки = ТекстОшибки + Символы.ПС + ТекстЛога;
	КонецЕсли;
	
	ЗаписатьЛогВЖРОшибка("VanessaAutomation.УстановкаКомпоненты", ТекстОшибки);
	
	Если ЭтоЗапускИзКоманднойСтроки() Тогда
		СообщитьПользователю(ТекстОшибки);
	Иначе
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТихаяУстановкаКомпонент

&НаКлиенте
Процедура ТихаяУстановкаКомпонент(ДополнительныеПараметрыУстановкиКомпоненты)
	
#Если ВебКлиент Тогда
	Возврат;
#КонецЕсли

	Если ЗначениеПараметраЗапуска("UseFileBaseInstallationAlgorithmVanessaExt", Ложь) Тогда
		ТихаяУстановкаVanessaExt(ДополнительныеПараметрыУстановкиКомпоненты);
		Возврат;
	КонецЕсли;	
	
	ОписаниеПлатформы = ОписаниеПлатформы();
	
	ПараметрыТихойУстановки = Новый Структура;
	ПараметрыТихойУстановки.Вставить("Компоненты", Новый Массив());
	ПараметрыТихойУстановки.Вставить("РабочийКаталог", "");
	ПараметрыТихойУстановки.Вставить("ОперационнаяСистема", ОписаниеПлатформы.ОперационнаяСистема);
	ПараметрыТихойУстановки.Вставить("Архитектура", ОписаниеПлатформы.Архитектура);
	ПараметрыТихойУстановки.Вставить("ДанныеРеестра", "");
	ПараметрыТихойУстановки.Вставить("ИзмененРеестр", Ложь);
	ПараметрыТихойУстановки.Вставить("ДополнительныеПараметрыУстановкиКомпоненты", ДополнительныеПараметрыУстановкиКомпоненты);
	
	ОписаниеКомпоненты = Новый Структура;
	ОписаниеКомпоненты.Вставить("ИмяМакета", "WindowCaptureComponent");
	ОписаниеКомпоненты.Вставить("АдресХранилища", МестоположениеВнешнейКомпонентыДляСкриншотов);
	ПараметрыТихойУстановки.Компоненты.Добавить(ОписаниеКомпоненты);
	
	Обработчик = Новый ОписаниеОповещения("ТихаяУстановкаКомпонент_ПослеПолученияРабочегоКаталогаПользователя", ЭтаФорма, ПараметрыТихойУстановки);
	НачатьПолучениеРабочегоКаталогаДанныхПользователя(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ТихаяУстановкаКомпонент_ПослеПолученияРабочегоКаталогаПользователя(РабочийКаталогПользователя, ПараметрыТихойУстановки) Экспорт 
	
	КаталогКомпонент = ОбъединитьПути(РабочийКаталогПользователя, "..", "..", "..", "ExtCompT");
	ПараметрыТихойУстановки.РабочийКаталог = КаталогКомпонент;
	
	ВыполнитьТихуюУстановкуКомпонент(ПараметрыТихойУстановки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьТихуюУстановкуКомпонент(ПараметрыТихойУстановки)
	
	ПрочитатьФайлRegistry(ПараметрыТихойУстановки);
	
	Для Каждого ОписаниеКомпоненты Из ПараметрыТихойУстановки.Компоненты Цикл 
		
		ФайлКомпоненты = ФайлКомпоненты(ОписаниеКомпоненты.АдресХранилища, ПараметрыТихойУстановки.ОперационнаяСистема, ПараметрыТихойУстановки.Архитектура);
		Если ЗаписатьВРеестр(ПараметрыТихойУстановки.ДанныеРеестра, ФайлКомпоненты.ИмяФайла) Тогда
			ПараметрыТихойУстановки.ИзмененРеестр = Истина;
		КонецЕсли;
		
		ПолноеИмяФайлаКомпоненты = ОбъединитьПути(ПараметрыТихойУстановки.РабочийКаталог, ,  , , ,ФайлКомпоненты.ИмяФайла);
		ФайлКомпоненты.Данные.Записать(ПолноеИмяФайлаКомпоненты);
		
	КонецЦикла;
	
	Если ПараметрыТихойУстановки.ИзмененРеестр Тогда 
		ЗаписатьФайлRegistry(ПараметрыТихойУстановки);
	КонецЕсли;
	
	БылаВыполненаТихаяУстановкаКомпоненты = Истина;
	ТекстСообщения = Локализовать("Была выполнена тихая установка внешней компоненты VanessaExt.");
	СообщитьПользователю(ТекстСообщения);
	ЗаписатьЛогВЖРИнформация("ТихаяУстановкаКомпоненты", ТекстСообщения);
	ВыполнитьПодключениеВнешнейКомпоненты(ПараметрыТихойУстановки.ДополнительныеПараметрыУстановкиКомпоненты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлRegistry(ПараметрыТихойУстановки)
	
	ФайлРеестра = ОбъединитьПути(ПараметрыТихойУстановки.РабочийКаталог, , ,  , ,"registry.xml");
	Попытка
		Чтение = Новый ЧтениеТекста(ФайлРеестра);
		Данные = Чтение.Прочитать();
		Чтение.Закрыть();
	Исключение
		// Файл реестра отсутствует
	КонецПопытки;
	
	ПараметрыТихойУстановки.ДанныеРеестра = Данные;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаписатьВРеестр(ДанныеРеестра, ИмяФайла)
	
	Если _СтрНайти(ДанныеРеестра, "<component") = 0 Тогда // Файл пустой
		ДанныеРеестра = _СтрШаблон("<?xml version=""1.0"" encoding=""UTF-8""?>
						  |<registry xmlns=""http://v8.1c.ru/8.2/addin/registry"">
						  |	<component path=""%1"" type=""native""/>
						  |</registry>", ИмяФайла);
	ИначеЕсли _СтрНайти(ДанныеРеестра, _СтрШаблон("path=""%1""", ИмяФайла)) <> 0 Тогда // Компонента уже зарегистрирована
		Возврат Ложь;
	Иначе // Добавляем компоненту
		Запись = _СтрШаблон("	<component path=""%1"" type=""native""/>", ИмяФайла);
		ДанныеРеестра = СтрЗаменить(ДанныеРеестра, "</registry>", Запись + Символы.ПС + "</registry>");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьФайлRegistry(ПараметрыТихойУстановки)
	
	Если ПараметрыТихойУстановки.ИзмененРеестр Тогда
		ФайлРеестра = ОбъединитьПути(ПараметрыТихойУстановки.РабочийКаталог, , ,  , , "registry.xml");
		Запись = Новый ЗаписьТекста(ФайлРеестра);
		Запись.Записать(ПараметрыТихойУстановки.ДанныеРеестра);
		Запись.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеПлатформы()
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ОперационнаяСистема = Неопределено;
	Архитектура = Неопределено;
	
	Linux = "Linux";
	Windows = "Windows";
	MacOS = "MacOS";
	
	x86 = "i386";
	x64 = "x86_64";
	
	ТипКлиентскойПлатформы = СистемнаяИнформация.ТипПлатформы;
	
	Если ТипКлиентскойПлатформы = ТипПлатформы.Linux_x86 Тогда
		ОперационнаяСистема = Linux;
		Архитектура = x86;
	ИначеЕсли ТипКлиентскойПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		ОперационнаяСистема = Linux;
		Архитектура = x64;
	ИначеЕсли ТипКлиентскойПлатформы = ТипПлатформы.Windows_x86 Тогда
		ОперационнаяСистема = Windows;
		Архитектура = x86;
	ИначеЕсли ТипКлиентскойПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		ОперационнаяСистема = Windows;
		Архитектура = x64;
	ИначеЕсли ТипКлиентскойПлатформы = ТипПлатформы.MacOS_x86 Тогда
		ОперационнаяСистема = MacOS;
		Архитектура = x86;
	ИначеЕсли ТипКлиентскойПлатформы = ТипПлатформы.MacOS_x86_64 Тогда
		ОперационнаяСистема = MacOS;
		Архитектура = x64;
	Иначе
		ВызватьИсключение "Неподдерживаемый тип платформы";
	КонецЕсли;
	
	Возврат Новый Структура("ОперационнаяСистема, Архитектура", ОперационнаяСистема, Архитектура);
	
КонецФункции

&НаСервереБезКонтекста
Функция ФайлКомпоненты(Знач АдресХранилища, Знач ОперационнаяСистема, Знач Архитектура)
	
	Данные = ПолучитьИзВременногоХранилища(АдресХранилища);
	ЧтениеАрхива = Новый ЧтениеZipФайла();
	ЧтениеАрхива.Открыть(Данные.ОткрытьПотокДляЧтения());
	
	ИмяФайлаКомпоненты = ИмяФайлаКомпоненты(ЧтениеАрхива, ОперационнаяСистема, Архитектура);
	
	Если ИмяФайлаКомпоненты = Неопределено Тогда
		ВызватьИсключение "Компонента не поддерживает клиентское окружение";
	КонецЕсли;
	
	Данные = ДвоичныеДанныеЭлемента(ЧтениеАрхива, ИмяФайлаКомпоненты);
	
	Возврат Новый ФиксированнаяСтруктура("ИмяФайла, Данные", ИмяФайлаКомпоненты, Данные);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяФайлаКомпоненты(ЧтениеАрхива, ОперационнаяСистема, Архитектура)
	
	Данные = ДвоичныеДанныеЭлемента(ЧтениеАрхива, "MANIFEST.XML");
	
	Если Данные = Неопределено Тогда
		ВызватьИсключение "Архив компоненты не содержит манифеста";
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьПоток(Данные.ОткрытьПотокДляЧтения());
	
	ИмяФайлаКомпоненты = Неопределено;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЭтоПодходящийУзел(ЧтениеXML, ОперационнаяСистема, Архитектура) Тогда
			ИмяФайлаКомпоненты = ЧтениеXML.ЗначениеАтрибута("path");
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат ИмяФайлаКомпоненты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоПодходящийУзел(ЧтениеXML, ОперационнаяСистема, Архитектура)
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента ИЛИ НРег(ЧтениеXML.Имя) <> "component" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОперационнаяСистемаУзла = ЧтениеXML.ЗначениеАтрибута("os");
	АрхитектураУзла = ЧтениеXML.ЗначениеАтрибута("arch");
	
	Возврат ОперационнаяСистема = ОперационнаяСистемаУзла И Архитектура = АрхитектураУзла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДвоичныеДанныеЭлемента(ЧтениеАрхива, ИмяФайла)
	
	ЭлементФайла = Неопределено;
	
	Для Каждого Элемент Из ЧтениеАрхива.Элементы Цикл
		Если ВРег(Элемент.ПолноеИмя) = ВРег(ИмяФайла) Тогда
			ЭлементФайла = Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ЧтениеАрхива.Извлечь(ЭлементФайла, ИмяВременногоФайла, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	
	Данные = Новый ДвоичныеДанные(ОбъединитьПути(ИмяВременногоФайла, , ,  , , ЭлементФайла.Имя));
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Функция ЭтоЗапускИзКоманднойСтроки()
	
	Если (Объект.ЗапускИзКоманднойСтроки ИЛИ ЗначениеПараметраЗапуска("StartFeaturePlayer", Ложь)) И НЕ ЗапускИзСППР Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
	
КонецФункции	 

&НаКлиенте
Процедура ЗагрузитьФичиИЗапуститьСценарийСоСтрокиПрисланнойИзвне()
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ЗапуститьСценарийСоСтрокиПрисланнойИзвне", Истина);
	НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Ложь;
	ЗагрузитьФичи(ДопПараметры);
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьИмяФайлаСкриншотаКСтрокеТекущегоСценария(ДанныеФайла)
	ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);

	Если СтрокаСценария.ПроизвольныеЗначения = Неопределено Тогда
		СтрокаСценария.ПроизвольныеЗначения = Новый Структура;
	КонецЕсли;
	
	Если НЕ СтрокаСценария.ПроизвольныеЗначения.Свойство("МассивСкриншотов") Тогда
		СтрокаСценария.ПроизвольныеЗначения.Вставить("МассивСкриншотов", Новый Массив);
	КонецЕсли;	 
	
	Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
		ДанныеФайла.Вставить("ИдШага", ТекИД_ШагаВМассиве);
	КонецЕсли;	 
	
	МассивСкриншотов = СтрокаСценария.ПроизвольныеЗначения.МассивСкриншотов;
	МассивСкриншотов.Добавить(ДанныеФайла);
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьМенюНедавноЗагруженныеФичи()
	Для Ид = 1 По 9 Цикл
		Пункт1 = Элементы.Добавить("МенюЗагрузитьФичи" + Ид, Тип("КнопкаФормы"), Элементы.ГруппаКнопокНедавноЗагруженныеФичи);
		Пункт1.Заголовок  = "Не используется";
		Пункт1.ИмяКоманды = "ЗагрузитьНедавнююФичу" + Ид;
		Пункт1.Видимость = Ложь;
		
		Пункт1 = Элементы.Добавить("МенюЗагрузитьФичиVanessaEditor" + Ид, Тип("КнопкаФормы"), Элементы.ГруппаКнопокVanessaEditorНедавноЗагруженныеФичи);
		Пункт1.Заголовок  = "Не используется";
		Пункт1.ИмяКоманды = "ЗагрузитьНедавнююФичу" + Ид;
		Пункт1.Видимость = Ложь;
	КонецЦикла;	
	
КонецПроцедуры 

&НаКлиенте
Процедура ДоступностьЭлементовПанелиВоВремяЗагрузкиФичи(Статус)
	Элементы.ПодменюЗагрузитьФичи.Доступность = Статус;
	Элементы.Перезагрузить.Доступность = Статус;
	Элементы.ВыполнитьСценарии.Доступность = Статус;
	Элементы.ОстановитьСценарии.Доступность = Статус;
	Элементы.ФормаПерезагрузитьИВыполнить.Доступность = Статус;
	Элементы.ФормаПерейтиВVanessaEditor.Доступность = Статус;
КонецПроцедуры 

&НаКлиенте
Функция ОтступПоЧислуПробелов(Кол)
	Стр = "";
	Для Сч = 1 По Кол Цикл
		Стр = Стр + "  ";
	КонецЦикла;	
	Возврат Стр; 
КонецФункции	 

&НаКлиенте
Процедура ВывестиДеревоВМакетРекурсивно(СтрокаДерева, ТабДок, НомерСтроки, Уровень)
	Для Каждого ТекСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		НомерСтроки = НомерСтроки + 1;
		ТабДок.Область(НомерСтроки, 1,НомерСтроки, 1).Текст = Формат(ТекСтрока.ИдСтроки, "ЧГ=; ЧН=0");
		ТабДок.Область(НомерСтроки, 2,НомерСтроки, 2).Текст = ОтступПоЧислуПробелов(Уровень) + СокрЛП(ТекСтрока.Имя);
		ТабДок.Область(НомерСтроки, 3,НомерСтроки, 3).Текст = СокрЛП(ТекСтрока.Тип);
		ТабДок.Область(НомерСтроки, 4,НомерСтроки, 4).Текст = СокрЛП(ТекСтрока.ДопТип);
		ТабДок.Область(НомерСтроки, 5,НомерСтроки, 5).Текст = СтрЗаменить(СокрЛП(ТекСтрока.АдресСнипета), "\", "/");
		ТабДок.Область(НомерСтроки, 6,НомерСтроки, 6).Текст = СокрЛП(ТекСтрока.СтрокаПараметровШагаВВидеТаблицы);
		ТабДок.Область(НомерСтроки, 7,НомерСтроки, 7).Текст = СокрЛП(ТекСтрока.НомерСтрокиВФиче);
		
		Уровень = Уровень + 1;
		ВывестиДеревоВМакетРекурсивно(ТекСтрока, ТабДок, НомерСтроки, Уровень);
		Уровень = Уровень - 1;
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Процедура УдалитьИзКонтекстаСчетчикиЦиклов()
	Если НЕ ТипЗнч(ОбъектКонтекст) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;	 
	
	ТекИдСтроки = Неопределено;
	Если Элементы.ДеревоТестов.ТекущиеДанные <> Неопределено Тогда
		ТекИдСтроки = Элементы.ДеревоТестов.ТекущиеДанные.ИДСтроки	
	КонецЕсли;	 
	
	КлючиКУдалению = Новый Массив;
	Для Каждого Элем Из ОбъектКонтекст Цикл
		Если НРег(Лев(Элем.Ключ, 6)) = "_цикл_" Тогда
			Если ТекИдСтроки <> Неопределено Тогда
				ИдСтрокиЦикла = Сред(Элем.Ключ, 7);
				Поз = Найти(ИдСтрокиЦикла, "_Счетчик");
				Если Поз > 0 Тогда
					ИдСтрокиЦикла = Лев(ИдСтрокиЦикла, Поз - 1);
				КонецЕсли;
				
				Попытка
					ИдСтрокиЦиклаЧисло = Число(ИдСтрокиЦикла);
					Если ИдСтрокиЦиклаЧисло < ТекИдСтроки  Тогда
						// Значит идет продолжение выполнение с шага, который находится ниже шага объявления цикла.
						// Будут очищены счетчики циклов, которые находятся ниже шага, с которого идет продолжение выполнения теста.
						Продолжить;
					КонецЕсли;	 
				Исключение
				КонецПопытки;
				
			КонецЕсли;	 
			
			КлючиКУдалению.Добавить(Элем.Ключ);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Для Каждого Ключ Из КлючиКУдалению Цикл
		ОбъектКонтекст.Удалить(Ключ);
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция СкопироватьМассивСтруктур(Знач Массив)
	Результат = Новый Массив;
	Для Каждого Элем Из Массив Цикл
		Результат.Добавить(СкопироватьСтруктуру(Элем));
	КонецЦикла;	 
	
	Возврат Результат; 
КонецФункции	 

&НаКлиентеНаСервереБезКонтекста
Функция СкопироватьМассивСоответствий(Знач Массив)
	Результат = Новый Массив;
	Для Каждого Элем Из Массив Цикл
		Результат.Добавить(СкопироватьСоответствие(Элем));
	КонецЦикла;	 
	
	Возврат Результат; 
КонецФункции	 

&НаКлиенте
Процедура ЗаполнитьПараметрыДляСнятияСкриншотов(ПараметрыСкриншотов)
	
	Если ТипЗнч(ПараметрыСкриншотов) = Тип("Структура") Тогда
		//Если ПараметрыСкриншотов.Свойство("ТегScreenShot") И ПараметрыСкриншотов.ТегScreenShot Тогда
			Если ТипЗнч(ЗначениеПараметровДляСнятияСкриншотов) <> Тип("Структура") Тогда
				ЗначениеПараметровДляСнятияСкриншотов = Новый Структура;
			КонецЕсли;	 
			ЗначениеПараметровДляСнятияСкриншотов.Вставить("ПрикреплятьСкриншотКШагу", Истина);
			ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
			РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
			
			РезультатПрохожденияТестовШагов = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
			Если РезультатПрохожденияТестовШагов.Количество() = 0 Тогда
				ЗначениеПараметровДляСнятияСкриншотов.Вставить("РезультатПрохожденияШага", Неопределено);
			Иначе	
				РезультатПрохожденияШага = РезультатПрохожденияТестовШагов[РезультатПрохожденияТестовШагов.Количество() - 1];
				ЗначениеПараметровДляСнятияСкриншотов.Вставить("РезультатПрохожденияШага", РезультатПрохожденияШага);
			КонецЕсли;	 
		//КонецЕсли;	 
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Функция СимволыГруппыРазметки(Количество)
	Стр = "";
	Отступ = "   ";
	Для Сч = 1 По Количество Цикл
		Стр = Отступ + Стр;
	КонецЦикла;	
	
	Возврат Стр + "* "; 
КонецФункции	 

&НаКлиенте
Функция ИмяНастройкиПоИмениЭлемента(Знач ИмяЭлементаФормы, ИменаПолейJson)
	Если ИмяЭлементаФормы = "ДанныеКлиентовТестирования" Тогда
		ИмяЭлементаФормыEn = "datatestclients";
		Если Объект.ЯзыкГенератораGherkin = "ru" Тогда
			Возврат ИмяЭлементаФормы + " {" + ИмяЭлементаФормыEn +  "}";
		Иначе	
			Возврат ИмяЭлементаФормыEn;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ИмяЭлементаФормы = "DebugLog"
		ИЛИ ИмяЭлементаФормы = "ПроверкаРаботыVanessaAutomationВРежимеTestClient"
		ИЛИ ИмяЭлементаФормы = "ЗапрашиватьПодтверждениеПриЗакрытии"
		ИЛИ ИмяЭлементаФормы = "ГенерироватьУФ"
		ИЛИ ИмяЭлементаФормы = "СоздаватьОбластиПриГенерацииКода"
		ИЛИ ИмяЭлементаФормы = "СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур"
		ИЛИ ИмяЭлементаФормы = "ВыводитьТекстМодуляВместоПерегенерацииEPF"
		ИЛИ ИмяЭлементаФормы = "ИспользоватьКомпонентуVanessaExt1"
		ИЛИ ИмяЭлементаФормы = "ИспользоватьКомпонентуVanessaExt2"
		ИЛИ ИмяЭлементаФормы = "ВыборЦветаПодсветкиКликовМышки"
		ИЛИ ИмяЭлементаФормы = "КаталогПроекта1"
		ИЛИ ИмяЭлементаФормы = "ТекстДляТестаГолоса"
		ИЛИ ИмяЭлементаФормы = "ЗаписьВидеоГруппаШаговКакШаг1"
		ИЛИ ИмяЭлементаФормы = "ПодсказкаКакПолучитьЭтиПараметры"
		ИЛИ ИмяЭлементаФормы = "ПодсказкаРазметкаТекстаСбер"
		   
		Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	Если ИмяЭлементаФормы = "КаталогФич1" Тогда
		ИмяЭлементаФормы = "КаталогФич";
	ИначеЕсли ИмяЭлементаФормы = "ИспользоватьБраузерПлюсWebSocket1" Тогда
		ИмяЭлементаФормы = "ИспользоватьБраузерПлюсWebSocket";
	КонецЕсли;	 
	
	Если ИменаПолейJson[НРег(ИмяЭлементаФормы)] = Неопределено Тогда
		СообщитьПользователю(ИмяЭлементаФормы);
	КонецЕсли;	 
	
	Если Объект.ЯзыкГенератораGherkin = "ru" Тогда
		Возврат ИменаПолейJson[НРег(ИмяЭлементаФормы)].Р + " {" + ИменаПолейJson[НРег(ИмяЭлементаФормы)].А +  "}";
	Иначе	
		Возврат ИменаПолейJson[НРег(ИмяЭлементаФормы)].А;
	КонецЕсли;	 
	
КонецФункции	 

&НаКлиенте
Функция ОписаниеПоПодсказкеЭлемента(Знач Стр, СтрокаПараметра)
	Стр = СтрЗаменить(Стр, Символы.ВК, "");
	МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Стр, Символы.ПС);
	Если МассивСтрок.Количество() = 1 Тогда
		Возврат МассивСтрок; 
	КонецЕсли;	 
	
	НовыйМассив = Новый Массив;
	Для Каждого ТекСтр Из МассивСтрок Цикл
		Если ПустаяСтрока(ТекСтр) Тогда
			Продолжить;
		КонецЕсли;	 
		
		СтрокаОригинал = ТекСтр;
		
		ТекСтр = СокрЛ(ТекСтр);
		
		Если Лев(ТекСтр, 2) = "- " Тогда
			ТекСтр = Сред(ТекСтр, 3);
		КонецЕсли;	 
		
		Если Лев(ТекСтр, 2) = "1."
			ИЛИ Лев(ТекСтр, 2) = "2."
			ИЛИ Лев(ТекСтр, 2) = "3."
			ИЛИ Лев(ТекСтр, 2) = "4."
			ИЛИ Лев(ТекСтр, 2) = "5."
			ИЛИ Лев(ТекСтр, 2) = "6."
			ИЛИ Лев(ТекСтр, 2) = "7."
			ИЛИ Лев(ТекСтр, 2) = "8."
			ИЛИ Лев(ТекСтр, 2) = "9."
			Тогда
			
			КолСимволов = СтрДлина(СтрокаПараметра) - СтрДлина(СокрЛ(СтрокаПараметра));
			ТекСтр = "  " + Лев(СтрокаПараметра, КолСимволов) + ТекСтр;
		КонецЕсли;	 
		
		НовыйМассив.Добавить(ТекСтр);
		
	КонецЦикла;	 
	
	Возврат НовыйМассив; 
КонецФункции	 

&НаКлиенте
Процедура ДобавитьОписаниеСтраницыВНастройкиЗапуска(СтраницаФормы, МассивСтрок, Уровень, ИменаПолейJson)
	Для Каждого ТекЭлемент Из СтраницаФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(ТекЭлемент) = Тип("ГруппаФормы") ИЛИ ТипЗнч(ТекЭлемент) = Тип("СтраницыФормы") ИЛИ ТипЗнч(ТекЭлемент) = Тип("СтраницаФормы") Тогда
			УказанЗаголовок = Ложь;
			Если НЕ ПустаяСтрока(ТекЭлемент.Заголовок) И УГруппыЕстьПодчиненныеПоля(ТекЭлемент) Тогда
				Если ТекЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа Тогда        
					Если ТекЭлемент.Отображение <> ОтображениеОбычнойГруппы.Нет И НЕ ЭтоСлужебнаяГруппа(ТекЭлемент.Имя) Тогда
						МассивСтрок.Добавить(СимволыГруппыРазметки(Уровень) + " " + ТекЭлемент.Заголовок);
						МассивСтрок.Добавить("");
						УказанЗаголовок = Истина;
					КонецЕсли;
				ИначеЕсли ТекЭлемент.Вид = ВидГруппыФормы.Страница Тогда
					МассивСтрок.Добавить(СимволыГруппыРазметки(Уровень) + " " + ТекЭлемент.Заголовок);
					МассивСтрок.Добавить("");
					УказанЗаголовок = Истина;
				ИначеЕсли ТипЗнч(ТекЭлемент) = Тип("СтраницыФормы") ИЛИ ТипЗнч(ТекЭлемент) = Тип("СтраницаФормы") Тогда
					МассивСтрок.Добавить(СимволыГруппыРазметки(Уровень) + " " + ТекЭлемент.Заголовок);
					МассивСтрок.Добавить("");
					УказанЗаголовок = Истина;
				КонецЕсли;	 
				
			КонецЕсли;	
			
			Если УказанЗаголовок Тогда
				ДобавитьОписаниеСтраницыВНастройкиЗапуска(ТекЭлемент, МассивСтрок, Уровень + 1, ИменаПолейJson)
			Иначе	
				ДобавитьОписаниеСтраницыВНастройкиЗапуска(ТекЭлемент, МассивСтрок, Уровень, ИменаПолейJson)
			КонецЕсли;	 
			
		Иначе
			Если ТипЗнч(ТекЭлемент) = Тип("КнопкаФормы") Тогда
				Продолжить;
			КонецЕсли;	 
			
			Если НЕ ПустаяСтрока(ТекЭлемент.РасширеннаяПодсказка.Заголовок) Тогда
				ТекстПодсказки = ТекЭлемент.РасширеннаяПодсказка.Заголовок;
			ИначеЕсли НЕ ПустаяСтрока(ТекЭлемент.Подсказка) Тогда
				ТекстПодсказки = ТекЭлемент.Подсказка;
			КонецЕсли;	 
			
			Если НЕ ПустаяСтрока(ТекЭлемент.РасширеннаяПодсказка.Заголовок) Тогда
				ИмяНастройки = ИмяНастройкиПоИмениЭлемента(ТекЭлемент.Имя, ИменаПолейJson);
				Если ИмяНастройки = Неопределено Тогда
					Продолжить;
				КонецЕсли;	 
				
				СтрокаПараметра = СимволыГруппыРазметки(Уровень + 1) + "**" + ИмяНастройки + "**:";
				МассивСтрок.Добавить(СтрокаПараметра);
				ДанныеОписания = ОписаниеПоПодсказкеЭлемента(ТекстПодсказки, СтрокаПараметра);
				Для Каждого ТекСтрока Из ДанныеОписания Цикл
					МассивСтрок.Добавить(СгенерироватьСтрокуПробелов((Уровень+2)*3) + ТекСтрока);
				КонецЦикла;	 
				МассивСтрок.Добавить("");
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Процедура УГруппыЕстьПодчиненныеПоляРекурсивно(ТекГруппа, КолПолей)
	
	Для Каждого Элем Из ТекГруппа.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элем) = Тип("КнопкаФормы") Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(Элем) = Тип("ГруппаФормы") Тогда
			УГруппыЕстьПодчиненныеПоляРекурсивно(Элем, КолПолей);
			Продолжить;
		КонецЕсли;	 
		
		КолПолей = КолПолей + 1;
		
	КонецЦикла;	 
	
КонецПроцедуры 

&НаКлиенте
Функция УГруппыЕстьПодчиненныеПоля(ТекГруппа)
	КолПолей = 0;
	УГруппыЕстьПодчиненныеПоляРекурсивно(ТекГруппа, КолПолей);
	
	Если КолПолей > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	 
	
КонецФункции	 

&НаКлиенте
Функция СгенерироватьСтрокуПробелов(Кол)
	
	Стр = "";
	Для Сч = 1 По Кол Цикл
		Стр = Стр + " ";
	КонецЦикла;	
	
	Возврат Стр; 
	
КонецФункции	 

&НаКлиенте
Процедура ОбновитьСодержимоеТестируемойТаблицыФормыВПопытке(ТестируемаяТаблицаФормы, ДопПараметры)
	
	ТипОбъектаПоиска = Тип("ТестируемаяКнопкаФормы");
	ИмяОбъектаПоиска = "Обновить";
	
	ТаблицаОбновлена = НайтиИНажатьКнопкуОбновленияТаблицы(
		ТестируемаяТаблицаФормы,
		ДопПараметры,
		ТипОбъектаПоиска,
		ИмяОбъектаПоиска);
		
	// Возможно тестируется конфигурация на английском языке, пробуем использовать другое имя кнопки
	Если НЕ ТаблицаОбновлена Тогда
		ИмяОбъектаПоиска = "Refresh";
		НайтиИНажатьКнопкуОбновленияТаблицы(
			ТестируемаяТаблицаФормы,
			ДопПараметры,
			ТипОбъектаПоиска,
			ИмяОбъектаПоиска);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиИНажатьКнопкуОбновленияТаблицы(ТестируемаяТаблицаФормы, ДопПараметры, ТипОбъектаПоиска, ИмяОбъектаПоиска)
	
	КнопкаОбновить = ТестируемаяТаблицаФормы.НайтиОбъект(ТипОбъектаПоиска,, ИмяОбъектаПоиска); 
	// Если не получилось найти по имени, попробуем найти по заголовку
	Если КнопкаОбновить = Неопределено Тогда
		КнопкаОбновить = ТестируемаяТаблицаФормы.НайтиОбъект(ТипОбъектаПоиска, ИмяОбъектаПоиска); 
	КонецЕсли;
	
	// Способ поиска кнопки Обновить в панелях формы используем для форм генириуемых по умолчанию платформой.
	Если КнопкаОбновить = Неопределено
		И ТипЗнч(ДопПараметры) = Тип("Структура")
		И ДопПараметры.Свойство("ФормаРеквизита")
		И ТипЗнч(ДопПараметры.ФормаРеквизита) = Тип("ТестируемаяФорма") Тогда
		
		КнопкаОбновить = ДопПараметры.ФормаРеквизита.НайтиОбъект(ТипОбъектаПоиска,, ИмяОбъектаПоиска);
		// Если не получилось найти по имени, попробуем найти по заголовку
		Если КнопкаОбновить = Неопределено Тогда
			КнопкаОбновить = ДопПараметры.ФормаРеквизита.НайтиОбъект(ТипОбъектаПоиска, ИмяОбъектаПоиска);
		КонецЕсли;
		
	КонецЕсли;
	
	Если КнопкаОбновить <> Неопределено Тогда
		КнопкаОбновить.Нажать();
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьВЖРДанныеОНастройкахVanessaAutomation()
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("НастройкиВыгрузки", Истина); 
	ДопПараметры.Вставить("ВыгружатьЭтотКлиент", Истина); 
	
	Настройки = ТекущиеОбщиеНастройки(ДопПараметры);
	Настройки.Вставить("ВыполнитьСценарии", Объект.ВыполнитьСценарииПослеЗагрузкиФич);
	Настройки.Вставить("ЗавершитьРаботуСистемы", Объект.ЗавершитьРаботуСистемыПослеВыполненияВсехСценариев);
	Настройки.Вставить("ВыгружатьСтатусВыполненияСценариевВФайл", Объект.ВыгружатьСтатусВыполненияСценариевВФайл);
	Настройки.Вставить("ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев", Объект.ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев);

	ТекущийЯзык = Объект.ЯзыкГенератораGherkin;

	ЗаписатьЛогВЖРИнформация("VASettings",ПодготовитьОбщиеНастройкиКВыгрузке(Настройки, ТекущийЯзык)); 
КонецПроцедуры 

&НаКлиенте
Функция КартинкаАнимацияСРазницейКартинок(ФайлКартинки1, ФайлКартинки2)
	
	#Если НЕ ВебКлиент Тогда
	
	ИмяФайлаКартинкиРазница = ПолучитьИмяВременногоФайла("gif");
	Команда = "magick convert  -delay 50 ""%ФайлКартинки1"" ""%ФайлКартинки2"" +repage -loop 0 ""%ФайлКартинки3""";
	Команда = СтрЗаменить(Команда, "%ФайлКартинки1", ФайлКартинки1);
	Команда = СтрЗаменить(Команда, "%ФайлКартинки2", ФайлКартинки2);
	Команда = СтрЗаменить(Команда, "%ФайлКартинки3", ИмяФайлаКартинкиРазница);
	
	Результат = ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
	
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайлаКартинкиРазница) Тогда
		ТекстСообщения = Локализовать("Не вышло получить анимацию разницы между картинками. Команда:") + Символы.ПС + Команда;
		ЗаписатьЛогВЖРИнформация("КартинкаАнимацияСРазницейКартинок", ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат ИмяФайлаКартинкиРазница;
	
	#КонецЕсли
	
КонецФункции	 

&НаКлиенте
Функция КартинкаРазницаМеждуКартинками(ФайлКартинки1, ФайлКартинки2)
	
	#Если НЕ ВебКлиент Тогда
	
	ИмяФайлаКартинкиРазница = ПолучитьИмяВременногоФайла("png");
	Команда = "magick compare -fuzz 10% ""%ФайлКартинки1"" ""%ФайлКартинки2"" ""%ФайлКартинки3""";
	Команда = СтрЗаменить(Команда, "%ФайлКартинки1", ФайлКартинки1);
	Команда = СтрЗаменить(Команда, "%ФайлКартинки2", ФайлКартинки2);
	Команда = СтрЗаменить(Команда, "%ФайлКартинки3", ИмяФайлаКартинкиРазница);
	
	Результат = ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
	
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайлаКартинкиРазница) Тогда
		ТекстСообщения = Локализовать("Не вышло получить разницу между картинками. Команда:") + Символы.ПС + Команда;
		ЗаписатьЛогВЖРИнформация("КартинкаРазницаМеждуКартинками", ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат ИмяФайлаКартинкиРазница;
	
	#КонецЕсли
	
КонецФункции	 

&НаКлиенте
Функция ПреобразоватьPDFВКартинку(ИмяФайлаPDF)
	
	#Если НЕ ВебКлиент Тогда
	
	ИмяФайлаКартинки = ПолучитьИмяВременногоФайла("png");
	
	Команда = "magick convert -density 300 -trim ""%ФайлPDF"" -quality 100 -resize 1066x600! -append ""%ФайлКартинки""";
	Команда = СтрЗаменить(Команда, "%ФайлPDF", ИмяФайлаPDF);
	Команда = СтрЗаменить(Команда, "%ФайлКартинки", ИмяФайлаКартинки);
	
	Результат = ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
	
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайлаКартинки) Тогда
		ТекстСообщения = Локализовать("Не получилось преобразовать pdf в картинку. Команда:") + Символы.ПС + Команда;
		ЗаписатьЛогВЖРИнформация("ПреобразоватьPDFВКартинку", ТекстСообщения);
		
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат ИмяФайлаКартинки;
	
	#КонецЕсли
	
КонецФункции	 

&НаКлиенте
Процедура СохранитьМакетВФайл(ТабДок)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = Локализовать("Выберите имя файла.");
	ДиалогВыбораФайла.Фильтр = Локализовать("(*.mxl)|*.mxl");	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТабДок", ТабДок);
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("СохранитьСостояниеФормыКлиентаТестированияВФайлЗавершение", ЭтаФорма, ДопПараметры));
	
КонецПроцедуры 

&НаКлиенте
Процедура СохранитьСостояниеФормыКлиентаТестированияВФайлЗавершение(ВыбранныеФайлы, ДопПараметры) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ВыбранныеФайлы[0];
	ДопПараметры.ТабДок.НачатьЗапись(, ИмяФайла, ТипФайлаТабличногоДокумента.MXL);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСтруктуруПараметрыКоторыеРаньшеМожноБылоПередатьТолькоВКоманднойСтроке(Данные)
	
	Если НЕ ТипЗнч(Данные) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;	 
	
	ИменаПараметровБулево = Новый Массив;
	ИменаПараметровБулево.Добавить("StartFeaturePlayer");
	ИменаПараметровБулево.Добавить("QuietInstallVanessaExt");
	ИменаПараметровБулево.Добавить("InstallVanessaExtOnFailOfQuietInstall");
	ИменаПараметровБулево.Добавить("QuietInstallVanessaExtAndClose");
	ИменаПараметровБулево.Добавить("ClearStepsCache");
	ИменаПараметровБулево.Добавить("DisableUserSettingsLoader");
	ИменаПараметровБулево.Добавить("DisableLoadTestClientsTable");
	ИменаПараметровБулево.Добавить("DisableLoadConfig");
	ИменаПараметровБулево.Добавить("DisableFeatureLoadOnOpenForm");
	ИменаПараметровБулево.Добавить("DisableCheckPossibilityOfSynchronousCalls");
	ИменаПараметровБулево.Добавить("GetStepsCache");
	ИменаПараметровБулево.Добавить("DisableFileOptimization");
	
	Для Каждого ИмяПараметра Из ИменаПараметровБулево Цикл
		Данные.Вставить(ИмяПараметра, ЗначениеПараметраЗапуска(ИмяПараметра, Ложь));
	КонецЦикла;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура НачатьОзвучкуШага(ТекШаг)
	
	Если НЕ Объект.ИспользоватьКомпонентуVanessaExt Тогда
		ВызватьИсключение Локализовать("Необходимо включить использование внешней компоненты VanessaExt.");
	КонецЕсли;	 
	
	НужноОжидатьОкончанияОзвучкиШага = Истина;
	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПодключитьБиблиотекуРаботыСВидео();
	Если ТекШаг.Свойство("ТекстИнструкция") Тогда
		ПараметрыВидео.Вставить("ТекстДляТестаГолоса", ТекШаг.ТекстИнструкция);
	Иначе	
		ПараметрыВидео.Вставить("ТекстДляТестаГолоса", "");
	КонецЕсли;	
	Если ТекШаг.Свойство("ТекстИнструкция") Тогда
		Отладка("Text=" + ТекШаг.ТекстИнструкция);
	КонецЕсли;	
	ПараметрыВидео.Вставить("ОзвучкаВыполненияСценария", Истина);
	ПараметрыВидео.Вставить("Шаг", ТекШаг);
	ПараметрыВидео.Вставить("КопироватьФайлMp3", Ложь);
	ИмяФайлаMp3 = МодульРаботыСВидео.ТестГолоса(ПараметрыВидео);
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайлаMp3) Тогда
		ВызватьИсключение _СтрШаблон(Локализовать("Не найден файл <%1>"), Строка(ИмяФайлаMp3));
	КонецЕсли;
	ИДВоспроизведенияMp3 = ИмяФайлаMp3 + Новый УникальныйИдентификатор;
	ВнешняяКомпонентаДляСкриншотов.НачатьВызовВоспроизвестиМедиа(ОписаниеПустогоОбработчика(3), ИмяФайлаMp3, ИДВоспроизведенияMp3);
	
КонецПроцедуры 

&НаКлиенте
Процедура СлужебныйМетодОзвучитьСтрокуСценарияПоНомеру() Экспорт
	ОзвучитьСтрокуСценарияПоНомеру(НомерСтрокиРедактораДляОзвкучки);
КонецПроцедуры 

&НаКлиенте
Процедура ОзвучитьСтрокуСценарияПоНомеру(ДанныеСНомеромСтроки)
	
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ Объект.ИспользоватьКомпонентуVanessaExt Тогда
		СообщитьПользователю(Локализовать("Необходимо включить использование внешней компоненты VanessaExt."));
		Возврат;
	КонецЕсли;	 
	
	Ном = ДанныеСНомеромСтроки;
	Поз = Найти(Ном, ":");
	Если Поз > 0 Тогда
		Ном = Сред(Ном, Поз + 1);
	КонецЕсли;	 
	Ном = Число(Ном);
	
	Если ДеревоБудетПерезагружено("СлужебныйМетодОзвучитьСтрокуСценарияПоНомеру") Тогда
		НомерСтрокиРедактораДляОзвкучки = Ном;
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ЗаписьВидеоТипОзвучкиTTS = -1 
		 И ФормаОбработкиПроизвольногоДвижкаTTS = Неопределено Тогда
		   
		НомерСтрокиРедактораДляОзвкучки = Ном;   
		ОбработчикОповещения = Новый ОписаниеОповещения("СлужебныйМетодОзвучитьСтрокуСценарияПоНомеру", ЭтаФорма);
		ПодключитьОбработкуДвижкаTTS(ОбработчикОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если НЕ МодульРедакторТекста().АктивизироватьСтрокуДереваСоответствующуюVanessaEditor(Ном) Тогда
			Возврат;
		КонецЕсли;	 
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоТестов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТекШаг = Новый Структура;
	Если ТекущиеДанные.Тип = "Область" Тогда
		ТекстГруппы = СокрЛП(ТекущиеДанные.Имя);
		Если Лев(ТекстГруппы, 1) = "*" Тогда
			ТекстГруппы = СокрЛП(Сред(ТекстГруппы, 2));
		КонецЕсли;
		
		Если Найти(ТекстГруппы, "$") > 0 Тогда
			ТекстГруппы = ПодставитьПеременныеВСтроку(ТекстГруппы,Истина);
		КонецЕсли;	 
		
		ТекстГруппы = ПодставитьЗначенияИнлайнВыраженийВСтроку(ТекстГруппы, Неопределено, Неопределено);
		
		ТекШаг.Вставить("ТекстИнструкция", ТекстГруппы);
		Если ТипЗнч(ТекущиеДанные.ПроизвольныеЗначения) = Тип("Структура") И ТекущиеДанные.ПроизвольныеЗначения.Свойство("МассивТеговШага") Тогда
			ТекШаг.Вставить("МассивТеговШага", ТекущиеДанные.ПроизвольныеЗначения.МассивТеговШага);
		КонецЕсли;	
	ИначеЕсли ТекущиеДанные.Тип = "Шаг" Тогда	
		СнипетыШаговТекстКоторыхВычисляетсяЧерезПараметры = СнипетыШаговТекстКоторыхВычисляетсяЧерезПараметры();
		Стр = ТекущиеДанные.Снипет;
		Поз = Найти(Стр, "(");
		Если Поз > 0 Тогда
			Стр = Лев(Стр, Поз - 1);
		КонецЕсли;	 
		Стр = НРег(Стр);
		
		Если СнипетыШаговТекстКоторыхВычисляетсяЧерезПараметры.Найти(Стр) = Неопределено Тогда
			ТекстШага = СокрЛП(ТекущиеДанные.Имя);
		Иначе	
			Если ТекущиеДанные.ЗначенияПараметров.Количество() = 0 Тогда
				ТекстШага = СокрЛП(ТекущиеДанные.Имя);
			Иначе	
				ПоследнийПараметрШага = ТекущиеДанные.ЗначенияПараметров[ТекущиеДанные.ЗначенияПараметров.Количество() - 1];
				ТекстШага = ПоследнийПараметрШага.Значение.Значение;
			КонецЕсли;	
		КонецЕсли;	 
		
		ТекШаг.Вставить("ТекстИнструкция", ТекстШага);
		Если ТипЗнч(ТекущиеДанные.ПроизвольныеЗначения) = Тип("Структура") И ТекущиеДанные.ПроизвольныеЗначения.Свойство("МассивТеговШага") Тогда
			ТекШаг.Вставить("МассивТеговШага", ТекущиеДанные.ПроизвольныеЗначения.МассивТеговШага);
		КонецЕсли;	
	Иначе
		Возврат;
	КонецЕсли;	 
	
	НачатьОзвучкуШага(ТекШаг);
	
КонецПроцедуры 

&НаКлиенте
Процедура VanessaEditorОзвучитьТекущуюСтрокуРедактораПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ОтсутствуетVanessaEditor() Тогда
		Возврат;
	КонецЕсли;	
	
	ПозицияVanessaEditor = ПолучитьVanessaEditor().getPosition();
	ОзвучитьСтрокуСценарияПоНомеру(ПозицияVanessaEditor.LineNumber);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ВФичеЕстьСекцияПеременные(Знач ИмяФичи, Знач ПереданныеДанныеСекцииПеременные)
	
	Если ПереданныеДанныеСекцииПеременные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат ПереданныеДанныеСекцииПеременные.ЕстьТаблицаПеременных[УниверсальноеПолноеИмяФайла(ИмяФичи, Истина)] = Истина;
	
КонецФункции	 

&НаКлиенте
Функция ЕстьВкладкаСДаннойФичей(ИмяФичи)
	Если VanessaTabs = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Для Сч = 0 По VanessaTabs.tabStack.length - 1 Цикл
		Если УниверсальноеПолноеИмяФайла(VanessaTabs.tabStack[Сч].filename, Истина) = УниверсальноеПолноеИмяФайла(ИмяФичи, Истина) Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Возврат Ложь;
	
КонецФункции	 

&НаКлиенте
Процедура ПоказатьФайлДокументации(ПолноеИмяФайла) Экспорт
	
	ФайлаДокумента = Новый Файл(ПолноеИмяФайла);
	ТекстовыйДокумент = Новый ТекстовыйДокумент; 
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФайлаДокумента", ФайлаДокумента);
	ДополнительныеПараметры.Вставить("ТекстовыйДокумент", ТекстовыйДокумент);
	ДополнительныеПараметры.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьФайлДокументацииОкончаниеЧтения", ЭтаФорма, ДополнительныеПараметры);
	ТекстовыйДокумент.НачатьЧтение(ОписаниеОповещения, ПолноеИмяФайла, КодировкаТекста.UTF8);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФайлИОткрытьНастройкиВРедактореРежимОбучения()
	
	#Если НЕ ВебКлиент Тогда
	
	ИмяФайла = ПолучитьИмяВременногоФайла("json");
	ЗаписатьНастройкиВФайл(ИмяФайла);
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");
	ТекстФайла = Текст.Прочитать();
	Текст.Закрыть();
	
	VanessaTabs.edit("", ".feature", "memory:" + Строка(Новый УникальныйИдентификатор), "Файл настроек");
	МодульРедакторТекста().ДействияПриСозданииВкладки();
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("startLineNumber", 1);
	Соответствие.Вставить("startColumn", 1);
	Соответствие.Вставить("endLineNumber", 1);
	Соответствие.Вставить("endColumn", 1);
	ПолучитьVanessaEditor().insertText(ТекстФайла, ЗаписатьОбъектJSON(Соответствие));
	
	#КонецЕсли
	
КонецПроцедуры 

&НаКлиенте
Процедура ПоказатьФайлСравненияНастроекРежимОбучения()
	
	#Если НЕ ВебКлиент Тогда
	
	ИмяФайла = ПолучитьИмяВременногоФайла("json");
	ЗаписатьНастройкиВФайл(ИмяФайла);
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");
	ТекстФайла = Текст.Прочитать();
	Текст.Закрыть();
	
	ТекстФайла = СтрЗаменить(ТекстФайла, "true", "false");
	
	ЗТ = Новый ЗаписьТекста(ИмяФайла,"UTF-8",, Ложь); 
	ЗТ.Записать(ТекстФайла); 
	ЗТ.Закрыть();
	
	Массив = Новый Массив;
	Массив.Добавить(ИмяФайла);
	
	СравнитьТекущиеНастройкиСФайломЗавершение(Массив, Неопределено);
	
	#КонецЕсли
	
КонецПроцедуры 

&НаКлиенте
Процедура ПоказатьФайлДокументацииОкончаниеЧтения(ДополнительныеПараметры) Экспорт
	
	ФайлаДокумента = ДополнительныеПараметры.ФайлаДокумента;
	ПолноеИмяФайла = ДополнительныеПараметры.ПолноеИмяФайла;
	ТекстовыйДокумент = ДополнительныеПараметры.ТекстовыйДокумент;
	ИмяФайлаДокумента = ФайлаДокумента.Имя;
	ТекстДокумента = ТекстовыйДокумент.ПолучитьТекст();
	ТекстДокумента = СкрытьСсылкиВДокументацииСогласноНастройкам(ТекстДокумента);
	УстановитьСсылкуНаКартинкуДокументации(ТекстДокумента);
	VanessaTabs.view(ИмяФайлаДокумента, ИмяФайлаДокумента, ПолноеИмяФайла, ТекстДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСсылкуНаКартинкуДокументации(ТекстДокумента)
	ТекстДокумента = СтрЗаменить(ТекстДокумента, "mortarboard.png", "https://github.com/Pr-Mex/vanessa-automation/blob/develop/training/pict/mortarboard.png?raw=true");
КонецПроцедуры

&НаКлиенте
Функция СкрытьСсылкиВДокументацииСогласноНастройкам(ТекстДокумента)
	
	МассивСтрок = _СтрРазделить(ТекстДокумента, Символы.ПС);
	Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
		Стр = МассивСтрок[Сч];
		
		Если Найти(Стр, "![]") = 0 Тогда
			Продолжить;
		КонецЕсли;	   
		
		Значения = Новый Структура;
		Значения.Вставить("Видео", Неопределено);
		Значения.Вставить("PDF", Неопределено);
		Значения.Вставить("MD", Неопределено);
		ПолучитьЗначенияСсылокДокументацииИзСтроки(Стр, Значения);
		
		Поз = Найти(Стр, "![]");
		НовСтр = СокрП(Лев(Стр, Поз - 1));
		
		Если Объект.ОбучениеЗапуститьУрок И ЗначениеЗаполнено(Значения.ЗапуститьУрок) Тогда
			НовСтр = НовСтр + " " + "![](mortarboard.png)[(Запустить урок)](" + Значения.ЗапуститьУрок + ")";
		КонецЕсли;	
		Если Объект.ОбучениеВидео И ЗначениеЗаполнено(Значения.Видео) Тогда
			НовСтр = НовСтр + " " + "[(Видео)](" + Значения.Видео + ")";
		КонецЕсли;	
		Если Объект.ОбучениеPDF И ЗначениеЗаполнено(Значения.PDF) Тогда
			НовСтр = НовСтр + " " + "[(PDF)](" + Значения.PDF + ")";
		КонецЕсли;	
		Если Объект.ОбучениеMD И ЗначениеЗаполнено(Значения.MD) Тогда
			НовСтр = НовСтр + " " + "[(MD)](" + Значения.MD + ")";
		КонецЕсли;	
		
		МассивСтрок[Сч] = НовСтр;
		
	КонецЦикла;	
	
	Возврат _СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции	

&НаКлиенте
Процедура ПолучитьЗначенияСсылокДокументацииИзСтроки(Знач Стр, Значения)
	Поз = Найти(Стр, "]");
	Стр = Сред(Стр, Поз +1 );
	Стр = СтрЗаменить(Стр, "(mortarboard.png)", "");
	
	Пока Найти(Стр, "]") > 0 Цикл
		Поз = Найти(Стр, "]");
		ЛевЧасть = Лев(Стр, Поз);
		ПраваяЧасть = Сред(Стр, Поз + 1);
		
		ЛевЧасть = СтрЗаменить(ЛевЧасть, "[", "");
		ЛевЧасть = СтрЗаменить(ЛевЧасть, "]", "");
		ЛевЧасть = СтрЗаменить(ЛевЧасть, "(", "");
		ЛевЧасть = СтрЗаменить(ЛевЧасть, ")", "");
		ИмяЗначения = СокрЛП(ЛевЧасть);
		Пока Найти(ИмяЗначения, " ") > 0 Цикл
			ИмяЗначения = СтрЗаменить(ИмяЗначения, " ", "");
		КонецЦикла;	
		
		Поз = Найти(ПраваяЧасть, ")");
		Ссылка = Лев(ПраваяЧасть, Поз);
		Ссылка = СтрЗаменить(Ссылка, "(", "");
		Ссылка = СтрЗаменить(Ссылка, ")", "");
		
		Стр = Сред(ПраваяЧасть, Поз + 1);
		
		Значения.Вставить(ИмяЗначения, Ссылка);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстанановитьЗначениеДополнительногоПараметра(Имя, Значение)
	
	Если ТипЗнч(Объект.ДополнительныеПараметры) <> Тип("Структура") Тогда
		Объект.ДополнительныеПараметры = Новый Структура;
	КонецЕсли;	 
	
	Объект.ДополнительныеПараметры.Вставить(Имя, Значение);
	
КонецПроцедуры 

&НаКлиенте
Функция ЗначениеДополнительногоПараметра(ИмяПараметра)
	
	Если ТипЗнч(Объект.ДополнительныеПараметры) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если НЕ Объект.ДополнительныеПараметры.Свойство(ИмяПараметра) Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат Объект.ДополнительныеПараметры[ИмяПараметра]; 
	
КонецФункции	 

&НаСервере
Функция ЗначениеДополнительногоПараметраСервер(Знач ИмяПараметра)
	
	Если ТипЗнч(Объект.ДополнительныеПараметры) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если НЕ Объект.ДополнительныеПараметры.Свойство(ИмяПараметра) Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат Объект.ДополнительныеПараметры[ИмяПараметра]; 
	
КонецФункции	 

&НаКлиенте
Функция ДанныеСловоряЗамен(ПараметрыВидео)
	Если КешДанныеСловоряЗамен <> Неопределено Тогда
		Возврат КешДанныеСловоряЗамен;
	КонецЕсли;	 
	
	Результат = Новый Массив;
	
	Если ПараметрыВидео.ЗаписьВидеоСловарьЗамен.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;	
	
	Для Каждого ЭлементСловоряЗамен Из ПараметрыВидео.ЗаписьВидеоСловарьЗамен Цикл
		Если НЕ ФайлСуществуетКомандаСистемы(ЭлементСловоряЗамен.Значение) Тогда
			ТекстСообщения = Локализовать("Не найден файл словаря замен. <%1>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ЭлементСловоряЗамен.Значение);
			СообщитьПользователю(ТекстСообщения);
			ТекстСообщения = Локализовать("Не найден файл словаря замен. <%1>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ЭлементСловоряЗамен.Значение);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ЭлементСловоряЗамен.Значение, "UTF-8");
		
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
			
			Если СокрЛП(Стр) = "" Тогда
				Продолжить;
			КонецЕсли;	 
			
			Массив = РазложитьСтрокуВМассивПодстрокКлиент(Стр, "|");
			
			ЗначениеЗамены = Новый Структура;
			ЗначениеЗамены.Вставить("ЧтоЗаменять", Массив[0]);
			ЗначениеЗамены.Вставить("НаЧтоЗаменять", Массив[1]);
			
			Результат.Добавить(ЗначениеЗамены);
		КонецЦикла;	
		
		Текст.Закрыть();
	КонецЦикла;
	
	КешДанныеСловоряЗамен = Результат;
	
	Возврат Результат; 
	
КонецФункции	 

&НаКлиенте
Функция НужноПоказатьОкноОстановкиВыполненияСценария()
	
	Если НЕ Объект.ИспользоватьКомпонентуVanessaExt Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если НЕ Объект.ПоказыватьОкноОстановкиВыполненияСценария Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если ЭтоЗапускИзКоманднойСтроки() Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если ЭтоLinux Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
	
КонецФункции	 

&НаКлиенте
Функция НужноПоказатьОкноОстановкиЗаписиДействийПользователя()
	
	Если НЕ Объект.ИспользоватьКомпонентуVanessaExt Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если НЕ Объект.ПоказыватьОкноОстановкиЗаписиДействийПользователя Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если Объект.РежимСамотестирования Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если ЭтоLinux Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
	
КонецФункции	 

&НаКлиенте
Процедура ПоказатьОкноОстановкиВыполненияСценария()
	
	#Если НЕ ВебКлиент Тогда
	
	Если ВключенРежимОбучения Тогда
		Текст = Локализовать("Остановить урок");
	Иначе	
		Текст = Локализовать("Остановить выполнение сценария");
	КонецЕсли;	            
	
	Если Объект.ИспользоватьДляОстановкиВыполненияСценарияФайл Тогда
		ИмяФайлаОстановкаВыполненияСценария = ПолучитьИмяВременногоФайла("txt");
	Иначе	
		ИмяФайлаОстановкаВыполненияСценария = Неопределено;
	КонецЕсли;	
	
	ОписаниеОповещения = ОписаниеПустогоОбработчика(3);
	ПараметрыВызова = ЗаписатьОбъектJSON(Новый Структура("eventName,eventData", "StopScenarioRun", ""));
	Если ЗначениеЗаполнено(ИмяФайлаОстановкаВыполненияСценария) Тогда
		ВнешняяКомпонентаДляСкриншотов.НачатьВызовПоказатьОкноПрерывания(
			ОписаниеОповещения,
			ПараметрыВызова,
			Текст,
			Локализовать("Стоп"),
			ИмяФайлаОстановкаВыполненияСценария
			);
	Иначе	
		ВнешняяКомпонентаДляСкриншотов.НачатьВызовПоказатьОкноПрерывания(
			ОписаниеОповещения,
			ПараметрыВызова,
			Текст,
			Локализовать("Стоп")
			);
	КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры 

&НаКлиенте
Процедура ПоказатьОкноОстановкиЗаписиДействийПользователя()
	
	Текст = Локализовать("Остановить запись действий");
	
	ОписаниеОповещения = ОписаниеПустогоОбработчика(3);
	ПараметрыВызова = ЗаписатьОбъектJSON(Новый Структура("eventName,eventData", "StopRecordActions", ""));
	ВнешняяКомпонентаДляСкриншотов.НачатьВызовПоказатьОкноПрерывания(
		ОписаниеОповещения,
		ПараметрыВызова,
		Текст,
		Локализовать("Стоп"));
		
КонецПроцедуры 

&НаКлиенте
Процедура АктивизироватьОкноВКоторомЗапущенаVanessaAutomation()
	
	Если НЕ Объект.ИспользоватьКомпонентуVanessaExt Тогда
		Возврат;
	КонецЕсли;	 
	
	ВычислитьPIDЭтогоСеансаСлужебный();
	
	Если НЕ ЗначениеЗаполнено(PIDЭтогоСеанса) Тогда
		Возврат;
	КонецЕсли;	
	
	Попытка
		ВнешняяКомпонентаДляСкриншотов.НачатьВызовАктивироватьПроцесс(ОписаниеПустогоОбработчика(3), Число(PIDЭтогоСеанса));
	Исключение
	КонецПопытки;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗакрытьОкноОстановкиВыполненияСценария()
	
	Если Объект.ИспользоватьКомпонентуVanessaExt Тогда
		ОписаниеОповещения = ОписаниеПустогоОбработчика(3);
		Попытка
			ВнешняяКомпонентаДляСкриншотов.НачатьВызовЗакрытьОкноПрерывания(ОписаниеОповещения);
		Исключение
		КонецПопытки;
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗакрытьОкноОстановкиЗаписиДействийПользователя()
	
	Если Объект.ИспользоватьКомпонентуVanessaExt Тогда
		ОписаниеОповещения = ОписаниеПустогоОбработчика(3);
		Попытка
			ВнешняяКомпонентаДляСкриншотов.НачатьВызовЗакрытьОкноПрерывания(ОписаниеОповещения);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВсеСеансыКлиентовТестированияВК()
	
	ВычислитьPIDЭтогоСеансаСлужебный();
	
	СписокПроцессов = ПрочитатьСтрокуJSON(ВнешняяКомпонентаДляСкриншотов.ПолучитьСписокПроцессов(Истина));
	Если СписокПроцессов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивProcessID = Новый Массив;
	
	Для Каждого ТекДанныеПроцесса Из СписокПроцессов Цикл
		Если ТекДанныеПроцесса.ProcessId = PIDЭтогоСеанса Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекДанныеПроцесса.Свойство("CommandLine") И Найти(НРег(ТекДанныеПроцесса.CommandLine), "/testclient") > 0 Тогда
			МассивProcessID.Добавить(ТекДанныеПроцесса.ProcessId);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗавершитьСеансыОСПринудительно(МассивProcessID);
	
КонецПроцедуры 

&НаКлиенте
Процедура СброситьНастройкиVanessaAutomationЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	#Если НЕ ВебКлиент Тогда
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;	
	КонецЕсли;	
	
	СброситьНастройкиVanessaAutomationСервер(ПараметрыДляСохраненияНастроек());
	СообщитьПользователю(Локализовать("Необходимо выполнить перезапуск фреймворка тестирования."));

	#КонецЕсли
КонецПроцедуры

&НаСервере
Процедура СброситьНастройкиVanessaAutomationСервер(Знач ПараметрыДляСохраненияНастроек)
	
	ХранилищеОбщихНастроек.Сохранить(ПолучитьИДСохраненияОбщихНастроек(Объект.РежимСамотестирования, Объект.ВерсияПоставки, ЭтоРежимОбученияСервер()), , Неопределено);
	Если Объект.СлужебныеПараметры.Свойство("НастройкиВидимостиКнопокКоманднойПанелиРедактора") Тогда
		ХранилищеОбщихНастроек.Сохранить(ПолучитьИДСохраненияВидимостиКнопокКоманднойПанели(), , Неопределено);
	КонецЕсли;	 
	
	ИДСохраненияОбщихНастроек = ПолучитьИДСохраненияОбщихНастроек(Объект.РежимСамотестирования, Объект.ВерсияПоставки, ЭтоРежимОбученияСервер());
	ХранилищеОбщихНастроек.Сохранить(ИДСохраненияОбщихНастроек, "ВерсияVA", Неопределено);
	
	СохранитьНастройкиВХранилище("КаталогиБиблиотек", Неопределено, ПараметрыДляСохраненияНастроек);
	
КонецПроцедуры 

&НаСервере
Функция ДанныеКомандыVanessaAutomationСервер(Знач ИмяКоманды)
	
	Данные = Новый Структура;
	Данные.Вставить("Заголовок", Команды[ИмяКоманды].Заголовок);
	Данные.Вставить("Действие", Команды[ИмяКоманды].Действие);
	Данные.Вставить("Подсказка", Команды[ИмяКоманды].Подсказка);
	
	Возврат Данные; 
	
КонецФункции	 

&НаКлиенте
Процедура ПодключатьГорячуюКлавишуДляПолученияСправкиОбЭлементе(ВыполнитьПоискЭлементаПодКурсором)
	
	Если ЭтоLinux Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоЗапускИзКоманднойСтроки() Тогда
		Возврат;
	КонецЕсли;
	
	Если БылоПодключениеГорячихКлавиш Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.ПодключатьГорячуюКлавишуДляПолученияСправкиОбЭлементе Тогда
		Возврат;
	КонецЕсли;	
	
	БылоПодключениеГорячихКлавиш = Истина;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыполнитьПоискЭлементаПодКурсором", ВыполнитьПоискЭлементаПодКурсором);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикПодключатьГорячуюКлавишуДляПолученияСправкиОбЭлементе", ЭтаФорма, ДополнительныеПараметры);
	ВнешняяКомпонентаДляСкриншотов.НачатьВызовНазначитьГорячиеКлавиши(ОписаниеОповещения, Строка(УникальныйИдентификатор));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПодключатьГорячуюКлавишуДляПолученияСправкиОбЭлементе(Данные, ДопДанные, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ВыполнитьПоискЭлементаПодКурсором Тогда
		ПоискУроковИнтерактивнойСправкиПоЭлементуПодКурсором();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискУроковИнтерактивнойСправкиПоЭлементуПодКурсором()
	ЗаписатьЛогВЖРИнформация("ПоискУроковИнтерактивнойСправкиПоЭлементуПодКурсором", "Начало");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикПоискУроковИнтерактивнойСправкиПоЭлементуПодКурсоромПозицияКурсора", ЭтаФорма);
	ВнешняяКомпонентаДляСкриншотов.НачатьПолучениеПозицияКурсора(ОписаниеОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработчикПоискУроковИнтерактивнойСправкиПоЭлементуПодКурсоромПозицияКурсора(Позиция, ДополнительныеПараметры) Экспорт
	ЗаписатьЛогВЖРИнформация("ПоискУроковИнтерактивнойСправкиПоЭлементуПодКурсором", "ПозицияКурсора");
	
	Если НЕ Объект.ИспользоватьКомпонентуVanessaExt Тогда
		ВызватьИсключение Локализовать("Необходимо включить использование внешней компоненты VanessaExt.");
	КонецЕсли;	 
	
	ПозицияКурсора = ПрочитатьОбъектJSON(Позиция);
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ПозицияКурсора", ПозицияКурсора);
	
	Если НЕ ЗначениеЗаполнено(PIDЭтогоСеанса) Тогда
		ВычислитьPIDЭтогоСеансаСлужебный();
	КонецЕсли;	 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикПоискУроковИнтерактивнойСправкиПоЭлементуПодКурсоромЭлементПоКоординатам", ЭтаФорма, ДополнительныеПараметры);
	ВнешняяКомпонентаДляСкриншотов.НачатьВызовЭлементПоКоординатам(ОписаниеОповещения, ПозицияКурсора.x, ПозицияКурсора.y);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПоискУроковИнтерактивнойСправкиПоЭлементуПодКурсоромЭлементПоКоординатам(Данные, ДопДанные, ДополнительныеПараметры) Экспорт
	
	ЭлементПодКурсором = ПрочитатьОбъектJSON(Данные);
	
	Если ЭлементПодКурсором = Неопределено Тогда
		ЗаписатьЛогВЖРИнформация("ПоискУроковИнтерактивнойСправкиПоЭлементуПодКурсором", Локализовать("Не найден активный элемент под курсором."));
	Иначе	
		ЗаписатьЛогВЖРИнформация("ПоискУроковИнтерактивнойСправкиПоЭлементуПодКурсором", _СтрШаблон(Локализовать("Найден активный элемент с именем <%1>. Тип <%2>."), ЭлементПодКурсором.Name, ЭлементПодКурсором.Type));
		ПоказатьПодробнуюИнформациюОбЭлементеФормыVanessaAutomation(ЭлементПодКурсором);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПодробнуюИнформациюОбЭлементеФормыVanessaAutomation(ЭлементUIAutomation)
	
	ЗаполнитьКешДанныхОбЭлементеФормыVanessaAutomation();
	ДанныеЭлемента = Неопределено;
	Если ЗначениеЗаполнено(ЭлементUIAutomation.HelpText) Тогда
		ДанныеЭлемента = КешЭлементовФормыVanessaAutomationПодсказка[НРег(ЭлементUIAutomation.HelpText)];
	КонецЕсли;
	Если ДанныеЭлемента = Неопределено Тогда
		ДанныеЭлемента = КешЭлементовФормыVanessaAutomationЗаголовок[НРег(ЭлементUIAutomation.Name)];
	КонецЕсли;	 
	
	Если ДанныеЭлемента = Неопределено Тогда
		ЗаписатьЛогВЖРИнформация("ИнформацияОбЭлементеФормы", _СтрШаблон(Локализовать("Не получилось найти элемент формы Vanessa Automation для <%1>."), ЭлементUIAutomation.Name));
		Возврат;
	КонецЕсли;	 
	
	СформироватьИОткрытьMarkdownФайлСодержащийСправкуПоЭлементу(ДанныеЭлемента);
	
КонецПроцедуры 

&НаКлиенте
Процедура НайтиРодителяДляЭлементаСправкиРекурсивно(ВерхнийЭлемент, РазмерОтступа, Результат)
	
	Если ВерхнийЭлемент.Строки.Количество() > 0 Тогда
		
		НижнийЭлемент = Неопределено;
		Для Сч = 0 По ВерхнийЭлемент.Строки.Количество() - 1 Цикл
			ТекЭлем = ВерхнийЭлемент.Строки[ВерхнийЭлемент.Строки.Количество() - 1 - Сч];
			Если ТекЭлем.ПустаяСтрока Тогда
				Продолжить;
			КонецЕсли;	 
			
			НижнийЭлемент = ТекЭлем;
			
		КонецЦикла;	
		
		Если НижнийЭлемент <> Неопределено Тогда
			НижнийЭлемент = ВерхнийЭлемент.Строки[ВерхнийЭлемент.Строки.Количество() - 1];
			Если НижнийЭлемент.Отступ < РазмерОтступа Тогда
				Результат = НижнийЭлемент;
				НайтиРодителяДляЭлементаСправкиРекурсивно(НижнийЭлемент, РазмерОтступа, Результат)
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Функция НайтиРодителяДляЭлементаСправки(ВерхнийЭлемент, РазмерОтступа)
	Результат = ВерхнийЭлемент;
	
	НайтиРодителяДляЭлементаСправкиРекурсивно(ВерхнийЭлемент, РазмерОтступа, Результат);
	
	Возврат Результат; 
	
КонецФункции	 

&НаКлиенте
Процедура СформироватьИОткрытьMarkdownФайлСодержащийСправкуПоЭлементу(ДанныеЭлемента)
	
	ИмяФайла = КаталогУроков() + "List_of_lessons_ru.md";
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("СкачатьУроки", Истина);
		ОткрытьМастерНастройкиИнтерактивнойСправки(Неопределено, Неопределено, ДопПараметры);
		Возврат;
	КонецЕсли;	 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");
	ТекстФайла = Текст.Прочитать();
	Текст.Закрыть();
	
	МассивСтрок = _СтрРазделить(СокрЛП(ТекстФайла), Символы.ПС);
	
	Результат = Новый Массив;
	
	ПоследнийЭлемент = Неопределено;
	
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;
	НайтиФайлыКомандаСистемы(КаталогУроков(), СписокКаталогов, СписокФайлов, Истина);
	КешИменФайлов = Новый Соответствие;
	Для Каждого ТекФайл Из СписокФайлов Цикл
		Если НРег(ТекФайл.Значение.Расширение) <> ".feature" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ТекФайл.Значение.ПолноеИмя, "UTF-8");
		ТекстФайла = НРег(Текст.Прочитать());
		Текст.Закрыть();
		
		Если Найти(ТекстФайла, "'" + НРег(ДанныеЭлемента.Имя) + "'") > 0 ИЛИ Найти(ТекстФайла, """" + НРег(ДанныеЭлемента.Имя) + """") > 0 Тогда
			КешИменФайлов.Вставить(НРег(СокрЛП(ТекФайл.Значение.ИмяБезРасширения)), ТекФайл.Значение.ПолноеИмя);
		КонецЕсли;	 
		
	КонецЦикла;	 
	
	Для Каждого Стр Из МассивСтрок Цикл
		СтрСокрЛ = СокрЛ(Стр);
		РазмерОтступа = СтрДлина(Стр) - СтрДлина(СтрСокрЛ);
		
		СтрокаДерева = Новый Структура;
		СтрокаДерева.Вставить("Имя", Стр);
		СтрокаДерева.Вставить("Строки", Новый Массив);
		СтрокаДерева.Вставить("Отступ", РазмерОтступа);
		СтрокаДерева.Вставить("ПустаяСтрока", НЕ ЗначениеЗаполнено(Стр));
		СтрокаДерева.Вставить("ИмяФайла", "");
		СтрокаДерева.Вставить("ВФичеНайденЭлемент", Ложь);
		Если Найти(Стр, "[Запустить урок]") > 0 Тогда
			ЗначенияВСтроке = Новый Структура;
			ПолучитьЗначенияСсылокДокументацииИзСтроки(Стр, ЗначенияВСтроке);
			
			Если КешИменФайлов[НРег(ЗначенияВСтроке.Запуститьурок)] <> Неопределено Тогда
				СтрокаДерева.Вставить("ВФичеНайденЭлемент", Истина);
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если СтрокаДерева.ПустаяСтрока И ПоследнийЭлемент <> Неопределено Тогда
			ПоследнийЭлемент.Строки.Добавить(СтрокаДерева);
			Продолжить;
		КонецЕсли;	 
		
		Если РазмерОтступа = 0 Тогда
			Результат.Добавить(СтрокаДерева);
		Иначе
			Если Результат.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;	 
			
			Родитель = НайтиРодителяДляЭлементаСправки(Результат[Результат.Количество() - 1], РазмерОтступа);
			Родитель.Строки.Добавить(СтрокаДерева);
			
		КонецЕсли;	 
		
		ПоследнийЭлемент = СтрокаДерева;
		
	КонецЦикла;	 
	
	Для Каждого Элем Из Результат Цикл
		УстановитьСтрокамСправкиПоЭлементуПометкуУдаленияРекурсивно(Элем, Элем.ВФичеНайденЭлемент);
	КонецЦикла;	 
	
	КоллекцияКомандЗапуска = КоллекцияКомандЗапуска();
	ИмяEn = "";
	Попытка
		Если КоллекцияКомандЗапуска.Свойство(ДанныеЭлемента.Имя) Тогда
			ИмяEn = КоллекцияКомандЗапуска[ДанныеЭлемента.Имя].А;
		КонецЕсли;	
	Исключение
	КонецПопытки;
	
	Текст = "## " + Локализовать("Данные элемента формы:") + Символы.ПС
		+ _СтрШаблон(
		  "   - " + Локализовать("Имя: %1") + Символы.ПС 
		+ "   - " + Локализовать("ИмяEn: %2") + Символы.ПС 
		+ "   - " + Локализовать("Заголовок: %3") + Символы.ПС 
		+ "   - " + Локализовать("Подсказка: %4") + Символы.ПС 
		+ "   - " + Локализовать("Расширенная подсказка: %5"),
		ДанныеЭлемента.Имя,
		ИмяEn,
		ДанныеЭлемента.Заголовок,
		ВывестиМногострочнуюСтрокуВМаркдаунСправкаПоЭлементуVAnessaAutomation(ДанныеЭлемента.Подсказка),
		ВывестиМногострочнуюСтрокуВМаркдаунСправкаПоЭлементуVAnessaAutomation(ДанныеЭлемента.РасширеннаяПодсказка)
		) + Символы.ПС + Символы.ПС;
		
	ТекстИнтерактивнойСправки = "";
	СформироватьТекстСправкиПоЭлементуФормы(Результат, ТекстИнтерактивнойСправки);
	Если ЗначениеЗаполнено(ТекстИнтерактивнойСправки) Тогда
		ТекстИнтерактивнойСправки = "## " + Локализовать("Уроки интерактивной справки, в которых встречается элемент формы") + Символы.ПС + Символы.ПС + ТекстИнтерактивнойСправки;
	Иначе	
		ТекстИнтерактивнойСправки = "## " + Локализовать("Уроки интерактивной справки по элементу формы не найдены.");
	КонецЕсли;	
	
	Текст = Текст + ТекстИнтерактивнойСправки;
	
	АктивизироватьСтраницуЗапускТестов();
	ИмяФайлаДокумента = Локализовать("Справка по") + " " + ДанныеЭлемента.Тип + ": " + ДанныеЭлемента.Заголовок;
	Текст = СкрытьСсылкиВДокументацииСогласноНастройкам(Текст);
	УстановитьСсылкуНаКартинкуДокументации(Текст);
	VanessaTabs.view(ИмяФайлаДокумента, ИмяФайлаДокумента, ДанныеЭлемента.Имя, Текст);
	
КонецПроцедуры 

&НаКлиенте
Функция ВывестиМногострочнуюСтрокуВМаркдаунСправкаПоЭлементуVAnessaAutomation(Стр)
	МассивСтрок = _СтрРазделить(Стр, Символы.ПС);
	Если МассивСтрок.Количество() = 1 Тогда
		Возврат Стр; 
	КонецЕсли;	 
	
	Результат = Символы.ПС;
	Для Каждого ТекСтр Из МассивСтрок Цикл
		Результат = Результат + "      " + ТекСтр + Символы.ПС;
	КонецЦикла;
	
	Возврат Результат; 
	
КонецФункции	 

&НаКлиенте
Процедура СформироватьТекстСправкиПоЭлементуФормы(Массив, Текст)
	
	Результат = Новый Массив;
	
	Для Каждого Элем Из Массив Цикл
		Если НЕ Элем.ВФичеНайденЭлемент Тогда
			Продолжить;
		КонецЕсли;
		
		Если Лев(СокрЛ(Элем.Имя), 3) = "###" И ЗначениеЗаполнено(Текст) Тогда
			Текст = Текст + Символы.ПС;
		КонецЕсли;	
		
		Текст = Текст + Элем.Имя + Символы.ПС;
		СформироватьТекстСправкиПоЭлементуФормы(Элем.Строки, Текст);
		
	КонецЦикла;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьСтрокамСправкиПоЭлементуПометкуУдаленияРекурсивно(Результат, ВФичеНайденЭлементРодитель)
	
	Для Каждого Элем Из Результат.Строки Цикл
		
		УстановитьСтрокамСправкиПоЭлементуПометкуУдаленияРекурсивно(Элем, Элем.ВФичеНайденЭлемент);
		
		Если Элем.ВФичеНайденЭлемент Тогда
			ВФичеНайденЭлементРодитель = Истина;
		КонецЕсли;	 
		
	КонецЦикла;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьКешДанныхОбЭлементеФормыVanessaAutomation()
	
	Если КешЭлементовФормыVanessaAutomationПодсказка = Неопределено Тогда
		Данные = КешЭлементовФормыVanessaAutomationСервер();
		КешЭлементовФормыVanessaAutomationПодсказка = Данные.КешЭлементовФормыVanessaAutomationПодсказка;
		КешЭлементовФормыVanessaAutomationЗаголовок = Данные.КешЭлементовФормыVanessaAutomationЗаголовок;
	КонецЕсли;	 
	
КонецПроцедуры 

&НаСервере
Функция КешЭлементовФормыVanessaAutomationСервер()
	
	КешЭлементовФормыVanessaAutomationПодсказка = Новый Соответствие;
	КешЭлементовФормыVanessaAutomationЗаголовок = Новый Соответствие;
	Для Каждого Элем Из Элементы Цикл
		
		ДанныеЭлемента = Неопределено;
		
		Если ТипЗнч(Элем) = Тип("КнопкаФормы") Тогда
			ДанныеЭлемента = Новый Структура;
			ДанныеЭлемента.Вставить("Имя", Элем.Имя);
			ДанныеЭлемента.Вставить("Тип", "Кнопка формы");
			ДанныеЭлемента.Вставить("Заголовок", Элем.Заголовок);
			Если ЗначениеЗаполнено(Элем.ИмяКоманды) Тогда
				ДанныеЭлемента.Вставить("Подсказка", Команды[Элем.ИмяКоманды].Подсказка);
			Иначе	
				ДанныеЭлемента.Вставить("Подсказка", "");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеЭлемента.Заголовок) И ЗначениеЗаполнено(Элем.ИмяКоманды) Тогда
				ДанныеЭлемента.Вставить("ИмяКоманды", Элем.ИмяКоманды);
				ДанныеЭлемента.Вставить("Заголовок", Команды[Элем.ИмяКоманды].Заголовок);
			КонецЕсли;	 
			
		Иначе
			ДанныеЭлемента = Новый Структура;
			ДанныеЭлемента.Вставить("Имя", Элем.Имя);
			ДанныеЭлемента.Вставить("Тип", Строка(ТипЗнч(Элем)));
			ДанныеЭлемента.Вставить("Заголовок", Элем.Заголовок);
			
			Если НЕ ЗначениеЗаполнено(Элем.Заголовок) Тогда
				Попытка
					ДанныеЭлемента.Вставить("Заголовок", ЗаголовокЭлементаФормыVAИзДанныхОбъектаСервер(Элем.Имя));
				Исключение
				КонецПопытки;
			КонецЕсли;	 
			
			Попытка
				ДанныеЭлемента.Вставить("Подсказка", Элем.Подсказка);
			Исключение
				ДанныеЭлемента.Вставить("Подсказка", "");
			КонецПопытки;
			
			Попытка
				ТекПутьКДанным = СтрЗаменить(Элем.ПутьКДанным, "Объект." , "");
				ТекПутьКДанным = СтрЗаменить(ТекПутьКДанным, "Object." , "");
				ДанныеЭлемента.Вставить("ПутьКДанным", ТекПутьКДанным);
			Исключение
				ДанныеЭлемента.Вставить("Подсказка", "");
			КонецПопытки;
			
		КонецЕсли;
		
		Если ДанныеЭлемента <> Неопределено Тогда
			Попытка
				ДанныеЭлемента.Вставить("РасширеннаяПодсказка", Элем.РасширеннаяПодсказка.Заголовок);
			Исключение
				ДанныеЭлемента.Вставить("РасширеннаяПодсказка", "");
			КонецПопытки;
			
			Если ЗначениеЗаполнено(ДанныеЭлемента.Подсказка) Тогда
				КешЭлементовФормыVanessaAutomationПодсказка.Вставить(НРег(ДанныеЭлемента.Подсказка), ДанныеЭлемента);
			КонецЕсли;	 
			Если ЗначениеЗаполнено(ДанныеЭлемента.Заголовок) Тогда
				КешЭлементовФормыVanessaAutomationЗаголовок.Вставить(НРег(ДанныеЭлемента.Заголовок), ДанныеЭлемента);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеЭлемента.РасширеннаяПодсказка) Тогда
				КешЭлементовФормыVanessaAutomationПодсказка.Вставить(НРег(ДанныеЭлемента.РасширеннаяПодсказка), ДанныеЭлемента);
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;	 
	
	Результат = Новый Структура;
	Результат.Вставить("КешЭлементовФормыVanessaAutomationПодсказка", КешЭлементовФормыVanessaAutomationПодсказка);
	Результат.Вставить("КешЭлементовФормыVanessaAutomationЗаголовок", КешЭлементовФормыVanessaAutomationЗаголовок);
	
	Возврат Результат; 
	
КонецФункции	 

&НаКлиенте
Функция ПолучитьЭлементПодКрурсоромИзДанныхЭлементовФормы(ПозицияКурсора, ДанныеЭлементов)
	Результат = Неопределено;
	
	ПолучитьЭлементПодКрурсоромИзДанныхЭлементовФормыРекурсивно(ПозицияКурсора, ДанныеЭлементов, Результат);
	
	Возврат Результат; 
	
КонецФункции	 

&НаКлиенте
Процедура ПолучитьЭлементПодКрурсоромИзДанныхЭлементовФормыРекурсивно(ПозицияКурсора, ДанныеЭлементов, Результат)
	
	Если НЕ ДанныеЭлементов.Свойство("Tree") Тогда
		Возврат;
	КонецЕсли;	 
	
	Для Каждого Элем Из ДанныеЭлементов.Tree Цикл
		Если Элем.Type = "Document" Тогда
			//Поле HTML документа
			Продолжить;
		КонецЕсли;	 
		
		Если Элем.Size.Left < ПозицияКурсора.x И Элем.Size.Right > ПозицияКурсора.x И Элем.Size.Top < ПозицияКурсора.y И Элем.Size.Bottom > ПозицияКурсора.y И Элем.Size.Width > 0 И Элем.Size.Height > 0 Тогда
			//Значит элемент имеет смысл рассматривать
			Если Результат = Неопределено Тогда
				Результат = Элем;
			Иначе	
				Если Результат.Size.Width * Результат.Size.Height > Элем.Size.Width * Элем.Size.Height Тогда
					// Результату присваивается элемент с наименьшей площадью
					Результат = Элем;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		ПолучитьЭлементПодКрурсоромИзДанныхЭлементовФормыРекурсивно(ПозицияКурсора, Элем, Результат);
		
	КонецЦикла;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ПоказатьПодсказкуРекомендуетсяСохранитьНастройки()
	
	Если ЗапрещеныСинхронныеВызовы Тогда
		ВызватьИсключение Локализовать("Необходимо разрешить выполнение синхронных вызовов. Достаточно запустить сеанс 1С не из конфигуратора.");
	КонецЕсли;	 
	
	ВычислитьPIDЭтогоСеансаСлужебный();
	Если Ванесса.Версия8319ИлиВыше Тогда
		ОтборЭлементов = ЗаписатьОбъектJSON(Новый Структура("ProcessId, HelpText", Число(PIDЭтогоСеанса), Элементы.ГруппаVanessaEditorНастройкиРедактора.Подсказка));
	Иначе	
		ОтборЭлементов = ЗаписатьОбъектJSON(Новый Структура("ProcessId, LegacyIAccessibleHelp", Число(PIDЭтогоСеанса), Элементы.ГруппаVanessaEditorНастройкиРедактора.Подсказка));
	КонецЕсли;	 
	ДанныеПолей = ПрочитатьОбъектJSON(ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементов));
	Если ДанныеПолей = Неопределено ИЛИ ДанныеПолей.Количество() = 0 Тогда
		ВызватьИсключение _СтрШаблон(Локализовать("Не получилось найти элемент формы Vanessa Automation для <%1>."), "ГруппаVanessaEditorНастройкиРедактора");
	КонецЕсли;	 
	
	Left = 1000000000000000;
	Top = 1000000000000000;
	Bottom = -1;
	Right = -1;
	ОпределитьКоординатыПоМассивуЭлементовUIAutomation(ДанныеПолей, Left, Top, Bottom, Right);
	
	НастройкиРисования = ПолучитьНастройкиРисования();
	НастройкиРисования.Вставить("text", Локализовать("Рекомендуется сохранить настройки"));
	ПроверитьКорректностьПараметровДляВыполненияУроков(НастройкиРисования);
	НастройкиРисованияJSON = Ванесса.ЗаписатьОбъектJSON(НастройкиРисования); 
	
	Ванесса.ВнешняяКомпонентаДляСкриншотов.НарисоватьТень(
		НастройкиРисованияJSON,
		Left,
		Top,
		Right - Left,
		Bottom - Top);
		
КонецПроцедуры 

&НаКлиенте
Процедура ДемонстрацияРаботыСправкиПоЭлементу()
	
	Если ЗапрещеныСинхронныеВызовы Тогда
		ВызватьИсключение Локализовать("Необходимо разрешить выполнение синхронных вызовов. Достаточно запустить сеанс 1С не из конфигуратора.");
	КонецЕсли;	 
	
	ВычислитьPIDЭтогоСеансаСлужебный();
	ДанныеКоманды = ДанныеКомандыVanessaAutomation(Элементы["ФормаVanessaEditorСоздатьНовыйСценарий"].ИмяКоманды);
	Если Ванесса.Версия8319ИлиВыше Тогда
		ОтборЭлементов = ЗаписатьОбъектJSON(Новый Структура("ProcessId, HelpText", Число(PIDЭтогоСеанса), ДанныеКоманды.Подсказка));
	Иначе	
		ОтборЭлементов = ЗаписатьОбъектJSON(Новый Структура("ProcessId, LegacyIAccessibleHelp", Число(PIDЭтогоСеанса), ДанныеКоманды.Подсказка));
	КонецЕсли;	 
	ДанныеПолей = ПрочитатьОбъектJSON(ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементов));
	Если ДанныеПолей = Неопределено ИЛИ ДанныеПолей.Количество() = 0 Тогда
		ВызватьИсключение _СтрШаблон(Локализовать("Не получилось найти элемент формы Vanessa Automation для <%1>."), "ФормаVanessaEditorСоздатьНовыйСценарий");
	КонецЕсли;	 
	
	Left = 1000000000000000;
	Top = 1000000000000000;
	Bottom = -1;
	Right = -1;
	ОпределитьКоординатыПоМассивуЭлементовUIAutomation(ДанныеПолей, Left, Top, Bottom, Right);
	
	НастройкиРисования = ПолучитьНастройкиРисования();
	НастройкиРисования.Вставить("text", Локализовать("Нужно подвести курсор к элементу, например к этому, и нажать сочетание клавиш alt+H"));
	ПроверитьКорректностьПараметровДляВыполненияУроков(НастройкиРисования);
	НастройкиРисованияJSON = Ванесса.ЗаписатьОбъектJSON(НастройкиРисования); 
	
	Ванесса.ВнешняяКомпонентаДляСкриншотов.НарисоватьТень(
		НастройкиРисованияJSON,
		Left,
		Top,
		Right - Left,
		Bottom - Top);
		
	sleep(4);	
	
	ВыполнитьПеремещениеМышкиВнешнейКомпонентой(Цел(Left + (Right - Left)/2), Цел(Top + (Bottom - Top)/2));
	
	ПоискУроковИнтерактивнойСправкиПоЭлементуПодКурсором();
	
КонецПроцедуры 

&НаКлиенте
Функция ОсновнойЗеленыйЦвет()
	Возврат 32768; 
КонецФункции	 

&НаКлиенте
Процедура ВключитьАнимациюКликовМышки()
	
	Если Объект.ИспользоватьКомпонентуVanessaExt И НЕ Объект.РежимВыполненияОдногоШага Тогда
		Если (Объект.ЭмулироватьДвиженияМышкиVanessaExt И Объект.ПодсвечиватьКликМышкиВБраузереVanessaExt) ИЛИ ВключенРежимОбучения Тогда
			ВнешняяКомпонентаДляСкриншотов.НачатьВызовВизуализацияНажатияМыши(
				ОписаниеПустогоОбработчика(3),
				Объект.ЦветПодсветкиКликаМышкиVanessaExt,
				Объект.РадиусПодсветкиКликаМышкиVanessaExt,
				Объект.ТолщинаПодсветкиКликаМышкиVanessaExt,
				Объект.ДлительностьПодсветкиКликаМышкиVanessaExt,
				Объект.ПрозрачностьПодсветкиКликаМышкиVanessaExt,
				0
			);
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыключитьАнимациюКликовМышки()
	
	Если Объект.ИспользоватьКомпонентуVanessaExt И НЕ Объект.РежимВыполненияОдногоШага Тогда
		Если (Объект.ЭмулироватьДвиженияМышкиVanessaExt И Объект.ПодсвечиватьКликМышкиВБраузереVanessaExt) ИЛИ ВключенРежимОбучения Тогда
			ВнешняяКомпонентаДляСкриншотов.НачатьВызовПрекратитьВизуализациюНажатияМыши(ОписаниеПустогоОбработчика(3));
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецПроцедуры 

&НаСервере
Функция ЭтоРежимОбученияСервер()
	Возврат ЗначениеДополнительногоПараметраСервер("ВЭтомСеансеИдётОбучение") = Истина; 
КонецФункции	 

&НаСервере
Функция ВыполнениеСценариевБезОткрытияФормыСервер()
	Возврат ЗначениеДополнительногоПараметраСервер("ВыполнениеСценариевБезОткрытияФормы") = Истина; 
КонецФункции	 

&НаКлиенте
Процедура ПрекратитьРаботуСеансаVanessaAutomation()
	глЗавершениеРаботы = Истина;
	ПрекратитьРаботуСистемы();
КонецПроцедуры 

&НаКлиенте
Процедура VanessaEditorПоказыватьСтрокиПодсценариевПриИзменении()
	
	Элементы.VanessaEditorПоказыватьСтрокиПодсценариев.Пометка = Объект.ПоказыватьСтрокиПодсценариевVanessaEditor;		
	
	Если VanessaTabs.current = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	VanessaEditorПоказыватьСтрокиПодсценариевОбработчик();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьКаталогСтандартныхБиблиотекЕслиСменилсяПутьКVA()
	
	Если Объект.ВерсияПоставки = "single" Тогда
		Возврат;
	КонецЕсли;	
	
	Если Объект.КаталогиБиблиотек.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоЗапускИзКоманднойСтроки() Тогда
		Возврат;
	КонецЕсли;	 
	
	ПутьКБиблиотеке = УниверсальноеПолноеИмяФайла(Объект.КаталогиБиблиотек[0].Значение, Истина);
	КаталогИнструментов = УниверсальноеПолноеИмяФайла(Объект.КаталогИнструментов, Истина);
	Если Найти(ПутьКБиблиотеке, КаталогИнструментов) = 0 И Найти(ПутьКБиблиотеке, "features/libraries") > 0 Тогда
		Объект.КаталогиБиблиотек[0].Значение = ДополнитьСлешВПуть(ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "features") + "Libraries";
		СброситьКешИзвестныхStepDefinitionСервер();
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьСтандартнуюБиблиотекуЕслиНеобходимо()
	ПутьКОсновнойБиблиотеке = ДополнитьСлешВПуть(ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "features") + "Libraries";
	Если Объект.КаталогиБиблиотек.Количество() = 0 
			И ЗначениеЗаполнено(Объект.КаталогИнструментов) 
			И ДобавлятьСтандартнуюБиблиотеку(Объект.ВерсияПоставки)
			И НЕ ЗначениеПараметраЗапуска("DisableAddStandartLibrary", Ложь)
			Тогда
			
		Объект.КаталогиБиблиотек.Добавить(ПутьКОсновнойБиблиотеке);
		
	ИначеЕсли ДобавлятьСтандартнуюБиблиотеку(Объект.ВерсияПоставки)
		      И НЕ ЗначениеПараметраЗапуска("DisableAddStandartLibrary", Ложь)
		      Тогда
			  
		Нашли = Ложь;
		ПутьКОсновнойБиблиотекеУниверсальный = УниверсальноеПолноеИмяФайла(ПутьКОсновнойБиблиотеке, Истина);
		Для Каждого ТекПуть Из Объект.КаталогиБиблиотек Цикл
			ТекПутьУниверсальный = УниверсальноеПолноеИмяФайла(ТекПуть, Истина);
			Если Найти(ТекПутьУниверсальный, ПутьКОсновнойБиблиотекеУниверсальный) > 0 Тогда
				Нашли = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		
		Если НЕ Нашли Тогда
			Объект.КаталогиБиблиотек.Добавить(ПутьКОсновнойБиблиотеке);
		КонецЕсли;	
		
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Функция СтруктураДляСохраненияНастроек()
	
	Результат = Новый Структура;
	Результат.Вставить("РежимСамотестирования", Объект.РежимСамотестирования);
	Результат.Вставить("ВерсияПоставки", Объект.ВерсияПоставки);
	Результат.Вставить("ЭтоРежимОбучения", ЭтоРежимОбучения());
	Результат.Вставить("ВыполнениеСценариевБезОткрытияФормы", ВыполнениеСценариевБезОткрытияФормы);
	
	Возврат Результат; 
	
КонецФункции	 

&НаСервере
Функция СтруктураДляСохраненияНастроекСервер()
	
	Результат = Новый Структура;
	Результат.Вставить("РежимСамотестирования", Объект.РежимСамотестирования);
	Результат.Вставить("ВерсияПоставки", Объект.ВерсияПоставки);
	Результат.Вставить("ЭтоРежимОбучения", ЭтоРежимОбученияСервер());
	Результат.Вставить("ВыполнениеСценариевБезОткрытияФормы", ВыполнениеСценариевБезОткрытияФормыСервер());
	
	Возврат Результат; 
	
КонецФункции	 

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяОбработкиVAСлужебный(Знач ВерсияПоставки, Знач VAОткрытаКакВнешняяОбработка)
	
	Если ВерсияПоставки = "standart" Тогда
		Возврат "ВнешняяОбработка.VanessaAutomation";
	ИначеЕсли ВерсияПоставки = "single" Тогда
		Если VAОткрытаКакВнешняяОбработка Тогда
			Возврат "ВнешняяОбработка.VanessaAutomationsingle"; 
		Иначе	
			Возврат "Обработка.VanessaAutomationsingle"; 
		КонецЕсли;
	Иначе	
		ВызватьИсключение "Неизвестная версия поставки Vanessa-Automation: " + ВерсияПоставки
	КонецЕсли;
	
КонецФункции	 

&НаКлиенте
Функция ЭтоWindowsXP(СистемнаяИнформация)
	Если Найти(НРег(СистемнаяИнформация.ВерсияОС), НРег("Windows XP")) > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	 
КонецФункции	 

&НаКлиенте
Процедура ЗагрузитьГлобальныеПеременныеИзДанныхНастроек(НастройкиИзФайла)
	
	Если НЕ ТипЗнч(НастройкиИзФайла) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ НастройкиИзФайла.Свойство("GlobalVars") Тогда
		Возврат;
	КонецЕсли;	
	
	Попытка
		Для Каждого КлючЗначение Из НастройкиИзФайла.GlobalVars Цикл
			ОбъектКонтекстСохраняемый.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;	 
	Исключение
		ЗаписатьЛогВЖРОшибка("Загрузка глобальных переменных", ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПривестиРазмерСтрокВМакетеВСоответствиеСТребованиямиФорматаXlsx(ТабДок)
	
	МаксДлина = 31000;
	Для НомСтр = 1 По ТабДок.ВысотаТаблицы Цикл
		Для НомКол = 1 По ТабДок.ШиринаТаблицы Цикл
			ТекстЯчейки = ТабДок.Область(НомСтр, НомКол, НомСтр, НомКол).Текст;
			Если СтрДлина(ТекстЯчейки) > МаксДлина Тогда
				ТабДок.Область(НомСтр, НомКол, НомСтр, НомКол).Текст = Лев(ТекстЯчейки, МаксДлина);
			КонецЕсли;	
			
		КонецЦикла;		
	КонецЦикла;	
	
КонецПроцедуры 

&НаКлиенте
Функция СтатусСценарияСоответствуетВыполненСОшибкой(СтрокаСтатус)
	
	Если СтрокаСтатус = "Failed" ИЛИ СтрокаСтатус = "Broken" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
	
КонецФункции	 

&НаКлиенте
Функция ПолучитьКаталогОтчетаAllure()
	Если ЗначениеЗаполнено(Объект.КаталогВыгрузкиAllureБазовый) Тогда
		Возврат ДополнитьСлешВПуть(ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогВыгрузкиAllureБазовый))
		+ СокрЛП(УбратьВсеЗапрещенныеСимволыИзИмениФайла(Лев(Объект.ИмяТекущейСборки, 40))));
	КонецЕсли;
	
	Возврат ДополнитьСлешВПуть(Объект.КаталогВыгрузкиAllure);
	
КонецФункции	

&НаКлиенте
Процедура ЯзыкГенератораGherkinПриИзмененииОбработчик()
	
	НадоУстановитьСписокШаговVanessaEditor = Истина;
	ТекущийЯзык = Объект.ЯзыкГенератораGherkin;
	ДобавитьЯзыковойПараметрЗапускаТестовогоКлиента(ТекущийЯзык);
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПоказатьСообщениеОЗапретеСинхронныхВызовов()
	
	Если НЕ ЗапрещеныСинхронныеВызовы Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеДополнительногоПараметраСервер("ВЭтомСеансеИдётОбучение") = Истина Тогда
		Возврат;
	КонецЕсли;	 
	
	Массив = Новый Массив;
	Массив.Добавить(Локализовать("Обнаружен запрет синхронных вызовов."));
	Массив.Добавить(Локализовать("Рекомендуется перейти в режим, когда синхронные вызовы разрешены, т.к. в таком режиме работа с файловой системой происходит быстрее."));
	Стр = _СтрСоединить(Массив, Символы.ПС);
	СообщитьПользователю(Стр);
	ЗаписатьЛогВЖРИнформация("ПоказатьСообщениеОЗапретеСинхронныхВызовов", Стр);
	
	Массив = Новый Массив;
	Массив.Добавить(Локализовать("Если сеанс был запущен из конфигуратора, то рекомендуется запускать сеанс менеджера тестирования не из конфигуратора. Тогда синхронные вызовы будут работать несмотря на настройки конфигурации."));
	Массив.Добавить(ПодставитьПараметрыВСтроку(Локализовать("Подробности см тут: %1"), "https://its.1c.ru/db/v8322doc#bookmark:dev:TI000000173"));
	Стр = _СтрСоединить(Массив, Символы.ПС);
	СообщитьПользователю(Стр);
	ЗаписатьЛогВЖРИнформация("ПоказатьСообщениеОЗапретеСинхронныхВызовов", Стр);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПомощникПриПервомЗапуске()
	
	Если НЕ ЭтоПервыйЗапускVA Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ Объект.ПоказыватьПомощникПриПервомЗапуске Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ЗначениеДополнительногоПараметраСервер("ВЭтомСеансеИдётОбучение") = Истина Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ВыполнениеСценариевБезОткрытияФормы Тогда
		Возврат;
	КонецЕсли;	 	
	
	Если Объект.ЗапускИзКоманднойСтроки Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеПараметраЗапуска("SPPR", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеПараметраЗапуска("DisableFirstRunHelper", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеСлужебнойКонстантыЗапрещаетПоказыватьПомощникПриПервомЗапуске() Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЭтоLinux Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ Объект.ИспользоватьКомпонентуVanessaExt Тогда
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(Локализовать("Для более удобной и эффективной работы рекомендуется включить использование внешней компоненты"));
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока("VanessaExt",,,,"https://github.com/lintest/VanessaExt"));
		МассивСтрок.Добавить(".");
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(Локализовать("Включить?"));
		
		ДопПараметрыВыполнитьПодключениеВнешнейКомпоненты = Новый Структура;
		ДопПараметрыВыполнитьПодключениеВнешнейКомпоненты.Вставить("ИмяОбработчика", "ПоказатьПомощникПриПервомЗапускеПродолжение");
		ДопПараметрыВыполнитьПодключениеВнешнейКомпоненты.Вставить("Подключение", Истина);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопросаОПодключенииКомпоненты", ЭтаФорма, ДопПараметрыВыполнитьПодключениеВнешнейКомпоненты);
		ПоказатьВопрос(ОписаниеОповещения,Новый ФорматированнаяСтрока(МассивСтрок), РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ПоказатьПомощникПриПервомЗапускеПродолжение();
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаОПодключенииКомпоненты(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;	 
	
	ВыполнитьПодключениеВнешнейКомпоненты(ДополнительныеПараметры);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПоказатьПомощникПриПервомЗапускеПродолжение()
	
	ПоказатьПомощникПриПервомЗапускеOnBoarding();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПоказатьПомощникПриПервомЗапускеOnBoarding()
	VanessaEditorWelcome();
	
	ОбъектКонтекст.Удалить("СостоянияOnboarding");
	ОбъектКонтекст.Удалить("_ТекущееСостояниеOnboarding");
	
	ОбъектКонтекст.Вставить("ИдетРаботаПомощникаПриПервомЗапуске", Истина);
	
	ОтключитьОбработчикОжидания("ЯЗапускаюOnboardingОбработчик");
	
	СостоянияOnboarding = СостоянияOnboarding();
	
	СоздатьСостоянияOnboardingПомощникПриПервомЗапуске(СостоянияOnboarding);
	
	ЯЗапускаюOnboarding();
	
КонецПроцедуры 

&НаКлиенте
Процедура РазвернутьСвернутьГруппыСтраницыДляРаботыТестов(Развернуть)
	ТекСтраницы = Элементы.СтраницыСервис;
	Для Каждого ЭлемСтраница Из ТекСтраницы.ПодчиненныеЭлементы Цикл
		РазвернутьСвернутьВсеГруппыПодчиненныеЭлементу(ЭлемСтраница, Развернуть);
	КонецЦикла;	 
	
	РазвернутьСвернутьВсеГруппыПодчиненныеЭлементу(Элементы.ГруппаАудио, Развернуть);
	РазвернутьСвернутьВсеГруппыПодчиненныеЭлементу(Элементы.СтраницаВидео, Развернуть);
	РазвернутьСвернутьВсеГруппыПодчиненныеЭлементу(Элементы.ГруппаAllureНастройки, Развернуть);
	РазвернутьСвернутьВсеГруппыПодчиненныеЭлементу(Элементы.ГруппаНастройкиЭмуляцииДействийМышки, Развернуть);
	
КонецПроцедуры 

&НаКлиенте
Процедура РазвернутьСвернутьВсеГруппыПодчиненныеЭлементу(ЭлемСтраница, Развернуть)
	Для Каждого ЭлемГруппа Из ЭлемСтраница.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлемГруппа) = Тип("ГруппаФормы") И ЭлемГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа Тогда
			Если ЭлемГруппа.Поведение = ПоведениеОбычнойГруппы.Свертываемая Тогда
				Если Развернуть Тогда
					Если ЭлемГруппа.Скрыта() Тогда
						ЭлемГруппа.Показать();
					КонецЕсли;	 
				Иначе
					Если НЕ ЭлемГруппа.Скрыта() Тогда
						ЭлемГруппа.Скрыть();
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Функция ЭтоСлужебнаяГруппа(Имя)
	ИмяНРег = НРег(Имя);
	Если Прав(ИмяНРег, 7) = "столбец" Тогда
		Возврат Истина;
	ИначеЕсли Прав(ИмяНРег, 7) = "колонка" Тогда
		Возврат Истина;
	ИначеЕсли Прав(ИмяНРег, 6) = "строка" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
	
КонецФункции	 

&НаКлиенте
Процедура СделатьПереходкКТекстуВРедакторе()
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;	 
	
	ЗначениеПоиска = НРег(глЗначениеПереходкКТекстуВРедакторе);
	
	ТекущийТекст = ПолучитьVanessaEditor().getContent();
	МассивСтрок = _СтрРазделить(ТекущийТекст, Символы.ПС);
	Для Сч = 0 По МассивСтрок.Количество() - 1 Цикл
		Поз = Найти(НРег(МассивСтрок[Сч]), ЗначениеПоиска);
		Если Поз > 0 Тогда
			НомСтр = Сч + 1;
				
			ЭкземплярVanessaEditor = ПолучитьVanessaEditor();
			ЭкземплярVanessaEditor.revealLineInCenter(НомСтр);
			ЭкземплярVanessaEditor.setSelection(НомСтр, Поз, НомСтр, Поз + СтрДлина(ЗначениеПоиска));
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаписатьPIDМенеджераТестированияВЖР()
	
	Попытка
		ВычислитьPIDЭтогоСеансаСлужебный();
		ЗаписатьЛогВЖРИнформация("PIDTestManager","PIDTestManager = " + PIDЭтогоСеанса);
	Исключение
		ЗаписатьЛогВЖРОшибка("ЗаписатьPIDМенеджераТестированияВЖР", ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры 

&НаКлиенте
Функция СтрокаШаблонаНеТривиальна(Знач Стр)
	Стр = СтрЗаменить(Стр, "*", "");
	
	Если НЕ ЗначениеЗаполнено(Стр) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция УбратьЛишниеСимволыЗвездочки(Знач Стр)
	
	Пока Найти(Стр, "**") > 0 Цикл
		Стр = СтрЗаменить(Стр, "**", "*");
	КонецЦикла;	
	
	Возврат Стр; 
	
КонецФункции	 

&НаКлиенте
Функция ЗаменитьПозициюВМассиве(Массив, Поз, СтрЗамены)
	
	Результат = Новый Массив;
	Для Сч = 0 По Массив.Количество()-1 Цикл
		Если Сч = Поз Тогда
			Результат.Добавить(СтрЗамены);
			Продолжить;
		КонецЕсли;	 
		Результат.Добавить(Массив[Сч]);
	КонецЦикла;	
	
	Возврат Результат; 
	
КонецФункции

&НаКлиенте
Функция ШаблонРазличийДвухСтрок(Стр1, Стр2, МаксСчетчикПроверок)
	
	СчетчикПроверок = 0;
	
	Для РазмерЗамены = 1 По 3 Цикл
		
		Если СчетчикПроверок > МаксСчетчикПроверок Тогда
			Прервать;
		КонецЕсли;	
		
		Для КолЗамен = 1 По 2 Цикл
			
			Если СчетчикПроверок > МаксСчетчикПроверок Тогда
				Прервать;
			КонецЕсли;	
			
			КопияСтр2 = Стр2;
			МаксСч = СтрДлина(КопияСтр2);
			
			Для Сч = 1 По МаксСч Цикл
				
				ЛеваяЧасть = Лев(КопияСтр2, Сч - 1);
				ПраваяЧасть = Сред(КопияСтр2, Сч + РазмерЗамены);
				НовСтр2 = ЛеваяЧасть + "*" + ПраваяЧасть;
				
				СчетчикПроверок = СчетчикПроверок + 1;
				Если Ванесса.СтрокаСоответствуетШаблону(Стр1, НовСтр2) Тогда
					Возврат НовСтр2;
				КонецЕсли;
				
				Если СчетчикПроверок > МаксСчетчикПроверок Тогда
					Прервать;
				КонецЕсли;	
				
				Если КолЗамен = 2 Тогда
					Для Сч2 = Сч+1 По МаксСч Цикл
						
						Если СчетчикПроверок > МаксСчетчикПроверок Тогда
							Прервать;
						КонецЕсли;	
						
						ЛеваяЧасть = Лев(НовСтр2, Сч2 - 1);
						ПраваяЧасть = Сред(НовСтр2, Сч2 + РазмерЗамены);
						НовСтр3 = ЛеваяЧасть + "*" + ПраваяЧасть;
						СчетчикПроверок = СчетчикПроверок + 1;
						Если Ванесса.СтрокаСоответствуетШаблону(Стр1, НовСтр3) Тогда
							Возврат НовСтр3;
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;	 
				
			КонецЦикла;	
			
		КонецЦикла;	
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция НайтиФайлыСПомощьюКомпоненты(КаталогПоиска, Маска, ИскатьВПодкаталогах)
	
	ДанныеПоиска = ПрочитатьСтрокуJSON(ВнешняяКомпонентаДляСкриншотов.НайтиФайлы(КаталогПоиска, Маска,,Истина, ИскатьВПодкаталогах, Ложь));
	//ВнешняяКомпонента.НачатьВызовНайтиФайлы(Директория, МаскаПоиска, ИскомыйТекст, ИгнорироватьРегистр, ИскатьВПодкаталогах, ВключитьПапкиВРезультатыПоиска);
	
	Если ДанныеПоиска = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;	 
	
	Результат = Новый Массив;
	Для Каждого Элем Из ДанныеПоиска Цикл
		Результат.Добавить(Новый Файл(Элем.path));
	КонецЦикла;	 

	Возврат Результат;
	
КонецФункции	 

&НаКлиентеНаСервереБезКонтекста
Функция СпецСимволыРегулярныхВыражений(Знач ДляЛинукс)
	
	СпецСимволы = Новый Массив;
	СпецСимволы.Добавить("\");
	СпецСимволы.Добавить("^");
	СпецСимволы.Добавить("$");
	СпецСимволы.Добавить("(");
	СпецСимволы.Добавить(")");
	СпецСимволы.Добавить("[");
	СпецСимволы.Добавить("]");
	СпецСимволы.Добавить("{");
	СпецСимволы.Добавить("}");
	СпецСимволы.Добавить("|");
	СпецСимволы.Добавить(".");
	СпецСимволы.Добавить("+");
	СпецСимволы.Добавить("?"); 
	
	Если ДляЛинукс Тогда
		СпецСимволы.Добавить("<");
		СпецСимволы.Добавить(">");
	КонецЕсли;		
	
	Возврат СпецСимволы;
	
КонецФункции	

&НаСервере
Функция ПроверкаПереводаЭлементовФормыСлужебный(Знач ИменаЭлементовСРасширеннойПодсказкой)
	
	Ошибки = Новый Массив;
	Для Каждого Элем Из Элементы Цикл
		
		Если Лев(Элем.Имя, 17) = "МенюЗагрузитьФичи" Тогда
			Продолжить;
		КонецЕсли;	
		
		Попытка
			Если ВСтрокеЕстьРусскиеБуквыСлужебный(Элем.Заголовок) Тогда
				Ошибки.Добавить("Элемент <" + Элем.Имя + ">, заголовок <" + Элем.Заголовок + ">");
			КонецЕсли;	
		Исключение
		КонецПопытки;
		
		Попытка
			Если ВСтрокеЕстьРусскиеБуквыСлужебный(Элем.Подсказка) Тогда
				Ошибки.Добавить("Команда <" + Элем.Имя + ">, подсказка <" + Элем.Подсказка + ">");
			КонецЕсли;	
		Исключение
		КонецПопытки;
		
		Если Прав(Элем.Имя, 20) = "РасширеннаяПодсказка" И НЕ ЗначениеЗаполнено(Элем.Заголовок) Тогда
			Если УЭлементаДолжнаБытьРасширеннаяПодсказка(Элем.Имя, ИменаЭлементовСРасширеннойПодсказкой) Тогда
				Ошибки.Добавить("Элемент <" + Элем.Имя + ">, пустая расширенная подсказка");
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла;	

	Для Каждого Элем Из Команды Цикл
		
		Попытка
			Если ВСтрокеЕстьРусскиеБуквыСлужебный(Элем.Заголовок) Тогда
				Ошибки.Добавить("Команда <" + Элем.Имя + ">, заголовок <" + Элем.Заголовок + ">");
			КонецЕсли;	
		Исключение
		КонецПопытки;
		
		Попытка
			Если ВСтрокеЕстьРусскиеБуквыСлужебный(Элем.Подсказка) Тогда
				Ошибки.Добавить("Элемент <" + Элем.Имя + ">, подсказка <" + Элем.Подсказка + ">");
			КонецЕсли;	
		Исключение
		КонецПопытки;
	КонецЦикла;	
	
	Возврат Ошибки;
	
КонецФункции

&НаКлиенте
Функция ПроверкаУникальностиЗаголовковЭлементов()
	
	ИменаЭлементовДляПроверки = Новый Соответствие;
	
	Ошибки = Новый Массив;
	Для Каждого Элем Из Элементы Цикл
		
		Если Лев(Элем.Имя, 17) = "МенюЗагрузитьФичи" Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ЭтоАвтокнопкиТаблиц(Элем.Имя, Элем) Тогда
			Продолжить;
		КонецЕсли;	   
		
		ИменаЭлементовДляПроверки.Вставить(Элем.Имя, Элем.Имя);
		
	КонецЦикла;	 
	
	ПроверкаУникальностиЗаголовковЭлементовСервер(Ошибки, ИменаЭлементовДляПроверки);

	Возврат Ошибки;
	
КонецФункции

&НаСервере
Процедура ПроверкаУникальностиЗаголовковЭлементовСервер(Ошибки, Знач ИменаЭлементовДляПроверки)
	
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	
	КешЭлементов = Новый Соответствие;
	ВыведенныеЭлементы = Новый Соответствие;
	
	Для Каждого Элем Из Элементы Цикл 
		
		Если ИменаЭлементовДляПроверки[Элем.Имя] = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если НЕ НадоПроверятьУникальностьЗаголовка(Элем.Имя) Тогда
			Продолжить;
		КонецЕсли;         
		
		ЗаголовокЭлемента = ЗаголовокЭлементаVAСервер(ОбъектСервер, Элем);
		
		Если ТипЗнч(Элем) = Тип("ГруппаФормы") ИЛИ ТипЗнч(Элем) = Тип("ДекорацияФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаголовокЭлементаПоиск = НРег(СокрЛП(ЗаголовокЭлемента));
		
		Если НЕ ЗначениеЗаполнено(ЗаголовокЭлементаПоиск) Тогда
			Продолжить;
		КонецЕсли;	
		
		Если КешЭлементов[ЗаголовокЭлементаПоиск] <> Неопределено Тогда
			
			ДанныеЭлементаИзКеш = КешЭлементов[ЗаголовокЭлементаПоиск];
			
			ИмяКоманды = "";
			
			Если ТипЗнч(Элем) = Тип("КнопкаФормы") И ТипЗнч(ДанныеЭлементаИзКеш) = Тип("КнопкаФормы") Тогда
				Если Элем.ИмяКоманды = ДанныеЭлементаИзКеш.ИмяКоманды Тогда
					//Если есть две кнопки с одинаковым заголовком и они ссылаются на одну команду, то это не ошибка.
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Элем) = Тип("ПолеФормы") И ТипЗнч(ДанныеЭлементаИзКеш) = Тип("ПолеФормы") Тогда
				Если Элем.ПутьКДанным = ДанныеЭлементаИзКеш.ПутьКДанным И ЗначениеЗаполнено(Элем.ПутьКДанным) Тогда
					//Если есть два поля, которые ссылаются на один реквизит, то это не ошибка.
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВыведенныеЭлементы[Элем.Имя] = Неопределено Тогда
				СтрокаОшибки = "Имя=" + Элем.Имя + "; Заголовок=" + ЗаголовокЭлемента + "; Тип=" + ТипЗнч(Элем);
				Если ТипЗнч(Элем) = Тип("КнопкаФормы") Тогда
					СтрокаОшибки = СтрокаОшибки + "; ИмяКоманды=" + Элем.ИмяКоманды;
				КонецЕсли;	
				Ошибки.Добавить(СтрокаОшибки); 
				ВыведенныеЭлементы.Вставить(Элем.Имя, Элем.Имя);
			КонецЕсли;	
			
			Если Найти(СтрокаОшибки, "Имя=" + ДанныеЭлементаИзКеш.Имя + ";") = 0 Тогда
				Если ВыведенныеЭлементы[ДанныеЭлементаИзКеш.Имя] = Неопределено Тогда
					СтрокаОшибки = "Имя=" + ДанныеЭлементаИзКеш.Имя + "; Заголовок=" + ЗаголовокЭлементаVAСервер(ОбъектСервер, ДанныеЭлементаИзКеш) + "; Тип=" + ТипЗнч(ДанныеЭлементаИзКеш);
					Если ТипЗнч(ДанныеЭлементаИзКеш) = Тип("КнопкаФормы") Тогда
						СтрокаОшибки = СтрокаОшибки + "; ИмяКоманды=" + ДанныеЭлементаИзКеш.ИмяКоманды;
					КонецЕсли;	
					Ошибки.Добавить(СтрокаОшибки);
					ВыведенныеЭлементы.Вставить(ДанныеЭлементаИзКеш.Имя, ДанныеЭлементаИзКеш.Имя);
				КонецЕсли;	
			КонецЕсли;	
			Продолжить;
		КонецЕсли;
		
		КешЭлементов.Вставить(ЗаголовокЭлементаПоиск, Элем);

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НадоПроверятьУникальностьЗаголовка(ИмяЭлемента)
	
	Если Найти(ИмяЭлемента, "МенюЗагрузитьФичи") > 0 Тогда
		Возврат Ложь;
	ИначеЕсли Найти(ИмяЭлемента, "МенюЗагрузитьФичиVanessaEditor") > 0 Тогда
		Возврат Ложь;
	ИначеЕсли ИмяЭлемента = "СгенерированныйКод" Тогда
		Возврат Ложь;
	ИначеЕсли ИмяЭлемента = "СгенерированныйСценарийКод" Тогда
		Возврат Ложь;
	ИначеЕсли ИмяЭлемента = "ДанныеКлиентовТестированияИмя" Тогда
		Возврат Ложь;
	ИначеЕсли ИмяЭлемента = "СписокФайловИмя" Тогда
		Возврат Ложь;
	ИначеЕсли ИмяЭлемента = "НастройкиДругогоДвижкаTTSЗначение" Тогда
		Возврат Ложь;
	ИначеЕсли ИмяЭлемента = "КаталогиБиблиотекЗначение" Тогда
		Возврат Ложь;
	ИначеЕсли ИмяЭлемента = "СтрокаСтатуса" Тогда
		Возврат Ложь;
	ИначеЕсли ИмяЭлемента = "НастройкиДругогоДвижкаTTS" Тогда
		Возврат Ложь;
	ИначеЕсли Лев(ИмяЭлемента, 12) = "ДеревоТестов" Тогда
		Возврат Ложь;
	КонецЕсли;	     
	
	Возврат Истина;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВСтрокеЕстьРусскиеБуквыСлужебный(Знач Стр)
	
	Стр = НРег(Стр);
	
	Если Найти(Стр, "а") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "б") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "в") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "г") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "д") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "е") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "ё") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "ж") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "з") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "и") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "й") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "к") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "л") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "м") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "н") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "о") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "п") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "р") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "с") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "т") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "у") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "ф") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "х") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "ц") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "ч") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "ш") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "щ") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "ъ") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "ы") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "ь") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "э") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "ю") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "я") > 0 Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
	
КонецФункции	

&НаКлиенте
Функция УбратьПустыеСтрокиИЛишниеСимволыИзТекстаИсключения(Знач Стр)
	МассивСтрок = _СтрРазделить(Стр, Символы.ПС);
	НовыйМассив = Новый Массив;
	Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
		ТекСтр = СокрЛП(МассивСтрок[Сч]);
		Если ЗначениеЗаполнено(ТекСтр) Тогда
			НовыйМассив.Добавить(ТекСтр);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат _СтрСоединить(НовыйМассив, Символы.ПС);
	
КонецФункции	

&НаКлиенте
Функция ДанныеШагаДляТекстовойИнструкции(ТекШаг)
	Результат = Новый Структура;
	Результат.Вставить("УчаствуетВИнструкции", Истина);
	Результат.Вставить("ТекстГруппы", "");
	Результат.Вставить("ИдГруппы", "");
	Результат.Вставить("ШагИмеетТегScreenshot", "");
	Результат.Вставить("ВГруппеЕстьШагиСТегомScreenshot", "");
	
	Если Объект.ТекстовыеИнструкцииГруппаШаговКакШаг Тогда
		ГруппаВерхнегоУровняДляШага = СтрокаДереваГруппаВерхнегоУровняДляШага(ТекШаг);
		Если ГруппаВерхнегоУровняДляШага <> Неопределено Тогда
			ТекстГруппы = ГруппаВерхнегоУровняДляШага.Имя;
			Если Лев(ТекстГруппы, 1) = "*" Тогда
				ТекстГруппы = СокрЛП(Сред(ТекстГруппы, 2));
			КонецЕсли;
			
			Результат.Вставить("ТекстГруппы", ТекстГруппы);
			Результат.Вставить("ИдГруппы", ГруппаВерхнегоУровняДляШага.ИдСтроки);
			
			Если ВГруппеЕстьШагиСТегом(ГруппаВерхнегоУровняДляШага, "screenshot") Тогда
				Результат.Вставить("ВГруппеЕстьШагиСТегомScreenshot", "true");
				Результат.Вставить("УчаствуетВИнструкции", ШагИмеетТег(ТекШаг, "screenshot"));
			КонецЕсли;
			
			Если ШагИмеетТег(ТекШаг, "screenshot") Тогда
				Результат.Вставить("ШагИмеетТегScreenshot", "true");
			Иначе	
				Результат.Вставить("ШагИмеетТегScreenshot", "false");
			КонецЕсли;	
			
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Результат;	
	
КонецФункции

&НаКлиенте
Функция СтрокаДереваГруппаВерхнегоУровняДляШага(ТекШаг)
	
	СтрокаДерева = ПолучитьСтрокуШагаИзДанныхФормы(ТекШаг.ИдСтроки);
	ТекРодитель = СтрокаДерева.ПолучитьРодителя();
	
	ТекРезультат = Неопределено;
	
	Пока Истина Цикл
		Если ТекРодитель.Тип = "Сценарий" Тогда
			Прервать;
		КонецЕсли;	
		
		Если ТекРодитель.Тип = "Область" И Лев(СокрЛ(ТекРодитель.Имя), 1) = "*" Тогда
			ТекРезультат = ТекРодитель;
		Иначе	
			ТекРезультат = Неопределено;
		КонецЕсли;	
		
		ТекРодитель = ТекРодитель.ПолучитьРодителя();
		Если ТекРодитель = Неопределено Тогда
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат ТекРезультат;
	
КонецФункции

&НаКлиенте
Функция ВГруппеЕстьШагиСТегом(СтрокаДерева, Тег)
	
	СтрокиГруппыШагов = СтрокиГруппыШаговДерева(СтрокаДерева);
	Для Каждого ТекСтрока Из СтрокиГруппыШагов Цикл
		ТекШаг = ШагПоИдСтроки(ТекСтрока.ИДСтроки);
		Если ШагИмеетТег(ТекШаг, Тег) Тогда
			Возврат Истина;
		КонецЕсли;	
			
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ШагИмеетТег(ТекШаг, Тег)
	
	Если ТекШаг.Свойство("МассивТеговШага") И ТипЗнч(ТекШаг.МассивТеговШага) = Тип("Массив") Тогда
		Для Каждого ТекТег Из ТекШаг.МассивТеговШага Цикл
			Если НРег(Тег) = НРег(ТекТег) Тогда
				Возврат Истина;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	

&НаКлиенте
Функция СтрокиГруппыШаговДерева(СтрокаДерева)
	
	Результат = Новый Массив;
	
	СтрокиГруппыШаговДереваРекурсивно(Результат, СтрокаДерева);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СтрокиГруппыШаговДереваРекурсивно(Результат, СтрокаДерева)
	
	Для Каждого ТекСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		Если ТекСтрока.Тип = "Шаг" Тогда
			Результат.Добавить(ТекСтрока);
		КонецЕсли;
		СтрокиГруппыШаговДереваРекурсивно(Результат, ТекСтрока);
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ШагПоИдСтроки(ИДСтроки)
	
	Для Каждого ТекШаг Из МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги Цикл
		Если ТекШаг.ИДСтроки = ИДСтроки Тогда
			Возврат ТекШаг;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	

&НаКлиенте
Процедура УбратьШагиИзТекстовойИнструкцииСОдинаковымИдГруппы(МассивШагов)
	
	МассивИДДляУдаления = Новый Массив;
	
	ГруппыСТегомСкриншот = Новый Соответствие;
	
	Для Каждого ТекШаг Из МассивШагов Цикл
		Если ТекШаг.Свойство("ИдГруппы")
			И ТекШаг.Свойство("ВГруппеЕстьШагиСТегомScreenshot") И ТекШаг.ВГруппеЕстьШагиСТегомScreenshot = "true" Тогда
			ГруппыСТегомСкриншот.Вставить(ТекШаг.ИдГруппы, ТекШаг.ИдГруппы);
		КонецЕсли;	
	КонецЦикла;	
	
	ПоследнийШагГруппы = Новый Соответствие;
	Для Каждого ТекШаг Из МассивШагов Цикл
		Если ТекШаг.Свойство("ИдГруппы") Тогда
			
			Если ГруппыСТегомСкриншот[ТекШаг.ИдГруппы] <> Неопределено Тогда
				//Нужно в группах, в которых нет тега screenshot оставить только последний шаг.
				Продолжить;
			КонецЕсли;	
			
			ПоследнийШагГруппы.Вставить(ТекШаг.ИдГруппы, ТекШаг.ИДШага);
			
		КонецЕсли;	
	КонецЦикла;
	
	Ид = -1;
	Для Каждого ТекШаг Из МассивШагов Цикл
		Ид = Ид + 1;
		Если ТекШаг.Свойство("ИдГруппы") Тогда
			ПоследнийШаг = ПоследнийШагГруппы[ТекШаг.ИдГруппы];
			Если ПоследнийШаг <> Неопределено И ПоследнийШаг <> ТекШаг.ИДШага Тогда
				МассивИДДляУдаления.Добавить(Ид);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	Для Сч = 0 По МассивИДДляУдаления.Количество()-1 Цикл
		Ид = МассивИДДляУдаления[МассивИДДляУдаления.Количество()-1-Сч];
		ТекШаг = МассивШагов[Ид];
		Если ТекШаг.Свойство("Скриншот") И ЗначениеЗаполнено(ТекШаг.Скриншот) Тогда
			Попытка
				УдалитьФайлыКомандаСистемы(ТекШаг.Скриншот);
			Исключение
			КонецПопытки;
		КонецЕсли;	
		МассивШагов.Удалить(Ид);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьШагиТекстовойИнструкцииУКоторыхНеНадоВыводитьТекст(МассивШагов)
	
	ПервыеШагиВГруппах = Новый Соответствие;
	Для Каждого ТекШаг Из МассивШагов Цикл
		Если ТекШаг.Свойство("ИдГруппы") Тогда
			Если ПервыеШагиВГруппах[ТекШаг.ИдГруппы] = Неопределено Тогда
				ПервыеШагиВГруппах.Вставить(ТекШаг.ИдГруппы, ТекШаг.ИДШага);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого ТекШаг Из МассивШагов Цикл
		Если ТекШаг.Свойство("ИдГруппы") Тогда
			Если ПервыеШагиВГруппах[ТекШаг.ИдГруппы] <> ТекШаг.ИДШага Тогда
				ТекШаг.Вставить("УШагаВыводитьТолькоСкриншот", Истина);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДопПараметрыШагаТекстовойИнструкцииВЛог(ТД, ДанныеШагаДляТекстовойИнструкции)
	
	Если ЗначениеЗаполнено(ДанныеШагаДляТекстовойИнструкции.ТекстГруппы) Тогда
		ТД.ЗаписатьСтроку("ТекстГруппы=" + ДанныеШагаДляТекстовойИнструкции.ТекстГруппы);
	КонецЕсли;	
	Если ЗначениеЗаполнено(ДанныеШагаДляТекстовойИнструкции.ИдГруппы) Тогда
		ТД.ЗаписатьСтроку("ИдГруппы=" + Формат(ДанныеШагаДляТекстовойИнструкции.ИдГруппы, "ЧГ=; ЧН=0"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеШагаДляТекстовойИнструкции.ШагИмеетТегScreenshot) Тогда
		ТД.ЗаписатьСтроку("ШагИмеетТегScreenshot=" + ДанныеШагаДляТекстовойИнструкции.ШагИмеетТегScreenshot);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеШагаДляТекстовойИнструкции.ВГруппеЕстьШагиСТегомScreenshot) Тогда
		ТД.ЗаписатьСтроку("ВГруппеЕстьШагиСТегомScreenshot=" + ДанныеШагаДляТекстовойИнструкции.ВГруппеЕстьШагиСТегомScreenshot);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьИмяФайлаТестовойИнструкции(Знач Стр)
	
	Если Прав(Стр, 1) = "." Тогда
		Стр = СокрП(Лев(Стр, СтрДлина(Стр) - 1));
	КонецЕсли;	
	
	Возврат Стр;
	
КонецФункции	

&НаСервере
Функция ЗаголовокЭлементаVAСервер(ОбъектСервер, Элем)
	
	ЗаголовокЭлемента = Элем.Заголовок;
	Если НЕ ЗначениеЗаполнено(ЗаголовокЭлемента) Тогда
		Попытка
			ПутьКДанным = Элем.ПутьКДанным;
			Если ЗначениеЗаполнено(ПутьКДанным) Тогда
				Поз = Найти(ПутьКДанным, ".");
				Если Поз > 0 Тогда
					ЧастьПослеТочки = Сред(ПутьКДанным, Поз + 1);
					ЗаголовокЭлемента = ОбъектСервер.Метаданные().Реквизиты[ЧастьПослеТочки].Синоним;
				КонецЕсли;	
			КонецЕсли;	
		Исключение
			
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Если НЕ ЗначениеЗаполнено(ЗаголовокЭлемента) И НЕ ПустаяСтрока(Элем.ИмяКоманды) Тогда
			ЗаголовокЭлемента = ЗаголовокКомандыСервер(Элем.ИмяКоманды); 
		КонецЕсли;	 
	Исключение
	КонецПопытки;
	
	Возврат ЗаголовокЭлемента;
	
КонецФункции	

&НаКлиенте
Функция УбратьСпецсиволыАвтоинструкций(Знач Стр)
	
	Стр = СтрЗаменить(Стр, "^", "");
	
	Поз = Найти(Стр, "sil");
	Пока Поз > 0 Цикл
		
		Если Поз > 0 Тогда
			ЛеваяЧасть = СокрЛП(Лев(Стр, Поз - 1));
			ПраваяЧасть = Сред(Стр, Поз);
			Поз = Найти(ПраваяЧасть, ">"); 
			ПраваяЧасть = СокрЛП(Сред(ПраваяЧасть, Поз + 1));
			
			Стр = ЛеваяЧасть + " " + ПраваяЧасть;
		КонецЕсли;	
		
		Поз = Найти(Стр, "sil");
		
	КонецЦикла;	
	
	Пока Найти(Стр, "  ") > 0 Цикл
		Стр = СтрЗаменить(Стр, "  ", " ");
	КонецЦикла;
	
	Возврат Стр;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ЕстьЗащитаОтОпасныхДействийСервер()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Массив1 = РазложитьСтрокуВМассивПодстрок(СистемнаяИнформация.ВерсияПриложения, ".");
	Массив2 = РазложитьСтрокуВМассивПодстрок("8.3.9.2033", ".");
	
	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Массив1.Количество() - 1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);
		
		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		ИначеЕсли Число(Элем2) < Число(Элем1) Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Версия1БольшеИлиРавно;
КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеДополнительногоПараметраИУдалить(ИмяПараметра)
	Значение = ЗначениеДополнительногоПараметра(ИмяПараметра);
	УдалитьДополнительныйПараметр(ИмяПараметра);
	Возврат Значение;
КонецФункции	

&НаКлиенте
Процедура УдалитьДополнительныйПараметр(ИмяПараметра);
	
	Если ТипЗнч(Объект.ДополнительныеПараметры) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ Объект.ДополнительныеПараметры.Свойство(ИмяПараметра) Тогда
		Возврат;
	КонецЕсли;	 
	
	Объект.ДополнительныеПараметры.Удалить(ИмяПараметра);
	
КонецПроцедуры

&НаКлиенте
Функция НадоПолучатьДанныеОшибкиИзАктивногоОкнаКлиентаТестирования()
	
	Если ТекущийTestclientЭтоWebКлиент И ЗначениеЗаполнено(ИдентификаторФреймаТекущегоWebКлиента) И ИдентификаторФреймаТекущегоWebКлиента <> ИдентификаторФрейма Тогда
		//Значит сейчас активным окном является другая вкладка браузера и не надо получить данные из вкладки web клиента 1С
		Возврат Ложь;
	КонецЕсли;	     
	
	Возврат Истина;
	
КонецФункции	

&НаКлиенте
Процедура УпорядочитьЗначениеТаблицыФормыПоПорядкуКолонокЕслиЭтоВозможно(Таблица, ЗначениеТЧ)
	
	Попытка
		Если НЕ ЗначениеЗаполнено(ЗначениеТЧ) Тогда
			Возврат;
		КонецЕсли;	
		
		Если ЗначениеТЧ.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;	
		
		ПерваяСтрокаТаблицы = ЗначениеТЧ[0];
		
		КолонкиВПравильномПорядке = Новый Массив;
		
		ПроверкаНаДубльЗаголовка = Новый Соответствие;
		КолонкиТаблицыНеУпорядоченные = Таблица.НайтиОбъекты(Тип("ТестируемоеПолеФормы"));
		КешИменКолонкиТаблицыНеУпорядоченные = Новый Соответствие;
		Для Каждого Элем Из КолонкиТаблицыНеУпорядоченные Цикл
			КешИменКолонкиТаблицыНеУпорядоченные.Вставить(Элем.Имя, Истина);
		КонецЦикла;
		
		КолонкиТаблицы = Новый Массив;
		ВсеПодчиненныеЭлементыТаблицы = ВсеПодчиненныеЭлементыДанногоЭлементаФормыЛинейно(Таблица);
		Для Каждого Элем Из ВсеПодчиненныеЭлементыТаблицы Цикл
			Если КешИменКолонкиТаблицыНеУпорядоченные[Элем.Имя] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			КолонкиТаблицы.Добавить(Элем);
			
		КонецЦикла;	
		
		Для Каждого Элем Из КолонкиТаблицы Цикл
			
			ТекВидимость = Элем.ТекущаяВидимость();
			Если НЕ ТекВидимость Тогда
				Продолжить;
			ИначеЕсли Версия8325ИлиВыше Тогда
				РодителиКолонкиТаблицы = РодителиКолонкиТаблицыТолькоГруппы(Элем);
				НадоПродолжить = Ложь;
				Для Каждого ТекРодитель Из РодителиКолонкиТаблицы Цикл
					Если НЕ ТекРодитель.ТекущаяВидимость() Тогда
						НадоПродолжить = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если НадоПродолжить Тогда
					Продолжить;
				КонецЕсли;	
				
			КонецЕсли;	
			
			КолонкиВПравильномПорядке.Добавить(Элем.ТекстЗаголовка);
			
			ТекЗаголовок = НРег(Элем.ТекстЗаголовка);
			Если ПроверкаНаДубльЗаголовка[ТекЗаголовок] <> Неопределено Тогда
				//Непонятно как упорядочивать, когда совпадает заголовок у нескольких колонок.
				Отладка(ПодставитьПараметрыВСтроку(
					Локализовать("Обнаружено несколько колонок с одинаковым заголовком <%1>. Таблица не будет упорядочена по колонкам так, как они расположены в таблице клиента тестирования."),
					Элем.ТекстЗаголовка));

				Возврат;
			КонецЕсли;
			
			ПроверкаНаДубльЗаголовка.Вставить(ТекЗаголовок, Истина);
		КонецЦикла;
		
		ЗаменаЗаголовков = Новый Соответствие;
		КолонкиКоторыхНетВЗначенииТаблицы = Новый Соответствие;
		//Проверка, что все колонки из ЗначениеТЧ можно найти в КолонкиВПравильномПорядке 
		Для Каждого ТекКолонка Из КолонкиВПравильномПорядке Цикл
			Если ПерваяСтрокаТаблицы[ТекКолонка] = Неопределено Тогда
				НайденаЗамена = Ложь;
				Для Каждого Элем Из ПерваяСтрокаТаблицы Цикл
					ТекЗаголовок = СтрЗаменить(Элем.Ключ, Символы.ПС + Символы.ВК, " ");
					ТекЗаголовок = СтрЗаменить(ТекЗаголовок, Символы.ВК + Символы.ПС, " ");
					ТекЗаголовок = СтрЗаменить(ТекЗаголовок, Символы.ПС , " ");
					ТекЗаголовок = СтрЗаменить(ТекЗаголовок, Символы.ВК , " ");
					Если Элем.Ключ <> ТекЗаголовок Тогда
						Если ТекЗаголовок = ТекКолонка Тогда
							ЗаменаЗаголовков.Вставить(ТекКолонка, Элем.Ключ);
							НайденаЗамена = Истина;
						Иначе
							// Значит для этой колонки не получится определить упорядочивание
							Отладка(ПодставитьПараметрыВСтроку(
								Локализовать("Для колонки <%1> не получилось определить упорядочивание. Таблица не будет упорядочена по колонкам так, как они расположены в таблице клиента тестирования."),
								Элем.Ключ));
							Возврат;
						КонецЕсли;	
					КонецЕсли;	
				КонецЦикла;
				
				Если Не НайденаЗамена Тогда
					КолонкиКоторыхНетВЗначенииТаблицы.Вставить(ТекКолонка, Истина);
				КонецЕсли;	
				
			КонецЕсли;	
		КонецЦикла;
		
		НоваяТаблица = Новый Массив;
		
		Для Каждого СтрокаЗначениеТЧ Из ЗначениеТЧ Цикл
			НоваяСтрока = Новый Массив;
			Для Каждого ТекКолонка Из КолонкиВПравильномПорядке Цикл
				
				Если КолонкиКоторыхНетВЗначенииТаблицы[ТекКолонка] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;	
				
				Если ЗаменаЗаголовков[ТекКолонка] = Неопределено Тогда
					Ключ = ТекКолонка;
				Иначе	
					Ключ = ЗаменаЗаголовков[ТекКолонка];
				КонецЕсли;
				
				Значение = СтрокаЗначениеТЧ[Ключ];
				Если Значение = Неопределено Тогда
					Отладка(ПодставитьПараметрыВСтроку(
						Локализовать("Для колонки <%1> не получилось определить значение в таблице. Таблица не будет упорядочена по колонкам так, как они расположены в таблице клиента тестирования."),
						Ключ));
					Возврат;
				КонецЕсли;	
				
				ЗначениеЯчейки = Новый Структура;
				ЗначениеЯчейки.Вставить("Ключ", Ключ);
				ЗначениеЯчейки.Вставить("Значение", Значение);
				
				НоваяСтрока.Добавить(ЗначениеЯчейки);
				
			КонецЦикла;
			
			НоваяТаблица.Добавить(НоваяСтрока);
		КонецЦикла;
		
		ЗначениеТЧ = НоваяТаблица;
	Исключение
		ЗаписатьЛогВЖРОшибка("УпорядочитьЗначениеТаблицыФормыПоПорядкуКолонокЕслиЭтоВозможно", ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ВремяРаботыСценария()
	
	ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	КолСекунд = ТекущаяДата() - РезультатПрохожденияТестовСценария.ДатаНачала;
	Часов = Цел(КолСекунд / 3600);
	Минут = Цел((КолСекунд-Часов * 3600) / 60);
	Секунд = КолСекунд - Часов * 3600 - Минут * 60;
	СтрокаВремениВыполнения = "" + Часов + ":" + ?(Минут = 0, "00", Формат(Минут, "ЧЦ=2; ЧДЦ=0; ЧВН=")) + ":" + ?(Секунд = 0, "00", Формат(Секунд, "ЧЦ=2; ЧВН="));
	Возврат СтрокаВремениВыполнения;
	
КонецФункции	

&НаКлиенте
Функция НужноВыполнитьСкриншотБраузера()
	
	Если НЕ Объект.СниматьСкриншотыБраузера Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторФрейма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ДанныеТекущегоШага = ДанныеШагаСценария();
		Если ИдШагаДляКоторогоВыполнялсяСкриншотБраузера = ДанныеТекущегоШага.ИдСтроки Тогда
			Возврат Ложь;
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции	

&НаКлиенте
Процедура ВыполнитьСкриншотБраузераИПродолжитьСнятиеСкриншотовОшибки()
	
	Попытка
		ДанныеТекущегоШага = ДанныеШагаСценария();
		ИдШагаДляКоторогоВыполнялсяСкриншотБраузера = ДанныеТекущегоШага.ИдСтроки;
	Исключение
		ПодключитьОбработчикОжидания("СделатьСкриншотыОшибки", 0.1, Истина);
		Возврат;
	КонецПопытки;
	
	Попытка
		
		#Если НЕ ВебКлиент Тогда
		
		ПараметрыМетода = Новый Структура("format,quality,fromSurface", "png", 85, Ложь);
		ДанныеJSON = Новый Структура("id,method,params", 1, "Page.captureScreenshot", ПараметрыМетода);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ДанныеJSON);
		КомандаJSON = ЗаписьJSON.Закрыть();
		
		ИмяФайлаСкриншота = СформироватьИмяФайлаСкриншота();
		ЗаписатьЛогВЖРИнформация("ПередСнятиемСкриншотаБраузера", ИмяФайлаСкриншота);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьСкриншотБраузераИПродолжитьСнятиеСкриншотовОшибкиОкончание", ЭтаФорма, 
			Новый Структура("ИмяФайлаСкриншота", ИмяФайлаСкриншота) );
		ВнешняяКомпонентаДляСкриншотов.НачатьВызовВебСокет(ОписаниеОповещения, АдресВебСокет, КомандаJSON);
		
		#КонецЕсли
	
		Возврат;
		
	Исключение
		ПодключитьОбработчикОжидания("СделатьСкриншотыОшибки", 0.1, Истина);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСкриншотБраузераИПродолжитьСнятиеСкриншотовОшибкиОкончание(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	#Если НЕ ВебКлиент Тогда
	Попытка
		ЗаписатьЛогВЖРИнформация("ПослеСнятияСкриншотаБраузера", "");
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатВызова);
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		Если ДанныеJSON.Свойство("result") Тогда
			ДвоичныеДанные = Base64Значение(ДанныеJSON.result.data);
			ДвоичныеДанные.Записать(ДополнительныеПараметры.ИмяФайлаСкриншота);
		КонецЕсли;
		
		ДобавитьИмяФайлаСкриншотаКСтрокеТекущегоСценария(ДополнительныеПараметры.ИмяФайлаСкриншота);
		
		ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		РезультатПрохождения = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		
		ИмяСкриншотаДляОтчета = Локализовать("Браузер") + "_" + Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=; ЧН=0");
		
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("ИмяФайла", ДополнительныеПараметры.ИмяФайлаСкриншота);
		ДанныеФайла.Вставить("ИмяСкриншотаДляОтчета", ИмяСкриншотаДляОтчета);
		
		Если РезультатПрохождения <> Неопределено Тогда
			ДобавитьСкриншотКСценариюИлиШагу(РезультатПрохождения, ДанныеФайла);
		КонецЕсли;
		
		РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		РезультатПрохожденияТестовШагов = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
		РезультатПрохожденияШага = РезультатПрохожденияТестовШагов[РезультатПрохожденияТестовШагов.Количество() - 1];
		
		ДанныеФайла2 = Новый Структура;
		ИмяФайлаСкриншота2 = ПолучитьИмяВременногоФайла("png");
		КопироватьФайлКомандаСистемы(ДополнительныеПараметры.ИмяФайлаСкриншота, ИмяФайлаСкриншота2);
		ДанныеФайла2.Вставить("ИмяФайла", ИмяФайлаСкриншота2);
		ДанныеФайла2.Вставить("ИмяСкриншотаДляОтчета", ИмяСкриншотаДляОтчета);
		
		ДобавитьСкриншотКСценариюИлиШагу(РезультатПрохожденияШага, ДанныеФайла2);
		
	Исключение
		ЗаписатьЛогВЖРОшибка("ВыполнитьСкриншотБраузераИПродолжитьСнятиеСкриншотовОшибкиОкончание", ОписаниеОшибки());
	КонецПопытки;	
	
	#КонецЕсли

	ПодключитьОбработчикОжидания("СделатьСкриншотыОшибки", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Функция УЭлементаДолжнаБытьРасширеннаяПодсказка(Имя, ИменаЭлементовСРасширеннойПодсказкой)
	
	Если ИменаЭлементовСРасширеннойПодсказкой <> Неопределено И ИменаЭлементовСРасширеннойПодсказкой.Найти(Имя) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции	

&НаКлиенте
Функция ВЛогеПодключенияКомпонентыОбнаруженыОшибки(ДополнительныеПараметрыУстановкиКомпоненты, Команда, ИмяФайлаOUT, ИмяФайлаЛога)
	
	Попытка
		
		Если ФайлСуществуетКомандаСистемы(ИмяФайлаOUT) Тогда
			Текст = Новый ЧтениеТекста;
			Текст.Открыть(ИмяФайлаOUT, "UTF-8");
			ТекстФайла = Текст.Прочитать();
			Текст.Закрыть();
			
			Если ТекстСодержитОшибкиПодключенияКомпоненты(ТекстФайла) Тогда
				Возврат Истина;
			КонецЕсли;	       
		КонецЕсли;	
		
		Если ФайлСуществуетКомандаСистемы(ИмяФайлаЛога) Тогда
			Текст = Новый ЧтениеТекста;
			Текст.Открыть(ИмяФайлаЛога, "UTF-8");
			ТекстФайла = Текст.Прочитать();
			Текст.Закрыть();
			
			Если ТекстСодержитОшибкиПодключенияКомпоненты(ТекстФайла) Тогда
				Возврат Истина;
			КонецЕсли;	       
		КонецЕсли;
		
	Исключение
		ЗаписатьЛогВЖРОшибка("ВЛогеПодключенияКомпонентыОбнаруженыОшибки", ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ТекстСодержитОшибкиПодключенияКомпоненты(Текст)
	
	Если Найти(НРег(Текст), "не обнаружен ключ защиты программы") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	

&НаКлиенте
Функция УжеЕстьМодальныйДиалогВЭтомСеансе()
	
	Попытка
		ТекОкна = ПолучитьОкна();
		
		Для Каждого ТекОкно Из ТекОкна Цикл
			Если ТекОкно.Содержимое.Количество() = 1 Тогда
				Если ТекОкно.Содержимое[0].ИмяФормы = "MessageBox" Тогда
					Возврат Истина;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции	

&НаКлиенте
Функция ТабличныйДокументПоМассивуСтрокТаблицыGherkin(МассивСтрокДляРедактирования)
	
	ТабДок = Новый ТабличныйДокумент;
	НомСтр = 0;
	Для Каждого СтрокаМассива Из МассивСтрокДляРедактирования Цикл
		НомСтр = НомСтр + 1;
		
		Стр = СокрЛП(СтрокаМассива);
		Если Лев(Стр, 1) = "|" Тогда
			Стр = Сред(Стр, 2);
		КонецЕсли;
		
		Если Прав(Стр, 1) = "|" Тогда
			Стр = Лев(Стр, СтрДлина(Стр) - 1);
		КонецЕсли;
		
		МассивЗначений = РазложитьСтрокуВМассивПодстрокКлиент(Стр, "|");
		
		НомКол = 0;
		Для Ккк = 0 По МассивЗначений.Количество() - 1 Цикл
			НомКол = НомКол + 1;
			
			ТекЗначение = СокрЛП(МассивЗначений[Ккк]);
			Если ТекЗначение = "''" 
				ИЛИ ТекЗначение = """" Тогда
				ТекЗначение = "";
			КонецЕсли;
			
			Если (Лев(ТекЗначение, 1) = "'" И Прав(ТекЗначение, 1) = "'")
				ИЛИ (Лев(ТекЗначение, 1) = """" И Прав(ТекЗначение, 1) = """") Тогда
				ТекЗначение = Сред(ТекЗначение, 2);
				ТекЗначение = Лев(ТекЗначение, СтрДлина(ТекЗначение) - 1);
			КонецЕсли;
			
			ТекЗначение = СтрЗаменить(ТекЗначение, "\n", Символы.ПС);
			
			ТабДок.Область(НомСтр, НомКол, НомСтр, НомКол).Текст = ТекЗначение;
			
			Если НомСтр = 1 Тогда
				ТабДок.Область(НомСтр, НомКол, НомСтр, НомКол).ШиринаКолонки = 12;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции	

&НаКлиенте
Функция ВЗначенияхТаблицыGherkinЕстьЗвездочка(МассивСтрок)
	
	Для Каждого Стр Из МассивСтрок Цикл
		Если Найти(Стр, "*") > 0 Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции	

&НаКлиенте
Процедура КликНаКартинкуИзБиблиотекиКартинок(ИмяКартинки, КаталогКартинок)

	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов = Новый СписокЗначений;
	НайтиФайлыКомандаСистемы(КаталогКартинок, СписокКаталогов, СписокФайлов, Истина, ИмяКартинки	+ ".png");
	Если СписокФайлов.Количество() = 0 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("В каталоге <%1> не найден файл <%2>."),
			КаталогКартинок,
			ИмяКартинки
		);
	КонецЕсли;

	Если СписокФайлов.Количество() > 1 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("В каталоге <%1> найдено больше одного файла <%2>: %3."),
			КаталогКартинок,
			ИмяКартинки,
			СписокФайлов.Количество()
		);
	КонецЕсли;

	ПутьКФайлу = СтрЗаменить(СписокФайлов[0].Значение.ПолноеИмя, "\", "/");
	ФрагментКартинки = Новый ДвоичныеДанные(ПутьКФайлу);
	Результат = ВнешняяКомпонентаДляСкриншотов.НайтиНаЭкране(ФрагментКартинки);
	ДопустимыйПредел = ПорогПоискаКартинки();
	Координаты = ПрочитатьСтрокуJSON(Результат);
	КоличествоШаговПриДвиженииМышкиVanessaExt = 200;
	ПаузаМеждуШагамиПриДвиженииМышкиVanessaExt = 1;
	ВнешняяКомпонентаДляСкриншотов.ЭмуляцияДвиженияМыши(Координаты.X, Координаты.Y,
		КоличествоШаговПриДвиженииМышкиVanessaExt, ПаузаМеждуШагамиПриДвиженииМышкиVanessaExt);
	ВнешняяКомпонентаДляСкриншотов.ЭмуляцияНажатияМыши(0);
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаСодержитТекстИсключенияПроверкиСерверныхВызововВОбработчикахСобытий(Стр)
	
	Если Найти(Стр, "используется вызов контекстного серверного метода формы") > 0 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр, "handler includes a call of a context server method of a form") > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	

&НаКлиенте
Функция ПодготовитьТекстИсключенияПроверкиСерверныхВызововВОбработчикахСобытий(Стр)
	
	МассивСтрок = _СтрРазделить(Стр, Символы.ПС);
	НовыйМассивСтрок = Неопределено;
	Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
		ТекСтр = МассивСтрок[Сч];
		Если ТекСтр = "Ошибки:" Тогда
			НовыйМассивСтрок = Новый Массив;
			Для Сч2 = Сч + 1 По МассивСтрок.Количество()-1 Цикл
				НовыйМассивСтрок.Добавить(МассивСтрок[Сч2]);
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;
	
	Если НовыйМассивСтрок = Неопределено Тогда
		НовыйМассивСтрок = МассивСтрок;
	КонецЕсли;	
	
	Спс = Новый СписокЗначений;
	Кеш = Новый Соответствие;
	Для Сч = 0 По НовыйМассивСтрок.Количество() - 1 Цикл
		ТекСтр = НовыйМассивСтрок[Сч];
		
		Если НЕ СтрокаСодержитТекстИсключенияПроверкиСерверныхВызововВОбработчикахСобытий(ТекСтр) Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Кеш[ТекСтр] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Кеш.Вставить(ТекСтр, Истина);
		
		Спс.Добавить(ТекСтр);
	КонецЦикла;
	
	Спс.СортироватьПоЗначению();
	
	Если Спс.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;	
	
	Возврат _СтрСоединить(Спс.ВыгрузитьЗначения(), Символы.ПС);
	
КонецФункции	

&НаКлиенте
Функция ТабличыйДокументПоМассивуМассивов(Массив)
	
	ТабДок = Новый ТабличныйДокумент;
	
	СчСтрок = 0;
	Для Каждого ТекСтрока Из Массив Цикл
		СчСтрок = СчСтрок + 1;
		СчКолонок = 0;
		Для Каждого ТекЗначение Из ТекСтрока Цикл
			СчКолонок = СчКолонок + 1;
			ТабДок.Область(СчСтрок,СчКолонок,СчСтрок,СчКолонок).Текст = ТекЗначение;
		КонецЦикла;	
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции	

&НаКлиенте
Функция КонтекстДляПередачиНаСервер()
	
	Результат = Новый Структура;
	
	Если ТипЗнч(ОбъектКонтекст) = Тип("Структура") Тогда
		Для Каждого Элем Из ОбъектКонтекст Цикл
			Если ЭтоСлужебнаяПеременаяКонтекста(Элем.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			
			Результат.Вставить(Элем.Ключ, Элем.Значение);
			
		КонецЦикла;	
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Функция КонтекстСохранямыйДляПередачиНаСервер()
	
	Результат = Новый Структура;
	
	Если ТипЗнч(ОбъектКонтекстСохраняемый) = Тип("Структура") Тогда
		Для Каждого Элем Из ОбъектКонтекстСохраняемый Цикл
			Если ЭтоСлужебнаяПеременаяКонтекста(Элем.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			
			Результат.Вставить(Элем.Ключ, Элем.Значение);
			
		КонецЦикла;	
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СлужебныеПеременныеДляПередачиНаСервер()
	
	Результат = Новый Структура;
	Результат.Вставить("КаталогПроекта", Объект.КаталогПроекта);
	Результат.Вставить("КаталогИнструментов", Объект.КаталогИнструментов);
	Результат.Вставить("КаталогФичи", КаталогТекущегоИсполняемогоФичаФайла);
	Результат.Вставить("InstrPath", Объект.КаталогИнструментов);
	Результат.Вставить("ProjectPath", Объект.КаталогПроекта);
	Результат.Вставить("FeaturePath", КаталогТекущегоИсполняемогоФичаФайла);
	Возврат Результат;
	
КонецФункции	

&НаСервере
Процедура ЯВыполняюКодВстроенногоЯзыкаНаСервереСПередачейПеременныхСервер(Стр, Контекст, КонтекстСохраняемый, СлужебныеПеременные)
	
	глТипСтрока = Тип("Строка");
	ТолькоСтроки = Истина;
	
	Если Найти(Стр, "$") > 0 Тогда
		Для Каждого Элем Из СлужебныеПеременные Цикл
			Если ТипЗнч(Элем.Значение) = глТипСтрока ИЛИ НЕ ТолькоСтроки Тогда
				Стр = СтрЗаменить(Стр, "$" + Элем.Ключ + "$", Элем.Значение);
			КонецЕсли;	 	
		КонецЦикла;
		
		Для Каждого Элем Из Контекст Цикл
			Если ТипЗнч(Элем.Значение) = глТипСтрока ИЛИ НЕ ТолькоСтроки Тогда
				//Для других типов это делать нельзя, т.к. шаги могут ожидать числа, строки, массивы и т.д., а тут идёт преобразование к строке.
				//Если убрать ограничение, то не будет работать передача переменных других типов, т.к. значения обернутые в $ будут сразу преобразовываться к строке
				//Т.е. перестанут работать такие шаги:
				//Тогда в переменной "$ЧисловаяПеременная$" будет находится значение типа "Число"
				Стр = СтрЗаменить(Стр, "$" + Элем.Ключ + "$", Элем.Значение);
			КонецЕсли;	 	
		КонецЦикла;	 
		
		Для Каждого Элем Из КонтекстСохраняемый Цикл
			Если ТипЗнч(Элем.Значение) = глТипСтрока ИЛИ НЕ ТолькоСтроки Тогда
				//Для других типов это делать нельзя, т.к. шаги могут ожидать числа, строки, массивы и т.д., а тут идёт преобразование к строке.
				Стр = СтрЗаменить(Стр, "$$" + Элем.Ключ + "$$", Элем.Значение);
			КонецЕсли;	 	
		КонецЦикла;	 
		
	КонецЕсли;
	
	Выполнить(Стр);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЯВыполняюКодВстроенногоЯзыкаНаСервереБезКонтекстаСПередачейПеременныхСервер(Стр, Контекст, КонтекстСохраняемый, СлужебныеПеременные)
	
	глТипСтрока = Тип("Строка");
	ТолькоСтроки = Истина;
	
	Если Найти(Стр, "$") > 0 Тогда
		Для Каждого Элем Из СлужебныеПеременные Цикл
			Если ТипЗнч(Элем.Значение) = глТипСтрока ИЛИ НЕ ТолькоСтроки Тогда
				Стр = СтрЗаменить(Стр, "$" + Элем.Ключ + "$", Элем.Значение);
			КонецЕсли;	 	
		КонецЦикла;
		
		Для Каждого Элем Из Контекст Цикл
			Если ТипЗнч(Элем.Значение) = глТипСтрока ИЛИ НЕ ТолькоСтроки Тогда
				//Для других типов это делать нельзя, т.к. шаги могут ожидать числа, строки, массивы и т.д., а тут идёт преобразование к строке.
				//Если убрать ограничение, то не будет работать передача переменных других типов, т.к. значения обернутые в $ будут сразу преобразовываться к строке
				//Т.е. перестанут работать такие шаги:
				//Тогда в переменной "$ЧисловаяПеременная$" будет находится значение типа "Число"
				Стр = СтрЗаменить(Стр, "$" + Элем.Ключ + "$", Элем.Значение);
			КонецЕсли;	 	
		КонецЦикла;	 
		
		Для Каждого Элем Из КонтекстСохраняемый Цикл
			Если ТипЗнч(Элем.Значение) = глТипСтрока ИЛИ НЕ ТолькоСтроки Тогда
				//Для других типов это делать нельзя, т.к. шаги могут ожидать числа, строки, массивы и т.д., а тут идёт преобразование к строке.
				Стр = СтрЗаменить(Стр, "$$" + Элем.Ключ + "$$", Элем.Значение);
			КонецЕсли;	 	
		КонецЦикла;	 
		
	КонецЕсли;
	
	Выполнить(Стр);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьРегистрациюНастроекVAСервер(НастройкиИзМодуляОбъекта, КоллекцияКомандЗапуска)
	ИменаКлючейОбщихНастроек = ИменаКлючейОбщихНастроек();
	ИменаКлючейОбщихНастроек.Индексы.Добавить("ИмяEn");
	ИменаКлючейОбщихНастроек.Индексы.Добавить("ИмяRU");
	
	Проблемы = Новый Массив;
	
	Для Каждого ТекНастройкиИзМодуляОбъекта Из НастройкиИзМодуляОбъекта Цикл
		ИмяНастройки = ТекНастройкиИзМодуляОбъекта.Ключ;
		Если НЕ КоллекцияКомандЗапуска.Свойство(ИмяНастройки) Тогда
			Проблемы.Добавить(СтрЗаменить("КоллекцияКомандЗапуска. Не найден ключ <%1>", "%1", ИмяНастройки));
		КонецЕсли;
		
		СтрокаИменаКлючейОбщихНастроек = ИменаКлючейОбщихНастроек.Найти(ИмяНастройки, "ИмяRU");
		Если СтрокаИменаКлючейОбщихНастроек = Неопределено Тогда
			Если  ИмяНастройки <> "Lang"
				И ИмяНастройки <> "DebugLog"
				И ИмяНастройки <> "Version"
				Тогда
					Проблемы.Добавить(СтрЗаменить("ИменаКлючейОбщихНастроек. Не найден ключ <%1>", "%1", ИмяНастройки));
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла;
	
	АнглийскиеСинонимыКоллекцияКомандЗапуска = Новый Соответствие;
	Для Каждого ТекКоллекцияКомандЗапуска Из КоллекцияКомандЗапуска Цикл
		
		Если ТипЗнч(ТекКоллекцияКомандЗапуска.Значение) = Тип("Структура") Тогда
			АнглийскиеСинонимыКоллекцияКомандЗапуска.Вставить(ТекКоллекцияКомандЗапуска.Значение.А, Истина);
		КонецЕсли;	
		
		ИмяНастройки = ТекКоллекцияКомандЗапуска.Ключ;
		Если НЕ НастройкиИзМодуляОбъекта.Свойство(ИмяНастройки) Тогда
			Проблемы.Добавить(СтрЗаменить("НастройкиИзМодуляОбъекта. Не найден ключ <%1>", "%1", ИмяНастройки));
		КонецЕсли;
		
		СтрокаИменаКлючейОбщихНастроек = ИменаКлючейОбщихНастроек.Найти(ИмяНастройки, "ИмяRU");
		Если СтрокаИменаКлючейОбщихНастроек = Неопределено Тогда
			Если  ИмяНастройки <> "Lang"
				И ИмяНастройки <> "DebugLog"
				И ИмяНастройки <> "Version"
				Тогда
					Проблемы.Добавить(СтрЗаменить("ИменаКлючейОбщихНастроек. Не найден ключ <%1>", "%1", ИмяНастройки));
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла;
	
	АнглийскиеСинонимыИменаКлючейОбщихНастроек = Новый Соответствие;
	Для Каждого СтрокаИменаКлючейОбщихНастроек Из ИменаКлючейОбщихНастроек Цикл
		ИмяНастройки = СтрокаИменаКлючейОбщихНастроек.ИмяRU;
		
		АнглийскиеСинонимыИменаКлючейОбщихНастроек.Вставить(СтрокаИменаКлючейОбщихНастроек.ИмяEn, Истина);
		
		Если ИмяНастройки = "АктивизироватьСтроку" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "ВыполнениеСценариев" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "ВыполнениеСценариев" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "ДопПараметры" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "ЗаписьВидео" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "Имя" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "ИмяКомпьютера" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "КлиентТестирования" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "ОтчетAllure" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "ОтчетJUnit" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "ОтчетCucumber" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "ОтчетСППР" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "ПортЗапускаТестКлиента" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "ПутьКИнфобазе" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "Синоним" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "ТипКлиента" Тогда
			Продолжить;
		КонецЕсли;	
		
		Если НЕ НастройкиИзМодуляОбъекта.Свойство(ИмяНастройки) Тогда
			Проблемы.Добавить(СтрЗаменить("НастройкиИзМодуляОбъекта. Не найден ключ <%1>", "%1", ИмяНастройки));
		КонецЕсли;
		Если НЕ КоллекцияКомандЗапуска.Свойство(ИмяНастройки) Тогда
			Проблемы.Добавить(СтрЗаменить("КоллекцияКомандЗапуска. Не найден ключ <%1>", "%1", ИмяНастройки));
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого КлючЗначение Из АнглийскиеСинонимыКоллекцияКомандЗапуска Цикл
		ИмяНастройки = КлючЗначение.Ключ;
		Если АнглийскиеСинонимыИменаКлючейОбщихНастроек[ИмяНастройки] = Неопределено Тогда
			Проблемы.Добавить(СтрЗаменить("АнглийскиеСинонимыИменаКлючейОбщихНастроек. Не найден ключ <%1>", "%1", ИмяНастройки));
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого КлючЗначение Из АнглийскиеСинонимыИменаКлючейОбщихНастроек Цикл
		ИмяНастройки = КлючЗначение.Ключ;
		
		Если ИмяНастройки = "CucumberReport" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "JUnitReport" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "TestClient" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "VideoRecording" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "Name" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "AllureReport" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "Synonym" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "RunningScripts" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "ComputerName" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "AddItionalParameters" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "PortTestClient" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "ActivateString" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "ModelingReport" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "datatestclients" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "ClientType" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "PathToInfobase" Тогда
			Продолжить;
		ИначеЕсли ИмяНастройки = "VersionVA" Тогда
			Продолжить;
		КонецЕсли;	
		
		Если АнглийскиеСинонимыКоллекцияКомандЗапуска[ИмяНастройки] = Неопределено Тогда
			Проблемы.Добавить(СтрЗаменить("АнглийскиеСинонимыКоллекцияКомандЗапуска. Не найден ключ <%1>", "%1", ИмяНастройки));
		КонецЕсли;	
	КонецЦикла;	
	
	Если Проблемы.Количество() > 0 Тогда
		Стр = "";
		Для Каждого Элем Из Проблемы Цикл
			Стр = Стр + Элем + Символы.ПС;
		КонецЦикла;
		
		ВызватьИсключение СокрЛП(Стр);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ЗаменитьСпецСимволыДляСравненияСтрокUIAutomation(Знач Стр)
	Стр = СтрЗаменить(Стр, Символы.ПС, " ");
	Стр = СтрЗаменить(Стр, Символы.ВК, " ");
	Стр = СтрЗаменить(Стр, Символы.НПП, " ");
	Возврат Стр;
КонецФункции	

&НаСервере
Функция ЗаписатьОбъектJSONСервер(ДанныеJSON)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеJSON);
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

&НаСервере
Функция ДанныеЖурналаРегистрацииВСтроку(Значение)
	
	Если ТипЗнч(Значение) = Тип("Структура") Тогда
		Попытка
			Возврат ЗаписатьОбъектJSONСервер(Значение);
		Исключение
			Возврат Значение;
		КонецПопытки;
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПрочитатьФайлВТабличныйДокументНаСервере(ИмяФайла)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	МаксКолПопыток = 10;
	ПолучилосьПрочитатьМакет = Ложь;
	ТекстОшибки = Неопределено;
	
	Для КолПопыток = 1 По МаксКолПопыток Цикл
		Попытка
			ТабличныйДокумент.Прочитать(ИмяФайла);
			ПолучилосьПрочитатьМакет = Истина;
			Прервать;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			SleepOnServer(1);
		КонецПопытки;
	КонецЦикла;
	
	Если НЕ ПолучилосьПрочитатьМакет Тогда
		ЗаписатьЛогВЖРИнформацияСервер("ПрочитатьФайлВТабличныйДокументНаСервере", ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции	

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайлаСлужебный(ИмяФайла, ДополнительныеПараметры)
	
	НастройкиИзФайла = ПрочитатьОбщиеНастройкиИзФайла(ИмяФайла);	
	Если ДополнительныеПараметры.Свойство("КаталогПроекта") Тогда
		НастройкиИзФайла.Вставить("КаталогПроекта", ДополнительныеПараметры.КаталогПроекта);
	КонецЕсли;	
	
	ЗагрузитьГлобальныеПеременныеИзДанныхНастроек(НастройкиИзФайла);
	ОбновитьЗначенияВТаблоПеременных();
	ДополнительныеПараметры.Вставить("ПлоскаяСтруктураПараметровЗапуска", СтруктураПараметровЗапуска());
	ЗагрузитьНастройкиНаСервере(НастройкиИзФайла,, ДополнительныеПараметры);
	
	ИспользоватьКомпонентуVanessaExtПриИзменении();
	УстановитьУсловноеОформление();
	Объект.ЗакрытьTestClientПослеЗапускаСценариев = Ложь;
	Объект.ЗавершитьРаботуСистемыПослеВыполненияВсехСценариев = Ложь;
	Объект.ВыгружатьСтатусВыполненияСценариевВФайл = Ложь;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ВернутьНастройки ") Тогда
			Для Каждого Элем Из ДополнительныеПараметры.ВернутьНастройки Цикл
				Объект[Элем.Ключ] = Элем.Значение;
			КонецЦикла;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеПараметраЗапускаИмяФайлаНастроек()
	
	ИмяФайла = ЗначениеПараметраЗапуска("VAParams");
	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		ИмяФайла = ЗначениеПараметраЗапуска("VBParams");
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции	

&НаКлиенте
Процедура ВыбратьВариантПереключателя(ПолеРеквизит, Знач Значение)
	
	Попытка
		ПолеРеквизит.ВыбратьВариант(Значение);
	Исключение
		Если Найти(Значение, "\n") > 0 Тогда
			Если ТекущийTestclientЭтоWebКлиент Тогда
				Значение = СтрЗаменить(Значение, "\n", " ");
				ПолеРеквизит.ВыбратьВариант(Значение);
			Иначе	
				Значение = СтрЗаменить(Значение, "\n", Символы.ПС);
				ПолеРеквизит.ВыбратьВариант(Значение);
			КонецЕсли;	
		Иначе	
			ВызватьИсключение ОписаниеОшибки();
		КонецЕсли;	
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиФичаФайлыУроковДляОбработки()
	
	Результат = Новый Массив;
	
	КаталогПоиска = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "training\features";
	
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;
	НайтиФайлыКомандаСистемы(КаталогПоиска, СписокКаталогов, СписокФайлов, Истина, "*.feature");
	
	СписокФайлов.СортироватьПоПредставлению();
	
	Для Каждого Элем Из СписокФайлов Цикл
		
		ТекФайл = Элем.Значение;
		
		Если Найти(СтрЗаменить(НРег(ТекФайл.ПолноеИмя), "/", "\"), "\features\примеры\") > 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ТекФайл.ПолноеИмя, "UTF-8");
		ТекстФайла = Текст.Прочитать();
		Текст.Закрыть();
		
		Если Найти(ТекстФайла, "@lessons") = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Результат.Добавить(ТекФайл.ПолноеИмя);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Функция ЕслиНаЭкранеДиалогМодальныйДиалогТоНадоЕгоЗакрыть()
	
	Если НЕ КонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если КонтекстСохраняемый.ТестовоеПриложение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Нашли = Ложь;
	НужноеОкно = Неопределено;
	
	МодальныеОкна = Новый Массив;
	
	ОкнаПриложения = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	Для Каждого ОкноПриложения Из ОкнаПриложения Цикл
		Если Ванесса.ЭтоМодальныйДиалог(ОкноПриложения) Тогда
			МодальныеОкна.Добавить(ОкноПриложения);
		КонецЕсли;	 
	КонецЦикла;	
	
	Если МодальныеОкна.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	Для Каждого НужноеОкно Из МодальныеОкна Цикл
		МассивКнопок = НужноеОкно.НайтиОбъекты(Тип("ТестируемаяКнопкаФормы"));
		
		Попытка
			Для Каждого Кнопка Из МассивКнопок Цикл
				Если НРег(Кнопка.ТекстЗаголовка) = "нет" Тогда
					Кнопка.Нажать();
					ЗаписатьВЖурналРегистрацииСообщениеОЗакрытииОкна(НужноеОкно.Заголовок);
					Прервать;
				ИначеЕсли НРег(Кнопка.ТекстЗаголовка) = "no" Тогда
					Кнопка.Нажать();
					ЗаписатьВЖурналРегистрацииСообщениеОЗакрытииОкна(НужноеОкно.Заголовок);
					Прервать;
				ИначеЕсли НРег(Кнопка.ТекстЗаголовка) = "отмена" Тогда
					Кнопка.Нажать();
					ЗаписатьВЖурналРегистрацииСообщениеОЗакрытииОкна(НужноеОкно.Заголовок);
					Прервать;
				ИначеЕсли ВРег(Кнопка.ТекстЗаголовка) = "OK" Тогда
					Кнопка.Нажать();
					ЗаписатьВЖурналРегистрацииСообщениеОЗакрытииОкна(НужноеОкно.Заголовок);
					Прервать;
				ИначеЕсли НРег(Кнопка.ТекстЗаголовка) = "закрыть" Тогда
					//для форм БСП
					Кнопка.Нажать();
					ЗаписатьВЖурналРегистрацииСообщениеОЗакрытииОкна(НужноеОкно.Заголовок);
					Прервать;
				ИначеЕсли НРег(Кнопка.ТекстЗаголовка) = "закрыть форму" Тогда
					Кнопка.Нажать();
					ЗаписатьВЖурналРегистрацииСообщениеОЗакрытииОкна(НужноеОкно.Заголовок);
					Прервать;
				ИначеЕсли НРег(Кнопка.ТекстЗаголовка) = "close the form" Тогда
					Кнопка.Нажать();
					ЗаписатьВЖурналРегистрацииСообщениеОЗакрытииОкна(НужноеОкно.Заголовок);
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		Исключение
		КонецПопытки;
		
	КонецЦикла;	
	
КонецФункции

&НаКлиенте
Функция ЗаголовокиОконТиповыхКонфигурацийНРег()
	Массив = Новый Массив;
	Массив.Добавить(НРег(".:      Выберите операцию      :."));
	Возврат Массив;
КонецФункции

&НаКлиенте
Процедура ЗаписатьВЖурналРегистрацииСообщениеОЗакрытииОкна(ЗаголовокОкна)
	Ванесса.ЗаписатьЛогВЖРИнформация("ЗакрытиеОкна", ЗаголовокОкна);
КонецПроцедуры

&НаКлиенте
Функция ДопПараметрыВыполнитьПодключениеВнешнейКомпоненты(ИмяОбработчика)
	Структура = Новый Структура;
	Структура.Вставить("ИмяОбработчика", ИмяОбработчика);
	Структура.Вставить("Подключение", Истина);
	Структура.Вставить("КоличествоПопытокУстановкиКомпоненты", 0);
	Возврат Структура;
КонецФункции	

&НаКлиенте
Функция ПолучитьПредставлениеПоляHTML(ПолеРеквизит)
	ПредставлениеДанных = "";
	Вложения = Новый Соответствие;
	ПолеРеквизит.ПолучитьHTMLДокумента(ПредставлениеДанных, Вложения);
	Возврат ПредставлениеДанных;
КонецФункции	

&НаКлиенте
Функция РодителиКолонкиТаблицыТолькоГруппы(Элем)
	//Работает в 8.3.25 и выше
	
	Массив = Новый Массив;
	ЭлементДляПроверки = Элем;
	
	Пока Истина Цикл
		
		ТекРодитель = ЭлементДляПроверки.ПолучитьРодителя();
		Если ТипЗнч(ТекРодитель) <> Тип("ТестируемаяГруппаФормы") Тогда
			Прервать;
		КонецЕсли;
		
		Массив.Добавить(ТекРодитель);
		ЭлементДляПроверки = ТекРодитель;
		
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции	

&НаКлиенте
Процедура ВсеПодчиненныеЭлементыДанногоЭлементаФормыЛинейноРекурсивно(ТекущийКонтрол, Результат)
	
	МассивЭлементов = ТекущийКонтрол.ПолучитьПодчиненныеОбъекты();
	Для Каждого Элем Из МассивЭлементов Цикл
		Результат.Добавить(Элем);
		
		Если ТипЗнч(Элем) = Тип("ТестируемоеПолеФормы") Тогда
			Продолжить;
		КонецЕсли;	
		
		ВсеПодчиненныеЭлементыДанногоЭлементаФормыЛинейноРекурсивно(Элем, Результат)
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Функция ВсеПодчиненныеЭлементыДанногоЭлементаФормыЛинейно(ЭлементРодитель)
	
	Результат = Новый Массив;
	ВсеПодчиненныеЭлементыДанногоЭлементаФормыЛинейноРекурсивно(ЭлементРодитель, Результат);
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Функция ПолучитьЗначенияТаблоПеременныхИерархически(ТекущиеДанные)
	Массив = Новый Массив;
	
	ТекСтрока = ТекущиеДанные;
	Массив.Добавить(ТекСтрока);
	Пока Истина Цикл
		ТекСтрока = ТекСтрока.ПолучитьРодителя();
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Значение) Тогда
			Прервать;
		КонецЕсли;
		
		Массив.Вставить(0, ТекСтрока);
		
	КонецЦикла;	
	
	Возврат Массив;
	
КонецФункции	

&НаКлиенте
Функция ТаблоПеременныхДополнитьИмяПеременной(Знач Имя, ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Имя;
	КонецЕсли;	
	
	СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ЗначениеЗаполнено(СтрокаРодитель.Значение) Тогда
		//Значит это строка массива, стуктуры, соответствия и т.п.
		Массив = ПолучитьЗначенияТаблоПеременныхИерархически(ТекущиеДанные);
		
		ТекИмя = "";
		Сч = -1;
		НадоПродолжить = Ложь;
		Для Каждого ТекСтрока Из Массив Цикл
			
			Сч = Сч + 1;
			
			Если НадоПродолжить Тогда
				НадоПродолжить = Ложь;
				Продолжить;
			КонецЕсли;	
			
			Если ТекСтрока.Тип = "Структура" Тогда
				Если ЗначениеЗаполнено(ТекИмя) Тогда
					ТекИмя = ТекИмя + "." + ТекСтрока.Имя;
				Иначе
					ТекИмя = ТекСтрока.Имя;
				КонецЕсли;	
			ИначеЕсли ТекСтрока.Тип = "Массив" И (Сч + 1 + 1 <= Массив.Количество()) Тогда
				СледующаяСтрока = Массив[Сч + 1];
				Индекс = Сред(СледующаяСтрока.Имя, СтрДлина(ТекСтрока.Имя) + 1);
				НадоПродолжить = Истина;
				
				Значение = ТекСтрока.Имя + "[" + Индекс + "]";
				
				Если ЗначениеЗаполнено(ТекИмя) Тогда
					ТекИмя = ТекИмя + "." + Значение;
				Иначе
					ТекИмя = Значение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	
		
		Если ЗначениеЗаполнено(ТекИмя) И ТекСтрока.Тип <> "Структура" И ТекСтрока.Тип <> "Соответствие" Тогда
			ТекИмя = ТекИмя + "." + Имя;
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекИмя) Тогда
			ТекИмя = Имя;
		КонецЕсли;	
		
		Возврат ТекИмя;
		
	КонецЕсли;	
	
	Возврат Имя;
	
КонецФункции	

&НаКлиенте
Функция ЗаполнитьКешСоответствияШаговПоискПоИмени()
	
	Результат = Новый Структура;
	Результат.Вставить("СоответствиеИмя", Новый Соответствие);
	Результат.Вставить("СоответствиеЗаголовок", Новый Соответствие);
	
	Для Каждого СтрокаТаблицаИзвестныхStepDefinition Из ТаблицаИзвестныхStepDefinition Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Найти(НРег(СтрокаТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры), "переключ") Тогда
			ва = 1;
		КонецЕсли;	
		
		СтрокаДляПоискаСнипета = СтрокаТаблицаИзвестныхStepDefinition.СтрокаДляПоиска;
		СтрПоиска = "сименем";
		
		Поз = Найти(СтрокаДляПоискаСнипета, СтрПоиска);
		
		Если Поз = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		ЛеваяЧасть = Лев(СтрокаДляПоискаСнипета, Поз - 1);
		ПраваяЧасть = Сред(СтрокаДляПоискаСнипета, Поз + СтрДлина(СтрПоиска));
		
		СнипетПоискПоЗаголовку = ЛеваяЧасть + ПраваяЧасть;
		ДанныеОтбора = Новый Структура;
		ДанныеОтбора.Вставить("СтрокаДляПоиска", СнипетПоискПоЗаголовку);
		СтрокиСнипетПоискПоЗаголовку = ТаблицаИзвестныхStepDefinition.НайтиСтроки(ДанныеОтбора);
		Если СтрокиСнипетПоискПоЗаголовку.Количество() > 0 Тогда
			СтрокаСнипетПоискПоЗаголовку = СтрокиСнипетПоискПоЗаголовку[0];
			Результат.СоответствиеИмя.Вставить(СтрокаТаблицаИзвестныхStepDefinition.СтрокаДляПоиска, СтрокаСнипетПоискПоЗаголовку.СтрокаДляПоиска);
			Результат.СоответствиеЗаголовок.Вставить(СтрокаСнипетПоискПоЗаголовку.СтрокаДляПоиска, СтрокаТаблицаИзвестныхStepDefinition.СтрокаДляПоиска);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Функция ЭлементФормыПоСтроке(ГдеИскать, Значение, ИскатьПоИмени, ВыводитьСообщение)
	Если ИскатьПоИмени Тогда
		НайденныеЭлементаФормы = ГдеИскать.НайтиОбъекты(,,Значение);
	Иначе	
		НайденныеЭлементаФормы = ГдеИскать.НайтиОбъекты(,Значение);
	КонецЕсли;
	
	Если НайденныеЭлементаФормы.Количество() = 0 Тогда
		Если ВыводитьСообщение Тогда
			СообщитьПользователю(ПодставитьПараметрыВСтроку(Локализовать("Не найден элемент формы <%1>."), Значение));
		КонецЕсли;	
		Возврат Неопределено;
	ИначеЕсли НайденныеЭлементаФормы.Количество() > 1 Тогда
		Если ВыводитьСообщение Тогда
			СообщитьПользователю(ПодставитьПараметрыВСтроку(
				Локализовать("Нельзя сделать замену, т.к. найдено несколько <%1> элементов формы по строке <%2>."),
					НайденныеЭлементаФормы.Количество(), Значение));
		КонецЕсли;	
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат НайденныеЭлементаФормы[0];
КонецФункции	

&НаКлиенте
Функция УбратьИзПеременныхСредыСекретныеЗначения(Данные)
	
	Результат = Новый Соответствие;
	
	Для Каждого КлючЗначение Из Данные Цикл
		
		НРегКлюч = НРег(КлючЗначение.Ключ);
		
		Если Найти(НРегКлюч, "psw") > 0
		ИЛИ  Найти(НРегКлюч, "password") > 0
		ИЛИ  Найти(НРегКлюч, "token") > 0
		Тогда
			Результат.Вставить(КлючЗначение.Ключ, "*****");
			Продолжить;
		КонецЕсли;
		
		Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Процедура ОбработатьСохраненныеДанныеСборДанныхДляОтчетов()
	
	Если ТипЗнч(СохраненныеДанныеСборДанныхДляОтчетов) = Тип("Структура") Тогда
		
		СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(СохраненныеДанныеСборДанныхДляОтчетов.СтрокаСценарияИдСтроки);
		
		СборДанныхДляОтчетов(
			СохраненныеДанныеСборДанныхДляОтчетов.РезультатПрохожденияТестовСценария,
			СтрокаСценария,
			СохраненныеДанныеСборДанныхДляОтчетов.РезультатПрохожденияШага,
			СохраненныеДанныеСборДанныхДляОтчетов.ОписаниеОшибкиВнутриСценария,
			СохраненныеДанныеСборДанныхДляОтчетов.ТекШаг
			);
		СохраненныеДанныеСборДанныхДляОтчетов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НаЭкранеСистемныйДиалогКоторыйМожноЗакрытьИПродолжитьСценарий()
	
	Если НЕ ЗакрыватьСистемныеДиалогиЕслиПослеИзЗакрытияМожноПродолжитьВыполнениеСценария Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Попытка
		ТекущееОкно = ПолучитьАктивноеОкноИзТестовоеПриложение();
		Если ТекущееОкно = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		Если ТекущееОкно.Заголовок = "Проверка правомерности использования конфигурации" Тогда
			Возврат Истина;
		КонецЕсли;
	Исключение
		ЗаписатьЛогВЖРОшибка("НаЭкранеСистемныйДиалогКоторыйМожноЗакрытьИПродолжитьСценарий", ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции	

&НаКлиенте
Функция ЗакрытьСистемныйДиалогКоторыйМешаетПродолжитьСценарий()
	
	Если НЕ ЗакрыватьСистемныеДиалогиЕслиПослеИзЗакрытияМожноПродолжитьВыполнениеСценария Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если НЕ ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Попытка
		ТекущееОкно = ПолучитьАктивноеОкноИзТестовоеПриложение();
		Если ТекущееОкно = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗаголовокОкнаДиалога = ТекущееОкно.Заголовок;
		
		Если НРег(ЗаголовокОкнаДиалога) = НРег("Проверка правомерности использования конфигурации") Тогда
			Кнопка = ТекущееОкно.НайтиОбъект(, "Повторить позже");
			Если Кнопка <> Неопределено Тогда
				Кнопка.Нажать();
				
				ТекстСообщения = Локализовать("Закрыт системный дилалог <%1>. Выполнение сценария продолжено.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ЗаголовокОкнаДиалога);
				ЗаписатьЛогВЖРИнформация("ЗакрытьСистемныйДиалогКоторыйМешаетПродолжитьСценарий", ТекстСообщения);
				ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(ТекстСообщения);
				Возврат Истина;
			КонецЕсли;	
		КонецЕсли;
	Исключение
		ЗаписатьЛогВЖРОшибка("ЗакрытьСистемныйДиалогКоторыйМешаетПродолжитьСценарий", ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции	

&НаКлиенте
Функция ПоискЭлементаФормыВXMLДействийПользователя(ТекстXML)
	
	Результат = Новый Структура;
	Результат.Вставить("ЭлементыСУказаннымИменем", Новый Соответствие);
	Результат.Вставить("ЭлементыСУказаннымЗаголовком", Новый Соответствие);
	
	Если НЕ ЗначениеЗаполнено(ТекстXML) Тогда
		Возврат Результат;
	КонецЕсли;	
	
	XML = Новый ЧтениеXML;
    XML.УстановитьСтроку(ТекстXML);
    XML.Прочитать();

	Пока XML.Прочитать() Цикл
		//Сообщить("Имя = " + XML.Имя + ", ");
		
		ИмяУзла = XML.Имя;
		
		Если XML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ИмяУзла = "FormField" Тогда
				ЗаголовокЭлемента = "";
				ИмяЭлемента = "";
				Пока XML.ПрочитатьАтрибут() Цикл
					Если XML.Имя = "name" Тогда
						ИмяЭлемента = XML.Значение;
					ИначеЕсли XML.Имя = "title" Тогда
						ЗаголовокЭлемента = XML.Значение;
					КонецЕсли;	
				КонецЦикла;
				
				
				Если ЗначениеЗаполнено(ЗаголовокЭлемента) И ЗначениеЗаполнено(ИмяЭлемента) Тогда
					ДанныеЭлемента = Новый Структура;
					ДанныеЭлемента.Вставить("ИмяЭлемента", ИмяЭлемента);
					ДанныеЭлемента.Вставить("ЗаголовокЭлемента", ЗаголовокЭлемента);
					Результат.ЭлементыСУказаннымИменем.Вставить(ИмяЭлемента, ДанныеЭлемента);
					Результат.ЭлементыСУказаннымЗаголовком.Вставить(ЗаголовокЭлемента, ДанныеЭлемента);
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	

	XML.Закрыть();	
	
	Возврат Результат;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ТабличныйДокументИзДвоичныхДанныхПоток(ДвДанные)
	
	ТабДок = Новый ТабличныйДокумент;
    Поток = ДвДанные.ОткрытьПотокДляЧтения();
    ТабДок.Прочитать(Поток);
    Поток.Закрыть();
	
	Возврат ТабДок;
	
КонецФункции	

&НаКлиенте
Функция ОкнаДляКоторыхНеНужноОтключатьОбновлениеТекстаРедактирования()
	
	Результат = Новый Соответствие;
	Результат.Вставить(НРег("Редактирование выбранных полей"), Истина);
	
	Возврат Результат;
	
КонецФункции	

#КонецОбласти

#Область Настройки

#Область СохранениеНастроек

&НаСервере
Процедура СохранитьНастройки()
	
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("НастройкиВыгрузки", Истина);
	Настройки = ТекущиеОбщиеНастройки(ДопПараметры);
	
	ХранилищеОбщихНастроек.Сохранить(ПолучитьИДСохраненияОбщихНастроек(Объект.РежимСамотестирования, Объект.ВерсияПоставки, ЭтоРежимОбученияСервер()), , Настройки);
	
	Если Объект.СлужебныеПараметры.Свойство("НастройкиВидимостиКнопокКоманднойПанелиРедактора") Тогда
		ХранилищеОбщихНастроек.Сохранить(ПолучитьИДСохраненияВидимостиКнопокКоманднойПанели(), , Объект.СлужебныеПараметры.НастройкиВидимостиКнопокКоманднойПанелиРедактора);
	КонецЕсли;	 
	
КонецПроцедуры

#КонецОбласти

#Область ВосстановлениеНастроек

&НаКлиенте
Процедура ЗапускВРежимеКоманднойСтроки()
	#Если НЕ ВебКлиент Тогда
	
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;	 
	
	СтрокаПараметров = СокрЛП(ПараметрЗапуска);
	
	//СтрокаПараметров = "StartFeaturePlayer;VAParams=C:\Temp\VAParams.json";
	
	Если ПустаяСтрока(СтрокаПараметров) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЭтоРежимОбучения() Тогда 
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЗначениеПараметраЗапуска("StartFeaturePlayer", Ложь) И НЕ ЗначениеПараметраЗапуска("GetStepsCache", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПараметровНрег = НРег(СтрокаПараметров);
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров(СтрокаПараметров);
	НастройкиОперСистемы = ПрочитатьПеременныеСреды();

	ПеременныеСреды = МодульОбщегоНазначенияVA().ПеременныеСреды();
	ТекПеременныеСреды = УбратьИзПеременныхСредыСекретныеЗначения(ПеременныеСреды);
	ЗаписатьЛогВЖРИнформация("ПеременныеСреды", ЗаписатьОбъектJSON(ТекПеременныеСреды));
	
	КаталогПроекта = ЗначениеПараметраЗапуска("workspaceRoot", Неопределено);
	
	Если НЕ ПустаяСтрока(КаталогПроекта) Тогда
		Объект.КаталогПроекта = КаталогПроекта;
	КонецЕсли; 
	
	ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(СтруктураПараметров);
	ПутьКОбработке = ПолучитьПутьКОбработкеКлиент();
	
	StartFeaturePlayer = ЗначениеПараметраЗапуска("StartFeaturePlayer", Ложь);
		
	Если StartFeaturePlayer = Истина Тогда
		Объект.ЗапускИзКоманднойСтроки = Истина;
		Объект.СохранятьКонтекстыПередВыполнениемШагов = Ложь;
		
		ИмяФайла = ПолучитьЗначениеПараметра(СтруктураПараметров, "VAParams");
		Если ИмяФайла = Неопределено Тогда
			ИмяФайла = ПолучитьЗначениеПараметра(СтруктураПараметров, "VBParams");
		КонецЕсли;	 
		Если ИмяФайла = Неопределено Тогда
			ТекстОшибки = Локализовать("Не найден путь к файлу JSON. Параметр: VAParams.");
			СообщитьПользователю(ТекстОшибки);
			ЗаписатьЛогВЖРОшибка("ЗапускВРежимеКоманднойСтроки", ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
			ТекстОшибки = ПодставитьПараметрыВСтроку(Локализовать("Файл <%1> не существует."), ИмяФайла);
			СообщитьПользователю(ТекстОшибки);
			ЗаписатьЛогВЖРОшибка("ЗапускВРежимеКоманднойСтроки", ТекстОшибки);
			Возврат;
		КонецЕсли;	

		НастройкиИзФайла = ПрочитатьОбщиеНастройкиИзФайла(ИмяФайла);	
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЭтоLinuxКлиент", ЭтоLinux());
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманднойСтроки", СтруктураПараметров);
		ДополнительныеПараметры.Вставить("ПлоскаяСтруктураПараметровЗапуска", СтруктураПараметровЗапуска());
		
		ИспользоватьКомпонентуVanessaExtДоЗагрузкиПараметров = Объект.ИспользоватьКомпонентуVanessaExt;
		
		ЗагрузитьНастройкиНаСервере(НастройкиИзФайла, НастройкиОперСистемы, ДополнительныеПараметры);
		ЗагрузитьГлобальныеПеременныеИзДанныхНастроек(НастройкиИзФайла);
		
		Если Объект.ИспользоватьРедакторVanessaEditor И НЕ ЗначениеПараметраЗапуска("SPPR", Ложь) И НЕ РедакторБылПроинициализирован Тогда
			Объект.ИспользоватьРедакторVanessaEditor = Ложь;
		КонецЕсли;	 
		
		Если ЗначениеЗаполнено(Объект.ИмяФайлаВнешнихКомандФреймворка) Тогда			
			ПодключитьОбработчикОжидания("ПроверкаВнешнихКоманд", 1);
		КонецЕсли;  
													
		// добавим базовые библиотеки, если они не указаны
		ДобавитьСтандартнуюБиблиотекуЕслиНеобходимо();
		
		ЗнКаталогВыгрузкиAllureБазовый = Объект.КаталогВыгрузкиAllureБазовый;
		Если ЗначениеЗаполнено(ЗнКаталогВыгрузкиAllureБазовый) Тогда
			Объект.КаталогВыгрузкиAllureБазовый = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогВыгрузкиAllureБазовый));
			Файл = Новый Файл(ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогВыгрузкиAllureБазовый));
			Если Не ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя) Тогда		
				СоздатьКаталогКомандаСистемы(Файл.ПолноеИмя);
			КонецЕсли;	 
			
			ЗнКаталогВыгрузкиAllureБазовый = ПолучитьКаталогОтчетаAllure();
			
			Файл = Новый Файл(ЗнКаталогВыгрузкиAllureБазовый);
			
			ОчиститьСодержимоеКаталога(Файл.ПолноеИмя, "*.xml");
			ОчиститьСодержимоеКаталога(Файл.ПолноеИмя, "*.json");
			ФайлПроверкаСуществования = Новый Файл(Файл.ПолноеИмя);
			Если НЕ ФайлСуществуетКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя) Тогда
				СоздатьКаталогКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя);
				ФайлПроверкаСуществования = Новый Файл(ФайлПроверкаСуществования.ПолноеИмя);
				Если НЕ ФайлСуществуетКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя) Тогда
					СообщитьПользователю(ПодставитьПараметрыВСтроку(
						Локализовать("Не получилось создать каталог для отчета Allure: %1"),
						ЗнКаталогВыгрузкиAllureБазовый
					));
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			Объект.КаталогВыгрузкиAllure = ЗнКаталогВыгрузкиAllureБазовый;
			ОпределилиКаталогAllure = Истина;
		КонецЕсли;
		
		Если Объект.ЗаписьВидеоПроцентУскорения = 0 Тогда
			Объект.ЗаписьВидеоПроцентУскорения = 25;		
		КонецЕсли;
		
		ЗнВыгрузитьPIDTestManager = ПолучитьЗначениеПараметра(НастройкиИзФайла, "ВыгрузитьPIDTestManager");
		Если ЗнВыгрузитьPIDTestManager = Истина Тогда
			ВычислитьPIDЭтогоСеанса("");
			ИмяФайлаPIDTestManager = ПолучитьЗначениеПараметра(НастройкиИзФайла, "ИмяФайлаPIDTestManager");
			
			Если ЗначениеЗаполнено(ИмяФайлаPIDTestManager) Тогда
				ВременныйФайл = ПолучитьИмяВременногоФайла("txt");
				ЗТ = Новый ЗаписьТекста(ВременныйФайл, "UTF-8",, Истина); 
				ЗТ.ЗаписатьСтроку(PIDЭтогоСеанса); 
				ЗТ.Закрыть();
				ПереместитьФайлКомандаСистемы(ВременныйФайл, ИмяФайлаPIDTestManager);
			КонецЕсли;	 
		КонецЕсли;

		ЗнКлиентыТестирования = ПолучитьЗначениеПараметра(НастройкиИзФайла, "КлиентыТестирования");
		Если ЗначениеЗаполнено(ЗнКлиентыТестирования) Тогда
			Для Каждого ПараметрыКлиентаТестирования Из ЗнКлиентыТестирования Цикл
				ПрочитатьДанныеКлиентовТестирования(ПараметрыКлиентаТестирования);
			КонецЦикла;	
		КонецЕсли;	 
		
		ЗнКаталогИсполняемогоФайла = ПолучитьЗначениеПараметра(НастройкиИзФайла, "КаталогИсполняемогоФайла");
		Если ЗначениеЗаполнено(ЗнКаталогИсполняемогоФайла) Тогда
			ЗнКаталогИсполняемогоФайла = ДополнитьСлешВПуть(ЗнКаталогИсполняемогоФайла);
			ТекКаталогПрограммы = ДополнитьСлешВПуть(КаталогПрограммы());
			Если Нрег(ТекКаталогПрограммы) <> Нрег(ЗнКаталогИсполняемогоФайла) Тогда
				ПоказатьПредупреждение(Неопределено, "Ожидали запуск сеанса на платформе:" + Символы.ПС + ЗнКаталогИсполняемогоФайла
				+ Символы.ПС + Символы.ПС + "Текущая версия платформы:" + Символы.ПС + ТекКаталогПрограммы);
				Возврат;	  
			КонецЕсли;	 
		КонецЕсли;
		
		ОстановкаНаПроблемномШаге = ПолучитьЗначениеПараметра(НастройкиИзФайла, "ОстановкаНаПроблемномШаге");
		Если ОстановкаНаПроблемномШаге = Истина Тогда
			НомерСтрокиПроблемногоШага = ПолучитьЗначениеПараметра(НастройкиИзФайла, "НомерСтрокиПроблемногоШага");
		Иначе
			ОстановкаНаПроблемномШаге = Ложь;
		КонецЕсли;
		
		ОжидаемаяВерсияVA = ПолучитьЗначениеПараметра(НастройкиИзФайла, "ОжидаемаяВерсияИнструменаТестирования");
		Если ЗначениеЗаполнено(ОжидаемаяВерсияVA) Тогда
			ТекВерсия = ПолучитьВерсиюОбработкиКлиент();
			ТекВерсия = СокрЛП(СтрЗаменить(ТекВерсия, "ver", ""));
			Если НЕ ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(ТекВерсия, ОжидаемаяВерсияVA) Тогда
				ПоказатьПредупреждение(Неопределено, "Необходимо использовать версию Vanessa Automation <" + ОжидаемаяВерсияVA + "> или выше."
				+ Символы.ПС + "Текущая версия <" + ТекВерсия + ">.");
				Возврат;	  
			КонецЕсли;	 
		КонецЕсли;
		
		ВыполнитьСценарии = Объект.ВыполнитьСценарииПослеЗагрузкиФич;
		ВыполнитьСценарииСТекущегоШага = ПолучитьЗначениеПараметра(НастройкиИзФайла, "ВыполнитьСценарииСТекущегоШага");
		
		ПараметрыЗапускВРежимеКоманднойСтроки = Новый Структура;
		ПараметрыЗапускВРежимеКоманднойСтроки.Вставить("ВыполнитьСценарии", ВыполнитьСценарии);
		ПараметрыЗапускВРежимеКоманднойСтроки.Вставить("ВыполнитьСценарииСТекущегоШага", ВыполнитьСценарииСТекущегоШага);
		ПараметрыЗапускВРежимеКоманднойСтроки.Вставить("НастройкиИзФайла", НастройкиИзФайла);
		
		Если ИспользоватьКомпонентуVanessaExtДоЗагрузкиПараметров = Ложь И Объект.ИспользоватьКомпонентуVanessaExt Тогда
			//Значит надо подключить компоненту
			ДопПараметрыВыполнитьПодключениеВнешнейКомпоненты = Новый Структура;
			ДопПараметрыВыполнитьПодключениеВнешнейКомпоненты.Вставить("ИмяОбработчика", "ЗапускВРежимеКоманднойСтрокиПродолжение");
			ДопПараметрыВыполнитьПодключениеВнешнейКомпоненты.Вставить("Подключение", Истина);
			ДопПараметрыВыполнитьПодключениеВнешнейКомпоненты.Вставить("КоличествоПопытокУстановкиКомпоненты", 0);
			
			Если НЕ БылаВыполненаТихаяУстановкаКомпоненты Тогда
				Если ЗначениеПараметраЗапуска("QuietInstallVanessaExt", Ложь)
					ИЛИ ЗначениеПараметраЗапуска("ТихаяУстановкаVanessaExt", Ложь) Тогда
					ТихаяУстановкаКомпонент(ДопПараметрыВыполнитьПодключениеВнешнейКомпоненты);
					Возврат;
				КонецЕсли;
			КонецЕсли;	
			
			ВыполнитьПодключениеВнешнейКомпоненты(ДопПараметрыВыполнитьПодключениеВнешнейКомпоненты);
		Иначе
			ПодключитьОбработчикОжидания("ЗапускВРежимеКоманднойСтрокиПродолжение", 0.1, Истина);
		КонецЕсли;	 
		
	ИначеЕсли ЗначениеПараметраЗапуска("GetStepsCache", Ложь) Тогда
		ИмяФайлаПараметров = ПолучитьЗначениеПараметра(СтруктураПараметров, "VAParams");
		Если ИмяФайлаПараметров = Неопределено Тогда
			ИмяФайлаПараметров = ПолучитьЗначениеПараметра(СтруктураПараметров, "VBParams");
		КонецЕсли;	 
		Если ИмяФайлаПараметров = Неопределено Тогда
			ВызватьИсключение Локализовать("Не найден путь к файлу JSON. Параметр: VAParams."); 
		КонецЕсли;

		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.ОткрытьФайл(ИмяФайлаПараметров);			
		Попытка
			НастройкиИзФайла = ПрочитатьJSON(ЧтениеJSON);
		Исключение
			НастройкиИзФайла = Неопределено;
		КонецПопытки;
		ЧтениеJSON.Закрыть();
		
		Если НастройкиИзФайла = Неопределено Тогда
			ВызватьИсключение Локализовать("Ошибка чтения структуры JSON. Пропускаем чтение.");
		КонецЕсли; 
		
		ВерсияСнипетов = ТекущаяДата();
		ВстроенныеБиблиотеки = ВстроенныеБиблиотеки();
		
		ТаблицаИзвестныхStepDefinition.Очистить();
		
		БылиОшибки = Ложь;
		МассивИменФайловКоторыеСовпалиСКеш = Новый Соответствие;
		КаталогФич = "";
		
		СтруктураПараметров.Вставить("ПодключатьОбработкиПринудительно", Истина);
		
		Объект.КаталогФич = "";
		ПодключитьСнипетыИзВнутреннихФорм(ВстроенныеБиблиотеки, ВерсияСнипетов, БылиОшибки, СтруктураПараметров,
		  МассивИменФайловКоторыеСовпалиСКеш, МассивИменКонтекстовОбработок, ТаблицаКонтекстовОбработок, КаталогФич);
		  	
		КаталогTemplateEpfUF = НастройкиИзФайла.КаталогTemplateEpfUF;
		МассивФайловTemplateEpfUF = Новый Массив;
		НайденныеФайлы = НайтиФайлы(КаталогTemplateEpfUF, "*", Истина);
		Для Каждого Файл Из НайденныеФайлы Цикл
			Если Файл.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;	 
			
			ДанныеФайла = Новый Структура;
			ДанныеФайла.Вставить("Имя", Файл.Имя);
			ДанныеФайла.Вставить("ДвоичныеДанные", Новый ДвоичныеДанные(Файл.ПолноеИмя));
			МассивФайловTemplateEpfUF.Добавить(ДанныеФайла);
		КонецЦикла;	
		 
		ЗТ = Новый ЗаписьТекста(НастройкиИзФайла.ИмяФайлаКеш, "UTF-8",, Ложь); 
		ЗТ.Записать(ДанныеСлужебногоКешаСтрокой(МассивФайловTemplateEpfUF)); 
		ЗТ.Закрыть();
		
		ПрекратитьРаботуСеансаVanessaAutomation();
	КонецЕсли;	 
	
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ЗапускВРежимеКоманднойСтрокиПродолжение()
	
	Если НЕ ЭтоРежимОбучения() И НЕ БылиВыполненыНастройкиПриЗаписиИнтерактивнойСправки
			И ЗначениеПараметраЗапуска("ВыполнитьНастройкиПриЗаписиИнтерактивнойСправки", Ложь) Тогда
		БылиВыполненыНастройкиПриЗаписиИнтерактивнойСправки = Истина;
		
		Если ЗначениеПараметраЗапуска("СкрытьПанельРазделов", Ложь) Тогда
			КодыКлавиш = Новый Массив;
			КодыКлавиш.Добавить(17);
			КодыКлавиш.Добавить(16);
			КодыКлавиш.Добавить(192);
			ТекстJSON = ЗаписатьОбъектJSON(КодыКлавиш);
			ВнешняяКомпонентаДляСкриншотов.НачатьВызовЭмуляцияНажатияКлавиши(ОписаниеПустогоОбработчика(2), ТекстJSON);
		КонецЕсли;
		
		Если ЗначениеПараметраЗапуска("УстановитьВерсиюОбработкиНаРелизную", Ложь) Тогда
			ЭтаФорма.Заголовок = ПолучитьВерсиюОбработкиКлиент(Истина);
		КонецЕсли;	
		
		ПодключитьОбработчикОжидания("ЗапускВРежимеКоманднойСтрокиПродолжение", 1, Истина);
		Возврат;
		
	КонецЕсли;	
	
	Если ПараметрыЗапускВРежимеКоманднойСтроки.ВыполнитьСценарии = Истина Тогда
		ДопПараметры = Новый Структура;
		ЗагрузитьФичи(ДопПараметры);
		Если ДопПараметры.Свойство("ОшибкаЗагрузкиФич") Тогда
			Если ДопПараметры.ОшибкаЗагрузкиФич Тогда
				ТекстОшибки = Локализовать("Неизвестная ошибка.");
				Если ДопПараметры.Свойство("ТекстОшибки") Тогда
					ТекстОшибки = ДопПараметры.ТекстОшибки;
				КонецЕсли;	 
				
				ВыгрузитьСтатусВыполненияСценариевВФайл(Ложь, 
					ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев));
				ЗаписатьЛогВЖРОшибкаСервер("VanessaAutomation.ВыполнениеСценариев", ТекстОшибки);
				ПрекратитьРаботуСеансаVanessaAutomation();
			КонецЕсли;	 
		КонецЕсли;	 
	ИначеЕсли ПараметрыЗапускВРежимеКоманднойСтроки.ВыполнитьСценарииСТекущегоШага = Истина Тогда	
		НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Истина;
		ТекЗначение = ПолучитьЗначениеПараметра(
			ПараметрыЗапускВРежимеКоманднойСтроки.НастройкиИзФайла, "НомерСтрокиДляЗапускаСТекущегоШагаСценария");
		Если ЗначениеЗаполнено(ТекЗначение) Тогда
			НомерСтрокиСценарияПереданныйИзвне = Число(ТекЗначение);
		КонецЕсли;	
		ЗагрузитьФичи();
		
		Если НЕ ОбработчикЗапуститьСценарийСоСтрокиПрисланнойИзвнеПодключен Тогда
			ПодключитьОбработчикОжидания("ЗапуститьСценарийСоСтрокиПрисланнойИзвне", 0.1, Истина);
		КонецЕсли;	 
	Иначе	
		ЗагрузитьСценарии = ПолучитьЗначениеПараметра(ПараметрыЗапускВРежимеКоманднойСтроки.НастройкиИзФайла, "ЗагрузитьСценарии");
		Если ЗагрузитьСценарии = Истина Тогда
			ЗагрузитьФичи();
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ВосстановитьНастройкиКлиент()
	
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыполнениеСценариевБезОткрытияФормы Тогда
		Возврат;
	КонецЕсли;	 
	
	СтрокаЗапуска = СокрЛП(ПараметрЗапуска);
	Если Не ПустаяСтрока(СтрокаЗапуска) Тогда
		СтруктураПараметров = ПолучитьСтруктуруПараметров(СтрокаЗапуска);
		
		Если НЕ Объект.ВыполнениеСценарияИзОбработкиОповещения Тогда
			DisableLoadTestClientsTable = ЗначениеПараметраЗапуска("DisableLoadTestClientsTable", Неопределено);
			Если DisableLoadTestClientsTable = Неопределено Тогда
				DisableLoadTestClientsTable = ЗначениеПараметраЗапуска("NoLoadTestClientsTable", Ложь); //уставревшее занчение параметра
			КонецЕсли;	 
			Если DisableLoadTestClientsTable <> Истина Тогда
				ВосстановитьНастройкиИзХранилища("ДанныеКлиентовТестирования", "ДанныеКлиентовТестирования"); 
			КонецЕсли;	 
		КонецЕсли;	 
		
		StartFeaturePlayer = ЗначениеПараметраЗапуска("StartFeaturePlayer", Ложь);
		Если StartFeaturePlayer = Истина Тогда
			ЭтоЗапускВРежимеКоманднойСтроки = Истина;
			// Значит мы в режиме ЗапускВРежимеКоманднойСтроки
			// настройки будут загружены, если это не запрещено через другие параметры запуска
		КонецЕсли;	
		
		DisableLoadConfig = ЗначениеПараметраЗапуска("DisableLoadConfig", Неопределено);
		Если DisableLoadConfig = Неопределено Тогда
			DisableLoadConfig = ЗначениеПараметраЗапуска("NoLoadConfig", Ложь); //уставревшее занчение параметра
		КонецЕсли;	 
		Если DisableLoadConfig = Истина Тогда
			ЭтоЗапускВРежимеКоманднойСтроки    = Истина;
			ЭтоЗапускВРежимеБезЗагрузкиНастроек = Истина;
			// значит нам сообщили, что не надо загружать настройки
			Возврат;
		КонецЕсли;	
		
		DisableFeatureLoadOnOpenForm = ЗначениеПараметраЗапуска("DisableFeatureLoadOnOpenForm", Неопределено);
		Если DisableFeatureLoadOnOpenForm = Неопределено Тогда
			DisableFeatureLoadOnOpenForm = ЗначениеПараметраЗапуска("NoFeatureLoadOnOpenForm", Ложь);
		КонецЕсли;	 
		Если DisableFeatureLoadOnOpenForm = Истина Тогда
			Объект.ЗагрузкаФичПриОткрытии = "Не загружать";
		КонецЕсли;	
		
		LibsOnly = ПолучитьЗначениеПараметра(СтруктураПараметров, "LibsOnly");
		Если LibsOnly = Истина Тогда
			ЭтоЗапускВРежимеКоманднойСтроки    = Истина;
			ЭтоЗапускВРежимеБезЗагрузкиНастроек = Истина;
			Объект.DebugLog                    = Истина;
			// Значит нам сообщили, что не надо загружать настройки, но надо добавить стандартные библиотеки
			
			Если Не ПустаяСтрока(Объект.КаталогИнструментов) Тогда
				Если ДобавлятьСтандартнуюБиблиотеку(Объект.ВерсияПоставки) Тогда
					Объект.КаталогиБиблиотек.Добавить(ОбъединитьПути(Объект.КаталогИнструментов, "features", "Libraries"));
				КонецЕсли;	 
				Объект.СписокТеговИсключение.Добавить("IgnoreOnCIMainBuild");
			КонецЕсли;	 
			
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ЗапрашиватьПодтверждениеПриЗакрытии) Тогда
		ЗапрашиватьПодтверждениеПриЗакрытии = "Да";
	КонецЕсли;
		 
КонецПроцедуры

&НаСервере
Процедура ВосстановитьВсеНастройкиСервер(ДопПараметры)
	
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;	
	
	ВосстановитьНастройки(ДопПараметры);
	ВосстановитьВсеНастройкиИзХранилища(ДопПараметры);
	ВосстановитьНедавноЗагруженныеФичи(ДопПараметры,ДопПараметры.НедавноЗагруженныеФичи);
	Если ЗначениеДополнительногоПараметраСервер("ВЭтомСеансеИдётОбучение") = Истина Тогда
		ДопПараметры.НедавноЗагруженныеФичи = Новый Массив;
	КонецЕсли;	 
	
	Если ДопПараметры.ВыполнениеСценариевБезОткрытияФормы Тогда
		Возврат;
	КонецЕсли;	 
	
	СкопироватьНедавноЗагруженныеФичиВИнтерфейс(ДопПараметры.НедавноЗагруженныеФичи);
	ВосстановитьВидимостьКнопокКоманднойПанели(ДопПараметры);

КонецПроцедуры

&НаСервере
Функция ПолучитьИДСохраненияВидимостиКнопокКоманднойПанели()
	ПрефиксИнструмента = ПолучитьПрефиксИнструмента(Объект.РежимСамотестирования, Объект.ВерсияПоставки, ЭтоРежимОбученияСервер());
	Ключ = ПрефиксИнструмента + "ВидимостьКнопокКоманднойПанели";
	Возврат Ключ;
КонецФункции	 

&НаСервере
Процедура ВосстановитьВидимостьКнопокКоманднойПанели(ДопПараметры)
	
	ВЭтомСеансеИдётОбучение = ЗначениеДополнительногоПараметраСервер("ВЭтомСеансеИдётОбучение");
	Если ВЭтомСеансеИдётОбучение = Истина Тогда
		Возврат;
	КонецЕсли;	 
	
	СохраненноеЗначение = ХранилищеОбщихНастроек.Загрузить(ПолучитьИДСохраненияВидимостиКнопокКоманднойПанели());
	ДопПараметры.Вставить("НастройкиВидимостиКнопокКоманднойПанелиРедактора", СохраненноеЗначение);
	
	Если ТипЗнч(СохраненноеЗначение) = Тип("Массив") Тогда
		Для Каждого ИмяКнопки Из СохраненноеЗначение Цикл
			Попытка
				Элементы[ИмяКнопки].ПоложениеВКоманднойПанели = Вычислить("ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю");
			Исключение
			КонецПопытки;
		КонецЦикла;	 
	КонецЕсли;	 
КонецПроцедуры 

&НаСервере
Процедура ВосстановитьНастройки(ДопПараметры)
	
	НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = ДопПараметры.НадоВыполнитьСценарийСоСтрокиПереданнойИзвне;
	
	НадоСохранитьНастройки = Ложь;
	Если ДопПараметры.ВыполнениеСценариевБезОткрытияФормы Тогда
		Настройки = Неопределено;
	Иначе	
		Настройки = ХранилищеОбщихНастроек.Загрузить(ПолучитьИДСохраненияОбщихНастроек(Объект.РежимСамотестирования, Объект.ВерсияПоставки, ЭтоРежимОбученияСервер()));
		Если Настройки = Неопределено Тогда
			Настройки = ХранилищеОбщихНастроек.Загрузить(ПолучитьИДДляОбщегоСохраненияНастроек_Old());
			НадоСохранитьНастройки = Истина;
		КонецЕсли;
		Если Настройки = Неопределено Тогда
			ДопПараметры.Вставить("ЭтоПервыйЗапускVA", Истина);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ЗначениеДополнительногоПараметраСервер("ВЭтомСеансеИдётОбучение") = Истина Тогда
		Настройки = Неопределено;
	КонецЕсли;	 
	
	// Загрузка значений по умолчанию
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыЗапуска", ДопПараметры.ПараметрыЗапуска);
	ОбщиеНастройки = Объект().СтруктураОбщихНастроек();
	ОбщиеНастройки.Вставить("НадоВыполнитьСценарийСоСтрокиПереданнойИзвне", НадоВыполнитьСценарийСоСтрокиПереданнойИзвне);
	
	Если НЕ ДопПараметры.ВыполнениеСценариевБезОткрытияФормы Тогда
		ОбработкаНастроекЧтобыНеЗатерлисьРанееПереданныеЗначения(ОбщиеНастройки);
	КонецЕсли;
	
	Если ДопПараметры.Свойство("РазделительПути") Тогда
		ДополнительныеПараметры.Вставить("РазделительПути", ДопПараметры.РазделительПути);
	КонецЕсли;	 
	Если ДопПараметры.Свойство("ЭтоLinux") Тогда
		ДополнительныеПараметры.Вставить("ЭтоLinuxКлиент", ДопПараметры.ЭтоLinux);
	КонецЕсли;	 
	
	ДополнительныеПараметры.Вставить("ПлоскаяСтруктураПараметровЗапуска", ДопПараметры.ПлоскаяСтруктураПараметровЗапуска);
	ЗагрузитьНастройкиНаСервере(ОбщиеНастройки,, ДополнительныеПараметры);
	
	Если Не ЗначениеЗаполнено(Объект.ЯзыкГенератораGherkin) Тогда
		Объект.ЯзыкГенератораGherkin = "ru";
	КонецЕсли;
	
	Если ДопПараметры.ЭтоЗапускВРежимеБезЗагрузкиНастроек Тогда
		//Значит мы загружаем настройки по умолчанию, но не загружаем настройки пользователя.
		УстановитьПараметрыПриЗапускеИзКоманднойСтроки(ДопПараметры);
		Возврат;
	КонецЕсли;	
	
	Если ДопПараметры.ВыполнениеСценариевБезОткрытияФормы Тогда
		Если ЗначениеЗаполнено(ДопПараметры.КаталогФичДоЗагрузкиНастроек) Тогда
			Объект.КаталогФич = ДопПараметры.КаталогФичДоЗагрузкиНастроек;
		КонецЕсли;	 
		Если ТипЗнч(ДопПараметры.НастройкиПриЗапускеБезОткрытияФормы) = Тип("Структура") Тогда
			Настройки = ДопПараметры.НастройкиПриЗапускеБезОткрытияФормы;
		Иначе	
			Настройки = Новый Структура;
		КонецЕсли;	 
		Настройки.Вставить("ОбновлятьСтатистикуВДереве", Ложь);
		Настройки.Вставить("ОбновлятьДеревоПриНачалеВыполненияСценария", Ложь);
	КонецЕсли;	 
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		Настройки.Вставить("НадоВыполнитьСценарийСоСтрокиПереданнойИзвне", НадоВыполнитьСценарийСоСтрокиПереданнойИзвне);
		ОбработкаНастроекЧтобыНеЗатерлисьРанееПереданныеЗначения(Настройки);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗапуска", ДопПараметры.ПараметрыЗапуска);
		Если ДопПараметры.Свойство("РазделительПути") Тогда
			ДополнительныеПараметры.Вставить("РазделительПути", ДопПараметры.РазделительПути);
		КонецЕсли;	 
		Если ДопПараметры.Свойство("ЭтоLinux") Тогда
			ДополнительныеПараметры.Вставить("ЭтоLinuxКлиент", ДопПараметры.ЭтоLinux);
		КонецЕсли;	 
		ДополнительныеПараметры.Вставить("ПлоскаяСтруктураПараметровЗапуска", ДопПараметры.ПлоскаяСтруктураПараметровЗапуска);
		ЗагрузитьНастройкиНаСервере(Настройки,, ДополнительныеПараметры);
		
		Если ПустаяСтрока(Объект.КомандаСделатьСкриншот) Тогда
			Если ДопПараметры.ЭтоLinux Тогда
				Объект.КомандаСделатьСкриншот = "import -window root";
			Иначе
				Объект.КомандаСделатьСкриншот = """C:\Program Files (x86)\IrfanView\i_view32.exe"" /capture=1 /convert=";
			КонецЕсли;
		КонецЕсли;

		// настройки записи видео
		Если Настройки.Свойство("ЗаписьВидео") И Настройки.ЗаписьВидео.Свойство("ЗаписьВидеоКомандаНачатьЗаписьВидео") Тогда
			Настройки.ЗаписьВидео.Свойство("ЗаписьВидеоКомандаНачатьЗаписьВидео", Объект.ЗаписьВидеоКомандаНачатьЗаписьВидео);
		Иначе
			Объект.ЗаписьВидеоКомандаНачатьЗаписьВидео = 
				"""C:\Program Files (x86)\VideoLAN\VLC\vlc.exe"" screen://  -I rc --rc-quiet --rc-host=127.0.0.1:8082 --nommx :screen-mouse-image=""<screenmouseimage>"" :screen-fps=<fps> :screen-width=<screenwidth> :screen-height=<screenheight> :screen-top=0 :screen-left=0 :screen-caching=100 :sout=#transcode{vcodec=mp4v,vb=400,fps=<fps>,scale=1,width=<screenwidth>,height=<screenheight>,acodec=none}:duplicate{dst=std{access=file,mux=mp4,dst=<dst>}}";
		КонецЕсли;
		// "C:\Program Files (x86)\VideoLAN\VLC\vlc.exe" screen://  -I rc --rc-quiet --rc-host=127.0.0.1:8082 --nommx
		// :screen-mouse-image="<screenmouseimage>" :screen-fps=<fps> :screen-width=<screenwidth>
		// :screen-height=<screenheight> :screen-top=0 :screen-left=0 :screen-caching=100 :sout=#transcode{vcodec=mp4v,vb=400,fps=<fps>,scale=1,width=<screenwidth>,height=<screenheight>,acodec=none}:duplicate{dst=std{access=file,mux=mp4,dst=<dst>}}

		Если Объект.ЗагрузкаФичПриОткрытии <> "Не загружать" Тогда
		// Если значение равно "Не загружать", значит вызывающая система сообщила, что не надо загружать фичи при открытии.
			Настройки.Свойство("ЗагрузкаФичПриОткрытии", Объект.ЗагрузкаФичПриОткрытии);
			Если Не ЗначениеЗаполнено(Объект.ЗагрузкаФичПриОткрытии) Тогда
				Объект.ЗагрузкаФичПриОткрытии = "Загружать";
			КонецЕсли;
		КонецЕсли;

		Если Объект.ДополнительныеПараметры = Неопределено Тогда
			Объект.ДополнительныеПараметры = Новый Структура;
		КонецЕсли;

		ВерсияVA = Неопределено;
		Настройки.Свойство("ВерсияVA", ВерсияVA);
		Если НЕ ЗначениеЗаполнено(ВерсияVA) И НЕ ДопПараметры.ВыполнениеСценариевБезОткрытияФормы Тогда
			СброситьКешИзвестныхStepDefinitionСервер();
			НадоСохранитьНастройки = Истина;
		КонецЕсли;

		Если Настройки.Свойство("ТегTreeВключенПоУмолчанию") Тогда
			Настройки.Свойство("ТегTreeВключенПоУмолчанию", Объект.ТегTreeВключенПоУмолчанию);
		КонецЕсли;

		Если НадоСохранитьНастройки Тогда
			СохранитьНастройки();
		КонецЕсли;	 
		
	Иначе	// значит это первый запуск VA
		Объект.ГенерироватьУФ = Истина;
		Если СокрЛП(Объект.КаталогИнструментов) <> "" Тогда
			Если ДобавлятьСтандартнуюБиблиотеку(Объект.ВерсияПоставки) Тогда
				Объект.КаталогиБиблиотек.Добавить(Объект.КаталогИнструментов + ПолучитьРазделительПути() + "features" 
					+ ПолучитьРазделительПути() + "Libraries");
			КонецЕсли;	 
			Объект.СписокТеговИсключение.Добавить("IgnoreOnCIMainBuild");
		КонецЕсли;	 
		
		Если ДопПараметры.ЭтоLinux Тогда
			Объект.КомандаСделатьСкриншот = "import -window root";
		Иначе
			Объект.КомандаСделатьСкриншот = """C:\Program Files (x86)\IrfanView\i_view32.exe"" /capture=1 /convert=";
		КонецЕсли;
		
		Если Объект.ЗагрузкаФичПриОткрытии <> "Не загружать" Тогда
			// Если значение равно "Не загружать", значит вызывающая система сообщила, что не надо загружать фичи при открытии.
			Если Не ЗначениеЗаполнено(Объект.ЗагрузкаФичПриОткрытии) Тогда
				Объект.ЗагрузкаФичПриОткрытии = "Загружать";
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЕсли;

	УстановитьПараметрыПриЗапускеИзКоманднойСтроки(ДопПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаНастроекЧтобыНеЗатерлисьРанееПереданныеЗначения(Настройки)
	Если НЕ Объект.ВыполнениеСценарияИзОбработкиОповещения И НЕ Настройки.НадоВыполнитьСценарийСоСтрокиПереданнойИзвне Тогда
		ЗагрузитьНастройкуКаталогФич = ЗначениеДополнительногоПараметраСервер("ЗагрузитьНастройкуКаталогФич");
		Если ЗагрузитьНастройкуКаталогФич <> Ложь Тогда
			Если Настройки.Свойство("КаталогФич") Тогда
				Объект.КаталогФич = Настройки.КаталогФич;
			КонецЕсли;	 
		КонецЕсли;	 
		
	ИначеЕсли Настройки.Свойство("КаталогФич") Тогда
		// чтобы не затёрлось переданное значение из внешней системы
		Настройки.Удалить("КаталогФич");
	КонецЕсли;
КонецПроцедуры 

&НаСервере
Процедура УстановитьПараметрыПриЗапускеИзКоманднойСтроки(ДопПараметры)
	
	StartFeaturePlayer = Ложь;
	Если ДопПараметры.ПараметрыЗапуска.Свойство("StartFeaturePlayer") Тогда
		StartFeaturePlayer = ДопПараметры.ПараметрыЗапуска.StartFeaturePlayer;
	КонецЕсли;	 
	
	Если StartFeaturePlayer И НЕ ДопПараметры.ЗапускИзСППР Тогда
		Объект.ОбновлятьСтатистикуВДереве = Ложь;
		Объект.ОбновлятьДеревоПриНачалеВыполненияСценария = Ложь;
		ЗапрашиватьПодтверждениеПриЗакрытии = "Нет";
	КонецЕсли;	 
	
	Если Объект.РежимСамотестирования ИЛИ
		(StartFeaturePlayer И НЕ ДопПараметры.ЗапускИзСППР И НЕ ЭтоРежимОбученияСервер())
		Тогда
		// Нам не нужно использовать редактор при работе на CI.
		// В режиме самотестирования по умолчанию открывается дерево шагов.
		Объект.ИспользоватьРедакторVanessaEditor = Ложь;
	КонецЕсли;	 
	
КонецПроцедуры 

&НаСервере
Процедура ВосстановитьВсеНастройкиИзХранилища(ДопПараметры)
	
	Если ДопПараметры.ВыполнениеСценариевБезОткрытияФормы Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ Объект.ВыполнениеСценарияИзОбработкиОповещения И НЕ ДопПараметры.НадоВыполнитьСценарийСоСтрокиПереданнойИзвне Тогда
		ЗагрузитьНастройкуКаталогФич = ЗначениеДополнительногоПараметраСервер("ЗагрузитьНастройкуКаталогФич");
		
		Если ЗагрузитьНастройкуКаталогФич <> Ложь Тогда
			ВосстановитьНастройкиИзХранилища("КаталогФич", "КаталогФич"); 
		КонецЕсли;	 
		
		ЗагружатьНастройкиКлиентовТестирования = Истина;
		Если ТипЗнч(ДопПараметры.ПараметрыЗапуска) = Тип("Структура") Тогда
			Если ДопПараметры.ПараметрыЗапуска.Свойство("DisableLoadTestClientsTable") И ДопПараметры.ПараметрыЗапуска.DisableLoadTestClientsTable Тогда
				ЗагружатьНастройкиКлиентовТестирования = Ложь;
			КонецЕсли;	 
		КонецЕсли;	 
		Если ЗагружатьНастройкиКлиентовТестирования Тогда
			ВосстановитьНастройкиИзХранилища("ДанныеКлиентовТестирования", "ДанныеКлиентовТестирования"); 
		КонецЕсли;	 
		ВосстановитьНастройкиИзХранилища("КаталогиБиблиотек", "КаталогиБиблиотек"); 
	КонецЕсли;
	
	Для Каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
		СтрокаДанныеКлиентовТестирования.Подключен = Ложь;
		СтрокаДанныеКлиентовТестирования.PIDКлиентаТестирования = 0;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиИзХранилища(Знач Ключ, Знач ИмяРеквизита)

	ПрефиксИнструмента = ПолучитьПрефиксИнструмента(Объект.РежимСамотестирования, Объект.ВерсияПоставки, ЭтоРежимОбученияСервер());
	Ключ = ПрефиксИнструмента + Ключ;

	СохраненноеЗначение = ХранилищеОбщихНастроек.Загрузить(ПолучитьИДСохраненияОбщихНастроек(Объект.РежимСамотестирования, Объект.ВерсияПоставки, ЭтоРежимОбученияСервер()), Ключ);
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		Если ИмяРеквизита = "КаталогФич"
				Или ИмяРеквизита = "КаталогиБиблиотек" Тогда

			Если ТипЗнч(СохраненноеЗначение) = Тип("ТаблицаЗначений") Тогда
				Объект[ИмяРеквизита].Загрузить(СохраненноеЗначение);
			Иначе
				Объект[ИмяРеквизита] = СохраненноеЗначение;
			КонецЕсли;

		ИначеЕсли ИмяРеквизита = "ДанныеКлиентовТестирования"
				Или ИмяРеквизита = "ТаблицаИзвестныхStepDefinition"
				Или ИмяРеквизита = "КешStepDefinition"
				Или ИмяРеквизита = "ДанныеАллюрМеток" 
				Или ИмяРеквизита = "НастройкиДругогоДвижкаTTS" Тогда

			Если ТипЗнч(СохраненноеЗначение) = Тип("ТаблицаЗначений") Тогда
				ЭтаФорма[ИмяРеквизита].Загрузить(СохраненноеЗначение);
			Иначе
				ЭтаФорма[ИмяРеквизита] = СохраненноеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаНастроек

&НаКлиенте
Процедура ВыгрузитьНастройкиВФайлЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПолноеИмяФайла = Результат[0];

	ЗаписатьНастройкиВФайл(ПолноеИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкиВФайл(ИмяФайла)
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("НастройкиВыгрузки", Истина);
	
	Настройки = ТекущиеОбщиеНастройки(ДопПараметры);
	Настройки.Вставить("ВыполнитьСценарии", Истина);
	Настройки.Вставить("ЗавершитьРаботуСистемы", Истина);
	Настройки.КлиентТестирования.Вставить("ЗакрытьTestClientПослеЗапускаСценариев", Истина);
	Настройки.Вставить("ВыгружатьСтатусВыполненияСценариевВФайл", Истина);
	Настройки.Вставить("ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев", "./BuildStatus.log");

	ТекущийЯзык = Объект.ЯзыкГенератораGherkin;

	СтрокаНастроек = ПодготовитьОбщиеНастройкиКВыгрузке(Настройки, ТекущийЯзык);

	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла,,,, Символы.ПС);
	ЗаписьТекста.Записать(СтрокаНастроек);
	ЗаписьТекста.Закрыть();

КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ДобавитьКлючНастройкиКВыгрузке(ЗаписьJSON, ИмяКлюча, СтрокаНастроек, НаДругомЯзыке, ТаблицаИменКлючей)
	ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлюча);
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	Для каждого СтрокаСтруктуры Из СтрокаНастроек.Значение Цикл
		ИмяКлючаСтруктуры = ПолучитьПравильноеИмяПоля(СтрокаСтруктуры.Ключ, ТаблицаИменКлючей, НаДругомЯзыке, Истина);
		ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлючаСтруктуры);
		Если ТипЗнч(СтрокаСтруктуры.Значение) = Тип("Массив") Тогда
			ЗаписатьJSON(ЗаписьJSON, СтрокаСтруктуры.Значение);
		ИначеЕсли ТипЗнч(СтрокаСтруктуры.Значение) = Тип("СписокЗначений") Тогда 
			ЗаписьJSON.ЗаписатьНачалоМассива();
			Для каждого СтрокаСписка Из СтрокаСтруктуры.Значение Цикл
				ЗаписьJSON.ЗаписатьЗначение(СтрокаСписка.Значение);
			КонецЦикла;
			ЗаписьJSON.ЗаписатьКонецМассива();
		Иначе
			ЗаписьJSON.ЗаписатьЗначение(СтрокаСтруктуры.Значение);
		КонецЕсли;
	КонецЦикла;
	ЗаписьJSON.ЗаписатьКонецОбъекта();	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПравильноеИмяПоля(Знач ИмяПоля, ТаблицаСоответствияИмен, НаДругомЯзыке = Истина, ДляЗаписи = Ложь)
	Если ДляЗаписи Тогда
		СтрокаСИменемПоля = ТаблицаСоответствияИмен.Найти(ИмяПоля, "ИмяRu");
		Если СтрокаСИменемПоля <> Неопределено Тогда
			ИмяПоля = СтрокаСИменемПоля.ИмяEn;
		КонецЕсли;
	Иначе
		СтрокаСИменемПоля = ТаблицаСоответствияИмен.Найти(ИмяПоля, "ИмяEn");
		Если СтрокаСИменемПоля <> Неопределено Тогда
			ИмяПоля = СтрокаСИменемПоля.ИмяRu;
		КонецЕсли;
	КонецЕсли;
	Возврат ИмяПоля;
КонецФункции

&НаСервереБезКонтекста
Функция НастройкиДляУдаления()
	
	Настройки = Новый Массив;
	
	Настройки.Добавить("StartFeaturePlayer");
	Настройки.Добавить("ВыгрузитьPIDTestManager");
	Настройки.Добавить("КаталогИсполняемогоФайла");
	Настройки.Добавить("ИмяФайлаPIDTestManager");
	Настройки.Добавить("ИмяФайлаВнешнихКомандФреймворка");
	Настройки.Добавить("ДелатьСообщенияТранслитом");
	Настройки.Добавить("КаталогИнструментов");
	Настройки.Добавить("СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки");
	Настройки.Добавить("ЗагрузитьСценарии");
	Настройки.Добавить("ВыполнитьСценарииСТекущегоШага");
	Настройки.Добавить("НомерСтрокиДляЗапускаСТекущегоШагаСценария");
	Настройки.Добавить("ЯзыкГенератораGherkin");
	Настройки.Добавить("КлиентыТестирования");
	Настройки.Добавить("ИмяСборки");
	
	Настройки.Добавить("КаталогOutputAllure");
	Настройки.Добавить("КаталогOutputAllureБазовый");
	Настройки.Добавить("КаталогOutputjUnit");
	Настройки.Добавить("КаталогOutputCucumberJson");
	Настройки.Добавить("КаталогOutputИнструкцияHTML");
	Настройки.Добавить("КаталогOutputИнструкцияMarkdown");
	Настройки.Добавить("КаталогOutputИнструкцияВидео");
	Настройки.Добавить("КаталогOutputСкриншоты");
	
	Возврат Настройки;
	
КонецФункции	

&НаСервереБезКонтекста
Процедура УдалитьУстаревшиеИСлужебныеНастройки(Настройки)
	
	НастройкиДляУдаления = НастройкиДляУдаления();
	Для Каждого ИмяНастройки Из НастройкиДляУдаления Цикл
		Если Настройки.Свойство(ИмяНастройки) Тогда
			Настройки.Удалить(ИмяНастройки);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьОбщиеНастройкиКВыгрузке(Настройки, ТекущийЯзык)
	
	УдалитьУстаревшиеИСлужебныеНастройки(Настройки);

	НаДругомЯзыке = Ложь;
	Если ТекущийЯзык <> "ru" Тогда
		НаДругомЯзыке = Истина;
		ТаблицаИменКлючей = ИменаКлючейОбщихНастроек();
		ТаблицаИменЗначений = ИменаЗначенийОбщихНастроек();
	Иначе	
		ТаблицаИменКлючей = ТаблицаИменаКлючейОбщихНастроек();
		ТаблицаИменЗначений = ТаблицаИменаКлючейОбщихНастроек();
	КонецЕсли;
	
	Если НаДругомЯзыке И Настройки.Свойство("ОтчетAllure") И Настройки.ОтчетAllure.Свойство("ДанныеАллюрМеток")
		И Настройки.ОтчетAllure.ДанныеАллюрМеток.Количество() > 0 Тогда
		Массив = Новый Массив;
		Для Каждого Элем Из Настройки.ОтчетAllure.ДанныеАллюрМеток Цикл
			Массив.Добавить(Новый Структура("RegularExpression, LabelName, Value, Pattern", Элем.РегулярноеВыражение, Элем.ИмяМетки, Элем.Значение, Элем.Шаблон));
		КонецЦикла;	 
		Настройки.ОтчетAllure.ДанныеАллюрМеток = Массив;
	ИначеЕсли НаДругомЯзыке И Настройки.Свойство("ЗаписьВидео") И Настройки.ЗаписьВидео.Свойство("НастройкиДругогоДвижкаTTS")
		И Настройки.ЗаписьВидео.НастройкиДругогоДвижкаTTS.Количество() > 0 Тогда
		Массив = Новый Массив;
		Для Каждого Элем Из Настройки.ЗаписьВидео.НастройкиДругогоДвижкаTTS Цикл
			Массив.Добавить(Новый Структура("Name, Value", Элем.Имя, Элем.Значение));
		КонецЦикла;	 
		Настройки.ЗаписьВидео.НастройкиДругогоДвижкаTTS = Массив;
	КонецЕсли;	 
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);			
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);		
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	Для каждого СтрокаНастроек Из Настройки Цикл
		
		ИмяКлючаОриг = СтрокаНастроек.Ключ;
		ИмяКлюча = ПолучитьПравильноеИмяПоля(СтрокаНастроек.Ключ, ТаблицаИменКлючей, НаДругомЯзыке, Истина);
		ИмяЗначения = ПолучитьПравильноеИмяПоля(СтрокаНастроек.Значение, ТаблицаИменЗначений, НаДругомЯзыке, Истина);
		
		Если ТипЗнч(СтрокаНастроек.Значение) = Тип("СписокЗначений") Тогда 
			Если СтрокаНастроек.Значение.Количество() > 0 Тогда 
				ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлюча);
				ЗаписьJSON.ЗаписатьНачалоМассива();
				Для каждого СтрокаСписка Из СтрокаНастроек.Значение Цикл
					ЗаписьJSON.ЗаписатьЗначение(СтрокаСписка.Значение);
				КонецЦикла;
				ЗаписьJSON.ЗаписатьКонецМассива();
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаНастроек.Значение) = Тип("Структура") Тогда
			// Выполнение сценариев
			// Настройки клиентов тестирования
			Если ИмяКлючаОриг = "ВыполнениеСценариев" 
				Или ИмяКлючаОриг = "КлиентТестирования" Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлюча);
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				Для Каждого СтрокаСтруктуры Из СтрокаНастроек.Значение Цикл
					
					ИмяКлючаСтруктуры = ПолучитьПравильноеИмяПоля(СтрокаСтруктуры.Ключ, ТаблицаИменКлючей, НаДругомЯзыке, Истина);
					ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлючаСтруктуры);
					Если ТипЗнч(СтрокаСтруктуры.Значение) <> Тип("Массив") Тогда
						ЗаписьJSON.ЗаписатьЗначение(СтрокаСтруктуры.Значение);
						Продолжить;
					КонецЕсли;
					
					// массив
					ЗаписьJSON.ЗаписатьНачалоМассива();
					Для Каждого ЭлементМассива Из СтрокаСтруктуры.Значение Цикл
					  	ЗаписьJSON.ЗаписатьНачалоОбъекта();
						Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
							Для Каждого ЭлементСтруктуры Из ЭлементМассива Цикл
								ИмяКлюча = ПолучитьПравильноеИмяПоля(ЭлементСтруктуры.Ключ, ТаблицаИменКлючей, НаДругомЯзыке, Истина);
								ИмяЗначения = ПолучитьПравильноеИмяПоля(ЭлементСтруктуры.Значение, ТаблицаИменЗначений, НаДругомЯзыке, Истина);
								ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлюча);
								ЗаписьJSON.ЗаписатьЗначение(ИмяЗначения);
							КонецЦикла;					
						КонецЕсли;
					  	ЗаписьJSON.ЗаписатьКонецОбъекта();
					КонецЦикла;
					ЗаписьJSON.ЗаписатьКонецМассива();
					
				КонецЦикла;
				ЗаписьJSON.ЗаписатьКонецОбъекта();
			КонецЕсли;
			// Отчет Allure
			Если ИмяКлючаОриг = "ОтчетAllure" Тогда
				ДобавитьКлючНастройкиКВыгрузке(ЗаписьJSON, ИмяКлюча, СтрокаНастроек, НаДругомЯзыке, ТаблицаИменКлючей);
			КонецЕсли;
			// Отчет JUnit
			Если ИмяКлючаОриг = "ОтчетJUnit" Тогда
				ДобавитьКлючНастройкиКВыгрузке(ЗаписьJSON, ИмяКлюча, СтрокаНастроек, НаДругомЯзыке, ТаблицаИменКлючей);
			КонецЕсли;
			// Отчет Cucumber
			Если ИмяКлючаОриг = "ОтчетCucumber" Тогда
				ДобавитьКлючНастройкиКВыгрузке(ЗаписьJSON, ИмяКлюча, СтрокаНастроек, НаДругомЯзыке, ТаблицаИменКлючей);
			КонецЕсли;
			// Отчет СППР
			Если ИмяКлючаОриг = "ОтчетСППР" Тогда
				ДобавитьКлючНастройкиКВыгрузке(ЗаписьJSON, ИмяКлюча, СтрокаНастроек, НаДругомЯзыке, ТаблицаИменКлючей);
			КонецЕсли;
			// Инструкция HTML
			Если ИмяКлючаОриг = "ИнструкцияHTML" Тогда
				ДобавитьКлючНастройкиКВыгрузке(ЗаписьJSON, ИмяКлюча, СтрокаНастроек, НаДругомЯзыке, ТаблицаИменКлючей);
			КонецЕсли;
			// Инструкция Markdown
			Если ИмяКлючаОриг = "ИнструкцияMarkdown" Тогда
				ДобавитьКлючНастройкиКВыгрузке(ЗаписьJSON, ИмяКлюча, СтрокаНастроек, НаДругомЯзыке, ТаблицаИменКлючей);
			КонецЕсли;
			// Запись видео
			Если ИмяКлючаОриг = "ЗаписьВидео" Тогда
				ДобавитьКлючНастройкиКВыгрузке(ЗаписьJSON, ИмяКлюча, СтрокаНастроек, НаДругомЯзыке, ТаблицаИменКлючей);
			КонецЕсли;
			// SikuliXServer
			Если ИмяКлючаОриг = "SikuliXServer" Тогда
				ДобавитьКлючНастройкиКВыгрузке(ЗаписьJSON, ИмяКлюча, СтрокаНастроек, НаДругомЯзыке, ТаблицаИменКлючей);
			КонецЕсли;
			// SikuliXServer
			Если ИмяКлючаОриг = "ДымовыеТесты" Тогда
				ДобавитьКлючНастройкиКВыгрузке(ЗаписьJSON, ИмяКлюча, СтрокаНастроек, НаДругомЯзыке, ТаблицаИменКлючей);
			КонецЕсли;
		Иначе 
			ЗаписьJSON.ЗаписатьИмяСвойства(ИмяКлюча);
			Если ИмяКлючаОриг = "КаталогФич" И ПустаяСтрока(СтрокаНастроек.Значение) Тогда
				ЗаписьJSON.ЗаписатьЗначение(Настройки.КаталогПроекта);
			Иначе
				ЗаписьJSON.ЗаписатьЗначение(СтрокаНастроек.Значение);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();		
	СтрокаНастроек = ЗаписьJSON.Закрыть();
	
	Возврат СтрокаНастроек;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаНастроек

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ВыбранныеФайлы[0];	
	
	ЗагрузитьНастройкиИзФайлаСлужебный(ИмяФайла, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьТекущиеНастройкиСФайломЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
	
	#Если НЕ ВебКлиент Тогда
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайлаВнешнихНастроек = ВыбранныеФайлы[0];	
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаВнешнихНастроек,"UTF-8");
	ТекстФайлаВнешнихНастроек = Текст.Прочитать();
	Текст.Закрыть();
	Файл = Новый Файл(ИмяФайлаВнешнихНастроек);
	
	ИмяВременногоФайлаНастроек = ПолучитьИмяВременногоФайла("json");
	ЗаписатьНастройкиВФайл(ИмяВременногоФайлаНастроек);
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяВременногоФайлаНастроек,"UTF-8");
	ТекстФайлаВнутреннихНастроек = Текст.Прочитать();
	Текст.Закрыть();
	
	VanessaTabs.diff(
		ТекстФайлаВнутреннихНастроек,
		Локализовать("Текущие настройки"),
		ИмяВременногоФайлаНастроек,
		ТекстФайлаВнешнихНастроек,
		Файл.Имя,
		ИмяФайлаВнешнихНастроек,
		Локализовать("Сравнение настроек с файлом"),
		0,
		Истина, Истина);
		
		
	МодульРаботаСGit().УстановитьРежимОтображенияРазличийУТекущейВкладки();
	Если Элементы.ФункциональностьЗакладки.ТекущаяСтраница <> Элементы.ГруппаЗапускТестов Тогда
		Элементы.ФункциональностьЗакладки.ТекущаяСтраница = Элементы.ГруппаЗапускТестов;
		НазначитьГорячиеКлавишиКнопкамКоманднойПанелиРедактора(Истина);
	КонецЕсли;	 
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСДругимФичаФайломЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
	
	#Если НЕ ВебКлиент Тогда
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВыбранногоФичаФайла = ВыбранныеФайлы[0];	
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяВыбранногоФичаФайла,"UTF-8");
	ТекстВыбранногоФичаФайла = Текст.Прочитать();
	Текст.Закрыть();
	Файл = Новый Файл(ИмяВыбранногоФичаФайла);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ЗТ = Новый ЗаписьТекста(ИмяВременногоФайла, "UTF-8",, Ложь); 
	ТекущийТекст = ПолучитьVanessaEditor().getContent();
	ЗТ.Записать(ТекущийТекст); 
	ЗТ.Закрыть();
	
	
	VanessaTabs.diff(
		ТекущийТекст,
		Локализовать("Текущий файл") + Новый УникальныйИдентификатор,
		ИмяВременногоФайла,
		ТекстВыбранногоФичаФайла,
		Файл.Имя,
		ИмяВыбранногоФичаФайла + Новый УникальныйИдентификатор,
		ПодставитьПараметрыВСтроку(Локализовать("Сравнение с %1"), Файл.Имя),
		0,
		Истина, Истина);
		
		
	МодульРаботаСGit().УстановитьРежимОтображенияРазличийУТекущейВкладки();
	Если Элементы.ФункциональностьЗакладки.ТекущаяСтраница <> Элементы.ГруппаЗапускТестов Тогда
		Элементы.ФункциональностьЗакладки.ТекущаяСтраница = Элементы.ГруппаЗапускТестов;
		НазначитьГорячиеКлавишиКнопкамКоманднойПанелиРедактора(Истина);
	КонецЕсли;	 
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьОбщиеНастройкиИзФайла(ПолноеИмяФайла)
	
	Возврат МодульОбщегоНазначенияVA().ПрочитатьОбщиеНастройкиИзФайла(ПолноеИмяФайла);
	
КонецФункции

&НаСервере
Функция ЗначениеПараметраКоманднойСтроки(СтруктураПараметровКоманднойСтроки, ИмяКлюча, Значение)
	
	Если СтруктураПараметровКоманднойСтроки = Неопределено Тогда
		Возврат Значение; 
	КонецЕсли;	 
	
	ПредыдущийТипЗначения = ТипЗнч(Значение);
	
	Попытка
		Если СтруктураПараметровКоманднойСтроки.Свойство(ИмяКлюча) Тогда
			Значение = СтруктураПараметровКоманднойСтроки[ИмяКлюча];
			Если ПредыдущийТипЗначения = Тип("Массив") И ТипЗнч(Значение) = Тип("Строка") Тогда
				Значение = РазложитьСтрокуВМассивПодстрок(Значение, ",");
			КонецЕсли;	 
		КонецЕсли;	 
	Исключение
		ЗаписатьЛогВЖРОшибкаСервер("ЧтениеКлючаНастроекКоманднойСтроки", ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Значение; 
	
КонецФункции	 

&НаСервере
Процедура ОбработатьКлючЗначениеНастройки(КлючЗначение, Настройки, ТаблицаИменКлючей, НаДругомЯзыке, ПлоскаяСтруктураПараметровЗапуска, КлючиКоторыеНеНадоЗагружатьВПодчиненныхУзлах)
	ИмяКлюча = ПолучитьПравильноеИмяПоля(НРег(КлючЗначение.Ключ), ТаблицаИменКлючей, НаДругомЯзыке);
	Попытка
		Значение = КлючЗначение.Значение;
		Если ПлоскаяСтруктураПараметровЗапуска.Свойство(ИмяКлюча) Тогда
			ТипЗначения = ТипЗнч(ПлоскаяСтруктураПараметровЗапуска[ИмяКлюча]);
			Если ТипЗначения = Тип("Массив") И ТипЗнч(Значение) = Тип("Строка") Тогда
				Значение = РазложитьСтрокуВМассивПодстрок(Значение, ",");
			КонецЕсли;
		КонецЕсли;
		
		Настройки.Вставить(ИмяКлюча, Значение);
		КлючиКоторыеНеНадоЗагружатьВПодчиненныхУзлах.Вставить(ИмяКлюча, Истина);
	Исключение
		ЗаписатьЛогВЖРОшибкаСервер("ЧтениеКлючаНастроекКоманднойСтроки", ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиНаСервере(Настройки, НастройкиОперСистемы = Неопределено, ДополнительныеПараметры)
	
	ЗагружатьНастройкиКлиентовТестирования = Истина;
	ТолькоКлиентыТестирования = Ложь;
	Если ДополнительныеПараметры = Неопределено Тогда 
		ДополнительныеПараметры = Новый Структура;
	ИначеЕсли ДополнительныеПараметры.Свойство("ПараметрыЗапуска") 
			И ДополнительныеПараметры.ПараметрыЗапуска.Свойство("DisableLoadTestClientsTable") И ДополнительныеПараметры.ПараметрыЗапуска.DisableLoadTestClientsTable Тогда
		ЗагружатьНастройкиКлиентовТестирования = Ложь;
	ИначеЕсли ДополнительныеПараметры.Свойство("ТолькоКлиентыТестирования") Тогда
		ТолькоКлиентыТестирования = ДополнительныеПараметры.ТолькоКлиентыТестирования;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ЭтоLinuxСервер", ЭтоLinux());
	
	ТекущийЯзык = "ru";	
	Если Настройки.Свойство("Lang") Тогда
		ТекущийЯзык = Настройки.lang;
	КонецЕсли;
		
	НаДругомЯзыке = Ложь;
	Если ТекущийЯзык <> "ru" Тогда
		НаДругомЯзыке = Истина;
	КонецЕсли;
	ТаблицаИменКлючей = ИменаКлючейОбщихНастроек(Истина);
	ТаблицаИменЗначений = ИменаЗначенийОбщихНастроек();
	
	// Дополним настройки ОС в Настройки из json.
	// Настройки ОС имеют приоритет.
	
	ПлоскаяСтруктураПараметровЗапуска = ДополнительныеПараметры.ПлоскаяСтруктураПараметровЗапуска;
	
	КлючиКоторыеНеНадоЗагружатьВПодчиненныхУзлах = Новый Структура;
	Если ТипЗнч(НастройкиОперСистемы) = Тип("Структура") Тогда
		Для Каждого КлючЗначение Из НастройкиОперСистемы Цикл
			ОбработатьКлючЗначениеНастройки(КлючЗначение, Настройки, ТаблицаИменКлючей,
				НаДругомЯзыке, ПлоскаяСтруктураПараметровЗапуска, КлючиКоторыеНеНадоЗагружатьВПодчиненныхУзлах);
		КонецЦикла;	 
	КонецЕсли;	 
	
	//Отдельно идёт загрузка КаталогаПроекта
	Для каждого СтрокаНастроек Из Настройки Цикл
		ИмяКлюча = ПолучитьПравильноеИмяПоля(НРег(СтрокаНастроек.Ключ), ТаблицаИменКлючей, НаДругомЯзыке);
		Если ИмяКлюча = "каталогпроекта" Тогда
			Значение = СтрокаНастроек.Значение;
			Объект.КаталогПроекта = ОбработатьСпецсимволыПриЧтенииНастроек(СтрокаНастроек.Значение, Объект.КаталогПроекта, Объект.КаталогИнструментов, ДополнительныеПараметры);
		КонецЕсли;	 
	КонецЦикла;	 
	
	//Обработка настроек переданных в командной строке
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("СтруктураПараметровКоманднойСтроки") Тогда
		СтруктураПараметровКоманднойСтроки = ДополнительныеПараметры.СтруктураПараметровКоманднойСтроки;
	Иначе	
		СтруктураПараметровКоманднойСтроки = Неопределено;
	КонецЕсли;	 
	
	Если СтруктураПараметровКоманднойСтроки <> Неопределено Тогда
		Для Каждого КлючЗначение Из СтруктураПараметровКоманднойСтроки Цикл
			ОбработатьКлючЗначениеНастройки(КлючЗначение, Настройки, ТаблицаИменКлючей,
				НаДругомЯзыке, ПлоскаяСтруктураПараметровЗапуска, КлючиКоторыеНеНадоЗагружатьВПодчиненныхУзлах);
		КонецЦикла;
	КонецЕсли;
	
	//Исправление опечаток
	Если Настройки.Свойство("ПоказыватьСтрокиПодсценариевVanessaEdittor") Тогда
		Настройки.Вставить("ПоказыватьСтрокиПодсценариевVanessaEditor", Настройки.ПоказыватьСтрокиПодсценариевVanessaEdittor);
		Настройки.Удалить("ПоказыватьСтрокиПодсценариевVanessaEdittor");
	КонецЕсли;
	Если Настройки.Свойство("ВыполнениеСценариев") И Настройки.ВыполнениеСценариев.Свойство("ВыполнятьШагиАссинхронно") Тогда
		Настройки.ВыполнениеСценариев.Вставить("ВыполнятьШагиАсинхронно", Настройки.ВыполнениеСценариев.ВыполнятьШагиАссинхронно);
		Настройки.ВыполнениеСценариев.Удалить("ВыполнятьШагиАссинхронно");
	КонецЕсли;
	
	Для каждого СтрокаНастроек Из Настройки Цикл
		
		Значение = СтрокаНастроек.Значение;
		ИмяКлюча = ПолучитьПравильноеИмяПоля(НРег(СтрокаНастроек.Ключ), ТаблицаИменКлючей, НаДругомЯзыке);

		Значение = ЗначениеПараметраКоманднойСтроки(СтруктураПараметровКоманднойСтроки, ИмяКлюча, Значение);
		
		Если ТолькоКлиентыТестирования Тогда
			Если ИмяКлюча <> "клиенттестирования" Тогда
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если Объект.ЗапускИзКоманднойСтроки Тогда

			Если ТипЗнч(Значение) = Тип("Строка") Тогда
				Значение = ОбработатьСпецсимволыПриЧтенииНастроек(Значение, Объект.КаталогПроекта, Объект.КаталогИнструментов, ДополнительныеПараметры);
			КонецЕсли;

			// ВыполнитьСценарии
			Если ИмяКлюча = "выполнитьсценарии" Тогда
				Объект.ВыполнитьСценарииПослеЗагрузкиФич = ЗначениеСтрокиВБулево(Значение);
				Продолжить;
			КонецЕсли;

			// ЗавершитьРаботуСистемы	
			Если ИмяКлюча = "завершитьработусистемы" Тогда		
				Объект.ЗавершитьРаботуСистемыПослеВыполненияВсехСценариев = ЗначениеСтрокиВБулево(Значение);
				Продолжить;
			КонецЕсли;

		КонецЕсли;
		// Конец блок
		
		Если ИмяКлюча = "version" Или ИмяКлюча = "versionva"
				Или ИмяКлюча = "версияva" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяКлюча = "загрузкафичприоткрытии" 
				И Объект.ЗагрузкаФичПриОткрытии = "Не загружать" Тогда
			// Если значение равно "Не загружать", значит вызывающая система сообщила, что не надо загружать фичи при открытии.
			Продолжить;
		КонецЕсли;	 

		Если ИмяКлюча = "каталогинструментов" Тогда
			// Параметр должен заполниться сам при открытии.
			Продолжить;
		КонецЕсли;	 
		
		Если ИмяКлюча = "дополнительныепараметры" 
				И ТипЗнч(Значение) = Тип("Структура") Тогда			
			Если ТипЗнч(Объект.ДополнительныеПараметры) <> Тип("Структура") Тогда
				Объект.ДополнительныеПараметры = Новый Структура;
			КонецЕсли;	 
			
			Для Каждого Элем Из Значение Цикл
				Объект.ДополнительныеПараметры.Вставить(Элем.Ключ, Элем.Значение);
			КонецЦикла;	 
			
			
			Продолжить;
		ИначеЕсли ИмяКлюча = "дополнительныепараметры"  Тогда
			Продолжить;
		ИначеЕсли ИмяКлюча = "globalvars"  Тогда
			Продолжить;
		ИначеЕсли ИмяКлюча = "отборкаталогов"  Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяКлюча = "клиентытестирования" Тогда
			// TODO: Вывести загрузку клиентов тестирования в отдельную процедуру для сохранения совместимости #476
			// имя ключа пометить устаревшим.
			Продолжить;
		КонецЕсли;
		
		Если ИмяКлюча = "способснятияскриншотоввнешнейкомпонентой" Тогда		
			Объект.СпособСнятияСкриншотовВнешнейКомпонентой = Значение;
			Продолжить;
		КонецЕсли;

		Если ИмяКлюча = "загрузкафичприоткрытии" И ТипЗнч(Значение) = Тип("Число") Тогда		
			Попытка
				Объект.ЗагрузкаФичПриОткрытии = Элементы.ЗагрузкаФичПриОткрытии.СписокВыбора[Значение].Значение;
			Исключение
				Объект.ЗагрузкаФичПриОткрытии = "Загружать";
			КонецПопытки;
			
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(Значение) = Тип("Строка")
			Или ТипЗнч(Значение) = Тип("Булево") Или ТипЗнч(Значение) = Тип("Число") Тогда
			
			Если ТипЗнч(Значение) = Тип("Строка") Тогда
				Значение = ОбработатьСпецсимволыПриЧтенииНастроек(Значение, Объект.КаталогПроекта, Объект.КаталогИнструментов, ДополнительныеПараметры);
			КонецЕсли;	 
			
			Если ИмяКлюча = "имясборки" Тогда
				Объект.ИмяТекущейСборки = Значение;
				Продолжить;
			ИначеЕсли ИмяКлюча = "версияплатформы" 
					ИЛИ ИмяКлюча = "выводитьсообщениявфайл" Тогда
				Продолжить;
			ИначеЕсли ИмяКлюча = "каталогutputallure" 
					ИЛИ ИмяКлюча = "каталогoutputallure" Тогда
				Объект.КаталогВыгрузкиAllure = Значение;
				Продолжить;
			ИначеЕсли ИмяКлюча = "каталогoutputallureбазовый" Тогда
				Объект.КаталогВыгрузкиAllureБазовый = Значение;
				Продолжить;
			ИначеЕсли ИмяКлюча = "каталогoutputjunit" Тогда
				Объект.КаталогВыгрузкиJUnit = Значение;
				Продолжить;
			ИначеЕсли ИмяКлюча = "скриншотыjunit" Тогда
				Объект.СкриншотыjUnit = Значение;
				Продолжить;
			ИначеЕсли ИмяКлюча = "каталогoutputcucumberjson" Тогда
				Объект.КаталогВыгрузкиCucumberJson = Значение;
				Продолжить;
			ИначеЕсли ИмяКлюча = "каталогoutputскриншоты" Тогда
				Объект.КаталогВыгрузкиСкриншотов = Значение;
				Продолжить;
			ИначеЕсли ИмяКлюча = "lang" Тогда		
				Объект.ЯзыкГенератораGherkin = Значение;
				Продолжить;	
			ИначеЕсли ИмяКлюча = "каталогфич" Тогда		
				ЗагрузитьНастройкуКаталогФич = ЗначениеДополнительногоПараметраСервер("ЗагрузитьНастройкуКаталогФич");
				Если ЗагрузитьНастройкуКаталогФич = Ложь Тогда
					Продолжить;	
				КонецЕсли;	 
				
			КонецЕсли;
			
			Попытка
				Если Объект.Свойство(ИмяКлюча) Тогда
					Объект[ИмяКлюча] = Значение;
				КонецЕсли;	 
			Исключение
				ДополнительныеПараметры.Вставить(ИмяКлюча, Значение);
				
				СообщитьПользователюСеврер(ПодставитьПараметрыВСтрокуСервер(
					ЛокализоватьСервер("Информация: Параметр %1 не загружен."),
					ИмяКлюча
				));
			КонецПопытки;
		ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда 
			Попытка
				Объект[ИмяКлюча].Очистить();
			Исключение
				ДополнительныеПараметры.Вставить(ИмяКлюча, Значение);
				
				СообщитьПользователюСеврер(ПодставитьПараметрыВСтрокуСервер(
					ЛокализоватьСервер("Информация: Параметр %1 не загружен."),
					ИмяКлюча
				));
				Продолжить;
			КонецПопытки;
			Для каждого СтрокаМассива Из Значение Цикл
				Если ТипЗнч(СтрокаМассива) = Тип("Строка") Тогда 
					СтрокаМассива = ОбработатьСпецсимволыПриЧтенииНастроек(СтрокаМассива, Объект.КаталогПроекта, Объект.КаталогИнструментов, ДополнительныеПараметры);
				КонецЕсли;	
				Объект[ИмяКлюча].Добавить(СтрокаМассива);
			КонецЦикла;
		ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
						
			Для Каждого СтрокаСтруктуры Из Значение Цикл
				
				ЗначениеСтруктуры = СтрокаСтруктуры.Значение;
				КлючСтруктуры = ПолучитьПравильноеИмяПоля(НРег(СтрокаСтруктуры.Ключ), ТаблицаИменКлючей, НаДругомЯзыке);
				
				Если КлючиКоторыеНеНадоЗагружатьВПодчиненныхУзлах.Свойство(КлючСтруктуры) Тогда
					Продолжить;
				КонецЕсли;	 
				
				ЗначениеСтруктуры = ЗначениеПараметраКоманднойСтроки(СтруктураПараметровКоманднойСтроки, КлючСтруктуры, ЗначениеСтруктуры);
				
				Если ТолькоКлиентыТестирования Тогда
					Если КлючСтруктуры <> "данныеклиентовтестирования" Тогда
						Продолжить;
					КонецЕсли;	 
				КонецЕсли;	 
				
				Если КлючСтруктуры = "записьвидеоэмулироватьдвижениямышки" Тогда
					// Устаревший идентификатор
					Продолжить;
				КонецЕсли;	 
				
				Если ТипЗнч(ЗначениеСтруктуры) = Тип("Строка") Тогда
					
					ЗначениеСтруктуры = ОбработатьСпецсимволыПриЧтенииНастроек(ЗначениеСтруктуры, Объект.КаталогПроекта, Объект.КаталогИнструментов, ДополнительныеПараметры);
					
				ИначеЕсли ТипЗнч(ЗначениеСтруктуры) = Тип("Массив") Тогда
					Если КлючСтруктуры = "данныеаллюрметок" Тогда
						ДанныеАллюрМеток.Очистить();
						Для Каждого ЭлементМассив Из ЗначениеСтруктуры Цикл
							СтрокаДанныхМеток = ДанныеАллюрМеток.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаДанныхМеток, ЭлементМассив);
							Если ЭлементМассив.Свойство("LabelName") Тогда
								СтрокаДанныхМеток.ИмяМетки = ЭлементМассив.LabelName;
							КонецЕсли;	 
							Если ЭлементМассив.Свойство("RegularExpression") Тогда
								СтрокаДанныхМеток.РегулярноеВыражение = ЭлементМассив.RegularExpression;
							КонецЕсли;	 
							Если ЭлементМассив.Свойство("Value") Тогда
								СтрокаДанныхМеток.Значение = ЭлементМассив.Value;
							КонецЕсли;	 
						КонецЦикла;
						Продолжить;
					ИначеЕсли КлючСтруктуры = "настройкидругогодвижкаtts" Тогда
						НастройкиДругогоДвижкаTTS.Очистить();
						Для Каждого ЭлементМассив Из ЗначениеСтруктуры Цикл
							СтрокаДанныеНастроек = НастройкиДругогоДвижкаTTS.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаДанныеНастроек, ЭлементМассив);
							Если ЭлементМассив.Свойство("Name") Тогда
								СтрокаДанныеНастроек.Имя = ЭлементМассив.Name;
							КонецЕсли;	 
							Если ЭлементМассив.Свойство("Value") Тогда
								СтрокаДанныеНастроек.Значение = ЭлементМассив.Value;
							КонецЕсли;	 
						КонецЦикла;
						Продолжить;
					ИначеЕсли КлючСтруктуры = "записьвидеословарьзамен" Тогда 
						Объект.ЗаписьВидеоСловарьЗамен.Очистить();
						Для Каждого ЭлементМассив Из ЗначениеСтруктуры Цикл
							ЭлементМассив = ОбработатьСпецсимволыПриЧтенииНастроек(ЭлементМассив, Объект.КаталогПроекта, Объект.КаталогИнструментов, ДополнительныеПараметры);
							Объект.ЗаписьВидеоСловарьЗамен.Добавить(ЭлементМассив);
						КонецЦикла;
						Продолжить;
					ИначеЕсли КлючСтруктуры = "данныеклиентовтестирования" И ЗагружатьНастройкиКлиентовТестирования Тогда 						
						ОтборКлиентов = Новый Структура("Имя");
						Для Каждого ЭлементМассива Из ЗначениеСтруктуры Цикл
							Если ТипЗнч(ЭлементМассива) <> Тип("Структура") Тогда
								Продолжить;
							КонецЕсли;
							
							ДанныеКлиента = Новый Соответствие;
							Для каждого СтрокаСтруктуры Из ЭлементМассива Цикл
									
								ИмяКлюча = ПолучитьПравильноеИмяПоля(НРег(СтрокаСтруктуры.Ключ), ТаблицаИменКлючей, НаДругомЯзыке);
								ИмяЗначения = ПолучитьПравильноеИмяПоля(СтрокаСтруктуры.Значение, ТаблицаИменЗначений, НаДругомЯзыке);
								
								ИмяЗначения = ОбработатьСпецсимволыПриЧтенииНастроек(ИмяЗначения, Объект.КаталогПроекта, Объект.КаталогИнструментов, ДополнительныеПараметры);
								
								ДанныеКлиента.Вставить(ИмяКлюча, ИмяЗначения);
							КонецЦикла;
							СтрокаКлиента = Неопределено;
							ОтборКлиентов.Имя = ДанныеКлиента["имя"];
							Если ОтборКлиентов.Имя <> Неопределено Тогда
								НайденныеКлиенты = ДанныеКлиентовТестирования.НайтиСтроки(ОтборКлиентов);
								Если НайденныеКлиенты.Количество() > 0 Тогда
									СтрокаКлиента = НайденныеКлиенты[0];
								КонецЕсли;
							КонецЕсли;
							Если СтрокаКлиента = Неопределено Тогда
								СтрокаКлиента = ДанныеКлиентовТестирования.Добавить();
							КонецЕсли;
							Для Каждого КлючИЗначение Из ДанныеКлиента Цикл
								Попытка
									СтрокаКлиента[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
								Исключение
									СообщитьПользователюСеврер(ПодставитьПараметрыВСтрокуСервер(
										ЛокализоватьСервер("Информация: Параметр %1 не загружен."),
										КлючИЗначение.Ключ
									));
								КонецПопытки;
							КонецЦикла;
						КонецЦикла;
						Продолжить;
					КонецЕсли;
				
			КонецЕсли;
					
				Попытка
					Объект[КлючСтруктуры] = ЗначениеСтруктуры;
				Исключение
					ДополнительныеПараметры.Вставить(ИмяКлюча, Значение);
					
					СообщитьПользователюСеврер(ПодставитьПараметрыВСтрокуСервер(
						ЛокализоватьСервер("Информация: Параметр %1 не загружен."),
						КлючСтруктуры
					));
					
				КонецПопытки;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
			Попытка
				Объект[ИмяКлюча].ЗагрузитьЗначения(Значение.ВыгрузитьЗначения());
			Исключение
				СообщитьПользователюСеврер(ПодставитьПараметрыВСтрокуСервер(
					ЛокализоватьСервер("Информация: Параметр %1 не загружен."),
					ИмяКлюча
				));
			КонецПопытки;
		КонецЕсли;	
		
	КонецЦикла;
	
	Если Настройки.Свойство("ЗагрузкаФичПриОткрытии") Тогда
		//Чтобы преобразовать число к строке.
		Настройки.Вставить("ЗагрузкаФичПриОткрытии", Объект.ЗагрузкаФичПриОткрытии);
	КонецЕсли;
	
КонецПроцедуры

// Сделано для обратной совместимости, когда в значения выгружалось вместо true - Истина, 1, false - ...
&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеСтрокиВБулево(Знач Значение)
	
	Если ТипЗнч(Значение) = Тип("Булево") Тогда
	    Возврат Значение;	
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда 
		Если НРег(Значение) = "истина"
			Или Значение = "1"
			Или НРег(Значение) = "true" Тогда 
			Результат = Истина;
		ИначеЕсли НРег(Значение) = "ложь"
			Или Значение = "0"
			Или НРег(Значение) = "false" Тогда 
			Результат = Ложь;
		Иначе 
			Результат = СокрЛП(Значение);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда 
		Результат = Значение;
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
		Результат = Значение;
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		МассивПараметров = Новый Массив;
		Если ТипЗнч(Значение) = Тип("Строка") Тогда 
			МассивПараметров = РазложитьСтрокуВМассивПодстрок(Значение, ",");
		ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
			МассивПараметров = Значение;
		КонецЕсли;
		Результат = МассивПараметров;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбработатьСпецсимволыПриЧтенииНастроек(Знач Стр, Знач КаталогПроекта, Знач КаталогИнструментов, Знач ДополнительныеПараметры = Неопределено)
	Если Лев(Стр, 1) = "."  Тогда
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("РазделительПути") Тогда
			РазделительПути = ДополнительныеПараметры.РазделительПути;
		Иначе	
			РазделительПути = "/";
		КонецЕсли;	 
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ЭтоLinuxКлиент") Тогда
			ЭтоLinuxКлиент = ДополнительныеПараметры.ЭтоLinuxКлиент;
		Иначе	
			ЭтоLinuxКлиент = Неопределено;
		КонецЕсли;	 
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ЭтоLinuxСервер") Тогда
			ЭтоLinuxСервер = ДополнительныеПараметры.ЭтоLinuxСервер;
		Иначе	
			ЭтоLinuxСервер = Неопределено;
		КонецЕсли;	 
		Если ЗначениеЗаполнено(КаталогПроекта) Тогда
			ТекКаталогПроекта = СокрЛП(КаталогПроекта);
			Если Прав(ТекКаталогПроекта, 1) = "\" ИЛИ Прав(ТекКаталогПроекта, 1) = "/" Тогда
				ТекКаталогПроекта = Лев(ТекКаталогПроекта, СтрДлина(ТекКаталогПроекта) - 1);
			КонецЕсли;
			ТекЗнч = Сред(Стр, 2);
			Если Лев(ТекЗнч, 1) = "\" ИЛИ Лев(ТекЗнч, 1) = "/" Тогда
				ТекЗнч = Сред(ТекЗнч, 2);
			КонецЕсли;	 
			Стр = ТекКаталогПроекта + РазделительПути + ТекЗнч;
			
			Если ЭтоLinuxКлиент = Ложь И ЭтоLinuxСервер = Ложь Тогда
				Файл = Новый Файл(Стр);
				Стр = Файл.ПолноеИмя
			КонецЕсли;	 
			
		КонецЕсли;	 
	ИначеЕсли Найти(Стр, "$workspaceRoot") > 0 Тогда 
		Стр = СтрЗаменить(Стр, "$workspaceRoot", КаталогПроекта);
	ИначеЕсли Найти(Стр, "$instrumentsRoot") > 0 Тогда 
		Стр = СтрЗаменить(Стр, "$instrumentsRoot", КаталогИнструментов);
	КонецЕсли;		
	
	Возврат Стр;
КонецФункции	 

#КонецОбласти

&НаСервереБезКонтекста
Функция ТаблицаИменаКлючейОбщихНастроек()
	ТаблицаИмен = Новый ТаблицаЗначений;
	ТаблицаИмен.Колонки.Добавить("ИмяRU");
	ТаблицаИмен.Колонки.Добавить("ИмяEn");
	
	Возврат ТаблицаИмен; 
КонецФункции	 

&НаСервереБезКонтекста
Функция ИменаКлючейОбщихНастроек(Знач НижнийРегистр = Ложь)
	
	ТаблицаИмен = ТаблицаИменаКлючейОбщихНастроек();

	ТаблицаИменНоваяСтрока("StartFeaturePlayer", "startfeatureplayer", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("АдресОтладчика", "testclientdebugaddress", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("АктивизироватьСтроку", "ActivateString", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("БезопасноеВыполнениеШагов", "safeexecutionofsteps", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ВерсияVA", "VersionVA", ТаблицаИмен, НижнийРегистр);
	
	ТаблицаИменНоваяСтрока("ГенерироватьУФ", "GenerateUF", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("СоздаватьОбластиПриГенерацииКода", "CreateRegionsOnCodeGeneration", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ВыводитьТекстМодуляВместоПерегенерацииEPF", "OutputModuleTextInsteadOfRegeneratingEPF", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ВерсияПлатформыДляГенерацииEPF", "platformversiongenerateepf", ТаблицаИмен, НижнийРегистр);
	
	ТаблицаИменНоваяСтрока("ВыводитьВЛогВыполнениеШагов", "logstepstotext", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПодробныйЛогВыполненияСценариев", "fulllog", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ВыводитьЛогВКонсоль", "outputloginconsole", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ИспользоватьПарсерGherkinИзКомпонентыVanessaExt", "usethegherkinparserfromthevanessaextaddin", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПоискФайловСПомощьюКомпонентыVanessaExt", "SearchingForFilesUsingTheVanessaExtComponent", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗвуковоеОповещениеПриОкончанииВыполненияСценария", "soundnotificationwhenscriptends", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПоказыватьОкноОстановкиВыполненияСценария", "ShowWindowForStoppingScriptExecution", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПоказыватьОкноОстановкиЗаписиДействийПользователя", "ShowWindowToStopRecordingUserActions", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ИспользоватьДляОстановкиВыполненияСценарияФайл", "UseAFileToStopScriptExecution", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("РазрешеноЗапускатьТолькоОдинКлиентТестирования", "OnlyOneTestClientAllowedToRun", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПроверкаСерверныхВызововВОбработчикахСобытий", "CheckingServerCallsInEventHandlers", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ОтображатьЗакладкиСверху", "showbookmarkstop", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПоказыватьРазличияВРедактореОтдельно", "showdifferencesineditorseparately", ТаблицаИмен, НижнийРегистр);
	
	ТаблицаИменНоваяСтрока("ВыгружатьСтатусВыполненияСценариевВФайл", "createlogs", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ВыгрузитьPIDTestManager", "returnpidoftestmanager", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ВыполнениеСценариев", "RunningScripts", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ВыполнитьСценарии", "vanessarun", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ВыполнитьСценарииСТекущегоШага", "vanessarunfromthisstep", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ВыполнятьШагиАсинхронно", "makestepsasync", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДанныеАллюрМеток", "DataAllureMarks", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("НастройкиДругогоДвижкаTTS", "SettingsOtherEngineTTS", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДанныеКлиентовТестирования", "datatestclients", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДелатьЛогВыполненияСценариевВЖР", "logtogr", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДелатьЛогВыполненияСценариевВТекстовыйФайл", "logtotext", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДелатьЛогОшибокВТекстовыйФайл", "logerrorstotext", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДелатьОтчетВоВнутреннемФормате", "simplereport", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДелатьОтчетВФорматеCucumberJson", "cucumbercreatereport", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДелатьОтчетВФорматеjUnit", "junitcreatereport", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДелатьОтчетВФорматеАллюр", "allurecreatereport", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДелатьОтчетВФорматеСППР", "ModelingCreateReport" , ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДелатьСкриншотПриВозникновенииОшибки", "onerrorscreenshot", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДелатьСообщенияТранслитом", "translatemassage", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДиапазонПортовTestclient", "testclientports", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗакрыватьКлиентТестированияПринудительно", "forceclosetestclient", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ОпределятьРеальныйПортНаКоторомЗапустилсяКлиентТестирования", "DetermineTheRealPortOnWhichTheTestingClientWasLaunched", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПутьКadb", "PathToadb", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПовторноЗапускатьСеансКлиентаТестированияПриПодключенииЕслиНеНайденЕгоПроцесс", "starttestclientsessionagainonconnectionifitsprocessisnotfound", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ИнтервалЗапускаПроцессаКлиентаТестирования", "testclientprocessstartinterval", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогФайловВыводаСлужебныхСообщений", "DirectoryFilesOutputServiceMessages", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("МодальноеОкноПриЗапускеКлиентаТестированияЭтоОшибка", "modalwindowwhenstartingtestclientiserror", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ОтключитьЗапускРеглЗаданийВФайловойБазе", "DisableScheduledJobsExecutionForFileInfobase", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ВычислятьВыраженияВФигурныхСкобках", "EvaluateExpressionsInCurlyBraces", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ТаймаутПередПринудительнымЗакрытиемКлиентаТестирования", "timeoutbeforeforciblyclosingtestclient", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДобавлятьКИмениСценарияУсловияВыгрузки", "addtofeaturefilter", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписыватьВидеоВыполненияТестов", "recordtestrunvideo", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КоличествоКадровВидеоВыполненияТестов", "thenumberofframesofvideotestsession", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КомандаЗаписиВидеоВыполненияТестов", "testrecordingvideocommand", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогДляЗаписиВидеоВыполненияТестов", "directoryforrecordingvideotestexecution", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДобавлятьПриНакликиванииМетаИнформацию", "addmetainformationclicking", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДопПараметры", "AddItionalParameters", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДополнительныеПараметры", "dopparams", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗавершитьРаботуСистемы", "vanessashutdown", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗагрузитьСценарии", "loadscenarios", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗагрузкаФичПриОткрытии", "DownloadFeaturesOpen", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗакрытьTestClientПослеЗапускаСценариев", "closetestclient", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидео", "VideoRecording", ТаблицаИмен, НижнийРегистр);
	
	ТаблицаИменНоваяСтрока("ЗаписьВидеоYandexTTSOauthToken", "yandexttsoauthtoken", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоYandexTTSГолос", "yandexttsvoice", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоYandexTTSИдентификаторКаталога", "yandexttsfolderId", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоYandexTTSApiKey", "yandexttsapikey", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоYandexTTSСкорость", "yandexttsspeed", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоYandexTTSЭмоция", "yandexttsemotion", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоYandexTTSЯзык", "yandexttslanguage", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоYandexTTSВариантЗапроса", "yandexttsquerytype", ТаблицаИмен, НижнийРегистр);
	
	ТаблицаИменНоваяСтрока("ЗаписьВидеоAmazonГолос", "amazonttsvoice", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоAmazonДвижок", "amazonttsengine", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоAmazonЯзык", "amazonttslanguage", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоAmazonРегион", "amazonttsregion", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоAmazonКлючДоступа", "amazonttskey", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоAmazonСекретныйКлюч", "amazonttssecretkey", ТаблицаИмен, НижнийРегистр);
	
	ТаблицаИменНоваяСтрока("ЗаписьВидеоСберTTSClientID", "sberttsclientid", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоСберTTSClientSecret", "sberttsclientsecret", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоСберTTSГолос", "sberttsvoice", ТаблицаИмен, НижнийРегистр);
	
	ТаблицаИменНоваяСтрока("ЗаписьВидеоГромкостьМузыки", "musicvolume", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоГруппаШаговКакШаг", "groupofstepsasastep", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоДелатьНаложениеTTS", "dotts", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоДобавитьМузыкуКСлайдуЗаголовок", "addmusictofeaturetitleslide", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоДобавитьМузыкуКСлайдуФинал", "addmusictofinalslide", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоДобавлятьСубтитры", "addsubtitles", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоЗаменитьСлайдЗаголовок", "changefeaturetitleslide", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоЗаменитьСлайдФинал", "changefinalslide", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоИмяTTS", "ttsvoice", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоКаталогДляВременныхФайлов", "tempfolderforvideo", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоКаталогМузыки", "musicpath", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоКоличествоКадров", "fps", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоКомандаConvert", "convertcomand", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоКомандаFfmpeg", "ffmpegcomand", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоКомандаНачатьЗаписьВидео", "comandrecvideo", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоКэшВидеоВставок", "videocachepath", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоКэшироватьВидеоВставки", "cachevideo", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоКэшироватьФайлыTTS", "cachettsfiles", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоКэшФайловTTS", "ttsfilescache", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоОтключитьМасштабированиеШаговПоВремени", "disablescalingofsteps", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи", "turnofffeaturetitleslide", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоОтключитьСлайдСценария", "turnoffscenarioslide", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоОтключитьСлайдФинал", "turnofffinalslide", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", "movemouse", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", "showframe", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоПодсвечиватьНажатияМышки", "highlightmouseclicks", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоПроцентУскорения", "accelerationpercentage", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоПутьКДвижкуTTS", "audioenginetts", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоПутьКСлайдуЗаголовок", "featuretitleslidepath", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоПутьКСлайдуФинал", "finalslidepath", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоСкоростьПроизношения", "speedofspeech", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоСкрытьСлужебныеОкна", "hideservicewindows", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоСловарьЗамен", "changewordslib", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоТипОзвучкиTTS", "ttstype", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоФайлВодянойЗнак", "watermarkfile", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоФайлКурсораМышки", "mousecurfile", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоФормироватьИнструкциюТипHTML", "instructiontypehtml", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоФормироватьИнструкциюТипMarkdown", "instructiontypemarkdown", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоЭмулироватьДвиженияМышкиSikuliX", "emulatemousemovement", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоПутьКОбработкеДвижкаTTS", "pathprocessingenginetts", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоФормироватьИнструкциюТипВидео", "instructiontypevideo", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоИнструмент", "videocapturetool", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоЭкранВысота", "screenheight", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоЭкранШирина", "screenwidth", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоЭкранСлева", "screenleft", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоЭкранСверху", "screentop", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписьВидеоЭмулироватьВводСКлавиатуры", "emulatekeyboardinput", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗапускатьКлиентТестированияСМаксимизированнымОкном", "runtestclientwithmaximizedwindow", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗапускатьТестКлиентВРежимеОтладки", "testclientdebug", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ИмяКаталогаЛогОшибок", "texterrorslogname", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("Имя", "Name", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ИмяКомпьютера", "ComputerName", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ИмяСборки", "buildname", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ИмяТекущейСборки", "NameCurrentBuild", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ИмяФайлаPIDTestManager", "filenamepidtestmanager", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ИмяФайлаВнешнихКомандФреймворка", "fileofcommand", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ИмяФайлаЛогВыполненияСценариев", "textlogname", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ИнтервалВыполненияШагаЗаданныйПользователем", "SpacingStepSpecifiedUser", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ИскатьЭлементыФормыПоИмени", "searchformelementsbyname", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ИспользоватьSikuliXСервер", "usesikulixserver", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогВыгрузкиAllure", "allurepath", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогВыгрузкиAllureБазовый", "allurepathbase", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогВыгрузкиCucumberJson", "cucumberreportpath", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогВыгрузкиСППР", "modelingreportpath", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ИмяКонфигурацииСППР", "ModelingConfigurationName", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ВерсияКонфигурацииСППР", "ModelingConfigurationVersion", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогВыгрузкиJUnit", "junitpath", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогВыгрузкиИнструкцийВидео", "videopath", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогВыгрузкиСкриншотов", "outputscreenshot", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогиБиблиотек", "librarycatalogs", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогИнструментов", "instrpath", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогВременныхФайлов", "TemporaryFilesDirectory", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогиСкриптовSikuliX", "sikulixscriptpath", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогДляГенерацииКартинок", "pathforpicturegeneration", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогИсполняемогоФайла", "pathtoplatform", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогОтносительноКоторогоНадоСтроитьИерархию", "directorytobuildhierarchy", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогПроекта", "projectpath", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогФич", "featurepath", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КлиентТестирования", "TestClient", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КлиентыТестирования", "testclienttable", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КлючиОтладки", "testclientdebugkeys", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КоличествоПопытокВыполненияДействия", "numberofattemptstoperformanaction", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КоличествоПопытокВыполненияСценария", "NumberOfAttemptsToExecuteTheScript", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КоличествоСекундПоискаОкна", "timetofindwindow", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КомандаОткрытияФичиВТекстовомРедакторе", "commandtoopenfeatureintexteditor", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КомандаСделатьСкриншот", "commandscreenshot", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ИспользоватьКомпонентуVanessaExt", "useaddin", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗавершатьРаботуЕслиНеПолучилосьВыполнитьТихуюУстановкуКомпоненты", "QuitIfSilentInstallationAddinFails", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ИспользоватьВнешнююКомпонентуДляСкриншотов", "useaddinforscreencapture", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("СпособСнятияСкриншотовВнешнейКомпонентой", "screencaptureaddinmethod", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("НомерСтрокиДляЗапускаСТекущегоШагаСценария", "stepnumber", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ОбновлятьДеревоПриНачалеВыполненияСценария", "updatetreewhenscenariostarts", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ОбновлятьСтатистикуВДереве", "updatestatistics", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ОстановкаПриВозникновенииОшибки", "stoponerror", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ОтчетAllure", "AllureReport", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ОтчетJUnit", "JUnitReport", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ОтчетCucumber", "CucumberReport", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ОтчетСППР", "ModelingReport", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПаузаПриОткрытииОкна", "pauseonwindowopening", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("НомерПервогоСценарияДляЗапуска", "NumberFirstScriptForLaunch", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПоказыватьНомерСтрокиДереваПриВозникновенииОшибки", "showrownumberonerror", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПортЗапускаТестКлиента", "PortTestClient", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПриравниватьPendingКFailed", "pendingequalfailed", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("РазличатьBrokenИFailedПоКлючевомуСловуТогда", "distinguishbrokenorfailedbythenkeyword", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ВыполнятьSleepЧерезPing", "dosleepusingping", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗапрещатьПерезаписыватьПеременные", "banoverwritingvariables", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ОбновлятьТаблицыФормыПриПолученииЗначения", "updateformtableswhengettingvalue", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПолучатьМакетыСПомощьюРасширенияVAExtension", "getlayoutsusingextensionvaextension", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаменятьТабыНаПробелы", "replacetabswithspaces", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПутьКИнфобазе", "PathToInfobase", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев", "logpath", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("СниматьСкриншотКаждогоОкна1С", "onerrorscreenshoteverywindow", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("СниматьСкриншотыБраузера", "TakeBrowserScreenshots", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("Синоним", "Synonym", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("СобиратьДанныеОСостоянииАктивнойФормыПриОшибке", "getactiveformdataonerror", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("СобиратьДанныеОСостоянииВсехФормПриОшибке", "getallformsdataonerror", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("СобиратьДанныеОСетевыхСоединениях", "collectnetworkconnectiondata", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("СобиратьДанныеОПроцессахОС", "collectdataoftheoperatingsystemprocesses", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("СобиратьДанныеОЗначенияхПеременных", "CollectDataOnVariableValues", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КомандаЗапускаБраузера", "browserlaunchcommand", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ИспользоватьБраузерПлюсWebSocket", "usebrowserwebsocket", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЭмулироватьДвиженияМышкиVanessaExt", "emulatemousemovementswithVanessaExt", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЭмулироватьВводКлавиатурыVanessaExt", "emulatekeyboardinputwithVanessaExt", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("СмещениеПоГоризонталиДвиженияМышкиVanessaExt", "hrizontaloffset", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("СмещениеПоВертикалиДвиженияМышкиVanessaExt", "verticaloffset", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КоличествоШаговПриДвиженииМышкиVanessaExt", "thenumberofstepswhenmovingthemouse", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПаузаМеждуШагамиПриДвиженииМышкиVanessaExt", "timeoutbetweenstepswhenmovingthemouse", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПодсвечиватьКликМышкиВБраузереVanessaExt", "hlightmouseclicksinbrowser", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЦветПодсветкиКликаМышкиVanessaExt", "mouseclickhighlightcolor", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("РадиусПодсветкиКликаМышкиVanessaExt", "mouseclickhighlightradius", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДлительностьПодсветкиКликаМышкиVanessaExt", "mouseclickhighlightduration", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ТолщинаПодсветкиКликаМышкиVanessaExt", "mouseclickhighlightwidth", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПрозрачностьПодсветкиКликаМышкиVanessaExt", "mouseclickhighlighttransparency", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПоискКартинокСПомощьюКомпонентыVanessaExt", "findingpicturesusingaddinvanessaext", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПорогПоискаКартинки", "PictureSearchThreshold", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ИгнорироватьОшибкиПоискаЭлементовВБраузере", "ignorebrowsersearcherrors", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ИспользоватьUIAutomation", "UseUIAutomation", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КоэффициентМасштабированияЭкрана", "scalefactor", ТаблицаИмен, НижнийРегистр);
	
	//ТаблицаИменНоваяСтрока("ИнструкцияHTML", "HTMLInstruction", ТаблицаИмен, НижнийРегистр);
	//ТаблицаИменНоваяСтрока("ИнструкцияMarkdown", "MarkdownInstruction", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("СоздаватьИнструкциюHTML", "htmlcreate", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("СоздаватьИнструкциюMarkdown", "markdowncreate", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогВыгрузкиИнструкцийHTML", "htmlpath", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогВыгрузкиИнструкцийMarkdown", "markdownpath", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ВключитьОзвучкуHTML", "EnableHTMLVoiceover", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ТемпОзвучкиHTML", "HTMLVoiceOverTempo", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДиапазонОзвучкиHTML", "HTMLVoiceoverRange", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ГолосОзвучкиHTML", "HTMLVoiceoverVoice", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("АвтонумерацияШагов", "autonumberingofsteps", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ТекстовыеИнструкцииГруппаШаговКакШаг", "TextStepGroupAsStep", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДобавлятьИмяФичиВТекстовуюИнструкцию", "AddFeatureNameToTextInstruction", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДобавлятьИмяСценарияВТекстовуюИнструкцию", "AddScenarioNameToTextInstruction", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("СтилиHTMLИнструкции", "htmlstyles", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ВариантСтилейHTMLИнструкции", "VariantsHTMLInstructions", ТаблицаИмен, НижнийРегистр);
	
	ТаблицаИменНоваяСтрока("СоздаватьИнструкциюВидео", "videocreate", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ОзвучиватьВыполнениеСценария", "soundscenarioexecution", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки", "createsubfolderforbuild", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("СписокТеговИсключение", "ignoretags", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("СписокТеговОтбор", "filtertags", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ТаймаутДляАсинхронныхШагов", "timeoutforasynchronoussteps", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("МаксимальноеВремяВыполненияДействия", "MaximumExecutionTimeAction", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("СписокСценариевДляВыполнения", "scenariofilter", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ТаймаутЗапуска1С", "testclienttimeout", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ТегTreeВключенПоУмолчанию", "thetreetagisenabledbydefault", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ТипКлиента", "ClientType", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("УровеньОтчета1", "reportlevel1", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("УровеньОтчета2", "reportlevel2", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("УровеньОтчета3", "reportlevel3", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ГруппировкаTestSuites", "testsuites", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПрикладыватьКОтчетуAllureЖурналРегистрацииВыполненияСценария", "attacheventlogtotheallurereport", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПрикладыватьКОтчетуAllureДанныеОСостоянииАктивнойФормы", "attachactiveformdatatotheallurereport", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПрикладыватьКОтчетуAllureДанныеОЗначенияхПеременных", "attachvariablestotheallurereport", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПрикладыватьФайлыMxlКОтчетуAllure", "attachmxlfilestoallurereport", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПрикладыватьФайлыXlsxКОтчетуAllure", "attachxlsxfilestoallurereport", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПрикладыватьФайлыMxlСохраненныеВФорматеHTMLКОтчетуAllure", "attachmxlfilessavedinhtmlformattoallurereport", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПрикладыватьДополнительныеДанныеПриСравненииЗначенияСЭталономAllure", "attachadditionaldatawhencomparingvaluewithreferenceallure", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПодставлятьВОтчетеAllureЗначенияПеременных", "setvariablevaluesinstepsallurereport", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПрикладыватьКОтчетуAllureДанныеОСостоянииВсехФорм", "attachallformsdatatotheallurereport", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПрикладыватьКОтчетуAllureДанныеОСетевыхСоединениях", "attachnetworkconnectiondatatotheallurereport", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПрикладыватьКОтчетуAllureДанныеОПроцессахОС", "attachdataoftheoperatingsystemprocessestotheallurereport", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ТегиПропускающиеСценарийAllure", "tagsskippingscript", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЯзыкГенератораGherkin", "gherkinlanguage", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПоставщикПользовательскихНастроек", "usersettingsprovider", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("АдресПользовательскихНастроек", "addressofcustomsettings", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ИспользоватьРедакторVanessaEditor", "usevanessaeditor", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ТемаРедактораVanessaEditor", "vanessaeditortheme", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПоказыватьМиниатюруКода", "showcodeminiature", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПроверкаСинтаксисаВРедакторе", "syntaxcheckingineditor", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ОтображениеТабуляцииИПробелов", "displayingtabsandspaces", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПриНажатииЭскейпВРедактореЗакрытьФорму", "OnClickingEscapeInTheEditorCloseTheForm", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ИспользоватьДанныеТекущейФормыПриПодбореШагов", "usecurrentformdatawhenselectingsteps", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПоказыватьСтрокиПодсценариевVanessaEditor", "showsubscenariolines", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПоказыватьЗначенияПеременныхВСтрокахРедактора", "ShowVariableValuesInEditorLines", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ОткрыватьНачальнуюСтраницуПриЗапуске", "OpenStartPageAtStartup", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("СкриншотыjUnit", "junitscreenshots", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗаписыватьСценарииВJunitЧерезTestSuite", "WriteScriptsInjUnitViaTestSuite", ТаблицаИмен, НижнийРегистр);

	ТаблицаИменНоваяСтрока("МетаданныеБиблиотек", "stepsfrommetadata", ТаблицаИмен, НижнийРегистр);
	
	ТаблицаИменНоваяСтрока("КаталогКешОзвучкиДляИнтерактивнойСправки", "VoiceActingCacheDirectoryForOnlineHelp", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("СоздаватьФайлыОзвучкиДляСправки", "CreateVoiceoversForOnlineHelp", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПодключатьГорячуюКлавишуДляПолученияСправкиОбЭлементе", "ConnectAHotkeyToGetHelpAboutCurrentItem", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ЗакрыватьСценарийИнтерактивнойСправкиПослеВыполнения", "CloseInteractiveHelpScriptAfterExecution", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПоказыватьПомощникПриПервомЗапуске", "ShowHelperOnFirstLaunch", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ОтключатьДляПолейВозможностьЗатиранияТекстаПриСерверномВызове", "DisableForFieldsAbilityToOverwriteTextWhenServerCall", ТаблицаИмен, НижнийРегистр);
	
	ТаблицаИменНоваяСтрока("ОбучениеЗапуститьУрок", "LearningRunLesson", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ОбучениеВидео", "LearningVideo", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ОбучениеPDF", "LearningPDF", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ОбучениеMD", "LearningMD", ТаблицаИмен, НижнийРегистр);
	
	ТаблицаИменНоваяСтрока("ИспользоватьШаблонНовойФичи", "UseTemplateForNewFeature", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ПутьКШаблонуНовойФичи", "DirectoryOfNewFeatureTemplate", ТаблицаИмен, НижнийРегистр);
	
	// Настройки генератора дымовых тестов
	ТаблицаИменНоваяСтрока("ДымовыеТестыЯзыкШагов", "SmokeTestsLanguageSteps", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДымовыеТестыКаталогВыходныхФайлов", "SmokeTestsDirectoryOutputFiles", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДымовыеТестыОчищатьКаталогВыходныхФайлов", "SmokeTestsCleanDirectoryOutputFiles", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДымовыеТестыКаталогФайловИсключений", "SmokeTestsDirectoryFileExceptions", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДымовыеТестыТолькоВведенныеОбъекты", "SmokeTestsOnlyEnteredObjects", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДымовыеТестыТолькоИзмененныеОтностительноКонфигурацииПоставщика", "SmokeTestsOnlyChangedRelativeToVendorConfiguration", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДымовыеТестыИмяКонфигурацииПоставщика", "SmokeTestsVendorConfigurationName", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("ДымовыеТестыПутьКФайлуНастроекСценариев", "SmokeTestsPathToFileSettingsScripts", ТаблицаИмен, НижнийРегистр);
	
	// Удалить. Обратная совместимость
	ТаблицаИменНоваяСтрока("КаталогOutputAllure", "allurepath", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогOutputAllureБазовый", "allurepathbase", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогOutputCucumberJson", "cucumberreportpath", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогOutputjUnit", "junitpath", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогOutputИнструкцияHTML", "htmlpath", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогOutputИнструкцияMarkdown", "markdownpath", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогOutputИнструкцияВидео", "videopath", ТаблицаИмен, НижнийРегистр);
	ТаблицаИменНоваяСтрока("КаталогOutputСкриншоты", "outputscreenshot", ТаблицаИмен, НижнийРегистр);

	Возврат ТаблицаИмен;

КонецФункции

&НаСервереБезКонтекста
Функция ИменаЗначенийОбщихНастроек()
	
	ТаблицаИмен = ТаблицаИменаКлючейОбщихНастроек();
	
	ТаблицаИменНоваяСтрока("Этот клиент", "This client", ТаблицаИмен, Ложь);
	ТаблицаИменНоваяСтрока("Тонкий", "Thin", ТаблицаИмен, Ложь);
	ТаблицаИменНоваяСтрока("Толстый", "Thick", ТаблицаИмен, Ложь);
	
	Возврат ТаблицаИмен;
	
КонецФункции
	
&НаСервереБезКонтекста
Процедура ТаблицаИменНоваяСтрока(ИмяRu, ИмяEn, ТаблицаИмен, НижнийРегистр)

	НоваяСтрока = ТаблицаИмен.Добавить();
	НоваяСтрока.ИмяRu = ?(НижнийРегистр, НРег(ИмяRu), ИмяRu);
	НоваяСтрока.ИмяEn = ?(НижнийРегистр, НРег(ИмяEn), ИмяEn);

КонецПроцедуры

&НаСервере
Функция ТекущиеОбщиеНастройки(Знач ДопПараметры)
	
	НастройкиВыгрузки = Ложь;
	НастройкиЗагрузки = Ложь;
	ВыгружатьЭтотКлиент = Ложь;
	
	Если ДопПараметры.Свойство("НастройкиВыгрузки") Тогда
		НастройкиВыгрузки = ДопПараметры.НастройкиВыгрузки;
	КонецЕсли;	
	Если ДопПараметры.Свойство("НастройкиЗагрузки") Тогда
		НастройкиЗагрузки = ДопПараметры.НастройкиЗагрузки;
	КонецЕсли;	
	Если ДопПараметры.Свойство("ВыгружатьЭтотКлиент") Тогда
		ВыгружатьЭтотКлиент = ДопПараметры.ВыгружатьЭтотКлиент;
	КонецЕсли;	
	
	ОбщиеНастройки = Объект().СтруктураОбщихНастроек(НастройкиВыгрузки, НастройкиЗагрузки);
	
	Для каждого СтрокаНастроек Из ОбщиеНастройки Цикл
		Если ТипЗнч(СтрокаНастроек.Значение) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ОбщиеНастройки[СтрокаНастроек.Ключ], Объект);
		Иначе
			Если СтрокаНастроек.Ключ = "Version"
				ИЛИ СтрокаНастроек.Ключ = "Lang"
				ИЛИ СтрокаНастроек.Ключ = "ВерсияVA"
				Тогда
				Продолжить;
			КонецЕсли;	 
			
			Попытка
				ОбщиеНастройки[СтрокаНастроек.Ключ] = Объект[СтрокаНастроек.Ключ];
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
	
	ОбщиеНастройки.ВерсияVA = ПолучитьВерсиюОбработкиСервер();
	ОбщиеНастройки.Version = ПолучитьВерсиюОбработкиСервер(Истина);
	ОбщиеНастройки.Lang = Объект.ЯзыкГенератораGherkin;
	
	Если НастройкиВыгрузки Тогда
		// Метки Allure
		Если ДанныеАллюрМеток.Количество() > 0 Тогда
			МассивМеток = Новый Массив;
			Для Каждого СтрокаКоллекции Из ДанныеАллюрМеток Цикл
				Данные = Новый Структура("РегулярноеВыражение, ИмяМетки, Значение, Шаблон");
				ЗаполнитьЗначенияСвойств(Данные, СтрокаКоллекции);
				МассивМеток.Добавить(Данные);
			КонецЦикла;
			ОбщиеНастройки.ОтчетAllure.ДанныеАллюрМеток = МассивМеток;
		КонецЕсли;
		
		// НастройкиДругогоДвижкаTTS
		Если НастройкиДругогоДвижкаTTS.Количество() > 0 Тогда
			МассивНастройкиДругогоДвижкаTTS = Новый Массив;
			Для Каждого СтрокаКоллекции Из НастройкиДругогоДвижкаTTS Цикл
				Данные = Новый Структура("Имя, Значение");
				ЗаполнитьЗначенияСвойств(Данные, СтрокаКоллекции);
				МассивНастройкиДругогоДвижкаTTS.Добавить(Данные);
			КонецЦикла;
			ОбщиеНастройки.ЗаписьВидео.НастройкиДругогоДвижкаTTS = МассивНастройкиДругогоДвижкаTTS;
		КонецЕсли;
		
		// Данные клиентов тестирования
		МассивДанныхКлиентов = Новый Массив;
		Для каждого СтрокаНастроекКлиента Из ДанныеКлиентовТестирования Цикл
			Если НЕ СтрокаНастроекКлиента.ЭтотКлиент ИЛИ ВыгружатьЭтотКлиент Тогда 
				Данные = Новый Структура("Имя, Синоним, ПутьКИнфобазе, ПортЗапускаТестКлиента, ДопПараметры, ТипКлиента, ИмяКомпьютера, PIDКлиентаТестирования");
				ЗаполнитьЗначенияСвойств(Данные, СтрокаНастроекКлиента);
				МассивДанныхКлиентов.Добавить(Данные);
			КонецЕсли;
		КонецЦикла;
		Если МассивДанныхКлиентов.Количество() > 0 Тогда
			ОбщиеНастройки.КлиентТестирования.ДанныеКлиентовТестирования = МассивДанныхКлиентов;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОбщиеНастройки.ЗагрузкаФичПриОткрытии) Тогда
		ЗначениеСписка = Элементы.ЗагрузкаФичПриОткрытии.СписокВыбора.НайтиПоЗначению(ОбщиеНастройки.ЗагрузкаФичПриОткрытии);
		Если ЗначениеСписка <> Неопределено Тогда
			ИД = Элементы.ЗагрузкаФичПриОткрытии.СписокВыбора.Индекс(ЗначениеСписка);
			ОбщиеНастройки.Вставить("ЗагрузкаФичПриОткрытии", ИД);
		КонецЕсли;	 
	КонецЕсли;
	
	//Устаревшие реквизиты
	Если ОбщиеНастройки.Свойство("КаталогOutputAllure") Тогда
		ОбщиеНастройки.Удалить("КаталогOutputAllure");
	КонецЕсли;	
	Если ОбщиеНастройки.Свойство("КаталогOutputAllureБазовый") Тогда
		ОбщиеНастройки.Удалить("КаталогOutputAllureБазовый");
	КонецЕсли;	
	Если ОбщиеНастройки.Свойство("КаталогOutputjUnit") Тогда
		ОбщиеНастройки.Удалить("КаталогOutputjUnit");
	КонецЕсли;	
	Если ОбщиеНастройки.Свойство("КаталогOutputCucumberJson") Тогда
		ОбщиеНастройки.Удалить("КаталогOutputCucumberJson");
	КонецЕсли;	
	Если ОбщиеНастройки.Свойство("КаталогOutputИнструкцияHTML") Тогда
		ОбщиеНастройки.Удалить("КаталогOutputИнструкцияHTML");
	КонецЕсли;	
	Если ОбщиеНастройки.Свойство("КаталогOutputИнструкцияMarkdown") Тогда
		ОбщиеНастройки.Удалить("КаталогOutputИнструкцияMarkdown");
	КонецЕсли;	
	Если ОбщиеНастройки.Свойство("КаталогOutputИнструкцияВидео") Тогда
		ОбщиеНастройки.Удалить("КаталогOutputИнструкцияВидео");
	КонецЕсли;	
	Если ОбщиеНастройки.Свойство("КаталогOutputСкриншоты") Тогда
		ОбщиеНастройки.Удалить("КаталогOutputСкриншоты");
	КонецЕсли;
	
	Возврат ОбщиеНастройки;
	
КонецФункции

&НаСервере
Функция ПолучитьИДДляОбщегоСохраненияНастроек_Old()
	Стр = "VanessaBehaviorUF";
	Если Объект.РежимСамотестирования Тогда
		Стр = "VanessaBehaviorUF_autotest";
	КонецЕсли;	 
	
	Если Объект.ВерсияПоставки = "single" Тогда
		Стр = Стр + "_" + Объект.ВерсияПоставки;
	КонецЕсли;	 
	
	Возврат Стр;
КонецФункции	

#КонецОбласти

#Область РаботаСFixtures

// КоличествоСозданныхОбъектов учитывает только созданные элементы справочников, документы и пользователей ИБ. Записи
// регистров сведений не считаются.
&НаКлиенте
Функция СоздатьДанныеПоТабличномуДокументу(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения = Неопределено, 
		ИмяКолонкиЗамещения = Неопределено) Экспорт
		
	Плагин = Плагин("СериализаторMXL");	
	Данные = Плагин.СоздатьДанныеПоТабличномуДокументу(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения, ИмяКолонкиЗамещения);
	Возврат Данные;
	
КонецФункции

&НаСервере
Функция УдалитьСозданныеДанныеСервер(Знач Данные)
	Возврат Объект().УдалитьСозданныеДанные(Данные); 
КонецФункции	 

// Удаляет созданные данные
&НаКлиенте
Функция УдалитьСозданныеДанные(Данные) Экспорт
	Возврат УдалитьСозданныеДанныеСервер(Данные); 
КонецФункции

// Портирован блок генерации данных из проекта xUnitFor1C (https://github.com/xDrivenDevelopment/xUnitFor1C)
// взят релиз 3.0.0.3
#КонецОбласти

#Область Ассерты_EN

// Проверяет, что переданное значение является Истиной.
//
// Параметры:
//   ПроверяемоеЗначение - Булево - Проверяемое значение
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция Assert(Condition, Message = "") Экспорт
	Возврат Проверить(Condition, Message);
КонецФункции

// Проверяет, что переданное значение является Истиной.
//
// Параметры:
//   Condition - Булево - Проверяемое значение
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция AssertTrue(Condition, Message = "") Экспорт
	Возврат ПроверитьИстину(Condition, Message);
КонецФункции

// Проверяет, что переданное значение является Ложью.
//
// Параметры:
//   Condition - Булево - Проверяемое значение
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция AssertFalse(Condition, Message = "") Экспорт
	Возврат ПроверитьЛожь(Condition, Message);
КонецФункции

// Проверяет, что переданная дата входит в переданный период дат.
//
// Параметры:
//   Period - СтандартныйПериод - Период дат, который будет использован для проверки.
//   Date   - Дата - Проверяемая дата.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция AssertDate(Period, Date, Message = "") Экспорт
	Возврат ПроверитьДату(Period, Date, Message);
КонецФункции

// Проверяет равенство дат с точностью до двух секунд.
//
// Параметры:
//   ExpectedDate - Дата - Первая проверяемая дата.
//   ActualDate - Дата - Вторая проверяемая дата.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция AssertDateWithin2Seconds(ExpectedDate, ActualDate, Message = "") Экспорт
	Возврат ПроверитьРавенствоДатСТочностью2Секунды(ExpectedDate, ActualDate, Message);
КонецФункции

// Проверяет равенство двух значений.
//
// Параметры:
//   Expected - Произвольный - Первое проверяемое значение.
//   Actual - Произвольный - Второе проверяемое значение.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция AssertEqual(Expected, Actual, Message = "") Экспорт
	Возврат ПроверитьРавенство(Expected, Actual, Message);
КонецФункции

// Проверяет неравенство двух значений.
//
// Параметры:
//   NotExpected - Произвольный - Первое проверяемое значение.
//   Actual - Произвольный - Второе проверяемое значение.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция AssertNotEqual(NotExpected, Actual, Message = "") Экспорт
	Возврат ПроверитьНеРавенство(NotExpected, Actual, Message);
КонецФункции

// Проверяет, что второе значение больше первого.
//
// Параметры:
//   ExpectedNumber - Число, Строка, Дата - Первое проверяемое значение.
//   ActualNumber - Число, Строка, Дата - Второе проверяемое значение.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция AssertGreater(ExpectedNumber, ActualNumber, Message = "") Экспорт
	Возврат ПроверитьБольше(ExpectedNumber, ActualNumber, Message);
КонецФункции

// Проверяет, что второе значение больше или равено первому.
//
// Параметры:
//   ExpectedNumber - Число, Строка, Дата - Первое проверяемое значение.
//   ActualNumber - Число, Строка, Дата - Второе проверяемое значение.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция AssertGreaterOrEqual(ExpectedNumber, ActualNumber, Message = "") Экспорт
	Возврат ПроверитьБольшеИлиРавно(ExpectedNumber, ActualNumber, Message);
КонецФункции

// Проверяет, что второе значение меньше первого.
//
// Параметры:
//   ExpectedNumber - Число, Строка, Дата - Первое проверяемое значение.
//   ActualNumber - Число, Строка, Дата - Второе проверяемое значение.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция AssertLess(ExpectedNumber, ActualNumber, Message = "") Экспорт
	Возврат ПроверитьМеньше(ExpectedNumber, ActualNumber, Message);
КонецФункции

// Проверяет, что второе значение меньше или равное первому.
//
// Параметры:
//   ExpectedNumber - Число, Строка, Дата - Первое проверяемое значение.
//   ActualNumber - Число, Строка, Дата - Второе проверяемое значение.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция AssertLessOrEqual(ExpectedNumber, ActualNumber, Message = "") Экспорт
	Возврат ПроверитьМеньшеИлиРавно(ExpectedNumber, ActualNumber, Message);
КонецФункции

// Проверяет, что переданное выражение корректно выполнилось без ошибок.
//
// Параметры:
//   Algorithm - Строка - Строковое выражение, которое будет выполнено.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция AssertExecuted(Знач Algorithm, Знач Message = "") Экспорт
	Возврат ПроверитьВыполнилось(Algorithm, Message);
КонецФункции

// Проверяет, что данный метод у объекта корректно выполнилось без ошибок.
//
// Параметры:
//   Object - Произвольный - Объект, методо которого будет проверяться.
//   MethodName - Строка - Имя метода.
//   ArgsOrMessage - Строка, Массив
//       Если передан массив, то из массива будут получены параметры метода для выполнения.
//       Если передана строка, тогда параметр используется вместо параметра ДопСообщениеОшибки.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция AssertMethodExecuted(Object, Знач MethodName, ArgsOrMessage = Неопределено, Знач Message = "") Экспорт
	Возврат ПроверитьМетодВыполнился(Object, MethodName, ArgsOrMessage, Message);
КонецФункции

// Проверяет, что переданное выражение не выполнилось без ошибок.
//
// Параметры:
//   Algorithm - Строка - Строковое выражение, которое будет выполнено.
//   ThrowsExceptionOrMessage - Строка - По этой строке будет выполнен поиск в тексте исключения. 
//			Если строка не найдена, тогда будет вызвано исключение.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция AssertNotExecuted(Знач Algorithm, Знач ThrowsExceptionOrMessage = "", Знач Message = "") Экспорт
	Возврат ПроверитьНеВыполнилось(Algorithm, ThrowsExceptionOrMessage, Message);
КонецФункции

// Проверяет, что данный метод у объекта вызвал исключение при выполнении.
//
// Параметры:
//   Object - Произвольный - Объект, методо которого будет проверяться.
//   MethodName - Строка - Имя метода.
//   ArgsOrThrowsException - Строка, Массив
//       Если передан массив, то из массива будут получены параметры метода для выполнения.
//       Если передана строка, тогда параметр используется вместо параметра ДопСообщениеОшибки.
//   ThrowsExceptionOrMessage - Строка - Строка, должна быть в строке исключения метода.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция AssertMethodNotExecuted(Object, MethodName, ArgsOrThrowsException, Знач ThrowsExceptionOrMessage = "", Знач Message = "") Экспорт
	Возврат ПроверитьМетодНеВыполнился(Object, MethodName, ArgsOrThrowsException, ThrowsExceptionOrMessage, Message);
КонецФункции

// Проверяет, что переданное значение не является пустым.
//
// Параметры:
//   Value - Произвольный - Проверяемое на пустоту значение.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция AssertFilled(Value, Message = "") Экспорт
	Возврат ПроверитьЗаполненность(Value, Message);
КонецФункции

// Проверяет, что переданное значение является пустым.
//
// Параметры:
//   Value - Произвольный - Проверяемое на пустоту значение.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция AssertNotFilled(Value, Message = "") Экспорт
	Возврат ПроверитьНеЗаполненность(Value, Message);
КонецФункции

// Проверяет, что переданное значение нужного типа.
//
// Параметры:
//   Value - Произвольный - Проверяемое значение.
//   TypeOrTypeName       - Строка, Тип  - Тип значения.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция AssertType(Value, TypeOrTypeName, Message = "") Экспорт
	Возврат ПроверитьТип(Value, TypeOrTypeName, Message);
КонецФункции

// Проверяет, что искомая подстрока входит в строку.
//
// Параметры:
//   String             - Строка - Строка, в которой происходит поиск.
//   Substring    - Строка - Строка, которая ищется.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция AssertStringContains(String, Substring, Message = "") Экспорт
	Возврат ПроверитьВхождение(String, Substring, Message);
КонецФункции

// Проверяет, что значение входит в коллекцию.
//
// Параметры:
//   Item            - Произвольный - Значение, которое будет искаться в коллекции.
//   Collection          - Массив, Структура, Соответствие, ФиксированныйМассив, ФиксированнаяСтруктура, ФиксированноеСоответствие, СписокЗначений 
//		- Коллекция значений.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция AssertCollectionContains(Item, Collection, Message = "") Экспорт
	Возврат ПроверитьВхождениеВКоллекцию(Item, Collection, Message);
КонецФункции

// Проверяет, что запрос СКД не вызовет ошибок компиляции.
//
// Параметры:
//   ТекстЗапроса       - Строка - Текст запроса.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
&НаКлиенте
Процедура AssertПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки = "") Экспорт
	ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки);
КонецПроцедуры

// Проверяет, что табличные документы равны, игнорируя оформление.
//
// Параметры:
//   ТабДок1       - ТабличныйДокумент - Табличный документ.
//   ТабДок2       - ТабличныйДокумент - Табличный документ.
//   УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки - Булево, Строка - Флаг, указывающий, что нужно проверять только видимые колонки.
//   УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки  - Булево, Строка - Флаг, указывающий, что нужно проверять только видимые строки.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
&НаКлиенте
Процедура AssertПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки = Ложь, 
		УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки = Ложь, 
		Знач ДопСообщениеОшибки = "", 
		ДопПараметры = Неопределено) Экспорт
	ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки, 
		УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки, 
		ДопСообщениеОшибки,
		ДопПараметры);
КонецПроцедуры

// Проверяет, что таблицы равны.
//
// Параметры:
//   ExpectedValueTable       - ТабличныйДокумент - Коллекция значений.
//   ActualValueTable       - ТабличныйДокумент - Коллекция значений.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//   Params - Структура - Дополнительные параметры.
//
&НаКлиенте
Процедура AssertEqualValueTable(ExpectedValueTable, ActualValueTable, Message = "", Params = Undefined) Экспорт
	ПроверитьРавенствоТаблиц(ExpectedValueTable, ActualValueTable, Message, Params);
КонецПроцедуры

// Проверяет равенство файлов
//
// Параметры:
//   ПутьФайла1, ПутьФайла2 - Строка - полные пути к файлам
//   ДопСообщениеОшибки     - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//   ПарамСравнениеФайлов   - Структура - структура с ключами:
//    * ИгнорироватьПустоеПространство - Булево
//    * СпособСравнения                - СпособСравненияФайлов
//    * УчитыватьРазделителиСтрок      - Булево
//    * УчитыватьРегистр               - Булево
//   ПоказатьРазличия       - Строка - в случае ошибки появляется окно сравнения (для отладки)
//
Процедура AssertПроверитьРавенствоФайлов(ПутьФайла1, ПутьФайла2, ДопСообщениеОшибки = "", 
		ПарамСравнениеФайлов = Неопределено, ПоказатьРазличия = Ложь) Экспорт
	ПроверитьРавенствоФайлов(ПутьФайла1, ПутьФайла2, ДопСообщениеОшибки,
		ПарамСравнениеФайлов, ПоказатьРазличия)
КонецПроцедуры

#КонецОбласти

#Область Ассерты_RU

// Проверяет, что переданное значение является Истиной.
//
// Параметры:
//   ПроверяемоеЗначение - Булево - Проверяемое значение
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция Проверить(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	Если Не ПроверяемоеЗначение Тогда
		ТекстСообщения = Локализовать("Переданный параметр (%1) не является Истиной, а хотели, чтобы являлся. %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Формат(ПроверяемоеЗначение, "БЛ=ложь; БИ=истина"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(ПроверяемоеЗначение, Ложь);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецФункции

// Проверяет, что переданное значение является Истиной.
//
// Параметры:
//   ПроверяемоеЗначение - Булево - Проверяемое значение
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьИстину(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	Возврат Проверить(ПроверяемоеЗначение, ДопСообщениеОшибки);
КонецФункции

// Проверяет, что переданное значение является Ложью.
//
// Параметры:
//   ПроверяемоеЗначение - Булево - Проверяемое значение
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьЛожь(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	Если ПроверяемоеЗначение Тогда
		ТекстСообщения = Локализовать("Переданный параметр (%1) не является Ложью, а хотели, чтобы являлся. %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Формат(ПроверяемоеЗначение, "БЛ=ложь; БИ=истина"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(Ложь, Истина);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецФункции

// Проверяет, что переданная дата входит в переданный период дат.
//
// Параметры:
//   ПроверямыйПериод - СтандартныйПериод - Период дат, который будет использован для проверки.
//   ПроверяемаяДата   - Дата - Проверяемая дата.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьДату(ПроверямыйПериод, ПроверяемаяДата, ДопСообщениеОшибки = "") Экспорт
	Если ПроверяемаяДата < ПроверямыйПериод.ДатаНачала ИЛИ ПроверяемаяДата > ПроверямыйПериод.ДатаОкончания Тогда
		представление = ПредставлениеПериода(ПроверямыйПериод.ДатаНачала, ПроверямыйПериод.ДатаОкончания, "ФП = Истина");
		ТекстСообщения = Локализовать("Переданный параметр (%1) не входит в период %2, а хотели, чтобы являлся. %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Формат(ПроверяемаяДата, "ДФ='dd.MM.yyyy HH:mm:ss'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", представление);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(ПроверямыйПериод, ПроверяемаяДата);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецФункции                                                           

// Проверяет равенство дат с точностью до двух секунд.
//
// Параметры:
//   ПерваяДата - Дата - Первая проверяемая дата.
//   ВтораяДата - Дата - Вторая проверяемая дата.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьРавенствоДатСТочностью2Секунды(ПерваяДата, ВтораяДата, ДопСообщениеОшибки = "") Экспорт
	ДвеСекунды = 2;
	Если ВтораяДата < ПерваяДата - ДвеСекунды ИЛИ ВтораяДата > ПерваяДата + ДвеСекунды Тогда
		ТекстСообщения = Локализовать("Переданная дата (%1) не равна дате (%2) с точностью до 2-х секунд, а хотели, чтобы они равнялись. %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Формат(ПерваяДата, "ДФ='dd.MM.yyyy HH:mm:ss'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Формат(ВтораяДата, "ДФ='dd.MM.yyyy HH:mm:ss'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(ПерваяДата, ВтораяДата);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецФункции

// Проверяет равенство двух значений.
//
// Параметры:
//   ПервоеЗначение - Произвольный - Первое проверяемое значение.
//   ВтороеЗначение - Произвольный - Второе проверяемое значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьРавенство(ПервоеЗначение, ВтороеЗначение, ДопСообщениеОшибки = "") Экспорт
	Если ПервоеЗначение <> ВтороеЗначение Тогда
		ТекстСообщения = Локализовать("Сравниваемые значения (%1; %2) не равны, а хотели, чтобы были равны.%3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПервоеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ВтороеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ФорматДСО(ДопСообщениеОшибки));

		ОбработатьAssertОжидаемоеРеальноеЗначение(ПервоеЗначение, ВтороеЗначение);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецФункции

// Проверяет неравенство двух значений.
//
// Параметры:
//   ПервоеЗначение - Произвольный - Первое проверяемое значение.
//   ВтороеЗначение - Произвольный - Второе проверяемое значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьНеРавенство(ПервоеЗначение, ВтороеЗначение, ДопСообщениеОшибки = "") Экспорт
	Если ПервоеЗначение = ВтороеЗначение Тогда
		ТекстСообщения = Локализовать("Сравниваемые значения (%1; %2) равны, а хотели, чтобы были не равны.%3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПервоеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ВтороеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ФорматДСО(ДопСообщениеОшибки));

		ОбработатьAssertОжидаемоеРеальноеЗначение(ПервоеЗначение, ВтороеЗначение);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецФункции

// Проверяет, что второе значение больше первого.
//
// Параметры:
//   ПервоеЗначение - Число, Строка, Дата - Первое проверяемое значение.
//   ВтороеЗначение - Число, Строка, Дата - Второе проверяемое значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьБольше(ПервоеЗначение, ВтороеЗначение, ДопСообщениеОшибки = "") Экспорт
	Если ВтороеЗначение <= ПервоеЗначение Тогда
		ТекстСообщения = Локализовать("Первый параметр (%1) меньше или равен второму (%2) а хотели, чтобы был больше.%3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ВтороеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ПервоеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ФорматДСО(ДопСообщениеОшибки));

		ОбработатьAssertОжидаемоеРеальноеЗначение(ПервоеЗначение, ВтороеЗначение);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецФункции

// Проверяет, что второе значение больше или равено первому.
//
// Параметры:
//   ПервоеЗначение - Число, Строка, Дата - Первое проверяемое значение.
//   ВтороеЗначение - Число, Строка, Дата - Второе проверяемое значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьБольшеИлиРавно(ПервоеЗначение, ВтороеЗначение, ДопСообщениеОшибки = "") Экспорт
	Если ВтороеЗначение < ПервоеЗначение Тогда
		ТекстСообщения = Локализовать("Первый параметр (%1) меньше второго (%2) а хотели, чтобы был больше или равен.%3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ВтороеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ПервоеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ФорматДСО(ДопСообщениеОшибки));

		ОбработатьAssertОжидаемоеРеальноеЗначение(ПервоеЗначение, ВтороеЗначение);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецФункции

// Проверяет, что второе значение меньше первого.
//
// Параметры:
//   ПервоеЗначение - Число, Строка, Дата - Первое проверяемое значение.
//   ВтороеЗначение - Число, Строка, Дата - Второе проверяемое значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьМеньше(ПервоеЗначение, ВтороеЗначение, ДопСообщениеОшибки = "") Экспорт
	Если ВтороеЗначение >= ПервоеЗначение Тогда
		ТекстСообщения = Локализовать("Значение <%1> больше или равно, чем <%2>, а ожидалось меньше. %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ВтороеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ПервоеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(ПервоеЗначение, ВтороеЗначение);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецФункции

// Проверяет, что второе значение меньше или равное первому.
//
// Параметры:
//   ПервоеЗначение - Число, Строка, Дата - Первое проверяемое значение.
//   ВтороеЗначение - Число, Строка, Дата - Второе проверяемое значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьМеньшеИлиРавно(ПервоеЗначение, ВтороеЗначение, ДопСообщениеОшибки = "") Экспорт
	Если ВтороеЗначение > ПервоеЗначение Тогда
		ТекстСообщения = Локализовать("Значение <%1> больше, чем <%2>, а ожидалось меньше или равно. %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ВтороеЗначение); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ПервоеЗначение); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ФорматДСО(ДопСообщениеОшибки)); 
		ОбработатьAssertОжидаемоеРеальноеЗначение(ВтороеЗначение, ПервоеЗначение);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли; 
КонецФункции

// Проверяет, что переданное выражение корректно выполнилось без ошибок.
//
// Параметры:
//   СтрокаАлгоритм - Строка - Строковое выражение, которое будет выполнено.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьВыполнилось(Знач СтрокаАлгоритм, Знач ДопСообщениеОшибки = "") Экспорт
	
	Попытка
		Выполнить(СтрокаАлгоритм);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = Локализовать("Хотели, чтобы алгоритм <%1> выполнился, а он упал с ошибкой <%2>. %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаАлгоритм);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ПолученноеОписаниеОшибки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ФорматДСО(ДопСообщениеОшибки));
		
		ОбработатьAssertОжидаемоеРеальноеЗначение(Истина, Ложь);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецПопытки;
	
КонецФункции

// Проверяет, что данный метод у объекта корректно выполнилось без ошибок.
//
// Параметры:
//   Объект - Произвольный - Объект, методо которого будет проверяться.
//   ИмяМетода - Строка - Имя метода.
//   ПараметрыИлиДопСообщениеОшибки - Строка, Массив
//       Если передан массив, то из массива будут получены параметры метода для выполнения.
//       Если передана строка, тогда параметр используется вместо параметра ДопСообщениеОшибки.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьМетодВыполнился(Объект, Знач ИмяМетода, ПараметрыИлиДопСообщениеОшибки = Неопределено, Знач ДопСообщениеОшибки = "") Экспорт
	
	Если ТипЗнч(ПараметрыИлиДопСообщениеОшибки) = Тип("Строка") Тогда
		ДопСообщениеОшибки = ПараметрыИлиДопСообщениеОшибки;
	Иначе
		ПараметрыМетода = ПараметрыИлиДопСообщениеОшибки;
		Если ПараметрыМетода <> Неопределено Тогда
			ТипПараметра = ТипЗнч(ПараметрыМетода);
			Если ТипПараметра <> Тип("Массив") Тогда
				ВызватьИсключение ПодставитьПараметрыВСтроку(
					Локализовать("Ожидали, что вторым параметром будет передан массив параметров для метода <%1>, а получили другой объект с типом <%2>"),
					ИмяМетода,
					ТипПараметра
				);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыСтрока = ПараметрыСтрокой(ПараметрыМетода, "ПараметрыМетода");
	
	СтрокаВыполнения = "Объект." + ИмяМетода + "(" + ПараметрыСтрока + ")";
	
	Попытка
		Выполнить(СтрокаВыполнения);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = Локализовать("Хотели, чтобы код <%1> выполнился, а он упал с ошибкой <%2>. %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаВыполнения);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ПолученноеОписаниеОшибки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ФорматДСО(ДопСообщениеОшибки));
		
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецПопытки;
	
КонецФункции

// Проверяет, что переданное выражение не выполнилось без ошибок.
//
// Параметры:
//   СтрокаАлгоритм - Строка - Строковое выражение, которое будет выполнено.
//   ОжидаемоеОписаниеОшибки - Строка - По этой строке будет выполнен поиск в тексте исключения. 
//			Если строка не найдена, тогда будет вызвано исключение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьНеВыполнилось(Знач СтрокаАлгоритм, Знач ОжидаемоеОписаниеОшибки = "", Знач ДопСообщениеОшибки = "") Экспорт

	НужноВызватьОшибку = Истина;
	
	Попытка
		Выполнить(СтрокаАлгоритм);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Найти(ПолученноеОписаниеОшибки, ОжидаемоеОписаниеОшибки) = 0 Тогда
			ОбработатьAssertОжидаемоеРеальноеЗначение(Истина, Ложь);
			
			Возврат ВызватьОшибкуПроверки(ПодставитьПараметрыВСтроку(
				Локализовать("Хотели, чтобы алгоритм <%1> упал с сообщением об ошибке <%2>, а он упал с сообщением <%3>.%4"),
				СтрокаАлгоритм,
				ОжидаемоеОписаниеОшибки,
				ПолученноеОписаниеОшибки,
				ФорматДСО(ДопСообщениеОшибки)
			));
		КонецЕсли;
		НужноВызватьОшибку = Ложь;
	КонецПопытки;
	
	Если НужноВызватьОшибку Тогда
		ОбработатьAssertОжидаемоеРеальноеЗначение(Истина, Ложь);
		
		Возврат ВызватьОшибкуПроверки(ПодставитьПараметрыВСтроку(
			Локализовать("Хотели, чтобы алгоритм <%1> упал, а он выполнился%2"),
			СтрокаАлгоритм,
			ФорматДСО(ДопСообщениеОшибки)
		));
	КонецЕсли;	 
	
КонецФункции

// Проверяет, что данный метод у объекта вызвал исключение при выполнении.
//
// Параметры:
//   Объект - Произвольный - Объект, методо которого будет проверяться.
//   ИмяМетода - Строка - Имя метода.
//   ПараметрыИлиОжидаемоеОписаниеОшибки - Строка, Массив
//       Если передан массив, то из массива будут получены параметры метода для выполнения.
//       Если передана строка, тогда параметр используется вместо параметра ДопСообщениеОшибки.
//   ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки - Строка - Строка, должна быть в строке исключения метода.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьМетодНеВыполнился(Объект, ИмяМетода, ПараметрыИлиОжидаемоеОписаниеОшибки, 
		Знач ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки = "", 
		Знач ДопСообщениеОшибки = "") Экспорт
	
	Если ТипЗнч(ПараметрыИлиОжидаемоеОписаниеОшибки) = Тип("Строка") Тогда
		ОжидаемоеОписаниеОшибки = ПараметрыИлиОжидаемоеОписаниеОшибки;
		ДопСообщениеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	Иначе
		ПараметрыМетода = ПараметрыИлиОжидаемоеОписаниеОшибки;
		Если ПараметрыМетода <> Неопределено Тогда
			ТипПараметра = ТипЗнч(ПараметрыМетода);
			Если ТипПараметра <> Тип("Массив") Тогда
				ВызватьИсключение ПодставитьПараметрыВСтроку(
					Локализовать("Ожидали, что третьим параметром будет передан массив параметров для метода <%1>, а получили другой объект с типом <%2>"),
					ИмяМетода,
					ТипПараметра
				);
			КонецЕсли;
		КонецЕсли;
		ОжидаемоеОписаниеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	КонецЕсли;
	
	ПараметрыСтрока = ПараметрыСтрокой(ПараметрыМетода, "ПараметрыМетода");
	
	СтрокаВыполнения = "Объект." + ИмяМетода + "(" + ПараметрыСтрока + ")";
	
	НужноВызватьОшибку = Истина;
	
	Попытка
		Выполнить(СтрокаВыполнения);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Найти(ПолученноеОписаниеОшибки, ОжидаемоеОписаниеОшибки) = 0 Тогда
			Возврат ВызватьОшибкуПроверки(ПодставитьПараметрыВСтроку(
				Локализовать("Хотели, чтобы код <%1> упал с сообщением об ошибке <%2>, а он упал с сообщением <%3>.%4"),
				СтрокаВыполнения,
				ОжидаемоеОписаниеОшибки,
				ПолученноеОписаниеОшибки,
				ФорматДСО(ДопСообщениеОшибки)
			));
		КонецЕсли;
		НужноВызватьОшибку = Ложь;
	КонецПопытки;
	
	Если НужноВызватьОшибку Тогда
		Возврат ВызватьОшибкуПроверки(ПодставитьПараметрыВСтроку(
			Локализовать("Хотели, чтобы код <%1> упал, а он выполнился%2"),
			СтрокаВыполнения,
			ФорматДСО(ДопСообщениеОшибки)
		));
	КонецЕсли;	 
	
КонецФункции

// Проверяет, что переданное значение не является пустым.
//
// Параметры:
//   ПроверяемоеЗначение - Произвольный - Проверяемое на пустоту значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	НужноВызватьОшибку = Истина;
	Попытка
		фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
	Исключение
		НужноВызватьОшибку = Ложь;
	КонецПопытки;
	Если НЕ фЗаполнено И НужноВызватьОшибку Тогда
		ТекстСообщения = Локализовать("Значение (%1) не заполнено, а ожидалась заполненность%2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПроверяемоеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(Истина, Ложь);
		
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли; 
КонецФункции

// Проверяет, что переданное значение является пустым.
//
// Параметры:
//   ПроверяемоеЗначение - Произвольный - Проверяемое на пустоту значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьНеЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	ТекстСообщения = Локализовать("Значение (%1) заполнено, а ожидалась незаполненность %2");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПроверяемоеЗначение);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ФорматДСО(ДопСообщениеОшибки));
	
	Попытка
		фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
	Исключение
		ОбработатьAssertОжидаемоеРеальноеЗначение(Истина, Ложь);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецПопытки;
	Если фЗаполнено Тогда
		ОбработатьAssertОжидаемоеРеальноеЗначение(Истина, Ложь);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли; 
КонецФункции

// Проверяет, что переданное значение нужного типа.
//
// Параметры:
//   ПроверяемоеЗначение - Произвольный - Проверяемое значение.
//   ТипИлиИмяТипа       - Строка, Тип  - Тип значения.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьТип(ПроверяемоеЗначение, ТипИлиИмяТипа, ДопСообщениеОшибки = "") Экспорт
	Если ТипЗнч(ТипИлиИмяТипа) = Тип("Строка") Тогда
		искомыйТип = Тип(ТипИлиИмяТипа);
	ИначеЕсли ТипЗнч(ТипИлиИмяТипа) = Тип("Тип") Тогда
		искомыйТип = ТипИлиИмяТипа;
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("ПроверитьТип: Тип значения параметра ТипИлиИмяТипа должен быть <Тип> или <Строка>, а получили <%1>%2"),
			ТипЗнч(ТипИлиИмяТипа),
			ФорматДСО(ДопСообщениеОшибки)
		);
	КонецЕсли;
	Если ТипЗнч(ПроверяемоеЗначение) <> искомыйТип Тогда
		ТекстСообщения = Локализовать("Типом значения <%1> является <%2>, а ожидался тип <%3>.%4");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПроверяемоеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ТипЗнч(ПроверяемоеЗначение));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ТипИлиИмяТипа);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%4", ФорматДСО(ДопСообщениеОшибки));
		
		ОбработатьAssertОжидаемоеРеальноеЗначение(ТипЗнч(ПроверяемоеЗначение), искомыйТип);
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецФункции

// Проверяет, что искомая подстрока входит в строку.
//
// Параметры:
//   Строка             - Строка - Строка, в которой происходит поиск.
//   ПодстрокаПоиска    - Строка - Строка, которая ищется.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьВхождение(Строка, ПодстрокаПоиска, ДопСообщениеОшибки = "") Экспорт
	Если Найти(строка, подстрокаПоиска) = 0 Тогда
		ПредставлениеСтроки = "<" + строка + ">";
		Если СтрДлина(строка) > 20 Тогда
			ПредставлениеСтроки = ПредставлениеСтроки + Символы.ПС;
		КонецЕсли;
		ПредставлениеПодСтроки = "<" + подстрокаПоиска + ">";
		Если СтрДлина(подстрокаПоиска) > 20 Тогда
			ПредставлениеПодСтроки = ПредставлениеПодСтроки + Символы.ПС;
		КонецЕсли;
		ТекстСообщения = Локализовать("Искали в %1 подстроку %2, но не нашли.%3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПредставлениеСтроки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ПредставлениеПодСтроки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(строка, подстрокаПоиска);
		
		Возврат ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецФункции

// Проверяет, что значение входит в коллекцию.
//
// Параметры:
//   Элемент            - Произвольный - Значение, которое будет искаться в коллекции.
//   Коллекция          - Массив, Структура, Соответствие, ФиксированныйМассив, ФиксированнаяСтруктура, ФиксированноеСоответствие, СписокЗначений 
//		- Коллекция значений.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
// Возвращаемое значение:
//   Структура - Если Vanessa-Automation в режиме ожидания продолжения шагов возвращает СтруктураОшибкаАссерта.
//
&НаКлиенте
Функция ПроверитьВхождениеВКоллекцию(Элемент, Коллекция, ДопСообщениеОшибки = "") Экспорт
	// Коллекция - Массив, Структура, Соответствие, ФиксированныйМассив, ФиксированнаяСтруктура, ФиксированноеСоответствие, СписокЗначений
	ТипКоллекции = ТипЗнч(Коллекция);
	Если ТипКоллекции = Тип("Массив") ИЛИ ТипКоллекции = Тип("ФиксированныйМассив") Тогда
		Нашли = Коллекция.Найти(Элемент) <> Неопределено;
	ИначеЕсли ТипКоллекции = Тип("Структура") ИЛИ ТипКоллекции = Тип("Соответствие") 
		ИЛИ ТипКоллекции = Тип("ФиксированнаяСтруктура") ИЛИ ТипКоллекции = Тип("ФиксированноеСоответствие") Тогда
		Для каждого КлючЗначение Из Коллекция Цикл
			Нашли = КлючЗначение.Значение = Элемент;
			Если Нашли Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипКоллекции = Тип("СписокЗначений") Тогда
		Нашли = Коллекция.НайтиПоЗначению(Элемент) <> Неопределено;
	КонецЕсли;
	Если Нашли = Неопределено Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			Локализовать("Утверждение <ПроверитьВхождениеВКоллекцию> не умеет работать с типом коллекции <%1>.%2"),
			ТипКоллекции,
			ФорматДСО(ДопСообщениеОшибки)
		);
	КонецЕсли;
	Если Не Нашли Тогда
		ОбработатьAssertОжидаемоеРеальноеЗначение(Элемент, Коллекция);
		
		Возврат ВызватьОшибкуПроверки(ПодставитьПараметрыВСтроку(
			Локализовать("Не нашли элемент <%1> в коллекции, а хотели, чтобы он был в коллекции.%2"),
			Элемент,
			ФорматДСО(ДопСообщениеОшибки)
		));
	КонецЕсли;
КонецФункции

// Проверяет, что запрос СКД не вызовет ошибок компиляции.
//
// Параметры:
//   ТекстЗапроса       - Строка - Текст запроса.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
&НаКлиенте
Процедура ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки = "") Экспорт
	МодульСерверныеВызовы().ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки);
КонецПроцедуры

// Проверяет, что табличные документы равны, игнорируя оформление.
//
// Параметры:
//   ТабДок1       - ТабличныйДокумент - Табличный документ.
//   ТабДок2       - ТабличныйДокумент - Табличный документ.
//   УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки - Булево, Строка - Флаг, указывающий, что нужно проверять только видимые колонки.
//   УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки  - Булево, Строка - Флаг, указывающий, что нужно проверять только видимые строки.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//   ДопПараметры - Структура - Дополнительные параметры.
//
&НаКлиенте
Процедура ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(Знач ТабДок1, Знач ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки = Ложь, 
		УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки = Ложь, 
		Знач ДопСообщениеОшибки = "", 
		ДопПараметры = Неопределено) Экспорт

	ВычислятьЗначенияКонекстаВМакете = Истина;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ВычислятьЗначенияКонекстаВМакете") Тогда
		ВычислятьЗначенияКонекстаВМакете = ДопПараметры.ВычислятьЗначенияКонекстаВМакете;
	КонецЕсли;	 
	
	Если ВычислятьЗначенияКонекстаВМакете Тогда
		ТабДок1 = ВычислитьВМакетеЗначенияКонтекста(ТабДок1);
		ТабДок2 = ВычислитьВМакетеЗначенияКонтекста(ТабДок2);
	КонецЕсли;
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;	
	
	ДопПараметры.Вставить("ТекстСообщенийПользователю", Объект.ТекстСообщенийПользователю);
	
	МодульСерверныеВызовы().ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабДок1, ТабДок2, 
		УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки, 
		УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки, 
		ДопСообщениеОшибки, 
		ДопПараметры);
КонецПроцедуры

// Проверяет, что таблицы равны.
//
// Параметры:
//   Таб1       - ТабличныйДокумент - Коллекция значений.
//   Таб2       - ТабличныйДокумент - Коллекция значений.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//   ДопПараметры - Структура - Дополнительные параметры.
//
&НаКлиенте
Процедура ПроверитьРавенствоТаблиц(Таб1, Таб2, ДопСообщениеОшибки = "", ДопПараметры = Неопределено) Экспорт
	ВызватьИсключение "Ассерт не реализован при работе НаКлиенте.";
КонецПроцедуры 

// Проверяет равенство файлов
//
// Параметры:
//   ПутьФайла1, ПутьФайла2 - Строка - полные пути к файлам
//   ДопСообщениеОшибки     - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//   ПарамСравнениеФайлов   - Структура - структура с ключами:
//    * ИгнорироватьПустоеПространство - Булево
//    * СпособСравнения                - СпособСравненияФайлов
//    * УчитыватьРазделителиСтрок      - Булево
//    * УчитыватьРегистр               - Булево
//   ПоказатьРазличия       - Строка - в случае ошибки появляется окно сравнения (для отладки)
//
Процедура ПроверитьРавенствоФайлов(ПутьФайла1, ПутьФайла2, ДопСообщениеОшибки = "", 
		ПарамСравнениеФайлов = Неопределено, ПоказатьРазличия = Ложь) Экспорт
	ВызватьИсключение "Ассерт не реализован при работе НаКлиенте.";
КонецПроцедуры

#КонецОбласти

#Область VanessaEditor

&НаКлиенте
Процедура ОткрытьПодсценарийВНовойВкладкеОбработчик()
		
	Если НЕ ВозможенЗапускСценариевИзТекущейВкладки() Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ДеревоБудетПерезагружено("ОткрытьПодсценарийВНовойВкладкеОбработчик") Тогда
		Возврат;
	КонецЕсли;	 
	
	ПозицияVanessaEditor = ПолучитьVanessaEditor().getPosition();
	Если ПустаяСтрока(ПозицияVanessaEditor.codeWidget) Тогда
		СтрокаДерева = СтрокаДереваПоНомеруСтрокиФичи(ПозицияVanessaEditor.LineNumber);
		Если СтрокаДерева = Неопределено Тогда
			Возврат;
		КонецЕсли;	 
		НомерСтрокиФичи = 1;
		
		Если НРег(Прав(СтрокаДерева.АдресСнипета, 4)) = ".epf" Тогда
			Возврат;
		КонецЕсли;	 
		
		ИмяФайлаФичи = СтрокаДерева.АдресСнипета;
		
		Если ТипЗнч(СтрокаДерева.ПроизвольныеЗначения) = Тип("Структура") Тогда
			Если СтрокаДерева.ПроизвольныеЗначения.Свойство("НомерСтрокиВФиче") Тогда
				НомерСтрокиФичи = СтрокаДерева.ПроизвольныеЗначения.НомерСтрокиВФиче;
			КонецЕсли;	 
		КонецЕсли;	 
	Иначе	
		ИдСтрокиДерева = МодульРедакторТекста().ИдСтрокиДереваПоНомеруСтрокиВВиджете(ПозицияVanessaEditor.codeWidget, ПозицияVanessaEditor.LineNumber);
		Если ИдСтрокиДерева = Неопределено Тогда
			Возврат;
		КонецЕсли;	 
		СтрокаДерева = СтрокаДереваПоИдСтроки(ИдСтрокиДерева);
		Если СтрокаДерева = Неопределено Тогда
			Возврат;
		КонецЕсли;	 
		
		Если Найти(НРег(СтрокаДерева.ПолныйПуть), ".feature") = 0 Тогда
			Возврат;
		КонецЕсли;	 
		
		ИмяФайлаФичи = ИмяФайлаФичиИзПолногоПути(СтрокаДерева.ПолныйПуть);
		НомерСтрокиФичи = Формат(НомерСтрокиФичиИзПолногоПути(СтрокаДерева.ПолныйПуть), "ЧГ=; ЧН=0");
	КонецЕсли;
	
	Если МодульРедакторТекста().СуществуетВкладкаСФайлом(ИмяФайлаФичи) Тогда
		МодульРедакторТекста().АктивизироватьВкладкуПоИмениФайла(ИмяФайлаФичи);
		Если НЕ ПустаяСтрока(НомерСтрокиФичи) Тогда
			Попытка
				ДанныеОбновления = Новый Структура;
				ДанныеОбновления.Вставить("LineNumber", Число(НомерСтрокиФичи));
				ДанныеОбновления.Вставить("Column", 1);
				ДанныеОбновления.Вставить("codeWidget", "");
				ОбновитьТекущуюСтрокуРедактораСРасчетомВиджета(ДанныеОбновления);
				ПолучилосьСоздатьСтруктуру = Истина;
			Исключение
				ПолучилосьСоздатьСтруктуру = Ложь;
			КонецПопытки;
			
		КонецЕсли;	
		Возврат;
	КонецЕсли;	
	
	Объект.КаталогФич = ИмяФайлаФичи;
	
	ДопПараметры = Неопределено;
	Если НЕ ПустаяСтрока(НомерСтрокиФичи) Тогда
		Попытка
			ДанныеДляАктивизацииСтроки = Новый Структура;
			ДанныеДляАктивизацииСтроки.Вставить("LineNumber", Число(НомерСтрокиФичи));
			ДанныеДляАктивизацииСтроки.Вставить("Column", 1);
			ДанныеДляАктивизацииСтроки.Вставить("codeWidget", "");
			ПолучилосьСоздатьСтруктуру = Истина;
		Исключение
			ПолучилосьСоздатьСтруктуру = Ложь;
		КонецПопытки;
		
		Если ПолучилосьСоздатьСтруктуру Тогда
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ДанныеДляАктивизацииСтрокиПриОткрытииФичи", ДанныеДляАктивизацииСтроки);
		КонецЕсли;	 
	КонецЕсли;	 
	
	ЗагрузитьФичи(ДопПараметры);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПерейтиВДеревоШаговОбработчик()
	Если Объект.ИспользоватьРедакторVanessaEditor Тогда
		Если VanessaTabs = Неопределено ИЛИ VanessaTabs.current = Неопределено ИЛИ НЕ ЭтоВкладкаEdit(VanessaTabs.current) Тогда
			Возврат;
		КонецЕсли;	 
		
		Если Элементы.ФункциональностьЗакладки.ТекущаяСтраница <> Элементы.ГруппаЗапускТестов Тогда
			Элементы.ФункциональностьЗакладки.ТекущаяСтраница = Элементы.ГруппаЗапускТестов;
			НазначитьГорячиеКлавишиКнопкамКоманднойПанелиРедактора(Истина);
		КонецЕсли;
		
		Если НЕ МодульРедакторТекста().МожноЗапуститьСценарийИзДаннойВкладки() Тогда
			СообщитьПользователю(Локализовать("Для выполнения данного действия необходимо сохранить файл."));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ДеревоБудетПерезагружено("ПерейтиВДеревоШаговОбработчик") Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ЭтоВкладкаDiff(VanessaTabs.current) Тогда
		Возврат;
	КонецЕсли;	 
	
	МодульРедакторТекста().ПерейтиВДеревоШаговVanessaEditor();
	
	Если ИмяПроцедурыПерейтиВДеревоШаговОбработчик <> Неопределено Тогда
		ПодключитьОбработчикОжидания(ИмяПроцедурыПерейтиВДеревоШаговОбработчик, 0.1, Истина);
		ИмяПроцедурыПерейтиВДеревоШаговОбработчик = Неопределено;
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Функция ДеревоБудетПерезагружено(ИмяКомандыДляВыполнения)
	Если Объект.ИспользоватьРедакторVanessaEditor И ТипЗнч(ДанныеРедактораПослеЗагрузкиФичи) = Тип("Структура") Тогда
		НадоЗагрузитьФичуВДерево = Ложь;
		Если Объект.КаталогФич <> ДанныеРедактораПослеЗагрузкиФичи.ИмяФайла Тогда
			НадоЗагрузитьФичуВДерево = Истина;
		КонецЕсли;	 
		
		Если VanessaTabs = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;	 
		
		Если VanessaTabs.current = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;	      
		
		Если НЕ МодульРедакторТекста().МожноЗапуститьСценарийИзДаннойВкладки() Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		Если НЕ ФайлСуществуетКомандаСистемы(VanessaTabs.current.filename) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Прав(НРег(СокрЛП(VanessaTabs.current.filename)),8) <> ".feature" Тогда
			Возврат Ложь;
		КонецЕсли;	 
		
		Если НЕ НадоЗагрузитьФичуВДерево И VanessaTabs.current.modified Тогда
			НадоЗагрузитьФичуВДерево = Истина;
		КонецЕсли;	 
		
		Если НадоЗагрузитьФичуВДерево Тогда
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ВыполнитьПроцедуруЧерезОбработчикОжидания", ИмяКомандыДляВыполнения);
			МодульРедакторТекста().СохранитьТекстИзVanessaEditorВФайлИВыполнитьОбработчик(ДопПараметры);
			Возврат Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Процедура ПередЗакрытиемВкладкиРедактора(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если МодульРедакторТекста().ИмяФайлаСоответствуетПустойНовойРедактора(VanessaTabs.current.filename) Тогда
			ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Data", ДопПараметры);
			ДиалогВыбораКаталога.Показать(Новый ОписаниеОповещения("ОбработчикПередЗакрытиемВкладкиРедактора", ЭтаФорма, ДополнительныеПараметры));
			Возврат;
		КонецЕсли;	 
		СохранитьТекстФайлаВкладкиИЗакрытьВкладку(ДопПараметры);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ДопПараметры.accept();
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура СохранитьТекстФайлаВкладкиИЗакрытьВкладку(Data, filename = "")
	Data.model.resetModified();
	
	ЗаписатьBOM = Истина;
	Если Data.encoding = 1 Тогда
		Encoding = КодировкаТекста.UTF8;
	ИначеЕсли Data.encoding = 2 Тогда
		Encoding = "UTF-16LE";
	ИначеЕсли Data.encoding = 3 Тогда
		Encoding = "UTF-16BE";
	ИначеЕсли Data.encoding = 4 Тогда
		Encoding = "UTF-32LE";
	ИначеЕсли Data.encoding = 5 Тогда
		Encoding = "UTF-32BE";
	Иначе
		Encoding = КодировкаТекста.UTF8;
		ЗаписатьBOM = Ложь;
	КонецЕсли;
	
	Состояние(Локализовать("Сохранение файла."), , Data.title, БиблиотекаКартинок.ДиалогИнформация);
	
	Если ПустаяСтрока(filename) Тогда
		filename = Data.filename;
	КонецЕсли;	 
	
	ЗаписьТекста = Новый ЗаписьТекста(filename, "UTF-8", , Ложь, Символы.ПС); 
	ЗаписьТекста.Записать(Data.value);
	ЗаписьТекста.Закрыть();
	
	Data.accept();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьVanessaEditorСервер(Знач ПроверятьСлужебнуюКонстанту, ИнициализироватьНаКлиенте, Знач СуществуетКешРедактора = Ложь)
	
	ИнициализироватьНаКлиенте = Ложь;
	Если ПроверятьСлужебнуюКонстанту И
		Метаданные.Константы.Найти("ИнициализироватьVanessaEditor") <> Неопределено Тогда
		Попытка
			Если НЕ Константы.ИнициализироватьVanessaEditor.Получить() Тогда
				Возврат;
			КонецЕсли;	 
		Исключение
			Возврат;
		КонецПопытки;
	КонецЕсли;	 
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Версия8314ИлиВыше = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.14.0");
	Если НЕ Версия8314ИлиВыше Тогда
		Возврат;
	КонецЕсли;	 

	Если СуществуетКешРедактора Тогда
		VanessaEditorМакет = "Cache";
		ИнициализироватьНаКлиенте = Истина;
		Возврат;
	КонецЕсли;	

	Попытка
		ДвоичныеДанные = РеквизитФормыВЗначение("Объект").ПолучитьМакет("VanessaEditor");
		VanessaEditorМакет = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		ИнициализироватьНаКлиенте = Истина;
	Исключение
		VanessaEditorМакет = "";
	КонецПопытки;
		
КонецПроцедуры 

&НаКлиенте
Процедура ИнициализироватьVanessaEditorUrl(БылоИзменениеUrl = Ложь)
	
	Если ПустаяСтрока(VanessaEditorМакет) Тогда
		Возврат;
	КонецЕсли;   
	
	Если НЕ ИнициализироватьVanessaEditorНаКлиенте Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ VanessaEditorМакет = "Cache" Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(VanessaEditorМакет);
		УдалитьИзВременногоХранилища(VanessaEditorМакет);
	КонецЕсли;
	VanessaEditorМакет = "";
	
	НадоРаспаковатьФайлы = Истина;
	#Если ВебКлиент Тогда
		VanessaEditorКаталог = "";
	#Иначе
		VanessaEditorКаталог = МодульОбщегоНазначенияVA().КаталогVanessaEditor(ВерсияРедактора);
	#КонецЕсли
	Если ЗначениеЗаполнено(VanessaEditorКаталог) Тогда
		НужноОчиститьВременныйКаталогVanessaEditor = Ложь;
		Если НЕ ФайлСуществуетКомандаСистемы(VanessaEditorКаталог) Тогда
			Попытка
				СоздатьКаталогКомандаСистемы(VanessaEditorКаталог);
			Исключение
				#Если НЕ ВебКлиент Тогда
				VanessaEditorКаталог = ПолучитьИмяВременногоФайла();
				СоздатьКаталогКомандаСистемы(VanessaEditorКаталог);
				#КонецЕсли
			КонецПопытки;
		Иначе
			НадоРаспаковатьФайлы = Ложь;
		КонецЕсли;	
	Иначе	         
		
		#Если ВебКлиент Тогда
			VanessaEditorURL = "";
		#Иначе
			VanessaEditorКаталог = ПолучитьИмяВременногоФайла();
			НужноОчиститьВременныйКаталогVanessaEditor = Истина;
			СоздатьКаталогКомандаСистемы(VanessaEditorКаталог);
		#КонецЕсли
		
	КонецЕсли;	
	
	#Если ВебКлиент Тогда
		VanessaEditorURL = "";
	#Иначе
	Попытка             
		Если НадоРаспаковатьФайлы Тогда
			ЧтениеZipФайла = Новый ЧтениеZipФайла(ДвоичныеДанные.ОткрытьПотокДляЧтения());
			ЧтениеZipФайла.ИзвлечьВсе(VanessaEditorКаталог, Вычислить("РежимВосстановленияПутейФайловZIP.Восстанавливать"));
			ЧтениеZipФайла.Закрыть();
		КонецЕсли;	
		VanessaEditorURL = ДополнитьСлешВПуть(VanessaEditorКаталог) + "index.html?localeCode=" + Лев(ТекущийЯзыкСистемы(), 2);
		БылоИзменениеUrl = Истина;
	Исключение
		VanessaEditorURL = "";
	КонецПопытки;
	
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьVanessaEditorКлиент()
	
	Если НЕ ЗначениеЗаполнено(VanessaEditorURL) Тогда
		БылоИзменениеUrl = Ложь;
		ИнициализироватьVanessaEditorUrl(БылоИзменениеUrl);
		Если БылоИзменениеUrl Тогда
			ВыполнитьИнициализироватьVanessaEditorКлиент2 = Истина;
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	ИнициализироватьVanessaEditorКлиент2();
	
КонецПроцедуры 

&НаКлиенте
Процедура ИнициализироватьVanessaEditorКлиент2()
	
	Попытка
		Если VanessaTabs = Неопределено Тогда
			view = Элементы.VanessaEditor.Document.defaultView;
			VanessaGherkinProvider = view.VanessaGherkinProvider;
			VanessaGherkinProvider.setSuggestWidgetWidth("90%");
			МодульРедакторТекста().УстановитьКлючевыеСловаVanessaEditor();
			МодульРедакторТекста().УстановитьСоответствиеСловУсловныхОператоров();
			МодульРедакторТекста().УстановитьКлючевыеСловаИсключений();
			МодульРедакторТекста().УстановитьСписокКомандVanessaEditor();
			VanessaTabs = view.createVanessaTabs();
			Массив = Новый Массив;
			Массив.Добавить(Локализовать("Версия редактора") + ": ");
			Массив.Добавить(Новый ФорматированнаяСтрока(VanessaTabs.version,, WebЦвета.Синий,, "https://github.com/Pr-Mex/VAEditor/releases"));
			Элементы.ДекорацияВерсияVAEditor.Заголовок = Новый ФорматированнаяСтрока(Массив);
			РедакторБылПроинициализирован = Истина;
		КонецЕсли;	 
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписатьЛогВЖРОшибка("ИнициализацияРедактора",
			ПодставитьПараметрыВСтроку(Локализовать("Ошибка инициализации редактора: %1"), ОписаниеОшибки));
		ВыключитьИспользованиеVanessaEditor();
	КонецПопытки;
	
	Если НЕ АсинхронноеПодключениеМодулейВыполнялось Тогда
		АсинхронноеПодключениеМодулейВыполнялось = Истина;
		АсинхронноеПодключениеМодулей();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorOnReceiveEventHandler(Event, Arg)

	Если Event = "POSITION_DID_CHANGE" Тогда
		Возврат;
	ИначеЕсли Event = "CONTENT_DID_CHANGE" Тогда
		Если ИгнорироватьИзмененияVanessaEditor Тогда
			ИгнорироватьИзмененияVanessaEditor = Ложь;
		КонецЕсли;	 
	ИначеЕсли Event = "UPDATE_BREAKPOINTS" Тогда
		МодульРедакторТекста().ОбновитьДанныеПоБрейкпоинтамVanessaEditor(Arg);
		МодульРедакторТекста().ОтрисоватьБрейкпоинтыVanessaEditor();
	ИначеЕсли Event = "ErrorDetails" Тогда
		Если НЕ ПустаяСтрока(Arg) Тогда
			ПоказатьДеталиОшибкиVanessaEditor(ПрочитатьОбъектJSON(Arg));
		КонецЕсли;	 
	ИначеЕсли Event = "Actualize" Тогда
		Если НЕ ПустаяСтрока(Arg) Тогда
			АктуализироватьПоДаннымОшибки(ПрочитатьОбъектJSON(Arg));
		КонецЕсли;	 
	ИначеЕсли Event = "CopyError" Тогда
		Если НЕ ПустаяСтрока(Arg) Тогда
			МодульРедакторТекста().СкопироватьТекстОшибкиВБуферОбменаVAVanessaEditor(ПрочитатьОбъектJSON(Arg));
		КонецЕсли;	 
	ИначеЕсли Event = "ON_HREF_CLICK" Тогда
		МодульРедакторТекста().ОткрытьГиперссылкуВРедактореПоУмолчанию(Arg);
	ИначеЕсли Event = "ON_LINK_CLICK" Тогда
		МодульРедакторТекста().ОбработкаНажатияНаСсылку(Arg, ДанныеСекцииПеременные);
	ИначеЕсли Event = "REQUEST_IMAGE" Тогда
		МодульРедакторТекста().ПоказатьКартинкуВРедакторе(Arg);
	ИначеЕсли Event = "PRESS_CTRL_S" Тогда
		VanessaEditorСохранитьФайлОбработчик();
	ИначеЕсли Event = "ON_MARK_CLICK" Тогда
		ОбработчикНажатияГиперссылкиВФайлеMarkDown(Arg);
	ИначеЕсли Event = "ON_TAB_CLOSING" Тогда
		Если Arg.modified = Истина Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемВкладкиРедактора", ЭтаФорма, Arg);
			ТекстСообщения = Локализовать("Сохранить изменения?");
			ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНетОтмена);
		Иначе
			Arg.accept();
			Если VanessaTabs.tabStack.length = 0 Тогда
				Объект.КаталогФич = "";
			КонецЕсли;	 
		КонецЕсли;	 
	ИначеЕсли Event = "ON_TAB_SELECT" Тогда
		МодульРедакторТекста().ПриСменеЗакладкиРедактора(Arg.tab);
	ИначеЕсли Event = "WELCOME_LAUNCH" Тогда
		Выполнить(Arg);
	ИначеЕсли Event = "WELCOME_RECENT" Тогда
		Объект.КаталогФич = Arg;
		ЗагрузитьФичи();
	ИначеЕсли Event = "PRESS_ESCAPE" Тогда
		Если (НЕ ЗначениеДополнительногоПараметра("ВЭтомСеансеИдётОбучение") = Истина)
			И ЭтаФорма.ТекущийЭлемент = Элементы.VanessaEditor
			И (ВозможенЗапускСценариевИзТекущейВкладки() ИЛИ ЭтоВкладкаDiff(VanessaTabs.current)) Тогда
			Если Открыта() Тогда
				Закрыть();
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДеталиОшибкиVanessaEditor(ДанныеОшибки)
	СохраненныеДанные = ДанныеОшибокVanessaEditor[ДанныеОшибки.id];
	Если СохраненныеДанные <> Неопределено Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ВозможнаАктуализацияШагаВРедакторе", Истина);
		ПоказатьТекстОшибки(СохраненныеДанные.ПолныйТекстОшибки, СохраненныеДанные.ПроизвольныеЗначения, СохраненныеДанные.НомерСтрокиДерева, ДопПараметры);
		Возврат;
	КонецЕсли;	 
	
	НомерСтроки = ДанныеОшибки.LineNumber;
	Если СделатьСтрокуДереваТекущейПоНомеруСтрокиФичи(НомерСтроки) Тогда
		ОбработкаДвойногоКликаПоДеревуШагов(Ложь, ДанныеОшибки);
	Иначе
		ПоказатьТекстОшибки(ДанныеОшибки.ErrorText, Неопределено, Неопределено);
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ОтобразитьДанныеВиджетов()
	МодульРедакторТекста().ОтобразитьДанныеВиджетов();
КонецПроцедуры 

&НаКлиенте
Процедура ЗакрытьТекущуюВкладкуРедактора()
	МодульРедакторТекста().ЗакрытьТекущуюВкладкуРедактора();
КонецПроцедуры 

&НаКлиенте
Процедура ПерейтиВVanessaEditorПродолжение2()
	
	Если НЕ РедакторБылПроинициализирован Тогда
		ПодключитьОбработчикОжидания("ПерейтиВVanessaEditorПродолжение2", 1, Истина);
		Возврат;
	КонецЕсли;	
	
	НадоБезусловноПерезагрузить = Ложь;
	
	Если НЕ ПустаяСтрока(Объект.КаталогФич) Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ПереходВРедакторИзДерева", Истина);
		ТекущиеДанные = Элементы.ДеревоТестов.ТекущиеДанные;
		ТекФича = Неопределено;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.Тип = "Каталог" И ФайлСуществуетКомандаСистемы(ТекущиеДанные.ПолныйПуть) И ЭтоКаталогКомандаСистемы(ТекущиеДанные.ПолныйПуть) Тогда
				Попытка  
					Если ЭтоВкладкаEdit(VanessaTabs.current) Тогда
						Объект.КаталогФич = VanessaTabs.current.filename;
						ТекФича = Объект.КаталогФич;
						НадоБезусловноПерезагрузить = Истина;
					КонецЕсли;	
				Исключение
					Возврат;
				КонецПопытки;
			Иначе	
				ФичаПодсенария = ПолучитьИмяФичиИзПолногоПути(ТекущиеДанные.ПолныйПуть);
				Если Прав(НРег(ФичаПодсенария), 8) = ".feature" Тогда
					ТекФича = ФичаПодсенария;
				КонецЕсли;	 
			КонецЕсли;	 
			
			ЗагруженКаталог = ЭтоКаталогКомандаСистемы(Объект.КаталогФич);
			
			Если ЗагруженКаталог ИЛИ (ТекФича <> Неопределено И НРег(ТекФича) <> НРег(Объект.КаталогФич)) Тогда
				ЭтоПример = Ложь;
				ЭтоШагКонтекста = Ложь;
				СтрокаСценария = НайтиСтрокуСценарияЧерезРодителя(ТекущиеДанные, ЭтоПример, ЭтоШагКонтекста);
				СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(ТекущиеДанные);
				ТекущаяСтрока = ТекущиеДанные;
				
				Если ТекФича <> Неопределено Тогда
					Объект.КаталогФич = ТекФича;
				ИначеЕсли СтрокаФичи <> Неопределено Тогда
					Объект.КаталогФич = СтрокаФичи.ПолныйПуть;
				КонецЕсли;	 
				
				Если ТекущаяСтрока <> Неопределено Тогда
					ДанныеДляОбновленияСтрокиРедактораПоТекущейСтрокеДерева = Новый Структура;
					ДанныеДляОбновленияСтрокиРедактораПоТекущейСтрокеДерева.Вставить("ИдСтроки", ТекущаяСтрока.ИдСтроки);
					ДанныеДляОбновленияСтрокиРедактораПоТекущейСтрокеДерева.Вставить("НомерСтрокиВФиче", ТекущаяСтрока.НомерСтрокиВФиче);
					ДопПараметры.Вставить("ВыполнитьПроцедуруЧерезОбработчикОжидания", "ОбновитьТекущуюСтрокуРедактораПоТекущейСтрокеДереваОбработчик");
				ИначеЕсли СтрокаФичи <> Неопределено И СтрокаСценария <> Неопределено Тогда
					ДанныеДляОбновленияСтрокиРедактораПоТекущейСтрокеДерева = Новый Структура;
					ДанныеДляОбновленияСтрокиРедактораПоТекущейСтрокеДерева.Вставить("ИдСтроки", СтрокаСценария.ИдСтроки);
					ДанныеДляОбновленияСтрокиРедактораПоТекущейСтрокеДерева.Вставить("НомерСтрокиВФиче", СтрокаСценария.НомерСтрокиВФиче);
					ДопПараметры.Вставить("ВыполнитьПроцедуруЧерезОбработчикОжидания", "ОбновитьТекущуюСтрокуРедактораПоТекущейСтрокеДереваОбработчик");
				КонецЕсли;	 
			Иначе	
				ДанныеДляОбновленияСтрокиРедактораПоТекущейСтрокеДерева = Новый Структура;
				ДанныеДляОбновленияСтрокиРедактораПоТекущейСтрокеДерева.Вставить("ИдСтроки", ТекущиеДанные.ИдСтроки);
				ДанныеДляОбновленияСтрокиРедактораПоТекущейСтрокеДерева.Вставить("НомерСтрокиВФиче", ТекущиеДанные.НомерСтрокиВФиче);
				ДопПараметры.Вставить("ВыполнитьПроцедуруЧерезОбработчикОжидания", "ОбновитьТекущуюСтрокуРедактораПоТекущейСтрокеДереваОбработчик");
			КонецЕсли;	
		КонецЕсли;	 
		
		Если ТекФича = Неопределено ИЛИ ЗагруженКаталог ИЛИ НРег(ТекФича) <> НРег(Объект.КаталогФич) ИЛИ НЕ ЕстьВкладкаСДаннойФичей(ТекФича) ИЛИ НадоБезусловноПерезагрузить Тогда
			КомандаПерезагрузить(ДопПараметры);
		Иначе
			Если ДопПараметры.Свойство("ВыполнитьПроцедуруЧерезОбработчикОжидания") Тогда
				ПодключитьОбработчикОжидания(ДопПараметры.ВыполнитьПроцедуруЧерезОбработчикОжидания, 0.1, Истина);
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЕсли;	 
	
Конецпроцедуры	

&НаКлиенте
Процедура ПерейтиВVanessaEditorПродолжение()
	
	Объект.ИспользоватьРедакторVanessaEditor = Истина;
	УстановитьУсловноеОформление();
	АктивизироватьСтраницуЗапускТестов();
	
	ПодключитьОбработчикОжидания("ПерейтиВVanessaEditorПродолжение2", 1, Истина);
	
КонецПроцедуры 

&НаКлиенте
Процедура АктуализироватьПараметрыШагаПоДаннымОшибкиВРедакторе(НомерСтрокиВФиче, ДанныеДляАктуализации)
	
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ФункциональностьЗакладки.ТекущаяСтраница <> Элементы.ГруппаЗапускТестов Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДанныеДляАктуализации.Свойство("ОжидаемоеЗначение") И ДанныеДляАктуализации.Свойство("ТекущееЗначение") Тогда
		ЭкземплярVanessaEditor = ПолучитьVanessaEditor();
		ТекстСтроки = ЭкземплярVanessaEditor.getLineContent(НомерСтрокиВФиче);
		
		СтрокаЗамены = Неопределено;
		
		Если СтрокаЗамены = Неопределено Тогда
			СтрокаПоиска = "'" + СтрЗаменить(ДанныеДляАктуализации.ОжидаемоеЗначение, "'", "\'") + "'";
			Если КоличествоВхожденийСтроки(ТекстСтроки, СтрокаПоиска) = 1 Тогда
				СтрокаЗамены = СтрЗаменить(ТекстСтроки, СтрокаПоиска, "'" + СтрЗаменить(ДанныеДляАктуализации.ТекущееЗначение, "'", "\'") + "'");
			КонецЕсли;
		КонецЕсли;	
		
		Если СтрокаЗамены = Неопределено Тогда
			СтрокаПоиска = """" + СтрЗаменить(ДанныеДляАктуализации.ОжидаемоеЗначение, """", "\""") + """";
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "'", "\'");
			Если КоличествоВхожденийСтроки(ТекстСтроки, СтрокаПоиска) = 1 Тогда
				ТекущееЗначение = ДанныеДляАктуализации.ТекущееЗначение;
				ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "'", "\'");
				СтрокаЗамены = СтрЗаменить(ТекстСтроки, СтрокаПоиска, "'" + ТекущееЗначение + "'");
			КонецЕсли;
		КонецЕсли;	
		
		Если СтрокаЗамены <> Неопределено Тогда
			Соответствие = Новый Соответствие;
			Соответствие.Вставить("startLineNumber", НомерСтрокиВФиче);
			Соответствие.Вставить("startColumn", 1);
			Соответствие.Вставить("endLineNumber", НомерСтрокиВФиче);
			Соответствие.Вставить("endColumn", СтрДлина(ТекстСтроки) + 1);
			ЭкземплярVanessaEditor.insertText(СтрокаЗамены, ЗаписатьОбъектJSON(Соответствие));
			СтрокаСообщения = ПодставитьПараметрыВСтроку(Локализовать("Замена в шаге значения <%1> на <%2>."),
				ДанныеДляАктуализации.ОжидаемоеЗначение, ДанныеДляАктуализации.ТекущееЗначение);
			ПоказатьОповещениеПользователя(СтрокаСообщения);
		КонецЕсли;	
	Иначе
		СтрокаСообщения = Локализовать("Не получилось актуализировать параметры шага.");
		СообщитьПользователю(СтрокаСообщения);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьТаблицуGherkinПриСравненииТабличногоДокументаПоДаннымОшибкиВРедактореОбработчик()
	АктуализироватьТаблицуGherkinПриСравненииТабличногоДокументаПоДаннымОшибкиВРедакторе(глДопПараметры.НомерСтрокиВФиче, глДопПараметры.ПроизвольныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьТаблицуGherkinПриСравненииТабличногоДокументаПоДаннымОшибкиВРедакторе(НомерСтрокиВФиче, ДанныеДляАктуализации)
	
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ФункциональностьЗакладки.ТекущаяСтраница <> Элементы.ГруппаЗапускТестов Тогда
		Возврат;
	КонецЕсли;
	
	ПолнаяЗамена = Ложь;
	Если ДанныеДляАктуализации.Свойство("ПолнаяЗамена") Тогда
		ПолнаяЗамена = ДанныеДляАктуализации.ПолнаяЗамена;
	КонецЕсли;	
	
	Если ДанныеДляАктуализации.Свойство("ТаблицаТекущееЗначение") И ДанныеДляАктуализации.Свойство("ТаблицаЭталон") Тогда
		ЭкземплярVanessaEditor = ПолучитьVanessaEditor();
		ТекНомерСтроки = НомерСтрокиВФиче;
		НайденаТаблица = Ложь;
		Для Сч = 1 По 100 Цикл
			ТекНомерСтроки = ТекНомерСтроки + 1;
			Попытка
				ТекстСтроки = СокрЛ(ЭкземплярVanessaEditor.getLineContent(ТекНомерСтроки));
			Исключение
				Прервать;
			КонецПопытки;
			
			Если Лев(ТекстСтроки, 1) <> "|" Тогда
				Продолжить;
			КонецЕсли;
			
			НайденаТаблица = Истина;
			Прервать;
			
		КонецЦикла;	
		
		Если НЕ НайденаТаблица Тогда
			СообщитьПользователю(Локализовать("В тексте сценария не найдена таблица Gherkin."));
			Возврат;
		КонецЕсли;	
		
		НомерПервойСтрокиТаблицы = ТекНомерСтроки;
		
		МинСтр = 0;
		МаксСтр = 0;
		ДлинаМаксСтр = 0;
		МассивСтрокТаблицыИзСценария = МодульРедакторТекста().ТаблицаGherkinИзVanessaEditorНачинаяСоСтроки(ТекНомерСтроки, МинСтр, МаксСтр, ДлинаМаксСтр);
		
		КоличествоСтрокСовпадает = Ложь;
		Если ДанныеДляАктуализации.ТаблицаТекущееЗначение.Значение.Количество() = МассивСтрокТаблицыИзСценария.Количество() Тогда
			КоличествоСтрокСовпадает = Истина;
		КонецЕсли;
		
		Если МассивСтрокТаблицыИзСценария.Количество() < 2 Тогда
			СообщитьПользователю(Локализовать("Нельзя актуализировать значение, т.к. в сценарии в таблице нет строк."));
			Возврат;
		КонецЕсли;
		
		ТаблицаТекущееЗначение = ДанныеДляАктуализации.ТаблицаТекущееЗначение.Значение;
		
		Если КоличествоСтрокСовпадает И НЕ ПолнаяЗамена Тогда
			
			ЗаменитьВТаблицаТекущееЗначение(ТаблицаТекущееЗначение, МассивСтрокТаблицыИзСценария, НомерПервойСтрокиТаблицы, Истина);
			
		Иначе
			
			Если НЕ КоличествоСтрокСовпадает И ВЗначенияхТаблицыGherkinЕстьЗвездочка(МассивСтрокТаблицыИзСценария) Тогда
				ТекстВопроса = Ванесса.Локализовать("Изменился размер таблицы. При замене символы * и $ будут удалены. Продолжить?");
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("МассивСтрокТаблицыИзСценария", МассивСтрокТаблицыИзСценария);
				ДопПараметры.Вставить("НомерПервойСтрокиТаблицы", НомерПервойСтрокиТаблицы);
				ДопПараметры.Вставить("ДанныеДляАктуализации", ДанныеДляАктуализации);
				
				СписокКнопок = Новый СписокЗначений;
				СписокКнопок.Добавить(КодВозвратаДиалога.ОК);
				СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
				
				ОписаниеОповещения = Новый ОписаниеОповещения("АктуализироватьТаблицуGherkinПриСравненииТабличногоДокументаПоДаннымОшибкиВРедактореПродолжение", ЭтаФорма, ДопПараметры);
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
				Возврат;
			КонецЕсли;	
			
			АктуализироватьТаблицуGherkinПриСравненииТабличногоДокументаПоДаннымОшибкиВРедактореПродолжение2(МассивСтрокТаблицыИзСценария, НомерПервойСтрокиТаблицы, ДанныеДляАктуализации);
			
		КонецЕсли;	
		
	Иначе
		СтрокаСообщения = Локализовать("Не получилось актуализировать параметры шага.");
		СообщитьПользователю(СтрокаСообщения);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьВТаблицаТекущееЗначение(ТаблицаТекущееЗначение, МассивСтрокТаблицыИзСценария, НомерПервойСтрокиТаблицы, ОставлятьСпецСимволы)
	
	Колонки = ЗначенияИзСтрокиТаблицыGherkin(МассивСтрокТаблицыИзСценария[0]);
	Для Сч = 0 По МассивСтрокТаблицыИзСценария.Количество() - 1 Цикл
		СтрокаТекущееЗначение = ТаблицаТекущееЗначение[Сч];
		СтрокаЭталонноеЗначение = МассивСтрокТаблицыИзСценария[Сч];
		
		ЭталонныеЗначения = ЗначенияИзСтрокиТаблицыGherkin(СтрокаЭталонноеЗначение);
		СчетчикКолонок = -1;
		Для СчетчикТекущихЗначений = 0 По ЭталонныеЗначения.Количество() - 1 Цикл
			СчетчикКолонок = СчетчикКолонок + 1;
			ТекЗначение = ЭталонныеЗначения[СчетчикТекущихЗначений];
			Если ОставлятьСпецСимволы И (Найти(ТекЗначение, "*") > 0 ИЛИ Найти(ТекЗначение, "$") > 0) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКолонки = УбратьКавычкиАпострофы(Колонки[СчетчикКолонок].Значение);
			НовоеЗначение = СтрокаТекущееЗначение[СчетчикКолонок];
			Если НовоеЗначение = Неопределено Тогда
				ВызватьИсключение ПодставитьПараметрыВСтроку(Локализовать("В текущем значении таблицы не найдена колонка <%1>."), ИмяКолонки);
			КонецЕсли;
			
			НовоеЗначение = "'" + СтрЗаменить(НовоеЗначение, "'", "\'") + "'";
			НовоеЗначение = СтрЗаменить(НовоеЗначение, "|", "\|");
			ЭталонныеЗначения[СчетчикТекущихЗначений].Значение = НовоеЗначение;
			
		КонецЦикла;
		
		МассивСтрокТаблицыИзСценария[Сч] = "|" + _СтрСоединить(ЭталонныеЗначения.ВыгрузитьЗначения(), "|") + "|";
		
	КонецЦикла;	
	
	ФорматироватьМассивСтрокКакТаблицу(МассивСтрокТаблицыИзСценария);
	
	ЗаменитьТаблицуGherkinПослеРедактирования(МассивСтрокТаблицыИзСценария, НомерПервойСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьТаблицуGherkinПриСравненииТабличногоДокументаПоДаннымОшибкиВРедактореПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		МассивСтрокТаблицыИзСценария = ДополнительныеПараметры.МассивСтрокТаблицыИзСценария;
		НомерПервойСтрокиТаблицы = ДополнительныеПараметры.НомерПервойСтрокиТаблицы;
		ДанныеДляАктуализации = ДополнительныеПараметры.ДанныеДляАктуализации;
		
		АктуализироватьТаблицуGherkinПриСравненииТабличногоДокументаПоДаннымОшибкиВРедактореПродолжение2(МассивСтрокТаблицыИзСценария, НомерПервойСтрокиТаблицы, ДанныеДляАктуализации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьТаблицуGherkinПриСравненииТабличногоДокументаПоДаннымОшибкиВРедактореПродолжение2(МассивСтрокТаблицыИзСценария, НомерПервойСтрокиТаблицы, ДанныеДляАктуализации)
	
	ТаблицаТекущееЗначение = ДанныеДляАктуализации.ТаблицаТекущееЗначение.Значение;
	
	ТаблицаРезультат = Новый Массив;
	Колонки = ЗначенияИзСтрокиТаблицыGherkin(МассивСтрокТаблицыИзСценария[0]);
	Для Сч = 0 По ТаблицаТекущееЗначение.Количество() - 1 Цикл
		ПромРезультат = Новый Массив;
		СтрокаТекущееЗначение = ТаблицаТекущееЗначение[Сч];
		Для СчетчикТекущихЗначений = 0 По СтрокаТекущееЗначение.Количество() - 1 Цикл
			ТекЗначение = СтрокаТекущееЗначение[СчетчикТекущихЗначений];
			
			НовоеЗначение = "'" + СтрЗаменить(ТекЗначение, "'", "\'") + "'";
			НовоеЗначение = СтрЗаменить(НовоеЗначение, "|", "\|");
			ПромРезультат.Добавить(НовоеЗначение);
			
		КонецЦикла;
		
		ТаблицаРезультат.Добавить("|" + _СтрСоединить(ПромРезультат, "|") + "|");
		
	КонецЦикла;	
	
	ФорматироватьМассивСтрокКакТаблицу(ТаблицаРезультат);
	
	ЗаменитьТаблицуGherkinПослеРедактирования(ТаблицаРезультат, НомерПервойСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьТаблицуGherkinПоДаннымОшибкиВРедактореОбработчик()
	АктуализироватьТаблицуGherkinПоДаннымОшибкиВРедакторе(глДопПараметры.НомерСтрокиВФиче, глДопПараметры.ПроизвольныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьТаблицуGherkinПоДаннымОшибкиВРедакторе(НомерСтрокиВФиче, ДанныеДляАктуализации)
	
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ФункциональностьЗакладки.ТекущаяСтраница <> Элементы.ГруппаЗапускТестов Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДанныеДляАктуализации.Свойство("ТаблицаЭталон") И ДанныеДляАктуализации.Свойство("ТаблицаТекущееЗначение") Тогда
		ЭкземплярVanessaEditor = ПолучитьVanessaEditor();
		ТекНомерСтроки = НомерСтрокиВФиче;
		НайденаТаблица = Ложь;
		Для Сч = 1 По 100 Цикл
			ТекНомерСтроки = ТекНомерСтроки + 1;
			Попытка
				ТекстСтроки = СокрЛ(ЭкземплярVanessaEditor.getLineContent(ТекНомерСтроки));
			Исключение
				Прервать;
			КонецПопытки;
			
			Если Лев(ТекстСтроки, 1) <> "|" Тогда
				Продолжить;
			КонецЕсли;
			
			НайденаТаблица = Истина;
			Прервать;
			
		КонецЦикла;	
		
		Если НЕ НайденаТаблица Тогда
			СообщитьПользователю(Локализовать("В тексте сценария не найдена таблица Gherkin."));
			Возврат;
		КонецЕсли;	
		
		НомерПервойСтрокиТаблицы = ТекНомерСтроки;
		
		МинСтр = 0;
		МаксСтр = 0;
		ДлинаМаксСтр = 0;
		МассивСтрокТаблицыИзСценария = МодульРедакторТекста().ТаблицаGherkinИзVanessaEditorНачинаяСоСтроки(ТекНомерСтроки, МинСтр, МаксСтр, ДлинаМаксСтр);
		
		КоличествоСтрокСовпадает = Ложь;
		Если ДанныеДляАктуализации.ТаблицаТекущееЗначение.Количество() = МассивСтрокТаблицыИзСценария.Количество() - 1 Тогда
			КоличествоСтрокСовпадает = Истина;
		КонецЕсли;
		
		Если МассивСтрокТаблицыИзСценария.Количество() < 2 Тогда
			СообщитьПользователю(Локализовать("Нельзя актуализировать значение, т.к. в сценарии в таблице нет строк."));
			Возврат;
		КонецЕсли;	
		
		Если КоличествоСтрокСовпадает Тогда
			Колонки = ЗначенияИзСтрокиТаблицыGherkin(МассивСтрокТаблицыИзСценария[0]);
			Для Сч = 1 По МассивСтрокТаблицыИзСценария.Количество() - 1 Цикл //Перебор начиная со второй строки, т.к. в первой строке заголовок таблицы
				СтрокаТекущееЗначение = ДанныеДляАктуализации.ТаблицаТекущееЗначение[Сч - 1];
				СтрокаЭталонноеЗначение = МассивСтрокТаблицыИзСценария[Сч];
				
				ЭталонныеЗначения = ЗначенияИзСтрокиТаблицыGherkin(СтрокаЭталонноеЗначение);
				СчетчикКолонок = -1;
				Для СчетчикТекущихЗначений = 0 По ЭталонныеЗначения.Количество() - 1 Цикл
					СчетчикКолонок = СчетчикКолонок + 1;
					ТекЗначение = ЭталонныеЗначения[СчетчикТекущихЗначений];
					Если Найти(ТекЗначение, "*") > 0 ИЛИ Найти(ТекЗначение, "$") > 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ИмяКолонки = УбратьКавычкиАпострофы(Колонки[СчетчикКолонок].Значение);
					НовоеЗначение = СтрокаТекущееЗначение[ИмяКолонки];
					Если НовоеЗначение = Неопределено Тогда
						ВызватьИсключение ПодставитьПараметрыВСтроку(Локализовать("В текущем значении таблицы не найдена колонка <%1>."), ИмяКолонки);
					КонецЕсли;
					
					НовоеЗначение = "'" + СтрЗаменить(НовоеЗначение, "'", "\'") + "'";
					НовоеЗначение = СтрЗаменить(НовоеЗначение, "|", "\|");
					ЭталонныеЗначения[СчетчикТекущихЗначений].Значение = НовоеЗначение;
					
				КонецЦикла;
				
				МассивСтрокТаблицыИзСценария[Сч] = "|" + _СтрСоединить(ЭталонныеЗначения.ВыгрузитьЗначения(), "|") + "|";
				
			КонецЦикла;	
			
			ФорматироватьМассивСтрокКакТаблицу(МассивСтрокТаблицыИзСценария);
			
			ЗаменитьТаблицуGherkinПослеРедактирования(МассивСтрокТаблицыИзСценария, НомерПервойСтрокиТаблицы);
			
		Иначе
			
			Если НЕ КоличествоСтрокСовпадает И ВЗначенияхТаблицыGherkinЕстьЗвездочка(МассивСтрокТаблицыИзСценария) Тогда
				ТекстВопроса = Ванесса.Локализовать("Изменилось количество строк таблицы. При замене символы * и $ будут удалены. Продолжить?");
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("МассивСтрокТаблицыИзСценария", МассивСтрокТаблицыИзСценария);
				ДопПараметры.Вставить("НомерПервойСтрокиТаблицы", НомерПервойСтрокиТаблицы);
				ДопПараметры.Вставить("ДанныеДляАктуализации", ДанныеДляАктуализации);
				
				СписокКнопок = Новый СписокЗначений;
				СписокКнопок.Добавить(КодВозвратаДиалога.ОК);
				СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
				
				ОписаниеОповещения = Новый ОписаниеОповещения("АктуализироватьТаблицуGherkinПоДаннымОшибкиВРедактореПродолжение", ЭтаФорма, ДопПараметры);
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
				Возврат;
			КонецЕсли;	
			
			АктуализироватьТаблицуGherkinПоДаннымОшибкиВРедактореПродолжение2(МассивСтрокТаблицыИзСценария, НомерПервойСтрокиТаблицы, ДанныеДляАктуализации);
			
		КонецЕсли;	
		
	Иначе
		СтрокаСообщения = Локализовать("Не получилось актуализировать параметры шага.");
		СообщитьПользователю(СтрокаСообщения);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьТаблицуGherkinПоДаннымОшибкиВРедактореПродолжение2(МассивСтрокТаблицыИзСценария, НомерПервойСтрокиТаблицы, ДанныеДляАктуализации)
	
	НужныеКолонки = ЗначенияИзСтрокиТаблицыGherkin(МассивСтрокТаблицыИзСценария[0]).ВыгрузитьЗначения();
	Для Сч = 0 По НужныеКолонки.Количество() - 1 Цикл
		НужныеКолонки[Сч] = УбратьКавычкиАпострофы(НужныеКолонки[Сч]);
	КонецЦикла;	
	
	МассивСтрокТаблицыИзСценария = _СтрРазделить(СокрП(ПолучитьСтрокуСТЧФормаTestClient(ДанныеДляАктуализации.ТаблицаТекущееЗначение, НужныеКолонки)), Символы.ПС);
	Для Сч = 0 По МассивСтрокТаблицыИзСценария.Количество()-1 Цикл
		МассивСтрокТаблицыИзСценария[Сч] = СокрЛП(МассивСтрокТаблицыИзСценария[Сч]);
	КонецЦикла;	
	ФорматироватьМассивСтрокКакТаблицу(МассивСтрокТаблицыИзСценария);
	ЗаменитьТаблицуGherkinПослеРедактирования(МассивСтрокТаблицыИзСценария, НомерПервойСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьТаблицуGherkinПоДаннымОшибкиВРедактореПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		МассивСтрокТаблицыИзСценария = ДополнительныеПараметры.МассивСтрокТаблицыИзСценария;
		НомерПервойСтрокиТаблицы = ДополнительныеПараметры.НомерПервойСтрокиТаблицы;
		ДанныеДляАктуализации = ДополнительныеПараметры.ДанныеДляАктуализации;
		
		АктуализироватьТаблицуGherkinПоДаннымОшибкиВРедактореПродолжение2(МассивСтрокТаблицыИзСценария, НомерПервойСтрокиТаблицы, ДанныеДляАктуализации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьТаблицуОписанияСтрокиПриПереходеКСтрокеОбработчикОжидания()
	АктуализироватьТаблицуОписанияСтрокиПриПереходеКСтроке(глДопПараметры.НомерСтрокиВФиче, глДопПараметры.ПроизвольныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьМакетТаблицы(НомерСтрокиВФиче, ДанныеДляАктуализации)
	
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ФункциональностьЗакладки.ТекущаяСтраница <> Элементы.ГруппаЗапускТестов Тогда
		Возврат;
	КонецЕсли;	  
	
	Если НЕ ДанныеДляАктуализации.Свойство("ТаблицаЭталон") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеДляАктуализации.Свойство("ТаблицаТекущееЗначение") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипМассив(ДанныеДляАктуализации.ТаблицаЭталон) Тогда
		РазноеКоличествоСтрок = ДанныеДляАктуализации.ТаблицаЭталон.Количество() <> ДанныеДляАктуализации.ТаблицаТекущееЗначение.Количество() + 1;
	Иначе
		РазноеКоличествоСтрок = ДанныеДляАктуализации.ТаблицаЭталон.ВысотаТаблицы <> ДанныеДляАктуализации.ТаблицаТекущееЗначение.Количество() + 1;
	КонецЕсли;	
	
	Если РазноеКоличествоСтрок И ВТаблицеЭталонаЕстьСимволыЗвездочкаИлиДоллар(ДанныеДляАктуализации) Тогда
		ТекстВопроса = ПодставитьПараметрыВСтроку(Ванесса.Локализовать("Файл <%1> будет перезаписан. При этом также будут заменены значения содержащие символы * и $. Вы уверены?"),
			ДанныеДляАктуализации.ИмяФайлаМакета);
	Иначе	
		ТекстВопроса = ПодставитьПараметрыВСтроку(Ванесса.Локализовать("Файл <%1> будет перезаписан. Вы уверены?"),
			ДанныеДляАктуализации.ИмяФайлаМакета);
	КонецЕсли;	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ДанныеДляАктуализации", ДанныеДляАктуализации);
	ДопПараметры.Вставить("РазноеКоличествоСтрок", РазноеКоличествоСтрок);
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.ОК);
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("АктуализироватьМакетТаблицыПродолжение", ЭтаФорма, ДопПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 
	
КонецПроцедуры

&НаКлиенте
Функция ТипМассив(Значение)
	
	Если ТипЗнч(Значение) = Тип("Массив") ИЛИ ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	

&НаКлиенте
Функция ВТаблицеЭталонаЕстьСимволыЗвездочкаИлиДоллар(ДанныеДляАктуализации)
	
	Попытка
		ТекТаблица = ПолучитьТаблицуGherkinИзМакета(ДанныеДляАктуализации.ТаблицаЭталон);
		Для Каждого СтрокаТаблицаЭталон Из ТекТаблица Цикл
			Для Каждого ТекКлючЗначение Из СтрокаТаблицаЭталон Цикл
				Если Найти(ТекКлючЗначение.Значение, "*") > 0 ИЛИ Найти(ТекКлючЗначение.Значение, "$") > 0 Тогда
					Возврат Истина;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции	

&НаКлиенте
Процедура АктуализироватьМакетТаблицыПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		ДанныеДляАктуализации = ДополнительныеПараметры.ДанныеДляАктуализации;
		РазноеКоличествоСтрок = ДополнительныеПараметры.РазноеКоличествоСтрок;
		
		Если РазноеКоличествоСтрок Тогда
			ТаблицаТекущееЗначение = ДанныеДляАктуализации.ТаблицаТекущееЗначение;
			
			ТекТаблица = ПолучитьТаблицуGherkinИзМакета(ДанныеДляАктуализации.ТаблицаЭталон);
			
			НужныеКолонки = Новый Массив;
			КоличествоКолонок = ТекТаблица[0].Количество();
			Для Сч = 1 По КоличествоКолонок Цикл
				НужныеКолонки.Добавить(ТекТаблица[0]["Кол" + Формат(Сч, "ЧГ=; ЧН=0")]);
			КонецЦикла;	                                                  
			
			ТаблицаСтрок = _СтрРазделить(СокрП(ПолучитьСтрокуСТЧФормаTestClient(ТаблицаТекущееЗначение, НужныеКолонки)), Символы.ПС);
			
			ТабДок = ТабличныйДокументПоМассивуСтрокТаблицыGherkin(ТаблицаСтрок);
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ДанныеДляАктуализации", ДанныеДляАктуализации);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьЗаписьМакетаПослеАктуализации", ЭтаФорма, ДопПараметры);
			ТабДок.НачатьЗапись(ОписаниеОповещения,ДанныеДляАктуализации.ИмяФайлаМакета,ТипФайлаТабличногоДокумента.MXL);
		Иначе	
			НужныеКолонки = Новый Массив;
			КоличествоКолонок = ДанныеДляАктуализации.ТаблицаЭталон[0].Количество();
			Для Сч = 1 По КоличествоКолонок Цикл
				НужныеКолонки.Добавить(ДанныеДляАктуализации.ТаблицаЭталон[0]["Кол" + Формат(Сч, "ЧГ=; ЧН=0")]);
			КонецЦикла;	                                                  
			
			НадоПытатьсяСохранитьСимволыЗвездочка = Ложь;
			Если ДанныеДляАктуализации.ТаблицаЭталон.Количество() = ДанныеДляАктуализации.ТаблицаТекущееЗначение.Количество() + 1 Тогда
				НадоПытатьсяСохранитьСимволыЗвездочка = Истина;
			КонецЕсли;
			
			Если НадоПытатьсяСохранитьСимволыЗвездочка Тогда
				ТаблицаТекущееЗначение = СкопироватьМассивСоответствий(ДанныеДляАктуализации.ТаблицаТекущееЗначение);
				СтрокаИменкаКолонокЭталон = ДанныеДляАктуализации.ТаблицаЭталон[0];
				Для Сч = 1 По ДанныеДляАктуализации.ТаблицаЭталон.Количество() - 1 Цикл //Пропускаем первую строку
					ТекСтрокаЭталон = ДанныеДляАктуализации.ТаблицаЭталон[Сч];
					ТекСтрокаТекущееЗначение = ТаблицаТекущееЗначение[Сч - 1];
					
					Для СчСвойств = 1 По СтрокаИменкаКолонокЭталон.Количество() Цикл
						ИмяКолонкиТехническое = "Кол" + Формат(СчСвойств, "ЧГ=; ЧН=0");
						ИмяКолонкиРеальное = СтрокаИменкаКолонокЭталон[ИмяКолонкиТехническое];
						Значение = ТекСтрокаЭталон[ИмяКолонкиТехническое];
						
						Если Найти(Значение, "*") > 0 ИЛИ Найти(Значение, "$") > 0 Тогда
							ТекСтрокаТекущееЗначение[ИмяКолонкиРеальное] = Значение;
						КонецЕсли;	
						
					КонецЦикла;	
				КонецЦикла;	
			Иначе	
				ТаблицаТекущееЗначение = ДанныеДляАктуализации.ТаблицаТекущееЗначение;
			КонецЕсли;	
			
			ТаблицаСтрок = _СтрРазделить(СокрП(ПолучитьСтрокуСТЧФормаTestClient(ТаблицаТекущееЗначение, НужныеКолонки)), Символы.ПС);
			
			ТабДок = ТабличныйДокументПоМассивуСтрокТаблицыGherkin(ТаблицаСтрок);
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ДанныеДляАктуализации", ДанныеДляАктуализации);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьЗаписьМакетаПослеАктуализации", ЭтаФорма, ДопПараметры);
			ТабДок.НачатьЗапись(ОписаниеОповещения,ДанныеДляАктуализации.ИмяФайлаМакета,ТипФайлаТабличногоДокумента.MXL);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаписьМакетаПослеАктуализации(Результат, ДополнительныеПараметры) Экспорт
	
	ДанныеДляАктуализации = ДополнительныеПараметры.ДанныеДляАктуализации;
	
	Если Результат = Истина Тогда
		СообщитьПользователю(ПодставитьПараметрыВСтроку(Локализовать("Файл <%1> был перезаписан."), ДанныеДляАктуализации.ИмяФайлаМакета));
	Иначе	
		ВызватьИсключение ПодставитьПараметрыВСтроку(Локализовать("Файл <%1> не был перезаписан."), ДанныеДляАктуализации.ИмяФайлаМакета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьМакетТаблицыОбработчикОжидания()
	АктуализироватьМакетТаблицы(глДопПараметры.НомерСтрокиВФиче, глДопПараметры.ПроизвольныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьТаблицуОписанияСтрокиПриПереходеКСтроке(НомерСтрокиВФиче, ДанныеДляАктуализации)
	
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ФункциональностьЗакладки.ТекущаяСтраница <> Элементы.ГруппаЗапускТестов Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДанныеДляАктуализации.Свойство("ОписанияСтрокиПриПереходеКСтрокеТаблицы") И ДанныеДляАктуализации.Свойство("ИмяТаблицыПриПереходеКСтрокеТаблицы") Тогда
		ЭкземплярVanessaEditor = ПолучитьVanessaEditor();
		ТекНомерСтроки = НомерСтрокиВФиче;
		НайденаТаблица = Ложь;
		Для Сч = 1 По 100 Цикл
			ТекНомерСтроки = ТекНомерСтроки + 1;
			Попытка
				ТекстСтроки = СокрЛ(ЭкземплярVanessaEditor.getLineContent(ТекНомерСтроки));
			Исключение
				Прервать;
			КонецПопытки;
			
			Если Лев(ТекстСтроки, 1) <> "|" Тогда
				Продолжить;
			КонецЕсли;
			
			НайденаТаблица = Истина;
			Прервать;
			
		КонецЦикла;	
		
		Если НЕ НайденаТаблица Тогда
			СообщитьПользователю(Локализовать("В тексте сценария не найдена таблица Gherkin."));
			Возврат;
		КонецЕсли;	
		
		НомерПервойСтрокиТаблицы = ТекНомерСтроки;
		
		МинСтр = 0;
		МаксСтр = 0;
		ДлинаМаксСтр = 0;
		МассивСтрокТаблицыИзСценария = МодульРедакторТекста().ТаблицаGherkinИзVanessaEditorНачинаяСоСтроки(ТекНомерСтроки, МинСтр, МаксСтр, ДлинаМаксСтр);
		
		Если МассивСтрокТаблицыИзСценария.Количество() <> 2 Тогда
			СообщитьПользователю(Локализовать("Нельзя актуализировать значение, т.к. в таблице Gherkin должно быть 2 строки."));
			Возврат;
		КонецЕсли;	
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.ОК);
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ТекстВопроса = ПодставитьПараметрыВСтроку(Ванесса.Локализовать("Актуализировать значение в сценарии по текущей строке таблицы клиента тестирования <%1>?"),
			ДанныеДляАктуализации.ИмяТаблицыПриПереходеКСтрокеТаблицы);
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ОписанияСтрокиПриПереходеКСтрокеТаблицы", ДанныеДляАктуализации.ОписанияСтрокиПриПереходеКСтрокеТаблицы);
		ДопПараметры.Вставить("ИмяТаблицыПриПереходеКСтрокеТаблицы", ДанныеДляАктуализации.ИмяТаблицыПриПереходеКСтрокеТаблицы);
		ДопПараметры.Вставить("МассивСтрокТаблицыИзСценария", МассивСтрокТаблицыИзСценария);
		ДопПараметры.Вставить("НомерПервойСтрокиТаблицы", НомерПервойСтрокиТаблицы);
		ОписаниеОповещения = Новый ОписаниеОповещения("АктуализироватьТаблицуОписанияСтрокиПриПереходеКСтрокеПродолжение", ЭтаФорма, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 
		
	Иначе
		СтрокаСообщения = Локализовать("Не получилось актуализировать параметры шага.");
		СообщитьПользователю(СтрокаСообщения);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьТаблицуОписанияСтрокиПриПереходеКСтрокеПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ОписанияСтрокиПриПереходеКСтрокеТаблицы = ДополнительныеПараметры.ОписанияСтрокиПриПереходеКСтрокеТаблицы;
		ИмяТаблицыПриПереходеКСтрокеТаблицы = ДополнительныеПараметры.ИмяТаблицыПриПереходеКСтрокеТаблицы;
		НомерПервойСтрокиТаблицы = ДополнительныеПараметры.НомерПервойСтрокиТаблицы;
		МассивСтрокТаблицыИзСценария = ДополнительныеПараметры.МассивСтрокТаблицыИзСценария;
		
		Попытка
			ТекТаблица = НайтиТЧПоИмени(ИмяТаблицыПриПереходеКСтрокеТаблицы);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
		ВыделенныеСтрокиТаблицыКлиентаТестирования = ТекТаблица.ПолучитьВыделенныеСтроки();
		Если ВыделенныеСтрокиТаблицыКлиентаТестирования.Количество() <> 1 Тогда
			ВызватьИсключение ПодставитьПараметрыВСтроку(Локализовать("Из таблицы <%1> было получено <%2> строк, а ожидалось получение одной строки."),
				ИмяТаблицыПриПереходеКСтрокеТаблицы, ВыделенныеСтрокиТаблицыКлиентаТестирования.Количество());
		КонецЕсли;
		
		СтрокаТекущееЗначение = ВыделенныеСтрокиТаблицыКлиентаТестирования[0];
		
		Колонки = ЗначенияИзСтрокиТаблицыGherkin(МассивСтрокТаблицыИзСценария[0]);
		СтрокаЭталонноеЗначение = МассивСтрокТаблицыИзСценария[1];
		
		ЭталонныеЗначения = ЗначенияИзСтрокиТаблицыGherkin(СтрокаЭталонноеЗначение);
		СчетчикКолонок = -1;
		Для СчетчикТекущихЗначений = 0 По ЭталонныеЗначения.Количество() - 1 Цикл
			СчетчикКолонок = СчетчикКолонок + 1;
			ТекЗначение = ЭталонныеЗначения[СчетчикТекущихЗначений];
			Если Найти(ТекЗначение, "*") > 0 ИЛИ Найти(ТекЗначение, "$") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКолонки = УбратьАпострофы(Колонки[СчетчикКолонок].Значение);
			НовоеЗначение = СтрокаТекущееЗначение[ИмяКолонки];
			Если НовоеЗначение = Неопределено Тогда
				ВызватьИсключение ПодставитьПараметрыВСтроку(Локализовать("В текущем значении таблицы не найдена колонка <%1>."), ИмяКолонки);
			КонецЕсли;
			
			НовоеЗначение = "'" + СтрЗаменить(НовоеЗначение, "'", "\'") + "'";
			НовоеЗначение = СтрЗаменить(НовоеЗначение, "|", "\|");
			ЭталонныеЗначения[СчетчикТекущихЗначений].Значение = НовоеЗначение;
			
		КонецЦикла;
		
		МассивСтрокТаблицыИзСценария[1] = "|" + _СтрСоединить(ЭталонныеЗначения.ВыгрузитьЗначения(), "|") + "|";
		
		ФорматироватьМассивСтрокКакТаблицу(МассивСтрокТаблицыИзСценария);
		
		ЗаменитьТаблицуGherkinПослеРедактирования(МассивСтрокТаблицыИзСценария, НомерПервойСтрокиТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьМакетПриСравненииМакетовТаблицыОбработчикОжидания()
	АктуализироватьМакетПриСравненииМакетов(глДопПараметры.НомерСтрокиВФиче, глДопПараметры.ПроизвольныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьМакетПриСравненииМакетов(НомерСтрокиВФиче, ДанныеДляАктуализации)
	
	Если НЕ Объект.ИспользоватьРедакторVanessaEditor Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ФункциональностьЗакладки.ТекущаяСтраница <> Элементы.ГруппаЗапускТестов Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ДанныеДляАктуализации.Свойство("ТаблицаТекущееЗначение") Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ДанныеДляАктуализации.Свойство("ТаблицаЭталон") Тогда
		Возврат;
	КонецЕсли;	
	
	//Созздаём переменные ТаблицаТекущееЗначение и ТаблицаЭталон
	Если ТипЗнч(ДанныеДляАктуализации.ТаблицаТекущееЗначение) = Тип("Структура") Тогда
		ТаблицаТекущееЗначение = ДанныеДляАктуализации.ТаблицаТекущееЗначение.Значение;
	Иначе	
		ТаблицаТекущееЗначение = ДанныеДляАктуализации.ТаблицаТекущееЗначение;
	КонецЕсли;	
	Если ТипЗнч(ДанныеДляАктуализации.ТаблицаТекущееЗначение) = Тип("Структура") Тогда
		ТаблицаЭталон = ДанныеДляАктуализации.ТаблицаЭталон.Значение;
	Иначе	
		ТаблицаЭталон = ДанныеДляАктуализации.ТаблицаЭталон;
	КонецЕсли;	
	
	Если ТипЗнч(ТаблицаТекущееЗначение) = Тип("ТабличныйДокумент") Тогда
		КоличествоСтрокТаблицаТекущееЗначение = ТаблицаТекущееЗначение.ВысотаТаблицы;
	Иначе
		КоличествоСтрокТаблицаТекущееЗначение = ТаблицаТекущееЗначение.Количество();
	КонецЕсли;	
	
	Если ТипЗнч(ТаблицаЭталон) = Тип("ТабличныйДокумент") Тогда
		КоличествоСтрокТаблицаЭталон = ТаблицаЭталон.ВысотаТаблицы;
	Иначе
		КоличествоСтрокТаблицаЭталон = ТаблицаЭталон.Количество();
	КонецЕсли;	
	
	Если ТипЗнч(ТаблицаТекущееЗначение) = Тип("ТабличныйДокумент") Тогда
		КоличествоКолонокТаблицаТекущееЗначение = ТаблицаТекущееЗначение.ВысотаТаблицы;
	Иначе
		КоличествоКолонокТаблицаТекущееЗначение = ТаблицаТекущееЗначение[0].Количество();
	КонецЕсли;	
	
	Если ТипЗнч(ТаблицаЭталон) = Тип("ТабличныйДокумент") Тогда
		КоличествоКолонокТаблицаЭталон = ТаблицаЭталон.ВысотаТаблицы;
	Иначе
		КоличествоКолонокТаблицаЭталон = ТаблицаЭталон[0].Количество();
	КонецЕсли;	
	
	РазноеКоличествоСтрок = КоличествоСтрокТаблицаТекущееЗначение <> КоличествоСтрокТаблицаЭталон;
	РазноеКоличествоКолонок = КоличествоКолонокТаблицаТекущееЗначение <> КоличествоКолонокТаблицаЭталон;
	
	Если (РазноеКоличествоСтрок ИЛИ РазноеКоличествоКолонок) И ВТаблицеЭталонаЕстьСимволыЗвездочкаИлиДоллар(ДанныеДляАктуализации) Тогда
		ТекстВопроса = ПодставитьПараметрыВСтроку(Ванесса.Локализовать("Файл <%1> будет перезаписан. При этом также будут заменены значения содержащие символы * и $. Вы уверены?"),
			ДанныеДляАктуализации.ИмяФайлаМакета);
	Иначе	
		ТекстВопроса = ПодставитьПараметрыВСтроку(Ванесса.Локализовать("Файл <%1> будет перезаписан. Вы уверены?"),
			ДанныеДляАктуализации.ИмяФайлаМакета);
	КонецЕсли;	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ДанныеДляАктуализации", ДанныеДляАктуализации);
	ДопПараметры.Вставить("РазноеКоличествоСтрок", РазноеКоличествоСтрок);
	ДопПараметры.Вставить("РазноеКоличествоКолонок", РазноеКоличествоКолонок);
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.ОК);
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("АктуализироватьМакетПриСравненииМакетовПродолжение", ЭтаФорма, ДопПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьМакетПриСравненииМакетовПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		ДанныеДляАктуализации = ДополнительныеПараметры.ДанныеДляАктуализации;
		РазноеКоличествоСтрок = ДополнительныеПараметры.РазноеКоличествоСтрок;
		РазноеКоличествоКолонок = ДополнительныеПараметры.РазноеКоличествоКолонок;
		
		Если РазноеКоличествоСтрок ИЛИ РазноеКоличествоКолонок Тогда
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ДанныеДляАктуализации", ДанныеДляАктуализации);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьЗаписьМакетаПослеАктуализации", ЭтаФорма, ДопПараметры);
			
			Если ТипЗнч(ДанныеДляАктуализации.ТаблицаТекущееЗначение) = Тип("ТабличныйДокумент") Тогда
				ТаблицаТекущееЗначение = ДанныеДляАктуализации.ТаблицаТекущееЗначение;
			ИначеЕсли ТипЗнч(ДанныеДляАктуализации.ТаблицаТекущееЗначение.Значение) = Тип("ТабличныйДокумент") Тогда
				ТаблицаТекущееЗначение = ДанныеДляАктуализации.ТаблицаТекущееЗначение.Значение;
			Иначе
				ТаблицаТекущееЗначение = ТабличыйДокументПоМассивуМассивов(ДанныеДляАктуализации.ТаблицаТекущееЗначение.Значение);
			КонецЕсли;	
			ТаблицаТекущееЗначение.НачатьЗапись(ОписаниеОповещения,ДанныеДляАктуализации.ИмяФайлаМакета,ТипФайлаТабличногоДокумента.MXL);
			
		Иначе	
			
			ТаблицаТекущееЗначение = ДанныеДляАктуализации.ТаблицаТекущееЗначение;
			ТаблицаЭталон = ДанныеДляАктуализации.ТаблицаЭталон;
			Для СчСтрок = 1 По ТаблицаТекущееЗначение.ВысотаТаблицы Цикл
				Для СчКолонок = 1 По ТаблицаТекущееЗначение.ШиринаТаблицы Цикл
					ЗначениеЭталон = ТаблицаЭталон.Область(СчСтрок, СчКолонок, СчСтрок, СчКолонок).Текст;
					Если Найти(ЗначениеЭталон, "*") > 0 ИЛИ Найти(ЗначениеЭталон, "$") > 0 Тогда
						ТаблицаТекущееЗначение.Область(СчСтрок, СчКолонок, СчСтрок, СчКолонок).Текст = ЗначениеЭталон;
						Продолжить;
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;	
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ДанныеДляАктуализации", ДанныеДляАктуализации);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьЗаписьМакетаПослеАктуализации", ЭтаФорма, ДопПараметры);
			ДанныеДляАктуализации.ТаблицаТекущееЗначение.НачатьЗапись(ОписаниеОповещения,ДанныеДляАктуализации.ИмяФайлаМакета,ТипФайлаТабличногоДокумента.MXL);
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийVanessaEditor

&НаКлиенте
Процедура VanessaEditorДокументСформирован(Элемент)
	
	Если РедакторБылПроинициализирован = Истина Тогда
		Возврат;
	КонецЕсли;	 
	
	ИнициализироватьVanessaEditorКлиент();
	
	Если ВыполнитьПослеОткрытияФормы2 Тогда
		ВыполнитьПослеОткрытияФормы2 = Ложь;
		ПослеОткрытияФормы2();
	КонецЕсли;	
	
	Если ВыполнитьИнициализироватьVanessaEditorКлиент2 Тогда
		ВыполнитьИнициализироватьVanessaEditorКлиент2 = Ложь;
		ИнициализироватьVanessaEditorКлиент2();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура VanessaEditorПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)

	Element = ДанныеСобытия.Element;
	Если Element.id = "VanessaEditorEventForwarder" Тогда
		Пока Истина Цикл
			msg = Элементы.VanessaEditor.Document.defaultView.popVanessaMessage();
			Если (msg = Неопределено) Тогда Прервать; КонецЕсли;
			VanessaEditorOnReceiveEventHandler(msg.type, msg.data);
		КонецЦикла;
	ИначеЕсли КодСимвола(Element.innerText, 1) = 60020 Тогда
		//кнопка "i" во всплывающем окошке с информацией о шаге
		МодульРедакторТекста().ПоказатьПодробнуюИнформациюОШаге(Element.title);
	ИначеЕсли КодСимвола(Element.innerText, 1) = 60277 Тогда
		ОзвучитьСтрокуСценарияПоНомеру(Element.title);
	КонецЕсли;
	
	ИгнорироватьИзмененияVanessaEditor = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийДеревоGit

&НаКлиенте
Процедура ДеревоGitПриАктивизацииСтроки(Элемент)
	МодульРаботаСGit().ДеревоGitПриАктивизацииСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоGitОбновить(Команда)
	
	МодульРаботаСGit().ПриИзменениПроекта();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоGitДобавитьВИндекс(Команда)
	МодульРаботаСGit().ДеревоGitДобавитьВИндекс();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоGitУбратьИзИндекса(Команда)
	МодульРаботаСGit().ДеревоGitДобавитьУбратьИзИндекса();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоGitЗафиксировать(Команда)
	МодульРаботаСGit().ДеревоGitЗафиксировать();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоGitНастройки(Команда)
	МодульРаботаСGit().ДеревоGitНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоGitВыборВетки(Команда)
	МодульРаботаСGit().ДеревоGitВыборВетки();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоGitPull(Команда)
	МодульРаботаСGit().ДеревоGitPull();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоGitPush(Команда)
	МодульРаботаСGit().ДеревоGitPush();
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийРаботыСДревомФайлов

&НаКлиенте
Процедура ПутьКПапкеGitНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Каталог = ПутьКПапкеGit;
	Если ЗапрещеныСинхронныеВызовы Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПутьКПапкеGitНачалоВыбора", ЭтаФорма);
		ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	Иначе	
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			ПутьКПапкеGit = ДиалогОткрытияФайла.Каталог;
			ПутьКПапкеСФичамиПриИзменении();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПутьКПапкеGitНачалоВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	ПутьКПапкеGit = ВыбранныеФайлы[0];
	ПутьКПапкеGitПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ПутьКПапкеСФичамиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Каталог = ПутьКПапкеСФичами;
	Если ЗапрещеныСинхронныеВызовы Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборПапкиФичДляДреваФайлов", ЭтаФорма);
		ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	Иначе	
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			ПутьКПапкеСФичами = ДиалогОткрытияФайла.Каталог;
			ПутьКПапкеСФичамиПриИзменении();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПапкиФичДляДреваФайлов(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	ПутьКПапкеСФичами = ВыбранныеФайлы[0];
	ПутьКПапкеСФичамиПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоФайлов()
	ДревоФайлаФич.ПолучитьЭлементы().Очистить();
	
	ПутьКПапкеСФичами = СокрЛП(ПутьКПапкеСФичами);
	Если ЭтоLinux Тогда
		ПутьКПапкеСФичами = СтрЗаменить(ПутьКПапкеСФичами,"\","/");
	Иначе	
		ПутьКПапкеСФичами = СтрЗаменить(ПутьКПапкеСФичами,"/","\");
	КонецЕсли;
	
	ПервыеДваСимвола = Лев(ПутьКПапкеСФичами, 2);
	ВтораяЧасть = Сред(ПутьКПапкеСФичами, 3);
	Пока Найти(ВтораяЧасть, "\\") > 0 Цикл
		ВтораяЧасть = СтрЗаменить(ВтораяЧасть, "\\", "\");
	КонецЦикла;	 
	Пока Найти(ВтораяЧасть, "//") > 0 Цикл
		ВтораяЧасть = СтрЗаменить(ВтораяЧасть, "//", "/");
	КонецЦикла;	 
	
	ПутьКПапкеСФичами = ПервыеДваСимвола + ВтораяЧасть;
	
	Если ПустаяСтрока(СтрокаДляПоискаВнутриФичи) ИЛИ НЕ Объект.ИспользоватьКомпонентуVanessaExt Тогда
		ДополнительныеПараметры = Новый Структура;
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьДеревоФайловОбработчикНачатьПоискФайлов", Этаформа, ДополнительныеПараметры);
		НачатьПоискФайлов(ОписаниеОповещения, ПутьКПапкеСФичами, "*.feature", Истина); 
	Иначе	
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ПутьКПапкеСФичами", ПутьКПапкеСФичами);
		ДопПараметры.Вставить("СтрокаДляПоискаВнутриФичи", СтрокаДляПоискаВнутриФичи);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОкончаниеПоискаФайловДеревоКаталогов", ЭтаФорма, ДопПараметры);
		НачатьПоискФайлов(ОписаниеОповещения, ПутьКПапкеСФичами, "*.feature", Истина); 
		
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ОкончаниеПоискаФайловДеревоКаталогов(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	Спс = Новый СписокЗначений;
	
	СтрокаПоиска = НРег(ДополнительныеПараметры.СтрокаДляПоискаВнутриФичи);
	СтрокаПоиска = СтрЗаменить(СтрокаПоиска, ".feature", "");
	Для Каждого ТекФайл Из НайденныеФайлы Цикл
		Если Найти(НРег(ТекФайл.Имя), СтрокаПоиска) > 0 Тогда
			Спс.Добавить(ТекФайл, ТекФайл.Имя);
		КонецЕсли;	 
	КонецЦикла;
	
	ДобавленныеЭлементы = Новый Соответствие;
	
	Спс.СортироватьПоПредставлению();
	Для Каждого Элем Из Спс Цикл
		ЭлРодителя = ДревоФайлаФич;
		
		ФайлФичи = Элем.Значение;
		
		ОснЭлементы = ЭлРодителя.ПолучитьЭлементы();
		Нов = ОснЭлементы.Добавить();
		Нов.Имя = ФайлФичи.Имя;
		Нов.Имя = Лев(Нов.Имя, СтрДлина(Нов.Имя) - 8); 
		Нов.ПолныйПуть = ФайлФичи.ПолноеИмя;
		Нов.Картинка = ПиктограммаФайлаДреваФайлов(ФайлФичи.Расширение, Ложь);
		Нов.ЭтоПапка = Ложь;
		
		ДобавленныеЭлементы.Вставить(НРег(Нов.Имя), Истина);
	КонецЦикла;	 
	
	ДополнительныеПараметры.Вставить("ДобавленныеЭлементы", ДобавленныеЭлементы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученРезультатПоиска", ЭтаФорма, ДополнительныеПараметры);
	ВнешняяКомпонентаДляСкриншотов.НачатьВызовНайтиФайлы(ОписаниеОповещения,
		ДополнительныеПараметры.ПутьКПапкеСФичами, "*.feature", ДополнительныеПараметры.СтрокаДляПоискаВнутриФичи, Истина);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолученРезультатПоиска(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ДобавленныеЭлементы = ДополнительныеПараметры.ДобавленныеЭлементы;
	
	Данные = ПрочитатьСтрокуJSON(РезультатВызова);
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		Для каждого ДанныеФайла Из Данные Цикл
			ФайлФичи =  Новый Файл(ДанныеФайла.path);
			ЭлРодителя = ДревоФайлаФич;
			
			ОснЭлементы = ЭлРодителя.ПолучитьЭлементы();
			
			Имя = ФайлФичи.Имя;
			Имя = Лев(Имя, СтрДлина(Имя) - 8); 
			
			Если ДобавленныеЭлементы[НРег(Имя)] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;	 
			
			Нов = ОснЭлементы.Добавить();
			Нов.Имя = Имя;
			Нов.ПолныйПуть = ФайлФичи.ПолноеИмя;
			Нов.Картинка = ПиктограммаФайлаДреваФайлов(ФайлФичи.Расширение, Ложь);
			Нов.ЭтоПапка = Ложь;
			
			//Если НЕ ЗапрещеныСинхронныеВызовы Тогда
			//	Нов.РазмерФайла = ?(Ложь, 0, ФайлФичи.Размер());
			//КонецЕсли;	 
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьДеревоФайловОбработчикНачатьПоискФайлов(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	Каталоги = Новый Соответствие;
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов = Новый СписокЗначений;
	БазовыйПуть = УниверсальноеПолноеИмяФайла(ДополнитьСлешВПуть(ПутьКПапкеСФичами));
	Для Каждого ТекФайл Из НайденныеФайлы Цикл
		СписокФайлов.Добавить(ТекФайл, ТекФайл.ПолноеИмя);
		Путь = УниверсальноеПолноеИмяФайла(ТекФайл.Путь);
		Поз = Найти(Путь, БазовыйПуть);
		ОтносительныйПуть = Сред(Путь, Поз + СтрДлина(БазовыйПуть));
		Если Прав(ОтносительныйПуть, 1) = "/" Тогда
			ОтносительныйПуть = Лев(ОтносительныйПуть, СтрДлина(ОтносительныйПуть) - 1);
		КонецЕсли;	 
		
		Если Найти(ОтносительныйПуть, "/") > 0 Тогда
			МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(ОтносительныйПуть, "/");
			Стр = "";
			Для Каждого Элем Из МассивСтрок Цикл
				Если НЕ ПустаяСтрока(Стр) Тогда
					Стр = Стр + "/";
				КонецЕсли;	 
				Стр = Стр + Элем; 
				
				Если НЕ ПустаяСтрока(Стр) Тогда
					Каталоги.Вставить(Стр, Истина);
				КонецЕсли;	 
			КонецЦикла;	 
		КонецЕсли;	 
		
		Если НЕ ПустаяСтрока(ОтносительныйПуть) Тогда
			Каталоги.Вставить(ОтносительныйПуть, Истина);
		КонецЕсли;	 
	КонецЦикла;	
	
	Для Каждого Элем Из Каталоги Цикл
		СписокКаталогов.Добавить(Элем.Ключ);
	КонецЦикла;	 
	
	СписокФайлов.СортироватьПоПредставлению();
	СписокКаталогов.СортироватьПоЗначению();
	
	СозданныеКаталоги = Новый Соответствие;
	Для Каждого Элем Из СписокКаталогов Цикл
		МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Элем.Значение, "/");
		ЭлРодителя = ДревоФайлаФич;
		ЭтоПапка = Истина;
		ПолныйПуть = ПутьКПапкеСФичами;
		Для Каждого СтрКаталога Из МассивСтрок Цикл
			ПолныйПуть = ДополнитьСлешВПуть(ДополнитьСлешВПуть(ПолныйПуть) + СтрКаталога);
			ЭлементДерева = СозданныеКаталоги[ПолныйПуть];
			
			Если ЭлементДерева = Неопределено Тогда
				ОснЭлементы = ЭлРодителя.ПолучитьЭлементы();
				СтрокаДереваКаталог = ОснЭлементы.Добавить();
				СтрокаДереваКаталог.Имя = СтрКаталога;
				СтрокаДереваКаталог.ПолныйПуть = ПолныйПуть;
				СтрокаДереваКаталог.Картинка = ПиктограммаФайлаДреваФайлов("", ЭтоПапка);
				СтрокаДереваКаталог.ЭтоПапка = ЭтоПапка;
				СтрокаДереваКаталог.РазмерФайла = 0;
				
				СозданныеКаталоги.Вставить(ПолныйПуть, СтрокаДереваКаталог);
				ЭлРодителя = СтрокаДереваКаталог;
			Иначе
				ЭлРодителя = ЭлементДерева;
			КонецЕсли;	 
		КонецЦикла;	 
	КонецЦикла;	 
	
	Для Каждого Элем Из СписокФайлов Цикл
		ФайлФичи = Элем.Значение;
		ЭлРодителя = СозданныеКаталоги[ФайлФичи.Путь];
		
		Если ЭлРодителя = Неопределено Тогда
			ЭлРодителя = ДревоФайлаФич;
		КонецЕсли;	 
		
		ОснЭлементы = ЭлРодителя.ПолучитьЭлементы();
		Нов = ОснЭлементы.Добавить();
		Нов.Имя = ФайлФичи.Имя;
		Нов.Имя = Лев(Нов.Имя, СтрДлина(Нов.Имя) - 8); 
		Нов.ПолныйПуть = ФайлФичи.ПолноеИмя;
		Нов.Картинка = ПиктограммаФайлаДреваФайлов(ФайлФичи.Расширение, Ложь);
		Нов.ЭтоПапка = Ложь;
		
		Если НЕ ЗапрещеныСинхронныеВызовы Тогда
			Нов.РазмерФайла = ?(Ложь, 0, ФайлФичи.Размер());
		КонецЕсли;	 
		
	КонецЦикла;	 
	
	СозданныеКаталоги.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура НайтиПустыеКаталогиВДеревеФайловРекурсивно(ЭлРодителя, УзлыДерева)
	Для Каждого СтрокаДерева Из ЭлРодителя.ПолучитьЭлементы() Цикл
		Если СтрокаДерева.КоличествоФайлов = 0 И СтрокаДерева.ЭтоПапка Тогда
			УзлыДерева.Добавить(СтрокаДерева);
		КонецЕсли;	 
		
		Если СтрокаДерева.ЭтоПапка Тогда
			НайтиПустыеКаталогиВДеревеФайловРекурсивно(СтрокаДерева, УзлыДерева)
		КонецЕсли;	 
		
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Процедура ПутьКПапкеGitПриИзменении()
	
	МодульРаботаСGit().ПриИзменениПроекта();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОтображенияОтличийВРедактореПриИзменении(Элемент)
	
	МодульРаботаСGit().ВидОтображенияОтличийВРедактореПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКПапкеСФичамиПриИзменении()
	ОбновитьДеревоФайлов();
КонецПроцедуры

&НаКлиенте
Процедура ДревоФайлаФичВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДревоФайлаФичВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	ТекСтрока = ДревоФайлаФич.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Объект.КаталогФич = ТекСтрока.ПолныйПуть Тогда
		Возврат;
	КонецЕсли;
	
	Если МодульРедакторТекста().СуществуетВкладкаСФайлом(ТекСтрока.ПолныйПуть) Тогда
		Объект.КаталогФич = ТекСтрока.ПолныйПуть;
		МодульРедакторТекста().АктивизироватьВкладкуПоИмениФайла(ТекСтрока.ПолныйПуть);
		Возврат;
	КонецЕсли;	 
	
	Объект.текЗначениеОперации = "ЗагрузитьОднуФичу";
	ОбновитьКнопкуЗагрузитьФичи();
	
	Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага                  = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением     = Ложь;
	Объект.РежимВыполненияОдногоШага                                    = Ложь;
	СтрокаШагаСКоторогоНадоВыполнятьСценарий      = Неопределено;
	МассивСостоянияКонтекстовДоВыполненияШага     = Новый Массив;

	ОчиститьСообщения();
	КешStepDefinition.Очистить();
	Элементы.ДревоФайлаФич.ТолькоПросмотр = Истина;
	Объект.КаталогФич = ТекСтрока.ПолныйПуть;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СделатьПереходкКТексту", СтрокаДляПоискаВнутриФичи);
	
	ЗагрузитьФичи(ДопПараметры);
	
	Элементы.ДревоФайлаФич.ТолькоПросмотр = Ложь;
КонецПроцедуры

&НаКлиенте
Функция ПиктограммаФайлаДреваФайлов(РасширениеФайла, ЭтоПапка)
	
	Если ЭтоПапка Тогда
		Возврат глСтруктураКартинокДляДереваФайлов.Папка;
	КонецЕсли; 
	
	Если ТипЗнч(РасширениеФайла) <> Тип("Строка")
	 ИЛИ ПустаяСтрока(РасширениеФайла) Тогда
		
		Возврат Новый Картинка;
	КонецЕсли;
	
	Расширение = НРег(РасширениеФайла) + ";";
	
	Если Найти(".feature;", Расширение) <> 0 Тогда
		Возврат глСтруктураКартинокДляДереваФайлов.Фича;
	Иначе	
		Возврат Новый Картинка;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция СтруктураКартинокДляДереваФайлов()
	СтруктураКартинок = Новый Структура;
	
	БинДата = Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNBNAaMQAAADfSURBVDhPzZIxCsJAEEUnWoiIFpZioSAmvWewSZ/KC3gQvYWQRBsNgoWllRYxyQWsvYfOOElWMDJL0unAa3b/f7sLC/8xFEAdfbDJBecNbqCjtssHPViQB/QJuhBWlnAh+BboYDHygStVzYc3KgtSWPBU1Xx4MResa0TnAVFilYKJecdoPCwK9i0xrANjc1YUHLtiUEtkTYqCU08OCvDpDwz7zaLgMhTDEhhbt6ycTibwDaLYFMMSmFg7VeeP5MOStg0xqIOfMFd1vkH6lQ9tm2/gVAGvoykRGKr+0wF4AcuwnH7NRP3CAAAAAElFTkSuQmCC");
	КартинкаПапки = Новый Картинка(БинДата);
	СтруктураКартинок.Вставить("Папка", КартинкаПапки); 
	
	БинДата = Base64Значение("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEwAACxMBAJqcGAAAALdJREFUOI1jYKAQMCJzJOv/i/z+9zuNkYGRDV3h37/Ms9+1MT3Fa5pI7a8q4dJ/vOjiorW/G4Trfn4Rrf/Pgy7HhOocRra33UyfsRnOxsimwPD3z2mG0P/MOA3ABf4z/v/9k+H/r3/MfwNFNH8vQJZjIcYAlt8ss/6w/sll/M/MysDIIItToWjt7wZChqGrIcoL+MCoAYPBAJSE9I+J4ZxI7e8pjAwMb3Bp+Mf4r4yBgaGBUovhAABRuTXDh77u/QAAAABJRU5ErkJggg==");
	КартинкаФичи = Новый Картинка(БинДата);
	СтруктураКартинок.Вставить("Фича", КартинкаФичи); 
	
	Возврат СтруктураКартинок;
КонецФункции

&НаКлиенте
Процедура СтрокаДляПоискаВнутриФичиПриИзменении(Элемент)
	ОбновитьДеревоФайлов();
КонецПроцедуры

#КонецОбласти

#Область СтатистикаВыполненияТестов

&НаКлиенте
Процедура ИнициализироватьПараметрыСтатистикиТестов()
	
	ПараметрыСтатистикаВыполненияТестов		 = Новый Структура;
	ПараметрыСтатистикаВыполненияТестов.Вставить("ВыполненоУспех",		0);
	ПараметрыСтатистикаВыполненияТестов.Вставить("ВыполненоОшибка",		0);
	ПараметрыСтатистикаВыполненияТестов.Вставить("ВыполненоПропуск",	0);
	
	ПараметрыСтатистикаВыполненияТестов.Вставить("_ПрогрессТ1",				ТекущаяУниверсальнаяДатаВМиллисекундах());
	ПараметрыСтатистикаВыполненияТестов.Вставить("_ПрогрессПредЗначение",	0);
	
	
КонецПроцедуры

&НаКлиенте
Процедура Статистика_ЗафиксироватьУспех()
	
	ПараметрыСтатистикаВыполненияТестов.ВыполненоУспех = ПараметрыСтатистикаВыполненияТестов.ВыполненоУспех + 1;
	
КонецПроцедуры

&НаКлиенте
Процедура Статистика_ЗафиксироватьОшибка()
	
	ПараметрыСтатистикаВыполненияТестов.ВыполненоОшибка = ПараметрыСтатистикаВыполненияТестов.ВыполненоОшибка + 1;
	
КонецПроцедуры

&НаКлиенте
Процедура Статистика_ЗафиксироватьПропуск()
	
	ПараметрыСтатистикаВыполненияТестов.ВыполненоПропуск = ПараметрыСтатистикаВыполненияТестов.ВыполненоПропуск + 1;
	
КонецПроцедуры

&НаКлиенте
Процедура Статистика_ЗафиксироватьСтатус(Статус)
	
	Если Статус = "Success" Тогда
		
		Статистика_ЗафиксироватьУспех();
		
	ИначеЕсли СтатусСценарияСоответствуетВыполненСОшибкой(Статус) Тогда
		
		Статистика_ЗафиксироватьОшибка();
		
	ИначеЕсли Статус = "Pending" Тогда
		
		Статистика_ЗафиксироватьПропуск();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеТекущегоСостояниеВыполненияТестов(ИдСценария)
	
	ПроцентВыполнения	= 0;
	ПроцентУспех		= 0;
	ПроцентОшибок		= 0;
	ВсегоСценариев		= МассивСценариевДляВыполнения.Количество();
	ТекВыполнено		= МассивРезультатПрохожденияТестовСценария.Количество() - 1; // Исключаем текущий сценарий
	
	Если ВсегоСценариев > 0 Тогда
		
		ПроцентВыполнения = Цел(ИдСценария / ВсегоСценариев * 100);
		
	КонецЕсли;
	
	Если ТекВыполнено > 0 Тогда
	
		ПроцентУспех	= Цел(ПараметрыСтатистикаВыполненияТестов.ВыполненоУспех / ТекВыполнено * 100);
		ПроцентОшибок	= Цел(ПараметрыСтатистикаВыполненияТестов.ВыполненоОшибка / ТекВыполнено * 100);
		
	КонецЕсли;
		
	ШаблонТекстСообщения = 
	"Stage: %1%
	|------------
	|Total:   %2
	|Current: %3 
	|Success: %4 (%5%)
	|Error:   %6 (%7%)
	|Skipped: %8
	|------------
	|Time: %9
	|------------";
	
	ТекстСообщения = ПодставитьПараметрыВСтроку(ШаблонТекстСообщения
													, ПроцентВыполнения
													, ВсегоСценариев
													, ТекВыполнено
													, ПараметрыСтатистикаВыполненияТестов.ВыполненоУспех
													, ПроцентУспех
													, ПараметрыСтатистикаВыполненияТестов.ВыполненоОшибка
													, ПроцентОшибок
													, ПараметрыСтатистикаВыполненияТестов.ВыполненоПропуск
													, Статистика_ВывестиВремяВыполнения(?(ВсегоСценариев = 0, 0, ТекВыполнено / ВсегоСценариев)));
	
	Возврат ТекстСообщения;
	
КонецФункции

&НаКлиенте
Функция Статистика_ВывестиВремяВыполнения(КоэфВыполнения)
	
	Т2 = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ДельтаТ = Т2 - ПараметрыСтатистикаВыполненияТестов._ПрогрессТ1;
	
	ПараметрыСтатистикаВыполненияТестов._ПрогрессПредЗначение = Т2;
	
	ПрошлоСекунд			= Окр(ДельтаТ * 0.001);
	Если КоэфВыполнения = 0 Тогда
		
		ОсталосьСекунд = 86400;
		
	Иначе
		
		ВсегоТ					= ДельтаТ / КоэфВыполнения;
		ОсталосьТ 				= ВсегоТ - ДельтаТ;
		ОсталосьСекунд 			= Окр(ОсталосьТ * 0.001);
		
	КонецЕсли;
	
	
	
	Возврат ПодставитьПараметрыВСтроку("spend: ~%1 to end: ~%2"
										, ПолучитьВремя(ПрошлоСекунд)
										, ПолучитьВремя(ОсталосьСекунд));
	
КонецФункции

&НаКлиенте
Функция ПолучитьВремя(Секунды)
	чч = Формат(Цел(Секунды / 3600),		"ЧЦ=2; ЧН=; ЧВН=");
	мм = Формат(Цел(Секунды % 3600 / 60),	"ЧЦ=2; ЧН=; ЧВН=");
	сс = Формат(Секунды % 60,				"ЧЦ=2; ЧН=; ЧВН=");
	Возврат чч + ":" + мм + ":" + сс;
КонецФункции

&НаКлиенте
Процедура ОткрытьФайлДокументации(Команда)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = "Выберите файл документации";
	ДиалогОткрытияФайла.Фильтр = "Файл документации (*.md)|*.md";
	Если ЗапрещеныСинхронныеВызовы Тогда
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработатьВыборФайлаДокументации"", ЭтаФорма)");
		Выполнить("ДиалогОткрытияФайла.Показать(ОписаниеОповещения)");
	Иначе	
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			ПоказатьФайлДокументации(ДиалогОткрытияФайла.ПолноеИмяФайла);
		КонецЕсли;
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайлаДокументации(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьФайлДокументации(ВыбранныеФайлы[0]);
	
КонецПроцедуры

#КонецОбласти

#Область ТестированиеМобильной

&НаКлиенте
Процедура ПроверкаПодключенияКМобильномуУстройству(Команда) 
	Если ВозможноЗапуститьМобильныйКлиент() Тогда
		СообщитьПользователю(Локализовать("Мобильное устройство успешно найдено"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ВозможноЗапуститьМобильныйКлиент()
	
	#Если НЕ ВебКлиент Тогда
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("log");
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(Объект.ПутьКadb + "adb devices > " + ИмяВременногоФайла);
	Если ФайлСуществуетКомандаСистемы(ИмяВременногоФайла) Тогда
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяВременногоФайла);
		Данные = Текст.Прочитать();
		Текст.Закрыть();	
	КонецЕсли;            
	
	СлужебноеСообщение = "List of devices attached";
	ИщемСоответствие = Найти(Данные, СлужебноеСообщение);
	Если Не ИщемСоответствие Тогда
		СообщитьПользователю(Локализовать("Ошибка. Возможно не найдена программа adb. Установите ее, или пропишите к ней путь."));
		Возврат Ложь;
	КонецЕсли;                                                                                                                    
	
	МассивУстройств = РазложитьСтрокуВМассивПодстрокКлиент(Данные, Символы.ПС, Истина);
	МассивАктивныхУстройств = Новый Массив;
	УжеИдутУстройства = Ложь;
	Для ИндексСтроки = 0 По МассивУстройств.Количество() - 1 Цикл
		Если Не УжеИдутУстройства Тогда
			Если СокрЛП(МассивУстройств[ИндексСтроки]) = СлужебноеСообщение Тогда
				УжеИдутУстройства = Истина;
			КонецЕсли;
			Продолжить; 
		КонецЕсли;
		МассивАктивныхУстройств.Добавить(МассивУстройств[ИндексСтроки]);
	КонецЦикла;
	
	Если НЕ МассивАктивныхУстройств.Количество() Тогда
		СообщитьПользователю(Локализовать("Не найдено подключенных устройств."));
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьМобильныйКлиент(Команда)
	СтартМобильногоКлиента("com.e1c.mobile.client");
КонецПроцедуры

&НаКлиенте
Процедура СтартМобильногоКлиента(ВидПриложения)
	УбитьМобильныйКлиент(ВидПриложения);
	ЗапускМобильныйКлиент(ВидПриложения);
КонецПроцедуры

&НаКлиенте
Процедура СтартМобильногоКлиентаТестирования(ДанныеЗапускаКлиентаТестирования, ТипКлиента, ТаймаутЗапуска)
	Если ТипКлиента = "МобильныйКлиент" Тогда
		ВидПриложения = "com.e1c.mobile.client";
	ИначеЕсли ТипКлиента = "МобильныйКлиентАвтономный" Тогда
		ВидПриложения = "com.e1c.mobile.standalone";
	ИначеЕсли ТипКлиента = "МобильноеПриложение" Тогда
		ВидПриложения = "com.e1c.mobile";	
	Иначе
		ВызватьИсключение ТипКлиента;
	КонецЕсли;
	СтартМобильногоКлиента(ВидПриложения);
	Sleep(1);
	СтрокаЗапуска = "adb shell am broadcast --user current -n " + ВидПриложения + "/com.e1c.mobile.Starter -a com.e1c.mobile.START_CMD -e cmd '%1'";
	СтрокаЗапуска = ПодставитьПараметрыВСтроку(СтрокаЗапуска, ДанныеЗапускаКлиентаТестирования);
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(Объект.ПутьКadb + СтрокаЗапуска);
	Sleep(ТаймаутЗапуска);
КонецПроцедуры

&НаКлиенте
Процедура УбитьМобильныйКлиент(ВидПриложения)
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(Объект.ПутьКadb + "adb shell am force-stop " + ВидПриложения);
КонецПроцедуры      

&НаКлиенте
Процедура ЗапускМобильныйКлиент(ВидПриложения)
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(Объект.ПутьКadb + "adb shell am start -n " + ВидПриложения + "/com.e1c.mobile.App -a android.intent.action.MAIN -c android.intent.category.LAUNCHER");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуЗапускаМобильныйКлиент(ДанныеЗапускаКлиентаТестирования)
	СтрокаЗапуска = "";
	Если ДанныеЗапускаКлиентаТестирования.ТипКлиента = "МобильноеПриложение" Тогда
		СтрокаЗапуска = "/IBName" + СокрЛП(ДанныеЗапускаКлиентаТестирования.ИмяБазыНаМобильномУстройстве);
	Иначе         
		СтрокаЗапуска = СокрЛП(ДанныеЗапускаКлиентаТестирования.ПутьКИнфобазе);
		Если Найти(ВРег(СтрокаЗапуска), ВРег("ws=")) > 0 Тогда
			СтрокаЗапуска = СтрЗаменить(СтрокаЗапуска, "ws=", " /WS");
		КонецЕсли;
		
		Если Не Найти(ВРег(СтрокаЗапуска), ВРег("/WS")) Тогда
			СтрокаЗапуска = "/WS """ + СтрокаЗапуска + """";
		КонецЕсли;   
	КонецЕсли;
	
	СтрокаЗапуска = СтрокаЗапуска + " " + "/TestClient";
	ДанныеЗапускаКлиентаТестирования.Имя = "id" + СтрЗаменить(Новый УникальныйИдентификатор(), "-", "");
	СтрокаЗапуска = СтрокаЗапуска + " -TPort " + Формат(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента, "ЧГ=; ЧН=0") + " ";	
	
	Если ДанныеЗапускаКлиентаТестирования.ТипКлиента = "МобильноеПриложение" Тогда
		СтрокаЗапуска = СтрокаЗапуска + " -TURL" + СокрЛП(ДанныеЗапускаКлиентаТестирования.ПутьКИнфобазе) + " ";	
	КонецЕсли;  
	
	СтрокаЗапуска = СтрокаЗапуска + " " + "/TestClientID" + " " + ПолучитьКорректноеИмяTesClient(ДанныеЗапускаКлиентаТестирования.Имя);

	ПараметрыОтладчика = "";
	Если Объект.ЗапускатьТестКлиентВРежимеОтладки Тогда
		// /debug -http -attach /debuggerURL "http://localhost:1560"
		ПараметрыОтладчика = " /debug " + Объект.КлючиОтладки + " /debuggerURL """ + Объект.АдресОтладчика + """"; 
	КонецЕсли;
	
	ДопПараметр = ДанныеЗапускаКлиентаТестирования.ДопПараметры;
	Если ЭтоЗапускВРежимеКоманднойСтроки Тогда
		// добавил /CTemp, чтобы убрать передачу параметра /C в TestClient, с которым был запущен TestManager
		СтрокаЗапуска = СтрокаЗапуска + " /CTemp " + ДопПараметр; 
 	Иначе
		СтрокаЗапуска = ДопПараметр + " " + ПараметрыОтладчика + " " + СтрокаЗапуска;
	КонецЕсли;	
	
	Возврат СтрокаЗапуска;
КонецФункции

&НаКлиенте
Процедура СделатьСкриншотМобильногоКлиента(ДопПараметры)
	#Если НЕ ВебКлиент Тогда
	
	ИмяФайла = ДопПараметры.ИмяФайла;
	
	Если ТипЗнч(ИмяФайла) = Тип("Строка") Тогда
		ИмяФайлаСкриншота = ИмяФайла;
	Иначе	
		ИмяФайлаСкриншота = СформироватьИмяФайлаСкриншота();
		ИмяФайла.Добавить(ИмяФайлаСкриншота);
	КонецЕсли;	 
	
	Если ЭтоLinux Тогда
	Иначе
		ИмяФайлаСкриншота = СтрЗаменить(ИмяФайлаСкриншота, "/", "\");
	КонецЕсли;	 
	
	Попытка
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(Объект.ПутьКadb + "adb exec-out screencap -p >" + " """ + ИмяФайлаСкриншота + """");

		КоличествоПопыток = 0;
		МаксКоличествоПопыток = 5;
		Пока Истина Цикл
			Если ФайлСуществуетКомандаСистемы(ИмяФайлаСкриншота) Тогда
				Прервать;
			КонецЕсли;
			sleep(1);
			КоличествоПопыток = КоличествоПопыток + 1;
			Если КоличествоПопыток > МаксКоличествоПопыток Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПрикреплятьСкриншотКШагу = Истина;
		
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("ИмяФайла", ИмяФайлаСкриншота);
		Если ДопПараметры.Свойство("ИмяСкриншотаДляОтчета") Тогда
			ДанныеФайла.Вставить("ИмяСкриншотаДляОтчета", ДопПараметры.ИмяСкриншотаДляОтчета);
		КонецЕсли;	 
		ДанныеФайла.Вставить("ПрикреплятьСкриншотКШагу",ПрикреплятьСкриншотКШагу);
		
		ДобавитьИмяФайлаСкриншотаКСтрокеТекущегоСценария(ДанныеФайла);
		Если ПрикреплятьСкриншотКШагу Тогда
			ДанныеФайла = Новый Структура;
			ИмяФайлаСкриншота2 = ПолучитьИмяВременногоФайла("png");
			КопироватьФайлКомандаСистемы(ИмяФайлаСкриншота, ИмяФайлаСкриншота2);
			ДанныеФайла.Вставить("ИмяФайла", ИмяФайлаСкриншота2);
			Если ДопПараметры.Свойство("ИмяСкриншотаДляОтчета") Тогда
				ДанныеФайла.Вставить("ИмяСкриншотаДляОтчета", ДопПараметры.ИмяСкриншотаДляОтчета);
			КонецЕсли;	 
			ДанныеФайла.Вставить("ПрикреплятьСкриншотКШагу",ПрикреплятьСкриншотКШагу);
			
			ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
			РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
			РезультатПрохожденияТестовШагов = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
			РезультатПрохожденияШага = РезультатПрохожденияТестовШагов[РезультатПрохожденияТестовШагов.Количество() - 1];
			ДобавитьСкриншотКСценариюИлиШагу(РезультатПрохожденияШага, ДанныеФайла);
		КонецЕсли;	 
		
	Исключение
		СообщитьПользователю(ПодставитьПараметрыВСтроку(
			Локализовать("Ошибка создания скриншота:%1 команда:%2"),
			ОписаниеОшибки()
		));
	КонецПопытки;
	
	Если ДопПараметры.Свойство("ИмяПроцедуры") Тогда
		Если НЕ ПустаяСтрока(ДопПараметры.ИмяПроцедуры) Тогда
			ПодключитьОбработчикОжидания(ДопПараметры.ИмяПроцедуры, 0.1, Истина);
		КонецЕсли;	 
	КонецЕсли;	 
	
	#КонецЕсли
КонецПроцедуры

// Мобильное приложение

&НаКлиенте
Процедура ЗапуститьМобильноеПриложение(Команда)
	СтартМобильногоКлиента("com.e1c.mobile");
КонецПроцедуры

#КонецОбласти

#Область ИнтерактивнаяСправка

&НаКлиенте
Функция СгенерироватьMP3ДляИнтерактивнойСправки(ИмяФайла, ДанныеОшибки)
	
	Если НЕ ЗначениеЗаполнено(Объект.ЗаписьВидеоКэшФайловTTS) Тогда
		ВызватьИсключение Локализовать("Не указан каталог, где будет храниться кеш mp3 файлов.");
	КонецЕсли;	 
	
	ПодключитьБиблиотекуРаботыСВидео();
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");
	ТекстФайла = Текст.Прочитать();
	Текст.Закрыть();
	
	МассивСтрок = _СтрРазделить(ТекстФайла, Символы.ПС);
	КолШаговДляОзвучки = 0;
	Для Каждого Стр Из МассивСтрок Цикл
		Стр = СокрЛП(Стр);
		Если Лев(Стр, 1) = "*" Тогда
			КолШаговДляОзвучки = КолШаговДляОзвучки + 1;
		КонецЕсли;	 
	КонецЦикла;	 
	НомерШага = 0;
	ДанныеКэшMp3 = Неопределено;
	Для Каждого Стр Из МассивСтрок Цикл
		Стр = СокрЛП(Стр);
		Если Лев(Стр, 1) = "*" Тогда
			НомерШага = НомерШага + 1;
			
			ТекстШага = Сред(Стр, 2);
			
			ТекШаг = Новый Структура;
			ТекШаг.Вставить("ТекстИнструкция", ТекстШага);
			ТекШаг.Вставить("МассивТеговШага", Новый Массив);
			
			ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
			ПараметрыВидео.Вставить("ПоказатьСтрокуСостояния", Истина);
			ПараметрыВидео.Вставить("КоличествоШаговДляОзвучки", КолШаговДляОзвучки);
			ПараметрыВидео.Вставить("НомерШага", НомерШага);
			ПараметрыВидео.Вставить("ТекстДляТестаГолоса", ТекстШага);
			ПараметрыВидео.Вставить("ОзвучкаВыполненияСценария", Истина);
			ПараметрыВидео.Вставить("Шаг", ТекШаг);
			ПараметрыВидео.Вставить("КопироватьФайлMp3", Ложь);
			Если ДанныеКэшMp3 <> Неопределено Тогда
				ПараметрыВидео.Вставить("ДанныеКэшMp3", ДанныеКэшMp3);
			КонецЕсли;	 
			ИмяФайлаMp3 = МодульРаботыСВидео.ТестГолоса(ПараметрыВидео);
			Если ИмяФайлаMp3 = Неопределено Тогда
				ДанныеОшибки = ПараметрыВидео;
				Возврат Ложь;
			КонецЕсли;	 
			
			Если ПараметрыВидео.Свойство("ДанныеКэшMp3") Тогда
				ДанныеКэшMp3 = ПараметрыВидео.ДанныеКэшMp3;
			КонецЕсли;	 
			
		КонецЕсли;	 
	КонецЦикла;	 
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикНажатияГиперссылкиВФайлеMarkDown(Стр)
	
	Если НРег(Лев(СокрЛП(Стр), 4)) = "http" Тогда
		НачатьЗапускПриложения(ОписаниеПустогоОбработчика(2), Стр);
		Возврат;
	КонецЕсли;	 
	
	ЗапуститьУрокИнтерактивнойСправки(Стр);
	
КонецПроцедуры 

&НаСервере
Функция ЗаголовокКомандыСервер(Знач ИмяКоманды)
	Возврат Команды[ИмяКоманды].Заголовок;
КонецФункции	 

&НаСервере
Функция ЗаголовокЭлементаФормыVAИзДанныхОбъектаСервер(Знач ИмяЭлемента)
	
	ПутьКДанным = ВтораяЧастьВПутиКДанным(ИмяЭлемента);
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ДанныеРеквизита = ОбъектСервер.Метаданные().Реквизиты[ПутьКДанным];
	
	Возврат ДанныеРеквизита.Синоним;
	
КонецФункции	 

&НаСервере
Функция ИмяОбъектаДанныхЭлементаФормыVAИзДанныхОбъектаСервер(Знач ИмяЭлемента)
	
	Возврат ВтораяЧастьВПутиКДанным(ИмяЭлемента);
	
КонецФункции	 

&НаСервере
Функция ВтораяЧастьВПутиКДанным(ИмяЭлемента)
	ПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	Поз = Найти(ПутьКДанным, ".");
	Если Поз > 0 Тогда
		ПутьКДанным = Сред(ПутьКДанным, Поз + 1);
	КонецЕсли;	 
	
	Возврат ПутьКДанным; 
КонецФункции	 

&НаКлиенте
Функция ЗаголовокЭлементаVA(Стр)
	
	Элем = Элементы[Стр];
	Текст = Элем.Заголовок;
	Если НЕ ЗначениеЗаполнено(Текст) И НЕ ПустаяСтрока(Элем.ИмяКоманды) Тогда
		Текст = ЗаголовокКомандыСервер(Элем.ИмяКоманды); 
	КонецЕсли;	 
	
	Возврат Текст;
	
КонецФункции	 

&НаКлиенте
Функция ПроверкаЧтоРежимОбученияБудетРаботать(ПараметрыВидео, ИмяФичи)
	
	Если НЕ Объект.ИспользоватьКомпонентуVanessaExt Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если Объект.СоздаватьФайлыОзвучкиДляСправки Тогда
		Если НЕ Установлен_ffmpeg() Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(Объект.КаталогКешОзвучкиДляИнтерактивнойСправки) Тогда
			Объект.КаталогКешОзвучкиДляИнтерактивнойСправки = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "HelpTTS";
		КонецЕсли;	 
		
		Если НЕ ФайлСуществуетКомандаСистемы(Объект.КаталогКешОзвучкиДляИнтерактивнойСправки) Тогда
			Возврат Ложь;
		КонецЕсли;	 
		
		ДанныеКешОзвучкиИнтерактивнойСправки = ПрочитатьДанныеКешОзвучкиИнтерактивнойСправки();
		
		Если НЕ ВКешЕстьВсеMp3ДляДаннойФичи(ДанныеКешОзвучкиИнтерактивнойСправки, ИмяФичи) Тогда
			Возврат Ложь;
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	Возврат Истина;
	
КонецФункции	 

&НаКлиенте
Функция Установлен_ffmpeg()
	
	#Если НЕ ВебКлиент Тогда
	
	Строка_ffmpeg = Объект.ЗаписьВидеоКомандаFfmpeg;
	Если НЕ ЗначениеЗаполнено(Строка_ffmpeg) Тогда
		Строка_ffmpeg = "ffmpeg";
	КонецЕсли;	 
	
	Лог = ПолучитьИмяВременногоФайла("txt");
	Команда = """" + Строка_ffmpeg + """ -version > """ + Лог + """";
	Отладка(Команда);
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
	
	Если Не ФайлСуществуетКомандаСистемы(Лог) Тогда
		ТекстСообщения = Локализовать("Команда не выполнена: %1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Символы.ПС + Команда);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;	 
	
	Возврат ВФайлеЕстьСтрока(Лог,"ffmpeg version");
	
	#КонецЕсли
	
КонецФункции	

&НаКлиенте
Функция ВФайлеЕстьСтрока(ИмяФайла, ЧтоИщем)
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");
	
	Нашли = Ложь;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если Найти(Стр, ЧтоИщем)  > 0 Тогда
			Нашли = Истина;
			Прервать;
		КонецЕсли;	 
		
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат Нашли;
	
КонецФункции	

&НаКлиенте
Процедура ОткрытьМастерНастройкиИнтерактивнойСправки(ПараметрыВидео, ИмяФайла, ДопПараметры = Неопределено)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПроверяемыйФичаФайл", ИмяФайла);
	ПараметрыФормы.Вставить("ДопПараметры", ДопПараметры);
	ОткрытьФорму(ПолучитьИмяОбработкиVA() + ".Форма.МастерНастройкиИнтерактивнойСправки", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучитьКоординатыОбласти(Команда)
	
	ФормаПолучениеКоординатПоОбласти = ПолучитьМодульПолучениеКоординатПоОбласти();
	Если ФормаПолучениеКоординатПоОбласти <> Неопределено Тогда
		ФормаПолучениеКоординатПоОбласти.Открыть();
	КонецЕсли;
	
КонецПроцедуры   

&НаКлиенте
Процедура НастройкиРаботыСБраузером(Команда)
	
	ФормаПолучениеНастройкиРаботыСБраузером = ПолучитьМодульНастройкиРаботыСБраузером();
	Если ФормаПолучениеНастройкиРаботыСБраузером <> Неопределено Тогда
		ФормаПолучениеНастройкиРаботыСБраузером.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьФормуНастройкиРаботыСБраузером(Команда)
	
	ФормаНастройкиРаботыСБраузером = ПолучитьМодульНастройкиРаботыСБраузером();
	Если ФормаНастройкиРаботыСБраузером <> Неопределено Тогда
		ФормаНастройкиРаботыСБраузером.Открыть();
	КонецЕсли;
	
КонецПроцедуры     

&НаКлиенте
Функция ПолучитьМодульПолучениеКоординатПоОбласти()
	
	Если Не Объект.ИспользоватьКомпонентуVanessaExt Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДескрипторОсновногоОкнаVA = 0;
	ВычислитьPIDЭтогоСеансаСлужебный();
	ДанныеОконJSON = ВнешняяКомпонентаДляСкриншотов.ПолучитьСписокОкон(Число(PIDЭтогоСеанса));
	ДанныеОкон = ПрочитатьСтрокуJSON(ДанныеОконJSON);
	Если ТипЗнч(ДанныеОкон) = Тип("Массив") Тогда
		ДескрипторОсновногоОкнаVA = ДанныеОкон[0].Window;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийTestclientЭтоWebКлиент", ТекущийTestclientЭтоWebКлиент);
	ПараметрыФормы.Вставить("ДескрипторОсновногоОкнаТекущегоКлиентаТестирования", ДескрипторОсновногоОкнаТекущегоКлиентаТестирования);
	ПараметрыФормы.Вставить("ДескрипторОсновногоОкнаVA", ДескрипторОсновногоОкнаVA);
	ФормаПолучениеКоординатПоОбласти = ПолучитьФорму(ПолучитьИмяОбработкиVA() + ".Форма.ПолучениеКоординатПоОбласти", ПараметрыФормы, ЭтаФорма);
	ФормаПолучениеКоординатПоОбласти.ИнициализацияФормы(ЭтаФорма);
	
	Возврат ФормаПолучениеКоординатПоОбласти;
	
КонецФункции

&НаКлиенте
Функция ПолучитьМодульНастройкиРаботыСБраузером()
	
	Если Не Объект.ИспользоватьКомпонентуVanessaExt Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ФормаНастройкиРаботыСБраузером = ПолучитьФорму(ПолучитьИмяОбработкиVA() + ".Форма.НастройкиРаботыСБраузером", ПараметрыФормы, ЭтаФорма);
	ФормаНастройкиРаботыСБраузером.ИнициализацияФормы(ЭтаФорма, ПараметрыФормы);
	
	Возврат ФормаНастройкиРаботыСБраузером;
	
КонецФункции

&НаКлиенте
Функция ЧастьКнопокКоманднойПанелиРедактораВРежимеОбученияДляСкрытия()
	Массив = Новый Массив;
	Массив.Добавить("ГруппаVanessaEditorВидеоАудио");
	Массив.Добавить("ГруппаVanessaEditorОбучение");
	Массив.Добавить("ГруппаVanessaEditorБуферОбмена");
	Массив.Добавить("ГруппаVanessaEditorИзмененияТекста");
	Возврат Массив;
КонецФункции

&НаКлиенте
Функция НачальноеСостояниеOnboarding()
	
	Если НЕ ОбъектКонтекст.Свойство("СостоянияOnboarding") Тогда
		Возврат Неопределено;
	КонецЕсли;	             
	
	Для Каждого Элем Из ОбъектКонтекст.СостоянияOnboarding Цикл
		Если Элем.Значение.НачальноеСостояние Тогда
			Возврат Элем.Значение;
		КонецЕсли;			
	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции	

&НаКлиенте
Процедура СделатьЭффектЗатемненияOnboarding(Состояние)
	
	Если НЕ ОбъектКонтекст.Свойство("_ЗаголовокОкнаOnboarding") Тогда
		ВызватьИсключение Ванесса.Локализовать("Не указано текущее окно Onboarding.");
	КонецЕсли;		
	
	ФормаOnboarding = ФормаOnboarding(ОбъектКонтекст._ЗаголовокОкнаOnboarding);
	ДанныеРеквизитовФормыOnboarding = ДанныеРеквизитовФормыOnboarding(ФормаOnboarding);
	ЭлементФормы = ФормаOnboarding.Элементы[Состояние.ИмяЭлемента];
	
	ЭлементUIAutomationOnboarding(ДанныеРеквизитовФормыOnboarding, ЭлементФормы, Состояние);
	
КонецПроцедуры 

&НаКлиенте
Функция ФормаOnboarding(ЗаголовокОкна)
	
	НужноеОкно = Неопределено;
	Окна = ПолучитьОкна();
	Для Каждого ТекОкно Из Окна Цикл
		Если СтрокаСоответствуетШаблону(ТекОкно.Заголовок, ЗаголовокОкна) Тогда
			НужноеОкно = ТекОкно;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если НужноеОкно = Неопределено Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(Локализовать("Окно с заголовком <%1> не найдено."), ЗаголовокОкна);
	КонецЕсли;
	
	Возврат НужноеОкно.Содержимое[0];
	
КонецФункции	                                                        

&НаКлиенте
Функция ЭлементUIAutomationOnboarding(ДанныеРеквизитовФормыOnboarding, ЭлементФормы, Состояние)
	PID = ПолучитьКорректныйPID("ЭтотСеанс"); 
	
	Если ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда
		ТекПодсказка = "";
	Иначе	
		ТекПодсказка = ЭлементФормы.Подсказка;
	КонецЕсли;	 
	
	Если НЕ ЗначениеЗаполнено(ТекПодсказка) Тогда
		ДанныеФормыЭлемента = ДанныеРеквизитовФормыOnboarding.ДанныеФормы[ЭлементФормы.Имя];
		Если ДанныеФормыЭлемента.Свойство("ПутьКДанным") Тогда
			ИмяРеквизитаИзПутиКДанным = ИмяРеквизитаИзПутиКДанным(ДанныеФормыЭлемента.ПутьКДанным);
			Если ИмяРеквизитаИзПутиКДанным <> Неопределено Тогда
				ТекПодсказка = ДанныеРеквизитовФормыOnboarding.ДанныеМетаданных[ИмяРеквизитаИзПутиКДанным].Подсказка;
			КонецЕсли;	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекПодсказка) И ДанныеФормыЭлемента.Свойство("ДанныеКоманды") И ДанныеФормыЭлемента.ДанныеКоманды <> Неопределено Тогда
			ТекПодсказка = ДанныеФормыЭлемента.ДанныеКоманды.Подсказка;
		КонецЕсли;	 
		
	КонецЕсли;	
	
	Если ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") Тогда
		ЭлементФормы.Подсказка = Строка(Новый УникальныйИдентификатор);
		Если Версия8319ИлиВыше Тогда
			ОтборЭлементов = ЗаписатьОбъектJSON(Новый Структура("ProcessId, HelpText", Число(PID), ЭлементФормы.Подсказка));
		Иначе	
			ОтборЭлементов = ЗаписатьОбъектJSON(Новый Структура("ProcessId, LegacyIAccessibleHelp", Число(PID), ЭлементФормы.Подсказка));
		КонецЕсли;	
	ИначеЕсли ЗначениеЗаполнено(ТекПодсказка) Тогда
		Если Версия8319ИлиВыше Тогда
			ОтборЭлементов = ЗаписатьОбъектJSON(Новый Структура("ProcessId, HelpText", Число(PID), ТекПодсказка));
		Иначе	
			ОтборЭлементов = ЗаписатьОбъектJSON(Новый Структура("ProcessId, LegacyIAccessibleHelp", Число(PID), ТекПодсказка));
		КонецЕсли;	
	ИначеЕсли Состояние.Свойство("ЗаголовокЭлемента") Тогда
		ОтборЭлементов = ЗаписатьОбъектJSON(Новый Структура("ProcessId, Name", Число(PID), Состояние.ЗаголовокЭлемента));
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(Локализовать("Не найден элемент формы <%1>."), ЭлементФормы.Имя);
	КонецЕсли;	 
	
	ОбъектКонтекст.Вставить("_ИмяЭлементаФормы", ЭлементФормы.Имя);
	ОбъектКонтекст.Вставить("_ПодсказкаЭлементаФормы", ТекПодсказка);
	ОбъектКонтекст.Вставить("_ОтборЭлементов", ОтборЭлементов);
	ОбъектКонтекст.Вставить("_ЭлементФормы", ЭлементФормы);
	ПодключитьОбработчикОжидания("ЭлементUIAutomationOnboardingПродолжение1", 0.1, Истина);
	
КонецФункции	

&НаКлиенте
Функция ИмяРеквизитаИзПутиКДанным(ПутьКДанным)
	
	МассивСтрок = Ванесса._СтрРазделить(ПутьКДанным, ".");
	Если МассивСтрок.Количество() = 2 Тогда
		Возврат МассивСтрок[1];
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции	

&НаКлиенте
Процедура УстановитьПредыдущееСостояниеOnboarding(ТекИмя, Переход)
	
	Если НЕ ОбъектКонтекст.Свойство("_ПредыдущееСостояниеOnboarding") Тогда
		ОбъектКонтекст.Вставить("_ПредыдущееСостояниеOnboarding", Новый Соответствие);
	КонецЕсли;
	
	ОбъектКонтекст._ПредыдущееСостояниеOnboarding.Вставить(НРег(Переход), ТекИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементUIAutomationOnboardingПродолжение1()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НайтиЭлементыOnboardingПродолжение1Завершение", ЭтаФорма);
	ВнешняяКомпонентаДляСкриншотов.НачатьВызовНайтиЭлементы(ОписаниеОповещения, ОбъектКонтекст._ОтборЭлементов)
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиЭлементыOnboardingПродолжение1Завершение(Результат, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ДанныеПолей = ПрочитатьОбъектJSON(Результат);
	Если ТипЗнч(ОбъектКонтекст._ЭлементФормы) <> Тип("КнопкаФормы") Тогда
		ОбъектКонтекст._ЭлементФормы.Подсказка = ОбъектКонтекст._ПодсказкаЭлементаФормы;
	КонецЕсли;	 
	Если ДанныеПолей = Неопределено ИЛИ ДанныеПолей.Количество() = 0 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(Локализовать("Не найден элемент <%1>."), ОбъектКонтекст._ИмяЭлементаФормы);
	КонецЕсли;	
	
	ОбъектКонтекст.Вставить("_ЭлементUIAutomationOnboarding", ДанныеПолей[0]);
	
	ПодключитьОбработчикОжидания("НарисоватьЗатемнениеOnboardingОбработчик", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НарисоватьЗатемнениеOnboardingОбработчик()

	ЭлементUIAutomation = ОбъектКонтекст._ЭлементUIAutomationOnboarding;
	Координаты  = КоординатыЭлементаUIAutomation(ЭлементUIAutomation);
	
	ПараметрыОтрисовки = Новый Массив;
	
	ДобавитьПараметрОтрисовки("text", ОбъектКонтекст._ТекущееСостояниеOnboarding.Текст, ПараметрыОтрисовки);
	
	МассивКнопок = Новый Массив;
	Если НЕ ОбъектКонтекст._ТекущееСостояниеOnboarding.НачальноеСостояние Тогда
		МассивКнопок.Добавить(Новый Структура("title", Локализовать("Назад")));
	КонецЕсли;	
	Если НЕ ОбъектКонтекст._ТекущееСостояниеOnboarding.КонечноеСостояние Тогда
		МассивКнопок.Добавить(Новый Структура("title", Локализовать("Далее")));
	КонецЕсли;	
	МассивКнопок.Добавить(Новый Структура("title", Локализовать("Завершить")));

	Если МассивКнопок.Количество() > 0 Тогда
		ДобавитьПараметрОтрисовки("buttons", МассивКнопок, ПараметрыОтрисовки);
	КонецЕсли;	

	ДобавитьПараметрОтрисовки("duration", 1000000, ПараметрыОтрисовки);
	ДобавитьПараметрОтрисовки("buttonFontColor", 0, ПараметрыОтрисовки);
	ДобавитьПараметрОтрисовки("buttonBorderColor", 0, ПараметрыОтрисовки);
	
	НарисоватТеньПоКоординатам(Координаты.Left,
							   Координаты.Top,
							   Координаты.Right,
							   Координаты.Bottom,
							   ПараметрыОтрисовки,
							   "НеВыполнятьОбработчик");
	
КонецПроцедуры                                                                          

&НаКлиенте
Функция КоординатыЭлементаUIAutomation(ЭлементUIAutomation)
	
	Left = 1000000000000000;
	Top = 1000000000000000;
	Bottom = -1;
	Right = -1;    
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(ЭлементUIAutomation);
	ОпределитьКоординатыПоМассивуЭлементовUIAutomation(МассивЭлементов, Left, Top, Bottom, Right);
	
	Результат = Новый Структура;
	Результат.Вставить("Left", Left);
	Результат.Вставить("Top", Top);
	Результат.Вставить("Bottom", Bottom);
	Результат.Вставить("Right", Right);
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Процедура ДобавитьПараметрОтрисовки(Имя, Значение, ПараметрыОтрисовки)
	
	ДанныеОтрисовки = Новый Структура;
	ДанныеОтрисовки.Вставить("Кол1", Имя);
	ДанныеОтрисовки.Вставить("Кол2", Значение);
	ПараметрыОтрисовки.Добавить(ДанныеОтрисовки);
	
КонецПроцедуры

&НаКлиенте
Функция ПустоеОповещениеСПродолжениемВыполненияСценария(Парам1, Парам2, ДопПараметры) Экспорт
	Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ИмяОбработчика") Тогда
		Если ДопПараметры.ИмяОбработчика <> "НеВыполнятьОбработчик" Тогда
			Если ДопПараметры.Свойство("ВыполнитьОповещение") И ДопПараметры.ВыполнитьОповещение Тогда
				Оповестить(ДопПараметры.ИмяСобытия, ДопПараметры.ПараметрОповещения);
			Иначе	
				ПодключитьОбработчикОжидания(ДопПараметры.ИмяОбработчика, 0.1, Истина);
			КонецЕсли;	
		КонецЕсли;	
	Иначе
		ПродолжитьВыполнениеШагов();
	КонецЕсли;
КонецФункции 

&НаКлиенте
Функция РисоватьЗатемнениеПоНастоящему()
	
	РисоватьЗатемнениеПоНастоящему = Истина;
	Если ОбъектКонтекстСохраняемый.Свойство("ОтрисовыватьЭффектЗатемнения") Тогда
		// Это нужно, чтобы при работе теста на CI не нагружать систему отрисовкой эффектов.
		// Но координаты элементов будут искаться на экране.
		РисоватьЗатемнениеПоНастоящему = ОбъектКонтекстСохраняемый.ОтрисовыватьЭффектЗатемнения;
	КонецЕсли;	 
	
	Возврат РисоватьЗатемнениеПоНастоящему; 
	
КонецФункции	 

&НаКлиенте
Процедура СоздатьСостоянияOnboardingПомощникПриПервомЗапуске(СостоянияOnboarding)
	
	ДанныеСостояния = Ванесса.НовоеСостояниеOnboarding();
	ДанныеСостояния.Вставить("Имя", "КнопкаСписокУроков");
	ДанныеСостояния.Вставить("ИмяЭлемента", "VanessaEditorОткрытьСписокУроков");
	ДанныеСостояния.Вставить("Текст", Локализовать("Вас приветствует помощник первого запуска. Чтобы получить подробную справку по Vanessa Automation нажми сюда."));
	ДанныеСостояния.Вставить("НачальноеСостояние", Истина);
	ДанныеСостояния.Вставить("Окно", "*Vanessa*");
	ДанныеСостояния.Вставить("Переход", "КнопкаИнструменты");
	СостоянияOnboarding.Вставить(НРег(ДанныеСостояния.Имя), ДанныеСостояния);
	
	ДанныеСостояния = Ванесса.НовоеСостояниеOnboarding();
	ДанныеСостояния.Вставить("Имя", "КнопкаИнструменты");
	ДанныеСостояния.Вставить("ИмяЭлемента", "ГруппаVanessaEditorИнструменты");
	ДанныеСостояния.Вставить("Текст", Локализовать("Тут находятся основные иструменты Vanessa Automation."));
	ДанныеСостояния.Вставить("Окно", "*Vanessa*");
	ДанныеСостояния.Вставить("Переход", "КнопкаНастройки");
	СостоянияOnboarding.Вставить(НРег(ДанныеСостояния.Имя), ДанныеСостояния);
	
	ДанныеСостояния = Ванесса.НовоеСостояниеOnboarding();
	ДанныеСостояния.Вставить("Имя", "КнопкаНастройки");
	ДанныеСостояния.Вставить("ИмяЭлемента", "ГруппаVanessaEditorНастройкиРедактора");
	ДанныеСостояния.Вставить("Текст", Локализовать("Тут находятся основные настройки редактора Vanessa Automation."));
	ДанныеСостояния.Вставить("Окно", "*Vanessa*");
	ДанныеСостояния.Вставить("Переход", "АльтПлюсАш");
	СостоянияOnboarding.Вставить(НРег(ДанныеСостояния.Имя), ДанныеСостояния);
	
	ДанныеСостояния = Ванесса.НовоеСостояниеOnboarding();
	ДанныеСостояния.Вставить("Имя", "АльтПлюсАш");
	ДанныеСостояния.Вставить("ИмяЭлемента", "ГруппаVanessaEditorНастройкиРедактора");
	ДанныеСостояния.Вставить("Текст", Локализовать("Чтобы получить подробную справку об элементе формы надо навести на него курсор и нажать alt+H."));
	ДанныеСостояния.Вставить("Окно", "*Vanessa*");
	ДанныеСостояния.Вставить("Переход", "ВыполнитьСохранениеНастроек");
	СостоянияOnboarding.Вставить(НРег(ДанныеСостояния.Имя), ДанныеСостояния);
	
	ДанныеСостояния = Ванесса.НовоеСостояниеOnboarding();
	ДанныеСостояния.Вставить("Имя", "ВыполнитьСохранениеНастроек");
	ДанныеСостояния.Вставить("ИмяЭлемента", "ГруппаVanessaEditorНастройкиРедактора");
	ДанныеСостояния.Вставить("Текст", Локализовать("После первого запуска рекомендуется выполнить сохранение настроек."));
	ДанныеСостояния.Вставить("КонечноеСостояние", Истина);
	ДанныеСостояния.Вставить("Окно", "*Vanessa*");
	СостоянияOnboarding.Вставить(НРег(ДанныеСостояния.Имя), ДанныеСостояния);
	
КонецПроцедуры 

&НаСервере
Процедура ДополнитьДанныеМетаданныхVA(Реквизиты, Структура);
	
	Для Каждого ТекРеквизит Из Реквизиты Цикл
		Структура.Вставить(ТекРеквизит.Имя, ДанныеРеквизитаVA(ТекРеквизит));
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция ДанныеРеквизитаVA(Реквизит)
	
	Результат = Новый Структура;
	
	Результат.Вставить("Имя", Реквизит.Имя);
	Результат.Вставить("Синоним", Реквизит.Синоним);
	Результат.Вставить("Подсказка", Реквизит.Подсказка);
	
	Возврат Результат;
	
КонецФункции	

&НаСервере
Функция ДанныеЭлементаФормыVA(ЭлементФормы)
	
	Результат = Новый Структура;
	
	Результат.Вставить("Имя", ЭлементФормы.Имя);
	Результат.Вставить("Заголовок", ЭлементФормы.Заголовок);
	
	Если ЭлементФормы.Имя = "VanessaEditorОткрытьСписокУроков" Тогда
		ава = 1;
	КонецЕсли;	 
	
	Попытка
		Результат.Вставить("Подсказка", ЭлементФормы.Подсказка);
	Исключение
		Результат.Вставить("Подсказка", Неопределено);
	КонецПопытки;
	
	Попытка
		Результат.Вставить("ПутьКДанным", ЭлементФормы.ПутьКДанным);
	Исключение
		Результат.Вставить("ПутьКДанным", Неопределено);
	КонецПопытки;    
	
	Попытка
		Результат.Вставить("РасширеннаяПодсказка", ЭлементФормы.РасширеннаяПодсказка.Заголовок);
	Исключение
		Результат.Вставить("РасширеннаяПодсказка", Неопределено);
	КонецПопытки;
	
	Попытка
		Результат.Вставить("ИмяКоманды", ЭлементФормы.ИмяКоманды);
		ДанныеКоманды = ДанныеКомандыVanessaAutomationСервер(ЭлементФормы.ИмяКоманды);
		Результат.Вставить("ДанныеКоманды", ДанныеКоманды);
	Исключение
		Результат.Вставить("ИмяКоманды", Неопределено);
		Результат.Вставить("ДанныеКоманды", Неопределено);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ЗначениеСлужебнойКонстантыЗапрещаетПоказыватьПомощникПриПервомЗапуске()
	
	Если Метаданные.Константы.Найти("ПоказыватьПомощникПриПервомЗапуске") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если Константы.ПоказыватьПомощникПриПервомЗапуске.Получить() Тогда
		Возврат Ложь;
	Иначе	
		Возврат Истина;
	КонецЕсли;	 
	
КонецФункции	 

&НаКлиенте
Процедура ОткрытьСписокУроковСлужебный()
	
	АктивизироватьСтраницуЗапускТестов();
	ПолноеИмяФайла = КаталогУроков() + "List_of_lessons_ru.md";
	Если НЕ ФайлСуществуетКомандаСистемы(ПолноеИмяФайла) Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.КаталогИнструментов) Тогда
			ВызватьИсключение Локализовать("Не заполнена настройка ""КаталогИнструментов"".");
		КонецЕсли;	 
		Если НЕ ФайлСуществуетКомандаСистемы(Объект.КаталогИнструментов) Тогда
			ВызватьИсключение ПодставитьПараметрыВСтроку(Локализовать("Каталог инструментов <%1> не найден."),
				Объект.КаталогИнструментов
			);
		КонецЕсли;	 
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("СкачатьУроки", Истина);
		ОткрытьМастерНастройкиИнтерактивнойСправки(Неопределено, Неопределено, ДопПараметры);
		Возврат;
	КонецЕсли;	 
	
	ФайлаДокумента = Новый Файл(ПолноеИмяФайла);
	ТекстовыйДокумент = Новый ТекстовыйДокумент; 
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФайлаДокумента", ФайлаДокумента);
	ДополнительныеПараметры.Вставить("ТекстовыйДокумент", ТекстовыйДокумент);
	ДополнительныеПараметры.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьФайлДокументацииОкончаниеЧтения", ЭтаФорма, ДополнительныеПараметры);
	ТекстовыйДокумент.НачатьЧтение(ОписаниеОповещения, ПолноеИмяФайла, КодировкаТекста.UTF8);
	
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьТемуРедактора(Тема) Экспорт
	
	Объект.ТемаРедактораVanessaEditor = Тема;
	ТемаРедактораVanessaEditorПриИзменении(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ПустыеОбработчики

&НаКлиенте
Функция ОписаниеПустогоОбработчика(КоличествоПараметров = 2) Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Если ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.11.0") Тогда
		Возврат Вычислить("Новый ОписаниеОповещения");
	Иначе
		Возврат Вычислить(_СтрШаблон("Новый ОписаниеОповещения(""ПустойОбработчикОповещения%1"", ЭтаФорма)", КоличествоПараметров));
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПустойОбработчикОповещения1(Параметр1) Экспорт 
КонецПроцедуры

&НаКлиенте
Процедура ПустойОбработчикОповещения2(Параметр1, Параметр2) Экспорт 
КонецПроцедуры

&НаКлиенте
Процедура ПустойОбработчикОповещения3(Параметр1, Параметр2, Параметр3) Экспорт 
КонецПроцедуры

&НаКлиенте
Процедура СтилиДляHTMLИнструкцийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Фильтр = "Текстовый документ (*.css)|*.css";
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""СтилиДляHTMLИнструкцийЗавершение"", ЭтаФорма)"));
	
КонецПроцедуры

&НаКлиенте
Процедура СтилиДляHTMLИнструкцийЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.СтилиHTMLИнструкции = ВыбранныеФайлы[0];
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьСтилиHTMLИнструкции()
	
	ТекстСтилей = "";
	
	Попытка
		Если ФайлСуществуетКомандаСистемы(Объект.СтилиHTMLИнструкции) Тогда
			Текст = Новый ЧтениеТекста;
			Текст.Открыть(Объект.СтилиHTMLИнструкции, "UTF-8");
			ТекстСтилей = Текст.Прочитать();
			Текст.Закрыть();
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат ТекстСтилей;
	
КонецФункции

&НаКлиенте
Процедура УстановитьЗаголовокТемпОзвучкиHTML()
	
	Шаблон = Локализовать("Темп %1");
	Значение = ?(Объект.ТемпОзвучкиHTML > 0, Объект.ТемпОзвучкиHTML / 10, Объект.ТемпОзвучкиHTML);
	Элементы.ТемпОзвучкиHTML.Заголовок = Ванесса._СтрШаблон(Шаблон, Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокДиапазонОзвучкиHTML()
	
	Шаблон = Локализовать("Диапазон %1"); 
 	Значение = ?(Объект.ДиапазонОзвучкиHTML > 0, Объект.ДиапазонОзвучкиHTML / 10, Объект.ДиапазонОзвучкиHTML); 
 	Элементы.ДиапазонОзвучкиHTML.Заголовок = Ванесса._СтрШаблон(Шаблон, Значение); 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьГолосОзвучкиПоУмолчанию()
	
	Если ПустаяСтрока(Объект.ГолосОзвучкиHTML) Тогда
		Объект.ГолосОзвучкиHTML = Элементы.ГолосОзвучкиHTML.СписокВыбора[7];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСтандартныйМакетHTMLЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ВыбранныеФайлы[0];
	Объект.СтилиHTMLИнструкции = ВыбранныеФайлы[0];
	УстановитьУсловноеОформление();
	
	Если Объект.ВариантСтилейHTMLИнструкции = 2 Тогда
		
		ТекстСтилей = ПолучитьТекстМакета("CSS_Skrinkast");
		
	ИначеЕсли Объект.ВариантСтилейHTMLИнструкции = 3 Тогда
		
		ТекстМакета = ПолучитьТекстМакета("CSS_3D_Сarousel");
		СтрокаПоискаНачало = "<style type=""text/css"">";
		НомерСимволаНачало = _СтрНайти(ТекстМакета, СтрокаПоискаНачало) + СтрДлина(СтрокаПоискаНачало);
		НомерСимволаКонец = _СтрНайти(ТекстМакета, "</style>");
		ТекстСтилей = СокрЛП(Сред(ТекстМакета, НомерСимволаНачало, НомерСимволаКонец - НомерСимволаНачало));
		
	КонецЕсли;
	
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(ТекстСтилей);
	ТекстДок.НачатьЗапись( ,ИмяФайла, КодировкаТекста.UTF8);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстМакета(ИмяМакета)
	
	ОбъектНаСервере = ЭтотОбъектНаСервере();
	ТекстМакета = ОбъектНаСервере.ПолучитьМакет(ИмяМакета).ПолучитьТекст();
	Возврат ТекстМакета;
	
КонецФункции

#КонецОбласти

#Область TeamCity

&НаКлиенте
Функция НастройкиTeamCity()
	
	Структура = Новый Структура();
	
	Структура.Вставить("Используется", Ложь);
	Структура.Вставить("ЭтоПервыйЗапуск", Истина);
	Структура.Вставить("IDПотока", "");
	Структура.Вставить("ТекущийФичаФайл", "");
	Структура.Вставить("ТекущийСценарий", "");
	Структура.Вставить("ДлительностьТеста", 0);
	Структура.Вставить("ТекстОшибки", "");
	
	Шаблоны = Новый Структура;
	Шаблоны.Вставить("НачалоГруппы", "##teamcity[flowStarted flowId='$Tag$']");
	Шаблоны.Вставить("ОкончаниеГруппы", "##teamcity[flowFinished flowId='$Tag$']");  
	
	Шаблоны.Вставить("НачалоФичаФайла", "##teamcity[testSuiteStarted name='$Tag$.$CurrentFeatureFile$' flowId='$Tag$']");
	Шаблоны.Вставить("ОкончаниеФичаФайла", "##teamcity[testSuiteFinished name='$Tag$.$CurrentFeatureFile$' flowId='$Tag$']");    
	
	Шаблоны.Вставить("НачалоТеста", "##teamcity[testStarted name='$Tag$.$CurrentTest$' flowId='$Tag$']");
	Шаблоны.Вставить("ОшибкаТестаНаСравнение", "##teamcity[testFailed type='comparisonFailure' name='$Tag$.$CurrentTest$' details='$Details$' flowId='$Tag$' expected='$expected$' actual='$actual$']");
	Шаблоны.Вставить("ОшибкаТеста", "##teamcity[testFailed name='$Tag$.$CurrentTest$' details='$Details$' flowId='$Tag$']");
	Шаблоны.Вставить("ВыводСообщенияВГруппу", "##teamcity[testStdOut name='$Tag$.$CurrentTest$' out='$line$' flowId='$Tag$']");
	Шаблоны.Вставить("ОкончаниеТеста", "##teamcity[testFinished name='$Tag$.$CurrentTest$' duration='$TotalMilliseconds$' flowId='$Tag$']");

	Структура.Вставить("Шаблоны", Шаблоны);
	Возврат Структура;
КонецФункции     

&НаКлиенте
Процедура НачатьТестTeamCity(СтрокаСценария)
	
	Файл = Новый Файл(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ПолныйПутьКФиче);
	ТекущийФичаФайл = Файл.ИмяБезРасширения;
	Если НастройкиTeamCity.ЭтоПервыйЗапуск Тогда
		НастройкиTeamCity.ЭтоПервыйЗапуск = Ложь;
		ВывестиВКонсольTeamCity(НастройкиTeamCity.Шаблоны.НачалоГруппы);
	КонецЕсли;
	
	Если НастройкиTeamCity.ТекущийФичаФайл = "" Тогда
		НастройкиTeamCity.ТекущийФичаФайл = ТекущийФичаФайл;
		ВывестиВКонсольTeamCity(НастройкиTeamCity.Шаблоны.НачалоФичаФайла);
	ИначеЕсли НЕ НастройкиTeamCity.ТекущийФичаФайл = ТекущийФичаФайл Тогда
		ВывестиВКонсольTeamCity(НастройкиTeamCity.Шаблоны.ОкончаниеФичаФайла);
		НастройкиTeamCity.ТекущийФичаФайл = ТекущийФичаФайл;
		ВывестиВКонсольTeamCity(НастройкиTeamCity.Шаблоны.НачалоФичаФайла);
	КонецЕсли;

	НастройкиTeamCity.ТекущийСценарий = СтрокаСценария.Имя;
	ВывестиВКонсольTeamCity(НастройкиTeamCity.Шаблоны.НачалоТеста);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьТестTeamCity(СтрокаСценария, РезультатПрохожденияТестовСценария) 
	Т2 = ТекущаяУниверсальнаяДатаВМиллисекундах();
	НастройкиTeamCity.ДлительностьТеста = РезультатПрохожденияТестовСценария.ВремяОкончания - РезультатПрохожденияТестовСценария.ВремяНачала;
	
	Если СтрокаСценария.ТекстОшибки = "" Тогда
		ВывестиВКонсольTeamCity(НастройкиTeamCity.Шаблоны.ОкончаниеТеста);
	Иначе
		НастройкиTeamCity.ТекстОшибки = СтрокаСценария.ТекстОшибки;
		ВывестиВКонсольTeamCity(НастройкиTeamCity.Шаблоны.ОшибкаТеста);  
		ВывестиВКонсольTeamCity(НастройкиTeamCity.Шаблоны.ОкончаниеТеста);
		НастройкиTeamCity.ТекстОшибки = "";
	КонецЕсли;
	
	НастройкиTeamCity.ДлительностьТеста = 0;
	
	Если МассивРезультатПрохожденияТестовСценария.Количество() = МассивСценариевДляВыполнения.Количество() Тогда 
		НастройкиTeamCity.ЭтоПервыйЗапуск = Истина;
		
		ВывестиВКонсольTeamCity(НастройкиTeamCity.Шаблоны.ОкончаниеФичаФайла);
		ВывестиВКонсольTeamCity(НастройкиTeamCity.Шаблоны.ОкончаниеГруппы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ЭкранированиеСообщенияTeamCity(Стр)
	Стр = СтрЗаменить(Стр, "|", "||");
	Стр = СтрЗаменить(Стр, "'", "|'");
	Стр = СтрЗаменить(Стр, "[", "|[");
	Стр = СтрЗаменить(Стр, "]", "|]");
	Стр = СтрЗаменить(Стр, Символы.ВК, "|r");
	Стр = СтрЗаменить(Стр, Символы.ПС, "|n");
	Возврат Стр;
КонецФункции

&НаКлиенте
Функция ПодготовитьСообщениеTeamCity(Знач ТекстСообщения)
	
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "$Tag$", НастройкиTeamCity.IDПотока);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "$CurrentFeatureFile$", ЭкранированиеСообщенияTeamCity(НастройкиTeamCity.ТекущийФичаФайл)); 
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "$CurrentTest$", ЭкранированиеСообщенияTeamCity(НастройкиTeamCity.ТекущийСценарий));
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "$TotalMilliseconds$", Формат(НастройкиTeamCity.ДлительностьТеста, "ЧГ="));
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "$Details$", ЭкранированиеСообщенияTeamCity(НастройкиTeamCity.ТекстОшибки));
	Возврат ТекстСообщения;             
	
КонецФункции

&НаКлиенте
Процедура ВывестиВКонсольTeamCity(Знач Стр)
	Стр = ПодготовитьСообщениеTeamCity(Стр);  
	Если Объект.ИспользоватьКомпонентуVanessaExt И ВнешняяКомпонентаДляСкриншотов <> Неопределено И НЕ ЗапрещеныСинхронныеВызовы Тогда
		ВнешняяКомпонентаДляСкриншотов.ВывестиВКонсоль(Стр + Символы.ПС, 866);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

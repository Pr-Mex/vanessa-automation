#Область ОписаниеПеременных

#Область ЭкспортируемыеПеременныеФормы

//Необходима для работы автотестирования VA
&НаКлиенте
Перем СлужебнаяПеременная Экспорт;

//Необходима для работы автотестирования VA
&НаКлиенте
Перем ХостСистема Экспорт;

&НаКлиенте
Перем ЭтоLinux Экспорт;

&НаКлиенте
Перем ЭтоЗапускВРежимеКоманднойСтроки Экспорт;

&НаКлиенте
Перем КешДанныеПеревода Экспорт;

&НаКлиенте
Перем Версия836ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8310ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8311ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8312ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8313ИлиВыше Экспорт;

//Служебная переменная. Получает значение Истина, когда отработали все обрабочики открытия формы.
&НаКлиенте
Перем ФормаVanessaAutomationОткрылась Экспорт;

#КонецОбласти

#Область ГлобальныеПеременныеФормы

&НаКлиенте
Перем КэшФормПлагинов;

&НаКлиенте
Перем мСинхронныйРежимРазрешен;

&НаКлиенте
Перем ОбъектКонтекст;

&НаКлиенте
Перем ОбъектКонтекстСохраняемый;

&НаКлиенте
Перем МассивСостоянияКонтекстовДоВыполненияШага;

&НаКлиенте
Перем ТаблицаУжеСуществующихСценариев;

&НаКлиенте
Перем МассивВерсийFeatureИмяФайла;
&НаКлиенте
Перем МассивВерсийFeatureВерсия;

&НаКлиенте
Перем МассивВерсийEPFИмяФайла;
&НаКлиенте
Перем МассивВерсийEPFВерсия;

&НаКлиенте
Перем ИдетОпросЭлементовФормTestClient;
&НаКлиенте
Перем МассивСостояниеФормTestClient;

&НаКлиенте
Перем ОбработкаСвязаннаяСИсполняемойФичей;

&НаКлиенте
Перем ТаблицаКонтекстовОбработок;

&НаКлиенте
Перем МассивИменКонтекстовОбработок;

&НаКлиенте
Перем ВыполнятьСценарииАсинхронно;

&НаКлиенте
Перем МассивСценариевДляВыполнения, МассивСтрокДереваДанныеФормы;

&НаКлиенте
Перем ТекИД_СценарияВМассиве;

&НаКлиенте
Перем ТекИД_ШагаВМассиве;

&НаКлиенте
Перем ТекИД_ВыполненногоШагаВМассиве;

&НаКлиенте
Перем СохраненноеСостояниеФормыTestClient;

&НаКлиенте
Перем ВсёЕщёИдётВыполнениеШагов;

&НаКлиенте
Перем МассивИДСтрокиДерева;

&НаКлиенте
Перем МассивРезультатПрохожденияТестовСценария;

&НаКлиенте
Перем ЦветУспешно;
&НаКлиенте
Перем ЦветОжидает;
&НаКлиенте
Перем ЦветНеУспешно;
&НаКлиенте
Перем ЦветЧужойСнипет;

&НаКлиенте
Перем ШагСтрокДляМодуля;

&НаКлиенте
Перем ИмяФайлаЛогаИнструкцииHTML, ТекущаяФичаИнструкцииHTML;

&НаКлиенте
Перем ИмяФайлаЛогаИнструкцииMarkdown, ТекущаяФичаИнструкцииMarkdown;

&НаКлиенте
Перем СтатусЗапускаСценариев;

&НаКлиенте
Перем ТаблицаОбработокДляОтладки;

&НаКлиенте
Перем СтрокаШагаСКоторогоНадоВыполнятьСценарий;

&НаКлиенте
Перем ПредставлениеВертЧертыВТабДок;


&НаКлиенте
Перем ТекущийИсполняемыйФичаФайл;

&НаКлиенте
Перем ПрекратитьВыполнениШаговТакКакЗакончилсяСценарий;

&НаКлиенте
Перем ПрекратитьВыполнениеВсехСценариев;

&НаКлиенте
Перем ПрекратитьВыполнениеДанногоСценария;

&НаКлиенте
Перем МассивPIDОкон1С, ЗначениеПараметровДляСнятияСкриншотов, ТекProcessID, МассивКоординатОкон1С;

&НаКлиенте
Перем ИмяФайлаСубтитров, ИнтервалВыполненияШагаПриЗаписиВидео, БылаОшибкаСкриптовСборкиВидео;

&НаКлиенте
Перем СкриншотСделанВСценарии;

&НаКлиенте
Перем WshShell;

&НаКлиенте
Перем МассивСнипетовПрерывающихЗаписьСценария;

&НаКлиенте
Перем ЭтоЗапускВРежимеБезЗагрукиНастроек;

&НаКлиенте
Перем МассивTTS;

&НаКлиенте
Перем МодульРаботыСВидео;

&НаКлиенте
Перем МодульСообщенийПользователю;

&НаКлиенте
Перем МодульПереводШагов;

&НаКлиенте
Перем МодульSikuliXСевер;

&НаКлиенте
Перем ИмяУправляющиегоФайлаSikuliXСервер;

&НаКлиенте
Перем ИмяФайлаОтветаSikuliXСевер;

&НаКлиенте
Перем НедавноЗагруженныеФичи;

&НаКлиенте
Перем Брейкпоинты;

&НаКлиенте
Перем ИмяСценарияКоторыйНадоВыполнитьПослеПереазгрузки;
&НаКлиенте
Перем СтрокаСценарияКоторыйНадоВыполнитьПослеПереазгрузкиЭтоПример;

&НаКлиенте
Перем ОбработанноеИдОповещения;

&НаКлиенте
Перем СтруктураПоискаСтрокДерева;

&НаКлиенте
Перем КешВерсияОбработки;

&НаКлиенте
Перем КешРежимСовместимости;

&НаКлиенте
Перем СчетчикШаговБезТаймера, МаксСчетчикШаговБезТаймера;

&НаКлиенте
Перем Регулярка;

&НаКлиенте
Перем НадоПерейтиКСтрокеДерева;

&НаКлиенте
Перем ВозниклаОшибкаПодключенияTestClient;

&НаКлиенте
Перем ВозниклаОшибкаОшибкаСетевогоВзаимодействия;

&НаКлиенте
Перем ВозниклаОшибкаВШагеКонтекста;

&НаКлиенте
Перем ГлобальныеЗначенияТаблиц;

&НаКлиенте
Перем ЗафиксированнаяФормаTestClient;

&НаКлиенте
Перем КешДанныхПереводовШагов;

&НаКлиенте
Перем SikuliXСеверЗапущен;

&НаКлиенте
Перем ИмяФайлаВыводаКонсолиSikuliXСервер;

&НаКлиенте
Перем ПроверятьВидимостьЭлементаСУчетомРодителя;

&НаКлиенте
Перем ПроверятьДоступностьЭлементаСУчетомРодителя;

&НаКлиенте
Перем ЕстьКонстантаВКонфигурацииПутьКVA;

&НаКлиенте
Перем ПрефиксИнструментаДляСохраненияНастроек;

&НаКлиенте
Перем ИДДляОбщегоСохраненияНастроек;

&НаКлиенте
Перем ВозможнаОптимизацияРаботыСФайлами;

&НаКлиенте
Перем БиблиотекаДляПодключения;

&НаКлиенте
Перем глСтруктураПараметров;

&НаКлиенте
Перем СохранитьКлиентовТестированияПослеОткрытияФормы;

&НаКлиенте
Перем ЭтоWindowsXP;

&НаКлиенте
Перем ПоказыватьНастройкуПроверкаРаботыVanessaAutomationВРежимеTestClient;

#КонецОбласти

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура Брейкпоинт(Команда)
	ОбработатьУстановкуСнятиеБрейкпоинта();
КонецПроцедуры

&НаКлиенте
Процедура БрейкпоинтУбратьВсе(Команда)
	КопияБрейкпоинты = Новый Массив;
	
	Для каждого Элем Из Брейкпоинты Цикл
		КопияБрейкпоинты.Добавить(Элем);
	КонецЦикла;
	Для каждого Элем Из КопияБрейкпоинты Цикл
		УдалитьБрейкПоинт(Элем);
	КонецЦикла;
	
	СнятьПометкуБрейкпоинтаРекурсивно(Объект.ДеревоТестов.ПолучитьЭлементы());
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыделенныйСценарийФорма(Команда)
	ВыполнитьВыделенныйСценарий();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьФичуФорма(Команда)
	ВыполнитьФичу();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОдинШагФорма(Команда)
	ВыполнитьОдинШаг();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФичиИзКаталога(Команда)
	Объект.текЗначениеОперации = "ЗагрузитьФичиИзКаталога";
	ОбновитьКнопкуЗагрузитьФичи();
	
	Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага                  = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением     = Ложь;
	Объект.РежимВыполненияОдногоШага                                    = Ложь;
	СтрокаШагаСКоторогоНадоВыполнятьСценарий      = Неопределено;
	МассивСостоянияКонтекстовДоВыполненияШага     = Новый Массив;
	
	ЗагрузитьТестыЗагрузитьФичиИзКаталога();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОднуФичу(Команда)
	Объект.текЗначениеОперации = "ЗагрузитьОднуФичу";
	ОбновитьКнопкуЗагрузитьФичи();
	
	Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага                  = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением     = Ложь;
	Объект.РежимВыполненияОдногоШага                                    = Ложь;
	СтрокаШагаСКоторогоНадоВыполнятьСценарий      = Неопределено;
	МассивСостоянияКонтекстовДоВыполненияШага     = Новый Массив;
	
	ЗагрузитьТестыЗагрузитьОднуФичу();
КонецПроцедуры

&НаКлиенте
Процедура Перезагрузить(Команда)
	Объект.ИдетВыполнениеСценариев = Ложь;
	НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Ложь;
	Объект.НадоВыполнитьСценарииПослеЗагрузкиФич = Ложь;
	Объект.НадоВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Ложь;
	ТекущиеДанныеДерева = Элементы.ДеревоТестов.ТекущиеДанные;
	Если ТекущиеДанныеДерева <> Неопределено Тогда
		НадоПерейтиКСтрокеДерева = ТекущиеДанныеДерева.ИДСтроки;
	КонецЕсли;	 
	ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоТестов;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСценарииФорма(Команда)
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ГруппаЗапускТестов;
	СделатьПараметрыКорректными();
	
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Ложь;
	
	ВыполнитьСценарии();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьШаблоныОбработокКоманда(Команда)
	СоздатьШаблоныОбработок();
КонецПроцедуры

&НаКлиенте
Процедура ПерезагрузитьИВыполнить(Команда)
	Объект.ИдетВыполнениеСценариев                                  = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.НадоВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Истина;
	ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоТестов;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ПерезагрузитьИВыполнитьДанныйСценарийФорма(Команда)
	ПерезагрузитьИВыполнитьДанныйСценарий();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФичаФайл(Команда)
	СтрокаФичи = Элементы.ДеревоТестов.ТекущиеДанные;
	Если СтрокаФичи = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	НомерСтрокиВФиче = СтрокаФичи.НомерСтрокиВФиче;
	
	ПолныйПуть   = СтрокаФичи.ПолныйПуть;
	ИмяФайлаФичи = Неопределено;
	Если Найти(НРег(ПолныйПуть),".feature") > 0 Тогда
		ИмяФайлаФичи = ИмяФайлаФичиИзПолногоПути(ПолныйПуть);
	КонецЕсли;	 
	
	Если ИмяФайлаФичи = Неопределено Тогда
		Если СтрокаФичи.Тип <> "Фича" Тогда
			СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаФичи);
			Если СтрокаФичи = Неопределено Тогда
				Сообщить(ПолучитьТекстСообщенияПользователю("Строка с фича-файлом не найдена."));
				Возврат;
			КонецЕсли;	
			
			ИмяФайлаФичи = СтрокаФичи.ПолныйПуть;
		КонецЕсли;	 
	КонецЕсли;	 
	
	КомандаДляЗапуска = ИмяФайлаФичи;
	
	Если ЗначениеЗаполнено(Объект.КомандаОткрытияФичиВТекстовомРедакторе) Тогда
		КомандаДляЗапуска = Объект.КомандаОткрытияФичиВТекстовомРедакторе;
		КомандаДляЗапуска = СтрЗаменить(КомандаДляЗапуска,"%Feature%","""" + ИмяФайлаФичи + """");
		КомандаДляЗапуска = СтрЗаменить(КомандаДляЗапуска,"%LineNumber%",XMLСтрока(НомерСтрокиВФиче));
	КонецЕсли;	 
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработатьЗапускПриложения"", ЭтаФорма)");
		Выполнить("НачатьЗапускПриложения(ОписаниеОповещения, КомандаДляЗапуска)");
	Иначе	
		ЗапуститьПриложение(КомандаДляЗапуска);
	КонецЕсли;  
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФичи(Команда)
	СтрокаФичи = Элементы.ДеревоТестов.ТекущиеДанные;
	Если СтрокаФичи = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если СтрокаФичи.Тип <> "Фича" Тогда
		СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаФичи);
		Если СтрокаФичи = Неопределено Тогда
			Сообщить(ПолучитьТекстСообщенияПользователю("Строка с фича-файлом не найдена."));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	Если Не ЭтоLinux Тогда
		Если WshShell = Неопределено Тогда
			WshShell = ПолучитьWshShell();
			//далее переменная WshShell будет закеширована, чтобы не создавать ComObject каждый раз
		КонецЕсли;	 
		КомандаСистемы = "explorer.exe /select,""" + СтрокаФичи.ПолныйПуть + """";
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаСистемы);
	Иначе	
		Файл = Новый Файл(СтрокаФичи.ПолныйПуть);
		
		Если ЕстьПоддержкаАсинхронныхВызовов Тогда
			ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработатьОткрытьКаталогФичи"", ЭтаФорма)");
			Выполнить("НачатьЗапускПриложения(ОписаниеОповещения, Файл.Путь)");
		Иначе	
			ЗапуститьПриложение(Файл.Путь);
		КонецЕсли;  
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьДействийПользователяКнопка(Команда)
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Если ДанныеКлиентовТестирования.Количество() > 0 Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Имя", "Этот клиент");
			
			НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ДанныеЗапускаКлиентаТестирования = НайденныеСтроки[0];
				Элементы.ДанныеКлиентовТестирования.ТекущаяСтрока = ДанныеЗапускаКлиентаТестирования.ПолучитьИдентификатор();
				ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
			КонецЕсли;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ТекущиеДанные = Неопределено Тогда
		СделатьСообщение("Не найден TestClient для подключения.");
		Возврат;
	КонецЕсли;	 
	
	Если ТекущиеДанные.ТипКлиента = "Web" Тогда
		СделатьСообщение("Web клиент не поддерживает запись действий пользователя.");
		Возврат;
	КонецЕсли;	 
	
	ЭтаФорма.ТекущийЭлемент = Элементы.РаботасUI;
	НачатьЗаписьДействийПользователя();
	УправлениеВидимостьюЗаписиДействийПользователя("НачатьЗапись");
КонецПроцедуры

&НаКлиенте
Процедура ПриостановитьЗаписьДействийПользователя(Команда)
	УправлениеВидимостьюЗаписиДействийПользователя("ПриостановитьЗапись");
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗаписьДействийПользователя(Команда)
	УправлениеВидимостьюЗаписиДействийПользователя("ПродолжитьЗапись");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодключитьTestClient(Команда)
	ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующий();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗаписьДействийПользователяКнопка(Команда)
	ЗавершитьЗаписьДействийПользователя();
	УправлениеВидимостьюЗаписиДействийПользователя("ЗавершитьЗапись");
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуВыполнятьСценарийСЭтогоШага(Команда)
	ПроцУстановитьПометкуВыполнятьСценарийСЭтогоШага();
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуВыполнятьСценарийСЭтогоШага(Команда)
	Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов = Ложь;
	Если СтрокаШагаСКоторогоНадоВыполнятьСценарий <> Неопределено Тогда
		ПромСтрока = Неопределено;
		НайтиСтрокуДереваПоИдСтроки(СтрокаШагаСКоторогоНадоВыполнятьСценарий.ИдСтроки, Объект.ДеревоТестов.ПолучитьЭлементы(), ПромСтрока);
		СтрокаШагаСКоторогоНадоВыполнятьСценарий = ПромСтрока;
		
		СтрокаШагаСКоторогоНадоВыполнятьСценарий.ВыполнятьСценарийСЭтогоШага = Ложь;
	КонецЕсли;	 
	
	СтрокаШагаСКоторогоНадоВыполнятьСценарий = Неопределено;
	
	Элементы.ДеревоТестовКонтекстноеМенюВыполнятьСценарииСначала.Видимость = Ложь;
	
	Сообщить(ПолучитьТекстСообщенияПользователю("Пометка снята."));
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьСостояниеФормыTestClientКнопка(Команда)
	ЗапомнитьСостояниеФормыTestClient();
КонецПроцедуры

&НаКлиенте
Процедура ЗабытьСостояниеФормыTestClientКнопка(Команда)
	ЗабытьСостояниеФормыTestClient();
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяОбработкиVA()
	Если Объект.ВерсияПоставки = "standart" Тогда
		Возврат "VanessaAutomation";
	ИначеЕсли Объект.ВерсияПоставки = "single" Тогда
		Возврат "VanessaAutomationsingle"; 
	Иначе	
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Неизвестная версия поставки Vanessa-Automation: %1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Объект.ВерсияПоставки); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции	 

&НаКлиенте
Процедура ИсследовательФормы(Команда)
	Если НЕ ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Сообщить(ПолучитьТекстСообщенияПользователю("TestClient НЕ подключен."));
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Язык", Объект.ЯзыкГенератораGherkin);
	ОткрытьФорму("ВнешняяОбработка." + ПолучитьИмяОбработкиVA() + ".Форма.ИсследовательФормы", ПараметрыФормы,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИзмененияФормыGherkinКнопка(Команда)
	ПолучитьИзмененияФормыGherkin();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСостояниеТекущегоЭлементаФормыКнопка(Команда)
	ПолучитьСостояниеТекущегоЭлементаФормы();
КонецПроцедуры

&НаКлиенте
Процедура ДляВызоваКонфигуратора(Команда)
	Зн = 1/0;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДеревоДоФич(Команда)
	ДеревоФормыСтроки = Объект.ДеревоТестов.ПолучитьЭлементы();
	СвернутьДеревоДоФичРекурсивно(ДеревоФормыСтроки);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДеревоДоСценариев(Команда)
	ДеревоФормыСтроки = Объект.ДеревоТестов.ПолучитьЭлементы();
	СвернутьДеревоДоСценариевРекурсивно(ДеревоФормыСтроки);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДеревоДоШагов(Команда)
	ДеревоФормыСтроки = Объект.ДеревоТестов.ПолучитьЭлементы();
	СвернутьДеревоДоШаговРекурсивно(ДеревоФормыСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЧтоЗаписьВидеоБудетРаботать(Команда)
	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПодключитьБиблиотекуРаботыСВидео();
	МодульРаботыСВидео.ПроверитьЧтоЗаписьВидеоБудетРаботать(ПараметрыВидео);
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьНастройки(Команда)
	СохранитьНастройки();
	СохранитьНастройкиВХранилище("КаталогиБиблиотек", Объект.КаталогиБиблиотек,ПараметрыДляСохраненияНастроек());
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиПоУмолчанию(Команда)
	ПараметрыФайла = ПрочитатьСтруктуруИзJSONФайлаКлиент(Объект.КаталогИнструментов + "\tools\JSON\VBParams836UF.json");
	
	Для Каждого Элем Из ПараметрыФайла Цикл
		Если Лев(Элем.Ключ, 11) = "ЗаписьВидео" Тогда
			Если Найти(Элем.Ключ,"ВодянойЗнак") > 0 Тогда
				Продолжить;
			ИначеЕсли Найти(Элем.Ключ,"ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм") > 0 Тогда
				Продолжить;
			ИначеЕсли Найти(Элем.Ключ,"ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы") > 0 Тогда
				Продолжить;
			ИначеЕсли Найти(Элем.Ключ,"ЗаписьВидеоКаталогМузыки") > 0 Тогда
				Продолжить;
			КонецЕсли;	 
			
			Если Найти(Элем.Ключ,"СловарьЗаменСписок") > 0 Тогда
				Объект.ЗаписьВидеоСловарьЗамен.Очистить();
				Для Каждого ПутьКСловарюЗамен Из Элем.Значение Цикл
					Объект.ЗаписьВидеоСловарьЗамен.Добавить(ПреобразоватьПутьСТочкамиКНормальномуПути(ПутьКСловарюЗамен));
				КонецЦикла;	
				
				Продолжить;
			КонецЕсли;	 
			
			Если Найти(Элем.Ключ,"СловарьЗамен") > 0 Тогда
				Объект.ЗаписьВидеоСловарьЗамен.Очистить();
				Объект.ЗаписьВидеоСловарьЗамен.Добавить(ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение));
				Продолжить;
			КонецЕсли;	 
			
			Значение = Элем.Значение;
			Если Лев(Элем.Значение, 1) = "." Тогда
				Значение = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);
			КонецЕсли;
			
			Объект[Элем.Ключ] = Значение;
		КонецЕсли;
	КонецЦикла;
	
	НастройкаДоступностиВидимостиЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКлиентовТестированияКоманда(Команда)
	СохранитьКлиентовТестирования();
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьВыбранногоКлиентаТестирования(Команда)
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	ПодключитьПрофильTestClientПоИмени(ТекущиеДанные.Имя);
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьДействийПользлователяВВыбранномКлиентеТестирования(Команда)
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипКлиента = "Web" Тогда
		СделатьСообщение("Web клиент не поддерживает запись действий пользователя.");
		Возврат;
	КонецЕсли;	 
	
	Если Не ТекущиеДанные.Подключен Тогда
		ПодключитьВыбранногоКлиентаТестирования("");
	КонецЕсли;
	
	НачатьЗаписьДействийПользователя(Ложь);
	ЭтаФорма.ТекущийЭлемент = Элементы.ГруппаДополнительно;
	
	УправлениеВидимостьюЗаписиДействийПользователя("НачатьЗапись");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВыбранногоКлиентаТестирования(Команда)
	РазорватьСоединениеTestClient();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу1(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[0].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу2(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[1].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу3(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[2].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу4(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[3].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу5(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[4].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу6(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[5].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу7(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[6].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу8(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[7].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу9(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[8].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзвестныйШаг(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТаблицаИзвестныхStepDefinition", ТаблицаИзвестныхStepDefinition);
	ПараметрыФормы.Вставить("ТаблицаУжеСуществующихСценариев", ТаблицаУжеСуществующихСценариев);
	ПараметрыФормы.Вставить("ЯзыкГенератораGherkin", Объект.ЯзыкГенератораGherkin);
	ПараметрыФормы.Вставить("КаталогИнструментов", Объект.КаталогИнструментов);
	ПараметрыФормы.Вставить("МакетШаблонПеревода", МакетШаблонПеревода);
	ПараметрыФормы.Вставить("ДвоичныеДанныеФайлПеревода", ПолучитьФайлыПеревода());
	
	
	
	ОткрытьФорму("ВнешняяОбработка." + ПолучитьИмяОбработкиVA() + ".Форма.ВыборИзвестногоШага", ПараметрыФормы,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДанныйСценарийСТекущегоШагаФорма(Команда)
	ВыполнитьДанныйСценарийСТекущегоШага();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДанныйСценарийСТекущегоШагаСПродолжениемФорма(Команда)
	ВыполнитьДанныйСценарийСТекущегоШагаСПродолжением();
КонецПроцедуры

&НаКлиенте
Процедура СброситьКешИзвестныхStepDefinition(Команда)
	СброситьКешИзвестныхStepDefinitionСервер();
	СделатьСообщение("Надо сделать перезапуск фреймворка тестирования.");
КонецПроцедуры

//	{ управление видимостью колонок ДереваТестов
&НаКлиенте
Процедура ПоказатьСкрытьПутьКФайлу(Команда)
	Если Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовПолныйПуть.Видимость Или Команда = "Показать" Тогда
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовПолныйПуть.Видимость = Истина;
		Элементы.ПоказатьСкрытьПутьКФайлу.Картинка = БиблиотекаКартинок.УстановитьФлажки;
	Иначе
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовПолныйПуть.Видимость = Ложь;
		Элементы.ПоказатьСкрытьПутьКФайлу.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьСнипет(Команда)
	Если Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСнипет.Видимость  Или Команда = "Показать" Тогда
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСнипет.Видимость = Истина;
		Элементы.ПоказатьСкрытьСнипет.Картинка = БиблиотекаКартинок.УстановитьФлажки;
	Иначе
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСнипет.Видимость = Ложь;
		Элементы.ПоказатьСкрытьСнипет.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьАдресСнипета(Команда)
	Если Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовАдресСнипета.Видимость  Или Команда = "Показать" Тогда
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовАдресСнипета.Видимость = Истина;
		Элементы.ПоказатьСкрытьАдресСнипета.Картинка = БиблиотекаКартинок.УстановитьФлажки;
	Иначе
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовАдресСнипета.Видимость = Ложь;
		Элементы.ПоказатьСкрытьАдресСнипета.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьСтрокаРеальнойПроцедуры(Команда)
	Если Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСтрокаРеальнойПроцедуры.Видимость  Или Команда = "Показать" Тогда
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСтрокаРеальнойПроцедуры.Видимость = Истина;
		Элементы.ПоказатьСкрытьСтрокаРеальнойПроцедуры.Картинка = БиблиотекаКартинок.УстановитьФлажки;
	Иначе
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСтрокаРеальнойПроцедуры.Видимость = Ложь;
		Элементы.ПоказатьСкрытьСтрокаРеальнойПроцедуры.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьВсеКолонки(Команда)

	Если Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСтрокаРеальнойПроцедуры.Видимость Или
		 Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовАдресСнипета.Видимость Или
		 Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСнипет.Видимость Или
		 Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовПолныйПуть.Видимость Или
		 Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовИДСтроки.Видимость
				
		Тогда

		ПоказатьСкрытьСтрокаРеальнойПроцедуры("Показать");
		ПоказатьСкрытьАдресСнипета("Показать");
		ПоказатьСкрытьСнипет("Показать");
		ПоказатьСкрытьПутьКФайлу("Показать");
		//ПоказатьСкрытьИДСтроки("Показать");
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.УстановитьФлажки;
		
	Иначе
		ПоказатьСкрытьСтрокаРеальнойПроцедуры("");
		ПоказатьСкрытьАдресСнипета("");
		ПоказатьСкрытьСнипет("");
		ПоказатьСкрытьПутьКФайлу("");
		//ПоказатьСкрытьИДСтроки("");
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьИДСтроки(Команда)
	Если Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовИДСтроки.Видимость  Или Команда = "Показать" Тогда
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовИДСтроки.Видимость = Истина;
		Элементы.ПоказатьСкрытьИДСтроки.Картинка = БиблиотекаКартинок.УстановитьФлажки;
	Иначе
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовИДСтроки.Видимость = Ложь;
		Элементы.ПоказатьСкрытьИДСтроки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;	
КонецПроцедуры
//	} управление видимостью колонок ДереваТестов

&НаКлиенте
Процедура РедактироватьТаблицуТекст(Команда)
	ОткрытьРедактированиеТаблицыGherkin();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьМакетПоТаблице(Команда)
	НачалоСтроки = 0;
	НачалоКолонки = 0;
	КонецСтроки = 0;
	КонецКолонки = 0;
	ВерхняяГраница = 0;
	НижняяГраница = 0;
	ОпределитьГраницыТаблицыGherkin(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки, ВерхняяГраница, НижняяГраница);
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Объект.СгенерированныйСценарий, Символы.ПС);
	
	МассивСтрокДляРедактирования = Новый Массив;
	Для Ккк = (НижняяГраница - 1) По ВерхняяГраница - 1 Цикл
		МассивСтрокДляРедактирования.Добавить(МассивСтрок[Ккк]);
	КонецЦикла;
	
	Если МассивСтрокДляРедактирования.Количество() = 0 Тогда
		СделатьСообщение("Не найдена таблица для редактирования.");
		Возврат;
	КонецЕсли;	 
	
	ТабДок = Новый ТабличныйДокумент;
	НомСтр = 0;
	Для Каждого СтрокаМассива Из МассивСтрокДляРедактирования Цикл
		НомСтр = НомСтр + 1;
		
		
		Стр = СокрЛП(СтрокаМассива);
		Если Лев(Стр,1) = "|" Тогда
			Стр = Сред(Стр,2);
		КонецЕсли;	 
		
		Если Прав(Стр,1) = "|" Тогда
			Стр = Лев(Стр,СтрДлина(Стр)-1);
		КонецЕсли;	 
		
		МассивЗначений = РазложитьСтрокуВМассивПодстрок(Стр,"|");
		
		НомКол = 0;
		Для Ккк = 0 По МассивЗначений.Количество()-1 Цикл
			НомКол = НомКол + 1;
			
			ТекЗначение = СокрЛП(МассивЗначений[Ккк]);
			Если ТекЗначение = "''" Тогда
				ТекЗначение = "";
			КонецЕсли;	
			
			Если Лев(ТекЗначение,1) = "'" И Прав(ТекЗначение,1) = "'" Тогда
				ТекЗначение = Сред(ТекЗначение,2);
				ТекЗначение = Лев(ТекЗначение,СтрДлина(ТекЗначение)-1);
			КонецЕсли;	 
			
			ТекЗначение = СтрЗаменить(ТекЗначение,"\n",Символы.ПС);
			
			ТабДок.Область(НомСтр,НомКол,НомСтр,НомКол).Текст = ТекЗначение;
			
			Если НомСтр = 1 Тогда
				ТабДок.Область(НомСтр,НомКол,НомСтр,НомКол).ШиринаКолонки = 12;
			КонецЕсли;	 
		КонецЦикла;	
	КонецЦикла;	
	
	ТабДок.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроизвольныйКод(Команда)
	Выполнить(РеквизитПроизвольныйКод);
КонецПроцедуры

&НаКлиенте
Процедура ВычислитьPIDЭтогоСеанса(Команда)
	ВычислитьPIDЭтогоСеансаСлужебный();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиКлиент(Команда)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуВСписокБиблиотек(Команда)
	Элементы.КаталогиБиблиотек.ДобавитьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуВСписокСловарейЗамен(Команда)
	Элементы.ЗаписьВидеоСловарьЗамен.ДобавитьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСгенерированныйСценарий(Команда)
	Объект.СгенерированныйСценарий = "";
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиТекстНаДругойЯзык(Команда)
	Перевод = ПеревестиТекст(Объект.СгенерированныйСценарий);
	Объект.СгенерированныйСценарий = Перевод;
КонецПроцедуры

&НаКлиенте
Процедура ТекстовыйРедакторNotepadpp(Команда)
	Объект.КомандаОткрытияФичиВТекстовомРедакторе = """C:\Program Files (x86)\Notepad++\notepad++.exe"" %Feature% -n%LineNumber%";
КонецПроцедуры

&НаКлиенте
Процедура ТекстовыйРедакторVsCode(Команда)
	Объект.КомандаОткрытияФичиВТекстовомРедакторе = """C:\Program Files (x86)\Microsoft VS Code\code.exe"" -g %Feature%:%LineNumber%";
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеСтрокиДерева(ДеревоФормыСтроки)
	Для Каждого Строка Из ДеревоФормыСтроки Цикл
		РазвернутьСтрокуДерева(Строка,Ложь);
		
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			РазвернутьВсеСтрокиДерева(ПодчиненныеСтроки);
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры 

&НаКлиенте
Процедура РазвернутьВсеСтрокиДереваСлужебный(Команда)
	ДеревоФормыСтроки = Объект.ДеревоТестов.ПолучитьЭлементы();
	РазвернутьВсеСтрокиДерева(ДеревоФормыСтроки);
КонецПроцедуры

&НаКлиенте
Процедура СброситьПодключениеSikuliXСервера(Команда)
	SikuliXСеверЗапущен = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийДеревоТестов

&НаКлиенте
Процедура ДеревоТестовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы.ДеревоТестов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекДанные.ТекстОшибки) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьТекстОшибки(ТекДанные.ТекстОшибки,ТекДанные.ПроизвольныеЗначения);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если Копирование Тогда //F9
		ОбработатьУстановкуСнятиеБрейкпоинта();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестовПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		Файл = ПараметрыПеретаскивания.Значение;
		Если НРег(Файл.Расширение) = ".feature" Тогда
			Объект.КаталогФич = Файл.ПолноеИмя;
			ЗагрузитьФичи();
		КонецЕсли;	 
	ИначеЕсли Версия8313ИлиВыше И ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СсылкаНаФайл") Тогда
		Файл = ПараметрыПеретаскивания.Значение.Файл;
		Если НРег(Файл.Расширение) = ".feature" Тогда
			Объект.КаталогФич = Файл.ПолноеИмя;
			ЗагрузитьФичи();
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбъектНаСервере = ЭтотОбъектНаСервере();
	ИспользуемоеИмяФайла = ОбъектНаСервере.ИспользуемоеИмяФайла;
	
	ЕстьПоддержкаНемодальныхФорм    = УзнатьЕстьПоддержкаНемодальныхФорм();
	ЕстьПоддержкаАсинхронныхВызовов = УзнатьЕстьПоддержкаАсинхронныхВызовов();
	ЕстьЗащитаОтОпасныхДействий     = УзнатьЕстьЗащитаОтОпасныхДействий();
	
	Если Параметры.Свойство("КаталогИнструментов") Тогда
		Объект.КаталогИнструментов = Параметры.КаталогИнструментов;
	КонецЕсли;	
	Если Параметры.Свойство("КаталогПроекта") Тогда
		Объект.КаталогПроекта = Параметры.КаталогПроекта;
	КонецЕсли;	
	
	//Служебная строка. Не удалять. Определение режима поставки.
	Если НЕ ЗначениеЗаполнено(Объект.ВерсияПоставки) Тогда
		Объект.ВерсияПоставки = "standart";
	КонецЕсли;	 
	
	Объект.КоличествоСекундПоискаОкна = 10;
	Объект.КоличествоПопытокВыполненияДействия = 3;
	
	МакетШаблонПеревода = ОбъектНаСервере.ПолучитьМакет("ШаблонПеревода");
	
	СтатусыРезультатаТестирования = ОбъектНаСервере.СтатусыРезультатаТестирования;
	
	Если СокрЛП(Объект.КаталогИнструментов) = "" Тогда
		ПутьКОбработке = ПолучитьПутьКОбработкеСервер();
		Если ЗначениеЗаполнено(ПутьКОбработке) Тогда
			Объект.КаталогИнструментов = КаталогИзИмениФайла(ПутьКОбработке);
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИнициализацияПеременныхМодуляФормы();
	АсинхронноеПодключениеМодулей();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы = Истина Тогда //для совместимости с 8.2
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьПодтверждениеПриЗакрытии = "Да" И НЕ ЗакрытьФормуVA
		И НЕ Объект.РежимСамотестирования И НЕ Объект.НадоЗавершитьРаботуСистемыПослеВыполненияВсехСценариев Тогда
		
		Отказ = Истина;
		ТекстВопроса = ПолучитьТекстСообщенияПользователю("Вы уверены?");
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.ОК, ПолучитьТекстСообщенияПользователю("Закрыть форму"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОтключитьОбработчикОжидания("ОпросЭлементовФормTestClient");
	ОтключитьОбработчикОжидания("ПроверкаВнешнихКоманд");
	Если НЕ ЭтоЗапускВРежимеБезЗагрукиНастроек Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если Не ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.8.0") Тогда
			СохранитьНастройки();
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Попытка
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.РазорватьСоединение();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ОстановитьSikuliXСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ВыборИзвестногоШага" Тогда
		Объект.СгенерированныйСценарий = Объект.СгенерированныйСценарий + Символы.ПС + Символы.Таб + Параметр;
	ИначеЕсли ИмяСобытия = "РедактированиеТаблицыGherkin" Тогда
		ЗаменитьТаблицуGherkinПослеРедактирования(Параметр);
	ИначеЕсли Найти(ИмяСобытия, "ВыполнитьСценарий") > 0 или Найти(ИмяСобытия, "ЗагрузитьСценарий") Тогда
		
		Если НЕ ЭтаФорма.Открыта() Тогда
			Возврат;
		КонецЕсли;
		
		НадоПерейтиКСтрокеДерева = -1;
		
		ИдОповещения = Параметр.ИдОповещения;
		Если ИдОповещения = ОбработанноеИдОповещения Тогда
			Возврат;
		КонецЕсли;	 
		
		ОбработанноеИдОповещения = ИдОповещения; 
		
		Объект.КаталогПроекта = Параметр.КаталогПроекта;
		Объект.КаталогФич     = Параметр.ПутьКСценариям;
		
		Объект.НадоВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Ложь;
		
		Если Параметр.Свойство("ОстановкаПриВозникновенииОшибки") Тогда
			Объект.ОстановкаПриВозникновенииОшибки = Параметр.ОстановкаПриВозникновенииОшибки;
		КонецЕсли;	 
		
		НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Ложь;
		
		Если Параметр.Свойство("СТекущегоШага") Тогда
			Если Параметр.СТекущегоШага Тогда
				НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Истина;
				НомерСтрокиСценарияПереданныйИзвне           = Параметр.НомерСтрокиДляЗапускаСТекущегоШагаСценария;
				Если ФормаVanessaAutomationОткрылась Тогда
					ДопПараметры = Новый Структура;
					ДопПараметры.Вставить("ЗапуститьСценарийСоСтрокиПрисланнойИзвне",Истина);
					ЗагрузитьФичи(ДопПараметры);
				КонецЕсли;	 
				Возврат;
			КонецЕсли;	 
		КонецЕсли;
		
		Объект.ВыполнениеСценарияИзОбработкиОповещения = Истина;
		
		Если Найти(ИмяСобытия, "ВыполнитьСценарий") > 0 Тогда
			Объект.НадоВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Истина;
			Если ФормаVanessaAutomationОткрылась Тогда
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("ПерезагрузитьИВыполнить",Истина);
				ЗагрузитьФичи(ДопПараметры);
			КонецЕсли;	 
		ИначеЕсли Найти(ИмяСобытия, "ЗагрузитьСценарий") > 0 Тогда
			ТекущиеДанныеДерева = Элементы.ДеревоТестов.ТекущиеДанные;
			Если ТекущиеДанныеДерева <> Неопределено Тогда
				НадоПерейтиКСтрокеДерева = ТекущиеДанныеДерева.ИДСтроки;
				Если ФормаVanessaAutomationОткрылась Тогда
					ЗагрузитьФичи();
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЕсли;	 
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийЭлементовФормы

#Область ВыборКаталогов

&НаКлиенте
Процедура КаталогПроектаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	Если ЗначениеЗаполнено(Объект.КаталогПроекта) Тогда
		ДиалогВыбораКаталога.ПолноеИмяФайла = Объект.КаталогПроекта;
	КонецЕсли; 
	ПараметрыОбъекта = Новый Структура("МножественныйВыбор, ИмяРеквизитаОбъекта, ИмяРеквизитаФормы", ДиалогВыбораКаталога.МножественныйВыбор, "КаталогПроекта", "");
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогВыборЗавершение"", ЭтаФорма, ПараметрыОбъекта)"));
	Иначе
		Если ДиалогВыбораКаталога.Выбрать() Тогда
			МассивВыбранныхФайлов = Новый Массив;
			МассивВыбранныхФайлов.Добавить(ДиалогВыбораКаталога.Каталог);
			КаталогВыборЗавершение(МассивВыбранныхФайлов, ПараметрыОбъекта);
		КонецЕсли; 
	КонецЕсли;
	
	ЗагрузитьГлобальныеПеременные();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыборЗавершение(ВыбранныеФайлы, ПараметрыОбъекта) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0
		Тогда
		
		Возврат;
	КонецЕсли;
	
	ВыборОбъектаМножественный = Ложь;
	Если ПараметрыОбъекта.Свойство("МножественныйВыбор") Тогда
		ВыборОбъектаМножественный = ПараметрыОбъекта["МножественныйВыбор"];
	КонецЕсли;
	
	ИмяРеквизитаОбъекта = ""; ИмяРеквизитаФормы = "";
	Если ПараметрыОбъекта.Свойство("ИмяРеквизитаОбъекта", ИмяРеквизитаОбъекта) И ЗначениеЗаполнено(ИмяРеквизитаОбъекта) Тогда 
		Объект[ИмяРеквизитаОбъекта] =  ?(ВыборОбъектаМножественный, ВыбранныеФайлы, ВыбранныеФайлы[0]);
	КонецЕсли;
	
	Если ПараметрыОбъекта.Свойство("ИмяРеквизитаФормы", ИмяРеквизитаФормы) И ЗначениеЗаполнено(ИмяРеквизитаФормы) Тогда 
		Объект[ИмяРеквизитаФормы] =  ?(ВыборОбъектаМножественный, ВыбранныеФайлы, ВыбранныеФайлы[0]);
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогиБиблиотекЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.КаталогиБиблиотек.ТекущиеДанные;
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогиБиблиотекЗначениеНачалоВыбораЗавершение"", ЭтаФорма, ТекущиеДанные)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогиБиблиотекЗначениеНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0
		Тогда
		
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.КаталогиБиблиотек Цикл
		Если Строка.Значение = Элементы.КаталогиБиблиотек.ТекущиеДанные.Значение Тогда
			Строка.Значение = ВыбранныеФайлы[0];
			СохранитьНастройкиВХранилище("КаталогиБиблиотек", Объект.КаталогиБиблиотек,ПараметрыДляСохраненияНастроек());
			Прервать;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputAllureНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогOutputAllureНачалоВыбораЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputAllureНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0
		Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогOutputAllure = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputСкриншотыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогOutputСкриншотыЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputСкриншотыЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0
		Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогOutputСкриншоты = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputjUnitНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогOutputjUnitНачалоВыбораЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputjUnitНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0
		Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогOutputjUnit = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputCucumberJsonНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогOutputCucumberJsonНачалоВыбораЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputCucumberJsonНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0
		Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогOutputCucumberJson = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputВнутреннийФорматНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогOutputВнутреннийФорматНачалоВыбораЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputВнутреннийФорматНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0
		Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ИмяФайлаЛогВыполненияСценариев = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаЛогОшибокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""ИмяКаталогаЛогОшибокНачалоВыбораЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаЛогОшибокНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0
		Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ИмяКаталогаЛогОшибок = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputИнструкцияHTMLНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогOutputИнструкцияHTMLЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputИнструкцияMarkdownНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогOutputИнструкцияMarkdownЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputИнструкцияHTMLЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0
		Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогOutputИнструкцияHTML = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputИнструкцияMarkdownЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0
		Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогOutputИнструкцияMarkdown = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputИнструкцияВидеоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогOutputИнструкцияВидеоЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputИнструкцияВидеоЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0
		Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогOutputИнструкцияВидео = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКаталогМузыкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""ЗаписьВидеоКаталогМузыкиЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКаталогМузыкиЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0
		Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоКаталогМузыки = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоПутьКДвижкуTTSНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""ЗаписьВидеоПутьКДвижкуTTSЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоПутьКДвижкуTTSЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0
		Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоПутьКДвижкуTTS = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоСловарьЗаменНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""ЗаписьВидеоСловарьЗаменЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоСловарьЗаменЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0
		Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоСловарьЗамен = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоФайлКурсораМышкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""ЗаписьВидеоФайлКурсораМышкиЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоФайлКурсораМышкиЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0
		Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоФайлКурсораМышки = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоФайлВодянойЗнакНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""ЗаписьВидеоФайлВодянойЗнакЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоФайлВодянойЗнакЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0
		Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ЗаписьВидеоФайлВодянойЗнак = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура КаталогИнструментовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""КаталогИнструментовЗавершение"", ЭтаФорма)"));
КонецПроцедуры

&НаКлиенте
Процедура КаталогИнструментовЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0
		Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.КаталогИнструментов = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ВерсияПлатформыДляГенерацииEPFНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.КаталогиБиблиотек.ТекущиеДанные;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""ВерсияПлатформыДляГенерацииEPFНачалоВыбораЗавершение"", ЭтаФорма, ТекущиеДанные)"));
КонецПроцедуры

&НаКлиенте
Процедура ВерсияПлатформыДляГенерацииEPFНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0
		Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ВерсияПлатформыДляГенерацииEPF = ВыбранныеФайлы[0];
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоСловарьЗаменЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ЗаписьВидеоСловарьЗамен.ТекущиеДанные;
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Показать(Вычислить("Новый ОписаниеОповещения(""ЗаписьВидеоСловарьЗаменНачалоВыбораЗавершение"", ЭтаФорма, ТекущиеДанные)"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоСловарьЗаменНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0
		Тогда
		
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.ЗаписьВидеоСловарьЗамен Цикл
		Если Строка.Значение = Элементы.ЗаписьВидеоСловарьЗамен.ТекущиеДанные.Значение Тогда
			Строка.Значение = ВыбранныеФайлы[0];
			Прервать;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КаталогПроектаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.КаталогПроекта) Тогда
		ЗагрузитьГлобальныеПеременные();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПрочиеЭлементыФормы

&НаКлиенте
Процедура ПроверкаРаботыVanessaAutomationВРежимеTestClientПриИзменении(Элемент)
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ЕстьКонстантаВКонфигурацииПутьКVA",ЕстьКонстантаВКонфигурацииПутьКVA);
	УстановитьВидимостьСлужебныхЭлементов(ДопПараметры);
	Объект.ВыполнятьШагиАссинхронно = Ложь;
	ОбновитьЗаголовокФормы();
КонецПроцедуры

&НаКлиенте
Процедура КаталогИнструментовСлужебныйПриИзменении(Элемент)
	ПодключитьБиблиотекуРаботыСВидео();
	ЗагрузитьПлагины();
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьИнструкциюВидеоПриИзменении(Элемент)
	НастройкаДоступностиВидимостиЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьИнструкциюHTMLПриИзменении(Элемент)
	НастройкаДоступностиВидимостиЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьИнструкциюMarkdownПриИзменении(Элемент)
	НастройкаДоступностиВидимостиЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьСкриншотПриВозникновенииОшибкиПриИзменении(Элемент)
	НастройкаДоступностиВидимостиЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьОтчетВФорматеАллюрПриИзменении(Элемент)
	НастройкаДоступностиВидимостиЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьОтчетВФорматеxUnitПриИзменении(Элемент)
	НастройкаДоступностиВидимостиЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьОтчетВФорматеCucumberJsonПриИзменении(Элемент)
	НастройкаДоступностиВидимостиЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьЛогВыполненияСценариевВТекстовыйФайлПриИзменении(Элемент)
	НастройкаДоступностиВидимостиЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьЛогОшибокВТекстовыйФайлПриИзменении(Элемент)
	НастройкаДоступностиВидимостиЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоДелатьНаложениеTTSПриИзменении(Элемент)
	НастройкаДоступностиВидимостиЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ЗапускатьТестКлиентВРежимеОтладкиПриИзменении(Элемент)
	НастройкаДоступностиВидимостиЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура РежимСамотестированияПриИзменении(Элемент)
	ОбновитьЗаголовокФормы();
КонецПроцедуры

&НаКлиенте
Процедура КаталогиБиблиотекПослеУдаления(Элемент)
	СохранитьНастройкиВХранилище("КаталогиБиблиотек", Объект.КаталогиБиблиотек,ПараметрыДляСохраненияНастроек());
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКлиентовТестированияПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	
	Если ТекущиеДанные.Имя = "Этот клиент" 
	И Элементы.ДанныеКлиентовТестирования.ТекущийЭлемент.Имя <> "ДанныеКлиентовТестированияДопПараметры"
	И Элементы.ДанныеКлиентовТестирования.ТекущийЭлемент.Имя <> "ДанныеКлиентовТестированияТипКлиента"
	И Элементы.ДанныеКлиентовТестирования.ТекущийЭлемент.Имя <> "ДанныеКлиентовТестированияПорт"
	И Элементы.ДанныеКлиентовТестирования.ТекущийЭлемент.Имя <> "ДанныеКлиентовТестированияПутьКИнфобазе"
	Тогда
		Сообщить(ПолучитьТекстСообщенияПользователю("Нельзя изменять текущее поле у зарезервированного подключения <Этот клиент>."));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКлиентовТестированияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	// проверка на дубли в колонке "Имя"
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя", Элемент.ТекущиеДанные.Имя);
	
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 1 Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("В таблице подключений уже есть подключение с именем <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Элемент.ТекущиеДанные.Имя);
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.ИмяКомпьютера) Тогда
		Элемент.ТекущиеДанные.ИмяКомпьютера = "localhost";
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКлиентовТестированияПослеУдаления(Элемент)
	
	Если ДанныеКлиентовТестирования.Количество() = 0 Тогда
		Сообщить(ПолучитьТекстСообщенияПользователю("Должна оставаться строка подключения текущего клиента"));
		ЗаполнитьДанныеТекущейИнфобазы();
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя", "Этот клиент");
	
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		СделатьСообщение("Данные по основному подключению Testclient перезаполнены.");
		ЗаполнитьДанныеТекущейИнфобазы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКлиентовТестированияТипКлиентаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.ТипКлиента = "Web" Тогда
		Если НРег(ТекущиеДанные.ИмяКомпьютера) = "localhost" Тогда
			ТекущиеДанные.ПортЗапускаТестКлиента = 1538;
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКлиентовТестированияИмяКомпьютераПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.ТипКлиента = "Web" Тогда
		Если НРег(ТекущиеДанные.ИмяКомпьютера) <> "localhost" Тогда
			Если ТекущиеДанные.ПортЗапускаТестКлиента = 1538 Тогда
				ТекущиеДанные.ПортЗапускаТестКлиента = 1541;
			КонецЕсли;	 
		Иначе	
			Если ТекущиеДанные.ПортЗапускаТестКлиента = 1541 Тогда
				ТекущиеДанные.ПортЗапускаТестКлиента = 1538;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ЯзыкГенератораGherkinПриИзменении(Элемент)
	ОбновитьВидимостьЭлементовСвязанныхСПереводомТекста();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнятьШагиАссинхронноПриИзменении(Элемент)
	ОбработкаВидимостиВыполнятьШагиАссинхронно();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьSikuliXСерверПриИзменении(Элемент)
	ОбработкаВидимостиИспользоватьSikuliXСервер();
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЭкспортныеПроцедурыИФункции

#Область ВыполнениеШагов

&НаКлиенте
Процедура Шаг(Стр, ВыполнятьЧерезВременнуюФичу = Ложь) Экспорт
	Поз = Найти(Стр, Символы.ПС);
	Если (Поз > 0) или ВыполнятьЧерезВременнуюФичу Тогда //значит это многострочный текст - для него будем работать через временную фичу
		ВыполнитьМетодШагЧерезВременныйФичаФайл(Стр);
	Иначе
		ДвДанныеvbFeatureReader = Неопределено;
		Если Объект.ВерсияПоставки = "standart" Тогда
			ДвДанныеvbFeatureReader = Новый ДвоичныеДанные(ПолучитьПутьКFeatureReader());
		КонецЕсли;	 
		ТекШаг                  = ПолучитьДанныеДляВыполненияОдногоШага(Стр, ДвДанныеvbFeatureReader, Объект.КаталогИнструментов);
		
		Если НЕ ТекШаг.ШагНайден Тогда
			ВыполнитьМетодШагЧерезВременныйФичаФайл(Стр);
			Возврат;
		КонецЕсли;	 
		
		
		ОбработкаТеста                     = ПолучитьКонтекстТестаПоАдресСнипета(ТекШаг.ИмяФайла);
		ОбработкаТеста.Контекст            = ОбъектКонтекст;
		ОбработкаТеста.КонтекстСохраняемый = ОбъектКонтекстСохраняемый;
		
		СписокАргументов = ТекШаг.ЗначенияПараметров;
		МассивПараметров = ПолучитьМассивПараметровИзСписокАргументов(СписокАргументов);
		
		
		ИмяПроцедуры = ТекШаг.ИмяПроцедуры;
		ВызватьМетод(ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
		
		//это одна строка. для неё будем вызывать преобразование строки Gherkin
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСостояниеVanessaBehavior() Экспорт 
	Рез        = Новый Структура;
	
	ТекущаяФича = Новый Структура;
	ТекущаяФича.Вставить("Имя", Неопределено);
	ТекущаяФича.Вставить("ПолныйПуть", Неопределено);
	
	
	ТекущийСценарий = Новый Структура;
	ТекущийСценарий.Вставить("Имя", Неопределено);
	ТекущийСценарий.Вставить("ИдСценария", Неопределено);
	ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	ТекущийСценарий.Вставить("ОписаниеСценария", МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве]);
	ТекущийСценарий.Вставить("РезультатПрохожденияТестовСценария", РезультатПрохожденияТестовСценария);
	
	ТекущийШаг = Новый Структура;
	ТекущийШаг.Вставить("Имя", Неопределено);
	ТекущийШаг.Вставить("ЗначенияПараметров", Неопределено);
	ТекущийШаг.Вставить("ИдСтроки", Неопределено);
	
	Рез.Вставить("ТекущаяФича", ТекущаяФича);
	Рез.Вставить("ТекущийСценарий", ТекущийСценарий);
	Рез.Вставить("ТекущийШаг", ТекущийШаг);
	
	Если (МассивСценариевДляВыполнения.Количество() - 1) < ТекИД_СценарияВМассиве Тогда
		Возврат Рез;
	КонецЕсли;	 
	
	
	
	ТекущийСценарий.Вставить("Имя", МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Имя);
	ТекущийСценарий.Вставить("ИдСценария", ТекИД_СценарияВМассиве);
	
	ТекущаяФича.Вставить("Имя", МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИмяФичи);
	ТекущаяФича.Вставить("ПолныйПуть", МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ПолныйПутьКФиче);
	
	
	Шаги   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	
	
	Если (Шаги.Количество() - 1) < ТекИД_ШагаВМассиве Тогда
		Возврат Рез;
	КонецЕсли;	 
	
	Если ТекИД_ШагаВМассиве < 0 Тогда
		Возврат Рез;
	КонецЕсли;	 
	
	
	ТекШаг = Шаги[ТекИД_ШагаВМассиве];
	ТекущийШаг.Вставить("Имя", ТекШаг.Имя);
	ТекущийШаг.Вставить("ИдСтроки", ТекШаг.СтрокаШага);
	ТекущийШаг.Вставить("ЗначенияПараметров", ТекШаг.ЗначенияПараметров.Скопировать());
	
	
	Возврат Рез;
	
КонецФункции	 

&НаКлиенте
Процедура ЗапретитьВыполнениеШагов() Экспорт
	Объект.ОстановитьВыполнениеШагов = Истина;
	АктивизироватьСтрокуДереваТекущегоШага();
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыполнениеШагов(ШагУпал = Ложь, ОписаниеОшибки = "") Экспорт
	Объект.ОстановитьВыполнениеШагов = Ложь;
	
	Если ШагУпал Тогда
		УстановитьТекущемуШагуФлагЧтоОнДолженСчитатьсяУпавшим(ОписаниеОшибки);
	КонецЕсли;	 
	
	Если ВсёЕщёИдётВыполнениеШагов  > 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	Если МассивСценариевДляВыполнения <> Неопределено Тогда
		Если (МассивСценариевДляВыполнения.Количество() - 1) < ТекИД_СценарияВМассиве Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли; 
	
	
	ИдСледующегоШага = Неопределено;
	Если ТекИД_ШагаВМассиве >= 0 Тогда
		Если (МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги.Количество()-1) >= ТекИД_ШагаВМассиве Тогда
			ТекШаг = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги[ТекИД_ШагаВМассиве];
			ИдСледующегоШага = ПолучитьИдСледующегоШага(ТекШаг);
		КонецЕсли;	 
	КонецЕсли;	 
	
	ПерейтиКВыполнениюСледующегоШага(Истина, Истина,ИдСледующегоШага);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРезультатУсловия(Результат) Экспорт
	Если ТипЗнч(Результат) <> Тип("Булево") Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("В процедуру <УстановитьРезультатУсловия> передан неверный тип параметра <%1>. Ожидаемый тип: Булево.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Результат); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Объект.РезультатУсловия = Результат;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСценарии(ТекСценарий = Неопределено, ДопПараметры = Неопределено) Экспорт
	Если Объект.ИдетВыполнениеСценариев Тогда
		ПрекратитьВыполнениеВсехСценариев = Истина;
		АктивизироватьСтрокуДереваТекущегоШага();
		Возврат;
	КонецЕсли;	 
	
	Оповестить("ЗапускСценариевVB");
	
	ОчиститьСообщения();
	
	ФлагСценарииВыполнены               = Ложь;
	ВозниклаОшибкаПодключенияTestClient = Ложь;
	ВозниклаОшибкаВШагеКонтекста        = Ложь;
	ВозниклаОшибкаОшибкаСетевогоВзаимодействия = Ложь;
	
	Объект.ИдетВыполнениеСценариев    = Истина;
	ОбновитьСтатусКнопкиВыполнитьСценарии();
	
	БылаОшибкаСкриптовСборкиВидео     = Ложь;
	Объект.ОстановитьВыполнениеШагов  = Ложь;
	Объект.ИдетЗаписьВидео            = Ложь;
	
	СтатусЗапускаСценариев            = Истина;
	ПрекратитьВыполнениеВсехСценариев = Ложь;
	ПрекратитьВыполнениеДанногоСценария = Ложь;
	ТекущийИсполняемыйФичаФайл        = Неопределено;
	
	СчетчикШаговБезТаймера = 0;
	
	ЭтоПример   = Ложь;
	ЭтоКонтекст = Ложь;
	ИдСценарияПоСтрокеШага = ОпределитьИдСценарияПоСтрокеШагаКлиент(Элементы.ДеревоТестов.ТекущиеДанные,
	                                                                             ЭтоПример, ЭтоКонтекст);
	
	
	ЭтоПример   = Ложь;
	ЭтоКонтекст = Ложь;
	ИдСценарияПоСтрокеШага = ОпределитьИдСценарияПоСтрокеШагаКлиент(Элементы.ДеревоТестов.ТекущиеДанные,
	                                                                             ЭтоПример, ЭтоКонтекст);
	
	
	ТекущаяСтрокаДереваИдСтроки = Неопределено;
	Если Элементы.ДеревоТестов.ТекущиеДанные <> Неопределено Тогда
		НужнаяСтрока = Неопределено;
		ТекущаяСтрокаДереваИдСтроки = ОпределитьИдИсполняемойСтрокиДерева(Элементы.ДеревоТестов.ТекущиеДанные,НужнаяСтрока);
		Если Объект.РежимВыполненияОдногоШага Тогда
			Если ТекущаяСтрокаДереваИдСтроки <> Элементы.ДеревоТестов.ТекущиеДанные.ИдСтроки Тогда
				Элементы.ДеревоТестов.ТекущаяСтрока = НужнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;	 
			СоздатьСтруктуруПоискаДляСтрокиДерева(Элементы.ДеревоТестов.ТекущиеДанные);
			ЗапомнитьАктивноеОкно(Неопределено);
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	МассивИДСтрокиДерева                     = Новый Массив;
	МассивРезультатПрохожденияТестовСценария = Новый Массив;
	
	МассивСценариевДляВыполнения             = Новый Массив;
	МассивСтрокДереваДанныеФормы             = Новый Массив;
	
	ЕстьСохранённыйКонтекст = Ложь;
	Если (ТекСценарий = Неопределено) и (Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов) Тогда
		ТекСценарий = Новый Массив;
		ТекСценарий.Добавить(ИдСценарияПоСтрокеШага);
		
		СохраненнаяСтруктура   = ПолучитьСостоянияКонтекстовПоИдСтроки(СтрокаШагаСКоторогоНадоВыполнятьСценарий.ИдСтроки);
		Если СохраненнаяСтруктура <> Неопределено Тогда //значит есть сохранённый контекст
			ЕстьСохранённыйКонтекст = Истина;
		КонецЕсли;	 
		
	ИначеЕсли (ТекСценарий = Неопределено) и (Объект.РежимВыполненияДанногоСценарияСТекущегоШага) Тогда
		ТекСценарий = Новый Массив;
		ТекСценарий.Добавить(ИдСценарияПоСтрокеШага);
	ИначеЕсли (ТекСценарий = Неопределено) и (Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением) Тогда
		ТекСценарий = Новый Массив;
		ТекСценарий.Добавить(ИдСценарияПоСтрокеШага);
	КонецЕсли;	
	
	
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;	 
	Если Не ДопПараметры.Свойство("ЭтоПример") Тогда
		ДопПараметры.Вставить("ЭтоПример", ЭтоПример);
	КонецЕсли;	 
	
	ДопПараметры.Вставить("ЭтоLinux", ЭтоLinux);
	
	ДопПараметры.Вставить("ТекстСообщенийПользователю", Объект.ТекстСообщенийПользователю);
	
	ДопПараметры.Вставить("РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов", Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов и ЕстьСохранённыйКонтекст);
	ДопПараметры.Вставить("РежимВыполненияДанногоСценарияСТекущегоШага", Объект.РежимВыполненияДанногоСценарияСТекущегоШага);
	ДопПараметры.Вставить("РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением", Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением);
	ДопПараметры.Вставить("РежимВыполненияОдногоШага", Объект.РежимВыполненияОдногоШага);
	ДопПараметры.Вставить("ДобавитьСценарииПослеНайденного", Ложь);
	ДопПараметры.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага", Неопределено);
	Если Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов Тогда
		ДопПараметры.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийССохранениемКонтекстов", СтрокаШагаСКоторогоНадоВыполнятьСценарий.ИдСтроки);
	ИначеЕсли Объект.РежимВыполненияДанногоСценарияСТекущегоШага Тогда
		ДопПараметры.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага", ТекущаяСтрокаДереваИдСтроки);
		ДопПараметры.Вставить("НашелСценарий", Ложь);
	ИначеЕсли Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением Тогда
		ДопПараметры.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага", ТекущаяСтрокаДереваИдСтроки);
		ДопПараметры.Вставить("ДобавитьСценарииПослеНайденного", Истина);
		ДопПараметры.Вставить("НашелСценарий", Ложь);
	ИначеЕсли Объект.РежимВыполненияОдногоШага Тогда
		ДопПараметры.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага", ТекущаяСтрокаДереваИдСтроки);
	КонецЕсли;	 
	
	Если Объект.РежимВыполненияОдногоШага Тогда
		ЗаполнитьМассивСценариевДляВыполненияКлиент(МассивСценариевДляВыполнения);
	Иначе	
		ЗаполнитьМассивСценариевДляВыполненияСервер(МассивСценариевДляВыполнения, МассивСтрокДереваДанныеФормы, ТекСценарий, МассивИменКонтекстовОбработок, ДопПараметры);
	КонецЕсли;	 
	
	ЗапомнитьСтрокиДереваДанныеФормы();
	//ниже не должно быть серверных вызовов, которые бы изменили ДеревоТестов, иначе кеш данных формы надо будет строить заново
	
	ТекущаяФичаИнструкцииHTML     = "";
	ТекущаяФичаИнструкцииMarkdown = "";
	Если НЕ ПроверитьНаличиеИнструментаДляСозданияСкриншотов() Тогда
		Возврат;
	КонецЕсли;  
	
	Если Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
		Если Не ЗначениеЗаполнено(Объект.КомандаСделатьСкриншот) Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не указана команада для выполнения скриншотов. Например <%1>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1","""C:\Program Files (x86)\IrfanView\i_view32.exe"" /capture=1 /convert="); 
			СделатьСообщение(ТекстСообщения);
			Возврат;
		КонецЕсли;	 
		ОчиститьСодержимоеКаталога(Объект.КаталогOutputСкриншоты,"*.png");
	КонецЕсли;	 
	
	
	Если Объект.СоздаватьИнструкциюВидео Тогда
		Если Не ЗначениеЗаполнено(Объект.КаталогOutputИнструкцияВидео) Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не указан каталог для формирования видео инструкции.");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ОчиститьСодержимоеКаталога(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputИнструкцияВидео), "*.mp4");
		ОчиститьСодержимоеКаталога(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ЗаписьВидеоКаталогДляВременныхФайлов));
		ВыполнитьПодготовкуКЗаписиВидео();
	КонецЕсли;	 
	
	Если Объект.СоздаватьИнструкциюHTML Тогда
		ОчиститьСодержимоеКаталога(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputИнструкцияHTML));
	КонецЕсли;	 
	
	Если Объект.СоздаватьИнструкциюMarkdown Тогда
		ОчиститьСодержимоеКаталога(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputИнструкцияMarkdown));
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеАллюр Тогда
		СоздатьКаталогЕслиЕгоНет(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputAllure));
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеjUnit Тогда
		СоздатьКаталогЕслиЕгоНет(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputjUnit));
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеCucumberJson Тогда
		СоздатьКаталогЕслиЕгоНет(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputCucumberJson));
	КонецЕсли;	 
	
	Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
		Если ФайлСуществуетКомандаСистемы(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ИмяФайлаЛогВыполненияСценариев)) Тогда
			УдалитьФайлыКомандаСистемы(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ИмяФайлаЛогВыполненияСценариев));
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Объект.ДелатьЛогОшибокВТекстовыйФайл Тогда
		Если ФайлСуществуетКомандаСистемы(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ИмяКаталогаЛогОшибок)) Тогда
			ОчиститьСодержимоеКаталога(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ИмяКаталогаЛогОшибок));
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Объект.СоздаватьИнструкциюВидео Тогда
		ПрочитатьИзФичиПараметрыСборкиВидео();
	КонецЕсли;	 
	
	Если ВыполнятьСценарииАсинхронно Тогда
		ТекИД_СценарияВМассиве = -1;
		ПерейтиКВыполнениюСледующегоСценария();
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДанныйСценарийСТекущегоШага() Экспорт
	ТекущиеДанные = Элементы.ДеревоТестов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЭтуСтрокуМожноИсполнитьИлиВНейЕстьПодчиненныеИсполняемыеСтроки(ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;	 
	
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Истина;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Ложь;
	ВыполнитьСценарии();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДанныйСценарийСТекущегоШагаСПродолжением() Экспорт
	ТекущиеДанные = Элементы.ДеревоТестов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	
	Если НЕ ЭтуСтрокуМожноИсполнитьИлиВНейЕстьПодчиненныеИсполняемыеСтроки(ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;	 
	
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Истина;
	Объект.РежимВыполненияОдногоШага                                = Ложь;
	ВыполнитьСценарии();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОдинШаг() Экспорт
	ТекущиеДанные = Элементы.ДеревоТестов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЭтуСтрокуМожноИсполнитьИлиВНейЕстьПодчиненныеИсполняемыеСтроки(ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ТекущиеДанные.Тип = "Область" Тогда
		Возврат;
	КонецЕсли;	 
	
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Истина;
	
	ВыполнитьСценарии();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыделенныйСценарий() Экспорт
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Ложь;
	
	СтрокаСценария = Элементы.ДеревоТестов.ТекущиеДанные;
	Если СтрокаСценария = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЭтоПример = Ложь;
	Если СтрокаСценария.Тип <> "Сценарий" Тогда
		ЭтоШагКонтекста = Ложь;
		СтрокаСценария = НайтиСтрокуСценарияЧерезРодителя(СтрокаСценария, ЭтоПример,ЭтоШагКонтекста);
		Если СтрокаСценария = Неопределено Тогда
			Сообщить(ПолучитьТекстСообщенияПользователю("Не найдена строка сценария."));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ЭтоПример", ЭтоПример);
	
	Массив = Новый Массив;
	Массив.Добавить(СтрокаСценария.ИДСтроки);
	ВыполнитьСценарии(Массив, ДопПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ПерезагрузитьИВыполнитьДанныйСценарий() Экспорт
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Ложь;
	
	СтрокаСценария = Элементы.ДеревоТестов.ТекущиеДанные;
	Если СтрокаСценария = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЭтоПример = Ложь;
	Если СтрокаСценария.Тип <> "Сценарий" Тогда
		ЭтоШагКонтекста = Ложь;
		СтрокаСценария = НайтиСтрокуСценарияЧерезРодителя(СтрокаСценария, ЭтоПример,ЭтоШагКонтекста);
		Если СтрокаСценария = Неопределено Тогда
			Сообщить(ПолучитьТекстСообщенияПользователю("Не найдена строка сценария."));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ИмяСценарияКоторыйНадоВыполнитьПослеПереазгрузки             = СтрокаСценария.Имя;
	СтрокаСценарияКоторыйНадоВыполнитьПослеПереазгрузкиЭтоПример = ЭтоПример;
	Объект.НадоВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Истина;
	
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ПроцУстановитьПометкуВыполнятьСценарийСЭтогоШага() Экспорт
	ТекущиеДанные = Элементы.ДеревоТестов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ТекущиеДанные.Тип <> "Шаг" Тогда
		Сообщить(ПолучитьТекстСообщенияПользователю("Это возможно только для шага."));
		Возврат;
	КонецЕсли;	
	
	Если СтрокаШагаСКоторогоНадоВыполнятьСценарий <> Неопределено Тогда
		Если СтрокаШагаСКоторогоНадоВыполнятьСценарий.Тип = "Шаг" Тогда
			ПромСтрока = Неопределено;
			НайтиСтрокуДереваПоИдСтроки(СтрокаШагаСКоторогоНадоВыполнятьСценарий.ИдСтроки, Объект.ДеревоТестов.ПолучитьЭлементы(), ПромСтрока);
			СтрокаШагаСКоторогоНадоВыполнятьСценарий = ПромСтрока;
			
			СтрокаШагаСКоторогоНадоВыполнятьСценарий.ВыполнятьСценарийСЭтогоШага = Ложь;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	СтрокаШагаСКоторогоНадоВыполнятьСценарий  = ТекущиеДанные;
	ТекущиеДанные.ВыполнятьСценарийСЭтогоШага = Истина;	
	
	АктивироватьСоседнююСтрокуДерева(СтрокаШагаСКоторогоНадоВыполнятьСценарий);
	
	Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов = Истина;
	Если НЕ Объект.СохранятьКонтекстыПередВыполнениемШагов Тогда
		Объект.СохранятьКонтекстыПередВыполнениемШагов = Истина;
		СделатьСообщение("Флаг <Сохранять контексты перед выполнением шагов> установлен в <Истина>.");
	КонецЕсли;	 
	
	
	
	Элементы.ДеревоТестовКонтекстноеМенюВыполнятьСценарииСначала.Видимость   = Истина;
	
	Сообщить(ПолучитьТекстСообщенияПользователю("Пометка для шаг установлена."));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагОстановкиВыполненияШаговВсехСценариев() Экспорт
	ПрекратитьВыполнениеВсехСценариев = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагОстановкиВыполненияШаговОдногоСценария() Экспорт
	ПрекратитьВыполнениеДанногоСценария = Истина;
КонецПроцедуры

#КонецОбласти

#Область СообщенияПользователю

//Делает сообщение пользователю
&НаКлиенте
Процедура СделатьСообщение(Знач Сообщение, ТипСообщения = "Информация") Экспорт
	Если ЗначениеЗаполнено(Объект.ТекстСообщенийПользователю) Тогда
		РасшифровкаСлужебногоСообщения = Объект.ТекстСообщенийПользователю[Сообщение];
		Если ЗначениеЗаполнено(РасшифровкаСлужебногоСообщения) Тогда
			Сообщение = РасшифровкаСлужебногоСообщения;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТипСообщения = ?(ТипСообщения = "Информация", СтатусСообщения.Обычное, СтатусСообщения.ОченьВажное);
	ТекстСообщения = Строка(ТекущаяДата()) + " " + Сообщение;
	Сообщить(ТекстСообщения, ТипСообщения);
КонецПроцедуры

//Делает сообщение пользователю, если установлен флаг "Включить отладочные сообщения"
&НаКлиенте
Процедура Отладка(Знач Сообщение) Экспорт
	Если Объект.DebugLog Тогда
		СделатьСообщение(Сообщение);
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область TestClient

//Возвращает переменную типа ТестируемоеПриложение
&НаКлиенте
Функция ПолучитьТестовоеПриложение() Экспорт
	Если Не ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("TestClient НЕ подключен.");
	КонецЕсли;	 
	
	Если ОбъектКонтекстСохраняемый.ТестовоеПриложение = Неопределено Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("TestClient НЕ подключен.");
	КонецЕсли;	 
	
	Возврат ОбъектКонтекстСохраняемый.ТестовоеПриложение; 
КонецФункции	  

//фиксирует форму TestClient, с которой будет происходить работа
//в ней будет происходить поиск элементов формы
&НаКлиенте
Процедура ЗафиксироватьФормуTestClient(ФормаПриложения) Экспорт
	ЗафиксированнаяФормаTestClient = ФормаПриложения;
КонецПроцедуры

//проверяет видимость элмента формы с учетом родительских групп
&НаКлиенте
Функция ВидимостьЭлементаСУчетомРодителя(ТекущаяФормаЭлемента,ЭлементФормы,ТекущаяВидимость) Экспорт
	Если ТекущаяФормаЭлемента = Неопределено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Для элемента с именем <%1> не найдена форма.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ЭлементФормы.Имя); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если ПроверятьВидимостьЭлементаСУчетомРодителя <> Истина Тогда
		Возврат ТекущаяВидимость;
	КонецЕсли;	 
	
	Если НЕ ТекущаяВидимость Тогда
		//нет смысла проверять для невидимых элементов
		Возврат ТекущаяВидимость; 
	КонецЕсли;
	
	ГруппыФормы = ТекущаяФормаЭлемента.НайтиОбъекты(Тип("ТестируемаяГруппаФормы"));
	Для Каждого ТекГруппа Из ГруппыФормы Цикл
		ЭлементыГруппы = ТекГруппа.НайтиОбъекты();
		Если ЭлементыГруппы.Найти(ЭлементФормы) <> Неопределено Тогда
			Если НЕ ТекГруппа.ТекущаяВидимость() Тогда
				//значит элемент лежит в невидимой группе
				Возврат Ложь;
			КонецЕсли;	 
		КонецЕсли;	
	КонецЦикла;	 
	
	Возврат ТекущаяВидимость;
КонецФункции	

//Устанаваливает статус проверки видимости элемента с учетом видимости родительской группы
&НаКлиенте
Функция УстановитьСтатусПроверятьВидимостьЭлементаСУчетомРодителя(Значение) Экспорт
	ПроверятьВидимостьЭлементаСУчетомРодителя = Значение;
КонецФункции	 

&НаКлиенте
Процедура ОбработатьСменуАктивногоОкна(ДопПараметры = Неопределено) Экспорт
	ОчиститьКешАктивнойТаблицыTestClient();
	
	СбрасыватьЗафиксированнуюФорму = Истина;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("СбрасыватьЗафиксированнуюФорму") Тогда
			СбрасыватьЗафиксированнуюФорму = ДопПараметры.СбрасыватьЗафиксированнуюФорму;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если СбрасыватьЗафиксированнуюФорму Тогда
		//убираем фиксацию формы, т.к. окно сменилось
		ЗафиксироватьФормуTestClient(Неопределено);
	КонецЕсли;	 
	
	ЗапомнитьАктивноеОкно(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКешАктивнойТаблицыTestClient() Экспорт
	ОбъектКонтекст.Вставить("АктивнаяТаблицаTestClient",Новый Структура("ИмяТаблицы,Значение",Неопределено,Неопределено));
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВКешТаблицуTestClient(ИмяТаблицы,Таблица) Экспорт
	Если ТипЗнч(Таблица) = Тип("ТестируемаяТаблицаФормы") Тогда
		ОбъектКонтекст.Вставить("АктивнаяТаблицаTestClient",Новый Структура("ИмяТаблицы,Значение",ИмяТаблицы,Таблица));
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКорректноеЗначениеДляРаботыСПолем(Знач Значение) Экспорт
	Если Лев(Значение,2) = "$$" и  Прав(Значение,2) = "$$" Тогда
		ИмяПеременной = Сред(Значение,3,СтрДлина(Значение)-4);
		
		Попытка
			ЕстьТакаяПеременная = ОбъектКонтекстСохраняемый.Свойство(ИмяПеременной);
		Исключение
			ЕстьТакаяПеременная = Ложь;
		КонецПопытки;
		
		Если ЕстьТакаяПеременная Тогда
			Возврат ОбъектКонтекстСохраняемый[ИмяПеременной]; 
		КонецЕсли;	 
		
		СохраненноеЗначение = ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого(ИмяПеременной);
		
		Если СохраненноеЗначение = Неопределено Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог найти сохранненное значение по переменой <%1>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		Возврат СохраненноеЗначение;
	ИначеЕсли Лев(Значение,1) = "$" и  Прав(Значение,1) = "$" Тогда
		ИмяПеременной = Сред(Значение,2,СтрДлина(Значение)-2);
		
		Попытка
			ЕстьТакаяПеременная = ОбъектКонтекст.Свойство(ИмяПеременной);
		Исключение
			ЕстьТакаяПеременная = Ложь;
		КонецПопытки;
		
		Если ЕстьТакаяПеременная Тогда
			Возврат ОбъектКонтекст[ИмяПеременной];
		Иначе
			Возврат Значение;
		КонецЕсли;	 
	Иначе
		Возврат Значение;
	КонецЕсли;	 
КонецФункции	 

&НаКлиенте
Функция СтрокиОжидаемойТаблицыСодержатсяВТаблицеTestclient(ОжидаемаяТаблица,ТаблицаTestClient,СтрокаОшибки,СтруктураПараметров) Экспорт
	Возврат СтрокиОжидаемойТаблицыСодержатсяВТаблицеTestclientСервер(ОжидаемаяТаблица,ТаблицаTestClient,СтрокаОшибки,СтруктураПараметров);
КонецФункции	

&НаКлиенте
Функция НайтиВсеОкнаTestClient() Экспорт
	Возврат ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
КонецФункции

&НаКлиенте
Функция НайтиОкноTestClientПоЗаголовку(ЗаголовокОкна) Экспорт
	Если Не ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("TestClient НЕ подключен.");
	КонецЕсли;	 
	
	Возврат ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"),ЗаголовокОкна);
КонецФункции

&НаКлиенте
Функция НайтиОкноVB() Экспорт
	МассивОкон = НайтиВсеОкнаTestClient();
	ОкноVB = Неопределено;
	
	Для Каждого ОкноИзМассива Из МассивОкон Цикл
		Если Найти(ОкноИзМассива.Заголовок,"autotest") > 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Найти(ОкноИзМассива.Заголовок,"Vanessa Behavior") > 0 Тогда
			ОкноVB = ОкноИзМассива;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат ОкноVB;
КонецФункции

&НаКлиенте
Функция НайтиТаблицыФормыTestClient(ТекущаяФорма) Экспорт
	Возврат  ТекущаяФорма.НайтиОбъекты(Тип("ТестируемаяТаблицаФормы"));
КонецФункции	

&НаКлиенте
Функция НайтиРеквизитОткрытойФормыПоЗаголовку(Знач ИмяРеквизита, ИскатьПоИмени = Ложь,
	   ВызыватьИсключение = Истина, ТипПоля = Неопределено,ДопПараметры = Неопределено) Экспорт
	   
	   
	ИмяРеквизита = ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(ИмяРеквизита);
	
	КоличествоПопыток = ЗначениеКоличествоПопытокВыполненияДействия();
	ТекстСообщения = "";
	
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		ТекстСообщения = "";
		БылаОшибка = Ложь;
		
		Попытка
			
			ПолеРеквизит = Неопределено;
			Если ЗафиксированнаяФормаTestClient = Неопределено Тогда
				НайтиРеквизитВАктивномОкне(ПолеРеквизит,ИмяРеквизита,ИскатьПоИмени,ТипПоля,ДопПараметры);
			Иначе	
				МассивФорм = НайтиФормыТекущегоОкнаTestClient();
				НайтиРеквизитВМассивеФорм(МассивФорм,ПолеРеквизит,ИмяРеквизита,ИскатьПоИмени,ТипПоля,ДопПараметры);
			КонецЕсли;	
			Если ПолеРеквизит <> Неопределено Тогда
				Возврат ПолеРеквизит;
			КонецЕсли;	 
			
			Если НЕ Версия8311ИлиВыше И ПолеРеквизит = Неопределено Тогда
				//проверим, что возможно есть окно, которое некорректно определяется как активное окно
				МассивФорм = НайтиФормыОкнаИзКонтекста();
				Если МассивФорм <> Неопределено Тогда
					НайтиРеквизитВМассивеФорм(МассивФорм,ПолеРеквизит,ИмяРеквизита,ИскатьПоИмени,ТипПоля,ДопПараметры);
					Если ПолеРеквизит <> Неопределено Тогда
						Возврат ПолеРеквизит;
					КонецЕсли;	 
				КонецЕсли;
			КонецЕсли;	 
			
			
			Если ВызыватьИсключение Тогда
				Если ИскатьПоИмени Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("Элемента формы с именем <%1> не найдено.");
				Иначе	
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("Элемента формы с заголовком <%1> не найдено.");
				КонецЕсли;	 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
				
				ВызватьИсключение ТекстСообщения;
			Иначе	
				Прервать;
			КонецЕсли;	
			
		Исключение
			Если ТекстСообщения = "" Тогда
				ТекстСообщения = ОписаниеОшибки();
			КонецЕсли;	 
			
			БылаОшибка = Истина;
			sleep(1);
			ЗапомнитьАктивноеОкно(Неопределено);
		КонецПопытки;
	КонецЦикла;	
	
	ЗапомнитьАктивноеОкно(Неопределено);
	Если ВызыватьИсключение и БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция УстановитьТекстРеквизитаОткрытойФормы(ИмяРеквизита, Текст, ИскатьПоИмени = Ложь) Экспорт
	Нашли = Ложь;
	
	МассивФорм = НайтиФормыТекущегоОкнаTestClient();
	
	Для каждого ТекущаяФорма Из МассивФорм Цикл
		
		Если ИскатьПоИмени Тогда
			МассивЭлементов        = ТекущаяФорма.НайтиОбъекты(, , ИмяРеквизита);
		Иначе
			МассивЭлементов        = ТекущаяФорма.НайтиОбъекты(, ИмяРеквизита);
		КонецЕсли;	 
		
		Если МассивЭлементов = Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если МассивЭлементов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если МассивЭлементов.Количество() > 1  Тогда
			ВывестиСообщениеОТомЧтоПоЗаголовкуНайденоБольшеОдногоЭлемента(МассивЭлементов, ИмяРеквизита);
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Найдено более одного поля формы с заголовком <%1>. Рекомендуется искать элемент по имени.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
			Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ПолеРеквизит = МассивЭлементов[0];
		Нашли         = Истина;
		Прервать;
	КонецЦикла;
	
	Если НЕ Нашли Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Элемента формы с именем <%1> не найдено.");
		Иначе	
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Элемента формы с заголовком <%1> не найдено.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ПолеРеквизит.ВвестиТекст(Текст);
	
КонецФункции

&НаКлиенте
Функция ПолучитьПредставлениеДанныхЭлементаФормы(ПолеРеквизит,ДопПараметры = Неопределено) Экспорт
	Тип = ТипЗнч(ПолеРеквизит);
	
	Если Тип = Тип("ТестируемоеПолеФормы") Тогда
		Если ПолеРеквизит.Вид = ВидПоляФормы.ПолеВвода Тогда
			Попытка
				Возврат ПолеРеквизит.ПолучитьТекстРедактирования();
			Исключение
				//если поле невидимое - тогда получим представление данных
				Возврат ПолеРеквизит.ПолучитьПредставлениеДанных();
			КонецПопытки;
		КонецЕсли;	 
		
		Возврат ПолеРеквизит.ПолучитьПредставлениеДанных();
	ИначеЕсли Тип = Тип("ТестируемаяДекорацияФормы") Тогда
		Стр = ПолеРеквизит.ПолучитьПредставлениеДанных();
		Если Не ЗначениеЗаполнено(Стр) Тогда
			Стр = ПолеРеквизит.ТекстЗаголовка;
		КонецЕсли;	 
		Возврат Стр;
	ИначеЕсли Тип = Тип("ТестируемаяТаблицаФормы") Тогда
		ТабДок = ПолучитьЗначениеТестируемаяТаблицаФормы(ПолеРеквизит,ДопПараметры);
		Возврат ТабДок;
	КонецЕсли;	 
КонецФункции	

&НаКлиенте
Функция ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени = Ложь,ДопПараметры = Неопределено) Экспорт
	ПолеРеквизит = ПолучитьЭлементФормыИзКешЕслиЭтоВозможно(ИмяРеквизита);
	Если ПолеРеквизит <> Неопределено Тогда
		Возврат ПолучитьПредставлениеДанныхЭлементаФормы(ПолеРеквизит);
	КонецЕсли;	 
	
	ВызыватьИсключение = Истина;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ВызыватьИсключение") Тогда
			ВызыватьИсключение = ДопПараметры.ВызыватьИсключение;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Нашли = Ложь;
	МассивФорм = НайтиФормыТекущегоОкнаTestClient();
	Для каждого ТекущаяФорма Из МассивФорм Цикл
		
		Попытка
			Если ИскатьПоИмени Тогда
				МассивЭлементов = Новый Массив;
				НужныйЭлемент = ТекущаяФорма.НайтиОбъект(, , ИмяРеквизита);
				Если НужныйЭлемент <> Неопределено Тогда
					МассивЭлементов.Добавить(НужныйЭлемент);
				КонецЕсли;	 
			Иначе
				МассивЭлементов = ТекущаяФорма.НайтиОбъекты(, ИмяРеквизита);
			КонецЕсли;
			
		Исключение
			//это возможно, если форма закрылась по ходу выполнения сценария
			Продолжить;
		КонецПопытки;
		
		Если МассивЭлементов = Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если МассивЭлементов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если МассивЭлементов.Количество() > 1  Тогда
			ВывестиСообщениеОТомЧтоПоЗаголовкуНайденоБольшеОдногоЭлемента(МассивЭлементов, ИмяРеквизита);
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Найдено более одного поля формы с заголовком <%1>. Рекомендуется искать элемент по имени.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
			Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ПолеРеквизит = МассивЭлементов[0];
		СохранитьВКешТаблицуTestClient(ИмяРеквизита,ПолеРеквизит);
		
		Возврат ПолучитьПредставлениеДанныхЭлементаФормы(ПолеРеквизит,ДопПараметры);
	КонецЦикла;
	
	
	Если Не ВызыватьИсключение Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если НЕ Нашли Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Элемента формы с именем <%1> не найдено.");
		Иначе	
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Элемента формы с заголовком <%1> не найдено.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
Функция НайтиРеквизитТаблицы(ИмяТаблицы,ИмяРеквизита,ИскатьПоИмени = Ложь,Таблица = Неопределено) Экспорт
	Если Таблица = Неопределено Тогда
		Таблица = НайтиТЧПоИмени(ИмяТаблицы);
	КонецЕсли;	 
	
	ПолеРеквизит = Неопределено;
	
	КоличествоПопыток = ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			Если ИскатьПоИмени Тогда
				ПолеРеквизит = Таблица.НайтиОбъект(Тип("ТестируемоеПолеФормы"),, ИмяРеквизита);
			Иначе	
				ПолеРеквизит = Таблица.НайтиОбъект(Тип("ТестируемоеПолеФормы"), ИмяРеквизита);
			КонецЕсли;	 
			
			Если ПолеРеквизит <> Неопределено Тогда
				Прервать;
			КонецЕсли;	 
		Исключение
			sleep(1);
		КонецПопытки;
	КонецЦикла;	 
	
	Возврат ПолеРеквизит;
КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеРеквизитаОткрытойФормыПоИмени(ИмяРеквизита) Экспорт
	Возврат ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяРеквизита, Истина);
КонецФункции

//Вводит текст в поле. Если идёт формирование автоинструкции, то возможна эмуляция ввода текста посимвольно.
&НаКлиенте
Функция ВвестиВПолеТекст(Поле,Текст) Экспорт
	Если Объект.ЗаписьВидеоЭмулироватьВводСКлавиатуры 
		И (Объект.СоздаватьИнструкциюВидео Или Объект.СоздаватьИнструкциюHTML Или Объект.СоздаватьИнструкциюMarkdown) Тогда
		
		НадоЭмулироватьКлавиатуру = Ложь;
		Попытка
			Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
			ТекШаг = Шаги[ТекИД_ШагаВМассиве];
			Если НЕ ТекШаг.ЭтоШагКонтекста Тогда
				НадоЭмулироватьКлавиатуру = Истина;
			КонецЕсли;	 
		Исключение
			НадоЭмулироватьКлавиатуру = Ложь;
		КонецПопытки;
		
		Если НадоЭмулироватьКлавиатуру Тогда
			KeyboardType = Объект.КаталогИнструментов + "\tools\VideoTools\KeyboardType.exe";
			Если Не ФайлСуществуетКомандаСистемы(KeyboardType) Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Файл <%1> не найден.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",KeyboardType);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			ИмяФайла = ПолучитьИмяВременногоФайла("txt");
			ЗТ = Новый ЗаписьТекста(ИмяФайла,"windows-1251",,Ложь); 
			ЗТ.Записать(Текст); 
			ЗТ.Закрыть();
			Команда = KeyboardType + " typespeed=100 ""filename=" + ИмяФайла + """";
			
			Результат = ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
			ПроверитьРавенство(Результат, 0 , "Выполнен шаг ЯЭмулируюНаборТекстаИзФайла <" + ИмяФайла + ">");
		Иначе	
			Поле.ВвестиТекст(Текст);
		КонецЕсли;	 
	Иначе	
		Поле.ВвестиТекст(Текст);
	КонецЕсли;	 
КонецФункции	

&НаКлиенте
Функция НайтиТЧПоИмени(ИмяТЧ, НужнаяФорма = Неопределено, ИскатьПоИмени = Истина,ВызыватьИсключение = Истина) Экспорт
	
	ФормаДляПоиска    = НужнаяФорма;
	КоличествоПопыток = ЗначениеКоличествоПопытокВыполненияДействия();
	ТекстОшибки       = "";
	
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		ТекстОшибки = "";
		
		Попытка
			
			Если ОбъектКонтекст.Свойство("АктивнаяТаблицаTestClient") Тогда
				Если ОбъектКонтекст.АктивнаяТаблицаTestClient <> Неопределено Тогда
					Если ОбъектКонтекст.АктивнаяТаблицаTestClient.ИмяТаблицы = ИмяТЧ Тогда
						Возврат ОбъектКонтекст.АктивнаяТаблицаTestClient.Значение;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если ФормаДляПоиска = Неопределено Тогда
				
				Если ЗафиксированнаяФормаTestClient = Неопределено Тогда
					ОкноПриложения = ПолучитьАктивноеОкноИзТестовоеПриложение();
					Если ОкноПриложения <> Неопределено Тогда
						ФормаДляПоиска = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"));
					КонецЕсли;	 
				Иначе	
					ФормаДляПоиска = ЗафиксированнаяФормаTestClient;
				КонецЕсли;	 
				
				
				Если ФормаДляПоиска = Неопределено Тогда
					//это бывает когда ОкноПриложения это начальная страница и на ней нет форм
					ОкноПриложения = ПолучитьАктивноеОкноИзКонтекста();
					Если ОкноПриложения <> Неопределено Тогда
						ФормаДляПоиска = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"));
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
			ТЧ = НайтиТЧВДаннойФорме(ИмяТЧ,ФормаДляПоиска,ИскатьПоИмени);
			
			Если ФормаДляПоиска = Неопределено или ТЧ = Неопределено Тогда
				//иногда 1С некорректно отдаёт текущее окно, тогда будем искать во всех окнах
				//сначала поищем в недавно открытом окне
				
				Попытка
					ОкноПриложения = ПолучитьАктивноеОкноИзКонтекста();
					ФормаДляПоиска    = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"));
					ТЧ             = НайтиТЧВДаннойФорме(ИмяТЧ,ФормаДляПоиска,ИскатьПоИмени);
				Исключение
					
				КонецПопытки;
			КонецЕсли;	 
			
			Если ФормаДляПоиска = Неопределено Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не найдена активная форма.");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Если ТЧ = Неопределено и ВызыватьИсключение Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Таблица формы с именем <%1> не найдена.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
				Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Прервать;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			sleep(1);
			ЗапомнитьАктивноеОкно(Неопределено);
			ФормаДляПоиска = Неопределено;
		КонецПопытки;
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 
	
	Если ТЧ <> Неопределено Тогда
		ОбъектКонтекст.Вставить("ТекущаяТЧ",ТЧ);
	КонецЕсли;	 
	
	СохранитьВКешТаблицуTestClient(ИмяТЧ,ТЧ);
	НужнаяФорма = ФормаДляПоиска;
	
	Возврат ТЧ;
КонецФункции	

&НаКлиенте
Процедура ЗапомнитьАктивноеОкно(АктивноеОкно,ДопПараметры = Неопределено) Экспорт
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ЗапомнитьАктивноеОкно") Тогда
			Если Не ДопПараметры.ЗапомнитьАктивноеОкно Тогда
				Возврат;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ОбъектКонтекст.Свойство("АктивноеОкно") Тогда
		Если ОбъектКонтекст.АктивноеОкно <> Неопределено Тогда
			ОбъектКонтекст.Вставить("ПредыдущееАктивноеОкно",ОбъектКонтекст.АктивноеОкно);
		КонецЕсли;	 
	КонецЕсли;	 
	ОбъектКонтекст.Вставить("АктивноеОкно",АктивноеОкно);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьАктивноеОкноИзТестовоеПриложение(ДопПараметры = Неопределено) Экспорт
	Если Не ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("TestClient НЕ подключен.");
	КонецЕсли;	 
	
	Если НЕ Версия8311ИлиВыше Тогда
		//обход ошибки платформы определения активного окна, когда открыт модальный диалог
		ИскатьМодальныйДиалог = Ложь;
		Если ДопПараметры <> Неопределено Тогда
			Если ДопПараметры.Свойство("ИскатьМодальныйДиалог") Тогда
				ИскатьМодальныйДиалог = ДопПараметры.ИскатьМодальныйДиалог;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если ИскатьМодальныйДиалог Тогда
			//если в платформе не исправлена ошибка определения активного окна
			//указать версию
			ОкноМодальногоДиалога = НайтиОкноМодальногоДиалога();
			Если ОкноМодальногоДиалога <> Неопределено Тогда
				Возврат ОкноМодальногоДиалога;
			КонецЕсли;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	Попытка
		АктивноеОкно = ОбъектКонтекстСохраняемый.ТестовоеПриложение.ПолучитьАктивноеОкно();
	Исключение
		ЗапомнитьАктивноеОкно(Неопределено);
		Возврат Неопределено;
	КонецПопытки;
	
	ЗапомнитьАктивноеОкно(АктивноеОкно,ДопПараметры);
	Возврат АктивноеОкно;
КонецФункции

&НаКлиенте
Функция ПолучитьГлавноеОкноИзТестовоеПриложение() Экспорт
	Если Не ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("TestClient НЕ подключен.");
	КонецЕсли;	 
	
	ОкнаПриложения = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	
	Для Каждого ОкноПриложения Из ОкнаПриложения Цикл
		Если ОкноПриложения.Основное Тогда
			Возврат ОкноПриложения; 
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция НайтиТекущееОкноTestClient() Экспорт
	Возврат ПолучитьАктивноеОкноИзТестовоеПриложение();
КонецФункции	

&НаКлиенте
Функция НайтиФормыТекущегоОкнаTestClient(ДопПараметры = Неопределено) Экспорт
	Если ЗафиксированнаяФормаTestClient <> Неопределено Тогда
		Массив = Новый Массив;
		Массив.Добавить(ЗафиксированнаяФормаTestClient);
		Возврат Массив;
	КонецЕсли;	 
	
	ОкноПриложения = ПолучитьАктивноеОкноИзТестовоеПриложение(ДопПараметры);
	Если ОкноПриложения = Неопределено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не получилось определить активное окно TestClient.");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ОкноПриложения.НачальнаяСтраница Тогда
		МассивФорм = ОкноПриложения.НайтиОбъекты(Тип("ТестируемаяФорма"));
	Иначе	
		ТекФорма = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"));
		МассивФорм = Новый Массив;
		МассивФорм.Добавить(ТекФорма);
	КонецЕсли;	 
	
	Если ДопПараметры <> Неопределено Тогда
		ДопПараметры.Вставить("АктивноеОкно",ОкноПриложения);
	КонецЕсли;	 
	Возврат МассивФорм;
КонецФункции	

&НаКлиенте
Функция НайтиФормуТекущегоОкнаTestClient(ДопПараметры = Неопределено) Экспорт
	Если ЗафиксированнаяФормаTestClient <> Неопределено Тогда
		Возврат ЗафиксированнаяФормаTestClient;
	КонецЕсли;	 
	
	ОкноПриложения = ПолучитьАктивноеОкноИзТестовоеПриложение(ДопПараметры);
	Если ОкноПриложения = Неопределено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не получилось определить активное окно TestClient.");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ТекФорма = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"));
	Если ДопПараметры <> Неопределено Тогда
		ДопПараметры.Вставить("АктивноеОкно",ОкноПриложения);
	КонецЕсли;	 
	Возврат ТекФорма;
КонецФункции

&НаКлиенте
Функция НайтиФормыОкнаИзКонтекста(ДопПараметры = Неопределено) Экспорт
	ОкноПриложения         = ПолучитьАктивноеОкноИзКонтекста();
	Если ОкноПриложения = Неопределено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не получилось определить активное окно TestClient из Контекста.");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Попытка
		МассивФорм             = ОкноПриложения.НайтиОбъекты(Тип("ТестируемаяФорма"));
	Исключение
		//Скорее всего окно уже закрылось, но пока ещё есть в контексте.
		Возврат Неопределено;
	КонецПопытки;	
	
	Возврат МассивФорм;
КонецФункции	

&НаКлиенте
Функция НайтиОкноМодальногоДиалога(ТолькоПредупреждение = Ложь) Экспорт
	НужноеОкно = Неопределено;
	
	ОкнаПриложения = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	Для Каждого ОкноПриложения Из ОкнаПриложения Цикл
		Если ЭтоЗаголовокОкнаМодальногоДиалога(ОкноПриложения.Заголовок)
			или ((ОкноПриложения.Заголовок = "Выбор типа данных") и НЕ ТолькоПредупреждение)
			или ((ОкноПриложения.Заголовок = "Список значений") и НЕ ТолькоПредупреждение)
			Тогда
			НужноеОкно = ОкноПриложения;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если НужноеОкно <> Неопределено Тогда
		ЗапомнитьАктивноеОкно(НужноеОкно);
	КонецЕсли;	 
	
	Возврат НужноеОкно;
КонецФункции	

&НаКлиенте
Функция НайтиОкноПредупреждения() Экспорт
	Возврат НайтиОкноМодальногоДиалога(Истина); 
КонецФункции	

&НаКлиенте
Функция ЭтоЗаголовокОкнаМодальногоДиалога(Заголовок) Экспорт
	Если Заголовок = "1С:Предприятие" Тогда
		Возврат Истина;
	ИначеЕсли Заголовок = "1C:Enterprise" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция ПолучитьТекстОкнаПредупреждения(НужноеОкно) Экспорт
	ПоляФормы = НужноеОкно.НайтиОбъекты(Тип("ТестируемоеПолеФормы"));
	Если ПоляФормы.Количество() = 0 Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("У окна <%1> не найдено ни одного элемента с типом <ТестируемоеПолеФормы>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",НужноеОкно.Заголовок); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ПолеФормы = ПоляФормы[0];
	
	Возврат ПолеФормы.ТекстЗаголовка;
КонецФункции	

&НаКлиенте
Функция НайтиФормуПоЗаголовку(ИмяФормы) Экспорт
	ОкноПриложения = ПолучитьАктивноеОкноИзТестовоеПриложение();
	НужнаяФорма = Неопределено;
	Если ОкноПриложения <> Неопределено Тогда
		НужнаяФорма = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"), ИмяФормы);
	КонецЕсли;	 
	Если НужнаяФорма = Неопределено Тогда
		//иногда 1С некорректно отдаёт текущее окно, тогда будем искать во всех окнах
		//сначала поищем в недавно открытом окне
		
		Попытка
			ОкноПриложения = ПолучитьАктивноеОкноИзКонтекста();
			НужнаяФорма    = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"), ИмяФормы);
			Если НужнаяФорма <> Неопределено Тогда
				ЗапомнитьАктивноеОкно(ОкноПриложения); //произошла неявная смена активного окна
				Возврат НужнаяФорма;
			КонецЕсли;	 
		Исключение
			
		КонецПопытки;
		
		
		//затем будем искать во всех окнах
		МассивОкон = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
		Для каждого ТекОкно Из МассивОкон Цикл
			
			НужнаяФорма    = ТекОкно.НайтиОбъект(Тип("ТестируемаяФорма"), ИмяФормы);
			Если НужнаяФорма <> Неопределено Тогда
				ЗапомнитьАктивноеОкно(ТекОкно); //произошла неявная смена активного окна
				Возврат НужнаяФорма;
			КонецЕсли;	 
			
		КонецЦикла;
	КонецЕсли;	 
	
	Если НужнаяФорма = Неопределено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Форма с заголовком <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФормы); 
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ЗапомнитьАктивноеОкно(ОкноПриложения); //произошла неявная смена активного окна
	Возврат НужнаяФорма;
КонецФункции	

//Использовать, когда известно, что у текущего окна только одна форма, иначе надо использовать НайтиФормыТекущегоОкна()
&НаКлиенте
Функция НайтиТекущуюФормуTestClient() Экспорт
    Получилось = Истина;
    Попытка
        ОкноПриложения         = ПолучитьАктивноеОкноИзКонтекста();
        ТекущаяФорма           = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"));
    Исключение
        Получилось = Ложь;    
    КонецПопытки;
    
    Если Не Получилось Тогда
        ОкноПриложения         = ПолучитьАктивноеОкноИзТестовоеПриложение();
        ТекущаяФорма           = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"));
		ЗапомнитьАктивноеОкно(ОкноПриложения); //произошла неявная смена активного окна
    КонецЕсли;     
    
    Возврат ТекущаяФорма;
КонецФункции	

&НаКлиенте
Процедура ПолучитьПараметрыОбластиМакета(Знач ИмяОбласти,НачСтр,НачКол,КолСтр,КолКол) Экспорт
	ИмяОбластиОригинал = ИмяОбласти;
	
	ИмяОбласти = СокрЛП(ВРег(ИмяОбласти));
	Поз = Найти(ИмяОбласти,"R");
	Если Поз = 0 Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Неверный формат области <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяОбластиОригинал); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ИмяОбласти = Сред(ИмяОбласти,Поз+1);
	Поз = Найти(ИмяОбласти,"C");
	Если Поз = 0 Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Неверный формат области <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяОбластиОригинал); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	НачСтр = Число(Лев(ИмяОбласти,Поз-1));	
	
	ИмяОбласти = Сред(ИмяОбласти,Поз+1);
	Поз = Найти(ИмяОбласти,":");
	Если Поз = 0 Тогда
		КолСтр = НачСтр;
		Поз = Найти(ИмяОбластиОригинал,"C");
		НачКол = Число(Сред(ИмяОбластиОригинал,Поз+1));
		КолКол = НачКол;
		Возврат;
	КонецЕсли;	 
	НачКол = Число(Лев(ИмяОбласти,Поз-1));	

	ИмяОбласти = Сред(ИмяОбласти,Поз+1);
	
	ИмяОбласти = СокрЛП(ВРег(ИмяОбласти));
	Поз = Найти(ИмяОбласти,"R");
	Если Поз = 0 Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Неверный формат области <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяОбластиОригинал); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	//вторая часть, после символа :
	
	ИмяОбласти = Сред(ИмяОбласти,Поз+1);
	Поз = Найти(ИмяОбласти,"C");
	Если Поз = 0 Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Неверный формат области <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяОбластиОригинал); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	КолСтр = Число(Лев(ИмяОбласти,Поз-1))-НачСтр+1;	
	
	ИмяОбласти = Сред(ИмяОбласти,Поз+1);
	КолКол = Число(ИмяОбласти)-НачКол+1;	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьДействийПользователя(ОдинКлиентТестирования = Истина) Экспорт 
	Если ОдинКлиентТестирования Тогда
		ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующий();
	КонецЕсли;
	
	Если ТекущийTestclientЭтоWebКлиент Тогда
		СделатьСообщение("Web клиент не поддерживает запись действий пользователя.");
		Возврат;
	КонецЕсли;	 
	
	Если Элементы.кнНачатьЗаписьДействийПользователя.Видимость = Истина Тогда
		Попытка
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.НачатьЗаписьЖурналаДействийПользователя();
			СделатьСообщение("Запись действий пользователя начата.");
		Исключение
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("НачатьЗаписьДействийПользователя:%1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеОшибки()); 
			СделатьСообщение(ТекстСообщения);
			Возврат;
		КонецПопытки;
		
	ИначеЕсли Элементы.кнПриостановитьЗаписьДействийПользователя.Видимость = Истина Тогда
		Элементы.кнНачатьЗаписьДействийПользователя.Заголовок = "Продолжить запись поведения";

		Попытка
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.ПриостановитьЗаписьЖурналаДействийПользователя();
			СделатьСообщение("Запись действий пользователя приостановлена.");
		Исключение
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("НачатьЗаписьДействийПользователя:%1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеОшибки()); 
			СделатьСообщение(ТекстСообщения);
			Возврат;
			Возврат;
		КонецПопытки;
		
	ИначеЕсли Элементы.кнПродолжитьЗаписьДействийПользователя.Видимость = Истина Тогда
		
		Попытка
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.ПродолжитьЗаписьЖурналаДействийПользователя();;
			СделатьСообщение("Запись действий пользователя продолжена.");
		Исключение
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("НачатьЗаписьДействийПользователя:%1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеОшибки()); 
			СделатьСообщение(ТекстСообщения);
			Возврат;
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ИдетОпросЭлементовФормTestClient = Ложь;
	МассивСостояниеФормTestClient    = Новый Массив;
	ПодключитьОбработчикОжидания("ОпросЭлементовФормTestClient", 1);
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьТаблицуGherkin(МассивТаблицы) Экспорт
	МассивПараметров = ОпределитьПараметрыВСтрокеПримера(МассивТаблицы[0]);
	КолПараметров = МассивПараметров.Количество();
	МассивДлин = Новый Массив;
	Для каждого Элем Из МассивПараметров Цикл
		МассивДлин.Добавить(0);
	КонецЦикла;
	
	Для каждого СтрТзн Из МассивТаблицы Цикл
		МассивПараметров = ОпределитьПараметрыВСтрокеПримера(СтрТзн);
		
		Для Ккк = 0 По МассивДлин.Количество() - 1 Цикл
			ДлинаСтроки = СтрДлина(СокрЛП(МассивПараметров.Получить(Ккк)));
			Если ДлинаСтроки > МассивДлин[Ккк] Тогда
				МассивДлин[Ккк] = ДлинаСтроки;
			КонецЕсли;	 
		КонецЦикла;
	КонецЦикла;
	
	Для Ррр = 0 по (МассивТаблицы.Количество()-1) Цикл
		СтрТзн = МассивТаблицы[Ррр];
		МассивПараметров = ОпределитьПараметрыВСтрокеПримера(СтрТзн);
		СтрПараметров = "| ";
		Для Ккк = 0 По МассивДлин.Количество() - 1 Цикл
			Зн = СокрЛП(МассивПараметров[Ккк]);
			Пока СтрДлина(Зн) < МассивДлин[Ккк] Цикл
				Зн = Зн + " ";
			КонецЦикла;
			СтрПараметров = СтрПараметров + Зн + " | ";
		КонецЦикла;
		
		СтрПараметров = СокрЛП(СтрПараметров);
		
		МассивТаблицы[Ррр] = СтрПараметров;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗаписьДействийПользователя() Экспорт
	
	Элементы.кнНачатьЗаписьДействийПользователя.Заголовок = "Начать запись поведения";
	
	ОтключитьОбработчикОжидания("ОпросЭлементовФормTestClient");
	Попытка
		Стр = ОбъектКонтекстСохраняемый.ТестовоеПриложение.ЗавершитьЗаписьЖурналаДействийПользователя();
		СделатьСообщение("Запись действий пользователя закончена.");
	Исключение
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("ЗавершитьЗаписьДействийПользователя:%1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеОшибки());
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		Возврат;
	КонецПопытки;
	
	Текст = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(Стр);
	
	Объект.СгенерированныйXML = Текст.ПолучитьТекст();
	
	ОбработатьXMLВUILogToScript(Стр);
	
	СделатьПереводСгенерированногоТекстаGherkin();

КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьИсходныйXML() Экспорт
	Стр = Объект.СгенерированныйXML;
	ОбработатьXMLВUILogToScript(Стр);
	СделатьПереводСгенерированногоТекстаGherkin();
	
	ЭтаФорма.ТекущийЭлемент = Элементы.СценарийПоведения;
КонецПроцедуры

&НаКлиенте
Функция НаЭкранеОкноПредупреждения()
	Если Не ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Попытка
		МассивОкон = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Для Каждого ТекущееОкно Из МассивОкон Цикл
		Если ЭтоЗаголовокОкнаМодальногоДиалога(ТекущееОкно.Заголовок) Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция НаЭкранеДиалогАвторизации() Экспорт
	Если Не ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Попытка
		НужноеОкно = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения")
		,"1С:Предприятие. Доступ к информационной базе");
	Исключение
		Возврат Ложь;
	КонецПопытки;
		  
	Если НужноеОкно = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	

&НаКлиенте
Функция ПроверитьПортНаЗанятость(Знач Порт = 1538) Экспорт
	
	Если Порт < 0 Или Порт > 65536 Тогда
		Порт = 1538;
	КонецЕсли;
	
	НачалоДиапазонаПортов    = 48000;
	ОкончаниеДиапазонаПортов = 50000;
	
	Если ЗначениеЗаполнено(Объект.ДиапазонПортовTestclient) Тогда
		//там должна быть строка вида 48000-48020
		МассивЗначений = РазложитьСтрокуВМассивПодстрок(Объект.ДиапазонПортовTestclient,"-");
		Если МассивЗначений.Количество() <> 2 Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Указан неверный диапазон портов: <%1>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Объект.ДиапазонПортовTestclient); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		НачалоДиапазонаПортов = Число(МассивЗначений[0]);
		ОкончаниеДиапазонаПортов = Число(МассивЗначений[1]);
	КонецЕсли;	 
	
	МассивЗанятыхПортов = ПолучитьМассивЗанятыхПортов();
	Если МассивЗанятыхПортов.Найти(Порт) <> Неопределено Тогда
		// найти свободный порт в диапазоне
		Для Счетчик = НачалоДиапазонаПортов По ОкончаниеДиапазонаПортов Цикл
			Если МассивЗанятыхПортов.Найти(Счетчик) = Неопределено Тогда
				СвободныйПорт = Счетчик;
				Прервать;
			КонецЕсли;
		КонецЦикла;		
		Возврат СвободныйПорт;
	КонецЕсли;	
	
	Возврат Порт;
	
КонецФункции // ПолучитьСвободныйПорт()

&НаКлиенте
Функция ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующий(ДопПараметр = "",СтрокаОшибки = Неопределено) Экспорт 
	
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Имя", "Этот клиент");
	Иначе	
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Имя", ТекущиеДанные.Имя);
	КонецЕсли;	 
	
	
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДанныеЗапускаКлиентаТестирования = НайденныеСтроки[0];
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДопПараметр) Тогда
		ДанныеЗапускаКлиентаТестирования.ДопПараметры = ДопПараметр;
	КонецЕсли;	 
	
	РезультатПодключения = ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующийДляНесколькихКлиентов(ДанныеЗапускаКлиентаТестирования,СтрокаОшибки);
	
	Возврат РезультатПодключения;
	
КонецФункции

//возвращает массив
//каждая строка массива - массив значений исходного табличного документа
//если возможно используется ЗаписатьСодержимоеВФайл
//для web клиента и для платформы меньше 8.3.8 - считывает макет по ячейкам, согласно указанных параметров
//если использовался метод ЗаписатьСодержимоеВФайл - будет взята только часть макета, согласно указанных параметров чтения макета
//параметры чтения макета задаются через шаг: Тогда Я задаю системные параметры считывания макета НачСтр 1 НачКол 1 КолСтр 5 КолКол 3
&НаКлиенте
Функция ПолучитьТабДокИзTestClientКакМассив(ЭлементФормы,ДопПараметры = Неопределено) Экспорт
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если НЕ ТекущийTestclientЭтоWebКлиент И ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.8.0") Тогда
		//значит можно сохранить макет в файл и пробросить в TestManager
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");
		
		ТекущаяДоступность = Истина;
		Попытка
			ТекущаяДоступность = ЭлементФормы.ТекущаяДоступность();
		Исключение
		КонецПопытки;
		
		Если ТекущаяДоступность Тогда
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.УстановитьРезультатДиалогаВыбораФайла(Истина, ИмяВременногоФайла);
			ЭлементФормы.ЗаписатьСодержимоеВФайл();
			
			КоличествоПопытокПроверкиСуществованияФайла     = 0;
			МаксКоличествоПопытокПроверкиСуществованияФайла = ЗначениеТаймаутаДляАсинхронногоШага(10);
			Пока Истина Цикл
				КоличествоПопытокПроверкиСуществованияФайла = КоличествоПопытокПроверкиСуществованияФайла + 1;
				Если КоличествоПопытокПроверкиСуществованияФайла > МаксКоличествоПопытокПроверкиСуществованияФайла Тогда
					Прервать;
				КонецЕсли;	 
				
				Если ФайлСуществуетКомандаСистемы(ИмяВременногоФайла) Тогда
					Прервать;
				КонецЕсли;	 
				
				Sleep(1);
			КонецЦикла;	
		Иначе	
			Возврат МакетTestClientПоЯчейкеКакМассив(ЭлементФормы,ДопПараметры);
		КонецЕсли;	 
		
		Если Не ФайлСуществуетКомандаСистемы(ИмяВременногоФайла) Тогда
			//значит либо файл не успел сохраниться, либо ТабличныйДокумент не доступен для редактирования, и просто не может сохранить файл
			//значит надо считать ТабличныйДокумент по ячейкам
			Возврат МакетTestClientПоЯчейкеКакМассив(ЭлементФормы,ДопПараметры);
		КонецЕсли;	 
		
		КоличествоПопытокПолученияДвоичныхДанных     = 0;
		МаксКоличествоПопытокПолученияДвоичныхДанных = ЗначениеТаймаутаДляАсинхронногоШага(10);
		Пока Истина Цикл
			КоличествоПопытокПолученияДвоичныхДанных = КоличествоПопытокПолученияДвоичныхДанных + 1;
			
			Попытка
				ФайлМакета = Новый ДвоичныеДанные(ИмяВременногоФайла);
				Прервать;
			Исключение
				
			КонецПопытки;
			
			Если КоличествоПопытокПолученияДвоичныхДанных > МаксКоличествоПопытокПолученияДвоичныхДанных Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог получить данные файла <%1>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяВременногоФайла); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Sleep(1);
		КонецЦикла;	 
		
		
		ТабДок = ПреобразоватьФайлМакетаВМассив(ФайлМакета,ДопПараметры);
		
		УдалятьПустыеСтрокиИзМакета = Истина;
		Если ДопПараметры <> Неопределено Тогда
			Если ДопПараметры.Свойство("УдалятьПустыеСтрокиИзМакета") Тогда
				УдалятьПустыеСтрокиИзМакета = ДопПараметры.УдалятьПустыеСтрокиИзМакета;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если УдалятьПустыеСтрокиИзМакета Тогда
			УбратьПустыеСтрокиИКолонкиСКраёвМакета(ТабДок);
		КонецЕсли;	 
		
		Возврат ТабДок;
	Иначе	
		//значит надо считывать макет по каждой ячейке
		Возврат МакетTestClientПоЯчейкеКакМассив(ЭлементФормы,ДопПараметры);
	КонецЕсли;	 
КонецФункции	

//возвращает ТабличныйДокумент
//для тонкого клиента, если возможно - использует ЗаписатьСодержимоеВФайл, при этом макет сохраняется целиком как есть
//для web клиента и для платформы меньше 8.3.8 - считывает макет по ячейкам, согласно указанных параметров чтения макета
//параметры чтения макета задаются через шаг: Тогда Я задаю системные параметры считывания макета НачСтр 1 НачКол 1 КолСтр 5 КолКол 3
&НаКлиенте
Функция ПолучитьТабличныйДокументTestClient(ЭлементФормы,ДопПараметры = Неопределено) Экспорт
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если НЕ ТекущийTestclientЭтоWebКлиент И ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.8.0") Тогда
		//значит можно сохранить макет в файл и пробросить в TestManager
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");
		
		ТекущаяДоступность = Истина;
		Попытка
			ТекущаяДоступность = ЭлементФормы.ТекущаяДоступность();
		Исключение
		КонецПопытки;
		
		Если ТекущаяДоступность Тогда
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.УстановитьРезультатДиалогаВыбораФайла(Истина, ИмяВременногоФайла);
			ЭлементФормы.ЗаписатьСодержимоеВФайл();
			
			КоличествоПопытокПроверкиСуществованияФайла     = 0;
			МаксКоличествоПопытокПроверкиСуществованияФайла = ЗначениеКоличествоПопытокВыполненияДействия();
			МаксКоличествоПопытокПроверкиСуществованияФайла = Макс(МаксКоличествоПопытокПроверкиСуществованияФайла,2);
			Пока Истина Цикл
				КоличествоПопытокПроверкиСуществованияФайла = КоличествоПопытокПроверкиСуществованияФайла + 1;
				Если КоличествоПопытокПроверкиСуществованияФайла > МаксКоличествоПопытокПроверкиСуществованияФайла Тогда
					Прервать;
				КонецЕсли;	 
				
				Если ФайлСуществуетКомандаСистемы(ИмяВременногоФайла) Тогда
					Прервать;
				КонецЕсли;	 
				
				Sleep(1);
			КонецЦикла;	
		Иначе	
			Возврат ТабличныйДокументTestClientПоЯчейкам(ЭлементФормы,ДопПараметры);
		КонецЕсли;	 
		
		Если Не ФайлСуществуетКомандаСистемы(ИмяВременногоФайла) Тогда
			ИмяВременногоФайла = ФайлМакетаВФайлахКоторыеИспользовалисьРанееВЭтомЖеСценарии();
			//значит либо файл не успел сохраниться, либо ТабличныйДокумент не доступен для редактирования, и просто не может сохранить файл
			//значит надо считать ТабличныйДокумент по ячейкам
			Если ИмяВременногоФайла = Неопределено Тогда
				Возврат ТабличныйДокументTestClientПоЯчейкам(ЭлементФормы,ДопПараметры);
			КонецЕсли;	 
		КонецЕсли;	 
		
		КоличествоПопытокПолученияДвоичныхДанных     = 0;
		МаксКоличествоПопытокПолученияДвоичныхДанных = ЗначениеКоличествоПопытокВыполненияДействия();
		МаксКоличествоПопытокПолученияДвоичныхДанных = Макс(МаксКоличествоПопытокПолученияДвоичныхДанных,2);
		Пока Истина Цикл
			КоличествоПопытокПолученияДвоичныхДанных = КоличествоПопытокПолученияДвоичныхДанных + 1;
			
			Попытка
				ФайлМакета = Новый ДвоичныеДанные(ИмяВременногоФайла);
				Прервать;
			Исключение
				
			КонецПопытки;
			
			Если КоличествоПопытокПолученияДвоичныхДанных > МаксКоличествоПопытокПолученияДвоичныхДанных Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог получить данные файла <%1>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяВременногоФайла); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Sleep(1);
		КонецЦикла;	
		
		ЗапомнитьДанныеФайлаПриСохраненииМакета(ИмяВременногоФайла);
		
		НадоСчитатьОбласть = Ложь;
		Если ДопПараметры <> Неопределено Тогда
			Если ДопПараметры.Свойство("НадоСчитатьОбласть") Тогда
				НадоСчитатьОбласть = ДопПараметры.НадоСчитатьОбласть;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если НадоСчитатьОбласть Тогда
			ТабДок = ОставитьЧастьМакетаСогласноПараметровЧтенияМакета(ФайлМакета,ДопПараметры.НачСтр,ДопПараметры.НачКол,ДопПараметры.КолСтр,ДопПараметры.КолКол);
		Иначе	
			ТабДок = ТабличныйДокументИзДвоичныхДанных(ФайлМакета);
		КонецЕсли;	 
		
		УдалитьФайлыКомандаСистемы(ИмяВременногоФайла);
		
		Возврат ТабДок;
	Иначе	
		//значит надо считывать макет по ячейке
		Возврат ТабличныйДокументTestClientПоЯчейкам(ЭлементФормы,ДопПараметры);
	КонецЕсли;	 
КонецФункции	

&НаКлиенте
Функция ПолучитьЗначениеТестируемаяТаблицаФормы(ЭлементФормы,ДопПараметры = Неопределено) Экспорт
	ВыделятьВсеСтроки = Истина;
	ПроверкаКоличестваСтрок = Ложь;
	ВидСравненияТаблицы = Неопределено;
	ЗначениеСравнения = 0;
	НадоПолучитьТолькоНесколькоСтрок = Ложь;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ВыделятьВсеСтроки") Тогда
			ВыделятьВсеСтроки = ДопПараметры.ВыделятьВсеСтроки;
		КонецЕсли;	 
		Если ДопПараметры.Свойство("ПроверкаКоличестваСтрок") Тогда
			ПроверкаКоличестваСтрок = ДопПараметры.ПроверкаКоличестваСтрок;
		КонецЕсли;	 
		Если ДопПараметры.Свойство("ВидСравненияТаблицы") Тогда
			ВидСравненияТаблицы = ДопПараметры.ВидСравненияТаблицы;
		КонецЕсли;	 
		Если ДопПараметры.Свойство("ЗначениеСравнения") Тогда
			ЗначениеСравнения = ДопПараметры.ЗначениеСравнения;
		КонецЕсли;	 
		Если НРег(ВидСравненияТаблицы) = "больше" или ВидСравненияТаблицы = ">" Тогда
			НадоПолучитьТолькоНесколькоСтрок = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	КоличествоПопыток = ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		ТекущийРежимРедактирование = Ложь;
		Попытка
			ТекущийРежимРедактирование = ЭлементФормы.ТекущийРежимРедактирование();
		Исключение
		КонецПопытки;
		
		Если ТекущийРежимРедактирование Тогда
			Попытка
				ЭлементФормы.ЗакончитьРедактированиеСтроки();
			Исключение
			КонецПопытки;
		КонецЕсли;	 
		
		НадоПолучатьСтроки = Истина;
		ЗначениеТЧ         = Новый Массив;
		
		Попытка
			Если ВыделятьВсеСтроки Тогда
				ЭлементФормы.ПерейтиКПервойСтроке();
			КонецЕсли;	 
		Исключение
			//значит это не таблица
			НадоПолучатьСтроки = Ложь;
			ЗначениеТЧ         = Неопределено;
		КонецПопытки;
		
		Если НадоПолучатьСтроки  Тогда
			Попытка
				ТекЭлемент         = ЭлементФормы.ПолучитьТекстЯчейки();
				Если ВыделятьВсеСтроки Тогда
					ЭлементФормы.ВыделитьВсеСтроки();
					Если ТекущийTestclientЭтоWebКлиент Тогда
						//чтобы дать web клиенту успеть выделить строки
						Если БезопасноеВыполнениеШагов() Тогда
							sleep(1);
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
				ЗначениеТЧ         = ЭлементФормы.ПолучитьВыделенныеСтроки();
				НадоПолучатьСтроки = Ложь;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если НадоПолучатьСтроки Тогда
			//для случая когда в таблице нет строк
			Попытка
				ЗначениеТЧ = ЭлементФормы.ПолучитьВыделенныеСтроки();
			Исключение
				СделатьСообщение(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;	 
		
		Если ВыделятьВсеСтроки и (ЗначениеТЧ <> Неопределено) И (ЗначениеТЧ.Количество() = 1) Тогда
			//значит возможна ситуация, когда в таблице запрещено получение всех строк
			
			ЗначениеТЧ = Новый Массив;
			
			//будем получать значение таблицы через переход к каждой строке
			ЭлементФормы.ПерейтиКПервойСтроке();
			
			КоличествоПолученныхСтрок = 0;
			Пока Истина Цикл
				СтрокаТаблицы = ЭлементФормы.ПолучитьВыделенныеСтроки();
				Если СтрокаТаблицы.Количество() <> 1 Тогда
					ВызватьИсключение ПолучитьТекстСообщенияПользователю("Ожидали получить только одну строку таблицы.");
				КонецЕсли;	 
				
				ЗначениеТЧ.Добавить(СтрокаТаблицы[0]);
				КоличествоПолученныхСтрок = КоличествоПолученныхСтрок + 1;
				
				Если ПроверкаКоличестваСтрок И НадоПолучитьТолькоНесколькоСтрок Тогда
					Если КоличествоПолученныхСтрок > ЗначениеСравнения Тогда
						Прервать;
					КонецЕсли;	 
				КонецЕсли;	 
				
				Попытка
					ЭлементФормы.ПерейтиКСледующейСтроке();
				Исключение
					Прервать;
				КонецПопытки;
			КонецЦикла;	
		КонецЕсли;
		
		Если ЗначениеТЧ <> Неопределено Тогда
			Прервать;
		Иначе
			Sleep(1);
		КонецЕсли;	 
		
	КонецЦикла;	
	
	Возврат ЗначениеТЧ;
КонецФункции	

&НаКлиенте
Процедура ЗапомнитьСостояниеФормыTestClient() Экспорт
	ДопПараметры = Новый Структура;
	СохраненноеСостояниеФормыTestClient = ПолучитьСостояниеФормыTestClient(ДопПараметры);
	Элементы.ПолучитьИзмененияФормыGherkin.Заголовок = ПолучитьТекстСообщенияПользователю("Получить изменения формы");
КонецПроцедуры

&НаКлиенте
Процедура ЗабытьСостояниеФормыTestClient() Экспорт
	СохраненноеСостояниеФормыTestClient = Неопределено;
	Элементы.ПолучитьИзмененияФормыGherkin.Заголовок = ПолучитьТекстСообщенияПользователю("Получить состояние всей формы");
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСостояниеТекущегоЭлементаФормы() Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТолькоАктивныйЭлемент",Истина);
	ПолучитьИзмененияФормы("Gherkin",ДопПараметры);
КонецПроцедуры 

&НаКлиенте
Процедура ПолучитьИзмененияФормыGherkin() Экспорт
	ДопПараметры = Новый Структура;
	ПолучитьИзмененияФормы("Gherkin",ДопПараметры);
КонецПроцедуры

&НаКлиенте
Функция ПодключитьПрофильTestClientПоИмени(ИмяКлиентаТестирования) Экспорт
	РазорватьСоединениеTestClient();
	
	
	// отключить существующий сеанс, если это не повторный запуск
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Подключен", Истина);
	
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ОбъектКонтекстСохраняемый.Удалить("ТестовоеПриложение");
		ОбъектКонтекстСохраняемый.Удалить("ГлавноеОкноТестируемого");
	КонецЕсли;	
	
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя", ИмяКлиентаТестирования);
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не найден профиль TestClient <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКлиентаТестирования);
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		Возврат Ложь;
	КонецЕсли;	 
	
	СтрокаПрофиля = НайденныеСтроки[0];
	
	ЕстьПодключение = ПолучитьКлиентаТестирования(ИмяКлиентаТестирования);
	Если Не ЕстьПодключение Тогда
		СтрокаПрофиля.Подключен = Ложь;
	Иначе
		Для Каждого НайденнаяСтрока Из ДанныеКлиентовТестирования Цикл
			НайденнаяСтрока.Подключен = Ложь;
		КонецЦикла;
		
		СтрокаПрофиля.Подключен = Истина;
	КонецЕсли;
	
	Элементы.ДанныеКлиентовТестирования.ТекущаяСтрока = СтрокаПрофиля.ПолучитьИдентификатор();
	
	Возврат ЕстьПодключение;
КонецФункции

&НаКлиенте
Функция ПолучитьКлиентаТестирования(ИмяКлиентаТестирования, ДопПараметр = "",СтрокаОшибки = Неопределено,ДополнительныеПараметры = Неопределено) Экспорт
	// отключаем существующее подключение
	РазорватьСоединениеTestClient();
	
	ДанныеЗапускаКлиентаТестирования = НайтиДанныеЗапускаКлиентаТестирования(ИмяКлиентаТестирования);
	Если ДанныеЗапускаКлиентаТестирования = Неопределено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог найти данные для подключения профиля клиента тестирования <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКлиентаТестирования); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	ДанныеЗапускаКлиентаТестирования.ДопПараметры = ДопПараметр + ДанныеЗапускаКлиентаТестирования.ДопПараметры;
	ЕстьПодключение = ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующийДляНесколькихКлиентов(ДанныеЗапускаКлиентаТестирования,СтрокаОшибки,ДополнительныеПараметры);
	
	Если ЕстьПодключение Тогда
		СохранитьКлиентовТестирования();
	КонецЕсли;	 
	
	Возврат ЕстьПодключение;
КонецФункции

&НаКлиенте
Функция НайтиДанныеЗапускаКлиентаТестирования(ИмяКлиентаТестирования) Экспорт
	Результат = Неопределено;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя", ИмяКлиентаТестирования);
	
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Результат = НайденныеСтроки[0];
	Иначе	
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Синоним", ИмяКлиентаТестирования);
		
		НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Результат = НайденныеСтроки[0];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//Делает переход к нужной строке таблицы
&НаКлиенте
Функция СделатьПереход(ТаблицаСписок,ОписаниеСтроки,ОшибкаПереходВниз,ОшибкаПереходВверх,ПереключитьВыделение = Ложь) Экспорт
	ПолучилосьПерейти = Ложь;
	Попытка
		ПолучилосьПерейти = ТаблицаСписок.ПерейтиКСтроке(ОписаниеСтроки, Вычислить("НаправлениеПереходаКСтроке.Вниз"),ПереключитьВыделение);
	Исключение
		ОшибкаПереходВниз = ОписаниеОшибки();
		//Сообщить("" + ОписаниеОшибки());
	КонецПопытки;
	
	
	Если НЕ ПолучилосьПерейти Тогда
		Попытка
			ПолучилосьПерейти = ТаблицаСписок.ПерейтиКСтроке(ОписаниеСтроки, Вычислить("НаправлениеПереходаКСтроке.Вверх"),ПереключитьВыделение);
		Исключение
			ОшибкаПереходВверх = ОписаниеОшибки();
			//Сообщить("" + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;	
	
	Возврат ПолучилосьПерейти;
КонецФункции	

//пытается получить значения таблицы Gherkin из Контекста
&НаКлиенте
Функция ПолучитьЗначенияТаблицыGherkinИзКонтекста(ТабПарам) Экспорт
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		Для Каждого Колонка Из СтрокаТабПарам Цикл
			СтрокаТабПарам[Колонка.Ключ] = ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(Колонка.Значение);
		КонецЦикла;	
	КонецЦикла;	
	Возврат ТабПарам;
КонецФункции	 

//проверяет значение на спецсимволы
//Если значение вида $ИмяПеременной$, тогда будет возвращено ОбъектКонтекст.ИмяПеременной
//ИначеЕсли значение вида $$ИмяПеременной$$, тогда будет возвращено ОбъектКонтекстСохраняемый.ИмяПеременной
//ИначеЕсли значение вида $$$ИмяПеременной$$$, это значит, что надо отбросить $$ слева и справа, т.е. символ $ экранирован
//Иначе будет возвращено просто значение
&НаКлиенте
Функция ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(Знач Значение) Экспорт
	Если (Лев(Значение,1) = "$") Тогда
		Если (Лев(Значение,3) = "$$$") и (Прав(Значение,3) = "$$$") Тогда
			//это значит, что надо отбросить $$ слева и справа
			ЗначениеДляПерехода = Сред(Значение,3);
			ЗначениеДляПерехода = Лев(ЗначениеДляПерехода,СтрДлина(ЗначениеДляПерехода)-2);
			
			Значение = ЗначениеДляПерехода;
		ИначеЕсли (Лев(Значение,2) = "$$") и (Прав(Значение,2) = "$$") Тогда
			ИмяПеременной = Сред(Значение,3);
			ИмяПеременной = Лев(ИмяПеременной,СтрДлина(ИмяПеременной)-2);
			
			Попытка
				ЕстьТакаяПеременная = ОбъектКонтекстСохраняемый.Свойство(ИмяПеременной);
			Исключение
				ЕстьТакаяПеременная = Ложь;
			КонецПопытки;
			
			Если НЕ ЕстьТакаяПеременная Тогда
				//попробуем найти значение по ключу
				Значение = ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого(ИмяПеременной);
				Если Значение = Неопределено Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог по переменной <%1> найти сохраненное значение.");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной); 
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
			Иначе	
				Значение = ОбъектКонтекстСохраняемый[ИмяПеременной];
			КонецЕсли;	 
			
		ИначеЕсли (Лев(Значение,1) = "$") и (Прав(Значение,1) = "$") Тогда
			ИмяПеременной = Сред(Значение,2);
			ИмяПеременной = Лев(ИмяПеременной,СтрДлина(ИмяПеременной)-1);
			
            Если НЕ ОбъектКонтекст.Свойство(ИмяПеременной) Тогда
                Значение = ПолучитьСохраненноеЗначениеИзКонтекста(ИмяПеременной);
                Если Значение = Неопределено Тогда
                    ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог по переменной <%1> найти сохраненное значение.");
                    ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной); 
                    ВызватьИсключение ТекстСообщения;
                КонецЕсли;
            Иначе
                Значение = ОбъектКонтекст[ИмяПеременной];
            КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Значение; 
КонецФункции	 

&НаКлиенте
Функция ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам,ИмяТаблицы = Неопределено,ДопПараметры = Неопределено) Экспорт
	
	ЗаменятьИмяКолонки = Истина;
	ИсключитьКолонку = Неопределено;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ЗаменятьИмяКолонки") Тогда
			ЗаменятьИмяКолонки = ДопПараметры.ЗаменятьИмяКолонки;
		КонецЕсли;	 
		Если ДопПараметры.Свойство("ИсключитьКолонку") Тогда
			ИсключитьКолонку = ДопПараметры.ИсключитьКолонку;
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	
	ОписаниеСтроки = Новый Соответствие();
	
	Строка1    = ТабПарам[0];
	Строка2    = ТабПарам[1];
	КолКолонок = Строка1.Количество();
	
	Для Ккк = 1 По КолКолонок Цикл
		Если ИсключитьКолонку = Ккк Тогда
			Продолжить;
		КонецЕсли;	 
		
		Ключ = Строка1["Кол"+XMlСтрока(Ккк)];
		Если Найти(Ключ,"\n") > 0 Тогда
			ПереводСтроки = Истина;
			Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ПереводСтроки") Тогда
				ПереводСтроки = ДопПараметры.ПереводСтроки;
			КонецЕсли;	 
			
			Если ПереводСтроки Тогда
				Ключ = СтрЗаменить(Ключ,"\n",Символы.ПС);
			Иначе	
				Ключ = СтрЗаменить(Ключ,"\n",Символы.ВК + Символы.ПС);
			КонецЕсли;	 
			
			Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
				ДопПараметры.Вставить("ПереводСтроки",НЕ ПереводСтроки);
			КонецЕсли;	 
		КонецЕсли;	 
		Значение = Строка2["Кол"+XMlСтрока(Ккк)];
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Значение = СтрЗаменить(Значение,Символы.НПП,"");
		КонецЕсли;	 
		
		Значение = СтрЗаменить(Значение,"\n",Символы.ПС);
		Значение = ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(Значение);
		
		Если ЗаменятьИмяКолонки Тогда
			Если ИмяТаблицы = "TypeTree" И Ключ = "Значение" Тогда
				//обход бага разного представления таблицы выбора типа в тонком клиенте и в web клиенте
				Ключ = "";
			ИначеЕсли ИмяТаблицы = "TypeTree" И Ключ = "Колонка1" и НЕ (ТекущийTestclientЭтоWebКлиент) Тогда
				//обход бага разного представления таблицы выбора типа в тонком клиенте и в web клиенте
				Ключ = "";
			ИначеЕсли ИмяТаблицы = "ValueList" И Ключ = "" Тогда
				//обход бага разного представления таблицы выбора типа в тонком клиенте и в web клиенте
				Ключ = "Значение";
			КонецЕсли;	
		КонецЕсли;	 
		
		ОписаниеСтроки.Вставить(Ключ,Значение);
	КонецЦикла;
	
	Возврат ОписаниеСтроки;
КонецФункции	

&НаКлиенте
Процедура АктивизироватьЭлементформы(ЭлементФормы) Экспорт
	Попытка
		ЭлементФормы.Активизировать();
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура РазорватьСоединениеTestClient() Экспорт
	Если ОбъектКонтекстСохраняемый <> Неопределено Тогда
		Если ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
			ТестовоеПриложение = ОбъектКонтекстСохраняемый.ТестовоеПриложение;
			Попытка
				ТестовоеПриложение.РазорватьСоединение();
			Исключение
			КонецПопытки;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТекущийTestclientЭтоWebКлиент = Ложь;

	ОбъектКонтекстСохраняемый.Удалить("ТестовоеПриложение");
	ОбъектКонтекстСохраняемый.Удалить("ГлавноеОкноТестируемого");
	
	СброситьФлагПодключенияКлиентаТестирования();
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьКорректоеЗначениеДляСравненияТекста(Знач Стр) Экспорт
	Стр = СтрЗаменить(Стр,Символы.НПП," ");
	Возврат Стр; 
КонецФункции	 

//проверяет значение флага по его представлению
&НаКлиенте
Функция ЗначениеФлагаСоответствуетИстина(ПредставлениеДанных) Экспорт
	Если Найти(ПредставлениеДанных, Строка(Истина)) = 1 Тогда
		Возврат Истина;
	ИначеЕсли НРег(ПредставлениеДанных) = "да" Тогда
		Возврат Истина;
	ИначеЕсли НРег(ПредставлениеДанных) = "yes" Тогда
		Возврат Истина;
	ИначеЕсли НРег(ПредставлениеДанных) = "1" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

//проверяет значение флага по его представлению
&НаКлиенте
Функция ЗначениеФлагаСоответствуетСреднееПоложение(ПредставлениеДанных) Экспорт
	Если НРег(ПредставлениеДанных) = "2" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

//преобразует переданное значение в макет.
//например массив структур или массив соответствий
&НаКлиенте
Функция ПреобразоватьЗначениеВМакет(Значение,МассивКлючей = Неопределено,ТолькоТекстЯчеек = Ложь) Экспорт
	ПереданМассивКлючей = Ложь;
	Если МассивКлючей <> Неопределено Тогда
		ПереданМассивКлючей = Истина;
	КонецЕсли;	 
	
	ТипЗначения = Неопределено;
	Если ТипЗнч(Значение) = Тип("Структура") Тогда
		ТипЗначения = Значение.Тип;
		Значение    = Значение.Значение;
	КонецЕсли;	 
	
	Если ТипЗнч(Значение) = Тип("Массив") или ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
		Если Значение.Количество() = 0 Тогда
			Возврат Новый ТабличныйДокумент; 
		КонецЕсли;	 
		
		ЧитаемИзМассиваСтруктур = Ложь;
		ПерваяСтрокаСлужебная = Ложь;
		ПерваяСтрока = Значение[0];
		Если ТипЗнч(ПерваяСтрока) = Тип("Структура") и ТипЗначения <> "Макет" Тогда
			ЧитаемИзМассиваСтруктур = Истина;
			//из первой строки берём массив ключей
			ПерваяСтрокаСлужебная = Истина;
			
			Если Не ПереданМассивКлючей Тогда
				МассивКлючей = Новый Массив;
				Для Каждого Элем Из ПерваяСтрока Цикл
					МассивКлючей.Добавить(Элем.Значение);
				КонецЦикла;	
			КонецЕсли;	 
		ИначеЕсли ТипЗнч(ПерваяСтрока) = Тип("Соответствие") и ТипЗначения <> "Макет" Тогда
			Если Не ПереданМассивКлючей  Тогда
				МассивКлючей = Новый Массив;
				Для Каждого Элем Из ПерваяСтрока Цикл
					МассивКлючей.Добавить(Элем.Ключ);
				КонецЦикла;	
			КонецЕсли;	 
		КонецЕсли;	 
		
		
		НовоеЗначение = Новый ТабличныйДокумент;
		
		ИдСтроки = 1;
		
		ИдКолонки = 0;
		Если МассивКлючей <> Неопределено Тогда
			НужноДобавитьСтроку = Истина;
			Если ТипЗнч(Значение) = Тип("Массив") Тогда
				Если Значение.Количество() > 0 Тогда
					Если ТипЗнч(Значение[0]) = Тип("Массив") Тогда
						НужноДобавитьСтроку = Ложь;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;
			Если НужноДобавитьСтроку Тогда
				Для Каждого Ключ Из МассивКлючей Цикл
					ИдКолонки = ИдКолонки + 1;
					НовоеЗначение.Область(ИдСтроки,ИдКолонки,ИдСтроки,ИдКолонки).Текст = Ключ;
				КонецЦикла;	
				ИдСтроки = ИдСтроки + 1;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если ЧитаемИзМассиваСтруктур Тогда
			Для Ккк = (ИдСтроки-1) По Значение.Количество()-1 Цикл
				СтрокаЗначение = Значение[Ккк];
				
				ИдКолонки = 0;
				Если МассивКлючей <> Неопределено Тогда
					Для Каждого Элем Из МассивКлючей Цикл
						ИдКолонки = ИдКолонки + 1;
						НовоеЗначение.Область(ИдСтроки,ИдКолонки,ИдСтроки,ИдКолонки).Текст = СтрокаЗначение["Кол" + XMlСтрока(ИдКолонки)];
					КонецЦикла;	
				КонецЕсли;	 
				
				ИдСтроки = ИдСтроки + 1;
			КонецЦикла;	
		Иначе	
			Если ИдСтроки = 2 Тогда
				НачЗначениеСчетчика = ИдСтроки-1-1;
			Иначе	
				НачЗначениеСчетчика = ИдСтроки-1;
			КонецЕсли;	 
			
			Для Ккк = НачЗначениеСчетчика По Значение.Количество()-1 Цикл
				СтрокаЗначение = Значение[Ккк];
				
				ИдКолонки = 0;
				Если МассивКлючей <> Неопределено и (ТипЗнч(СтрокаЗначение) = Тип("Структура") или ТипЗнч(СтрокаЗначение) = Тип("Соответствие") ) Тогда
					Для Каждого Ключ Из МассивКлючей Цикл
						ИдКолонки = ИдКолонки + 1;
						НовоеЗначение.Область(ИдСтроки,ИдКолонки,ИдСтроки,ИдКолонки).Текст = СтрокаЗначение[Ключ];
					КонецЦикла;
				Иначе
					Если ТипЗнч(СтрокаЗначение) = Тип("Структура") Тогда
						Для СчетчикКолонок = 1 По СтрокаЗначение.Количество() Цикл
							НовоеЗначение.Область(ИдСтроки,СчетчикКолонок,ИдСтроки,СчетчикКолонок).Текст = СтрокаЗначение["Кол" + XMlСтрока(СчетчикКолонок)];
						КонецЦикла;	
					Иначе	
						Для СчетчикКолонок = 0 По СтрокаЗначение.Количество()-1 Цикл
							НовоеЗначение.Область(ИдСтроки,СчетчикКолонок+1,ИдСтроки,СчетчикКолонок+1).Текст = СтрокаЗначение[СчетчикКолонок];
						КонецЦикла;	
					КонецЕсли;	 
				КонецЕсли;	 
				
				ИдСтроки = ИдСтроки + 1;
			КонецЦикла;	
		КонецЕсли;	 
		
		Возврат НовоеЗначение;
	ИначеЕсли ТипЗнч(Значение) = Тип("ТабличныйДокумент") Тогда	
		Если ТолькоТекстЯчеек Тогда
			НовоеЗначение = Новый ТабличныйДокумент;
			
			Для ИдСтроки = 1 По Значение.ВысотаТаблицы Цикл
				Для ИдКолонки = 1 По Значение.ШиринаТаблицы Цикл
					НовоеЗначение.Область(ИдСтроки,ИдКолонки,ИдСтроки,ИдКолонки).Текст = Значение.Область(ИдСтроки,ИдКолонки,ИдСтроки,ИдКолонки).Текст;
				КонецЦикла;	
			КонецЦикла;	
			
			Возврат НовоеЗначение; 
		Иначе
			Возврат Значение; 
		КонецЕсли;	 
	Иначе
		Возврат Значение;
	КонецЕсли;	 
КонецФункции	 

//определяет как надо искать элемент формы
//если ИмяПоля начинается с символа !, тогда поиск будет по имени поля
//иначе по заголовку
//если заголовок поля начинается с символа !, тогда в значении ИмяПоля он должен быть проэкранирован \!
&НаКлиенте
Процедура ОпределитьРежимПоискаЭлементаНаФорме(ИмяПоля,ИскатьПоИмени) Экспорт
	Если Лев(ИмяПоля,2) = "\!" Тогда
		ИмяПоля = Сред(ИмяПоля,2);
		ИскатьПоИмени = Ложь;
		Возврат;
	ИначеЕсли Лев(ИмяПоля,1) = "!" Тогда
		ИмяПоля = Сред(ИмяПоля,2);
		ИскатьПоИмени = Истина;
		Возврат;
	КонецЕсли;	 
	ИскатьПоИмени = Ложь;
КонецПроцедуры

//Возвращает максимум из переданного значения и Объект.ТаймаутДляАсинхронныхШагов
&НаКлиенте
Функция ЗначениеТаймаутаДляАсинхронногоШага(Знач КолСекунд) Экспорт
	Попытка
		КолСекунд = Число(КолСекунд);
	Исключение
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Значение параметра таймаута ожидания должно быть числом. Переданное значение: %1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КолСекунд); 
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Возврат Макс(Объект.ТаймаутДляАсинхронныхШагов,КолСекунд); 
КонецФункции	 

//Возвращает количество попыток выполнения действия при работе с объектами TestClient
&НаКлиенте
Функция ЗначениеКоличествоПопытокВыполненияДействия() Экспорт
	Возврат Макс(Объект.КоличествоПопытокВыполненияДействия,1); 
КонецФункции	 

//проверяет доступность элмента формы с учетом родительских групп
&НаКлиенте
Функция ДоступностьЭлементаСУчетомРодителя(ТекущаяФормаЭлемента,ЭлементФормы,ТекущаяДоступность) Экспорт
	Если ТекущаяФормаЭлемента = Неопределено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Для элемента с именем <%1> не найдена форма.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ЭлементФормы.Имя); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если ПроверятьДоступностьЭлементаСУчетомРодителя <> Истина Тогда
		Возврат ТекущаяДоступность;
	КонецЕсли;	 
	
	Если НЕ ТекущаяДоступность Тогда
		//нет смысла проверять для недоступных элементов
		Возврат ТекущаяДоступность; 
	КонецЕсли;
	
	ГруппыФормы = ТекущаяФормаЭлемента.НайтиОбъекты(Тип("ТестируемаяГруппаФормы"));
	Для Каждого ТекГруппа Из ГруппыФормы Цикл
		ЭлементыГруппы = ТекГруппа.НайтиОбъекты();
		Если ЭлементыГруппы.Найти(ЭлементФормы) <> Неопределено Тогда
			Если НЕ ТекГруппа.ТекущаяДоступность() Тогда
				//значит элемент лежит в невидимой группе
				Возврат Ложь;
			КонецЕсли;	 
		КонецЕсли;	
	КонецЦикла;	 
	
	Возврат ТекущаяДоступность;
КонецФункции	

//Устанаваливает статус проверки доступности элемента с учетом доступности родительской группы
&НаКлиенте
Функция УстановитьСтатусПроверятьДоступностьЭлементаСУчетомРодителя(Значение) Экспорт
	ПроверятьДоступностьЭлементаСУчетомРодителя = Значение;
КонецФункции	 

//Возвращает ссылку на панель разделов TestClient
&НаКлиенте
Функция ПанельРазделов() Экспорт
	Если НЕ ОбъектКонтекстСохраняемый.Свойство("ГлавноеОкноТестируемого") Тогда
		ОбработатьОшибкуПодключенияTestClient();
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Не подключен Testclient.");
	КонецЕсли;	 
	
	ОбработатьСменуАктивногоОкна();
	
	Если ОбъектКонтекстСохраняемый.ГлавноеОкноТестируемого = Неопределено Тогда
		ОбработатьОшибкуПодключенияTestClient();
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Не подключен Testclient.");
	КонецЕсли;	 
	
	Попытка
		ОкноПриложенияОсновноеCommandInterface = ОбъектКонтекстСохраняемый.ГлавноеОкноТестируемого.ПолучитьКомандныйИнтерфейс();
	Исключение
		ОбработатьОшибкуПодключенияTestClient();
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не подключен Testclient.");
		ТекстСообщения = ТекстСообщения + Символы.ПС + ОписаниеОшибки();
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	ПодчиненныеОбъекты = ОкноПриложенияОсновноеCommandInterface.ПолучитьПодчиненныеОбъекты();
	ПанельРазделов = Неопределено;
	Для каждого Элем Из ПодчиненныеОбъекты Цикл
		Если ЭтоПанельРазделов(Элем.ТекстЗаголовка) Тогда
			ПанельРазделов = Элем;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если ПанельРазделов = Неопределено Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Не нашли панель разделов.");
	КонецЕсли;	
	
	Возврат ПанельРазделов;
КонецФункции	 

//Возвращает ссылку на панель функций TestClient
&НаКлиенте
Функция ПанельФункций(МенюФункцийТекущегоРаздела = Неопределено) Экспорт
	ОбработатьСменуАктивногоОкна();
	ОкноПриложенияОсновноеCommandInterface = ОбъектКонтекстСохраняемый.ГлавноеОкноТестируемого.ПолучитьКомандныйИнтерфейс();
	ПодчиненныеОбъекты = ОкноПриложенияОсновноеCommandInterface.ПолучитьПодчиненныеОбъекты();
	МенюФункций                = Неопределено;
	МенюФункцийТекущегоРаздела = Неопределено;
	Для каждого Элем Из ПодчиненныеОбъекты Цикл
		Если ЭтоМенюФункций(Элем.ТекстЗаголовка) Тогда
			МенюФункций = Элем;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если (МенюФункций = Неопределено) и (МенюФункцийТекущегоРаздела = Неопределено) Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Не нашли меню функций раздела.");
	КонецЕсли;	 
	
	Возврат МенюФункций; 
КонецФункции	 

//возвращает корректное значение для строки, которая может располагаться в ячейке таблицы Gherkin
&НаКлиенте
Функция ПолучитьКорректноеЗначениеТаблицыGherkin(Стр) Экспорт
	ПромСтр = СтрЗаменить(Стр,"|","\|");
	ПромСтр = СтрЗаменить(ПромСтр,Символы.ВК,"");
	Возврат СтрЗаменить(ПромСтр,Символы.ПС,"\n") 
КонецФункции	 

#КонецОбласти

#Область ОбщегоНазначения

//Возвращает текст сообщения пользователю с учетом языка, на котором запущен TestManager
&НаКлиенте
Функция ПолучитьТекстСообщенияПользователю(Текст) Экспорт
	Если ЗначениеЗаполнено(Объект.ТекстСообщенийПользователю) Тогда
		Значение = Объект.ТекстСообщенийПользователю[Текст];
		Если ЗначениеЗаполнено(Значение) Тогда
			Возврат Значение;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Текст; 
КонецФункции	 

&НаСервереБезКонтекста
Функция ПолучитьТекстСообщенияПользователюСервер(Текст,ТекстСообщенийПользователю)
	Значение = ТекстСообщенийПользователю[Текст];
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Значение;
	КонецЕсли;	 
	
	Возврат Текст; 
КонецФункции	 

//Делает паузу во время исполнения кода на указанное число секунд
//Для реализации используется команда ping
//Кроссплатформено
&НаКлиенте
Процедура Sleep(КолСекунд) Экспорт
	Если ТипЗнч(ОбъектКонтекстСохраняемый) = Тип("Структура") 
		И ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") 
		И ОбъектКонтекстСохраняемый.ТестовоеПриложение <> Неопределено Тогда
		
		Попытка
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"),Строка(Новый УникальныйИдентификатор),,КолСекунд);
			Возврат;
		Исключение
			
		КонецПопытки;
		
	КонецЕсли;	 
	
    Попытка
        Если ЭтоLinux Тогда
            Команда = "ping -i " + Строка(КолСекунд) + " 127.0.0.1 -c 2 > /dev/null";
            КомандаСистемы(Команда);
        Иначе
            Команда = "ping 127.0.0.1 -n " + СокрЛП(КолСекунд + 1); // +1 нужен, т.к. в реальности происходит на один пинг меньше
            ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
        КонецЕсли;	    
    Исключение
        ТекстСообщения = ПолучитьТекстСообщенияПользователю("Sleep:%1");
        ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеОшибки());
        Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
    КонецПопытки;
	
КонецПроцедуры

//Делает преобразование русской строки в английскую с помощью транслита
&НаКлиенте
Функция Транслит(Стр) Экспорт
    Рез = СокрЛП(Стр);   
    Рез = СтрЗаменить(Рез,"а","a");
    Рез = СтрЗаменить(Рез,"б","b");
    Рез = СтрЗаменить(Рез,"в","v");
    Рез = СтрЗаменить(Рез,"г","g");
    Рез = СтрЗаменить(Рез,"д","d");
    Рез = СтрЗаменить(Рез,"е","e");
    Рез = СтрЗаменить(Рез,"ё","e");
    Рез = СтрЗаменить(Рез,"ж","zh");
    Рез = СтрЗаменить(Рез,"з","z");
    Рез = СтрЗаменить(Рез,"и","i");
    Рез = СтрЗаменить(Рез,"к","k");
    Рез = СтрЗаменить(Рез,"л","l");
    Рез = СтрЗаменить(Рез,"м","m");
    Рез = СтрЗаменить(Рез,"н","n");
    Рез = СтрЗаменить(Рез,"о","o");
    Рез = СтрЗаменить(Рез,"п","p");
    Рез = СтрЗаменить(Рез,"р","r");
    Рез = СтрЗаменить(Рез,"с","s");
    Рез = СтрЗаменить(Рез,"т","t");
    Рез = СтрЗаменить(Рез,"у","u");
    Рез = СтрЗаменить(Рез,"ф","f");
    Рез = СтрЗаменить(Рез,"х","h");
    Рез = СтрЗаменить(Рез,"ч","ch");
    Рез = СтрЗаменить(Рез,"ш","sh");
    Рез = СтрЗаменить(Рез,"щ","sch");
    Рез = СтрЗаменить(Рез,"ъ","");
    Рез = СтрЗаменить(Рез,"ь","");
    Рез = СтрЗаменить(Рез,"э","e");
    Рез = СтрЗаменить(Рез,"ю","yu");
    Рез = СтрЗаменить(Рез,"й","i");
    Рез = СтрЗаменить(Рез,"ц","c");
    Рез = СтрЗаменить(Рез,"я","ya");
    Рез = СтрЗаменить(Рез,"ы","i");
    Рез = СтрЗаменить(Рез,"А","A");
    Рез = СтрЗаменить(Рез,"Б","B");
    Рез = СтрЗаменить(Рез,"В","V");
    Рез = СтрЗаменить(Рез,"Г","G");
    Рез = СтрЗаменить(Рез,"Д","D");
    Рез = СтрЗаменить(Рез,"Е","E");
    Рез = СтрЗаменить(Рез,"Ё","E");
    Рез = СтрЗаменить(Рез,"Ж","ZH");
    Рез = СтрЗаменить(Рез,"З","Z");
    Рез = СтрЗаменить(Рез,"И","I");
    Рез = СтрЗаменить(Рез,"К","K");
    Рез = СтрЗаменить(Рез,"Л","L");
    Рез = СтрЗаменить(Рез,"М","M");
    Рез = СтрЗаменить(Рез,"Н","N");
    Рез = СтрЗаменить(Рез,"О","O");
    Рез = СтрЗаменить(Рез,"П","P");
    Рез = СтрЗаменить(Рез,"Р","R");
    Рез = СтрЗаменить(Рез,"С","S");
    Рез = СтрЗаменить(Рез,"Т","T");
    Рез = СтрЗаменить(Рез,"У","U");
    Рез = СтрЗаменить(Рез,"Ф","F");
    Рез = СтрЗаменить(Рез,"Х","H");
    Рез = СтрЗаменить(Рез,"Ч","CH");
    Рез = СтрЗаменить(Рез,"Ш","SH");
    Рез = СтрЗаменить(Рез,"Щ","SCH");
    Рез = СтрЗаменить(Рез,"Ъ","");
    Рез = СтрЗаменить(Рез,"Ь","");
    Рез = СтрЗаменить(Рез,"Ы","I");
    Рез = СтрЗаменить(Рез,"Ц","C");
    Рез = СтрЗаменить(Рез,"Э","E");
    Рез = СтрЗаменить(Рез,"Ю","YU");
    Рез = СтрЗаменить(Рез,"Я","YA");
    Рез = СтрЗаменить(Рез,"Й","I");
    Возврат(Рез);
КонецФункции

// Выполняет SikuliX-скрипт
//
// Параметры:
//  СтрокаКоманды		 - Строка 	 - путь к Sikuli-скрипту и аргументы
//  ЖдатьОкончания		 - Число	 - флаг ожидания окончания выполнения Sikuli-скрипта:
//									   -1	 - ожидать окончания выполнения скрипта;
//									   0	 - не ожидать окончания выполнения скрипта.
//  ЗапускЧерезСкрипт	 - Булево	 - флаг способа запуска Sikuli-скриптов:
//									   Ложь	 - устаревший способ запуска для Windows,
//											   используется по умолчанию для совместимости
//									   Истина	 - запуск через скрипт runsikulix
// 
// Возвращаемое значение:
//   - Результат выполнения скрипта. 0 - если не было ошибок.
//
&НаКлиенте
Функция ВыполнитьSikuliСкрипт(СтрокаКоманды, ЖдатьОкончания = -1, ЗапускЧерезСкрипт = Истина,ОписаниеОшибки = Неопределено,ДопПараметры = Неопределено) Экспорт
	СлужебныйВызов = Ложь;
	Если ДопПараметры <> Неопределено Тогда
		ДопПараметры.Свойство("СлужебныйВызов",СлужебныйВызов)
	КонецЕсли;	 
	
	Если Объект.ИспользоватьSikuliXСервер И СлужебныйВызов <> Истина Тогда
		Возврат ВыполнитьSikuliСкриптЧерезSikuliXСервер(СтрокаКоманды, ЖдатьОкончания, ЗапускЧерезСкрипт,ОписаниеОшибки);
	КонецЕсли;	 
	
	Стр = ПолучитьСтрокуВызоваSikuli(ЗапускЧерезСкрипт) + " " + СтрокаКоманды;
	
	Если ОписаниеОшибки <> Неопределено Тогда
		ВременныйФайл = ПолучитьИмяВременногоФайла("txt");
		Стр = Стр + " > """ + ВременныйФайл + """";
		Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
			Если ДопПараметры.Свойство("ИмяФайлаВыводаКонсоли") Тогда
				ДопПараметры.Вставить("ИмяФайлаВыводаКонсоли",ВременныйФайл);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Отладка(Стр);
	Статус = ВыполнитьКомандуОСБезПоказаЧерногоОкна(Стр, ЖдатьОкончания);
	Если Статус <> 0 Тогда
		Если ФайлСуществуетКомандаСистемы(ВременныйФайл) Тогда
			Текст = Новый ЧтениеТекста;
			Текст.Открыть(ВременныйФайл,"UTF-8");
			ОписаниеОшибки = Текст.Прочитать();
			Текст.Закрыть();
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Статус;
КонецФункции

//возврашет значение переменной ИмяФайлаОтветаSikuliXСевер
&НаКлиенте
Функция ИмяФайлаОтветаSikuliXСевер() Экспорт
	Возврат ИмяФайлаОтветаSikuliXСевер; 
КонецФункции	 

// Выполняет команду системы, при этом на экране не будет показано окно cmd
// Использует WshShell.
//
// Параметры:
//  СтрокаКоманды		 - Строка - выполняемая команда
//  ЖдатьОкончания		 - Число  - флаг ожидания окончания выполнения команды:
//
// Возвращаемое значение:
//   - Результат выполнения скрипта. 0 - если не было ошибок.
//
&НаКлиенте
Функция ВыполнитьКомандуОСБезПоказаЧерногоОкна(ТекстКоманды, ЖдатьОкончания = -1) Экспорт
	//если ЖдатьОкончания = -1, тогда будет ожидание окончания работы приложения
	
	ИмяВременногоФайлаКоманды = ПолучитьИмяВременногоФайла("bat");
	
	//эти две строки нужны для записи файла без BOM - начало
	ЗТ = Новый ЗаписьТекста(ИмяВременногоФайлаКоманды, КодировкаТекста.ANSI, , Ложь); 
	ЗТ.Закрыть();
	//эти две строки нужны для записи файла без BOM - окончание
	
	ЗТ = Новый ЗаписьТекста(ИмяВременногоФайлаКоманды, КодировкаТекста.UTF8, , Истина); 
	Если НЕ ЭтоWindowsXP Тогда
		ЗТ.ЗаписатьСтроку("chcp 65001"); 
	КонецЕсли;	 
	ЗТ.ЗаписатьСтроку(ТекстКоманды); 
	ЗТ.Закрыть();
	
	Если WshShell = Неопределено Тогда
		WshShell = ПолучитьWshShell();
		//далее переменная WshShell будет закеширована, чтобы не создавать ComObject каждый раз
	КонецЕсли;	 
	Рез = WshShell.Run("""" + ИмяВременногоФайлаКоманды + """", 0, ЖдатьОкончания);
	
	Если ЖдатьОкончания = -1 и НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
		//иначе удалять нельзя
		УдалитьФайлыКомандаСистемы(ИмяВременногоФайлаКоманды);
	КонецЕсли;	 
	
	Возврат Рез;
КонецФункции	

// Выполняет запись строки в текстовый лог.
//
// Параметры:
//  Стр - Строка - нужная строка для записи в лог
//
// Запись в лог будет работать если выставлен флаг ДелатьЛогВыполненияСценариевВТекстовыйФайл
// 
// Возможно задать параметр при запуске VB через командную строку.
//
// Скрипты, которые входят в комплект VB позволяют читать этот файл на CI в реальном времени.
// Это позволяет видеть на CI какой сценарий сейчас выполняется.
&НаКлиенте
Процедура ЗаписатьСтрокуВТекстовыйЛог(Стр) Экспорт
	Если Не Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ ЗначениеЗаполнено(Объект.ИмяФайлаЛогВыполненияСценариев) Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Не указано имя файла лога в параметре <ИмяФайлаЛогВыполненияСценариев>");
	КонецЕсли;	 
	
	ИмяФайла = Объект.ИмяФайлаЛогВыполненияСценариев;
	
	Попытка
		ЗТ = Новый ЗаписьТекста(ИмяФайла, "UTF-8", , Истина); 
		ЗТ.ЗаписатьСтроку(Стр); 
		ЗТ.Закрыть();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
		
КонецПроцедуры

// Позволяет в отладке посмотреть значение переменной
//
// Параметры:
//  Парам - Произвольный - нужная переменная
//  ПараметрВызватьИсключение - Булево - флаг того, что надо вызвать исключение
//
// Процедура полезна, когда нужно из внешней обработки посмотреть значение переменной, не перезапуская сеанс TestManager.
// Нужна для отладки кода внешних обработок.
&НаКлиенте
Процедура ПосмотретьЗначение(Парам, ПараметрВызватьИсключение = Истина) Экспорт
	Если ПараметрВызватьИсключение Тогда
		Попытка
			//Эта попытка/исключение нужна, чтобы можно было выставить флаг "Останавливаться по ошибке".
			//Тогда будет остановка на данном исключении, но сценарий продолжит свою работу.
			ВызватьИсключение ПолучитьТекстСообщенияПользователю("Исключение для просмотра значения.");
		Исключение
			Отладка("Вызов процедуры ""ПосмотретьЗначение"".");
		КонецПопытки;
	КонецЕсли;  
КонецПроцедуры

// Аналог СтрРазделить() для старых версий платформы
// Описание параметров аналогично описанию параметров для СтрРазделить()
&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено)
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
		
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

//Обертка для функции РазложитьСтрокуВМассивПодстрок()
//Нужна, т.к. не работет вызов Ванесса.РазложитьСтрокуВМассивПодстрок() из других обработок
&НаКлиенте
Функция РазложитьСтрокуВМассивПодстрокКлиент(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	Возврат РазложитьСтрокуВМассивПодстрок(Строка,Разделитель,ПропускатьПустыеСтроки);
КонецФункции 

// Позволяет программно подключить внешнюю обработку, когда она уже помещена в хранилище
&НаСервереБезКонтекста
Функция ПодключитьВнешнююОбработкуСервер(Знач АдресХранилища,ИспользуетсяЗащитаОтОпасныхДействий,ДополнительныеПараметры = Неопределено) Экспорт
	ИмяОбработки = Неопределено;
	Если ИспользуетсяЗащитаОтОпасныхДействий Тогда
		ОписаниеЗащитыОтОпасныхДействий = Вычислить("Новый ОписаниеЗащитыОтОпасныхДействий");
		ОписаниеЗащитыОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
		
		Обработка = ПолучитьОбработкуИзФайлаЧерезМетодСоздать(ДополнительныеПараметры,ИмяОбработки);
		Если Обработка = Неопределено Тогда
			Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
				Если ДополнительныеПараметры.Свойство("АдресХранилища") Тогда
					ИмяОбработки = ВнешниеОбработки.Подключить(ДополнительныеПараметры.АдресХранилища, , Ложь, ОписаниеЗащитыОтОпасныхДействий);
				Иначе	
					ИмяОбработки = ВнешниеОбработки.Подключить(АдресХранилища, , Ложь, ОписаниеЗащитыОтОпасныхДействий);
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		ПроверитьОбработкуНаВозможностьПодключения(ИмяОбработки);
		
		Возврат ИмяОбработки;
	Иначе	
		Обработка = ПолучитьОбработкуИзФайлаЧерезМетодСоздать(ДополнительныеПараметры,ИмяОбработки);
		Если Обработка = Неопределено Тогда
			Если ДополнительныеПараметры.Свойство("АдресХранилища") Тогда
				ИмяОбработки = ВнешниеОбработки.Подключить(ДополнительныеПараметры.АдресХранилища, , Ложь); 
			Иначе	
				ИмяОбработки = ВнешниеОбработки.Подключить(АдресХранилища, , Ложь); 
			КонецЕсли;	 
			ПроверитьОбработкуНаВозможностьПодключения(ИмяОбработки);
		КонецЕсли;	 
		Возврат ИмяОбработки;
	КонецЕсли;	 
КонецФункции 

// Позволяет программно подключить внешнюю обработку
&НаКлиенте
Функция ПодключитьВнешнююОбработкуКлиент(ИмяФайла,ПараметрыПодключения = Неопределено) Экспорт
	Попытка
		ДополнительныеПараметры = Новый Структура;
		Если ТипЗнч(ПараметрыПодключения) = Тип("Структура")  Тогда
			Для Каждого Элем Из ПараметрыПодключения Цикл
				ДополнительныеПараметры.Вставить(Элем.Ключ,Элем.Значение);
			КонецЦикла;	 
		КонецЕсли;	 
		Если ЕстьПоддержкаНемодальныхФорм Тогда
			Оповещение = Вычислить("Новый ОписаниеОповещения(""ОбработкаПослеПомещенияФайла"", ЭтаФорма, ДополнительныеПараметры)");
			Выполнить("НачатьПомещениеФайла(Оповещение, , ИмяФайла, Ложь, УникальныйИдентификатор);");
		Иначе
			АдресХранилища = "";
			ФайлДляПомещения = Новый Массив;
			ФайлДляПомещения.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла));
			ПомещенныеФайлы = Новый Массив;
			ПоместитьФайлы(ФайлДляПомещения, ПомещенныеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор);
			
			Если ПомещенныеФайлы.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;	 
			
			АдресХранилища = ПомещенныеФайлы[0].Хранение;
			ДополнительныеПараметры.Вставить("ИмяФайла",ИмяФайла);
			ИмяОбработки = ПодключитьВнешнююОбработкуСервер(АдресХранилища,ЕстьЗащитаОтОпасныхДействий,ДополнительныеПараметры);
			Возврат ИмяОбработки;
		КонецЕсли;	 
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции 

// Возвращает путь к парсеру фича файлов
&НаКлиенте
Функция ПолучитьПутьКFeatureReader() Экспорт
	ПутьКФайлу = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "lib/FeatureReader/vbFeatureReader.epf";
	
	Если Не ФайлСуществуетКомандаСистемы(ПутьКФайлу, "ПолучитьПутьКFeatureReader") Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Файл <vbFeatureReader.epf> не найден в каталоге инструментов <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1", СокрЛП(Объект.КаталогИнструментов)); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Возврат ПутьКФайлу;
КонецФункции

&НаКлиенте
Функция ПреобразоватьПутьСТочкамиКНормальномуПути(Знач ОригСтр="") Экспорт
	
	Если ПустаяСтрока(ОригСтр) Тогда
		Возврат ОригСтр;
	КонецЕсли; 
	
	Если Найти(ОригСтр, "$workspaceRoot") > 0 Тогда 
		ОригСтр = СтрЗаменить(ОригСтр, "$workspaceRoot", ДополнитьСлешВПуть(Объект.КаталогПроекта));
	КонецЕсли;
		
	Если Найти(ОригСтр, "$instrumentsRoot") > 0 И НЕ ПустаяСтрока(Объект.КаталогИнструментов) Тогда
		ОригСтр = СтрЗаменить(ОригСтр, "$instrumentsRoot", ДополнитьСлешВПуть(Объект.КаталогИнструментов));
	КонецЕсли;	
	
	ФайлПути = Новый Файл(ОригСтр);
	Если Лев(ОригСтр, 1) = "." Тогда
		//Для совместимости со старым кодом оставим пока КаталогИнструментов, правильней было-бы использовать КаталогПроекта
		ФайлПути = Новый Файл(ДополнитьСлешВПуть(Объект.КаталогИнструментов) + ОригСтр);
	КонецЕсли;
	
	Возврат ФайлПути.ПолноеИмя;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(Версия1, Версия2) Экспорт
	Массив1 = РазложитьСтрокуВМассивПодстрок(Версия1, ".");
	Массив2 = РазложитьСтрокуВМассивПодстрок(Версия2, ".");
	
	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Массив1.Количество() - 1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);
		
		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		ИначеЕсли Число(Элем2) < Число(Элем1) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Версия1БольшеИлиРавно;
КонецФункции

&НаКлиенте
Функция ВерсияПриложенияБольшеИлиРавнаЧемЗаданнаяКлиент(Версия1, Версия2) Экспорт
	
	Возврат ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(Версия1, Версия2); 
КонецФункции	

&НаСервере
Функция ПолучитьВстроенныйМакетПоИмени(Знач ИмяМакета,ИмяФичи)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Попытка
		Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета); 
	Исключение
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ИмяФичи) Тогда
		Попытка
			Файл = Новый Файл(ИмяФичи);
			ИмяМакета = "МакетОбработки_" + Файл.ИмяБезРасширения + "_" + ИмяМакета;
			Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета); 
		Исключение
		КонецПопытки;
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	
	ИмяФичи = Неопределено;
	Если (ТекИД_ШагаВМассиве >= 0) и (ТекИД_ШагаВМассиве <= (Шаги.Количество() - 1)) Тогда
		ТекШаг       = Шаги[ТекИД_ШагаВМассиве];
		ИДСтрокиШага = ТекШаг.СтрокаШага;
		СтрокаШага   = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);
		
		ИмяФичи = ПолучитьИмяФичиИзПолногоПути(СтрокаШага.ПолныйПуть);
		
		Попытка
			Обработка = ПолучитьОбработкаСвязаннаяСИсполняемойФичей(ИмяФичи);
			
			//Далее будет попытка получить макет из обработки, которая относится к данному шагу (это либо обработка подчиненного сценария, либо обработка связанная с основной фичей).
			//Его может не быть, если это подчиненный сценарий, а хотели получить макет из основной фичи.
			//Если макет не был получен - значит далее будет попытка получить макет из обработки связанной с основной фичей, если такая обработка существует.
			Макет     = Обработка.ПолучитьМакетОбработки(ИмяМакета);
			Возврат Макет;
		Исключение
			
		КонецПопытки;
	КонецЕсли;	 
	
	ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	СтрокаСценария   = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	Если СтрокаСценария.ФичаИмеетСвоюEPF Тогда
		СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаСценария);
		Обработка  = ПолучитьОбработкаСвязаннаяСИсполняемойФичей(СтрокаФичи.ПолныйПуть);
		Макет      = Неопределено;
		Попытка
			Макет = Обработка.ПолучитьМакетОбработки(ИмяМакета);
		Исключение
		КонецПопытки;
		
		Если Макет <> Неопределено Тогда
			Возврат Макет;
		КонецЕсли;	 
	КонецЕсли; 
	
	Если Объект.ВерсияПоставки = "single" Тогда
		Макет = ПолучитьВстроенныйМакетПоИмени(ИмяМакета,ИмяФичи);
		Если Макет <> Неопределено Тогда
			Возврат Макет; 
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Функция НайтиМакетВКаталогеПроекта(ИмяМакета) Экспорт
	Если НЕ ЗначениеЗаполнено(Объект.КаталогПроекта) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не найден эталон макета <%1>. Пустой каталог проекта.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяМакета); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Нашли = Ложь;
	
	ИмяМакетаДляПоиска = ИмяМакета;
	ИмяФайла           = Неопределено;
	Нашли              = НайтиМакетВКаталогеПроектаСлужебный(ИмяМакетаДляПоиска,ИмяФайла);
	
	
	
	Если Не Нашли Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не найден файл макета <%1> в каталоге проекта <%2>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяМакета);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Объект.КаталогПроекта);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ТабДок = ПолучитьТабличныйДокументНаСервере(АдресВременногоХранилища);
	Возврат Табдок;
КонецФункции	

&НаСервере
Функция Объект() Экспорт
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектНаСервере;
КонецФункции

&НаКлиенте
Функция УстановленOneScript() Экспорт

	ИнструментУстановлен = Ложь;
	
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	Стр = "oscript > """ + ИмяФайлаЛога + """ 2>&1";
	
	ВыполнитьКомандуОС(Стр);
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаЛога, "UTF-8");
	
	СтрокаВозврата = Неопределено;
	
	КолСтрокСчитано = 0;
	Стр = Текст.ПрочитатьСтроку();
		
	Если Стр <> Неопределено Тогда
		Образец = "1Script Execution Engine";
		Если Лев(Стр, СтрДлина(Образец)) = Образец Тогда
			ИнструментУстановлен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Текст.Закрыть();
	УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
	
	Возврат ИнструментУстановлен;

КонецФункции // УстановленOneScript()

&НаКлиенте
Процедура СоздатьШаблоныОбработок() Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.ВерсияПлатформыДляГенерацииEPF) Тогда
		СделатьСообщение("Не указан каталог с нужной версией платформы 8.3.10 или выше.");
		Возврат;
	КонецЕсли;	 
	
	ИмяФайла = ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + "1cv8.exe";
	Если ЭтоLinux Тогда
		ИмяФайла = ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + "1cv8";
	КонецЕсли;	 
	
	Если Не ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не найден файл <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайла);
		СделатьСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли;	 
	
	
	МассивДействий = Новый Массив;
	ДобавитьМассивСостоянийФайлов(МассивДействий);
	ДобавитьСканированиеКаталогов(МассивДействий);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекИдМассива", 0);
	ДопПараметры.Вставить("МассивДействий", МассивДействий);
	ДопПараметры.Вставить("НадоЗагрузитьФичи", Ложь);
	ДопПараметры.Вставить("НадоГенерироватьEPF", Истина);
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ПолучитьАсинхроноСостоянияОбъектовФайловойСистемы(ДопПараметры);
	Иначе
		ПолучитьСинхроноСостоянияОбъектовФайловойСистемы(ДопПараметры);
		СоздатьШаблоныОбработокПродолжение();
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивPIDПроцессов(ИмяОбраза) Экспорт
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ИмяВременногоBat = ПолучитьИмяВременногоФайла("bat");
	ЗТ = Новый ЗаписьТекста(ИмяВременногоBat, "windows-1251", , Истина); 
	ЗТ.ЗаписатьСтроку("chcp 65001"); 
	ЗТ.ЗаписатьСтроку("tasklist /v /fo list /fi ""imagename eq " + ИмяОбраза + """ > """ + ИмяВременногоФайла + """"); 
	ЗТ.Закрыть();
	
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(ИмяВременногоBat);
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяВременногоФайла, "UTF-8");
	
	МассивProcessID = Новый Массив;
	ProcessID = Неопределено;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = НРег(Стр);
		Если Лев(Стр, 4) = "pid:" Тогда
			ProcessID = СокрЛП(Сред(Стр, 5));
		КонецЕсли;	 
		
		Если ProcessID <> Неопределено Тогда
			Если (Лев(Стр, 15) = "заголовок окна:") или (Лев(Стр, 13) = "window title:") Тогда
				МассивProcessID.Добавить(ProcessID);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	
	Текст.Закрыть();
	
	Возврат МассивProcessID;
КонецФункции	

&НаКлиенте
Процедура ЗавершитьСеансыTestClientПринудительно() Экспорт
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	
	Если НЕ ЭтоLinux Тогда 
		ИмяВременногоBat = ПолучитьИмяВременногоФайла("bat");
		ЗТ = Новый ЗаписьТекста(ИмяВременногоBat, "windows-1251", , Истина); 
		ЗТ.ЗаписатьСтроку("chcp 65001"); 
		ЗТ.ЗаписатьСтроку("tasklist /v /fo list /fi ""imagename eq 1cv8c.exe"" > """ + ИмяВременногоФайла + """"); 
		ЗТ.Закрыть();
		
		ЗапуститьПриложение(ИмяВременногоBat, , Истина);
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяВременногоФайла, "UTF-8");
		
		МассивProcessID = Новый Массив;
		ProcessID = Неопределено;
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
			
			Стр = НРег(Стр);
			Если Лев(Стр, 4) = "pid:" Тогда
				ProcessID = СокрЛП(Сред(Стр, 5));
			КонецЕсли;	 
			
			Если ProcessID <> Неопределено Тогда
				Если (Лев(Стр, 15) = "заголовок окна:") или (Лев(Стр, 13) = "window title:") Тогда
					Если Найти(Стр, "vanessa") = 0 Тогда
						МассивProcessID.Добавить(ProcessID);
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЦикла;	
		Текст.Закрыть();
		
		Если МассивProcessID.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;	 
		
		ИмяВременногоBat = ПолучитьИмяВременногоФайла("bat");
		ЗТ = Новый ЗаписьТекста(ИмяВременногоBat, "UTF-8", , Истина); 
		Стр = "taskkill /F ";
		Для каждого ProcessID Из МассивProcessID Цикл
			Стр = Стр + "/pid " + ProcessID + " ";
		КонецЦикла;
		ЗТ.ЗаписатьСтроку(Стр); 
		ЗТ.Закрыть();
		
		ЗапуститьПриложение(ИмяВременногоBat, , Истина);
		
	Иначе 
		
		СтрокаЗапуска = "kill -9 `ps aux | grep -ie TESTCLIENT | grep -ie 1cv8c | awk '{print $2}'`";
		ЗапуститьПриложение(СтрокаЗапуска);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивPIDОкон1С() Экспорт
	Рез = Новый Массив;
	
	ЗаполнитьМассивPIDПоИмениПроцесса("1cv8.exe", Рез);
	ЗаполнитьМассивPIDПоИмениПроцесса("1cv8c.exe", Рез);
	
	Возврат Рез;
	
КонецФункции	

&НаКлиенте
Процедура СделатьОкноПроцессаАктивным(PID) Экспорт
	Если WshShell = Неопределено Тогда
		WshShell = ПолучитьWshShell();
	КонецЕсли;	 
	
	Попытка
		WshShell.AppActivate(PID);
	Исключение
		СделатьСообщение(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура TASKKILL(ИмяПриложения) Экспорт
	СтрокаКоманды = "TASKKILL /F /IM " + ИмяПриложения;
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(СтрокаКоманды);	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьШагВМассивТестов(МассивТестов, Снипет, ИмяПроцедуры, ПредставлениеТеста = Неопределено, ОписаниеШага = Неопределено, ТипШагаДляОписания = Неопределено, ТипШагаВДереве = Неопределено) Экспорт
	Структура = Новый Структура;
	
	Структура.Вставить("Снипет", Снипет);
	Структура.Вставить("ИмяПроцедуры", ИмяПроцедуры);
	Структура.Вставить("ПредставлениеТеста", ПредставлениеТеста);
	Структура.Вставить("ОписаниеШага", ОписаниеШага);
	Структура.Вставить("ТипШага", ТипШагаДляОписания);
	Структура.Вставить("ТипШагаВДереве", ТипШагаВДереве);
	Структура.Вставить("Транзакция", Неопределено);
	МассивТестов.Добавить(Структура);
КонецФункции

&НаКлиенте
Функция ВывестиНаЭкранЗначениеСтруктуры(Значение) Экспорт
	Стр = "";
	Стр = Стр + "Количество значений = " + Значение.Количество() + Символы.ПС;
	Для Каждого Элем Из Значение Цикл
		Стр = Стр + "Ключ=" + Элем.Ключ + ", Значение=" + Элем.Значение + Символы.ПС;
	КонецЦикла;	
	
	Предупреждение(Стр, 5);
КонецФункции	

&НаКлиенте
Процедура СохранитьКлиентовТестирования() Экспорт
	Если НЕ ЗначениеЗаполнено(ПрефиксИнструментаДляСохраненияНастроек) Тогда
		СохранитьНастройкиВХранилище("ДанныеКлиентовТестирования", ДанныеКлиентовТестирования,ПараметрыДляСохраненияНастроекСервер());
	Иначе
		СохранитьНастройкиВХранилище("ДанныеКлиентовТестирования", ДанныеКлиентовТестирования,ПараметрыДляСохраненияНастроек());
	КонецЕсли;
КонецПроцедуры

//устанавливает флаг, что надо сохранить клиентов тестирования после открытия формы
&НаКлиенте
Процедура СохранитьКлиентовТестированияПослеОткрытияФормы() Экспорт
	СохранитьКлиентовТестированияПослеОткрытияФормы = Истина;
КонецПроцедуры 

//Преобразует строки вида "больше или равно" в ">="
//Это нужно для работы "Вычислить"
&НаКлиенте
Функция ПолучитьОператорПоТексту(Знач Стр) Экспорт
	Стр = СокрЛП(НРег(Стр));
	
	Если Стр = "больше" Тогда
		Стр = ">";
	ИначеЕсли Стр = "меньше" Тогда
		Стр = "<";
	ИначеЕсли Стр = "больше или равно" Тогда
		Стр = ">=";
	ИначеЕсли Стр = "меньше или равно" Тогда
		Стр = "<=";
	ИначеЕсли Стр = "равно" Тогда
		Стр = "=";
	ИначеЕсли Стр = "неравно" Тогда
		Стр = "<>";
	ИначеЕсли Стр = "не равно" Тогда
		Стр = "<>";
	КонецЕсли;	
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Процедура ВычислитьPIDЭтогоСеансаСлужебный() Экспорт
	Попытка
		PIDЭтогоСеанса = "";
		
        oLocator = Новый COMObject("WbemScripting.SWbemLocator");
        oService = oLocator.ConnectServer(".", "root\CIMV2");
 
        oShell = Новый COMObject("WScript.Shell");
        oApp = oShell.Exec("rundll32.exe kernel32,Sleep");
        
        oChildProcess = oService.Get("Win32_Process.Handle=" + XMlСтрока(oApp.ProcessID));
        
        PIDЭтогоСеанса = XMlСтрока(oChildProcess.ParentProcessID);
		
        oChildProcess.Terminate();
    Исключение
	   СделатьСообщение(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивФичаФайловИзКаталогаСогласноНастроек(КаталогСФичами) Экспорт
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;
	НайтиФайлыКомандаСистемы(КаталогСФичами,СписокКаталогов,СписокФайлов,Истина);
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Каталог,Фича,Уровень,Имя,ПолныйПуть,ДвоичныеДанные",Истина,Ложь,1,
			КаталогСФичами,КаталогСФичами,Неопределено));
			
	Для Каждого ЭлементСпискаФайлов Из СписокФайлов Цикл
		Если НРег(Прав(ЭлементСпискаФайлов.Значение.ПолноеИмя,8)) <> ".feature" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Массив.Добавить(Новый Структура("Каталог,Фича,Уровень,Имя,ПолныйПуть,ДвоичныеДанные",Ложь,Истина,2,
				ЭлементСпискаФайлов.Значение.Имя,ЭлементСпискаФайлов.Значение.ПолноеИмя,Новый ДвоичныеДанные(ЭлементСпискаФайлов.Значение.ПолноеИмя)));
	КонецЦикла;	
	МассивРезультатОбходаКаталогов = Массив;
	
	
	ДвДанныеvbFeatureReader = Неопределено;
	Если Объект.ВерсияПоставки = "standart" Тогда
		ДвДанныеvbFeatureReader = Новый ДвоичныеДанные(ПолучитьПутьКFeatureReader());
	КонецЕсли;	 
	
	МассивФичДляПослеНаложенияФильтров = Новый Массив;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("DebugLog",Ложь);
	СтруктураПараметров.Вставить("Брейкпоинты",Новый Массив);
	СтруктураПараметров.Вставить("ДополнительныеПараметры",Неопределено);
	СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога",Истина);
	СтруктураПараметров.Вставить("КаталогИнструментов",Объект.КаталогИнструментов);
	СтруктураПараметров.Вставить("КаталогФич",Объект.КаталогФич);
	СтруктураПараметров.Вставить("КаталогиБиблиотек",Объект.КаталогиБиблиотек);
	СтруктураПараметров.Вставить("МассивРезультатОбходаКаталогов",Новый Массив);
	СтруктураПараметров.Вставить("МассивСообщений",Новый Массив);
	СтруктураПараметров.Вставить("ПутьКОбработке",Неопределено);
	СтруктураПараметров.Вставить("СписокТеговИсключение",Объект.СписокТеговИсключение);
	СтруктураПараметров.Вставить("СписокТеговОтбор",Объект.СписокТеговОтбор);
	СтруктураПараметров.Вставить("ТаблицаУжеСуществующихСценариевУФ",Новый Массив);
	СтруктураПараметров.Вставить("ТолькоДляПолученияСпискаФич",Истина);
	СтруктураПараметров.Вставить("МассивФичДляПослеНаложенияФильтров",МассивФичДляПослеНаложенияФильтров);
	СтруктураПараметров.Вставить("ЭтоLinux",ЭтоLinux);
	
	СтруктураПараметров.Вставить("РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов", Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов);
	СтруктураПараметров.Вставить("МассивИменКонтекстовОбработок", МассивИменКонтекстовОбработок);
	Если Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов Тогда
		СтруктураПараметров.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийССохранениемКонтекстов", СтрокаШагаСКоторогоНадоВыполнятьСценарий.ИдСтроки);
	КонецЕсли;	 
	
	
	ЗаполнитьДеревоЗначенийПоМассивуСервер(МассивРезультатОбходаКаталогов, ДвДанныеvbFeatureReader, СтруктураПараметров);
	
	Возврат СтруктураПараметров.МассивФичДляПослеНаложенияФильтров;
КонецФункции	

&НаКлиенте
Функция ЗаменитьСлужебныеСимволыВВыраженииДляВычисления(Знач Текст,ВставлятьЗначение = Ложь) Экспорт
	Если Найти(Текст,"$") = 0 Тогда
		Возврат Текст; 
	КонецЕсли;	 
	
	//проверим строку на корректость
	ЭтоВыражениеКонтекст                = Ложь;
	ЭтоВыражениеКонтекстСохраняемый     = Ложь;
	ЗакрытоВыражениеКонтекст            = Ложь;
	ЗакрытоВыражениеКонтекстСохраняемый = Ложь;
	
	НовыйТекст = "";
	ПредыдущийСимвол = Неопределено;
	ДлинаСтроки = СтрДлина(Текст);
	Для Ккк = 1 По СтрДлина(Текст) Цикл
		Символ = Сред(Текст,Ккк,1);
		
		Если ПредыдущийСимвол = "$" и Символ = "$" и НЕ ЗакрытоВыражениеКонтекст Тогда
			ЭтоВыражениеКонтекстСохраняемый = НЕ ЭтоВыражениеКонтекстСохраняемый;
			Если ЗакрытоВыражениеКонтекстСохраняемый Тогда
				НовыйТекст = НовыйТекст + "~СпецРазделитель~";
			КонецЕсли;	 
			
			НовыйТекст = НовыйТекст + "~Экранирование$$~";
			ПредыдущийСимвол = Символ;
			
			ЗакрытоВыражениеКонтекстСохраняемый = НЕ ЭтоВыражениеКонтекстСохраняемый;
			Продолжить;
			
		ИначеЕсли Символ = "$" Тогда
			Если Ккк < ДлинаСтроки Тогда
				СледующийСимвол = Сред(Текст,Ккк+1,1);
				Если СледующийСимвол = "$" Тогда
					Если Не ЭтоВыражениеКонтекст Тогда
						//значит это глобальная переменная
						
						ПредыдущийСимвол = Символ;
						Продолжить;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
			
			ЭтоВыражениеКонтекст = НЕ ЭтоВыражениеКонтекст;
			Если ЗакрытоВыражениеКонтекст Тогда
				НовыйТекст = НовыйТекст + "~СпецРазделитель~";
			КонецЕсли;	 
			
			НовыйТекст = НовыйТекст + "~Экранирование$~";
			ПредыдущийСимвол = Символ;
			
			ЗакрытоВыражениеКонтекст = НЕ ЭтоВыражениеКонтекст;
			Продолжить;
		Иначе
			НовыйТекст = НовыйТекст + Символ;
		КонецЕсли;	 
		
		ПредыдущийСимвол = Символ;
		ЗакрытоВыражениеКонтекст = Ложь;
	КонецЦикла;	
	
	Текст = НовыйТекст;
	
	
	//Текст = СтрЗаменить(Текст,"$$","~Экранирование$$~");
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Текст,"~Экранирование$$~");
	ЭтоВыражение = Ложь;
	
	Если Лев(Текст,СтрДлина("~Экранирование$$~")) = "~Экранирование$$~" Тогда
		ЭтоВыражение = Истина;
	КонецЕсли;	 
	
	Результат = "";
	Для Каждого Стр Из МассивСтрок Цикл
		Если Стр = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если ЭтоВыражение Тогда
			Если ВставлятьЗначение Тогда
				Результат = Результат + ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого(Стр);
			Иначе	
				Результат = Результат + "ОбъектКонтекстСохраняемый." + Стр;
			КонецЕсли;	 
		Иначе	
			Результат = Результат + Стр;
		КонецЕсли;	 
		
		ЭтоВыражение = Не ЭтоВыражение;
	КонецЦикла;	
	
	
	
	Текст = Результат;
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Текст,"~Экранирование$~");
	ЭтоВыражение = Ложь;
	
	Если Лев(Текст,СтрДлина("~Экранирование$~")) = "~Экранирование$~" Тогда
		ЭтоВыражение = Истина;
	КонецЕсли;	 
	
	Результат = "";
	Для Каждого Стр Из МассивСтрок Цикл
		Если Стр = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если ЭтоВыражение Тогда
			Если ВставлятьЗначение Тогда
				Результат = Результат + ПолучитьСохраненноеЗначениеИзКонтекста(Стр);
			Иначе	
				Результат = Результат + "ОбъектКонтекст." + Стр;
			КонецЕсли;	 
		Иначе	
			Если Стр <> "~СпецРазделитель~" Тогда
				Результат = Результат + Стр;
			КонецЕсли;	 
		КонецЕсли;	 
		
		ЭтоВыражение = Не ЭтоВыражение;
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ВычислитьВнутреннееВыражение(Знач Выражение) Экспорт
	Выражение           = ЗаменитьСлужебныеСимволыВВыраженииДляВычисления(Выражение);
	Контекст            = ОбъектКонтекст;
	КонтекстСохраняемый = ОбъектКонтекстСохраняемый;
	Ванесса             = ЭтаФорма;
	
	Попытка
		ЗначениеВыражения = Вычислить(Выражение);
	Исключение
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог вычислить выражение: %1");
		ТекстСообщения = ТекстСообщения + Символы.ПС;
		ТекстСообщения = ТекстСообщения + ОписаниеОшибки();
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Выражение);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Возврат ЗначениеВыражения; 
КонецФункции	 

&НаКлиенте
Функция ПолучитьСтрокуВычисливВнутренниеВыражения(Знач Текст) Экспорт
	Результат = "";	
	
	Текст = СтрЗаменить(Текст,"Ванесса.","ЭтаФорма.");
	Текст = СтрЗаменить(Текст,"Контекст.","ОбъектКонтекст.");
	Текст = СтрЗаменить(Текст,"КонтекстСохраняемый.","ОбъектКонтекстСохраняемый.");
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Текст,"$");
	ЭтоВыражение = Ложь;
	Если Лев(Текст,1) = "$" Тогда
		ЭтоВыражение = Истина;
	КонецЕсли;	 
	
	Результат = "";
	Для Каждого Стр Из МассивСтрок Цикл
		Если ЭтоВыражение Тогда
			Результат = Результат + Вычислить(Стр);
		Иначе	
			Результат = Результат + Стр;
		КонецЕсли;	 
		
		ЭтоВыражение = Не ЭтоВыражение;
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции	

&НаКлиенте
Функция ПолучитьЗначениеДополнительногоПараметра(ИмяПараметра) Экспорт
	Значение = Неопределено;
	Объект.ДополнительныеПараметры.Свойство(ИмяПараметра,Значение);
	
	Возврат Значение;
КонецФункции	

&НаКлиенте
Функция УстановитьЗначениеДополнительногоПараметра(ИмяПараметра,Значение) Экспорт
	Объект.ДополнительныеПараметры.Вставить(ИмяПараметра,Значение);
КонецФункции	

&НаКлиенте
Процедура ПоказатьСтрокуСтатуса(Стр) Экспорт
	Если НЕ Элементы.СтрокаСтатуса.Видимость Тогда
		Элементы.СтрокаСтатуса.Видимость = Истина;
	КонецЕсли;	 
	
	СтрокаСтатуса = Стр;
КонецПроцедуры

//позволяет сделать поиск в строке "ПроверяемаяСтрока" подстроки "Шаблон"
//при этом подстрока "Шаблон" может содержать символы *
//например СтрокаСоответствуетШаблону("Привет","*вет")
&НаКлиенте
Функция СтрокаСоответствуетШаблону(Знач ПроверяемаяСтрока, Знач Шаблон) Экспорт
	Шаблон = ПодготовитьШаблонКИспользованиюВРегулярке(Шаблон);
	
	Если ЭтоLinux Тогда
		Возврат ПроверитьСтрокуRexExpLinux(ПроверяемаяСтрока,Шаблон);
	Иначе	
		Если Регулярка = Неопределено Тогда
			Регулярка = Новый COMОбъект("VBScript.RegExp");
		КонецЕсли;
		
		Регулярка.Global = Истина;
		Регулярка.Multiline = Истина;
		//для VBScript.RegExp явно указываем что есть начало и конец строки
		Шаблон            = "^" + Шаблон + "$";
		Регулярка.Pattern = Шаблон;
		Возврат Регулярка.Test(ПроверяемаяСтрока);
	КонецЕсли;	 
КонецФункции 

//Делает склейку параметров в одну строку, если они переданы.
&НаКлиенте
Процедура СоеденитьСтрокиЕслиЭтоВозможно(Знач Стр,Стр2,Стр3,Стр4,Стр5,Стр6,Стр7) Экспорт
	Если ТипЗнч(Стр) = Тип("Массив") Тогда
		Массив = Стр;
		Стр = "";
		НомерСтроки = 0;
		Для Каждого Элем Из Массив Цикл
			НомерСтроки = НомерСтроки + 1;
			Стр = Стр + Элем.Кол1;
			Если НомерСтроки < Массив.Количество() Тогда
				Стр = Стр + Символы.ПС;
			КонецЕсли;	 
		КонецЦикла;	 
	КонецЕсли;	 
	
	Если Стр2 <> Неопределено Тогда
		Стр = Стр + Стр2;
	КонецЕсли;	 
	Если Стр3 <> Неопределено Тогда
		Стр = Стр + Стр3;
	КонецЕсли;	 
	Если Стр4 <> Неопределено Тогда
		Стр = Стр + Стр4;
	КонецЕсли;	 
	Если Стр5 <> Неопределено Тогда
		Стр = Стр + Стр5;
	КонецЕсли;	 
	Если Стр6 <> Неопределено Тогда
		Стр = Стр + Стр6;
	КонецЕсли;	 
	Если Стр7 <> Неопределено Тогда
		Стр = Стр + Стр7;
	КонецЕсли;	 
КонецПроцедуры

//позволяет указать значения таблиц или макетов, которые потом можно будет сравнить между собой
//также эти значения потом будут прикреплены к отчету Allure
//Если Тип = Неопределено, тогда считается, что переданы таблицы
&НаКлиенте
Процедура УстановитьЗначенияТаблицДляСравнения(Эталон,ТекущееЗначение,Тип = Неопределено) Экспорт
	Если Тип = Неопределено Тогда
		ГлобальныеЗначенияТаблиц.Вставить("ТаблицаЭталон",Эталон);
		ГлобальныеЗначенияТаблиц.Вставить("ТаблицаТекущееЗначение",ТекущееЗначение);
	Иначе
		ЗначениеЭталон = Новый Структура;
		ЗначениеЭталон.Вставить("Тип",Тип);
		ЗначениеЭталон.Вставить("Значение",Эталон);
		ГлобальныеЗначенияТаблиц.Вставить("ТаблицаЭталон",ЗначениеЭталон);
		
		ЗначениеТекущееЗначение = Новый Структура;
		ЗначениеТекущееЗначение.Вставить("Тип",Тип);
		ЗначениеТекущееЗначение.Вставить("Значение",ТекущееЗначение);
		ГлобальныеЗначенияТаблиц.Вставить("ТаблицаТекущееЗначение",ЗначениеТекущееЗначение);
	КонецЕсли;	 
КонецПроцедуры

//преобразует табличный документ в массив структур
//в первой строке макета должна быть строка с именами колонок
&НаКлиенте
Функция ПреобразоватьТабличныйДокументВМассивСтруктур(ТабДок) Экспорт
	Массив = Новый Массив;
	
	Если Ложь Тогда
		ТабДок = Новый ТабличныйДокумент;
	КонецЕсли;	 
	
	Если ТабДок.ВысотаТаблицы = 0 Тогда
		Возврат Массив;
	КонецЕсли;	 
	
	СтрокаТаблицы = Новый Структура;
	Для Ррр = 1 По ТабДок.ШиринаТаблицы Цикл
		СтрокаТаблицы.Вставить("Кол" + XMlСтрока(Ррр),ТабДок.Область(1,Ррр,1,Ррр).Текст);
	КонецЦикла;	
	Массив.Добавить(СтрокаТаблицы);
	
	Для Ккк = 2 По ТабДок.ВысотаТаблицы Цикл
		СтрокаТаблицы = Новый Структура;
		Для Ррр = 1 По ТабДок.ШиринаТаблицы Цикл
			СтрокаТаблицы.Вставить("Кол" + XMlСтрока(Ррр),ТабДок.Область(Ккк,Ррр,Ккк,Ррр).Текст);
		КонецЦикла;	
		Массив.Добавить(СтрокаТаблицы);
	КонецЦикла;	
	
	Возврат Массив;
КонецФункции	 

//прикрепляет к строке сценария макет
&НаКлиенте
Процедура ПрикрепитьМакетКСценарию(Макет,Имя) Экспорт
	Если ТекИД_СценарияВМассиве > МассивСценариевДляВыполнения.Количество()-1 Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Не смог получить строку сценария.");
	КонецЕсли;	 
	
	ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(Неопределено,ИДСтрокиСценария,Истина);
	СтрокаСценария   = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	
	Если СтрокаСценария = Неопределено Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Не смог получить строку сценария.");
	КонецЕсли;	 
	
	Если СтрокаСценария.ПроизвольныеЗначения = Неопределено Тогда
		СтрокаСценария.ПроизвольныеЗначения = Новый Структура;
	КонецЕсли;	 
	
	ПроизвольныеЗначения = СтрокаСценария.ПроизвольныеЗначения;
	Если Не ПроизвольныеЗначения.Свойство("ПрикрепленныеМакеты") Тогда
		ПроизвольныеЗначения.Вставить("ПрикрепленныеМакеты",Новый Массив);
	КонецЕсли;	 
	
	ПрикрепленныеМакеты = ПроизвольныеЗначения.ПрикрепленныеМакеты;
	ПрикрепленныеМакеты.Добавить(Новый Структура("Макет,Имя",Макет,Имя));
КонецПроцедуры 

//прикрепляет произвольный файл к строке сценария
//Параметры
//
//ДвоичныеДанныеФайла - двоичные данные файла, который нужно прикрепить
//ИмяФайла - имя файла с расширением
//УникальностьИмени - флаг того, что надо добавлять уникальную строку к имени файла
&НаКлиенте
Процедура ПрикрепитьФайлКСценарию(ДвоичныеДанныеФайла,ИмяФайла,УникальностьИмени = Истина) Экспорт
	Если ТекИД_СценарияВМассиве > МассивСценариевДляВыполнения.Количество()-1 Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Не смог получить строку сценария.");
	КонецЕсли;	 
	
	ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(Неопределено,ИДСтрокиСценария,Истина);
	СтрокаСценария   = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	
	Если СтрокаСценария = Неопределено Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Не смог получить строку сценария.");
	КонецЕсли;	 
	
	Если СтрокаСценария.ПроизвольныеЗначения = Неопределено Тогда
		СтрокаСценария.ПроизвольныеЗначения = Новый Структура;
	КонецЕсли;	 
	
	ПроизвольныеЗначения = СтрокаСценария.ПроизвольныеЗначения;
	Если Не ПроизвольныеЗначения.Свойство("ПрикрепленныеФайлы") Тогда
		ПроизвольныеЗначения.Вставить("ПрикрепленныеФайлы",Новый Массив);
	КонецЕсли;	 
	
	ПрикрепленныеФайлы = ПроизвольныеЗначения.ПрикрепленныеФайлы;
	ПрикрепленныеФайлы.Добавить(Новый Структура("ДвоичныеДанныеФайла,ИмяФайла,УникальностьИмени",ДвоичныеДанныеФайла,ИмяФайла,УникальностьИмени));
КонецПроцедуры 

//сравнивает строки без учета регистра, и некоторых спецсимволов
&НаКлиенте
Функция СтрокиРавны(Знач Стр1,Знач Стр2) Экспорт
	Стр1 = СтрЗаменить(Стр1,Символы.НПП," ");
	Стр2 = СтрЗаменить(Стр2,Символы.НПП," ");
	Возврат (НРег(Стр1) = НРег(Стр2)); 
КонецФункции	 

//проверяет что строка соответствует панели разделов
&НаКлиенте
Функция ЭтоПанельРазделов(Стр) Экспорт
	Если НРег(Стр) = НРег("Панель разделов") Тогда
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег("Section panel") Тогда //en
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег("Panoul compartimentelor") Тогда //ro
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

//проверяет что строка соответствует панели открытых
&НаКлиенте
Функция ЭтоПанельОткрытых(Стр) Экспорт
	Если НРег(Стр) = НРег("Панель открытых") Тогда
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег("Open items panel") Тогда //en
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег("Opened items panel") Тогда //en
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег("Panoul celor deschise") Тогда //ro
		Возврат Истина;
	КонецЕсли;	 
	                         
	Возврат Ложь;
КонецФункции	 

//проверяет что строка соответствует меню функций
&НаКлиенте
Функция ЭтоМенюФункций(Стр) Экспорт
	Если НРег(Стр) = НРег("Меню функций") Тогда
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег("Панель функций текущего раздела") Тогда
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег("Functions menu") Тогда //en
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег("Function menu") Тогда //en
		Возврат Истина;
	ИначеЕсли НРег(Стр) = НРег("Panoul funcțiilor secțiunii curente") Тогда //ro
		Возврат Истина;
	КонецЕсли;	      
	
	Возврат Ложь;
КонецФункции	 

//возвращает признак того, что надо шаги выполнять в безопасно
&НаКлиенте
Функция БезопасноеВыполнениеШагов() Экспорт
	Возврат Объект.БезопасноеВыполнениеШагов; 
КонецФункции	 

//возврашет значение переменной ИмяУправляющиегоФайлаSikuliXСервер
&НаКлиенте
Функция ИмяУправляющиегоФайлаSikuliXСервер() Экспорт
	Возврат ИмяУправляющиегоФайлаSikuliXСервер; 
КонецФункции	 

//возврашет значение переменной ИмяФайлаВыводаКонсолиSikuliXСервер
&НаКлиенте
Функция ИмяФайлаВыводаКонсолиSikuliXСервер() Экспорт
	Возврат ИмяФайлаВыводаКонсолиSikuliXСервер; 
КонецФункции	 

#КонецОбласти

#Область РаботаСПеременнымиКонтекста

&НаКлиенте
Процедура СохранитьЗначениеВКонтекст(ИмяПеременной,Значение) Экспорт
	Если НЕ ОбъектКонтекст.Свойство("СохраняемыеЗначения") Тогда
		ОбъектКонтекст.Вставить("СохраняемыеЗначения",Новый Соответствие);
	КонецЕсли;	 
	
	ОбъектКонтекст.СохраняемыеЗначения.Вставить(ИмяПеременной,Значение);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЗначениеВКонтекстСохраняемый(Знач ИмяПеременной,Значение) Экспорт
	Если НЕ ОбъектКонтекстСохраняемый.Свойство("СохраняемыеЗначения") Тогда
		ОбъектКонтекстСохраняемый.Вставить("СохраняемыеЗначения",Новый Соответствие);
	КонецЕсли;	 
	
	//уберём служебные символы
	Если Лев(ИмяПеременной,2) = "$$" и Прав(ИмяПеременной,2) = "$$" Тогда
		ИмяПеременной = Сред(ИмяПеременной,3,СтрДлина(ИмяПеременной)-4);
	КонецЕсли;	 
	
	Если Лев(ИмяПеременной,1) = "$" и Прав(ИмяПеременной,1) = "$" Тогда
		ИмяПеременной = Сред(ИмяПеременной,2,СтрДлина(ИмяПеременной)-2);
	КонецЕсли;	 
	
	ОбъектКонтекстСохраняемый.СохраняемыеЗначения.Вставить(ИмяПеременной,Значение);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСохраненноеЗначениеИзКонтекста(ИмяПеременной) Экспорт
	Попытка
		Если ОбъектКонтекст.Свойство(ИмяПеременной) Тогда
			Возврат ОбъектКонтекст[ИмяПеременной];
		КонецЕсли;	 
	Исключение
	КонецПопытки;
	
	Если НЕ ОбъектКонтекст.Свойство("СохраняемыеЗначения") Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат ОбъектКонтекст.СохраняемыеЗначения[ИмяПеременной];
КонецФункции

&НаКлиенте
Функция ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого(ИмяПеременной) Экспорт
	Попытка
		Если ОбъектКонтекстСохраняемый.Свойство(ИмяПеременной) Тогда
			Возврат ОбъектКонтекстСохраняемый[ИмяПеременной];
		КонецЕсли;	 
	Исключение
	КонецПопытки;
	
	Если НЕ ОбъектКонтекстСохраняемый.Свойство("СохраняемыеЗначения") Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат ОбъектКонтекстСохраняемый.СохраняемыеЗначения[ИмяПеременной];
КонецФункции

//заменяет в ячейках макета значения вида $Переменная$ на значение из Контекста
&НаКлиенте
Процедура ВычислитьВМакетеЗначенияКонтекста(ТабДок) Экспорт
	Если Ложь Тогда
		ТабДок = Новый ТабличныйДокумент;
	КонецЕсли;
	
	Если ТабДок.НайтиТекст("$") = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Для НомерСтроки = 1 По ТабДок.ВысотаТаблицы Цикл
		Для НомерКолонки = 1 По ТабДок.ШиринаТаблицы Цикл
			ТекстЯчейки = ТабДок.Область(НомерСтроки,НомерКолонки,НомерСтроки,НомерКолонки).Текст;
			ТабДок.Область(НомерСтроки,НомерКолонки,НомерСтроки,НомерКолонки).Текст = ЗаменитьСлужебныеСимволыВВыраженииДляВычисления(ТекстЯчейки,Истина);
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры 

#КонецОбласти

#Область РаботаСФайлами

&НаКлиенте
Процедура УдалитьФайлыКомандаСистемы(Знач ИмяФайла) Экспорт
	Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
		УдалитьФайлы(ИмяФайла);
	ИначеЕсли ЕстьПоддержкаАсинхронныхВызовов и ВозможнаОптимизацияРаботыСФайлами Тогда
		УдалитьФайлыСервер(ИмяФайла);
	Иначе
		Если ЭтоLinux Тогда 
			ИмяФайла = СтрЗаменить(ИмяФайла, "\", "/");
			КомандаСистемы("rm -Rf """ + ИмяФайла + """");
		Иначе 
			ИмяФайла = СтрЗаменить(ИмяФайла, "/", "\");
			ВыполнитьКомандуОСБезПоказаЧерногоОкна("DEL /Q """ + ИмяФайла + """");
		КонецЕсли;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКаталогКомандаСистемы(Знач ИмяФайла) Экспорт
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Если ЭтоLinux Тогда 
			ИмяФайла = СтрЗаменить(ИмяФайла, "\", "/");
			КомандаСистемы("rm -Rf """ + ИмяФайла + """");
		Иначе 
			
			ИмяФайла = СтрЗаменить(ИмяФайла, "/", "\");
			ВыполнитьКомандуОСБезПоказаЧерногоОкна("RD /S /Q """ + ИмяФайла + """");
		КонецЕсли;

	Иначе
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьФайлКомандаСистемы(Знач Откуда, Знач Куда) Экспорт
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		//КомандаСистемы("MOVE """ + Откуда + """ """ + Куда + """");
		Если ЭтоLinux Тогда 
			Откуда = СтрЗаменить(Откуда, "\", "/");
			Куда   = СтрЗаменить(Куда, "\", "/");
			КомандаСистемы("mv """ + Откуда + """ """ + Куда + """");
		Иначе 
			
			Откуда = СтрЗаменить(Откуда, "/", "\");
			Куда   = СтрЗаменить(Куда, "/", "\");
			ВыполнитьКомандуОСБезПоказаЧерногоОкна("MOVE """ + Откуда + """ """ + Куда + """");
		КонецЕсли;
	Иначе
		ПереместитьФайл(Откуда, Куда);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Функция ВремяИзмененияФайлаКомандаСистемы(ИмяФайла) Экспорт
	Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
		Файл = Новый Файл(ИмяФайла);
		Возврат Файл.ПолучитьВремяИзменения();
	ИначеЕсли ЕстьПоддержкаАсинхронныхВызовов И ВозможнаОптимизацияРаботыСФайлами Тогда
		Возврат ФайлВремяИзмененияСервер(ИмяФайла); 
	Иначе
		Если ЭтоLinux Тогда
			ВызватьИсключение ПолучитьТекстСообщенияПользователю("TODO: Сделать для Linux.");
		КонецЕсли;	 
		
		Файл = Новый Файл(ИмяФайла);
		Путь = Файл.Путь;
		Если Прав(Путь, 1) = "\" или Прав(Путь, 1) = "/" Тогда
			Путь = Лев(Путь, СтрДлина(Путь) - 1);
		КонецЕсли;	 
		ТолькоИмяФайла = Файл.Имя;
		
		ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
		Команда = "forfiles /p """ + Путь + """ /m """ + ТолькоИмяФайла + """ /c ""cmd /c echo @fdate @ftime"" > """ + ИмяФайлаЛога + """";
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайлаЛога, "UTF-8");
		ТекстЛога = СокрЛП(Текст.Прочитать());
		Текст.Закрыть();
		
		УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
		
		ТекстЛога = СтрЗаменить(ТекстЛога, " ", ":");
		ТекстЛога = СтрЗаменить(ТекстЛога, ".", ":");
		МассивЗначений = РазложитьСтрокуВМассивПодстрок(ТекстЛога, ":");
		
		День    = Число(МассивЗначений[0]);
		Месяц   = Число(МассивЗначений[1]);
		Год     = Число(МассивЗначений[2]);
		Часы    = Число(МассивЗначений[3]);
		Минуты  = Число(МассивЗначений[4]);
		Секунды = Число(МассивЗначений[5]);
		
		Возврат Дата(Год, Месяц, День, Часы, Минуты, Секунды);
	КонецЕсли;	 
КонецФункции

&НаКлиенте
Процедура НайтиФайлыКомандаСистемы(Путь, СписокКаталогов, СписокФайлов, ИскатьВПодкаталогах, ИскомоеИмяФайла = Неопределено) Экспорт
	Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
		Файлы = НайтиФайлы(Путь, "*", ИскатьВПодкаталогах);
		
		Для Каждого Файл Из Файлы Цикл
			Если Файл.ЭтоКаталог() Тогда
				СписокКаталогов.Добавить(Файл, Файл.ПолноеИмя);
			Иначе	
				СписокФайлов.Добавить(Файл, Файл.ПолноеИмя);
			КонецЕсли;	 
		КонецЦикла;	
	ИначеЕсли ЕстьПоддержкаАсинхронныхВызовов И ВозможнаОптимизацияРаботыСФайлами Тогда
		МассивФайлов    = Новый Массив;
		МассивКаталогов = Новый Массив;
		НайтиФайлыСервер(Путь, МассивКаталогов, МассивФайлов, ИскатьВПодкаталогах, ИскомоеИмяФайла);
		Для Каждого Элем Из МассивФайлов Цикл
			СписокФайлов.Добавить(Новый Файл(Элем),Элем);
		КонецЦикла;	 
		Для Каждого Элем Из МассивКаталогов Цикл
			СписокКаталогов.Добавить(Новый Файл(Элем),Элем);
		КонецЦикла;	 
	Иначе
		//получение каталогов
		ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");

		Если ЭтоLinux Тогда
			КомандаКаталоги = "find """ + Путь + """ "+ ?(ИскатьВПодкаталогах, "", "-maxdepth 1") + "-type d -name '*'" + " > """ + ИмяФайлаЛога + """";
			КомандаСистемы(КомандаКаталоги);	
		Иначе
			
			КомандаКаталоги = "DIR """ + Путь + """ /A:D /B " + ?(ИскатьВПодкаталогах, "/S", "") + " > """ + ИмяФайлаЛога + """";
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаКаталоги);
		КонецЕсли;	 
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайлаЛога, "UTF-8");
		
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
			
			Если НЕ ИскатьВПодкаталогах Тогда
				Стр = ДополнитьСлешВПуть(Путь) + Стр;
			КонецЕсли;	 
			СписокКаталогов.Добавить(Новый Файл(Стр), Стр);
		КонецЦикла;	
		
		Текст.Закрыть();
		
		УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
		
		//получение файлов
		ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
		
		Если ЭтоLinux Тогда
			КомандаКаталоги = "find """ + Путь + """ "+ ?(ИскатьВПодкаталогах, "", "-maxdepth 1") + "-type f -name '*'" + " > """ + ИмяФайлаЛога + """";
			КомандаСистемы(КомандаКаталоги);	
		Иначе
			КомандаФайлы = "DIR """ + Путь + """ /A:-D /B " + ?(ИскатьВПодкаталогах, "/S", "") + " > """ + ИмяФайлаЛога + """";
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаФайлы);
		КонецЕсли;
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайлаЛога, "UTF-8");
		
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
			
			Если НЕ ИскатьВПодкаталогах Тогда
				Стр = ДополнитьСлешВПуть(Путь) + Стр;
			КонецЕсли;	 
			СписокФайлов.Добавить(Новый Файл(Стр), Стр);
		КонецЦикла;	
		
		Текст.Закрыть();
		УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
	КонецЕсли;	 
	
	Если ИскомоеИмяФайла <> Неопределено Тогда
		СписокФайловНовый = Новый СписокЗначений;
		
		Для Каждого ЭлементСписка Из СписокФайлов Цикл
			Если НРег(ЭлементСписка.Значение.Имя) = НРег(ИскомоеИмяФайла) Тогда
				СписокФайловНовый.Добавить(ЭлементСписка.Значение);
			КонецЕсли;	 
		КонецЦикла;	 
		
		СписокФайлов = СписокФайловНовый;
	КонецЕсли;	 
	
КонецПроцедуры

//Делает фильтр по расширению для списка файлов
&НаКлиенте
Процедура ОставитьТолькоФайлыСРасширением(СписокФайлов,Расширение) Экспорт
	НовыйСписок = Новый СписокЗначений;
	Для Каждого Элем Из СписокФайлов Цикл
		Если НРег(Элем.Значение.Расширение) = НРег(Расширение) Тогда
			НовыйСписок.Добавить(Элем.Значение,Элем.Значение.ПолноеИмя)
		КонецЕсли;	 
	КонецЦикла;	 
	
	СписокФайлов = НовыйСписок;
КонецПроцедуры 


&НаКлиенте
Процедура КопироватьКаталогКомандаСистемы(Знач Откуда, Знач Куда)
	Куда = СтрЗаменить(Куда, "\", "/");
	Если Прав(Куда, 1) = "/" Тогда
		Куда = Лев(Куда, СтрДлина(Куда) - 1);
	КонецЕсли;	 
	
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;
	НайтиФайлыКомандаСистемы(Откуда, СписокКаталогов, СписокФайлов, Истина);
	
	
	СписокКаталогов.СортироватьПоПредставлению();
	
	Позиция = СтрДлина(Откуда) + 1 + 1;
	
	Для Каждого Каталог Из СписокКаталогов Цикл
		ВтораяЧастьПути = СтрЗаменить(Сред(Каталог.Значение.ПолноеИмя, Позиция), "\", "/");
		НовыйКаталогИмя = Куда + "/" + ВтораяЧастьПути;
		
		СоздатьКаталогКомандаСистемы(НовыйКаталогИмя);
	КонецЦикла;	
	
	Для Каждого ЭлементФайл Из СписокФайлов Цикл
		Файл            = ЭлементФайл.Значение;
		ВтораяЧастьПути = СтрЗаменить(Сред(Файл.ПолноеИмя, Позиция), "\", "/");
		НовоеИмяФайла   = Куда + "/" + ВтораяЧастьПути;
		
		КопироватьФайлКомандаСистемы(Файл.ПолноеИмя, НовоеИмяФайла);
	КонецЦикла;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьФайлКомандаСистемы(Знач Откуда, Знач Куда) Экспорт
	
    Если ЕстьПоддержкаАсинхронныхВызовов Тогда
        Команда = "";
        Если ЭтоLinux Тогда 
            Откуда = СтрЗаменить(Откуда, "\", "/");
            Куда   = СтрЗаменить(Куда, "\", "/");
            Команда = "cp -r """ + Откуда + """ """ + Куда + """";
        Иначе 
            Откуда = СтрЗаменить(Откуда, "/", "\");
            Куда   = СтрЗаменить(Куда, "/", "\");
            Команда = "COPY """ + Откуда + """ """ + Куда + """";
        КонецЕсли;    

		Попытка
            Если ЭтоLinux Тогда 
                КомандаСистемы(Команда);
            Иначе 
                ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
            КонецЕсли;    
        Исключение
            ТекстСообщения = ПолучитьТекстСообщенияПользователю("КопироватьФайлКомандаСистемы:%1 команда:%2");
            ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеОшибки());
            ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Команда);
            Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
        КонецПопытки;
	Иначе
		КопироватьФайл(Откуда, Куда);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталогКомандаСистемы(Знач ИмяФайла, ДополнительныеПараметрыАсинхронности = Неопределено) Экспорт
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ИмяФайла = СтрЗаменить(ИмяФайла, "/", "\");
		Если НЕ ЭтоLinux Тогда 
			ВыполнитьКомандуОСБезПоказаЧерногоОкна("MKDIR """ + ИмяФайла + """");
		Иначе 
			ИмяФайла = СтрЗаменить(ИмяФайла, "\", "/");
			КомандаСистемы("mkdir -p """ + ИмяФайла + """");
		КонецЕсли;
	Иначе
		Попытка
			СоздатьКаталог(ИмяФайла);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			ВызватьИсключение ТекстОшибки + Символы.ПС + ИмяФайла;
		КонецПопытки;
		
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Функция ФайлСуществуетКомандаСистемы(Знач ИмяФайла, ДопПараметры = Неопределено) Экспорт
	Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
		ФайлПроверкаСуществования = Новый Файл(ИмяФайла);
		Возврат ФайлПроверкаСуществования.Существует();
	ИначеЕсли ЕстьПоддержкаАсинхронныхВызовов и ВозможнаОптимизацияРаботыСФайлами Тогда
		Возврат ФайлСуществуетСервер(ИмяФайла);
	Иначе
		ИмяВременногоЛог = ПолучитьИмяВременногоФайла("log");
		
		Если НЕ ЭтоLinux Тогда
			ИмяФайла = СтрЗаменить(ИмяФайла, "/", "\");
			ВыполнитьКомандуОСБезПоказаЧерногоОкна("(If Exist """ + ИмяФайла + """ (Echo yes) Else (Echo no)) > """ + ИмяВременногоЛог + """");
		Иначе 
			ИмяВременнгоФайла = ПолучитьИмяВременногоФайла("sh");
			ЗТ = Новый ЗаписьТекста(ИмяВременнгоФайла, "UTF-8", Символы.ПС, Истина, Символы.ПС); 
			
			ЗТ.ЗаписатьСтроку("#!/bin/sh");

			Если Найти(ИмяФайла, " ") > 0 Тогда
				ИмяФайла = СтрЗаменить(ИмяФайла, " ", "\ ");
			КонецЕсли;

			СтрокаКоманды = "sh -c 'test -f " + ИмяФайла + " && echo yes || echo no' > " + ИмяВременногоЛог + "";
			ЗТ.ЗаписатьСтроку(СтрокаКоманды); 
			СтрокаКоманды = "sh -c 'test -d " + ИмяФайла + " && echo yes || echo no' >> " + ИмяВременногоЛог + "";
			ЗТ.ЗаписатьСтроку(СтрокаКоманды);
			ЗТ.Закрыть();
			
			КомандаСистемы("sh " + ИмяВременнгоФайла);
		КонецЕсли;
		
		
		ФайлСуществует = Ложь;
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяВременногоЛог, "UTF-8");
		
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
			
			Если Стр = "yes" Тогда
				ФайлСуществует = Истина;
			КонецЕсли;	 
		КонецЦикла;	
		Текст.Закрыть();
		
		Возврат ФайлСуществует;
	КонецЕсли;	 
КонецФункции	

&НаКлиенте
Процедура ОчиститьСодержимоеКаталога(Знач ИмяКаталога, ТипФайлов = "*.*") Экспорт
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяКаталога, "ОчиститьСодержимоеКаталога") Тогда
		Возврат;
	КонецЕсли;	 
	
	Если СтрДлина(ИмяКаталога) <= 3 Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Найти(Прав(ИмяКаталога, 1), "\/") > 0 Тогда
		ИмяКаталога = Лев(ИмяКаталога, СтрДлина(ИмяКаталога) - 1);
	КонецЕсли;	 
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		УдалитьКаталогКомандаСистемы(ИмяКаталога);
		СоздатьКаталогКомандаСистемы(ИмяКаталога);
	Иначе	
		МассивФайлов = НайтиФайлы(ИмяКаталога, ТипФайлов, Ложь);
		Для каждого Файл Из МассивФайлов Цикл
			Попытка
				УдалитьФайлыКомандаСистемы(Файл.ПолноеИмя);
			Исключение
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог удалить файл %1");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Файл.ПолноеИмя);
				СделатьСообщение(ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;	 
	
КонецПроцедуры

//возвращает файл с картинкой
//ИмяФайла  - строка - путь к файлу
&НаКлиенте
Функция ПолучитьФайлКартинки(ИмяФайла) Экспорт
	Путь = Объект.КаталогПроекта;
	Если НЕ ЗначениеЗаполнено(Путь) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не указано значение настройки Vanessa-automation: <КаталогПроекта>.");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;
	НайтиФайлыКомандаСистемы(Путь, СписокКаталогов, СписокФайлов, Истина,ИмяФайла + ".png");
	Если СписокФайлов.Количество() = 0 Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("В каталоге <%1> не найден файл <%2>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Путь);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяФайла);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если СписокФайлов.Количество() > 1 Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("В каталоге <%1> найдено больше одного файла <%2>: %3.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Путь);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяФайла);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",СписокФайлов.Количество());
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Возврат СписокФайлов[0].Значение; 
КонецФункции	 

#КонецОбласти

#Область ЗагрузкаФич

&НаКлиенте
Процедура ЗагрузитьФичи(ДопПараметры = Неопределено) Экспорт
	ФлагСценарииЗагружены                                               = Ложь;
	Объект.ИдетВыполнениеСценариев                                      = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага                  = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением     = Ложь;
	Объект.РежимВыполненияОдногоШага                                    = Ложь;
	
	ОбновитьСтатусКнопкиВыполнитьСценарии();
	
	ДобавитьФичуВСписокНедавноЗагруженныхФич(Объект.КаталогФич);
	
	
	МассивДействий = Новый Массив;
	ДобавитьМассивСостоянийФайлов(МассивДействий);
	ДобавитьСканированиеКаталогов(МассивДействий);
	
	ПреобразоватьПутиБиблиотек();
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;	 
	
	ДопПараметры.Вставить("ТекИдМассива", 0);
	ДопПараметры.Вставить("МассивДействий", МассивДействий);
	ДопПараметры.Вставить("НадоЗагрузитьФичи", Истина);
	ДопПараметры.Вставить("НадоГенерироватьEPF", Ложь);
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ПолучитьАсинхроноСостоянияОбъектовФайловойСистемы(ДопПараметры);
	Иначе
		ПолучитьСинхроноСостоянияОбъектовФайловойСистемы(ДопПараметры);
		ЗагрузитьФичиПродолжение(ДопПараметры);
	КонецЕсли;	 
	
КонецПроцедуры

#КонецОбласти

#Область АвтоИнструкции

&НаКлиенте
Процедура ЭтотШагНеНадоМасштабироватьВВидео() Экспорт
	Если ТекИД_СценарияВМассиве >= 0 Тогда
		Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		
		Если ТекИД_ШагаВМассиве >= 0 Тогда
			ТекШаг = Шаги[ТекИД_ШагаВМассиве];
			
			ТекШаг.Вставить("МасштабироватьВВидео", Ложь);
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстИнструкции(Стр) Экспорт
	Если ТекИД_СценарияВМассиве >= 0 Тогда
		Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		
		Если ТекИД_ШагаВМассиве >= 0 Тогда
			ТекШаг = Шаги[ТекИД_ШагаВМассиве];
			
			ТекШаг.Вставить("ТекстИнструкция", Стр);
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Функция ЭтоПрерывающйВидеоШаг(ТекШаг) Экспорт
	Поз = Найти(ТекШаг.Снипет, "(");
	Стр = НРег(Лев(ТекШаг.Снипет, Поз - 1));
	
	Если МассивСнипетовПрерывающихЗаписьСценария.Найти(Стр) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	 
КонецФункции	

//рисует рамку вокруг активного элемента формы
&НаКлиенте
Процедура ПодсветитьАктивноеОкно(Длительность, ЖдатьЗавершения = Истина) Экспорт
	Если Не Объект.ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм Тогда
		Возврат;
	КонецЕсли;	 
	
	ПутьКПриложению = Объект.КаталогИнструментов + "\tools\VideoTools\FrameShow.exe";
	Если Не ФайлСуществуетКомандаСистемы(ПутьКПриложению) Тогда
		Возврат;
	КонецЕсли;	 
	
	Путь = ПутьКПриложению + " -showframeofactivecontrol timeshowframe=" + СтрЗаменить(СтрЗаменить(Формат(Длительность, "ND=10; NGS=*"), Символы.НПП, ""), "*", "");
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Если ЖдатьЗавершения Тогда
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(Путь);	
		Иначе	
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(Путь, 0);	
		КонецЕсли;	 
	Иначе
		ЗапуститьПриложение(Путь, , ЖдатьЗавершения);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПодсветитьАктивныйЭлементФормы() Экспорт
	Если Не Объект.ИдетЗаписьВидео Тогда
		Возврат;
	КонецЕсли;	 
	
	ПодсветитьАктивноеОкно(2000, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодсветитьАктивныйЭлементФормыHTML() Экспорт
	Если Не Объект.СоздаватьИнструкциюHTML и Не Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;	 
	
	ПодсветитьАктивноеОкно(20000, Ложь);
	
	Sleep(3);
КонецПроцедуры

&НаКлиенте
Процедура УбратьПодсветкуАктвиногоЭлемента() Экспорт
	TASKKILL("FrameShow.exe");
КонецПроцедуры

//перемещает курсор у активному объекту
&НаКлиенте
Процедура СделатьДействияПриЗаписиИнструкции(ПарамСтр = "")Экспорт
	СделатьДействияПриЗаписиHTML(ПарамСтр);
	СделатьДействияПриЗаписиВидео(ПарамСтр);
КонецПроцедуры

&НаКлиенте
Процедура СделатьДействияПриЗаписиВидео(ПарамСтр = "") Экспорт
	Если Объект.ИдетЗаписьВидео Тогда
		Если ПарамСтр = "толькофрейм" Тогда
			ПодсветитьАктивныйЭлементФормы();
		ИначеЕсли ПарамСтр = "толькомышь" Тогда
			ПереместитьКурсорМышиКАктивномуОбъекту();
		ИначеЕсли ПарамСтр = "толькоскриншот" Тогда
		Иначе	
			ПереместитьКурсорМышиКАктивномуОбъекту();
			ПодсветитьАктивныйЭлементФормы();
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура СделатьДействияПриЗаписиHTML(ПарамСтр = "") Экспорт
	Если Объект.СоздаватьИнструкциюHTML или Объект.СоздаватьИнструкциюMarkdown Тогда
		Попытка
			Шаги   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
			ТекШаг = Шаги[ТекИД_ШагаВМассиве];
			Если ТекШаг.ЭтоШагКонтекста Тогда
				Возврат;
			КонецЕсли;	 
		Исключение
			
		КонецПопытки;
	КонецЕсли;	 
	
	Если Объект.СоздаватьИнструкциюHTML Тогда
		Если ПарамСтр = "толькофрейм" Тогда
			ПодсветитьАктивныйЭлементФормыHTML();
		ИначеЕсли ПарамСтр = "толькомышь" Тогда
			ПереместитьКурсорМышиКАктивномуОбъектуHTML();
		ИначеЕсли ПарамСтр = "толькоскриншот" Тогда
		Иначе	
			ПереместитьКурсорМышиКАктивномуОбъектуHTML();
			ПодсветитьАктивныйЭлементФормыHTML();
		КонецЕсли;	 
		
		ДобавитьВЛогИнструкцииHTMLВыполненияШага();
		СкриншотСделанВСценарии = Истина;
		УбратьПодсветкуАктвиногоЭлемента();
	КонецЕсли;	 
	
	Если Объект.СоздаватьИнструкциюMarkdown Тогда
		Если ПарамСтр = "толькофрейм" Тогда
			ПодсветитьАктивныйЭлементФормыHTML();
		ИначеЕсли ПарамСтр = "толькомышь" Тогда
			ПереместитьКурсорМышиКАктивномуОбъектуHTML();
		ИначеЕсли ПарамСтр = "толькоскриншот" Тогда
		Иначе	
			ПереместитьКурсорМышиКАктивномуОбъектуHTML();
			ПодсветитьАктивныйЭлементФормыHTML();
		КонецЕсли;	 
		
		ДобавитьВЛогИнструкцииMarkdownВыполненияШага();
		СкриншотСделанВСценарии = Истина;
		УбратьПодсветкуАктвиногоЭлемента();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьКурсорМышиКАктивномуОкну(Скорость, ЖдатьЗавершения = Истина) Экспорт
	Если Не Объект.ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы Тогда
		Возврат;
	КонецЕсли;	 
	
	ПутьКПриложению = Объект.КаталогИнструментов + "\tools\VideoTools\MouseMove.exe";
	Если Не ФайлСуществуетКомандаСистемы(ПутьКПриложению) Тогда
		Возврат;
	КонецЕсли;	 
	
	Путь = ПутьКПриложению + " -movemousetoactivecontrol mousespeed=" + СтрЗаменить(Скорость, Символы.НПП, "");
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Если ЖдатьЗавершения Тогда
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(Путь);	
		Иначе	
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(Путь, 0);	
		КонецЕсли;	 
	Иначе
		ЗапуститьПриложение(Путь, , ЖдатьЗавершения);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьКурсорМышиКАктивномуОбъекту() Экспорт
	Если Не Объект.ИдетЗаписьВидео Тогда
		Возврат;
	КонецЕсли;	 
	
	ПереместитьКурсорМышиКАктивномуОкну(500);
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьКурсорМышиКАктивномуОбъектуHTML() Экспорт
	Если Не Объект.СоздаватьИнструкциюHTML И НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;	 
	
	ПереместитьКурсорМышиКАктивномуОкну(50);
КонецПроцедуры

#КонецОбласти

#Область Ассерты
//портирован блок генерации данных из проекта xUnitFor1C (https://github.com/xDrivenDevelopment/xUnitFor1C)
//взят релиз 3.0.0.3

&НаКлиенте
Процедура Проверить(_Истина, ДопСообщениеОшибки = "") Экспорт
	Если Не _Истина Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Переданный параметр (%1) не является Истиной, а хотели, чтобы являлся. %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Формат(_Истина, "БЛ=ложь; БИ=истина")); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ФорматДСО(ДопСообщениеОшибки)); 
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИстину(_Истина, ДопСообщениеОшибки = "") Экспорт
	Проверить(_Истина, ДопСообщениеОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЛожь(_Ложь, ДопСообщениеОшибки = "") Экспорт
	Если _Ложь Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Переданный параметр (%1) не является Ложью, а хотели, чтобы являлся. %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Формат(_Ложь, "БЛ=ложь; БИ=истина")); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ФорматДСО(ДопСообщениеОшибки)); 
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДату(_Дата, _Период, ДопСообщениеОшибки = "") Экспорт
	Если _Дата < _Период.ДатаНачала или _Дата > _Период.ДатаОкончания Тогда
		представление = ПредставлениеПериода(_Период.ДатаНачала, _Период.ДатаОкончания, "ФП = Истина");
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Переданный параметр (%1) не входит в период %2, а хотели, чтобы являлся. %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Формат(_Дата, "ДФ='dd.MM.yyyy HH:mm:ss'")); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",представление); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ФорматДСО(ДопСообщениеОшибки)); 
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры                                                           

&НаКлиенте
Процедура ПроверитьРавенствоДатСТочностью2Секунды(_Дата, _Дата2, ДопСообщениеОшибки = "") Экспорт
	Если _Дата < _Дата2-2 или _Дата > _Дата2+2 Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Переданная дата (%1) не равна дате (%2) с точностью до 2-х секунд, а хотели, чтобы они равнялись. %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Формат(_Дата, "ДФ='dd.MM.yyyy HH:mm:ss'")); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Формат(_Дата2, "ДФ='dd.MM.yyyy HH:mm:ss'")); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ФорматДСО(ДопСообщениеОшибки)); 
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРавенство(_1, _2, ДопСообщениеОшибки = "") Экспорт
	Если _1 <> _2 Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Сравниваемые значения (%1; %2) не равны, а хотели, чтобы были равны.%3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",_1);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",_2);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ФорматДСО(ДопСообщениеОшибки));
		ТекстСообщения = ТекстСообщения;
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеРавенство(_1, _2, ДопСообщениеОшибки = "") Экспорт
	Если _1 = _2 Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Сравниваемые значения (%1; %2) равны, а хотели, чтобы были не равны.%3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",_1);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",_2);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ФорматДСО(ДопСообщениеОшибки));
		ТекстСообщения = ТекстСообщения;
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьБольше(_Больше, _Меньше, ДопСообщениеОшибки = "") Экспорт
	Если _Больше <= _Меньше Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Первый параметр (%1) меньше или равен второму (%2) а хотели, чтобы был больше.%3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",_Больше);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",_Меньше);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ФорматДСО(ДопСообщениеОшибки));
		ТекстСообщения = ТекстСообщения;
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьБольшеИлиРавно(_Больше, _Меньше, ДопСообщениеОшибки = "") Экспорт
	Если _Больше < _Меньше Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Первый параметр (%1) меньше второго (%2) а хотели, чтобы был больше или равен.%3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",_Больше);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",_Меньше);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ФорматДСО(ДопСообщениеОшибки));
		ТекстСообщения = ТекстСообщения;
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМеньше(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 >= проверяемоеЗначение2 Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Значение <%1> больше или равно, чем <%2>, а ожидалось меньше. %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",проверяемоеЗначение1); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",проверяемоеЗначение2); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ФорматДСО(СообщениеОбОшибке)); 
		ВызватьОшибкуПроверки(ТекстСообщения)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМеньшеИлиРавно(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 > проверяемоеЗначение2 Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Значение <%1> больше, чем <%2>, а ожидалось меньше или равно. %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",проверяемоеЗначение1); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",проверяемоеЗначение2); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ФорматДСО(СообщениеОбОшибке)); 
		ВызватьОшибкуПроверки(ТекстСообщения)
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнилось(Знач СтрокаАлгоритм, ПараметрыИлиДопСообщениеОшибки = Неопределено, Знач ДопСообщениеОшибки = "") Экспорт
	Перем Параметры;
	
	Если ТипЗнч(ПараметрыИлиДопСообщениеОшибки) = Тип("Строка") Тогда
		ДопСообщениеОшибки = ПараметрыИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиДопСообщениеОшибки;
	КонецЕсли;
	Попытка
		Выполнить(СтрокаАлгоритм);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Хотели, чтобы алгоритм <%1> выполнился, а он упал с ошибкой <%2>. %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаАлгоритм);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПолученноеОписаниеОшибки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ФорматДСО(ДопСообщениеОшибки));
		ТекстСообщения = ТекстСообщения;
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМетодВыполнился(Объект, Знач ИмяМетода, ПараметрыИлиДопСообщениеОшибки = Неопределено, Знач ДопСообщениеОшибки = "") Экспорт
	Перем Параметры;
	
	Если ТипЗнч(ПараметрыИлиДопСообщениеОшибки) = Тип("Строка") Тогда
		ДопСообщениеОшибки = ПараметрыИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиДопСообщениеОшибки;
		Если Параметры <> Неопределено Тогда
			ТипПараметра = ТипЗнч(Параметры);
			Если ТипПараметра <> Тип("Массив") Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ожидали, что вторым параметром будет передан массив параметров для метода <%1>, а получили другой объект с типом <%2>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяМетода);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТипПараметра);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыСтрока = ПараметрыСтрокой(Параметры);
	
	СтрокаВыполнения = "Объект." + ИмяМетода + "(" + ПараметрыСтрока + ")";
	
	Попытка
		Выполнить(СтрокаВыполнения);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Хотели, чтобы код <%1> выполнился, а он упал с ошибкой <%2>. %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаВыполнения);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПолученноеОписаниеОшибки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ФорматДСО(ДопСообщениеОшибки));
		ТекстСообщения = ТекстСообщения;
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеВыполнилось(Знач СтрокаАлгоритм, ПараметрыИлиОжидаемоеОписаниеОшибки, Знач ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки = "", Знач ДопСообщениеОшибки = "") Экспорт
	Перем Параметры, ОжидаемоеОписаниеОшибки; 
	Если ТипЗнч(ПараметрыИлиОжидаемоеОписаниеОшибки) = Тип("Строка") Тогда
		ОжидаемоеОписаниеОшибки = ПараметрыИлиОжидаемоеОписаниеОшибки;
		ДопСообщениеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиОжидаемоеОписаниеОшибки;
		ОжидаемоеОписаниеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	КонецЕсли;
	Попытка
		Выполнить(СтрокаАлгоритм);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Найти(ПолученноеОписаниеОшибки, ОжидаемоеОписаниеОшибки) = 0 Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Хотели, чтобы алгоритм <%1> упал с сообщением об ошибке <%2>, а он упал с сообщением <%3>.%4");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаАлгоритм);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОжидаемоеОписаниеОшибки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ПолученноеОписаниеОшибки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ФорматДСО(ДопСообщениеОшибки));
			ТекстСообщения = ТекстСообщения;
			ВызватьОшибкуПроверки(ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	ТекстСообщения = ПолучитьТекстСообщенияПользователю("Хотели, чтобы алгоритм <%1> упал, а он выполнился%2");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаАлгоритм);
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ФорматДСО(ДопСообщениеОшибки));
	ТекстСообщения = ТекстСообщения;
	ВызватьОшибкуПроверки(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМетодНеВыполнился(Объект, ИмяМетода, ПараметрыИлиОжидаемоеОписаниеОшибки, Знач ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки = "", Знач ДопСообщениеОшибки = "") Экспорт
	Перем Параметры, ОжидаемоеОписаниеОшибки; 
	
	Если ТипЗнч(ПараметрыИлиОжидаемоеОписаниеОшибки) = Тип("Строка") Тогда
		ОжидаемоеОписаниеОшибки = ПараметрыИлиОжидаемоеОписаниеОшибки;
		ДопСообщениеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиОжидаемоеОписаниеОшибки;
		Если Параметры <> Неопределено Тогда
			ТипПараметра = ТипЗнч(Параметры);
			Если ТипПараметра <> Тип("Массив") Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ожидали, что третьим параметром будет передан массив параметров для метода <%1>, а получили другой объект с типом <%2>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяМетода);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТипПараметра);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		КонецЕсли;
		ОжидаемоеОписаниеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	КонецЕсли;
	
	ПараметрыСтрока = ПараметрыСтрокой(Параметры);
	
	СтрокаВыполнения = "Объект." + ИмяМетода + "(" + ПараметрыСтрока + ")";
	
	Попытка
		Выполнить(СтрокаВыполнения);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Найти(ПолученноеОписаниеОшибки, ОжидаемоеОписаниеОшибки) = 0 Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Хотели, чтобы код <%1> упал с сообщением об ошибке <%2>, а он упал с сообщением <%3>.%4");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаВыполнения);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОжидаемоеОписаниеОшибки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ПолученноеОписаниеОшибки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ФорматДСО(ДопСообщениеОшибки));
			ТекстСообщения = ТекстСообщения;
			ВызватьОшибкуПроверки(ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	ТекстСообщения = ПолучитьТекстСообщенияПользователю("Хотели, чтобы код <%1> упал, а он выполнился%2");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаВыполнения);
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ФорматДСО(ДопСообщениеОшибки));
	ТекстСообщения = ТекстСообщения;
	ВызватьОшибкуПроверки(ТекстСообщения);
	
КонецПроцедуры

// проверка идет через ЗначениеЗаполнено, но мутабельные значение всегда считаем заполненными
&НаКлиенте
Процедура ПроверитьЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	Попытка
		фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
	Исключение
		Возврат;
	КонецПопытки;
	Если НЕ фЗаполнено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Значение (%1) не заполнено, а ожидалась заполненность%2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПроверяемоеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ФорматДСО(ДопСообщениеОшибки));
		ТекстСообщения = ТекстСообщения;
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	ТекстСообщения = ПолучитьТекстСообщенияПользователю("Значение (%1) заполнено, а ожидалась незаполненность %2");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПроверяемоеЗначение);
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ФорматДСО(ДопСообщениеОшибки));
	ТекстСообщения = ТекстСообщения;
	Попытка
		фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
	Исключение
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецПопытки;
	Если фЗаполнено Тогда
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТип(значение, ТипИлиИмяТипа, ДопСообщениеОшибки = "") Экспорт
	Если ТипЗнч(ТипИлиИмяТипа) = Тип("Строка") Тогда
		искомыйТип = Тип(ТипИлиИмяТипа);
	ИначеЕсли ТипЗнч(ТипИлиИмяТипа) = Тип("Тип") Тогда
		искомыйТип = ТипИлиИмяТипа;
	Иначе
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("ПроверитьТип: Тип значения параметра ТипИлиИмяТипа должен быть <Тип> или <Строка>, а получили <%1>%2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТипЗнч(ТипИлиИмяТипа));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ФорматДСО(ДопСообщениеОшибки));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Если ТипЗнч(значение) <> искомыйТип Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Типом значения <%1> является <%2>, а ожидался тип <%3>.%4");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",значение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТипЗнч(значение));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ТипИлиИмяТипа);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ФорматДСО(ДопСообщениеОшибки));
		ТекстСообщения = ТекстСообщения;
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВхождение(строка, подстрокаПоиска, ДопСообщениеОшибки = "") Экспорт
	Если Найти(строка, подстрокаПоиска) = 0 Тогда
		ПредставлениеСтроки = "<" + строка + ">";
		Если СтрДлина(строка) > 20 Тогда
			ПредставлениеСтроки = ПредставлениеСтроки + Символы.ПС;
		КонецЕсли;
		ПредставлениеПодСтроки = "<" + подстрокаПоиска + ">";
		Если СтрДлина(подстрокаПоиска) > 20 Тогда
			ПредставлениеПодСтроки = ПредставлениеПодСтроки + Символы.ПС;
		КонецЕсли;
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Искали в %1 подстроку %2, но не нашли.%3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПредставлениеСтроки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПредставлениеПодСтроки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ФорматДСО(ДопСообщениеОшибки));
		ТекстСообщения = ТекстСообщения;
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

//Коллекция - Массив, Структура, Соответствие, ФиксированныйМассив, ФиксированнаяСтруктура, ФиксированноеСоответствие, СписокЗначений
&НаКлиенте
Процедура ПроверитьВхождениеВКоллекцию(Элемент, Коллекция, ДопСообщениеОшибки = "") Экспорт
	Нашли = Неопределено;
	ТипКоллекции = ТипЗнч(Коллекция);
	Если ТипКоллекции = Тип("Массив") или ТипКоллекции = Тип("ФиксированныйМассив") Тогда
		Нашли = Коллекция.Найти(Элемент) <> Неопределено;
	ИначеЕсли ТипКоллекции = Тип("Структура") или ТипКоллекции = Тип("Соответствие") 
		или ТипКоллекции = Тип("ФиксированнаяСтруктура") или ТипКоллекции = Тип("ФиксированноеСоответствие") Тогда
		Для каждого КлючЗначение Из Коллекция Цикл
			Нашли = КлючЗначение.Значение = Элемент;
			Если Нашли Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипКоллекции = Тип("СписокЗначений") Тогда
		Нашли = Коллекция.НайтиПоЗначению(Элемент) <> Неопределено;
	КонецЕсли;
	Если Нашли = Неопределено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Утверждение <ПроверитьВхождениеВКоллекцию> не умеет работать с типом коллекции <%1>.%2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТипКоллекции);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ФорматДСО(ДопСообщениеОшибки));
		ТекстСообщения = ТекстСообщения;
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Если Не Нашли Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не нашли элемент <%1> в коллекции, а хотели, чтобы он был в коллекции.%2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Элемент);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ФорматДСО(ДопСообщениеОшибки));
		ТекстСообщения = ТекстСообщения;
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки = "") Экспорт
	ПроверитьВалидностьЗапросаСКДНаСервере(ТекстЗапроса, ДопСообщениеОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки = Ложь, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки = Ложь, Знач ДопСообщениеОшибки = "",ДопПараметры = Неопределено) Экспорт
	ВычислятьЗначенияКонекстаВМакете = Истина;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ВычислятьЗначенияКонекстаВМакете") Тогда
			ВычислятьЗначенияКонекстаВМакете = ДопПараметры.ВычислятьЗначенияКонекстаВМакете;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ВычислятьЗначенияКонекстаВМакете Тогда
		ВычислитьВМакетеЗначенияКонтекста(ТабДок1);
		ВычислитьВМакетеЗначенияКонтекста(ТабДок2);
	КонецЕсли;	 
	
	ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениямСервер(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки, ДопСообщениеОшибки,ДопПараметры);
КонецПроцедуры

&НаСервере
Процедура ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениямСервер(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки = Ложь, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки = Ложь, Знач ДопСообщениеОшибки = "",ДопПараметры = Неопределено) Экспорт
	Объект().ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки, ДопСообщениеОшибки,ДопПараметры);
КонецПроцедуры

// количествоСозданныхОбъектов учитывает только созданные элементы справочников, документы и пользователей ИБ. Записи регистров сведений не считаются.
&НаКлиенте
Функция СоздатьДанныеПоТабличномуДокументу(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения = Неопределено, ИмяКолонкиЗамещения = Неопределено) Экспорт
	Данные = СоздатьДанныеПоТабличномуДокументуСервер(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения, ИмяКолонкиЗамещения);
	Возврат Данные;
КонецФункции

#КонецОбласти

#Область Плагины
// Плагины
// портировано из xUnitFor1C 4.1.1.0

&НаКлиенте
Процедура ОбработчикПоискаКлиентскихПлагинов(Знач НайденныеФайлы, Знач ДополнительныеПараметры) Экспорт
	
	ПомещаемыеФайлы = Новый Массив;
	ИдентификаторыПлагинов = Новый Соответствие;
	Для каждого ФайлОбработки Из НайденныеФайлы Цикл
		
		ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ФайлОбработки.ПолноеИмя);
		ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
		
		ИмяПлагина = ФайлОбработки.ИмяБезРасширения;
		ИдентификаторыПлагинов.Вставить(ФайлОбработки.ПолноеИмя, ИмяПлагина);
		
	КонецЦикла;
	
	Если ПомещаемыеФайлы.Количество() Тогда
		ПараметрыЗавершения = Новый Структура("ИдентификаторыПлагинов", ИдентификаторыПлагинов);
		Если Версия836ИлиВыше Тогда
			Выполнить("НачатьПомещениеФайлов(Новый ОписаниеОповещения(""ОбработчикПоискаКлиентскихПлагиновЗавершение"", ЭтаФорма, ПараметрыЗавершения),
			|ПомещаемыеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор)");
		Иначе	
			ПомещенныеФайлы = Новый Массив;
			ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор);
			ПодключитьНайденныеКлиентскиеПлагиныНаСервере(ПомещенныеФайлы, ИдентификаторыПлагинов);
		КонецЕсли;	 
	Иначе
		ПодключитьНайденныеКлиентскиеПлагиныНаСервере(Новый Массив, ИдентификаторыПлагинов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПоискаКлиентскихПлагиновЗавершение(Знач ПомещенныеФайлы, Знач ДополнительныеПараметры) Экспорт
	
	ПодключитьНайденныеКлиентскиеПлагиныНаСервере(ПомещенныеФайлы, ДополнительныеПараметры.ИдентификаторыПлагинов);

КонецПроцедуры

&НаКлиенте
Функция Плагин(Знач Идентификатор) Экспорт
	
	ОбъектПлагин = Неопределено;
	ИдентификаторБезПрефиксовПодсистемы = Идентификатор; 
	Если КэшФормПлагинов.Свойство(ИдентификаторБезПрефиксовПодсистемы) Тогда
		ОбъектПлагин = КэшФормПлагинов[ИдентификаторБезПрефиксовПодсистемы];		
	КонецЕсли;
	
	Если ОбъектПлагин = Неопределено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Неизвестный идентификатор плагина: <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Идентификатор);
		ВызватьИсключение ТекстСообщения;
	ИначеЕсли ОбъектПлагин = Истина Тогда
		// загрузка клиентского плагина "По требованию"
		ИмяПлагина = Объект.Плагины[Идентификатор];
		Попытка
			Если Объект.ВерсияПоставки = "single" Тогда
				ОбъектПлагин = ПолучитьФорму("ВнешняяОбработка." + ПолучитьИмяОбработкиVA() + ".Форма." + "Плагин_" +  ИмяПлагина, , ЭтаФорма);
			Иначе	
				ОбъектПлагин = ПолучитьФорму("ВнешняяОбработка." + ИмяПлагина + ".Форма", , ЭтаФорма);
			КонецЕсли;	 
			ОбъектПлагин.УстановитьСлужебныеПеременные(ЭтаФорма);
			КэшФормПлагинов.Вставить(ИдентификаторБезПрефиксовПодсистемы, ОбъектПлагин);
		Исключение
			// TODO добавить поведение при отсутствии управляемой формы у плагина
			ВызватьИсключение;
		КонецПопытки;

	КонецЕсли;
	
	Возврат ОбъектПлагин;
КонецФункции

&НаКлиенте
Функция ПолучитьОписанияПлагиновПоТипу(Знач ТипПлагина) Экспорт
	Результат = ПолучитьОписанияПлагиновПоТипуНаСервере(ТипПлагина);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗагрузкаПлагиновЗавершение() Экспорт
	ПодключитьОбработчикОжидания("ПослеОткрытияФормы", 0.1, Истина);
КонецПроцедуры

#КонецОбласти

#Область ДляАвтотестирования

//Позволяет получить доступ к переменной КонтекстСохраняемый тестируемой формы VB
&НаКлиенте
Функция ПолучитьКонтекстСохраняемый() Экспорт
	Возврат ОбъектКонтекстСохраняемый; 
КонецФункции	

&НаКлиенте
Процедура ПолучитьТекстШагаИзТекстаФичиЕслиОнТамЗадан(Текст,Шаг,Сценарий) Экспорт
	МассивТекстФичи = Сценарий.МассивТекстФичи;
	
	СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи,"[autodoc.text]",Шаг.НомерСтрокиВФиче);
	Если Не ЗначениеЗаполнено(СлужебнаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ОбработкаПараметровШага",Истина);
	ПараметрыОбработки.Вставить("ВычислитьВыражения",Истина);
	ПараметрыОбработки.Вставить("Шаг",Шаг);
	ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока,ПараметрыОбработки);
	
	Текст = СлужебнаяСтрока;
КонецПроцедуры

&НаКлиенте
Процедура СделатьСлужебноеОповещение()Экспорт
	ПодключитьОбработчикОжидания("ДляСлужебногоОповещения", 1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСлужебныеБазыЕслиИхНет() Экспорт
	ИмяФайла = Объект.КаталогИнструментов + "/tools/ServiceBases/v83ServiceBase836/1Cv8.1CD";
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		ИмяВременногоBat = ПолучитьИмяВременногоФайла("bat");
		
		ЗТ = Новый ЗаписьТекста(ИмяВременногоBat, "UTF-8", , Истина); 
		ЗТ.ЗаписатьСтроку("cd " + Объект.КаталогИнструментов); 
		ЗТ.ЗаписатьСтроку("oscript """ + Объект.КаталогИнструментов + "\tools\onescript\build-service-conf.os"""); 
		ЗТ.Закрыть();
		
		
		
		Команда = ИмяВременногоBat;
		Статус = ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
		Если Статус <> 0 Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог создать сервисные базы. Статус=%1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Статус);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьСеансСлужебнойБазы(Имябазы, ТипЗапуска, Ключи) Экспорт
	СисИнфо = Новый СистемнаяИнформация; 
	ВерсияПриложения = СисИнфо.ВерсияПриложения;
	ПутьК1С = "C:\Program Files (x86)\1cv8\" + ВерсияПриложения + "\bin\1cv8.exe";
	СтрокаЗапускаКонфигуратора = """" + ПутьК1С + """ " + ТипЗапуска + " /F""" + Объект.КаталогИнструментов + "\tools\ServiceBases\" + Имябазы + """ " + Ключи;
	Статус = ВыполнитьКомандуОСБезПоказаЧерногоОкна(СтрокаЗапускаКонфигуратора, 0);//не ждём окончания работы конфигуратора
	Если Статус <> 0 Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог запустить конфигуратор. <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаЗапускаКонфигуратора);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

#КонецОбласти

#Область ПрочиеЭкспортные

&НаКлиенте
Процедура ОбработкаПослеПомещенияФайла(Результат, АдресХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	КопияДополнительныеПараметры = СкопироватьСтруктуру(ДополнительныеПараметры);
	КопияДополнительныеПараметры.Вставить("ИмяФайла",ВыбранноеИмяФайла);

	ИмяОбработки = ПодключитьВнешнююОбработкуСервер(АдресХранилища,ЕстьЗащитаОтОпасныхДействий,КопияДополнительныеПараметры);
	ДополнительныеПараметры.Вставить("ИмяОбработки", ИмяОбработки);
	
	Если ДополнительныеПараметры.Свойство("ПроцедураПослеПодключения") Тогда
		Выполнить(ДополнительныеПараметры.ПроцедураПослеПодключения);
	ИначеЕсли ДополнительныеПараметры.Свойство("ПодключитьФормуВСлужебнуюПеременную") Тогда
		СлужебнаяПеременная = ПолучитьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма." + ДополнительныеПараметры.ИмяФормы,,,Истина);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачатьПолучитьВремяИзмененияФайла(ВерсияФайла, ДополнительныеПараметры) Экспорт
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];
	СтруктураФайла.Вставить("ВерсияФайла", ВерсияФайла);
	
	ОбработатьАсинхроноСледующийФайл(ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачатьПроверкуЭтоКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];
	СтруктураФайла.Вставить("ЭтоКаталог", ЭтоКаталог);
	
	Отладка("ОбработчикНачатьПроверкуЭтоКаталог. " + СтруктураФайла.ИмяПараметра + ": " + СтруктураФайла.ИмяФайла + ". ЭтоКаталог=" + ЭтоКаталог);
	
	Если ЭтоКаталог Тогда
		ОбработатьАсинхроноСледующийФайл(ДополнительныеПараметры);
	Иначе	
		Файл = Новый Файл(СтруктураФайла.ИмяФайла);
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработчикНачатьПолучитьВремяИзмененияФайла"", ЭтаФорма, ДополнительныеПараметры)");
		Выполнить("Файл.НачатьПолучениеВремениИзменения(ОписаниеОповещения)");
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачатьПроверкуСуществования(Существует, ДополнительныеПараметры) Экспорт
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];
	СтруктураФайла.Вставить("Существует", Существует);
	
	Отладка("ОбработчикНачатьПроверкуСуществования. " + СтруктураФайла.ИмяПараметра + ": " + СтруктураФайла.ИмяФайла + ". Существует=" + Существует);
	
	Если Существует Тогда
		Файл = Новый Файл(СтруктураФайла.ИмяФайла);
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработчикНачатьПроверкуЭтоКаталог"", ЭтаФорма, ДополнительныеПараметры)");
		Выполнить("Файл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения)");
	Иначе
		ОбработатьАсинхроноСледующийФайл(ДополнительныеПараметры);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачатьПолучитьВремяИзмененияФайлаМассив(ВерсияФайла, ДополнительныеПараметры) Экспорт
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];
	НайденныеФайлы = СтруктураФайла.НайденныеФайлы;
	
	ИДФайлаДляОбработки = СтруктураФайла.ИДФайлаДляОбработки;
	НайденныеФайлы[ИДФайлаДляОбработки].Вставить("ВерсияФайла", ВерсияФайла);
	
	
	ПолучитьВерсиюФайловАссинхронно(ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачатьПоискФайлов(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];
	
	НайденныеФайлыМассив = Новый Массив;
	Для Каждого Элем Из НайденныеФайлы Цикл
		НайденныеФайлыМассив.Добавить(Новый Структура("Файл", Элем));
	КонецЦикла;	
	СтруктураФайла.Вставить("НайденныеФайлы", НайденныеФайлыМассив);
	
	СтруктураФайла.Вставить("ИДФайлаДляОбработки", - 1);
	ПолучитьВерсиюФайловАссинхронно(ДополнительныеПараметры);
	
	
	//ОбработатьАсинхроноСледующийФайл(ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросНадоЛиЗагружатьФичи(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ЗагрузитьФичи();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайлаЗагрузкаФичи(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Объект.КаталогФич = ВыбранныеФайлы[0];
	
	СохранитьНастройкиВХранилище("КаталогФич", Объект.КаталогФич ,ПараметрыДляСохраненияНастроек());
	
	//очистим кеш при смене фичи
	КешStepDefinition.Очистить();
	КешТаблицGherkin.Очистить();
	
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОткрытьКаталогФичи(КодВозврата, ДополнительныеПараметры) Экспорт
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВнешнийСписокПроцедур(МассивСнипетовИзОбработки, ПолноеИмя, ФормаОбработки) Экспорт 
	
	СтрТаблицаКонтекстовОбработок = Новый Структура;
	СтрТаблицаКонтекстовОбработок.Вставить("ИмяФайла", ПолноеИмя);
	СтрТаблицаКонтекстовОбработок.Вставить("Обработка", ФормаОбработки);
	ТаблицаКонтекстовОбработок.Добавить(СтрТаблицаКонтекстовОбработок);
	
	УниверсальноеПолноеИмя = УниверсальноеПолноеИмяФайла(ПолноеИмя);
	МассивИменКонтекстовОбработок.Добавить(Нрег(УниверсальноеПолноеИмя));
	БылиОшибки = Ложь;
	Для каждого Снипет из МассивСнипетовИзОбработки Цикл 
		ТаблицаОбработокДляОтладки.Вставить(СокрЛП(Снипет.ИмяПроцедуры), Новый Структура("ИмяПроцедуры, Обработка, ИмяФайла", Снипет.ИмяПроцедуры, ФормаОбработки, УниверсальноеПолноеИмя));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция МетаданныеИмя() Экспорт
	Возврат МетаданныеИмяСервер();
КонецФункции

&НаКлиенте
Процедура ПодготовитьСценарийКВыполнению() Экспорт
	Если ЭтоLinux Тогда
		Разделитель = "/";
	Иначе
		Разделитель = "\";
	КонецЕсли;
	 
	ИмяВременногоFeature = ПолучитьИмяВременногоФайла("feature");
	ВременныйФайл = Новый Файл(ИмяВременногоFeature);
	КаталогВременногоFeature = ВременныйФайл.Путь + "vanessa-behavior";
	
	УдалитьКаталогКомандаСистемы(КаталогВременногоFeature);
	СоздатьКаталогКомандаСистемы(КаталогВременногоFeature);	
	
	ИмяВременногоFeature = КаталогВременногоFeature + Разделитель + "temp.feature";
	
	ЗТ = Новый ЗаписьТекста(ИмяВременногоFeature, КодировкаТекста.UTF8, , Истина); 
	Если Лев(Объект.СгенерированныйСценарий,1) <> "#" Тогда
		//надо дописать заголовок сценария
		Если Объект.ЯзыкГенератораGherkin = "en" Тогда
			СтрокаЗаголовка = "#language: en
			|
			|@tree
			|
			|Functionality: <description features>
			|
			|As <Role>
			|I want <functional description>
			|To <business effect>
			|
			|Scenario: <description of the scenario>
			|
			|";
		Иначе	
			СтрокаЗаголовка = "#language: ru
			|
			|@tree
			|
			|Функционал: <описание фичи>
			|
			|Как <Роль> я хочу
			|<описание функционала> 
			|чтобы <бизнес-эфект> 
			|
			|Сценарий: <описание сценария> 
			|
			|";
		КонецЕсли;	 
		
		ЗТ.ЗаписатьСтроку(СтрокаЗаголовка);
	КонецЕсли;	 
	ЗТ.ЗаписатьСтроку(Объект.СгенерированныйСценарий);
	ЗТ.Закрыть();
	
	Объект.КаталогФич = ИмяВременногоFeature;
	ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоТестов;
	ЗагрузитьФичи();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУстановкуСнятиеБрейкпоинта() Экспорт
	ТекущаяСтрокаДереваИдСтроки = Неопределено;
	Если Элементы.ДеревоТестов.ТекущиеДанные <> Неопределено Тогда
		ТекущаяСтрокаДереваИдСтроки = Элементы.ДеревоТестов.ТекущиеДанные.ИдСтроки;
	КонецЕсли;	 
	
	Если ТекущаяСтрокаДереваИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	
	
	Если НЕ ЭтуСтрокуМожноИсполнить(Элементы.ДеревоТестов.ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;	 
	
	Элементы.ДеревоТестов.ТекущиеДанные.Брейкпоинт = Не Элементы.ДеревоТестов.ТекущиеДанные.Брейкпоинт;
	Брейкпоинт                                     = Элементы.ДеревоТестов.ТекущиеДанные.Брейкпоинт;
	
	Элементы.ДеревоТестовБрейкпоинт.Заголовок = " ";
	
	Если Брейкпоинт Тогда
		ДобавитьБрейкПоинт(Элементы.ДеревоТестов.ТекущиеДанные.ПолныйПуть);
	Иначе	
		УдалитьБрейкПоинт(Элементы.ДеревоТестов.ТекущиеДанные.ПолныйПуть);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуПодключенияTestClient() Экспорт
	ВозниклаОшибкаПодключенияTestClient = Истина;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТаблицуGherkinИзМакета(Макет) Экспорт
	Если Ложь Тогда
		Макет = Новый ТабличныйДокумент;
	КонецЕсли;	 
	
	ТаблицаGherkin = Новый Массив;
	
	Для Ккк = 1 По Макет.ВысотаТаблицы Цикл
		СтрокаТаблицы = Новый Структура;
		Для Ррр = 1 По Макет.ШиринаТаблицы Цикл
			СтрокаТаблицы.Вставить("Кол" + XMlСтрока(Ррр),Макет.Область(Ккк,Ррр,Ккк,Ррр).Текст);
		КонецЦикла;	
		
		ТаблицаGherkin.Добавить(СтрокаТаблицы);
	КонецЦикла;	
	
	Возврат ТаблицаGherkin; 
КонецФункции	 

#КонецОбласти

#Область ПереводТекста

//Переводит текст с русского языка на Объект.ЯзыкГенератораGherkin
&НаКлиенте
Функция ПеревестиТекст(Текст) Экспорт
	ДанныеПеревода = Новый Структура;
	ДанныеПеревода.Вставить("ЯзыкПеревода",Объект.ЯзыкГенератораGherkin);
	ДанныеПеревода.Вставить("ДвоичныеДанныеФайлПеревода",ПолучитьФайлыПеревода());
	ДанныеПеревода.Вставить("ТекстДляПеревода",Текст);
	ДанныеПеревода.Вставить("КешДанныеПеревода",КешДанныеПеревода);
	ДвДанныеvbFeatureReader = Неопределено;
	Если Объект.ВерсияПоставки = "standart" Тогда
		ДвДанныеvbFeatureReader = Новый ДвоичныеДанные(ПолучитьПутьКFeatureReader());
	КонецЕсли;	 
	ДанныеПеревода.Вставить("ДвДанныеvbFeatureReader",ДвДанныеvbFeatureReader);
	ДанныеПеревода.Вставить("Перевод",Неопределено);
	
	СделатьПереводСгенерированногоТекстаGherkinСервер(ДанныеПеревода);
	Если ДанныеПеревода.Перевод <> Неопределено Тогда
		КешДанныеПеревода.Вставить("Язык",Объект.ЯзыкГенератораGherkin);
		КешДанныеПеревода.Вставить("ТаблицаПеревода",ДанныеПеревода.ТаблицаПеревода);
		
		Возврат ДанныеПеревода.Перевод;
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция ДанныеПереводаСообщенийПользователю() Экспорт
	Возврат Объект.ТекстСообщенийПользователю; 
КонецФункции	 

#КонецОбласти

#Область SikuliXСервер

//Запускает SikuliX сервер
//ДопПараметры - структура, в которой будут заполнены переменные для вызова SikuliX сервера
&НаКлиенте
Процедура ЗапуститьSikuliXСевер(ДопПараметры = Неопределено) Экспорт
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;	 
	ДопПараметры.Вставить("SikuliXСеверЗапущен",Ложь);
	ПолучитьМодульSikuliXСевер().ЗапуститьSikuliXСевер(ЭтаФорма,ДопПараметры);
	
	Если ДопПараметры.SikuliXСеверЗапущен <> Истина Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не получилось запустить Sikulix сервер.");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	
	
	ИмяУправляющиегоФайлаSikuliXСервер = ДопПараметры.ИмяУправляющиегоФайла;
	ИмяФайлаОтветаSikuliXСевер         = ДопПараметры.ИмяФайлаОтвета;
	SikuliXСеверЗапущен                = ДопПараметры.SikuliXСеверЗапущен;
	ИмяФайлаВыводаКонсолиSikuliXСервер = ДопПараметры.ИмяФайлаВыводаКонсолиSikuliXСервер;
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область ЗагрузкаГлобальныхПеременныхИзФайлаНастроек

&НаКлиенте
Процедура ЗагрузитьГлобальныеПеременные()
	
	Если ЗначениеЗаполнено(Объект.КаталогПроекта) Тогда
		ПутьКФайлу = Объект.КаталогПроекта + "\user_settings.json";
	Иначе
		ПутьКФайлу = Объект.КаталогИнструментов + "\user_settings.json";
	КонецЕсли;
	
	Файл = Новый Файл(ПутьКФайлу);
	ТекЮзер = ТекущийПользовательОС();
	
	Если Не ФайлСуществуетКомандаСистемы(ПутьКФайлу) Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеПеременных = Вычислить("Новый ЧтениеJSON()");
	ЧтениеПеременных.ОткрытьФайл(ПутьКФайлу);
	ГлобальныеПеременные = Вычислить("ПрочитатьJSON(ЧтениеПеременных, Истина)");
	ЧтениеПеременных.Закрыть();
	
	МассивНастроек = ГлобальныеПеременные["userSettings"];
	
	НастройкиЮзераНайдены = Ложь;
	Для каждого СтрокаПользователя Из МассивНастроек Цикл
		Если ВРег(СтрокаПользователя["user"]) = ВРег(ТекЮзер) Тогда 
			НастройкиЮзераНайдены = Истина;
			СтрокаНастроек = СтрокаПользователя["settings"];
			ВывестиЗагруженныеНастройкиВЖР(СтрокаНастроек);
			Для каждого ПеременнаяПользователя Из СтрокаНастроек Цикл
				СохранитьЗначениеВКонтекстСохраняемый(ПеременнаяПользователя.Ключ, ПеременнаяПользователя.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если Не НастройкиЮзераНайдены Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю(НСтр("Ошибка. Не найдены настройки пользователя <%1> в файле <%2>."));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1", ТекЮзер);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2", ПутьКФайлу);
		СделатьСообщение(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТекущийПользовательОС()
	
	СисИнфо = Новый СистемнаяИнформация;
	
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86
		Или СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
	
		ПользовательОС = "";
		Попытка
			NetWork = Новый COMObject("wscript.network");
			ПользовательОС = NetWork.Username; 
		Исключение
			Shell = Новый COMОбъект("WScript.Shell");
			ПапкаПользователя = Shell.ExpandEnvironmentStrings("%UserProfile%");
			Направление = Вычислить("НаправлениеПоиска.СКонца");
			СимволРазделителя = "\";
			ИндексРазделителя = Вычислить("СтрНайти(ПапкаПользователя, СимволРазделителя , Направление)");
			ПользовательОС = Прав(ПапкаПользователя, СтрДлина(ПапкаПользователя) - ИндексРазделителя);
		КонецПопытки;
		
	Иначе
		ТекстСообщения = ПолучитьТекстСообщенияПользователю(НСтр("Функция <%1> реализована только для Windows."));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1", "ТекущийПользовательОС()");
		СделатьСообщение(ТекстСообщения);
	КонецЕсли;
	
	Возврат ПользовательОС;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВывестиЗагруженныеНастройкиВЖР(знач НастройкиПользователя)
	
	НастройкиСтрокой = "";
	
	Для каждого СтрокаФайла Из НастройкиПользователя Цикл
		НастройкиСтрокой = НастройкиСтрокой + Символы.ПС + СтрокаФайла.Ключ + " " + СтрокаФайла.Значение;
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации("VanessaBehavior.ЗагрузкаГлобальныхПеременных", 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Загружены глобальные переменные'") + НастройкиСтрокой);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция - Получить строку вызова Sikuli
//
// Параметры:
//  ЗапускЧерезСкрипт	 - Булево	 - флаг способа запуска Sikuli-скриптов:
//									   Ложь	 - устаревший способ запуска для Windows,
//											   используется по умолчанию для совместимости
//									   Истина	 - запуск через скрипт runsikulix
// Возвращаемое значение:
//  Строка - строка для запуска Sikuli-скриптов
//
&НаКлиенте
Функция ПолучитьСтрокуВызоваSikuli(ЗапускЧерезСкрипт = Ложь)
	
	Если ЗапускЧерезСкрипт Тогда
		Если ЭтоLinux Тогда
			Возврат "runsikulix -r ";
		Иначе
			Возврат "call runsikulix -r ";
		КонецЕсли;
	Иначе
		Возврат """C:\Program Files (x86)\Java\jre6\bin\java.exe"" -Xms64M -Xmx512M -Dfile.encoding=UTF-8 -Dpython.path=""C:\Program Files (x86)\Sikuli X\sikuli-script.jar/"" -jar ""C:\Program Files (x86)\Sikuli X\sikuli-ide.jar"" -r ";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьWshShell()

	Если WshShell = Неопределено Тогда
		Попытка
			WshShell = Новый COMОбъект("WScript.Shell");
		Исключение
			ВызватьИсключение ПолучитьТекстСообщенияПользователю("Не удалось подключить COM объект <WScript.Shell>");
		КонецПопытки;
	КонецЕсли;
	
	Возврат WshShell;

КонецФункции

&НаКлиенте
Функция СкопироватьСтруктуру(Оригинал)
	Результат = Новый Структура();
	Для каждого Элем Из Оригинал Цикл
		Результат.Вставить(Элем.Ключ, Элем.Значение);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции	

&НаСервереБезКонтекста
Процедура ЗаписатьЛогВЖРПередВыполнениемШагаСервер(ИмяШага)
	ЗаписьЖурналаРегистрации("VanessaAutomation.ПередВыполнениемШага", УровеньЖурналаРегистрации.Информация, , , ИмяШага);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьЛогВЖРОшибка(ИмяСобытия, Стр)
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , Стр);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьЛогВЖРИнформация(ИмяСобытия, Стр)
	ЗаписьЖурналаРегистрации("VanessaAutomation." + ИмяСобытия, УровеньЖурналаРегистрации.Информация, , , Стр);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЛогВТекстИнформация(ИмяСобытия, Стр)
	ТекстСообщения = Символы.Таб + Символы.Таб + ИмяСобытия + ":" + Стр;
	ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЛогВЖРПередВыполнениемШага(ИмяШага)
	ЗаписатьЛогВЖРПередВыполнениемШагаСервер(ИмяШага);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяФормыИзПоследнегоАктивногоОкна()
	Если ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Если ОбъектКонтекст.Свойство("АктивноеОкно") Тогда
			Если ОбъектКонтекст.АктивноеОкно <> Неопределено Тогда
				Попытка
					АктивноеОкно = ОбъектКонтекст.АктивноеОкно;
					Если ЭтоЗаголовокОкнаМодальногоДиалога(АктивноеОкно.Заголовок) Тогда
						Если ОбъектКонтекст.Свойство("ПредыдущееАктивноеОкно") Тогда
							АктивноеОкно = ОбъектКонтекст.ПредыдущееАктивноеОкно;
						КонецЕсли;	 
					КонецЕсли;	 
					
					ТестируемаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
					Если ТестируемаяФорма <> Неопределено Тогда
						Возврат ТестируемаяФорма.ИмяФормы;
					КонецЕсли;	 
				Исключение
					
				КонецПопытки;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если НЕ ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если ОбъектКонтекстСохраняемый.ТестовоеПриложение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Попытка
		МассивОкон = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
		
		//находим ближайшее окно к модальному диалогу
		Для Каждого ТекущееОкно Из МассивОкон Цикл
			Если ТекущееОкно.НачальнаяСтраница Тогда
				Продолжить;
			ИначеЕсли ТекущееОкно.Основное Тогда
				Продолжить;
			ИначеЕсли ЭтоЗаголовокОкнаМодальногоДиалога(ТекущееОкно.Заголовок) Тогда
				Продолжить;
			КонецЕсли;	 	
			
			АктивноеОкно = ТекущееОкно;
			ТестируемаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
			Если ТестируемаяФорма <> Неопределено Тогда
				Возврат ТестируемаяФорма.ИмяФормы;
			КонецЕсли;	 
		КонецЦикла;	
		
		//находим начальную страницу
		Для Каждого ТекущееОкно Из МассивОкон Цикл
			Если ТекущееОкно.НачальнаяСтраница Тогда
				ТестируемаяФорма = ТекущееОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
				Если ТестируемаяФорма <> Неопределено Тогда
					Возврат "НачальнаяСтраница";
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЦикла;	
		
		//находим основное окно
		Для Каждого ТекущееОкно Из МассивОкон Цикл
			Если ТекущееОкно.Основное Тогда
				Возврат "ОсновноеОкноПриложения";
			КонецЕсли;	 
		КонецЦикла;	
		
	Исключение
	КонецПопытки;
	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Процедура ЗаписатьЛогОшибки(СтрокаСценария,СтрокаШага,ТекстОшибки,ИнфоОбОшибке,ОписаниеОшибкиШага)
	Если Не Объект.ДелатьЛогОшибокВТекстовыйФайл Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ ЗначениеЗаполнено(Объект.ИмяКаталогаЛогОшибок) Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Не указано имя файла лога в параметре <ИмяКаталогаЛогОшибок>");
	КонецЕсли;	 
	
	Если НЕ ФайлСуществуетКомандаСистемы(Объект.ИмяКаталогаЛогОшибок) Тогда
		СоздатьКаталогЕслиЕгоНет(Объект.ИмяКаталогаЛогОшибок);
	КонецЕсли;	 
	
	
	ЭтоПример          = Ложь;
	ЭтоШагКонтекста    = Ложь;
	СтрокаРодителяШага = НайтиСтрокуСценарияЧерезРодителя(СтрокаШага, ЭтоПример,ЭтоШагКонтекста);
	
	
	ТекущаяУниверсальнаяДатаСтрока = СтрЗаменить(ТекущаяУниверсальнаяДатаВМиллисекундах(),Символы.НПП,"");
	ВтораяЧастьФайла = "Ошибка_" + ТекущаяУниверсальнаяДатаСтрока + ".json";
	ВтораяЧастьФайла = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ВтораяЧастьФайла);	
	
	ИмяФайла = ДополнитьСлешВПуть(Объект.ИмяКаталогаЛогОшибок) + ВтораяЧастьФайла;
		
	ЗаписьJson = Вычислить("Новый ЗаписьJson()");
	ЗаписьJson.ОткрытьФайл(ИмяФайла);
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ИмяСценария");
	ЗаписьJSON.ЗаписатьЗначение(СтрокаСценария.Имя);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ИмяШага");
	ЗаписьJSON.ЗаписатьЗначение(СтрокаШага.Имя);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("НомерСтрокиВФиче");
	ЗаписьJSON.ЗаписатьЗначение(СтрокаШага.НомерСтрокиВФиче);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("СтрокаДерева");
	ЗаписьJSON.ЗаписатьЗначение(СтрокаШага.ИдСтроки);
	
	
	Если ИнфоОбОшибке = Неопределено Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("ТекстОшибки");
		ЗаписьJSON.ЗаписатьЗначение(ТекстОшибки);
	Иначе
		ЗаписьJSON.ЗаписатьИмяСвойства("ТекстОшибки");
		ЗаписьJSON.ЗаписатьЗначение(СокрЛП(ВывестиВСообщениеТекстОшибки(ИнфоОбОшибке)));
	КонецЕсли;	 
	
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ОписаниеОшибкиШага");
	ЗаписьJSON.ЗаписатьЗначение(ОписаниеОшибкиШага);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ЭтоШагКонтекста");
	ЗаписьJSON.ЗаписатьЗначение(ЭтоШагКонтекста);
	
	
	ЗаписьJSON.ЗаписатьИмяСвойства("МассивФайлов");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	Если ТипЗнч(СтрокаРодителяШага.ПроизвольныеЗначения) = Тип("Структура") Тогда
		Если СтрокаРодителяШага.ПроизвольныеЗначения.Свойство("ПрикрепленныеМакеты") Тогда
			ПрикрепленныеМакеты = СтрокаРодителяШага.ПроизвольныеЗначения.ПрикрепленныеМакеты;
			Для Каждого ДанныеФайла Из ПрикрепленныеМакеты Цикл
				ИмяМакета = ДанныеФайла.Имя + "_" + ТекущаяУниверсальнаяДатаСтрока;
				ИмяМакета = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяМакета);
				
				ИмяПрикрепленногоФайла = ДополнитьСлешВПуть(Объект.ИмяКаталогаЛогОшибок) + ИмяМакета + ".mxl";
				ЗаписьJSON.ЗаписатьЗначение(ИмяПрикрепленногоФайла);
				
				Попытка
					ДанныеФайла.Макет.Записать(ИмяПрикрепленногоФайла);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЦикла;	
		КонецЕсли;	 
		Если СтрокаРодителяШага.ПроизвольныеЗначения.Свойство("ПрикрепленныеФайлы") Тогда
			ПрикрепленныеФайлы = СтрокаРодителяШага.ПроизвольныеЗначения.ПрикрепленныеФайлы;
			Для Каждого ДанныеФайла Из ПрикрепленныеФайлы Цикл
				ИмяФайла = ДанныеФайла.ИмяФайла;
				ИмяФайла = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяФайла);
				ИмяПрикрепленногоФайла = ДополнитьСлешВПуть(Объект.ИмяКаталогаЛогОшибок) + ИмяФайла;
				Если ДанныеФайла.УникальностьИмени Тогда
					Файл = Новый Файл(ИмяПрикрепленногоФайла);
					ИмяПрикрепленногоФайла = ДополнитьСлешВПуть(Объект.ИмяКаталогаЛогОшибок) + Файл.ИмяБезРасширения + "_" + ТекущаяУниверсальнаяДатаСтрока + Файл.Расширение;
				КонецЕсли;	 
				
				ЗаписьJSON.ЗаписатьЗначение(ИмяПрикрепленногоФайла);
				
				Попытка
					ДанныеФайла.ДвоичныеДанныеФайла.Записать(ИмяПрикрепленногоФайла);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЦикла;	
		КонецЕсли;	 
	КонецЕсли;	 
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	ТекИмяФормы = ПолучитьИмяФормыИзПоследнегоАктивногоОкна();
	Если ТекИмяФормы = Неопределено Тогда
		ТекИмяФормы = "";
	КонецЕсли;	 
	ЗаписьJSON.ЗаписатьИмяСвойства("ФормаВКоторойВозниклоИсключение");
	ЗаписьJSON.ЗаписатьЗначение(ТекИмяФормы);
	
	БылоВызваноИсключение = НЕ (ИнфоОбОшибке = Неопределено);
	ЗаписьJSON.ЗаписатьИмяСвойства("БылоВызваноИсключение");
	ЗаписьJSON.ЗаписатьЗначение(БылоВызваноИсключение);
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();	
	ЗаписьJson.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЛогВТекстПередВыполнениемШага(ИмяШага)
	ТекстСообщения = ПолучитьТекстСообщенияПользователю("ПередВыполнениемШага: %1");
	ТекстСообщения = Символы.Таб + ТекстСообщения;
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяШага);
	ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьЛогВЖРПередВыполнениемСценарияСервер(ИмяСценария)
	ЗаписьЖурналаРегистрации("VanessaAutomation.ПередВыполнениемСценария", УровеньЖурналаРегистрации.Информация, , ,ИмяСценария);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЛогВЖРПередВыполнениемСценария(ИмяСценария)
	ЗаписатьЛогВЖРПередВыполнениемСценарияСервер(ИмяСценария);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЛогВТекстПередВыполнениемСценария(ИмяСценария)
	ТекстСообщения = ПолучитьТекстСообщенияПользователю("Сценарий: %1");
	ТекстСообщения = Символы.Таб + ТекстСообщения;
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяСценария);
	ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
КонецПроцедуры

&НаСервереБезКонтекста
Функция УзнатьЕстьПоддержкаНемодальныхФорм()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Массив1 = РазложитьСтрокуВМассивПодстрок(СистемнаяИнформация.ВерсияПриложения, ".");
	Массив2 = РазложитьСтрокуВМассивПодстрок("8.3.3.641", ".");
	
	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Массив1.Количество() - 1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);
		
		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		ИначеЕсли Число(Элем2) < Число(Элем1) Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Версия1БольшеИлиРавно;
КонецФункции

&НаСервереБезКонтекста
Функция УзнатьЕстьЗащитаОтОпасныхДействий()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Массив1 = РазложитьСтрокуВМассивПодстрок(СистемнаяИнформация.ВерсияПриложения, ".");
	Массив2 = РазложитьСтрокуВМассивПодстрок("8.3.9.2033", ".");
	
	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Массив1.Количество() - 1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);
		
		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Версия1БольшеИлиРавно;
КонецФункции

&НаКлиенте
Функция УзнатьРежимСовместимостиКлиент(ЗначениеПоУмолчанию)
	Если Не ЗначениеЗаполнено(КешРежимСовместимости) Тогда
		КешРежимСовместимости = УзнатьРежимСовместимости(ЗначениеПоУмолчанию);
	КонецЕсли;	 
	
	Возврат КешРежимСовместимости;
КонецФункции	

&НаСервереБезКонтекста
Функция УзнатьРежимСовместимости(ЗначениеПоУмолчанию)
	Значение = ЗначениеПоУмолчанию;
	
	Попытка
		Значение = Строка(Вычислить("Метаданные.РежимСовместимости"));
	Исключение
		Возврат Значение;
	КонецПопытки;	
	
	Возврат Значение;
	
КонецФункции	

&НаСервереБезКонтекста
Функция УзнатьЕстьПоддержкаАсинхронныхВызовов()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Версия1БольшеИлиРавно = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения,"8.3.5.1383");
	
	Рез = Версия1БольшеИлиРавно И Вычислить("Метаданные.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент <> Метаданные.СвойстваОбъектов.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент.Использовать");
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Функция УзнатьЕстьПоддержкаНемодальныхФормКлиент()
	Возврат УзнатьЕстьПоддержкаНемодальныхФорм();
КонецФункции

&НаКлиенте
Процедура ОбновитьКнопкуЗагрузитьФичи()
	Если Объект.текЗначениеОперации = "ЗагрузитьФичиИзКаталога" Тогда
		//Элементы.ПодменюЗагрузитьФичи.Заголовок = "Загрузить фичи из каталога";
	ИначеЕсли Объект.текЗначениеОперации = "ЗагрузитьОднуФичу" Тогда
		//Элементы.ПодменюЗагрузитьФичи.Заголовок = "Загрузить одну фичу";
	ИначеЕсли Объект.текЗначениеОперации = "" Тогда
	Иначе	
		Стр = "Ошибка. Неизвестное значение параметра текЗначениеОперации = " + Объект.текЗначениеОперации;
		Сообщить(Стр);	
		ВызватьИсключение Стр;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТестыЗагрузитьФичиИзКаталога()
	ОчиститьСообщения();
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработатьВыборФайлаЗагрузкаФичи"", ЭтаФорма)");
		Выполнить("ДиалогОткрытияФайла.Показать(ОписаниеОповещения)");
	Иначе	
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			Объект.КаталогФич = ДиалогОткрытияФайла.Каталог;
			//очистим кеш при смене фичи
			КешStepDefinition.Очистить();
			КешТаблицGherkin.Очистить();
			ЗагрузитьФичи();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПутьКОбработкеСервер()
	Если СокрЛП(Объект.КаталогИнструментов) <> "" Тогда
		Возврат Объект.КаталогИнструментов;
	КонецЕсли;	 
	
	Объект1 = РеквизитФормыВЗначение("Объект");
    ИспользуемоеИмяФайла = Объект1.ИспользуемоеИмяФайла;
    Если (Лев(НРег(ИспользуемоеИмяФайла), 6) <> "e1cib/") и (Лев(НРег(ИспользуемоеИмяФайла), 6) <> "e1cib\") Тогда
		Возврат ИспользуемоеИмяФайла;
	Иначе
		Возврат "";
	КонецЕсли;	 
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКОбработкеКлиент() Экспорт
	Если СокрЛП(Объект.КаталогИнструментов) <> "" Тогда
		Возврат Объект.КаталогИнструментов;
	КонецЕсли;	 
	
	Возврат ПолучитьПутьКОбработкеСервер();
КонецФункции

&НаКлиенте
Процедура ВосстановитьНастройкиКлиент()
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ТаймаутЗапуска1С = 25;
	СтрЗапуска = СокрЛП(ПараметрЗапуска);
	Если СтрЗапуска <> "" Тогда
		Если НЕ Объект.ВыполнениеСценарияИзОбработкиОповещения Тогда
			ВосстановитьНастройкиИзХранилища("ДанныеКлиентовТестирования", "ДанныеКлиентовТестирования"); 
		КонецЕсли;	 
		
		СтруктураПараметров = ПолучитьСтруктуруПараметров(СтрЗапуска);
		StartFeaturePlayer = ПолучитьЗначениеПереданногоПараметра(СтруктураПараметров, "StartFeaturePlayer");
		Если StartFeaturePlayer = Истина Тогда
			ЭтоЗапускВРежимеКоманднойСтроки = Истина;
			//значит мы в режиме ЗапускВРежимеКоманднойСтроки
			//настройки будут загружены, если это не запрешено через другие параметры запуска
		КонецЕсли;	
		
		NoLoadConfig = ПолучитьЗначениеПереданногоПараметра(СтруктураПараметров, "NoLoadConfig");
		Если NoLoadConfig = Истина Тогда
			ЭтоЗапускВРежимеКоманднойСтроки    = Истина;
			ЭтоЗапускВРежимеБезЗагрукиНастроек = Истина;
			//значит нам сообщили, что не надо загружать настройки
			Возврат;
		КонецЕсли;	
		
		LibsOnly = ПолучитьЗначениеПереданногоПараметра(СтруктураПараметров, "LibsOnly");
		Если LibsOnly = Истина Тогда
			ЭтоЗапускВРежимеКоманднойСтроки    = Истина;
			ЭтоЗапускВРежимеБезЗагрукиНастроек = Истина;
			Объект.DebugLog                    = Истина;
			//значит нам сообщили, что не надо загружать настройки, но надо добавить стандартные библиотеки
			
			Если СокрЛП(Объект.КаталогИнструментов) <> "" Тогда
				Если НадоДобавитьСтандартнуюБиблиотеку(Объект.ВерсияПоставки) Тогда
					Объект.КаталогиБиблиотек.Добавить(Объект.КаталогИнструментов + ПолучитьРазделительПути() + "features" 
						+ ПолучитьРазделительПути() + "Libraries");
				КонецЕсли;	 
				Объект.СписокТеговИсключение.Добавить("IgnoreOnCIMainBuild");
			КонецЕсли;	 
			
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ЗапрашиватьПодтверждениеПриЗакрытии) Тогда
		ЗапрашиватьПодтверждениеПриЗакрытии = "Да";
	КонецЕсли;	 
КонецПроцедуры

&НаСервере
Процедура ВосстановитьВсеНастройкиСервер(ЭтоLinux,НедавноЗагруженныеФичи)
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;	
	
	ВосстановитьНастройки(ЭтоLinux);
	ВосстановитьВсеНастройкиИзХранилища();
	ВостановитьНедавноЗагруженныеФичи(НедавноЗагруженныеФичи);
	СкопироватьНедавноЗагруженныеФичиВИнтерфейс(НедавноЗагруженныеФичи);
КонецПроцедуры

&НаСервере
Функция ПолучитьИДДляОбщегоСохраненияНастроек()
	Стр = "VanessaAutomationUF";
	Если Объект.РежимСамотестирования Тогда
		Стр = "VanessaAutomationUF_autotest";
	КонецЕсли;	 
	
	Если Объект.ВерсияПоставки = "single" Тогда
		Стр = Стр + "_" + Объект.ВерсияПоставки;
	КонецЕсли;	 
	
	Возврат Стр;
КонецФункции	

&НаСервере
Функция ПолучитьИДДляОбщегоСохраненияНастроек_Old()
	Стр = "VanessaBehaviorUF";
	Если Объект.РежимСамотестирования Тогда
		Стр = "VanessaBehaviorUF_autotest";
	КонецЕсли;	 
	
	Если Объект.ВерсияПоставки = "single" Тогда
		Стр = Стр + "_" + Объект.ВерсияПоставки;
	КонецЕсли;	 
	
	Возврат Стр;
КонецФункции	

&НаСервере
Процедура ВосстановитьНастройки(ЭтоLinux)
	
	НадоСохранитьНастройки = Ложь;
	Настройки = ХранилищеОбщихНастроек.Загрузить(ПолучитьИДДляОбщегоСохраненияНастроек());
	Если Настройки = Неопределено Тогда
		Настройки = ХранилищеОбщихНастроек.Загрузить(ПолучитьИДДляОбщегоСохраненияНастроек_Old());
		НадоСохранитьНастройки = Истина;
	КонецЕсли;	 
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		Настройки.Свойство("DebugLog", Объект.DebugLog);
		Настройки.Свойство("ГенерироватьУФ", Объект.ГенерироватьУФ);
		
		Если НЕ Объект.ВыполнениеСценарияИзОбработкиОповещения Тогда
			Настройки.Свойство("КаталогФич", Объект.КаталогФич);
		КонецЕсли;	 
		
		
		Настройки.Свойство("ДелатьОтчетВоВнутреннемФормате", Объект.ДелатьОтчетВоВнутреннемФормате);
		
		Настройки.Свойство("ДелатьОтчетВФорматеАллюр", Объект.ДелатьОтчетВФорматеАллюр);
		Настройки.Свойство("КаталогOutputAllure", Объект.КаталогOutputAllure);
		
		Настройки.Свойство("УровеньОтчета1", Объект.УровеньОтчета1);
		Настройки.Свойство("УровеньОтчета2", Объект.УровеньОтчета2);
		Настройки.Свойство("УровеньОтчета3", Объект.УровеньОтчета3);
		
		Настройки.Свойство("ДелатьОтчетВФорматеjUnit", Объект.ДелатьОтчетВФорматеjUnit);
		Настройки.Свойство("КаталогOutputjUnit", Объект.КаталогOutputjUnit);
		
		Настройки.Свойство("ДелатьОтчетВФорматеCucumberJson", Объект.ДелатьОтчетВФорматеCucumberJson);
		Настройки.Свойство("КаталогOutputCucumberJson", Объект.КаталогOutputCucumberJson);
		
		Настройки.Свойство("текЗначениеОперации", Объект.текЗначениеОперации);
		Настройки.Свойство("КаталогиБиблиотек", Объект.КаталогиБиблиотек);
		Настройки.Свойство("СоздаватьИнструкциюHTML", Объект.СоздаватьИнструкциюHTML);
		Настройки.Свойство("КаталогOutputИнструкцияHTML", Объект.КаталогOutputИнструкцияHTML);
		
		Настройки.Свойство("СоздаватьИнструкциюMarkdown", Объект.СоздаватьИнструкциюMarkdown);
		Настройки.Свойство("КаталогOutputИнструкцияMarkdown", Объект.КаталогOutputИнструкцияMarkdown);
		
		Настройки.Свойство("СоздаватьИнструкциюВидео", Объект.СоздаватьИнструкциюВидео);
		Настройки.Свойство("КаталогOutputИнструкцияВидео", Объект.КаталогOutputИнструкцияВидео);
		
		Настройки.Свойство("СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур", 
								Объект.СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);
								
		Настройки.Свойство("СписокТеговИсключение", Объект.СписокТеговИсключение);
		Настройки.Свойство("СписокТеговОтбор", Объект.СписокТеговОтбор);
		Настройки.Свойство("ДелатьЛогВыполненияСценариевВЖР", Объект.ДелатьЛогВыполненияСценариевВЖР);
		Настройки.Свойство("ДелатьЛогВыполненияСценариевВТекстовыйФайл", Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл);
		Настройки.Свойство("ВыводитьВЛогВыполнениеШагов", Объект.ВыводитьВЛогВыполнениеШагов);
		Настройки.Свойство("ДелатьЛогОшибокВТекстовыйФайл", Объект.ДелатьЛогОшибокВТекстовыйФайл);
		Настройки.Свойство("ИмяФайлаЛогВыполненияСценариев", Объект.ИмяФайлаЛогВыполненияСценариев);
		Настройки.Свойство("ИмяКаталогаЛогОшибок", Объект.ИмяКаталогаЛогОшибок);
		Настройки.Свойство("ПодключитьВнешниеОбработкиДляОтладки", Объект.ПодключитьВнешниеОбработкиДляОтладки);
		Настройки.Свойство("СоздаватьОбластиПриГенерацииКода", Объект.СоздаватьОбластиПриГенерацииКода);
		Настройки.Свойство("КаталогПроекта", Объект.КаталогПроекта);
		
		Настройки.Свойство("ЗапускатьТестКлиентВРежимеОтладки", Объект.ЗапускатьТестКлиентВРежимеОтладки);
		Настройки.Свойство("КлючиОтладки", 						Объект.КлючиОтладки);
		Настройки.Свойство("АдресОтладчика", 					Объект.АдресОтладчика);
		
		Если НЕ Настройки.Свойство("СоздаватьОбластиПриГенерацииКода") Тогда
			Объект.СоздаватьОбластиПриГенерацииКода = Истина;
		КонецЕсли;	 
		
		Если Настройки.Свойство("ВыполнятьШагиАссинхронно") Тогда
			Настройки.Свойство("ВыполнятьШагиАссинхронно", Объект.ВыполнятьШагиАссинхронно);
		КонецЕсли;	
		
		Если Настройки.Свойство("СохранятьКонтекстыПередВыполнениемШагов") Тогда
			Настройки.Свойство("СохранятьКонтекстыПередВыполнениемШагов", Объект.СохранятьКонтекстыПередВыполнениемШагов);
		КонецЕсли;	
		
		Настройки.Свойство("ВыводитьТекстМодуляВместоПерегенерацииEPF", Объект.ВыводитьТекстМодуляВместоПерегенерацииEPF);
		
		Если Настройки.Свойство("КомандаСделатьСкриншот") Тогда
			Настройки.Свойство("КомандаСделатьСкриншот", Объект.КомандаСделатьСкриншот);
		КонецЕсли;
		Если ПустаяСтрока(Объект.КомандаСделатьСкриншот) Тогда
			Если ЭтоLinux Тогда
				Объект.КомандаСделатьСкриншот = "import -window root";
			Иначе
				Объект.КомандаСделатьСкриншот = """C:\Program Files (x86)\IrfanView\i_view32.exe"" /capture=1 /convert=";
			КонецЕсли;	 
		КонецЕсли;	 
		
		Настройки.Свойство("ДелатьСкриншотПриВозникновенииОшибки", Объект.ДелатьСкриншотПриВозникновенииОшибки);
		Настройки.Свойство("СниматьСкриншотКаждогоОкна1С", Объект.СниматьСкриншотКаждогоОкна1С);
		Настройки.Свойство("КаталогOutputСкриншоты", Объект.КаталогOutputСкриншоты);
		
		Настройки.Свойство("ИнтервалВыполненияШагаЗаданныйПользователем", Объект.ИнтервалВыполненияШагаЗаданныйПользователем);
		
		//настройки записи видео
		Если Настройки.Свойство("ЗаписьВидеоКомандаНачатьЗаписьВидео") Тогда
			Настройки.Свойство("ЗаписьВидеоКомандаНачатьЗаписьВидео", Объект.ЗаписьВидеоКомандаНачатьЗаписьВидео);
		Иначе
			Объект.ЗаписьВидеоКомандаНачатьЗаписьВидео = """C:\Program Files (x86)\VideoLAN\VLC\vlc.exe"" screen://  -I rc --rc-quiet --rc-host=127.0.0.1:8082 --nommx :screen-mouse-image=""<screenmouseimage>"" :screen-fps=<fps> :screen-width=<screenwidth> :screen-height=<screenheight> :screen-top=0 :screen-left=0 :screen-caching=100 :sout=#transcode{vcodec=mp4v,vb=400,fps=<fps>,scale=1,width=<screenwidth>,height=<screenheight>,acodec=none}:duplicate{dst=std{access=file,mux=mp4,dst=<dst>}}";
		КонецЕсли;	 
		//"C:\Program Files (x86)\VideoLAN\VLC\vlc.exe" screen://  -I rc --rc-quiet --rc-host=127.0.0.1:8082 --nommx :screen-mouse-image="<screenmouseimage>" :screen-fps=<fps> :screen-width=<screenwidth> :screen-height=<screenheight> :screen-top=0 :screen-left=0 :screen-caching=100 :sout=#transcode{vcodec=mp4v,vb=400,fps=<fps>,scale=1,width=<screenwidth>,height=<screenheight>,acodec=none}:duplicate{dst=std{access=file,mux=mp4,dst=<dst>}}
		
		Настройки.Свойство("ЗаписьВидеоЭкранШирина", Объект.ЗаписьВидеоЭкранШирина);
		Настройки.Свойство("ЗаписьВидеоЭкранВысота", Объект.ЗаписьВидеоЭкранВысота);
		Настройки.Свойство("ЗаписьВидеоКоличествоКадров", Объект.ЗаписьВидеоКоличествоКадров);
		Настройки.Свойство("ЗаписьВидеоФайлКурсораМышки", Объект.ЗаписьВидеоФайлКурсораМышки);
		Настройки.Свойство("ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", Объект.ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм);
		Настройки.Свойство("ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", 
								Объект.ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы);
								
		Настройки.Свойство("ЗаписьВидеоКаталогДляВременныхФайлов", Объект.ЗаписьВидеоКаталогДляВременныхФайлов);
		Настройки.Свойство("ЗаписьВидеоФайлВодянойЗнак", Объект.ЗаписьВидеоФайлВодянойЗнак);
		Настройки.Свойство("ЗаписьВидеоКомандаFfmpeg", Объект.ЗаписьВидеоКомандаFfmpeg);
		Настройки.Свойство("ЗаписьВидеоКомандаConvert", Объект.ЗаписьВидеоКомандаConvert);
		Настройки.Свойство("ЗаписьВидеоКаталогМузыки", Объект.ЗаписьВидеоКаталогМузыки);
		Настройки.Свойство("ЗаписьВидеоГромкостьМузыки", Объект.ЗаписьВидеоГромкостьМузыки);
		Настройки.Свойство("ЗаписьВидеоДелатьНаложениеTTS", Объект.ЗаписьВидеоДелатьНаложениеTTS);
		Настройки.Свойство("ЗаписьВидеоПутьКДвижкуTTS", Объект.ЗаписьВидеоПутьКДвижкуTTS);
		Настройки.Свойство("ЗаписьВидеоИмяTTS", Объект.ЗаписьВидеоИмяTTS);
		Настройки.Свойство("ЗаписьВидеоСловарьЗамен", Объект.ЗаписьВидеоСловарьЗамен);
		Настройки.Свойство("ЗаписьВидеоГруппаШаговКакШаг", Объект.ЗаписьВидеоГруппаШаговКакШаг);
		Настройки.Свойство("ЗаписьВидеоОтключитьМасштабированиеШаговПоВремени", Объект.ЗаписьВидеоОтключитьМасштабированиеШаговПоВремени);
		Настройки.Свойство("ЗаписьВидеоПодсвечиватьНажатияМышки", Объект.ЗаписьВидеоПодсвечиватьНажатияМышки);
		Настройки.Свойство("ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи", Объект.ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи);
		Настройки.Свойство("ЗаписьВидеоОтключитьСлайдСценария", Объект.ЗаписьВидеоОтключитьСлайдСценария);
		Настройки.Свойство("ЗаписьВидеоЭмулироватьВводСКлавиатуры", Объект.ЗаписьВидеоЭмулироватьВводСКлавиатуры);
		Настройки.Свойство("ЗаписьВидеоСкрытьСлужебныеОкна", Объект.ЗаписьВидеоСкрытьСлужебныеОкна);

		
		Настройки.Свойство("ОстановкаПриВозникновенииОшибки", Объект.ОстановкаПриВозникновенииОшибки);
		Настройки.Свойство("ПоказыватьНомерСтрокиДереваПриВозникновенииОшибки", Объект.ПоказыватьНомерСтрокиДереваПриВозникновенииОшибки);
		Настройки.Свойство("КоличествоСекундПоискаОкна", Объект.КоличествоСекундПоискаОкна);
		Если Объект.КоличествоСекундПоискаОкна = 0 Тогда
			Объект.КоличествоСекундПоискаОкна = 10;
		КонецЕсли;	 
		
		Настройки.Свойство("КоличествоПопытокВыполненияДействия", Объект.КоличествоПопытокВыполненияДействия);
		Если Объект.КоличествоПопытокВыполненияДействия = 0 Тогда
			Объект.КоличествоПопытокВыполненияДействия = 2;
		КонецЕсли;	 
		
		Если Объект.ЗагрузкаФичПриОткрытии <> "Не загружать" Тогда
			//Если значение равно "Не загружать", значит вызывающая система сообщила, что не надо загружать фичи при открытии.
			Настройки.Свойство("ЗагрузкаФичПриОткрытии", Объект.ЗагрузкаФичПриОткрытии);
			Если Не ЗначениеЗаполнено(Объект.ЗагрузкаФичПриОткрытии) Тогда
				Объект.ЗагрузкаФичПриОткрытии = "Загружать";
			КонецЕсли;	 
		КонецЕсли;	 
		
		Настройки.Свойство("СгенерированныйXML", Объект.СгенерированныйXML);
		Настройки.Свойство("СгенерированныйКод", Объект.СгенерированныйКод);
		Настройки.Свойство("СгенерированныйСценарий", Объект.СгенерированныйСценарий);
		Настройки.Свойство("СгенерированныйСценарийКод", Объект.СгенерированныйСценарийКод);
		
		Настройки.Свойство("ВерсияПлатформыДляГенерацииEPF", Объект.ВерсияПлатформыДляГенерацииEPF);
		
		Настройки.Свойство("ДополнительныеПараметры", Объект.ДополнительныеПараметры);
		Если Объект.ДополнительныеПараметры = Неопределено Тогда
			Объект.ДополнительныеПараметры = Новый Структура;
		КонецЕсли;
		
		Настройки.Свойство("ТаймаутЗапуска1С", Объект.ТаймаутЗапуска1С);
		Если Объект.ТаймаутЗапуска1С = 0 Тогда
			Объект.ТаймаутЗапуска1С = 25;
		КонецЕсли;
		
		Настройки.Свойство("ТаймаутДляАсинхронныхШагов", Объект.ТаймаутДляАсинхронныхШагов);
		
		Настройки.Свойство("БезопасноеВыполнениеШагов", Объект.БезопасноеВыполнениеШагов);
		
		
		Настройки.Свойство("ДиапазонПортовTestclient", Объект.ДиапазонПортовTestclient);
		Настройки.Свойство("ОсновнойЯзык", Объект.ЯзыкГенератораGherkin);
		ВерсияVB = Неопределено;
		Настройки.Свойство("ВерсияVB", ВерсияVB);
		Если НЕ ЗначениеЗаполнено(ВерсияVB) Тогда
			СброситьКешИзвестныхStepDefinitionСервер();
			НадоСохранитьНастройки = Истина;
		КонецЕсли;	 
		
		
		
		Если Не ЗначениеЗаполнено(Объект.ЯзыкГенератораGherkin) Тогда
			Объект.ЯзыкГенератораGherkin = "ru";
		КонецЕсли;	 
		
		Настройки.Свойство("КомандаОткрытияФичиВТекстовомРедакторе", Объект.КомандаОткрытияФичиВТекстовомРедакторе);
		Настройки.Свойство("ЗапрашиватьПодтверждениеПриЗакрытии", ЗапрашиватьПодтверждениеПриЗакрытии);
		Настройки.Свойство("КаталогОтносительноКоторогоНадоСтроитьИерархию", Объект.КаталогОтносительноКоторогоНадоСтроитьИерархию);
		
		Настройки.Свойство("ИспользоватьSikuliXСервер", Объект.ИспользоватьSikuliXСервер);
		Настройки.Свойство("КаталогиСкриптовSikuliX", Объект.КаталогиСкриптовSikuliX);
		
		Настройки.Свойство("ИскатьЭлементыФормыПоИмени", Объект.ИскатьЭлементыФормыПоИмени);
		
		Настройки.Свойство("ЗапускатьКлиентТестированияСМаксимизированнымОкном", Объект.ЗапускатьКлиентТестированияСМаксимизированнымОкном);
		
		Если Настройки.Свойство("ТегTreeВключенПоУмолчанию") Тогда
			Настройки.Свойство("ТегTreeВключенПоУмолчанию", Объект.ТегTreeВключенПоУмолчанию);
		Иначе	
			Объект.ТегTreeВключенПоУмолчанию = Истина;
		КонецЕсли;	 
		
		Если НадоСохранитьНастройки Тогда
			СохранитьНастройки();
		КонецЕсли;	 
		
	Иначе	//значит это первый запуск VA
		Объект.ГенерироватьУФ = Истина;
		Если СокрЛП(Объект.КаталогИнструментов) <> "" Тогда
			Если НадоДобавитьСтандартнуюБиблиотеку(Объект.ВерсияПоставки) Тогда
				Объект.КаталогиБиблиотек.Добавить(Объект.КаталогИнструментов + ПолучитьРазделительПути() + "features" 
					+ ПолучитьРазделительПути() + "Libraries");
			КонецЕсли;	 
			Объект.СписокТеговИсключение.Добавить("IgnoreOnCIMainBuild");
		КонецЕсли;	 
		
		Если ЭтоLinux Тогда
			Объект.КомандаСделатьСкриншот = "import -window root";
		Иначе
			Объект.КомандаСделатьСкриншот = """C:\Program Files (x86)\IrfanView\i_view32.exe"" /capture=1 /convert=";
		КонецЕсли;
		
		Если Объект.ЗагрузкаФичПриОткрытии <> "Не загружать" Тогда
			//Если значение равно "Не загружать", значит вызывающая система сообщила, что не надо загружать фичи при открытии.
			Если Не ЗначениеЗаполнено(Объект.ЗагрузкаФичПриОткрытии) Тогда
				Объект.ЗагрузкаФичПриОткрытии = "Загружать";
			КонецЕсли;	 
		КонецЕсли;	 
		Объект.ТаймаутЗапуска1С = 25;
		Объект.ЯзыкГенератораGherkin     = "ru";
		Объект.ТегTreeВключенПоУмолчанию = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;  
	
	Настройки = Новый Структура;
	Настройки.Вставить("DebugLog", Объект.DebugLog);
	//Настройки.Вставить("GenerateEpf", Объект.GenerateEpf);
	//Настройки.Вставить("TestRun", Объект.TestRun);
	Настройки.Вставить("ГенерироватьУФ", Объект.ГенерироватьУФ);
	//Настройки.Вставить("КаталогИнструментов", Объект.КаталогИнструментов);
	Настройки.Вставить("КаталогФич", Объект.КаталогФич);
	
	Настройки.Вставить("ДелатьОтчетВФорматеАллюр", Объект.ДелатьОтчетВФорматеАллюр);
	Настройки.Вставить("КаталогOutputAllure", Объект.КаталогOutputAllure);
	
	Настройки.Вставить("УровеньОтчета1", Объект.УровеньОтчета1);
	Настройки.Вставить("УровеньОтчета2", Объект.УровеньОтчета2);
	Настройки.Вставить("УровеньОтчета3", Объект.УровеньОтчета3);
	
	Настройки.Вставить("ДелатьОтчетВоВнутреннемФормате", Объект.ДелатьОтчетВоВнутреннемФормате);
	
	Настройки.Вставить("ДелатьОтчетВФорматеjUnit", Объект.ДелатьОтчетВФорматеjUnit);
	Настройки.Вставить("КаталогOutputjUnit", Объект.КаталогOutputjUnit);
	
	Настройки.Вставить("ДелатьОтчетВФорматеCucumberJson", Объект.ДелатьОтчетВФорматеCucumberJson);
	Настройки.Вставить("КаталогOutputCucumberJson", Объект.КаталогOutputCucumberJson);
	
	Настройки.Вставить("текЗначениеОперации", Объект.текЗначениеОперации);
	Настройки.Вставить("КаталогиБиблиотек", Объект.КаталогиБиблиотек);
	
	Настройки.Вставить("СоздаватьИнструкциюHTML", Объект.СоздаватьИнструкциюHTML);
	Настройки.Вставить("КаталогOutputИнструкцияHTML", Объект.КаталогOutputИнструкцияHTML);
	
	Настройки.Вставить("СоздаватьИнструкциюMarkdown", Объект.СоздаватьИнструкциюMarkdown);
	Настройки.Вставить("КаталогOutputИнструкцияMarkdown", Объект.КаталогOutputИнструкцияMarkdown);
	
	Настройки.Вставить("СоздаватьИнструкциюВидео", Объект.СоздаватьИнструкциюВидео);
	Настройки.Вставить("КаталогOutputИнструкцияВидео", Объект.КаталогOutputИнструкцияВидео);
	
	Настройки.Вставить("СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур", Объект.СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);
	
	Настройки.Вставить("СписокТеговИсключение", Объект.СписокТеговИсключение);
	Настройки.Вставить("СписокТеговОтбор", Объект.СписокТеговОтбор);
	
	Настройки.Вставить("ДелатьЛогВыполненияСценариевВЖР", Объект.ДелатьЛогВыполненияСценариевВЖР);
	Настройки.Вставить("ДелатьЛогВыполненияСценариевВТекстовыйФайл", Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл);
	Настройки.Вставить("ВыводитьВЛогВыполнениеШагов", Объект.ВыводитьВЛогВыполнениеШагов);
	Настройки.Вставить("ДелатьЛогОшибокВТекстовыйФайл", Объект.ДелатьЛогОшибокВТекстовыйФайл);
	Настройки.Вставить("ИмяФайлаЛогВыполненияСценариев", Объект.ИмяФайлаЛогВыполненияСценариев);
	Настройки.Вставить("ИмяКаталогаЛогОшибок", Объект.ИмяКаталогаЛогОшибок);
	Настройки.Вставить("ПодключитьВнешниеОбработкиДляОтладки", Объект.ПодключитьВнешниеОбработкиДляОтладки);
	
	Настройки.Вставить("ВыполнятьШагиАссинхронно", Объект.ВыполнятьШагиАссинхронно);
	
	Настройки.Вставить("СохранятьКонтекстыПередВыполнениемШагов", Объект.СохранятьКонтекстыПередВыполнениемШагов);
	
	Настройки.Вставить("СоздаватьОбластиПриГенерацииКода", Объект.СоздаватьОбластиПриГенерацииКода);
	
	Настройки.Вставить("КаталогИнструментов", Объект.КаталогИнструментов);
	
	Настройки.Вставить("ВыводитьТекстМодуляВместоПерегенерацииEPF", Объект.ВыводитьТекстМодуляВместоПерегенерацииEPF);
	
	Настройки.Вставить("КомандаСделатьСкриншот", Объект.КомандаСделатьСкриншот);
	
	Настройки.Вставить("ДелатьСкриншотПриВозникновенииОшибки", Объект.ДелатьСкриншотПриВозникновенииОшибки);
	Настройки.Вставить("СниматьСкриншотКаждогоОкна1С", Объект.СниматьСкриншотКаждогоОкна1С);
	Настройки.Вставить("КаталогOutputСкриншоты", Объект.КаталогOutputСкриншоты);
	
	Настройки.Вставить("ИнтервалВыполненияШагаЗаданныйПользователем", Объект.ИнтервалВыполненияШагаЗаданныйПользователем);
	Настройки.Вставить("КаталогПроекта", Объект.КаталогПроекта);
	
	Настройки.Вставить("ЗапускатьТестКлиентВРежимеОтладки", Объект.ЗапускатьТестКлиентВРежимеОтладки);
	Настройки.Вставить("КлючиОтладки", 						Объект.КлючиОтладки);
	Настройки.Вставить("АдресОтладчика", 					Объект.АдресОтладчика);
	
	//запись видео
	Настройки.Вставить("ЗаписьВидеоКомандаНачатьЗаписьВидео", Объект.ЗаписьВидеоКомандаНачатьЗаписьВидео);
	Настройки.Вставить("ЗаписьВидеоЭкранШирина", Объект.ЗаписьВидеоЭкранШирина);
	Настройки.Вставить("ЗаписьВидеоЭкранВысота", Объект.ЗаписьВидеоЭкранВысота);
	Настройки.Вставить("ЗаписьВидеоКоличествоКадров", Объект.ЗаписьВидеоКоличествоКадров);
	Настройки.Вставить("ЗаписьВидеоФайлКурсораМышки", Объект.ЗаписьВидеоФайлКурсораМышки);
	Настройки.Вставить("ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", Объект.ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм);
	Настройки.Вставить("ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", Объект.ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы);
	Настройки.Вставить("ЗаписьВидеоКаталогДляВременныхФайлов", Объект.ЗаписьВидеоКаталогДляВременныхФайлов);
	Настройки.Вставить("ЗаписьВидеоФайлВодянойЗнак", Объект.ЗаписьВидеоФайлВодянойЗнак);
	Настройки.Вставить("ЗаписьВидеоКомандаFfmpeg", Объект.ЗаписьВидеоКомандаFfmpeg);
	Настройки.Вставить("ЗаписьВидеоКомандаConvert", Объект.ЗаписьВидеоКомандаConvert);
	Настройки.Вставить("ЗаписьВидеоКаталогМузыки", Объект.ЗаписьВидеоКаталогМузыки);
	Настройки.Вставить("ЗаписьВидеоГромкостьМузыки", Объект.ЗаписьВидеоГромкостьМузыки);
	Настройки.Вставить("ЗаписьВидеоДелатьНаложениеTTS", Объект.ЗаписьВидеоДелатьНаложениеTTS);
	Настройки.Вставить("ЗаписьВидеоПутьКДвижкуTTS", Объект.ЗаписьВидеоПутьКДвижкуTTS);
	Настройки.Вставить("ЗаписьВидеоИмяTTS", Объект.ЗаписьВидеоИмяTTS);
	Настройки.Вставить("ЗаписьВидеоСловарьЗамен", Объект.ЗаписьВидеоСловарьЗамен);
	Настройки.Вставить("ЗаписьВидеоГруппаШаговКакШаг", Объект.ЗаписьВидеоГруппаШаговКакШаг);
	Настройки.Вставить("ЗаписьВидеоОтключитьМасштабированиеШаговПоВремени", Объект.ЗаписьВидеоОтключитьМасштабированиеШаговПоВремени);
	Настройки.Вставить("ЗаписьВидеоПодсвечиватьНажатияМышки", Объект.ЗаписьВидеоПодсвечиватьНажатияМышки);
	Настройки.Вставить("ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи", Объект.ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи);
	Настройки.Вставить("ЗаписьВидеоОтключитьСлайдСценария", Объект.ЗаписьВидеоОтключитьСлайдСценария);
	Настройки.Вставить("ЗаписьВидеоЭмулироватьВводСКлавиатуры", Объект.ЗаписьВидеоЭмулироватьВводСКлавиатуры);
	Настройки.Вставить("ЗаписьВидеоСкрытьСлужебныеОкна", Объект.ЗаписьВидеоСкрытьСлужебныеОкна);
	
	Настройки.Вставить("ОстановкаПриВозникновенииОшибки", Объект.ОстановкаПриВозникновенииОшибки);
	Настройки.Вставить("ПоказыватьНомерСтрокиДереваПриВозникновенииОшибки", Объект.ПоказыватьНомерСтрокиДереваПриВозникновенииОшибки);
	Настройки.Вставить("КоличествоСекундПоискаОкна", Объект.КоличествоСекундПоискаОкна);
	Настройки.Вставить("КоличествоПопытокВыполненияДействия", Объект.КоличествоПопытокВыполненияДействия);
	Настройки.Вставить("ЗагрузкаФичПриОткрытии", Объект.ЗагрузкаФичПриОткрытии);
	
	Настройки.Вставить("ЗагрузкаФичПриОткрытии", Объект.ЗагрузкаФичПриОткрытии);
	
	Настройки.Вставить("СгенерированныйXML", Объект.СгенерированныйXML);
	Настройки.Вставить("СгенерированныйКод", Объект.СгенерированныйКод);
	Настройки.Вставить("СгенерированныйСценарий", Объект.СгенерированныйСценарий);
	Настройки.Вставить("СгенерированныйСценарийКод", Объект.СгенерированныйСценарийКод);
	
	Настройки.Вставить("ВерсияПлатформыДляГенерацииEPF", Объект.ВерсияПлатформыДляГенерацииEPF);
	
	Настройки.Вставить("ДополнительныеПараметры", Объект.ДополнительныеПараметры);
	Настройки.Вставить("ТаймаутЗапуска1С", Объект.ТаймаутЗапуска1С);
	Настройки.Вставить("ТаймаутДляАсинхронныхШагов", Объект.ТаймаутДляАсинхронныхШагов);
	Настройки.Вставить("БезопасноеВыполнениеШагов", Объект.БезопасноеВыполнениеШагов);
	Настройки.Вставить("ДиапазонПортовTestclient", Объект.ДиапазонПортовTestclient);
	Настройки.Вставить("ОсновнойЯзык", Объект.ЯзыкГенератораGherkin);
	Настройки.Вставить("ВерсияVB", ПолучитьВерсиюОбработкиСервер());
	
	Настройки.Вставить("КомандаОткрытияФичиВТекстовомРедакторе", Объект.КомандаОткрытияФичиВТекстовомРедакторе);
	
	Настройки.Вставить("ЗапрашиватьПодтверждениеПриЗакрытии", ЗапрашиватьПодтверждениеПриЗакрытии);
	Настройки.Вставить("КаталогОтносительноКоторогоНадоСтроитьИерархию", Объект.КаталогОтносительноКоторогоНадоСтроитьИерархию);
	
	Настройки.Вставить("ИспользоватьSikuliXСервер", Объект.ИспользоватьSikuliXСервер);
	Настройки.Вставить("КаталогиСкриптовSikuliX", Объект.КаталогиСкриптовSikuliX);
	
	Настройки.Вставить("ИскатьЭлементыФормыПоИмени", Объект.ИскатьЭлементыФормыПоИмени);
	Настройки.Вставить("ЗапускатьКлиентТестированияСМаксимизированнымОкном", Объект.ЗапускатьКлиентТестированияСМаксимизированнымОкном);
	Настройки.Вставить("ТегTreeВключенПоУмолчанию", Объект.ТегTreeВключенПоУмолчанию);
	
	ХранилищеОбщихНастроек.Сохранить(ПолучитьИДДляОбщегоСохраненияНастроек(), , Настройки);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьОбработкуНаВозможностьПодключения(ИмяОбработки)
	Обработка = ВнешниеОбработки.Создать(ИмяОбработки,Ложь);
	Попытка
		ПараметрыОбработки = Обработка.ПараметрыОбработки();
	Исключение
		//значит параметры не указаны
		Возврат;
	КонецПопытки;
	
	IgnoreOn82 = Ложь;
	ПараметрыОбработки.Свойство("IgnoreOn82",IgnoreOn82);
	
	Если IgnoreOn82 Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если Лев(СистемнаяИнформация.ВерсияПриложения,4) = "8.2." Тогда
			ИмяОбработки = Неопределено;
		Иначе
			Попытка
				ТекущийРежимСовместимости = Вычислить("Метаданные.РежимСовместимости");
				РежимыСовестимости = Метаданные.СвойстваОбъектов.РежимСовместимости;
			Исключение
				Возврат;
			КонецПопытки;
			
			Если ТекущийРежимСовместимости = РежимыСовестимости.Версия8_1 Тогда
				ИмяОбработки = Неопределено;
			ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_2_13 Тогда
				ИмяОбработки = Неопределено;
			ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_2_16 Тогда
				ИмяОбработки = Неопределено;
			КонецЕсли;	 

		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОбработкуИзФайлаЧерезМетодСоздать(ДополнительныеПараметры,ИмяОбработки)
	Обработка = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ИмяФайла") Тогда
			Файл = Новый Файл(ДополнительныеПараметры.ИмяФайла);
			Если Файл.Существует() Тогда
				Обработка = ВнешниеОбработки.Создать(ДополнительныеПараметры.ИмяФайла, Ложь);
				ИмяОбработки = Обработка.Метаданные().Имя;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Обработка; 
КонецФункции	 

&НаСервере
Процедура ДобавитьПустойСнипетВТаблицуИзвестныхStepDefinition(ИмяФайла, ВерсияФайла)
	ДобавитьСнипетВТаблицуИзвестныхStepDefinitionВызовСКлиента("ПустойСнипет" + ИмяФайла, "", ИмяФайла, Новый Массив, НРег("ПустойСнипет" + ИмяФайла), "", "", ВерсияФайла, "", "", Неопределено);	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСнипетВТаблицуИзвестныхStepDefinitionВызовСКлиента(ID, СтрокаРеальнойПроцедуры, ИмяФайла, МассивПараметров, СтрокаДляПоиска, ПредставлениеТеста, Транзакция, ВерсияФайла, ОписаниеШага, ТипШага, ТипШагаВДереве)
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	
	СтрТзнТаблицаИзвестныхStepDefinition = ТзнТаблицаИзвестныхStepDefinition.Найти(СтрокаДляПоиска, "СтрокаДляПоиска");
	Если СтрТзнТаблицаИзвестныхStepDefinition = Неопределено Тогда
		ДобавитьСнипетВТаблицуИзвестныхStepDefinitionССервера(ТзнТаблицаИзвестныхStepDefinition, ID, СтрокаРеальнойПроцедуры, ИмяФайла, МассивПараметров, СтрокаДляПоиска, ПредставлениеТеста, Транзакция, ВерсияФайла, ОписаниеШага, ТипШага, ТипШагаВДереве);
		ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition, "ТаблицаИзвестныхStepDefinition");
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСнипетВТаблицуИзвестныхStepDefinitionССервера(ТзнТаблицаИзвестныхStepDefinition, ID, СтрокаРеальнойПроцедуры, ИмяФайла, МассивПараметров, СтрокаДляПоиска, ПредставлениеТеста, Транзакция, ВерсияФайла, ОписаниеШага, ТипШага, ТипШагаВДереве)
	СтрТаблицаИзвестныхStepDefinition                         = ТзнТаблицаИзвестныхStepDefinition.Добавить();
	СтрТаблицаИзвестныхStepDefinition.ID                      = ID;
	СтрТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры = СтрокаРеальнойПроцедуры;
	
	УниверсальноеПолноеИмя = ИмяФайла;

	Попытка
		Файл = Новый Файл(ИмяФайла);		
		УниверсальноеПолноеИмя = УниверсальноеПолноеИмяФайла(Файл);
	Исключение
	КонецПопытки;

	СтрТаблицаИзвестныхStepDefinition.ИмяФайла                = УниверсальноеПолноеИмя;

	СтрТаблицаИзвестныхStepDefinition.Параметры               = МассивПараметров;
	СтрТаблицаИзвестныхStepDefinition.СтрокаДляПоиска         = СтрокаДляПоиска;
	СтрТаблицаИзвестныхStepDefinition.ПредставлениеТеста      = ПредставлениеТеста;
	СтрТаблицаИзвестныхStepDefinition.Транзакция              = Транзакция;	
	СтрТаблицаИзвестныхStepDefinition.ВерсияФайла             = ВерсияФайла;	
	СтрТаблицаИзвестныхStepDefinition.ОписаниеШага            = ОписаниеШага;
	СтрТаблицаИзвестныхStepDefinition.ТипШага                 = ТипШага;
	СтрТаблицаИзвестныхStepDefinition.ТипШагаВДереве          = ТипШагаВДереве;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СравнитьПутиФайлов(Знач Путь1, Знач Путь2)
	
	Возврат УниверсальноеПолноеИмяФайла(Путь1, Истина) = УниверсальноеПолноеИмяФайла(Путь2, Истина);


КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьПутьКФайлуКСтандарту(Знач Путь)

	Возврат УниверсальноеПолноеИмяФайла(Путь);

КонецФункции	

&НаСервереБезКонтекста
Процедура ДобавитьСнипет(Знач Снипет, Знач ИмяФайла, ВерсияФайла, БылиОшибки, ТзнТаблицаИзвестныхStepDefinition,СтруктураПараметров)
	
	ИмяФайла                = УниверсальноеПолноеИмяФайла(ИмяФайла);
	СтрокаРеальнойПроцедуры = СокрЛП(Снипет.ИмяПроцедуры);
	ID                      = СокрЛП(Снипет.Снипет);
	
	//уберем слово "Экспорт"
	Если Прав(НРег(СтрокаРеальнойПроцедуры), 7) = "экспорт" Тогда
		СтрокаРеальнойПроцедуры = Лев(СтрокаРеальнойПроцедуры, СтрДлина(СтрокаРеальнойПроцедуры) - 7);
		СтрокаРеальнойПроцедуры = СокрЛП(СтрокаРеальнойПроцедуры);
	КонецЕсли;
	
	Если Лев(НРег(СтрокаРеальнойПроцедуры), 9) = "процедура" Тогда
		СтрокаРеальнойПроцедуры = СокрЛП(Сред(СтрокаРеальнойПроцедуры, 10));
	КонецЕсли;
	
	Поз = Найти(ID, "(");
	СтрПараметры = Сред(ID, Поз + 1);
	СтрПараметры = Лев(СтрПараметры, СтрДлина(СтрПараметры) - 1);
	
	МассивПром = РазложитьСтрокуВМассивПодстрок(СтрПараметры, ",");
	МассивПараметров = Новый Массив;
	Для Каждого Элем Из МассивПром Цикл
		СтруктураПарам = Новый Структура;
		Тип = "Строка";
		Если Найти(НРег(Элем), "число") > 0 Тогда
			Тип = "Число";
		КонецЕсли;
		Если Найти(НРег(Элем), "дата") > 0 Тогда
			Тип = "Дата";
		КонецЕсли;
		СтруктураПарам.Вставить("Тип", Тип);
		МассивПараметров.Добавить(СтруктураПарам);
	КонецЦикла;
	
	ПромСтр = ТзнТаблицаИзвестныхStepDefinition.Найти(ID, "ID");
	Если ПромСтр <> Неопределено Тогда
		Если СравнитьПутиФайлов(ПромСтр.ИмяФайла, ИмяФайла) Тогда //значит этот снипет из того же файла
			Возврат;
		КонецЕсли;	
	КонецЕсли;	 
	Если ПромСтр <> Неопределено Тогда
		БылиОшибки = Истина;
		ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("Ошибка в файле %1, снипет %2 уже был в %3",СтруктураПараметров.ТекстСообщенийПользователю);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайла);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ID);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ПромСтр.ИмяФайла);
		Сообщить(ТекстСообщения); 
		Возврат;
	КонецЕсли;
	
	
	Если Не Снипет.Свойство("ОписаниеШага") Тогда
		ОписаниеШага        = "";
	Иначе	
		ОписаниеШага        = Снипет.ОписаниеШага;
	КонецЕсли;	 
	Если Не Снипет.Свойство("ТипШага") Тогда
		ТипШага             = "";
	Иначе	
		ТипШага             = Снипет.ТипШага;
	КонецЕсли;	 
	
	ТипШагаВДереве = Неопределено;
	Если Снипет.Свойство("ТипШагаВДереве") Тогда
		ТипШагаВДереве = Снипет.ТипШагаВДереве;
	КонецЕсли;	 
	
	ДобавитьСнипетВТаблицуИзвестныхStepDefinitionССервера(ТзнТаблицаИзвестныхStepDefinition, ID, СтрокаРеальнойПроцедуры, ИмяФайла, МассивПараметров, НРег(Лев(ID, Найти(ID, "(") - 1)), Снипет.ПредставлениеТеста, Снипет.Транзакция, ВерсияФайла, ОписаниеШага, ТипШага, ТипШагаВДереве);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСнипетыСерверМассивом(ДанныеДляСнипетов, ДопПараметры)
	Для Каждого Данные Из ДанныеДляСнипетов Цикл
		Если Данные.МассивСнипетовИзОбработки.Количество() = 0 Тогда
			ДобавитьПустойСнипетВТаблицуИзвестныхStepDefinition(Данные.ИмяФайла, Данные.ВерсияФайла);
		Иначе	
			БылиОшибки = Ложь;
			ДобавитьСнипетыСервер(Данные.МассивСнипетовИзОбработки, Данные.ИмяФайла, Данные.ВерсияФайла, БылиОшибки, ДопПараметры);
		КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры 

&НаСервере
Процедура ДобавитьСнипетыСервер(МассивСнипетовИзОбработки, ИмяФайла, ВерсияФайла, БылиОшибки,СтруктураПараметров)
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	
	Для каждого ЭлементСодержащийСнипеты Из МассивСнипетовИзОбработки Цикл
		Если ТипЗнч(ЭлементСодержащийСнипеты) = Тип("Структура") и ЭлементСодержащийСнипеты.Свойство("МассивСнипетовИзОбработки") Тогда
			Для Каждого Снипет Из ЭлементСодержащийСнипеты.МассивСнипетовИзОбработки Цикл
				ДобавитьСнипет(Снипет, ЭлементСодержащийСнипеты.ИмяВнутреннейФормы, ВерсияФайла, БылиОшибки, ТзнТаблицаИзвестныхStepDefinition,СтруктураПараметров);
			КонецЦикла;	
		Иначе	
			ДобавитьСнипет(ЭлементСодержащийСнипеты, ИмяФайла, ВерсияФайла, БылиОшибки, ТзнТаблицаИзвестныхStepDefinition,СтруктураПараметров);
		КонецЕсли;	 
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition, "ТаблицаИзвестныхStepDefinition");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИзТаблицаИзвестныхStepDefinitionДанныеПоФайлуСервер(ИмяФайла)
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяФайла", ИмяФайла);
	МассивСтрок = ТзнТаблицаИзвестныхStepDefinition.НайтиСтроки(Отбор);
	
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		ТзнТаблицаИзвестныхStepDefinition.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition, "ТаблицаИзвестныхStepDefinition");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуКонтекстовОбработокНеПодключаяОбработки(Файл)
	СтрТаблицаКонтекстовОбработок = Новый Структура;
	УниверсальноеПолноеИмя = УниверсальноеПолноеИмяФайла(Файл.ПолноеИмя);
	СтрТаблицаКонтекстовОбработок.Вставить("ИмяФайла", УниверсальноеПолноеИмя);
	СтрТаблицаКонтекстовОбработок.Вставить("Обработка", Неопределено);
	
	ТаблицаКонтекстовОбработок.Добавить(СтрТаблицаКонтекстовОбработок);
	МассивИменКонтекстовОбработок.Добавить(Нрег(УниверсальноеПолноеИмя));
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеШага(ИмяФайла,РезультатПрохожденияШага)
	ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ИмяФайла);
	ПомещаемыеФайлы = Новый Массив;
	ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
	
	ПараметрыЗавершения = Новый Структура;	
	ПараметрыЗавершения.Вставить("ИмяФайла",ИмяФайла);
	ПараметрыЗавершения.Вставить("РезультатПрохожденияШага",РезультатПрохожденияШага);
	
	Файл = Новый Файл(ИмяФайла); 
	
	ДанныеФайлов = Новый Соответствие;
	ДанныеФайлов.Вставить(ИмяФайла,Новый Структура("Имя,ИмяФайла,ВерсияФайла",Файл.Имя,ИмяФайла,Неопределено));
	
	ПараметрыЗавершения.Вставить("ДанныеФайлов",ДанныеФайлов);
	
	Выполнить("НачатьПомещениеФайлов(Новый ОписаниеОповещения(""ОбработчикПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеШага"", ЭтаФорма, ПараметрыЗавершения),
		|ПомещаемыеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор)");
КонецПроцедуры 

&НаКлиенте
Процедура ОбработчикПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеШага(Знач ПомещенныеФайлы, Знач ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Вставить("ПолучатьСнипеты",Ложь);
	ПодключитьОбработкиКлиент(ПомещенныеФайлы,ДополнительныеПараметры);
	
	АдресСнипета = ДополнительныеПараметры.ИмяФайла;
	ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
	Если ИД = Неопределено Тогда
		БылиОшибки = Ложь;
		ПодключитьКонтекстОбработкиКлиент(АдресСнипета);	
		ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
	КонецЕсли;	 
	
	ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
	Если ОбработкаТеста = Неопределено Тогда
		Если ОбработкаТеста = Неопределено Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог подключить обработку <%1>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",АдресСнипета);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ВыполнитьШагПродолжение(ДополнительныеПараметры.РезультатПрохожденияШага,ОбработкаТеста);
КонецПроцедуры

&НаКлиенте
Функция ПодключитьКонтекстОбработкиКлиент(ОбъектСодержащийШаги, ВерсияФайла = Неопределено,ДопПараметры = Неопределено)
	Перем  ФормаОбработки, ИмяОбработки, УниверсальноеПолноеИмя, МассивСнипетовИзОбработки;
	
	ФормаОбработки = Неопределено;
	ЭтоВнутренняяФорма = Ложь;
	Если ЭтоВнутреннийАдресФормы(ОбъектСодержащийШаги) Тогда
		ЭтоВнутренняяФорма = Истина;
		Файл = Неопределено;
	Иначе
		Файл = Новый Файл(ОбъектСодержащийШаги);
	КонецЕсли;	 
	
	Если ЭтоВнутренняяФорма Тогда
		ФормаОбработки         = ПолучитьФорму(ОбъектСодержащийШаги);
		УниверсальноеПолноеИмя = ОбъектСодержащийШаги;
	ИНаче	
		Попытка
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ИмяФайла",Файл.ПолноеИмя);
			Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
				Если ДопПараметры.Свойство("АдресХранилища") Тогда
					ДополнительныеПараметры.Вставить("АдресХранилища",ДопПараметры.АдресХранилища);
				КонецЕсли;	 
			КонецЕсли;	 
			ИмяОбработки = ПодключитьВнешнююОбработкуСервер(Файл.ПолноеИмя,ЕстьЗащитаОтОпасныхДействий,ДополнительныеПараметры);
			Если ИмяОбработки = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;	 
			
			ФормаОбработки = ПолучитьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма.Форма");
			Если ФормаОбработки = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли; 
		Исключение
			Отладка("Не смог получить список шагов в обработке: " + Файл.ПолноеИмя);
			Отладка("ПолучитьУжеСуществующиеСнипетыИзОбработок:" + ОписаниеОшибки());
			
			Если ВерсияФайла = Неопределено Тогда
				Возврат Ложь;//значит просто не получилось подключить обработку
			Иначе
				//значит передали ВерсиюФайла, тогда добавим обработку в кеш, чтобы она не пыталась загрузиться в следующий раз.
			КонецЕсли;	 
			
		КонецПопытки;
		УниверсальноеПолноеИмя = УниверсальноеПолноеИмяФайла(Файл.ПолноеИмя);
	КонецЕсли;	 
	
	СтрТаблицаКонтекстовОбработок = Новый Структура;
	СтрТаблицаКонтекстовОбработок.Вставить("ИмяФайла", УниверсальноеПолноеИмя);
	СтрТаблицаКонтекстовОбработок.Вставить("Обработка", ФормаОбработки);
	
	ИД = МассивИменКонтекстовОбработок.Найти(Нрег(УниверсальноеПолноеИмя));
	Если ИД = Неопределено Тогда
		ТаблицаКонтекстовОбработок.Добавить(СтрТаблицаКонтекстовОбработок);
		МассивИменКонтекстовОбработок.Добавить(Нрег(УниверсальноеПолноеИмя));
	Иначе
		ТаблицаКонтекстовОбработок[ИД] = СтрТаблицаКонтекстовОбработок;
	КонецЕсли;	 
	
	МассивСнипетовИзОбработки = Новый Массив();
	//этот вызов нужен чтобы передать контекст vanessa-behavior внутрь обработки
	Если ФормаОбработки <> Неопределено Тогда
		Попытка
			МассивСнипетовИзОбработки = ФормаОбработки.ПолучитьСписокТестов(ЭтаФорма);
		Исключение
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог загрузить снипеты из %1");
			Если ЭтоВнутренняяФорма Тогда
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОбъектСодержащийШаги + " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
			Иначе	
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Файл.ПолноеИмя + " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
			КонецЕсли;	 
			ЗаписатьЛогВЖРОшибка("VanessaAutomation.ПолучитьСписокТестов", ТекстСообщения);
			СделатьСообщение(ТекстСообщения, "Важное");
			
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Если ЭтоВнутренняяФорма Тогда
			ДобавитьПустойСнипетВТаблицуИзвестныхStepDefinition(ОбъектСодержащийШаги, ВерсияФайла);
		Иначе	
			ДобавитьПустойСнипетВТаблицуИзвестныхStepDefinition(Файл.ПолноеИмя, ВерсияФайла);
		КонецЕсли;	 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузитьТаблицаИзвестныхStepDefinitionИзМакетаСервер()
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	
	ТекстовыйДокумент = ОбъектСервер.ПолучитьМакет("МакетСлужебныйКеш");
	СлужебнаяСтрока   = ТекстовыйДокумент.ПолучитьТекст();
	Если Не ЗначениеЗаполнено(СлужебнаяСтрока) Тогда
		Возврат 0;
	КонецЕсли;	
	
	ДанныеСлужебногоКеша = ЗначениеИзСтрокиВнутр(СлужебнаяСтрока);
	ТаблицаКешStepDefinition = ДанныеСлужебногоКеша.КешStepDefinition;
	Для Каждого СтрокаМакетСлужебныйКеш Из ТаблицаКешStepDefinition Цикл
		СтрокаДляПоиска = СтрокаМакетСлужебныйКеш.СтрокаДляПоиска;
		СтрокаТзнТаблицаИзвестныхStepDefinition = ТзнТаблицаИзвестныхStepDefinition.Найти(СтрокаДляПоиска,"СтрокаДляПоиска");
		Если СтрокаТзнТаблицаИзвестныхStepDefinition = Неопределено Тогда
			СтрокаТзнТаблицаИзвестныхStepDefinition = ТзнТаблицаИзвестныхStepDefinition.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТзнТаблицаИзвестныхStepDefinition,СтрокаМакетСлужебныйКеш);
		КонецЕсли;	 
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition,"ТаблицаИзвестныхStepDefinition");
	
	Возврат ТаблицаКешStepDefinition.Количество(); 
КонецФункции

&НаКлиенте
Процедура ПодключитьСнипетыИзВнутреннихФорм(МассивФорм, ВерсияФайла, БылиОшибки,СтруктураПараметров,
	  МассивИменФайловКоторыеСовпалиСКеш,МассивИменКонтекстовОбработок,ТаблицаКонтекстовОбработок,КаталогФич)
	  
	  
	КоличествоИзвестныхШагов = ЗагрузитьТаблицаИзвестныхStepDefinitionИзМакетаСервер();  
	  
	МассивВсехСнипетов = Новый Массив;
	НомерФормы = 0;
	ВсегоФорм = МассивФорм.Количество();
	Для Каждого ИмяВнутреннейФормы Из МассивФорм Цикл
		НомерФормы = НомерФормы + 1;
		Если КоличествоИзвестныхШагов = 0 Тогда
			Состояние("Встроенная форма №" + НомерФормы + " из " + ВсегоФорм, Окр((НомерФормы / ВсегоФорм)*100), СокрЛП(КаталогФич));
		КонецЕсли;	 
		
		МассивИменФайловКоторыеСовпалиСКеш.Добавить(ИмяВнутреннейФормы);
		МассивИменКонтекстовОбработок.Добавить(УниверсальноеПолноеИмяФайла(ИмяВнутреннейФормы,Истина));
		
		СтрТаблицаКонтекстовОбработок = Новый Структура;
		СтрТаблицаКонтекстовОбработок.Вставить("ИмяФайла", ИмяВнутреннейФормы);
		СтрТаблицаКонтекстовОбработок.Вставить("Обработка", Неопределено);
		ТаблицаКонтекстовОбработок.Добавить(СтрТаблицаКонтекстовОбработок);
		
		
		Если КоличествоИзвестныхШагов > 0 Тогда
			//значит загрузили шаги из предрасчитанного кеша
			Продолжить;
		КонецЕсли;	 
		
		
		Попытка
			ПараметрыФормы = Новый Структура;
			ФормаОбработки = ПолучитьФорму(ИмяВнутреннейФормы, ПараметрыФормы);
			СтрТаблицаКонтекстовОбработок.Вставить("Обработка", ФормаОбработки);
			МассивСнипетовИзОбработки = ФормаОбработки.ПолучитьСписокТестов(ЭтаФорма);
		Исключение
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог загрузить снипеты из %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяВнутреннейФормы);
			
			Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("ПолучитьУжеСуществующиеСнипетыИзОбработок:%1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеОшибки());
			Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
			Продолжить;
		КонецПопытки;
		
		Если МассивСнипетовИзОбработки.Количество() = 0 Тогда
			//добавим пустой снипет, чтобы обработка попала в кэш
			ДобавитьПустойСнипетВТаблицуИзвестныхStepDefinition(ИмяВнутреннейФормы, ВерсияФайла);
			Продолжить;
		КонецЕсли;	
		
		
		Структура = Новый Структура;
		Структура.Вставить("МассивСнипетовИзОбработки",МассивСнипетовИзОбработки);
		Структура.Вставить("ИмяВнутреннейФормы",ИмяВнутреннейФормы);
		
		МассивВсехСнипетов.Добавить(Структура);
	КонецЦикла;	
	
	Если КоличествоИзвестныхШагов > 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекстСообщенийПользователю",Объект.ТекстСообщенийПользователю);
	ДобавитьСнипетыСервер(МассивВсехСнипетов, ИмяВнутреннейФормы, ВерсияФайла, БылиОшибки,ДопПараметры)	
КонецПроцедуры

//Подключает обработку и получает из неё снипеты
// Файл - Тип: Файл
&НаКлиенте
Процедура ПодключитьСнипетыИзОбработкиКлиент(Файл, ВерсияФайла, БылиОшибки, ДанныеДляСнипетов, АдресХранилища, ПолучатьСнипеты = Истина)
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("АдресХранилища",АдресХранилища);
	
	УниверсальноеПолноеИмя = УниверсальноеПолноеИмяФайла(Файл.ПолноеИмя, Истина);
	ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмя);
	Если ИД = Неопределено Тогда
		БылиОшибки = Ложь;
		Если НЕ ПодключитьКонтекстОбработкиКлиент(Файл.ПолноеИмя, ВерсияФайла, ДопПараметры) Тогда
			Возврат;
		КонецЕсли;	 
		
		ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмя);
	КонецЕсли;	 
	
	
	ФормаОбработки = ТаблицаКонтекстовОбработок[ИД].Обработка;
	Если ФормаОбработки = Неопределено Тогда
		ПодключитьКонтекстОбработкиКлиент(Файл.ПолноеИмя,,ДопПараметры);
		ФормаОбработки = ТаблицаКонтекстовОбработок[ИД].Обработка;
	КонецЕсли;	 
	
	Если НЕ ПолучатьСнипеты Тогда
		Возврат;
	КонецЕсли;	 
	
	Попытка
		МассивСнипетовИзОбработки = ФормаОбработки.ПолучитьСписокТестов(ЭтаФорма);
	Исключение
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог загрузить снипеты из %1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Файл.ПолноеИмя);
		
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("ПолучитьУжеСуществующиеСнипетыИзОбработок:%1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеОшибки());
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		Возврат;
	КонецПопытки;
	
	ДанныеОбработки = Новый Структура;
	ДанныеОбработки.Вставить("МассивСнипетовИзОбработки",МассивСнипетовИзОбработки);
	ДанныеОбработки.Вставить("ИмяФайла",Файл.ПолноеИмя);
	ДанныеОбработки.Вставить("ВерсияФайла",ВерсияФайла);
	ДанныеДляСнипетов.Добавить(ДанныеОбработки);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьУжеСуществующиеСнипетыИзОбработок(Знач КаталогФич,ДанныеДляПолученияСнипетов,
	                                                ДополнительныеПараметры = Неопределено,
	                                                МассивВерсийФайловИзТаблицаИзвестныхStepDefinition = Неопределено,
	                                                МассивИменФайловИзТаблицаИзвестныхStepDefinition = Неопределено,
	                                                МассивИменФайловКоторыеСовпалиСКеш = Неопределено)
	
	Файл = Новый Файл(КаталогФич);
	
	БылиОшибки = Ложь;
	НачальныйКаталог = КаталогФич;
	КаталогПоиска    = НачальныйКаталог;
	
	Файл = Новый Файл(НачальныйКаталог);
	Если НРег(Файл.Расширение) = ".feature" Тогда
		КаталогПоиска = Файл.Путь;
	КонецЕсли;	 
	
	Отладка(ПолучитьТекстСообщенияПользователю("Ищу снипеты в каталоге") + " " + КаталогПоиска);
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, КаталогФич, "НайденныеФайлы"); //это файлы по данной библиотеке
		Если МассивФайлов = Неопределено Тогда
			МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "ПоискEPF", "НайденныеФайлы");
		КонецЕсли;	 
	Иначе	
		МассивФайлов = НайтиФайлы(КаталогПоиска, "*.epf", Истина);
	КонецЕсли;	 
	
	
	
	
	НомерФайла  = 0;
	ВсегоФайлов = МассивФайлов.Количество();
	Для Каждого ОбъектФайл Из МассивФайлов Цикл
		
		Если Не ЕстьПоддержкаАсинхронныхВызовов Тогда
			Файл = ОбъектФайл;
		Иначе
			Файл = ОбъектФайл.Файл;
		КонецЕсли;	 
		
		НомерФайла = НомерФайла + 1;
	
		Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
			ВерсияФайла = Файл.ПолучитьВремяИзменения();
		Иначе
			ВерсияФайла = ОбъектФайл.ВерсияФайла;
		КонецЕсли; 
		
		
		Если МассивИменФайловКоторыеСовпалиСКеш <> Неопределено Тогда
			Если МассивИменФайловКоторыеСовпалиСКеш.Найти(ПреобразоватьПутьКФайлуКСтандарту(Файл.ПолноеИмя)) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		УниверсальноеПолноеИмя = УниверсальноеПолноеИмяФайла(Файл.ПолноеИмя);
		Если МассивИменФайловИзТаблицаИзвестныхStepDefinition <> Неопределено Тогда
			ИДМассивИменФайловИзТаблицаИзвестныхStepDefinition = МассивИменФайловИзТаблицаИзвестныхStepDefinition.Найти(УниверсальноеПолноеИмя);
			Если ИДМассивИменФайловИзТаблицаИзвестныхStepDefinition <> Неопределено Тогда
				//значит сравним версию файла
				Если МассивВерсийФайловИзТаблицаИзвестныхStepDefinition[ИДМассивИменФайловИзТаблицаИзвестныхStepDefinition] <> ВерсияФайла Тогда
					//значит в кеше уже есть нужные снипеты обработок
					УдалитьИзТаблицаИзвестныхStepDefinitionДанныеПоФайлуСервер(УниверсальноеПолноеИмя);
					
					ИДМассивИменКонтекстовОбработок = МассивИменКонтекстовОбработок.Найти(Нрег(УниверсальноеПолноеИмя));
					Если ИДМассивИменКонтекстовОбработок <> Неопределено Тогда
						МассивИменКонтекстовОбработок.Удалить(ИДМассивИменКонтекстовОбработок);
						ТаблицаКонтекстовОбработок[ИДМассивИменКонтекстовОбработок].Обработка = Неопределено;
						ТаблицаКонтекстовОбработок.Удалить(ИДМассивИменКонтекстовОбработок);
					КонецЕсли;	 
					
					Отладка(ПолучитьТекстСообщенияПользователю("Загрузил новую версию") + ": " + Файл.ПолноеИмя);
				Иначе	
					Отладка(ПолучитьТекстСообщенияПользователю("Загрузил снипеты из кеш") + ": " + Файл.ПолноеИмя);
					МассивИменФайловКоторыеСовпалиСКеш.Добавить(УниверсальноеПолноеИмя);
					
					ЗаполнитьТаблицуКонтекстовОбработокНеПодключаяОбработки(Файл);
					
					Продолжить;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		
		Данные = Новый Структура;
		Данные.Вставить("ИмяФайла",Файл.ПолноеИмя);
		Данные.Вставить("Имя",Файл.Имя);
		Данные.Вставить("ВерсияФайла",ВерсияФайла);
		ДанныеДляПолученияСнипетов.Добавить(Данные);
		
		Если МассивИменФайловКоторыеСовпалиСКеш <> Неопределено Тогда
			МассивИменФайловКоторыеСовпалиСКеш.Добавить(УниверсальноеПолноеИмя);
		КонецЕсли;	 
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПодключенияБиблиотекШагов(Знач ПомещенныеФайлы, Знач ДополнительныеПараметры) Экспорт
	ПодключитьОбработкиКлиент(ПомещенныеФайлы,ДополнительныеПараметры);
	ЗаполнитьДеревоФичПродолжение();
КонецПроцедуры

&НаКлиенте
Функция ОбходКаталогов(ПутьКаталога, МассивРезультатОбходаКаталогов, Уровень, ДополнительныеПараметры, ТекРодитель, КолЭлементовДобавлено)
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ФайлПутьКаталога = Новый Файл(ПутьКаталога);
		Если НРег(ФайлПутьКаталога.Расширение) = ".feature" Тогда
			НайденныеФайлы = Новый Массив;//вернём одну фичу
			НайденныеФайлы.Добавить(ФайлПутьКаталога);
			ТекРодитель = НайденныеФайлы[0].Путь;
		Иначе	
			НайденныеФайлы = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "ПоискFeature", "НайденныеФайлы");
			Если ТекРодитель = Неопределено Тогда
				Если НайденныеФайлы.Количество() > 0 Тогда
					Если ТипЗнч(НайденныеФайлы[0]) = Тип("Структура") Тогда
						ТекРодитель = НайденныеФайлы[0].Файл.Путь;
					Иначе	
						ТекРодитель = НайденныеФайлы[0].Путь;
					КонецЕсли;	 
					
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
	Иначе	
		ФайлПутьКаталога = Новый Файл(ПутьКаталога);
		Если ФайлПутьКаталога.ЭтоКаталог() Тогда
			НайденныеФайлы = НайтиФайлы(ПутьКаталога, "*");
		Иначе
			НайденныеФайлы = Новый Массив;//вернём одну фичу
			НайденныеФайлы.Добавить(ФайлПутьКаталога);
		КонецЕсли;	 
	КонецЕсли;	 
		
	Для каждого ОбъектФайл из НайденныеФайлы цикл
		Ф = ОбъектФайл;
		Если ТипЗнч(ф) = Тип("Структура") Тогда
			Ф = ОбъектФайл.Файл;//т.к. для режима запрета синхронных вызовов там будет структура
		КонецЕсли;	 
		
		Если ЕстьПоддержкаАсинхронныхВызовов Тогда
			Если ф.Путь <> ТекРодитель Тогда
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;  
		
		Если Не ЕстьПоддержкаАсинхронныхВызовов Тогда
			ЭтоКаталог = ф.ЭтоКаталог();
		Иначе
			ЭтоКаталог = Ложь;
			Если ф.Расширение = "" Тогда
				ЭтоКаталог = Истина;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если ЭтоКаталог тогда //это каталог
			СтруткураФайла = Новый Структура;
			СтруткураФайла.Вставить("Уровень", Уровень);
			СтруткураФайла.Вставить("Каталог", Истина);
			СтруткураФайла.Вставить("Фича", Ложь);
			СтруткураФайла.Вставить("Имя", ф.Имя);
			СтруткураФайла.Вставить("ПолныйПуть", ф.ПолноеИмя);
			СтруткураФайла.Вставить("УниверсальноеИмя",УниверсальноеПолноеИмяФайла(ф.ПолноеИмя,Истина));
			МассивРезультатОбходаКаталогов.Добавить(СтруткураФайла);
			ТекИД = МассивРезультатОбходаКаталогов.Количество() - 1;
			
			ТекКолЭлементовДобавлено = 0;
			Уровень = Уровень + 1;
			ОбходКаталогов(ДополнитьСлешВПуть(ПутьКаталога) + ф.Имя, МассивРезультатОбходаКаталогов, Уровень, ДополнительныеПараметры, ДополнитьСлешВПуть(ф.ПолноеИмя), ТекКолЭлементовДобавлено);
			Уровень = Уровень - 1;
			
			Если ТекКолЭлементовДобавлено = 0 Тогда
				МассивРезультатОбходаКаталогов.Удалить(ТекИД);
			КонецЕсли;  
			КолЭлементовДобавлено = КолЭлементовДобавлено + ТекКолЭлементовДобавлено;
			
		ИначеЕсли НРег(ф.Расширение) = ".feature" Тогда
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ф.ПолноеИмя);
			СтруткураФайла = ПолучитьСтруткураФайлаФичи(Уровень, ф.ИмяБезРасширения, ф.ПолноеИмя, ДвоичныеДанные);
			
			МассивРезультатОбходаКаталогов.Добавить(СтруткураФайла);
			КолЭлементовДобавлено = КолЭлементовДобавлено + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруткураФайлаФичи(Уровень, ИмяБезРасширения, ПолноеИмя, ДвоичныеДанные)
	СтруткураФайла = Новый Структура;
	СтруткураФайла.Вставить("Уровень", Уровень);
	СтруткураФайла.Вставить("Каталог", Ложь);
	СтруткураФайла.Вставить("Фича", Истина);
	СтруткураФайла.Вставить("Имя", ИмяБезРасширения);
	СтруткураФайла.Вставить("ПолныйПуть", ПолноеИмя);
	СтруткураФайла.Вставить("УниверсальноеИмя",УниверсальноеПолноеИмяФайла(ПолноеИмя,Истина));
	СтруткураФайла.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	
	Возврат СтруткураФайла;
КонецФункции	

&НаСервереБезКонтекста
Процедура УдалитьПустыеКаталогиИзДерева(Дерево)
	КолСтрок = Дерево.Строки.Количество();
	Для Ккк = 0 По КолСтрок - 1 Цикл
		Строка = Дерево.Строки[КолСтрок - 1 - Ккк];
		Если Строка.Тип = "Каталог" Тогда
			Если Строка.Строки.Количество() = 0 Тогда
				Дерево.Строки.Удалить(Строка);
			Иначе	
				УдалитьПустыеКаталогиИзДерева(Строка);
			КонецЕсли;  
		КонецЕсли;  
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПреобразоватьМассивТаблицаУжеСуществующихСценариевВТаблицуЗначений(ИсходныйМассив)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("ИмяСценария");
	Тзн.Колонки.Добавить("ИмяФайла");
	Тзн.Колонки.Добавить("ТаблицаШагов");
	Тзн.Колонки.Добавить("ПолноеИмя");
	Тзн.Колонки.Добавить("ДвоичныеДанные");
	Тзн.Колонки.Добавить("ЭтоСтруктураСценария");
	Тзн.Колонки.Добавить("Снипет",Новый ОписаниеТипов("Строка"));
	Тзн.Индексы.Добавить("Снипет");
	Для каждого Элем Из ИсходныйМассив Цикл
		СтрТзн = Тзн.Добавить();
		
		СтрТзн.ИмяСценария          = Элем.ИмяСценария;
		СтрТзн.ИмяФайла             = Элем.ИмяФайла;
		СтрТзн.ПолноеИмя            = Элем.ПолноеИмя;
		СтрТзн.ТаблицаШагов         = Элем.ТаблицаШагов;
		СтрТзн.ДвоичныеДанные       = Элем.ДвоичныеДанные;
		СтрТзн.ЭтоСтруктураСценария = Элем.ЭтоСтруктураСценария;
		СтрТзн.Снипет               = Элем.Снипет;
	КонецЦикла;
	
	Возврат Тзн;
КонецФункции	

&НаСервереБезКонтекста
Процедура УдалитьПустыеКаталоги(МассивКаталоговДляПроверкиНаПустоту)
	Массив = Новый Массив;
	
	Для каждого ВеткаСтроки Из МассивКаталоговДляПроверкиНаПустоту Цикл
		Если ВеткаСтроки.Количество() = 0 Тогда
			ВеткаРодитель = ВеткаСтроки.Родитель.Родитель;//так определяется родитель на один уровень вверх, когда в переменной лежат строки дерева
			Если ВеткаРодитель = Неопределено Тогда
				Продолжить;
			КонецЕсли;	 
			
			Если Массив.Найти(ВеткаРодитель) = Неопределено Тогда
				Массив.Добавить(ВеткаРодитель.Строки);
			КонецЕсли;	 
			
			ВеткаРодитель.Строки.Удалить(ВеткаСтроки.Родитель);
		КонецЕсли;	 
	КонецЦикла;
	
	Если Массив.Количество() > 0 Тогда
		УдалитьПустыеКаталоги(Массив);
	КонецЕсли;	 
КонецПроцедуры

&НаСервереБезКонтекста
Функция УниверсальныеИменаФайлов(Массив)
	Соответствие = Новый Соответствие;
	Ид = -1;
	Для Каждого Элем Из Массив Цикл
		Ид = Ид + 1;
		Соответствие.Вставить(Элем.УниверсальноеИмя,Ид);
	КонецЦикла;	 
	
	Возврат Соответствие;
КонецФункции	 

&НаСервере
//Нельзя менять директиву на &НаСервереБезКонтекста, т.к. тогда перестанет присваиваться переменная ТекущийЗагружаемыйФичаФайл.
//Также надо понимать, что ЗаполнитьСтрокиДереваФичамиСервер вызывается из ЗаполнитьДеревоЗначенийПоМассивуСервер, которая вызывается &НаСервере
Процедура ЗаполнитьСтрокиДереваФичамиСервер(Дерево, FeatureReader, ТзнТаблицаИзвестныхStepDefinition, СтруктураПараметров)
	МассивСтрокДляУдаления = Новый Массив;
	Для каждого Строка Из Дерево.Строки Цикл
		Если Строка.Тип = "Фича" Тогда
			СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева", Ложь);
			
			ТекущийЗагружаемыйФичаФайл = Строка.ПолныйПуть;
			СтруктураПараметров.Вставить("ТаблицаИзвестныхStepDefinition",ТзнТаблицаИзвестныхStepDefinition);
			FeatureReader.ЗагрузитьФичу(Строка.ПолныйПуть, Строка.Строки, СтруктураПараметров);
			СтруктураПараметров.Вставить("ТаблицаИзвестныхStepDefinition",Неопределено);
			
			Если СтруктураПараметров.УдалитьСтрокуФичиИзДерева Тогда
				СтуктураРодительПотомок = Новый Структура;
				СтуктураРодительПотомок.Вставить("СтрокиГдеНаходитсяФича", Дерево.Строки);
				СтуктураРодительПотомок.Вставить("СтрокаФичи", Строка);
				МассивСтрокДляУдаления.Добавить(СтуктураРодительПотомок);
			КонецЕсли;	 
		Иначе	
			ЗаполнитьСтрокиДереваФичамиСервер(Строка, FeatureReader, ТзнТаблицаИзвестныхStepDefinition, СтруктураПараметров);
		КонецЕсли;  
	КонецЦикла;
	
	
	МассивКаталоговДляПроверкиНаПустоту = СтруктураПараметров.МассивКаталоговДляПроверкиНаПустоту;
	Для каждого Элем Из МассивСтрокДляУдаления Цикл
		Элем.СтрокиГдеНаходитсяФича.Удалить(Элем.СтрокаФичи);
		
		Если МассивКаталоговДляПроверкиНаПустоту.Найти(Элем.СтрокиГдеНаходитсяФича) = Неопределено Тогда
			МассивКаталоговДляПроверкиНаПустоту.Добавить(Элем.СтрокиГдеНаходитсяФича);
		КонецЕсли;	 
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроставитьОтметкуБрейкпоинтовРекурсивно(Дерево, Брейкпоинты)
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если СтрокаДерева.Тип = "Шаг" Тогда
			Если Брейкпоинты.Найти(СтрокаДерева.ПолныйПуть) <> Неопределено Тогда
				СтрокаДерева.Брейкпоинт = Истина;
			КонецЕсли;	 
		КонецЕсли;	 
		
		ПроставитьОтметкуБрейкпоинтовРекурсивно(СтрокаДерева, Брейкпоинты);
	КонецЦикла;	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроставитьОтметкуБрейкпоинтов(Дерево, СтруктураПараметров)
	ПроставитьОтметкуБрейкпоинтовРекурсивно(Дерево, СтруктураПараметров.Брейкпоинты);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьFeatureReader(КаталогИнструментов, ДвДанныеvbFeatureReader, ВременноеИмяФайла)
	ФайлvbFeatureReader = Новый Файл(КаталогИнструментов + "/lib/FeatureReader/vbFeatureReader.epf");
	ВременноеИмяФайла = Неопределено;
	Если Не ФайлvbFeatureReader.Существует() Тогда
		ВременноеИмяФайла = ПолучитьИмяВременногоФайла("epf");
		ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
		FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла, Ложь);
	Иначе	
		FeatureReader = ВнешниеОбработки.Создать(ФайлvbFeatureReader.ПолноеИмя, Ложь);
	КонецЕсли;	 
	
	Возврат FeatureReader;
КонецФункции	


&НаСервереБезКонтекста
Процедура ПолучитьКоличествоШаговИзДереваПоСтрокеРекурсивно(Дерево,КоличествоШагов)
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если СтрокаДерева.Тип = "Шаг" Тогда
			КоличествоШагов = КоличествоШагов + 1;
		КонецЕсли;	 
		
		ПолучитьКоличествоШаговИзДереваПоСтрокеРекурсивно(СтрокаДерева,КоличествоШагов);
	КонецЦикла;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоШаговИзДереваПоСтроке(Дерево)
	КоличествоШагов = 0;
	ПолучитьКоличествоШаговИзДереваПоСтрокеРекурсивно(Дерево,КоличествоШагов);
	Возврат КоличествоШагов;
КонецФункции	

&НаСервере
Процедура ЗаполнитьДеревоЗначенийПоМассивуСервер(МассивРезультатОбходаКаталогов, ДвДанныеvbFeatureReader, СтруктураПараметров)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	ТзнТаблицаИзвестныхStepDefinition.Сортировать("СтрокаДляПоиска");
	ТзнТаблицаИзвестныхStepDefinition.Индексы.Добавить("СтрокаДляПоиска");
	
	
	ТзнКешStepDefinition = РеквизитФормыВЗначение("КешStepDefinition");
	ТзнКешStepDefinition.Индексы.Добавить("ИмяШагаБезКлючевогоСлова");
	СтруктураПараметров.Вставить("КешStepDefinition",ТзнКешStepDefinition);
	
	ТзнКешТаблицGherkin = РеквизитФормыВЗначение("КешТаблицGherkin");
	ТзнКешТаблицGherkin.Индексы.Добавить("Строка");
	СтруктураПараметров.Вставить("КешТаблицGherkin",ТзнКешТаблицGherkin);
	
	
	
	ТолькоДляПолученияСпискаФич = Ложь;
	СтруктураПараметров.Свойство("ТолькоДляПолученияСпискаФич",ТолькоДляПолученияСпискаФич);
	Если ТолькоДляПолученияСпискаФич = Истина Тогда
		Дерево = ОбъектСервер.ДеревоТестов.Скопировать();
	Иначе	
		Дерево = ОбъектСервер.ДеревоТестов;
	КонецЕсли;	 
	Дерево.Строки.Очистить();
	ТекДерево  = Дерево;
	ТекУровень = 0;
	
	Для каждого Элем Из МассивРезультатОбходаКаталогов Цикл
		Если Элем.Уровень > ТекУровень Тогда
			ТекУровень = Элем.Уровень;
			НовСтр     = ТекДерево.Строки.Добавить();
			ТекДерево  = НовСтр;
		ИначеЕсли Элем.Уровень < ТекУровень Тогда
			Разн = ТекУровень - Элем.Уровень;
			Для Ккк = 1 По Разн Цикл
				НовСтр = НовСтр.Родитель;
			КонецЦикла;
			НовСтр     = НовСтр.Родитель.Строки.Добавить();
			ТекУровень = Элем.Уровень;
			ТекДерево  = НовСтр;
		Иначе	
			НовСтр     = ТекДерево.Родитель.Строки.Добавить();
			ТекДерево  = НовСтр;
		КонецЕсли;  
		
		Если Элем.Каталог Тогда
			//НовСтр            = ТекСтроки.Строки.Добавить();
			НовСтр.Тип        = "Каталог";
			НовСтр.ПолныйПуть = Элем.ПолныйПуть;
			НовСтр.Имя        = Элем.Имя;
		ИначеЕсли Элем.Фича Тогда
			//НовСтр            = ТекСтроки.Строки.Добавить();
			НовСтр.Тип         = "Фича";
			НовСтр.ТипКартинки = 1;
			НовСтр.ПолныйПуть  = Элем.ПолныйПуть;
			НовСтр.Имя         = Элем.Имя;
		КонецЕсли;  
		
	КонецЦикла;
	
	УдалитьПустыеКаталогиИзДерева(Дерево);
	
	Дерево.Строки.Сортировать("ПолныйПуть", Истина);
	
	
	
	ВременноеИмяФайла = Неопределено;
	Если ОбъектСервер.ВерсияПоставки = "standart" Тогда
		FeatureReader     = СоздатьFeatureReader(Объект.КаталогИнструментов, ДвДанныеvbFeatureReader, ВременноеИмяФайла);
	Иначе	
		FeatureReader = ОбъектСервер;
	КонецЕсли;	 
	
	Если Не СтруктураПараметров.Свойство("ТаблицаУжеСуществующихСценариев") Тогда
		ТаблицаУжеСуществующихСценариевСервер = ПреобразоватьМассивТаблицаУжеСуществующихСценариевВТаблицуЗначений(СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ);
		СтруктураПараметров.Вставить("ТаблицаУжеСуществующихСценариев", ТаблицаУжеСуществующихСценариевСервер);
	КонецЕсли;	 
	
	МассивКаталоговДляПроверкиНаПустоту = Новый Массив;
	СтруктураПараметров.Вставить("МассивКаталоговДляПроверкиНаПустоту", МассивКаталоговДляПроверкиНаПустоту);
	
	СтруктураПараметров.Вставить("УниверсальныеИменаФайлов",УниверсальныеИменаФайлов(МассивРезультатОбходаКаталогов));
	ЗаполнитьСтрокиДереваФичамиСервер(Дерево, FeatureReader, ТзнТаблицаИзвестныхStepDefinition, СтруктураПараметров);
	
	Для Каждого Элем Из СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ Цикл
		СтрокаТаблицаУжеСуществующихСценариев = СтруктураПараметров.ТаблицаУжеСуществующихСценариев.Найти(Элем.ИмяСценария,"ИмяСценария");
		Если СтрокаТаблицаУжеСуществующихСценариев <> Неопределено Тогда
			//обновим снипеты для сценариев, которые описаны в фича файлах как экспортные
			Элем.Снипет = СтрокаТаблицаУжеСуществующихСценариев.Снипет;
		КонецЕсли;	 
	КонецЦикла;	 
	
	УдалитьПустыеКаталоги(МассивКаталоговДляПроверкиНаПустоту);
	СтруктураПараметров.МассивКаталоговДляПроверкиНаПустоту = Неопределено;
	СтруктураПараметров.ТаблицаУжеСуществующихСценариев = Неопределено;
	Если СтруктураПараметров.Свойство("КешФич") Тогда
		СтруктураПараметров.КешФич = Неопределено;
	КонецЕсли;	 
	
	
	
	Если СтруктураПараметров.Брейкпоинты.Количество() > 0 Тогда
		ПроставитьОтметкуБрейкпоинтов(Дерево, СтруктураПараметров);
	КонецЕсли;	 
	
	
	Если ВременноеИмяФайла <> Неопределено Тогда
		УдалитьФайлы(ВременноеИмяФайла);
	КонецЕсли;	 
	
	
	ЗаполнитьИДСтрокиДереваСервер(СтруктураПараметров, Дерево);	
	
	
	Если ТолькоДляПолученияСпискаФич = Истина Тогда
		ТаблицаФич = Новый ТаблицаЗначений;
		ТаблицаФич.Колонки.Добавить("Фича");
		ТаблицаФич.Колонки.Добавить("КоличествоШагов");
		ТаблицаФич.Колонки.Добавить("МассивТегов");
		СтрокиСФичами = Дерево.Строки.НайтиСтроки(Новый Структура("Тип","Фича"),Истина);
		Для Каждого СтрокаДерева Из СтрокиСФичами Цикл
			СтрокаТаблицаФич                 = ТаблицаФич.Добавить();
			СтрокаТаблицаФич.Фича            = СтрокаДерева.ПолныйПуть;
			СтрокаТаблицаФич.КоличествоШагов = ПолучитьКоличествоШаговИзДереваПоСтроке(СтрокаДерева);
			СтрокаТаблицаФич.МассивТегов     = СтрокаДерева.ПроизвольныеЗначения.МассивТегов;
		КонецЦикла;	
		
		Массив = Новый Массив;
		ТаблицаФич.Сортировать("КоличествоШагов убыв");
		Для Каждого СтрокаТаблицаФич Из ТаблицаФич Цикл
			Массив.Добавить(Новый Структура("Фича,МассивТегов",СтрокаТаблицаФич.Фича,СтрокаТаблицаФич.ПроизвольныеЗначения.МассивТегов));
		КонецЦикла;	
		СтруктураПараметров.МассивФичДляПослеНаложенияФильтров = Массив;
	Иначе	
		ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition, "ТаблицаИзвестныхStepDefinition");
		ЗначениеВРеквизитФормы(ТзнКешStepDefinition, "КешStepDefinition");
		ЗначениеВРеквизитФормы(ТзнКешТаблицGherkin, "КешТаблицGherkin");
		ЗначениеВРеквизитФормы(ОбъектСервер, "Объект");
		
		ПараметрыДляСохраненияНастроек = ПараметрыДляСохраненияНастроекСервер();
		СохранитьНастройкиВХранилище("ТаблицаИзвестныхStepDefinition",ТаблицаИзвестныхStepDefinition,ПараметрыДляСохраненияНастроек);
		СохранитьНастройкиВХранилище("КешStepDefinition",КешStepDefinition,ПараметрыДляСохраненияНастроек);
		СохранитьНастройкиВХранилище("КешТаблицGherkin",КешТаблицGherkin,ПараметрыДляСохраненияНастроек);
	КонецЕсли;	 
	
	СтруктураПараметров.Вставить("КешStepDefinition",Неопределено);
	СтруктураПараметров.Вставить("КешТаблицGherkin",Неопределено);
	СтруктураПараметров.Вставить("ТаблицаОбластей",Неопределено);	
	СтруктураПараметров.Вставить("ТаблицаПеревода",Неопределено);	
	
	ВывестиСтатистикуНаСервере();
КонецПроцедуры

&НаСервере
Функция ПараметрыДляСохраненияНастроекСервер()
	Структура = Новый Структура;
	Структура.Вставить("ПрефиксИнструментаДляСохраненияНастроек",ПолучитьПрефиксИнструмента());
	Структура.Вставить("ИДДляОбщегоСохраненияНастроек",ПолучитьИДДляОбщегоСохраненияНастроек());
	
	Возврат Структура; 
КонецФункции	 

&НаКлиенте
Функция ПараметрыДляСохраненияНастроек()
	Структура = Новый Структура;
	Структура.Вставить("ПрефиксИнструментаДляСохраненияНастроек",ПрефиксИнструментаДляСохраненияНастроек);
	Структура.Вставить("ИДДляОбщегоСохраненияНастроек",ИДДляОбщегоСохраненияНастроек);
	
	Возврат Структура; 
КонецФункции	 

&НаКлиенте
Процедура ЗаполнитьДерево(Каталог, ДополнительныеПараметры, СтруктураПараметров)
	Файл = Новый Файл(Каталог);
	МассивРезультатОбходаКаталогов = Новый Массив;
	
	СтруткураФайла = Новый Структура;
	СтруткураФайла.Вставить("Каталог", Истина);
	СтруткураФайла.Вставить("Имя", Файл.Имя);
	СтруткураФайла.Вставить("УниверсальноеИмя", УниверсальноеПолноеИмяФайла(Файл.ПолноеИмя,Истина));
	СтруткураФайла.Вставить("ПолныйПуть", Каталог);
	СтруткураФайла.Вставить("Уровень", 1);
	
	
	МассивРезультатОбходаКаталогов.Добавить(СтруткураФайла);
	
	Уровень = 2;
	ТекРодитель = Неопределено;
	КолЭлементовДобавлено = 0;
	ОбходКаталогов(Каталог, МассивРезультатОбходаКаталогов, Уровень, ДополнительныеПараметры, ТекРодитель, КолЭлементовДобавлено);    
	
	ДвДанныеvbFeatureReader = Неопределено;
	Если Объект.ВерсияПоставки = "standart" Тогда
		ДвДанныеvbFeatureReader = Новый ДвоичныеДанные(ПолучитьПутьКFeatureReader());
	КонецЕсли;	 
	
	СтруктураПараметров.Вставить("МассивРезультатОбходаКаталогов", МассивРезультатОбходаКаталогов);
	СтруктураПараметров.Вставить("ВозможнаОптимизацияРаботыСФайлами",ВозможнаОптимизацияРаботыСФайлами);
	СтруктураПараметров.Вставить("ТегTreeВключенПоУмолчанию",Объект.ТегTreeВключенПоУмолчанию);
	ЗаполнитьДеревоЗначенийПоМассивуСервер(МассивРезультатОбходаКаталогов, ДвДанныеvbFeatureReader, СтруктураПараметров);
	
	//Обновим снипеты в таблице известных сценариев.
	ИдСтроки = -1;
	Для Каждого СтрокаТаблицаУжеСуществующихСценариев Из СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ Цикл
		ИдСтроки = ИдСтроки + 1;
		ТаблицаУжеСуществующихСценариев[ИдСтроки].Снипет = СтрокаТаблицаУжеСуществующихСценариев.Снипет;
	КонецЦикла;	 
	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиВХранилищеКеш(ТаблицаИзвестныхStepDefinition,КешStepDefinition,КешТаблицGherkin)
	ПараметрыДляСохраненияНастроек = ПараметрыДляСохраненияНастроек();
	СохранитьНастройкиВХранилище("ТаблицаИзвестныхStepDefinition",ТаблицаИзвестныхStepDefinition,ПараметрыДляСохраненияНастроек);
	СохранитьНастройкиВХранилище("КешStepDefinition",КешStepDefinition,ПараметрыДляСохраненияНастроек);
	СохранитьНастройкиВХранилище("КешТаблицGherkin",КешТаблицGherkin,ПараметрыДляСохраненияНастроек);
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиИзХранилищаКеш()
	ВосстановитьНастройкиИзХранилища("ТаблицаИзвестныхStepDefinition", "ТаблицаИзвестныхStepDefinition");
	ВосстановитьНастройкиИзХранилища("КешStepDefinition", "КешStepDefinition");
	ВосстановитьНастройкиИзХранилища("КешТаблицGherkin", "КешТаблицGherkin");
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицыПоТаблицаИзвестныхStepDefinition()
	
	ДанныеПоВерсиямОбработок = Новый Структура;
	
	МассивВерсийФайловИзТаблицаИзвестныхStepDefinition = Новый Массив;
	МассивИменФайловИзТаблицаИзвестныхStepDefinition   = Новый Массив;
	
	ТаблицаИзвестныхStepDefinitionСервер = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	Для Каждого СтрТаблицаИзвестныхStepDefinitionСервер Из ТаблицаИзвестныхStepDefinitionСервер Цикл
		МассивВерсийФайловИзТаблицаИзвестныхStepDefinition.Добавить(СтрТаблицаИзвестныхStepDefinitionСервер.ВерсияФайла);
		МассивИменФайловИзТаблицаИзвестныхStepDefinition.Добавить(СтрТаблицаИзвестныхStepDefinitionСервер.ИмяФайла);
		СтрТаблицаИзвестныхStepDefinitionСервер.СтрокаОбрабатывалась = Ложь;
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(ТаблицаИзвестныхStepDefinitionСервер, "ТаблицаИзвестныхStepDefinition");
	
	ДанныеПоВерсиямОбработок.Вставить("МассивВерсийФайловИзТаблицаИзвестныхStepDefinition", МассивВерсийФайловИзТаблицаИзвестныхStepDefinition);
	ДанныеПоВерсиямОбработок.Вставить("МассивИменФайловИзТаблицаИзвестныхStepDefinition", МассивИменФайловИзТаблицаИзвестныхStepDefinition);
	
	Возврат ДанныеПоВерсиямОбработок;
КонецФункции

&НаКлиенте
Процедура УдалитьСтрокиТаблицаИзвестныхStepDefinitionКоторыеНеОбрабатывались(МассивИменФайловКоторыеСовпалиСКеш)
	Для Каждого СтрТаблицаИзвестныхStepDefinitionСервер Из ТаблицаИзвестныхStepDefinition Цикл
		ИмяФайла = СтрТаблицаИзвестныхStepDefinitionСервер.ИмяФайла;
		Если МассивИменФайловКоторыеСовпалиСКеш.Найти(ПреобразоватьПутьКФайлуКСтандарту(ИмяФайла)) <> Неопределено Тогда
			СтрТаблицаИзвестныхStepDefinitionСервер.СтрокаОбрабатывалась = Истина;
		КонецЕсли;	 
	КонецЦикла;	
	
	Отбор = Новый Структура();
	Отбор.Вставить("СтрокаОбрабатывалась", Ложь);
	СтрокиТаблицы = ТаблицаИзвестныхStepDefinition.НайтиСтроки(Отбор);
	
	Для Каждого СтрТаблицаИзвестныхStepDefinitionСервер Из СтрокиТаблицы Цикл
		ТаблицаИзвестныхStepDefinition.Удалить(СтрТаблицаИзвестныхStepDefinitionСервер);
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивФайловИзТаблицы_ТаблицаИзвестныхStepDefinition()
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	ТзнТаблицаИзвестныхStepDefinition.Свернуть("ИмяФайла");
	
	Возврат ТзнТаблицаИзвестныхStepDefinition.ВыгрузитьКолонку("ИмяФайла");
КонецФункции	

&НаСервере
Процедура УдалитьИз_ТаблицаИзвестныхStepDefinition_Файлы(МассивФайловДляОбработки)
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	
	Для Каждого ИмяФайла Из МассивФайловДляОбработки Цикл
		МассивСтрок = ТзнТаблицаИзвестныхStepDefinition.НайтиСтроки(Новый Структура("ИмяФайла", ИмяФайла));
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			ТзнТаблицаИзвестныхStepDefinition.Удалить(СтрокаТаблицы);
		КонецЦикла;	
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition, "ТаблицаИзвестныхStepDefinition");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДанныеФайлаПоСобраннойРанееИнформации(ИмяФайла, ДополнительныеПараметры)
	ДанныеФайла = Неопределено;
	МассивФайлов = Неопределено;
	Для Каждого ЭлементСписка Из Объект.КаталогиБиблиотек Цикл
		ПутьКаталогаБиблиотеки = ПреобразоватьПутьСТочкамиКНормальномуПути(ЭлементСписка.Значение);
		МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, ПутьКаталогаБиблиотеки, "НайденныеФайлы"); //это файлы по данной библиотеке
		Если МассивФайлов <> Неопределено Тогда
			Для Каждого ЭлементМассива Из МассивФайлов Цикл
				Если СравнитьПутиФайлов(ЭлементМассива.Файл.ПолноеИмя, ИмяФайла) Тогда
					ДанныеФайла = ЭлементМассива;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
		КонецЕсли;	 
	КонецЦикла;	
	
	
	Если ДанныеФайла = Неопределено Тогда
		МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "ПоискEPF", "НайденныеФайлы");
		
		Если МассивФайлов <> Неопределено Тогда
			Для Каждого ЭлементМассива Из МассивФайлов Цикл
				Если СравнитьПутиФайлов(ЭлементМассива.Файл.ПолноеИмя, ИмяФайла) Тогда
					ДанныеФайла = ЭлементМассива;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат ДанныеФайла;
	
КонецФункции	

&НаКлиенте
Процедура УдалитьСтрокиИз_ТаблицаИзвестныхStepDefinition_ДляКоторыхНетФайловИСтрокиИзмененныхФайлов(ДанныеПоВерсиямОбработок,
	                                                                                        ДополнительныеПараметры,
																							МассивФайлов)
	МассивФайловДляОбработки = Новый Массив;
	
	//МассивФайлов = ПолучитьМассивФайловИзТаблицы_ТаблицаИзвестныхStepDefinition();
	Для Каждого ИмяФайла Из МассивФайлов Цикл
		Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
			МассивФайловДляОбработки.Добавить(ИмяФайла);
		Иначе
			Если ЕстьПоддержкаАсинхронныхВызовов Тогда
				
				ДанныеФайла = ПолучитьДанныеФайлаПоСобраннойРанееИнформации(ИмяФайла, ДополнительныеПараметры);
				Если ДанныеФайла = Неопределено Тогда
					ТекВерсия = Неопределено;
				Иначе	
					ТекВерсия   = ДанныеФайла.ВерсияФайла;
				КонецЕсли;	 
				
			Иначе	
				ТекВерсия = ВремяИзмененияФайлаКомандаСистемы(ИмяФайла);
			КонецЕсли;	 
			
			
			ИД        = ДанныеПоВерсиямОбработок.МассивИменФайловИзТаблицаИзвестныхStepDefinition.Найти(ИмяФайла);
			Если ИД <> Неопределено Тогда
				ПрежняяВерсия = ДанныеПоВерсиямОбработок.МассивВерсийФайловИзТаблицаИзвестныхStepDefinition[ИД];
				Если ТекВерсия <> ПрежняяВерсия Тогда
					МассивФайловДляОбработки.Добавить(ИмяФайла);
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;	
	
	
	Если МассивФайловДляОбработки.Количество() > 0 Тогда
		УдалитьИз_ТаблицаИзвестныхStepDefinition_Файлы(МассивФайловДляОбработки);
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаДоПостроенияДереваСервер(ДанныеПоВерсиямОбработок,МассивФайлов,НедавноЗагруженныеФичи)
	СохранитьИСкопироватьНедавноЗагруженныеФичиВИнтерфейс(НедавноЗагруженныеФичи, Объект.РежимСамотестирования);
	Если Не Объект.РежимСамотестирования Тогда
		СохранитьНастройкиВХранилище("КаталогФич", Объект.КаталогФич, ПараметрыДляСохраненияНастроекСервер());	
	КонецЕсли;	 
	
	
	ВосстановитьНастройкиИзХранилищаКеш();
	ДанныеПоВерсиямОбработок = ПолучитьТаблицыПоТаблицаИзвестныхStepDefinition();
	
	МассивФайлов = ПолучитьМассивФайловИзТаблицы_ТаблицаИзвестныхStepDefinition();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоФич(СтруктураПараметров)
	КаталогИнструментов     = СтруктураПараметров.КаталогИнструментов;
	КаталогФич              = СтруктураПараметров.КаталогФич;
	МассивСообщений         = СтруктураПараметров.МассивСообщений;
	DebugLog                = СтруктураПараметров.DebugLog;
	КаталогиБиблиотек       = СтруктураПараметров.КаталогиБиблиотек;
	ДополнительныеПараметры = СтруктураПараметров.ДополнительныеПараметры;
	
	СтруктураПараметров.ДополнительныеПараметры = Неопределено;//они не могут быть сериализованы в поздних версиях платформы
	
	ПутьКФичам = Новый Файл(КаталогФич);
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Если Не ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "КаталогФич", "Существует") Тогда
			Возврат;
		КонецЕсли;	 
	Иначе	
		Если Не ПутьКФичам.Существует() Тогда
			МассивСообщений.Добавить("Не найден путь " + КаталогФич);
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ТаблицаКонтекстовОбработок = Новый Массив;
		ТаблицаИзвестныхStepDefinition.Очистить();
		МассивИменКонтекстовОбработок.Очистить();
	КонецЕсли;	
	
	Путь = ПутьКФичам.ПолноеИмя;
	СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога", Истина);
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Если Не ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "КаталогФич", "ЭтоКаталог") Тогда //это файл
			Путь = ПутьКФичам.Путь;
			СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога", Ложь);
		КонецЕсли;	 
	Иначе	
		Если ПутьКФичам.ЭтоФайл() Тогда
			Путь = ПутьКФичам.Путь;
			СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога", Ложь);
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	ДанныеПоВерсиямОбработок = Неопределено;
	МассивФайлов             = Неопределено;
	ОбработкаДоПостроенияДереваСервер(ДанныеПоВерсиямОбработок,МассивФайлов,НедавноЗагруженныеФичи);
	
	УдалитьСтрокиИз_ТаблицаИзвестныхStepDefinition_ДляКоторыхНетФайловИСтрокиИзмененныхФайлов(ДанныеПоВерсиямОбработок,
	                                                                                           ДополнительныеПараметры,
																							   МассивФайлов);
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ТаблицаУжеСуществующихСценариев = Новый Массив();
	КонецЕсли; 
	
	МассивИменФайловКоторыеСовпалиСКеш = Новый Массив;
																							   
	Если Объект.ВерсияПоставки = "single" Тогда
		ВерсияСнипетов = ТекущаяДата();
		ВстроенныеБиблиотеки = ВстроенныеБиблиотеки();
		БылиОшибки = Ложь;
		
		ПодключитьСнипетыИзВнутреннихФорм(ВстроенныеБиблиотеки, ВерсияСнипетов, БылиОшибки,СтруктураПараметров,
		  МассивИменФайловКоторыеСовпалиСКеш,МассивИменКонтекстовОбработок,ТаблицаКонтекстовОбработок,КаталогФич);
		  
		Если ТаблицаУжеСуществующихСценариев.Количество() = 0 Тогда
			//если ТаблицаУжеСуществующихСценариев.Количество() > 0, значит встроенные сценарии уже точно загружались
			ПолучитьУжеСуществующиеСценарииИзВстроенныхФич(ДополнительныеПараметры);  
		КонецЕсли;	  
	КонецЕсли;	 																							   
	
	СтруктураПараметров.Вставить("ДанныеПоВерсиямОбработок",ДанныеПоВерсиямОбработок);
	СтруктураПараметров.Вставить("МассивИменФайловКоторыеСовпалиСКеш",МассивИменФайловКоторыеСовпалиСКеш);
	СтруктураПараметров.Вставить("Путь",Путь);
	
	ДанныеДляПолученияСнипетов = Новый Массив;
	ПолучитьУжеСуществующиеСнипетыИзОбработок(Путь, ДанныеДляПолученияСнипетов, ДополнительныеПараметры,
	                                          ДанныеПоВерсиямОбработок.МассивВерсийФайловИзТаблицаИзвестныхStepDefinition,
											  ДанныеПоВерсиямОбработок.МассивИменФайловИзТаблицаИзвестныхStepDefinition,
											  МассивИменФайловКоторыеСовпалиСКеш);
											  
	Для каждого Элем Из КаталогиБиблиотек Цикл
		ПутьКаталогаБиблиотеки = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);

		ПолучитьУжеСуществующиеСнипетыИзОбработок(ПутьКаталогаБиблиотеки, ДанныеДляПолученияСнипетов, ДополнительныеПараметры,
		                                          ДанныеПоВерсиямОбработок.МассивВерсийФайловИзТаблицаИзвестныхStepDefinition,
												  ДанныеПоВерсиямОбработок.МассивИменФайловИзТаблицаИзвестныхStepDefinition,
												  МассивИменФайловКоторыеСовпалиСКеш);
	КонецЦикла;
	
	
	СтруктураПараметров.Вставить("ДополнительныеПараметры",ДополнительныеПараметры);
	глСтруктураПараметров = СтруктураПараметров;
	
	
	ДанныеФайлов = Новый Соответствие;
	
	ПомещаемыеФайлы = Новый Массив;
	Для Каждого Данные Из ДанныеДляПолученияСнипетов Цикл
		ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(Данные.ИмяФайла);
		ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
		
		ДанныеФайлов.Вставить(Данные.ИмяФайла,Новый Структура("Имя,ИмяФайла,ВерсияФайла",Данные.Имя,Данные.ИмяФайла,Данные.ВерсияФайла));
	КонецЦикла;	 
	
	Если ПомещаемыеФайлы.Количество() = 0 Тогда
		ЗаполнитьДеревоФичПродолжение();
		Возврат;
	КонецЕсли;	 
	
	ПараметрыЗавершения = Новый Структура;	
	ПараметрыЗавершения.Вставить("ДанныеФайлов",ДанныеФайлов);
	Выполнить("НачатьПомещениеФайлов(Новый ОписаниеОповещения(""ОбработчикПодключенияБиблиотекШагов"", ЭтаФорма, ПараметрыЗавершения),
		|ПомещаемыеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор)");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивДляПоискаДублейФайлов(МассивФайлов)
	Массив = Новый Массив;
	
	Для каждого Элем Из МассивФайлов Цикл
		Если ТипЗнч(Элем) = Тип("Структура") Тогда
			Массив.Добавить(Элем.Файл.ПолноеИмя);
		Иначе	
			Массив.Добавить(Элем.ПолноеИмя);
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Массив;
КонецФункции	

&НаСервере
Функция ПолучитьТекстВстроенныхСценариевСервер()
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет("ЭкспортныеСценарии"); 
КонецФункции	 

&НаКлиенте
Процедура ПолучитьУжеСуществующиеСценарииИзВстроенныхФич(ДополнительныеПараметры = Неопределено)
	ТекстФичи = ПолучитьТекстВстроенныхСценариевСервер();
	МассивСтрок = Новый Массив;
	Для Ккк = 1 По ТекстФичи.КоличествоСтрок() Цикл
		МассивСтрок.Добавить(ТекстФичи.ПолучитьСтроку(Ккк));
	КонецЦикла;	
	
	ИмяВременнойФичи = ПолучитьИмяВременногоФайла("feature");
	ЗТ = Новый ЗаписьТекста(ИмяВременнойФичи,"UTF-8",,Истина); 
	Для Каждого Стр Из МассивСтрок Цикл
		ЗТ.ЗаписатьСтроку(Стр); 
	КонецЦикла;	
	ЗТ.Закрыть();
	
	Файл = Новый Файл(ИмяВременнойФичи);
	ОбработатьМассивСтрокФичи(МассивСтрок,ИмяВременнойФичи,Файл);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьУжеСуществующиеСценарииИзФич(Знач КаталогФич, ДополнительныеПараметры = Неопределено, МассивУжеОбработанныхаФайлов)
	Файл = Новый Файл(КаталогФич);
	
	НачальныйКаталог = КаталогФич;
	КаталогПоиска    = НачальныйКаталог;
	
	Файл = Новый Файл(НачальныйКаталог);
	Если НРег(Файл.Расширение) = ".feature" Тогда
		КаталогПоиска = Файл.Путь;
	КонецЕсли;	 
	
	Отладка(ПолучитьТекстСообщенияПользователю("Ищу сценарии в каталоге") + " " + КаталогПоиска);
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, КаталогФич, "НайденныеФайлы"); //это файлы по данной библиотеке
		Если МассивФайлов = Неопределено Тогда
			МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "ПоискFeature", "НайденныеФайлы");
		КонецЕсли;	 
		
		Ном = 0;
		Для каждого Библ Из Объект.КаталогиБиблиотек Цикл
			Ном = Ном + 1;
			
			МассивДляПоискаДублейФайлов = ПолучитьМассивДляПоискаДублейФайлов(МассивФайлов);
			
			МассивФайловБиблиотека = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "БиблиотекаФич" + Ном, "НайденныеФайлы");
			Для каждого Элем Из МассивФайловБиблиотека Цикл
				Если МассивДляПоискаДублейФайлов.Найти(Элем.Файл.ПолноеИмя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;	 
				
				МассивФайлов.Добавить(Элем);
			КонецЦикла;
		КонецЦикла;
		
	Иначе	
		МассивФайлов = НайтиФайлы(КаталогПоиска, "*.feature", Истина);
	КонецЕсли;	 
	
	Для Каждого ФайлОбъект Из МассивФайлов Цикл
		Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
			Файл = ФайлОбъект;
		Иначе
			Файл = ФайлОбъект.Файл;
		КонецЕсли;	 
		
		Если НРег(Файл.Расширение) <> ".feature" Тогда
			Продолжить;
		КонецЕсли;	 
		
		ИмяФайла = УниверсальноеПолноеИмяФайла(Файл.ПолноеИмя);
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(Файл.ПолноеИмя, "UTF-8");
		
		Если МассивУжеОбработанныхаФайлов.Найти(ИмяФайла) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		МассивУжеОбработанныхаФайлов.Добавить(ИмяФайла);
		
		
		
		
		Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
			ВерсияФайла = Файл.ПолучитьВремяИзменения();
			
			
			ИДВерсииФайла = МассивВерсийFeatureИмяФайла.Найти(ИмяФайла);
			Если ИДВерсииФайла = Неопределено Тогда
				МассивВерсийFeatureИмяФайла.Добавить(ИмяФайла);
				МассивВерсийFeatureВерсия.Добавить(ВерсияФайла);
			Иначе	
				Если МассивВерсийFeatureВерсия[ИДВерсииФайла] <> ВерсияФайла Тогда
					//значит файл изменился
					//обновляем версию и удаляем старые снипеты
					МассивВерсийFeatureВерсия[ИДВерсииФайла] = ВерсияФайла;
					
					
					МассивИД = Новый Массив;
					Ном = -1;
					Для каждого Элем Из ТаблицаУжеСуществующихСценариев Цикл
						Ном = Ном + 1;
						Если СравнитьПутиФайлов(Элем.ИмяФайла,ИмяФайла) Тогда
							МассивИД.Добавить(Ном);
						КонецЕсли; 
						
					КонецЦикла;
					
					Для Ккк = 0 По МассивИД.Количество() - 1 Цикл
						ИД = МассивИД[МассивИД.Количество() - 1 - Ккк];
						ТаблицаУжеСуществующихСценариев.Удалить(ИД);
					КонецЦикла;
					
					Отладка("Загрузил новую версию: " + Файл.ПолноеИмя);
				Иначе
					//значит уже актуальная версия файла загружена
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
		
		
		МассивСтрок = Новый Массив;
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
			
			МассивСтрок.Добавить(Стр);
		КонецЦикла;	 
		Текст.Закрыть();
		
		ОбработатьМассивСтрокФичи(МассивСтрок,ИмяФайла,Файл);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьМассивСтрокФичи(МассивСтрок,ИмяВладельца,Файл = Неопределено)
	ТипШага  = "";
	Описание = "";
	Пример   = "";
	
	
	ПолноеИмяФайла = Неопределено;
	Если Файл <> Неопределено  Тогда
		ПолноеИмяФайла = Файл.ПолноеИмя;
	КонецЕсли;
	
	НашлиТегExportScenarios = Ложь;
	ДобавлятьШаги = Ложь;
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		Стр = МассивСтрок.Получить(Ккк);
		
		Стр = СокрЛП(Стр);
		СтрНРег = НРег(Стр);
		
		Если Стр = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если СтрНРег = "@exportscenarios" Тогда
			НашлиТегExportScenarios = Истина;
		КонецЕсли;	 
		
		
		
		
		Если Лев(СтрНРег, 1) = "@" Тогда
			Если Лев(СтрНРег, 9) = "@типшага:" Тогда
				ТипШага = Сред(Стр, 10);
			ИначеЕсли Лев(СтрНРег, 10) = "@описание:" Тогда
				Описание = Сред(Стр, 11);
			ИначеЕсли Лев(СтрНРег, 21) = "@примериспользования:" Тогда
				ПромСтр = Сред(Стр, 22);
				Если Пример = "" Тогда
					Пример = ПромСтр;
				Иначе
					Пример = Пример + Символы.ПС + ПромСтр;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Продолжить;
		КонецЕсли;	 
		
		Если Лев(СтрНРег, 1) = "#" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если НашлиТегExportScenarios Тогда
			Если ЭтоОпределениеСценария(СтрНРег) Тогда
				ДобавлятьШаги = Истина;
				ИмяСценария = СокрЛП(Сред(Стр, 10));
				ТаблицаШагов = Новый Массив;
				
				ТаблицаУжеСуществующихСценариев.Добавить(ПолучитьСтруктуруДляСценария(ИмяСценария, ИмяВладельца, ТаблицаШагов, ПолноеИмяФайла, Ложь, ТипШага, Описание, Пример));
				
				ТипШага  = "";
				Описание = "";
				Пример   = "";
				Продолжить;
			ИначеЕсли ЭтоОпределениеСтруктурыСценария(СтрНРег) Тогда
				ДобавлятьШаги = Истина;
				ИмяСценария = СокрЛП(Сред(Стр, 20));
				ТаблицаШагов = Новый Массив;
				ТаблицаУжеСуществующихСценариев.Добавить(ПолучитьСтруктуруДляСценария(ИмяСценария, ИмяВладельца, ТаблицаШагов, ПолноеИмяФайла, Истина, ТипШага, Описание, Пример));
				
				ТипШага  = "";
				Описание = "";
				Пример   = "";
				Продолжить;
			КонецЕсли;	
			
			Если ДобавлятьШаги Тогда
				ТаблицаШагов.Добавить(Стр);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьСтруктуруДляСценария(ИмяСценария, ИмяФайла, ТаблицаШагов, ПолноеИмя, ЭтоСтруктураСценария, ТипШага, Описание, Пример)
	Структура = Новый Структура;
	Структура.Вставить("ИмяСценария", ИмяСценария);
	Структура.Вставить("ИмяФайла", ИмяФайла);
	Структура.Вставить("ПолноеИмя", ПолноеИмя);
	Структура.Вставить("ТаблицаШагов", ТаблицаШагов);
	Структура.Вставить("ЭтоСтруктураСценария", ЭтоСтруктураСценария);
	Если ПолноеИмя <> Неопределено Тогда
		Структура.Вставить("ДвоичныеДанные", Новый ДвоичныеДанные(ПолноеИмя));
	Иначе	
		Структура.Вставить("ДвоичныеДанные", Неопределено);
	КонецЕсли;	 
	Структура.Вставить("Снипет", "");
	
	Структура.Вставить("ТипШага", СокрЛП(ТипШага));
	Структура.Вставить("ОписаниеШага", СокрЛП(Описание));
	Структура.Вставить("ПримерИспользования", СокрЛП(Пример));
	
	Возврат Структура;
КонецФункции	

&НаКлиенте
Функция ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, ИмяПараметра, ЗначениеПараметра)
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	Для каждого Элем Из МассивДействий Цикл
		Если Элем.ИмяПараметра = ИмяПараметра Тогда
			Возврат Элем[ЗначениеПараметра];
		КонецЕсли;	 
	КонецЦикла;
КонецФункции	

&НаКлиенте
//Объединяем относительные пути файловой системы в один
// при передаче Путь = ../test/file.txt и ПутьОтносительно=c:\work\ возращаем c:\test\file.txt
// при передаче Путь = ./test/file.txt и ПутьОтносительно=c:\work\ возращаем c:\work\test\file.txt
// если в начале нет точки, считаем этот путь полным. 
Функция ПолучитьПолныйПутьОтносительноКаталогаОбработки(Знач Путь, Знач ПутьОтносительно)
	Перем Результат;
	Результат = Путь;
	Если Лев(СокрЛП(Путь), 1) = "." Тогда 
		ФайлОбработки = Новый Файл(ПутьОтносительно);
		КаталогОбработки = ДополнитьСлешВПуть(?(ФайлОбработки.ЭтоКаталог(), ФайлОбработки.ПолноеИмя, ФайлОбработки.Путь));
		ФайлПути = Новый Файл(КаталогОбработки + Путь);
		
		Результат = ФайлПути.ПолноеИмя;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПроверитьСуществованиеКаталогаИнструментов(ИмяФайла, ДополнительныеПараметры = Неопределено, ПутьКОбработке)
	Перем ПутьФайла;
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Возврат ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "КаталогИнструментов", "Существует");
	Иначе	
		ПутьФайла = ПреобразоватьПутьСТочкамиКНормальномуПути(ИмяФайла);
		ФайлПроверкаСуществования = Новый Файл(ПутьФайла);
		Если НЕ ФайлПроверкаСуществования.Существует() Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не найден каталог инструментов: %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайла);
			Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
			Возврат Ложь;
		КонецЕсли;	   
		
	КонецЕсли;	 
	Возврат Истина;
КонецФункции	

&НаКлиенте
Функция ПроверитьСуществованиеКаталогаБиблиотек(ДополнительныеПараметры = Неопределено, ПутьКОбработке)
	Перем ПутьФайла;
	
	БылиОшибки = Ложь;
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Ном = 0;
		Для каждого Элем Из Объект.КаталогиБиблиотек Цикл
			Ном = Ном + 1;
			Если НЕ ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "КаталогиБиблиотек" + Ном, "Существует") Тогда
				БылиОшибки = Истина;
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не найден каталог библиотеки: %1");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Объект.КаталогиБиблиотек[Ном-1].Значение);
				Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
				
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = ТекстСообщения;
				СообщениеПользователю.Поле  = "КаталогиБиблиотек[%1].Значение";
				СообщениеПользователю.Поле = СтрЗаменить(СообщениеПользователю.Поле,"%1",XMLСтрока(Ном));
				СообщениеПользователю.ПутьКДанным = "Объект";
				СообщениеПользователю.Сообщить();
			КонецЕсли;	  
		КонецЦикла;	
	Иначе	
		Ном = 0;
		Для каждого Элем Из Объект.КаталогиБиблиотек Цикл
			Ном = Ном + 1;
			ПутьФайла = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);
			ФайлПроверкаСуществования = Новый Файл(ПутьФайла);
			Если НЕ ФайлПроверкаСуществования.Существует() Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не найден каталог библиотеки: %1");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Элем.Значение);
				Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
				БылиОшибки = Истина;
				
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = ТекстСообщения;
				СообщениеПользователю.Поле  = "КаталогиБиблиотек[%1].Значение";
				СообщениеПользователю.Поле = СтрЗаменить(СообщениеПользователю.Поле,"%1",XMLСтрока(Ном));
				СообщениеПользователю.ПутьКДанным = "Объект";
				СообщениеПользователю.Сообщить();
			КонецЕсли;	   
		КонецЦикла;
		
	КонецЕсли;	 
	
	Возврат Не БылиОшибки;
КонецФункции

&НаСервере
Процедура ЗаполнитьИДСтрокиДереваСервер(СтруктураПараметров,Дерево)
	МассивИменКонтекстовОбработок = СтруктураПараметров.МассивИменКонтекстовОбработок;
	
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	МассивСтрокДереваДанныеФормы = Новый Массив;
	ЗаполнитьИДСтрокиВДереве(Дерево, МассивСтрокДереваДанныеФормы, МассивИменКонтекстовОбработок, ТзнТаблицаИзвестныхStepDefinition, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, Путь, ИмяПараметра, ТипПараметра)
	
	СтруктураФайла = Новый Структура;
	СтруктураФайла.Вставить("ИмяФайла", Путь);
	СтруктураФайла.Вставить("ИмяПараметра", ИмяПараметра);
	СтруктураФайла.Вставить("ТипПараметра", ТипПараметра);
	
	Массив.Добавить(СтруктураФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСканированиеКаталогов(Массив)
	Перем ПутьФайла, ПутьКОбработке;

	//FIXME: необходимо вынести в реквизит формы.
	ПутьКОбработке = ПолучитьПутьКОбработкеКлиент();
	ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, "", "ПоискEPF", "СканированиеКаталогаПоискEPF");
	ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, "", "ПоискFeature", "СканированиеКаталогаПоискFeature");
	Ном = 0;
	Для каждого Элем Из Объект.КаталогиБиблиотек Цикл
		Ном = Ном + 1;
		ПутьФайла = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);
		ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, "", ПутьФайла, "СканированиеКаталогаПоискEPF");
		ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, "", "БиблиотекаФич" + Ном, "СканированиеКаталогаПоискFeature");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМассивСостоянийФайлов(Массив)
	Перем ПутьФайла, ПутьКОбработке;
	
	ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогИнструментов), "КаталогИнструментов", "РаботаСФайлом");
	ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогИнструментов)) + "lib/FeatureReader/vbFeatureReader.epf", "vbFeatureReader", "РаботаСФайлом");
	ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputAllure), "КаталогOutputAllure", "РаботаСФайлом");
	ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputjUnit), "КаталогOutputjUnit", "РаботаСФайлом");
	ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputCucumberJson), "КаталогOutputCucumberJson", "РаботаСФайлом");
	ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputИнструкцияHTML), "КаталогOutputИнструкцияHTML", "РаботаСФайлом");
	ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогФич), "КаталогФич", "РаботаСФайлом");
	

	Ном = 0;
	Для каждого Элем Из Объект.КаталогиБиблиотек Цикл
		Ном = Ном + 1;
		ПутьФайла = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);
		ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, ПутьФайла, "КаталогиБиблиотек" + Ном, "РаботаСФайлом");
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПолучитьСинхроноСостоянияОбъектовФайловойСистемы(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАсинхроноСледующийФайл(ДополнительныеПараметры)
	ДополнительныеПараметры.ТекИдМассива = ДополнительныеПараметры.ТекИдМассива + 1;
	ПолучитьАсинхроноСостоянияОбъектовФайловойСистемы(ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВерсиюФайловАссинхронно(ДополнительныеПараметры)
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];
	НайденныеФайлы = СтруктураФайла.НайденныеФайлы;
	
	СтруктураФайла.ИДФайлаДляОбработки = СтруктураФайла.ИДФайлаДляОбработки + 1;
	Если СтруктураФайла.ИДФайлаДляОбработки > (НайденныеФайлы.Количество() - 1) Тогда
		ОбработатьАсинхроноСледующийФайл(ДополнительныеПараметры);
	Иначе
		Файл = Новый Файл(НайденныеФайлы[СтруктураФайла.ИДФайлаДляОбработки].Файл.ПолноеИмя);
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработчикНачатьПолучитьВремяИзмененияФайлаМассив"", ЭтаФорма, ДополнительныеПараметры)");
		Выполнить("Файл.НачатьПолучениеВремениИзменения(ОписаниеОповещения)");
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьАсинхроноСостоянияОбъектовФайловойСистемы(ДополнительныеПараметры);
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	Если ТекИдМассива > (МассивДействий.Количество() - 1) Тогда
		Если ДополнительныеПараметры.НадоЗагрузитьФичи Тогда
			ЗагрузитьФичиПродолжение(ДополнительныеПараметры);
		КонецЕсли;	 
		Если ДополнительныеПараметры.НадоГенерироватьEPF Тогда
			СоздатьШаблоныОбработокПродолжение(ДополнительныеПараметры);
		КонецЕсли;	 
		Возврат;
	КонецЕсли;	 
	
	СтруктураФайла = МассивДействий[ТекИдМассива];
	Если СтруктураФайла.ТипПараметра = "РаботаСФайлом" Тогда
		Файл = Новый Файл(СтруктураФайла.ИмяФайла);
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработчикНачатьПроверкуСуществования"", ЭтаФорма, ДополнительныеПараметры)");
		Выполнить("Файл.НачатьПроверкуСуществования(ОписаниеОповещения)");
	ИначеЕсли	Найти(СтруктураФайла.ТипПараметра, "СканированиеКаталогаПоиск") > 0 Тогда
		Если НЕ ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "КаталогФич", "Существует") Тогда
			ОбработатьАсинхроноСледующийФайл(ДополнительныеПараметры);
			Возврат;
		КонецЕсли;	 
		
		Если (СтруктураФайла.ИмяПараметра = "ПоискEPF") или (СтруктураФайла.ИмяПараметра = "ПоискFeature") или (Лев(СтруктураФайла.ИмяПараметра, 13) = "БиблиотекаФич") Тогда
			//значит мы ищем родные epf для фич
			ПутьКФичам = Новый Файл(Объект.КаталогФич);
			Путь = ПутьКФичам.ПолноеИмя;
			Если Не ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "КаталогФич", "ЭтоКаталог") Тогда //это файл
				Путь = ПутьКФичам.Путь;
			КонецЕсли;	 
			
			
			Если Лев(СтруктураФайла.ИмяПараметра, 13) = "БиблиотекаФич" Тогда
				Ном = СтрЗаменить(СтруктураФайла.ИмяПараметра, "БиблиотекаФич", "");
				Ном = СтрЗаменить(Ном, Символы.НПП, "");
				Ном = Число(Ном);
				Путь = Объект.КаталогиБиблиотек[Ном - 1].Значение;
			КонецЕсли;
			
			Путь = ПреобразоватьПутьСТочкамиКНормальномуПути(Путь);
			
		Иначе
			Путь = СтруктураФайла.ИмяПараметра;
		КонецЕсли;	 
		
		Маска = "*." + НРег(СтрЗаменить(СтруктураФайла.ТипПараметра, "СканированиеКаталогаПоиск", ""));
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработчикНачатьПоискФайлов"", Этаформа, ДополнительныеПараметры)");
		
		Если СтруктураФайла.ТипПараметра = "СканированиеКаталогаПоискFeature" Тогда
			Маска = "*";
		КонецЕсли;	 
		Выполнить("НачатьПоискФайлов(ОписаниеОповещения, Путь, Маска, Истина)"); 
	Иначе
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Неивестный ТипПараметра в ПолучитьАсинхроноСостоянияОбъектовФайловойСистемы: %1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтруктураФайла.ТипПараметра);
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервере
Функция НайтиИДСтрокиСценарияПоИмени(Имя)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	
	Дерево = ОбъектСервер.ДеревоТестов;
	Строки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя, Тип", Имя, "Сценарий"), Истина);
	Если Строки.Количество() > 0 Тогда
		Возврат Строки[0].ИдСтроки;
	КонецЕсли;	 
	
	Возврат Неопределено;
	
КонецФункции	

&НаКлиенте
Процедура ЗагрузитьФичиПродолжение(ДополнительныеПараметры = Неопределено)
	КаталогИнструментов = Объект.КаталогИнструментов;
	КаталогФич          = Объект.КаталогФич;
	DebugLog            = Объект.DebugLog;
	КаталогиБиблиотек   = Объект.КаталогиБиблиотек.Скопировать();
	ПутьКОбработке		= ПолучитьПутьКОбработкеКлиент();
	
	Для каждого ЭлементБиблиотеки Из КаталогиБиблиотек  Цикл
		ЭлементБиблиотеки.Значение = ПреобразоватьПутьСТочкамиКНормальномуПути(ЭлементБиблиотеки.Значение);
	КонецЦикла; 
	
	Если НЕ ПроверитьСуществованиеКаталогаБиблиотек(ДополнительныеПараметры, ПутьКОбработке) Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ВерсияПоставки = "standart" Тогда
		Если НЕ ПроверитьСуществованиеКаталогаИнструментов(КаталогИнструментов, ДополнительныеПараметры, ПутьКОбработке) Тогда
			СделатьСообщение("Не заполнен служебный параметр КаталогИнструментов.");
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ПарсерФич = "";
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КаталогИнструментов", КаталогИнструментов);
	СтруктураПараметров.Вставить("КаталогФич", КаталогФич);
	СтруктураПараметров.Вставить("ПутьКОбработке", ПутьКОбработке);
	
	МассивСообщений = Новый Массив;
	СтруктураПараметров.Вставить("МассивСообщений", МассивСообщений);
	СтруктураПараметров.Вставить("DebugLog", DebugLog);
	СтруктураПараметров.Вставить("КаталогиБиблиотек", КаталогиБиблиотек);
	СтруктураПараметров.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	СтруктураПараметров.Вставить("СписокТеговИсключение", Объект.СписокТеговИсключение);
	СтруктураПараметров.Вставить("СписокТеговОтбор", Объект.СписокТеговОтбор);
	СтруктураПараметров.Вставить("Брейкпоинты", Брейкпоинты);
	СтруктураПараметров.Вставить("РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов", Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов);
	СтруктураПараметров.Вставить("МассивИменКонтекстовОбработок", МассивИменКонтекстовОбработок);
	СтруктураПараметров.Вставить("ЭтоЗагрузкаФич", Истина);
	
	СтруктураПараметров.Вставить("ТекстСообщенийПользователю", Объект.ТекстСообщенийПользователю);
	ТекущийЗагружаемыйФичаФайл = Неопределено;
	Если Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов Тогда
		СтруктураПараметров.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийССохранениемКонтекстов", СтрокаШагаСКоторогоНадоВыполнятьСценарий.ИдСтроки);
	КонецЕсли;	 
	
	
	Попытка
		ЗаполнитьДеревоФич(СтруктураПараметров);
	Исключение
		ФлагСценарииЗагружены = Истина;
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ошибка при построении дерева из файла <%1>%2%3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекущийЗагружаемыйФичаФайл);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Символы.ПС);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ОписаниеОшибки());
		СделатьСообщение(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
		Возврат;
	КонецПопытки;
	
	Для каждого Элем Из МассивСообщений Цикл
		Сообщить(Элем);
	КонецЦикла;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ЗапуститьСценарийСоСтрокиПрисланнойИзвне")
			И ДополнительныеПараметры.ЗапуститьСценарийСоСтрокиПрисланнойИзвне Тогда
				ПодключитьОбработчикОжидания("ЗапуститьСценарийСоСтрокиПрисланнойИзвне",0.1,Истина);
				
		ИначеЕсли ДополнительныеПараметры.Свойство("ПерезагрузитьИВыполнить")
			И ДополнительныеПараметры.ПерезагрузитьИВыполнить Тогда
				ПерезагрузитьИВыполнить("");
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоФичПродолжение()
	СтруктураПараметров = глСтруктураПараметров;
	КаталогИнструментов     = СтруктураПараметров.КаталогИнструментов;
	КаталогФич              = СтруктураПараметров.КаталогФич;
	DebugLog                = СтруктураПараметров.DebugLog;
	КаталогиБиблиотек       = СтруктураПараметров.КаталогиБиблиотек;
	ДополнительныеПараметры = СтруктураПараметров.ДополнительныеПараметры;
	СтруктураПараметров.Вставить("ДополнительныеПараметры",Неопределено);
	МассивИменФайловКоторыеСовпалиСКеш = СтруктураПараметров.МассивИменФайловКоторыеСовпалиСКеш;
	Путь                               = СтруктураПараметров.Путь;
	ПутьКФичам = Новый Файл(КаталогФич);
	
	
	Состояние(ПолучитьТекстСообщенияПользователю("Построение дерева."));
	
	УдалитьСтрокиТаблицаИзвестныхStepDefinitionКоторыеНеОбрабатывались(МассивИменФайловКоторыеСовпалиСКеш);
	
	
	МассивОбработанныхФайлов    = Новый Массив;
	ПолучитьУжеСуществующиеСценарииИзФич(Путь, ДополнительныеПараметры, МассивОбработанныхФайлов);
	Для каждого Элем Из КаталогиБиблиотек Цикл
		ПолучитьУжеСуществующиеСценарииИзФич(Элем.Значение, ДополнительныеПараметры, МассивОбработанныхФайлов);
	КонецЦикла;
	СтруктураПараметров.Вставить("ТаблицаУжеСуществующихСценариевУФ", ТаблицаУжеСуществующихСценариев);
	СтруктураПараметров.Вставить("ЭтоLinux",ЭтоLinux);
	СтруктураПараметров.Вставить("ЯзыкГенератораGherkin",Объект.ЯзыкГенератораGherkin);
	СтруктураПараметров.Вставить("ДвоичныеДанныеФайлПеревода",ПолучитьФайлыПеревода());
	
	ТаблицаУжеСуществующихСценариев = СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ;
	
	ЗаполнитьДерево(ПутьКФичам.ПолноеИмя, ДополнительныеПараметры, СтруктураПараметров);
	
	Если НЕ НадоВыполнитьСценарийСоСтрокиПереданнойИзвне и НадоПерейтиКСтрокеДерева = -1 Тогда
		ПодключитьОбработчикОжидания("РазвернутьДерево", 0.2, Истина);
	КонецЕсли;	 
	
	Если Объект.ПодключитьВнешниеОбработкиДляОтладки Тогда
		ПодключитьВнешниеОбработкиДляОтладки();
	КонецЕсли; 
	
	Если Брейкпоинты.Количество() > 0 Тогда
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовБрейкпоинт.Видимость = Истина;
	КонецЕсли;	 
	
	СделатьСообщение("Фичи загружены");
	Если Объект.НадоВыполнитьСценарииПослеЗагрузкиФич Тогда
		ВыполнитьСценарии();
	ИначеЕсли Объект.НадоВыполнитьСценарииПослеЗагрузкиФичОдинРаз Тогда
		Объект.НадоВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Ложь;
		МассивИд = Неопределено;
		ДопПараметры = Неопределено;
		Если ЗначениеЗаполнено(ИмяСценарияКоторыйНадоВыполнитьПослеПереазгрузки) Тогда
			ИдСтроки = НайтиИДСтрокиСценарияПоИмени(ИмяСценарияКоторыйНадоВыполнитьПослеПереазгрузки);
			ИмяСценарияКоторыйНадоВыполнитьПослеПереазгрузки = "";
			Если ИдСтроки <> Неопределено Тогда
				МассивИд = Новый Массив;
				МассивИд.Добавить(ИдСтроки);
			КонецЕсли;	 
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ЭтоПример", СтрокаСценарияКоторыйНадоВыполнитьПослеПереазгрузкиЭтоПример);
		КонецЕсли;	 
		
		ВыполнитьСценарии(МассивИд, ДопПараметры);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьФлагСценарииЗагружены",0.1,Истина);
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьФлагСценарииЗагружены()
	ФлагСценарииЗагружены = Истина;
	Если НадоПерейтиКСтрокеДерева <> -1 Тогда
		НужнаяСтрока = Неопределено;
		НайтиСтрокуДереваПоИдСтроки(НадоПерейтиКСтрокеДерева, Объект.ДеревоТестов.ПолучитьЭлементы(), НужнаяСтрока);
		Если НужнаяСтрока <> Неопределено Тогда
			Элементы.ДеревоТестов.ТекущаяСтрока = НужнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;	 
		НадоПерейтиКСтрокеДерева = -1;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьПутиБиблиотек()
	Для Каждого Элем Из Объект.КаталогиБиблиотек Цикл
		Если Прав(Элем.Значение, 1) = "\" ИЛИ Прав(Элем.Значение, 1) = "/" Тогда
			Элем.Значение = Лев(Элем.Значение, СтрДлина(Элем.Значение) - 1);
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВерсиюОбработкиКлиент()
	Если Не ЗначениеЗаполнено(КешВерсияОбработки) Тогда
		КешВерсияОбработки = ПолучитьВерсиюОбработкиСервер();
	КонецЕсли;	 
	
	Возврат КешВерсияОбработки;
КонецФункции	

&НаСервере
Функция ПолучитьВерсиюОбработкиСервер(ТолькоЦифры = Ложь)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьВерсиюОбработки(Ложь, ТолькоЦифры);
КонецФункции

&НаСервере
Процедура ЗаполнитьКаталогИнструментовЕслиОнПустой()
	КаталогИнструментов = Объект.КаталогИнструментов;
	
	Если СокрЛП(КаталогИнструментов) = "" Тогда
		
		ИспользуемоеИмяФайла = ПолучитьПутьКОбработкеСервер();
		
		Если ЗначениеЗаполнено(ИспользуемоеИмяФайла) и  (Лев(НРег(ИспользуемоеИмяФайла), 6) <> "e1cib/") и (Лев(НРег(ИспользуемоеИмяФайла), 6) <> "e1cib\") Тогда
			Файл = Новый Файл(ИспользуемоеИмяФайла);
			КаталогИнструментов = Файл.Путь;
		Иначе	
			//попытаемся восстановить из настроек. Это нужно, когда Vanessa-Behavior вызвали программно, а затем сразу открыли интерактивно. В этом случае 1С подгружает версию из кеша от первой загрузки на сервере, и Объект().ИспользуемоеИмяФайла возвращает адрес в хранилище, а не имя исходного файла.
			Настройки = ХранилищеОбщихНастроек.Загрузить(ПолучитьИДДляОбщегоСохраненияНастроек());
			Если Настройки = Неопределено Тогда
				Настройки = ХранилищеОбщихНастроек.Загрузить(ПолучитьИДДляОбщегоСохраненияНастроек_Old());
			КонецЕсли;	 
			
			Если ТипЗнч(Настройки) = Тип("Структура") Тогда
				Настройки.Свойство("КаталогИнструментов", КаталогИнструментов);
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;	 
	
	Если Прав(КаталогИнструментов, 1) =  "\" Тогда
		КаталогИнструментов = Лев(КаталогИнструментов, СтрДлина(КаталогИнструментов) - 1);
	ИначеЕсли Прав(КаталогИнструментов, 1) =  "/" Тогда
		КаталогИнструментов = Лев(КаталогИнструментов, СтрДлина(КаталогИнструментов) - 1);
	КонецЕсли;	 
	
	Объект.КаталогИнструментов = КаталогИнструментов;
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьКонтекстноеМеню()
	Элементы.ДеревоТестовКонтекстноеМенюВыполнятьСценарииСначала.Видимость = Ложь;	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПараметров(Стр)
	Результат = Новый Структура;
	
	Массив = РазложитьСтрокуВМассивПодстрок(Стр, ";");
	Для каждого Элем Из Массив Цикл
		Поз = Найти(Элем, "=");
		Если Поз > 0 Тогда
			Ключ     = Лев(Элем, Поз - 1);
			Значение = Сред(Элем, Поз + 1);
			Попытка
				Результат.Вставить(Ключ, Значение);
			Исключение
				СделатьСообщение(ПолучитьТекстСообщенияПользователю("Не смог получить значение из строки запуска") + ": " + Ключ);
			КонецПопытки;
		Иначе
			Если НЕ ПустаяСтрока(Элем) Тогда 
				Попытка
					Результат.Вставить(Элем, Истина);
				Исключение
					СделатьСообщение(ПолучитьТекстСообщенияПользователю("Не смог получить значение из строки запуска") + ": " + Элем);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Результат;
КонецФункции	

&НаКлиенте
Функция ПолучитьЗначениеПереданногоПараметра(СтруктураПараметров, ИмяПараметра)
	Если СтруктураПараметров.Свойство(ИмяПараметра) Тогда
		Возврат СтруктураПараметров[ИмяПараметра];
	ИначеЕсли СтруктураПараметров.Свойство(Врег(ИмяПараметра)) Тогда 
		Возврат СтруктураПараметров[ВРег(ИмяПараметра)];
	Иначе	
		Возврат Неопределено;
	КонецЕсли;	 
КонецФункции	

&НаКлиенте 
Функция ПрочитатьСтруктуруИзJSONФайлаКлиент(VBParams)
	
	ПараметрыУФ            = Новый Структура;
	VBParamsДвоичныеДанные = Новый ДвоичныеДанные(VBParams);
	ПараметрыУФ.Вставить("VBParamsДвоичныеДанные", VBParamsДвоичныеДанные);
	
	Рез = ПрочитатьСтруктуруИзJSONФайлаСервер(VBParams, ПараметрыУФ);
	
	Возврат Рез;
	
КонецФункции

&НаСервере 
Функция ПрочитатьСтруктуруИзJSONФайлаСервер(VBParams, ПараметрыУФ)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Рез = ОбъектСервер.ПрочитатьСтруктуруИзJSONФайла(VBParams, ПараметрыУФ);
	Возврат Рез;
КонецФункции	

&НаКлиенте
Функция СоздатьСтруктуруПараметровЗапуска()
	Рез = Новый Структура;
	Рез.Вставить("StartFeaturePlayer", Ложь);
	Рез.Вставить("КаталогФич", "");
	Рез.Вставить("КаталогиБиблиотек", Новый Массив);
	Рез.Вставить("СписокТеговИсключение", Новый Массив);
	Рез.Вставить("СписокТеговОтбор", Новый Массив);
	Рез.Вставить("ВыгрузитьPIDTestManager", Ложь);
	Рез.Вставить("КаталогИсполняемогоФайла", "");
	Рез.Вставить("ИмяФайлаPIDTestManager", "");
	Рез.Вставить("ИмяФайлаВнешнихКомандФреймворка", "");
	Рез.Вставить("ПриравниватьPendingКFailed", Ложь);
	Рез.Вставить("КоличествоСекундПоискаОкна", "");
	Рез.Вставить("КоличествоПопытокВыполненияДействия", "");
	Рез.Вставить("ОстановкаПриВозникновенииОшибки", Ложь);
	Рез.Вставить("ПоказыватьНомерСтрокиДереваПриВозникновенииОшибки", Ложь);
	Рез.Вставить("ДелатьСообщенияТранслитом", Ложь);
	Рез.Вставить("СоздаватьИнструкциюHTML", Ложь);
	Рез.Вставить("СоздаватьИнструкциюMarkdown", Ложь);
	Рез.Вставить("СоздаватьИнструкциюВидео", Ложь);
	Рез.Вставить("ДелатьЛогВыполненияСценариевВЖР", Истина);
	Рез.Вставить("ДелатьЛогВыполненияСценариевВТекстовыйФайл", Ложь);
	Рез.Вставить("ВыводитьВЛогВыполнениеШагов", Ложь);
	Рез.Вставить("ДелатьЛогОшибокВТекстовыйФайл", Ложь);
	Рез.Вставить("ИмяФайлаЛогВыполненияСценариев", "");
	Рез.Вставить("ИмяКаталогаЛогОшибок", "");
	Рез.Вставить("ЗакрытьTestClientПослеЗапускаСценариев", Ложь);
	Рез.Вставить("КаталогOutputИнструкцияHTML", "");
	Рез.Вставить("КаталогOutputИнструкцияMarkdown", "");
	Рез.Вставить("КаталогOutputИнструкцияВидео", "");
	Рез.Вставить("ДелатьОтчетВоВнутреннемФормате", Ложь);
	Рез.Вставить("ДелатьОтчетВФорматеАллюр", Ложь);
	Рез.Вставить("КаталогИнструментов", "");
	Рез.Вставить("КаталогПроекта", "");
	Рез.Вставить("КаталогOutputAllure", "");
	Рез.Вставить("КаталогOutputAllureБазовый", "");
	Рез.Вставить("ДелатьОтчетВФорматеjUnit", Ложь);
	Рез.Вставить("КаталогOutputjUnit", "");
	Рез.Вставить("ДелатьОтчетВФорматеCucumberJson", Ложь);
	Рез.Вставить("КаталогOutputCucumberJson", "");
	Рез.Вставить("ДобавлятьКИмениСценарияУсловияВыгрузки", Ложь);
	Рез.Вставить("СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки", Ложь);
	Рез.Вставить("ВыгружатьСтатусВыполненияСценариевВФайл", Ложь);
	Рез.Вставить("ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев", "");
	Рез.Вставить("ВыполнитьСценарии", Ложь);
	Рез.Вставить("ВыполнитьСценарииСТекущегоШага", Ложь);
	Рез.Вставить("НомерСтрокиДляЗапускаСТекущегоШагаСценария", "");
	Рез.Вставить("ЗагрузитьСценарии", Ложь);
	Рез.Вставить("ЗавершитьРаботуСистемы", Ложь);
	Рез.Вставить("ИмяСборки", "");
	Рез.Вставить("ДелатьСкриншотПриВозникновенииОшибки", Ложь);
	Рез.Вставить("СниматьСкриншотКаждогоОкна1С", Ложь);
	Рез.Вставить("КомандаСделатьСкриншот", "");
	Рез.Вставить("КаталогOutputСкриншоты", "");
	Рез.Вставить("ЗапускатьТестКлиентВРежимеОтладки", Ложь);
	Рез.Вставить("КлючиОтладки", "");
	Рез.Вставить("АдресОтладчика", "");
	Рез.Вставить("ВыполнятьШагиАссинхронно", Ложь);
	Рез.Вставить("ПриоритетНастроекПользователя", Ложь);
	
	Рез.Вставить("ЗаписьВидеоКомандаНачатьЗаписьВидео", "");
	Рез.Вставить("ЗаписьВидеоФайлКурсораМышки", "");
	Рез.Вставить("ЗаписьВидеоКаталогДляВременныхФайлов", "");
	Рез.Вставить("ЗаписьВидеоФайлВодянойЗнак", "");
	Рез.Вставить("ЗаписьВидеоКомандаFfmpeg", "");
	Рез.Вставить("ЗаписьВидеоКомандаConvert", "");
	Рез.Вставить("ЗаписьВидеоКаталогМузыки", "");
	Рез.Вставить("ЗаписьВидеоГромкостьМузыки", "0.10");
	Рез.Вставить("ЗаписьВидеоДелатьНаложениеTTS", Ложь);
	Рез.Вставить("ЗаписьВидеоПутьКДвижкуTTS", "");
	Рез.Вставить("ЗаписьВидеоИмяTTS", "");
	Рез.Вставить("ЗаписьВидеоСловарьЗамен", "");
	Рез.Вставить("ЗаписьВидеоСловарьЗаменСписок", Неопределено);
	Рез.Вставить("ЗаписьВидеоЭкранШирина", "");
	Рез.Вставить("ЗаписьВидеоЭкранВысота", "");
	Рез.Вставить("ЗаписьВидеоКоличествоКадров", "");
	Рез.Вставить("ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", Ложь);
	Рез.Вставить("ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", Ложь);
	Рез.Вставить("ЗаписьВидеоГруппаШаговКакШаг", Ложь);
	Рез.Вставить("ЗаписьВидеоОтключитьМасштабированиеШаговПоВремени", Ложь);
	Рез.Вставить("ЗаписьВидеоПодсвечиватьНажатияМышки", Ложь);
	Рез.Вставить("ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи", Ложь);
	Рез.Вставить("ЗаписьВидеоОтключитьСлайдСценария", Ложь);
	Рез.Вставить("ЗаписьВидеоЭмулироватьВводСКлавиатуры", Ложь);
	Рез.Вставить("ЗаписьВидеоСкрытьСлужебныеОкна", Ложь);
	
	Рез.Вставить("ВерсияПлатформыДляГенерацииEPF", "");
	
	Рез.Вставить("ДополнительныеПараметры", Неопределено);
	
	Рез.Вставить("КлиентыТестирования", Неопределено);
	Рез.Вставить("ТаймаутЗапуска1С", "25");
	Рез.Вставить("ДиапазонПортовTestclient", "");
	
	Рез.Вставить("ТаймаутДляАсинхронныхШагов", "0");
	Рез.Вставить("БезопасноеВыполнениеШагов", Ложь);
	Рез.Вставить("КомандаОткрытияФичиВТекстовомРедакторе", "");
	Рез.Вставить("КаталогОтносительноКоторогоНадоСтроитьИерархию", "");
	Рез.Вставить("УровеньОтчета1", "");
	Рез.Вставить("УровеньОтчета2", "");
	Рез.Вставить("УровеньОтчета3", "");
	
	Рез.Вставить("ИспользоватьSikuliXСервер", Ложь);
	Рез.Вставить("КаталогиСкриптовSikuliX", "");
	
	Рез.Вставить("ИскатьЭлементыФормыПоИмени", Ложь);
	Рез.Вставить("ЗапускатьКлиентТестированияСМаксимизированнымОкном", Ложь);
	Рез.Вставить("ТегTreeВключенПоУмолчанию", Истина);
	
	Рез.Вставить("ЯзыкГенератораGherkin", "ru");
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Функция СоздатьКоллекциюКомандЗапуска()
	Рез = СоздатьСтруктуруПараметровЗапуска();
	Рез.Вставить("StartFeaturePlayer", Новый Структура("Р, А", "StartFeaturePlayer", "startfeatureplayer"));
	Рез.Вставить("КаталогФич", Новый Структура("Р, А", "КаталогФич", "featurepath"));
	Рез.Вставить("КаталогиБиблиотек", Новый Структура("Р, А", "КаталогиБиблиотек", "librarycatalogs"));
	Рез.Вставить("СписокТеговИсключение", Новый Структура("Р, А", "СписокТеговИсключение", "ignoretags"));
	Рез.Вставить("СписокТеговОтбор", Новый Структура("Р, А", "СписокТеговОтбор", "filtertags"));
	Рез.Вставить("ВыгрузитьPIDTestManager", Новый Структура("Р, А", "ВыгрузитьPIDTestManager", "returnpidoftestmanager"));
	Рез.Вставить("КаталогИсполняемогоФайла", Новый Структура("Р, А", "КаталогИсполняемогоФайла", "pathtoplatform"));
	Рез.Вставить("ИмяФайлаPIDTestManager", Новый Структура("Р, А", "ИмяФайлаPIDTestManager", "filenamepidtestmanager"));
	Рез.Вставить("ИмяФайлаВнешнихКомандФреймворка", Новый Структура("Р, А", "ИмяФайлаВнешнихКомандФреймворка", "fileofcommand"));
	Рез.Вставить("ПриравниватьPendingКFailed", Новый Структура("Р, А", "ПриравниватьPendingКFailed", "pendingequalfailed"));
	Рез.Вставить("КоличествоСекундПоискаОкна", Новый Структура("Р, А", "КоличествоСекундПоискаОкна", "timetofindwindow"));
	Рез.Вставить("КоличествоПопытокВыполненияДействия", Новый Структура("Р, А", "КоличествоПопытокВыполненияДействия", "numberofattemptstoperformanaction"));
	Рез.Вставить("ОстановкаПриВозникновенииОшибки", Новый Структура("Р, А", "ОстановкаПриВозникновенииОшибки", "stoponerror"));
	Рез.Вставить("ПоказыватьНомерСтрокиДереваПриВозникновенииОшибки", Новый Структура("Р, А", "ПоказыватьНомерСтрокиДереваПриВозникновенииОшибки", "showrownumberonerror"));
	
	Рез.Вставить("ДелатьСообщенияТранслитом", Новый Структура("Р, А", "ДелатьСообщенияТранслитом", "translatemassage"));
	Рез.Вставить("СоздаватьИнструкциюHTML", Новый Структура("Р, А", "СоздаватьИнструкциюHTML", "htmlcreate"));
	Рез.Вставить("СоздаватьИнструкциюMarkdown", Новый Структура("Р, А", "СоздаватьИнструкциюMarkdown", "markdowncreate"));
	Рез.Вставить("СоздаватьИнструкциюВидео", Новый Структура("Р, А", "СоздаватьИнструкциюВидео", "videcreate"));
	Рез.Вставить("ДелатьЛогВыполненияСценариевВЖР", Новый Структура("Р, А", "ДелатьЛогВыполненияСценариевВЖР", "logtogr"));
	Рез.Вставить("ДелатьЛогВыполненияСценариевВТекстовыйФайл", Новый Структура("Р, А", "ДелатьЛогВыполненияСценариевВТекстовыйФайл", "logtotext"));
	Рез.Вставить("ВыводитьВЛогВыполнениеШагов", Новый Структура("Р, А", "ВыводитьВЛогВыполнениеШагов", "logstepstotext"));
	Рез.Вставить("ДелатьЛогОшибокВТекстовыйФайл", Новый Структура("Р, А", "ДелатьЛогОшибокВТекстовыйФайл", "logerrorstotext"));
	Рез.Вставить("ИмяФайлаЛогВыполненияСценариев", Новый Структура("Р, А", "ИмяФайлаЛогВыполненияСценариев", "textlogname"));
	Рез.Вставить("ИмяКаталогаЛогОшибок", Новый Структура("Р, А", "ИмяКаталогаЛогОшибок", "texterrorslogname"));
	Рез.Вставить("ЗакрытьTestClientПослеЗапускаСценариев", Новый Структура("Р, А", "ЗакрытьTestClientПослеЗапускаСценариев", "closetestclient"));
	Рез.Вставить("КаталогOutputИнструкцияHTML", Новый Структура("Р, А", "КаталогOutputИнструкцияHTML", "htmlpath"));
	Рез.Вставить("КаталогOutputИнструкцияMarkdown", Новый Структура("Р, А", "КаталогOutputИнструкцияMarkdown", "markdownpath"));
	Рез.Вставить("КаталогOutputИнструкцияВидео", Новый Структура("Р, А", "КаталогOutputИнструкцияВидео", "videopath"));
	
	Рез.Вставить("ДелатьОтчетВоВнутреннемФормате", Новый Структура("Р, А", "ДелатьОтчетВоВнутреннемФормате", "simplereport"));	 
	
	Рез.Вставить("ДелатьОтчетВФорматеАллюр", Новый Структура("Р, А", "ДелатьОтчетВФорматеАллюр", "allurecreatereport"));	 
	Рез.Вставить("КаталогИнструментов", Новый Структура("Р, А", "КаталогИнструментов", "instrpath"));	
	Рез.Вставить("КаталогПроекта", Новый Структура("Р, А", "КаталогПроекта", "projectpath"));	
	Рез.Вставить("КаталогOutputAllure", Новый Структура("Р, А", "КаталогOutputAllure", "allurepath"));	
	Рез.Вставить("КаталогOutputAllureБазовый", Новый Структура("Р, А", "КаталогOutputAllureБазовый", "allurepathbase"));
	
	Рез.Вставить("ДелатьОтчетВФорматеjUnit", Новый Структура("Р, А", "ДелатьОтчетВФорматеjUnit", "junitcreatereport"));	 
	Рез.Вставить("КаталогOutputjUnit", Новый Структура("Р, А", "КаталогOutputjUnit", "junitpath"));	
	
	Рез.Вставить("ДелатьОтчетВФорматеCucumberJson", Новый Структура("Р, А", "ДелатьОтчетВФорматеCucumberJson", "cucumbercreatereport"));	 
	Рез.Вставить("КаталогOutputCucumberJson", Новый Структура("Р, А", "КаталогOutputCucumberJson", "cucumberreportpath"));	
	
	Рез.Вставить("ДобавлятьКИмениСценарияУсловияВыгрузки", Новый Структура("Р, А", "ДобавлятьКИмениСценарияУсловияВыгрузки", "addtofeaturefilter"));
	Рез.Вставить("СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки", Новый Структура("Р, А", "СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки", "createsubfolderforbuild"));
	Рез.Вставить("ВыгружатьСтатусВыполненияСценариевВФайл", Новый Структура("Р, А", "ВыгружатьСтатусВыполненияСценариевВФайл", "createlogs"));
	Рез.Вставить("ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев", Новый Структура("Р, А", "ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев", "logpath"));
	Рез.Вставить("ВыполнитьСценарии", Новый Структура("Р, А", "ВыполнитьСценарии", "vanessarun"));
	Рез.Вставить("ВыполнитьСценарииСТекущегоШага", Новый Структура("Р, А", "ВыполнитьСценарииСТекущегоШага", "vanessarunfromthisstep"));
	Рез.Вставить("НомерСтрокиДляЗапускаСТекущегоШагаСценария", Новый Структура("Р, А", "НомерСтрокиДляЗапускаСТекущегоШагаСценария", "stepnumber"));
	Рез.Вставить("ЗагрузитьСценарии", Новый Структура("Р, А", "ЗагрузитьСценарии", "loadscenarios"));
	Рез.Вставить("ЗавершитьРаботуСистемы", Новый Структура("Р, А", "ЗавершитьРаботуСистемы", "vanessashutdown"));
	Рез.Вставить("ИмяСборки", Новый Структура("Р, А", "ИмяСборки", "buildname"));
	
	Рез.Вставить("ДелатьСкриншотПриВозникновенииОшибки", Новый Структура("Р, А", "ДелатьСкриншотПриВозникновенииОшибки", "onerrorscreenshot"));
	Рез.Вставить("СниматьСкриншотКаждогоОкна1С", Новый Структура("Р, А", "СниматьСкриншотКаждогоОкна1С", "onerrorscreenshoteverywindow"));
	Рез.Вставить("КомандаСделатьСкриншот", Новый Структура("Р, А", "КомандаСделатьСкриншот", "commandscreenshot"));
	Рез.Вставить("КаталогOutputСкриншоты", Новый Структура("Р, А", "КаталогOutputСкриншоты", "outputscreenshot"));
	
	Рез.Вставить("ЗапускатьТестКлиентВРежимеОтладки", 	Новый Структура("Р, А", "ЗапускатьТестКлиентВРежимеОтладки", "testclientdebug"));
	Рез.Вставить("КлючиОтладки", 						Новый Структура("Р, А", "КлючиОтладки", "testclientdebugkeys"));
	Рез.Вставить("АдресОтладчика", 						Новый Структура("Р, А", "АдресОтладчика", "testclientdebugaddress"));	
	Рез.Вставить("ВыполнятьШагиАссинхронно",				Новый Структура("Р, А", "ВыполнятьШагиАссинхронно", "makestepsasync"));
	Рез.Вставить("ПриоритетНастроекПользователя",				Новый Структура("Р, А", "ПриоритетНастроекПользователя", "priorityofusersettings"));
	
	Рез.Вставить("ЗаписьВидеоКомандаНачатьЗаписьВидео", Новый Структура("Р, А", "ЗаписьВидеоКомандаНачатьЗаписьВидео", "comandrecvideo"));
	Рез.Вставить("ЗаписьВидеоФайлКурсораМышки", Новый Структура("Р, А", "ЗаписьВидеоФайлКурсораМышки", "mousecurfile"));
	Рез.Вставить("ЗаписьВидеоКаталогДляВременныхФайлов", Новый Структура("Р, А", "ЗаписьВидеоКаталогДляВременныхФайлов", "tempfolderforvideo"));
	Рез.Вставить("ЗаписьВидеоФайлВодянойЗнак", Новый Структура("Р, А", "ЗаписьВидеоФайлВодянойЗнак", "watermarkfile"));
	Рез.Вставить("ЗаписьВидеоКомандаFfmpeg", Новый Структура("Р, А", "ЗаписьВидеоКомандаFfmpeg", "ffmpegcomand"));
	Рез.Вставить("ЗаписьВидеоКомандаConvert", Новый Структура("Р, А", "ЗаписьВидеоКомандаConvert", "convertcomand"));
	Рез.Вставить("ЗаписьВидеоКаталогМузыки", Новый Структура("Р, А", "ЗаписьВидеоКаталогМузыки", "musicpath"));
	Рез.Вставить("ЗаписьВидеоГромкостьМузыки", Новый Структура("Р, А", "ЗаписьВидеоГромкостьМузыки", "musicvolume"));
	Рез.Вставить("ЗаписьВидеоДелатьНаложениеTTS", Новый Структура("Р, А", "ЗаписьВидеоДелатьНаложениеTTS", "dotts"));
	Рез.Вставить("ЗаписьВидеоПутьКДвижкуTTS", Новый Структура("Р, А", "ЗаписьВидеоПутьКДвижкуTTS", "audioenginetts"));
	Рез.Вставить("ЗаписьВидеоИмяTTS", Новый Структура("Р, А", "ЗаписьВидеоИмяTTS", "ttsvoice"));
	Рез.Вставить("ЗаписьВидеоСловарьЗамен", Новый Структура("Р, А", "ЗаписьВидеоСловарьЗамен", "changewordslib"));
	Рез.Вставить("ЗаписьВидеоСловарьЗаменСписок", Новый Структура("Р, А", "ЗаписьВидеоСловарьЗаменСписок", "changewordsliblist"));
	Рез.Вставить("ЗаписьВидеоЭкранШирина", Новый Структура("Р, А", "ЗаписьВидеоЭкранШирина", "screenwidth"));
	Рез.Вставить("ЗаписьВидеоЭкранВысота", Новый Структура("Р, А", "ЗаписьВидеоЭкранВысота", "screenheight"));
	Рез.Вставить("ЗаписьВидеоКоличествоКадров", Новый Структура("Р, А", "ЗаписьВидеоКоличествоКадров", "fps"));
	Рез.Вставить("ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", Новый Структура("Р, А", "ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", "showframe"));
	Рез.Вставить("ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", Новый Структура("Р, А", "ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", "movemouse"));
	Рез.Вставить("ЗаписьВидеоГруппаШаговКакШаг", Новый Структура("Р, А", "ЗаписьВидеоГруппаШаговКакШаг", "groupofstepsasastep"));
	Рез.Вставить("ЗаписьВидеоОтключитьМасштабированиеШаговПоВремени", Новый Структура("Р, А", "ЗаписьВидеоОтключитьМасштабированиеШаговПоВремени", "disablescalingofsteps"));
	Рез.Вставить("ЗаписьВидеоПодсвечиватьНажатияМышки", Новый Структура("Р, А", "ЗаписьВидеоПодсвечиватьНажатияМышки", "highlightmouseclicks"));
	Рез.Вставить("ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи", Новый Структура("Р, А", "ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи", "turnofffeaturetitleslide"));
	Рез.Вставить("ЗаписьВидеоОтключитьСлайдСценария", Новый Структура("Р, А", "ЗаписьВидеоОтключитьСлайдСценария", "turnoffscenarioslide"));
	Рез.Вставить("ЗаписьВидеоЭмулироватьВводСКлавиатуры", Новый Структура("Р, А", "ЗаписьВидеоЭмулироватьВводСКлавиатуры", "emulatekeyboardinput"));
	Рез.Вставить("ЗаписьВидеоСкрытьСлужебныеОкна", Новый Структура("Р, А", "ЗаписьВидеоСкрытьСлужебныеОкна", "hideservicewindows"));
	
	Рез.Вставить("ВерсияПлатформыДляГенерацииEPF", 						Новый Структура("Р, А", "ВерсияПлатформыДляГенерацииEPF", "platformversiongenerateepf"));	
	Рез.Вставить("ДополнительныеПараметры",								Новый Структура("Р, А", "ДополнительныеПараметры", "dopparams"));	
	Рез.Вставить("КлиентыТестирования",									Новый Структура("Р, А", "КлиентыТестирования", "testclienttable"));	
	Рез.Вставить("ТаймаутЗапуска1С", 									Новый Структура("Р, А", "ТаймаутЗапуска1С", "testclienttimeout"));
	Рез.Вставить("ТаймаутДляАсинхронныхШагов", 							Новый Структура("Р, А", "ТаймаутДляАсинхронныхШагов", "timeoutforasynchronoussteps"));
	Рез.Вставить("БезопасноеВыполнениеШагов", 							Новый Структура("Р, А", "БезопасноеВыполнениеШагов", "safeexecutionofsteps"));
	Рез.Вставить("КомандаОткрытияФичиВТекстовомРедакторе", 				Новый Структура("Р, А", "КомандаОткрытияФичиВТекстовомРедакторе", "commandtoopenfeatureintexteditor"));
	Рез.Вставить("ДиапазонПортовTestclient", 							Новый Структура("Р, А", "ДиапазонПортовTestclient", "testclientports"));
	Рез.Вставить("КаталогОтносительноКоторогоНадоСтроитьИерархию",		Новый Структура("Р, А", "КаталогОтносительноКоторогоНадоСтроитьИерархию", "directorytobuildhierarchy"));
	Рез.Вставить("УровеньОтчета1",		Новый Структура("Р, А", "УровеньОтчета1", "reportlevel1"));
	Рез.Вставить("УровеньОтчета2",		Новый Структура("Р, А", "УровеньОтчета2", "reportlevel2"));
	Рез.Вставить("УровеньОтчета3",		Новый Структура("Р, А", "УровеньОтчета3", "reportlevel3"));
	Рез.Вставить("ИспользоватьSikuliXСервер", Новый Структура("Р, А", "ИспользоватьSikuliXСервер", "usesikulixserver"));
	Рез.Вставить("КаталогиСкриптовSikuliX", Новый Структура("Р, А", "КаталогиСкриптовSikuliX", "sikulixscriptpath"));
	Рез.Вставить("ИскатьЭлементыФормыПоИмени", Новый Структура("Р, А", "ИскатьЭлементыФормыПоИмени", "searchformelementsbyname"));
	Рез.Вставить("ЗапускатьКлиентТестированияСМаксимизированнымОкном", Новый Структура("Р, А", "ЗапускатьКлиентТестированияСМаксимизированнымОкном", "runtestclientwithmaximizedwindow"));
	Рез.Вставить("ТегTreeВключенПоУмолчанию", Новый Структура("Р, А", "ТегTreeВключенПоУмолчанию", "thetreetagisenabledbydefault"));
	Рез.Вставить("ЯзыкГенератораGherkin", Новый Структура("Р, А", "ЯзыкГенератораGherkin", "gherkinlanguage"));
	Возврат Рез;
КонецФункции

&НаКлиенте
Функция НайтиКоманду(КоллекцияКоманды, КомандаЗапускаНРег)
	Для каждого КлючЗначение Из КоллекцияКоманды Цикл
		Если НРег(КлючЗначение.Значение) = НРег(КомандаЗапускаНРег) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ПрочитатьПеременныеСреды() 
	СоответствееПеременныхПути = Новый Соответствие;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Попытка
        Если ЭтоLinux Тогда 
            КомандаСистемы("sh -c 'env > " + ИмяВременногоФайла + "'");
        Иначе 
            ВыполнитьКомандуОСБезПоказаЧерногоОкна("set > """ + ИмяВременногоФайла + """");
        КонецЕсли;
    Исключение
        ТекстСообщения = ПолучитьТекстСообщенияПользователю("ПрочитатьПеременныеСреды:%1");
        ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеОшибки());
        Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
    КонецПопытки;
	
	Попытка 
		Чтение = Новый ЧтениеТекста(ИмяВременногоФайла);
		Стр = Чтение.ПрочитатьСтроку();
		Пока Стр <> Неопределено Цикл 
			//Найдем ключ и значение
			Индекс = Найти(Стр, "=");
			Если Индекс > 0 Тогда 
				Ключ = Нрег(Лев(Стр, Индекс - 1));
				Если ВРег(Лев(Ключ, 8))="VANESSA_" Тогда 
					Ключ = Сред(Ключ, 9);
					Значение = Сред(Стр, Индекс + 1);
					СоответствееПеременныхПути.Вставить(Ключ, Значение);
				КонецЕсли;
			КонецЕсли;
			Стр = Чтение.ПрочитатьСтроку();
		КонецЦикла;
	Исключение 
	КонецПопытки;
	
	КоллекцияКоммандЗапуска = СоздатьКоллекциюКомандЗапуска();
	СтруктураПараметров = Новый Структура;
	Для каждого ЭлементСтруктуры из КоллекцияКоммандЗапуска Цикл 
		Для каждого ЭлементПеременных из СоответствееПеременныхПути Цикл 
			Если НайтиКоманду(ЭлементСтруктуры.Значение, ЭлементПеременных.Ключ) Тогда 
				СтруктураПараметров.Вставить(ЭлементСтруктуры.Ключ, ЭлементПеременных.Значение);
				Прервать;
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Функция ОбъединитьПараметрыСУчетомПриоритета(ПараметрыЭталон, ПараметрыПриоритет, Параметры, LangJSON = "Ru")
	СтруктутраПараметров = Новый Структура;
	Для каждого ключЗначение из ПараметрыЭталон Цикл 
		Значение = Неопределено;
		Если ТипЗнч(ПараметрыПриоритет) = Тип("Соответствие") Тогда 
			Если ПараметрыПриоритет.Получить(ключЗначение.Ключ) <> Неопределено Тогда
				Значение = ПараметрыПриоритет.Получить(ключЗначение.Ключ);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ПараметрыПриоритет) = Тип("Структура") Тогда 
			ПараметрыПриоритет.Свойство(ключЗначение.Ключ, Значение);
		КонецЕсли;
		
		Если Значение = Неопределено Тогда 
			Если ТипЗнч(Параметры) = Тип("Соответствие") Тогда 
				Если Параметры.Получить(ключЗначение.Ключ) <> Неопределено Тогда
					Значение = Параметры.Получить(ключЗначение.Ключ);
				КонецЕсли;
			ИначеЕсли ТипЗнч(Параметры) = Тип("Структура") Тогда 
				Параметры.Свойство(ключЗначение.Ключ, Значение);
				Если Значение = Неопределено И LangJSON = "En" Тогда
					СоответствиеСАнглийскимЯзыком = СоздатьСоответствиеСАнглийскимЯзыком();
					АнглийскийАналог = СоответствиеСАнглийскимЯзыком.Получить(ключЗначение.Ключ);
					Если Не АнглийскийАналог = Неопределено Тогда
						Параметры.Свойство(АнглийскийАналог, Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;    
		
		ключЗначениеЗначение = Неопределено;
		Если Значение <> Неопределено Тогда 
			Если ТипЗнч(ключЗначение.Значение) = Тип("Булево") Тогда 
				Если НРег(Значение) = "истина" Тогда 
					ключЗначениеЗначение = Истина;
				ИначеЕсли НРег(Значение) = "ложь" Тогда 
					ключЗначениеЗначение = Ложь;
				ИначеЕсли Значение = "1" Тогда 
					ключЗначениеЗначение = Истина;
				ИначеЕсли Значение = "0" Тогда
					ключЗначениеЗначение = Ложь;
				ИначеЕсли НРег(Значение) = "true" Тогда 
					ключЗначениеЗначение = Истина;
				ИначеЕсли НРег(Значение) = "false" Тогда
					ключЗначениеЗначение = Ложь;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ключЗначение.Значение) = Тип("Строка") Тогда  
				ключЗначениеЗначение = Строка(Значение);
			ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
				ключЗначениеЗначение = Значение;
			ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
				ключЗначениеЗначение = Значение;
			ИначеЕсли ТипЗнч(ключЗначение.Значение) = Тип("Массив") Тогда
				МассивПараметров = Новый Массив;
				Если ТипЗнч(Значение) = Тип("Строка") Тогда 
					МассивПараметров = РазложитьСтрокуВМассивПодстрок(Значение, ",");
				ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
					МассивПараметров = Значение;
				КонецЕсли;
				ключЗначениеЗначение = МассивПараметров;
			КонецЕсли;
		КонецЕсли;
		СтруктутраПараметров.Вставить(ключЗначение.Ключ, ?(ключЗначениеЗначение = Неопределено, ключЗначение.Значение, ключЗначениеЗначение));
	КонецЦикла;
				                
	Возврат СтруктутраПараметров;
	
КонецФункции

&НаКлиенте
Функция СоздатьСоответствиеСАнглийскимЯзыком()
	СтруктураКоммандЗапуска = СоздатьКоллекциюКомандЗапуска();
	СоответствиеКоммандЗапуска = Новый Соответствие();
	
	Для Каждого Команда Из СтруктураКоммандЗапуска Цикл
	   СоответствиеКоммандЗапуска.Вставить(Команда.Значение.Р,Команда.Значение.А);
	КонецЦикла;
	
	Возврат СоответствиеКоммандЗапуска;
КонецФункции 

&НаКлиенте
Процедура ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(СтруктураПараметров)
	МассивКлючей = Новый Массив;
	
	Для каждого ПараметрСборки Из СтруктураПараметров Цикл
		
		Если Лев(ПараметрСборки.Значение, 1) = "." Тогда
			МассивКлючей.Добавить(ПараметрСборки.Ключ);
		ИначеЕсли Найти(ПараметрСборки.Значение, "$workspaceRoot") > 0 ИЛИ Найти(ПараметрСборки.Значение, "$instrumentsRoot") > 0 Тогда 
			МассивКлючей.Добавить(ПараметрСборки.Ключ);
		КонецЕсли;	 
	КонецЦикла;
	
	Для каждого Ключ Из МассивКлючей Цикл
		Было  = СтруктураПараметров[Ключ];
		Стало = ПреобразоватьПутьСТочкамиКНормальномуПути(СтруктураПараметров[Ключ]);
		
		СтруктураПараметров.Вставить(Ключ, Стало);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВнешнихКоманд()
	Если НЕ ФайлСуществуетКомандаСистемы(Объект.ИмяФайлаВнешнихКомандФреймворка) Тогда
		Возврат;
	КонецЕсли;	
	
	ТекстКоманды                      = Неопределено;
	НомерСтрокиСценарияПереданныйИзвне = Неопределено;
	
	Файл = Новый Файл(Объект.ИмяФайлаВнешнихКомандФреймворка);
	Расширение = Нрег(Файл.Расширение);
	
	Если Расширение = ".json" Тогда
		ЧтениеJSON = Вычислить("Новый ЧтениеJSON");
		ЧтениеJSON.ОткрытьФайл(Объект.ИмяФайлаВнешнихКомандФреймворка);
		
		ДанныеКоманды = ПрочитатьJSON(ЧтениеJSON);
		ТекстКоманды = ДанныеКоманды.ТекстКоманды;
		Если ТекстКоманды = "ПерезагрузитьИВыполнитьСТекущегоШага" Тогда
			НомерСтрокиСценарияПереданныйИзвне = ДанныеКоманды.НомерСтрокиДляЗапускаСТекущегоШагаСценария;
		КонецЕсли;	 
		ИмяФайлаНастроек = ДанныеКоманды.ИмяФайлаНастроек;
		
		ЧтениеJSON.Закрыть();
		
		
		ФайлНастроек = Новый Файл(ИмяФайлаНастроек);
		Если ФайлНастроек.Существует() Тогда
			ЧтениеJSON = Вычислить("Новый ЧтениеJSON");
			ЧтениеJSON.ОткрытьФайл(ИмяФайлаНастроек);
			
			ДанныеНастроек = ПрочитатьJSON(ЧтениеJSON);
			Если ДанныеНастроек.Свойство("КлиентыТестирования") Тогда
				Для Каждого ПараметрыКлиентаТестирования Из ДанныеНастроек.КлиентыТестирования Цикл
					ПрочитатьДанныеКлиентовТестирования(ПараметрыКлиентаТестирования);
				КонецЦикла;	
			КонецЕсли;	 
			
			ЧтениеJSON.Закрыть();
		КонецЕсли;	 
		
	Иначе	
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(Объект.ИмяФайлаВнешнихКомандФреймворка,"UTF-8");
		
		ДанныеКоманды = Новый Массив;
		
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
			
			ДанныеКоманды.Добавить(Стр);
		КонецЦикла;	
		
		ТекстКоманды = ДанныеКоманды[0];
		Если ТекстКоманды = "ПерезагрузитьИВыполнитьСТекущегоШага" Тогда
			НомерСтрокиСценарияПереданныйИзвне = Число(ДанныеКоманды[1]);
		КонецЕсли;	 
		
		Текст.Закрыть();
	КонецЕсли;	 
	
	
	
	
	
	НадоПерейтиКСтрокеДерева = -1;
	
	УдалитьФайлыКомандаСистемы(Объект.ИмяФайлаВнешнихКомандФреймворка);
	НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Ложь;
	Объект.НадоВыполнитьСценарииПослеЗагрузкиФич = Ложь;
	
	Если ТекстКоманды = "ПерезагрузитьИВыполнить" Тогда
		ПерезагрузитьИВыполнить("");
	ИначеЕсли ТекстКоманды = "ПерезагрузитьИВыполнитьСТекущегоШага" Тогда
		НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Истина;
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ЗапуститьСценарийСоСтрокиПрисланнойИзвне",Истина);
		ЗагрузитьФичи(ДопПараметры);
	ИначеЕсли ТекстКоманды = "Перезагрузить" Тогда
		ТекущиеДанныеДерева = Элементы.ДеревоТестов.ТекущиеДанные;
		Если ТекущиеДанныеДерева <> Неопределено Тогда
			НадоПерейтиКСтрокеДерева = ТекущиеДанныеДерева.ИДСтроки;
		КонецЕсли;	 
		ЗагрузитьФичи();
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивныйTestClient(ИмяКлиентаТестирования)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя", ИмяКлиентаТестирования);
	
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаДанныеКлиентовТестирования = НайденныеСтроки[0];
		Элементы.ДанныеКлиентовТестирования.ТекущаяСтрока = СтрокаДанныеКлиентовТестирования.ПолучитьИдентификатор();
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Функция СоздатьСоответствиеТестовогоКлиентаСАнглийскимЯзыком()
	Рез = Новый Структура();
	Рез.Вставить("name", Новый Структура("Р, А", "Имя", "name"));
	Рез.Вставить("pathtoinfobase", Новый Структура("Р, А", "ПутьКИнфобазе", "pathtoinfobase"));
	Рез.Вставить("additionalparameters", Новый Структура("Р, А", "ДопПараметры", "additionalparameters"));
	Рез.Вставить("clienttype", Новый Структура("Р, А", "ТипКлиента", "clienttype"));
	Рез.Вставить("computermame", Новый Структура("Р, А", "ИмяКомпьютера", "computermame"));
	Рез.Вставить("porttestclient", Новый Структура("Р, А", "ПортЗапускаТестКлиента", "porttestclient"));
	Рез.Вставить("synonym", Новый Структура("Р, А", "Синоним", "synonym"));
	Рез.Вставить("activatestring", Новый Структура("Р, А", "АктивизироватьСтроку", "activatestring"));
	Возврат Рез;
КонецФункции



&НаКлиенте
Процедура ПрочитатьДанныеКлиентовТестирования(ПараметрыКлиентаТестирования, LangJSON = "Ru")
	Если LangJSON = "En" Тогда
		ВременнаяСтруктура = Новый Структура();
		СоответствиеСАнглийскимЯзыком = СоздатьСоответствиеТестовогоКлиентаСАнглийскимЯзыком();
		Для каждого ключЗначение из ПараметрыКлиентаТестирования Цикл 
			АнглийскийАналог = Неопределено;
			СоответствиеСАнглийскимЯзыком.Свойство(ключЗначение.Ключ,АнглийскийАналог);
			Если Не АнглийскийАналог = Неопределено Тогда
			  ВременнаяСтруктура.Вставить(АнглийскийАналог.Р,ключЗначение.Значение);		
		    Иначе
			  ВременнаяСтруктура.Вставить(ключЗначение.Ключ,ключЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
		ПараметрыКлиентаТестирования = ВременнаяСтруктура;
	КонецЕсли;


	ИмяКлиентаТестирования = ПараметрыКлиентаТестирования.Имя;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя", ИмяКлиентаТестирования);
	
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаДанныеКлиентовТестирования = НайденныеСтроки[0];
	Иначе	
		СтрокаДанныеКлиентовТестирования     = ДанныеКлиентовТестирования.Добавить();
		СтрокаДанныеКлиентовТестирования.Имя = ИмяКлиентаТестирования;
	КонецЕсли;	 
	
	СтрокаДанныеКлиентовТестирования.ПутьКИнфобазе          = ПараметрыКлиентаТестирования.ПутьКИнфобазе;
	СтрокаДанныеКлиентовТестирования.ДопПараметры           = ПараметрыКлиентаТестирования.ДопПараметры;
	СтрокаДанныеКлиентовТестирования.ТипКлиента             = ПараметрыКлиентаТестирования.ТипКлиента;
	СтрокаДанныеКлиентовТестирования.ИмяКомпьютера          = ПараметрыКлиентаТестирования.ИмяКомпьютера;
	Если ПараметрыКлиентаТестирования.Свойство("ПортЗапускаТестКлиента") Тогда
		СтрокаДанныеКлиентовТестирования.ПортЗапускаТестКлиента = ПараметрыКлиентаТестирования.ПортЗапускаТестКлиента;
	КонецЕсли;	 
	Если ПараметрыКлиентаТестирования.Свойство("Синоним") Тогда
		СтрокаДанныеКлиентовТестирования.Синоним = ПараметрыКлиентаТестирования.Синоним;
	КонецЕсли;	
	
	АктивизироватьСтроку = Истина;
	Если ПараметрыКлиентаТестирования.Свойство("АктивизироватьСтроку") Тогда
		АктивизироватьСтроку = ПараметрыКлиентаТестирования.АктивизироватьСтроку;
	КонецЕсли;	 
	
	Если АктивизироватьСтроку Тогда
		Элементы.ДанныеКлиентовТестирования.ТекущаяСтрока = СтрокаДанныеКлиентовТестирования.ПолучитьИдентификатор();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ЗапускВРежимеКоманднойСтроки()
	
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;	 
	
	СтрЗапуска = СокрЛП(ПараметрЗапуска);
	//для эмуляции запуска в пакетном режиме укажите ниже путь к файлу параметров в формате json
	//СтрЗапуска = "StartFeaturePlayer;VBParams=C:\Temp\111\VBParams.json";
	Если СтрЗапуска = "" Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров(СтрЗапуска);
	ПараметрыЭталон = СоздатьСтруктуруПараметровЗапуска();
	ПеременныеСреды = ПрочитатьПеременныеСреды();
	
	КаталогПроекта = ПолучитьЗначениеПереданногоПараметра(СтруктураПараметров, "workspaceRoot");
	КаталогПроекта = ?(КаталогПроекта = Неопределено, ПолучитьЗначениеПереданногоПараметра(ПеременныеСреды, "workspaceRoot"), КаталогПроекта);
	
	Если НЕ ПустаяСтрока(КаталогПроекта) Тогда
		Объект.КаталогПроекта = КаталогПроекта;
		ЗагрузитьГлобальныеПеременные();
	КонецЕсли; 
	
	ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(СтруктураПараметров);
	ПутьКОбработке = ПолучитьПутьКОбработкеКлиент();
	
	StartFeaturePlayer = ПолучитьЗначениеПереданногоПараметра(СтруктураПараметров, "StartFeaturePlayer") = Истина Или ПолучитьЗначениеПереданногоПараметра(ПеременныеСреды, "StartFeaturePlayer") = Истина;
	Если StartFeaturePlayer = Истина Тогда
		Объект.ЗапускИзКоманднойСтроки = Истина;
		Объект.СохранятьКонтекстыПередВыполнениемШагов = Ложь;
		
		VBParams = ПолучитьЗначениеПереданногоПараметра(СтруктураПараметров, "VBParams");
		Если VBParams = Неопределено Тогда
			СделатьСообщение("Не найден путь к файлу JSON. Параметр: VBParams.");
			ПараметрыФайла = СоздатьСтруктуруПараметровЗапуска();
		Иначе 
			ПараметрыФайла = ПрочитатьСтруктуруИзJSONФайлаКлиент(VBParams);
			Если ПараметрыФайла = Неопределено Тогда
				СделатьСообщение("Ошибка чтения структуры JSON пропускаем чтение");
			КонецЕсли; 
		КонецЕсли;	 

		LangJSON = ПолучитьЗначениеПереданногоПараметра(СтруктураПараметров, "Lang");
		
		СтрутктураJSON = ОбъединитьПараметрыСУчетомПриоритета(ПараметрыЭталон, ПеременныеСреды, ПараметрыФайла, LangJSON);
		
		Если СтрутктураJSON = Неопределено Тогда
			СделатьСообщение("Ошибка чтения структуры JSON.");
			Возврат;
		КонецЕсли;
		
		//ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(СтрутктураJSON);
		ПромСтр = ПреобразоватьПутьСТочкамиКНормальномуПути(ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогФич"));
		Если ПромСтр = Неопределено Тогда
			СделатьСообщение("В параметрах JSON не найден каталог Фич.");
			Возврат;
		КонецЕсли;	 
		
		Объект.КаталогФич = ПромСтр;
		
		Объект.КаталогиБиблиотек.Очистить();
		ЗначКаталогиБиблиотек = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогиБиблиотек");
		Если ТипЗнч(ЗначКаталогиБиблиотек) = Тип("Массив") Тогда			
			Для Ккк = 0 По ЗначКаталогиБиблиотек.Количество() - 1 Цикл
				ЗначКаталогиБиблиотек[Ккк] = ПреобразоватьПутьСТочкамиКНормальномуПути(ЗначКаталогиБиблиотек[Ккк]);
			КонецЦикла;	
			Объект.КаталогиБиблиотек.ЗагрузитьЗначения(ЗначКаталогиБиблиотек);
		КонецЕсли;  
		
		
		
		
		ЗнВыгрузитьPIDTestManager = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ВыгрузитьPIDTestManager");
		Если ЗнВыгрузитьPIDTestManager = Истина Тогда
			ВычислитьPIDЭтогоСеанса("");
			ИмяФайлаPIDTestManager = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ИмяФайлаPIDTestManager");
			
			Если ЗначениеЗаполнено(ИмяФайлаPIDTestManager) Тогда
				ВременныйФайл = ПолучитьИмяВременногоФайла("txt");
				ЗТ = Новый ЗаписьТекста(ВременныйФайл,"UTF-8",,Истина); 
				ЗТ.ЗаписатьСтроку(PIDЭтогоСеанса); 
				ЗТ.Закрыть();
				ПереместитьФайлКомандаСистемы(ВременныйФайл,ИмяФайлаPIDTestManager);
			КонецЕсли;	 
		КонецЕсли;	 
		
		ЗнИмяФайлаВнешнихКомандФреймворка = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ИмяФайлаВнешнихКомандФреймворка");
		Если ЗначениеЗаполнено(ЗнИмяФайлаВнешнихКомандФреймворка) Тогда			
			Объект.ИмяФайлаВнешнихКомандФреймворка = ЗнИмяФайлаВнешнихКомандФреймворка;
			ПодключитьОбработчикОжидания("ПроверкаВнешнихКоманд",1);
		КонецЕсли;  
		
		ЗнПриравниватьPendingКFailed = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ПриравниватьPendingКFailed");
		Если ЗначениеЗаполнено(ЗнПриравниватьPendingКFailed) Тогда			
			Объект.ПриравниватьPendingКFailed = ЗнПриравниватьPendingКFailed;
		КонецЕсли;  
		
		ЗнКоличествоСекундПоискаОкна = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КоличествоСекундПоискаОкна");
		Если ЗначениеЗаполнено(ЗнКоличествоСекундПоискаОкна) Тогда			
			Попытка
				Объект.КоличествоСекундПоискаОкна = Число(ЗнКоличествоСекундПоискаОкна);
			Исключение
			КонецПопытки;
		КонецЕсли;  
		
		ЗнКоличествоПопытокВыполненияДействия = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КоличествоПопытокВыполненияДействия");
		Если ЗначениеЗаполнено(ЗнКоличествоПопытокВыполненияДействия) Тогда			
			Попытка
				Объект.КоличествоПопытокВыполненияДействия = Число(ЗнКоличествоПопытокВыполненияДействия);
			Исключение
			КонецПопытки;
		КонецЕсли;  
		
		ЗнОстановкаПриВозникновенииОшибки = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ОстановкаПриВозникновенииОшибки");
		Если ЗначениеЗаполнено(ЗнОстановкаПриВозникновенииОшибки) Тогда			
			Объект.ОстановкаПриВозникновенииОшибки = ЗнОстановкаПриВозникновенииОшибки;
		КонецЕсли;  
		
		ЗнПоказыватьНомерСтрокиДереваПриВозникновенииОшибки = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ПоказыватьНомерСтрокиДереваПриВозникновенииОшибки");
		Если ЗначениеЗаполнено(ЗнПоказыватьНомерСтрокиДереваПриВозникновенииОшибки) Тогда			
			Объект.ПоказыватьНомерСтрокиДереваПриВозникновенииОшибки = ЗнПоказыватьНомерСтрокиДереваПриВозникновенииОшибки;
		КонецЕсли;  
		
		ЗнКаталогИнструментов = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогИнструментов");
		Если ЗначениеЗаполнено(ЗнКаталогИнструментов) Тогда			
			Объект.КаталогИнструментов = ЗнКаталогИнструментов;
		КонецЕсли;  
		
		ЗнКаталогПроекта = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогПроекта");
		Если ЗначениеЗаполнено(ЗнКаталогПроекта) Тогда			
			Объект.КаталогПроекта = ЗнКаталогПроекта;
		КонецЕсли;  
		
		//добавим базовые библиотеки, если они не указаны
		Если Объект.КаталогиБиблиотек.Количество() = 0 Тогда
			Если ЗначениеЗаполнено(Объект.КаталогИнструментов) Тогда
				Если НадоДобавитьСтандартнуюБиблиотеку(Объект.ВерсияПоставки) Тогда
					Объект.КаталогиБиблиотек.Добавить(ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "features\Libraries");
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 

		
		Объект.СписокТеговИсключение.Очистить();
		ЗначСписокТеговИсключение = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "СписокТеговИсключение");
		Если ТипЗнч(ЗначСписокТеговИсключение) = Тип("Массив") Тогда
			Объект.СписокТеговИсключение.ЗагрузитьЗначения(ЗначСписокТеговИсключение);
		КонецЕсли;  
		
		Объект.СписокТеговОтбор.Очистить();
		ЗначСписокТеговОтбор = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "СписокТеговОтбор");
		Если ТипЗнч(ЗначСписокТеговОтбор) = Тип("Массив") Тогда
			Объект.СписокТеговОтбор.ЗагрузитьЗначения(ЗначСписокТеговОтбор);
		КонецЕсли;  
		
		ЗнДелатьСообщенияТранслитом = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ДелатьСообщенияТранслитом");
		Если ЗнДелатьСообщенияТранслитом = Истина Тогда
			Объект.ДелатьСообщенияТранслитом = Истина;
		КонецЕсли;	 
		
		ЗнСоздаватьИнструкциюHTML = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "СоздаватьИнструкциюHTML");
		Если ЗнСоздаватьИнструкциюHTML = Истина Тогда
			Объект.СоздаватьИнструкциюHTML = Истина;
		КонецЕсли;	 
		
		ЗнСоздаватьИнструкциюMarkdown = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "СоздаватьИнструкциюMarkdown");
		Если ЗнСоздаватьИнструкциюMarkdown = Истина Тогда
			Объект.СоздаватьИнструкциюMarkdown = Истина;
		КонецЕсли;	 
		
		ЗнСоздаватьИнструкциюВидео = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "СоздаватьИнструкциюВидео");
		Если ЗнСоздаватьИнструкциюВидео = Истина Тогда
			Объект.СоздаватьИнструкциюВидео = Истина;
		КонецЕсли;	 
		
		ЗнДелатьЛогВыполненияСценариевВЖР = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ДелатьЛогВыполненияСценариевВЖР");
		Если ЗнДелатьЛогВыполненияСценариевВЖР = Истина Тогда
			Объект.ДелатьЛогВыполненияСценариевВЖР = Истина;
		КонецЕсли;	  		
		
		ЗнДелатьЛогВыполненияСценариевВТекстовыйФайл = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ДелатьЛогВыполненияСценариевВТекстовыйФайл");
		Если ЗнДелатьЛогВыполненияСценариевВТекстовыйФайл = Истина Тогда
			Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл = Истина;
			Объект.ИмяФайлаЛогВыполненияСценариев             = ПреобразоватьПутьСТочкамиКНормальномуПути(ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ИмяФайлаЛогВыполненияСценариев"));
		КонецЕсли;	  		
		
		ЗнВыводитьВЛогВыполнениеШагов = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ВыводитьВЛогВыполнениеШагов");
		Если ЗнВыводитьВЛогВыполнениеШагов = Истина Тогда
			Объект.ВыводитьВЛогВыполнениеШагов = Истина;
		КонецЕсли;	  		
		
		ЗнДелатьЛогОшибокВТекстовыйФайл = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ДелатьЛогОшибокВТекстовыйФайл");
		Если ЗнДелатьЛогОшибокВТекстовыйФайл = Истина Тогда
			Объект.ДелатьЛогОшибокВТекстовыйФайл = Истина;
			Объект.ИмяКаталогаЛогОшибок             = ПреобразоватьПутьСТочкамиКНормальномуПути(ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ИмяКаталогаЛогОшибок"));
		КонецЕсли;	  		
		
		ЗнВерсияПлатформыДляГенерацииEPF = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ВерсияПлатформыДляГенерацииEPF");
		Если ЗначениеЗаполнено(ЗнВерсияПлатформыДляГенерацииEPF) Тогда
			Объект.ВерсияПлатформыДляГенерацииEPF = ЗнВерсияПлатформыДляГенерацииEPF;
		КонецЕсли;	 
		
		ЗнКлиентыТестирования = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КлиентыТестирования");
		Если ЗначениеЗаполнено(ЗнКлиентыТестирования) Тогда
			Для Каждого ПараметрыКлиентаТестирования Из ЗнКлиентыТестирования Цикл
				ПрочитатьДанныеКлиентовТестирования(ПараметрыКлиентаТестирования, LangJSON);
			КонецЦикла;	
		КонецЕсли;	 
		
		ЗнДополнительныеПараметры = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ДополнительныеПараметры");
		Если ЗначениеЗаполнено(ЗнДополнительныеПараметры) Тогда
			Для Каждого Элем Из ЗнДополнительныеПараметры Цикл
				ЗнДополнительныеПараметры.Вставить(Элем.Ключ,ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение));
			КонецЦикла;	
			Объект.ДополнительныеПараметры = ЗнДополнительныеПараметры;
		КонецЕсли;	 
		
		
		ЗнЗапускатьТестКлиентВРежимеОтладки = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗапускатьТестКлиентВРежимеОтладки");
		Если ЗнЗапускатьТестКлиентВРежимеОтладки = Истина Тогда
			Объект.ЗапускатьТестКлиентВРежимеОтладки = Истина;
		КонецЕсли;
		
		ЗнДиапазонПортовTestclient = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ДиапазонПортовTestclient");
		Если ЗначениеЗаполнено(ЗнДиапазонПортовTestclient) Тогда
			Объект.ДиапазонПортовTestclient = ЗнДиапазонПортовTestclient;
		КонецЕсли;	 
		
		ЗнЯзыкГенератораGherkin = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЯзыкГенератораGherkin");
		Если ЗначениеЗаполнено(ЗнЯзыкГенератораGherkin) Тогда
			Объект.ЯзыкГенератораGherkin = ЗнЯзыкГенератораGherkin;
		КонецЕсли;	 
		
		ЗнКомандаОткрытияФичиВТекстовомРедакторе = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КомандаОткрытияФичиВТекстовомРедакторе");
		Если ЗначениеЗаполнено(ЗнКомандаОткрытияФичиВТекстовомРедакторе) Тогда
			Объект.КомандаОткрытияФичиВТекстовомРедакторе = ЗнКомандаОткрытияФичиВТекстовомРедакторе;
		КонецЕсли;	 
		
		Попытка
			ЗнТаймаутЗапуска1С = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ТаймаутЗапуска1С");
			ТаймаутЗапуска1С = Число(ЗнТаймаутЗапуска1С);
		Исключение
			ТаймаутЗапуска1С = 25;
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не удалось получить таймаут для запуска TestClient из значения %1. Используется значение по умолчанию: 25");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ЗнТаймаутЗапуска1С);
			СделатьСообщение(ТекстСообщения);
			ЗаписатьЛогВЖРОшибка("VanessaAutomation.ЗапускВРежимеКоманднойСтроки", ТекстСообщения);
		КонецПопытки;
		Объект.ТаймаутЗапуска1С = ТаймаутЗапуска1С;
		
		
		Попытка
			ЗнТаймаутДляАсинхронныхШагов = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ТаймаутДляАсинхронныхШагов");
			Объект.ТаймаутДляАсинхронныхШагов = Число(ЗнТаймаутДляАсинхронныхШагов);
		Исключение
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не удалось получить таймаут для работы асинхронных шагов. Было передано значение: %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ЗнТаймаутДляАсинхронныхШагов);
			СделатьСообщение(ТекстСообщения);
			ЗаписатьЛогВЖРОшибка("VanessaAutomation.ЗапускВРежимеКоманднойСтроки", ТекстСообщения);
		КонецПопытки;
		
		
		ЗнБезопасноеВыполнениеШагов = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "БезопасноеВыполнениеШагов");
		Если ЗнБезопасноеВыполнениеШагов = Истина Тогда
			Объект.БезопасноеВыполнениеШагов = ЗнБезопасноеВыполнениеШагов;
		КонецЕсли;	 
		
		//по скриншотам - начало
		ЗнДелатьСкриншотПриВозникновенииОшибки = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ДелатьСкриншотПриВозникновенииОшибки");
		Если ЗнДелатьСкриншотПриВозникновенииОшибки = Истина Тогда
			Объект.ДелатьСкриншотПриВозникновенииОшибки = Истина;
		Иначе	
			Объект.ДелатьСкриншотПриВозникновенииОшибки = Ложь;
		КонецЕсли;	 
		
		ЗнСниматьСкриншотКаждогоОкна1С = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "СниматьСкриншотКаждогоОкна1С");
		Если ЗнСниматьСкриншотКаждогоОкна1С = Истина Тогда
			Объект.СниматьСкриншотКаждогоОкна1С = Истина;
		Иначе	
			Объект.СниматьСкриншотКаждогоОкна1С = Ложь;
		КонецЕсли;	 
		
		ЗнКомандаСделатьСкриншот = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КомандаСделатьСкриншот");
		Если ЗначениеЗаполнено(ЗнКомандаСделатьСкриншот) Тогда
			Объект.КомандаСделатьСкриншот = ЗнКомандаСделатьСкриншот;
		КонецЕсли;	 
		
		Если Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
			ЗнКаталогOutputСкриншоты = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогOutputСкриншоты");
			Объект.КаталогOutputСкриншоты = ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputСкриншоты);
		КонецЕсли;	 
		//по скриншотам - окончание
		
		//по записи видео - начало
		Объект.ЗаписьВидеоКомандаНачатьЗаписьВидео                     = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоКомандаНачатьЗаписьВидео");
		Объект.ЗаписьВидеоФайлКурсораМышки                             = ПреобразоватьПутьСТочкамиКНормальномуПути(ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоФайлКурсораМышки"));
		Объект.ЗаписьВидеоКаталогДляВременныхФайлов                    = ПреобразоватьПутьСТочкамиКНормальномуПути(ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоКаталогДляВременныхФайлов"));
		Объект.ЗаписьВидеоФайлВодянойЗнак                              = ПреобразоватьПутьСТочкамиКНормальномуПути(ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоФайлВодянойЗнак"));
		Объект.ЗаписьВидеоКомандаFfmpeg                                = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоКомандаFfmpeg");
		Объект.ЗаписьВидеоКомандаConvert                               = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоКомандаConvert");
		Объект.ЗаписьВидеоКаталогМузыки                                = ПреобразоватьПутьСТочкамиКНормальномуПути(ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоКаталогМузыки"));
		Объект.ЗаписьВидеоДелатьНаложениеTTS                           = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоДелатьНаложениеTTS");
		Объект.ЗаписьВидеоПутьКДвижкуTTS                               = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоПутьКДвижкуTTS");
		Объект.ЗаписьВидеоИмяTTS                                       = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоИмяTTS");
		
		Попытка
			Объект.ЗаписьВидеоГромкостьМузыки = Число(ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоГромкостьМузыки"));
		Исключение
			Объект.ЗаписьВидеоГромкостьМузыки = 0.10;
		КонецПопытки;
		
		
		ЗнЗаписьВидеоСловарьЗамен = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоСловарьЗамен");
		Если ЗначениеЗаполнено(ЗнЗаписьВидеоСловарьЗамен) Тогда
			Объект.ЗаписьВидеоСловарьЗамен.Очистить();
			Объект.ЗаписьВидеоСловарьЗамен.Добавить(ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнЗаписьВидеоСловарьЗамен));
		КонецЕсли;	
		
		ЗнЗаписьВидеоСловарьЗаменСписок = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоСловарьЗаменСписок");
		Если ЗначениеЗаполнено(ЗнЗаписьВидеоСловарьЗаменСписок) Тогда
			Если ТипЗнч(ЗнЗаписьВидеоСловарьЗаменСписок) = Тип("Массив") Тогда
				Объект.ЗаписьВидеоСловарьЗамен.Очистить();
				Для Каждого Элем Из ЗнЗаписьВидеоСловарьЗаменСписок Цикл
					Объект.ЗаписьВидеоСловарьЗамен.Добавить(ПреобразоватьПутьСТочкамиКНормальномуПути(Элем));
				КонецЦикла;	
			КонецЕсли;  
		КонецЕсли;	 
		
		Объект.ЗаписьВидеоЭкранШирина                                  = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоЭкранШирина");
		Объект.ЗаписьВидеоЭкранВысота                                  = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоЭкранВысота");
		Объект.ЗаписьВидеоКоличествоКадров                             = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоКоличествоКадров");
		Объект.ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм             = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм");
		Объект.ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы");
		Объект.ЗаписьВидеоГруппаШаговКакШаг                            = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоГруппаШаговКакШаг");
		Объект.ЗаписьВидеоОтключитьМасштабированиеШаговПоВремени       = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоОтключитьМасштабированиеШаговПоВремени");
		Объект.ЗаписьВидеоПодсвечиватьНажатияМышки                     = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоПодсвечиватьНажатияМышки");
		Объект.ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи                = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи");
		Объект.ЗаписьВидеоОтключитьСлайдСценария                       = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоОтключитьСлайдСценария");
		Объект.ЗаписьВидеоЭмулироватьВводСКлавиатуры                   = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоЭмулироватьВводСКлавиатуры");
		Объект.ЗаписьВидеоСкрытьСлужебныеОкна                          = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗаписьВидеоСкрытьСлужебныеОкна");
		//по записи видео - окончание
		Объект.ИмяТекущейСборки = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ИмяСборки");
		ЗнЗакрытьTestClientПослеЗапускаСценариев = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗакрытьTestClientПослеЗапускаСценариев");
		Если ЗнЗакрытьTestClientПослеЗапускаСценариев = Истина Тогда
			Объект.ЗакрытьTestClientПослеЗапускаСценариев = Истина;
		КонецЕсли;	 
		
		Если Объект.СоздаватьИнструкциюHTML Тогда
			ЗнКаталогOutputИнструкцияHTML = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогOutputИнструкцияHTML");
			Объект.КаталогOutputИнструкцияHTML = ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputИнструкцияHTML);
		КонецЕсли;	 
		
		Если Объект.СоздаватьИнструкциюMarkdown Тогда
			ЗнКаталогOutputИнструкцияMarkdown = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогOutputИнструкцияMarkdown");
			Объект.КаталогOutputИнструкцияMarkdown = ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputИнструкцияMarkdown);
		КонецЕсли;	 
		
		Если Объект.СоздаватьИнструкциюВидео Тогда
			ЗнКаталогOutputИнструкцияВидео = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогOutputИнструкцияВидео");
			Объект.КаталогOutputИнструкцияВидео = ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputИнструкцияВидео);
		КонецЕсли;
		
		Если Объект.ЗапускатьТестКлиентВРежимеОтладки Тогда
			Объект.КлючиОтладки 	= ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КлючиОтладки");
			Объект.АдресОтладчика 	= ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "АдресОтладчика");
		КонецЕсли;
		
		
		//для отчетов о прохождении сценариев
		ЗнКаталогОтносительноКоторогоНадоСтроитьИерархию = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогОтносительноКоторогоНадоСтроитьИерархию");
		Если ЗначениеЗаполнено(ЗнКаталогОтносительноКоторогоНадоСтроитьИерархию) Тогда
			Объект.КаталогОтносительноКоторогоНадоСтроитьИерархию = ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогОтносительноКоторогоНадоСтроитьИерархию);
		КонецЕсли;	 
		
		ЗнУровеньОтчета1 = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "УровеньОтчета1");
		Если ЗначениеЗаполнено(ЗнУровеньОтчета1) Тогда
			Объект.УровеньОтчета1 = ЗнУровеньОтчета1;
		КонецЕсли;	 
		
		ЗнУровеньОтчета2 = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "УровеньОтчета2");
		Если ЗначениеЗаполнено(ЗнУровеньОтчета2) Тогда
			Объект.УровеньОтчета2 = ЗнУровеньОтчета2;
		КонецЕсли;	 
		
		ЗнУровеньОтчета3 = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "УровеньОтчета3");
		Если ЗначениеЗаполнено(ЗнУровеньОтчета3) Тогда
			Объект.УровеньОтчета3 = ЗнУровеньОтчета3;
		КонецЕсли;	 
		
		ЗнДобавлятьКИмениСценарияУсловияВыгрузки = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ДобавлятьКИмениСценарияУсловияВыгрузки");
		Если ЗнДобавлятьКИмениСценарияУсловияВыгрузки = Истина Тогда
			Объект.ДобавлятьКИмениСценарияУсловияВыгрузки = Истина;
		КонецЕсли;	 
		
		
		ЗнВыгружатьСтатусВыполненияСценариевВФайл = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ВыгружатьСтатусВыполненияСценариевВФайл");
		Если ЗнВыгружатьСтатусВыполненияСценариевВФайл = Истина Тогда
			Объект.ВыгружатьСтатусВыполненияСценариевВФайл = Истина;
		КонецЕсли;	 
		
		ЗнПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев");
		Если ЗнПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев <> Неопределено Тогда
			Объект.ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев = ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев);
		КонецЕсли;	 
		
		ЗнИспользоватьSikuliXСервер = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ИспользоватьSikuliXСервер");
		Если ЗнИспользоватьSikuliXСервер = Истина Тогда
			Объект.ИспользоватьSikuliXСервер = Истина;
		КонецЕсли;	 
		
		ЗнКаталогиСкриптовSikuliX = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогиСкриптовSikuliX");
		Если ЗначениеЗаполнено(ЗнКаталогиСкриптовSikuliX) Тогда
			Объект.КаталогиСкриптовSikuliX = ЗнКаталогиСкриптовSikuliX;
		КонецЕсли;	 
		
		Объект.ИскатьЭлементыФормыПоИмени = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ИскатьЭлементыФормыПоИмени");
		Объект.ЗапускатьКлиентТестированияСМаксимизированнымОкном = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗапускатьКлиентТестированияСМаксимизированнымОкном");
		
		Объект.ТегTreeВключенПоУмолчанию = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ТегTreeВключенПоУмолчанию");
		
		//для отчета jUnit
		ЗнДелатьОтчетВФорматеjUnit = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ДелатьОтчетВФорматеjUnit");
		Если ЗнДелатьОтчетВФорматеjUnit = Истина Тогда
			
			ОпределилиКаталогjUnit = Ложь;
			ЗнКаталогOutputjUnit   = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогOutputjUnit");
			Если ЗначениеЗаполнено(ЗнКаталогOutputjUnit) Тогда
				Файл = Новый Файл(ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputjUnit));
				Если Не ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя, "ЗнКаталогOutputjUnit") Тогда
					СоздатьКаталогКомандаСистемы(Файл.ПолноеИмя);
					ФайлПроверкаСуществования = Новый Файл(ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputjUnit));
					Если НЕ ФайлСуществуетКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя) Тогда
						ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог создать каталог для отчета jUnit: %1");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ЗнКаталогOutputjUnit);
						СделатьСообщение(ТекстСообщения);
						ЗаписатьЛогВЖРОшибка("VanessaAutomation.ЗапускВРежимеКоманднойСтроки", ТекстСообщения);
						Возврат;
					КонецЕсли;	 
					
				КонецЕсли;	 
				Объект.КаталогOutputjUnit       = ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputjUnit);
				Объект.ДелатьОтчетВФорматеjUnit = Истина;
				ОпределилиКаталогjUnit          = Истина;
			КонецЕсли;	 
			
			Если НЕ ОпределилиКаталогjUnit Тогда
				СделатьСообщение("Не смог из переданных параметров JSON определить каталог отчета jUnit.");
				Возврат;
			КонецЕсли;	 
		КонецЕсли;
		
		
		//для отчета CucumberJson
		ЗнДелатьОтчетВФорматеCucumberJson = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ДелатьОтчетВФорматеCucumberJson");
		Если ЗнДелатьОтчетВФорматеCucumberJson = Истина Тогда
			
			ОпределилиКаталогCucumberJson = Ложь;
			ЗнКаталогOutputCucumberJson   = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогOutputCucumberJson");
			Если ЗначениеЗаполнено(ЗнКаталогOutputCucumberJson) Тогда
				Файл = Новый Файл(ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputCucumberJson));
				Если Не ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя, "ЗнКаталогOutputCucumberJson") Тогда
					СоздатьКаталогКомандаСистемы(Файл.ПолноеИмя);
					ФайлПроверкаСуществования = Новый Файл(ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputCucumberJson));
					Если НЕ ФайлСуществуетКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя) Тогда
						ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог создать каталог для отчета CucumberJson: %1");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ЗнКаталогOutputCucumberJson); 
						СделатьСообщение(ТекстСообщения);
						ЗаписатьЛогВЖРОшибка("VanessaAutomation.ЗапускВРежимеКоманднойСтроки", ТекстСообщения);
						Возврат;
					КонецЕсли;	 
					
				КонецЕсли;	 
				Объект.КаталогOutputCucumberJson       = ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputCucumberJson);
				Объект.ДелатьОтчетВФорматеCucumberJson = Истина;
				ОпределилиКаталогCucumberJson          = Истина;
			КонецЕсли;	 
			
			Если НЕ ОпределилиКаталогCucumberJson Тогда
				СделатьСообщение("Не смог из переданных параметров JSON определить каталог отчета CucumberJson.");
				Возврат;
			КонецЕсли;	 
		КонецЕсли;
		
		
		//для отчета Allure
		ЗнДелатьОтчетВФорматеАллюр = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ДелатьОтчетВФорматеАллюр");
		Если ЗнДелатьОтчетВФорматеАллюр = Истина Тогда
			Объект.ДелатьОтчетВФорматеАллюр = Истина;
		КонецЕсли;	
		
		
		ОпределилиКаталогAllure = Ложь;
		ЗнКаталогOutputAllure = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогOutputAllure");
		Если ЗначениеЗаполнено(ЗнКаталогOutputAllure) Тогда
			УдалитьКаталогКомандаСистемы(ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputAllure));
			Файл = Новый Файл(ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputAllure));
			Если Не ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя, "КаталогOutputAllure") Тогда
				СоздатьКаталогКомандаСистемы(Файл.ПолноеИмя);
			КонецЕсли;	 
			Объект.КаталогOutputAllure      = ЗнКаталогOutputAllure;
			ОпределилиКаталогAllure         = Истина;
		КонецЕсли;	 
		
		ЗнКаталогOutputAllureБазовый = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогOutputAllureБазовый");
		Если ЗначениеЗаполнено(ЗнКаталогOutputAllureБазовый) Тогда
			Файл = Новый Файл(ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputAllureБазовый));
			Если Не ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя, "ЗнКаталогOutputAllureБазовый1") Тогда		
				СоздатьКаталогКомандаСистемы(Файл.ПолноеИмя);
			КонецЕсли;	 
			
			Если ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки") = Истина Тогда
				ЗнКаталогOutputAllureБазовый = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputAllureБазовый)) + ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ИмяСборки");					
				Файл = Новый Файл(ЗнКаталогOutputAllureБазовый);
			КонецЕсли;	 
			
			ОчиститьСодержимоеКаталога(Файл.ПолноеИмя,"*.xml");
			ФайлПроверкаСуществования = Новый Файл(Файл.ПолноеИмя);
			Если НЕ ФайлСуществуетКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя, "ЗнКаталогOutputAllureБазовый2") Тогда
				СоздатьКаталогКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя);
				ФайлПроверкаСуществования = Новый Файл(ФайлПроверкаСуществования.ПолноеИмя);
				Если НЕ ФайлСуществуетКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя, "ЗнКаталогOutputAllureБазовый3") Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог создать каталог для отчета Allure: %1");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ЗнКаталогOutputAllureБазовый); 
					СделатьСообщение(ТекстСообщения);
					Возврат;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Объект.КаталогOutputAllure      = ЗнКаталогOutputAllureБазовый;
			ОпределилиКаталогAllure         = Истина;
		КонецЕсли;	 
		
		Если Объект.ДелатьОтчетВФорматеАллюр Тогда
			Если НЕ ОпределилиКаталогAllure Тогда
				СделатьСообщение("Не смог из переданных параметров JSON определить каталог отчета Allure.");
				Возврат;
			КонецЕсли;	 
		КонецЕсли;	 
		
		
		ПриоритетНастроекПользователя = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ПриоритетНастроекПользователя");
		
		ВыполнятьШагиАссинхронноЗн = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ВыполнятьШагиАссинхронно");
		Если (ВыполнятьШагиАссинхронноЗн <> Неопределено) и (ПриоритетНастроекПользователя <> Истина) Тогда
			Объект.ВыполнятьШагиАссинхронно = ВыполнятьШагиАссинхронноЗн;
		КонецЕсли;	 
		
		
		ЗнКаталогИсполняемогоФайла = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "КаталогИсполняемогоФайла");
		Если ЗначениеЗаполнено(ЗнКаталогИсполняемогоФайла) Тогда
			ЗнКаталогИсполняемогоФайла = ДополнитьСлешВПуть(ЗнКаталогИсполняемогоФайла);
			ТекКаталогПрограммы = ДополнитьСлешВПуть(КаталогПрограммы());
			Если Нрег(ТекКаталогПрограммы) <> Нрег(ЗнКаталогИсполняемогоФайла) Тогда
				ПоказатьПредупреждение(Неопределено,"Ожидали запуск сеанса на платформе:" + Символы.ПС + ЗнКаталогИсполняемогоФайла
				      + Символы.ПС + Символы.ПС + "Текущая версия платформы:" + Символы.ПС + ТекКаталогПрограммы);
				Возврат;	  
			КонецЕсли;	 
		КонецЕсли;	 
		
		
		ВыполнитьСценарии = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ВыполнитьСценарии");
		ВыполнитьСценарииСТекущегоШага = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ВыполнитьСценарииСТекущегоШага");
		Если ВыполнитьСценарии = Истина Тогда
			ЗнЗавершитьРаботуСистемы = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗавершитьРаботуСистемы");
			Если ЗнЗавершитьРаботуСистемы = Истина Тогда
				Объект.НадоЗавершитьРаботуСистемыПослеВыполненияВсехСценариев = Истина;
			КонецЕсли;	 
			
			Объект.НадоВыполнитьСценарииПослеЗагрузкиФич = Истина;
			ЗагрузитьФичи();
		ИначеЕсли ВыполнитьСценарииСТекущегоШага = Истина Тогда	
			НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Истина;
			НомерСтрокиСценарияПереданныйИзвне           = Число(ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "НомерСтрокиДляЗапускаСТекущегоШагаСценария"));
			ЗагрузитьФичи();
			ПодключитьОбработчикОжидания("ЗапуститьСценарийСоСтрокиПрисланнойИзвне",0.1,Истина);
		Иначе	
			ЗагрузитьСценарии = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON, "ЗагрузитьСценарии");
			Если ЗагрузитьСценарии = Истина Тогда
				ЗагрузитьФичи();
			КонецЕсли;	 
		КонецЕсли;	 
		
		
		
	ИначеЕсли ПолучитьЗначениеПереданногоПараметра(СтруктураПараметров, "GetStepsCache") = Истина Тогда
		VBParams = ПолучитьЗначениеПереданногоПараметра(СтруктураПараметров, "VBParams");
		Если VBParams = Неопределено Тогда
			ВызватьИсключение ПолучитьТекстСообщенияПользователю("Не найден путь к файлу JSON. Параметр: VBParams."); 
		Иначе 
			ПараметрыФайла = ПрочитатьСтруктуруИзJSONФайлаКлиент(VBParams);
			Если ПараметрыФайла = Неопределено Тогда
				ВызватьИсключение ПолучитьТекстСообщенияПользователю("Ошибка чтения структуры JSON пропускаем чтение");
			КонецЕсли; 
		КонецЕсли;	 
		
		
		
		ВерсияСнипетов = ТекущаяДата();
		ВстроенныеБиблиотеки = ВстроенныеБиблиотеки();
		БылиОшибки = Ложь;
		МассивИменФайловКоторыеСовпалиСКеш = Новый Массив;
		КаталогФич = "";
		
		
		Объект.КаталогФич = "";
		ПодключитьСнипетыИзВнутреннихФорм(ВстроенныеБиблиотеки, ВерсияСнипетов, БылиОшибки,СтруктураПараметров,
		  МассивИменФайловКоторыеСовпалиСКеш,МассивИменКонтекстовОбработок,ТаблицаКонтекстовОбработок,КаталогФич);
		  
		
		КаталогTemplateEpfUF = ПараметрыФайла.КаталогTemplateEpfUF;
		МассивФайловTemplateEpfUF = Новый Массив;
		Файлы = НайтиФайлы(КаталогTemplateEpfUF,"*",Истина);
		Для Каждого Файл Из Файлы Цикл
			Если Файл.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;	 
			
			ДанныеФайла = Новый Структура;
			ДанныеФайла.Вставить("Имя",Файл.Имя);
			ДанныеФайла.Вставить("ДвоичныеДанные",Новый ДвоичныеДанные(Файл.ПолноеИмя));
			МассивФайловTemplateEpfUF.Добавить(ДанныеФайла);
		КонецЦикла;	
		 
		ЗТ = Новый ЗаписьТекста(ПараметрыФайла.ИмяФайлаКеш,"UTF-8",,Ложь); 
		ЗТ.Записать(ДанныеСлужебногоКешаСтрокой(МассивФайловTemplateEpfUF)); 
		ЗТ.Закрыть();
		
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервере
Функция ДанныеСлужебногоКешаСтрокой(МассивФайловTemplateEpfUF)
	ДанныеСлужебногоКеша = Новый Структура;
	ДанныеСлужебногоКеша.Вставить("КешStepDefinition",РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition"));
	ДанныеСлужебногоКеша.Вставить("МассивФайловTemplateEpfUF",МассивФайловTemplateEpfUF);
	Возврат ЗначениеВСтрокуВнутр(ДанныеСлужебногоКеша);
КонецФункции	 

&НаСервереБезКонтекста
Функция ЗначениеВСтрокуВнутрСервер(Значение)
	Возврат ЗначениеВСтрокуВнутр(Значение); 
КонецФункции	 

&НаСервереБезКонтекста
Функция ЕстьКонстантаВКонфигурацииСервер(ИмяКонстанты)
	Зн = Метаданные.Константы.Найти(ИмяКонстанты);
	Если Зн = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьЗначениеКонстантыСервер(ИмяКонстанты)
	Возврат Константы[ИмяКонстанты].Получить();
КонецФункции	


&НаКлиенте
Процедура УстановитьВидимостьКолонокДерева(ЕстьКонстантаВКонфигурацииПутьКVA)
	Если ЕстьКонстантаВКонфигурацииПутьКVA И Объект.РежимСамотестирования Тогда
		// видимость колонок Дерева тестов
		ПоказатьСкрытьСтрокаРеальнойПроцедуры("Показать");
		ПоказатьСкрытьАдресСнипета("Показать");
		ПоказатьСкрытьСнипет("Показать");
		ПоказатьСкрытьПутьКФайлу("Показать");
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;

	Если НЕ Элементы.ДеревоТестовПолныйПуть.Видимость  Тогда
		Элементы.ПоказатьСкрытьПутьКФайлу.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;	 
	Если НЕ Элементы.ДеревоТестовСнипет.Видимость  Тогда
		Элементы.ПоказатьСкрытьСнипет.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;	 
	Если НЕ Элементы.ДеревоТестовАдресСнипета.Видимость  Тогда
		Элементы.ПоказатьСкрытьАдресСнипета.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;	 
	Если НЕ Элементы.ДеревоТестовСтрокаРеальнойПроцедуры.Видимость  Тогда
		Элементы.ПоказатьСкрытьСтрокаРеальнойПроцедуры.Картинка = БиблиотекаКартинок.СнятьФлажки;
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСлужебныхЭлементов(ДопПараметры)
	ЕстьКонстантаВКонфигурацииПутьКVA = ДопПараметры.ЕстьКонстантаВКонфигурацииПутьКVA;
	Если ЕстьКонстантаВКонфигурацииПутьКVA Тогда
		Если ПоказыватьНастройкуПроверкаРаботыVanessaAutomationВРежимеTestClient = Неопределено Тогда
			ПоказыватьНастройкуПроверкаРаботыVanessaAutomationВРежимеTestClient = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	Элементы.ПроверкаРаботыVanessaAutomationВРежимеTestClient.Видимость = ЕстьКонстантаВКонфигурацииПутьКVA
	  И (ПоказыватьНастройкуПроверкаРаботыVanessaAutomationВРежимеTestClient = Истина);
	Элементы.ГруппаСлужебная.Видимость = Объект.ПроверкаРаботыVanessaAutomationВРежимеTestClient И ЕстьКонстантаВКонфигурацииПутьКVA;
	Элементы.ДеревоТестовСтатус.Видимость = Объект.ПроверкаРаботыVanessaAutomationВРежимеTestClient И ЕстьКонстантаВКонфигурацииПутьКVA;
	УстановитьВидимостьКолонокДерева(ЕстьКонстантаВКонфигурацииПутьКVA);
	
	Попытка
		//при редактировании в конфигураторе старых версий платформы (8.3.6 и раньше) эти флаги слетают
		Элементы.ГруппаЗапускТестов.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаГенерацияEPF.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаКаталогиБиблиотек.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаДополнительно.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаНесколькоКлиентовТестирования.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаНастройки.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаСлужебная.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.КаталогФич.АвтоМаксимальнаяШирина = Ложь;
	Исключение
	КонецПопытки;
	
	Элементы.ФлагСценарииВыполнены.Видимость = Объект.РежимСамотестирования;
	Элементы.ФлагСценарииЗагружены.Видимость = Объект.РежимСамотестирования;
	
	Если НЕ Объект.РежимСамотестирования Тогда
		Элементы.ЧастичноеВыполнениеСценариев.Видимость = Ложь;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура МаксимизироватьФорму()
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;	 
	
	Если WshShell = Неопределено Тогда
		WshShell = ПолучитьWshShell();
	КонецЕсли;
	
    WSHShell.SendKeys("%");
    WSHShell.SendKeys("{LEFT}{LEFT}{ENTER}");  	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормы()
	ТекстСообщенийПользователю = ТекстСообщенийПользователю();
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекстСообщенийПользователю",ТекстСообщенийПользователю);
	ДопПараметры.Вставить("ЕстьКонстантаВКонфигурацииПутьКVA",ЕстьКонстантаВКонфигурацииПутьКVA);
	ДопПараметры.Вставить("КешВерсияОбработки",КешВерсияОбработки);
	ДопПараметры.Вставить("ЭтоLinux",ЭтоLinux);
	ДопПараметры.Вставить("НедавноЗагруженныеФичи",НедавноЗагруженныеФичи);
	ДопПараметры.Вставить("ПрефиксИнструментаДляСохраненияНастроек",ПрефиксИнструментаДляСохраненияНастроек);
	ДопПараметры.Вставить("ИДДляОбщегоСохраненияНастроек",ИДДляОбщегоСохраненияНастроек);
	ДопПараметры.Вставить("ПараметрыДляСохраненияНастроек",ПараметрыДляСохраненияНастроек());
	ДопПараметры.Вставить("ПроверкаОптимизацииРаботыСФайлами",СоздатьФайлПроверкаОптимизацииРаботыСФайлами());
	ДопПараметры.Вставить("ВозможнаОптимизацияРаботыСФайлами",ВозможнаОптимизацияРаботыСФайлами);
	
	СерверныеВызовыПриОткрытииФормы(ДопПараметры);
	
	
	// видимость колонок Дерева тестов
	ПоказатьСкрытьИДСтроки("Показать");
	
	
	УстановитьВидимостьСлужебныхЭлементов(ДопПараметры);	
	КешВерсияОбработки                      = ДопПараметры.КешВерсияОбработки;
	НедавноЗагруженныеФичи                  = ДопПараметры.НедавноЗагруженныеФичи;
	ПрефиксИнструментаДляСохраненияНастроек = ДопПараметры.ПрефиксИнструментаДляСохраненияНастроек;
	ИДДляОбщегоСохраненияНастроек           = ДопПараметры.ИДДляОбщегоСохраненияНастроек;
	ВозможнаОптимизацияРаботыСФайлами       = ДопПараметры.ВозможнаОптимизацияРаботыСФайлами;
	
	МассивСнипетовПрерывающихЗаписьСценария = ПолучитьМассивСнипетовПрерывающихЗаписьСценария();
	
	ОбновитьВидимостьЭлементовПослеЗагрузкиНастроек();
	ОбновитьЗаголовокФормы();

	
	ЗаполнитьДанныеТекущейИнфобазы();
	
	Объект.ИнтервалВыполненияШага = Объект.ИнтервалВыполненияШагаЗаданныйПользователем;
	Если Объект.ИнтервалВыполненияШага = 0 Тогда
		Объект.ИнтервалВыполненияШага = 0.1;
		Объект.ИнтервалВыполненияШагаЗаданныйПользователем = 0.1;
	КонецЕсли;	 
	
	КаталогФич          = Объект.КаталогФич;
	КаталогИнструментов = Объект.КаталогИнструментов;
	
	
	
	ОбновитьКнопкуЗагрузитьФичи();
	
	Объект.КаталогиБиблиотек.ТипЗначения     = Новый ОписаниеТипов("Строка");
	Объект.СписокТеговИсключение.ТипЗначения = Новый ОписаниеТипов("Строка");
	Объект.СписокТеговОтбор.ТипЗначения      = Новый ОписаниеТипов("Строка");

	ЗаполнитьПолеВерсияПлатформыДляГенерацииEPFЕслиЭтоВозможно();
	
	ЗагрузитьГлобальныеПеременные();
	
	Если СохранитьКлиентовТестированияПослеОткрытияФормы = Истина Тогда
		СохранитьКлиентовТестирования();
	КонецЕсли;	 
	
	ФормаVanessaAutomationОткрылась = Истина;
	
	Если НЕ Объект.ВыполнениеСценарияИзОбработкиОповещения Тогда
		ЗапускВРежимеКоманднойСтроки();
		Если НЕ Объект.ЗапускИзКоманднойСтроки Тогда
			Если СокрЛП(Объект.КаталогФич) <> "" Тогда
				Если Объект.ЗагрузкаФичПриОткрытии = "Загружать" Тогда
					ЗагрузитьФичи();
				ИначеЕсли Объект.ЗагрузкаФичПриОткрытии = "Загружать и выполнять" Тогда
					Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
						ЗагрузитьФичи();
						ВыполнитьСценарии();
					Иначе
						Объект.НадоВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Истина;
						ЗагрузитьФичи();
					КонецЕсли;	
				ИначеЕсли Объект.ЗагрузкаФичПриОткрытии = "Задавать вопрос" Тогда
					Если ЕстьПоддержкаНемодальныхФорм Тогда
						Оповещение = Вычислить("Новый ОписаниеОповещения(""ПослеОтветаНаВопросНадоЛиЗагружатьФичи"", ЭтаФорма)");
						Выполнить("ПоказатьВопрос(Оповещение, ""Загрузить фичи? <"" + СокрЛП(Объект.КаталогФич) + "">"", РежимДиалогаВопрос.ОКОтмена, 0, КодВозвратаДиалога.ОК)");
					Иначе
						Рез = Вопрос("Загрузить фичи? <" + СокрЛП(Объект.КаталогФич) + ">", РежимДиалогаВопрос.ОКОтмена, 0, КодВозвратаДиалога.ОК);
						ПослеОтветаНаВопросНадоЛиЗагружатьФичи(Рез, Неопределено);
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	
	КонецЕсли;	 
	
	НастройкаДоступностиВидимостиЭлементов();
	
	Если Объект.ВыполнениеСценарияИзОбработкиОповещения Тогда
		ЗагрузитьФичи();
	ИначеЕсли НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Истина Тогда
		ЗагрузитьФичи();
		ПодключитьОбработчикОжидания("ЗапуститьСценарийСоСтрокиПрисланнойИзвне",0.1,Истина);
	КонецЕсли;	 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьМаксВерсиюПлатформы(Массив)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("Версия");
	Тзн.Колонки.Добавить("Параметр");
	
	Для Каждого Элем Из Массив Цикл
		СтрТзн = Тзн.Добавить();
		СтрТзн.Версия = Элем;
		
		Попытка
			МассивСтрок = РазложитьСтрокуВМассивПодстрок(Элем, ".");
			СтрТзн.Параметр = Число(МассивСтрок[3]*1000);
		Исключение
			СтрТзн.Параметр = 0;
		КонецПопытки;
	КонецЦикла;	
	
	Тзн.Сортировать("Параметр");
	
	Возврат Тзн[Тзн.Количество() - 1].Версия;
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьПолеВерсияПлатформыДляГенерацииEPFЕслиЭтоВозможно()
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Версия8310ИлиВыше    = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.10.1");
	Если Версия8310ИлиВыше Тогда
		Объект.ВерсияПлатформыДляГенерацииEPF = КаталогПрограммы();
		Возврат;
	КонецЕсли;

	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Возврат;
	КонецЕсли;	 
	
	
	Если ЗначениеЗаполнено(Объект.ВерсияПлатформыДляГенерацииEPF) Тогда
		Возврат;
	КонецЕсли;
		
	Массив = Новый Массив;
	
	Файлы = НайтиФайлы("C:\Program Files (x86)\1cv8", "*.exe", Истина);
	Для Каждого Файл Из Файлы Цикл
		Если НРег(Файл.ИмяБезРасширения) <> "1cv8" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Путь = Файл.Путь;
		ФайлВерсия = Новый Файл(Путь);
		Версия = ФайлВерсия.Путь;
		
		ФайлВерсия = Новый Файл(Версия);
		Версия = ФайлВерсия.Имя;
		
		Если ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(Версия, "8.3.10.1") Тогда
			Массив.Добавить(Версия);
		КонецЕсли;
		
	КонецЦикла;

	Файлы = НайтиФайлы("C:\Program Files\1cv8", "*.exe", Истина);
	Для Каждого Файл Из Файлы Цикл
		Если НРег(Файл.ИмяБезРасширения) <> "1cv8" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Путь = Файл.Путь;
		ФайлВерсия = Новый Файл(Путь);
		Версия = ФайлВерсия.Путь;
		
		ФайлВерсия = Новый Файл(Версия);
		Версия = ФайлВерсия.Имя;
		
		Если ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(Версия, "8.3.10.1") Тогда
			Массив.Добавить(Версия);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Массив.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МаксВерсия = ОпределитьМаксВерсиюПлатформы(Массив);

	Файлы = НайтиФайлы("C:\Program Files (x86)\1cv8\"+ МаксВерсия +"\bin", "*.exe", Истина);
	Файлы32 = НайтиФайлы("C:\Program Files\1cv8\"+ МаксВерсия +"\bin", "*.exe", Истина);
	Если Файлы.Количество() > 0 Тогда
		Объект.ВерсияПлатформыДляГенерацииEPF = "C:\Program Files (x86)\1cv8\" + МаксВерсия + "\bin";
	ИначеЕсли Файлы32.Количество() > 0 Тогда
		Объект.ВерсияПлатформыДляГенерацииEPF = "C:\Program Files\1cv8\" + МаксВерсия + "\bin";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокФормы()
	ЭтаФорма.Заголовок = ПолучитьВерсиюОбработкиКлиент();
	Если Объект.РежимСамотестирования Тогда
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " autotest";
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция КаталогИзИмениФайла(ИмяФайла)
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.Путь;
КонецФункции	 

&НаКлиенте
Функция КаталогИнструментовИзПутиКФреймворку(ИмяФайла = Неопределено)
	Если ИмяФайла = Неопределено Тогда
		ПутьКОбработке = ПолучитьПутьКОбработкеКлиент();
	Иначе
		ПутьКОбработке = ИмяФайла;
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(ПутьКОбработке) Тогда
		Путь = КаталогИзИмениФайла(ПутьКОбработке);
		Если Прав(Путь,1) = "/" Тогда
			Стр = Лев(Стр,СтрДлина(Стр)-1);
		ИначеЕсли Прав(Путь,1) = "\" Тогда
			Стр = Лев(Стр,СтрДлина(Стр)-1);
		КонецЕсли;	 
		
		Возврат Путь;
	КонецЕсли;	
	
	Возврат ""; 
КонецФункции	 

&НаКлиенте
Процедура ПодключитьБиблиотекуРаботыСВидео()
	Если МодульРаботыСВидео <> Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ВерсияПоставки = "single" Тогда
		ПараметрыФормы = Новый Структура;
		МодульРаботыСВидео = ПолучитьФорму("ВнешняяОбработка." + ПолучитьИмяОбработкиVA() + ".Форма.Video_РаботаСВидео", ПараметрыФормы);
	Иначе	
		
		Если ПустаяСтрока(Объект.КаталогИнструментов) Тогда
			Объект.КаталогИнструментов = КаталогИнструментовИзПутиКФреймворку();
		КонецЕсли;
		
		ИмяФайла = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "lib/Video/РаботаСВидео.epf";
		Если СокрЛП(Объект.КаталогИнструментов) = "" Тогда
			ЕстьКонстантаВКонфигурацииПутьКVA = ЕстьКонстантаВКонфигурацииСервер("ПутьКVanessaAutomation");
			Если ЕстьКонстантаВКонфигурацииПутьКVA Тогда
				ПутьКVanessaAutomation     = ПолучитьЗначениеКонстантыСервер("ПутьКVanessaAutomation");
				ФайлПутьКVanessaAutomation = Новый Файл(ПутьКVanessaAutomation);
				ИмяФайла                 = ДополнитьСлешВПуть(ФайлПутьКVanessaAutomation.Путь) + "lib/Video/РаботаСВидео.epf";
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Файл <%1> не существует.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайла); 
			СделатьСообщение(ТекстСообщения);
			Возврат;
		КонецЕсли;	
		
		МодульРаботыСВидео = ПолучитьФорму("ВнешняяОбработка.РаботаСВидео.Форма.Форма");
	КонецЕсли;	 	
	
	Если МодульРаботыСВидео = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ванесса",ЭтаФорма);
	МодульРаботыСВидео.УстановитьСлужебныеПеременные(СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьБиблиотекуСообщенийПользователю()
	Если Объект.ВерсияПоставки = "single" Тогда
		ПараметрыФормы = Новый Структура;
		МодульСообщенийПользователю = ПолучитьФорму("ВнешняяОбработка." + ПолучитьИмяОбработкиVA() + ".Форма.Локализация_Messages", ПараметрыФормы);
		Возврат;
	КонецЕсли;	 
	
	ИмяФайла = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "locales/Messages.epf";
	
	Если СокрЛП(Объект.КаталогИнструментов) = "" Тогда
		ЕстьКонстантаВКонфигурацииПутьКVA = ЕстьКонстантаВКонфигурацииСервер("ПутьКVanessaAutomation");
		Если ЕстьКонстантаВКонфигурацииПутьКVA Тогда
			ПутьКVanessaAutomation     = ПолучитьЗначениеКонстантыСервер("ПутьКVanessaAutomation");
			ФайлПутьКVanessaAutomation = Новый Файл(ПутьКVanessaAutomation);
			ИмяФайла                 = ДополнитьСлешВПуть(ФайлПутьКVanessaAutomation.Путь) + "locales/Messages.epf";
			
			Если Не ЗначениеЗаполнено(Объект.КаталогИнструментов) Тогда
				//ПутьКVanessaAutomation - это полный путь к epf с именем файла 
				Объект.КаталогИнструментов = КаталогИнструментовИзПутиКФреймворку(ПутьКVanessaAutomation);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Файл <%1> не существует.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайла); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	
	
	МодульСообщенийПользователю = ПолучитьФорму("ВнешняяОбработка.Messages.Форма.Форма");
КонецПроцедуры 

&НаКлиенте
Процедура ПодключитьБиблиотекуПереводШагов()
	Если Объект.ВерсияПоставки = "single" Тогда
		ПараметрыФормы = Новый Структура;
		МодульПереводШагов = ПолучитьФорму("ВнешняяОбработка." + ПолучитьИмяОбработкиVA() + ".Форма.Локализация_Steps", ПараметрыФормы);
	Иначе	
		ИмяФайла = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "locales/Steps.epf";
		
		Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Файл <%1> не существует.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайла); 
			СделатьСообщение(ТекстСообщения);
			Возврат;
		КонецЕсли;	
		
		МодульПереводШагов = ПолучитьФорму("ВнешняяОбработка.Steps.Форма.Форма");
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьТестыЗагрузитьОднуФичу()
	ОчиститьСообщения();
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = "Выберите feature файл";
	ДиалогОткрытияФайла.Фильтр = "Фича файл (*.feature)|*.feature";
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработатьВыборФайлаЗагрузкаФичи"", ЭтаФорма)");
		Выполнить("ДиалогОткрытияФайла.Показать(ОписаниеОповещения)");
	Иначе	
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			Объект.КаталогФич = ДиалогОткрытияФайла.ПолноеИмяФайла;
		Иначе
			Возврат;
		КонецЕсли;
		
		//очистим кеш при смене фичи
		КешStepDefinition.Очистить();
		КешТаблицGherkin.Очистить();
		ЗагрузитьФичи();
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьПараметрКорректным(СтрокаПараметр)
	Если Найти(Прав(СтрокаПараметр, 1), "\/") > 0 Тогда
		СтрокаПараметр = Лев(СтрокаПараметр, СтрДлина(СтрокаПараметр) - 1);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СделатьПараметрыКорректными()
	СделатьПараметрКорректным(Объект.КаталогИнструментов);
	СделатьПараметрКорректным(Объект.КаталогOutputИнструкцияHTML);
	СделатьПараметрКорректным(Объект.КаталогOutputИнструкцияMarkdown);
	СделатьПараметрКорректным(Объект.КаталогOutputСкриншоты);
	СделатьПараметрКорректным(Объект.КаталогOutputИнструкцияВидео);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьПоляВДеревеДляПостроенияОтчетов(Дерево)
	Для каждого СтрСтроки Из Дерево.Строки Цикл
		СтрСтроки.Статус     = "";
		Если СтрСтроки.Тип = "Шаг" Тогда
			СтрСтроки.ТипКартинки = 3;
		ИначеЕсли СтрСтроки.ДопТип = "Цикл" Тогда
			СтрСтроки.ТипКартинки = 3;
		ИначеЕсли СтрСтроки.ДопТип = "Условие" Тогда
			СтрСтроки.ТипКартинки = 3;
		ИначеЕсли СтрСтроки.ДопТип = "УсловиеИначеЕсли" Тогда
			СтрСтроки.ТипКартинки = 3;
		КонецЕсли;	 
		
		ОчиститьПоляВДеревеДляПостроенияОтчетов(СтрСтроки);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоляВДеревеДляПостроенияОтчетовСервер()
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	
	Дерево = ОбъектСервер.ДеревоТестов;
	ОчиститьПоляВДеревеДляПостроенияОтчетов(Дерево);
	
	ЗначениеВРеквизитФормы(ОбъектСервер, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоляВДеревеДляПостроенияОтчетовРекурсивно(СтрокиДерева)
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		СтрокаДерева.Статус     = "";
		Если СтрокаДерева.Тип = "Шаг" Тогда
			Если СтрокаДерева.ТипКартинки <> 3 Тогда
				СтрокаДерева.ТипКартинки = 3;
			КонецЕсли;	 
		ИначеЕсли СтрокаДерева.ДопТип = "Цикл" Тогда
			СтрокаДерева.ТипКартинки = 3;
		ИначеЕсли СтрокаДерева.ДопТип = "Условие" Тогда
			СтрокаДерева.ТипКартинки = 3;
		ИначеЕсли СтрокаДерева.ДопТип = "УсловиеИначеЕсли" Тогда
			СтрокаДерева.ТипКартинки = 3;
		КонецЕсли;	 
		
		ОчиститьПоляВДеревеДляПостроенияОтчетовРекурсивно(СтрокаДерева.ПолучитьЭлементы());
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоляВДеревеДляПостроенияОтчетовКлиент()
	ОчиститьПоляВДеревеДляПостроенияОтчетовРекурсивно(Объект.ДеревоТестов.ПолучитьЭлементы());
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоСценарий_SceanrioOutline(СтрокаДерева)
	Для каждого СтрСтроки Из СтрокаДерева.Строки Цикл
		Если СтрСтроки.Тип = "Примеры" Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаСервереБезКонтекста
Функция ДалееВДеревеСтрокиУсловийИначе(СтрокаДерева,СтрокиРодителя)
	ИД = СтрокиРодителя.Индекс(СтрокаДерева);
	ДалееТолькоУсловия = Истина;
	
	Пока Истина Цикл
		ИД = ИД + 1;
		Если ИД > СтрокиРодителя.Количество()-1 Тогда
			Прервать;
		КонецЕсли;	 
		
		ТекСтрока = СтрокиРодителя[ИД];
		
		Если (ТекСтрока.ДопТип = "УсловиеИначеЕсли") или (ТекСтрока.ДопТип = "УсловиеИначе") Тогда
			Продолжить;
		КонецЕсли;	 
		
		ДалееТолькоУсловия = Ложь;
		Прервать;
	КонецЦикла;	
	
	Возврат ДалееТолькоУсловия;
КонецФункции	

&НаСервереБезКонтекста
Процедура ОбработатьСлужебныеЗначенияВСтруктуреШага(СтруктураШага,СтрСтроки,Шаги)
	ЕстьЦиклВышеПоДереву = Ложь;
	ТекСтрокаДерева      = СтрСтроки;
	ТекСтрокиРодителя    = ТекСтрокаДерева.Родитель.Строки;
	ИдЦикла              = Неопределено;
	Пока Истина Цикл
		
		Если ТекСтрокиРодителя.Индекс(ТекСтрокаДерева) <> (ТекСтрокиРодителя.Количество()-1)
			И НЕ ДалееВДеревеСтрокиУсловийИначе(ТекСтрокаДерева,ТекСтрокиРодителя)
			Тогда
			//это должна быть последняя строка в своём уровне
			Прервать;
		КонецЕсли;	 
		
		Если ТекСтрокаДерева.Родитель.Тип = "Сценарий" Тогда
			Прервать;
		КонецЕсли;	 
		
		Если ТекСтрокаДерева.Родитель.ДопТип = "Цикл" Тогда
			ЕстьЦиклВышеПоДереву = Истина;
			ИдСтрокиЦикла        = ТекСтрокаДерева.Родитель.ИдСтроки;
			Прервать;
		КонецЕсли;	 
		
		ТекСтрокаДерева   = ТекСтрокаДерева.Родитель;
		ТекСтрокиРодителя = ТекСтрокаДерева.Родитель.Строки;
	КонецЦикла;	
	
	Если ЕстьЦиклВышеПоДереву Тогда
		СтруктураШага.Вставить("ИдЦикла",ИдСтрокиЦикла);
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСледующуюИсполнимуюСтрокуДерева(СтрокаДерева)
	Если СтрокаДерева.Тип = "Область"  или СтрокаДерева.Тип = "ШагСценарий" Тогда
		Если ЗначениеЗаполнено(СтрокаДерева.ДопТип) и (СтрокаДерева.ДопТип <> "УсловиеИначе") Тогда
			Возврат СтрокаДерева;
		Иначе	
			Возврат НайтиСледующуюИсполнимуюСтрокуДерева(СтрокаДерева.Строки[0]);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат СтрокаДерева;
КонецФункции	

&НаСервере
Функция ОпределитьИдСледующейСтроки(СтрокаДерева,СтрокиРодителя)
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ИдСледующейСтроки = СтрокиРодителя.Индекс(СтрокаДерева)+1;
	
	Если (СтрокиРодителя.Количество() - 1) >= ИдСледующейСтроки Тогда
		Возврат НайтиСледующуюИсполнимуюСтрокуДерева(СтрокиРодителя[ИдСледующейСтроки]);
	КонецЕсли;	 
	
	Если СтрокаДерева.Тип = "Сценарий" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтрокаДерева.Родитель.Тип = "Сценарий" Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если СтрокаДерева.Родитель.ДопТип = "Цикл" Тогда
		Возврат СтрокаДерева.Родитель;
	КонецЕсли;	 
	
	Возврат ОпределитьИдСледующейСтроки(СтрокиРодителя.Родитель,СтрокиРодителя.Родитель.Родитель.Строки);
КонецФункции	


&НаСервере
Функция НайтиСледующуюСтрокаКогдаУсловиеИстинно(СтрокаУсловия)
	РодительСтроки = СтрокаУсловия.Родитель;
	ИДСтрокиДерева = РодительСтроки.Строки.Индекс(СтрокаУсловия);
	
	Пока Истина Цикл
		ИДСтрокиДерева = ИДСтрокиДерева + 1;
		Если (РодительСтроки.Строки.Количество()-1) >= ИДСтрокиДерева Тогда
			СледующаяСтрока = РодительСтроки.Строки[ИДСтрокиДерева];
			
			Если СледующаяСтрока.ДопТип = "УсловиеИначеЕсли" Тогда
				Продолжить;
			ИначеЕсли СледующаяСтрока.ДопТип = "УсловиеИначе" Тогда
				Продолжить;
			КонецЕсли;	 
			
			Возврат НайтиСледующуюИсполнимуюСтрокуДерева(СледующаяСтрока);
		Иначе
			Если (РодительСтроки.ДопТип = "Условие") или (РодительСтроки.ДопТип = "УсловиеИначеЕсли") или (РодительСтроки.ДопТип = "УсловиеИначе")  или (РодительСтроки.Тип = "Область") Тогда
				Возврат НайтиСледующуюСтрокаКогдаУсловиеИстинно(РодительСтроки); 
			КонецЕсли;	 
			
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции	

&НаСервере
Процедура ДобавитьШагиДляВыполненияСценария(Шаги, ДеревоСтроки, СтрокаДерева, СтрокаСценария,
	                                                                ЭтоШагКонтекста,ДопПараметры)
	Для каждого СтрСтроки Из ДеревоСтроки Цикл
		Если СтрСтроки.Тип = "Шаг" Тогда
			СтруктураШага = ПолучитьСтруктуруШага(СтрСтроки, СтрокаДерева, СтрокаДерева, ЭтоШагКонтекста);
			
			Если ДопПараметры.ЕстьЦиклы Тогда
				ОбработатьСлужебныеЗначенияВСтруктуреШага(СтруктураШага,СтрСтроки,Шаги);
			КонецЕсли;	 
			
			РодительСтроки = СтрСтроки.Родитель;
			ИДСтрокиДерева = РодительСтроки.Строки.Индекс(СтрСтроки);
			Если ИДСтрокиДерева = РодительСтроки.Строки.Количество()-1 Тогда
				Если ДопПараметры.МассивУсловий.Количество() > 0 Тогда
					СтрокаУсловия = ДопПараметры.МассивУсловий[ДопПараметры.МассивУсловий.Количество()-1];
					
					ДалееВУсловииНетСтрок = Истина;
					ИдСтроки = СтрСтроки.ИдСтроки;
					СтрокаСоСледующимИД = СтрокаУсловия.Строки.Найти(ИдСтроки+1,"ИдСтроки",Истина);
					Если СтрокаСоСледующимИД <> Неопределено И СтрокаСоСледующимИД.СтрокаПараметровШагаВВидеТаблицы <> Истина Тогда
						ДалееВУсловииНетСтрок = Ложь;
					КонецЕсли;	 
					
					Если ДалееВУсловииНетСтрок Тогда
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("Тип","Шаг");
						ШагиВУсловии = СтрокаУсловия.Строки.НайтиСтроки(СтруктураПоиска,Истина);
						Для Каждого ШагВУсловии Из ШагиВУсловии Цикл
							Если ШагВУсловии.ИдСтроки > ИдСтроки Тогда
								ДалееВУсловииНетСтрок = Ложь;
							КонецЕсли;	 
						КонецЦикла;	
					КонецЕсли;	 
					
					Если ДалееВУсловииНетСтрок Тогда
						СледующаяСтрокаКогдаУсловиеИстинно = НайтиСледующуюСтрокаКогдаУсловиеИстинно(СтрокаУсловия);
						Если СледующаяСтрокаКогдаУсловиеИстинно <> Неопределено Тогда
							СтруктураШага.Вставить("ИдСледующегоШага", СледующаяСтрокаКогдаУсловиеИстинно.ИдСтроки);
						Иначе	
							Если ДопПараметры.ЕстьЦиклы Тогда
								//значит это последний шаг в сценарии, но он внутри условия
								ОбработатьСлужебныеЗначенияВСтруктуреШага(СтруктураШага,СтрСтроки,Шаги);
							Иначе
								СтруктураШага.Вставить("ИдСледующегоШага", -1);
							КонецЕсли;	 
							
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
			Шаги.Добавить(СтруктураШага);
		ИначеЕсли СтрСтроки.Тип = "ШагСценарий" Тогда
			Если СтрСтроки.ДопТип = "СтруктураСценария" Тогда //это вложенная структура сценария
				СтрокаПримеров = Неопределено;
				Для Каждого СтрокаДереваСтруктурыСценария Из СтрСтроки.Строки Цикл
					Если СтрокаДереваСтруктурыСценария.Тип = "Примеры" Тогда
						СтрокаПримеров = СтрокаДереваСтруктурыСценария;
					КонецЕсли;	 
				КонецЦикла;	 
				
				Если СтрокаПримеров = Неопределено Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("Не найдена строка примеров во вложенной структуре сценария. <%1>",ДопПараметры.ТекстСообщенийПользователю);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаДерева.ПолныйПуть);
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				НомерСтрокиПримера = 0;
				Для Каждого СтрокаПримера Из СтрокаПримеров.Строки Цикл
					НомерСтрокиПримера = НомерСтрокиПримера + 1;
					Если НомерСтрокиПримера = 1 Тогда
						Продолжить;//это служебная строка
					КонецЕсли;	 
					
					ДобавитьШагиДляВыполненияСценария(Шаги, СтрокаПримера.Строки, СтрокаПримера, СтрокаСценария, ЭтоШагКонтекста,ДопПараметры)
				КонецЦикла;	
			Иначе	
				ДобавитьШагиДляВыполненияСценария(Шаги, СтрСтроки.Строки, СтрокаДерева, СтрокаСценария, ЭтоШагКонтекста,ДопПараметры)
			КонецЕсли;	 
		ИначеЕсли СтрСтроки.Тип = "Область" Тогда
			Если (СтрСтроки.ДопТип = "Условие") или (СтрСтроки.ДопТип = "УсловиеИначеЕсли")  Тогда
				ДопПараметры.МассивУсловий.Добавить(СтрСтроки);
			КонецЕсли;	 
			
			Если (СтрСтроки.ДопТип = "Условие") или (СтрСтроки.ДопТип = "УсловиеИначеЕсли")  или (СтрСтроки.ДопТип = "Цикл")  Тогда
				СтруктураШага = ПолучитьСтруктуруШага(СтрСтроки, СтрокаДерева, СтрокаДерева, ЭтоШагКонтекста);
				
				СледующаяСтрока = ОпределитьИдСледующейСтроки(СтрСтроки,ДеревоСтроки);
				Если СледующаяСтрока = Неопределено Тогда
					СтруктураШага.Вставить("ИдСледующегоШага", Неопределено);
				Иначе	
					СтруктураШага.Вставить("ИдСледующегоШага", СледующаяСтрока.ИдСтроки);
				КонецЕсли;	 
				
				Если СтрСтроки.ДопТип = "Цикл" Тогда
					ДопПараметры.Вставить("ЕстьЦиклы",Истина);
				КонецЕсли;	 
				
				Если ДопПараметры.ЕстьЦиклы Тогда
					ОбработатьСлужебныеЗначенияВСтруктуреШага(СтруктураШага,СтрСтроки,Шаги);
				КонецЕсли;	 
				
				Шаги.Добавить(СтруктураШага);
			КонецЕсли;	 
			
			ДобавитьШагиДляВыполненияСценария(Шаги, СтрСтроки.Строки, СтрокаДерева, СтрокаСценария, ЭтоШагКонтекста,ДопПараметры);
			
			Если (СтрСтроки.ДопТип = "Условие") или (СтрСтроки.ДопТип = "УсловиеИначеЕсли") Тогда
				ДопПараметры.МассивУсловий.Удалить(ДопПараметры.МассивУсловий.Количество()-1);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьШагиИзМассиваШаговПоСписку(Шаги, МассивДляУдаления)
	Для Ккк = 0 По МассивДляУдаления.Количество() - 1 Цикл
		ИД = МассивДляУдаления.Количество() - 1 - Ккк;
		Ном = МассивДляУдаления[ИД];
		Шаги.Удалить(Ном);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьСценарийАутлайн(СтрокаДерева, МассивСценариевДляВыполнения, ТекПример = Неопределено, ДопПараметры)
	//получим сами именнованные параметры
	
	ИменаПараметров = Неопределено;
	СтрокаПримеров  = Неопределено;
	Для каждого СтрСтроки Из СтрокаДерева.Строки Цикл
		Если СтрСтроки.Тип = "Примеры" Тогда
			ИменаПараметров = СтрСтроки.ИменованныеПараметры;
			СтрокаПримеров = СтрСтроки;
		КонецЕсли; 
	КонецЦикла;
	
	Если ИменаПараметров = Неопределено Тогда
		СтрОшибки = "Не смог найти у сценария " + СтрокаДерева.Имя + " имена изменяемых параметров.";
		Сообщить(СтрОшибки);
		ВызватьИсключение СтрОшибки;
	КонецЕсли; 
	
	
	МассивИДСценариев = ДопПараметры.МассивИДСценариев;
	Ном = 0;
	Для каждого СтрСтрокаПримеров Из СтрокаПримеров.Строки Цикл
		Ном = Ном + 1;
		Если Ном = 1 Тогда
			//в первой строке лежат имена параметров
			Продолжить;
		КонецЕсли; 
		
		Если ТекПример <> Неопределено Тогда
			Если СтрСтрокаПримеров <> ТекПример Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		                          
		
		
		Если МассивИДСценариев <> Неопределено Тогда
			Если МассивИДСценариев.Найти(СтрСтрокаПримеров.Родитель.Родитель.ИДСтроки) = Неопределено Тогда //проверка что идёт запуск всей структуры сценария
				Если МассивИДСценариев.Найти(СтрСтрокаПримеров.ИдСтроки) = Неопределено Тогда //проверка что надо запускать конкретный пример
					Если НЕ ДопПараметры.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением Тогда
						Продолжить;
					Иначе
						Если НЕ ДопПараметры.НашелСценарий Тогда
							Продолжить;
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		
		
		СтруктураПараметровСценария = Новый Структура;
		СтруктураПараметровСценария.Вставить("Имя", СтрокаДерева.Имя + " (Пример №" + (Ном - 1) + ")");
		СтруктураПараметровСценария.Вставить("СтрокаДерева", СтрСтрокаПримеров.ИДСтроки);
		СтруктураПараметровСценария.Вставить("ИмяФичи", ДопПараметры.ИмяФичи);
		СтруктураПараметровСценария.Вставить("ПолныйПутьКФиче", ДопПараметры.ПолныйПутьКФиче);
		СтруктураПараметровСценария.Вставить("НомерСтрокиВФиче", Неопределено);
		СтруктураПараметровСценария.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага", 
	                  ДопПараметры.ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага);
		
		
		Шаги = Новый Массив;
		
		Если СтрокаДерева.Родитель.Строки[0].ДопТип = "Контекст" Тогда //значит надо добавить шаги контекста к нашим шагам
			ДопПараметры.Вставить("ЕстьЦиклы",Ложь);
			ДопПараметры.Вставить("МассивУсловий",Новый Массив);
			ДобавитьШагиДляВыполненияСценария(Шаги, СтрокаДерева.Родитель.Строки[0].Строки, СтрокаДерева, СтрСтрокаПримеров,
			       Истина,ДопПараметры);
		КонецЕсли;	 
		
		
		ДопПараметры.Вставить("ЕстьЦиклы",Ложь);
		ДопПараметры.Вставить("МассивУсловий",Новый Массив);
		ДобавитьШагиДляВыполненияСценария(Шаги, СтрСтрокаПримеров.Строки, СтрокаДерева, СтрСтроки.Родитель,
		      Ложь,ДопПараметры);
		
		Если ДопПараметры.РежимВыполненияОдногоШага Тогда
			МассивДляУдаления = Новый Массив;
			Ном = -1;
			Для каждого Шаг Из Шаги Цикл
				Ном = Ном + 1;
				Если Шаг.СтрокаШага = ДопПараметры.ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага Тогда
					Продолжить;
				КонецЕсли;	 
				
				МассивДляУдаления.Добавить(Ном);
			КонецЦикла;
			
			УдалитьШагиИзМассиваШаговПоСписку(Шаги, МассивДляУдаления);
		КонецЕсли;	 
		
		
		ДопПараметры.Вставить("НашелСценарий", Истина);
		
		
		СтруктураПараметровСценария.Вставить("Шаги", Шаги);
		МассивСценариевДляВыполнения.Добавить(СтруктураПараметровСценария);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруШага(СтрСтроки, СтрокаДерева, СтрокаСценария, ЭтоШагКонтекста)
	СтруктураШага = Новый Структура;
	СтруктураШага.Вставить("Имя", СтрСтроки.Имя);
	СтруктураШага.Вставить("ЗначенияПараметров", СтрСтроки.ЗначенияПараметров);
	СтруктураШага.Вставить("АдресСнипета", СтрСтроки.АдресСнипета);
	СтруктураШага.Вставить("СтрокаРеальнойПроцедуры", СтрСтроки.СтрокаРеальнойПроцедуры);
	СтруктураШага.Вставить("Снипет", СтрСтроки.Снипет);
	СтруктураШага.Вставить("ИмяСценария", СтрокаДерева.Имя);
	СтруктураШага.Вставить("СтрокаСценария", СтрокаСценария.ИДСтроки);
	СтруктураШага.Вставить("СтрокаШага", СтрСтроки.ИДСтроки);
	СтруктураШага.Вставить("НомерСтрокиВФиче", СтрСтроки.НомерСтрокиВФиче);
	СтруктураШага.Вставить("ИдСтроки", СтрСтроки.ИдСтроки);
	СтруктураШага.Вставить("ШагСчитаетсяУпавшим", Ложь);
	СтруктураШага.Вставить("ОписаниеОшибки", "");
	СтруктураШага.Вставить("ЭтоШагКонтекста", ЭтоШагКонтекста);
	СтруктураШага.Вставить("ШагСПараметрамиВТаблице", СтрСтроки.ШагСПараметрамиВТаблице);
	СтруктураШага.Вставить("ДопТип", СтрСтроки.ДопТип);
	СтруктураШага.Вставить("ПараметрыТаблицы", Неопределено);
	СтруктураШага.Вставить("МасштабироватьВВидео", Истина);
	СтруктураШага.Вставить("ТекстИнструкция", "");
	СтруктураШага.Вставить("ИдСледующегоШага", Неопределено);
	СтруктураШага.Вставить("ИдЦикла", Неопределено);
	НадоСнятьСкриншотШага = Ложь;
	Если ТипЗнч(СтрСтроки.ПроизвольныеЗначения) = Тип("Структура") Тогда
		СтруктураШага.Вставить("МассивТеговШага", СтрСтроки.ПроизвольныеЗначения.МассивТеговШага);
		СтруктураШага.Вставить("МассивКомментариевШага", СтрСтроки.ПроизвольныеЗначения.МассивКомментариевШага);
		
		Если СтрСтроки.ПроизвольныеЗначения.МассивТеговШага.Найти("screenshot") <> Неопределено Тогда
			НадоСнятьСкриншотШага = Истина;
		КонецЕсли;	 
	КонецЕсли;
	
	СтруктураШага.Вставить("НадоСнятьСкриншотШага", НадоСнятьСкриншотШага);
	
	Если СтрСтроки.ШагСПараметрамиВТаблице = Истина Тогда
		ПараметрыТаблицы = Новый Массив;
		Для каждого ПодчиненнаяСтрока Из СтрСтроки.Строки Цикл
			ПараметрыТаблицы.Добавить(ПодчиненнаяСтрока.Имя);
		КонецЦикла;
		СтруктураШага.Вставить("ПараметрыТаблицы", ПараметрыТаблицы);
	КонецЕсли;	 
	
	Возврат СтруктураШага;
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруШагаКлиент(СтрСтроки, СтрокаДерева, СтрокаСценария, ЭтоШагКонтекста)
	СтруктураШага = Новый Структура;
	СтруктураШага.Вставить("Имя", СтрСтроки.Имя);
	СтруктураШага.Вставить("ЗначенияПараметров", СтрСтроки.ЗначенияПараметров);
	СтруктураШага.Вставить("АдресСнипета", СтрСтроки.АдресСнипета);
	СтруктураШага.Вставить("СтрокаРеальнойПроцедуры", СтрСтроки.СтрокаРеальнойПроцедуры);
	СтруктураШага.Вставить("Снипет", СтрСтроки.Снипет);
	СтруктураШага.Вставить("ИмяСценария", СтрокаДерева.Имя);
	СтруктураШага.Вставить("СтрокаСценария", СтрокаСценария.ИДСтроки);
	СтруктураШага.Вставить("НомерСтрокиВФиче", СтрСтроки.НомерСтрокиВФиче);
	СтруктураШага.Вставить("ИдСтроки", СтрСтроки.ИдСтроки);
	СтруктураШага.Вставить("СтрокаШага", СтрСтроки.ИДСтроки);
	СтруктураШага.Вставить("ШагСчитаетсяУпавшим", Ложь);
	СтруктураШага.Вставить("ОписаниеОшибки", "");
	СтруктураШага.Вставить("ЭтоШагКонтекста", ЭтоШагКонтекста);
	СтруктураШага.Вставить("ШагСПараметрамиВТаблице", СтрСтроки.ШагСПараметрамиВТаблице);
	СтруктураШага.Вставить("ДопТип", СтрСтроки.ДопТип);
	СтруктураШага.Вставить("ПараметрыТаблицы", Неопределено);
	СтруктураШага.Вставить("МасштабироватьВВидео", Истина);
	СтруктураШага.Вставить("ТекстИнструкция", "");
	СтруктураШага.Вставить("ИдСледующегоШага", Неопределено);
	СтруктураШага.Вставить("ИдЦикла", Неопределено);
	СтруктураШага.Вставить("НадоСнятьСкриншотШага", Ложь);
	
	Если СтрСтроки.ШагСПараметрамиВТаблице = Истина Тогда
		ПараметрыТаблицы = Новый Массив;
		Для каждого ПодчиненнаяСтрока Из СтрСтроки.ПолучитьЭлементы() Цикл
			ПараметрыТаблицы.Добавить(ПодчиненнаяСтрока.Имя);
		КонецЦикла;
		СтруктураШага.Вставить("ПараметрыТаблицы", ПараметрыТаблицы);
	КонецЕсли;	 
	
	Возврат СтруктураШага;
КонецФункции

&НаСервере
Процедура ДобавитьОбычныйСценарий(СтрокаДерева, МассивСценариевДляВыполнения, ДопПараметры)
	Если СтрокаДерева.ДопТип = "Контекст" Тогда
		Возврат;
	КонецЕсли;	 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Имя", СтрокаДерева.Имя);
	СтруктураПараметров.Вставить("СтрокаДерева", СтрокаДерева.ИдСтроки);
	СтруктураПараметров.Вставить("ИмяФичи", ДопПараметры.ИмяФичи);
	СтруктураПараметров.Вставить("ПолныйПутьКФиче", ДопПараметры.ПолныйПутьКФиче);
	СтруктураПараметров.Вставить("НомерСтрокиВФиче", СтрокаДерева.НомерСтрокиВФиче);
	СтруктураПараметров.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага", 
	                  ДопПараметры.ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага);
	
	Шаги = Новый Массив;
	
	
	Если СтрокаДерева.Родитель.Строки[0].ДопТип = "Контекст" Тогда //значит надо добавить шаги контекста к нашим шагам
		ДопПараметры.Вставить("ЕстьЦиклы",Ложь);
		ДопПараметры.Вставить("МассивУсловий",Новый Массив);
		ДобавитьШагиДляВыполненияСценария(Шаги, СтрокаДерева.Родитель.Строки[0].Строки, СтрокаДерева, СтрокаДерева,
		   Истина,ДопПараметры);
	КонецЕсли;	 
	
	ДопПараметры.Вставить("ЕстьЦиклы",Ложь);
	ДопПараметры.Вставить("МассивУсловий",Новый Массив);
	ДобавитьШагиДляВыполненияСценария(Шаги, СтрокаДерева.Строки, СтрокаДерева, СтрокаДерева, Ложь,ДопПараметры);
	
	Если ДопПараметры.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов Тогда
		МассивДляУдаления = Новый Массив;
		Ном = -1;
		Для каждого Шаг Из Шаги Цикл
			Ном = Ном + 1;
			Если Шаг.СтрокаШага = ДопПараметры.ИдСтрокиШагаСКоторогоВыполнятьСценарийССохранениемКонтекстов Тогда
				Прервать;
			КонецЕсли;	 
			
			МассивДляУдаления.Добавить(Ном);
		КонецЦикла;
		
		УдалитьШагиИзМассиваШаговПоСписку(Шаги, МассивДляУдаления);
	КонецЕсли;	 
	
	Если ДопПараметры.РежимВыполненияОдногоШага Тогда
		МассивДляУдаления = Новый Массив;
		Ном = -1;
		Для каждого Шаг Из Шаги Цикл
			Ном = Ном + 1;
			Если Шаг.СтрокаШага = ДопПараметры.ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага Тогда
				Продолжить;
			КонецЕсли;	 
			
			МассивДляУдаления.Добавить(Ном);
		КонецЦикла;
		
		УдалитьШагиИзМассиваШаговПоСписку(Шаги, МассивДляУдаления);
	КонецЕсли;	 
	
	
	СтруктураПараметров.Вставить("Шаги", Шаги);
	
	
	МассивСценариевДляВыполнения.Добавить(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСценарийВМассивСценариевДляВыполнения(СтрокаДерева, МассивСценариевДляВыполнения, ДопПараметры)
	
	ЭтоСценариоАутлайн = ЭтоСценарий_SceanrioOutline(СтрокаДерева);
	Если ЭтоСценариоАутлайн Тогда
		ДобавитьСценарийАутлайн(СтрокаДерева, МассивСценариевДляВыполнения, , ДопПараметры);
		Возврат;
	КонецЕсли;	 
	
	ДобавитьОбычныйСценарий(СтрокаДерева, МассивСценариевДляВыполнения, ДопПараметры);
КонецПроцедуры

&НаСервере
Процедура ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(ДеревоСтроки, МассивСценариевДляВыполнения, ДопПараметры)
	Если ТипЗнч(ДеревоСтроки) = Тип("СтрокаДереваЗначений") Тогда
		Если ДеревоСтроки.Тип = "Фича" Тогда
			ДопПараметры.Вставить("ИмяФичи", ДеревоСтроки.Имя);
			ДопПараметры.Вставить("ПолныйПутьКФиче", ДеревоСтроки.ПолныйПуть);
		КонецЕсли;	
		
		Если ДеревоСтроки.Тип = "Сценарий" Тогда
			ДобавитьСценарийВМассивСценариевДляВыполнения(ДеревоСтроки, МассивСценариевДляВыполнения, ДопПараметры);
		ИначеЕсли ДеревоСтроки.Тип = "Пример" Тогда
			ДобавитьСценарийАутлайн(ДеревоСтроки.Родитель.Родитель, МассивСценариевДляВыполнения, ДеревоСтроки, ДопПараметры)
		КонецЕсли; 
	Иначе	
		Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
			Если СтрДеревоСтроки.Тип = "Фича" Тогда
				ДопПараметры.Вставить("ИмяФичи", СтрДеревоСтроки.Имя);
				ДопПараметры.Вставить("ПолныйПутьКФиче", СтрДеревоСтроки.ПолныйПуть);
			КонецЕсли;	
			
			МассивИДСценариев = ДопПараметры.МассивИДСценариев;
			Если СтрДеревоСтроки.Тип = "Сценарий" Тогда
				Если МассивИДСценариев <> Неопределено Тогда
					Если МассивИДСценариев.Найти(СтрДеревоСтроки.ИдСтроки) <> Неопределено Тогда
						ДобавитьСценарийВМассивСценариевДляВыполнения(СтрДеревоСтроки, МассивСценариевДляВыполнения, ДопПараметры);
						ДопПараметры.Вставить("НашелСценарий", Истина);
					ИначеЕсли ДопПараметры.ДобавитьСценарииПослеНайденного и ДопПараметры.НашелСценарий Тогда
						ДобавитьСценарийВМассивСценариевДляВыполнения(СтрДеревоСтроки, МассивСценариевДляВыполнения, ДопПараметры);
					ИначеЕсли ДопПараметры.ЭтоПример и (СтрДеревоСтроки.ДопТип = "СтруктураСценария") Тогда
						ДобавитьСценарийВМассивСценариевДляВыполнения(СтрДеревоСтроки, МассивСценариевДляВыполнения, ДопПараметры);
					КонецЕсли;	 
				Иначе	
					ДобавитьСценарийВМассивСценариевДляВыполнения(СтрДеревоСтроки, МассивСценариевДляВыполнения, ДопПараметры);
				КонецЕсли;	 
			Иначе	
				ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(СтрДеревоСтроки.Строки, МассивСценариевДляВыполнения, ДопПараметры);
			КонецЕсли;	 
		КонецЦикла;
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроставитьИДРекурсивно(ДеревоСтроки, ИД, МассивСтрокДереваДанныеФормы, МассивИменКонтекстовОбработок, ТзнТаблицаИзвестныхStepDefinition, ДопПараметры, ЕстьСвояEPFУФичи = Неопределено)
	Для каждого СтрокаДерева Из ДеревоСтроки Цикл
		
		СтрокаДерева.Статус     = "";
		Если СтрокаДерева.Тип = "Шаг" Тогда
			Если СтрокаДерева.ТипКартинки <> 3 Тогда
				СтрокаДерева.ТипКартинки = 3;
			КонецЕсли;	 
		ИначеЕсли СтрокаДерева.ДопТип = "Цикл" Тогда
			СтрокаДерева.ТипКартинки = 3;
		ИначеЕсли СтрокаДерева.ДопТип = "Условие" Тогда
			СтрокаДерева.ТипКартинки = 3;
		ИначеЕсли СтрокаДерева.ДопТип = "УсловиеИначеЕсли" Тогда
			СтрокаДерева.ТипКартинки = 3;
		КонецЕсли;	 
		
		
		Если СтрокаДерева.Тип = "Фича" Тогда
			ФайлФичи = Новый Файл(СтрокаДерева.ПолныйПуть);
			ФайлEPF  = ФайлФичи.Путь + "step_definitions" + ?(ДопПараметры.ЭтоLinux, "/", "\") + ФайлФичи.ИмяБезРасширения + ".epf";
			ФайлEPF = УниверсальноеПолноеИмяФайла(ФайлEPF);
			СтрТзнТаблицаИзвестныхStepDefinition = МассивИменКонтекстовОбработок.Найти(Нрег(ФайлEPF));
			ЕстьСвояEPFУФичи = Истина;
			Если СтрТзнТаблицаИзвестныхStepDefinition = Неопределено Тогда
				ЕстьСвояEPFУФичи = Ложь;
			КонецЕсли;  
		КонецЕсли;  
		СтрокаДерева.ФичаИмеетСвоюEPF = ЕстьСвояEPFУФичи;
		
		СтрокаДерева.ИДСтроки = ИД;
		Если ДопПараметры.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов Тогда
			Если СтрокаДерева.ИДСтроки = ДопПараметры.ИдСтрокиШагаСКоторогоВыполнятьСценарийССохранениемКонтекстов Тогда
				СтрокаДерева.ВыполнятьСценарийСЭтогоШага = Истина;
			КонецЕсли;	 
		КонецЕсли;	 
		МассивСтрокДереваДанныеФормы.Добавить();//просто добавим пустой элемент, заполнение его данными будет в процедуре клиента
		ИД = ИД + 1;
		ПроставитьИДРекурсивно(СтрокаДерева.Строки, ИД, МассивСтрокДереваДанныеФормы, МассивИменКонтекстовОбработок,
		                                          ТзнТаблицаИзвестныхStepDefinition, ДопПараметры, ЕстьСвояEPFУФичи);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьИДСтрокиВДереве(Дерево, МассивСтрокДереваДанныеФормы, МассивИменКонтекстовОбработок,
	                                                     ТзнТаблицаИзвестныхStepDefinition, ДопПараметры)
	Ид = 0;
	ПроставитьИДРекурсивно(Дерево.Строки, ИД, МассивСтрокДереваДанныеФормы, МассивИменКонтекстовОбработок,
	                                                      ТзнТаблицаИзвестныхStepDefinition, ДопПараметры);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивСценариевДляВыполненияСервер(МассивСценариевДляВыполнения, МассивСтрокДереваДанныеФормы,
	            ТекИДСценария, МассивИменКонтекстовОбработок, ДопПараметры)
	ДеревоФорма = Объект.ДеревоТестов;
	
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	
	Если Не Объект.РежимВыполненияОдногоШага Тогда
		ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
		ЗаполнитьИДСтрокиВДереве(ОбъектСервер.ДеревоТестов, МассивСтрокДереваДанныеФормы, МассивИменКонтекстовОбработок,
		                ТзнТаблицаИзвестныхStepDefinition, ДопПараметры);
	КонецЕсли;	 
	
	ТекСценарий = Неопределено;
	Если ТекСценарий = Неопределено Тогда
		ТекСценарий = ОбъектСервер.ДеревоТестов.Строки;
	КонецЕсли; 
	
	ДопПараметры.Вставить("МассивИДСценариев", ТекИДСценария);
	ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(ТекСценарий, МассивСценариевДляВыполнения, ДопПараметры);
	
	ЗначениеВРеквизитФормы(ОбъектСервер, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтатусСценария(ИД)
	ИДСтрокиСценария = МассивСценариевДляВыполнения[ИД].СтрокаДерева;
	СтрокаСценария   = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	
	Если СокрЛП(СтрокаСценария.Статус) <> "" Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	РезультатПрохожденияТестовШагов = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
	
	СценарийВыполнен = Истина;
	СтрокиСценария = СтрокаСценария.ПолучитьЭлементы();
	Для каждого СтрШаг Из РезультатПрохожденияТестовШагов Цикл
		Если СтрШаг.Статус <> "Success" Тогда
			СценарийВыполнен = Ложь;
			Статус = СтрШаг.Статус;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если СценарийВыполнен Тогда
		СтрокаСценария.Статус = "Success";
	Иначе	
		СтрокаСценария.Статус = Статус;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьКДатеСтроку(Знач Стр) 
	НачСтр = Стр;
	//Зн = Дата(Стр);
	Год   = 0;
	Месяц = 0;
	День  = 0;
	
	Поз  = Найти(Стр, ".");
	День = Число(Лев(Стр, Поз - 1));
	Стр = Сред(Стр, Поз + 1);
	
	Поз   = Найти(Стр, ".");
	Месяц = Число(Лев(Стр, Поз - 1));
	Стр   = Сред(Стр, Поз + 1);
	
	Год   = Число(Стр);
	Если СтрДлина(Стр) = 2 Тогда
		Если Год < 100 Тогда
			Год = Год + 2000;
		КонецЕсли;
	КонецЕсли;	 
	
	Зн = Дата(Год, Месяц, День);
	
	
	Зн = Формат(Зн, "ДФ=yyyyMMdd; ДП=00010101");
	Зн = "'" + Зн + "'";
	
	Возврат Зн;
КонецФункции

&НаКлиенте
Процедура ВызватьМетод(Обработка, Знач ИмяПроцедуры, МассивАргументов)
	Поз = Найти(ИмяПроцедуры, "(");
	Если Поз > 0 Тогда
		ИмяПроцедуры = Лев(ИмяПроцедуры, Поз - 1);
	КонецЕсли;	 
	
	Команда = "Обработка." + ИмяПроцедуры + "(";
	
	АргументТаблица = Новый Массив;
	
	Если МассивАргументов <> Неопределено Тогда
		Для Ккк = 0 По МассивАргументов.Количество() - 1 Цикл
			Элем = МассивАргументов[Ккк];
			Если ТипЗнч(Элем) = Тип("Массив") Тогда
				АргументТаблица.Добавить(Элем);
				Команда = Команда + "АргументТаблица[" + (АргументТаблица.Количество() - 1) + "]";
			Иначе	
				Команда = Команда + Элем;
			КонецЕсли;	 
			
			Если Ккк < МассивАргументов.Количество() - 1 Тогда
				Команда = Команда + ",";
			КонецЕсли;	 
		КонецЦикла;
	КонецЕсли;	 
	
	Команда = Команда + ")";
	
	ТекстСообщения = ПолучитьТекстСообщенияПользователю("Выполняю");

	Отладка(ПолучитьТекстСообщенияПользователю(ТекстСообщения) + ": " + Команда);
	Выполнить(Команда);
КонецПроцедуры

&НаКлиенте
Функция ПараметрыОшибкиИзПричиныОшибки(ПричинаОшибки)
	Стр = "";
	Если ЗначениеЗаполнено(ПричинаОшибки.ИмяМодуля) Тогда
		Стр = Стр + "                        ПричинаОшибки:" + Символы.ПС;
	КонецЕсли;         
	Если ЗначениеЗаполнено(ПричинаОшибки.ИмяМодуля) Тогда
		Стр = Стр + "                        ИмяМодуля: "      + ПричинаОшибки.ИмяМодуля + Символы.ПС;
	КонецЕсли;         
	Если ЗначениеЗаполнено(ПричинаОшибки.ИсходнаяСтрока) Тогда
		Стр = Стр + "                        ИсходнаяСтрока: " + СокрЛП(ПричинаОшибки.ИсходнаяСтрока) + Символы.ПС;
	КонецЕсли;         
	Если ЗначениеЗаполнено(ПричинаОшибки.НомерСтроки) Тогда
		Стр = Стр + "                        НомерСтроки: "    + ПричинаОшибки.НомерСтроки + Символы.ПС;
	КонецЕсли;         
	Если ЗначениеЗаполнено(ПричинаОшибки.Описание) Тогда
		Стр = Стр + "                        Описание: "       + ПричинаОшибки.Описание;
	КонецЕсли;         
	
	Возврат Стр;
КонецФункции	 

&НаКлиенте
Функция СформироватьТекстОшибкиРекурсивно(ДанныеОшибки,Отступ)
	Стр = "";
	НужноДобавитьПереводСтроки = Ложь;
	Если    ЗначениеЗаполнено(ДанныеОшибки.ИмяМодуля)
		Или ЗначениеЗаполнено(ДанныеОшибки.ИсходнаяСтрока)
		Или ЗначениеЗаполнено(ДанныеОшибки.НомерСтроки)
		Или ЗначениеЗаполнено(ДанныеОшибки.Описание)
		
		Тогда
		НужноДобавитьПереводСтроки = Истина;
		Стр = Стр + Отступ + "ДеталиОшибки:"  + Символы.ПС;
		Если ЗначениеЗаполнено(ДанныеОшибки.ИмяМодуля) Тогда
			Стр = Стр + Отступ + "ИмяМодуля: "      + ДанныеОшибки.ИмяМодуля + Символы.ПС;
		КонецЕсли;	 
		Если ЗначениеЗаполнено(ДанныеОшибки.ИсходнаяСтрока) Тогда
			Стр = Стр + Отступ + "ИсходнаяСтрока: " + СокрЛП(ДанныеОшибки.ИсходнаяСтрока) + Символы.ПС;
		КонецЕсли;	 
		Если ЗначениеЗаполнено(ДанныеОшибки.НомерСтроки) Тогда
			Стр = Стр + Отступ + "НомерСтроки: "    + ДанныеОшибки.НомерСтроки + Символы.ПС;
		КонецЕсли;	 
		Если ЗначениеЗаполнено(ДанныеОшибки.Описание) Тогда
			Стр = Стр + Отступ + "Описание: "       + ДанныеОшибки.Описание;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ДанныеОшибки.Причина <> Неопределено Тогда
		Отступ = "    " + Отступ;
		Если НужноДобавитьПереводСтроки Тогда
			Стр = Стр + Символы.ПС + СформироватьТекстОшибкиРекурсивно(ДанныеОшибки.Причина,Отступ);
		Иначе	
			Стр = Стр + СформироватьТекстОшибкиРекурсивно(ДанныеОшибки.Причина,Отступ);
		КонецЕсли;	 
	КонецЕсли;	 
	Возврат Стр;
КонецФункции	 

&НаКлиенте
Функция ВывестиВСообщениеТекстОшибки(ДанныеОшибки)
	Отступ = "                ";
	Стр = СформироватьТекстОшибкиРекурсивно(ДанныеОшибки,Отступ);
	Возврат Стр;
КонецФункции	 

&НаКлиенте
Функция ПолучитьТекстПредупреждения()
	ОкноПредупреждения = Неопределено;
	Попытка
		ОкнаПредупреждения = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
		Для Каждого ТекущееОкно Из ОкнаПредупреждения Цикл
			Если ЭтоЗаголовокОкнаМодальногоДиалога(ТекущееОкно.Заголовок) Тогда
				ОкноПредупреждения = ТекущееОкно;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	 
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если ОкноПредупреждения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Текст = "";
	
	ПоляПредупреждения = ОкноПредупреждения.НайтиОбъекты(Тип("ТестируемоеПолеФормы"));
	Для Каждого ПолеПредупреждения Из ПоляПредупреждения Цикл
		Если ЗначениеЗаполнено(Текст) Тогда
			Текст = Текст + Символы.ПС;
		КонецЕсли;	 
		
		Текст = Текст + ПолеПредупреждения.ТекстЗаголовка;
	КонецЦикла;	
	
	Возврат Текст; 
КонецФункции	

&НаКлиенте
Функция СформироватьОписаниеОшибки(Знач Стр, ИмяФайла, ИмяПроцедуры,ИнфоОбОшибке)
	СисИнфо            = Новый СистемнаяИнформация; 
	ВерсияПриложения   = СисИнфо.ВерсияПриложения;
	РежимСовместимости = УзнатьРежимСовместимостиКлиент(ПолучитьТекстСообщенияПользователю("Не использовать"));
	ТекстИДРаннера     = "";
	Если ЗначениеЗаполнено(Объект.ИДРаннера) Тогда
		ТекстИДРаннера = ", ИДРаннера="+Объект.ИДРаннера;
	КонецЕсли;	
	
	ТекстОшибкиTestClient = "";
	Попытка
		ИнфоОбОшибке = Неопределено;
		ИнфоОбОшибке = ОбъектКонтекстСохраняемый.ТестовоеПриложение.ПолучитьТекущуюИнформациюОбОшибке();
		Если ИнфоОбОшибке <> Неопределено Тогда
			ТекстОшибкиTestClient = ВывестиВСообщениеТекстОшибки(ИнфоОбОшибке);
		КонецЕсли;	 
	Исключение
	КонецПопытки;
	
	Стр = Стр + Символы.ПС 
	      + Символы.ПС              + ПолучитьТекстСообщенияПользователю("Технические данные") + ":"
          + Символы.ПС + "        " + ПолучитьТекстСообщенияПользователю("ИмяФайла") +": " + ИмяФайла
          + Символы.ПС + "        " + ПолучитьТекстСообщенияПользователю("ИмяПроцедуры") + ": " + ИмяПроцедуры 
          + Символы.ПС + "        " + ПолучитьТекстСообщенияПользователю("ВерсияVB") + ": " + ПолучитьВерсиюОбработкиКлиент() 
          + Символы.ПС + "        " + ПолучитьТекстСообщенияПользователю("ВерсияПлатформы") +": " + ВерсияПриложения 
          + Символы.ПС + "        " + ПолучитьТекстСообщенияПользователю("РежимСовместимостиTestManager") +": " + РежимСовместимости
          + Символы.ПС + "        " + ПолучитьТекстСообщенияПользователю("ДатаВремяОшибки") +": " + ТекущаяДата();
        
	Если ЗначениеЗаполнено(ТекстОшибкиTestClient) Тогда
		Стр = Стр + Символы.ПС + ТекстОшибкиTestClient;
	Иначе
		ТекстПредупреждения = ПолучитьТекстПредупреждения();
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			Стр = Стр + Символы.ПС + "Текст модального окна:" + Символы.ПС 
			  + "    " + ТекстПредупреждения;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Стр;
КонецФункции

&НаКлиенте
Функция ПолучитьРезультатПрохожденияТестовСценария(ИДСтроки)
	ИД = МассивИДСтрокиДерева.Найти(ИДСтроки);
	Если ИД = Неопределено  Тогда
		Сообщить(ПолучитьТекстСообщенияПользователю("Неизвестная ошибка в ПолучитьРезультатПрохожденияТестовСценария."));
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат МассивРезультатПрохожденияТестовСценария[ИД]; 
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьТранзакциюСервер()
	Пока ТранзакцияАктивна() Цикл
		ОтменитьТранзакцию();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДействияПослеЗавершенияСценария(СтрокаСценария, БылаОшибка = Ложь, ОписаниеОшибки = Неопределено,СлужебныеДанныеСценария = Неопределено)
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат;
	КонецЕсли;	 
	ВызватьМетодСценарияЕслиОнЕсть(СтрокаСценария, "ПередОкончаниемСценария", , БылаОшибка, ОписаниеОшибки,СлужебныеДанныеСценария);
КонецПроцедуры

&НаКлиенте
Функция ПроверитьНаличиеИнструментаДляСозданияСкриншотов()
	Если НЕ Объект.СоздаватьИнструкциюHTML и НЕ Объект.ДелатьСкриншотПриВозникновенииОшибки и НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат Истина;
	КонецЕсли;  
	
	Если Объект.СоздаватьИнструкциюHTML Тогда
		Если СокрЛП(Объект.КаталогOutputИнструкцияHTML) = "" Тогда
			Сообщить(ПолучитьТекстСообщенияПользователю("КаталогOutputИнструкцияHTML не задан."));
			Возврат Ложь;
		КонецЕсли;  
	КонецЕсли;	 
	Если Объект.СоздаватьИнструкциюMarkdown Тогда
		Если СокрЛП(Объект.КаталогOutputИнструкцияMarkdown) = "" Тогда
			Сообщить(ПолучитьТекстСообщенияПользователю("КаталогOutputИнструкцияMarkdown не задан."));
			Возврат Ложь;
		КонецЕсли;  
	КонецЕсли;	 
	Если Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
		Если СокрЛП(Объект.КаталогOutputСкриншоты) = "" Тогда
			Сообщить(ПолучитьТекстСообщенияПользователю("КаталогOutputСкриншоты не задан."));
			Возврат Ложь;
		КонецЕсли;  
	КонецЕсли;	 
	Если ЭтоLinux Тогда 
		Возврат Истина;
	Иначе 
		ВременныйФайл = ПолучитьИмяВременногоФайла("png");
		СделатьСкриншот(ВременныйФайл);
		Если НЕ ФайлСуществуетКомандаСистемы(ВременныйФайл, "ПроверитьНаличиеИнструментаДляСозданияСкриншотов") Тогда
			Сообщить(ПолучитьТекстСообщенияПользователю("НЕ найден инструмент по созданию скриншотов."));
			Возврат Ложь;
		КонецЕсли;	 
		
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СделатьСкриншот(ИмяФайла)
	Команда = Объект.КомандаСделатьСкриншот + " """ + ИмяФайла + """";
    Попытка
        Если ЭтоLinux Тогда 
            КомандаСистемы(Команда);
        Иначе 
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
		КонецЕсли;    
		Отладка("Команда создания скриншота=" + Команда);
		
		КоличествоПопыток = 0;
		МаксКоличествоПопыток = 5;
		Пока Истина Цикл
			Если ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
				Прервать;
			КонецЕсли;
			sleep(1);
			КоличествоПопыток = КоличествоПопыток + 1;
			Если КоличествоПопыток > МаксКоличествоПопыток Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;			
    Исключение
        ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ошибка создания скриншота:%1 команда:%2");
        ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеОшибки());
        ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Команда);
        Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
    КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция СоздатьИмяФайлаДляСкриншота(Каталог)
	Возврат ДополнитьСлешВПуть(Каталог) + "ScreenShot_" + ПолучитьОтметкуВремениДляИмениФайла() + ".png";
КонецФункции	

&НаКлиенте
Процедура ДобавитьВЛогИнструкцииHTMLВыполненияШага(СтруткураШага = Неопределено)
	Перем КаталогOutputИнструкцияHTML;
	
	Если СкриншотСделанВСценарии Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;  
	
	КаталогOutputИнструкцияHTML = ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputИнструкцияHTML);
	Если СтруткураШага = Неопределено Тогда
		ТекИД_ВыполненногоШагаВМассиве = ТекИД_ШагаВМассиве;
		Шаги                           = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		СтруткураШага                  = Шаги[ТекИД_ШагаВМассиве];
	КонецЕсли;	 
	
	ИмяФайлаСкриншота = СоздатьИмяФайлаДляСкриншота(КаталогOutputИнструкцияHTML);
	СделатьСкриншот(ИмяФайлаСкриншота);
	
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииHTML, КодировкаТекста.UTF8, , Истина);
	ТД.ЗаписатьСтроку("НачалоШага");
	СтрокаШага = СтруткураШага.Имя;
	Если СтруткураШага.ШагСПараметрамиВТаблице = Истина Тогда
		Для каждого СтрПараметрыТаблицы Из СтруткураШага.ПараметрыТаблицы Цикл
			СтрокаШага = СтрокаШага + "\n" + СтрПараметрыТаблицы;
		КонецЦикла;
	КонецЕсли;	 
	
	ТД.ЗаписатьСтроку("ИДШага=" + XMLСтрока(ТекИД_ШагаВМассиве));
	ТД.ЗаписатьСтроку("Скриншот=" + ИмяФайлаСкриншота);
	ТД.Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВЛогИнструкцииMarkdownВыполненияШага(СтруткураШага = Неопределено)
	
	Если СкриншотСделанВСценарии Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;  
	
	Если СтруткураШага = Неопределено Тогда
		ТекИД_ВыполненногоШагаВМассиве = ТекИД_ШагаВМассиве;
		Шаги                           = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		СтруткураШага                  = Шаги[ТекИД_ШагаВМассиве];
	КонецЕсли;	 
	
	
	
	
	ИмяФайлаСкриншота = СоздатьИмяФайлаДляСкриншота(Объект.КаталогOutputИнструкцияMarkdown);
	СделатьСкриншот(ИмяФайлаСкриншота);
	
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииMarkdown, КодировкаТекста.UTF8, , Истина);
	
	ТД.ЗаписатьСтроку("НачалоШага");
	
	СтрокаШага = СтруткураШага.Имя;
	Если СтруткураШага.ШагСПараметрамиВТаблице = Истина Тогда
		Для каждого СтрПараметрыТаблицы Из СтруткураШага.ПараметрыТаблицы Цикл
			СтрокаШага = СтрокаШага + "\n" + СтрПараметрыТаблицы;
		КонецЦикла;
	КонецЕсли;	 
	
	ТД.ЗаписатьСтроку("ИДШага=" + XMLСтрока(ТекИД_ШагаВМассиве));
	ТД.ЗаписатьСтроку("Скриншот=" + ИмяФайлаСкриншота);
	ТД.Закрыть();
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗначениеДляПередачиВМетод(Значение, Тип)
	Если Тип = "Строка" Тогда
		Возврат """" + СтрЗаменить(Значение, """", """""") + """";
	ИначеЕсли Тип = "Число" Тогда
		Возврат Значение;
	ИначеЕсли Тип = "Дата" Тогда
		Возврат ПреобразоватьКДатеСтроку(Значение);
	Иначе
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Неизвестный Тип: %1 в ПолучитьЗначениеДляПередачиВМетод");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Тип);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеДляПередачиВМетодСервер(Значение, Тип,СтруктураПараметров)
	Если Тип = "Строка" Тогда
		Возврат """" + СтрЗаменить(Значение, """", """""") + """";
	ИначеЕсли Тип = "Число" Тогда
		Возврат Значение;
	ИначеЕсли Тип = "Дата" Тогда
		Возврат ПреобразоватьКДатеСтрокуСервер(Значение);
	Иначе
		ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("Неизвестный Тип: %1 в ПолучитьЗначениеДляПередачиВМетод",СтруктураПараметров.ТекстСообщенийПользователю);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Тип);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьКДатеСтрокуСервер(Знач Стр) 
	НачСтр = Стр;
	//Зн = Дата(Стр);
	Год   = 0;
	Месяц = 0;
	День  = 0;
	
	Поз  = Найти(Стр, ".");
	День = Число(Лев(Стр, Поз - 1));
	Стр = Сред(Стр, Поз + 1);
	
	Поз   = Найти(Стр, ".");
	Месяц = Число(Лев(Стр, Поз - 1));
	Стр   = Сред(Стр, Поз + 1);
	
	Год   = Число(Стр);
	Если СтрДлина(Стр) = 2 Тогда
		Если Год < 100 Тогда
			Год = Год + 2000;
		КонецЕсли;
	КонецЕсли;	 
	
	Зн = Дата(Год, Месяц, День);
	
	Зн = Формат(Зн, "ДФ=yyyyMMdd; ДП=00010101");
	Зн = "'" + Зн + "'";
	
	Возврат Зн;
КонецФункции


&НаКлиенте
Процедура ЗапомнитьСостоянияКонтекстовДоВыполненияШага(Контекст, КонтекстСохраняемый, ИдСтроки)
	СостоянияКонтекстовДоВыполненияШага = Новый Структура;
	СостоянияКонтекстовДоВыполненияШага.Вставить("Контекст", СкопироватьСтруктуру(Контекст));
	СостоянияКонтекстовДоВыполненияШага.Вставить("КонтекстСохраняемый", СкопироватьСтруктуру(КонтекстСохраняемый));
	СостоянияКонтекстовДоВыполненияШага.Вставить("ИдСтроки", ИдСтроки);
	
	Ном = -1;
	Для каждого Элем Из МассивСостоянияКонтекстовДоВыполненияШага Цикл
		Ном = Ном + 1;
		Если Элем.ИдСтроки = ИдСтроки Тогда
			МассивСостоянияКонтекстовДоВыполненияШага.Удалить(Ном);
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	МассивСостоянияКонтекстовДоВыполненияШага.Добавить(СостоянияКонтекстовДоВыполненияШага);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСостоянияКонтекстовПоИдСтроки(ИдСтроки)
	Для каждого Элем Из МассивСостоянияКонтекстовДоВыполненияШага Цикл
		Если Элем.ИдСтроки = ИдСтроки Тогда
			Возврат Элем;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Функция ПолучитьИдСледующегоШага(ТекШаг)
	ИдСледующегоШага = Неопределено;
	Если ТекШаг.ДопТип = "Условие" или ТекШаг.ДопТип = "УсловиеИначеЕсли" Тогда
		Если НЕ Объект.РезультатУсловия Тогда
			ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки",ТекШаг.ИдСледующегоШага,Истина);
		КонецЕсли;	 
	ИначеЕсли ТекШаг.ДопТип = "Цикл" Тогда
		Если НЕ Объект.РезультатУсловия Тогда
			ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки",ТекШаг.ИдСледующегоШага,Истина);
			Если ТекШаг.ИдСледующегоШага = Неопределено Тогда
				ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки",ТекШаг.ИдЦикла,Истина);
			КонецЕсли;	 
		КонецЕсли;	 
	ИначеЕсли ТекШаг.ИдЦикла <> Неопределено Тогда
		ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки",ТекШаг.ИдЦикла,Истина);
	ИначеЕсли ТекШаг.ИдСледующегоШага = -1 Тогда
		ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки",Неопределено,Истина);
	ИначеЕсли ТекШаг.ИдСледующегоШага <> Неопределено Тогда
		ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки",ТекШаг.ИдСледующегоШага,Истина);
	КонецЕсли;	 
	
	Возврат ИдСледующегоШага;
КонецФункции	

&НаКлиенте
Процедура ПоказатьКолонкуСНомеромСтрокиДерева()
	Если Не Элементы.ДеревоТестовИДСтроки.Видимость Тогда
		ПоказатьСкрытьИДСтроки("Показать");
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура СнятьСкриншотШагаЕслиЭтоНеобходимо(Шаг,РезультатПрохожденияТестовСценария)
	Если Не Шаг.НадоСнятьСкриншотШага Тогда
		Возврат;
	КонецЕсли;	
	
	ИмяШага = Лев(Шаг.Имя,60);
	
	ИмяФайлаСкриншота = ДополнитьСлешВПуть(Объект.КаталогOutputСкриншоты)
	    + XMLСтрока(ТекущаяУниверсальнаяДатаВМиллисекундах())
		+  "_" + УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяШага) + ".png";
	   
	СделатьСкриншот(ИмяФайлаСкриншота);
	//ДобавитьСкриншотКСценарию(РезультатПрохожденияТестовСценария,ИмяФайлаСкриншота);
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьШагПродолжение(РезультатПрохожденияШага,ОбработкаТеста)
	ТекИД_ВыполненногоШагаВМассиве = ТекИД_ШагаВМассиве;
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	ТекШаг = Шаги[ТекИД_ШагаВМассиве];
	АдресСнипета = ТекШаг.АдресСнипета;
	ИДСтрокиШага                       = ТекШаг.СтрокаШага;
	ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
	
	СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	СтрокаШага     = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);
	
	
	//снятие скриншота шага, если указан тег @screenshot
	СнятьСкриншотШагаЕслиЭтоНеобходимо(ТекШаг,РезультатПрохожденияТестовСценария);
	
	
	КонтекстОтладки = ТаблицаОбработокДляОтладки.Получить(ТекШаг.СтрокаРеальнойПроцедуры);
	Если КонтекстОтладки <> Неопределено Тогда 
		ОбработкаТеста = КонтекстОтладки.Обработка;
	КонецЕсли;
	
	ИмяПроцедуры     = ТекШаг.СтрокаРеальнойПроцедуры;
	СписокАргументов = ТекШаг.ЗначенияПараметров;
	
	
	МассивПараметров = ПолучитьМассивПараметровИзСписокАргументов(СписокАргументов);
	
	Если СтрокаШага.ШагСПараметрамиВТаблице = Истина Тогда
		ПарамТаблица = Новый Массив;
		МассивПараметров.Добавить(ПарамТаблица);
		
		ПодчиненныеСтроки = СтрокаШага.ПолучитьЭлементы();
		Для каждого СтрокиТаблицы Из ПодчиненныеСтроки Цикл
			Если ЗначениеЗаполнено(СтрокиТаблицы.Тип) Тогда
				//значит это уже не строка таблицы
				Прервать;
			КонецЕсли;	 
			
			СтруктураПарамТаблица = Новый Структура;
			
			Если (СтрокиТаблицы.СтрокаПараметровШагаВВидеТаблицы <> Истина) или (НЕ ЗначениеЗаполнено(СтрокиТаблицы.Имя)) Тогда
				ПарамТаблица = Новый Массив;
				МассивПараметров.Добавить(ПарамТаблица);
				Продолжить;
			КонецЕсли;	 
			
			НомерКолонки = 0;
			Для каждого Колонка Из СтрокиТаблицы.ПараметрыТаблицы Цикл
				НомерКолонки       = НомерКолонки + 1;
				СтруктураПараметра = Колонка.Значение;
				Значение           = ПолучитьЗначениеДляПередачиВМетод(СтруктураПараметра.Значение, СтруктураПараметра.Тип);
				Значение           = Вычислить(Значение);
				
				СтруктураПарамТаблица.Вставить("Кол" + XMlСтрока(НомерКолонки), Значение);
			КонецЦикла;
			
			ПарамТаблица.Добавить(СтруктураПарамТаблица);
		КонецЦикла;
		
		Если ПарамТаблица.Количество() = 0 Тогда
			//значит эта таблица пустая, её передавать не надо
			МассивПараметров.Удалить(МассивПараметров.Количество()-1);
		КонецЕсли;	 
	КонецЕсли;	 
	
	СтрОшибка       = Неопределено;
	ШагВыполнен     = Ложь;
	ШагНеРеализован = Ложь;
	Попытка
		
		Если Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов = Истина Тогда
			СохраненнаяСтруктура = ПолучитьСостоянияКонтекстовПоИдСтроки(СтрокаШага.ИдСтроки);
			Если СтрокаШага.ВыполнятьСценарийСЭтогоШага = Истина Тогда 
				Если СохраненнаяСтруктура <> Неопределено Тогда
					ОбъектКонтекст            = СкопироватьСтруктуру(СохраненнаяСтруктура.Контекст);
					ОбъектКонтекстСохраняемый = СкопироватьСтруктуру(СохраненнаяСтруктура.КонтекстСохраняемый);
				Иначе	
					ЗапомнитьСостоянияКонтекстовДоВыполненияШага(ОбъектКонтекст, ОбъектКонтекстСохраняемый, СтрокаШага.ИдСтроки);
				КонецЕсли;	 
			Иначе	
				//значит в этот раз запустить с этого шага не получится, надо запомнить контекст для последующих запусков
				ЗапомнитьСостоянияКонтекстовДоВыполненияШага(ОбъектКонтекст, ОбъектКонтекстСохраняемый, СтрокаШага.ИдСтроки);
			КонецЕсли;	 
		ИначеЕсли Объект.СохранятьКонтекстыПередВыполнениемШагов Тогда
			ЗапомнитьСостоянияКонтекстовДоВыполненияШага(ОбъектКонтекст, ОбъектКонтекстСохраняемый, СтрокаШага.ИдСтроки);
		КонецЕсли;	 
		
		
		ОбработкаТеста.Контекст            = ОбъектКонтекст;
		ОбработкаТеста.КонтекстСохраняемый = ОбъектКонтекстСохраняемый;
		
		Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
			ЗаписатьЛогВЖРПередВыполнениемШага(ТекШаг.Имя);
		КонецЕсли;	 
		
		
		
		СкриншотСделанВСценарии = Ложь;
		
		//вызов процедуры шага
		ВсёЕщёИдётВыполнениеШагов = ВсёЕщёИдётВыполнениеШагов + 1;
		ВызватьМетод(ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
		ВсёЕщёИдётВыполнениеШагов = ВсёЕщёИдётВыполнениеШагов - 1;
		
		ОбъектКонтекст            = ОбработкаТеста.Контекст;
		ОбъектКонтекстСохраняемый = ОбработкаТеста.КонтекстСохраняемый;
		
		ШагВыполнен = Истина;
		
		Если НЕ ТекШаг.ЭтоШагКонтекста Тогда
			ДобавитьВЛогИнструкцииHTMLВыполненияШага(ТекШаг);
			ДобавитьВЛогИнструкцииMarkdownВыполненияШага(ТекШаг);
		КонецЕсли;	 
		
	Исключение
		Отладка("ОписаниеОшибки()=" + ОписаниеОшибки());
		ОписаниеОшибкиСтр = ОписаниеОшибки();
		
		АктивизироватьСтрокуДереваТекущегоШага();
		
		Если Найти(НРег(ОписаниеОшибкиСтр),НРег("Ошибка сетевого взаимодействия при вызове")) > 0 Тогда
			//это нужно, чтобы сообщить вызывающей системе, что было потеряно соединение с TestClient
			ВозниклаОшибкаОшибкаСетевогоВзаимодействия = Истина;
		КонецЕсли;	 
		
		Если Найти(ОписаниеОшибкиСтр, "}: Не реализовано.") > 0 Тогда //тогда это Pending
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Шаг (%1) не реализован.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекШаг.Имя); 
			
			ОписаниеОшибкиШага = ТекстСообщения;
			СделатьСообщение(ОписаниеОшибкиШага);
			
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не реализовано.");
			СтрОшибка = ТекстСообщения;
			ШагНеРеализован = Истина;
			
			Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Pending: %1");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекстСообщения);
				ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
			КонецЕсли;	 
			
			ОстановитьЗаписьВидеоОдногоШага();
			
			Если Объект.ПриравниватьPendingКFailed Тогда
				Если Объект.ДелатьЛогОшибокВТекстовыйФайл Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("Шаг сценария не реализован.");
					ЗаписатьЛогОшибки(СтрокаСценария,СтрокаШага,ТекстСообщения,Неопределено,ОписаниеОшибкиШага);
				КонецЕсли;	 
			КонецЕсли;	 
		Иначе
			//значит возникла ошибка
			ОписаниеОшибкиШага = ПолучитьТекстСообщенияПользователю("Шаг") + " (" + ТекШаг.Имя + ") " + ПолучитьТекстСообщенияПользователю("не выполнен") +".";
			СделатьСообщение(ОписаниеОшибкиШага);
			ИнфоОбОшибке = Неопределено;
			СтрОшибка = СформироватьОписаниеОшибки(ОписаниеОшибкиСтр, АдресСнипета, ИмяПроцедуры,ИнфоОбОшибке);
			СделатьСообщение(СтрОшибка);
			
			ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(Неопределено,ИДСтрокиСценария,Истина);
			СтрокаШага = ПолучитьСтрокуШагаИзДанныхФормы(ТекШаг.СтрокаШага);
			
			ЭтоПример          = Ложь;
			ЭтоШагКонтекста    = Ложь;
			СтрокаРодителяШага = НайтиСтрокуСценарияЧерезРодителя(СтрокаШага, ЭтоПример,ЭтоШагКонтекста);
			
			Если ЭтоШагКонтекста Тогда
				ВозниклаОшибкаВШагеКонтекста = Истина;
			КонецЕсли;	 
			
			СтрокаСценария.ТекстОшибки = СтрОшибка;
			СтрокаШага.ТекстОшибки     = СтрОшибка;
			Если ГлобальныеЗначенияТаблиц.Свойство("ТаблицаЭталон") Тогда
				Если СтрокаШага.ПроизвольныеЗначения = Неопределено Тогда
					СтрокаШага.ПроизвольныеЗначения = Новый Структура;
				КонецЕсли;	 
				СтрокаШага.ПроизвольныеЗначения.Вставить("ТаблицаЭталон",ГлобальныеЗначенияТаблиц.ТаблицаЭталон);
				СтрокаШага.ПроизвольныеЗначения.Вставить("ТаблицаТекущееЗначение",ГлобальныеЗначенияТаблиц.ТаблицаТекущееЗначение);
			КонецЕсли;	 
			
			Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Шаг (%1) не выполнен. Строка дерева №%2");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекШаг.Имя);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",XMlСтрока(ТекШаг.ИдСтроки));
				ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Failed: %1");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрОшибка);
				ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
			КонецЕсли;	 
			
			ОстановитьЗаписьВидеоОдногоШага();
			
			Если Объект.ДелатьЛогОшибокВТекстовыйФайл Тогда
				ЗаписатьЛогОшибки(СтрокаСценария,СтрокаШага,СтрОшибка,ИнфоОбОшибке,ОписаниеОшибкиШага);
			КонецЕсли;	 
			
			Если Объект.ПоказыватьНомерСтрокиДереваПриВозникновенииОшибки Тогда
				ПоказатьКолонкуСНомеромСтрокиДерева();
			КонецЕсли;	 
		КонецЕсли;
		
		
	КонецПопытки;
	
	
	ИдСледующегоШага = ПолучитьИдСледующегоШага(ТекШаг);
	
	Если ШагВыполнен Тогда
		//снятие скриншота шага, если указан тег @screenshot
		СнятьСкриншотШагаЕслиЭтоНеобходимо(ТекШаг,РезультатПрохожденияТестовСценария);
	КонецЕсли;	 
	
	РезультатПрохожденияШага.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
	Если ШагВыполнен Тогда
		Если Не Объект.ОстановитьВыполнениеШагов Тогда
			СтрокаШага.Статус = "Success";
			СтрокаШага.ТипКартинки = 4;
			РезультатПрохожденияШага.Вставить("Статус", СтрокаШага.Статус);
		КонецЕсли;	 
		
		ПерейтиКВыполнениюСледующегоШага(, , ИдСледующегоШага);
	Иначе	
		
		СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
		ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(СтрокаСценария,ИДСтрокиСценария);
		
		СтрокаШага = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);
		
		АктивизироватьСтрокуДереваТекущегоШага();
		
		Если ШагНеРеализован Тогда
			СтрокаШага.Статус = "Pending";
			СтрокаШага.ТипКартинки = 6;
			Если Объект.ПриравниватьPendingКFailed Тогда
				СтатусЗапускаСценариев = Ложь;
			КонецЕсли;	 
		Иначе
			СтатусЗапускаСценариев = Ложь;		
			СтрокаШага.Статус      = "Failed";
			СтрокаШага.ТипКартинки = 5;
			ПроверитьФлагОстановкаПриВозникновенииОшибки();
		КонецЕсли; 
		РезультатПрохожденияШага.Вставить("ОписаниеОшибки", СтрОшибка);
		РезультатПрохожденияШага.Вставить("Статус", СтрокаШага.Статус);
		РезультатПрохожденияШага.Вставить("НомерСтрокиВФиче", СтрокаШага.НомерСтрокиВФиче);
		
		РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", СтрОшибка);
		РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче", СтрокаСценария.НомерСтрокиВФиче);
		
		СтрокаСценария.Статус         = СтрокаШага.Статус;
		
		БылаОшибка     = Ложь;
		ОписаниеОшибки = "";
		ДействияПослеЗавершенияСценария(СтрокаСценария, БылаОшибка, ОписаниеОшибки);

		Если БылаОшибка Тогда
			СтатусЗапускаСценариев = Ложь;		
			СтрокаСценария.Статус  = "Failed";
			РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", ОписаниеОшибки);
			
			Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
				ЗаписатьСтрокуВТекстовыйЛог("Ошибка в процедуре ПередОкончаниемСценария().");
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Описание ошибки: %1");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеОшибки);
				ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
			КонецЕсли;	 
			
			ПроверитьФлагОстановкаПриВозникновенииОшибки();
		КонецЕсли;
		
		ДобавитьШагиВРезультатПрохожденияТестовШаговКоторыеНеВыполнялись(Шаги, ТекИД_ШагаВМассиве, РезультатПрохожденияТестовШагов);
		ПрекратитьВыполнениШаговТакКакЗакончилсяСценарий = Истина;
		
		ОстановитьЗаписьВидеоОдногоШага();

		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
		
		Если СтрокаСценария.Статус = "Failed" и Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
			СделатьСкриншотВозникновенияОшибкиИПерейтиКВыполнениюСледующегоСценария(СтрокаШага, СтрокаСценария, РезультатПрохожденияТестовСценария);
		Иначе	
			ПерейтиКВыполнениюСледующегоСценария();
		КонецЕсли;	 
		
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьШаг()
	Если ПрекратитьВыполнениШаговТакКакЗакончилсяСценарий Тогда
		Возврат;
	КонецЕсли; 
	
	ТекИД_ВыполненногоШагаВМассиве = ТекИД_ШагаВМассиве;
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	ТекШаг = Шаги[ТекИД_ШагаВМассиве];
	
	Если Объект.ВыводитьВЛогВыполнениеШагов Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Шаг");
		ЗаписатьЛогВТекстИнформация("" + ТекущаяДата() + ". " + ТекстСообщения," " + ТекШаг.Имя); 
	КонецЕсли;	 
	
	ИДСтрокиШага                       = ТекШаг.СтрокаШага;
	ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
	
	СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	СтрокаШага     = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);
	
	Если СтрокаШага.Брейкпоинт и Не Объект.РежимВыполненияОдногоШага Тогда
		СделатьСообщение("Остановка на брейкпоинте.");
		АктивизироватьСтрокуДереваТекущегоШага();
		ПрекратитьВыполнениеВсехСценариев = Истина;
		ПерейтиКВыполнениюСледующегоСценария();
		Возврат;
	КонецЕсли;	 
	
	
	РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче", СтрокаСценария.НомерСтрокиВФиче);
	
	РезультатПрохожденияШага = Новый Структура;
	РезультатПрохожденияШага.Вставить("Имя", СтрокаШага.Имя);
	РезультатПрохожденияШага.Вставить("ВремяНачала", ТекущаяУниверсальнаяДатаВМиллисекундах());
	РезультатПрохожденияШага.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
	РезультатПрохожденияШага.Вставить("НомерСтрокиВФиче", СтрокаШага.НомерСтрокиВФиче);
	РезультатПрохожденияШага.Вставить("ИДСтроки", ИДСтрокиШага);
	РезультатПрохожденияШага.Вставить("ЭтоШагКонтекста", ТекШаг.ЭтоШагКонтекста);
	
	РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);
	
	Если ПрекратитьВыполнениеДанногоСценария Тогда
		РезультатПрохожденияШага.Вставить("Статус", "Success");
		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
		
		ПрекратитьВыполнениеДанногоСценария = Ложь;
		ПерейтиКВыполнениюСледующегоСценария();
		Возврат;
	КонецЕсли;	 
	
	
	АдресСнипета = ТекШаг.АдресСнипета;
	Если СокрЛП(АдресСнипета) = "" Тогда
		ОстановитьЗаписьВидеоОдногоШага();
		АктивизироватьСтрокуДереваТекущегоШага();
		
		СтрокаШага.Статус = "Pending";
		СтрокаШага.ТипКартинки = 6;
		СтрокаСценария.Статус         = СтрокаШага.Статус;
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Пустой адрес снипета у шага: %1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекШаг.Имя);
		ОписаниеОшибки = ТекстСообщения;
		
		Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Pending: %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеОшибки);
			ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
		КонецЕсли;	 
		
		Если Объект.ПриравниватьPendingКFailed Тогда
			СтатусЗапускаСценариев = Ложь;
			Если Объект.ДелатьЛогОшибокВТекстовыйФайл Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Шаг сценария не реализован.");
				ЗаписатьЛогОшибки(СтрокаСценария,СтрокаШага,ТекстСообщения,Неопределено,ОписаниеОшибки);
			КонецЕсли;	 
		КонецЕсли;	 
		
		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		РезультатПрохожденияШага.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		РезультатПрохожденияШага.Вставить("Статус", СтрокаШага.Статус);
		
		СделатьСообщение(ОписаниеОшибки);
		
		//РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);
		
		БылаОшибка     = Ложь;
		ОписаниеОшибки = "";
		ДействияПослеЗавершенияСценария(СтрокаСценария, БылаОшибка, ОписаниеОшибки);
		Если БылаОшибка Тогда
			СтатусЗапускаСценариев = Ложь;		
			СтрокаСценария.Статус  = "Failed";
			РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", ОписаниеОшибки);
			
			Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Failed: %1");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеОшибки);
				ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
			КонецЕсли;	 
			
			ПроверитьФлагОстановкаПриВозникновенииОшибки();
		КонецЕсли;
		
		
		ПрекратитьВыполнениШаговТакКакЗакончилсяСценарий = Истина;
		
		Если Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
			СделатьСкриншотВозникновенияОшибкиИПерейтиКВыполнениюСледующегоСценария(СтрокаШага, СтрокаСценария, РезультатПрохожденияТестовСценария);
		Иначе	
			//выполняем следующий сценарий
			ПерейтиКВыполнениюСледующегоСценария();
		КонецЕсли;	 
		
		
		Возврат;
	КонецЕсли;	 
	
	//ТаблицаКонтекстовОбработок
	ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
	Если ИД = Неопределено Тогда
		БылиОшибки = Ложь;
		ПодключитьКонтекстОбработкиКлиент(АдресСнипета);	
		ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
	КонецЕсли;	 
	
	ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
	Если ОбработкаТеста = Неопределено Тогда
		Если ЭтоВнутреннийАдресФормы(АдресСнипета) Тогда
			ПодключитьКонтекстОбработкиКлиент(АдресСнипета);
			ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
			Если ОбработкаТеста = Неопределено Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог подключить обработку <%1>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",АдресСнипета);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			ВыполнитьШагПродолжение(РезультатПрохожденияШага,ОбработкаТеста);
			Возврат;
		КонецЕсли;	 
		
		ПодключитьКонтекстОбработкиКлиентАсинхронноИПродолжитьВыполнениеШага(АдресСнипета,РезультатПрохожденияШага);
		Возврат;
	КонецЕсли;	 
	
	ВыполнитьШагПродолжение(РезультатПрохожденияШага,ОбработкаТеста);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущемуШагуФлагЧтоОнДолженСчитатьсяУпавшим(ОписаниеОшибки)
	Если ТекИД_ШагаВМассиве = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если (МассивСценариевДляВыполнения.Количество() - 1) < ТекИД_СценарияВМассиве Тогда
		Возврат;
	КонецЕсли;	 
	
	
	Если ТекИД_ШагаВМассиве >= 0 Тогда
		Шаги   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		ТекШаг = Шаги[ТекИД_ШагаВМассиве];
		ТекШаг.Вставить("ШагСчитаетсяУпавшим", Истина);
		ТекШаг.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	КонецЕсли;	 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТранзакцияАктивнаСервер()
	Возврат ТранзакцияАктивна();
КонецФункции	




//работа с видео - начало

&НаКлиенте
Функция ЗагрузитьФайлВМассив(ИмяФайла)
	Массив = Новый Массив;
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Массив.Добавить(Стр);
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат Массив;
КонецФункции	

&НаКлиенте
Функция ПолучитьПараметрыЗаписиВидео()
	ПараметрыВидео = Новый Структура;
	ПараметрыВидео.Вставить("КаталогOutputИнструкцияВидео", Объект.КаталогOutputИнструкцияВидео);
	ПараметрыВидео.Вставить("ЗаписьВидеоКомандаНачатьЗаписьВидео", Объект.ЗаписьВидеоКомандаНачатьЗаписьВидео);
	ПараметрыВидео.Вставить("ЗаписьВидеоФайлКурсораМышки", Объект.ЗаписьВидеоФайлКурсораМышки);
	ПараметрыВидео.Вставить("ЗаписьВидеоКаталогДляВременныхФайлов", Объект.ЗаписьВидеоКаталогДляВременныхФайлов);
	ПараметрыВидео.Вставить("ЗаписьВидеоФайлВодянойЗнак", Объект.ЗаписьВидеоФайлВодянойЗнак);
	ПараметрыВидео.Вставить("ЗаписьВидеоКомандаFfmpeg", Объект.ЗаписьВидеоКомандаFfmpeg);
	ПараметрыВидео.Вставить("ЗаписьВидеоКомандаConvert", Объект.ЗаписьВидеоКомандаConvert);
	ПараметрыВидео.Вставить("ЗаписьВидеоКаталогМузыки", Объект.ЗаписьВидеоКаталогМузыки);
	ПараметрыВидео.Вставить("ЗаписьВидеоГромкостьМузыки", Объект.ЗаписьВидеоГромкостьМузыки);
	ПараметрыВидео.Вставить("ЗаписьВидеоДелатьНаложениеTTS", Объект.ЗаписьВидеоДелатьНаложениеTTS);
	ПараметрыВидео.Вставить("ЗаписьВидеоПутьКДвижкуTTS", Объект.ЗаписьВидеоПутьКДвижкуTTS);
	ПараметрыВидео.Вставить("ЗаписьВидеоИмяTTS", Объект.ЗаписьВидеоИмяTTS);
	ПараметрыВидео.Вставить("ЗаписьВидеоСловарьЗамен", Объект.ЗаписьВидеоСловарьЗамен);
	ПараметрыВидео.Вставить("ЗаписьВидеоЭкранШирина", Объект.ЗаписьВидеоЭкранШирина);
	ПараметрыВидео.Вставить("ЗаписьВидеоЭкранВысота", Объект.ЗаписьВидеоЭкранВысота);
	ПараметрыВидео.Вставить("ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", Объект.ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм);
	ПараметрыВидео.Вставить("ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", Объект.ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы);
	ПараметрыВидео.Вставить("ЗаписьВидеоГруппаШаговКакШаг", Объект.ЗаписьВидеоГруппаШаговКакШаг);
	ПараметрыВидео.Вставить("ЗаписьВидеоОтключитьМасштабированиеШаговПоВремени", Объект.ЗаписьВидеоОтключитьМасштабированиеШаговПоВремени);
	ПараметрыВидео.Вставить("ЗаписьВидеоПодсвечиватьНажатияМышки", Объект.ЗаписьВидеоПодсвечиватьНажатияМышки);
	ПараметрыВидео.Вставить("ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи", Объект.ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи);
	ПараметрыВидео.Вставить("ЗаписьВидеоОтключитьСлайдСценария", Объект.ЗаписьВидеоОтключитьСлайдСценария);
	ПараметрыВидео.Вставить("ЗаписьВидеоЭмулироватьВводСКлавиатуры", Объект.ЗаписьВидеоЭмулироватьВводСКлавиатуры);
	ПараметрыВидео.Вставить("ЗаписьВидеоСкрытьСлужебныеОкна", Объект.ЗаписьВидеоСкрытьСлужебныеОкна);
	
	
	ПараметрыВидео.Вставить("ЗаписьВидеоКоличествоКадров", Объект.ЗаписьВидеоКоличествоКадров);
	ПараметрыВидео.Вставить("DebugLog", Объект.DebugLog);
	ПараметрыВидео.Вставить("Ванесса", ЭтаФорма);
	ПараметрыВидео.Вставить("КаталогИнструментов", Объект.КаталогИнструментов);
	ПараметрыВидео.Вставить("ЕстьПоддержкаАсинхронныхВызовов", ЕстьПоддержкаАсинхронныхВызовов);
	
	ПараметрыВидео.Вставить("ЭтоИнициализация", Ложь);
	
	
	
	//уменьшим разрешение экрана, если оно указано больше чем реальное
	ИнформацияЭкранаКлиента = Вычислить("ПолучитьИнформациюЭкрановКлиента()[0]");
	Ширина = ИнформацияЭкранаКлиента.Ширина;
	Высота = ИнформацияЭкранаКлиента.Высота;
	Если (Ширина % 2) = 1 Тогда //нечетное
		Ширина = Ширина - 1;
	КонецЕсли;	 
	Если (Высота % 2) = 1 Тогда //нечетное
		Высота = Высота - 1;
	КонецЕсли;	 
	
	Если Ширина < Объект.ЗаписьВидеоЭкранШирина Тогда
		ПараметрыВидео.Вставить("ЗаписьВидеоЭкранШирина", Ширина);
	КонецЕсли;	 
	Если Высота < Объект.ЗаписьВидеоЭкранВысота Тогда
		ПараметрыВидео.Вставить("ЗаписьВидеоЭкранВысота", Высота);
	КонецЕсли;	 
	
	
	Возврат ПараметрыВидео;
КонецФункции	

&НаКлиенте
Процедура ЗавершитьЗаписьВидео()
	Если НЕ Объект.СоздаватьИнструкциюВидео Тогда
		Возврат;
	КонецЕсли;	 
	
	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПараметрыВидео.Вставить("МассивСценариевДляВыполнения", МассивСценариевДляВыполнения);
	ПараметрыВидео.Вставить("МассивСтрокДереваДанныеФормы", МассивСтрокДереваДанныеФормы);
	
	Если СтатусЗапускаСценариев Тогда //если были упавшие шаги, то делать видео не надо
		ПодключитьБиблиотекуРаботыСВидео();
		МодульРаботыСВидео.ЗавершитьЗаписьВидео(ПараметрыВидео);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьЗаписьВидеоОдногоШага()
	Если Не Объект.СоздаватьИнструкциюВидео Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не Объект.ИдетЗаписьВидео Тогда
		Возврат;
	КонецЕсли;	 
	
	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПодключитьБиблиотекуРаботыСВидео();
	МодульРаботыСВидео.ОстановитьЗаписьВидеоОдногоШага(ПараметрыВидео);
	Объект.ИдетЗаписьВидео = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьВидеоОдногоШага(ТекИД_СценарияВМассиве, ТекИД_ШагаВМассиве, ТекШаг)
	Если Не Объект.СоздаватьИнструкциюВидео Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.ИдетЗаписьВидео Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ТекШаг.Свойство("ИгнорироватьШагВАвтоинструкции") Тогда
		Если ТекШаг.ИгнорироватьШагВАвтоинструкции Тогда
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПараметрыВидео.Вставить("ТекИД_СценарияВМассиве", ТекИД_СценарияВМассиве);
	ПараметрыВидео.Вставить("ТекИД_ШагаВМассиве", ТекИД_ШагаВМассиве);
	ПараметрыВидео.Вставить("ТекШаг", ТекШаг);
	
	ПодключитьБиблиотекуРаботыСВидео();
	МодульРаботыСВидео.НачатьЗаписьВидеоОдногоШага(ПараметрыВидео);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодготовкуКЗаписиВидео()
	//проверим разрешение экрана
	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПараметрыВидео.Вставить("ЭтоИнициализация", Истина);
	ПодключитьБиблиотекуРаботыСВидео();
	МодульРаботыСВидео.Инициализация(ПараметрыВидео);
	
	ПараметрыВидео.Вставить("МассивСценариевДляВыполнения", МассивСценариевДляВыполнения);
	
	Если Объект.ЗаписьВидеоПодсвечиватьНажатияМышки Тогда
		Рез = Новый Массив;
		ЗаполнитьМассивPIDПоИмениПроцесса("MouseClickEvent.exe", Рез);
		Если Рез.Количество() = 0 Тогда
			ИмяФайла = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "tools\VideoTools\MouseClickEvent.exe";
			Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не найден файл <%1>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайла);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			КомандаСистемы = ИмяФайла;
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаСистемы,0);
		КонецЕсли;	 
		
	КонецЕсли;	 
КонецПроцедуры

//работа с видео - окончание

&НаКлиенте
Функция ОпределитьВозможнуюСледующуюСтрокуДереваПоЭлементуДерева(ЭлементДерева)
	ТекРодитель          = ЭлементДерева.ПолучитьРодителя();
	Если ТекРодитель = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	ЭлементыРодителя     = ТекРодитель.ПолучитьЭлементы();
	ИдВКоллекцииРодителя = ЭлементыРодителя.Индекс(ЭлементДерева);
	
	Если ЭлементыРодителя.Количество()-1 >= (ИдВКоллекцииРодителя+1) Тогда
		//значит это следующая строка
		Возврат ЭлементыРодителя[ИдВКоллекцииРодителя+1].ПолучитьИдентификатор();
	КонецЕсли;	 
	
	Возврат ОпределитьВозможнуюСледующуюСтрокуДереваПоЭлементуДерева(ТекРодитель);
	
КонецФункции	

&НаКлиенте
Процедура ОпределитьСледующуюСтрокуДереваДляВыполнения(ЭлементыДерево)
	Если Элементы.ДеревоТестов.ТекущиеДанные.ДопТип = "Условие"
		Или Элементы.ДеревоТестов.ТекущиеДанные.ДопТип = "УсловиеИначеЕсли"
		Или  Элементы.ДеревоТестов.ТекущиеДанные.ДопТип = "Цикл"	 Тогда
		Если НЕ Объект.РезультатУсловия Тогда
			Элементы.ДеревоТестов.ТекущаяСтрока = ОпределитьВозможнуюСледующуюСтрокуДереваПоЭлементуДерева(Элементы.ДеревоТестов.ТекущиеДанные);
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТекРодитель = Элементы.ДеревоТестов.ТекущиеДанные.ПолучитьРодителя();
	Если ТекРодитель.ДопТип = "Цикл" Тогда
		ЭлементыРодителя = ТекРодитель.ПолучитьЭлементы();
		ЭлементыСтроки   = Элементы.ДеревоТестов.ТекущиеДанные.ПолучитьЭлементы();
		Если ЭлементыРодителя.Индекс(Элементы.ДеревоТестов.ТекущиеДанные) = ЭлементыРодителя.Количество()-1
		И    ЭлементыСтроки.Количество() = 0 	
		Тогда
			Элементы.ДеревоТестов.ТекущаяСтрока = ТекРодитель.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
			
	Пока Истина Цикл
		ТекНомерСтроки                      = Элементы.ДеревоТестов.ТекущаяСтрока;
		Элементы.ДеревоТестов.ТекущаяСтрока = Элементы.ДеревоТестов.ТекущаяСтрока + 1;
		Если Элементы.ДеревоТестов.ТекущаяСтрока = Неопределено Тогда
			Элементы.ДеревоТестов.ТекущаяСтрока = ТекНомерСтроки;
			Прервать;
		КонецЕсли;	 
		Если Элементы.ДеревоТестов.ТекущиеДанные.СтрокаПараметровШагаВВидеТаблицы = Истина Тогда
			Продолжить;
		ИначеЕсли Элементы.ДеревоТестов.ТекущиеДанные.Тип = "Область" Тогда
			Если НЕ ЗначениеЗаполнено(Элементы.ДеревоТестов.ТекущиеДанные.ДопТип) Тогда
				Продолжить;
			КонецЕсли;	 
			
		ИначеЕсли Элементы.ДеревоТестов.ТекущиеДанные.Тип = "ШагСценарий" Тогда
			Продолжить;
		ИначеЕсли Элементы.ДеревоТестов.ТекущиеДанные.Тип = "Сценарий" Тогда
			Продолжить;
		КонецЕсли;	 
		
		РазвернутьСтрокуДерева(Элементы.ДеревоТестов.ТекущиеДанные);
		
		Прервать;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СделатьСообщениеВсеСценарииОбработаны()
	Если СтатусЗапускаСценариев Тогда
		СделатьСообщение(ПолучитьТекстСообщенияПользователю("Выполнение сценариев закончено. Ошибок не было."));
	Иначе	
		СделатьСообщение(ПолучитьТекстСообщенияПользователю("Выполнение сценариев закончено. БЫЛИ ОШИБКИ."));
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагиВыполненияСценариевОбработчикОжидания()
	ФлагСценарииВыполнены = Истина;
	Если ЗначениеЗаполнено(ФайлФлагВыполненияСценариев) Тогда
		ЗТ = Новый ЗаписьТекста(ФайлФлагВыполненияСценариев,"UTF-8",,Истина); 
		ЗТ.ЗаписатьСтроку(""); 
		ЗТ.Закрыть();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагиВыполненияСценариев()
	ПодключитьОбработчикОжидания("УстановитьФлагиВыполненияСценариевОбработчикОжидания",0.1,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВыполнениюСледующегоСценария()
	
	Если ТекИД_СценарияВМассиве  >= 0 Тогда
		Если Не Объект.РежимВыполненияОдногоШага Тогда
			ВывестиСтатистикуКлиент();
		КонецЕсли;	 
	КонецЕсли;	 
	
	ОстановитьЗаписьВидеоОдногоШага();
	
	Если ПрекратитьВыполнениеВсехСценариев Тогда
		СделатьСообщениеВсеСценарииОбработаны();
		Объект.ИдетВыполнениеСценариев = Ложь;
		ОбновитьСтатусКнопкиВыполнитьСценарии();
		УстановитьФлагиВыполненияСценариев();
		Возврат;
	КонецЕсли;	 
	
	Если Объект.РежимВыполненияОдногоШага Тогда
		Если ТекИД_СценарияВМассиве >= 0 Тогда
			Объект.ИдетВыполнениеСценариев = Ложь;
			ОбновитьСтатусКнопкиВыполнитьСценарии();
			ОпределитьСледующуюСтрокуДереваДляВыполнения(Элементы.ДеревоТестов);
			УстановитьФлагиВыполненияСценариев();
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТекИД_СценарияВМассиве = ТекИД_СценарияВМассиве + 1;
	
	ПодключитьОбработчикОжидания("ВыполнинтьСценарийАссинхронноТаймер", Объект.ИнтервалВыполненияШага, Истина);
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьСтрокуДереваТекущегоШага(ИдСтрокиДерева = Неопределено)
	ИдСтрокиДляАктивации = ИдСтрокиДерева;
	Если ИдСтрокиДляАктивации = Неопределено Тогда
		ИдСтрокиДляАктивации = ТекИД_ШагаВМассиве;
	КонецЕсли;
	
	Если ИдСтрокиДляАктивации = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Если (ТекИД_СценарияВМассиве >= 0) и (ТекИД_СценарияВМассиве <= (МассивСценариевДляВыполнения.Количество()-1)) Тогда
		Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		Если (Шаги.Количество() - 1) >= ИдСтрокиДляАктивации Тогда
			Если Объект.РежимВыполненияОдногоШага Тогда
				СтрокаШага = НайтиСтрокуДереваПоДаннымПоиска(СтруктураПоискаСтрокДерева.ДанныеПоискаСтрокиШага);
				Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаШага.ПолучитьИдентификатор();
			Иначе	
				Если ИдСтрокиДляАктивации >= 0 Тогда
					СтрокаШага = МассивСтрокДереваДанныеФормы[Шаги[ИдСтрокиДляАктивации].СтрокаШага];
					Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаШага.ПолучитьИдентификатор();
				КонецЕсли;	 
			КонецЕсли;	 
			
		КонецЕсли;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВыполнениюСледующегоШага(ВыполнитьШагЧерезТаймер = Неопределено, НадоОбновитьСтатусШага = Ложь, ИдСледующегоШага = Неопределено)
	Если Объект.ОстановитьВыполнениеШагов Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ТекИД_СценарияВМассиве = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ПрекратитьВыполнениеВсехСценариев Тогда
		ПерейтиКВыполнениюСледующегоСценария();
		Возврат;
	КонецЕсли;	 
	
	
	Если (ТекИД_СценарияВМассиве <> Неопределено) и (ТекИД_СценарияВМассиве >= 0) и (ТекИД_ШагаВМассиве >= 0) и (ТекИД_СценарияВМассиве <= (МассивСценариевДляВыполнения.Количество() - 1) ) Тогда
		Шаги   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		ТекШаг = Шаги[ТекИД_ШагаВМассиве];
		
		Если ТекШаг.ШагСчитаетсяУпавшим Тогда
			СтатусЗапускаСценариев = Ложь;
			
			ИДСтрокиШага                       = ТекШаг.СтрокаШага;
			ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
			РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
			РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
			
			СтрокаШага     = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);
			СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
			
			СтрокаШага.Статус      = "Failed";
			СтрокаШага.ТипКартинки = 5;
			СтрокаСценария.Статус  = СтрокаШага.Статус;
			АдресСнипета           = ТекШаг.АдресСнипета;
			ИмяПроцедуры           = ТекШаг.СтрокаРеальнойПроцедуры;
			
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Шаг (%1) не выполнен.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекШаг.Имя ); 
			СделатьСообщение(ТекстСообщения);
			
			Если ЗначениеЗаполнено(ТекШаг.ОписаниеОшибки) Тогда
				ОписаниеОшибки = ТекШаг.ОписаниеОшибки;
			Иначе	
				ОписаниеОшибки = ОписаниеОшибки();
			КонецЕсли;	 
			
			ИнфоОбОшибке = Неопределено;
			ОписаниеОшибки = СформироватьОписаниеОшибки(ОписаниеОшибки, АдресСнипета, ИмяПроцедуры,ИнфоОбОшибке);
			СтрокаСценария.ТекстОшибки = ОписаниеОшибки;
			СтрокаШага.ТекстОшибки     = ОписаниеОшибки;
			
			РезультатПрохожденияШага = РезультатПрохожденияТестовШагов[РезультатПрохожденияТестовШагов.Количество() - 1];
			
			РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
			РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", ОписаниеОшибки);
			РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче", СтрокаСценария.НомерСтрокиВФиче);
			РезультатПрохожденияШага.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
			РезультатПрохожденияШага.Вставить("ОписаниеОшибки", ОписаниеОшибки);
			РезультатПрохожденияШага.Вставить("Статус", СтрокаШага.Статус);
			РезультатПрохожденияШага.Вставить("НомерСтрокиВФиче", СтрокаШага.НомерСтрокиВФиче);
			
			СделатьСообщение(ОписаниеОшибки);
			
			ОписаниеОшибкиШага = ПолучитьТекстСообщенияПользователю("Шаг") + " (" + ТекШаг.Имя + ") " + ПолучитьТекстСообщенияПользователю("не выполнен") +".";
			Если Объект.ДелатьЛогОшибокВТекстовыйФайл Тогда
				ЗаписатьЛогОшибки(СтрокаСценария,СтрокаШага,ОписаниеОшибки,ИнфоОбОшибке,ОписаниеОшибкиШага);
			КонецЕсли;	 
			
			
			Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Failed: %1");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеОшибки);
				ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
			КонецЕсли;	 
			
			БылаОшибка     = Ложь;
			ОписаниеОшибки = "";
			ДействияПослеЗавершенияСценария(СтрокаСценария, БылаОшибка, ОписаниеОшибки);
			
			СтрокаСценария.Статус = "Failed";
			Если БылаОшибка Тогда
				РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", ОписаниеОшибки);
			КонецЕсли;	 
			ПрекратитьВыполнениШаговТакКакЗакончилсяСценарий = Истина;
			
			ОстановитьЗаписьВидеоОдногоШага();
			
			ПроверитьФлагОстановкаПриВозникновенииОшибки();
			
			Если Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
				СделатьСкриншотВозникновенияОшибкиИПерейтиКВыполнениюСледующегоСценария(СтрокаШага, СтрокаСценария, РезультатПрохожденияТестовСценария);
			Иначе	
				ПерейтиКВыполнениюСледующегоСценария();
			КонецЕсли;	 

			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если НадоОбновитьСтатусШага Тогда
		Если ТекИД_ШагаВМассиве >= 0 Тогда
			
			Шаги   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
			ТекШаг = Шаги[ТекИД_ШагаВМассиве];
			
			ИДСтрокиШага                       = ТекШаг.СтрокаШага;
			ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
			РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
			РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
			
			СтрокаШага     = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);
			СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
			
			СтрокаШага.Статус = "Success";
			СтрокаШага.ТипКартинки = 4;
			
			РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче", СтрокаСценария.НомерСтрокиВФиче);
			
			РезультатПрохожденияШага = РезультатПрохожденияТестовШагов[РезультатПрохожденияТестовШагов.Количество() - 1];
			РезультатПрохожденияШага.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
			РезультатПрохожденияШага.Вставить("Статус", СтрокаШага.Статус);
			РезультатПрохожденияШага.Вставить("НомерСтрокиВФиче", СтрокаШага.НомерСтрокиВФиче);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ТекИД_ШагаВМассиве = -1 Тогда
		ТекИД_ШагаВМассиве = ТекИД_ШагаВМассиве + 1;
	ИначеЕсли 	ТекИД_ШагаВМассиве = ТекИД_ВыполненногоШагаВМассиве Тогда // это надо т.к. в определенных случаях таймер, подключающий следующий шаг может не сработать
		ТекИД_ШагаВМассиве = ТекИД_ШагаВМассиве + 1;
	КонецЕсли;	 
	
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	
	Если ИдСледующегоШага <> Неопределено Тогда
		Если ИдСледующегоШага.ИД <> Неопределено Тогда
			//значит явно указано с какого шага надо продолжить
			Если ИдСледующегоШага.ИскатьПоИдСтроки Тогда
				НашлиШаг = Ложь;
				Для Ккк = ТекИД_ШагаВМассиве - 1 По Шаги.Количество() - 1 Цикл
					
					Если ИдСледующегоШага.ИД = Шаги[Ккк].СтрокаШага Тогда
						//нашли нужный ИД
						ТекИД_ШагаВМассиве = Ккк;
						НашлиШаг           = Истина;
						Прервать;
					КонецЕсли;	 
					
					Если ИдСледующегоШага.ИД < Шаги[Ккк].СтрокаШага Тогда
						Прервать;
					КонецЕсли;	 
				КонецЦикла;	
				
				
				Если Не НашлиШаг Тогда
					Пока Истина Цикл
						ТекИД_ШагаВМассиве = ТекИД_ШагаВМассиве - 1;
						Если ТекИД_ШагаВМассиве < 0 Тогда
							Прервать;
						КонецЕсли;	 
						
						Если ИдСледующегоШага.ИД = Шаги[ТекИД_ШагаВМассиве].СтрокаШага Тогда
							//нашли нужный ИД
							НашлиШаг           = Истина;
							Прервать;
						КонецЕсли;	 
					КонецЦикла;	
				КонецЕсли;	 
				
				Если Не НашлиШаг Тогда
					ВызватьИсключение ПолучитьТекстСообщенияПользователю("Не смог определить следующий шаг для выполнения.");
				КонецЕсли;	 
				
			Иначе
				ТекИД_ШагаВМассиве = ИдСледующегоШага.ИД;
			КонецЕсли;	 
		Иначе
			//это значит, что далее некуда переходить
			//поэтому ставим ТекИД_ШагаВМассиве таким, чтобы сработало правило, что выполнены все шаги
			ТекИД_ШагаВМассиве = Шаги.Количество();
		КонецЕсли;	 
	КонецЕсли;	 
		
	
	
	Если (Шаги.Количество() - 1) < ТекИД_ШагаВМассиве Тогда
		//значит все шаги выполнены, запускаем следующий сценарий
		
		ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		СтрокаСценария   = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
		
		БылаОшибка     = Ложь;
		ОписаниеОшибки = "";
		ДействияПослеЗавершенияСценария(СтрокаСценария, БылаОшибка, ОписаниеОшибки);
		
		РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче", СтрокаСценария.НомерСтрокиВФиче);
		ПрекратитьВыполнениШаговТакКакЗакончилсяСценарий = Истина;
		
		Если БылаОшибка Тогда
			СтатусЗапускаСценариев = Ложь;		
			СтрокаСценария.Статус  = "Failed";
			РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", ОписаниеОшибки);
			
			Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Failed: %1");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеОшибки);
				ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
			КонецЕсли;	 
		КонецЕсли;
		
		ОстановитьЗаписьВидеоОдногоШага();
		АктивизироватьСтрокуДереваТекущегоШага(ТекИД_ШагаВМассиве-1);
		
		Если СтрокаСценария.Статус = "Failed" и Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
			СделатьСкриншотВозникновенияОшибкиИПерейтиКВыполнениюСледующегоСценария("ПередОкончаниемСценария", СтрокаСценария, РезультатПрохожденияТестовСценария);
		Иначе	
			ПерейтиКВыполнениюСледующегоСценария();
		КонецЕсли;	 
		
		Возврат;
	КонецЕсли;	 
	
	
	
	
	Если ТекИД_ШагаВМассиве >= 0 Тогда
		//логируем выполненный шаг
		ТекШаг = Шаги[ТекИД_ШагаВМассиве];
		
		
		Если НЕ ТекШаг.ЭтоШагКонтекста Тогда
			//тут надо сделать запись одного шага, плюс записать для каждого шага файл параметров: ИД, строка субтитров, файлTTS если есть
			
			НадоОстановитьЗаписьЭтогоШагаИНачатьСледуюущий = Истина;
			Если ТекШаг.Свойство("ВнутриГруппыКотораяРаботаетКакОдинШаг") Тогда
				Если ТекШаг.ВнутриГруппыКотораяРаботаетКакОдинШаг Тогда
					НадоОстановитьЗаписьЭтогоШагаИНачатьСледуюущий = Ложь;
					
					Если ТекШаг.ПервыйВГруппеШагов Тогда
						НадоОстановитьЗаписьЭтогоШагаИНачатьСледуюущий = Истина;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если НадоОстановитьЗаписьЭтогоШагаИНачатьСледуюущий Тогда
				ОстановитьЗаписьВидеоОдногоШага();
				НачатьЗаписьВидеоОдногоШага(ТекИД_СценарияВМассиве, ТекИД_ШагаВМассиве, ТекШаг);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Объект.ВыполнятьШагиАссинхронно Тогда
		АктивизироватьСтрокуДереваТекущегоШага();
	КонецЕсли;	 
	
	ИнтервалДляВыполненияШага = Объект.ИнтервалВыполненияШага;
	Если Объект.ИдетЗаписьВидео Тогда
		Если ЭтоПрерывающйВидеоШаг(ТекШаг) Тогда
			ИнтервалДляВыполненияШага = 0.1;
		КонецЕсли;	 
		
		Если ТекШаг.ЭтоШагКонтекста Тогда
			ИнтервалДляВыполненияШага = 0.1;
		КонецЕсли;	 
		
		Если МассивTTS <> Неопределено Тогда
			ИнтервалДляВыполненияШага = 0.1;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ОбработкаПрерыванияПользователя();
	
	Если (ВыполнитьШагЧерезТаймер = Истина) Тогда
		ПодключитьОбработчикОжидания("ВыполнитьШаг", ИнтервалДляВыполненияШага, Истина); //вызвываем шаг через таймер, чтобы дать всем формам обновиться
	ИначеЕсли (НЕ Объект.ВыполнятьШагиАссинхронно) и (СчетчикШаговБезТаймера >= МаксСчетчикШаговБезТаймера) Тогда 
		АктивизироватьСтрокуДереваТекущегоШага();
		СчетчикШаговБезТаймера = 1;
		ПодключитьОбработчикОжидания("ВыполнитьШаг", ИнтервалДляВыполненияШага, Истина); //вызвываем шаг через таймер, чтобы дать всем формам обновиться
	ИначеЕсли (НЕ Объект.ВыполнятьШагиАссинхронно) Тогда 
		СчетчикШаговБезТаймера = СчетчикШаговБезТаймера + 1;
		ВыполнитьШаг();//просто вызываем следующий шаг
	Иначе
		ПодключитьОбработчикОжидания("ВыполнитьШаг", ИнтервалДляВыполненияШага, Истина); //вызвываем шаг через таймер, чтобы дать всем формам обновиться
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШагиВРезультатПрохожденияТестовШаговКоторыеНеВыполнялись(Шаги, ТекИД, РезультатПрохожденияТестовШагов)
	Ид = ТекИД;
	Пока Истина Цикл
		Ид = Ид + 1;
		Если Шаги.Количество() < (Ид + 1) Тогда
			Прервать;
		КонецЕсли;	 
		
		ТекШаг = Шаги[Ид];
		
		РезультатПрохожденияШага = Новый Структура;
		РезультатПрохожденияШага.Вставить("Имя", ТекШаг.Имя);
		РезультатПрохожденияШага.Вставить("ВремяНачала", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить("ОписаниеОшибки", "Пропущен");
		РезультатПрохожденияШага.Вставить("Статус", "Skipped");
		РезультатПрохожденияШага.Вставить("ИДСтроки", ТекШаг.СтрокаШага);
		РезультатПрохожденияШага.Вставить("ЭтоШагКонтекста", ТекШаг.ЭтоШагКонтекста);
		
		РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаДерева)
	Если СтрокаДерева.Тип = "Фича" Тогда
		Возврат СтрокаДерева.ПолныйПуть;
	КонецЕсли;	 
	
	Возврат ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаДерева.ПолучитьРодителя());
КонецФункции	

&НаКлиенте
Функция ПолучитьКонтекстТестаПоАдресСнипета(АдресСнипета)
	ИД = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
	Если ИД = Неопределено Тогда
		//Скорее всего это обработка не содержащая в себе тесты.
		Возврат Неопределено;
	Иначе
		ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
		Если ОбработкаТеста = Неопределено Тогда
			ПодключитьКонтекстОбработкиКлиент(АдресСнипета);
			ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат ОбработкаТеста;
КонецФункции	

&НаКлиенте
Процедура ВызватьМетодСценарияЕслиОнЕсть(СтрокаДереваСценария, ИмяПроцедуры, МассивПараметров = Неопределено,
	          БылаОшибка = Ложь, ОписаниеОшибки = Неопределено,СлужебныеДанныеСценария = Неопределено)
			  
			  
	ИмяФичаФайла = Неопределено;
	Если СлужебныеДанныеСценария <> Неопределено Тогда
		СлужебныеДанныеСценария.Свойство("ИмяФичаФайла",ИмяФичаФайла);
	КонецЕсли;	 		  
	
	Если ИмяФичаФайла = Неопределено Тогда
		ИмяФичаФайла = ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаДереваСценария);
		Если ИмяФичаФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	 
	
	Если СлужебныеДанныеСценария <> Неопределено Тогда
		СлужебныеДанныеСценария.Вставить("ИмяФичаФайла",ИмяФичаФайла);
	КонецЕсли;	 
	
	ИДМассивИменКонтекстовОбработок = Неопределено;
	
	Файл         = Новый Файл(ИмяФичаФайла);
	КаталогФичи  = Файл.Путь;
	АдресСнипета = ДополнитьСлешВПуть(КаталогФичи) + ДополнитьСлешВПуть("step_definitions") + Файл.ИмяБезРасширения + ".epf";
	АдресСнипета = УниверсальноеПолноеИмяФайла(АдресСнипета);
	ИДМассивИменКонтекстовОбработок = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));

	Если ИДМассивИменКонтекстовОбработок = Неопределено и Объект.ВерсияПоставки = "single"  Тогда
		Файл = Новый Файл(ИмяФичаФайла); 
		ИмяФормыОбработки  = "Тест_" + Файл.ИмяБезРасширения;
		АдресСнипета = "ВнешняяОбработка.VanessaAutomationsingle.Форма." + ИмяФормыОбработки;
		ИДМассивИменКонтекстовОбработок = МассивИменКонтекстовОбработок.Найти(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина));
	КонецЕсли;	 
	
	Если ИДМассивИменКонтекстовОбработок = Неопределено Тогда //значит у фичи нет своей epf
		Возврат;
	КонецЕсли;	 
	
	ОбработкаТеста = ПолучитьКонтекстТестаПоАдресСнипета(АдресСнипета);
	Если ОбработкаТеста = Неопределено Тогда
		//это возможно, если у фичи вообще нет своей обработки и она использует только шаги из других фич
		Возврат;
	КонецЕсли;  
	
	
	ОбработкаТеста.Контекст            = ОбъектКонтекст;
	ОбработкаТеста.КонтекстСохраняемый = ОбъектКонтекстСохраняемый;
	
	Попытка
		ВызватьМетод(ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
	Исключение
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ошибка в %1. %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПроцедуры);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОписаниеОшибки());
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		БылаОшибка     = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	ОбъектКонтекст            = ОбработкаТеста.Контекст;
	ОбъектКонтекстСохраняемый = ОбработкаТеста.КонтекстСохраняемый;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОтметкуВремениДляИмениФайла()
	ТекДат     = Формат(ТекущаяДата(),"ДФ=yyyyMMdd");
	ТекМилиСек = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Стр = ТекДат + "_" + ТекМилиСек;
	
	Стр = СтрЗаменить(Стр,".","");
	Стр = СтрЗаменить(Стр,",","");
	Стр = СтрЗаменить(Стр,":","");
	Стр = СтрЗаменить(Стр,"/","");
	Стр = СтрЗаменить(Стр,"\","");
	Стр = СтрЗаменить(Стр,Символы.НПП,"");
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Процедура ПодготовитьСозданиеИнструкцииHTML()
	Перем КаталогOutputИнструкцияHTML;
	
	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;	
	
	КаталогOutputИнструкцияHTML = ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputИнструкцияHTML);
	
	//ФайлПроверкаСуществования = Новый Файл(Объект.КаталогOutputИнструкцияHTML);
	//Если НЕ ФайлПроверкаСуществования.Существует() Тогда
	Если НЕ ФайлСуществуетКомандаСистемы(КаталогOutputИнструкцияHTML) Тогда 
		Стр = "Файл КаталогOutputИнструкцияHTML: " + КаталогOutputИнструкцияHTML + " не существует.";
		Сообщить(Стр);
		ВызватьИсключение Стр;
	КонецЕсли;	 
	
	Если Найти(Прав(КаталогOutputИнструкцияHTML, 1), "\/") > 0 Тогда
		КаталогOutputИнструкцияHTML = Сред(КаталогOutputИнструкцияHTML, СтрДлина(КаталогOutputИнструкцияHTML) - 1);
	КонецЕсли;	 
	
	Если МассивСценариевДляВыполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяФичаИнструкцииHTML <> МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИмяФичи Тогда
		Если ТекущаяФичаИнструкцииHTML <> "" Тогда
			СоздатьФайлHTMLИнструкции();
		КонецЕсли;  
		ТекущаяФичаИнструкцииHTML = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИмяФичи;
	Иначе
		Возврат;
	КонецЕсли;  
	
	ИмяФайлаЛогаИнструкцииHTML = СтрЗаменить(ДополнитьСлешВПуть(КаталогOutputИнструкцияHTML) + "InstrHTML_" + ТекущаяФичаИнструкцииHTML + "_" +  ПолучитьОтметкуВремениДляИмениФайла() + "_log.txt", Символы.НПП, "");
	
	ТД = Новый ТекстовыйДокумент;
	ЗаголовокФичи = ПрочитатьЗаголовокФичи(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ПолныйПутьКФиче);
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииHTML, КодировкаТекста.UTF8);
	Для каждого Стр Из ЗаголовокФичи Цикл
		ТД.ЗаписатьСтроку(Стр);
	КонецЦикла;
	ТД.ЗаписатьСтроку("--окончание заголовка--");
	ТД.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьЗаголовокФичи(ИмяФайла)
	Массив = Новый Массив;
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если СокрЛП(Стр) = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Стр = СокрЛП(Стр);
		
		Если Лев(Стр, 1) = "@" Тогда
			Продолжить;
		КонецЕсли;	 
		Если Лев(Стр, 1) = "#" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Найти(НРег(Стр), "сценарий:") > 0 Тогда
			Прервать;
		КонецЕсли;	 
		Если Найти(НРег(Стр), "контекст:") > 0 Тогда
			Прервать;
		КонецЕсли;	 
		Если Найти(НРег(Стр), "scenario:") > 0 Тогда
			Прервать;
		КонецЕсли;	 
		Если Найти(НРег(Стр), "background:") > 0 Тогда
			Прервать;
		КонецЕсли;	 
		
		Массив.Добавить(Стр);
		
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат Массив;
КонецФункции	

&НаКлиенте
Процедура ПодготовитьСозданиеИнструкцииMarkdown()
	Перем КаталогOutputИнструкцияMarkdown;
	
	Если НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;	
	
	КаталогOutputИнструкцияMarkdown = ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputИнструкцияMarkdown);
	
	Если НЕ ФайлСуществуетКомандаСистемы(КаталогOutputИнструкцияMarkdown) Тогда 
		Стр = "Файл КаталогOutputИнструкцияMarkdown: " + КаталогOutputИнструкцияMarkdown + " не существует.";
		Сообщить(Стр);
		ВызватьИсключение Стр;
	КонецЕсли;	 
	
	Если Найти(Прав(КаталогOutputИнструкцияMarkdown, 1), "\/") > 0 Тогда
		КаталогOutputИнструкцияMarkdown = Сред(КаталогOutputИнструкцияMarkdown, СтрДлина(КаталогOutputИнструкцияMarkdown) - 1);
	КонецЕсли;	 
	
	Если МассивСценариевДляВыполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяФичаИнструкцииMarkdown <> МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИмяФичи Тогда
		Если ТекущаяФичаИнструкцииMarkdown <> "" Тогда
			СоздатьФайлMarkdownИнструкции();
		КонецЕсли;  
		ТекущаяФичаИнструкцииMarkdown = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИмяФичи;
	Иначе
		Возврат;
	КонецЕсли;  
	
	ИмяФайлаЛогаИнструкцииMarkdown = СтрЗаменить(ДополнитьСлешВПуть(КаталогOutputИнструкцияMarkdown) + "InstrMarkdown_" + ТекущаяФичаИнструкцииMarkdown + "_" + ПолучитьОтметкуВремениДляИмениФайла() + "_log.txt", Символы.НПП, "");
	
	ЗаголовокФичи = ПрочитатьЗаголовокФичи(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ПолныйПутьКФиче);
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииMarkdown, КодировкаТекста.UTF8);
	Для каждого Стр Из ЗаголовокФичи Цикл
		ТД.ЗаписатьСтроку(Стр);
	КонецЦикла;
	ТД.ЗаписатьСтроку("--окончание заголовка--");
	ТД.Закрыть();
	
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетАллюрСервер(СтруктураОФ)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Дерево = ОбъектСервер.ДеревоТестов;
	
	ОбъектСервер.СформироватьОтчетАллюр(СтруктураОФ);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетjUnitСервер(СтруктураОФ)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ОбъектСервер.СформироватьОтчетjUnit(СтруктураОФ);
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетCucumberJsonСервер(СтруктураОФ)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ОбъектСервер.СформироватьОтчетCucumberJson(СтруктураОФ);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьСтатусВыполненияСценариевВФайл(Статус, ПутьКФайлу)
	Файл = Новый Файл(ПутьКФайлу);
	
	Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
		Если ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя) Тогда
			Если Файл.ЭтоКаталог() Тогда
				СделатьСообщение("Не могу выгрузить статус сценариев, т.к. был передан каталог, а не файл.");
				Возврат;
			КонецЕсли;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	ФайлКаталог = Новый Файл(Файл.Путь);
	Если НЕ ФайлСуществуетКомандаСистемы(ФайлКаталог.ПолноеИмя) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не могу выгрузить статус сценариев, т.к. каталог %1 не существует.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ФайлКаталог.ПолноеИмя); 
		СделатьСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	
	УдалитьФайлыКомандаСистемы(ПутьКФайлу);
	
	ЗТ = Новый ЗаписьТекста(ПутьКФайлу, "UTF-8", , Ложь); 
	Если Статус Тогда
		Стр = "0";
	Иначе	
		Если ВозниклаОшибкаВШагеКонтекста или ВозниклаОшибкаПодключенияTestClient 
		Или ВозниклаОшибкаОшибкаСетевогоВзаимодействия Тогда
			Стр = "2";
		Иначе
			Стр = "1";
		КонецЕсли;	 
	КонецЕсли;	 
	
	ЗТ.Записать(Стр); 
	
	ЗТ.Закрыть();
	
	ТекстСообщения = ПолучитьТекстСообщенияПользователю("Записал файл статуса билда: %1");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПутьКФайлу); 
	СделатьСообщение(ТекстСообщения);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьTestClientЕслиОнПодключен()
	Попытка
		ОбъектКонтекстСохраняемый.ГлавноеОкноТестируемого.Закрыть();
	Исключение
		
	КонецПопытки;
КонецПроцедуры


&НаКлиенте
Функция ПолучитьИмяФичиИзПолногоПути(Знач Стр)
	Длина = СтрДлина(Стр);
	Поз   = Длина + 1;
	
	Для Ккк = 1 По Длина Цикл
		Символ = Сред(Стр, Длина - Ккк + 1, 1);
		Если Символ = ":" Тогда
			Поз = Длина - Ккк + 1;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	НовСтр = Лев(Стр, Поз - 1);
	
	Возврат СокрЛП(НовСтр);
КонецФункции	

&НаКлиенте
Функция ДобавитьНулей(Парам,КоличествоСимволов)
	Стр = СтрЗаменить(Строка(Парам),Символы.НПП,"");
	
	Пока СтрДлина(Стр) < КоличествоСимволов Цикл
		Стр = "0" + Стр;
	КонецЦикла;	
	
	Возврат Стр;
КонецФункции

&НаКлиенте
Функция НайтиМакетВКаталогеПроектаСлужебный(ИмяМакета,ИмяФайла)
	Нашли = Ложь;
	
	СостояниеVanessaBehavior = ПолучитьСостояниеVanessaBehavior();
	ИдСценария               = СостояниеVanessaBehavior.ТекущийСценарий.ИдСценария;
	
	КаталогСценария = ДобавитьНулей(ИдСценария+1,4);
	ДопКаталог      = "";
	Если ФайлСуществуетКомандаСистемы(Объект.КаталогПроекта + "\Файлы\" + КаталогСценария) Тогда
		ДопКаталог = КаталогСценария;
	КонецЕсли;	 
	
	Если Не Нашли Тогда
		ИмяФайла = Объект.КаталогПроекта + "\Файлы\" + ?(ДопКаталог = "","",ДопКаталог + "\") + ИмяМакета;
		Если Прав(НРег(ИмяФайла),4) <> ".mxl" Тогда
			ИмяФайла = ИмяФайла + ".mxl";
		КонецЕсли;	 
		Если ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
			Нашли = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Не Нашли Тогда
		ИмяФайла = Объект.КаталогПроекта + "\" + ИмяМакета;
		Если Прав(НРег(ИмяФайла),4) <> ".mxl" Тогда
			ИмяФайла = ИмяФайла + ".mxl";
		КонецЕсли;	 
		Если ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
			Нашли = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Нашли;
КонецФункции	 

&НаСервереБезКонтекста
Функция ПолучитьТабличныйДокументНаСервере(АдресВременногоХранилища)
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ИмяВременногоФайла);
	УдалитьФайлы(ИмяВременногоФайла);
	Возврат ТабличныйДокумент;
КонецФункции

&НаКлиенте
Функция ПолучитьОбработкаСвязаннаяСИсполняемойФичей(ИмяФайлаФичи)
	ФайлФичи  = Новый Файл(ИмяФайлаФичи);
	ФайлEPF   = ФайлФичи.Путь + "step_definitions" + ?(ЭтоLinux, "/", "\") + ФайлФичи.ИмяБезРасширения + ".epf";
	ФайлEPF   = УниверсальноеПолноеИмяФайла(ФайлEPF);
	ИД        = МассивИменКонтекстовОбработок.Найти(Нрег(ФайлEPF));
	Обработка = ТаблицаКонтекстовОбработок[ИД].Обработка;
	
	Если Обработка = Неопределено Тогда
		ПодключитьКонтекстОбработкиКлиент(ФайлEPF);
		Обработка = ТаблицаКонтекстовОбработок[ИД].Обработка;
	КонецЕсли;	 
	
	Возврат Обработка;
КонецФункции

&НаКлиенте
Процедура ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(СтрокаСценария,ИД,ОбновитьБезПроверки = Ложь)
	Если ОбновитьБезПроверки или СтрокаСценария.ПолучитьРодителя() = Неопределено Тогда
		//значит надо обновить кеш строк дерева
		МассивСтрокДереваДанныеФормы.Очистить();
		Если Не Объект.РежимВыполненияОдногоШага Тогда
			ЗапомнитьСтрокиДереваДанныеФормы();
			СтрокаСценария = МассивСтрокДереваДанныеФормы[ИД];
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокуДереваПоДаннымПоиска(ДанныеПоиска)
	ТекИдМассива   = -1;
	ЭлементыДерева = Объект.ДеревоТестов.ПолучитьЭлементы();
	НужныйЭлемент  = Неопределено;
	Пока Истина Цикл
		ТекИдМассива   = ТекИдМассива + 1;
		
		Если ТекИдМассива > (ДанныеПоиска.Количество()-1) Тогда
			Прервать;
		КонецЕсли;	 
		
		НужныйИдСтроки = ДанныеПоиска[ТекИдМассива]; 
		
		Нашли = Ложь;
		Для Каждого Элем Из ЭлементыДерева Цикл
			Если Элем.ИдСтроки = НужныйИдСтроки Тогда
				НужныйЭлемент  = Элем;
				ЭлементыДерева = Элем.ПолучитьЭлементы();
				Нашли          = Истина;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	
		
		Если Не Нашли Тогда
			ВызватьИсключение ПолучитьТекстСообщенияПользователю("Не найден элемент дерева по данным поиска");
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат НужныйЭлемент;
КонецФункции	

&НаКлиенте
Функция ПолучитьСтрокуСценарияИзДанныхФормы(ИД)
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат НайтиСтрокуДереваПоДаннымПоиска(СтруктураПоискаСтрокДерева.ДанныеПоискаСтрокиСценария);
	КонецЕсли;	 
	
	Возврат МассивСтрокДереваДанныеФормы[ИД];
КонецФункции	

&НаКлиенте
Функция ПолучитьСтрокуШагаИзДанныхФормы(ИД)
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат НайтиСтрокуДереваПоДаннымПоиска(СтруктураПоискаСтрокДерева.ДанныеПоискаСтрокиШага);
	КонецЕсли;	 
	
	Возврат МассивСтрокДереваДанныеФормы[ИД];
КонецФункции	

&НаКлиенте
Процедура ВыполнинтьСценарийАссинхронноТаймер()
	Объект.ИнтервалВыполненияШага = Объект.ИнтервалВыполненияШагаЗаданныйПользователем;
	ЭтаФорма.ТекущийЭлемент = Элементы.ГруппаЗапускТестов;
	
	Если ТекИД_СценарияВМассиве > 0 Тогда
		ОбработатьСтатусСценария(ТекИД_СценарияВМассиве - 1);
	КонецЕсли;
	
	ПрекратитьВыполнениШаговТакКакЗакончилсяСценарий = Ложь;
	Если НЕ Объект.РежимВыполненияОдногоШага Тогда
		ЗафиксированнаяФормаTestClient = Неопределено;
	КонецЕсли;	  
	ГлобальныеЗначенияТаблиц = Новый Структура;
	
	//сбросим возможные кеши TestClient
	ОчиститьКешАктивнойТаблицыTestClient();
	ЗафиксироватьФормуTestClient(Неопределено);
	
	Если (МассивСценариевДляВыполнения.Количество() - 1) < ТекИД_СценарияВМассиве Тогда
		//значит все сценарии выполнены
		
		Если МассивСценариевДляВыполнения.Количество() = 0 Тогда
			//Значит не было сценариев для выполнения.
			СтатусЗапускаСценариев = Ложь;
		КонецЕсли;	 
		
		Объект.ИдетВыполнениеСценариев = Ложь;
		ОбновитьСтатусКнопкиВыполнитьСценарии();
		
        ПутьКОбработке = ПолучитьПутьКОбработкеКлиент();
		СоздатьФайлHTMLИнструкции();
		СоздатьФайлMarkdownИнструкции();
		ЗавершитьЗаписьВидео();
		ОстановитьSikuliXСервер();
		
		СделатьСообщениеВсеСценарииОбработаны();
		Если Объект.ДелатьОтчетВФорматеАллюр Тогда
			СтруктураОФ = Новый Структура;
			СтруктураОФ.Вставить("МассивРезультатПрохожденияТестовСценария", МассивРезультатПрохожденияТестовСценария);
			СтруктураОФ.Вставить("МассивИДСтрокиДерева", МассивИДСтрокиДерева);
			
			
			Если Объект.ВерсияПоставки = "single" Тогда
				ДвоичныеДанные = Неопределено;
			Иначе	
				ДвоичныеДанные = Новый ДвоичныеДанные(Объект.КаталогИнструментов + "/vendor/allure-framework/allure.xsd");
			КонецЕсли;	 
			СтруктураОФ.Вставить("СхемаAllure", ДвоичныеДанные);
			СтруктураОФ.Вставить("ЕстьПоддержкаАсинхронныхВызовов", ЕстьПоддержкаАсинхронныхВызовов);
			
			СформироватьОтчетАллюрСервер(СтруктураОФ);
			
			Если Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
				Для каждого РезультатПрохожденияТестовСценария Из МассивРезультатПрохожденияТестовСценария Цикл
					Если Не РезультатПрохожденияТестовСценария.Свойство("МассивСкриншотов") Тогда
						Продолжить;
					КонецЕсли;	 
					
					Для каждого СтруктураСкриншот Из РезультатПрохожденияТестовСценария.МассивСкриншотов Цикл
						ВременныйФайл = ПолучитьИмяВременногоФайла("png");
						СтруктураСкриншот.ДвоичныеДанные.Записать(ВременныйФайл);
						КопироватьФайлКомандаСистемы(ВременныйФайл, ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputAllure)) + СтруктураСкриншот.ИмяФайла);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;	 
			
			Если СтруктураОФ.Свойство("МассивXMLОтчетаAllure") Тогда 
				МассивXMLОтчетаAllure = СтруктураОФ.МассивXMLОтчетаAllure;
				Для каждого Элем Из МассивXMLОтчетаAllure Цикл
					ИмяФайлаXML           = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputAllure)) + Элем.РеальноеИмяФайла;
					ФайлXMLДвоичныеДанные = Элем.ФайлXMLДвоичныеДанные;
					ФайлXMLДвоичныеДанные.Записать(ИмяФайлаXML);
					
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("Файл отчета Allure-report (%1) записан.");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайлаXML); 
					СделатьСообщение(ТекстСообщения);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; 	
		
		Если Объект.ДелатьОтчетВФорматеjUnit Тогда
			СтруктураОФ = Новый Структура;
			СтруктураОФ.Вставить("МассивРезультатПрохожденияТестовСценария", МассивРезультатПрохожденияТестовСценария);
			СтруктураОФ.Вставить("МассивИДСтрокиДерева", МассивИДСтрокиДерева);
			СтруктураОФ.Вставить("ЕстьПоддержкаАсинхронныхВызовов", ЕстьПоддержкаАсинхронныхВызовов);
			СтруктураОФ.Вставить("ЭтоОФ", Ложь);
			
			
			СформироватьОтчетjUnitСервер(СтруктураОФ);
			
			Если Объект.ДобавлятьКИмениСценарияУсловияВыгрузки Тогда
				ИмяСборки             = Объект.ИмяТекущейСборки;
				ИмяСборки             = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяСборки);
				ИмяФайлаXML           = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputjUnit)) + ИмяСборки + "-junit.xml";
			Иначе	
				ИмяФайлаXML           = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputjUnit)) + "junit.xml";
			КонецЕсли;	 
			
			СтруктураОФ.xml.Записать(ИмяФайлаXML);
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Файл отчета jUnit-report (%1) записан.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайлаXML); 
			СделатьСообщение(ТекстСообщения);
		КонецЕсли; 
		
		
		Если Объект.ДелатьОтчетВФорматеCucumberJson Тогда
			СтруктураОФ = Новый Структура;
			СтруктураОФ.Вставить("МассивРезультатПрохожденияТестовСценария", МассивРезультатПрохожденияТестовСценария);
			СтруктураОФ.Вставить("МассивИДСтрокиДерева", МассивИДСтрокиДерева);
			СтруктураОФ.Вставить("ЕстьПоддержкаАсинхронныхВызовов", ЕстьПоддержкаАсинхронныхВызовов);
			СтруктураОФ.Вставить("ЭтоОФ", Ложь);
			
			
			СформироватьОтчетCucumberJsonСервер(СтруктураОФ);
			
			Если Объект.ДобавлятьКИмениСценарияУсловияВыгрузки Тогда
				ИмяСборки             = Объект.ИмяТекущейСборки;
				ИмяСборки             = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяСборки);
				ИмяФайлаJson          = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputCucumberJson)) + ИмяСборки + "-CucumberJson.json";
			Иначе	
				ИмяФайлаJson          = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputCucumberJson)) + "CucumberJson.json";
			КонецЕсли;	 
			
			СтруктураОФ.json.Записать(ИмяФайлаJson);
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Файл отчета CucumberJson-report (%1) записан.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайлаJson); 
			СделатьСообщение(ТекстСообщения);
		КонецЕсли; 
		
		
		Если Объект.ДелатьОтчетВоВнутреннемФормате Тогда
			//Сформируем отчет для показа пользователю. 
			СтруктураОФ = Новый Структура;
			СтруктураОФ.Вставить("МассивРезультатПрохожденияТестовСценария", МассивРезультатПрохожденияТестовСценария);
			СтруктураОФ.Вставить("МассивИДСтрокиДерева", МассивИДСтрокиДерева);
			
			Если НЕ Объект.ЗапускИзКоманднойСтроки Тогда
				ТабличныйДокумент = СформироватьОтчетВоВнутреннемФормате(СтруктураОФ);
				ТабличныйДокумент.Показать();
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если Объект.ВыгружатьСтатусВыполненияСценариевВФайл Тогда
			ВыгрузитьСтатусВыполненияСценариевВФайл(СтатусЗапускаСценариев, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев));
		КонецЕсли;	 
		
		Если Объект.ЗакрытьTestClientПослеЗапускаСценариев Тогда
			// закроем все TestClient которые были запущены
			Для каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
				Попытка
					Шаг("И я закрываю TestClient """ + СтрокаДанныеКлиентовТестирования.Имя + """");
				Исключение
					//если не получилось закрыть TestClient, это ещё не означает, что есть ошибка
					//возможно он был закрыт штатно в сценарии
					СделатьСообщение(ОписаниеОшибки());
				КонецПопытки;
			КонецЦикла;			
			
		КонецЕсли;	 
		
		
		Если Объект.НадоЗавершитьРаботуСистемыПослеВыполненияВсехСценариев Тогда
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;	 
		
		УстановитьФлагиВыполненияСценариев();

		Возврат;
	КонецЕсли;	 
	
	Если  (ОбъектКонтекст = Неопределено) Тогда
		ОбъектКонтекст = Новый Структура;
	ИначеЕсли НЕ Объект.РежимВыполненияОдногоШага И НЕ Объект.РежимВыполненияДанногоСценарияСТекущегоШага И НЕ Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением Тогда
		ОбъектКонтекст = Новый Структура;
	КонецЕсли;	 
	
	
	ПодготовитьСозданиеИнструкцииHTML();
	ПодготовитьСозданиеИнструкцииMarkdown();
	
	
	
	ИДСтроки = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	
	РезультатПрохожденияТестовСценария = Новый Структура;
	РезультатПрохожденияТестовСценария.Вставить("ИДСтроки", ИДСтроки);
	РезультатПрохожденияТестовСценария.Вставить("ВремяНачала", ТекущаяУниверсальнаяДатаВМиллисекундах());
	РезультатПрохожденияТестовШагов = Новый Массив;
	РезультатПрохожденияТестовСценария.Вставить("РезультатПрохожденияТестовШагов", РезультатПрохожденияТестовШагов);
	
	ДобавитьРезультатПрохожденияТестовСценарияВМассив(РезультатПрохожденияТестовСценария, ИДСтроки);
	
	ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	
	СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	
	ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(СтрокаСценария, ИДСтрокиСценария);
		
	
	Если Не Объект.РежимВыполненияОдногоШага Тогда
		Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаСценария.ПолучитьИдентификатор();
	КонецЕсли;	 
	
	РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче", СтрокаСценария.НомерСтрокиВФиче);
	
	ОбработкаСвязаннаяСИсполняемойФичей = Неопределено;
	Если СтрокаСценария.ФичаИмеетСвоюEPF Тогда
		СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаСценария);
		ОбработкаСвязаннаяСИсполняемойФичей = ПолучитьОбработкаСвязаннаяСИсполняемойФичей(СтрокаФичи.ПолныйПуть);
	КонецЕсли; 
	
	
	
	
	
	Если НЕ Объект.РежимВыполненияОдногоШага Тогда
		Сообщить(ПолучитьТекстСообщенияПользователю(" "));
		СделатьСообщение(ПолучитьТекстСообщенияПользователю("Работаю по сценарию") + ": " + МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Имя);
	КонецЕсли;	 
	
	Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
		ЗаписатьЛогВЖРПередВыполнениемСценария(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Имя);
	КонецЕсли;	 
	
	ИмяФичаФайла = ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаСценария);
	Если НЕ СравнитьПутиФайлов(ТекущийИсполняемыйФичаФайл,ИмяФичаФайла) Тогда
		ТекущийИсполняемыйФичаФайл = ИмяФичаФайла;
		Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Фича: %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекущийИсполняемыйФичаФайл);
			ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
			Если МассивСценариевДляВыполнения.Количество() > 0 Тогда
				Процент=Цел(ТекИД_СценарияВМассиве/МассивСценариевДляВыполнения.Количество() * 100);
				ТекстСообщения = Формат(Процент,"ЧЦ=3; ЧДЦ=0; ЧН=") + "% "; 
				ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
			КонецЕсли;

		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
		ЗаписатьЛогВТекстПередВыполнениемСценария(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Имя);
	КонецЕсли;	 
	
	
	ДобавитьВЛогИнструкцииHTMLНачалоСценария(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве]);
	ДобавитьВЛогИнструкцииMarkdownНачалоСценария(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве]);
	
	
	ТекИД_ШагаВМассиве             = -1;
	ТекИД_ВыполненногоШагаВМассиве = -1;
	ВсёЕщёИдётВыполнениеШагов      = 0;
	
	Если ТекИД_СценарияВМассиве = 0 Тогда
		Если Объект.РежимВыполненияДанногоСценарияСТекущегоШага или Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением Тогда
			Ном = -1;
			Для Каждого Шаг Из МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги Цикл
				Ном = Ном + 1;
				Если Шаг.СтрокаШага = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага Тогда
					ТекИД_ШагаВМассиве = Ном;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
			//тогда надо начать не с первого шага, а с нужного
		КонецЕсли;	 
	КонецЕсли;	 
	
	БылаОшибка = Ложь;
	ОписаниеОшибки = "";
	Если  НЕ Объект.РежимВыполненияОдногоШага
		И НЕ Объект.РежимВыполненияДанногоСценарияСТекущегоШага
		И НЕ Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением
		Тогда 
		//если надо выполнить ПередНачаломСценария и при этом сделать отладку по шагам - надо поставить брейкпоинт на первом шаге сценарияя
		СлужебныеДанныеСценария = Новый Структура;
		ВызватьМетодСценарияЕслиОнЕсть(СтрокаСценария, "ПередНачаломСценария", , БылаОшибка, ОписаниеОшибки,СлужебныеДанныеСценария);
	КонецЕсли;	 
	Если БылаОшибка Тогда
		СтатусЗапускаСценариев = Ложь;		
		
		ИДСтрокиСценария      = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		СтрокаСценария        = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
		СтрокаСценария.Статус = "Failed";
		
		ДействияПослеЗавершенияСценария(СтрокаСценария,,,СлужебныеДанныеСценария);
		РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		ПрекратитьВыполнениШаговТакКакЗакончилсяСценарий = Истина;
		
		Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
			ЗаписатьСтрокуВТекстовыйЛог("");
			ЗаписатьСтрокуВТекстовыйЛог("Ошибка в процедуре ПередНачаломСценария()."); 
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Failed: %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеОшибки);
			ЗаписатьСтрокуВТекстовыйЛог(ТекстСообщения);
		КонецЕсли;	 
		
		РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче", СтрокаСценария.НомерСтрокиВФиче);
		
		ОстановитьЗаписьВидеоОдногоШага();
		
		Если Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
			СделатьСкриншотВозникновенияОшибкиИПерейтиКВыполнениюСледующегоСценария("ПередНачаломСценария", СтрокаСценария, РезультатПрохожденияТестовСценария);
		Иначе	
			ПерейтиКВыполнениюСледующегоСценария();
		КонецЕсли;	 
		Возврат;
	КонецЕсли;	 
	
	АктивизироватьСтрокуДереваТекущегоШага();
	ПерейтиКВыполнениюСледующегоШага();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВЛогИнструкцииHTMLНачалоСценария(СтруктураСценария)
	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;  
	
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииHTML, КодировкаТекста.UTF8, , Истина);
	
	ТД.ЗаписатьСтроку("НачалоСценария");
	ТД.ЗаписатьСтроку("ИмяСценария=" + СтруктураСценария.Имя);
	ТД.ЗаписатьСтроку("ИдСценария=" + XMLСтрока(ТекИД_СценарияВМассиве));
	ТД.ЗаписатьСтроку("ИмяФичи=" + СтруктураСценария.ИмяФичи);
	ТД.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВЛогИнструкцииMarkdownНачалоСценария(СтруктураСценария)
	Если НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;  
	
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииMarkdown, КодировкаТекста.UTF8, , Истина);
	
	ТД.ЗаписатьСтроку("НачалоСценария");
	ТД.ЗаписатьСтроку("ИмяСценария=" + СтруктураСценария.Имя);
	ТД.ЗаписатьСтроку("ИдСценария=" + XMLСтрока(ТекИД_СценарияВМассиве));
	ТД.ЗаписатьСтроку("ИмяФичи=" + СтруктураСценария.ИмяФичи);
	ТД.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРезультатПрохожденияТестовСценарияВМассив(РезультатПрохожденияТестовСценария, ИДСтроки)
	ИД = МассивИДСтрокиДерева.Найти(ИДСтроки);
	Если ИД = Неопределено Тогда
		МассивИДСтрокиДерева.Добавить(ИДСтроки);
		МассивРезультатПрохожденияТестовСценария.Добавить(РезультатПрохожденияТестовСценария);
	Иначе
		МассивРезультатПрохожденияТестовСценария[ИД] = РезультатПрохожденияТестовСценария;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьСтрокиДереваДанныеФормыРекурсивно(ДеревоФормы)
	Для каждого ЭлементДерева Из ДеревоФормы Цикл
		ИДСтроки = ЭлементДерева.ИДСтроки;
		Пока МассивСтрокДереваДанныеФормы.Количество()-1 < ИДСтроки Цикл
			МассивСтрокДереваДанныеФормы.Добавить();
		КонецЦикла;	 
		МассивСтрокДереваДанныеФормы[ИДСтроки] = ЭлементДерева;
		
		ЗапомнитьСтрокиДереваДанныеФормыРекурсивно(ЭлементДерева.ПолучитьЭлементы());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьСтрокиДереваДанныеФормы()
	Если Объект.РежимВыполненияОдногоШага Тогда
		//поиск строки дерева будет происходить по специальной таблице, которая была создана заранее
		Возврат;
	КонецЕсли;	 
	
	ДеревоФормы = Объект.ДеревоТестов.ПолучитьЭлементы();
	ЗапомнитьСтрокиДереваДанныеФормыРекурсивно(ДеревоФормы);
КонецПроцедуры

&НаСервере
Функция ОпределитьИдСценарияПоСтрокеШага(ИдСтроки, ЭтоПример, ЭтоКонтекст)
	Если ИдСтроки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	
	Дерево = ОбъектСервер.ДеревоТестов;
	
	СтрокаДерева = Дерево.Строки.Найти(ИдСтроки, "ИдСтроки", Истина);
	Если СтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ТекРодитель = СтрокаДерева.Родитель;
	Пока Истина Цикл
		Если ТекРодитель.ДопТип = "Контекст" Тогда
			ЭтоКонтекст = Истина;
			Прервать;
		КонецЕсли;	 
		
		Если ТекРодитель.Тип = "Сценарий" Тогда
			Прервать;
		КонецЕсли;	 
		
		Если ТекРодитель.Тип = "Пример" Тогда
			ЭтоПример = Истина;
			Прервать;
		КонецЕсли;	 
		
		ТекРодитель = ТекРодитель.Родитель;
	КонецЦикла;	
		
	
	Возврат ТекРодитель.ИДСтроки;
КонецФункции	

&НаКлиенте
Функция ОпределитьИдСценарияПоСтрокеШагаКлиент(СтрокаДерева, ЭтоПример, ЭтоКонтекст)
	Если СтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	
	ТекРодитель = СтрокаДерева;
	
	Пока Истина Цикл
		Если ТекРодитель = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	 
		
		Если ТекРодитель.ДопТип = "Контекст" Тогда
			ЭтоКонтекст = Истина;
			Прервать;
		КонецЕсли;	 
		
		Если ТекРодитель.Тип = "Сценарий" Тогда
			Прервать;
		КонецЕсли;	 
		
		Если ТекРодитель.Тип = "Пример" Тогда
			ЭтоПример = Истина;
			Прервать;
		КонецЕсли;	 
		
		ТекРодитель = ТекРодитель.ПолучитьРодителя();
	КонецЦикла;	
		
	
	Возврат ТекРодитель.ИДСтроки;
КонецФункции	

&НаКлиенте
Процедура ПолучитьМассивСценариевДаннойФичи(Дерево, Массив)
	Для Каждого СтрокаДерева Из Дерево.ПолучитьЭлементы() Цикл
		Если СтрокаДерева.Тип = "Сценарий" Тогда
			Массив.Добавить(СтрокаДерева.ИДСтроки);
		КонецЕсли;	 
			
		ПолучитьМассивСценариевДаннойФичи(СтрокаДерева, Массив);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьФичу()
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Ложь;
	
	СтрокаФичи = Элементы.ДеревоТестов.ТекущиеДанные;
	Если СтрокаФичи = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	
	СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаФичи);
	Если СтрокаФичи = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	
	Массив     = Новый Массив;
	ПолучитьМассивСценариевДаннойФичи(СтрокаФичи, Массив);
	
	ВыполнитьСценарии(Массив);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусКнопкиВыполнитьСценарии()
	Если Объект.ИдетВыполнениеСценариев Тогда
		Элементы.кнВыполнитьСценарии.Заголовок = "STOP";
	Иначе
		Элементы.кнВыполнитьСценарии.Заголовок = НСтр("en='Run scenario';ru='Выполнить сценарии';vi='Thực hiện kịch bản'");
	КонецЕсли;	 
КонецПроцедуры

&НаСервере
Функция НайтиПервыйСценарийВДереве()
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Дерево       = ОбъектСервер.ДеревоТестов;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип", "Сценарий");
	
	МассивСтрокДерева = Дерево.Строки.НайтиСтроки(Отбор, Истина);
	Для Каждого СтрокаДерева Из МассивСтрокДерева Цикл
		Если СтрокаДерева.ДопТип = "Контекст" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Возврат СтрокаДерева.ИдСтроки;
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Функция СоздатьДанныеДляПоискаСтрокиШага(СтрокаДерева)
	Массив = Новый Массив;
	
	ТекРодитель = СтрокаДерева;
	Пока ТекРодитель <> Неопределено Цикл
		Массив.Вставить(0,ТекРодитель.ИдСтроки);
		ТекРодитель = ТекРодитель.ПолучитьРодителя();
	КонецЦикла;	
	
	Возврат Массив;
КонецФункции	

&НаКлиенте
Процедура СоздатьСтруктуруПоискаДляСтрокиДерева(СтрокаДерева)
	СтруктураПоискаСтрокДерева = Новый Структура;
	СтруктураПоискаСтрокДерева.Вставить("ДанныеПоискаСтрокиШага",СоздатьДанныеДляПоискаСтрокиШага(СтрокаДерева));
	
	ЭтоПример       = Ложь;
	ЭтоШагКонтекста = Ложь;
	СтрокаСценария = НайтиСтрокуСценарияЧерезРодителя(СтрокаДерева,ЭтоПример,ЭтоШагКонтекста);
	СтруктураПоискаСтрокДерева.Вставить("ДанныеПоискаСтрокиСценария",СоздатьДанныеДляПоискаСтрокиШага(СтрокаСценария));
	
	СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаСценария);
	
	ДанныеСценария = Новый Структура;
	ДанныеСценария.Вставить("Имя",СтрокаСценария.Имя);
	ДанныеСценария.Вставить("СтрокаДерева",СтрокаСценария.ИдСтроки);
	ДанныеСценария.Вставить("ИмяФичи",СтрокаФичи.Имя);
	ДанныеСценария.Вставить("ПолныйПутьКФиче",СтрокаФичи.ПолныйПуть);
	
	
	Шаги = Новый Массив;
	СтруктураШага = ПолучитьСтруктуруШагаКлиент(СтрокаДерева,СтрокаСценария,СтрокаСценария,ЭтоШагКонтекста);
	Шаги.Добавить(СтруктураШага);
	ДанныеСценария.Вставить("Шаги",Шаги);
	
	СтруктураПоискаСтрокДерева.Вставить("ДанныеСценария",ДанныеСценария);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМассивСценариевДляВыполненияКлиент(МассивСценариевДляВыполнения)
	СтруктураСценария = Новый Структура;
	СтруктураСценария.Вставить("Имя",СтруктураПоискаСтрокДерева.ДанныеСценария.Имя);
	СтруктураСценария.Вставить("СтрокаДерева",СтруктураПоискаСтрокДерева.ДанныеСценария.СтрокаДерева);
	СтруктураСценария.Вставить("ИмяФичи",СтруктураПоискаСтрокДерева.ДанныеСценария.ИмяФичи);
	СтруктураСценария.Вставить("ПолныйПутьКФиче",СтруктураПоискаСтрокДерева.ДанныеСценария.ПолныйПутьКФиче);
	СтруктураСценария.Вставить("Шаги",СтруктураПоискаСтрокДерева.ДанныеСценария.Шаги);
	
	МассивСценариевДляВыполнения.Добавить(СтруктураСценария);
КонецПроцедуры

&НаКлиенте
Функция ЭтуСтрокуМожноИсполнить(СтрокаДерева)
	Если СтрокаДерева.Тип = "Шаг" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Если СтрокаДерева.Тип = "Область" Тогда
		Если ЗначениеЗаполнено(СтрокаДерева.ДопТип) Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	

&НаКлиенте
Функция ЭтуСтрокуМожноИсполнитьИлиВНейЕстьПодчиненныеИсполняемыеСтроки(СтрокаДерева)
	Если СтрокаДерева.Тип = "Сценарий" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Если СтрокаДерева.Тип = "Шаг" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Если СтрокаДерева.Тип = "Область" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Если СтрокаДерева.Тип = "ШагСценарий" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	

&НаКлиенте
Функция ОпределитьИдИсполняемойСтрокиДерева(СтрокаДерева,НужнаяСтрока)
	ТекСтрока = СтрокаДерева;
	
	Если ЭтуСтрокуМожноИсполнить(ТекСтрока) Тогда
		Возврат ТекСтрока.ИдСтроки;
	КонецЕсли;	 
	
	Пока Истина Цикл
		ЭлементыДерева = ТекСтрока.ПолучитьЭлементы();
		Если ЭлементыДерева.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;	 
		
		ТекСтрока = ЭлементыДерева[0];
		Если ЭтуСтрокуМожноИсполнить(ТекСтрока) Тогда
			НужнаяСтрока = ТекСтрока;
			Возврат ТекСтрока.ИдСтроки;
		КонецЕсли;	 
	КонецЦикла;	
	
КонецФункции	

&НаКлиенте
Функция НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи,СтрокаПоиска,НомерСтрокиВФиче,Нашли = Ложь)
	Если НомерСтрокиВФиче = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ТекИдМассива = НомерСтрокиВФиче-1-1;
	Пока Истина Цикл
		Если ТекИдМассива < 0 Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = СокрЛП(МассивТекстФичи[ТекИдМассива]);
		
		Если Стр = "" Тогда
			ТекИдМассива = ТекИдМассива - 1;
			Продолжить;
		КонецЕсли;	 
		
		Если Лев(Стр,1) <> "#" Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = Сред(Стр,2);
		
		Если Лев(НРег(Стр),СтрДлина(СтрокаПоиска)) <> НРег(СтрокаПоиска) Тогда
			ТекИдМассива = ТекИдМассива - 1;
			Продолжить;
		КонецЕсли;	 
		
		//значит нашли нужную строку
		Стр = СокрЛП(Сред(Стр,СтрДлина(СтрокаПоиска)+1));
		Нашли = Истина;
		
		Возврат Стр;
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Процедура ВычислитьПараметрыВнутриСтроки(СлужебнаяСтрока)
	Стр = "";
	
	НашлиСтрокуДляВычисления = Ложь;
	СтрокаВыражения          = "";
	
	Для Ккк = 1 По СтрДлина(СлужебнаяСтрока) Цикл
		Символ = Сред(СлужебнаяСтрока,Ккк,1);
		Если Символ = "[" Тогда
			НашлиСтрокуДляВычисления = Истина;
			Продолжить;
		КонецЕсли;	 
		
		Если Символ = "]" Тогда
			НашлиСтрокуДляВычисления = Ложь;
			РезультатВыражения = Вычислить(СтрокаВыражения);
			Стр = Стр + РезультатВыражения;
			СтрокаВыражения = "";
			Продолжить;
		КонецЕсли;	 
		
		Если НашлиСтрокуДляВычисления Тогда
			СтрокаВыражения = СтрокаВыражения + Символ;
		Иначе
			Стр = Стр + Символ;
		КонецЕсли;	 
	КонецЦикла;	
	
	СлужебнаяСтрока = Стр;
КонецПроцедуры

&НаКлиенте
Функция ЭтотШагНеНужноИгнорировать(Шаг)
	Если Шаг.МассивКомментариевШага.Найти("#[autodoc.ignorestep]") <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	 

&НаКлиенте
Процедура ПроставитьШагамСвойстваГруппировкиПриЗаписиРекурсивно(СтрокаДереваГруппа,Параметры,ДопПараметры)
	ЭлементыГруппы = СтрокаДереваГруппа.ПолучитьЭлементы();
	Для Каждого ЭлементГруппы Из ЭлементыГруппы Цикл
		Если ЭлементГруппы.Тип = "Шаг" Тогда
			Для Каждого Шаг Из Параметры.Сценарий.Шаги Цикл
				Если ЭлементГруппы.ИдСтроки = Шаг.СтрокаШага Тогда
					Шаг.Вставить("ВнутриГруппыКотораяРаботаетКакОдинШаг",Истина);
					Шаг.Вставить("ПервыйВГруппеШагов",Ложь);
					Шаг.Вставить("ПоследнийВГруппеШагов",Ложь);
					
					Если НЕ ДопПараметры.НашлиПервыйШаг И ЭтотШагНеНужноИгнорировать(Шаг) Тогда
						Шаг.Вставить("ПервыйВГруппеШагов",Истина);
						Шаг.Вставить("ТекстИнструкция",ДопПараметры.ТекстШагаГруппы);
						Шаг.Вставить("МасштабироватьВВидео",ДопПараметры.МасштабироватьВВидео);
						ДопПараметры.НашлиПервыйШаг = Истина;
					ИначеЕсли НЕ ДопПараметры.НашлиПервыйШаг Тогда
						Шаг.Вставить("ИгнорироватьШагВАвтоинструкции",Истина);
						Шаг.Вставить("ВнутриГруппыКотораяРаботаетКакОдинШаг",Ложь);
					КонецЕсли;	 
					
					Если ЭтотШагНеНужноИгнорировать(Шаг) Тогда
						ДопПараметры.ВременныйШаг = Шаг;
					Иначе	
						Шаг.Вставить("ИгнорироватьШагВАвтоинструкции",Истина);
						Шаг.Вставить("ВнутриГруппыКотораяРаботаетКакОдинШаг",Ложь);
					КонецЕсли;	 
					
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
		КонецЕсли;	 
		
		ДопПараметры.Уровень = ДопПараметры.Уровень + 1;
		ПроставитьШагамСвойстваГруппировкиПриЗаписиРекурсивно(ЭлементГруппы,Параметры,ДопПараметры);
		ДопПараметры.Уровень = ДопПараметры.Уровень - 1;
	КонецЦикла;	
	
	Если ДопПараметры.Уровень = 0 Тогда
		ДопПараметры.ВременныйШаг.Вставить("ПоследнийВГруппеШагов",Истина);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьШагамСвойстваИгнорироватьШагВАвтоинструкцииРекурсивно(СтрокаДереваГруппа,Параметры,ДопПараметры)
	ЭлементыГруппы = СтрокаДереваГруппа.ПолучитьЭлементы();
	Для Каждого ЭлементГруппы Из ЭлементыГруппы Цикл
		Если ЭлементГруппы.Тип = "Шаг" Тогда
			Для Каждого Шаг Из Параметры.Сценарий.Шаги Цикл
				Если ЭлементГруппы.ИдСтроки = Шаг.СтрокаШага Тогда
					Шаг.Вставить("ИгнорироватьШагВАвтоинструкции",Истина);
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
		КонецЕсли;	 
		
		ПроставитьШагамСвойстваИгнорироватьШагВАвтоинструкцииРекурсивно(ЭлементГруппы,Параметры,ДопПараметры);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока,Параметры)
	ПредставлениеКвадратнаяСкобкаЛевая  = "__&КвадратнаяСкобкаЛевая__";
	ПредставлениеКвадратнаяСкобкаПравая = "__&КвадратнаяСкобкаПравая__";
	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока,"\[",ПредставлениеКвадратнаяСкобкаЛевая);
	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока,"\]",ПредставлениеКвадратнаяСкобкаПравая);
	
	Если Параметры.Свойство("ОбработкаПараметровШага") Тогда
		Если Параметры.ОбработкаПараметровШага Тогда
			Для Ккк = 1 По Параметры.Шаг.ЗначенияПараметров.Количество() Цикл
				СтрокаЗамены = "%" + XMlСтрока(Ккк);
				СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока,СтрокаЗамены,Параметры.Шаг.ЗначенияПараметров[Ккк-1].Значение.Значение);
			КонецЦикла;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Параметры.Свойство("ВычислитьВыражения") Тогда
		Если Параметры.ВычислитьВыражения Тогда
			ВычислитьПараметрыВнутриСтроки(СлужебнаяСтрока);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если (Параметры.Свойство("ОбработатьГруппыШаговКакОдинШаг") И Параметры.ОбработатьГруппыШаговКакОдинШаг)
		  ИЛИ Объект.ЗаписьВидеоГруппаШаговКакШаг Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Уровень",0);
		ДопПараметры.Вставить("НашлиПервыйШаг",Ложь);
		ДопПараметры.Вставить("ПоследнийШаг",Ложь);
		ДопПараметры.Вставить("ВременныйШаг",Неопределено);
		ДопПараметры.Вставить("ТекстШагаГруппы",СлужебнаяСтрока);
		ДопПараметры.Вставить("МасштабироватьВВидео",Ложь);
		Если Параметры.Свойство("МасштабироватьВВидео") Тогда
			ДопПараметры.Вставить("МасштабироватьВВидео",Параметры.МасштабироватьВВидео);
		КонецЕсли;	 
		ПроставитьШагамСвойстваГруппировкиПриЗаписиРекурсивно(Параметры.СтрокаДереваГруппа,Параметры,ДопПараметры);
	КонецЕсли;	 
	
	Если Параметры.Свойство("ПроставитьПодчиненнымШагамИгнорироватьШагВАвтоинструкции") Тогда
		Если Параметры.ПроставитьПодчиненнымШагамИгнорироватьШагВАвтоинструкции Тогда
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Уровень",0);
			ПроставитьШагамСвойстваИгнорироватьШагВАвтоинструкцииРекурсивно(Параметры.СтрокаДереваГруппа,Параметры,ДопПараметры);
		КонецЕсли;	 
	КонецЕсли;	 
	
	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока,ПредставлениеКвадратнаяСкобкаЛевая,"[");	
	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока,ПредставлениеКвадратнаяСкобкаПравая,"]");	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРодителяВерхнегоУровняДляСтрокиШага(СтрокаШага)
	НайденнаяСтрока = Неопределено;
	ТекРодитель = СтрокаШага;
	Пока Истина Цикл
		РодительШага = ТекРодитель.ПолучитьРодителя();
		Если РодительШага = Неопределено Тогда
			Прервать;
		ИначеЕсли РодительШага.Тип = "Сценарий" Тогда
			Если НайденнаяСтрока = Неопределено Тогда
				НайденнаяСтрока = РодительШага;
			КонецЕсли;	 
			
			Прервать;
		КонецЕсли;	
		
		ТекРодитель = РодительШага;
		НайденнаяСтрока = РодительШага;
	КонецЦикла;	
	
	Возврат НайденнаяСтрока;
КонецФункции	 

&НаКлиенте
Функция ПервыйЭлементРодителяИсключаяСтрокиТаблицыGherkin(ЭлементыРодителя)
	Для Каждого Элем Из ЭлементыРодителя Цикл
		Если Элем.СтрокаПараметровШагаВВидеТаблицы Тогда
			Продолжить;
		КонецЕсли;	 
		Возврат Элем;
	КонецЦикла;	 
	
	Возврат Неопределено;
КонецФункции	  

&НаКлиенте
Функция ЭтотШагСамыйПервыйВГруппеПервогоУровня(СтрокаШага,РодительШага)
	ТекРодитель = СтрокаШага.ПолучитьРодителя();
	ТекСтрокаШага = СтрокаШага;
	Пока Истина Цикл
		ЭлементыРодителя = ТекРодитель.ПолучитьЭлементы();
		ПервыйЭлементРодителя = ПервыйЭлементРодителяИсключаяСтрокиТаблицыGherkin(ЭлементыРодителя);
		Если ПервыйЭлементРодителя = Неопределено Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не получилось определить позицию шага <%1> в группе шагов <%2>.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаШага.Имя);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТекРодитель.Имя);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		Если ЭлементыРодителя.Индекс(ТекСтрокаШага) <> ЭлементыРодителя.Индекс(ПервыйЭлементРодителя) Тогда
			Возврат -1;
		КонецЕсли;	 
		
		ТекСтрокаШага = ТекРодитель;
		ТекРодитель = ТекРодитель.ПолучитьРодителя();
		
		Если ТекРодитель = РодительШага Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат 0;
КонецФункции	 

&НаКлиенте
Процедура НайтиГруппыШаговКоторыеНадоОбрабатыватьКакОдинШаг(МассивТекстФичи,Шаг,Сценарий)
	ИДСтрокиШага = Шаг.СтрокаШага;
	СтрокаШага   = МассивСтрокДереваДанныеФормы[ИДСтрокиШага];
	
	РодительШага = ПолучитьРодителяВерхнегоУровняДляСтрокиШага(СтрокаШага);
	
	Если РодительШага = Неопределено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не получилось определить родителя у шага <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаШага.Имя);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если (РодительШага.Тип <> "Область") и (РодительШага.Тип <> "ШагСценарий") Тогда //только эти шаги идут как видеовставки
		Возврат;
	КонецЕсли;	 
	
	ЭлементыРодителя = РодительШага.ПолучитьЭлементы();
	Индекс           = ЭлементыРодителя.Индекс(СтрокаШага);
	Если Индекс = -1 Тогда
		//надо проверить, что это самый первый шаг в группе первого уровня
		Индекс = ЭтотШагСамыйПервыйВГруппеПервогоУровня(СтрокаШага,РодительШага);
	КонецЕсли;	 
	Если Индекс = 0 Тогда
		//значит этот шаг первый в группе
		
		Нашли = Ложь;
		СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи,"[autodoc.groupsteps]",РодительШага.НомерСтрокиВФиче,Нашли);
		
		Если Не ЗначениеЗаполнено(СлужебнаяСтрока) Тогда
			//Значит не указан новый текст группы. Оставим прежний.
			СлужебнаяСтрока = РодительШага.Имя;
		КонецЕсли;	 
		
		НашлиДирективуНеМасштабироватьШаг = Ложь;
		НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи,"[autodoc.donotscale]",РодительШага.НомерСтрокиВФиче,НашлиДирективуНеМасштабироватьШаг);
		
		Если Нашли ИЛИ Объект.ЗаписьВидеоГруппаШаговКакШаг Тогда
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить("ВычислитьВыражения",Истина);
			ПараметрыОбработки.Вставить("ОбработатьГруппыШаговКакОдинШаг",Истина);
			ПараметрыОбработки.Вставить("Шаг",Шаг);
			ПараметрыОбработки.Вставить("Сценарий",Сценарий);
			ПараметрыОбработки.Вставить("СтрокаДереваГруппа",РодительШага);
			ПараметрыОбработки.Вставить("МасштабироватьВВидео",Не НашлиДирективуНеМасштабироватьШаг);
			ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока,ПараметрыОбработки);
		КонецЕсли;	 
	КонецЕсли;	 
	
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиГруппыШаговКоторыеНадоИгнорировать(МассивТекстФичи,Шаг,Сценарий)
	ИДСтрокиШага = Шаг.СтрокаШага;
	СтрокаШага   = МассивСтрокДереваДанныеФормы[ИДСтрокиШага];
	
	РодительШага = СтрокаШага.ПолучитьРодителя();
	Если (РодительШага.Тип <> "Область") и (РодительШага.Тип <> "ШагСценарий") Тогда //только эти шаги идут как видеовставки
		Возврат;
	КонецЕсли;	 
	
	ЭлементыРодителя = РодительШага.ПолучитьЭлементы();
	Индекс           = ЭлементыРодителя.Индекс(СтрокаШага);
	Если Индекс = 0 Тогда
		//значит этот шаг первый в группе
		
		Нашли = Ложь;
		СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи,"[autodoc.ignorestep]",РодительШага.НомерСтрокиВФиче,Нашли);
		Если НЕ Нашли Тогда
			Возврат;
		КонецЕсли;	 
		
		Если Не Сценарий.Свойство("ГруппыКоторыеНадоИгнорировать") Тогда
			Сценарий.Вставить("ГруппыКоторыеНадоИгнорировать",Новый Массив);
		КонецЕсли;	 
		
		Сценарий.ГруппыКоторыеНадоИгнорировать.Добавить(РодительШага.ИдСтроки);
		
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("ПроставитьПодчиненнымШагамИгнорироватьШагВАвтоинструкции",Истина);
		ПараметрыОбработки.Вставить("Шаг",Шаг);
		ПараметрыОбработки.Вставить("Сценарий",Сценарий);
		ПараметрыОбработки.Вставить("СтрокаДереваГруппа",РодительШага);
		ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока,ПараметрыОбработки);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиШагиКоторыеНеНадоМасштабировать(МассивТекстФичи,Шаг,Сценарий)
	Нашли = Ложь;
	СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи,"[autodoc.donotscale]",Шаг.НомерСтрокиВФиче,Нашли);
	Если Не Нашли Тогда
		Возврат;
	КонецЕсли;	
	
	Шаг.Вставить("МасштабироватьВВидео",Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НайтиШагиКоторыеНадоИгнорировать(МассивТекстФичи,Шаг,Сценарий)
	Нашли = Ложь;
	СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи,"[autodoc.ignorestep]",Шаг.НомерСтрокиВФиче,Нашли);
	Если Не Нашли Тогда
		Возврат;
	КонецЕсли;	
	
	Шаг.Вставить("ИгнорироватьШагВАвтоинструкции",Истина);
КонецПроцедуры

&НаКлиенте
Процедура НайтиПризнакЧтоСценарийНадоИгнорировать(МассивТекстФичи,Сценарий)
	Нашли = Ложь;
	СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи,"[autodoc.ignorescenario]",Сценарий.НомерСтрокиВФиче,Нашли);
	Если НЕ Нашли Тогда
		Возврат;
	КонецЕсли;	 
	
	Сценарий.Вставить("ИгнорироватьШагВАвтоинструкции",Истина);
	
	ПараметрыУстановки = Новый Структура;
	ПараметрыУстановки.Вставить("Сценарий",Сценарий);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Уровень",0);
	ПроставитьШагамСвойстваИгнорироватьШагВАвтоинструкцииРекурсивно(МассивСтрокДереваДанныеФормы[Сценарий.СтрокаДерева],ПараметрыУстановки,ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура НайтиПризнакЧтоСлайдСценарияНадоИгнорировать(МассивТекстФичи,Сценарий)
	Если Объект.ЗаписьВидеоОтключитьСлайдСценария Тогда
		Сценарий.Вставить("ИгнорироватьСлайдСценарияВАвтоинструкции",Истина);
		Возврат;
	КонецЕсли;	 
	
	Нашли = Ложь;
	СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи,"[autodoc.ignore.scenarioslide]",Сценарий.НомерСтрокиВФиче,Нашли);
	Если НЕ Нашли Тогда
		Возврат;
	КонецЕсли;	 
	
	Сценарий.Вставить("ИгнорироватьСлайдСценарияВАвтоинструкции",Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьИзФичиПараметрыСборкиВидео()
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат;
	КонецЕсли;	 
	
	Для Каждого Сценарий Из МассивСценариевДляВыполнения Цикл
		МассивФичи = ЗагрузитьФайлВМассив(Сценарий.ПолныйПутьКФиче);
		
		НайтиПризнакЧтоСценарийНадоИгнорировать(МассивФичи,Сценарий);
		НайтиПризнакЧтоСлайдСценарияНадоИгнорировать(МассивФичи,Сценарий);
		
		Шаги       = Сценарий.Шаги;
		Для Каждого Шаг Из Шаги Цикл
			Если Шаг.ЭтоШагКонтекста Тогда
				Продолжить;
			КонецЕсли;	 
			
			НайтиГруппыШаговКоторыеНадоОбрабатыватьКакОдинШаг(МассивФичи,Шаг,Сценарий);
			НайтиГруппыШаговКоторыеНадоИгнорировать(МассивФичи,Шаг,Сценарий);
			НайтиШагиКоторыеНеНадоМасштабировать(МассивФичи,Шаг,Сценарий);
			НайтиШагиКоторыеНадоИгнорировать(МассивФичи,Шаг,Сценарий);
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Функция УбратьВсеЗапрещенныеСимволыИзИмениФайла(Знач Стр)
	Стр = СтрЗаменить(Стр,"@","");
	Стр = СтрЗаменить(Стр,"\","");
	Стр = СтрЗаменить(Стр,"/","");
	Стр = СтрЗаменить(Стр,":","");
	Стр = СтрЗаменить(Стр,"*","");
	Стр = СтрЗаменить(Стр,"?","");
	Стр = СтрЗаменить(Стр,"""","");
	Стр = СтрЗаменить(Стр,"<","");
	Стр = СтрЗаменить(Стр,">","");
	Стр = СтрЗаменить(Стр,"|","");
	Стр = СтрЗаменить(Стр,"+","");
	Стр = СтрЗаменить(Стр,Символы.НПП,"");
	
	Стр = СтрЗаменить(Стр,"%","");
	Стр = СтрЗаменить(Стр,"!","");
	
	Возврат Стр; 
КонецФункции

&НаКлиенте
Процедура ДополнитьСвойстваШага(Шаг,Сценарий,ИДШага)
	СценарийИзДерева = МассивСценариевДляВыполнения[Число(Сценарий.ИдСценария)];
	ШагИзДерева      = СценарийИзДерева.Шаги[Число(Шаг.ИдШага)];
	Для Каждого СвойствоШага Из ШагИзДерева Цикл
		Шаг.Вставить(СвойствоШага.Ключ,СвойствоШага.Значение);
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Процедура ПроставитьСвойстваШагаСУчетомСвойствГруппы(Шаг,СтрокаДереваШаг,Сценарий)
	ШагНадоИгнорировать = Ложь;
	ТекСтрока = СтрокаДереваШаг;
	Пока Истина Цикл
		РодительШага     = ТекСтрока.ПолучитьРодителя();
		ЭлементыРодителя = РодительШага.ПолучитьЭлементы();
		
		Если РодительШага = Неопределено Тогда
			Прервать;
		ИначеЕсли РодительШага.Тип = "Сценарий" Тогда
			Прервать;
		ИначеЕсли РодительШага.Тип = "Область" Тогда
			Если ТипЗнч(РодительШага.ПроизвольныеЗначения) = Тип("Структура") Тогда
				Для Каждого Комментарий Из РодительШага.ПроизвольныеЗначения.МассивКомментариевШага Цикл
					Если Найти(НРег(Комментарий),"#[autodoc.groupsteps]") > 0 Тогда
						
						СлужебнаяСтрока = СокрЛП(РодительШага.Имя);
						ПромСтрока = Сред(СокрЛП(Комментарий),22);
						Если ЗначениеЗаполнено(ПромСтрока) Тогда
							СлужебнаяСтрока = ПромСтрока;
						КонецЕсли;	 
						
						Индекс = ЭлементыРодителя.Индекс(СтрокаДереваШаг);
						Если Индекс <> (ЭлементыРодителя.Количество()-1) Тогда
							//вызываем проверку только для одного шага
							ШагНадоИгнорировать = Истина;
							Прервать;
						КонецЕсли;	 
						
						ПараметрыОбработки = Новый Структура;
						ПараметрыОбработки.Вставить("ВычислитьВыражения",Истина);
						ПараметрыОбработки.Вставить("ОбработатьГруппыШаговКакОдинШаг",Истина);
						ПараметрыОбработки.Вставить("Шаг",Шаг);
						ПараметрыОбработки.Вставить("Сценарий",Сценарий);
						ПараметрыОбработки.Вставить("СтрокаДереваГруппа",РодительШага);
						ПараметрыОбработки.Вставить("МасштабироватьВВидео",Ложь);
						
						ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока,ПараметрыОбработки);
						
						Шаг.Вставить("ТекстИнструкция",СокрЛП(СлужебнаяСтрока));
					ИначеЕсли Найти(НРег(Комментарий),"#[autodoc.ignorestep]") > 0 Тогда
						ШагНадоИгнорировать = Истина;
						Прервать;
					КонецЕсли;	 
				КонецЦикла;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		ТекСтрока = РодительШага;
	КонецЦикла;	
	
	Шаг.Вставить("ИгнорироватьШагВАвтоинструкции",ШагНадоИгнорировать);
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьСлужебныеДирективыАвтоинструкций(Шаг,Сценарий)
	ИдСтроки = Шаг.ИдСтроки;
	СтрокаДереваШаг = Неопределено;
	НайтиСтрокуДереваПоИдСтроки(ИдСтроки, Объект.ДеревоТестов.ПолучитьЭлементы(), СтрокаДереваШаг);
	ПроставитьСвойстваШагаСУчетомСвойствГруппы(Шаг,СтрокаДереваШаг,Сценарий);
	
	Для Каждого КомментарийШага Из Шаг.МассивКомментариевШага Цикл
		Директива = "#[autodoc.text]";
		Поз = Найти(НРег(КомментарийШага),Директива); 
		Если Поз > 0 Тогда
			СлужебнаяСтрока = СокрЛП(Сред(КомментарийШага,Поз + СтрДлина(Директива)));
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить("ОбработкаПараметровШага",Истина);
			ПараметрыОбработки.Вставить("ВычислитьВыражения",Истина);
			ПараметрыОбработки.Вставить("Шаг",Шаг);
			ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока,ПараметрыОбработки);
			
			Шаг.Вставить("ТекстИнструкция",СлужебнаяСтрока);
		КонецЕсли;	 
		
		Директива = "#[autodoc.ignorestep]";
		Поз = Найти(НРег(КомментарийШага),Директива); 
		Если Поз > 0 Тогда
			СлужебнаяСтрока = СокрЛП(Сред(КомментарийШага,Поз + СтрДлина(Директива)));
			Шаг.Вставить("ИгнорироватьШагВАвтоинструкции",Истина);
		КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Процедура СоздатьФайлHTMLИнструкции()
	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;	
	
	СтрокаОкончанияЗаголовка = 0;
	ЗаголовокФичи            = ПолучитьЗаголовокФичииИзЛогаИнструкции(ИмяФайлаЛогаИнструкцииHTML, СтрокаОкончанияЗаголовка);
	
	ТД = Новый ЧтениеТекста(ИмяФайлаЛогаИнструкцииHTML, КодировкаТекста.UTF8);
		
	МассивСценариев = Новый Массив;
	МассивШагов     = Неопределено;
	
	Ном = 0;
	Стр = ТД.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл
		
		Ном = Ном + 1;
		Если Ном <= СтрокаОкончанияЗаголовка Тогда
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;			
		КонецЕсли;
		
		Если Стр = "НачалоСценария" Тогда
			ТекСтруктура = Новый Структура;
			МассивШагов  = Новый Массив;
			ТекСтруктура.Вставить("Шаги", МассивШагов);
			МассивСценариев.Добавить(ТекСтруктура);
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		ИначеЕсли Стр = "НачалоШага" Тогда
			ТекСтруктура = Новый Структура;
			МассивШагов.Добавить(ТекСтруктура);
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;	 
		
		Поз = Найти(Стр, "=");
		Если Поз = 0 Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Странный параметр в логе инструкции HTML: %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Стр);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ИмяПараметра      = Лев(Стр, Поз - 1);
		ЗначениеПараметра = Сред(Стр, Поз + 1);
		
		ТекСтруктура.Вставить(ИмяПараметра, ЗначениеПараметра);
		Стр = ТД.ПрочитатьСтроку();
		
	КонецЦикла; 
	ТД.Закрыть();
	
	КаталогОбъектов = ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputИнструкцияHTML);
	
	ИмяФайлаДляЗаписи = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputИнструкцияHTML)) + "Instr_" + ТекущаяФичаИнструкцииHTML + ".HTML";
	
	Страница = Новый ЗаписьТекста(ИмяФайлаДляЗаписи, КодировкаТекста.UTF8);
	Страница.ЗаписатьСтроку("<html>");
	Страница.ЗаписатьСтроку("<body>");	
	Страница.ЗаписатьСтроку("<h3><p  style=""font-size:40px"">");
	Для каждого Стр Из ЗаголовокФичи Цикл
		Страница.ЗаписатьСтроку("<br>" + Стр);
	КонецЦикла;
	Страница.ЗаписатьСтроку("</p></h3>");
	
	ИДСкриншота  = 0;
	Для каждого Сценарий Из МассивСценариев Цикл
		Страница.ЗаписатьСтроку("<h1><p align=""center"" style=""font-size:35px"">" + Сценарий.ИмяСценария + "</p></h1>");		
		ИмяФичи = Сценарий.ИмяФичи;
		ИмяФичи = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяФичи);
		ИмяФичи = СтрЗаменить(ИмяФичи, " ", "_");
		ИмяСценария = СтрЗаменить(Сценарий.ИмяСценария, " ", "_");
		ИмяСценария = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяСценария);
		
		КаталогФичи = ДополнитьСлешВПуть(КаталогОбъектов) + ИмяФичи;
		ФайлКаталогФичи = Новый Файл(КаталогФичи);
		Если НЕ ФайлСуществуетКомандаСистемы(ФайлКаталогФичи.ПолноеИмя) Тогда
			СоздатьКаталогКомандаСистемы(КаталогФичи);
		КонецЕсли;  
		
		МассивШагов = Сценарий.Шаги;
		НомШага = 0;
		Для каждого Шаг Из МассивШагов Цикл
			ДополнитьСвойстваШага(Шаг,Сценарий,Шаг.ИДШага);
		КонецЦикла;	
		
		Для каждого Шаг Из МассивШагов Цикл
			ОбработатьСлужебныеДирективыАвтоинструкций(Шаг,Сценарий);
			
			ИДСкриншота = ИДСкриншота + 1;
			
			Если Шаг.ИгнорироватьШагВАвтоинструкции Тогда
				УдалитьФайлыКомандаСистемы(Шаг.Скриншот);
				Продолжить;
			КонецЕсли;	 
			
			НомШага = НомШага + 1;
			Страница.ЗаписатьСтроку("");
			
			ТекстШага = Шаг.Имя;
			Если ЗначениеЗаполнено(Шаг.ТекстИнструкция) Тогда
				ТекстШага = Шаг.ТекстИнструкция;
			КонецЕсли;	 
			
			СтрокаШага = СтрЗаменить(ТекстШага, "\n", Символы.ПС);
			МассивСтрок = РазложитьСтрокуВМассивПодстрок(СтрокаШага, Символы.ПС);
			Для Ккк = 0 По МассивСтрок.Количество() - 1 Цикл
				Стр = МассивСтрок[Ккк];
				Если Ккк = 0 Тогда
					Страница.ЗаписатьСтроку("<p align=""left"" style=""font-size:30px""><b>" + ПолучитьФорматированныйНомер(НомШага, 3) + "</b>. " + Стр + "</p>");
				Иначе
					ЕстьВертЧерта = Ложь;
					Если Найти(Стр, "|") > 0 Тогда
						ЕстьВертЧерта = Истина;
					КонецЕсли;	 
					
					Если ЕстьВертЧерта Тогда
						Страница.ЗаписатьСтроку("<p align=""left"" style=""font-size:30px""><pre><font size=""5"" face=""Lucida Console"">" + Стр + "</font></pre></p>");
					Иначе	
						Страница.ЗаписатьСтроку("<p align=""left"" style=""font-size:30px"">" + Стр + "</p>");
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЦикла;
			ФайлСкриншота = Новый Файл(Шаг.Скриншот);
			НовоеИмяФайлаСкриншота = СтрЗаменить(ИмяФичи + "_" + ИДСкриншота + "_" + Лев(ИмяСценария, 30) + "_" + ПолучитьФорматированныйНомер(НомШага, 3) + ФайлСкриншота.Расширение, " ", "_");
			ИмяФайлаСкриншотаВКаталогеФичи = ФайлСкриншота.Путь + СтрЗаменить(ДополнитьСлешВПуть(ИмяФичи) + НовоеИмяФайлаСкриншота, " ", "_");
			ФайлСкриншота = Неопределено;
			
			ПроцедураПереместитьФайл(Шаг.Скриншот, ИмяФайлаСкриншотаВКаталогеФичи);
			
			СтрСкриншотаДляHTML = СтрЗаменить(ДополнитьСлешВПуть(ИмяФичи) + НовоеИмяФайлаСкриншота, " ", "_");
			Страница.ЗаписатьСтроку("<img src=" + СтрЗаменить(СтрСкриншотаДляHTML, "\", "/") + ">");
		КонецЦикла;
	КонецЦикла;
	
	Страница.ЗаписатьСтроку("</body>");
	Страница.ЗаписатьСтроку("/<html>");
	
	ТекстСообщения = ПолучитьТекстСообщенияПользователю("Записываю %1");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайлаДляЗаписи);
	Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
	Страница.Закрыть();
 
	УдалитьФайлыКомандаСистемы(ИмяФайлаЛогаИнструкцииHTML);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗаголовокФичииИзЛогаИнструкции(ИмяФайла, СтрокаОкончанияЗаголовка)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");
	
	ЗаголовокФичи = Новый Массив;
	Ном = 0;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	
		
		Ном = Ном + 1;
		
		Если Стр = "--окончание заголовка--" Тогда
			СтрокаОкончанияЗаголовка = Ном;
			Прервать;
		КонецЕсли;	 
		
		ЗаголовокФичи.Добавить(Стр);
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат ЗаголовокФичи;
КонецФункции	
 

&НаКлиенте
Процедура СоздатьФайлMarkdownИнструкции()
	Если НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;	
	
	СтрокаОкончанияЗаголовка = 0;
	ЗаголовокФичи            = ПолучитьЗаголовокФичииИзЛогаИнструкции(ИмяФайлаЛогаИнструкцииMarkdown, СтрокаОкончанияЗаголовка);
	
	ТД = Новый ЧтениеТекста(ИмяФайлаЛогаИнструкцииMarkdown, КодировкаТекста.UTF8);

	МассивСценариев = Новый Массив;
	МассивШагов     = Неопределено;
	Ном = 0;
	Стр = ТД.ПрочитатьСтроку();	
	Пока Стр <> Неопределено Цикл
		Ном = Ном + 1;
		Если Ном <= СтрокаОкончанияЗаголовка Тогда
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;			
		КонецЕсли; 
		
		
		Если Стр = "НачалоСценария" Тогда
			ТекСтруктура = Новый Структура;
			МассивШагов  = Новый Массив;
			
			ТекСтруктура.Вставить("Шаги", МассивШагов);
			
			МассивСценариев.Добавить(ТекСтруктура);
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		ИначеЕсли Стр = "НачалоШага" Тогда
			ТекСтруктура = Новый Структура;
			
			МассивШагов.Добавить(ТекСтруктура);
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;	 
		
		Поз = Найти(Стр, "=");
		Если Поз = 0 Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Странный параметр в логе инструкции Markdown: %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Стр);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ИмяПараметра      = Лев(Стр, Поз - 1);
		ЗначениеПараметра = Сред(Стр, Поз + 1);
		
		ТекСтруктура.Вставить(ИмяПараметра, ЗначениеПараметра);
		Стр = ТД.ПрочитатьСтроку();
			
	КонецЦикла; 
	ТД.Закрыть();
	
	КаталогОбъектов = Объект.КаталогOutputИнструкцияMarkdown;
	
	
	ИмяФайлаДляЗаписи = Объект.КаталогOutputИнструкцияMarkdown + "/" + ТекущаяФичаИнструкцииMarkdown + ".MD";
	ЗТ = Новый ЗаписьТекста(ИмяФайлаДляЗаписи, "Windows-1251", , Ложь); 
	ЗТ.Закрыть();//убираю BOM, специально для ATOM
	
	Страница = Новый ЗаписьТекста(ИмяФайлаДляЗаписи, "UTF-8", , Истина); 
	//записываю заголовок
	Для каждого Стр Из ЗаголовокФичи Цикл
		Стр = СокрЛП(Стр);
		Если Найти(Стр, "Функционал:") > 0 Тогда
			Стр = СтрЗаменить(Стр, "Функционал:", "**Функционал:**");
		ИначеЕсли НРег(Лев(Стр, 3)) = "как" Тогда
			Стр =  "> **Как**" + Сред(Стр, 4);
			
		ИначеЕсли НРег(Лев(Стр, 4)) = "хочу" Тогда
			Стр =  "> **Хочу**" + Сред(Стр, 5);
		ИначеЕсли НРег(Лев(Стр, 6)) = "я хочу" Тогда
			Стр =  "> **Я хочу**" + Сред(Стр, 7);
		ИначеЕсли НРег(Лев(Стр, 5)) = "чтобы" Тогда
			Стр =  "> **Чтобы**" + Сред(Стр, 6);
		Иначе
			Стр = " > " + Стр;
		КонецЕсли;	 
		
		Страница.ЗаписатьСтроку(Стр);
		Страница.ЗаписатьСтроку("");
	КонецЦикла;
	
	ИДСкриншота  = 0;
	ИДСценария   = 0;
	Для каждого Сценарий Из МассивСценариев Цикл
		ИДСценария = ИДСценария + 1;
		Если ИДСценария > 1 Тогда
			Страница.ЗаписатьСтроку("");
		КонецЕсли;	 
		Страница.ЗаписатьСтроку("");
		Страница.ЗаписатьСтроку("**Сценарий:** " + Сценарий.ИмяСценария);
		
		
		
		ИмяФичи = Сценарий.ИмяФичи;
		ИмяФичи = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяФичи);
		ИмяФичи = СтрЗаменить(ИмяФичи, " ", "_");
		
		ИмяСценария = Сценарий.ИмяСценария;
		ИмяСценария = УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяСценария);
		ИмяСценария = СтрЗаменить(ИмяСценария, " ", "_");
		
		КаталогФичи = ДополнитьСлешВПуть(КаталогОбъектов) + ИмяФичи;
		
		ФайлКаталогФичи = Новый Файл(КаталогФичи);
		Если НЕ ФайлСуществуетКомандаСистемы(ФайлКаталогФичи.ПолноеИмя) Тогда
			СоздатьКаталогКомандаСистемы(КаталогФичи);
		КонецЕсли;  
		
		МассивШагов = Сценарий.Шаги;
		НомШага = 0;
		Для каждого Шаг Из МассивШагов Цикл
			ДополнитьСвойстваШага(Шаг,Сценарий,Шаг.ИДШага);
		КонецЦикла;	
		
		Для каждого Шаг Из МассивШагов Цикл
			ОбработатьСлужебныеДирективыАвтоинструкций(Шаг,Сценарий);
			
			ИДСкриншота = ИДСкриншота + 1;
			
			Если Шаг.ИгнорироватьШагВАвтоинструкции Тогда
				УдалитьФайлыКомандаСистемы(Шаг.Скриншот);
				Продолжить;
			КонецЕсли;	 
			
			НомШага = НомШага + 1;
			Страница.ЗаписатьСтроку("");
			
			ТекстШага = Шаг.Имя;
			Если ЗначениеЗаполнено(Шаг.ТекстИнструкция) Тогда
				ТекстШага = Шаг.ТекстИнструкция;
			КонецЕсли;	 
			
			СтрокаШага = СтрЗаменить(ТекстШага, "\n", Символы.ПС);
			МассивСтрок = РазложитьСтрокуВМассивПодстрок(СтрокаШага, Символы.ПС);
			Для Ккк = 0 По МассивСтрок.Количество() - 1 Цикл
				Стр = МассивСтрок[Ккк];
				Если Ккк = 0 Тогда
					Страница.ЗаписатьСтроку("	" + ПолучитьФорматированныйНомер(НомШага, 3) + ". " + Стр);
				Иначе
					ЕстьВертЧерта = Ложь;
					Если Найти(Стр, "|") > 0 Тогда
						ЕстьВертЧерта = Истина;
					КонецЕсли;	 
					
					
					Если ЕстьВертЧерта Тогда
						Страница.ЗаписатьСтроку("	" + Стр);
					Иначе	
						Страница.ЗаписатьСтроку("	" + Стр);
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЦикла;
			ФайлСкриншота = Новый Файл(Шаг.Скриншот);
			НовоеИмяФайлаСкриншота = СтрЗаменить(ИмяФичи + "_" + ИДСкриншота + "_" + Лев(ИмяСценария, 30) + "_" + ПолучитьФорматированныйНомер(НомШага, 3) + ФайлСкриншота.Расширение, " ", "_");
			ИмяФайлаСкриншотаВКаталогеФичи = ФайлСкриншота.Путь + СтрЗаменить(ДополнитьСлешВПуть(ИмяФичи) + НовоеИмяФайлаСкриншота, " ", "_");
			ФайлСкриншота = Неопределено;
			
			ПроцедураПереместитьФайл(Шаг.Скриншот, ИмяФайлаСкриншотаВКаталогеФичи);
			
			СтрСкриншотаДляMarkdown = СтрЗаменить(ДополнитьСлешВПуть(ИмяФичи) + НовоеИмяФайлаСкриншота, " ", "_");
			Страница.ЗаписатьСтроку("![](" + СтрЗаменить(СтрСкриншотаДляMarkdown, "\", "/") + ")");
		КонецЦикла;
	КонецЦикла;
	
	ТекстСообщения = ПолучитьТекстСообщенияПользователю("Записываю %1");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайлаДляЗаписи);
	Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
	Страница.Закрыть();

	УдалитьФайлыКомандаСистемы(ИмяФайлаЛогаИнструкцииMarkdown);

КонецПроцедуры

&НаКлиенте
Процедура ПроцедураПереместитьФайл(Знач Стр1, Знач Стр2)
	ПереместитьФайлКомандаСистемы(Стр1, Стр2);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФорматированныйНомер(НомШага, КолСимволов)
	Стр = Строка(НомШага);
	Стр = СтрЗаменить(Стр, Символы.НПП, "");
	
	Пока СтрДлина(Стр) < КолСимволов Цикл
		Стр = "0" + Стр;
	КонецЦикла; 
	
	Возврат Стр; 
КонецФункции	

#Область АссертыСлужебное
//портирован блок ассертов из проекта xUnitFor1C (https://github.com/xDrivenDevelopment/xUnitFor1C)
//взят релиз 3.0.0.3
//{ МЕТОДЫ ДЛЯ ПРОВЕРКИ ЗНАЧЕНИЙ (assertions). 

&НаКлиенте
Функция ФорматДСО(ДопСообщениеОшибки)
	Если ДопСообщениеОшибки = "" Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Символы.ПС + ДопСообщениеОшибки;
КонецФункции

&НаКлиенте
Процедура ВызватьОшибкуПроверки(СообщениеОшибки)
	
	Префикс = "[" + СтатусыРезультатаТестирования.ОшибкаПроверки + "]";
	ТекстСообщения = Префикс + " " + СообщениеОшибки;
	ВызватьИсключение ТекстСообщения;
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыСтрокой(Параметры, ИмяПеременной = "Параметры")
	
	ПараметрыСтрока = "";
	Если Параметры <> Неопределено Тогда
		Если ТипЗнч(Параметры) = Тип("Массив") Тогда
			Для Индекс = 0 По Параметры.ВГраница() Цикл 
				ПараметрыСтрока = ПараметрыСтрока + ", " + ИмяПеременной + "[" + Формат(Индекс, "ЧН=0; ЧГ=0") + "]";
			КонецЦикла;
			ПараметрыСтрока = Сред(ПараметрыСтрока, 3);
		Иначе
			ПараметрыСтрока = ИмяПеременной;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыСтрока;
	
КонецФункции

// Только для внутреннего использования
&НаСервере
Процедура ПроверитьВалидностьЗапросаСКДНаСервере(ТекстЗапроса, ДопСообщениеОшибки = "")
	Объект().ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьКоличествоПередаваемыхТаблиц(СтрокаДерева)
	Если СтрокаДерева.ШагСПараметрамиВТаблице <> Истина Тогда
		Возврат 0;
	КонецЕсли;	 
	
	Количество = 1;
	Для Каждого ПодчиненнаяСтрокаДерева Из СтрокаДерева.Строки Цикл
		Если Не ЗначениеЗаполнено(ПодчиненнаяСтрокаДерева.Имя) Тогда
			Количество = Количество + 1;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Количество;
КонецФункции	

&НаСервере
Функция СоздатьДанныеПоТабличномуДокументуСервер(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения, ИмяКолонкиЗамещения) 
	Данные = Объект().СоздатьДанныеПоТабличномуДокументу(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения, ИмяКолонкиЗамещения);
	Возврат Данные;
КонецФункции
// { работа с данными текущего теста

&НаКлиенте
Процедура УстановитьДанныеТекущегоТеста(ДанныеТекущегоТеста)
	
	//УстановитьКонтекст(ДанныеТекущегоТеста, ИдентификаторКонтекстаДанныхТекущегоТеста());
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДанныеТекущегоТеста()
	
	//УдалитьКонтекст(ИдентификаторКонтекстаДанныхТекущегоТеста());
	
КонецПроцедуры

&НаКлиенте
Функция ПустыеДанныеТекущегоТеста()
	
	ДанныеТеста = Новый Структура;
	ДанныеТеста.Вставить("Имя", "");
	ДанныеТеста.Вставить("ПолныйПуть", "");
	ДанныеТеста.Вставить("СостояниеТеста", "");
	
	Возврат ДанныеТеста;
	
КонецФункции

Функция ИдентификаторКонтекстаДанныхТекущегоТеста()
	
	Возврат "xUnitFor1C_ДанныеТекущегоТеста";
	
КонецФункции

// }
#КонецОбласти

&НаСервереБезКонтекста
Процедура ДобавитьШагиВМассив(ДеревоСтроки, Шаги)
	Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
		Если СтрДеревоСтроки.Тип = "Примеры" Тогда
			//эти сценарии уже учтены
			Продолжить;
		КонецЕсли; 
		
		Если СтрДеревоСтроки.Тип = "Шаг" Тогда
			СтруктураШага = Новый Структура;
			СтруктураШага.Вставить("Имя", СтрДеревоСтроки.Имя);
			СтруктураШага.Вставить("ИмяШагаБезКлючевогоСлова", СтрДеревоСтроки.ИмяШагаБезКлючевогоСлова);
			СтруктураШага.Вставить("АдресСнипета", СтрДеревоСтроки.АдресСнипета);
			СтруктураШага.Вставить("ШагСПараметрамиВТаблице", СтрДеревоСтроки.ШагСПараметрамиВТаблице);
			СтруктураШага.Вставить("КоличествоПередаваемыхТаблиц", ОпределитьКоличествоПередаваемыхТаблиц(СтрДеревоСтроки));
			Шаги.Добавить(СтруктураШага);
		КонецЕсли;	 
		ДобавитьШагиВМассив(СтрДеревоСтроки.Строки, Шаги);
	КонецЦикла	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьИменаФайловФичИзДереваВМассив(ДеревоСтроки, МассивФич, МассивШагов)
	Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
		Если СтрДеревоСтроки.Тип = "Фича" Тогда
			МассивФич.Добавить(СтрДеревоСтроки.ПолныйПуть);
			Шаги = Новый Массив;
			ДобавитьШагиВМассив(СтрДеревоСтроки.Строки, Шаги);
			МассивШагов.Добавить(Шаги);
		КонецЕсли;	 
		ДобавитьИменаФайловФичИзДереваВМассив(СтрДеревоСтроки.Строки, МассивФич, МассивШагов);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокФичПоДеревуИСоздатьEPFПоМассивуФич(СтруктураПараметров, МассивФич, МассивШагов)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Дерево = ОбъектСервер.ДеревоТестов;
	
	ДобавитьИменаФайловФичИзДереваВМассив(Дерево.Строки, МассивФич, МассивШагов);
	
	СтруктураПараметров.Вставить("КонтекстVanessaBehavoir", ОбъектСервер);
	
	СтруктураПараметров.КонтекстVanessaBehavoir = "";
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуОС(Стр)
	КомандаСистемы(Стр);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлВерсииИсходников(ИмяФайлаВерсииИсходников, ИмяФайлаОригинала)
	Возврат;
	
	
	ФайлВерсии = Новый Файл(ИмяФайлаВерсииИсходников);
	Если ФайлВерсии.Существует() Тогда
		УдалитьФайлы(ФайлВерсии.ПолноеИмя);
	КонецЕсли;	 
	
	Файл   = Новый Файл(ИмяФайлаОригинала);
	Версия = Строка(Файл.ПолучитьВремяИзменения());
	
	ЗТ = Новый ЗаписьТекста(ИмяФайлаВерсииИсходников, "UTF-8", , Истина); 
	ЗТ.ЗаписатьСтроку("Версия=" + Версия); 
	
	ЗТ.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Функция РаспаковатьEPF(СтруктураОписанияEpf)
	
	
	ИмяФайла = СтруктураОписанияEpf.ИмяФайлаEPF;
	ФайлEPF = Новый Файл(ИмяФайла);
	
	ГенерироватьУФ      = Объект.ГенерироватьУФ;
	КаталогИнструментов = Объект.КаталогИнструментов;
	ЭтоУФ               = Истина;
	
	Попытка
		
		ВременныйКаталогБазы = ПолучитьИмяВременногоФайла();
		СоздатьКаталогКомандаСистемы(ВременныйКаталогБазы);
		ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
		ИмяФайлаOUT = ПолучитьИмяВременногоФайла("txt");
		КомандаСистемы = """" + ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + "1cv8"" CREATEINFOBASE File="""  + ВременныйКаталогБазы +  """ /out """ + ИмяФайлаOUT + """ > """ + ИмяФайлаЛога + """";
		Отладка(КомандаСистемы);
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаСистемы);
		Если НЕ ФайлСуществуетКомандаСистемы(ВременныйКаталогБазы + "/1Cv8.1CD") Тогда
			СделатьСообщение("Файл EPF не создан. Не смог создать каталог временной базы.");
			ВывестиТекстФайлаЛога(ИмяФайлаЛога);
			ВывестиТекстФайлаЛога(ИмяФайлаOUT);
			
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Проверьте работу команды <%1>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КомандаСистемы); 
			СделатьСообщение(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;	 
		
		УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
		УдалитьФайлыКомандаСистемы(ИмяФайлаOUT);
		
		
		
		ПутьКИсходникам = ПолучитьИмяВременногоФайла();
		СоздатьКаталогКомандаСистемы(ПутьКИсходникам);
		
		
		ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
		ИмяФайлаOUT = ПолучитьИмяВременногоФайла("txt");
		
		КомандаСистемы = """" + ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + "1cv8"" DESIGNER /F """ + ВременныйКаталогБазы + """ /DumpExternalDataProcessorOrReportToFiles  """ + ПутьКИсходникам + """ """ + СтруктураОписанияEpf.ИмяФайлаEPF + """ /out """ + ИмяФайлаOUT + """ > """ + ИмяФайлаЛога + """";
		Отладка(КомандаСистемы);
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаСистемы);
		
		
		СписокКаталогов = Новый СписокЗначений;
		СписокФайлов    = Новый СписокЗначений;
		
		НайтиФайлыКомандаСистемы(ПутьКИсходникам, СписокКаталогов, СписокФайлов, Ложь);
		Если СписокФайлов.Количество() <> 1 Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("В каталоге <%1> должен был быть один файл xml.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПутьКИсходникам);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ФайлXML = СписокФайлов[0].Значение;
		СтруктураОписанияEpf.Вставить("РеальноеИмяОбработки", ФайлXML.ИмяБезРасширения);
		
		СтруктураОписанияEpf.КаталогИсходников = ПутьКИсходникам;
		Если ЭтоУФ Тогда
			СтруктураОписанияEpf.ВременноеИмяМодуля = ПутьКИсходникам + "/" + ФайлXML.ИмяБезРасширения + "/Forms/Форма/Ext/Form/Module.bsl"
		Иначе	
			СтруктураОписанияEpf.ВременноеИмяМодуля = ПутьКИсходникам + "/" + ФайлXML.ИмяБезРасширения + "/Ext/ObjectModule.bsl"
		КонецЕсли;	 
		
		УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
		УдалитьФайлыКомандаСистемы(ИмяФайлаOUT);
		
		ОчиститьСодержимоеКаталога(ВременныйКаталогБазы);
		
	Исключение
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог распаковать %1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайла); 
		СделатьСообщение(ТекстСообщения);
		СделатьСообщение(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

&НаКлиенте
Функция СоздатьПустуюСтруктуруEpf()
	Стр = Новый Структура;
	Стр.Вставить("ИмяФичи", "");
	Стр.Вставить("ИмяФайлаEpf", "");
	Стр.Вставить("ВременноеИмяМодуля", "");
	Стр.Вставить("ТелоМодуля", "");//таблица значений
	Стр.Вставить("ИмяМодуляEpf", "");
	Стр.Вставить("КаталогИсходников", "");
	Стр.Вставить("ФайлEpfПересоздавался", Ложь);
	Стр.Вставить("РеальноеИмяОбработки", Неопределено);
	
	Возврат Стр;
КонецФункции

&НаСервереБезКонтекста
Функция ЗагрузитьТелоМодуляВТаблицуЗначенийСервер(ДвоичныеДанные, ШагСтрокДляМодуля)
	ПутьКФайлу = ПолучитьИмяВременногоФайла("txt");
	
	ДвоичныеДанные.Записать(ПутьКФайлу);
	
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("НомСтр");
	Тзн.Колонки.Добавить("Стр");
	
	НомСтр = 0;
	ПромФайл = Новый Файл(ПутьКФайлу);
	Если Не ПромФайл.Существует() Тогда
		СтрОшибки = "Файл """ + ПутьКФайлу + """ не существует.";
		Сообщить(СтрОшибки);
		ВызватьИсключение СтрОшибки;
	КонецЕсли; 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу, "UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		НомСтр = НомСтр + ШагСтрокДляМодуля;
		
		СтрТзн        = Тзн.Добавить();
		СтрТзн.НомСтр = НомСтр;
		СтрТзн.Стр    = Стр;
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат ЗначениеВСтрокуВнутр(Тзн);
КонецФункции	

&НаКлиенте
Функция ЗагрузитьТелоМодуляВТаблицуЗначений(ПутьКФайлу)
	ФайлПроверкаСуществования = Новый Файл(ПутьКФайлу);
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
	Возврат ЗагрузитьТелоМодуляВТаблицуЗначенийСервер(ДвоичныеДанные, ШагСтрокДляМодуля);
КонецФункции

&НаСервере
Процедура ДобавитьНачальноеЗаполнениеВМодульСервер(ТелоМодуля, ШагСтрокДляМодуля, ГенерироватьУФ, ДвДанныеvbFeatureReader, знСоздаватьОбластиПриГенерацииКода)
	Если Объект.ВерсияПоставки = "standart" Тогда
		ВременноеИмяФайла = ПолучитьИмяВременногоФайла("epf");
		ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
		FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла, Ложь);
	Иначе	
		ОбъектСервер  = РеквизитФормыВЗначение("Объект");
		FeatureReader = ОбъектСервер;
	КонецЕсли;	 
	FeatureReader.ДобавитьНачальноеЗаполнениеВМодуль(ТелоМодуля, ШагСтрокДляМодуля, ГенерироватьУФ, Истина, знСоздаватьОбластиПриГенерацииКода);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНачальноеЗаполнениеВМодуль(ТелоМодуля, ШагСтрокДляМодуля, ГенерироватьУФ, ДвДанныеvbFeatureReader, ЗнСоздаватьОбластиПриГенерацииКода)
	ДобавитьНачальноеЗаполнениеВМодульСервер(ТелоМодуля, ШагСтрокДляМодуля, ГенерироватьУФ, ДвДанныеvbFeatureReader, ЗнСоздаватьОбластиПриГенерацииКода);
КонецПроцедуры

&НаКлиенте
Функция НайтиФайлВМассивеФайлов(МассивФайлов, ИмяФайла)
	Для каждого Элем Из МассивФайлов Цикл
		
		Если ТипЗнч(Элем) = Тип("Структура") Тогда
			Файл = Элем.Файл;
		Иначе
			Файл = Элем;
		КонецЕсли;	 
		
		Если СравнитьПутиФайлов(Файл.ПолноеИмя,ИмяФайла) Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции	

&НаСервере
Функция ДанныеСлужебныйКешГенерацияEPF()
	ОбъектСервер   = РеквизитФормыВЗначение("Объект");
	ТекстовыйМакет = ОбъектСервер.ПолучитьМакет("МакетСлужебныйКеш");
	Строка         = ТекстовыйМакет.ПолучитьТекст();
	Возврат ЗначениеИзСтрокиВнутр(Строка).МассивФайловTemplateEpfUF;
КонецФункции	  

&НаКлиенте
Функция СоздатьСтруктураОписанияEpf(ОтносительныйКаталогФичи, ИмяТекущейФичи, GenerateEpf, ДвДанныеvbFeatureReader, ДополнительныеПараметры)
	КаталогИнструментов = Объект.КаталогИнструментов;
	ГенерироватьУФ      = Объект.ГенерироватьУФ;
	
	СтруктураОписанияEpf                    = СоздатьПустуюСтруктуруEpf();
	СтруктураОписанияEpf.ИмяФичи            = ИмяТекущейФичи;
	СтруктураОписанияEpf.ИмяФайлаEpf        = ДополнитьСлешВПуть(ОтносительныйКаталогФичи) + ДополнитьСлешВПуть("step_definitions") + ИмяТекущейФичи + ".epf";
	Если GenerateEpf Тогда
		ФайлEpf = Новый Файл(СтруктураОписанияEpf.ИмяФайлаEpf);
		Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
			ФайлСуществует = ФайлEpf.Существует();
		Иначе	
			МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "ПоискEPF", "НайденныеФайлы");
			ФайлСуществует = НайтиФайлВМассивеФайлов(МассивФайлов, СтруктураОписанияEpf.ИмяФайлаEpf);
		КонецЕсли;	 
		Если ФайлСуществует Тогда //т.е. если мы не первый раз работаем с данной фичей
			Если НЕ Объект.ВыводитьТекстМодуляВместоПерегенерацииEPF Тогда
				СтруктураОписанияEpf.ИмяМодуляEpf          = РаспаковатьEPF(СтруктураОписанияEpf);
				СтруктураОписанияEpf.ФайлEpfПересоздавался = Истина;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;
	
	Если Не СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
		ВременныйКаталогИсходников = ПолучитьИмяВременногоФайла();
		СоздатьКаталогКомандаСистемы(ВременныйКаталогИсходников);
		СтруктураОписанияEpf.КаталогИсходников = ВременныйКаталогИсходников;
		
		ПутьКШаблону = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "lib/TemplateEpf";
		Если ГенерироватьУФ Тогда
			ПутьКШаблону = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "lib/TemplateEpfUF";
		КонецЕсли;
		
		Если Объект.ВерсияПоставки = "single" Тогда
			ПутьКШаблону = ПолучитьИмяВременногоФайла();
			СоздатьКаталогКомандаСистемы(ПутьКШаблону);
			СоздатьКаталогКомандаСистемы(ДополнитьСлешВПуть(ПутьКШаблону) + "Обработка");
			СоздатьКаталогКомандаСистемы(ДополнитьСлешВПуть(ПутьКШаблону) + "Обработка\Forms\Форма");
			СоздатьКаталогКомандаСистемы(ДополнитьСлешВПуть(ПутьКШаблону) + "Обработка\Forms\Форма\Ext");
			СоздатьКаталогКомандаСистемы(ДополнитьСлешВПуть(ПутьКШаблону) + "Обработка\Forms\Форма\Ext\Form");
			ДанныеСлужебныйКеш = ДанныеСлужебныйКешГенерацияEPF();
			Для Каждого ДанныеФайлаКеш Из ДанныеСлужебныйКеш Цикл
				Если ДанныеФайлаКеш.Имя = "Обработка.xml" Тогда
					ПутьКФайлу = ДополнитьСлешВПуть(ПутьКШаблону) + "Обработка.xml";
					ДанныеФайлаКеш.ДвоичныеДанные.Записать(ПутьКФайлу);
				ИначеЕсли ДанныеФайлаКеш.Имя = "Форма.xml" Тогда
					ПутьКФайлу = ДополнитьСлешВПуть(ПутьКШаблону) + "Обработка\Forms\Форма.xml";
					ДанныеФайлаКеш.ДвоичныеДанные.Записать(ПутьКФайлу);
				ИначеЕсли ДанныеФайлаКеш.Имя = "Form.xml" Тогда
					ПутьКФайлу = ДополнитьСлешВПуть(ПутьКШаблону) + "Обработка\Forms\Форма\Ext\Form.xml";
					ДанныеФайлаКеш.ДвоичныеДанные.Записать(ПутьКФайлу);
				ИначеЕсли ДанныеФайлаКеш.Имя = "Module.bsl" Тогда
					ПутьКФайлу = ДополнитьСлешВПуть(ПутьКШаблону) + "Обработка\Forms\Форма\Ext\Form\Module.bsl";
					ДанныеФайлаКеш.ДвоичныеДанные.Записать(ПутьКФайлу);
				КонецЕсли;	 
			КонецЦикла;	 
		КонецЕсли;	 
		
		
		ФайлШаблон = Новый Файл(ПутьКШаблону);
		ПутьКШаблону = ФайлШаблон.ПолноеИмя;
		КопироватьКаталогКомандаСистемы(ПутьКШаблону, ВременныйКаталогИсходников);
	КонецЕсли;
	
	Если Не СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
		СтруктураОписанияEpf.ВременноеИмяМодуля = ДополнитьСлешВПуть(СтруктураОписанияEpf.КаталогИсходников) + "Обработка/Ext/ObjectModule.bsl";
		Если ГенерироватьУФ Тогда
			СтруктураОписанияEpf.ВременноеИмяМодуля = ДополнитьСлешВПуть(СтруктураОписанияEpf.КаталогИсходников) + "Обработка/Forms/Форма/Ext/Form/Module.bsl";
		КонецЕсли;
		
		Файл = Новый Файл(СтруктураОписанияEpf.ВременноеИмяМодуля);
		СтруктураОписанияEpf.ВременноеИмяМодуля = Файл.ПолноеИмя;
		ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля, "UTF-8", , Ложь); 
		ЗТ.Закрыть();
	КонецЕсли;	 
	
	
	ФайлСуществует = ФайлСуществуетКомандаСистемы(СтруктураОписанияEpf.ИмяМодуляEpf);
	
	СтруктураОписанияEpf.ТелоМодуля = ЗагрузитьТелоМодуляВТаблицуЗначений(СтруктураОписанияEpf.ВременноеИмяМодуля);
	Если НЕ СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
		ДобавитьНачальноеЗаполнениеВМодуль(СтруктураОписанияEpf.ТелоМодуля, ШагСтрокДляМодуля, ГенерироватьУФ, ДвДанныеvbFeatureReader, Объект.СоздаватьОбластиПриГенерацииКода);
	КонецЕсли;
	
	Возврат СтруктураОписанияEpf;
КонецФункции

&НаСервере
Функция СнипетыПолучитьСнипетыПоШагам(Шаги, ДвДанныеvbFeatureReader)
	Если Объект.ВерсияПоставки = "standart" Тогда
		ВременноеИмяФайла = ПолучитьИмяВременногоФайла("epf");
		ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
		FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла, Ложь);
	Иначе
		ОбъектСервер  = РеквизитФормыВЗначение("Объект");
		FeatureReader = ОбъектСервер;
	КонецЕсли;	 
	
	Возврат FeatureReader.СнипетыПолучитьСнипетыПоШагам(Шаги);
КонецФункции

&НаСервере
Процедура ЗаполнитьПроцедуруПолучитьСписокТестов(ТелоМодуля, Снипеты, ДвДанныеvbFeatureReader, ИмяФайлаФичи, СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур)
	Если Объект.ВерсияПоставки = "standart" Тогда
		ВременноеИмяФайла = ПолучитьИмяВременногоФайла("epf");
		ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
		FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла, Ложь);
	Иначе
		ОбъектСервер  = РеквизитФормыВЗначение("Объект");
		FeatureReader = ОбъектСервер;
	КонецЕсли;	 
	
	FeatureReader.ЗаполнитьПроцедуруПолучитьСписокТестов(ТелоМодуля, Снипеты, Истина, ИмяФайлаФичи, СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);
КонецПроцедуры

&НаСервере
Процедура ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf, StepDefinition, Шаг, ШагСтрокДляМодуля, АдресСнипета, ГенерироватьУФ, ДвДанныеvbFeatureReader, СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур)
	Если Объект.ВерсияПоставки = "standart" Тогда
		ВременноеИмяФайла = ПолучитьИмяВременногоФайла("epf");
		ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
		FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла, Ложь);
	Иначе
		ОбъектСервер  = РеквизитФормыВЗначение("Объект");
		FeatureReader = ОбъектСервер;
	КонецЕсли;	 
	
	FeatureReader.ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf, StepDefinition, Шаг, ШагСтрокДляМодуля, АдресСнипета, СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур, ГенерироватьУФ, Истина);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТелоМодуляВМассивСервер(Стр)
	ТелоМодуля = ЗначениеИзСтрокиВнутр(Стр);
	ТелоМодуля.Сортировать("НомСтр");
	Массив = ТелоМодуля.ВыгрузитьКолонку("Стр");
	
	Возврат Массив;
КонецФункции

&НаКлиенте
Процедура УдалитьИзФайлаМодуляФормыУФТестМодуляФормы(ИмяФайлаФормаУФ)
	Файл = Новый Файл(ИмяФайлаФормаУФ);
	
	Если Не ФайлСуществуетКомандаСистемы(ИмяФайлаФормаУФ) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Файл <%1> не найден.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайлаФормаУФ);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ВременноеИмяФайла = ПолучитьИмяВременногоФайла("txt");
	
	ЗТ = Новый ЗаписьТекста(ВременноеИмяФайла, "UTF-8", , Истина); 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаФормаУФ, "UTF-8");
	
	НачалоМодуля = -1;
	КонецМодуля  = -1;
	
	НашлиМодуль = Ложь;
	
	КолСкобок1  = 0;
	КолСкобок2  = 0;
	НомерСтроки = 0;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		НомерСтроки = НомерСтроки + 1;
		
		КолСкобок1 = КолСкобок1 + СтрЧислоВхождений(Стр, "{");
		КолСкобок2 = КолСкобок2 + СтрЧислоВхождений(Стр, "}");
		
		Если (НачалоМодуля > 0) И НЕ НашлиМодуль Тогда
			Если Лев(Стр, 1) = "{" Тогда
				КонецМодуля = НомерСтроки;
				ЗТ.ЗаписатьСтроку(""","); 
				ЗТ.ЗаписатьСтроку(Стр); 
				НашлиМодуль = Истина;
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если (НомерСтроки > 2) И (НачалоМодуля = -1) И НЕ НашлиМодуль Тогда
			//Если (КолСкобок1 - КолСкобок2) = 1 Тогда //значит сейчас начинается модуль
			Поз = Найти(Стр, "},""");
			Если (Поз > 0) И (Прав(Стр, 1) <> ",") Тогда
				НачалоМодуля = НомерСтроки;
				
				НачалоСтроки = Лев(Стр, Поз - 1);
				
				ЗТ.ЗаписатьСтроку(НачалоСтроки + "},""//начало текста модуля"); 
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		
		Если (НачалоМодуля > 0) и НЕ НашлиМодуль Тогда
			Продолжить;
		КонецЕсли;	 
		
		ЗТ.ЗаписатьСтроку(Стр); 
		
	КонецЦикла;	
	
	Текст.Закрыть();
	ЗТ.Закрыть();
	
	
	Если Не НашлиМодуль Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Не смог найти код модуля формы в файле ИмяФайлаФормаУФ.");
	КонецЕсли;	 
	
	
	Отладка("Копирую файл " + ВременноеИмяФайла + " в " + ИмяФайлаФормаУФ);
	КопироватьФайлКомандаСистемы(ВременноеИмяФайла, ИмяФайлаФормаУФ);
	
КонецПроцедуры

&НаКлиенте
Функция УбратьСпецсимволыИзИмениОбработи(Знач Стр)
	Стр = СтрЗаменить(Стр, " ", "_");
	Стр = СтрЗаменить(Стр, "`", "");
	Стр = СтрЗаменить(Стр, "~", "");
	Стр = СтрЗаменить(Стр, "'", "");
	Стр = СтрЗаменить(Стр, ".", "");
	Стр = СтрЗаменить(Стр, ",", "");
	Стр = СтрЗаменить(Стр, ":", "");
	Стр = СтрЗаменить(Стр, ";", "");
	Стр = СтрЗаменить(Стр, "-", "_");  
	Стр = СтрЗаменить(Стр, "+", "");
	Стр = СтрЗаменить(Стр, "/", "");
	Стр = СтрЗаменить(Стр, "\", "");
	Стр = СтрЗаменить(Стр, "=", "");
	Стр = СтрЗаменить(Стр, "!", "");
	Стр = СтрЗаменить(Стр, "@", "");
	Стр = СтрЗаменить(Стр, "#", "");
	Стр = СтрЗаменить(Стр, "$", "");
	Стр = СтрЗаменить(Стр, "%", "");
	Стр = СтрЗаменить(Стр, "^", "");
	Стр = СтрЗаменить(Стр, "&", "");
	Стр = СтрЗаменить(Стр, "*", "");
	Стр = СтрЗаменить(Стр, "(", "");
	Стр = СтрЗаменить(Стр, ")", "");
	Стр = СтрЗаменить(Стр, "№", "");
	Стр = СтрЗаменить(Стр, "?", "");
	Стр = СтрЗаменить(Стр, "<", "");
	Стр = СтрЗаменить(Стр, ">", "");
	
	
	Если Лев(Стр,1) = "0" 
	 Или Лев(Стр,1) = "1"
	 Или Лев(Стр,1) = "2"
	 Или Лев(Стр,1) = "3"
	 Или Лев(Стр,1) = "4"
	 Или Лев(Стр,1) = "5"
	 Или Лев(Стр,1) = "6"
	 Или Лев(Стр,1) = "7"
	 Или Лев(Стр,1) = "8"
	 Или Лев(Стр,1) = "9"
	Тогда
		Стр = "_" + Стр;
	КонецЕсли;	 
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Процедура ЗаменитьСтрокиВФайлеОсновыОбработки(ПутьКИсходникам, ИмяОбработки)
	
	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(Новый Файл(ПутьКИсходникам + "/" + ИмяОбработки + ".xml"));
	МассивФайлов.Добавить(Новый Файл(ПутьКИсходникам + "/" + ИмяОбработки +  "/Forms/Форма/Ext/Form.xml"));
	
	
	Для Каждого Файл Из МассивФайлов Цикл
		Если НЕ ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя) Тогда
			Продолжить;
		КонецЕсли;	 
		
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(Файл.ПолноеИмя, "UTF-8");
		
		ВременноеИмяФайла = Файл.ПолноеИмя + "_Temp";
		ЗТ = Новый ЗаписьТекста(ВременноеИмяФайла, "UTF-8", , Истина); 
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
			
			Стр = СтрЗаменить(Стр, "<Name>Обработка</Name>", "<Name>" + ИмяОбработки + "</Name>");
			Стр = СтрЗаменить(Стр, "<v8:content>Обработка</v8:content>", "<v8:content>" + ИмяОбработки + "</v8:content>");
			Стр = СтрЗаменить(Стр, "ExternalDataProcessor.Обработка.", "ExternalDataProcessor." + ИмяОбработки + ".");
			Стр = СтрЗаменить(Стр, "ExternalDataProcessorObject.Обработка", "ExternalDataProcessorObject." + ИмяОбработки);
			
			ЗТ.ЗаписатьСтроку(Стр); 
		КонецЦикла;
		
		ЗТ.Закрыть();
		Текст.Закрыть();
		Текст = "";
		
		УдалитьФайлыКомандаСистемы(Файл.ПолноеИмя);
		ПереместитьФайлКомандаСистемы(ВременноеИмяФайла, Файл.ПолноеИмя);
	КонецЦикла;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталогЕслиЕгоНет(Путь)
	Если СокрЛП(Путь) = "" Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Передан пустой путь в процедуру <СоздатьКаталогЕслиЕгоНет>.");
	КонецЕсли;	 
	СоздатьКаталогКомандаСистемы(Путь);
КонецПроцедуры

&НаКлиенте
Процедура ВывестиТекстФайлаЛога(ИмяФайла)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");
	
	Сообщить(Текст.Прочитать());
	
	Текст.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлыОбработок(БылиОшибки, СтруктураОписанияEpf, ДополнительныеПараметры = Неопределено)
	
	ЭтоУФ = Истина;
	ГенерироватьУФ = Объект.ГенерироватьУФ;
	КаталогИнструментов = Объект.КаталогИнструментов;
	ТекстМодуля = "";
	
	ТелоМодуля = СтруктураОписанияEpf.ТелоМодуля;
	Если ЭтоУФ Тогда
		ТелоМодуля = ПолучитьТелоМодуляВМассивСервер(ТелоМодуля);
	Иначе
		ТелоМодуля.Сортировать("НомСтр");
		ТелоМодуля = ТелоМодуля.ВыгрузитьКолонку("Стр");
	КонецЕсли;	 
	
	Отладка("Буду записывать " + СтруктураОписанияEpf.ВременноеИмяМодуля);
	
	УдалитьФайлыКомандаСистемы(СтруктураОписанияEpf.ВременноеИмяМодуля);
	ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля, "UTF-8", , Ложь); 
	Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
		ЗТ.ЗаписатьСтроку(СтрТелоМодуля); 
	КонецЦикла;
	ЗТ.Закрыть();
	Отладка("Записал " + СтруктураОписанияEpf.ВременноеИмяМодуля);
	
	ПутьКИсходникам = СтруктураОписанияEpf.КаталогИсходников;
	
	ИмяВременногоEPF = ПолучитьИмяВременногоФайла("epf");
	
	ИмяОбработки = УбратьСпецсимволыИзИмениОбработи(СтруктураОписанияEpf.ИмяФичи);
	Если ЗначениеЗаполнено(СтруктураОписанияEpf.РеальноеИмяОбработки) Тогда
		ИмяОбработки = СтруктураОписанияEpf.РеальноеИмяОбработки;
	КонецЕсли;	 
	
	
	КорневойФайлОбработки = ПутьКИсходникам + "/" + ИмяОбработки + ".xml";
	
	
	Если НЕ СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
		СоздатьКаталогКомандаСистемы(ПутьКИсходникам + "/" + ИмяОбработки);
		КопироватьКаталогКомандаСистемы(ПутьКИсходникам + "/Обработка", ПутьКИсходникам + "/" + ИмяОбработки);
		ПереместитьФайлКомандаСистемы(ПутьКИсходникам + "/Обработка.xml", КорневойФайлОбработки);
		
		ЗаменитьСтрокиВФайлеОсновыОбработки(ПутьКИсходникам, ИмяОбработки);
	КонецЕсли;	 
	
	
	ВременныйКаталогБазы = ПолучитьИмяВременногоФайла();
	СоздатьКаталогКомандаСистемы(ВременныйКаталогБазы);
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	ИмяФайлаOUT = ПолучитьИмяВременногоФайла("txt");
	Если ЭтоLinux Тогда
		СтрокаЗапуска = "" + ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + "1cv8 CREATEINFOBASE File="""  + ВременныйКаталогБазы +  """ /out """ + ИмяФайлаOUT + """ > """ + ИмяФайлаЛога + """";
		Отладка(СтрокаЗапуска);
		КомандаСистемы(СтрокаЗапуска);
	Иначе
		КомандаСистемы = """" + ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + "1cv8"" CREATEINFOBASE File="""  + ВременныйКаталогБазы +  """ /out """ + ИмяФайлаOUT + """ > """ + ИмяФайлаЛога + """";
		Отладка(КомандаСистемы);
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаСистемы);
	КонецЕсли;
	Если НЕ ФайлСуществуетКомандаСистемы(ВременныйКаталогБазы + "/1Cv8.1CD") Тогда
		СделатьСообщение("Файл EPF не создан. Не смог создать каталог временной базы.");
		ВывестиТекстФайлаЛога(ИмяФайлаЛога);
		ВывестиТекстФайлаЛога(ИмяФайлаOUT);
		
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Проверьте работу команды <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КомандаСистемы); 
		СделатьСообщение(ТекстСообщения);
		Возврат ;
	КонецЕсли;	 
	
	
	УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
	УдалитьФайлыКомандаСистемы(ИмяФайлаOUT);
	
	
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	ИмяФайлаOUT = ПолучитьИмяВременногоФайла("txt");
	
	Если ЭтоLinux Тогда
		СтрокаЗапуска = "" + ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + "1cv8 DESIGNER /F""" + ВременныйКаталогБазы + """ /LoadExternalDataProcessorOrReportFromFiles """ + КорневойФайлОбработки + """ """ + ИмяВременногоEPF + """ /out """ + ИмяФайлаOUT + """ > """ + ИмяФайлаЛога + """";
		Отладка(СтрокаЗапуска);
		КомандаСистемы(СтрокаЗапуска);
	Иначе
		СтрокаЗапуска = """" + ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + "1cv8"" DESIGNER /F """ + ВременныйКаталогБазы + """ /LoadExternalDataProcessorOrReportFromFiles """ + КорневойФайлОбработки + """ """ + ИмяВременногоEPF + """ /out """ + ИмяФайлаOUT + """ > """ + ИмяФайлаЛога + """";
		Отладка(СтрокаЗапуска);
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(СтрокаЗапуска);
	КонецЕсли;

	Если ФайлСуществуетКомандаСистемы(ИмяВременногоEPF) Тогда
		ФайлИмяФайлаEpf = Новый Файл(СтруктураОписанияEpf.ИмяФайлаEpf);
		Если НЕ ФайлСуществуетКомандаСистемы(ФайлИмяФайлаEpf.Путь) Тогда
			СоздатьКаталогКомандаСистемы(ФайлИмяФайлаEpf.Путь);
		КонецЕсли;	 
		ПереместитьФайлКомандаСистемы(ИмяВременногоEPF, СтруктураОписанияEpf.ИмяФайлаEpf);
		Если СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Пересоздан %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтруктураОписанияEpf.ИмяФайлаEpf); 
			СделатьСообщение(ТекстСообщения);
		Иначе	
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Создан %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтруктураОписанияEpf.ИмяФайлаEpf); 
			СделатьСообщение(ТекстСообщения);
		КонецЕсли;	 
	Иначе
		СделатьСообщение("Файл EPF не создан.");
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Проверьте работу команды <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаЗапуска); 
		СделатьСообщение(ТекстСообщения);
		ВывестиТекстФайлаЛога(ИмяФайлаЛога);
		ВывестиТекстФайлаЛога(ИмяФайлаOUT);
	КонецЕсли;
	
	УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
	УдалитьФайлыКомандаСистемы(ИмяФайлаOUT);
	
	ОчиститьСодержимоеКаталога(ВременныйКаталогБазы);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстовыйФайлОднойСтрокой(ИмяФайла)
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла, "ПолучитьТекстовыйФайлОднойСтрокой") Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");
	Возврат Текст.Прочитать();
КонецФункции	

&НаКлиенте
Процедура УдалитьИсходникиEPF(ИмяФайлаEpf)
	ФайлEpf = Новый Файл(ИмяФайлаEpf);
	Если Не ФайлСуществуетКомандаСистемы(ФайлEpf.ПолноеИмя, "УдалитьИсходникиEPF" ) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Файл <%1> не существует.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайлаEpf);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Путь = ФайлEpf.Путь + "Src";
	УдалитьКаталогКомандаСистемы(Путь);
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьGenerateEpfПродолжение()
	СтруктураПараметров = глСтруктураПараметров;
	ГенерироватьУФ          = СтруктураПараметров.ГенерироватьУФ;
	ШагСтрокДляМодуля       = СтруктураПараметров.ШагСтрокДляМодуля;
	DebugLog                = СтруктураПараметров.DebugLog;
	КаталогФич              = СтруктураПараметров.КаталогФич;
	КонтекстVanessaBehavoir = СтруктураПараметров.КонтекстVanessaBehavoir;
	КаталогиБиблиотек       = СтруктураПараметров.КаталогиБиблиотек;
	ДвДанныеvbFeatureReader = СтруктураПараметров.ДвДанныеvbFeatureReader;
	
	ДополнительныеПараметры = СтруктураПараметров.ДополнительныеПараметры;
	СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур = СтруктураПараметров.СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур;
	
	МассивФич   = СтруктураПараметров.МассивФич;
	МассивШагов = СтруктураПараметров.МассивШагов;
	Ном = 0;
	Для каждого ИмяФайлаФичи Из МассивФич Цикл
		Ном = Ном + 1;
		Шаги = МассивШагов.Получить(Ном - 1);
		
		ФайлФичи       = Новый Файл(ИмяФайлаФичи);
		ИмяТекущейФичи = ФайлФичи.ИмяБезРасширения;
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Работаю по фиче: %1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайлаФичи); 
		СделатьСообщение(ТекстСообщения);
		
		МассивДляСозданияEpf = Новый Массив;
		ОтносительныйКаталогФичи = ФайлФичи.Путь;
		Если Найти(Прав(ОтносительныйКаталогФичи, 1), "\/") > 0 Тогда
			ОтносительныйКаталогФичи = Лев(ОтносительныйКаталогФичи, СтрДлина(ОтносительныйКаталогФичи) - 1);
		КонецЕсли;	 
		
		Отладка("ОтносительныйКаталогФичи=" + ОтносительныйКаталогФичи);
		СтруктураОписанияEpf = СоздатьСтруктураОписанияEpf(ОтносительныйКаталогФичи, ФайлФичи.ИмяБезРасширения, Истина, ДвДанныеvbFeatureReader, ДополнительныеПараметры);
		
		Снипеты = СнипетыПолучитьСнипетыПоШагам(Шаги, ДвДанныеvbFeatureReader);
		ЗаполнитьПроцедуруПолучитьСписокТестов(СтруктураОписанияEpf.ТелоМодуля, Снипеты, ДвДанныеvbFeatureReader, ИмяФайлаФичи, СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);
		Для каждого ЭлемСнипет Из Снипеты Цикл
			ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf, ЭлемСнипет.StepDefinition, ЭлемСнипет.Шаг, ШагСтрокДляМодуля, ЭлемСнипет.АдресСнипета, ГенерироватьУФ, ДвДанныеvbFeatureReader, СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);
		КонецЦикла;
		
		БылиОшибки = Ложь;
		
		Если Объект.ВыводитьТекстМодуляВместоПерегенерацииEPF Тогда
			ВывестиТекстМодуляНаЭкран(СтруктураОписанияEpf);
		Иначе	
			СоздатьФайлыОбработок(БылиОшибки, СтруктураОписанияEpf, ДополнительныеПараметры);
		КонецЕсли;	 
		
	КонецЦикла; 	
	СделатьСообщение("Создание epf по фичам закончено.");
	
	
	//откроем каталог созданной epf
	Если НЕ Объект.РежимСамотестирования Тогда
		ФайлEpf = Новый Файл(СтруктураОписанияEpf.ИмяФайлаEpf); 
		Если ФайлСуществуетКомандаСистемы(ФайлEpf.ПолноеИмя) Тогда
			Если ЕстьПоддержкаАсинхронныхВызовов Тогда
				ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработатьОткрытьКаталогСозданнойEPF"", ЭтаФорма)");
				Выполнить("НачатьЗапускПриложения(ОписаниеОповещения, ФайлEpf.Путь)");
			Иначе	
				ЗапуститьПриложение("""" + ФайлEpf.Путь + """");
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ПодключитьОбработкиКлиент(ПомещенныеФайлы,ДополнительныеПараметры)
	ДанныеДляСнипетов = Новый Массив;
	
	ПолучатьСнипеты = Истина;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ПолучатьСнипеты") Тогда
			ПолучатьСнипеты = ДополнительныеПараметры.ПолучатьСнипеты;
		КонецЕсли;	 
	КонецЕсли;	 
	
	НомерФайла  = 0;
	ВсегоФайлов = ПомещенныеФайлы.Количество();
	Для Каждого ПомещенныйФайл Из ПомещенныеФайлы Цикл
		ДанныеФайла = ДополнительныеПараметры.ДанныеФайлов[ПомещенныйФайл.Имя];
		Если ДанныеФайла = Неопределено Тогда
			ДанныеФайла = ДополнительныеПараметры.ДанныеФайлов[ПомещенныйФайл.ПолноеИмя];
		КонецЕсли;	  
		
		Файл = Новый Файл(ДанныеФайла.ИмяФайла);
		ВерсияФайла = ДанныеФайла.ВерсияФайла;
		БылиОшибки = Ложь;
		
		НомерФайла = НомерФайла + 1;
		Если ПолучатьСнипеты Тогда
			Если ВсегоФайлов > 4 Тогда
				Если (НомерФайла % 4) = 0 Тогда
					Состояние("Файл №" + НомерФайла + " из " + ВсегоФайлов, Окр((НомерФайла / ВсегоФайлов)*100), СокрЛП(ДанныеФайла.Имя));
				КонецЕсли;	 
			Иначе	
				Состояние("Файл №" + НомерФайла + " из " + ВсегоФайлов, Окр((НомерФайла / ВсегоФайлов)*100), СокрЛП(ДанныеФайла.Имя));
			КонецЕсли;	 
		КонецЕсли;	 
		
		ПодключитьСнипетыИзОбработкиКлиент(Файл, ВерсияФайла, БылиОшибки, ДанныеДляСнипетов, ПомещенныйФайл.Хранение,ПолучатьСнипеты);
	КонецЦикла;	 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекстСообщенийПользователю",Объект.ТекстСообщенийПользователю);
	ДобавитьСнипетыСерверМассивом(ДанныеДляСнипетов, ДопПараметры);
КонецПроцедуры 

&НаКлиенте
Процедура ОбработчикСделатьGenerateEpf(Знач ПомещенныеФайлы, Знач ДополнительныеПараметры) Экспорт
	ПодключитьОбработкиКлиент(ПомещенныеФайлы,ДополнительныеПараметры);
	ЗаполнитьДеревоФичПродолжение();
КонецПроцедуры

&НаКлиенте
Процедура СделатьGenerateEpf(СтруктураПараметров)
		
	ГенерироватьУФ          = СтруктураПараметров.ГенерироватьУФ;
	ШагСтрокДляМодуля       = СтруктураПараметров.ШагСтрокДляМодуля;
	DebugLog                = СтруктураПараметров.DebugLog;
	КаталогФич              = СтруктураПараметров.КаталогФич;
	КонтекстVanessaBehavoir = СтруктураПараметров.КонтекстVanessaBehavoir;
	КаталогиБиблиотек       = СтруктураПараметров.КаталогиБиблиотек;
	ДвДанныеvbFeatureReader = СтруктураПараметров.ДвДанныеvbFeatureReader;
	
	ДополнительныеПараметры = Неопределено;
	Если СтруктураПараметров.Свойство("ДополнительныеПараметры") Тогда
		ДополнительныеПараметры = СтруктураПараметров.ДополнительныеПараметры;
	КонецЕсли;	 
	
	СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур       = СтруктураПараметров.СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур;
	
	
	МассивИменФайловКоторыеСовпалиСКеш = Новый Массив;
	ДанныеПоВерсиямОбработок = ПолучитьТаблицыПоТаблицаИзвестныхStepDefinition();
	
	ДанныеДляПолученияСнипетов = Новый Массив;
	ПолучитьУжеСуществующиеСнипетыИзОбработок(КаталогФич, ДанныеДляПолученияСнипетов, ДополнительныеПараметры, 
		ДанныеПоВерсиямОбработок.МассивВерсийФайловИзТаблицаИзвестныхStepDefinition, 
		ДанныеПоВерсиямОбработок.МассивИменФайловИзТаблицаИзвестныхStepDefinition, МассивИменФайловКоторыеСовпалиСКеш);
	
	Для каждого Элем Из КаталогиБиблиотек Цикл
		КаталогБиблиотеки = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);
		ПолучитьУжеСуществующиеСнипетыИзОбработок(КаталогБиблиотеки, ДанныеДляПолученияСнипетов, ДополнительныеПараметры, 
			ДанныеПоВерсиямОбработок.МассивВерсийФайловИзТаблицаИзвестныхStepDefinition, 
			ДанныеПоВерсиямОбработок.МассивИменФайловИзТаблицаИзвестныхStepDefinition, МассивИменФайловКоторыеСовпалиСКеш);
	КонецЦикла;
	
	
	СтруктураПараметров.Вставить("ДополнительныеПараметры",ДополнительныеПараметры);
	СтруктураПараметров.Вставить("МассивИменФайловКоторыеСовпалиСКеш",МассивИменФайловКоторыеСовпалиСКеш);
	СтруктураПараметров.Вставить("Путь",КаталогФич);
	СтруктураПараметров.Вставить("СписокТеговИсключение", Объект.СписокТеговИсключение);
	СтруктураПараметров.Вставить("СписокТеговОтбор", Объект.СписокТеговОтбор);
	СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога", Ложь);
	СтруктураПараметров.Вставить("Брейкпоинты", Брейкпоинты);
	СтруктураПараметров.Вставить("МассивИменКонтекстовОбработок", МассивИменКонтекстовОбработок);
	СтруктураПараметров.Вставить("РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов", Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов);
	глСтруктураПараметров = СтруктураПараметров;
	
	
	ДанныеФайлов = Новый Соответствие;
	
	ПомещаемыеФайлы = Новый Массив;
	Для Каждого Данные Из ДанныеДляПолученияСнипетов Цикл
		ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(Данные.ИмяФайла);
		ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
		
		ДанныеФайлов.Вставить(Данные.ИмяФайла,Новый Структура("Имя,ИмяФайла,ВерсияФайла",Данные.Имя,Данные.ИмяФайла,Данные.ВерсияФайла));
	КонецЦикла;	 
	
	Если ПомещаемыеФайлы.Количество() = 0 Тогда
		СделатьGenerateEpfПродолжение();
		Возврат;
	КонецЕсли;	 
	
	ПараметрыЗавершения = Новый Структура;	
	ПараметрыЗавершения.Вставить("ДанныеФайлов",ДанныеФайлов);
	Выполнить("НачатьПомещениеФайлов(Новый ОписаниеОповещения(""ОбработчикСделатьGenerateEpf"", ЭтаФорма, ПараметрыЗавершения),
		|ПомещаемыеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор)");
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОткрытьКаталогСозданнойEPF(КодВозврата, ДополнительныеПараметры) Экспорт
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстМодуляИзСтруктураОписанияEpfСервер(ТекстМодуляВнутр)
	Стр = "";
	
	Тзн = ЗначениеИзСтрокиВнутр(ТекстМодуляВнутр);
	
	Для каждого СтрТзн Из Тзн Цикл
		Стр = Стр + СтрТзн.Стр + Символы.ПС;
	КонецЦикла;
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Процедура ВывестиТекстМодуляНаЭкран(СтруктураОписанияEpf)
	Стр = ПолучитьТекстМодуляИзСтруктураОписанияEpfСервер(СтруктураОписанияEpf.ТелоМодуля);
	ТекстовыйДокумент = новый ТекстовыйДокумент;
	ТекстовыйДокумент.ДобавитьСтроку(Стр);
	ТекстовыйДокумент.Показать();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьEPFПоМассивуФич(СтруктураПараметров)
	СделатьСообщение("Запускаю генерацию epf.");
	СделатьGenerateEpf(СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьШаблоныОбработокПродолжение(ДополнительныеПараметры = Неопределено)
	Если Не Объект.РежимСамотестирования Тогда
		ОчиститьСообщения();
	КонецЕсли;  
	СделатьПараметрыКорректными();	
	
	Если Объект.ВерсияПоставки = "standart" Тогда
		ДвДанныеvbFeatureReader = Новый ДвоичныеДанные(ПолучитьПутьКFeatureReader());
	Иначе	
		ДвДанныеvbFeatureReader = Неопределено;
	КонецЕсли;	 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КаталогИнструментов", Объект.КаталогИнструментов);
	СтруктураПараметров.Вставить("КаталогФич", Объект.КаталогФич);
	СтруктураПараметров.Вставить("DebugLog", Объект.DebugLog);
	СтруктураПараметров.Вставить("ГенерироватьУФ", Объект.ГенерироватьУФ);
	СтруктураПараметров.Вставить("СоздаватьОбластиПриГенерацииКода", Объект.СоздаватьОбластиПриГенерацииКода);
	СтруктураПараметров.Вставить("ШагСтрокДляМодуля", ШагСтрокДляМодуля);
	СтруктураПараметров.Вставить("КаталогиБиблиотек", Объект.КаталогиБиблиотек);
	СтруктураПараметров.Вставить("СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур", Объект.СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);
	
	МассивФич   = Новый Массив;
	МассивШагов = Новый Массив;
	ПолучитьСписокФичПоДеревуИСоздатьEPFПоМассивуФич(СтруктураПараметров, МассивФич, МассивШагов);
	
	СтруктураПараметров.Вставить("МассивФич", МассивФич);
	СтруктураПараметров.Вставить("МассивШагов", МассивШагов);
	СтруктураПараметров.Вставить("ДвДанныеvbFeatureReader", ДвДанныеvbFeatureReader);
	СтруктураПараметров.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	СоздатьEPFПоМассивуФич(СтруктураПараметров);
	ЭтаФорма.Активизировать();
	
КонецПроцедуры

// Функция ДополнитьСлешВПуть
//
// Параметры:
// ИмяКаталога
//
// Описание:
// Функция дополняет и возвращает слеш в путь в конец строки, если он отсутствует
//
&НаКлиенте
Функция ДополнитьСлешВПуть(Знач Каталог) Экспорт
	разделитель = "\";
	
	Если ПустаяСтрока(Каталог) Тогда
		Возврат Каталог;
	КонецЕсли;
	Если ЭтоLinux Тогда
		разделитель = "/";
		Каталог = СтрЗаменить(Каталог, "\", "/");
	КонецЕсли;
		
	Если Прав(Каталог, 1) <> разделитель Тогда
		Каталог = Каталог + разделитель;
	КонецЕсли;
	Возврат Каталог;
КонецФункции

&НаКлиенте
Функция НайтиСтрокуСценарияЧерезРодителя(СтрокаДерева, ЭтоПример,ЭтоШагКонтекста)
	ТекСтрокаДерева = СтрокаДерева;
	
	Пока Истина Цикл
		Если ТекСтрокаДерева = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	 
		
		Если (ТекСтрокаДерева.Тип = "Сценарий") Тогда
			Если ТекСтрокаДерева.ДопТип = "Контекст" Тогда
				ЭтоШагКонтекста = Истина;
			КонецЕсли;	 
			Возврат ТекСтрокаДерева;
		КонецЕсли;	 
		Если (ТекСтрокаДерева.Тип = "Пример") Тогда
			ЭтоПример = Истина;
			Возврат ТекСтрокаДерева;
		КонецЕсли;	 
		
		ТекСтрокаДерева = ТекСтрокаДерева.ПолучитьРодителя();
	КонецЦикла;
КонецФункции	


&НаКлиенте
Функция ПолучитьМассивСценариевФичи(СтрокаДерева)
	Массив = Новый Массив;
	
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	Для Каждого Строка Из ПодчиненныеСтроки Цикл
		Если Строка.Тип <> "Сценарий" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Строка.ДопТип = "Контекст" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Массив.Добавить(Строка.ИдСтроки);
	КонецЦикла;	
	
	Возврат Массив;
КонецФункции	

&НаКлиенте
Функция НайтиСтрокуФичиЧерезРодителя(Стр)
	СтрокаДерева = Стр;
	Пока Истина Цикл
		Если СтрокаДерева.Тип = "Фича" Тогда
			Возврат СтрокаДерева;
		КонецЕсли;	 
		
		СтрокаДерева = СтрокаДерева.ПолучитьРодителя();
		Если СтрокаДерева = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЦикла;
КонецФункции	


&НаКлиенте
Функция ИмяФайлаФичиИзПолногоПути(ПолныйПуть)
	Поз = Найти(НРег(ПолныйПуть),".feature");
	
	Если Поз > 0 Тогда
		Возврат СокрЛП(Лев(ПолныйПуть,Поз + СтрДлина(".feature") - 1));
	КонецЕсли;	
	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Функция ЭтаФормаTestClientУжеОбрабатывалась(ИмяТекущейФормыTestClient)
	Для каждого Элем Из МассивСостояниеФормTestClient Цикл
		Если Элем.ИмяФормы = ИмяТекущейФормыTestClient Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции	



//{работа с TestClient

&НаСервереБезКонтекста
Функция СтрокиОжидаемойТаблицыСодержатсяВТаблицеTestclientСервер(ОжидаемаяТаблица,ТаблицаTestClient,СтрокаОшибки,СтруктураПараметров)
	Таблица1 = Новый ТаблицаЗначений;
	Таблица2 = Новый ТаблицаЗначений;
	Для Каждого Элем Из ОжидаемаяТаблица[0] Цикл
		Таблица1.Колонки.Добавить(Элем.Ключ,,Элем.Значение);
		Таблица2.Колонки.Добавить(Элем.Ключ,,Элем.Значение);
	КонецЦикла;	
	
	//Проверим, что в таблице2 есть все нужные колонки
	
	Для Каждого Колонка Из Таблица2.Колонки Цикл
		Попытка
			Значение = ТаблицаTestClient[0][Колонка.Заголовок];
			Если Значение = Неопределено Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("В таблице не найдена колонка <%1>",СтруктураПараметров.ТекстСообщенийПользователю);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Колонка.Заголовок);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		Исключение
			ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("В таблице не найдена колонка <%1>",СтруктураПараметров.ТекстСообщенийПользователю);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Колонка.Заголовок);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЦикла;	
	
	
	//проверим вхождение строк
	
	НомОжидаемаяТаблица = 0;
	
	Для Каждого СтрокаОжидаемаяТаблица Из ОжидаемаяТаблица Цикл
		НашлиСтроку = Ложь; 
		
		НомОжидаемаяТаблица = НомОжидаемаяТаблица + 1;
		Если НомОжидаемаяТаблица = 1 Тогда
			Продолжить;
		КонецЕсли;	 
		
		
		Для Каждого СтрокаТаблицаTestClient Из ТаблицаTestClient Цикл
			ВсеКолонкиСовпали = Истина;
			Для Каждого Колонка Из Таблица1.Колонки Цикл
				ЗначениеОжидаемаяТаблица  = СтрокаОжидаемаяТаблица[Колонка.Имя];
				ЗначениеТаблицаTestClient = СтрокаТаблицаTestClient[Колонка.Заголовок];
				
				Если ЗначениеОжидаемаяТаблица <> ЗначениеТаблицаTestClient Тогда
					ВсеКолонкиСовпали = Ложь;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
			
			Если ВсеКолонкиСовпали Тогда
				НашлиСтроку = Истина; 
				Прервать;
			КонецЕсли;	 
			
		КонецЦикла;	
		
		Если Не НашлиСтроку Тогда
			ЗначениеСтроки = "|";
			Для Каждого Колонка Из Таблица1.Колонки Цикл
				ЗначениеСтроки = " " + ЗначениеСтроки + СтрокаОжидаемаяТаблица[Колонка.Имя] + " |" 
			КонецЦикла;	
			
			СтрокаОшибки = "Строка <" + ЗначениеСтроки + "> не найдена";
			Возврат Ложь;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции	

&НаКлиенте
Процедура ОчиститьМассивИД(МассивИд,МассивЭлементов)
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество()-1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество()-Ккк-1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзМассиваПоляТаблицTestClient(ТекущаяФорма,МассивЭлементов)
	МассивИд = Новый Массив;
	
	ТаблицыФормы = НайтиТаблицыФормыTestClient(ТекущаяФорма);
	Для Каждого ТаблицаФормы Из ТаблицыФормы Цикл
		Ид = -1;
		Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
			Ид = Ид + 1;
			ЭлементТаблицы = ТаблицаФормы.НайтиОбъект(,,ПроверяемыйЭлемент.Имя);
			Если ЭлементТаблицы <> Неопределено Тогда
				МассивИд.Добавить(Ид);
			КонецЕсли;	 
		КонецЦикла;	
		
		ОчиститьМассивИД(МассивИд,МассивЭлементов);
		МассивИд = Новый Массив;
	КонецЦикла;	
КонецПроцедуры 

&НаКлиенте
Процедура ОставитьВМассивеТолькоПоляГиперссылок(МассивЭлементов)
	МассивИд = Новый Массив;
	
	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Если ПроверяемыйЭлемент.Вид <> ВидПоляФормы.ПолеНадписи
			И ПроверяемыйЭлемент.Вид <> ВидДекорацииФормы.Надпись
			И ПроверяемыйЭлемент.Вид <> ВидДекорацииФормы.Картинка
			Тогда
			МассивИд.Добавить(Ид);
		КонецЕсли;	 
	КонецЦикла;	
	
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество()-1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество()-Ккк-1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьГруппыФормыИзМассива(МассивЭлементов)
	МассивИд = Новый Массив;
	
	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Если ТипЗнч(ПроверяемыйЭлемент) = Тип("ТестируемаяГруппаФормы") Тогда
			МассивИд.Добавить(Ид);
		КонецЕсли;	 
	КонецЦикла;	
	
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество()-1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество()-Ккк-1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзМассиваПоляВКоторыеНеВозможенВводТекстаTestClient(МассивЭлементов)
	МассивИд = Новый Массив;
	
	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Если ПроверяемыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи Тогда
			МассивИд.Добавить(Ид);
		ИначеЕсли ПроверяемыйЭлемент.Вид = ВидПоляФормы.ПолеКартинки Тогда
			МассивИд.Добавить(Ид);
		ИначеЕсли ПроверяемыйЭлемент.Вид = ВидПоляФормы.ПолеПереключателя Тогда
			МассивИд.Добавить(Ид);
		ИначеЕсли ПроверяемыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка Тогда
			МассивИд.Добавить(Ид);
		КонецЕсли;	 	
		
		Попытка
			//попытка нужна, т.к. элемент может не позволить проверить своё состояние
			Если НЕ ПроверяемыйЭлемент.ТекущаяВидимость() Тогда
				МассивИд.Добавить(Ид);
			ИначеЕсли НЕ ПроверяемыйЭлемент.ТекущаяДоступность() Тогда
				МассивИд.Добавить(Ид);
			ИначеЕсли ПроверяемыйЭлемент.ТекущееТолькоПросмотр() Тогда
				МассивИд.Добавить(Ид);
			КонецЕсли;	 
		Исключение
		КонецПопытки;
	КонецЦикла;	
	
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество()-1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество()-Ккк-1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура УдалитьИзМассиваВсеКромеНужногоВидаTestClient(МассивЭлементов,НужныйВидПоляФормы)
	МассивИд = Новый Массив;
	
	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Если ПроверяемыйЭлемент.Вид <> НужныйВидПоляФормы Тогда
			МассивИд.Добавить(Ид);
		КонецЕсли;
	КонецЦикла;	
	
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество()-1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество()-Ккк-1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура УдалитьНевидимыеЭлементыИзМассиваЭлементовTestClient(МассивЭлементов)
	МассивИд = Новый Массив;
	
	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Попытка
			//Могут быть объекты, у которых нет метода ТекущаяВидимость()
			Если НЕ ПроверяемыйЭлемент.ТекущаяВидимость() Тогда
				МассивИд.Добавить(Ид);
			КонецЕсли;	 
		Исключение
			МассивИд.Добавить(Ид);
		КонецПопытки;
	КонецЦикла;	
	
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество()-1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество()-Ккк-1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура УдалитьНедоступныеДляИнтерактивнойРаботыПользователюЭлементыИзМассиваЭлементовTestClient(МассивЭлементов,ДопПараметры) Экспорт
	МассивИд = Новый Массив;
	ИсключитьГруппы = Истина;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ИсключитьГруппы") Тогда
			ИсключитьГруппы = ДопПараметры.ИсключитьГруппы;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Попытка
			//попытка нужна, т.к. элемент может не позволить проверить своё состояние
			Если ТипЗнч(ПроверяемыйЭлемент) = Тип("ТестируемаяГруппаФормы") и ИсключитьГруппы Тогда
				МассивИд.Добавить(Ид);
			ИначеЕсли НЕ ПроверяемыйЭлемент.ТекущаяВидимость() Тогда
				МассивИд.Добавить(Ид);
			ИначеЕсли НЕ ПроверяемыйЭлемент.ТекущаяДоступность() Тогда
				МассивИд.Добавить(Ид);
			ИначеЕсли ПроверяемыйЭлемент.ТекущееТолькоПросмотр() Тогда
				Если ТипЗнч(ПроверяемыйЭлемент) <> Тип("ТестируемаяДекорацияФормы") Тогда
					//Если картинка или надпись является гиперссылкой, то по ней можно кликать в режиме ТолькоПросмотр.
					МассивИд.Добавить(Ид);
				КонецЕсли;	 
			КонецЕсли;	 
		Исключение
		КонецПопытки;
	КонецЦикла;	
	
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество()-1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество()-Ккк-1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ОставитьТолькоСтраницыВМассивеЭлементов(МассивЭлементов)
	МассивИд = Новый Массив;
	
	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Если ПроверяемыйЭлемент.Вид <> ВидГруппыФормы.Страница Тогда
			МассивИд.Добавить(Ид);
		КонецЕсли;	 
	КонецЦикла;	
	
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество()-1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество()-Ккк-1]);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура НайтиРеквизитВМассивеФорм(МассивФорм,ПолеРеквизит,ИмяРеквизита,ИскатьПоИмени,ТипПоля,ДопПараметры)
	Для каждого ТекущаяФорма Из МассивФорм Цикл
		
		Если ИскатьПоИмени = Неопределено Тогда
			ОпределитьРежимПоискаЭлементаНаФорме(ИмяРеквизита,ИскатьПоИмени);
		КонецЕсли;	 
		
		Попытка
			Если ИскатьПоИмени Тогда
				МассивЭлементов = ТекущаяФорма.НайтиОбъекты(ТипПоля, , ИмяРеквизита);
			Иначе
				МассивЭлементов = ТекущаяФорма.НайтиОбъекты(ТипПоля, ИмяРеквизита);
			КонецЕсли;	 
		Исключение
			//некоторые служебные формы могут вызвать исключение на поиск объектов
			Продолжить;
		КонецПопытки;
		
		Если МассивЭлементов = Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если МассивЭлементов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		ОбработатьМассивЭлементовTestClient(ТекущаяФорма,МассивЭлементов,ИмяРеквизита,ДопПараметры);
		
		ПолеРеквизит = МассивЭлементов[0];
		Если ДопПараметры <> Неопределено Тогда
			ДопПараметры.Вставить("ТекущаяФормаЭлемента",ТекущаяФорма);
		КонецЕсли;	 
		
		Возврат;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьМассивЭлементовTestClient(КонтейнерЭлементов,МассивЭлементов,ИмяРеквизита,ДопПараметры)
	Если ТипЗнч(МассивЭлементов) = Тип("ФиксированныйМассив") Тогда
		МассивЭлементов = Новый Массив(МассивЭлементов); //преобразуем фиксированный массив в обычный
	КонецЕсли;	 
	
	Если МассивЭлементов.Количество() > 1 Тогда
		ИсключатьНевидимыеЭлементы = Истина;
		Если ДопПараметры <> Неопределено Тогда
			Если ДопПараметры.Свойство("ИсключатьНевидимыеЭлементы") Тогда
				ИсключатьНевидимыеЭлементы = ДопПараметры.ИсключатьНевидимыеЭлементы;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если ИсключатьНевидимыеЭлементы Тогда
			УдалитьНевидимыеЭлементыИзМассиваЭлементовTestClient(МассивЭлементов);
		КонецЕсли;	 
	КонецЕсли;
	
	Если МассивЭлементов.Количество() > 1 Тогда
		ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы = Истина;
		Если ДопПараметры <> Неопределено Тогда
			Если ДопПараметры.Свойство("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы") Тогда
				ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы = ДопПараметры.ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы Тогда
			УдалитьНедоступныеДляИнтерактивнойРаботыПользователюЭлементыИзМассиваЭлементовTestClient(МассивЭлементов,ДопПараметры);
		КонецЕсли;	 
	КонецЕсли;
	
	Если (ДопПараметры <> Неопределено) И (МассивЭлементов.Количество() > 1) Тогда
		Если МассивЭлементов.Количество() > 1 Тогда
			ПоискЗакладки = Ложь;
			Если ДопПараметры.Свойство("ПоискЗакладки",ПоискЗакладки) Тогда
				Если ПоискЗакладки = Истина Тогда
					ОставитьТолькоСтраницыВМассивеЭлементов(МассивЭлементов);
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;
		
		Если МассивЭлементов.Количество() > 1 Тогда
			ИскатьТолькоПоляВКоторыеВозможенВводТекста = Ложь;
			ДопПараметры.Свойство("ИскатьТолькоПоляВКоторыеВозможенВводТекста",ИскатьТолькоПоляВКоторыеВозможенВводТекста);
			Если ИскатьТолькоПоляВКоторыеВозможенВводТекста = Истина Тогда
				УдалитьИзМассиваПоляВКоторыеНеВозможенВводТекстаTestClient(МассивЭлементов);
			КонецЕсли;	 
		КонецЕсли;
		
		Если МассивЭлементов.Количество() > 1 Тогда
			ОставитьТолькоФлаги = Ложь;
			ДопПараметры.Свойство("ОставитьТолькоФлаги",ОставитьТолькоФлаги);
			Если ОставитьТолькоФлаги = Истина Тогда
				УдалитьИзМассиваВсеКромеНужногоВидаTestClient(МассивЭлементов,ВидПоляФормы.ПолеФлажка);
			КонецЕсли;	 
		КонецЕсли;
		
		Если МассивЭлементов.Количество() > 1 Тогда
			ОставитьТолькоПереключатели = Ложь;
			ДопПараметры.Свойство("ОставитьТолькоПереключатели",ОставитьТолькоПереключатели);
			Если ОставитьТолькоПереключатели = Истина Тогда
				УдалитьИзМассиваВсеКромеНужногоВидаTestClient(МассивЭлементов,ВидПоляФормы.ПолеПереключателя);
			КонецЕсли;	 
		КонецЕсли;
		
		Если МассивЭлементов.Количество() > 1 Тогда
			ИскатьТолькоПоляГиперссылок = Ложь;
			ДопПараметры.Свойство("ИскатьТолькоПоляГиперссылок",ИскатьТолькоПоляГиперссылок);
			Если ИскатьТолькоПоляГиперссылок = Истина Тогда
				ОставитьВМассивеТолькоПоляГиперссылок(МассивЭлементов);
			КонецЕсли;	 
		КонецЕсли;
		
		Если МассивЭлементов.Количество() > 1 Тогда
			ИсключитьГруппы = Ложь;
			ДопПараметры.Свойство("ИсключитьГруппы",ИсключитьГруппы);
			Если ИсключитьГруппы = Истина Тогда
				ИсключитьГруппыФормыИзМассива(МассивЭлементов);
			КонецЕсли;	 
		КонецЕсли;
	КонецЕсли;	 
	
	Если МассивЭлементов.Количество() > 1 Тогда
		//это самое тяжелое по времени действие
		УдалитьИзМассиваПоляТаблицTestClient(КонтейнерЭлементов,МассивЭлементов);
	КонецЕсли;	 
	
	Если МассивЭлементов.Количество() > 1  Тогда
		ВывестиСообщениеОТомЧтоПоЗаголовкуНайденоБольшеОдногоЭлемента(МассивЭлементов, ИмяРеквизита);
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Найдено более одного поля формы с заголовком <%1>. Рекомендуется искать элемент по имени.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если МассивЭлементов.Количество() = 0 Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Реквизит <%1> не найден.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура НайтиРеквизитВАктивномОкне(ПолеРеквизит,ИмяРеквизита,ИскатьПоИмени,ТипПоля,ДопПараметры)
	Если ИскатьПоИмени = Неопределено Тогда
		ОпределитьРежимПоискаЭлементаНаФорме(ИмяРеквизита,ИскатьПоИмени);
	КонецЕсли;	 
	
	Если ОбъектКонтекст.Свойство("АктивноеОкно") И ОбъектКонтекст.АктивноеОкно <> Неопределено Тогда
		ТекущееОкно = ОбъектКонтекст.АктивноеОкно;
	Иначе	
		ТекущееОкно = ПолучитьАктивноеОкноИзТестовоеПриложение(ДопПараметры);
	КонецЕсли;	 
	
	Попытка
		Если ИскатьПоИмени Тогда
			МассивЭлементов = Новый Массив();
			МассивЭлементов.Добавить(ТекущееОкно.НайтиОбъект(ТипПоля, , ИмяРеквизита));
		Иначе
			МассивЭлементов = ТекущееОкно.НайтиОбъекты(ТипПоля, ИмяРеквизита);
		КонецЕсли;	 
	Исключение
		//некоторые служебные формы могут вызвать исключение на поиск объектов
		Возврат;
	КонецПопытки;
	
	Если МассивЭлементов = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Если МассивЭлементов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	ОбработатьМассивЭлементовTestClient(ТекущееОкно,МассивЭлементов,ИмяРеквизита,ДопПараметры);
	
	ПолеРеквизит = МассивЭлементов[0];
КонецПроцедуры

&НаКлиенте
Функция ПолучитьАктивноеОкноИзКонтекста()
	Если ОбъектКонтекст.Свойство("АктивноеОкно") Тогда
		Если ОбъектКонтекст.АктивноеОкно <> Неопределено Тогда
			Возврат ОбъектКонтекст.АктивноеОкно;
		КонецЕсли;	 
	КонецЕсли;
	
	Возврат ПолучитьАктивноеОкноИзТестовоеПриложение();
КонецФункции	

&НаКлиенте
Функция ПолучитьТекстЗаголовокРеквизитаРодитель(ТекстЗаголовка, ИмяРодителя)
	Возврат ТекстЗаголовка + "_" + ИмяРодителя;
КонецФункции	

&НаКлиенте
Функция ПолучитьСвойстваОбъекта(ЭлементФормы, МассивЗаголовковПолей, МассивЗаголовковКнопок, ИмяРодителя)
	Рез = Новый Структура;
	Рез.Вставить("Имя", ЭлементФормы.Имя);
	Рез.Вставить("ТекстЗаголовка", ЭлементФормы.ТекстЗаголовка);
	Рез.Вставить("ИмяРодителя", ИмяРодителя);
	
	Если ТипЗнч(ЭлементФормы) = Тип("ТестируемоеПолеФормы") Тогда
		МассивЗаголовковПолей.Добавить(ЭлементФормы.ТекстЗаголовка);
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТестируемаяКнопкаФормы") Тогда
		МассивЗаголовковКнопок.Добавить(ЭлементФормы.ТекстЗаголовка);
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТестируемаяГруппаФормы") Тогда
		МассивЗаголовковПолей.Добавить(ЭлементФормы.ТекстЗаголовка);
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТестируемаяДекорацияФормы") Тогда
		МассивЗаголовковКнопок.Добавить(ЭлементФормы.ТекстЗаголовка);
	КонецЕсли;	 
	
	Возврат Рез;
КонецФункции	

&НаКлиенте
Функция ПолучитьЭлементыФормыИерархически(Элементформы, МассивЗаголовковПолей, МассивЗаголовковКнопок)
	Рез = Новый Массив;
	
	НайденныеОбъекты = Элементформы.ПолучитьПодчиненныеОбъекты();
	Для каждого Элем Из НайденныеОбъекты Цикл
		
		Если ТипЗнч(Элементформы) = Тип("ТестируемаяФорма") Тогда
			СвойстваОбъекта = ПолучитьСвойстваОбъекта(Элем, МассивЗаголовковПолей, МассивЗаголовковКнопок, Элементформы.ИмяФормы);
		Иначе	
			СвойстваОбъекта = ПолучитьСвойстваОбъекта(Элем, МассивЗаголовковПолей, МассивЗаголовковКнопок, Элементформы.Имя);
		КонецЕсли;	 
		
		Рез.Добавить(СвойстваОбъекта);
		
		ПодчиненныеОбъекты = ПолучитьЭлементыФормыИерархически(Элем, МассивЗаголовковПолей, МассивЗаголовковКнопок);
		СвойстваОбъекта.Вставить("ПодчиненныеОбъекты", ПодчиненныеОбъекты);
		
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ДобавитьСостояниеФормыTestclient(ТекущаяФорма)
	СостояниеФормы = Новый Структура;
	СостояниеФормы.Вставить("ИмяФормы", ТекущаяФорма.ИмяФормы);
	СостояниеФормы.Вставить("ТекстЗаголовка", ТекущаяФорма.ТекстЗаголовка);
	МассивЗаголовковПолей = Новый Массив;
	СостояниеФормы.Вставить("МассивЗаголовковПолей", МассивЗаголовковПолей);
	
	МассивЗаголовковКнопок = Новый Массив;
	СостояниеФормы.Вставить("МассивЗаголовковКнопок", МассивЗаголовковКнопок);
	
	
	МассивСостояниеФормTestClient.Добавить(СостояниеФормы);
	Попытка
		
		МассивОбъектов = ПолучитьЭлементыФормыИерархически(ТекущаяФорма, МассивЗаголовковПолей, МассивЗаголовковКнопок);
		
	Исключение
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("ДобавитьСостояниеФормыTestclient:%1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеОшибки());
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
	КонецПопытки;
	
	СостояниеФормы.Вставить("МассивОбъектов", МассивОбъектов);
	Отладка("Запомнил имена реквизитов формы: " + ТекущаяФорма.ИмяФормы);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСостояниеТекущейФормыTestClient()
	ОкноПриложения = ПолучитьАктивноеОкноИзТестовоеПриложение();
	МассивФорм     = ОкноПриложения.НайтиОбъекты(Тип("ТестируемаяФорма"));
	Для каждого ТекущаяФорма Из МассивФорм Цикл
		ИмяТекущейФормыTestClient = ТекущаяФорма.ИмяФормы;
		
		Если ЭтаФормаTestClientУжеОбрабатывалась(ИмяТекущейФормыTestClient) Тогда
			Возврат;
		КонецЕсли;	 
		
		ДобавитьСостояниеФормыTestclient(ТекущаяФорма);
	КонецЦикла;
	
	
КонецПроцедуры

//}работа с TestClient

&НаКлиенте
Процедура ОпросЭлементовФормTestClient()
	Если ИдетОпросЭлементовФормTestClient Тогда
		Возврат;
	КонецЕсли;	 
	
	ИдетОпросЭлементовФормTestClient = Истина;
	Попытка
		ЗаполнитьСостояниеТекущейФормыTestClient();
	Исключение
		Отладка("" + ОписаниеОшибки());
	КонецПопытки;
	
	ИдетОпросЭлементовФормTestClient = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюЗаписиДействийПользователя(МоментЗаписи)

	Если МоментЗаписи = "НачатьЗапись" Тогда
		Элементы.кнНачатьЗаписьДействийПользователя.Видимость        = Ложь;
		Элементы.кнПриостановитьЗаписьДействийПользователя.Видимость = Истина;
		
	ИначеЕсли МоментЗаписи = "ПриостановитьЗапись" Тогда
		Элементы.кнПриостановитьЗаписьДействийПользователя.Видимость = Ложь;
		Элементы.кнПродолжитьЗаписьДействийПользователя.Видимость    = Истина;

	ИначеЕсли МоментЗаписи = "ПродолжитьЗапись" Тогда
		Элементы.кнПриостановитьЗаписьДействийПользователя.Видимость = Истина;
		Элементы.кнПродолжитьЗаписьДействийПользователя.Видимость    = Ложь;
		
	ИначеЕсли МоментЗаписи = "ЗавершитьЗапись" Тогда
		Элементы.кнНачатьЗаписьДействийПользователя.Видимость        = Истина;
		Элементы.кнПриостановитьЗаписьДействийПользователя.Видимость = Ложь;
		Элементы.кнПродолжитьЗаписьДействийПользователя.Видимость    = Ложь;
		
	КонецЕсли;

КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьКод1СИзUILogToScriptСервер(ДвоичныеДанные, Стр)
	ИмяВременногоEPF = ПолучитьИмяВременногоФайла("epf");
	ДвоичныеДанные.Записать(ИмяВременногоEPF);
	
	Обработка                           = ВнешниеОбработки.Создать(ИмяВременногоEPF);
	Обработка.ObjectSearch              = 2;
	Обработка.SplitScriptIntoProcedures = Истина;
	Обработка.MainProcedureName         = "ВыполнитьДействия";
	
	Возврат Обработка.Convert(Стр);
	
КонецФункции	

&НаКлиенте
Процедура ОбработатьПолученныйКодUILogToScript(Стр)
	Стр = СтрЗаменить(Стр, "ТестовоеПриложение.НайтиОбъект", "КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект");
	Стр = СтрЗаменить(Стр, "ТестовоеПриложение.ПолучитьПодчиненныеОбъекты()", "КонтекстСохраняемый.ТестовоеПриложение.ПолучитьПодчиненныеОбъекты()");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПервоеКлючевоеСлово(СчетчикДействий, ТипДействия = Неопределено)
	СчетчикДействий = СчетчикДействий + 1;
	Если (СчетчикДействий > 1) и (ТипДействия = "ОткрытиеОкна") Тогда
		Возврат "	Тогда";
	КонецЕсли;	 
	
	Если СчетчикДействий = 1 Тогда
		Возврат "	Когда";
	Иначе
		Возврат "	И";
	КонецЕсли;	 
КонецФункции	

&НаКлиенте
Функция ПолучитьТекстФичиИзКодаUILogToScriptOld(Знач Стр)
	Результат = "#language: ru
	|
	|Функционал: <описание фичи>
	|
	|Как <Роль> я хочу
	|<описание функционала> 
	|чтобы <бизнес-эфект> 
	|
	|Сценарий: <описание сценария> 
	|
	|";
	
	
	
	ИмяФайла = ПолучитьИмяВременногоФайла("txt");
	ЗТ = Новый ЗаписьТекста(ИмяФайла, "UTF-8", , Истина); 
	ЗТ.ЗаписатьСтроку(Стр); 
	ЗТ.Закрыть();
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");
	
	СтрПоиска = "";
	
	ТипДействия = "";
	ИмяОкнаТестируемоеОкноКлиентскогоПриложения = "";
	ИмяТестируемойФормы                         = "";
	ИмяЭлементаФормы                            = "";
	СчетчикДействий                             = 0;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если Найти(НРег(Стр), НРег("ОкноПриложенияОсновноеCommandInterface.НайтиОбъект(Тип(""ТестируемаяКнопкаКомандногоИнтерфейса"")")) > 0 Тогда
			//это нажатие кнопки командного интерфейса
			ТипДействия = "ТестируемаяКнопкаКомандногоИнтерфейса";
			Поз = Найти(НРег(Стр), НРег("ОкноПриложенияОсновноеCommandInterface.НайтиОбъект(Тип(""ТестируемаяКнопкаКомандногоИнтерфейса"")"));
			
			ПромСтр = Сред(Стр, Поз);
			ПромСтр = СтрЗаменить(ПромСтр, "ОкноПриложенияОсновноеCommandInterface.НайтиОбъект(Тип(""ТестируемаяКнопкаКомандногоИнтерфейса""),", "");
			
			ПромСтр = СтрЗаменить(ПромСтр, ");", "");
			ПромСтр = СтрЗаменить(ПромСтр, """", "");
			ПромСтр = СокрЛП(ПромСтр);
			
			Результат = Результат + ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " Я нажимаю кнопку командного интерфейса """ + ПромСтр + """" + Символы.ПС;
		ИначеЕсли Найти(НРег(Стр), НРег("ТестовоеПриложение.НайтиОбъект(Тип(""ТестируемоеОкноКлиентскогоПриложения"")")) > 0 Тогда
			//это работа с открытым окном
			Поз = Найти(НРег(Стр), НРег("ТестовоеПриложение.НайтиОбъект(Тип(""ТестируемоеОкноКлиентскогоПриложения"")"));
			
			ПромСтр = Сред(Стр, Поз);
			ПромСтр = СтрЗаменить(ПромСтр, "ТестовоеПриложение.НайтиОбъект(Тип(""ТестируемоеОкноКлиентскогоПриложения""),", "");
			
			Поз = Найти(ПромСтр, """,");
			ПромСтр = Лев(ПромСтр, Поз);
			
			ПромСтр = СтрЗаменить(ПромСтр, """", "");
			ПромСтр = СокрЛП(ПромСтр);
			
			ИмяОкнаТестируемоеОкноКлиентскогоПриложения = ПромСтр;
			
		ИначеЕсли Найти(НРег(Стр), НРег(".НайтиОбъект(Тип(""ТестируемаяФорма"")")) > 0 Тогда
			Поз = Найти(НРег(Стр), НРег(".НайтиОбъект(Тип(""ТестируемаяФорма"")"));
			
			ПромСтр = Сред(Стр, Поз);
			ПромСтр = СтрЗаменить(ПромСтр, ".НайтиОбъект(Тип(""ТестируемаяФорма""),", "");
			ПромСтр = СтрЗаменить(ПромСтр, ");", "");
			ПромСтр = СтрЗаменить(ПромСтр, """", "");
			ПромСтр = СокрЛП(ПромСтр);
			
			ИмяТестируемойФормы = ПромСтр;
		ИначеЕсли Найти(НРег(Стр), НРег("ТаблицаСписок.Выбрать();")) > 0 Тогда
			Результат = Результат + ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " В окне """ + ИмяОкнаТестируемоеОкноКлиентскогоПриложения + """ в форме списка """ + ИмяТестируемойФормы + """ я выбираю текущий элемент." + Символы.ПС;
		ИначеЕсли Найти(НРег(Стр), НРег(".НайтиОбъект(Тип(""ТестируемоеПолеФормы"")")) > 0 Тогда
			Массив  = РазложитьСтрокуВМассивПодстрок(Стр, ",");
			ПромСтр = Массив[Массив.Количество() - 1];
			ПромСтр = СтрЗаменить(ПромСтр, ");", "");
			ПромСтр = СтрЗаменить(ПромСтр, """", "");
			ПромСтр = СокрЛП(ПромСтр);
			
			ИмяЭлементаФормы = ПромСтр;
		ИначеЕсли Найти(НРег(Стр), НРег(".ВвестиТекст(")) > 0 Тогда
			ПромСтр = Стр;
			Поз     = Найти(ПромСтр, ".ВвестиТекст(");
			ПромСтр = Сред(ПромСтр, Поз);
			ПромСтр = СтрЗаменить(ПромСтр, ".ВвестиТекст(", "");
			ПромСтр = СтрЗаменить(ПромСтр, ");", "");
			ПромСтр = СтрЗаменить(ПромСтр, """", "");
			
			ЗначениеВвода = ПромСтр;
			

			Результат = Результат + ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в поле """ + ИмяЭлементаФормы + """ я ввожу значение """ + ЗначениеВвода + """" + Символы.ПС;
		ИначеЕсли Найти(НРег(Стр), НРег(".ВыполнитьВыборИзСпискаВыбора(")) > 0 Тогда
			ПромСтр = Стр;
			Поз     = Найти(ПромСтр, ".ВыполнитьВыборИзСпискаВыбора(");
			ПромСтр = Сред(ПромСтр, Поз);
			ПромСтр = СтрЗаменить(ПромСтр, ".ВыполнитьВыборИзСпискаВыбора(", "");
			ПромСтр = СтрЗаменить(ПромСтр, ");", "");
			ПромСтр = СтрЗаменить(ПромСтр, """", "");
			
			ЗначениеВвода = ПромСтр;
			

			Результат = Результат + ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в выпадающем списке """ + ИмяЭлементаФормы + """ я ввожу значение """ + ЗначениеВвода + """" + Символы.ПС;
		ИначеЕсли Найти(НРег(Стр), НРег(".ВыполнитьВыборИзВыпадающегоСписка(")) > 0 Тогда
			Результат = Результат + ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " у поля """ + ИмяЭлементаФормы + """ я открываю форму выбора" + Символы.ПС;
		ИначеЕсли Найти(НРег(Стр), НРег(".НайтиОбъект(Тип(""ТестируемаяКнопкаФормы""),")) > 0 Тогда
			
			Поз = Найти(Стр, ".НайтиОбъект(Тип(""ТестируемаяКнопкаФормы""),");
			ПромСтр = Сред(Стр, Поз);
			ПромСтр = СтрЗаменить(ПромСтр, ".НайтиОбъект(Тип(""ТестируемаяКнопкаФормы""),", "");
			
			Поз = Найти(ПромСтр, """, ");
			ПромСтр = Лев(ПромСтр, Поз);
			
			ПромСтр = СтрЗаменить(ПромСтр, ");", "");
			ПромСтр = СтрЗаменить(ПромСтр, """", "");
			ПромСтр = СокрЛП(ПромСтр);
			
			ИмяКнопки = ПромСтр;
			
			Результат = Результат + ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю кнопку """ + ИмяКнопки + """" + Символы.ПС;
		КонецЕсли;	 
	КонецЦикла;	
	
	Текст.Закрыть();
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Процедура ДобавитьУзел(МассивОбъектов, МассивСвойств, ИдВМассиве, Имя);
	ИдВМассиве                 = ИдВМассиве + 1;
	МассивОбъектов[ИдВМассиве] = Имя;
	МассивСвойств [ИдВМассиве] = Новый Соответствие;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУзел(МассивОбъектов, МассивСвойств, ИдВМассиве, Имя);
	МассивОбъектов[ИдВМассиве] = Неопределено;
	МассивСвойств [ИдВМассиве] = Неопределено;
	ИдВМассиве                 = ИдВМассиве - 1;
КонецПроцедуры

&НаКлиенте
Функция ОпределитьПараметрыВСтрокеПримера(Знач Стр)
	Массив = Новый Массив;
	
	
	Стр = СтрЗаменить(Стр,"\|","~ЭкранированиеВертикальнойЧерты~");
	
	Стр = СокрЛП(Стр);
	Если Лев(Стр, 1) <> "|" Тогда
		Возврат Массив;
	КонецЕсли;	 
	
	Если Прав(Стр, 1) <> "|" Тогда
		Возврат Массив;
	КонецЕсли;	 
	
	Стр = Сред(Стр, 2);
	Стр = Сред(Стр, 1, СтрДлина(Стр) - 1);
	//убрали символы |
	
	Массив = РазложитьСтрокуВМассивПодстрок(Стр, "|");
	
	Для Ккк = 0 По Массив.Количество() - 1 Цикл
		Массив[Ккк] = СокрЛП(Массив[Ккк]);
		Массив[Ккк] = СтрЗаменить(Массив[Ккк],"~ЭкранированиеВертикальнойЧерты~","\|");
	КонецЦикла;
	
	Спс = Новый СписокЗначений;
	Для каждого Элем Из Массив Цикл
		Спс.Добавить(Элем);
	КонецЦикла;
	
	Возврат  Спс;
КонецФункции

&НаКлиенте
Процедура УдалитьПредыдущуюСтрокуЕслиЕстьСовпадения(Текст, Стр1, Стр2)
	СтрокаТекста = Текст.ПолучитьСтроку(Текст.КоличествоСтрок());
	
	Если Найти(СтрокаТекста, Стр1) = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Найти(СтрокаТекста, Стр2) = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Текст.УдалитьСтроку(Текст.КоличествоСтрок());
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивДублирующихсяЗаголовоковСервер(МассивЗаголовковПолей)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("Заголовок");
	
	
	Для Н=1 По МассивЗаголовковПолей.Количество() Цикл
		Тзн.Добавить();
	КонецЦикла;	
	
	Тзн.ЗагрузитьКолонку(МассивЗаголовковПолей, "Заголовок");
	
	Тзн.Колонки.Добавить("Кол");
	
	
	
	Для каждого СтрТзн Из Тзн Цикл
		СтрТзн.Кол = 1;
	КонецЦикла;
	
	
	Тзн.Свернуть("Заголовок", "Кол");
	
	Рез = Новый Массив;
	Для каждого СтрТзн Из Тзн Цикл
		Если СтрТзн.Кол > 1 Тогда
			Рез.Добавить(СтрТзн.Заголовок);
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Рез;
КонецФункции	


&НаКлиенте
Функция ПреобразоватьМассивСостояниеФормTestClient(МассивСостояниеФорм)
	
	Массив = Новый Массив;
	
	Если МассивСостояниеФорм = Неопределено Тогда
		Возврат Массив;
	КонецЕсли;	 
	
	Для каждого СостояниеФормы Из МассивСостояниеФорм Цикл
		Рез = Новый Структура;
		Рез.Вставить("ИмяФормы", СостояниеФормы.ИмяФормы);
		Рез.Вставить("ТекстЗаголовка", СостояниеФормы.ТекстЗаголовка);
		
		МассивЗаголовковПолей = СостояниеФормы.МассивЗаголовковПолей;
		МассивДублирующихсяЗаголовоковПолей = ПолучитьМассивДублирующихсяЗаголовоковСервер(МассивЗаголовковПолей);
		Рез.Вставить("МассивДублирующихсяЗаголовоковПолей", МассивДублирующихсяЗаголовоковПолей);
		
		МассивЗаголовковКнопок = СостояниеФормы.МассивЗаголовковКнопок;
		МассивДублирующихсяЗаголовоковКнопок = ПолучитьМассивДублирующихсяЗаголовоковСервер(МассивЗаголовковКнопок);
		Рез.Вставить("МассивДублирующихсяЗаголовоковКнопок", МассивДублирующихсяЗаголовоковКнопок);
		//Для каждого Элем Из МассивДублирующихсяЗаголовоковПолей Цикл
		//	Сообщить("Дубль: " + Элем);
		//КонецЦикла;
		
		Массив.Добавить(Рез);
		
	КонецЦикла;
	
	Возврат Массив;
КонецФункции	

&НаКлиенте
Функция СтрокиРавныСУчётомЗвёздочек(Знач Стр1, Знач Стр2)
	//основная строка первая
	Массив1 = РазложитьСтрокуВМассивПодстрок(Стр1, " ");
	Массив2 = РазложитьСтрокуВМассивПодстрок(Стр2, " ");
	
	
	Если Массив1.Количество() = (Массив2.Количество() + 1) Тогда
		Если Массив1[Массив1.Количество() - 1] = "*" Тогда //значит тут последний символ *
			Массив1.Удалить(Массив1.Количество() - 1);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Массив1.Количество() <> Массив2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Для Ккк = 0 По Массив1.Количество() - 1 Цикл
		С1 = Массив1[Ккк];
		С2 = Массив2[Ккк];
		Если С1 = С2 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если С1 = "*" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Возврат Ложь;
	
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции	 

&НаКлиенте
Функция ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФормаЗаголовок, ЗаголовокПоля, ТипОбъекта)
	Для каждого СтруктураФормы Из МассивСтруктурФорм Цикл
		Если СтрокиРавныСУчётомЗвёздочек(ТекущаяФормаЗаголовок, СтруктураФормы.ТекстЗаголовка) Тогда
			Если ТипОбъекта = "ПолеФормы" Тогда
				Если СтруктураФормы.МассивДублирующихсяЗаголовоковПолей.Найти(ЗаголовокПоля) <> Неопределено Тогда
					Отладка("Поле """ + ЗаголовокПоля + """ имеет дубли с таким же заголовком. Поиск будет происходить по имени.");
					Возврат Истина;
				КонецЕсли;	 
			ИначеЕсли ТипОбъекта = "Кнопка" Тогда
				Если СтруктураФормы.МассивДублирующихсяЗаголовоковКнопок.Найти(ЗаголовокПоля) <> Неопределено Тогда
					Отладка("Кнопка """ + ЗаголовокПоля + """ имеет дубли с таким же заголовком. Поиск будет происходить по имени.");
					Возврат Истина;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		//Сообщить("Сохранено: " + СтруктураФормы.ТекстЗаголовка);
	КонецЦикла;
	
	//Сообщить("Передано " + ТекущаяФормаЗаголовок);
	
	Возврат Ложь;
КонецФункции	

&НаКлиенте
Процедура ЗаменитьСимволПереводаСтрокВXML(ИмяФайла)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	
	Массив = Новый Массив;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = СтрЗаменить(Стр,"|","\|");
		
		
		Если Лев(СокрЛП(Стр),1) <> "<" Тогда
			//тогда нашли перенос строки
			Если Массив.Количество() > 1 Тогда
				Ид = Массив.Количество()-2+1;
				Массив[Ид] = Массив[Ид] + "\n" + Стр;
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Массив.Добавить(Стр);
	КонецЦикла;	
	Текст.Закрыть();
	
	
	
	ИмяВременногоXML = ПолучитьИмяВременногоФайла("xml");
	ЗТ = Новый ЗаписьТекста(ИмяВременногоXML,"UTF-8",,Истина); 
	Для Каждого Стр Из Массив Цикл
		ЗТ.ЗаписатьСтроку(Стр); 
	КонецЦикла;	
	
	ЗТ.Закрыть();
	
	ПереместитьФайлКомандаСистемы(ИмяВременногоXML,ИмяФайла);
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьСтрокуКДатеИзДанныхXML(Стр)
	Стр = СтрЗаменить(Стр,"-","");
	Стр = СтрЗаменить(Стр,":","");
	Стр = СтрЗаменить(Стр,"T","");
	
	Попытка
		Дат = Дата(Стр);
	Исключение
		Возврат Стр;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Формат(Дат,"ДФ=dd.MM.yyyy");
КонецФункции	

&НаКлиенте
Функция ПолучитьТекстФичиИзДействийПользователя(Результат)
	ИмяВременногоXML = ПолучитьИмяВременногоФайла("xml");
	
	МассивСтруктурФорм = ПреобразоватьМассивСостояниеФормTestClient(МассивСостояниеФормTestClient);
	
	
	ЗТ = Новый ЗаписьТекста(ИмяВременногоXML, "UTF-8", , Истина); 
	ЗТ.Записать(Результат); 
	ЗТ.Закрыть();
	
	ЗаменитьСимволПереводаСтрокВXML(ИмяВременногоXML);
	
	
	ТекстРезультат = Новый ТекстовыйДокумент;
	ТекстРезультат.ДобавитьСтроку("");
	
	XML = Новый ЧтениеXML;
	XML.ОткрытьФайл(ИмяВременногоXML);
	
	МассивОбъектов = Новый Массив(100);
	МассивСвойств  = Новый Массив(МассивОбъектов.Количество());
	ИдВМассиве     = -1;
	
	СчетчикДействий      = 0;
	ТаблицаСвойствСтроки = Неопределено;
	НашлиПанельРазделов  = Ложь;//надо для обхода бага, когда в логе действий пользователя нет нажатия на панель разделов
	
	ФлагРедактированияТекстаМакета = Ложь;
	
	ТекущееОкно          = "";
	ТекущаяФорма         = "";
	ТекущаяТЧ            = "";
	ДанныеНажатияНаЭлементФормы = Неопределено;
	
	ЗначениеСтрокиinputText = "";
	Пока XML.Прочитать() Цикл
		
		ИмяУзла = XML.Имя;
		Если XML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ДобавитьУзел(МассивОбъектов, МассивСвойств, ИдВМассиве, ИмяУзла);
			Если (ИмяУзла = "gotoRow") или (ИмяУзла = "expand") или (ИмяУзла = "collapse") Тогда
				ТаблицаСвойствСтроки = Новый Массив();
			ИначеЕсли ИмяУзла = "Field" Тогда
				СвойствоСтроки = Новый Соответствие;
			КонецЕсли;	 
			Пока XML.ПрочитатьАтрибут() Цикл
				МассивСвойств[ИдВМассиве].Вставить(XML.Имя, XML.Значение);
				Если XML.Имя = "name" Тогда
					ЗначениеСтрокиinputText = "";
				КонецЕсли;	 
				
				Если ИмяУзла = "Field" Тогда
					СвойствоСтроки.Вставить(XML.Имя, XML.Значение);
				КонецЕсли;	 
			КонецЦикла;
			
			Если ИмяУзла = "Form" Тогда
				ТекущаяФорма = МассивСвойств[ИдВМассиве]["title"];
				ДанныеНажатияНаЭлементФормы = Неопределено;
			ИначеЕсли ИмяУзла = "ClientApplicationWindow" Тогда
				ТекущееОкно  = МассивСвойств[ИдВМассиве]["caption"];
				ДанныеНажатияНаЭлементФормы = Неопределено;
			ИначеЕсли ИмяУзла = "FormTable" Тогда
				ТекущаяТЧ = МассивСвойств[ИдВМассиве]["name"];
				ДанныеНажатияНаЭлементФормы = Неопределено;
			КонецЕсли;	 
			
			Если ИмяУзла = "click" Тогда
				ДанныеНажатияНаЭлементФормы = Неопределено;
				Если МассивОбъектов[ИдВМассиве - 1] = "CommandInterfaceButton" Тогда
					Если НРег(МассивСвойств[1]["isMain"]) = "true" Тогда
						Если ЭтоПанельРазделов(МассивСвойств[ИдВМассиве - 2]["title"]) Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " В панели разделов я выбираю '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "'");
							НашлиПанельРазделов = Истина;
						ИначеЕсли ЭтоПанельОткрытых(МассивСвойств[ИдВМассиве - 2]["title"]) Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " В панели открытых я выбираю '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "'");
						ИначеЕсли ЭтоМенюФункций(МассивСвойств[ИдВМассиве - 2]["title"]) или ЭтоМенюФункций(МассивСвойств[ИдВМассиве - 3]["title"]) Тогда
							Если Не НашлиПанельРазделов Тогда
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в xml не найдено значение клика в панели разделов. Проверьте xml, который был получен с TestClient.");
							КонецЕсли;	 
							
							ЗаменилиПредыдущуюСтроку = Ложь;
							Если ТекстРезультат.КоличествоСтрок() > 1 Тогда
								ПредыдущаяСтрока = ТекстРезультат.ПолучитьСтроку(ТекстРезультат.КоличествоСтрок());
								Поз = Найти(НРег(ПредыдущаяСтрока),НРег("В панели разделов я выбираю"));
								Если Поз > 0 Тогда
									ЗаменилиПредыдущуюСтроку = Истина;
									
									ИмяПанелиРазделов = СокрЛП(Сред(ПредыдущаяСтрока,Поз + СтрДлина("В панели разделов я выбираю")));
									
									ТекстРезультат.УдалитьСтроку(ТекстРезультат.КоличествоСтрок());
									
									ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " В командном интерфейсе я выбираю " + ИмяПанелиРазделов +  " '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "'");
								КонецЕсли;	 
							КонецЕсли;	 
							
							Если НЕ ЗаменилиПредыдущуюСтроку Тогда
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " В панели функций я выбираю '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "'");
							КонецЕсли;	 
							
							НашлиПанельРазделов = Ложь;
						Иначе	
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " Я нажимаю кнопку командного интерфейса '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "'");
						КонецЕсли;	 
					Иначе
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " В текущем окне я нажимаю кнопку командного интерфейса '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "'");
					КонецЕсли;	 
					
				ИначеЕсли МассивОбъектов[ИдВМассиве - 1] = "FormButton" Тогда	
					
					ЭтоКонтекстаноеМеню = Ложь;
					ИдПоискаМеню = 2;
					Пока Истина Цикл
						Если МассивОбъектов[ИдВМассиве - ИдПоискаМеню] <> "FormGroup" Тогда
							Прервать;
						КонецЕсли;	 
						
						Если Найти(Нрег(МассивСвойств[ИдВМассиве - ИдПоискаМеню]["name"]),"контекстноеменю") > 0 Тогда
							ЭтоКонтекстаноеМеню = Истина;
						КонецЕсли;	 
						
						Если ЭтоКонтекстаноеМеню Тогда
							Если МассивОбъектов[ИдВМассиве - ИдПоискаМеню] = "FormField" Тогда
								Прервать;
							КонецЕсли;	 
						КонецЕсли;	 
						
						ИдПоискаМеню = ИдПоискаМеню + 1;
						
						Если ИдПоискаМеню = ИдВМассиве Тогда
							Прервать;
						КонецЕсли;	 
						
					КонецЦикла;	
					
					Если ЭтоКонтекстаноеМеню  Тогда
						ЗаголовокОбъекта = МассивСвойств[ИдВМассиве - ИдПоискаМеню]["title"];
						ИмяОбъекта = "с именем """ + МассивСвойств[ИдВМассиве - ИдПоискаМеню]["name"] + """";
						
						Если ЗначениеЗаполнено(ТекущаяТЧ) Тогда
							ИмяОбъекта = "с именем """ + ТекущаяТЧ + """";
						КонецЕсли;	 
						
						ЗаголовокКнопки = МассивСвойств[ИдВМассиве - 1]["title"];
						ИмяКнопки       = """" + ЗаголовокКнопки + """";
						Если НЕ ГенерироватьШагПоискаПоЗаголовку(ЗаголовокКнопки,МассивСтруктурФорм, ТекущаяФорма, "Кнопка") Тогда
							ИмяКнопки = "с именем '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "'";
						КонецЕсли;	 
						
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я выбираю пункт контекстного меню " + ИмяКнопки + " на элементе формы " + ИмяОбъекта);
					Иначе	
						
						ЗаголовокОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
						ИмяОбъекта = "'" + ЗаголовокОбъекта + "'";
						
						Если НЕ ГенерироватьШагПоискаПоЗаголовку(ЗаголовокОбъекта,МассивСтруктурФорм, ТекущаяФорма, "Кнопка") Тогда
							ИмяОбъекта = "с именем '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "'";
						КонецЕсли;	 
						
						ДобавитьОбычнуюСтроку = Истина;
						Если ТекущаяТЧ = "" Тогда
							ДобавитьОбычнуюСтроку = Истина;
						Иначе	
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я нажимаю на кнопку " + ИмяОбъекта);
							ДобавитьОбычнуюСтроку = Ложь;
						КонецЕсли;	
						
						Если ДобавитьОбычнуюСтроку Тогда
							ДанныеНажатияНаЭлементФормы = Новый Структура;
							ДанныеНажатияНаЭлементФормы.Вставить("ТекущееОкно",ТекущееОкно);
							ДанныеНажатияНаЭлементФормы.Вставить("ИмяКнопки",ЗаголовокОбъекта);
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю на кнопку " + ИмяОбъекта);
							
							Если ЗаголовокОбъекта = "Провести и закрыть"
							Или  ЗаголовокОбъекта = "Записать и закрыть"
							Или  ЗаголовокОбъекта = "Post and close"
							Или  ЗаголовокОбъекта = "Save and close"
							Тогда
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я жду закрытия окна '" + ТекущееОкно + "' в течение 20 секунд");
							КонецЕсли;	 
						КонецЕсли;	 
					КонецЕсли;	 
					
				ИначеЕсли (МассивОбъектов[ИдВМассиве - 1] = "FormField") или (МассивОбъектов[ИдВМассиве - 1] = "FormDecoration") Тогда	
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, "Кнопка") Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю на гиперссылку """ + ИмяОбъекта + """");
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю на гиперссылку с именем """ + ИмяОбъекта + """");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "gotoDate" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " у поля '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "' я перехожу к дате " + ПреобразоватьСтрокуКДатеИзДанныхXML(МассивСвойств[ИдВМассиве]["date"]));
			ИначеЕсли ИмяУзла = "selectAllRows" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' я выделяю все строки");
			ИначеЕсли ИмяУзла = "gotoFirstRow" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' я перехожу к первой строке");
			ИначеЕсли ИмяУзла = "gotoLastRow" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' я перехожу к последней строке");
			ИначеЕсли ИмяУзла = "deleteRow" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' я удаляю строку");
			ИначеЕсли ИмяУзла = "close" Тогда
				НадоДобавитьДействие = Истина;
				Если ДанныеНажатияНаЭлементФормы <> Неопределено Тогда
					Если ДанныеНажатияНаЭлементФормы.ТекущееОкно = ТекущееОкно Тогда
						Если ДанныеНажатияНаЭлементФормы.ИмяКнопки = "Провести и закрыть" Тогда
							НадоДобавитьДействие = Ложь;
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
				Если НадоДобавитьДействие Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " Я закрываю окно '" + МассивСвойств[ИдВМассиве - 1]["caption"] + "'");
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "choose" Тогда
				Если ТекущаяТЧ <> "" Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я выбираю текущую строку");
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "startChoosing" Тогда
				Если ТекущаяТЧ <> "" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я нажимаю кнопку выбора у реквизита """ + ИмяОбъекта + """");
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я нажимаю кнопку выбора у реквизита с именем """ + ИмяОбъекта + """");
					КонецЕсли;	 
				Иначе	
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы")  Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю кнопку выбора у поля """ + ИмяОбъекта + """");
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю кнопку выбора у поля с именем """ + ИмяОбъекта + """");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "clear" Тогда
				ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
				
				Если ТекущаяТЧ <> "" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я нажимаю кнопку очистить у поля """ + ИмяОбъекта + """");
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я нажимаю кнопку очистить у поля с именем """ + ИмяОбъекта + """");
					КонецЕсли;	 
				Иначе	
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю кнопку очистить у поля """ + ИмяОбъекта + """");
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю кнопку очистить у поля с именем """ + ИмяОбъекта + """");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "endEditRow" Тогда
				//Если МассивОбъектов[ИдВМассиве - 1] = "FormTable" Тогда
				Если ТекущаяТЧ <> "" Тогда
					Если МассивСвойств[ИдВМассиве]["cancel"] = "false" Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я завершаю редактирование строки");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "addRow" Тогда
				//Если МассивОбъектов[ИдВМассиве - 1] = "FormTable" Тогда
				Если ТекущаяТЧ <> "" Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я добавляю строку");
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "open" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю на кнопку открытия поля """ + ИмяОбъекта + """");
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю на кнопку открытия поля с именем """ + ИмяОбъекта + """");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "create" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю на кнопку создать поля """ + ИмяОбъекта + """");
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю на кнопку создать поля с именем """ + ИмяОбъекта + """");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "openDropList" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
						//ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я открываю выпадающий список """ + ИмяОбъекта + """");
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						//ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я открываю выпадающий список с именем """ + ИмяОбъекта + """");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "executeChoiceFromChoiceList" Тогда
				ЗначениеВыбораИзСписка = МассивСвойств[ИдВМассиве]["presentation"];
				ТипВыбораЗначенияИзСписка = "точное значение";
				
				ВПредыдущейСтрокеСценарияЕстьВВодПоСтроке = Ложь;
				ПредыдущаяСтрока = "";
				Если ТекстРезультат.КоличествоСтрок() > 0 Тогда
					ПредыдущаяСтрока = ТекстРезультат.ПолучитьСтроку(ТекстРезультат.КоличествоСтрок());
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗначениеСтрокиinputText) Тогда
					//значит раньше в поле был ввод текста
					Если Найти(ПредыдущаяСтрока,"я ввожу текст") > 0 Тогда
						ВПредыдущейСтрокеСценарияЕстьВВодПоСтроке = Истина;
						ЗначениеВыбораИзСписка = УбратьКавычкиАпострофы(ЗначениеСтрокиinputText);
						ТипВыбораЗначенияИзСписка = "по строке";
						Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
							ТекстРезультат.УдалитьСтроку(ТекстРезультат.КоличествоСтрок());
						КонецЕсли;	 
					КонецЕсли;	 
				ИначеЕсли Найти(ПредыдущаяСтрока,"я нажимаю кнопку выбора") > 0 Тогда
					//для выпадающего списка шаг выбора сам выберет нужное значение
					Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
						ТекстРезультат.УдалитьСтроку(ТекстРезультат.КоличествоСтрок());
					КонецЕсли
				КонецЕсли;	 
				
				
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					Если ТекущаяТЧ <> "" Тогда
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
						Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ из выпадающего списка """ + ИмяОбъекта + """ я выбираю " + ТипВыбораЗначенияИзСписка + " '" + ЗначениеВыбораИзСписка + "'");
						Иначе	
							ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ из выпадающего списка с именем """ + ИмяОбъекта + """ я выбираю " + ТипВыбораЗначенияИзСписка + " '" + ЗначениеВыбораИзСписка + "'");
						КонецЕсли;	 
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
						Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " из выпадающего списка """ + ИмяОбъекта + """ я выбираю " + ТипВыбораЗначенияИзСписка + " '" + ЗначениеВыбораИзСписка + "'");
						Иначе	
							ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " из выпадающего списка с именем """ + ИмяОбъекта + """ я выбираю " + ТипВыбораЗначенияИзСписка + " '" + ЗначениеВыбораИзСписка + "'");
						КонецЕсли;	 
					КонецЕсли;	 
				Иначе	
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " из выпадающего списка я выбираю '" + ЗначениеВыбораИзСписка + "'");
				КонецЕсли;	
				
			ИначеЕсли ИмяУзла = "increaseValue" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					Если ТекущаяТЧ <> "" Тогда
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
						Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ в поле """ + ИмяОбъекта + """ я увеличиваю значение");
						Иначе	
							ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ в поле с именем """ + ИмяОбъекта + """ я увеличиваю значение");
						КонецЕсли;	 
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
						Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в поле """ + ИмяОбъекта + """ я увеличиваю значение");
						Иначе	
							ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в поле с именем """ + ИмяОбъекта + """ я увеличиваю значение");
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	
				
			ИначеЕсли ИмяУзла = "decreaseValue" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					Если ТекущаяТЧ <> "" Тогда
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
						Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ в поле """ + ИмяОбъекта + """ я уменьшаю значение");
						Иначе	
							ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ в поле с именем """ + ИмяОбъекта + """ я уменьшаю значение");
						КонецЕсли;	 
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
						Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в поле """ + ИмяОбъекта + """ я уменьшаю значение");
						Иначе	
							ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в поле с именем """ + ИмяОбъекта + """ я уменьшаю значение");
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	
				
			ИначеЕсли ИмяУзла = "executeChoiceFromDropList" Тогда
				ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
				Если ТекущаяТЧ <> "" Тогда	
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я выбираю значение реквизита """ + ИмяОбъекта + """ из формы списка");
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я выбираю значение реквизита с именем """ + ИмяОбъекта + """ из формы списка");
					КонецЕсли;	 
				Иначе	
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я выбираю значение реквизита """ + ИмяОбъекта + """ из формы списка");
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я выбираю значение реквизита с именем """ + ИмяОбъекта + """ из формы списка");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "clickFormattedStringHyperlink" Тогда
				ИмяОбъекта     = МассивСвойств[ИдВМассиве - 1]["title"];
				ИмяГиперссылки = МассивСвойств[ИдВМассиве]["title"];
				
				Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " у поля """ + ИмяОбъекта + """ я нажимаю гиперссылку '" + ИмяГиперссылки + "'");
				Иначе	
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " у поля с именем """ + ИмяОбъекта + """ я нажимаю гиперссылку '" + ИмяГиперссылки + "'");
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "activate" Тогда
				//для обычных полей форм событие "activate" пропускается, чтобы не увеличивать размер сценария
				Если МассивОбъектов[ИдВМассиве - 1] = "FormGroup" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					ИмяГруппы   = МассивСвойств[ИдВМассиве - 1]["name"];
					
					Если ИмяГруппы <> "ГруппаСтраницы" Тогда
						//это стандартное название для "Тестируемая группа формы", Вид = "Страницы"
						Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я перехожу к закладке """ + ИмяОбъекта + """");
						Иначе	
							ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я перехожу к закладке с именем """ + ИмяОбъекта + """");
						КонецЕсли;	 
					КонецЕсли;	 
					
				ИначеЕсли МассивОбъектов[ИдВМассиве - 1] = "FormField" и ЗначениеЗаполнено(ТекущаяТЧ) Тогда
					//активировали колонку ТЧ
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я активизирую поле """ + ИмяОбъекта + """");
					Иначе	
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я активизирую поле с именем """ + ИмяОбъекта + """");
					КонецЕсли;	 
				КонецЕсли;	 
				
			ИначеЕсли ИмяУзла = "expand" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormGroup" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					Если СокрЛП(ИмяОбъекта) = "" или Объект.ИскатьЭлементыФормыПоИмени Тогда
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						УдалитьПредыдущуюСтрокуЕслиЕстьСовпадения(ТекстРезультат, " я перехожу к закладке", ИмяОбъекта);
						
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я разворачиваю группу с именем """ + ИмяОбъекта + """");
					Иначе	
						УдалитьПредыдущуюСтрокуЕслиЕстьСовпадения(ТекстРезультат, " я перехожу к закладке", ИмяОбъекта);
						
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я разворачиваю группу """ + ИмяОбъекта + """");
					КонецЕсли;	 
				КонецЕсли;	 
				
			ИначеЕсли ИмяУзла = "collapse" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormGroup" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					Если СокрЛП(ИмяОбъекта) = "" или Объект.ИскатьЭлементыФормыПоИмени Тогда
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						УдалитьПредыдущуюСтрокуЕслиЕстьСовпадения(ТекстРезультат, " я перехожу к закладке", ИмяОбъекта);
						
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я сворачиваю группу с именем """ + ИмяОбъекта + """");
					Иначе	
						УдалитьПредыдущуюСтрокуЕслиЕстьСовпадения(ТекстРезультат, " я перехожу к закладке", ИмяОбъекта);
						
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я сворачиваю группу """ + ИмяОбъекта + """");
					КонецЕсли;	 
				КонецЕсли;	 
				
			ИначеЕсли ИмяУзла = "goOneLevelDown" Тогда
				Если ТекущаяТЧ <> "" Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице  """ + ТекущаяТЧ + """ я перехожу на один уровень вниз");
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "gotoPreviousRow" Тогда
				Если ТекущаяТЧ <> "" Тогда
					switchSelection = Ложь;
					Если МассивСвойств[ИдВМассиве]["switchSelection"] = "true" Тогда
						switchSelection = Истина;
					КонецЕсли;	 
					
					Если switchSelection Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице  """ + ТекущаяТЧ + """ я перехожу на одну строку вверх с выделением");
					Иначе	
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице  """ + ТекущаяТЧ + """ я перехожу на одну строку вверх");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "gotoNextRow" Тогда
				Если ТекущаяТЧ <> "" Тогда
					switchSelection = Ложь;
					Если МассивСвойств[ИдВМассиве]["switchSelection"] = "true" Тогда
						switchSelection = Истина;
					КонецЕсли;	 
					
					Если switchSelection Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице  """ + ТекущаяТЧ + """ я перехожу на одну строку вниз с выделением");
					Иначе	
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице  """ + ТекущаяТЧ + """ я перехожу на одну строку вниз");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "goOneLevelUp" Тогда
				Если ТекущаяТЧ <> "" Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице  """ + ТекущаяТЧ + """ я перехожу на один уровень вверх");
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "selectOption" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы")  Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я меняю значение переключателя '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "' на '" + МассивСвойств[ИдВМассиве]["presentation"] + "'");
					Иначе	
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я меняю значение переключателя с именем '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' на '" + МассивСвойств[ИдВМассиве]["presentation"] + "'");
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "beginEditingCurrentArea" Тогда
				ФлагРедактированияТекстаМакета = Истина;
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в табличном документе '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' я делаю двойной клик на текущей ячейке");
			ИначеЕсли ИмяУзла = "finishEditingCurrentArea" Тогда
				ФлагРедактированияТекстаМакета = Ложь;
			ИначеЕсли ИмяУзла = "setCurrentArea" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					ПредыдущаяСтрока = "";
					Если ТекстРезультат.КоличествоСтрок() > 0 Тогда
						ПредыдущаяСтрока = ТекстРезультат.ПолучитьСтроку(ТекстРезультат.КоличествоСтрок());
					КонецЕсли;	 
					ТекущаяСтрока = ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в табличном документе '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' я перехожу к ячейке """ + МассивСвойств[ИдВМассиве]["area"] + """";
					Если ТекущаяСтрока <> ПредыдущаяСтрока Тогда
						//чтобы не добавлять одинаковых шагов
						ТекстРезультат.ДобавитьСтроку(ТекущаяСтрока);
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "inputText" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					
					Если ФлагРедактированияТекстаМакета Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в табличный документ """ + МассивСвойств[ИдВМассиве - 2]["name"] + """ я ввожу текст " + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("'" + МассивСвойств[ИдВМассиве]["text"] + "'"));
					Иначе	
						ЗаголовокПоля = МассивСвойств[ИдВМассиве - 1]["title"];
						ИмяОбъекта = ЗаголовокПоля;
						Если ТекущаяТЧ <> "" Тогда	
							Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ в поле '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "' я ввожу текст " + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("'" + МассивСвойств[ИдВМассиве]["text"] + "'"));
							Иначе	
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ в поле с именем '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' я ввожу текст " + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("'" + МассивСвойств[ИдВМассиве]["text"] + "'"));
							КонецЕсли;	 
						Иначе	
							Если ГенерироватьШагПоискаПоЗаголовку(ЗаголовокПоля,МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в поле '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "' я ввожу текст " + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("'" + МассивСвойств[ИдВМассиве]["text"] + "'"));
							Иначе	
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в поле с именем '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' я ввожу текст " + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("'" + МассивСвойств[ИдВМассиве]["text"] + "'"));
							КонецЕсли;	 
						КонецЕсли; 
					КонецЕсли;	 
					ЗначениеСтрокиinputText = ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля(МассивСвойств[ИдВМассиве]["text"]);
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "setCheck" Тогда
				ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
				
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					Если ТекущаяТЧ <> "" Тогда		
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
						Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я изменяю флаг '" + ЭкранироватьСпецСимволыДляЗначенияШага(ИмяОбъекта) + "'");
						Иначе	
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я изменяю флаг с именем '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "'");
						КонецЕсли;	 
					Иначе	
						Если ГенерироватьШагПоискаПоЗаголовку(ИмяОбъекта,МассивСтруктурФорм, ТекущаяФорма, "ПолеФормы") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я изменяю флаг '" + ЭкранироватьСпецСимволыДляЗначенияШага(ИмяОбъекта) + "'");
						Иначе	
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я изменяю флаг с именем '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "'");
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "ClientApplicationWindow" Тогда
				ИмяОкна = МассивСвойств[ИдВМассиве]["caption"];
				Если ИмяОкна <> Неопределено Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий, "ОткрытиеОкна") + " открылось окно '" + ИмяОкна + "'");
				КонецЕсли;	 
			ИначеЕсли ИмяУзла = "gotoNextItem" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я перехожу к следующему реквизиту");
				
			ИначеЕсли ИмяУзла = "executeChoiceFromMenu" Тогда
				ЗначениеМеню = МассивСвойств[ИдВМассиве]["presentation"];
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в меню формы я выбираю '" + ЗначениеМеню + "'");
			ИначеЕсли ИмяУзла = "executeChoiceFromList" Тогда
				ЗначениеМеню = МассивСвойств[ИдВМассиве]["presentation"];
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я выбираю из списка '" + ЗначениеМеню + "'");
			КонецЕсли;
		КонецЕсли;
		
		Если XML.ТипУзла = ТипУзлаXML.Текст Тогда
			//Сообщить("Текст: " + XML.Значение); 
		КонецЕсли;
		
		Если XML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
			Если ИмяУзла = "Form" Тогда
				ТекущаяФорма = "";
			ИначеЕсли ИмяУзла = "ClientApplicationWindow" Тогда
				ТекущееОкно = "";
			ИначеЕсли ИмяУзла = "FormTable" Тогда
				ТекущаяТЧ = "";
			КонецЕсли;	 
			
			Если ТекущаяТЧ <> "" Тогда
				Если (ИмяУзла = "gotoRow") или (ИмяУзла = "expand") или (ИмяУзла = "collapse") Тогда
					ЕстьЗаполненныеЯчейки = Ложь;
					Для каждого СвойствоСтроки Из ТаблицаСвойствСтроки Цикл
						Если СокрЛП(СвойствоСтроки["cellText"]) <> "" Тогда
							ЕстьЗаполненныеЯчейки = Истина;
							Прервать;
						КонецЕсли;	 
					КонецЦикла;
					
					Стр1 = "| ";
					Для каждого СвойствоСтроки Из ТаблицаСвойствСтроки Цикл
						Если СокрЛП(СвойствоСтроки["cellText"]) = "" И ЕстьЗаполненныеЯчейки Тогда
							Продолжить;
						КонецЕсли;	 
						Стр1 = Стр1 + " '" +  СвойствоСтроки["title"] + "' |";
					КонецЦикла;
					
					Стр2 = "| ";
					
					Для каждого СвойствоСтроки Из ТаблицаСвойствСтроки Цикл
						Если СокрЛП(СвойствоСтроки["cellText"]) = "" И ЕстьЗаполненныеЯчейки Тогда
							Продолжить;
						КонецЕсли;	 
						Стр2 = Стр2 + " '" + СвойствоСтроки["cellText"] + "' |";
					КонецЦикла;
					
					МассивТаблицы = Новый Массив();
					МассивТаблицы.Добавить(Стр1);
					МассивТаблицы.Добавить(Стр2);
					
					ФорматироватьТаблицуGherkin(МассивТаблицы);
					
					Стр = "		" + МассивТаблицы[0] + Символы.ПС + "		" + МассивТаблицы[1];
					
					Если ТаблицаСвойствСтроки.Количество() > 0 Тогда
						Если (ИмяУзла = "gotoRow") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) +  """ я перехожу к строке:");
						ИначеЕсли (ИмяУзла = "expand") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) +  """ я разворачиваю строку:");
						ИначеЕсли (ИмяУзла = "collapse") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) +  """ я сворачиваю строку:");
						КонецЕсли;	 
						ТекстРезультат.ДобавитьСтроку(Стр);
					Иначе	
						Если (ИмяУзла = "expand") Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) +  """ я разворачиваю текущую строку");
						КонецЕсли;	
					КонецЕсли;	 
					
				ИначеЕсли ИмяУзла = "Field" Тогда
					ТаблицаСвойствСтроки.Добавить(СвойствоСтроки);
				КонецЕсли;	 
			КонецЕсли;	 
			
			УдалитьУзел(МассивОбъектов, МассивСвойств, ИдВМассиве, XML.Имя);
		КонецЕсли; 
	КонецЦикла; 
	XML.Закрыть();
	
	ТекстРезультатКод = Новый ТекстовыйДокумент;
	
	Для НомерСтроки = 1 По ТекстРезультат.КоличествоСтрок() Цикл
		СтрокаТекста = СокрЛП(ТекстРезультат.ПолучитьСтроку(НомерСтроки));
		СтрокаТекста = СтрЗаменить(СтрокаТекста, """", """""");
		ТекстРезультатКод.ДобавитьСтроку("Ванесса.Шаг(""" + СтрокаТекста + """);");
	КонецЦикла;
	Объект.СгенерированныйСценарийКод = ТекстРезультатКод.ПолучитьТекст();
	
	ТекстРезультат.ВставитьСтроку(1, "#language: ru
	|
	|Функционал: <описание фичи>
	|
	|Как <Роль>
	|Я хочу <описание функционала> 
	|Чтобы <бизнес-эффект> 
	|
	|Контекст: 
	|	Дано Я запускаю сценарий открытия TestClient или подключаю уже существующий
	|
	|
	|Сценарий: <описание сценария>");
	
	Объект.СгенерированныйСценарий = ТекстРезультат.ПолучитьТекст();
	
КонецФункции	

&НаКлиенте
Процедура ОбработатьXMLВUILogToScript(Стр)
	Если Не ЗначениеЗаполнено(Стр) Тогда
		Возврат;
	КонецЕсли;	

	Попытка
		ПутьКОбработке = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "vendor/1C/UILogToScript.epf";
		ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКОбработке);
		Результат = ПолучитьКод1СИзUILogToScriptСервер(ДвоичныеДанные, Стр);
		
		ОбработатьПолученныйКодUILogToScript(Результат);
		
		Текст = Новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(Результат);
		
		Объект.СгенерированныйКод = Текст.ПолучитьТекст();
		
	Исключение
		Сообщить(ПолучитьТекстСообщенияПользователю("Не смог обработать XML в UILogToScript."));
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Попытка
		ПолучитьТекстФичиИзДействийПользователя(Стр);
	Исключение
		Сообщить(ПолучитьТекстСообщенияПользователю("Ошибка при получении текста фичи:"));
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогФичНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ИмяФайлаФичи = Объект.КаталогФич;
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ОписаниеОповещения = Вычислить("Новый ОписаниеОповещения(""ОбработатьЗапускПриложения"", ЭтаФорма)");
		Выполнить("НачатьЗапускПриложения(ОписаниеОповещения, ИмяФайлаФичи)");
	Иначе	
		ЗапуститьПриложение(ИмяФайлаФичи);
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Функция ПодключитьУжеЗапущенныйTestClient(ДанныеЗапускаКлиентаТестирования)
	Если ТипЗнч(ОбъектКонтекстСохраняемый) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если НЕ ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Попытка
			ТестовоеПриложение = СоздатьТестовоеПриложение(ДанныеЗапускаКлиентаТестирования);
			ТестовоеПриложение.УстановитьСоединение();
			Попытка
				Если НЕ ТестовоеПриложение.ОжидатьОтображениеОбъекта(Тип("ТестируемоеОкноКлиентскогоПриложения"),,,Объект.ТаймаутЗапуска1С) Тогда
					Возврат Ложь;
				КонецЕсли;	 
			Исключение
				Возврат Ложь;
			КонецПопытки;
			
			НайденДиалогАвторизации = НаЭкранеДиалогАвторизации();
			Если НайденДиалогАвторизации Тогда
				ВызватьИсключение ПолучитьТекстСообщенияПользователю("Не удалось авторизоваться в базе.");
			КонецЕсли;	 
			
			ЗаполнитьКонтекстСохраняемыйДляТестовоеПриложение(ТестовоеПриложение);
			
			Возврат Истина;
		Исключение
			Возврат Ложь;		
		КонецПопытки;
		
		Возврат Ложь;
	КонецЕсли;	 
	
	ТестовоеПриложение = ОбъектКонтекстСохраняемый.ТестовоеПриложение;
	
	Если ТестовоеПриложение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ТестовоеПриложение.УстановитьСоединение();
		ГлавноеОкноТестируемого = ПолучитьГлавноеОкноТестируемого(ТестовоеПриложение);
		Если ГлавноеОкноТестируемого = Неопределено Тогда
			//ВызватьИсключение ПолучитьТекстСообщенияПользователю("Не смог найти ГлавноеОкноТестируемого у уже подключенного TestClient.");
			Возврат Ложь;
		КонецЕсли;	 
		ЗаполнитьКонтекстСохраняемыйДляТестовоеПриложение(ТестовоеПриложение);
	Исключение
		Попытка
			ТестовоеПриложение.РазорватьСоединение();
			ОбъектКонтекстСохраняемый.ТестовоеПриложение = Неопределено;
		Исключение
		
		КонецПопытки;
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции	

&НаКлиенте
Процедура ЗапуститьСеансTestClient(ДанныеЗапускаКлиентаТестирования)
	ЗапуститьКлиентаТестирования(ДанныеЗапускаКлиентаТестирования);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивЗанятыхПортов()

	МассивЗанятыхПортов = Новый Массив;
	Если НЕ ЭтоLinux Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
		
		ТекстКоманды = "netstat -ano > """ + ИмяВременногоФайла + """"; 
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(ТекстКоманды);
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяВременногоФайла, "UTF-8");
		
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Если Стр = "" Тогда
				Продолжить;
			КонецЕсли;	 
			
			Порт_ = Сред(Сред(СокрЛП(Стр), 8), 1, Найти(Сред(СокрЛП(Стр), 8), "  "));
			Порт = "";
			Для НомерСимвола = 0 По СтрДлина(Порт_) - 1 Цикл
				СимволСтроки = Сред(Порт_, СтрДлина(Порт_) - НомерСимвола, 1);
				Если СимволСтроки = ":" Тогда
					Прервать;
				КонецЕсли;			
				Если Найти("0123456789", СимволСтроки) > 0 Тогда
					Порт = СимволСтроки + Порт;
				КонецЕсли;			
			КонецЦикла;
			
			Попытка
				Порт = Число(Порт);
				МассивЗанятыхПортов.Добавить(Порт);
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЦикла;	
		Текст.Закрыть();
	Иначе
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
		СтрокаЗапуска = "ss -tuwan4 2>/dev/null | awk '{print $5}' | grep ':' | cut -d "":"" -f 2 | sort | uniq  > """ + ИмяВременногоФайла + """";// взято из #383
		ВыполнитьКомандуОС(СтрокаЗапуска);
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяВременногоФайла, "UTF-8");
		
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Если Стр = "" Тогда
				Продолжить;
			КонецЕсли;

			Порт = СокрЛП(Стр);
			Попытка
				Порт = Число(Порт);
				МассивЗанятыхПортов.Добавить(Порт);
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЦикла;	
		Текст.Закрыть();
	КонецЕсли;
	
	Для каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
		МассивЗанятыхПортов.Добавить(СтрокаДанныеКлиентовТестирования.ПортЗапускаТестКлиента);
	КонецЦикла;
	
	Возврат МассивЗанятыхПортов;

КонецФункции // ПолучитьЗанятыеПорты()

&НаКлиенте
Функция ПолучитьКорректноеИмяTesClient(Знач Стр)
	Стр = Транслит(Стр);
	Стр = СтрЗаменить(Стр," ","");
	Стр = СтрЗаменить(Стр,".","");
	Стр = СтрЗаменить(Стр,"=","");
	Стр = СтрЗаменить(Стр,"""","");
	Стр = СтрЗаменить(Стр,":","");
	Стр = СтрЗаменить(Стр,";","");
	Стр = СтрЗаменить(Стр,"?","");
	Стр = СтрЗаменить(Стр,"\","");
	Стр = СтрЗаменить(Стр,"/","");
	Стр = СтрЗаменить(Стр,"*","");
	Стр = СтрЗаменить(Стр,"!","");
	Стр = СтрЗаменить(Стр,"@","");
	Стр = СтрЗаменить(Стр,"#","");
	Стр = СтрЗаменить(Стр,"$","");
	Стр = СтрЗаменить(Стр,"%","");
	Стр = СтрЗаменить(Стр,"-","");
	Стр = СтрЗаменить(Стр,"<","");
	Стр = СтрЗаменить(Стр,">","");
	Возврат Стр;
КонецФункции	

&НаКлиенте
Функция СоздатьТестовоеПриложение(ДанныеЗапускаКлиентаТестирования)
	ИмяКомпьютера = ДанныеЗапускаКлиентаТестирования.ИмяКомпьютера;
	Если Не ЗначениеЗаполнено(ИмяКомпьютера) Тогда
		ИмяКомпьютера = "localhost";
	КонецЕсли;	 
	
	Порт = ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента;
	
	
	Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("ИмяКомпьютера <%1>; порт <%2>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКомпьютера); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Формат(Порт, "ЧГ=")); 
		ЗаписатьЛогВЖРИнформация("СозданиеОбъектаТестируемоеПриложение", ТекстСообщения);
	КонецЕсли;	 
	
	Если ДанныеЗапускаКлиентаТестирования.ТипКлиента = "Web" Тогда
		ВтораяЧастьСтроки = ",""" + ПолучитьКорректноеИмяTesClient(ДанныеЗапускаКлиентаТестирования.Имя) + """)";
	Иначе	
		ВтораяЧастьСтроки = ")";
	КонецЕсли;	 
	ТестовоеПриложение = Вычислить("Новый ТестируемоеПриложение(""" + ИмяКомпьютера + """, " + Формат(Порт, "ЧГ=")
	                                                                                          + ВтораяЧастьСтроки);
																							  
	ТекущийTestclientЭтоWebКлиент = Ложь;																							  
	Если ДанныеЗапускаКлиентаТестирования.ТипКлиента = "Web" Тогда
		ТекущийTestclientЭтоWebКлиент = Истина;
	КонецЕсли;	 																							  
																							  
	Возврат ТестовоеПриложение;
КонецФункции	

&НаКлиенте
Процедура УстановитьКонектСTestClient(ДанныеЗапускаКлиентаТестирования, ТестовоеПриложение)
	Если ТипЗнч(ОбъектКонтекстСохраняемый) <> Тип("Структура") Тогда
		ОбъектКонтекстСохраняемый = Новый Структура;
	КонецЕсли;	 
	
	ОбъектКонтекстСохраняемый.Вставить("ТестовоеПриложение", ТестовоеПриложение);
	
	МаксДата = ТекущаяДата() + Объект.ТаймаутЗапуска1С;
	Пока Истина Цикл
		Если ТекущаяДата() > МаксДата Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог подключить TestClient. Прерывание по таймауту <%1>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Объект.ТаймаутЗапуска1С); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ПолучилосьУстановитьСоединение = Ложь;
		Попытка
			ТестовоеПриложение.УстановитьСоединение();
			ГлавноеОкноТестируемого = ПолучитьГлавноеОкноТестируемого(ТестовоеПриложение);
			ЗаполнитьКонтекстСохраняемыйДляТестовоеПриложение(ТестовоеПриложение);
			ПолучилосьУстановитьСоединение = Истина;
		Исключение
		КонецПопытки;
		
		Если ПолучилосьУстановитьСоединение Тогда
			Прервать;
		КонецЕсли;	 
		
		Sleep(1);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьГлавноеОкноТестируемого(ТестовоеПриложение)
	ГлавноеОкноТестируемого = Неопределено;
	КлиентсткиеОкнаТестируемогоПриложения = ТестовоеПриложение.ПолучитьПодчиненныеОбъекты();
	Для Каждого ТестируемоеОкно Из КлиентсткиеОкнаТестируемогоПриложения Цикл
		Если ТестируемоеОкно.Основное Тогда
			ГлавноеОкноТестируемого = ТестируемоеОкно;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ГлавноеОкноТестируемого;
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьКонтекстСохраняемыйДляТестовоеПриложение(ТестовоеПриложение)
	ОбъектКонтекстСохраняемый.Вставить("ТестовоеПриложение", ТестовоеПриложение);
	ГлавноеОкноТестируемого = ПолучитьГлавноеОкноТестируемого(ТестовоеПриложение);
	ОбъектКонтекстСохраняемый.Вставить("ГлавноеОкноТестируемого", ГлавноеОкноТестируемого);
КонецПроцедуры

&НаКлиенте
Функция ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующийДляНесколькихКлиентов(ДанныеЗапускаКлиентаТестирования,СтрокаОшибки=Неопределено,ДополнительныеПараметры = Неопределено)
	ПроисходилЗапускTescClient = Ложь;
	
	Если ПодключитьУжеЗапущенныйTestClient(ДанныеЗапускаКлиентаТестирования) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Уже открытый TestClient подключен на %1 порту.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента);
		СделатьСообщение(ТекстСообщения);
		Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("порт <%1>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Формат(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента, "ЧГ=")); 
			ЗаписатьЛогВЖРИнформация("НайденПодключенныйTestClient",ТекстСообщения);
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ЗапускатьКлиентТестирования") Тогда
			Если НЕ ДополнительныеПараметры.ЗапускатьКлиентТестирования Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не получилось подключиться к ранее запущенному клиенту тестирования <%1>, порт <%2>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ДанныеЗапускаКлиентаТестирования.Имя);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 

	ТестовоеПриложение = Неопределено;
	Попытка
		ТестовоеПриложение = СоздатьТестовоеПриложение(ДанныеЗапускаКлиентаТестирования);
	Исключение
		СтрокаОшибки = ПолучитьТекстСообщенияПользователю("Сеанс должен быть запущен с ключом TESTMANAGER.");
		СтрокаОшибки = СтрокаОшибки + ОписаниеОшибки();
		СделатьСообщение(СтрокаОшибки);
		СделатьСообщение(ПолучитьТекстСообщенияПользователю("TestClient НЕ подключен."));
	    Возврат Ложь;
	КонецПопытки;
	
	
	Попытка
		ЗапуститьСеансTestClient(ДанныеЗапускаКлиентаТестирования);
		
		//надо создать ещё один эксземпляр - т.к. возможно сменился порт
		ТестовоеПриложение = СоздатьТестовоеПриложение(ДанныеЗапускаКлиентаТестирования);
		
		УстановитьКонектСTestClient(ДанныеЗапускаКлиентаТестирования, ТестовоеПриложение);
		
		Если НЕ ТестовоеПриложение.ОжидатьОтображениеОбъекта(Тип("ТестируемоеОкноКлиентскогоПриложения"),,,Объект.ТаймаутЗапуска1С) Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не дождались отображения окна TestClient. Таймаут <%1>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Объект.ТаймаутЗапуска1С);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		
		НайденДиалогАвторизации = НаЭкранеДиалогАвторизации();
		Если НайденДиалогАвторизации Тогда
			Sleep(10);
		КонецЕсли;	 
		
		НайденДиалогАвторизации = НаЭкранеДиалогАвторизации();
		Если НайденДиалогАвторизации Тогда
			ВызватьИсключение ПолучитьТекстСообщенияПользователю("Не удалось авторизоваться в базе.");
		КонецЕсли;
		
		НаЭкранеОкноПредупреждения = НаЭкранеОкноПредупреждения();
		Если НаЭкранеОкноПредупреждения Тогда
			ТекстПредупреждения = ПолучитьТекстПредупреждения();
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("При подключении TestClient возникло сообщение:");
			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстПредупреждения;
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		Если НЕ ТестовоеПриложение.ОжидатьОтображениеОбъекта(Тип("ТестируемоеОкноКлиентскогоПриложения"),,,Объект.ТаймаутЗапуска1С) Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не дождались отображения окна TestClient. Таймаут <%1>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Объект.ТаймаутЗапуска1С);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("TestClient подключен на %1 порту.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента);
		СделатьСообщение(ТекстСообщения);
		Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("порт <%1>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Формат(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента, "ЧГ=")); 
			ЗаписатьЛогВЖРИнформация("ПодключениеTestClient", ТекстСообщения);
		КонецЕсли;	 
		Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("порт <%1>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Формат(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента, "ЧГ=")); 
			ЗаписатьЛогВТекстИнформация("ПодключениеTestClient",ТекстСообщения);
		КонецЕсли;	 
		
		ЗаполнитьКонтекстСохраняемыйДляТестовоеПриложение(ТестовоеПриложение);
		
	Исключение
		СделатьСообщение(ОписаниеОшибки());
		СделатьСообщение(ПолучитьТекстСообщенияПользователю("TestClient НЕ подключен."));
		СтрокаОшибки = ОписаниеОшибки();
	    Возврат Ложь;
	КонецПопытки;
	
	Если Не ОбъектКонтекстСохраняемый.Свойство("ПодключенныеTestClient") Тогда
		ОбъектКонтекстСохраняемый.Вставить("ПодключенныеTestClient", Новый Массив);
	КонецЕсли;	 
	
	ПодключенныеTestClient = ОбъектКонтекстСохраняемый.ПодключенныеTestClient;	
	
	ТестовоеПриложение      = ОбъектКонтекстСохраняемый.ТестовоеПриложение;
	ГлавноеОкноТестируемого = ОбъектКонтекстСохраняемый.ГлавноеОкноТестируемого;
	ИмяTestClient           = ДанныеЗапускаКлиентаТестирования.Имя;
	Синоним                 = ДанныеЗапускаКлиентаТестирования.Синоним;
	
	СохранитьКлиентовТестирования();
	УдалитьИзПолучитьКлиентаТестированияПрофиль(ПодключенныеTestClient,ИмяTestClient);
	
	ПодключенныеTestClient.Добавить(Новый Структура("Имя, Синоним, ТестовоеПриложение, ГлавноеОкноТестируемого", ИмяTestClient, Синоним, ТестовоеПриложение, ГлавноеОкноТестируемого));
	ОбъектКонтекстСохраняемый.Вставить("ТекущийПрофильTestClient", ИмяTestClient);
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура РазвернутьСтрокуДерева(Строка,СвернутьОбласти = Истина)
	ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
	Если СвернутьОбласти И Строка.Тип = "Область" Тогда
		Если Элементы.ДеревоТестов.Развернут(ИдентификаторСтроки) = Истина Тогда
			Элементы.ДеревоТестов.Свернуть(ИдентификаторСтроки);
		КонецЕсли;	 
		Возврат;
	КонецЕсли;	 
	
	Если Элементы.ДеревоТестов.Развернут(ИдентификаторСтроки) = Ложь Тогда
		Элементы.ДеревоТестов.Развернуть(ИдентификаторСтроки);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура СвернутьСтрокуДерева(Строка)
	ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
	Элементы.ДеревоТестов.Свернуть(ИдентификаторСтроки);
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ДеревоФормыСтроки)
	Для Каждого Строка Из ДеревоФормыСтроки Цикл
		РазвернутьСтрокуДерева(Строка);
		
		Если Строка.Тип = "Область" Тогда
			Продолжить;
		КонецЕсли;	 
		
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			РазвернутьСтрокиДерева(ПодчиненныеСтроки);
		КонецЕсли;	 
		
		//ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		//Элементы.ДеревоТестов.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево()
	ДеревоФормыСтроки = Объект.ДеревоТестов.ПолучитьЭлементы();
	РазвернутьСтрокиДерева(ДеревоФормыСтроки);
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетВоВнутреннемФормате(СтруктураОФ) 
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Дерево = ОбъектСервер.ДеревоТестов;
	
	Возврат ОбъектСервер.ВывестиОтчетТестированияВоВнутреннемФормате(Дерево, СтруктураОФ);
КонецФункции

&НаКлиенте
Процедура ПодключитьВнешниеОбработкиДляОтладки() 
	Перем МассивФорм;
	МассивФорм = Новый Массив;
	
	ФормаVanessa = Неопределено;
	
	Окна = ПолучитьОкна();
	Для каждого Окн Из Окна Цикл
		Если ТипЗнч(Окн) = Тип("ОкноКлиентскогоПриложения") Тогда
			Если Найти(НРег(Строка(Окн.Заголовок)), "тест_")>0 ИЛИ 
				Найти(НРег(Строка(Окн.Заголовок)), "test_")>0 Тогда
				
				МассивФорм.Добавить(Окн.ПолучитьСодержимое());
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивФорм.Количество() > 0 Тогда
		
		Для каждого Форма Из МассивФорм Цикл
			Попытка
				ДобавитьВнешнийСписокПроцедур(Форма.ПолучитьСписокТестов(ЭтаФорма), Форма.УникальныйИдентификатор, Форма);
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Подключили для отладки форма %1");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Форма.Заголовок);
				Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
			Исключение
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не удалось подключить форма %1 по причине:%2");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Форма.Заголовок);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОписаниеОшибки());
				Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
			    //ОписаниеОшибки()
			КонецПопытки; 
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция МетаданныеИмяСервер()
	ОсновнойОбъект = Объект();
	НайденноеИмя = ОсновнойОбъект.Метаданные().Имя;
	
	Возврат НайденноеИмя;
КонецФункции

&НаКлиенте
Процедура АктивироватьСоседнююСтрокуДерева(СтрокаДерва)
	СтрокаРодитель = СтрокаДерва.ПолучитьРодителя();
	Если СтрокаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	СтрокиДерева   = СтрокаРодитель.ПолучитьЭлементы();
	Для Ккк = 0 По СтрокиДерева.Количество() - 1 Цикл
		ТекСтрока = СтрокиДерева[Ккк];
		
		Если ТекСтрока = СтрокаШагаСКоторогоНадоВыполнятьСценарий Тогда
			Если Ккк < СтрокиДерева.Количество() - 1 Тогда
				НужнаяСтрока = СтрокиДерева[Ккк + 1];
			ИначеЕсли Ккк > 0 Тогда	
				НужнаяСтрока = СтрокиДерева[Ккк - 1];
			Иначе
				Продолжить;
			КонецЕсли;	 
			
			Элементы.ДеревоТестов.ТекущаяСтрока = НужнаяСтрока.ПолучитьИдентификатор();
			
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НайтиСтрокуДереваПоИдСтроки(ИдСтроки, СтрокиДерева, Результат)
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		Если Результат <> Неопределено Тогда
			Возврат;
		КонецЕсли;	 
		
		
		Если ИдСтроки = СтрокаДерева.ИдСтроки Тогда
			Результат = СтрокаДерева;
			Возврат;
		КонецЕсли;	 
		
		ПодчиненныеЭлементыСтроки = СтрокаДерева.ПолучитьЭлементы();
		НайтиСтрокуДереваПоИдСтроки(ИдСтроки, ПодчиненныеЭлементыСтроки, Результат);
	КонецЦикла;
КонецПроцедуры	

&НаКлиенте
Функция ЭтоПустаяСтрокаТабличногоДокумента(СтрокаТабДок)
	Для каждого Зн Из СтрокаТабДок Цикл
		Если Зн <> "" Тогда
			Возврат Ложь;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Истина;
КонецФункции	

&НаКлиенте
Процедура УбратьПустыеСтрокиИКолонкиСКраёвМакета(ТабДок,УдалятьСтрокиСверху = Истина,УдалятьКолонкиСлева = Истина)
	Если ТабДок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	Если ТабДок[0].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	
	
	
	
	Если УдалятьСтрокиСверху Тогда
		//пустые строки сверху
		МассивСтрокДляУдаления = Новый Массив;
		Ном = -1;
		Для каждого СтрокаТабДок Из ТабДок Цикл
			Ном = Ном + 1;
			Если ЭтоПустаяСтрокаТабличногоДокумента(СтрокаТабДок) Тогда
				МассивСтрокДляУдаления.Добавить(Ном);
			Иначе
				//значит нашли первую не пустую строку
				Прервать;
			КонецЕсли;	 
		КонецЦикла;
		
		
		Для Ккк = 0 По МассивСтрокДляУдаления.Количество() - 1 Цикл
			ИдМассива = МассивСтрокДляУдаления[МассивСтрокДляУдаления.Количество() - 1 - Ккк];
			ТабДок.Удалить(ИдМассива);
		КонецЦикла;
	КонецЕсли;	 
	
	
	
	//пустые строки снизу
	МассивСтрокДляУдаления = Новый Массив;
	Для Ккк = 0 По ТабДок.Количество() - 1 Цикл
		Ном          = ТабДок.Количество() - 1 - Ккк;
		СтрокаТабДок = ТабДок[Ном];
		Если ЭтоПустаяСтрокаТабличногоДокумента(СтрокаТабДок) Тогда
			МассивСтрокДляУдаления.Добавить(Ном);
		Иначе
			//значит нашли первую не пустую строку
			Прервать;
		КонецЕсли;	 
	КонецЦикла;

	
	Для каждого ИдМассива Из МассивСтрокДляУдаления Цикл
	    ТабДок.Удалить(ИдМассива);
	КонецЦикла;
	
	
	
	
	Если ТабДок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	
	Если УдалятьКолонкиСлева Тогда
		//пустые колонки слева
		КолКолонок = ТабДок[0].Количество();
		МассивКолонокДляУдаления = Новый Массив;
		Ном = -1;
		Для ИдКолонки = 0 По КолКолонок - 1 Цикл
			КолонкаПустая = Истина;
			Для каждого СтрокаТабДок Из ТабДок Цикл
				Зн = СтрокаТабДок[ИдКолонки];
				Если Зн <> "" Тогда
					КолонкаПустая = Ложь;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;
			
			Если КолонкаПустая Тогда
				МассивКолонокДляУдаления.Добавить(ИдКолонки);
			Иначе
				Прервать;
			КонецЕсли;	 
			
		КонецЦикла;
		
		
		Для Ккк = 0 По МассивКолонокДляУдаления.Количество() - 1 Цикл
			ИдМассива = МассивКолонокДляУдаления[МассивКолонокДляУдаления.Количество() - 1 - Ккк];
			Для каждого СтрокаТабДок Из ТабДок Цикл
				СтрокаТабДок.Удалить(ИдМассива);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;	 
	
	
	
	
	
	
	//пустые колонки справа
	КолКолонок = ТабДок[0].Количество();	
	МассивКолонокДляУдаления = Новый Массив;
	Ном = -1;
	Для Ккк = 0 По КолКолонок - 1 Цикл
		ИдКолонки = КолКолонок - 1 - Ккк;
		
		
		КолонкаПустая = Истина;
		Для каждого СтрокаТабДок Из ТабДок Цикл
			Зн = СтрокаТабДок[ИдКолонки];
			Если Зн <> "" Тогда
				КолонкаПустая = Ложь;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;
		
		Если КолонкаПустая Тогда
			МассивКолонокДляУдаления.Добавить(ИдКолонки);
		Иначе
			Прервать;
		КонецЕсли;	 
		
	КонецЦикла;
	
	
	Для Ккк = 0 По МассивКолонокДляУдаления.Количество() - 1 Цикл
		ИдМассива = МассивКолонокДляУдаления[Ккк];
		Для каждого СтрокаТабДок Из ТабДок Цикл
			СтрокаТабДок.Удалить(ИдМассива);
		КонецЦикла;
	КонецЦикла;
	
	
	
КонецПроцедуры

&НаКлиенте
//считывет табличный документ из TestClient по ячейке
//убирает пустые области по краям макета, если они есть, т.к.
//предполагается, что считанные данные будут испльзованы в шагах, которые в качестве параметра получают таблицу Gherkin
//и пустые области убираются, чтобу улучшить читаемость сценария и не заграможать его текстом вида
//| ''               | '' | '' | '' | '' |
//| ''               | '' | '' | '' | '' |
//| 'Полезная часть' | '' | '' | '' | '' |
Функция МакетTestClientПоЯчейкеКакМассив(ЭлементФормы,ДопПараметры = Неопределено)
	НадоСчитатьОбласть = Ложь;
	Если ДопПараметры <> Неопределено Тогда
		Если ДопПараметры.Свойство("НадоСчитатьОбласть") Тогда
			НадоСчитатьОбласть = ДопПараметры.НадоСчитатьОбласть;
		КонецЕсли;	 
	КонецЕсли;	 
	
	РазмерОбластиДанныхДокументаПоВертикали   = Неопределено;
	РазмерОбластиДанныхДокументаПоГоризонтали = Неопределено;
	
	ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти = Истина;
	Если ТекущийTestclientЭтоWebКлиент Тогда
		Если Версия8312ИлиВыше и НЕ Версия8313ИлиВыше Тогда
			ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти = Ложь;
		КонецЕсли;	 	
		
		Если Версия8313ИлиВыше Тогда
			ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти = Ложь;
			РазмерОбластиДанныхДокументаПоВертикали   = ЭлементФормы.ПолучитьРазмерОбластиДанныхДокументаПоВертикали();
			РазмерОбластиДанныхДокументаПоГоризонтали = ЭлементФормы.ПолучитьРазмерОбластиДанныхДокументаПоГоризонтали();
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТабДок        = Новый Массив();
	СчетчикСтрок  = 0;
	ШиринаТаблицы = Неопределено;
	Пока Истина Цикл
		СчетчикСтрок = СчетчикСтрок + 1;
		
		Если НадоСчитатьОбласть Тогда
			Если СчетчикСтрок < ДопПараметры.НачСтр Тогда
				Продолжить;
			КонецЕсли;	 
			
			Если СчетчикСтрок > ДопПараметры.НачСтр + ДопПараметры.КолСтр - 1 Тогда
				Прервать;
			КонецЕсли;	 
		КонецЕсли;	 
		
		
		
		Если ТекущийTestclientЭтоWebКлиент и Версия8313ИлиВыше Тогда
			Если СчетчикСтрок > РазмерОбластиДанныхДокументаПоВертикали Тогда
				Прервать;
			КонецЕсли;	 
		ИначеЕсли ТекущийTestclientЭтоWebКлиент и ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти Тогда
			
			Адрес = СформироватьАдресЯчейки(СчетчикСтрок,1);
			АдресТекущейОбласти = Неопределено;
			Если НЕ ПерейтиВТабДокTestClientКЯчейке(ЭлементФормы,АдресТекущейОбласти,Адрес) Тогда
				Прервать;
			КонецЕсли;	 
		Иначе
			//надо читать макет по установленным границам чтения
			
			Если СчетчикСтрок < СчитываниеМакетаНачСтр Тогда
				Продолжить;
			КонецЕсли;	 
			
			Если СчетчикСтрок > (СчитываниеМакетаНачСтр + СчитываниеМакетаКолСтр - 1) Тогда
				Прервать;
			КонецЕсли;	 
			
		КонецЕсли;	 
		
		СтрокаТабДок = Новый Массив;
		СчетчикКолонок = 0;
		Пока Истина Цикл
			СчетчикКолонок = СчетчикКолонок + 1;
			
			Если НадоСчитатьОбласть Тогда
				Если СчетчикКолонок < ДопПараметры.НачКол Тогда
					Продолжить;
				КонецЕсли;	 
				
				Если СчетчикКолонок > ДопПараметры.НачКол + ДопПараметры.КолКол - 1 Тогда
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если ТекущийTestclientЭтоWebКлиент и Версия8313ИлиВыше Тогда
				Если СчетчикКолонок > РазмерОбластиДанныхДокументаПоГоризонтали Тогда
					Прервать;
				КонецЕсли;	 
			ИначеЕсли НЕ ТекущийTestclientЭтоWebКлиент Или (ТекущийTestclientЭтоWebКлиент И Не ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти) Тогда
				Если СчетчикКолонок < СчитываниеМакетаНачКол Тогда
					Продолжить;
				КонецЕсли;	 
				
				Если СчетчикКолонок > (СчитываниеМакетаНачКол + СчитываниеМакетаКолКол - 1) Тогда
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если ШиринаТаблицы <> Неопределено Тогда
				Если СчетчикКолонок > ШиринаТаблицы Тогда
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Адрес = СформироватьАдресЯчейки(СчетчикСтрок,СчетчикКолонок);
			
			Значение = ЭлементФормы.ПолучитьТекстОбласти(Адрес);
			Значение = СтрЗаменить(Значение, Символы.ПС, "\n");
			
			Если НЕ Версия8313ИлиВыше И ШиринаТаблицы = Неопределено Тогда
				//проверим, что у нас получилось установить область
				//если не получилось, значит мы пытаемся выйти за границу макета
				Если ТекущийTestclientЭтоWebКлиент и ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти Тогда
					АдресТекущейОбласти = Неопределено;
					Если НЕ ПерейтиВТабДокTestClientКЯчейке(ЭлементФормы,АдресТекущейОбласти,Адрес) Тогда
						ШиринаТаблицы = СчетчикКолонок - 1;
						Прервать;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
			СтрокаТабДок.Добавить(Значение);
		КонецЦикла;
		
		ТабДок.Добавить(СтрокаТабДок);
	КонецЦикла;
	
	УдалятьПустыеСтрокиИзМакета = Истина;
	Если ДопПараметры <> Неопределено Тогда
		Если ДопПараметры.Свойство("УдалятьПустыеСтрокиИзМакета") Тогда
			УдалятьПустыеСтрокиИзМакета = ДопПараметры.УдалятьПустыеСтрокиИзМакета;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если УдалятьПустыеСтрокиИзМакета Тогда
		УбратьПустыеСтрокиИКолонкиСКраёвМакета(ТабДок);
	КонецЕсли;	 
	
	Возврат ТабДок;
КонецФункции	

&НаСервереБезКонтекста
Функция ПреобразоватьФайлМакетаВМассив(ФайлМакета,ДопПараметры)
	НадоСчитатьОбласть = Ложь;
	Если ДопПараметры <> Неопределено Тогда
		Если ДопПараметры.Свойство("НадоСчитатьОбласть") Тогда
			НадоСчитатьОбласть = ДопПараметры.НадоСчитатьОбласть;
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");
	
	ФайлМакета.Записать(ИмяВременногоФайла);
	
	ТД = Новый ТабличныйДокумент;
	ТД.Прочитать(ИмяВременногоФайла);
	
	ТабДок = Новый Массив();
	Для Стр = 1 По ТД.ВысотаТаблицы Цикл
		
		Если НадоСчитатьОбласть Тогда
			Если Стр < ДопПараметры.НачСтр Тогда
				Продолжить;
			КонецЕсли;	 
			
			Если Стр > ДопПараметры.НачСтр + ДопПараметры.КолСтр - 1 Тогда
				Прервать;
			КонецЕсли;	 
		КонецЕсли;	 
		
		СтрокаТабДок = Новый Массив;
		Для Кол = 1 По ТД.ШиринаТаблицы Цикл
			
			Если НадоСчитатьОбласть Тогда
				Если Кол < ДопПараметры.НачКол Тогда
					Продолжить;
				КонецЕсли;	 
				
				Если Кол > ДопПараметры.НачКол + ДопПараметры.КолКол - 1 Тогда
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
			
			
			Значение = ТД.Область(Стр,Кол,Стр,Кол).Текст;
			Значение = СтрЗаменить(Значение, Символы.ПС, "\n");
			
			СтрокаТабДок.Добавить(Значение);
		КонецЦикла;
		
		ТабДок.Добавить(СтрокаТабДок);
	КонецЦикла;
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ТабДок;
КонецФункции	

&НаКлиенте
Функция ПерейтиВТабДокTestClientКЯчейке(ЭлементФормы,АдресТекущейОбласти,Адрес)
	Если АдресТекущейОбласти = Неопределено Тогда
		ЭлементФормы.УстановитьТекущуюОбласть(Адрес);
		АдресТекущейОбласти = ЭлементФормы.ПолучитьАдресТекущейОбласти();
	КонецЕсли;	 
	
	Если Лев(НРег(АдресТекущейОбласти),1) = "r" Тогда
		НачСтр1 = -1;
		НачКол1 = -1;
		КолСтр1 = -1;
		КолКол1 = -1;
		ПолучитьПараметрыОбластиМакета(АдресТекущейОбласти,НачСтр1,НачКол1,КолСтр1,КолКол1);
		
		НачСтр2 = -1;
		НачКол2 = -1;
		КолСтр2 = -1;
		КолКол2 = -1;
		ПолучитьПараметрыОбластиМакета(Адрес,НачСтр2,НачКол2,КолСтр2,КолКол2);
		Если НачСтр1 > НачСтр2 Тогда
			Возврат Ложь;//значит АдресТекущейОбласти не находится внутри Адрес
		КонецЕсли;	 
		Если НачКол1 > НачКол2 Тогда
			Возврат Ложь;//значит АдресТекущейОбласти не находится внутри Адрес
		КонецЕсли;	 
		Если КолСтр1 < КолСтр2 Тогда
			Возврат Ложь;//значит АдресТекущейОбласти не находится внутри Адрес
		КонецЕсли;	 
		Если КолКол1 < КолКол2 Тогда
			Возврат Ложь;//значит АдресТекущейОбласти не находится внутри Адрес
		КонецЕсли;	 
		
		//Если НРег(Адрес) <> Нрег(АдресТекущейОбласти) Тогда
		//	//значит нельзя перейти к этой строке
		//	Возврат Ложь;
		//КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	

&НаКлиенте
Функция СформироватьАдресЯчейки(НомерСтроки,НомерКолонки)
	Возврат "R" +XMlСтрока(НомерСтроки) + "C" + XMlСтрока(НомерКолонки); 
КонецФункции	

&НаКлиенте
Функция ТабличныйДокументTestClientПоЯчейкам(ЭлементФормы,ДопПараметры = Неопределено)
	НадоСчитатьОбласть = Ложь;
	СмещениеСтрок  = 0;
	СмещениеКолонок = 0;
	
	ПолучатьИменаОбластей = Ложь;
	Если ДопПараметры <> Неопределено Тогда
		ДопПараметры.Вставить("СчитываниеПоЯчейкам",Истина);
		Если ДопПараметры.Свойство("ПолучатьИменаОбластей") Тогда
			ПолучатьИменаОбластей = ДопПараметры.ПолучатьИменаОбластей;
		КонецЕсли;	 
		Если ДопПараметры.Свойство("НадоСчитатьОбласть") Тогда
			НадоСчитатьОбласть = ДопПараметры.НадоСчитатьОбласть;
			СмещениеСтрок      = ДопПараметры.НачСтр - 1;
			СмещениеКолонок    = ДопПараметры.НачКол - 1;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ШиринаТаблицы = Неопределено;
	
	РазмерОбластиДанныхДокументаПоВертикали   = Неопределено;
	РазмерОбластиДанныхДокументаПоГоризонтали = Неопределено;
	
	ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти = Истина;
	Если ТекущийTestclientЭтоWebКлиент Тогда
		Если Версия8312ИлиВыше и НЕ Версия8313ИлиВыше Тогда
			ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти = Ложь;
		КонецЕсли;	 
		
		Если Версия8313ИлиВыше Тогда
			ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти = Ложь;
			РазмерОбластиДанныхДокументаПоВертикали   = ЭлементФормы.ПолучитьРазмерОбластиДанныхДокументаПоВертикали();
			РазмерОбластиДанныхДокументаПоГоризонтали = ЭлементФормы.ПолучитьРазмерОбластиДанныхДокументаПоГоризонтали();
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	
	ТабДок = Новый ТабличныйДокумент;
	СчетчикСтрок = 0;
	Пока Истина Цикл
		СчетчикСтрок = СчетчикСтрок + 1;
		
		Если НадоСчитатьОбласть Тогда
			Если СчетчикСтрок < ДопПараметры.НачСтр Тогда
				Продолжить;
			КонецЕсли;	 
			Если СчетчикСтрок > ДопПараметры.НачСтр + ДопПараметры.КолСтр - 1 Тогда
				Прервать;
			КонецЕсли;	 
		КонецЕсли;	 
		
		
		
		
		Если ТекущийTestclientЭтоWebКлиент и Версия8313ИлиВыше Тогда
			Если СчетчикСтрок > РазмерОбластиДанныхДокументаПоВертикали Тогда
				Прервать;
			КонецЕсли;	 
		ИначеЕсли ТекущийTestclientЭтоWebКлиент и ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти Тогда
			//проверим, что мы можем перейти на новую строку
			Адрес = СформироватьАдресЯчейки(СчетчикСтрок,1);
			АдресТекущейОбласти = Неопределено;
			Если НЕ ПерейтиВТабДокTestClientКЯчейке(ЭлементФормы,АдресТекущейОбласти,Адрес) Тогда
				Прервать;
			КонецЕсли;	 
		Иначе
			//надо читать макет по установленным границам чтения
			
			Если СчетчикСтрок < СчитываниеМакетаНачСтр Тогда
				Продолжить;
			КонецЕсли;	 
			
			Если СчетчикСтрок > (СчитываниеМакетаНачСтр + СчитываниеМакетаКолСтр - 1) Тогда
				Прервать;
			КонецЕсли;	 
			
		КонецЕсли;	 
		
		СтрокаТабДок = Новый Массив;
		СчетчикКолонок = 0;
		Пока Истина Цикл
			СчетчикКолонок = СчетчикКолонок + 1;
			
			Если ТекущийTestclientЭтоWebКлиент и Версия8313ИлиВыше Тогда
				Если СчетчикКолонок > РазмерОбластиДанныхДокументаПоГоризонтали Тогда
					Прервать;
				КонецЕсли;	 
			ИначеЕсли НЕ ТекущийTestclientЭтоWebКлиент Или (ТекущийTestclientЭтоWebКлиент И Не ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти) Тогда
				Если СчетчикКолонок < СчитываниеМакетаНачКол Тогда
					Продолжить;
				КонецЕсли;	 
				
				Если СчетчикКолонок > (СчитываниеМакетаНачКол + СчитываниеМакетаКолКол - 1) Тогда
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если НадоСчитатьОбласть Тогда
				Если СчетчикКолонок < ДопПараметры.НачКол Тогда
					Продолжить;
				КонецЕсли;	 
				Если СчетчикКолонок > ДопПараметры.НачКол + ДопПараметры.КолКол - 1 Тогда
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если ШиринаТаблицы <> Неопределено Тогда
				Если СчетчикКолонок > ШиринаТаблицы Тогда
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Адрес    = СформироватьАдресЯчейки(СчетчикСтрок,СчетчикКолонок);
			Значение = ЭлементФормы.ПолучитьТекстОбласти(Адрес);
			
			
			ТекОбласть = ТабДок.Область(СчетчикСтрок-СмещениеСтрок,СчетчикКолонок-СмещениеКолонок,СчетчикСтрок-СмещениеСтрок,СчетчикКолонок-СмещениеКолонок);
			ТекОбласть.Текст = Значение;
			
			АдресТекущейОбласти = Неопределено;
			Если ПолучатьИменаОбластей Тогда
				ЭлементФормы.УстановитьТекущуюОбласть(Адрес);
				АдресТекущейОбласти = ЭлементФормы.ПолучитьАдресТекущейОбласти();
				Если Лев(НРег(АдресТекущейОбласти),1) <> "r" Тогда
					ТекОбласть.Имя = АдресТекущейОбласти;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если НЕ Версия8313ИлиВыше И ШиринаТаблицы = Неопределено Тогда
				//проверим, что у нас получилось установить область
				//если не получилось, значит мы пытаемся выйти за границу макета
				Если ТекущийTestclientЭтоWebКлиент и ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти Тогда
					Если НЕ ПерейтиВТабДокTestClientКЯчейке(ЭлементФормы,АдресТекущейОбласти,Адрес) Тогда
						ШиринаТаблицы = СчетчикКолонок - 1;
						Прервать;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТабДок;
КонецФункции	

&НаСервереБезКонтекста
Функция ТабличныйДокументИзДвоичныхДанных(ФайлМакета)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");
	
	ФайлМакета.Записать(ИмяВременногоФайла);
	
	ТД = Новый ТабличныйДокумент;
	ТД.Прочитать(ИмяВременногоФайла);
	
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ТД;
КонецФункции	

&НаСервереБезКонтекста
Функция ОставитьЧастьМакетаСогласноПараметровЧтенияМакета(ФайлМакета,СчитываниеМакетаНачСтр,СчитываниеМакетаНачКол,СчитываниеМакетаКолСтр,СчитываниеМакетаКолКол)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");
	ФайлМакета.Записать(ИмяВременногоФайла);
	ТД = Новый ТабличныйДокумент;
	ТД.Прочитать(ИмяВременногоФайла);
	
	Если   СчитываниеМакетаНачСтр = 1
		 И СчитываниеМакетаНачКол = 1
		 И СчитываниеМакетаКолСтр >= ТД.ВысотаТаблицы
		 И СчитываниеМакетаКолКол >= ТД.ШиринаТаблицы
		Тогда
		//значит можно сразу вернуть макет
		
		УдалитьФайлы(ИмяВременногоФайла);
		Возврат ТД;
	КонецЕсли;	 
	
	
	//если оказались тут, значит надо считать только область в макете
	
	ТабДок = Новый ТабличныйДокумент;
	СчетчикСтрок = 0;
	Для Стр = СчитываниеМакетаНачСтр По СчитываниеМакетаНачСтр + СчитываниеМакетаКолСтр - 1 Цикл
		СчетчикСтрок = СчетчикСтрок + 1;
		
		СтрокаТабДок = Новый Массив;
		СчетчикКолонок = 0;
		Для Кол = СчитываниеМакетаНачКол По СчитываниеМакетаНачКол + СчитываниеМакетаКолКол - 1 Цикл
			СчетчикКолонок = СчетчикКолонок + 1;
			
			Значение = ТД.Область(Стр,Кол,Стр,Кол).Текст;
			Значение = СтрЗаменить(Значение, Символы.ПС, "\n");
			
			ТабДок.Область(СчетчикСтрок,СчетчикКолонок,СчетчикСтрок,СчетчикКолонок).Текст = Значение;
		КонецЦикла;
		
	КонецЦикла;
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ТабДок;
КонецФункции	

&НаКлиенте
Функция ПолучитьСостояниеЭлементаФормыTestClient(ЭлементФормы)
	СтруктураЗначения = Новый Структура;
	СтруктураЗначения.Вставить("Тип", ТипЗнч(ЭлементФормы));
	СтруктураЗначения.Вставить("Имя", ЭлементФормы.Имя);
	
	Если ТипЗнч(ЭлементФормы) = Тип("ТестируемаяКнопкаФормы") Тогда
		СтруктураЗначения.Вставить("Имя", ЭлементФормы.Имя);
		СтруктураЗначения.Вставить("ТекстЗаголовка", ЭлементФормы.ТекстЗаголовка);
		СтруктураЗначения.Вставить("Вид", ЭлементФормы.Вид);
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТестируемаяТаблицаФормы") Тогда
		СтруктураЗначения.Вставить("Имя", ЭлементФормы.Имя);
		СтруктураЗначения.Вставить("ТекстЗаголовка", ЭлементФормы.ТекстЗаголовка);
		
		Попытка
			ЗначениеТЧ = ПолучитьЗначениеТестируемаяТаблицаФормы(ЭлементФормы);
		Исключение
			ЗначениеТЧ = Неопределено;
		КонецПопытки;
		
		СтруктураЗначения.Вставить("ЗначениеТЧ", ЗначениеТЧ);
		
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТестируемаяГруппаФормы") Тогда
		СтруктураЗначения.Вставить("Имя", ЭлементФормы.Имя);
		СтруктураЗначения.Вставить("ТекстЗаголовка", ЭлементФормы.ТекстЗаголовка);
		СтруктураЗначения.Вставить("Вид", ЭлементФормы.Вид);
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТестируемоеПолеФормы") Тогда
		СтруктураЗначения.Вставить("Имя", ЭлементФормы.Имя);
		СтруктураЗначения.Вставить("ТекстЗаголовка", ЭлементФормы.ТекстЗаголовка);
		Если ЭлементФормы.Вид <> ВидПоляФормы.ПолеТабличногоДокумента Тогда
			СтруктураЗначения.Вставить("ПредставлениеДанных", ЭлементФормы.ТекстЗаголовка);
		КонецЕсли;	 
		СтруктураЗначения.Вставить("Вид", ЭлементФормы.Вид);
		
		Попытка
			СтруктураЗначения.Вставить("ТекстРедактирования", ЭлементФормы.ПолучитьТекстРедактирования());
		Исключение
		КонецПопытки;
		
		Если ЭлементФормы.Вид = ВидПоляФормы.ПолеТабличногоДокумента Тогда
			Попытка
				Если ЭлементФормы.Имя = "" Или ЭлементФормы.ТекущаяДоступность() Тогда
					//если табличный документ был открыт как отдельное окно как ТабДок.Показать(), тогда у него не работет ТекущаяДоступность() (проверено в 8.3.10)
					ТабДок = ПолучитьТабДокИзTestClientКакМассив(ЭлементФормы);
					СтруктураЗначения.Вставить("ТабДок", ТабДок);
				КонецЕсли;	 
			Исключение
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог получить значение табличного документа <%1>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ЭлементФормы.Имя);
				Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеКартинки Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеГеографическойСхемы Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеГрафическойСхемы Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеДендрограммы Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеДиаграммы Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеДиаграммыГанта Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеИндикатора Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеКалендаря Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеПолосыРегулирования Тогда
		Иначе	
			//для остальных надо сохранить представление данных
			Попытка
				Если ЭлементФормы.ТекущаяВидимость() Тогда
					СтруктураЗначения.Вставить("ПредставлениеДанных", ЭлементФормы.ПолучитьПредставлениеДанных());
				КонецЕсли;	 
			Исключение
				
			КонецПопытки;
		КонецЕсли;	 
		
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТестируемаяДекорацияФормы") Тогда
		СтруктураЗначения.Вставить("Имя", ЭлементФормы.Имя);
		СтруктураЗначения.Вставить("ТекстЗаголовка", ЭлементФормы.ТекстЗаголовка);
		СтруктураЗначения.Вставить("ПредставлениеДанных", ЭлементФормы.ТекстЗаголовка);
		СтруктураЗначения.Вставить("Вид", ЭлементФормы.Вид);
	КонецЕсли;	 
	
	Попытка
		СтруктураЗначения.Вставить("ТекущаяВидимость", ЭлементФормы.ТекущаяВидимость());
		СтруктураЗначения.Вставить("ТекущаяДоступность", ЭлементФормы.ТекущаяДоступность());
	Исключение
	КонецПопытки;
	
	Возврат СтруктураЗначения;
КонецФункции	

&НаКлиенте
Процедура ДобавитьЭлементыКолонкиТаблицы(ТаблицыФормы,МассивКолонокТаблиц)
	МассивЭлементовТаблицы = ТаблицыФормы.НайтиОбъекты();
	Для Каждого ЭлементТаблицы Из МассивЭлементовТаблицы Цикл
		МассивКолонокТаблиц.Добавить(ЭлементТаблицы.Имя);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСостояниеФормыTestClient(ДопПараметры)
	ТолькоАктивныйЭлемент = Ложь;
	Если ДопПараметры.Свойство("ТолькоАктивныйЭлемент") Тогда
		ТолькоАктивныйЭлемент = ДопПараметры.ТолькоАктивныйЭлемент;
	КонецЕсли;	 
	
	
	
	
	Результат       = Новый Структура;
	МассивРезультат = Новый Массив;
	
	Если ТипЗнч(ОбъектКонтекстСохраняемый) <> Тип("Структура") Тогда
		СделатьСообщение(ПолучитьТекстСообщенияПользователю("TestClient НЕ подключен."));
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если Не ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		СделатьСообщение(ПолучитьТекстСообщенияПользователю("TestClient НЕ подключен."));
		Возврат Неопределено;
	КонецЕсли;	 
	
	
	Попытка
		//попробум найти окно предупреждения
		АктивноеОкно = НайтиОкноМодальногоДиалога();
		Если АктивноеОкно = Неопределено Тогда
			АктивноеОкно = ОбъектКонтекстСохраняемый.ТестовоеПриложение.ПолучитьАктивноеОкно();
		КонецЕсли;	 
		
		
		
		ТекущаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
		Если ТекущаяФорма = Неопределено Тогда
			СделатьСообщение(ПолучитьТекстСообщенияПользователю("Активная форма не найдена"));
			Возврат Неопределено;
		КонецЕсли;	 
		
		ДопПараметры.Вставить("ТекущаяФорма",ТекущаяФорма);
		
		АктивныйЭлемент = Неопределено;
		Если ТолькоАктивныйЭлемент Тогда
			Если ТекущаяФорма.ИмяФормы = "" Тогда
				//скорее всего это форма, полученная через ТабДок.Показать()
				МассивЭлементов = ТекущаяФорма.НайтиОбъекты();
				Если МассивЭлементов.Количество() > 0 Тогда
					АктивныйЭлемент = МассивЭлементов[0];
				Иначе
					Возврат Неопределено;
				КонецЕсли;	 
			Иначе	
				АктивныйЭлемент = ТекущаяФорма.ПолучитьТекущийЭлемент();
			КонецЕсли;	 
			
		КонецЕсли;	 
		
		
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Найдена форма: ТекстЗаголовка=%1, ИмяФормы=%2. Окно <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекущаяФорма.ТекстЗаголовка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТекущаяФорма.ИмяФормы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",АктивноеОкно.Заголовок);
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
	Исключение
		Сообщить(ПолучитьТекстСообщенияПользователю("Ошибка при получении активной формы."));
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("ПолучитьСостояниеФормыTestClient:%1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеОшибки());
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		Возврат Неопределено;
	КонецПопытки;
	
	
	ТекТЧ           = Неопределено;
	Если ТолькоАктивныйЭлемент Тогда
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить(АктивныйЭлемент);
		
		ТаблицыФормы = Новый Массив;
	Иначе	
		МассивЭлементов = ТекущаяФорма.НайтиОбъекты();
		ТаблицыФормы    = ТекущаяФорма.НайтиОбъекты(Тип("ТестируемаяТаблицаФормы"));
	КонецЕсли;	 
	
	
	МассивКолонокТаблиц = Новый Массив;
	Для Каждого ТаблицаФормы Из ТаблицыФормы Цикл
		ДобавитьЭлементыКолонкиТаблицы(ТаблицаФормы,МассивКолонокТаблиц);
	КонецЦикла;	
	
	Для каждого Элем Из МассивЭлементов Цикл
		Если МассивКолонокТаблиц.Найти(Элем.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		СостояниеЭлемента = ПолучитьСостояниеЭлементаФормыTestClient(Элем);
		МассивРезультат.Добавить(СостояниеЭлемента);
		
		//Сообщить("" + ТипЗнч(Элем) + ", " + Элем.Имя);
	КонецЦикла;
	
	Результат.Вставить("ИмяФормы", ТекущаяФорма.ИмяФормы);
	Результат.Вставить("МассивЭлементов", МассивРезультат);
	
	Возврат Результат;
КонецФункции	

&НаКлиенте
Функция ПолучитьЭлементИзСтруктурыПоИмени(Имя, Массив)
	Для каждого Элем Из Массив Цикл
		Если Элем.Имя = Имя Тогда
			Возврат Элем;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Процедура ДобавитьСтрокуИзменения(Стр,Изменение)
	Если Стр = "" Тогда
		Стр = Стр + "	Тогда " + Изменение + Символы.ПС;
	Иначе	
		Стр = Стр + "	И     " + Изменение + Символы.ПС;
	КонецЕсли;	 
КонецПроцедуры


&НаКлиенте
Функция ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля(Знач Стр)
	Стр = СтрЗаменить(Стр,"\n",Символы.ПС);
	
	ЭтоМногоСтрочнаяСтрока = Ложь;
	Если Найти(Стр,Символы.ПС) > 0 Тогда
		ЭтоМногоСтрочнаяСтрока = Истина;
	КонецЕсли;	 
	
	Если НЕ ЭтоМногоСтрочнаяСтрока Тогда
		Возврат "'" + ЭкранироватьСпецСимволыДляЗначенияШага(УбратьКавычкиАпострофы(Стр)) + "'";
	КонецЕсли;	 
	
	Стр = УбратьКавычкиАпострофы(Стр);
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Стр,Символы.ПС);
	
	НоваяСтрока = "";
	
	ПредставлениеЭкранированныйАпостроф = "__&Апостроф__";
	
	Для Каждого Элем Из МассивСтрок Цикл
		Элем = СтрЗаменить(Элем,"\'",ПредставлениеЭкранированныйАпостроф);
		Элем = СтрЗаменить(Элем,"'","\'");
		Элем = СтрЗаменить(Элем,ПредставлениеЭкранированныйАпостроф,"\'");
		
		НоваяСтрока = НоваяСтрока + Символы.ПС + Символы.Таб + Символы.Таб + "|'" + Элем + "'|";
	КонецЦикла;	
	
	Возврат НоваяСтрока;	
КонецФункции	

&НаКлиенте
Функция ЭкранироватьСпецСимволыДляЗначенияШага(Знач Стр)
	Стр = СтрЗаменить(Стр,"""","\""");
	Возврат СтрЗаменить(Стр,"'","\'");
КонецФункции	

&НаКлиенте
Функция ВывестиИзмененияФормыGherkin(Было, Стало, ДопПараметры)
	Стр = "";
	
	Для каждого ЭлемСтало Из Стало.МассивЭлементов Цикл
		Имя = ЭлемСтало.Имя;
		
		Если Было <> Неопределено Тогда
			ЭлемБыло = ПолучитьЭлементИзСтруктурыПоИмени(Имя, Было.МассивЭлементов);
			Если ЭлемБыло = Неопределено Тогда
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		
		Для каждого Свойство Из ЭлемСтало Цикл
			Ключ = Свойство.Ключ;
			
			Если Ключ = "ПредставлениеДанных" Тогда
				ПредставлениеДанных = ЭлемСтало.ПредставлениеДанных;
				
				Если Было = Неопределено Тогда
					Изменение = "элемент формы с именем """ + ЭлемСтало.Имя + """ стал равен " + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("'" + ЭкранироватьСпецСимволыДляЗначенияШага(ПредставлениеДанных) + "'");
					
					Если Стр = "" Тогда
						Стр = Стр + "	Тогда " + Изменение + Символы.ПС;
					Иначе	
						Стр = Стр + "	И     " + Изменение + Символы.ПС;
					КонецЕсли;	 
					
					Если ЭлемСтало.Свойство("ТекстРедактирования") Тогда
						Если ЭлемСтало.ТекстРедактирования <> ПредставлениеДанных Тогда
							Изменение = "у элемента формы с именем """ + ЭлемСтало.Имя + """ текст редактирования стал равен " + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("'" + ЭкранироватьСпецСимволыДляЗначенияШага(ЭлемСтало.ТекстРедактирования) + "'");
							
							Стр = Стр + "	И     " + Изменение + Символы.ПС;
						КонецЕсли;	 
					КонецЕсли;	 
					
				Иначе	
					Если НЕ ЭлемБыло.Свойство(Ключ) Тогда
						Продолжить;
					КонецЕсли;	 
					
					Если СокрЛП(ЭлемСтало[Ключ]) <> СокрЛП(ЭлемБыло[Ключ]) Тогда
						Изменение = "элемент формы с именем """ + ЭлемСтало.Имя + """ стал равен " + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("'" + ЭкранироватьСпецСимволыДляЗначенияШага(ПредставлениеДанных) + "'");
						
						Если Стр = "" Тогда
							Стр = Стр + "	Тогда " + Изменение + Символы.ПС;
						Иначе	
							Стр = Стр + "	И     " + Изменение + Символы.ПС;
						КонецЕсли;	 
					КонецЕсли;	 
					
					Если ЭлемСтало.Свойство("ТекстРедактирования") Тогда
						Если НЕ ЭлемБыло.Свойство("ТекстРедактирования") Тогда
							ЭлемБыло.Вставить("ТекстРедактирования",Неопределено);
						КонецЕсли;	 
						
						Если СокрЛП(ЭлемСтало["ТекстРедактирования"]) <> СокрЛП(ЭлемБыло["ТекстРедактирования"])
							И ПредставлениеДанных <> ЭлемСтало["ТекстРедактирования"]
						Тогда
							Изменение = "у элемента формы с именем """ + ЭлемСтало.Имя + """ текст редактирования стал равен " + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("'" + ЭкранироватьСпецСимволыДляЗначенияШага(ЭлемСтало.ТекстРедактирования) + "'");
							
							Если Стр = "" Тогда
								Стр = Стр + "	Тогда " + Изменение + Символы.ПС;
							Иначе	
								Стр = Стр + "	И     " + Изменение + Символы.ПС;
							КонецЕсли;	 
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли Ключ = "ТекущаяДоступность" Тогда
				Значение = "доступен";
				Если ЭлемСтало[Ключ] = Ложь Тогда
					Значение = "не доступен";
				КонецЕсли;	 
				
				Изменение = "элемент формы с именем """ + ЭлемСтало.Имя + """ " + Значение;
				
				Если Было = Неопределено Тогда
					//ДобавитьСтрокуИзменения(Стр,Изменение);
				Иначе	
					Если НЕ ЭлемБыло.Свойство(Ключ) Тогда
						Продолжить;
					КонецЕсли;	 
					
					Если СокрЛП(ЭлемСтало[Ключ]) <> СокрЛП(ЭлемБыло[Ключ]) Тогда
						ДобавитьСтрокуИзменения(Стр,Изменение);
					КонецЕсли;	 
				КонецЕсли;	 
				
			ИначеЕсли Ключ = "ТекущаяВидимость" Тогда
				Значение = "присутствует на форме";
				Если ЭлемСтало[Ключ] = Ложь Тогда
					Значение = "отсутствует на форме";
				КонецЕсли;	 
				
				Изменение = "элемент формы с именем """ + ЭлемСтало.Имя + """ " + Значение;
				
				Если Было = Неопределено Тогда
					//ДобавитьСтрокуИзменения(Стр,Изменение);
				Иначе	
					Если НЕ ЭлемБыло.Свойство(Ключ) Тогда
						Продолжить;
					КонецЕсли;	 
					
					Если СокрЛП(ЭлемСтало[Ключ]) <> СокрЛП(ЭлемБыло[Ключ]) Тогда
						ДобавитьСтрокуИзменения(Стр,Изменение);
					КонецЕсли;	 
				КонецЕсли;	 
			ИначеЕсли Ключ = "ТабДок" Тогда
				
				//Если Было = Неопределено Тогда
					
					СтрТабДок = ПолучитьСтрокуТабличныйДокументФормаTestClient(ЭлемСтало[Ключ]);
					
					Если СтрТабДок = "" Тогда
						Изменение = "табличный документ формы с именем """ + ЭлемСтало.Имя + """ стал пустым";
						Если Стр = "" Тогда
							Стр = Стр + "	Тогда " + Изменение + Символы.ПС;
						Иначе	
							Стр = Стр + "	И     " + Изменение + Символы.ПС;
						КонецЕсли;	 
					Иначе	
						Изменение = "табличный документ """ + ЭлемСтало.Имя + """ равен:";
						
						Если Стр = "" Тогда
							Стр = Стр + "	Тогда " + Изменение + Символы.ПС;
						Иначе	
							Стр = Стр + "	И     " + Изменение + Символы.ПС;
						КонецЕсли;	 
						
						Стр = Стр + СтрТабДок + Символы.ПС;
					КонецЕсли;	 
					
				//КонецЕсли;	 
				
			ИначеЕсли Ключ = "ЗначениеТЧ" Тогда
				Если ЭлемСтало[Ключ] = Неопределено Тогда
					Продолжить;
				КонецЕсли;	 
				НадоПоказатьЧтоКоличествоСтрокСталоРавноНоль = Ложь;
				Если (ЭлемСтало[Ключ].Количество() = 0) и ЭлемБыло <> Неопределено И ЭлемБыло[Ключ].Количество() <> 0 Тогда
					НадоПоказатьЧтоКоличествоСтрокСталоРавноНоль = Истина;
				ИначеЕсли (ЭлемСтало[Ключ].Количество() = 0) и ЭлемБыло = Неопределено Тогда
					НадоПоказатьЧтоКоличествоСтрокСталоРавноНоль = Истина;
				КонецЕсли;	 
				
				
				
				Если НадоПоказатьЧтоКоличествоСтрокСталоРавноНоль Тогда
					Стр = Стр + "	Тогда в таблице """ + ЭлемСтало.Имя + """ количество строк ""равно"" 0" + Символы.ПС;
					Продолжить;
				КонецЕсли;	 
				
				Если (ЭлемБыло = Неопределено) Или (ЭлемБыло[Ключ] = Неопределено) Тогда
					Изменение = "таблица """ + ЭлемСтало.Имя + """ стала равной:";
					
					Если Стр = "" Тогда
						Стр = Стр + "	Тогда " + Изменение + Символы.ПС;
					Иначе	
						Стр = Стр + "	И     " + Изменение + Символы.ПС;
					КонецЕсли;	 
					
					СтрТЧ = ПолучитьСтрокуСТЧФормаTestClient(ЭлемСтало[Ключ]);
					
					Стр = Стр + СтрТЧ + Символы.ПС;
				Иначе
					//надо сравнить две ТЧ
					ТЧбыло  = ЭлемБыло[Ключ];
					ТЧстало = ЭлемСтало[Ключ];
					
					Если ТЧстало.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;	 
					
					Если ТЧбыло.Количество() <> ТЧстало.Количество() Тогда
						//значит изменилось количество строк, просто выводим новую таблицу
						Изменение = "таблица """ + ЭлемСтало.Имя + """ стала равной:";
						
						Если Стр = "" Тогда
							Стр = Стр + "	Тогда " + Изменение + Символы.ПС;
						Иначе	
							Стр = Стр + "	И     " + Изменение + Символы.ПС;
						КонецЕсли;	 
						
						СтрТЧ = ПолучитьСтрокуСТЧФормаTestClient(ЭлемСтало[Ключ]);
						
						Стр = Стр + СтрТЧ + Символы.ПС;
						
						Продолжить;
					КонецЕсли;	 
					
					ФлагИзмененныеКолонки = Новый Массив;
					Для каждого СтрокаСтало Из ТЧстало Цикл
						Для каждого Колонка Из СтрокаСтало Цикл
							ФлагИзмененныеКолонки.Добавить(Ложь);
						КонецЦикла;	
						
						Прервать;
					КонецЦикла;	
					
					Ном = -1;
					Для каждого СтрокаСтало Из ТЧстало Цикл
						Ном        = Ном + 1;
						СтрокаБыло = ТЧбыло[Ном];
						
						идКолонки = -1;
						Для каждого Колонка Из СтрокаСтало Цикл
							идКолонки  = идКолонки + 1;
							
							ИмяКолонки = Колонка.Ключ;
							
							ЗначениеБыло  = СтрокаБыло[ИмяКолонки];
							ЗначениеСтало = СтрокаСтало[ИмяКолонки];
							
							Если ЗначениеБыло <> ЗначениеСтало Тогда
								ФлагИзмененныеКолонки[идКолонки] = Истина;
							КонецЕсли;	 
						КонецЦикла;
					
					КонецЦикла;
					
					
					ИзмененныеКолонки = Новый Массив;
					Для каждого СтрокаСтало Из ТЧстало Цикл
						Ном = -1;
						Для каждого Колонка Из СтрокаСтало Цикл
							Ном = Ном + 1;
							ИмяКолонки = Колонка.Ключ;
							Если ФлагИзмененныеКолонки[Ном] Тогда
								ИзмененныеКолонки.Добавить(ИмяКолонки);
							КонецЕсли;	 
						КонецЦикла;	
						
						Прервать;
					КонецЦикла;	
					
					
					Если ИзмененныеКолонки.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;	 
					
					
					Изменение = "таблица формы с именем """ + ЭлемСтало.Имя + """ стала равной:";
					Если Стр = "" Тогда
						Стр = Стр + "	Тогда " + Изменение + Символы.ПС;
					Иначе	
						Стр = Стр + "	И     " + Изменение + Символы.ПС;
					КонецЕсли;	 
					СтрТЧ = ПолучитьСтрокуСТЧФормаTestClient(ЭлемСтало[Ключ], ИзмененныеКолонки);
					
					Стр = Стр + СтрТЧ + Символы.ПС;
					
					
					
					
				КонецЕсли;	 
				
			КонецЕсли;	 
			
		КонецЦикла;
		
	КонецЦикла;
	
	
	Возврат Стр;
КонецФункции

&НаКлиенте
Процедура ФорматироватьМассивСтрокКакТаблицу(МассивСтрок)
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	Стр = СокрЛП(МассивСтрок[0]);
	Стр = Сред(Стр, 2,СтрДлина(Стр) - 2);
	Стр = СтрЗаменить(Стр,"\|",ПредставлениеВертЧертыВТабДок);
	МассивСтолбцов = РазложитьСтрокуВМассивПодстрок(Стр, "|");
	
	КолПараметров = МассивСтолбцов.Количество();
	МассивДлин = Новый Массив;
	Для каждого Элем Из МассивСтолбцов Цикл
		МассивДлин.Добавить(0);
	КонецЦикла;
	
	Для каждого Стр Из МассивСтрок Цикл
		Стр = Сред(Стр, 2,СтрДлина(Стр) - 2);
		Стр = СтрЗаменить(Стр,"\|",ПредставлениеВертЧертыВТабДок);
		МассивСтолбцов = РазложитьСтрокуВМассивПодстрок(Стр, "|");
		
		Для Ккк = 0 По МассивДлин.Количество() - 1 Цикл
			Зн = СокрЛП(МассивСтолбцов[Ккк]);
			Зн = СтрЗаменить(Зн, ПредставлениеВертЧертыВТабДок, "|");
			
			ДлинаСтроки = СтрДлина(Зн);
			Если ДлинаСтроки > МассивДлин[Ккк] Тогда
				МассивДлин[Ккк] = ДлинаСтроки;
			КонецЕсли;	 
			
		КонецЦикла;
	КонецЦикла;
	
	Ном = -1;
	Для каждого Стр Из МассивСтрок Цикл
		Ном = Ном + 1;
		Стр = Сред(Стр, 2,СтрДлина(Стр) - 2);
		Стр = СтрЗаменить(Стр,"\|",ПредставлениеВертЧертыВТабДок);
		МассивСтолбцов = РазложитьСтрокуВМассивПодстрок(Стр, "|");
		
		СтрПараметров = "| ";
		Для Ккк = 0 По МассивДлин.Количество() - 1 Цикл
			Зн = СокрЛП(МассивСтолбцов[Ккк]);
			Зн = СтрЗаменить(Зн, ПредставлениеВертЧертыВТабДок, "\|");
			
			Пока СтрДлина(Зн) < МассивДлин[Ккк] Цикл
				Зн = Зн + " ";
			КонецЦикла;
			СтрПараметров = СтрПараметров + Зн + " | ";
		КонецЦикла;
		
		СтрПараметров = СокрЛП(СтрПараметров);
		
		МассивСтрок[Ном] = СтрПараметров;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуТабличныйДокументФормаTestClient(ТабДок)
	МассивСтрок = Новый Массив;
	
	Стр = "|";
	
	Для каждого СтрокаТабДок Из ТабДок Цикл
		СтрокаТЧ = "|";
		Для каждого КолонкаТабДок Из СтрокаТабДок Цикл
			СтрокаТЧ = СтрокаТЧ + " '" + СтрЗаменить(КолонкаТабДок, "|", ПредставлениеВертЧертыВТабДок) + "' |";
			
		КонецЦикла;
		МассивСтрок.Добавить(СтрокаТЧ);
	КонецЦикла;
	
	
	ФорматироватьМассивСтрокКакТаблицу(МассивСтрок);
	
	
	Стр = "";
	Для каждого Элем Из МассивСтрок Цикл
		Стр = Стр + Символы.Таб + Символы.Таб +  Элем + Символы.ПС;
	КонецЦикла;
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Функция ПолучитьСтрокуСТЧФормаTestClient(ТЧ, ИзмененныеКолонки = Неопределено)
	МассивСтрок = Новый Массив;
	
	Стр = "|";
	
	//шапка ТЧ
	Для каждого СтрТЧ Из ТЧ Цикл
		Для каждого Элем Из СтрТЧ Цикл
			Если ИзмененныеКолонки <> Неопределено Тогда
				//значит выводим только нужные колонки
				Если ИзмененныеКолонки.Найти(Элем.Ключ) = Неопределено Тогда
					Продолжить;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Стр = Стр + " '" + ПолучитьКорректноеЗначениеТаблицыGherkin(Элем.Ключ) + "' |";
		КонецЦикла;
		
		Прервать;
	КонецЦикла;
	
	МассивСтрок.Добавить(Стр);
	
	Для каждого СтрТЧ Из ТЧ Цикл
		СтрокаТЧ = "|";
		Для каждого Элем Из СтрТЧ Цикл
			Если ИзмененныеКолонки <> Неопределено Тогда
				//значит выводим только нужные колонки
				Если ИзмененныеКолонки.Найти(Элем.Ключ) = Неопределено Тогда
					Продолжить;
				КонецЕсли;	 
			КонецЕсли;	 
			
			СтрокаТЧ = СтрокаТЧ + " '" + ПолучитьКорректноеЗначениеТаблицыGherkin(Элем.Значение) + "' |";
		КонецЦикла;
		
		МассивСтрок.Добавить(СтрокаТЧ);
	КонецЦикла;
	
	
	ФорматироватьМассивСтрокКакТаблицу(МассивСтрок);
	
	
	Стр = "";
	Для каждого Элем Из МассивСтрок Цикл
		Стр = Стр + Символы.Таб + Символы.Таб +  Элем + Символы.ПС;
	КонецЦикла;
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Процедура ПолучитьИзмененияФормы(Тип,ДопПараметры)
	ТекущаяФорма = Неопределено;
	ТекущееСостояниеФормы = ПолучитьСостояниеФормыTestClient(ДопПараметры);
	Если ТекущееСостояниеФормы = Неопределено Тогда
		Возврат;                                                                   
	КонецЕсли;	 
	
	Если СохраненноеСостояниеФормыTestClient <> Неопределено Тогда
		Если СохраненноеСостояниеФормыTestClient.ИмяФормы <> ТекущееСостояниеФормы.ИмяФормы Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Изменилось имя формы: было: %1, стало: %2");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СохраненноеСостояниеФормыTestClient.ИмяФормы);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТекущееСостояниеФормы.ИмяФормы);
			Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ДопПараметры.Вставить("ТекущаяФорма",ТекущаяФорма);
	
	Если Тип = "Gherkin" Тогда
		Изменения = ВывестиИзмененияФормыGherkin(СохраненноеСостояниеФормыTestClient, ТекущееСостояниеФормы,ДопПараметры);
	Иначе
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Неизвестный тип вывода данных по изменению формы.");
	КонецЕсли;	 
	
	Объект.СгенерированныйСценарий = Изменения;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.СгенерированныйСценарий;
	
	СделатьСообщение("Изменения формы обработаны.");
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗначенияДляВыполненияШага(ОбработкаТеста, ИмяПроцедуры, МассивПараметров)
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВременнуюФичу(Стр)
	ИмяФайла = ПолучитьИмяВременногоФайла("feature");
	
	ЗТ = Новый ЗаписьТекста(ИмяФайла, "UTF-8", , Истина); 
	ЗТ.ЗаписатьСтроку("Функционал: Тест"); 
	ЗТ.ЗаписатьСтроку("Сценарий: Тестовый сценарий"); 
	ЗТ.ЗаписатьСтроку(Стр); 
	
	ЗТ.Закрыть();
	
	Возврат ИмяФайла; 
КонецФункции	

&НаКлиенте
Функция СоздатьСтруктураПараметровДляЗагрузкиШага(ПутьЗагрузки, ДвоичныеДанные)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("DebugLog", Объект.DebugLog);
	СтруктураПараметров.Вставить("ДополнительныеПараметры", Неопределено);
	СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога", Ложь);
	СтруктураПараметров.Вставить("КаталогИнструментов", Объект.КаталогИнструментов);
	СтруктураПараметров.Вставить("КаталогФич", ПутьЗагрузки);
	СтруктураПараметров.Вставить("КаталогиБиблиотек", Объект.КаталогиБиблиотек);
	СтруктураПараметров.Вставить("ЯзыкГенератораGherkin", Объект.ЯзыкГенератораGherkin);
	
	МассивРезультатОбходаКаталоговДляОднойФичи = Новый Массив;
	ф = Новый Файл(ПутьЗагрузки);
	СтруткураФайла = ПолучитьСтруткураФайлаФичи(1, ф.ИмяБезРасширения, ф.ПолноеИмя, ДвоичныеДанные);
	МассивРезультатОбходаКаталоговДляОднойФичи.Добавить(СтруткураФайла);
	
	СтруктураПараметров.Вставить("МассивРезультатОбходаКаталогов", МассивРезультатОбходаКаталоговДляОднойФичи);
	СтруктураПараметров.Вставить("ВозможнаОптимизацияРаботыСФайлами", ВозможнаОптимизацияРаботыСФайлами);
	СтруктураПараметров.Вставить("ТегTreeВключенПоУмолчанию",Объект.ТегTreeВключенПоУмолчанию);
	СтруктураПараметров.Вставить("МассивСообщений", Новый Массив);
	//СтруктураПараметров.Вставить("ПутьКОбработке", Объект.DebugLog);
	СтруктураПараметров.Вставить("СписокТеговИсключение", Объект.СписокТеговИсключение);
	СтруктураПараметров.Вставить("СписокТеговОтбор", Объект.СписокТеговОтбор);
	СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева", Ложь);
	СтруктураПараметров.Вставить("ЭтоЗагрузкаФич", Истина);
	
	СтруктураПараметров.Вставить("ТаблицаУжеСуществующихСценариевУФ", ТаблицаУжеСуществующихСценариев);
	
	
	Если Объект.ВерсияПоставки = "single" Тогда
		ДвДанныеvbFeatureReader = Неопределено;
	Иначе	
		ДвДанныеvbFeatureReader = Новый ДвоичныеДанные(ПолучитьПутьКFeatureReader());
	КонецЕсли;	 
	СтруктураПараметров.Вставить("ДвДанныеvbFeatureReader", ДвДанныеvbFeatureReader);
	
	Возврат СтруктураПараметров;
КонецФункции	

&НаСервере
Процедура ЗагрузитьВременнуюФичуСервер(СтруктураПараметров)
	ВременноеИмяФайла = ПолучитьИмяВременногоФайла("epf");
	Если Объект.ВерсияПоставки = "single" Тогда
		ОбъектСервер = РеквизитФормыВЗначение("Объект");
		FeatureReader = ОбъектСервер;
	Иначе	
		СтруктураПараметров.ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
		FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла, Ложь);
	КонецЕсли;	 
	
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	
	Дерево = Новый ДеревоЗначений;
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ОбъектСервер.СоздатьКолонкиДерева(Дерево);
	
	Если Не СтруктураПараметров.Свойство("ТаблицаУжеСуществующихСценариев") Тогда
		ТаблицаУжеСуществующихСценариевСервер = ПреобразоватьМассивТаблицаУжеСуществующихСценариевВТаблицуЗначений(СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ);
		СтруктураПараметров.Вставить("ТаблицаУжеСуществующихСценариев", ТаблицаУжеСуществующихСценариевСервер);
	КонецЕсли;	 
	
	ПерваяСтрокаДерева = Дерево.Строки.Добавить();
	ПерваяСтрокаДерева.Имя = "Фичи";
	ПерваяСтрокаДерева.ПолныйПуть = "";
	
	СтруктураПараметров.Вставить("ТаблицаИзвестныхStepDefinition",ТзнТаблицаИзвестныхStepDefinition);
	СтруктураПараметров.Вставить("УниверсальныеИменаФайлов",УниверсальныеИменаФайлов(СтруктураПараметров.МассивРезультатОбходаКаталогов));
	FeatureReader.ЗагрузитьФичу(СтруктураПараметров.КаталогФич, ПерваяСтрокаДерева.Строки, СтруктураПараметров);
	СтруктураПараметров.Вставить("ТаблицаИзвестныхStepDefinition",Неопределено);
	
	Если СтруктураПараметров.Свойство("КешФич") Тогда
		СтруктураПараметров.КешФич = Неопределено;
	КонецЕсли;	 
	
	Если СтруктураПараметров.Свойство("ТаблицаУжеСуществующихСценариев") Тогда
		СтруктураПараметров.ТаблицаУжеСуществующихСценариев = Неопределено;
	КонецЕсли;	 
	
	Шаги = Новый Массив;
	ПолучитьШагиИзДерева(Дерево.Строки, Шаги,СтруктураПараметров);
	
	СтруктураПараметров.Вставить("Шаги", Шаги);	
	
	СтруктураПараметров.Вставить("ТаблицаОбластей",Неопределено);
	СтруктураПараметров.Вставить("ТаблицаПеревода",Неопределено);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьШагиИзДерева(ДеревоСтроки, Шаги,СтруктураПараметров)
	Для каждого СтрокаДерева Из ДеревоСтроки Цикл
		Если СтрокаДерева.Тип = "Шаг" Тогда
			
			Если СтрокаДерева.Родитель.ДопТип = "СтруктураСценария" Тогда
				// Эти шаги не выполняются в структуре сценария.
				Продолжить;
			КонецЕсли;	 
			
			Шаг = Новый Структура;
			Шаг.Вставить("Имя", СтрокаДерева.Имя);
			Шаг.Вставить("СтрокаРеальнойПроцедуры", СтрокаДерева.СтрокаРеальнойПроцедуры);
			Шаг.Вставить("ЗначенияПараметров", СтрокаДерева.ЗначенияПараметров);
			Шаг.Вставить("АдресСнипета", СтрокаДерева.АдресСнипета);
			Шаг.Вставить("ШагСПараметрамиВТаблице", СтрокаДерева.ШагСПараметрамиВТаблице);
			
			Если СтрокаДерева.ШагСПараметрамиВТаблице = Истина Тогда
				МассивТаблиц = Новый Массив;
				ПарамТаблица = Новый Массив;
				
				МассивТаблиц.Добавить(ПарамТаблица);
				
				ПодчиненныеСтроки = СтрокаДерева.Строки;
				Для каждого СтрокаТаблицы Из ПодчиненныеСтроки Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Имя) Тогда
						ПарамТаблица = Новый Массив;
						МассивТаблиц.Добавить(ПарамТаблица);
						Продолжить;
					КонецЕсли;	 
					
					
					СтрокаПарамТаблица = Новый Структура;
					
					НомерКолонки = 0;
					Для каждого Колонка Из СтрокаТаблицы.ПараметрыТаблицы Цикл
						НомерКолонки       = НомерКолонки + 1;
						СтруктураПараметра = Колонка.Значение;
						Значение           = ПолучитьЗначениеДляПередачиВМетодСервер(СтруктураПараметра.Значение, СтруктураПараметра.Тип,СтруктураПараметров);
						Значение           = Вычислить(Значение);
						
						СтрокаПарамТаблица.Вставить("Кол" + XMlСтрока(НомерКолонки), Значение);
					КонецЦикла;
					
					ПарамТаблица.Добавить(СтрокаПарамТаблица);
				КонецЦикла;
				Шаг.Вставить("МассивТаблиц", МассивТаблиц);
			КонецЕсли;	 
			
			
			Шаги.Добавить(Шаг);
		Иначе	
			ПолучитьШагиИзДерева(СтрокаДерева.Строки, Шаги,СтруктураПараметров);
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры	

&НаКлиенте
Функция ПолучитьМассивПараметровИзСписокАргументов(СписокАргументов)
	МассивПараметров = Новый Массив;
	Для Каждого ЭлементМассива Из СписокАргументов Цикл
		Элем = ЭлементМассива.Значение;
		МассивПараметров.Добавить(ПолучитьЗначениеДляПередачиВМетод(Элем.Значение, Элем.Тип));
	КонецЦикла;
	
	Возврат МассивПараметров;
КонецФункции	

&НаКлиенте
Процедура ПодготовитьИВызватьМетод(ТекШаг, ОбработкаТеста, ИмяПроцедуры, МассивПараметров)
	ОбработкаТеста.Контекст            = ОбъектКонтекст;
	ОбработкаТеста.КонтекстСохраняемый = ОбъектКонтекстСохраняемый;
	
	Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
		ЗаписатьЛогВЖРПередВыполнениемШага(ТекШаг.Имя);
	КонецЕсли;	 
	
	ВсёЕщёИдётВыполнениеШагов = Истина;
	ВызватьМетод(ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
	ВсёЕщёИдётВыполнениеШагов = Ложь;
	
	ОбъектКонтекст            = ОбработкаТеста.Контекст;
	ОбъектКонтекстСохраняемый = ОбработкаТеста.КонтекстСохраняемый;
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДляВыполненияОдногоШага(Стр, ДвДанныеvbFeatureReader, КаталогИнструментов)
	ВременноеИмяФайла = Неопределено;
	Если Объект.ВерсияПоставки = "standart" Тогда
		FeatureReader     = СоздатьFeatureReader(КаталогИнструментов, ДвДанныеvbFeatureReader, ВременноеИмяФайла);
	Иначе
		FeatureReader = РеквизитФормыВЗначение("Объект");
	КонецЕсли;	 
	
	ОписаниеШага               = FeatureReader.ПолучитьОписаниеШагаПоСтроке(Стр);
	ТзнИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	
	Поз          = Найти(ОписаниеШага.StepDefinition, "(");
	ИмяПроцедуры = Лев(ОписаниеШага.StepDefinition, Поз - 1);
	ОписаниеШага.Вставить("ИмяПроцедуры", ИмяПроцедуры);
	
	СтрокаТзнИзвестныхStepDefinition = ТзнИзвестныхStepDefinition.Найти(НРег(ИмяПроцедуры), "СтрокаДляПоиска");
	Если СтрокаТзнИзвестныхStepDefinition = Неопределено Тогда
		ОписаниеШага.Вставить("ШагНайден", Ложь);
	Иначе	
		ОписаниеШага.Вставить("ШагНайден", Истина);
		ОписаниеШага.Вставить("ИмяФайла", СтрокаТзнИзвестныхStepDefinition.ИмяФайла);
	КонецЕсли;	 
	
	Если ВременноеИмяФайла <> Неопределено Тогда
		УдалитьФайлы(ВременноеИмяФайла);
	КонецЕсли;	 
	
	Возврат ОписаниеШага;
КонецФункции	

&НаКлиенте
Процедура ВыполнитьМетодШагЧерезВременныйФичаФайл(Стр)
	ВременнаяФича = ПолучитьВременнуюФичу(Стр);
	ДвоичныеДанные = Новый ДвоичныеДанные(ВременнаяФича);
	
	СтруктураПараметров = СоздатьСтруктураПараметровДляЗагрузкиШага(ВременнаяФича, ДвоичныеДанные);
	СтруктураПараметров.Вставить("ЭтоLinux",ЭтоLinux);
	СтруктураПараметров.Вставить("ОтборПоТегам",Ложь);
	ЗагрузитьВременнуюФичуСервер(СтруктураПараметров);
	
	Шаги = СтруктураПараметров.Шаги;
	Если Шаги.Количество() = 0 Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Метод Шаг() не выполнен. Не удалось прочитать шаги из временного фича файла <%1>. Исходная строка:%2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ВременнаяФича);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Символы.ПС + Стр);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Для каждого ТекШаг Из Шаги Цикл
		Если Не ЗначениеЗаполнено(ТекШаг.АдресСнипета) Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Для шага <%1> не найден EPF файл.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекШаг.Имя);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ИмяПроцедуры     = ТекШаг.СтрокаРеальнойПроцедуры;
		СписокАргументов = ТекШаг.ЗначенияПараметров;
		
		МассивПараметров = ПолучитьМассивПараметровИзСписокАргументов(СписокАргументов);
		Если ТекШаг.ШагСПараметрамиВТаблице = Истина Тогда
			Для Каждого ТабПарам Из ТекШаг.МассивТаблиц Цикл
				МассивПараметров.Добавить(ТабПарам);
			КонецЦикла;	
		КонецЕсли;	 
		
		АдресСнипета   = ТекШаг.АдресСнипета;
		ОбработкаТеста = ПолучитьКонтекстТестаПоАдресСнипета(АдресСнипета);
		
		ПодготовитьИВызватьМетод(ТекШаг, ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДляСлужебногоОповещения()
	Оповестить("СлужебноеОповещение", "СлужебноеОповещение");
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщениеОТомЧтоПоЗаголовкуНайденоБольшеОдногоЭлемента(МассивЭлементов, ИмяРеквизита)
	ТекстСообщения = ПолучитьТекстСообщенияПользователю("Обнаружено несколько полей с заголовком <%1>");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
	Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
	Ном = 0;
	Для каждого Элем Из МассивЭлементов Цикл
		Ном = Ном + 1;
		Попытка
			ПредставлениеДанных = Элем.ПолучитьПредставлениеДанных();
		Исключение
			ПредставлениеДанных = "";
		КонецПопытки;
		
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("№%1. Заголовок=<%2>. Имя=<%3>. ТекстПоля = <%4>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Ном);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Элем.ТекстЗаголовка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Элем.Имя);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ПредставлениеДанных);
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
	КонецЦикла;
	
КонецПроцедуры



//{снятие скриншота
&НаКлиенте
Функция СформироватьИмяФайлаСкриншота()
	УИД = Новый УникальныйИдентификатор;
	
	Стр = "" + УИД + "-attachment.png";
	
	Каталог = Объект.КаталогOutputСкриншоты;
	Если НЕ ФайлСуществуетКомандаСистемы(Каталог, "СформироватьИмяФайлаСкриншота") Тогда
		СоздатьКаталогКомандаСистемы(Каталог);
	КонецЕсли;	 
	
	Стр = ДополнитьСлешВПуть(Каталог) + Стр;
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьМассивPIDПоИмениПроцесса(ИмяПроцесса, Массив)
	ЛогФайл = ПолучитьИмяВременногоФайла("txt");
	Команда = "tasklist /FI ""IMAGENAME eq " + ИмяПроцесса +  """ /nh > """ + ЛогФайл + """";
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
	
	Если НЕ ФайлСуществуетКомандаСистемы(ЛогФайл, "ЗаполнитьМассивPIDПоИмениПроцесса") Тогда
		СделатьСообщение("Ошибка при получении списка процессов 1С.");
		Возврат;
	КонецЕсли;	 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ЛогФайл, "UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		
		Если СокрЛП(Стр) = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Стр = НРег(Стр);
		Стр = СокрЛП(СтрЗаменить(Стр, НРег(ИмяПроцесса), ""));
		Поз = Найти(Стр, " ");
		PID = Лев(Стр, Поз - 1);
		Если Найти(PID,"info") > 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Попытка
			PID = Число(PID);
			Массив.Добавить(PID);
		Исключение
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог преобразовать к числу PID=%1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",PID); 
			СделатьСообщение(ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;	
	
	Текст.Закрыть();
	
	УдалитьФайлыКомандаСистемы(ЛогФайл);
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотТекущегоОкнаИАктивироватьСледущееОкно()
	СделатьСкриншотОшибкиТекущегоОкна();
	
	ПодключитьОбработчикОжидания("СделатьСкриншотыОшибкиКаждогоОкна1С", 1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотТекущегоОкнаИАктивироватьСледущееОкноSikuliX()
	СделатьСообщение("Делаю скриншот.");
	СделатьСкриншотОшибкиТекущегоОкна();
	ПодключитьОбработчикОжидания("СделатьСкриншотыОшибкиКаждогоОкна1СSikuliX", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСкриншотКСценарию(РезультатПрохожденияТестовСценария,ИмяФайлаСкриншота)
	Если НЕ РезультатПрохожденияТестовСценария.Свойство("МассивСкриншотов") Тогда
		МассивСкриншотов = Новый Массив();
		РезультатПрохожденияТестовСценария.Вставить("МассивСкриншотов", МассивСкриншотов);
	Иначе
		МассивСкриншотов = РезультатПрохожденияТестовСценария.МассивСкриншотов;
	КонецЕсли;	 
	
	ФайлИмяФайлаСкриншота = Новый Файл(ИмяФайлаСкриншота);
	
	СтруктураСкриншот = Новый Структура;
	СтруктураСкриншот.Вставить("ИмяФайла", ФайлИмяФайлаСкриншота.Имя);
	СтруктураСкриншот.Вставить("ДвоичныеДанные", Новый ДвоичныеДанные(ИмяФайлаСкриншота));
	МассивСкриншотов.Добавить(СтруктураСкриншот);
КонецПроцедуры 

&НаКлиенте
Процедура СделатьСкриншотОшибкиТекущегоОкна()
	ИмяФайлаСкриншота = СформироватьИмяФайлаСкриншота();
	СделатьСкриншот(ИмяФайлаСкриншота);
	
	РезультатПрохожденияТестовСценария = ЗначениеПараметровДляСнятияСкриншотов.РезультатПрохожденияТестовСценария;
	ДобавитьСкриншотКСценарию(РезультатПрохожденияТестовСценария,ИмяФайлаСкриншота);
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотыОшибкиКаждогоОкна1С()
	ТекProcessID = ТекProcessID + 1;
	Если ТекProcessID > (МассивPIDОкон1С.Количество() - 1) Тогда
		ПерейтиКВыполнениюСледующегоСценария();
		Возврат;
	КонецЕсли;	 
	
	ProcessID = МассивPIDОкон1С[ТекProcessID];
	
	Если WshShell = Неопределено Тогда
		WshShell = ПолучитьWshShell();
	КонецЕсли;	 
	
	Попытка
		WshShell.AppActivate(ProcessID);
	Исключение
		СделатьСообщение(ОписаниеОшибки());
	КонецПопытки;
	
	ПодключитьОбработчикОжидания("СделатьСкриншотТекущегоОкнаИАктивироватьСледущееОкно", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотыОшибкиКаждогоОкна1СSikuliX()
	ТекProcessID = ТекProcessID + 1;
	Если ТекProcessID > (МассивКоординатОкон1С.Количество() - 1) Тогда
		ПерейтиКВыполнениюСледующегоСценария();
		Возврат;
	КонецЕсли;	 
	
	ТекКоординаты = МассивКоординатОкон1С[ТекProcessID];
	
	ТекстСообщения = ПолучитьТекстСообщенияПользователю("Активирую окно с координатами: %1;%2");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",XMlСтрока(ТекКоординаты.x)); 
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",XMlСтрока(ТекКоординаты.y)); 
	СделатьСообщение(ТекстСообщения);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СлужебныйВызов",Истина);
	ВыполнитьSikuliСкрипт(Объект.КаталогИнструментов + "\tools\Sikuli\ClickCoordinates.sikuli --args " + XMlСтрока(ТекКоординаты.x) + " " + XMlСтрока(ТекКоординаты.y) , -1, Истина,,ДопПараметры);
	
	ПодключитьОбработчикОжидания("СделатьСкриншотТекущегоОкнаИАктивироватьСледущееОкноSikuliX", 1, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СортироватьМассивКоординат(Массив)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("x");
	Тзн.Колонки.Добавить("y");
	
	Для Каждого Элем Из Массив Цикл
		СтрТзн = Тзн.Добавить();
		СтрТзн.x = Элем.x;
		СтрТзн.y = Элем.y;
	КонецЦикла;	
	
	Тзн.Сортировать("x");
	
	Массив = Новый Массив;
	
	Для Каждого СтрТзн Из Тзн Цикл
		Массив.Добавить(Новый Структура("x,y", СтрТзн.x, СтрТзн.y));
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивКоординатОкон1С()
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СлужебныйВызов",Истина);
	Рез = ВыполнитьSikuliСкрипт(Объект.КаталогИнструментов + "/tools/Sikuli/GetAll1CWindowsCoordinates.sikuli > """ + ИмяФайлаЛога + """", -1, Истина,,ДопПараметры);
	Если Рез <> 0 Тогда
		СделатьСообщение("Не смог выполнить команду по получению координат на экране всех окон 1С в панели задач.");
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если Не ФайлСуществуетКомандаСистемы(ИмяФайлаЛога) Тогда
		СделатьСообщение("Не смог выполнить команду по получению координат на экране всех окон 1С в панели задач.");
		Возврат Неопределено;
	КонецЕсли;	 
	
	Массив = Новый Массив;
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаЛога, "UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		МассивЗначений = РазложитьСтрокуВМассивПодстрок(Стр, ";");
		
		Для Ккк = 0 По МассивЗначений.Количество() - 1 Цикл
			МассивЗначений[Ккк] = СокрЛП(МассивЗначений[Ккк]);
		КонецЦикла;
		
		Если МассивЗначений[0] <> "match" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Массив.Добавить(Новый Структура("x,y", Число(МассивЗначений[1]), Число(МассивЗначений[2])));
		
	КонецЦикла;	
	
	Текст.Закрыть();
	
	СортироватьМассивКоординат(Массив);
	
	Возврат Массив;
КонецФункции	

&НаКлиенте
Процедура ЗакрытьМодальныйДиалогИСнятьСкриншот()
	Если НЕ ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ОбъектКонтекстСохраняемый.ТестовоеПриложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИскатьМодальныйДиалог",Истина);
	АктивноеОкно = ПолучитьАктивноеОкноИзТестовоеПриложение(ДопПараметры);
	Если АктивноеОкно = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЭтоЗаголовокОкнаМодальногоДиалога(АктивноеОкно.Заголовок) Тогда
		Возврат;
	КонецЕсли;	
	
	Попытка
		КнопкаОК = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),"ОК");
		Если КнопкаОК = Неопределено Тогда
			КнопкаОК = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),"OK");
		КонецЕсли;	 
		Если КнопкаОК = Неопределено Тогда
			АктивноеОкно.Закрыть();
		Иначе	
			КнопкаОК.Нажать();
		КонецЕсли;	  
	Исключение
		//не получилось закрыть модальный диалог
		Возврат;
	КонецПопытки;	
	
	sleep(2);
	
	СделатьСкриншотОшибкиТекущегоОкна();
КонецПроцедуры 

&НаКлиенте
Процедура СделатьСкриншотыОшибки()
	Если Объект.СниматьСкриншотКаждогоОкна1С Тогда
		//временное решение через SikuliX скрипт
		СделатьСообщение("Делаю скриншоты всех окон 1С.");
		ТекProcessID = -1;
		МассивКоординатОкон1С = ПолучитьМассивКоординатОкон1С();
		Если МассивКоординатОкон1С = Неопределено Тогда
			СделатьСкриншотОшибкиТекущегоОкна();
			ПерейтиКВыполнениюСледующегоСценария();
			Возврат;
		КонецЕсли;	 
		
		
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Найдено %1 окон.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",МассивКоординатОкон1С.Количество()); 
		СделатьСообщение(ТекстСообщения);
		
		Если МассивКоординатОкон1С.Количество() = 0 Тогда
			СделатьСообщение("Не найдено ни одного окна 1С. Делаю обычный скриншот.");
			СделатьСкриншотОшибкиТекущегоОкна();
			ПерейтиКВыполнениюСледующегоСценария();
			Возврат;
		КонецЕсли;	 
		
		//сделаем текущий скриншот - чтобы не получилось ситуации, что активное окно свернулось
		СделатьСообщение("Делаю общий скриншот.");
		СделатьСкриншотОшибкиТекущегоОкна();
		
		СделатьСкриншотыОшибкиКаждогоОкна1СSikuliX();
		Возврат;
	КонецЕсли;	 
	
	СделатьСкриншотОшибкиТекущегоОкна();
	
	//если на экране модальный диалог - закроем его, сделаем паузу и снимем ещё один скриншот
	//т.к. часто после закрытия диалога можно получить дополнительную информацию об ошибке
	ЗакрытьМодальныйДиалогИСнятьСкриншот();
	
	ПерейтиКВыполнениюСледующегоСценария();
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотВозникновенияОшибкиИПерейтиКВыполнениюСледующегоСценария(ОписаниеШага, СтрокаСценария, РезультатПрохожденияТестовСценария)
	Если Не Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
		Возврат;
	КонецЕсли;	 
	
	ЗначениеПараметровДляСнятияСкриншотов = Новый Структура;
	ЗначениеПараметровДляСнятияСкриншотов.Вставить("ОписаниеШага", ОписаниеШага);
	ЗначениеПараметровДляСнятияСкриншотов.Вставить("СтрокаСценария", СтрокаСценария);
	ЗначениеПараметровДляСнятияСкриншотов.Вставить("РезультатПрохожденияТестовСценария", РезультатПрохожденияТестовСценария);
	
	ПодключитьОбработчикОжидания("СделатьСкриншотыОшибки", 1, Истина);
	
КонецПроцедуры
//}снятие скриншота

&НаКлиенте
Функция ПолучитьМассивСнипетовПрерывающихЗаписьСценария()
	Массив = Новый Массив;
	Массив.Добавить("обратитевнимание");
	
	Возврат Массив;
КонецФункции	

//свёртка дерева до строк фич
&НаКлиенте
Процедура СвернутьДеревоДоФичРекурсивно(ДеревоФормыСтроки)
	Для Каждого Строка Из ДеревоФормыСтроки Цикл
		Если Строка.Тип = "Фича" Тогда
			СвернутьСтрокуДерева(Строка);
			Продолжить;
		КонецЕсли;	 
		
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			СвернутьДеревоДоФичРекурсивно(ПодчиненныеСтроки);
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры

//свёртка дерева до строк сценариев
&НаКлиенте
Процедура СвернутьДеревоДоСценариевРекурсивно(ДеревоФормыСтроки)
	Для Каждого Строка Из ДеревоФормыСтроки Цикл
		Если Строка.Тип = "Фича" Тогда
			РазвернутьСтрокуДерева(Строка);
		КонецЕсли;	 
		
		Если Строка.Тип = "Сценарий" Тогда
			СвернутьСтрокуДерева(Строка);
			Продолжить;
		КонецЕсли;	 
		
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			СвернутьДеревоДоСценариевРекурсивно(ПодчиненныеСтроки);
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры

//свёртка дерева до строк шагов и примеров
&НаКлиенте
Процедура СвернутьДеревоДоШаговРекурсивно(ДеревоФормыСтроки)
	Для Каждого Строка Из ДеревоФормыСтроки Цикл
		
		Если Строка.Тип = "Фича" 
			ИЛИ Строка.Тип = "Сценарий" 
			ИЛИ Строка.Тип = "Примеры" Тогда
				РазвернутьСтрокуДерева(Строка);
		КонецЕсли;	 
			
		Если Строка.Тип = "ШагСценарий" 
			ИЛИ Строка.Тип = "Пример" 
			ИЛИ Строка.Тип = "Область" Тогда
				СвернутьСтрокуДерева(Строка);
			Продолжить;
		КонецЕсли;	 
		
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			СвернутьДеревоДоШаговРекурсивно(ПодчиненныеСтроки);
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры

// несколько клиентов тестирования {

&НаКлиенте
Процедура СброситьФлагПодключенияКлиентаТестирования()
	Для Каждого НайденнаяСтрока Из ДанныеКлиентовТестирования Цикл
		НайденнаяСтрока.Подключен = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеТекущейИнфобазы()
	
	ДанныеТекущейИнфобазы = Новый Структура;
	ДанныеТекущейИнфобазы.Вставить("Имя", "Этот клиент");
	
	
	
	СвободныйПорт = 1538;//надо так, иначе не подключается уже запущенный TestClient, если была переоткрыта VB
	
	Отбор = Новый Структура;
	Отбор.Вставить("Имя", "Этот клиент");
	СтрокиДанныеКлиентовТестирования = ДанныеКлиентовТестирования.НайтиСтроки(Отбор);
	Если СтрокиДанныеКлиентовТестирования.Количество() > 0 Тогда
		СтрокаЭтотКлиент = СтрокиДанныеКлиентовТестирования[0];
	Иначе	
		СтрокаЭтотКлиент = ДанныеКлиентовТестирования.Вставить(0);// этот клиент должен быть первым
		
		КаталогБазы = СтрокаСоединенияИнформационнойБазы();
		ДанныеТекущейИнфобазы.Вставить("ИмяКомпьютера",  "localhost");
		ДанныеТекущейИнфобазы.Вставить("ТипКлиента",     "Тонкий");
		ДанныеТекущейИнфобазы.Вставить("ПутьКИнфобазе",  КаталогБазы);
		ДанныеТекущейИнфобазы.Вставить("ПортЗапускаТестКлиента", СвободныйПорт);	
	КонецЕсли;	 
	
	ЗаполнитьЗначенияСвойств(СтрокаЭтотКлиент, ДанныеТекущейИнфобазы);
	
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьПараметрДляWeb(Знач Стр)
	Стр = СтрЗаменить(Стр, "%", "%25");
	Стр = СтрЗаменить(Стр, "?", "%3F");
	Стр = СтрЗаменить(Стр, "&", "%26");
	Стр = СтрЗаменить(Стр, "=", "%3D");
	Стр = СтрЗаменить(Стр, " ", "%20");
	Стр = СтрЗаменить(Стр, """", "%22");
	Стр = СтрЗаменить(Стр, "/", "%2F");
	Стр = СтрЗаменить(Стр, "\", "%5C");
	
	Возврат Стр;
КонецФункции

&НаКлиенте
Процедура ДобавитьПараметрКWeb(Стр,ИмяПараметра,Значение = Неопределено)
	Стр = Стр + ?(Найти(Стр, "?") = 0, "?", "&") + ИмяПараметра;
	Если Значение <> Неопределено Тогда
		Стр = Стр + "=" + ПреобразоватьПараметрДляWeb(Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция УбратьКавычки(Стр)
	Если Лев(Стр,1) = """" и Прав(Стр,1) = """" Тогда
		Возврат Сред(Стр,2,СтрДлина(Стр)-2);
	КонецЕсли;	 
	
	Возврат Стр; 
КонецФункции	

&НаКлиенте
Функция УбратьКавычкиАпострофы(Стр)
	Если Лев(Стр,1) = """" и Прав(Стр,1) = """" Тогда
		Возврат Сред(Стр,2,СтрДлина(Стр)-2);
	КонецЕсли;	 
	
	Если Лев(Стр,1) = "'" и Прав(Стр,1) = "'" Тогда
		Возврат Сред(Стр,2,СтрДлина(Стр)-2);
	КонецЕсли;	 
	
	Возврат Стр; 
КонецФункции	

&НаКлиенте
Функция ПолучитьМассивПараметровЗапуска(Стр,Разделитель)
	Рез = "";
	КавычкаОткрылась = Ложь;
	Для Ккк = 1 По СтрДлина(Стр) Цикл
		Символ = Сред(Стр,Ккк,1);
		
		Если Символ = """" Тогда
			КавычкаОткрылась = Не КавычкаОткрылась;
		КонецЕсли;	 
		
		Если КавычкаОткрылась Тогда
			Если Символ = " " Тогда
				Символ = "~ЭкранированиеПробела~";
			КонецЕсли;	 
		КонецЕсли;	 
		
		Рез = Рез + Символ;
	КонецЦикла;	
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Рез,Разделитель);
	
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		МассивСтрок[Ккк] = СтрЗаменить(МассивСтрок[Ккк],"~ЭкранированиеПробела~"," ")
	КонецЦикла;	
	
	Возврат МассивСтрок;
КонецФункции	

&НаКлиенте
Функция ПолучитьСтрокуЗапускаWebКлиент(ДанныеЗапускаКлиентаТестирования)
	СтрокаЗапуска = СокрЛП(ДанныеЗапускаКлиентаТестирования.ПутьКИнфобазе);
	Если НРег(Лев(СтрокаЗапуска,3)) = "ws=" Тогда
		СтрокаЗапуска = Сред(СтрокаЗапуска,4);
		СтрокаЗапуска = УбратьКавычки(СтрокаЗапуска);
	КонецЕсли;	 
	ДобавитьПараметрКWeb(СтрокаЗапуска, "TESTCLIENT");
	ДобавитьПараметрКWeb(СтрокаЗапуска, "TESTCLIENTID", ПолучитьКорректноеИмяTesClient(ДанныеЗапускаКлиентаТестирования.Имя));
	
	
	МассивДоппараметров = ПолучитьМассивПараметровЗапуска(ДанныеЗапускаКлиентаТестирования.ДопПараметры," ");
	Для Каждого Элем Из МассивДоппараметров Цикл
		Если Лев(Элем,2) = "/N" Тогда
			ДобавитьПараметрКWeb(СтрокаЗапуска, "N", УбратьКавычки(Сред(Элем,3)));
		ИначеЕсли Лев(Элем,2) = "/P" Тогда
			ДобавитьПараметрКWeb(СтрокаЗапуска, "P", УбратьКавычки(Сред(Элем,3)));
		ИначеЕсли Лев(Элем,2) = "/L" Тогда
			ДобавитьПараметрКWeb(СтрокаЗапуска, "L", УбратьКавычки(Сред(Элем,3)));
		ИначеЕсли Лев(Элем,3) = "/VL" Тогда
			ДобавитьПараметрКWeb(СтрокаЗапуска, "VL", УбратьКавычки(Сред(Элем,4)));
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат СтрокаЗапуска;
КонецФункции	

&НаКлиенте
Функция ПолучитьСтрокуЗапускаDesktopПриложение(ДанныеЗапускаКлиентаТестирования,ДопПараметры)
	ДопПараметры.Вставить("ТипБазыФайловая",Ложь);
	КаталогБазы = ДанныеЗапускаКлиентаТестирования.ПутьКИнфобазе;
	ДопПараметры.Вставить("КаталогБазы",КаталогБазы);
	Если Найти(ВРег(КаталогБазы), ВРег("File=")) > 0 Тогда
		ДопПараметры.Вставить("ТипБазыФайловая",Истина);
		ИмяКаталога = СтрЗаменить(СокрЛП(КаталогБазы), "File=", "");
		ИмяКаталога = СтрЗаменить(ИмяКаталога,";","");
		ИмяКаталога = УбратьКавычки(ИмяКаталога);
		ДопПараметры.Вставить("КаталогБазы",ИмяКаталога);
		
		КаталогБазы = СтрЗаменить(КаталогБазы, "File=", " /F");
	ИначеЕсли Найти(ВРег(КаталогБазы), ВРег("Srvr=")) > 0 Тогда
		КаталогБазы = СтрЗаменить(КаталогБазы, "Srvr=", "/S");
		КаталогБазы = СтрЗаменить(КаталогБазы, """;Ref=""", "\");
	ИначеЕсли Найти(ВРег(КаталогБазы), ВРег("ws=")) > 0 Тогда
		КаталогБазы = СтрЗаменить(КаталогБазы, "ws=", " /WS");
	Иначе
	КонецЕсли;
	КаталогБазы = СтрЗаменить(КаталогБазы, ";", "");
	
	Если ЭтоLinux = Истина Тогда
		КаталогБазы = СтрЗаменить(КаталогБазы, "\", "/");
	КонецЕсли;	
	
	ПараметрыОтладчика = "";
	Если Объект.ЗапускатьТестКлиентВРежимеОтладки Тогда
		// /debug -http -attach /debuggerURL "http://localhost:1560"
		ПараметрыОтладчика = "/debug " + Объект.КлючиОтладки + " /debuggerURL """ + Объект.АдресОтладчика + """"; 
	КонецЕсли;
	
	СтрокаЗапуска = "ENTERPRISE " + КаталогБазы + ПараметрыОтладчика + " /TESTCLIENT ";
	
	СвободныйПорт = ПроверитьПортНаЗанятость(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента);
	Если СвободныйПорт <> ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Порт %1 занят или находится вне указанного диапазона, порт подключения изменен на %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Формат(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента, "ЧГ=")); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",СвободныйПорт);
		СделатьСообщение(ТекстСообщения);
		ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента = СвободныйПорт;
		Отбор = Новый Структура;
		Отбор.Вставить("Имя", ДанныеЗапускаКлиентаТестирования.Имя);
		
		НайденныеКлиенты = ДанныеКлиентовТестирования.НайтиСтроки(Отбор);
		Если НайденныеКлиенты.Количество() = 1 Тогда
			НайденныеКлиенты[0].ПортЗапускаТестКлиента = ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаЗапуска = СтрокаЗапуска + "-TPort " + Формат(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента, "ЧГ=") + " ";	
	
	ДопПараметр = ДанныеЗапускаКлиентаТестирования.ДопПараметры + ДопПараметр;
 	Если ЭтоЗапускВРежимеКоманднойСтроки Тогда
		СтрокаЗапуска = СтрокаЗапуска + " /CTemp " + ДопПараметр;//добавил /CTemp, чтобы убрать передачу параметра /C в TestClient, с которым был запущен TestManager
 	Иначе
		СтрокаЗапуска = СтрокаЗапуска + ДопПараметр;
	КонецЕсли;
	
	Возврат СтрокаЗапуска;
КонецФункции	

&НаКлиенте
Процедура ЗапуститьСеанс1СЧерез1cv8(ДанныеЗапускаКлиентаТестирования,СтрокаЗапуска)
	СтрокаЗапуска1с = КаталогПрограммы() + "1cv8";
	Если Найти(НРег(ДанныеЗапускаКлиентаТестирования.ТипКлиента), "тонкий") > 0 Тогда
		СтрокаЗапуска1с = КаталогПрограммы() + "1cv8c";
	КонецЕсли;	 
	Если ЭтоLinux = Ложь Тогда
		СтрокаЗапуска1с = СтрокаЗапуска1с + ".exe";
		Если Объект.ЗапускатьКлиентТестированияСМаксимизированнымОкном Тогда
			СтрокаЗапуска1с = "start /max """" """ + СтрокаЗапуска1с  + """ " + СтрокаЗапуска;
		Иначе	
			СтрокаЗапуска1с = """" + СтрокаЗапуска1с  + """ " + СтрокаЗапуска;
		КонецЕсли;	 
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(СтрокаЗапуска1с, 0);	
	Иначе
		КомандаСистемы(СтрокаЗапуска1с + " "+СтрокаЗапуска);
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ЗапуститьКлиентаТестирования(ДанныеЗапускаКлиентаТестирования, ДопПараметр = "")
	
	НадоЗапускатьПриложение = Ложь;
	Если Не ЗначениеЗаполнено(ДанныеЗапускаКлиентаТестирования.ИмяКомпьютера) Тогда
		//Значит не указано имя ПК для запуска. Это равносильно указанию localhost
		НадоЗапускатьПриложение = Истина;
	ИначеЕсли НРег(ДанныеЗапускаКлиентаТестирования.ИмяКомпьютера) = "localhost" Тогда
		НадоЗапускатьПриложение = Истина;
	ИначеЕсли НРег(ДанныеЗапускаКлиентаТестирования.ИмяКомпьютера) = "127.0.0.1" Тогда
		НадоЗапускатьПриложение = Истина;
	ИначеЕсли ДанныеЗапускаКлиентаТестирования.ТипКлиента = "Web" Тогда
		//браузер мы можем спокойно запускать
		НадоЗапускатьПриложение = Истина;
	КонецЕсли;	 
	
	Если НЕ НадоЗапускатьПриложение Тогда
		Возврат;
	КонецЕсли;	 
	
	ПроисходилЗапускTescClient = Истина;	
	
	ДопПараметрыЗапуска = Новый Структура;
	Если ДанныеЗапускаКлиентаТестирования.ТипКлиента = "Web" Тогда
		СтрокаЗапуска = ПолучитьСтрокуЗапускаWebКлиент(ДанныеЗапускаКлиентаТестирования);
	Иначе	
		СтрокаЗапуска = ПолучитьСтрокуЗапускаDesktopПриложение(ДанныеЗапускаКлиентаТестирования,ДопПараметрыЗапуска);
	КонецЕсли;	 
	
	
	ТекстСообщения = ПолучитьТекстСообщенияПользователю("СтрокаЗапуска=%1");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаЗапуска);
	Отладка(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
	
	//ЗапуститьПриложение(СтрокаЗапуска);
	
	Если ДанныеЗапускаКлиентаТестирования.ТипКлиента = "Web" Тогда
		Если ЕстьПоддержкаАсинхронныхВызовов Тогда
			ВыполнитьКомандуОСБезПоказаЧерногоОкна("start """" """ + СтрокаЗапуска + """", 0);
		Иначе	
			ЗапуститьПриложение(СтрокаЗапуска);
		КонецЕсли;	 
		
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеЗапускаКлиентаТестирования.ТипКлиента) Или
		Найти(НРег(ДанныеЗапускаКлиентаТестирования.ТипКлиента), "тонкий") > 0 Или 
		ЭтоLinux Тогда
		
		Если ДопПараметрыЗапуска.Свойство("ТипБазыФайловая") Тогда
			Если ДопПараметрыЗапуска.ТипБазыФайловая Тогда
				Если НЕ ФайлСуществуетКомандаСистемы(ДопПараметрыЗапуска.КаталогБазы) Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("Каталог <%1> не найден.");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ДопПараметрыЗапуска.КаталогБазы);
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если Объект.ЗапускатьКлиентТестированияСМаксимизированнымОкном Тогда
			ЗапуститьСеанс1СЧерез1cv8(ДанныеЗапускаКлиентаТестирования,СтрокаЗапуска);
		Иначе
			ЗапуститьСистему(СтрокаЗапуска);
		КонецЕсли;	 
	Иначе
		ЗапуститьСеанс1СЧерез1cv8(ДанныеЗапускаКлиентаТестирования,СтрокаЗапуска);
	КонецЕсли;
	
	Для Каждого НайденнаяСтрока Из ДанныеКлиентовТестирования Цикл
		НайденнаяСтрока.Подключен = Ложь;
	КонецЦикла;	
	ДанныеЗапускаКлиентаТестирования.Подключен = Истина;
	
КонецПроцедуры
		
&НаКлиенте
Функция ОбернутьВКавычки(Знач Строка);
	Если Лев(Строка, 1) = """" и Прав(Строка, 1) = """" Тогда
		Возврат Строка;
	Иначе
		Возврат """" + Строка + """";
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ВосстановитьВсеНастройкиИзХранилища()
	Если НЕ Объект.ВыполнениеСценарияИзОбработкиОповещения Тогда
		ВосстановитьНастройкиИзХранилища("КаталогФич", "КаталогФич"); 
		ВосстановитьНастройкиИзХранилища("ДанныеКлиентовТестирования", "ДанныеКлиентовТестирования"); 
		ВосстановитьНастройкиИзХранилища("КаталогиБиблиотек", "КаталогиБиблиотек"); 
	КонецЕсли;	 
	
	Для Каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
		СтрокаДанныеКлиентовТестирования.Подключен = Ложь;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ПолучитьПрефиксИнструмента()
	ПрефиксИнструмента = "vanessabehavior_";
	Если Объект.РежимСамотестирования Тогда
		ПрефиксИнструмента = ПрефиксИнструмента + "autotest_";
	КонецЕсли;	 
	
	Если Объект.ВерсияПоставки <> "standart" Тогда
		ПрефиксИнструмента = ПрефиксИнструмента + "_" + СокрЛП(Объект.ВерсияПоставки);
	КонецЕсли;	 
	
	Возврат ПрефиксИнструмента;
КонецФункции	 

&НаСервере
Процедура ВосстановитьНастройкиИзХранилища(Ключ, ИмяРеквизита) 
	ПрефиксИнструмента = ПолучитьПрефиксИнструмента();
	
	Ключ = ПрефиксИнструмента + Ключ;
	
	СохраненноеЗначение = ХранилищеОбщихНастроек.Загрузить(ПолучитьИДДляОбщегоСохраненияНастроек(), Ключ);
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		Если Ложь
			Или ИмяРеквизита = "КаталогФич"
			Или ИмяРеквизита = "КаталогиБиблиотек"
			Тогда
			
			Если ТипЗнч(СохраненноеЗначение) = Тип("ТаблицаЗначений") Тогда
				Объект[ИмяРеквизита].Загрузить(СохраненноеЗначение);
			Иначе
				Объект[ИмяРеквизита] = СохраненноеЗначение;
			КонецЕсли;
			
		ИначеЕсли Ложь
			Или ИмяРеквизита = "ДанныеКлиентовТестирования"
			Или ИмяРеквизита = "ТаблицаИзвестныхStepDefinition"
			Или ИмяРеквизита = "КешStepDefinition"
			Или ИмяРеквизита = "КешТаблицGherkin"
			Тогда
			
			Если ТипЗнч(СохраненноеЗначение) = Тип("ТаблицаЗначений") Тогда
				ЭтаФорма[ИмяРеквизита].Загрузить(СохраненноеЗначение);
			Иначе
				ЭтаФорма[ИмяРеквизита] = СохраненноеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиВХранилище(Знач Ключ, Знач Значение, ДопПараметры)
	ПрефиксИнструмента = ДопПараметры.ПрефиксИнструментаДляСохраненияНастроек;
	
	Ключ = ПрефиксИнструмента + Ключ;
	
	Если ТипЗнч(Значение) = Тип("ДанныеФормыКоллекция") Тогда
		ХранилищеОбщихНастроек.Сохранить(ДопПараметры.ИДДляОбщегоСохраненияНастроек, Ключ, Значение.Выгрузить());
	Иначе
		ХранилищеОбщихНастроек.Сохранить(ДопПараметры.ИДДляОбщегоСохраненияНастроек, Ключ, Значение);
	КонецЕсли;
КонецПроцедуры

// }

&НаСервереБезКонтекста
Процедура СохранитьНедавноЗагруженныеФичи(НедавноЗагруженныеФичи, РежимСамотестирования)
	Если РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;  
	ХранилищеОбщихНастроек.Сохранить("VanessaBehaviorНедавноЗагруженныеФичи", , НедавноЗагруженныеФичи);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВостановитьНедавноЗагруженныеФичи(НедавноЗагруженныеФичи)
	НедавноЗагруженныеФичи = ХранилищеОбщихНастроек.Загрузить("VanessaBehaviorНедавноЗагруженныеФичи");
	Если НедавноЗагруженныеФичи = Неопределено Тогда
		НедавноЗагруженныеФичи = Новый Массив;
	КонецЕсли;	 
КонецПроцедуры

&НаСервере
Процедура СкопироватьНедавноЗагруженныеФичиВИнтерфейс(НедавноЗагруженныеФичи)
	КоличествоЭлементовВИнтерфейсе = Элементы.ГруппаКнопокНедавноЗагруженныеФичи.ПодчиненныеЭлементы.Количество();
	Ид = 0;
	Для Каждого Элем Из НедавноЗагруженныеФичи Цикл
		Ид = Ид + 1;
		Если КоличествоЭлементовВИнтерфейсе < Ид Тогда
			Пункт1=Элементы.Добавить("МенюЗагрузитьФичи" + Ид, Тип("КнопкаФормы"), Элементы.ГруппаКнопокНедавноЗагруженныеФичи);
			Пункт1.Заголовок  = Элем.Представление;
			Пункт1.ИмяКоманды = "ЗагрузитьНедавнююФичу" + Ид;
		Иначе
			Элементы.ГруппаКнопокНедавноЗагруженныеФичи.ПодчиненныеЭлементы[Ид - 1].Заголовок  = Элем.Представление;
			Элементы.ГруппаКнопокНедавноЗагруженныеФичи.ПодчиненныеЭлементы[Ид - 1].ИмяКоманды = "ЗагрузитьНедавнююФичу" + Ид;
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура СохранитьИСкопироватьНедавноЗагруженныеФичиВИнтерфейс(НедавноЗагруженныеФичи, РежимСамотестирования)
	СохранитьНедавноЗагруженныеФичи(НедавноЗагруженныеФичи, РежимСамотестирования);
	СкопироватьНедавноЗагруженныеФичиВИнтерфейс(НедавноЗагруженныеФичи);
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьФичуВСписокНедавноЗагруженныхФич(Знач Путь)
	Нашли = Ложь;
	Ид = -1;
	Для Каждого Элем Из НедавноЗагруженныеФичи Цикл
		Ид = Ид + 1;
		
		Если НРег(Элем.Путь) = НРег(Путь) Тогда
			НедавноЗагруженныеФичи.Удалить(Ид);
			Нашли = Истина;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	ЗначениеМассива = Новый Структура;
	ЗначениеМассива.Вставить("Путь", Путь);
	ЗначениеМассива.Вставить("Представление", "1. " + Путь);
	НедавноЗагруженныеФичи.Вставить(0, ЗначениеМассива);
	
	Если НедавноЗагруженныеФичи.Количество() > 9 Тогда
		НедавноЗагруженныеФичи.Удалить(9);
	КонецЕсли;	 
	
	Ид = -1;
	Для Каждого Элем Из НедавноЗагруженныеФичи Цикл
		Ид = Ид + 1;
		Путь = Элем.Путь;
		Элем.Представление = "" + (Ид + 1) + ". " + Путь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьСценарийСоСтрокиПрисланнойИзвне()
	СделатьСтрокуДереваТекущейПоНомеру(НомерСтрокиСценарияПереданныйИзвне);
	ВыполнитьДанныйСценарийСТекущегоШага();
КонецПроцедуры

&НаКлиенте
Процедура СделатьСтрокуДереваТекущейПоНомеру(Ном)
	СтрокиДерева = Объект.ДеревоТестов.ПолучитьЭлементы();
	
	НадоПрервать = Ложь;
	СделатьСтрокуДереваТекущейПоНомеруРекурсивно(СтрокиДерева,Ном,НадоПрервать);
КонецПроцедуры

&НаКлиенте
Процедура СделатьСтрокуДереваТекущейПоНомеруРекурсивно(СтрокиДерева,Ном,НадоПрервать)
	Если НадоПрервать Тогда
		Возврат;
	КонецЕсли;	 
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.НомерСтрокиВФиче = Ном Тогда
			Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
			НадоПрервать = Истина;
			Возврат;
		КонецЕсли;	 
		
		СделатьСтрокуДереваТекущейПоНомеруРекурсивно(СтрокаДерева.ПолучитьЭлементы(),Ном,НадоПрервать)
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБрейкПоинт(ПолныйПуть)
	Брейкпоинты.Добавить(ПолныйПуть);
	Если НЕ Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовБрейкпоинт.Видимость  Тогда
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовБрейкпоинт.Видимость = Истина;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура УдалитьБрейкПоинт(ПолныйПуть)
	ИД = Брейкпоинты.Найти(ПолныйПуть);
	Если ИД <> Неопределено Тогда
		Брейкпоинты.Удалить(ИД);
	КонецЕсли;	 
	
	Если Брейкпоинты.Количество() = 0 Тогда
		Если Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовБрейкпоинт.Видимость Тогда
			Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовБрейкпоинт.Видимость = Ложь;
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуБрейкпоинтаРекурсивно(СтрокиДерева)
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.Брейкпоинт Тогда
			СтрокаДерева.Брейкпоинт = Ложь;
		КонецЕсли;
		
		СнятьПометкуБрейкпоинтаРекурсивно(СтрокаДерева.ПолучитьЭлементы());
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура СброситьКешИзвестныхStepDefinitionСервер()
	ПараметрыДляСохраненияНастроек = ПараметрыДляСохраненияНастроекСервер();
	
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	Копия = ТзнТаблицаИзвестныхStepDefinition.Скопировать();
	Копия.Очистить();
	СохранитьНастройкиВХранилище("ТаблицаИзвестныхStepDefinition", Копия, ПараметрыДляСохраненияНастроек);
	
	ТзнКешStepDefinition = РеквизитФормыВЗначение("КешStepDefinition");
	Копия = ТзнКешStepDefinition.Скопировать();
	Копия.Очистить();
	СохранитьНастройкиВХранилище("КешStepDefinition", Копия, ПараметрыДляСохраненияНастроек);
	
	ТзнКешТаблицGherkin = РеквизитФормыВЗначение("КешТаблицGherkin");
	Копия = ТзнКешТаблицGherkin.Скопировать();
	Копия.Очистить();
	СохранитьНастройкиВХранилище("КешТаблицGherkin", Копия ,ПараметрыДляСохраненияНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДоступностиВидимостиЭлементов()

	Если Объект.СоздаватьИнструкциюВидео Тогда
		Элементы.НастройкиВидеоИнструкций.Видимость     = Истина;
		Элементы.КаталогOutputИнструкцияВидео.Видимость = Истина;
	Иначе
		Элементы.НастройкиВидеоИнструкций.Видимость     = Ложь;
		Элементы.КаталогOutputИнструкцияВидео.Видимость = Ложь;
	КонецЕсли;

	Если Объект.СоздаватьИнструкциюHTML Тогда
		Элементы.КаталогOutputИнструкцияHTML.Видимость = Истина;
	Иначе
		Элементы.КаталогOutputИнструкцияHTML.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.СоздаватьИнструкциюMarkdown Тогда
		Элементы.КаталогOutputИнструкцияMarkdown.Видимость = Истина;
	Иначе
		Элементы.КаталогOutputИнструкцияMarkdown.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
		Элементы.КаталогOutputСкриншоты.Видимость = Истина;
		Элементы.СниматьСкриншотКаждогоОкна1С.Видимость = Истина;
		Элементы.ГруппаСкриншоты.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
	Иначе
		Элементы.КаталогOutputСкриншоты.Видимость = Ложь;
		Элементы.СниматьСкриншотКаждогоОкна1С.Видимость = Ложь;
		Элементы.ГруппаСкриншоты.Отображение = ОтображениеОбычнойГруппы.Нет;
	КонецЕсли;
	
	Если Объект.ДелатьОтчетВФорматеАллюр Тогда
		Элементы.КаталогOutputAllure.Видимость = Истина;
		Элементы.УровеньОтчета1.Видимость = Истина;
		Элементы.УровеньОтчета2.Видимость = Истина;
		Элементы.УровеньОтчета3.Видимость = Истина;
		Элементы.ГруппаAllure.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
	Иначе
		Элементы.КаталогOutputAllure.Видимость = Ложь;
		Элементы.УровеньОтчета1.Видимость = Ложь;
		Элементы.УровеньОтчета2.Видимость = Ложь;
		Элементы.УровеньОтчета3.Видимость = Ложь;
		Элементы.ГруппаAllure.Отображение = ОтображениеОбычнойГруппы.Нет;
	КонецЕсли;
	
	Если Объект.ДелатьОтчетВФорматеjUnit Тогда
		Элементы.КаталогOutputjUnit.Видимость = Истина;
		Элементы.ГруппаjUnit.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
	Иначе
		Элементы.КаталогOutputjUnit.Видимость = Ложь;
		Элементы.ГруппаjUnit.Отображение = ОтображениеОбычнойГруппы.Нет;
	КонецЕсли;
	
	Если Объект.ДелатьОтчетВФорматеCucumberJson Тогда
		Элементы.КаталогOutputCucumberJson.Видимость = Истина;
		Элементы.ГруппаCucumber.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
	Иначе
		Элементы.КаталогOutputCucumberJson.Видимость = Ложь;
		Элементы.ГруппаCucumber.Отображение = ОтображениеОбычнойГруппы.Нет;
	КонецЕсли;
	
	Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
		Элементы.ИмяФайлаЛогВыполненияСценариев.Видимость = Истина;
		Элементы.ВыводитьВЛогВыполнениеШагов.Видимость = Истина;
		Элементы.ГруппаЛогТекст.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
	Иначе
		Элементы.ИмяФайлаЛогВыполненияСценариев.Видимость = Ложь;
		Элементы.ВыводитьВЛогВыполнениеШагов.Видимость = Ложь;
		Элементы.ГруппаЛогТекст.Отображение = ОтображениеОбычнойГруппы.Нет;
	КонецЕсли;
	
	Если Объект.ДелатьЛогОшибокВТекстовыйФайл Тогда
		Элементы.ИмяКаталогаЛогОшибок.Видимость = Истина;
		Элементы.ГруппаЛогОшибокТекст.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
	Иначе
		Элементы.ИмяКаталогаЛогОшибок.Видимость = Ложь;
		Элементы.ГруппаЛогОшибокТекст.Отображение = ОтображениеОбычнойГруппы.Нет;
	КонецЕсли;
	
	Если Объект.ЗаписьВидеоДелатьНаложениеTTS Тогда
		Элементы.ЗаписьВидеоПутьКДвижкуTTS.Видимость = Истина;
		Элементы.ЗаписьВидеоИмяTTS.Видимость         = Истина;
		Элементы.ЗаписьВидеоСловарьЗамен.Видимость   = Истина;
	Иначе
		Элементы.ЗаписьВидеоПутьКДвижкуTTS.Видимость = Ложь;
		Элементы.ЗаписьВидеоИмяTTS.Видимость         = Ложь;
		Элементы.ЗаписьВидеоСловарьЗамен.Видимость   = Ложь;
	КонецЕсли;
	
	Если Объект.ЗапускатьТестКлиентВРежимеОтладки Тогда
		Элементы.КлючиОтладки.Видимость   = Истина;
		Элементы.АдресОтладчика.Видимость = Истина;
	Иначе
		Элементы.КлючиОтладки.Видимость   = Ложь;
		Элементы.АдресОтладчика.Видимость = Ложь;
	КонецЕсли;
	
	ОбработкаВидимостиВыполнятьШагиАссинхронно();
	ОбработкаВидимостиИспользоватьSikuliXСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьГраницыТаблицыGherkin(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки, ВерхняяГраница, НижняяГраница)
	Элементы.СгенерированныйСценарий.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Объект.СгенерированныйСценарий, Символы.ПС);
	
	ВерхняяГраница = НачалоСтроки;
	НижняяГраница  = НачалоСтроки;
	
	НомерСтроки = НижняяГраница;
	Пока Истина Цикл
		НомерСтроки = НомерСтроки - 1;
		Если НомерСтроки < 1 Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = СокрЛП(МассивСтрок[НомерСтроки - 1]);
		
		Если Лев(Стр, 1) <> "|" Тогда
			Прервать;
		КонецЕсли;	 
		
		НижняяГраница = НомерСтроки;
	КонецЦикла;	
	
	
	НомерСтроки = ВерхняяГраница;
	Пока Истина Цикл
		НомерСтроки = НомерСтроки + 1;
		Если НомерСтроки > МассивСтрок.Количество() Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = СокрЛП(МассивСтрок[НомерСтроки - 1]);
		
		Если Лев(Стр, 1) <> "|" Тогда
			Прервать;
		КонецЕсли;	 
		
		ВерхняяГраница = НомерСтроки;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРедактированиеТаблицыGherkin()
	НачалоСтроки = 0;
	НачалоКолонки = 0;
	КонецСтроки = 0;
	КонецКолонки = 0;
	ВерхняяГраница = 0;
	НижняяГраница = 0;
	ОпределитьГраницыТаблицыGherkin(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки, ВерхняяГраница, НижняяГраница);
	
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Объект.СгенерированныйСценарий, Символы.ПС);
	
	МассивСтрокДляРедактирования = Новый Массив;
	Для Ккк = (НижняяГраница - 1) По ВерхняяГраница - 1 Цикл
		МассивСтрокДляРедактирования.Добавить(МассивСтрок[Ккк]);
	КонецЦикла;
	
	Если МассивСтрокДляРедактирования.Количество() = 0 Тогда
		СделатьСообщение("Не найдена таблица для редактирования.");
		Возврат;
	КонецЕсли;	 
	
	
	Если МассивСтрокДляРедактирования.Количество() = 1 Тогда
		Если Не ЗначениеЗаполнено(МассивСтрокДляРедактирования[0]) Тогда
			СделатьСообщение("Не найдена таблица для редактирования.");
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ФорматироватьТаблицуGherkin(МассивСтрокДляРедактирования);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивСтрокДляРедактирования", МассивСтрокДляРедактирования);
	ФормаДобавитьШаг = ПолучитьФорму("ВнешняяОбработка." + ПолучитьИмяОбработкиVA() + ".Форма.РедактированиеТаблицы", ПараметрыФормы);
	ФормаДобавитьШаг.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьТаблицуGherkinПослеРедактирования(МассивСтрокТаблицы)
	НачалоСтроки = 0;
	НачалоКолонки = 0;
	КонецСтроки = 0;
	КонецКолонки = 0;
	ВерхняяГраница = 0;
	НижняяГраница = 0;
	ОпределитьГраницыТаблицыGherkin(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки, ВерхняяГраница, НижняяГраница);
	
	ФорматироватьТаблицуGherkin(МассивСтрокТаблицы);
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Объект.СгенерированныйСценарий, Символы.ПС);
	
	
	НовыйМассивСтрок = Новый Массив;
	НомерСтроки = 0;
	ДобавилиРедактированныеСтроки = Ложь;
	Для Ккк = 0 По МассивСтрок.Количество() - 1 Цикл
		НомерСтроки = НомерСтроки + 1;
		Если НомерСтроки >= НижняяГраница и НомерСтроки <= ВерхняяГраница Тогда
			Если НЕ ДобавилиРедактированныеСтроки Тогда
				ДобавилиРедактированныеСтроки = Истина;
				
				Для Каждого НоваяСтрока Из МассивСтрокТаблицы Цикл
					НовыйМассивСтрок.Добавить(Символы.Таб + Символы.Таб + НоваяСтрока);
				КонецЦикла;	
			КонецЕсли;	 
			
			Продолжить;
		КонецЕсли;	 
		
		
		НовыйМассивСтрок.Добавить(МассивСтрок[Ккк]);
	КонецЦикла;	

	
	ФинальнаяСтрока = "";
	Для Каждого Стр Из НовыйМассивСтрок Цикл
		ФинальнаяСтрока = ФинальнаяСтрока + Стр + Символы.ПС;
	КонецЦикла;	
	
	Объект.СгенерированныйСценарий = ФинальнаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСтатистикуКлиент()
	Если НЕ Версия836ИлиВыше Тогда
		Возврат;
	КонецЕсли;	 
	
	ВывестиСтатистикуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВывестиСтатистикуНаСервере()

	тДерево = РеквизитФормыВЗначение("Объект").ДеревоТестов;
	
	ВсегоФич       = тДерево.Строки.НайтиСтроки(Новый Структура("ТипКартинки", 1), Истина).Количество();
	ВсегоСценариев = тДерево.Строки.НайтиСтроки(Новый Структура("ТипКартинки", 2), Истина).Количество();
	ВсегоШагов     = тДерево.Строки.НайтиСтроки(Новый Структура("ТипКартинки", 3), Истина).Количество();
	
	ВсегоШаговSuccess = тДерево.Строки.НайтиСтроки(Новый Структура("ТипКартинки, Статус", 4, "Success"), Истина).Количество();
	ВсегоШаговFailed  = тДерево.Строки.НайтиСтроки(Новый Структура("ТипКартинки, Статус", 5, "Failed"),  Истина).Количество();
	ВсегоШаговPending = тДерево.Строки.НайтиСтроки(Новый Структура("ТипКартинки, Статус", 6, "Pending"), Истина).Количество();
	
	ВсегоШаговОбщее = ВсегоШагов + ВсегоШаговSuccess + ВсегоШаговFailed + ВсегоШаговPending;
	
	СтрокаВсегоШаговSuccess = Вычислить("Новый ФорматированнаяСтрока("""" + ВсегоШаговSuccess, Новый Шрифт(, , Истина), Новый Цвет(21, 177, 14))"); // Жирный, зеленый
	СтрокаВсегоШаговFailed  = Вычислить("Новый ФорматированнаяСтрока("""" + ВсегоШаговFailed,  Новый Шрифт(, , Истина), Новый Цвет(255, 0, 0))");   // Жирный, красный
	СтрокаВсегоШаговPending = Вычислить("Новый ФорматированнаяСтрока("""" + ВсегоШаговPending, Новый Шрифт(, , Истина), Новый Цвет(255, 92, 0))"); // Жирный, оранжевый
	
	ОбщаяСтрока = "";
	Если ВсегоШаговSuccess + ВсегоШаговPending + ВсегоШаговFailed > 0 Тогда
		ОбщаяСтрока = Вычислить("Новый ФорматированнаяСтрока("", "", СтрокаВсегоШаговSuccess, ""/"", СтрокаВсегоШаговFailed, ""/"", СтрокаВсегоШаговPending)");
	КонецЕсли;

	НеРеализованыхСпипетовВсего = тДерево.Строки.НайтиСтроки(Новый Структура("АдресСнипета, ТипКартинки", "", 3), Истина).Количество() + 
							      тДерево.Строки.НайтиСтроки(Новый Структура("АдресСнипета, ТипКартинки", "", 4), Истина).Количество() + 
							      тДерево.Строки.НайтиСтроки(Новый Структура("АдресСнипета, ТипКартинки", "", 5), Истина).Количество() +
							      тДерево.Строки.НайтиСтроки(Новый Структура("АдресСнипета, ТипКартинки", "", 6), Истина).Количество();
								  
	Если НеРеализованыхСпипетовВсего > 0 Тогда
		СтрокаНеРеализованыхСпипетовВсего = Вычислить("Новый ФорматированнаяСтрока(""("" + Формат(НеРеализованыхСпипетовВсего, ""ЧГ="") + "")"", Новый Шрифт(, , Истина), Новый Цвет(255, 92, 0))"); // Жирный, оранжевый
	Иначе
		СтрокаНеРеализованыхСпипетовВсего = "";
	КонецЕсли;								  
	
	ОбщаяСтатистикаПоФиче = "" + Формат(ВсегоФич, "ЧГ=") + "/" + Формат(ВсегоСценариев, "ЧГ=") + "/" + Формат(ВсегоШаговОбщее, "ЧГ=");
	ОбщаяСтатистикаПоФиче = Вычислить("Новый ФорматированнаяСтрока(ОбщаяСтатистикаПоФиче, Новый Шрифт(, , Истина))");
	Элементы.Статистика.Заголовок = Вычислить("Новый ФорматированнаяСтрока(ОбщаяСтатистикаПоФиче, СтрокаНеРеализованыхСпипетовВсего, ОбщаяСтрока)");
	
	Элементы.Статистика.Подсказка = НСтр("ru = 'Всего фич: '; en = 'Features: '") + ВсегоФич + Символы.ПС +
									НСтр("ru = 'Всего сценариев: '; en = 'Scenarios: '") + ВсегоСценариев + Символы.ПС +
									НСтр("ru = 'Всего шагов: '; en = 'Steps: '") + ВсегоШаговОбщее + Символы.ПС +
									?(НеРеализованыхСпипетовВсего > 0, НСтр("ru = 'Не реализовано шагов: '; en = 'Not implemented: '") + НеРеализованыхСпипетовВсего, "") + 
									?(ВсегоШаговSuccess + ВсегоШаговPending + ВсегоШаговFailed > 0, 
										Символы.ПС +
										НСтр("ru = 'Результат выполнения шагов '; en = 'Result: '") + "(Success, Failed, Pending): " + 
										ВсегоШаговSuccess + "/" + ВсегоШаговFailed + "/" + ВсегоШаговPending + Символы.ПС + 
										НСтр("ru = 'Пропущено шагов: '; en = 'Skiped: '") + ВсегоШагов, ""
									 );
									 
КонецПроцедуры

// { Плагины
// портировано из xUnitFor1C 4.1.1.0

&НаКлиенте
Процедура ЗагрузитьПлагины()
	Если Объект.ПлагиныЗагружены Тогда
		Возврат;
	КонецЕсли;	 
	
	Объект.Плагины = Новый Структура;
	КэшФормПлагинов = Новый Структура;
		
	КаталогПлагинов = ПолучитьПутьКПлагинам();
	
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;
	НайтиФайлыКомандаСистемы(КаталогПлагинов,СписокКаталогов,СписокФайлов,Ложь);
	ОставитьТолькоФайлыСРасширением(СписокФайлов,".epf");
	МассивФайлов = Новый Массив;
	Для Каждого Элем Из СписокФайлов Цикл
		МассивФайлов.Добавить(Элем.Значение);
	КонецЦикла;	 
	
	ОбработчикПоискаКлиентскихПлагинов(МассивФайлов, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьНайденныеКлиентскиеПлагиныНаСервере(Знач ЗагруженныеФайлы, Знач ИдентификаторыПлагинов)
	
	Перем ЗагруженныйФайл, ИмяПлагина, ОписаниеПлагина, ОписанияПлагинов;
	
	ОписанияПлагинов = ПодключитьПлагиныНаСервере(ЗагруженныеФайлы);
	
	Для Каждого ЗагруженныйФайл Из ЗагруженныеФайлы Цикл
		Объект.ПлагиныЗагружены = Истина;
		
		ИмяПлагина = ИдентификаторыПлагинов[ЗагруженныйФайл.Имя];
		Если ИмяПлагина = Неопределено Тогда
			ИмяПлагина = ИдентификаторыПлагинов[ЗагруженныйФайл.ПолноеИмя];
		КонецЕсли;	 
		
		ОписаниеПлагина = ОписанияПлагинов[ЗагруженныйФайл.Имя];
		Если ОписаниеПлагина = Неопределено Тогда
			ОписаниеПлагина = ОписанияПлагинов[ЗагруженныйФайл.ПолноеИмя];
		КонецЕсли;	 
		Объект.Плагины.Вставить(ОписаниеПлагина.Идентификатор, ИмяПлагина);
		КэшФормПлагинов.Вставить(ОписаниеПлагина.Идентификатор, Истина);
		
	КонецЦикла;
	
	Если Объект.ВерсияПоставки = "single" Тогда
		Объект.Плагины.Вставить("ЗапросыИзБД", "ЗапросыИзБД");
		КэшФормПлагинов.Вставить("ЗапросыИзБД", Истина);
		
		Объект.Плагины.Вставить("СериализаторMXL", "СериализаторMXL");
		КэшФормПлагинов.Вставить("СериализаторMXL", Истина);
		
		Объект.Плагины.Вставить("УтвержденияBDD", "УтвержденияBDD");
		КэшФормПлагинов.Вставить("УтвержденияBDD", Истина);
	КонецЕсли;	 
	
	ЗагрузкаПлагиновЗавершение();

КонецПроцедуры

&НаСервере
Функция ПодключитьПлагиныНаСервере(Знач ЗагружаемыеФайлы)
	ОписанияПлагинов = Новый Соответствие;
	
	Для Каждого ОписаниеФайла Из ЗагружаемыеФайлы Цикл
		ФайлОбъект = Новый Файл(ОписаниеФайла.Имя);
		ИмяПлагина = ФайлОбъект.ИмяБезРасширения;
		ДопПараметры = Новый Структура;
		Попытка
			ДопПараметры.Вставить("ИмяФайла",ОписаниеФайла.ПолноеИмя);
		Исключение
			ДопПараметры.Вставить("ИмяФайла",ОписаниеФайла.Имя);
		КонецПопытки;
		ПодключитьФайлОбработкиНаСервере(ОписаниеФайла.Хранение, ИмяПлагина,,ЕстьЗащитаОтОпасныхДействий,ДопПараметры);
		
		Попытка
			ОбъектОбработки = ВнешниеОбработки.Создать(ИмяПлагина, Ложь);
			ОбъектОбработки.Инициализация(ЭтотОбъектНаСервере());
			ОписанияПлагинов.Вставить(ОписаниеФайла.Имя, ОбъектОбработки.ОписаниеПлагина(Объект.ТипыПлагинов));
		Исключение
			Ошибка = "Возникла ошибка при загрузке плагина: " + ОписаниеФайла.Имя + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Сообщить(Ошибка);
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(ОписанияПлагинов);
КонецФункции // ПодключитьПлагиныНаСервере()

&НаСервере
Функция ПолучитьОписанияПлагиновПоТипуНаСервере(Знач ТипПлагина)
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	Результат = ОбъектНаСервере.ПолучитьОписанияПлагиновПоТипу(ТипПлагина);
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Процедура ПодключитьФайлОбработкиНаСервере(Знач АдресХранилища, Знач ИдентификаторОбработки, ЭтоОтчет = Ложь,ПараметрЕстьЗащитаОтОпасныхДействий = Ложь,ДопПараметры = Неопределено)
	ПодключитьВнешнююОбработкуСервер(АдресХранилища,ПараметрЕстьЗащитаОтОпасныхДействий,ДопПараметры);
КонецПроцедуры

&НаСервере
Функция ЭтотОбъектНаСервере()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиенте
Функция СинхронныйРежимРазрешен()
	Если мСинхронныйРежимРазрешен = Неопределено Тогда
		мСинхронныйРежимРазрешен = ОпределитьВозможностьСинхронныхВызовов();
	КонецЕсли;
	
	Возврат мСинхронныйРежимРазрешен;
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьВозможностьСинхронныхВызовов()
	
	Запрет = Метаданные.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент = Метаданные.СвойстваОбъектов.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент.НеИспользовать;
	Возврат Не Запрет;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКПлагинам()
	Путь = Объект.КаталогИнструментов + "/plugins/";
	Возврат Путь;
КонецФункции

&НаСервере
Функция СоздатьОбъектПлагина(Идентификатор, ВстроенаВКонфигурацию = Ложь, ЭтоОтчет = Ложь)
	ОбъектНаСервере = ЭтотОбъектНаСервере();
	Возврат ОбъектНаСервере.СоздатьОбъектПлагина(Идентификатор, ВстроенаВКонфигурацию, ЭтоОтчет);
КонецФункции

// } Плагины

&НаКлиенте
Функция НайтиТЧВДаннойФорме(ИмяТЧ,НужнаяФорма,ИскатьПоИмени)
	Если НужнаяФорма = Неопределено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смогли найти таблицу <%1> в активном окне.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	Если ИмяТЧ = "" Тогда
		ТЧ = НужнаяФорма.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"));
	Иначе	
		Если ИскатьПоИмени Тогда
			ТЧ = НужнаяФорма.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"), , ИмяТЧ);
		Иначе	
			ТЧ = НужнаяФорма.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"), ИмяТЧ);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ТЧ = Неопределено Тогда
		//попытаемся найти таблицу с другим именем
		Если ИмяТЧ = "TypeTree"  Тогда
			ТЧ = НужнаяФорма.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"),, "ValueList");
		ИначеЕсли ИмяТЧ = "ValueList" Тогда
			ТЧ = НужнаяФорма.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"),, "TypeTree");
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ТЧ;
КонецФункции	

&НаКлиенте
Процедура УдалитьИзПолучитьКлиентаТестированияПрофиль(ПодключенныеTestClient,ИмяTestClient)
	Массив = Новый Массив;
	
	Ид = -1;
	Для Каждого Профиль Из ПодключенныеTestClient Цикл
		Ид = Ид + 1;
		Если Профиль.Имя = ИмяTestClient Тогда
			Массив.Добавить(Ид);
		КонецЕсли;	 
	КонецЦикла;	
	
	Для Ккк = 0 По Массив.Количество() - 1 Цикл
		ИдПрофиля = Массив[Массив.Количество() - 1 - Ккк];
		ПодключенныеTestClient.Удалить(ИдПрофиля);
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура СделатьПереводСгенерированногоТекстаGherkinСервер(ДанныеПеревода)
	ДвДанныеvbFeatureReader = ДанныеПеревода.ДвДанныеvbFeatureReader;
	ВременноеИмяФайла = Неопределено;
	Если Объект.ВерсияПоставки = "standart" Тогда
		FeatureReader = СоздатьFeatureReader(Объект.КаталогИнструментов, ДвДанныеvbFeatureReader, ВременноеИмяФайла);
	Иначе	
		ОбъектСервер = РеквизитФормыВЗначение("Объект");
		FeatureReader = ОбъектСервер;
	КонецЕсли;	 
	
	FeatureReader.СделатьПереводТекстаGherkin(ДанныеПеревода);
	ДанныеПеревода.Вставить("ТаблицаПеревода",ЗначениеВСтрокуВнутр(ДанныеПеревода.ТаблицаПеревода));
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФайлыПеревода()
	Если КешДанныхПереводовШагов <> Неопределено Тогда
		Возврат КешДанныхПереводовШагов; 
	КонецЕсли;
	
	Если МодульПереводШагов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	//Если Объект.ВерсияПоставки = "single" Тогда
	//	ПараметрыФормы = Новый Структура;
	//	ФормаОбработки = ПолучитьФорму("ВнешняяОбработка." + ПолучитьИмяОбработкиVA() + ".Форма.Локализация_Steps", ПараметрыФормы);
	//Иначе	
	//	Если ПустаяСтрока(Объект.КаталогИнструментов) Тогда
	//		Объект.КаталогИнструментов = КаталогИнструментовИзПутиКФреймворку();
	//	КонецЕсли;
	//	
	//	ИмяФайла = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "locales/Steps.epf";
	//	
	//	Если СокрЛП(Объект.КаталогИнструментов) = "" Тогда
	//		ЕстьКонстантаВКонфигурацииПутьКVA = ЕстьКонстантаВКонфигурацииСервер("ПутьКVanessaAutomation");
	//		Если ЕстьКонстантаВКонфигурацииПутьКVA Тогда
	//			ПутьКVanessaAutomation     = ПолучитьЗначениеКонстантыСервер("ПутьКVanessaAutomation");
	//			ФайлПутьКVanessaAutomation = Новый Файл(ПутьКVanessaAutomation);
	//			ИмяФайла                 = ДополнитьСлешВПуть(ФайлПутьКVanessaAutomation.Путь) + "locales/Steps.epf";
	//		КонецЕсли;	 
	//	КонецЕсли;	 
	//	
	//	Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
	//		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Файл <%1> не существует.");
	//		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайла); 
	//		СделатьСообщение(ТекстСообщения);
	//		Возврат Неопределено;
	//	КонецЕсли;	
	//	
	//	ИмяОбработки   = ПодключитьВнешнююОбработкуКлиент(ИмяФайла);
	//	ФормаОбработки = ПолучитьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма.Форма");
	//КонецЕсли;	 
	
	МассивЯзыков = Новый Массив;
	МассивЯзыков.Добавить("en");
	МассивЯзыков.Добавить("ro");
	МассивЯзыков.Добавить("de");
	МассивЯзыков.Добавить("lv");
	МассивЯзыков.Добавить("it");
	МассивЯзыков.Добавить("pl");
	МассивЯзыков.Добавить("vi");
	
	ДанныеМакетовШагов = Новый Структура;
	ДанныеМакетовШагов = МодульПереводШагов.ДанныеМакетовШагов(МассивЯзыков,Объект.ВерсияПоставки);
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("en",ДанныеМакетовШагов.en);
	Соответствие.Вставить("ro",ДанныеМакетовШагов.ro);
	Соответствие.Вставить("de",ДанныеМакетовШагов.de);
	Соответствие.Вставить("lv",ДанныеМакетовШагов.lv);
	Соответствие.Вставить("it",ДанныеМакетовШагов.it);
	Соответствие.Вставить("pl",ДанныеМакетовШагов.pl);
	Соответствие.Вставить("vi",ДанныеМакетовШагов.vi);
	
	КешДанныхПереводовШагов = Соответствие;
	
	Возврат Соответствие;
КонецФункции	

&НаКлиенте
Процедура СделатьПереводСгенерированногоТекстаGherkin()
	Если Объект.ЯзыкГенератораGherkin = "ru" Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Объект.ЯзыкГенератораGherkin) Тогда
		Возврат;
	КонецЕсли;	 
	
	Перевод = ПеревестиТекст(Объект.СгенерированныйСценарий);
	
	Объект.СгенерированныйСценарий = Перевод;
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьШаблонКИспользованиюВРегулярке(Шаблон)

	// Экранируем все, кроме звездочки. Ее будем трактовать по-своему.
	СпецСимволы = Новый Массив;
	СпецСимволы.Добавить("\");
	СпецСимволы.Добавить("^");
	СпецСимволы.Добавить("$");
	СпецСимволы.Добавить("(");
	СпецСимволы.Добавить(")");
	СпецСимволы.Добавить("<");
	СпецСимволы.Добавить("[");
	СпецСимволы.Добавить("]");
	СпецСимволы.Добавить("{");
	СпецСимволы.Добавить("}");
	СпецСимволы.Добавить("|");
	СпецСимволы.Добавить(">");
	СпецСимволы.Добавить(".");
	СпецСимволы.Добавить("+");
	СпецСимволы.Добавить("?");
	
	Для Каждого СпецСимвол Из СпецСимволы Цикл
		Шаблон = СтрЗаменить(Шаблон, СпецСимвол, "\" + СпецСимвол); 
	КонецЦикла;
	
	// Трактуем * по-нашему.
	Шаблон = СтрЗаменить(Шаблон, "*", ".*");
	
	Возврат Шаблон;
КонецФункции 

//взято из https://infostart.ru/public/464971/
&НаКлиенте
Функция ПроверитьСтрокуRexExpLinux(Строка, Фасет)
    Чтение = Новый ЧтениеXML;
    Чтение.УстановитьСтроку(
                "<Model xmlns=""http://v8.1c.ru/8.1/xdto"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Model"">
                |<package targetNamespace=""sample-my-package"">
                |<valueType name=""testtypes"" base=""xs:string"">
                |<pattern>" + Фасет + "</pattern>
                |</valueType>
                |<objectType name=""TestObj"">
                |<property xmlns:d4p1=""sample-my-package"" name=""TestItem"" type=""d4p1:testtypes""/>
                |</objectType>
                |</package>
                |</Model>");

    Модель = ФабрикаXDTO.ПрочитатьXML(Чтение);
    МояФабрикаXDTO = Новый ФабрикаXDTO(Модель);
    Пакет = МояФабрикаXDTO.Пакеты.Получить("sample-my-package");
    Тест = МояФабрикаXDTO.Создать(Пакет.Получить("TestObj"));

    Попытка
        Тест.TestItem = Строка;
        Возврат Истина
    Исключение
        Возврат Ложь
    КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ПроверитьФлагОстановкаПриВозникновенииОшибки()
	Если Объект.ОстановкаПриВозникновенииОшибки Тогда
		Если МассивСценариевДляВыполнения.Количество()-1 > ТекИД_СценарияВМассиве Тогда
			СделатьСообщение("Установлен флаг <Остановка при возникновении ошибки>. Выполнение следующих сценариев отменено.");
			ПрекратитьВыполнениеВсехСценариев = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТекстОшибки(ТекстОшибки,ПроизвольныеЗначения)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КаталогИнструментов",Объект.КаталогИнструментов);
	ПараметрыФормы.Вставить("ТекстОшибки",ТекстОшибки);
	ПараметрыФормы.Вставить("ДанныеОшибки",ПроизвольныеЗначения);
	ОткрытьФорму("ВнешняяОбработка." + ПолучитьИмяОбработкиVA() + ".Форма.ДеталиОшибки", ПараметрыФормы,ЭтаФорма);
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьЭлементФормыИзКешЕслиЭтоВозможно(ИмяРеквизита)
	Если Не ОбъектКонтекст.Свойство("АктивнаяТаблицаTestClient") Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если ИмяРеквизита = ОбъектКонтекст.АктивнаяТаблицаTestClient.ИмяТаблицы Тогда
		Возврат ОбъектКонтекст.АктивнаяТаблицаTestClient.Значение; 
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция ТекстСообщенийПользователю()
	Если МодульСообщенийПользователю = Неопределено Тогда
		Возврат Новый Соответствие; 
	КонецЕсли;	 
	
	Если МодульСообщенийПользователю = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат МодульСообщенийПользователю.ДанныеПереводаСообщений(Объект.ВерсияПоставки);
	
	//Если Объект.ВерсияПоставки = "single" Тогда
	//	ПараметрыФормы = Новый Структура;
	//	ФормаОбработки = ПолучитьФорму("ВнешняяОбработка." + ПолучитьИмяОбработкиVA() + ".Форма.Локализация_Messages", ПараметрыФормы);
	//	Возврат ФормаОбработки.ДанныеПереводаСообщений(Объект.ВерсияПоставки); 
	//КонецЕсли;	 
	//
	//Если ПустаяСтрока(Объект.КаталогИнструментов) Тогда
	//	Объект.КаталогИнструментов = КаталогИнструментовИзПутиКФреймворку();
	//КонецЕсли;
	//
	//ИмяФайла = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "locales/Messages.epf";
	//
	//Если СокрЛП(Объект.КаталогИнструментов) = "" Тогда
	//	ЕстьКонстантаВКонфигурацииПутьКVA = ЕстьКонстантаВКонфигурацииСервер("ПутьКVanessaAutomation");
	//	Если ЕстьКонстантаВКонфигурацииПутьКVA Тогда
	//		ПутьКVanessaAutomation     = ПолучитьЗначениеКонстантыСервер("ПутьКVanessaAutomation");
	//		ФайлПутьКVanessaAutomation = Новый Файл(ПутьКVanessaAutomation);
	//		ИмяФайла                 = ДополнитьСлешВПуть(ФайлПутьКVanessaAutomation.Путь) + "locales/Messages.epf";
	//		
	//		Если Не ЗначениеЗаполнено(Объект.КаталогИнструментов) Тогда
	//			//ПутьКVanessaAutomation - это полный путь к epf с именем файла 
	//			Объект.КаталогИнструментов = КаталогИнструментовИзПутиКФреймворку(ПутьКVanessaAutomation);
	//		КонецЕсли;	 
	//	КонецЕсли;	 
	//КонецЕсли;	 
	//
	//Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
	//	ТекстСообщения = ПолучитьТекстСообщенияПользователю("Файл <%1> не существует.");
	//	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайла); 
	//	СделатьСообщение(ТекстСообщения);
	//	Возврат Неопределено;
	//КонецЕсли;	
	//
	//ИмяОбработки   = ПодключитьВнешнююОбработкуКлиент(ИмяФайла);
	//Если ИмяОбработки = Неопределено Тогда
	//	СделатьСообщение("Не смог получить данные локализации сообщений.");
	//	Возврат Новый Соответствие; 
	//КонецЕсли;	 
	//
	//ФормаОбработки = ПолучитьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма.Форма");
	//
	//Возврат ФормаОбработки.ДанныеПереводаСообщений(Объект.ВерсияПоставки);
КонецФункции	 

&НаСервере
Процедура СерверныеВызовыПриОткрытииФормы(ДопПараметры)
	ЗаполнитьКонтекстноеМеню();
	ЗаполнитьКаталогИнструментовЕслиОнПустой();
	
	
	КешВерсияОбработки = ПолучитьВерсиюОбработкиСервер();
	ДопПараметры.Вставить("КешВерсияОбработки",КешВерсияОбработки);
	
	ЕстьКонстантаВКонфигурацииПутьКVA = ЕстьКонстантаВКонфигурацииСервер("ПутьКVanessaAutomation");
	ДопПараметры.Вставить("ЕстьКонстантаВКонфигурацииПутьКVA",ЕстьКонстантаВКонфигурацииПутьКVA);
	
	ВосстановитьВсеНастройкиСервер(ДопПараметры.ЭтоLinux,ДопПараметры.НедавноЗагруженныеФичи);
	
	ПрефиксИнструментаДляСохраненияНастроек = ПолучитьПрефиксИнструмента();
	ДопПараметры.Вставить("ПрефиксИнструментаДляСохраненияНастроек",ПрефиксИнструментаДляСохраненияНастроек);
	
	ИДДляОбщегоСохраненияНастроек = ПолучитьИДДляОбщегоСохраненияНастроек();
	ДопПараметры.Вставить("ИДДляОбщегоСохраненияНастроек",ИДДляОбщегоСохраненияНастроек);
	
	Файл = Новый Файл(ДопПараметры.ПроверкаОптимизацииРаботыСФайлами);
	Если Файл.Существует() Тогда
		ДопПараметры.ВозможнаОптимизацияРаботыСФайлами = Истина;
	КонецЕсли;	 
	
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ОбъектСервер.ТекстСообщенийПользователю = ДопПараметры.ТекстСообщенийПользователю;
	
	ЗначениеВРеквизитФормы(ОбъектСервер,"Объект"); 
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьВидимостьЭлементовСвязанныхСПереводомТекста()
	Элементы.ПеревестиТекстНаДругойЯзык.Видимость = НЕ (Объект.ЯзыкГенератораGherkin = "ru");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьЭлементовПослеЗагрузкиНастроек()
	ОбновитьВидимостьЭлементовСвязанныхСПереводомТекста();
КонецПроцедуры

&НаКлиенте
Функция ТабДокВМассив(ТабДок)
	Массив = Новый Массив;
	
	Для Ккк = 1 По ТабДок.ВысотаТаблицы Цикл
		СтрокаТабДока = Новый Массив;
		
		Для Ррр = 1 По ТабДок.ШиринаТаблицы Цикл
			СтрокаТабДока.Добавить(ТабДок.Область(Ккк,Ррр,Ккк,Ррр).Текст);
		КонецЦикла;	
		
		Массив.Добавить(СтрокаТабДока);
	КонецЦикла;	
	
	Возврат Массив;
КонецФункции	 

&НаКлиенте
Функция МассивВТабДок(Массив)
	ТабДок = Новый ТабличныйДокумент;
	СчетчикСтрок = 0;
	Для Каждого СтрокаТабДока Из Массив Цикл
		СчетчикСтрок = СчетчикСтрок + 1;
		
		СчетчикКолонок = 0;
		Для Каждого ЗначениеВСтроке Из СтрокаТабДока Цикл
			СчетчикКолонок = СчетчикКолонок + 1;
			
			ТабДок.Область(СчетчикСтрок,СчетчикКолонок,СчетчикСтрок,СчетчикКолонок).Текст = ЗначениеВСтроке;
		КонецЦикла;	
	КонецЦикла;	
	
	Возврат ТабДок; 
КонецФункции	 

&НаСервереБезКонтекста
Процедура УдалитьОбластиСнизуИСправаИзТабличногоДокумента(ТабДок,НовоеКоличествоСтрок,НовоеКоличествоКолонок)
	Если ТабДок.ВысотаТаблицы > НовоеКоличествоСтрок Тогда
		ОбластьСтроки = ТабДок.Область(НовоеКоличествоСтрок+1,,ТабДок.ВысотаТаблицы,);
		ТабДок.УдалитьОбласть(ОбластьСтроки,ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;	 
	
	Если ТабДок.ШиринаТаблицы > НовоеКоличествоКолонок Тогда
		ОбластьКолонки = ТабДок.Область(,НовоеКоличествоКолонок+1,,ТабДок.ШиринаТаблицы);
		ТабДок.УдалитьОбласть(ОбластьКолонки,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция УниверсальноеПолноеИмяФайла(Знач ПолноеИмяФайлаИлиФайл, ВНРегистр = Ложь)
	ПолноеИмяФайла = ПолноеИмяФайлаИлиФайл;
	Если ТипЗнч(ПолноеИмяФайлаИлиФайл ) = Тип("Файл") Тогда
		ПолноеИмяФайла = ПолноеИмяФайлаИлиФайл.ПолноеИмя;
	КонецЕсли;

	УниверсальноеПолноеИмя = СтрЗаменить(ПолноеИмяФайла, "\", "/");
	Если ВНРегистр Тогда
		УниверсальноеПолноеИмя = НРег(УниверсальноеПолноеИмя);
	КонецЕсли;

	Возврат УниверсальноеПолноеИмя;
КонецФункции

&НаКлиенте
Функция ПроверитьЗапускВТонкомКлиенте()
	ЭтоТонкийКлиент = Истина;
	#Если ТолстыйКлиентУправляемоеПриложение Тогда	
		ЭтоТонкийКлиент = Ложь;
	#КонецЕсли	
	
	Возврат ЭтоТонкийКлиент; 
КонецФункции

&НаКлиенте
Функция ВстроенныеБиблиотеки()
	Массив = Новый Массив;
	
	//Служебная строка. Не удалять. Тут надо добавить имена форм, которые являются встроенными библиотеками
	
	Возврат Массив;
КонецФункции	 

&НаКлиентеНаСервереБезКонтекста
Функция НадоДобавитьСтандартнуюБиблиотеку(ВерсияПоставки)
	Если НЕ ЗначениеЗаполнено(ВерсияПоставки) Тогда
		Возврат Истина;
	ИначеЕсли ВерсияПоставки = "standart" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаСервереБезКонтекста
Функция РежимСовестимостиПозволяетИспользоватьНовыеСтроковыеФункции()
	ТекущийРежимСовместимости = Неопределено;
	
	Попытка
		ТекущийРежимСовместимости = Вычислить("Метаданные.РежимСовместимости");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		РежимыСовестимости = Метаданные.СвойстваОбъектов.РежимСовместимости;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		Если ТекущийРежимСовместимости = РежимыСовестимости.Версия8_1 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_2_13 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_2_16 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_3_1 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_3_2 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_3_3 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_3_4 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_3_5 Тогда
			Возврат Ложь;
		КонецЕсли;	 
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции	

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ЗакрытьФормуVA = Истина;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМодульSikuliXСевер()
	ПараметрыФормы = Новый Структура;
	Если МодульSikuliXСевер = Неопределено Тогда
		МодульSikuliXСевер = ПолучитьФорму("ВнешняяОбработка." + ПолучитьИмяОбработкиVA() + ".Форма.SikuliXСервер", ПараметрыФормы);
	КонецЕсли;	 
	
	Возврат МодульSikuliXСевер;
КонецФункции	 

&НаКлиенте
Процедура ОстановитьSikuliXСервер()
	Если SikuliXСеверЗапущен = Истина Тогда
		ПолучитьМодульSikuliXСевер().ОстановитьSikuliXСервер();
		SikuliXСеверЗапущен = Ложь;
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Функция ВыполнитьSikuliСкриптЧерезSikuliXСервер(СтрокаКоманды, ЖдатьОкончания, ЗапускЧерезСкрипт,ОписаниеОшибки)
	Если SikuliXСеверЗапущен <> Истина Тогда
		ЗапуститьSikuliXСевер();
	КонецЕсли;	
	
	Возврат ПолучитьМодульSikuliXСевер().ВыполнитьСкрипт(СтрокаКоманды, ЖдатьОкончания, ЗапускЧерезСкрипт,ОписаниеОшибки);	
КонецФункции	 

&НаКлиенте
Функция ЭтоОпределениеСценария(Знач Стр)
	//строка должна быть с нижнем регистре
	Если Найти(Стр,"сценарий:") = 1 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр,"scenario:") = 1 Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция ЭтоОпределениеСтруктурыСценария(Знач Стр)
	//строка должна быть с нижнем регистре
	Если Найти(Стр,"структура сценария:") = 1 Тогда
		Возврат Истина;
	ИначеЕсли Найти(Стр,"scenario outline:") = 1 Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Процедура ЗапомнитьДанныеФайлаПриСохраненииМакета(ИмяФайла)
	Если НЕ ОбъектКонтекст.Свойство("_ДанныеФайловПриСохраненииМакета") Тогда
		_ДанныеФайловПриСохраненииМакета = Новый Соответствие;
		ОбъектКонтекст.Вставить("_ДанныеФайловПриСохраненииМакета",_ДанныеФайловПриСохраненииМакета);
	Иначе	
		_ДанныеФайловПриСохраненииМакета = ОбъектКонтекст._ДанныеФайловПриСохраненииМакета;
	КонецЕсли;
	
	ТекВерсия = ВремяИзмененияФайлаКомандаСистемы(ИмяФайла);
	_ДанныеФайловПриСохраненииМакета.Вставить(ИмяФайла,ТекВерсия);
КонецПроцедуры 

&НаКлиенте
Функция ФайлМакетаВФайлахКоторыеИспользовалисьРанееВЭтомЖеСценарии()
	Если НЕ ОбъектКонтекст.Свойство("_ДанныеФайловПриСохраненииМакета") Тогда
		Возврат Неопределено;
	КонецЕсли;	 	
	
	_ДанныеФайловПриСохраненииМакета = ОбъектКонтекст._ДанныеФайловПриСохраненииМакета;
	Для Каждого Элем Из _ДанныеФайловПриСохраненииМакета Цикл
		ИмяФайла = Элем.Ключ;
		Если ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
			Возврат ИмяФайла; 
		КонецЕсли;	 
	КонецЦикла;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция СоздатьФайлПроверкаОптимизацииРаботыСФайлами()
	ИмяФайла = ПолучитьИмяВременногоФайла("check");
	ЗТ = Новый ЗаписьТекста(ИмяФайла,"UTF-8",,Истина); 
	ЗТ.ЗаписатьСтроку("check"); 
	ЗТ.Закрыть();
	
	Возврат ИмяФайла; 
КонецФункции	 

&НаСервереБезКонтекста
Процедура УдалитьФайлыСервер(ИмяФайла)
	УдалитьФайлы(ИмяФайла);
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ФайлСуществуетСервер(ИмяФайла)
	Файл = Новый Файл(ИмяФайла); 
	Возврат Файл.Существует(); 
КонецФункции

&НаСервереБезКонтекста
Функция ФайлВремяИзмененияСервер(ИмяФайла)
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.ПолучитьВремяИзменения();
КонецФункции	 

&НаСервереБезКонтекста
Процедура НайтиФайлыСервер(Путь, МассивКаталогов, МассивФайлов, ИскатьВПодкаталогах,ИскомоеИмяФайла)
	Файлы = НайтиФайлы(Путь, "*", ИскатьВПодкаталогах);
	
	Для Каждого Файл Из Файлы Цикл
		Если Файл.ЭтоКаталог() Тогда
			МассивКаталогов.Добавить(Файл.ПолноеИмя);
		Иначе	
			МассивФайлов.Добавить(Файл.ПолноеИмя);
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры 

&НаКлиенте
Процедура ИнициализацияПеременныхМодуляФормы()
	ФормаVanessaAutomationОткрылась = Ложь;
	ТаблицаОбработокДляОтладки = Новый Соответствие;
	
	ВыполнятьСценарииАсинхронно = Истина;
	
	ШагСтрокДляМодуля         = 10000;
	ВсёЕщёИдётВыполнениеШагов = 0;
	
	МассивСостоянияКонтекстовДоВыполненияШага = Новый Массив;
	
	ТаблицаУжеСуществующихСценариев = Новый Массив;
	Брейкпоинты                     = Новый Массив;
	
	
	МассивВерсийFeatureИмяФайла = Новый Массив;
	МассивВерсийFeatureВерсия   = Новый Массив;
	
	МассивВерсийEPFИмяФайла = Новый Массив;
	МассивВерсийEPFВерсия   = Новый Массив;
	
	ТаблицаКонтекстовОбработок = Новый Массив;
	МассивИменКонтекстовОбработок = Новый Массив;
	НедавноЗагруженныеФичи = Новый Массив;
	
	ЭтоLinux = Ложь;
	
	
	
	ПрекратитьВыполнениШаговТакКакЗакончилсяСценарий = Ложь;
	ИнтервалВыполненияШагаПриЗаписиВидео             = 4;
	БылаОшибкаСкриптовСборкиВидео                    = Ложь;
	СкриншотСделанВСценарии                          = Ложь;
	ЭтоЗапускВРежимеКоманднойСтроки                  = Ложь;
	ЭтоЗапускВРежимеБезЗагрукиНастроек               = Ложь;
	Версия8310ИлиВыше                                = Ложь;
	Версия8311ИлиВыше                                = Ложь;
	Версия8312ИлиВыше                                = Ложь;
	Версия8313ИлиВыше                                = Ложь;
	
	
	
	МассивTTS = Неопределено;
	
	ИмяСценарияКоторыйНадоВыполнитьПослеПереазгрузки             = "";
	СтрокаСценарияКоторыйНадоВыполнитьПослеПереазгрузкиЭтоПример = Ложь;
	
	ПредставлениеВертЧертыВТабДок = "__&ВертЧерта__";
	
	МаксСчетчикШаговБезТаймера = 100;
	НадоПерейтиКСтрокеДерева = -1;
	ВозниклаОшибкаПодключенияTestClient        = Ложь;
	ВозниклаОшибкаВШагеКонтекста               = Ложь;
	ВозниклаОшибкаОшибкаСетевогоВзаимодействия = Ложь;
	
	КешДанныеПеревода = Новый Структура;
	КешДанныеПеревода.Вставить("ТаблицаПеревода",Неопределено);
	КешДанныеПеревода.Вставить("Язык",Неопределено);
	
	ГлобальныеЗначенияТаблиц = Новый Структура;
	
	ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок = Ложь;
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения,"8.3.6.1977") Тогда
		Если РежимСовестимостиПозволяетИспользоватьНовыеСтроковыеФункции() Тогда
			ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ЭтоWindowsXP = Ложь;
	Если Найти(НРег(СистемнаяИнформация.ВерсияОС),НРег("Windows XP")) > 0 Тогда
		ЭтоWindowsXP = Истина;
	КонецЕсли;	 
	ВозможнаОптимизацияРаботыСФайлами = Ложь;
КонецПроцедуры 

&НаКлиенте
Процедура ОбработчикПодключенияБиблиотекПриОткрытии(Знач ПомещенныеФайлы, Знач ДополнительныеПараметры) Экспорт
	Для Каждого ПомещенныйФайл Из ПомещенныеФайлы Цикл
		ДополнительныеПараметрыПодключения = Новый Структура;
		ДополнительныеПараметрыПодключения.Вставить("АдресХранилища",ПомещенныйФайл.Хранение);
		Если Найти(НРег(ПомещенныйФайл.Имя),"steps.epf") > 0 Тогда
			ДополнительныеПараметрыПодключения.Вставить("ИмяФайла",ДополнительныеПараметры.ИменаФайлов["steps.epf"]);
			ИмяОбработки = ПодключитьВнешнююОбработкуСервер(ПомещенныйФайл.Хранение,ЕстьЗащитаОтОпасныхДействий,ДополнительныеПараметрыПодключения);
			ПодключитьБиблиотекуПереводШагов();
		ИначеЕсли Найти(НРег(ПомещенныйФайл.Имя),"messages.epf") > 0 Тогда
			ДополнительныеПараметрыПодключения.Вставить("ИмяФайла",ДополнительныеПараметры.ИменаФайлов["messages.epf"]);
			ИмяОбработки = ПодключитьВнешнююОбработкуСервер(ПомещенныйФайл.Хранение,ЕстьЗащитаОтОпасныхДействий,ДополнительныеПараметрыПодключения);
			ПодключитьБиблиотекуСообщенийПользователю();
		ИначеЕсли Найти(НРег(ПомещенныйФайл.Имя),"работасвидео.epf") > 0 Тогда
			ДополнительныеПараметрыПодключения.Вставить("ИмяФайла",ДополнительныеПараметры.ИменаФайлов["работасвидео.epf"]);
			ИмяОбработки = ПодключитьВнешнююОбработкуСервер(ПомещенныйФайл.Хранение,ЕстьЗащитаОтОпасныхДействий,ДополнительныеПараметрыПодключения);
			ПодключитьБиблиотекуРаботыСВидео();
		КонецЕсли;	 
	КонецЦикла;	 
	
	ПриОткрытииПродолжение();
КонецПроцедуры

&НаКлиенте
Процедура АсинхронноеПодключениеМодулей()
	Если ПустаяСтрока(Объект.КаталогИнструментов) Тогда
		Объект.КаталогИнструментов = КаталогИнструментовИзПутиКФреймворку();
	КонецЕсли;
	
	Если Объект.ВерсияПоставки = "single" Тогда
		ПодключитьБиблиотекуПереводШагов();
		ПодключитьБиблиотекуСообщенийПользователю();
		ПриОткрытииПродолжение();
		ПодключитьБиблиотекуРаботыСВидео();
		Возврат;
	КонецЕсли;	 
	
	Если СокрЛП(Объект.КаталогИнструментов) = "" Тогда
		ЕстьКонстантаВКонфигурацииПутьКVA = ЕстьКонстантаВКонфигурацииСервер("ПутьКVanessaAutomation");
		Если ЕстьКонстантаВКонфигурацииПутьКVA Тогда
			ПутьКVanessaAutomation     = ПолучитьЗначениеКонстантыСервер("ПутьКVanessaAutomation");
			ФайлПутьКVanessaAutomation = Новый Файл(ПутьКVanessaAutomation);
			ИмяФайла                 = ДополнитьСлешВПуть(ФайлПутьКVanessaAutomation.Путь) + "locales/Messages.epf";
			
			Если Не ЗначениеЗаполнено(Объект.КаталогИнструментов) Тогда
				//ПутьКVanessaAutomation - это полный путь к epf с именем файла 
				Объект.КаталогИнструментов = КаталогИнструментовИзПутиКФреймворку(ПутьКVanessaAutomation);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	ИменаФайлов = Новый Соответствие;
	
	ПомещаемыеФайлы = Новый Массив;
	
	ПутьКФайлу = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "locales/Messages.epf";
	ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПутьКФайлу);
	ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
	ИменаФайлов.Вставить("messages.epf",ПутьКФайлу);
	
	ПутьКФайлу = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "locales/Steps.epf";
	ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПутьКФайлу);
	ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
	ИменаФайлов.Вставить("steps.epf",ПутьКФайлу);
	
	ПутьКФайлу = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "lib/Video/РаботаСВидео.epf";
	ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПутьКФайлу);
	ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);
	ИменаФайлов.Вставить("работасвидео.epf",ПутьКФайлу);
	
	ПараметрыЗавершения = Новый Структура();
	ПараметрыЗавершения.Вставить("ИменаФайлов",ИменаФайлов);
	Выполнить("НачатьПомещениеФайлов(Новый ОписаниеОповещения(""ОбработчикПодключенияБиблиотекПриОткрытии"", ЭтаФорма, ПараметрыЗавершения),
		|ПомещаемыеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор)");
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытииПродолжение()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Версия836ИлиВыше    = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.6.0");
	Версия8310ИлиВыше   = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.10.0");
	Версия8311ИлиВыше   = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.11.0");
	Версия8312ИлиВыше   = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.12.0");
	Версия8313ИлиВыше   = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.13.0");
	
	СчитываниеМакетаНачСтр = 1;
	СчитываниеМакетаНачКол = 1;
	СчитываниеМакетаКолСтр = 30;
	СчитываниеМакетаКолКол = 20;
	
	ЭтоLinux = Ложь;
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 
		ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64
		ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.MacOS_x86
		ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда 
		ЭтоLinux = Истина;
	КонецЕсли;

	Объект.ВыполнятьШагиАссинхронно = Ложь;
	Объект.ЯзыкГенератораGherkin = "ru";
	
	ОбъектКонтекст = Новый Структура;
	ОбъектКонтекстСохраняемый = Новый Структура;
	Если Объект.ДополнительныеПараметры  = Неопределено Тогда
		Объект.ДополнительныеПараметры = Новый Структура;
	КонецЕсли;	 
	
	ВосстановитьНастройкиКлиент();
	
	ЗагрузитьПлагины();
КонецПроцедуры

&НаКлиенте
Функция ГенерироватьШагПоискаПоЗаголовку(ЗаголовокЭлемента,МассивСтруктурФорм, ТекущаяФорма, ТипОбъекта) 
	Если Объект.ИскатьЭлементыФормыПоИмени Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если СокрЛП(ЗаголовокЭлемента) <> "" и (Не ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФорма, ЗаголовокЭлемента, ТипОбъекта)) Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Функция ЭтоВнутреннийАдресФормы(Знач АдресСнипета)
	Если Лев(НРег(АдресСнипета),34) = "внешняяобработка.vanessaautomation" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

&НаКлиенте
Процедура ОбработкаВидимостиВыполнятьШагиАссинхронно()
	 Элементы.ИнтервалВыполненияШагаЗаданныйПользователем.Видимость = Объект.ВыполнятьШагиАссинхронно;
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВидимостиИспользоватьSikuliXСервер()
	 Элементы.КаталогиСкриптовSikuliX.Видимость = Объект.ИспользоватьSikuliXСервер;
	 Элементы.СброситьПодключениеSikuliXСервера.Видимость = Объект.ИспользоватьSikuliXСервер;
КонецПроцедуры 

&НаКлиенте
Процедура ДанныеКлиентовТестированияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Элементы.ДанныеКлиентовТестирования.Обновить();
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияМодуля



#КонецОбласти

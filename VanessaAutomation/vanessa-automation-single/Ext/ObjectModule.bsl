#Область ОписаниеПеременных

Перем РезультатыСравненияТаблиц Экспорт;
Перем СтатусыРезультатаТестирования Экспорт;
Перем ПараметрыОтчетаУФ;
Перем ОтчетВРежимеУФ;
Перем ЭтоLinux;
Перем Регулярка;
Перем РазницаВМилисекундахМеждуЮниксИНачалЭпохи;
Перем КешСтрокаПробелов;

#КонецОбласти

#Область ПеременныеFeatureReader

Перем ТаблицаКлючевыхСлов;
Перем ЭтоУФ Экспорт;
Перем СоответствиеТаблицПереводов;
Перем ТекущийЯзыкФичаФайла;
Перем ПредставлениеВертЧертыВТабДок;
Перем ПредставлениеАпостроф;
Перем ПредставлениеКавычка;
Перем ПредставлениеДвойнойСлеш;
Перем ПредставлениеВертикальнаяЧерта;
Перем ПредставлениеТире;
Перем ПредставлениеЭкранированныйСлеш;
Перем ТаблицаКешПервыхСлов;
Перем ТипЧисло;

Перем ШагСтрокДляМодуля;
#КонецОбласти

#Область ПеременныеЗапросыИзБД


#КонецОбласти

#Область ПеременныеСериализаторMXL

Перем ТестовыеДанныхДляУдаления;

Перем МассивИмен;

Перем МетаданныеОписание Экспорт;
Перем СсылочныеТипы Экспорт;
Перем СоответствиеОбъектовМетаданныхИСсылочныхТипов;

// массив строк дерева метаданных, имеющих признак Выгружать
Перем СоставПолнойВыгрузки Экспорт;

Перем мВыгруженныеОбъекты;

Перем мНаличиеВыгрузкиПодчиненныхОбъектов;
Перем мТипРезультатЗапроса;
Перем мСоответствиеКолонокДвижений;
Перем ОбработанныхКонстант Экспорт;
Перем ОбработанныхНаборовЗаписей Экспорт;
Перем СоставВспомогательнойВыгрузки;

Перем АнглийскоеСоответствие;
Перем мТЗКэшОбъектов;

#КонецОбласти

#Область ПеременныеУтвержденияBDD

Перем ФлагОтрицанияДляСообщения;

#КонецОбласти

// Служебная строка. Не удалять. #КонецОбласти ОписаниеПеременных


#Область ПроцедурыИФункции

Функция ВстроенныеБиблиотеки() Экспорт
	Спс = Новый СписокЗначений;
	
	// Служебная строка. Не удалять. Тут надо добавить имена форм, которые являются встроенными библиотеками
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ГруппировкаВАллюр");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_РаботаСБуферомОбменаVanessaExt");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_РаботаСФотографией");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_SikuliXServer");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_Smoke_InputBasedOn");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_НесколькихКлиентовТестирования");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_РаботаСTestClient");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_UIAutomation");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ОткрытьTestClient");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ПодключениеНесколькихКлиентовТестированияБиблиотека");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ПроверкаЗначенияМакета");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ПроверкаИсключенияШага");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_РаботаСИнтерфейсом");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_РаботаСИнтерфейсомДополнительный");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_РаботаСОкномСообщений");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_РаботаСТаблицами");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_СохранитьМакетИзОбработкиВФайл");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ФильтрФормыСписка");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_VAExtension");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_VanessaExt");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_VanessaExtBrowser");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_Load1000ItemsfromMxl");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_VBForm");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_VBManager");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ВыводТекста");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_Док_ГененерацияEPFLib");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_Док_ЗагрузкаФичLib");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_Док_ОткрытиеФормыLib");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_Док_ПередачаПараметровВСценарийLib");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_Док_ПроверитьЕстьЛиОкноСОшибкойLib");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_Док_РаботаСПеременнымиКонтекстИКонтекстСохраняемыйLib");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ЗагрузкаФичи");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ЗаполнитьНастройкиЗаписиВидео");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ЗапускПростогоСценарияTestClient");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ИнтервалВыполненияШага");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_Константы");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ОстановитьВыполнениеШагов");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ОткрытьФормуЧерезКоманду");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_Плагины");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ПримерНаписанияФичиLib");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_РазвернутьВеткиДереваVB");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_СозданиеFixtures");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_СозданиеFixturesПоМакетуОбработкиФичи");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_СозданиеЗаписейРС");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_СуществованиеЭлементов");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ТестированиеVA");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_УстановкаСистемныхПараметров");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_Автоинструкции");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_Браузер");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ВстроенныйЯзык");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ШагиПолученияЗамеров");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ЗапускПриложений");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_БиблиотекаШаговИнициаторДанных");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ИнтерактивнаяСправка");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ИнтернетПочта");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_Логирование");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_Обновление_нумерации_объектов");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_СозданиеЗаписейИБ");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_КнопкаНажималкаОбычныйИнтерфейс");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ПакетныйРежим");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_СделатьПаузу");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_СделатьПаузуОФ");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ПеременныеОкружения");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ПодготовкаИЗагрузкаДанных");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_РаботаПопыткойИсключением");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ДобавлениеФайлаКШагу");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_РаботаСФайлами");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_РасширениеИнструкцииБарузер");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ДоступнстьРоли");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_Условие");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_ПереборМассива");
	Спс.Добавить("ВнешняяОбработка.VanessaAutomationsingle.Форма.Тест_Цикл");

	Возврат Спс;
КонецФункции	

Функция СтруктураОбщихНастроек(НастрокиВыгрузки = Ложь, НастройкиЗагрузки = Ложь) Экспорт 
	
	Настройки = Новый Структура;
	Настройки.Вставить("Version", "");	
	Настройки.Вставить("Lang", "");	
	Настройки.Вставить("DebugLog", "");
	Настройки.Вставить("ВерсияVA", "");
	Настройки.Вставить("КаталогФич", "");	
	Настройки.Вставить("ДобавлятьКИмениСценарияУсловияВыгрузки", Ложь);
	Настройки.Вставить("ЗаписыватьВидеоВыполненияТестов", Ложь);
	Настройки.Вставить("КоличествоКадровВидеоВыполненияТестов", 5);
	Настройки.Вставить("КомандаЗаписиВидеоВыполненияТестов", "ffmpeg");
	Настройки.Вставить("КаталогДляЗаписиВидеоВыполненияТестов", "");
	Настройки.Вставить("ИмяТекущейСборки", "");
	Настройки.Вставить("ЗагрузкаФичПриОткрытии", "Загружать");		
	
	Настройки.Вставить("ГенерироватьУФ", Истина);
	Настройки.Вставить("СоздаватьОбластиПриГенерацииКода", Истина);
	Настройки.Вставить("ВыводитьТекстМодуляВместоПерегенерацииEPF", Ложь);
	Настройки.Вставить("ВерсияПлатформыДляГенерацииEPF", "");	
	
	Настройки.Вставить("ДополнительныеПараметры", "");
	Настройки.Вставить("КомандаОткрытияФичиВТекстовомРедакторе", "");
	Настройки.Вставить("ПоставщикПользовательскихНастроек", "NotUse");
	Настройки.Вставить("АдресПользовательскихНастроек", "");
	Настройки.Вставить("ИспользоватьРедакторVanessaEditor", Истина);
	Настройки.Вставить("ТемаРедактораVanessaEditor", "vs");
	Настройки.Вставить("ИспользоватьДанныеТекущейФормыПриПодбореШагов", Ложь);
	Настройки.Вставить("ПоказыватьСтрокиПодсценариевVanessaEdittor", Истина);
	Настройки.Вставить("ПоказыватьЗначенияПеременныхВСтрокахРедактора", Истина);
	Настройки.Вставить("ОткрыватьНачальнуюСтраницуПриЗапуске", Истина);
	Настройки.Вставить("ПоказыватьМиниатюруКода", Истина);
	Настройки.Вставить("ЗаменятьТабыНаПробелы", Ложь);
	Настройки.Вставить("ВычислятьВыраженияВФигурныхСкобках", Ложь);
	Настройки.Вставить("ПриНажатииЭскейпВРедактореЗакрытьФорму", Истина);
	
	// Выполнение сценариев
	ВыполнениеСценариев = Новый Структура;
	ВыполнениеСценариев.Вставить("ВыполнятьШагиАссинхронно", Ложь);
	ВыполнениеСценариев.Вставить("ИнтервалВыполненияШагаЗаданныйПользователем", 0);
	ВыполнениеСценариев.Вставить("ОбновлятьСтатистикуВДереве", Истина);
	ВыполнениеСценариев.Вставить("ОбновлятьДеревоПриНачалеВыполненияСценария", Истина);
	ВыполнениеСценариев.Вставить("ОстановкаПриВозникновенииОшибки", Ложь);
	ВыполнениеСценариев.Вставить("ПоказыватьНомерСтрокиДереваПриВозникновенииОшибки", Ложь);
	ВыполнениеСценариев.Вставить("ПриравниватьPendingКFailed", Истина);
	ВыполнениеСценариев.Вставить("РазличатьBrokenИFailedПоКлючевомуСловуТогда", Ложь);
	ВыполнениеСценариев.Вставить("ЗапрещатьПерезаписыватьПеременные", Ложь);
	ВыполнениеСценариев.Вставить("ОбновлятьТаблицыФормыПриПолученииЗначения", Ложь);
	ВыполнениеСценариев.Вставить("ПолучатьМакетыСПомощьюРасширенияVAExtension", Ложь);
	ВыполнениеСценариев.Вставить("ВыполнятьSleepЧерезPing", Ложь);
	ВыполнениеСценариев.Вставить("ТаймаутДляАсинхронныхШагов", 10);
	ВыполнениеСценариев.Вставить("КоличествоСекундПоискаОкна", 10);
	ВыполнениеСценариев.Вставить("КоличествоПопытокВыполненияДействия", 3);
	ВыполнениеСценариев.Вставить("БезопасноеВыполнениеШагов", Ложь);
	ВыполнениеСценариев.Вставить("ПаузаПриОткрытииОкна", 0);
	Настройки.Вставить("ВыполнениеСценариев", ВыполнениеСценариев);
	
	// Настройки клиентов тестирования
	КлиентТестирования = Новый Структура;
	КлиентТестирования.Вставить("ЗапускатьКлиентТестированияСМаксимизированнымОкном", Истина);
	КлиентТестирования.Вставить("ТаймаутЗапуска1С", 25);
	КлиентТестирования.Вставить("ДиапазонПортовTestclient", "");
	КлиентТестирования.Вставить("ЗакрыватьКлиентТестированияПринудительно", Истина);
	КлиентТестирования.Вставить("ОпределятьРеальныйПортНаКоторомЗапустилсяКлиентТестирования", Ложь);
	КлиентТестирования.Вставить("ПутьКadb", "");
	КлиентТестирования.Вставить("ПовторноЗапускатьСеансКлиентаТестированияПриПодключенииЕслиНеНайденЕгоПроцесс", Ложь);
	КлиентТестирования.Вставить("ИнтервалЗапускаПроцессаКлиентаТестирования", 100);
	КлиентТестирования.Вставить("КаталогФайловВыводаСлужебныхСообщений", "");
	КлиентТестирования.Вставить("ТаймаутПередПринудительнымЗакрытиемКлиентаТестирования", 10);
	КлиентТестирования.Вставить("МодальноеОкноПриЗапускеКлиентаТестированияЭтоОшибка", Истина);
	КлиентТестирования.Вставить("ОтключитьЗапускРеглЗаданийВФайловойБазе", Ложь);
	
	КлиентТестирования.Вставить("ЗапускатьТестКлиентВРежимеОтладки", Ложь);
	КлиентТестирования.Вставить("КлючиОтладки", "");
	КлиентТестирования.Вставить("АдресОтладчика", "");
	КлиентТестирования.Вставить("ДанныеКлиентовТестирования", Новый Массив);
	Настройки.Вставить("КлиентТестирования", КлиентТестирования);
	
	// Отчет Allure
	Настройки.Вставить("ДелатьОтчетВФорматеАллюр", Ложь);
	Allure = Новый Структура;
	Allure.Вставить("КаталогВыгрузкиAllure", "");
	Allure.Вставить("КаталогВыгрузкиAllureБазовый", "");
	Allure.Вставить("УровеньОтчета1", "");
	Allure.Вставить("УровеньОтчета2", "");
	Allure.Вставить("УровеньОтчета3", "");	
	Allure.Вставить("ГруппировкаTestSuites", "");	
	Allure.Вставить("ПрикладыватьКОтчетуAllureЖурналРегистрацииВыполненияСценария", Ложь);	
	Allure.Вставить("ПрикладыватьКОтчетуAllureДанныеОСостоянииАктивнойФормы", Ложь);	
	Allure.Вставить("ПрикладыватьКОтчетуAllureДанныеОЗначенияхПеременных", Ложь);	
	Allure.Вставить("ПрикладыватьФайлыMxlКОтчетуAllure", Истина);	
	Allure.Вставить("ПрикладыватьФайлыXlsxКОтчетуAllure", Истина);	
	Allure.Вставить("ПрикладыватьФайлыMxlСохраненныеВФорматеHTMLКОтчетуAllure", Истина);	
	Allure.Вставить("ПрикладыватьДополнительныеДанныеПриСравненииЗначенияСЭталономAllure", Ложь);	
	Allure.Вставить("ПодставлятьВОтчетеAllureЗначенияПеременных", Истина);	
	Allure.Вставить("ПрикладыватьКОтчетуAllureДанныеОСостоянииВсехФорм", Ложь);	
	Allure.Вставить("ПрикладыватьКОтчетуAllureДанныеОСетевыхСоединениях", Ложь);	
	Allure.Вставить("ПрикладыватьКОтчетуAllureДанныеОПроцессахОС", Ложь);	
	Allure.Вставить("ТегиПропускающиеСценарийAllure", "");	
	Allure.Вставить("КаталогОтносительноКоторогоНадоСтроитьИерархию", "");
	Allure.Вставить("ДанныеАллюрМеток", Новый Массив);
	Настройки.Вставить("ОтчетAllure", Allure);
	
	// Отчет JUnit
	Настройки.Вставить("ДелатьОтчетВФорматеjUnit", Ложь);
	Настройки.Вставить("СкриншотыjUnit", Ложь);
	JUnit = Новый Структура;
	JUnit.Вставить("КаталогВыгрузкиJUnit", "");
	Настройки.Вставить("ОтчетJUnit", JUnit);
	
	// Отчет Cucumber
	Настройки.Вставить("ДелатьОтчетВФорматеCucumberJson", Ложь);
	Cucumber = Новый Структура;
	Cucumber.Вставить("КаталогВыгрузкиCucumberJson", "");	
	Настройки.Вставить("ОтчетCucumber", Cucumber);
	
	// Отчет СППР
	Настройки.Вставить("ДелатьОтчетВФорматеСППР", Ложь);
	СППР = Новый Структура;
	СППР.Вставить("КаталогВыгрузкиСППР", "");
	Настройки.Вставить("ОтчетСППР", СППР);
	
	// Инструкции
	Настройки.Вставить("АвтонумерацияШагов", Истина);
	Настройки.Вставить("ТекстовыеИнструкцииГруппаШаговКакШаг", Истина);
	Настройки.Вставить("ДобавлятьИмяФичиВТекстовуюИнструкцию", Ложь);
	Настройки.Вставить("ДобавлятьИмяСценарияВТекстовуюИнструкцию", Ложь);
	
	// Инструкция HTML
	Настройки.Вставить("СоздаватьИнструкциюHTML", Ложь);
	ИнструкцияHTML = Новый Структура;
	ИнструкцияHTML.Вставить("КаталогВыгрузкиИнструкцийHTML", "");
	ИнструкцияHTML.Вставить("СтилиHTML", "");
	Настройки.Вставить("ИнструкцияHTML", ИнструкцияHTML);
	
	// Инструкция Markdown
	Настройки.Вставить("СоздаватьИнструкциюMarkdown", Ложь);
	ИнструкцияMarkdown = Новый Структура;
	ИнструкцияMarkdown.Вставить("КаталогВыгрузкиИнструкцийMarkdown", "");
	Настройки.Вставить("ИнструкцияMarkdown", ИнструкцияMarkdown);
	
	Настройки.Вставить("ДелатьОтчетВоВнутреннемФормате");
	Настройки.Вставить("КаталогиБиблиотек", "");
	Настройки.Вставить("СписокТеговИсключение", Новый СписокЗначений);
	Настройки.Вставить("СписокТеговОтбор", Новый СписокЗначений);
	Настройки.Вставить("СписокСценариевДляВыполнения", Новый Массив);
	Настройки.Вставить("ДелатьЛогВыполненияСценариевВЖР", Ложь);
	Настройки.Вставить("ДелатьЛогВыполненияСценариевВТекстовыйФайл", Ложь);
	Настройки.Вставить("ВыводитьВЛогВыполнениеШагов", Ложь);
	Настройки.Вставить("ПодробныйЛогВыполненияСценариев", Ложь);
	Настройки.Вставить("ВыводитьЛогВКонсоль", Ложь);
	Настройки.Вставить("ЗвуковоеОповещениеПриОкончанииВыполненияСценария", Истина);
	Настройки.Вставить("ПоказыватьОкноОстановкиВыполненияСценария", Истина);
	Настройки.Вставить("ПоказыватьОкноОстановкиЗаписиДействийПользователя", Истина);
	Настройки.Вставить("ОтображатьЗакладкиСверху", Ложь);
	Настройки.Вставить("ПоказыватьРазличияВРедактореОтдельно", Истина);
	Настройки.Вставить("ПроверкаСинтаксисаВРедакторе", Истина);
	Настройки.Вставить("ОтображениеТабуляцииИПробелов", 0);
	Настройки.Вставить("ДелатьЛогОшибокВТекстовыйФайл", Ложь);
	Настройки.Вставить("СобиратьДанныеОСостоянииАктивнойФормыПриОшибке", Ложь);
	Настройки.Вставить("СобиратьДанныеОСостоянииВсехФормПриОшибке", Ложь);
	Настройки.Вставить("СобиратьДанныеОСетевыхСоединениях", Ложь);
	Настройки.Вставить("СобиратьДанныеОПроцессахОС", Ложь);
	Настройки.Вставить("СобиратьДанныеОЗначенияхПеременных", Ложь);
	Настройки.Вставить("КомандаЗапускаБраузера", "");
	Настройки.Вставить("ИспользоватьБраузерПлюсWebSocket", Ложь);
	Настройки.Вставить("ЭмулироватьДвиженияМышкиVanessaExt", Ложь);
	Настройки.Вставить("ЭмулироватьВводКлавиатурыVanessaExt", Ложь);
	Настройки.Вставить("СмещениеПоГоризонталиДвиженияМышкиVanessaExt", 0);
	Настройки.Вставить("СмещениеПоВертикалиДвиженияМышкиVanessaExt", 0);
	Настройки.Вставить("КоличествоШаговПриДвиженииМышкиVanessaExt", 150);
	Настройки.Вставить("ПаузаМеждуШагамиПриДвиженииМышкиVanessaExt", 3);
	Настройки.Вставить("ПодсвечиватьКликМышкиВБраузереVanessaExt", Ложь);
	Настройки.Вставить("ЦветПодсветкиКликаМышкиVanessaExt", 255);
	Настройки.Вставить("РадиусПодсветкиКликаМышкиVanessaExt", 30);
	Настройки.Вставить("ДлительностьПодсветкиКликаМышкиVanessaExt", 12);
	Настройки.Вставить("ТолщинаПодсветкиКликаМышкиVanessaExt", 12);
	Настройки.Вставить("ПрозрачностьПодсветкиКликаМышкиVanessaExt", 127);
	Настройки.Вставить("ПоискКартинокСПомощьюКомпонентыVanessaExt", Истина);
	Настройки.Вставить("ПорогПоискаКартинки", 0.99);
	Настройки.Вставить("ИгнорироватьОшибкиПоискаЭлементовВБраузере", Ложь);
	Настройки.Вставить("ИспользоватьUIAutomation", Ложь);
	Настройки.Вставить("КоэффициентМасштабированияЭкрана", 1);
	Настройки.Вставить("ИмяФайлаЛогВыполненияСценариев", "");
	Настройки.Вставить("ИмяКаталогаЛогОшибок", "");
	Настройки.Вставить("КомандаСделатьСкриншот", "");
	Настройки.Вставить("ИспользоватьКомпонентуVanessaExt", Ложь);
	Настройки.Вставить("ИспользоватьПарсерGherkinИзКомпонентыVanessaExt", Истина);
	Настройки.Вставить("ПоискФайловСПомощьюКомпонентыVanessaExt", Ложь);
	Настройки.Вставить("ИспользоватьВнешнююКомпонентуДляСкриншотов", Ложь);
	Настройки.Вставить("СпособСнятияСкриншотовВнешнейКомпонентой", 0);
	Настройки.Вставить("ДелатьСкриншотПриВозникновенииОшибки", Ложь);
	Настройки.Вставить("СниматьСкриншотКаждогоОкна1С", Ложь);
	Настройки.Вставить("КаталогВыгрузкиСкриншотов", "");
	Настройки.Вставить("КаталогПроекта", "");
	Настройки.Вставить("МетаданныеБиблиотек", Новый СписокЗначений);
	Настройки.Вставить("КаталогКешОзвучкиДляИнтерактивнойСправки", "");
	Настройки.Вставить("СоздаватьФайлыОзвучкиДляСправки", Ложь);
	Настройки.Вставить("ПодключатьГорячуюКлавишуДляПолученияСправкиОбЭлементе", Истина);
	Настройки.Вставить("ЗакрыватьСценарийИнтерактивнойСправкиПослеВыполнения", Истина);
	Настройки.Вставить("ПоказыватьПомощникПриПервомЗапуске", Истина);
	
	Настройки.Вставить("ОбучениеЗапуститьУрок", Истина);
	Настройки.Вставить("ОбучениеВидео", Истина);
	Настройки.Вставить("ОбучениеPDF", Истина);
	Настройки.Вставить("ОбучениеMD", Истина);
	
	// Запись видео
	Настройки.Вставить("СоздаватьИнструкциюВидео", Ложь);
	Настройки.Вставить("ОзвучиватьВыполнениеСценария", Ложь);
	ЗаписьВидео = Новый Структура;	
	ЗаписьВидео.Вставить("КаталогВыгрузкиИнструкцийВидео", "");
	ЗаписьВидео.Вставить("ЗаписьВидеоКомандаНачатьЗаписьВидео", "");
	ЗаписьВидео.Вставить("ЗаписьВидеоИнструмент", "ffmpeg");
	ЗаписьВидео.Вставить("ЗаписьВидеоЭкранШирина", "");
	ЗаписьВидео.Вставить("ЗаписьВидеоЭкранВысота", "");
	ЗаписьВидео.Вставить("ЗаписьВидеоЭкранСлева", "");
	ЗаписьВидео.Вставить("ЗаписьВидеоЭкранСверху", "");
	ЗаписьВидео.Вставить("ЗаписьВидеоКоличествоКадров", "");
	ЗаписьВидео.Вставить("ЗаписьВидеоФайлКурсораМышки");
	ЗаписьВидео.Вставить("ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм");
	ЗаписьВидео.Вставить("ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы");
	ЗаписьВидео.Вставить("ЗаписьВидеоКаталогДляВременныхФайлов");
	ЗаписьВидео.Вставить("ЗаписьВидеоФайлВодянойЗнак");
	ЗаписьВидео.Вставить("ЗаписьВидеоКомандаFfmpeg", "ffmpeg");
	ЗаписьВидео.Вставить("ЗаписьВидеоКомандаConvert", "magick convert");
	ЗаписьВидео.Вставить("ЗаписьВидеоКаталогМузыки");
	ЗаписьВидео.Вставить("ЗаписьВидеоГромкостьМузыки");
	ЗаписьВидео.Вставить("ЗаписьВидеоДелатьНаложениеTTS");
	ЗаписьВидео.Вставить("ЗаписьВидеоТипОзвучкиTTS", 1);
	
	ЗаписьВидео.Вставить("ЗаписьВидеоYandexTTSЯзык");
	ЗаписьВидео.Вставить("ЗаписьВидеоYandexTTSГолос");
	ЗаписьВидео.Вставить("ЗаписьВидеоYandexTTSЭмоция");
	ЗаписьВидео.Вставить("ЗаписьВидеоYandexTTSСкорость");
	ЗаписьВидео.Вставить("ЗаписьВидеоYandexTTSИдентификаторКаталога");
	ЗаписьВидео.Вставить("ЗаписьВидеоYandexTTSOauthToken");
	ЗаписьВидео.Вставить("ЗаписьВидеоYandexTTSApiKey");
	ЗаписьВидео.Вставить("ЗаписьВидеоYandexTTSВариантЗапроса");
	
	ЗаписьВидео.Вставить("ЗаписьВидеоAmazonГолос");
	ЗаписьВидео.Вставить("ЗаписьВидеоAmazonДвижок");
	ЗаписьВидео.Вставить("ЗаписьВидеоAmazonЯзык");
	ЗаписьВидео.Вставить("ЗаписьВидеоAmazonРегион", "us-east-1");
	ЗаписьВидео.Вставить("ЗаписьВидеоAmazonКлючДоступа");
	ЗаписьВидео.Вставить("ЗаписьВидеоAmazonСекретныйКлюч");
	
	ЗаписьВидео.Вставить("ЗаписьВидеоСберTTSГолос");
	ЗаписьВидео.Вставить("ЗаписьВидеоСберTTSClientID");
	ЗаписьВидео.Вставить("ЗаписьВидеоСберTTSClientSecret");
	
	ЗаписьВидео.Вставить("ЗаписьВидеоПутьКДвижкуTTS");
	ЗаписьВидео.Вставить("ЗаписьВидеоИмяTTS");
	ЗаписьВидео.Вставить("ЗаписьВидеоСловарьЗамен", Новый СписокЗначений);
	ЗаписьВидео.Вставить("ЗаписьВидеоГруппаШаговКакШаг", Истина);
	ЗаписьВидео.Вставить("ЗаписьВидеоОтключитьМасштабированиеШаговПоВремени");
	ЗаписьВидео.Вставить("ЗаписьВидеоПодсвечиватьНажатияМышки");
	ЗаписьВидео.Вставить("ЗаписьВидеоОтключитьСлайдСЗаголовкомФичи");
	ЗаписьВидео.Вставить("ЗаписьВидеоОтключитьСлайдСценария");
	ЗаписьВидео.Вставить("ЗаписьВидеоОтключитьСлайдФинал");
	ЗаписьВидео.Вставить("ЗаписьВидеоЭмулироватьВводСКлавиатуры");
	ЗаписьВидео.Вставить("ЗаписьВидеоСкрытьСлужебныеОкна");
	ЗаписьВидео.Вставить("ЗаписьВидеоСкоростьПроизношения");
	ЗаписьВидео.Вставить("ЗаписьВидеоКэшироватьФайлыTTS");
	ЗаписьВидео.Вставить("ЗаписьВидеоКэшФайловTTS");
	ЗаписьВидео.Вставить("ЗаписьВидеоКэшироватьВидеоВставки");
	ЗаписьВидео.Вставить("ЗаписьВидеоКэшВидеоВставок");
	ЗаписьВидео.Вставить("ЗаписьВидеоДобавлятьСубтитры");
	ЗаписьВидео.Вставить("ЗаписьВидеоПроцентУскорения");
	ЗаписьВидео.Вставить("ЗаписьВидеоФормироватьИнструкциюТипВидео");
	ЗаписьВидео.Вставить("ЗаписьВидеоФормироватьИнструкциюТипHTML");
	ЗаписьВидео.Вставить("ЗаписьВидеоФормироватьИнструкциюТипMarkdown");		
	ЗаписьВидео.Вставить("ЗаписьВидеоЭмулироватьДвиженияМышкиSikuliX");		
	ЗаписьВидео.Вставить("ЗаписьВидеоПутьКОбработкеДвижкаTTS");		
	ЗаписьВидео.Вставить("ЗаписьВидеоЗаменитьСлайдЗаголовок");
	ЗаписьВидео.Вставить("ЗаписьВидеоПутьКСлайдуЗаголовок");
	ЗаписьВидео.Вставить("ЗаписьВидеоДобавитьМузыкуКСлайдуЗаголовок");
	ЗаписьВидео.Вставить("ЗаписьВидеоЗаменитьСлайдФинал");
	ЗаписьВидео.Вставить("ЗаписьВидеоПутьКСлайдуФинал");
	ЗаписьВидео.Вставить("ЗаписьВидеоДобавитьМузыкуКСлайдуФинал");
	ЗаписьВидео.Вставить("НастройкиДругогоДвижкаTTS", Новый Массив);
	Настройки.Вставить("ЗаписьВидео", ЗаписьВидео);
		
	// SikuliXServer
	Настройки.Вставить("ИспользоватьSikuliXСервер", Ложь);
	SikuliXServer = Новый Структура;
	SikuliXServer.Вставить("КаталогиСкриптовSikuliX", "");
	SikuliXServer.Вставить("КаталогДляГенерацииКартинок", "");
	Настройки.Вставить("SikuliXServer", SikuliXServer);
	
	Настройки.Вставить("ИскатьЭлементыФормыПоИмени", Истина);
	Настройки.Вставить("ДобавлятьПриНакликиванииМетаИнформацию", Ложь);
	Настройки.Вставить("ТегTreeВключенПоУмолчанию", Истина);
	
	Если НастройкиЗагрузки Тогда	
		//Настройки.Вставить("Ключ", "");
	КонецЕсли;
	
	Если НастрокиВыгрузки Тогда
		//Настройки.Вставить("Ключ", "");
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Функция ЗначениеИзТегаСценария(СтрокаДерева, НачалоТега)
	Если ТипЗнч(СтрокаДерева.ПроизвольныеЗначения) <> Тип("Структура")
			ИЛИ НЕ СтрокаДерева.ПроизвольныеЗначения.Свойство("МассивТегов") Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	МассивТегов = СтрокаДерева.ПроизвольныеЗначения.МассивТегов;
	НрегНачалоТега = Нрег(НачалоТега);
	СтрДлинаНачалоТега = СтрДлина(НачалоТега) + 1;
	Для Каждого Элем Из МассивТегов Цикл
		Если Найти(Элем.Тег, НачалоТега) = 1 Тогда
			Возврат Сред(Элем.Тег, СтрДлинаНачалоТега); 
		КонецЕсли;	 
	КонецЦикла;	 
КонецФункции	 

Функция ПолучитьТекстСообщенияПользователю(Текст) Экспорт
	
	Если ТекстСообщенийПользователю <> Неопределено Тогда
		Значение = ТекстСообщенийПользователю[Текст];
		Если ЗначениеЗаполнено(Значение) Тогда
			Возврат Значение;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Текст;
	
КонецФункции	 

Функция ПолучитьВерсиюОбработки(ДобавлятьНазвание = Истина, ТолькоЦифры = Ложь) Экспорт
	Версия = "1.2.039.22";
	
	Если ТолькоЦифры Тогда
		Возврат Версия;	
	ИначеЕсли ДобавлятьНазвание Тогда
		Возврат "vanessa-automation ver " + Версия;	
	Иначе
		Возврат "ver " + Версия;	
	КонецЕсли;
	
КонецФункции

Функция ВерсияРедактора() Экспорт
	Возврат "1.3.6.2";
КонецФункции	

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
		
	Если ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок Тогда
		Если ПропускатьПустыеСтроки = Истина Тогда
			Возврат Вычислить("СтрРазделить(Строка,Разделитель,Ложь)");
		Иначе
			Возврат Вычислить("СтрРазделить(Строка,Разделитель,Истина)");
		КонецЕсли;	 
	КонецЕсли;	 
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Возвращает сведения о внешней обработке.
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	МодульДополнительныеОтчетыИОбработки = Вычислить("ДополнительныеОтчетыИОбработки");
	Если ТипЗнч(МодульДополнительныеОтчетыИОбработки) <> Тип("ОбщийМодуль") Тогда
		Возврат Неопределено;
	КонецЕсли;

	МодульДополнительныеОтчетыИОбработкиКлиентСервер = Вычислить("ДополнительныеОтчетыИОбработкиКлиентСервер");
	
	// BSLLS:UsingHardcodeNetworkAddress-off
	ПараметрыРегистрации = МодульДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1"); 
	// BSLLS:UsingHardcodeNetworkAddress-on
    
    ПараметрыРегистрации.Вид = МодульДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
    ПараметрыРегистрации.Версия = ПолучитьВерсиюОбработки(Ложь, Истина);
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
    
    НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
    НоваяКоманда.Представление = "Vanessa Automation";
    НоваяКоманда.Идентификатор = "VA";
    НоваяКоманда.Использование = МодульДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
    НоваяКоманда.ПоказыватьОповещение = Ложь;
    
    Возврат ПараметрыРегистрации;
    
КонецФункции

// Позволяет сделать поиск в строке "ПроверяемаяСтрока" подстроки "Шаблон"
// при этом подстрока "Шаблон" может содержать символы *
// например СтрокаСоответствуетШаблону("Привет","*вет")
// Параметры:
//   ПроверяемаяСтрока  - Строка - Проверяемая ссылка.
//   Шаблон             - Строка - Строка регулярного выражения.
Функция СтрокаСоответствуетШаблону(ПроверяемаяСтрока, Знач Шаблон) Экспорт
	Если ПроверяемаяСтрока = Шаблон Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Шаблон = ПодготовитьШаблонКИспользованиюВРегулярке(Шаблон, ЭтоLinux);
	
	Если ЭтоLinux Тогда
		Возврат ПроверитьСтрокуRegExpLinux(ПроверяемаяСтрока, Шаблон);
	Иначе	
		Если Регулярка = Неопределено Тогда
			Регулярка = Новый COMОбъект("VBScript.RegExp");
		КонецЕсли;
		
		Регулярка.Global = Истина;
		// для VBScript.RegExp явно указываем что есть начало и конец строки
		Шаблон            = "^" + Шаблон + "$";
		Регулярка.Pattern = Шаблон;
		Возврат Регулярка.Test(ПроверяемаяСтрока);
	КонецЕсли;	 
КонецФункции 

#Область Plugins

Функция ТипыПлагинов()
	Результат = Новый Структура;
	Результат.Вставить("Загрузчик", "Загрузчик");
	Результат.Вставить("Утилита", "Утилита");
	Результат.Вставить("ГенераторОтчета", "ГенераторОтчета");
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
КонецФункции

Функция Плагин(Знач Идентификатор) Экспорт
	
	ИдентификаторПлагинаСПрефиксомПодсистемы = Идентификатор;
	ИдентификаторПлагинаБезПрефиксаПодсистемы = Идентификатор;
	Плагин = Плагины[ИдентификаторПлагинаБезПрефиксаПодсистемы];
	Если ТипЗнч(Плагин) = Тип("Строка") Тогда
		Плагин = СоздатьОбъектПлагина(Плагин);
	КонецЕсли;
	
	Возврат Плагин;
	
КонецФункции

Функция ПолучитьОписанияПлагиновПоТипу(Знач ТипПлагина) Экспорт
	Результат = Новый Массив;
	Для каждого КлючЗначение Из Плагины Цикл
		Плагин = Плагин(КлючЗначение.Ключ);
		Плагин.Инициализация(ЭтотОбъект);
		ОписаниеПлагина = Плагин.ОписаниеПлагина(ТипыПлагинов);
		Если ОписаниеПлагина.Тип = ТипПлагина Тогда
			Результат.Добавить(ОписаниеПлагина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция СоздатьОбъектПлагина(Идентификатор, ВстроенаВКонфигурацию = Ложь, ЭтоОтчет = Ложь) Экспорт
	
	ОбъектПлагина = Неопределено;
	Если ЭтоОтчет = Истина Тогда
		ОбъектПлагина = ВнешниеОтчеты.Создать(Идентификатор, Ложь);				
	Иначе
		ОбъектПлагина = ВнешниеОбработки.Создать(Идентификатор, Ложь);	
	КонецЕсли;
	
	Возврат ОбъектПлагина;
	
КонецФункции

#КонецОбласти

Функция Транслит(Стр) Экспорт
    Рез = СокрЛП(Стр);   
    Рез = СтрЗаменить(Рез, "а", "a");
    Рез = СтрЗаменить(Рез, "б", "b");
    Рез = СтрЗаменить(Рез, "в", "v");
    Рез = СтрЗаменить(Рез, "г", "g");
    Рез = СтрЗаменить(Рез, "д", "d");
    Рез = СтрЗаменить(Рез, "е", "e");
    Рез = СтрЗаменить(Рез, "ё", "e");
    Рез = СтрЗаменить(Рез, "ж", "zh");
    Рез = СтрЗаменить(Рез, "з", "z");
    Рез = СтрЗаменить(Рез, "и", "i");
    Рез = СтрЗаменить(Рез, "к", "k");
    Рез = СтрЗаменить(Рез, "л", "l");
    Рез = СтрЗаменить(Рез, "м", "m");
    Рез = СтрЗаменить(Рез, "н", "n");
    Рез = СтрЗаменить(Рез, "о", "o");
    Рез = СтрЗаменить(Рез, "п", "p");
    Рез = СтрЗаменить(Рез, "р", "r");
    Рез = СтрЗаменить(Рез, "с", "s");
    Рез = СтрЗаменить(Рез, "т", "t");
    Рез = СтрЗаменить(Рез, "у", "u");
    Рез = СтрЗаменить(Рез, "ф", "f");
    Рез = СтрЗаменить(Рез, "х", "h");
    Рез = СтрЗаменить(Рез, "ч", "ch");
    Рез = СтрЗаменить(Рез, "ш", "sh");
    Рез = СтрЗаменить(Рез, "щ", "sch");
    Рез = СтрЗаменить(Рез, "ъ", "");
    Рез = СтрЗаменить(Рез, "ь", "");
    Рез = СтрЗаменить(Рез, "э", "e");
    Рез = СтрЗаменить(Рез, "ю", "yu");
    Рез = СтрЗаменить(Рез, "й", "i");
    Рез = СтрЗаменить(Рез, "ц", "c");
    Рез = СтрЗаменить(Рез, "я", "ya");
    Рез = СтрЗаменить(Рез, "ы", "i");
    Рез = СтрЗаменить(Рез, "А", "A");
    Рез = СтрЗаменить(Рез, "Б", "B");
    Рез = СтрЗаменить(Рез, "В", "V");
    Рез = СтрЗаменить(Рез, "Г", "G");
    Рез = СтрЗаменить(Рез, "Д", "D");
    Рез = СтрЗаменить(Рез, "Е", "E");
    Рез = СтрЗаменить(Рез, "Ё", "E");
    Рез = СтрЗаменить(Рез, "Ж", "ZH");
    Рез = СтрЗаменить(Рез, "З", "Z");
    Рез = СтрЗаменить(Рез, "И", "I");
    Рез = СтрЗаменить(Рез, "К", "K");
    Рез = СтрЗаменить(Рез, "Л", "L");
    Рез = СтрЗаменить(Рез, "М", "M");
    Рез = СтрЗаменить(Рез, "Н", "N");
    Рез = СтрЗаменить(Рез, "О", "O");
    Рез = СтрЗаменить(Рез, "П", "P");
    Рез = СтрЗаменить(Рез, "Р", "R");
    Рез = СтрЗаменить(Рез, "С", "S");
    Рез = СтрЗаменить(Рез, "Т", "T");
    Рез = СтрЗаменить(Рез, "У", "U");
    Рез = СтрЗаменить(Рез, "Ф", "F");
    Рез = СтрЗаменить(Рез, "Х", "H");
    Рез = СтрЗаменить(Рез, "Ч", "CH");
    Рез = СтрЗаменить(Рез, "Ш", "SH");
    Рез = СтрЗаменить(Рез, "Щ", "SCH");
    Рез = СтрЗаменить(Рез, "Ъ", "");
    Рез = СтрЗаменить(Рез, "Ь", "");
    Рез = СтрЗаменить(Рез, "Ы", "I");
    Рез = СтрЗаменить(Рез, "Ц", "C");
    Рез = СтрЗаменить(Рез, "Э", "E");
    Рез = СтрЗаменить(Рез, "Ю", "YU");
    Рез = СтрЗаменить(Рез, "Я", "YA");
    Рез = СтрЗаменить(Рез, "Й", "I");
    Возврат(Рез);
КонецФункции

Процедура СделатьСообщение(Знач Сообщение, ТипСообщения = "Информация") Экспорт
	
	ТипСообщения = ?(ТипСообщения = "Информация", СтатусСообщения.Обычное, СтатусСообщения.ОченьВажное);
	
	Если ДелатьСообщенияТранслитом Тогда
		Сообщение = Транслит(Сообщение);
	КонецЕсли;	 
	
	ТекстСообщения = ПолучитьТекстСообщенияПользователю("%1. %2");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Строка(ТекущаяДата()));
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Сообщение);
	Сообщить(ТекстСообщения, ТипСообщения);
	
КонецПроцедуры

// для совместимости с ОФ
Процедура СообщитьПользователю(Знач Сообщение, ТипСообщения = "Информация") Экспорт
	СделатьСообщение(Сообщение, ТипСообщения);
КонецПроцедуры

Процедура Отладка(Знач Сообщение) Экспорт
	Если DebugLog Тогда
		СделатьСообщение(Сообщение);
	КонецЕсли; 
КонецПроцедуры

Функция ДополнитьСлешВПуть(Знач Каталог)
	Разделитель = "\";

	Если ЭтоLinux Тогда
		Разделитель = "/";
	КонецЕсли;
	
	Если Найти(Прав(Каталог, 1), "\/") > 0 Тогда 
		Каталог = Лев(Каталог, СтрДлина(Каталог) - 1);
	КонецЕсли;
	
	Если Прав(Каталог, 1) <> Разделитель Тогда
		Каталог = Каталог + Разделитель;
	КонецЕсли;
	
	Возврат Каталог;
	
КонецФункции

#Область Allure

Процедура ЗаписатьСтатусВШагИлиСценарий(ОбъектДляЗаписи, Статус)
	Если Статус = "Success" Тогда
		ОбъектДляЗаписи.status = "passed";
	ИначеЕсли Статус = "Pending" Тогда
		ОбъектДляЗаписи.status = "broken";
	ИначеЕсли Статус = "Failed" Тогда
		ОбъектДляЗаписи.status = "failed";
	Иначе	// все остальное, включая skipped
		ОбъектДляЗаписи.status = "skipped";
	КонецЕсли; 

КонецПроцедуры

Процедура ДобавитьПрефиксAllureВСтроку(Стр)
	Стр = СтрЗаменить(Стр, "<test-suite-result", "<ns2:test-suite");
	Стр = СтрЗаменить(Стр, "</test-suite-result>", "</ns2:test-suite>");
	Стр = СтрЗаменить(Стр, "xmlns=""urn:model.allure.qatools.yandex.ru""", "xmlns:ns2=""urn:model.allure.qatools.yandex.ru""");
КонецПроцедуры

Процедура ДобавитьМетку(Фабрика, СписокМеток, name, value)
	
	Если НЕ ЗначениеЗаполнено(value) Тогда
		Возврат;
	КонецЕсли;

	Типlabel    = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "label");
	Метка       = Фабрика.Создать(Типlabel);
	Метка.name  = name;
	Метка.value = value;
	
	СписокМеток.label.Добавить(Метка);
КонецПроцедуры

Функция УбратьСимволыДляКорректногоОтчетаAllure(Знач Стр)
	Возврат СтрЗаменить(Стр, ".", "_");
КонецФункции	

Функция ПолучитьПрефиксИмениСценария(ДобавлятьКИмениСценарияУсловияВыгрузки = Ложь)
	
	Если ДобавлятьКИмениСценарияУсловияВыгрузки И ЗначениеЗаполнено(ИмяТекущейСборки) Тогда
		Возврат "(" + УбратьСимволыДляКорректногоОтчетаAllure(ИмяТекущейСборки) + ") ";
	КонецЕсли;
	Возврат "";
	
КонецФункции	

Процедура ДанныеПоИерархииОтчетаИзОтносительногоПути(epic, feature, story, СтрСтроки, Знач ОтносительныйПуть)
	ПолныйПуть = СтрСтроки.ПолныйПуть;
	ПолныйПутьКопия        = СтрЗаменить(НРег(ПолныйПуть), "/", "\");
	ОтносительныйПутьКопия = СтрЗаменить(НРег(ОтносительныйПуть), "/", "\");
	Если Прав(ОтносительныйПутьКопия, 1) <> "\" Тогда
		ОтносительныйПутьКопия = ОтносительныйПутьКопия + "\";
	КонецЕсли;	 
	
	Поз = Найти(ПолныйПутьКопия, ОтносительныйПутьКопия);
	
	Если Поз = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ПраваяЧастьКопия = Сред(ПолныйПутьКопия, Поз + СтрДлина(ОтносительныйПутьКопия));
	ПраваяЧасть      = Сред(ПолныйПуть, Поз + СтрДлина(ОтносительныйПутьКопия));
	
	Каталог1 = "";
	Каталог2 = "";
	Каталог3 = "";
	
	Поз = Найти(ПраваяЧастьКопия, "\");
	Если Поз > 0 Тогда
		Каталог1 = Лев(ПраваяЧасть, Поз - 1);
		ПраваяЧастьКопия = Сред(ПраваяЧастьКопия, Поз + 1);
		ПраваяЧасть      = Сред(ПраваяЧасть, Поз + 1);
	КонецЕсли;	 
	
	Поз = Найти(ПраваяЧастьКопия, "\");
	Если Поз > 0 Тогда
		Каталог2 = Лев(ПраваяЧасть, Поз - 1);
		ПраваяЧастьКопия = Сред(ПраваяЧастьКопия, Поз + 1);
		ПраваяЧасть      = Сред(ПраваяЧасть, Поз + 1);
	КонецЕсли;	 
	
	Поз = Найти(ПраваяЧастьКопия, "\");
	Если Поз > 0 Тогда
		Каталог3 = Лев(ПраваяЧасть, Поз - 1);
		ПраваяЧастьКопия = Сред(ПраваяЧастьКопия, Поз + 1);
		ПраваяЧасть      = Сред(ПраваяЧасть, Поз + 1);
	КонецЕсли;	 
	
	СобранныеДанные = Новый Структура;
	СобранныеДанные.Вставить("Каталог1", Каталог1);
	СобранныеДанные.Вставить("Каталог2", Каталог2);
	СобранныеДанные.Вставить("Каталог3", Каталог3);
	
	Если ЗначениеЗаполнено(УровеньОтчета1) Тогда
		epic = УровеньОтчетаПоСобраннымДанным(УровеньОтчета1, СтрСтроки, СобранныеДанные, 1);
	КонецЕсли;	 
	Если ЗначениеЗаполнено(УровеньОтчета2) Тогда
		feature = УровеньОтчетаПоСобраннымДанным(УровеньОтчета2, СтрСтроки, СобранныеДанные, 2);
	КонецЕсли;	 
	Если ЗначениеЗаполнено(УровеньОтчета3) Тогда
		story = УровеньОтчетаПоСобраннымДанным(УровеньОтчета3, СтрСтроки, СобранныеДанные, 3);
	КонецЕсли;	 
КонецПроцедуры 

Процедура ДанныеПоИерархииОтчетаИзОтносительногоПути2(epic, feature, story, suite, СтрСтроки, СтрокаСценария, Знач ОтносительныйПуть)
	ПолныйПуть = СтрСтроки.ПолныйПуть;
	Если СтрСтроки.Тип = "Примеры" Тогда
		ПолныйПуть = СтрСтроки.Родитель.ПолныйПуть;
	КонецЕсли;	 
	ПолныйПутьКопия        = СтрЗаменить(НРег(ПолныйПуть), "/", "\");
	ОтносительныйПутьКопия = СтрЗаменить(НРег(ОтносительныйПуть), "/", "\");
	Если Прав(ОтносительныйПутьКопия, 1) <> "\" Тогда
		ОтносительныйПутьКопия = ОтносительныйПутьКопия + "\";
	КонецЕсли;	 
	
	Поз = Найти(ПолныйПутьКопия, ОтносительныйПутьКопия);
	
	Если Поз = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ПраваяЧастьКопия = Сред(ПолныйПутьКопия, Поз + СтрДлина(ОтносительныйПутьКопия));
	ПраваяЧасть      = Сред(ПолныйПуть, Поз + СтрДлина(ОтносительныйПутьКопия));
	
	Каталог1 = "";
	Каталог2 = "";
	Каталог3 = "";
	
	Поз = Найти(ПраваяЧастьКопия, "\");
	Если Поз > 0 Тогда
		Каталог1 = Лев(ПраваяЧасть, Поз - 1);
		ПраваяЧастьКопия = Сред(ПраваяЧастьКопия, Поз + 1);
		ПраваяЧасть      = Сред(ПраваяЧасть, Поз + 1);
	КонецЕсли;	 
	
	Поз = Найти(ПраваяЧастьКопия, "\");
	Если Поз > 0 Тогда
		Каталог2 = Лев(ПраваяЧасть, Поз - 1);
		ПраваяЧастьКопия = Сред(ПраваяЧастьКопия, Поз + 1);
		ПраваяЧасть      = Сред(ПраваяЧасть, Поз + 1);
	КонецЕсли;	 
	
	Поз = Найти(ПраваяЧастьКопия, "\");
	Если Поз > 0 Тогда
		Каталог3 = Лев(ПраваяЧасть, Поз - 1);
		ПраваяЧастьКопия = Сред(ПраваяЧастьКопия, Поз + 1);
		ПраваяЧасть      = Сред(ПраваяЧасть, Поз + 1);
	КонецЕсли;	 
	
	СобранныеДанные = Новый Структура;
	СобранныеДанные.Вставить("Каталог1", Каталог1);
	СобранныеДанные.Вставить("Каталог2", Каталог2);
	СобранныеДанные.Вставить("Каталог3", Каталог3);
	
	Если ЗначениеЗаполнено(УровеньОтчета1) Тогда
		epic = УровеньОтчетаПоСобраннымДанным2(УровеньОтчета1, СтрСтроки, СтрокаСценария, СобранныеДанные, 1);
	КонецЕсли;	 
	Если ЗначениеЗаполнено(УровеньОтчета2) Тогда
		feature = УровеньОтчетаПоСобраннымДанным2(УровеньОтчета2, СтрСтроки, СтрокаСценария, СобранныеДанные, 2);
	КонецЕсли;	 
	Если ЗначениеЗаполнено(УровеньОтчета3) Тогда
		story = УровеньОтчетаПоСобраннымДанным2(УровеньОтчета3, СтрСтроки, СтрокаСценария, СобранныеДанные, 3);
	КонецЕсли;	 
	Если ЗначениеЗаполнено(ГруппировкаTestSuites) Тогда
		suite = УровеньОтчетаПоСобраннымДанным2(ГруппировкаTestSuites, СтрСтроки, СтрокаСценария, СобранныеДанные, 1);
	КонецЕсли;	 
КонецПроцедуры 

Функция УровеньОтчетаПоСобраннымДанным(СтрокаКакОпределятьУровень, СтрСтроки, СобранныеДанные, Уровень)
	МассивЗначений = РазложитьСтрокуВМассивПодстрок(СтрокаКакОпределятьУровень, ";");
	Для Каждого ТекЗначение Из МассивЗначений Цикл
		ТекЗначение = НРег(ТекЗначение);
		Если ТекЗначение = "каталог1" Или ТекЗначение = "catalog1" Тогда
			Возврат СобранныеДанные.Каталог1; 
		ИначеЕсли ТекЗначение = "каталог2" Или ТекЗначение = "catalog2" Тогда
			Возврат СобранныеДанные.Каталог2; 
		ИначеЕсли ТекЗначение = "каталог3" Или ТекЗначение = "catalog3" Тогда
			Возврат СобранныеДанные.Каталог3; 
		ИначеЕсли ТекЗначение = "имяфичи" Или ТекЗначение = "featurename" Тогда
			Если СтрСтроки.Тип = "Фича" Тогда
				Возврат СтрСтроки.Имя; 
			КонецЕсли;	 
			
			Возврат Неопределено;
		ИначеЕсли ТекЗначение = "имясценария" Или ТекЗначение = "scenarioname" Тогда
			Если Уровень = 3 Тогда
				СтрСтроки.ПроизвольныеЗначения.Вставить("ИмяСценария_для_story", Истина);
			КонецЕсли;	 
			
			Возврат Неопределено; 
			
		ИначеЕсли Лев(ТекЗначение, 1) = "#" Тогда
			Результат = "";
			Если ТипЗнч(СтрСтроки.ПроизвольныеЗначения) = Тип("Структура")  Тогда
				Для Каждого КомментарийСтруктура Из СтрСтроки.ПроизвольныеЗначения.МассивКомментариев Цикл
					Комментарий = СокрЛП(КомментарийСтруктура.Комментарий);
					НрегКомментарий = НРег(Комментарий);
					Если Лев(НрегКомментарий, 1) <> "#" Тогда
						НрегКомментарий = "#" + НрегКомментарий;
						Комментарий     = "#" + Комментарий;
					КонецЕсли;	 
					Если Лев(НрегКомментарий, СтрДлина(ТекЗначение)) = ТекЗначение Тогда
						ПромСтр = Сред(Комментарий, СтрДлина(ТекЗначение) + 1);
						Если ЗначениеЗаполнено(ПромСтр) Тогда
							Результат = ПромСтр;
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЦикла;	 
			КонецЕсли;	 
			
			Если ЗначениеЗаполнено(Результат) Тогда
				Возврат Результат; 
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	
КонецФункции	                                     

Функция ВеткаФичи(Знач СтрокаДерева)
	Пока Истина Цикл
		Если СтрокаДерева.Тип = "Фича" Тогда
			Прервать;
		КонецЕсли;	 
		
		СтрокаДерева = СтрокаДерева.Родитель;
		
		Если СтрокаДерева = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат СтрокаДерева; 
КонецФункции	 

Процедура ЗначениеУровняОтчетаИзКомментария(Комментарий, ТекЗначение, Результат)
	Комментарий = СокрЛП(Комментарий);
	НрегКомментарий = НРег(Комментарий);
	Если Лев(НрегКомментарий, 1) <> "#" Тогда
		НрегКомментарий = "#" + НрегКомментарий;
		Комментарий     = "#" + Комментарий;
	КонецЕсли;	 
	Если Лев(НрегКомментарий, СтрДлина(ТекЗначение)) = ТекЗначение Тогда
		ПромСтр = Сред(Комментарий, СтрДлина(ТекЗначение) + 1);
		Если ЗначениеЗаполнено(ПромСтр) Тогда
			Результат = ПромСтр;
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры 

Функция УровеньОтчетаПоСобраннымДанным2(СтрокаКакОпределятьУровень, Знач СтрСтроки, СтрокаСценария, СобранныеДанные, Уровень)
	МассивЗначений = РазложитьСтрокуВМассивПодстрок(СтрокаКакОпределятьУровень, ";");
	Для Каждого ТекЗначение Из МассивЗначений Цикл
		ТекЗначение = НРег(ТекЗначение);
		Если ТекЗначение = "каталог1" Или ТекЗначение = "catalog1" Тогда
			Возврат СобранныеДанные.Каталог1; 
		ИначеЕсли ТекЗначение = "каталог2" Или ТекЗначение = "catalog2" Тогда
			Возврат СобранныеДанные.Каталог2; 
		ИначеЕсли ТекЗначение = "каталог3" Или ТекЗначение = "catalog3" Тогда
			Возврат СобранныеДанные.Каталог3; 
		ИначеЕсли ТекЗначение = "имяфичи" Или ТекЗначение = "featurename" Тогда
			СтрокаФичи = ВеткаФичи(СтрСтроки);
			Если СтрокаФичи.Тип = "Фича" Тогда
				Возврат СтрокаФичи.Имя; 
			КонецЕсли;	 
			
			Возврат Неопределено;
		ИначеЕсли ТекЗначение = "имяфичафайла" Или ТекЗначение = "featurefilename" Тогда
			СтрокаФичи = ВеткаФичи(СтрСтроки);
			Если СтрокаФичи.Тип = "Фича" Тогда
				Если НЕ ПустаяСтрока(СтрокаФичи.ПолныйПуть) Тогда
					Файл = Новый Файл(СтрокаФичи.ПолныйПуть);
					Возврат Файл.ИмяБезРасширения; 
				КонецЕсли;	 
			КонецЕсли;	 
			
			Возврат Неопределено;
		ИначеЕсли ТекЗначение = "имясценария" Или ТекЗначение = "scenarioname" Тогда
			Если Уровень = 3 Тогда
				СтрСтроки.ПроизвольныеЗначения.Вставить("ИмяСценария_для_story", Истина);
			КонецЕсли;	 
			
			Возврат Неопределено; 
			
		ИначеЕсли Лев(ТекЗначение, 1) = "#" Тогда
			СтрокаФичи = ВеткаФичи(СтрСтроки);
			Результат = "";
			Если ТипЗнч(СтрокаФичи.ПроизвольныеЗначения) = Тип("Структура")  Тогда
				Если СтрокаФичи.ПроизвольныеЗначения.Свойство("МассивКомментариев") Тогда
					Для Каждого КомментарийСтруктура Из СтрокаФичи.ПроизвольныеЗначения.МассивКомментариев Цикл
						ЗначениеУровняОтчетаИзКомментария(КомментарийСтруктура.Комментарий, ТекЗначение, Результат);
					КонецЦикла;	 
				КонецЕсли;	 
				Если СтрокаСценария.ПроизвольныеЗначения.Свойство("МассивКомментариев") Тогда
					Для Каждого КомментарийСтруктура Из СтрокаСценария.ПроизвольныеЗначения.МассивКомментариев Цикл
						ЗначениеУровняОтчетаИзКомментария(КомментарийСтруктура.Комментарий, ТекЗначение, Результат);
					КонецЦикла;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если ЗначениеЗаполнено(Результат) Тогда
				Возврат Результат; 
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	
КонецФункции	                                     

Процедура ОбойтиДеревоДляОтчетаАллюр(Дерево, Фабрика, ТекущаяФича = Неопределено, СписокСценариев = Неопределено, СписокШагов = Неопределено)
	Для каждого СтрСтроки Из Дерево.Строки Цикл
		Если СтрСтроки.Тип = "Фича" Тогда
			
			GUID             = Новый УникальныйИдентификатор();
			РеальноеИмяФайла = "" + GUID + "-testsuite.xml";
			ИмяФайлаXML      = ДополнитьСлешВПуть(КаталогВыгрузкиAllure) + РеальноеИмяФайла;
			
			Если ОтчетВРежимеУФ Тогда
				СтруктураФайлаXML = Новый Структура;
				СтруктураФайлаXML.Вставить("РеальноеИмяФайла", РеальноеИмяФайла);
				
				ИмяФайлаXML = ПолучитьИмяВременногоФайла("xml");
			КонецЕсли;	 
			
			ЗТ = Новый ЗаписьТекста(ИмяФайлаXML, КодировкаТекста.ANSI);
			ЗТ.Закрыть();
			
			ВременныйФайлXML = ПолучитьИмяВременногоФайла("xml");
			ЗаписьXML = Новый ЗаписьXML;
			
			ЗаписьXML.ОткрытьФайл(ВременныйФайлXML);			
			ЗаписьXML.ЗаписатьОбъявлениеXML();
			
			ТипTestSuiteResult = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "test-suite-result");
			ТекущаяФича        = Фабрика.Создать(ТипTestSuiteResult);
			ТекущаяФича.name   = СтрСтроки.Имя;
			
			ТипTestCasesResult = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "test-cases-result");
			СписокСценариев    = Фабрика.Создать(ТипTestCasesResult);
			
			Типlabels   = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "labels");
			СписокМеток = Фабрика.Создать(Типlabels);
			
			Если СтрСтроки.ПроизвольныеЗначения = Неопределено Тогда
				СтрСтроки.ПроизвольныеЗначения = Новый Структура;
			КонецЕсли;	 
			
			Если ЗначениеЗаполнено(УровеньОтчета1) ИЛИ ЗначениеЗаполнено(УровеньОтчета2) ИЛИ ЗначениеЗаполнено(УровеньОтчета3) Тогда
				epic    = "";
				feature = "";
				story   = "";
				ДанныеПоИерархииОтчетаИзОтносительногоПути(epic, feature, story, СтрСтроки, КаталогОтносительноКоторогоНадоСтроитьИерархию);
				
				ДобавитьМетку(Фабрика, СписокМеток, "epic", epic);
				ДобавитьМетку(Фабрика, СписокМеток, "feature", feature);
				
				СтрСтроки.ПроизвольныеЗначения.Вставить("story", story);
			Иначе	
				epic = "";
				Если ТипЗнч(СтрСтроки.ПроизвольныеЗначения) = Тип("Структура")  Тогда
					Для Каждого КомментарийСтруктура Из СтрСтроки.ПроизвольныеЗначения.МассивКомментариев Цикл
						Комментарий = СокрЛП(КомментарийСтруктура.Комментарий);
						НрегКомментарий = НРег(Комментарий);
						Если Лев(НрегКомментарий, 12) = "report.epic=" Тогда
							ПромСтр = Сред(Комментарий, 13);
							Если ЗначениеЗаполнено(ПромСтр) Тогда
								epic = ПромСтр;
								Прервать;
							КонецЕсли;	 
						КонецЕсли;	 
					КонецЦикла;	 
				КонецЕсли;	 
				Если ЗначениеЗаполнено(epic) Тогда
					ДобавитьМетку(Фабрика, СписокМеток, "epic", epic);
				КонецЕсли;	 

				feature = СтрСтроки.Имя;
				Если ТипЗнч(СтрСтроки.ПроизвольныеЗначения) = Тип("Структура")  Тогда
					Для Каждого КомментарийСтруктура Из СтрСтроки.ПроизвольныеЗначения.МассивКомментариев Цикл
						Комментарий = СокрЛП(КомментарийСтруктура.Комментарий);
						НрегКомментарий = НРег(Комментарий);
						Если Лев(НрегКомментарий, 15) = "report.feature=" Тогда
							ПромСтр = Сред(Комментарий, 16);
							Если ЗначениеЗаполнено(ПромСтр) Тогда
								feature = ПромСтр;
								Прервать;
							КонецЕсли;	 
						КонецЕсли;	 
					КонецЦикла;	 
				КонецЕсли;	 
				ДобавитьМетку(Фабрика, СписокМеток, "feature", feature);
			КонецЕсли;	 
						
			ОбойтиДеревоДляОтчетаАллюр(СтрСтроки, Фабрика, ТекущаяФича, СписокСценариев, СписокШагов);
			
			ТекущаяФича.test_cases = СписокСценариев;
			
			ДобавитьМетку(Фабрика, СписокМеток, "framework", "vanessa-automation");
			ДобавитьМетку(Фабрика, СписокМеток, "language", "1С");
					
			ТекущаяФича.labels = СписокМеток;
			
			Фабрика.ЗаписатьXML(ЗаписьXML, ТекущаяФича);
			ЗаписьXML.Закрыть();
						
			// делаем запись без BOM и немного преобразуем строки xml
			ЗТ = Новый ЗаписьТекста(ИмяФайлаXML,,, Истина);
			Текст = Новый ЧтениеТекста;
			Текст.Открыть(ВременныйФайлXML, "UTF-8");
			
			Стр = Текст.ПрочитатьСтроку();
			Пока Стр <> Неопределено Цикл
				ДобавитьПрефиксAllureВСтроку(Стр);
				ЗТ.ЗаписатьСтроку(Стр);
				Стр = Текст.ПрочитатьСтроку();
			КонецЦикла;	
			ЗТ.Закрыть();
			Текст.Закрыть();
			УдалитьФайлы(ВременныйФайлXML);

			Если ОтчетВРежимеУФ Тогда
				ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаXML);
				СтруктураФайлаXML.Вставить("ФайлXMLДвоичныеДанные", ДвоичныеДанные);
				ПараметрыОтчетаУФ.МассивXMLОтчетаAllure.Добавить(СтруктураФайлаXML);
				
				УдалитьФайлы(ИмяФайлаXML);
			Иначе	
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Файл отчета Allure-report (%1) записан.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяФайлаXML);
				СделатьСообщение(ТекстСообщения);
			КонецЕсли;	 
						
		ИначеЕсли (СтрСтроки.Тип = "Сценарий") ИЛИ (СтрСтроки.Тип = "Пример") Тогда
			Если (СтрСтроки.ДопТип = "Контекст") Тогда
				// его не неадо добавлять в отчет, т.к. этот сценарий включается в каждый сценарий
				
			ИначеЕсли (СтрСтроки.ДопТип = "СтруктураСценария") ИЛИ (СтрСтроки.Строки.Количество() = 0) Тогда
				// его не неадо добавлять в отчет, т.к. этот сценарий явно не выполняется
				ОбойтиДеревоДляОтчетаАллюр(СтрСтроки, Фабрика, ТекущаяФича, СписокСценариев, СписокШагов);
			Иначе
				
				РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(СтрСтроки);
				
				Если РезультатПрохожденияТестовСценария = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				
				ТипTestCaseResult = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "test-case-result");
				Сценарий = Фабрика.Создать(ТипTestCaseResult);
				
				ПрефиксИмениСценария = ПолучитьПрефиксИмениСценария(ДобавлятьКИмениСценарияУсловияВыгрузки);
				Сценарий.name = ПрефиксИмениСценария + СтрСтроки.Имя;
				Если СтрСтроки.Тип = "Пример" Тогда
					Сценарий.name = ПрефиксИмениСценария + СтрСтроки.Родитель.Родитель.Имя + " №" + (СтрСтроки.Родитель.Строки.Индекс(СтрСтроки));
				КонецЕсли; 
				
				Сценарий.start = РезультатПрохожденияТестовСценария.ВремяНачала - РазницаВМилисекундахМеждуЮниксИНачалЭпохи;
				Сценарий.stop  = РезультатПрохожденияТестовСценария.ВремяОкончания  - РазницаВМилисекундахМеждуЮниксИНачалЭпохи;
							
				ТипSteps    = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "steps");
				СписокШагов = Фабрика.Создать(ТипSteps);

				Если СтрСтроки.ДопТип = "СтруктураСценария" Тогда
					ОбойтиДеревоДляОтчетаАллюр(СтрСтроки, Фабрика, ТекущаяФича, СписокСценариев, СписокШагов);
				Иначе
					Для каждого СтрРезультатПрохожденияТестовШагов Из РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов Цикл
						ТипStep   = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "step");
						Шаг       = Фабрика.Создать(ТипStep);
						Шаг.name  = СтрРезультатПрохожденияТестовШагов.Имя;
						Шаг.title = СтрРезультатПрохожденияТестовШагов.Имя;
						
						Если СтрРезультатПрохожденияТестовШагов.ВремяНачала <> Неопределено Тогда
							Шаг.start = СтрРезультатПрохожденияТестовШагов.ВремяНачала - РазницаВМилисекундахМеждуЮниксИНачалЭпохи;
							Шаг.stop  = СтрРезультатПрохожденияТестовШагов.ВремяОкончания - РазницаВМилисекундахМеждуЮниксИНачалЭпохи;
						КонецЕсли; 
						
						ЗаписатьСтатусВШагИлиСценарий(Шаг, СтрРезультатПрохожденияТестовШагов.Статус);
						
						СписокШагов.step.Добавить(Шаг);
					КонецЦикла;
				КонецЕсли;	 
				
				ЗаписатьСтатусВШагИлиСценарий(Сценарий, СтрСтроки.Статус);
				Если (СтрСтроки.Статус = "Failed") ИЛИ (СтрСтроки.Статус = "Pending") Тогда
					ТипFailure            = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "failure");
					ОбъектFailure         = Фабрика.Создать(ТипFailure);
					ОбъектFailure.message = РезультатПрохожденияТестовСценария.ОписаниеОшибки;
					
					Сценарий.failure = ОбъектFailure;
				КонецЕсли; 
				Сценарий.steps = СписокШагов;
								
				Если РезультатПрохожденияТестовСценария.Свойство("МассивСкриншотов") Тогда
					// значит есть скриншоты
					
					Типattachments    = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "attachments");
					Списокattachments = Фабрика.Создать(Типattachments);
					
					Для каждого СтруктураСкриншот Из РезультатПрохожденияТестовСценария.МассивСкриншотов Цикл
						Типattachment  = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "attachment");
						attachment      = Фабрика.Создать(Типattachment);
						
						attachment.title  = "screenshot";
						attachment.source = СтруктураСкриншот.ИмяФайла;
						
						Списокattachments.attachment.Добавить(attachment);
					КонецЦикла;
					Сценарий.attachments = Списокattachments;
				КонецЕсли;	 
								
				Типlabels   = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "labels");
				СписокМеток = Фабрика.Создать(Типlabels);
				story = "";
				Если ЗначениеЗаполнено(УровеньОтчета3) И ТипЗнч(СтрСтроки.Родитель.ПроизвольныеЗначения) = Тип("Структура") Тогда
					Если СтрСтроки.Родитель.ПроизвольныеЗначения.Свойство("story")
							И ЗначениеЗаполнено(СтрСтроки.Родитель.ПроизвольныеЗначения.story) Тогда
						story = СтрСтроки.Родитель.ПроизвольныеЗначения.story;
					ИначеЕсли СтрСтроки.Родитель.ПроизвольныеЗначения.Свойство("ИмяСценария_для_story")
							И СтрСтроки.Родитель.ПроизвольныеЗначения.ИмяСценария_для_story = Истина Тогда
						story = СтрСтроки.Имя;
					КонецЕсли;	 
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(story) И ТипЗнч(СтрСтроки.Родитель.ПроизвольныеЗначения) = Тип("Структура") Тогда
					Если СтрСтроки.Родитель.ПроизвольныеЗначения.Свойство("story") Тогда
						story = СтрСтроки.Родитель.ПроизвольныеЗначения.story;
					Иначе	
						Для Каждого КомментарийСтруктура Из СтрСтроки.Родитель.ПроизвольныеЗначения.МассивКомментариев Цикл
							Комментарий = СокрЛП(КомментарийСтруктура.Комментарий);
							НрегКомментарий = НРег(Комментарий);
							Если Лев(НрегКомментарий, 13) = "report.story=" Тогда
								ПромСтр = Сред(Комментарий, 14);
								Если ЗначениеЗаполнено(ПромСтр) Тогда
									story = ПромСтр;
									Прервать;
								КонецЕсли;	 
							КонецЕсли;	 
						КонецЦикла;	 
					КонецЕсли;
				КонецЕсли;	 
				
				Если НЕ ЗначениеЗаполнено(story) Тогда
					story = СтрСтроки.Имя;
				КонецЕсли;	 
				
				ДобавитьМетку(Фабрика, СписокМеток, "story", story);
				Сценарий.labels = СписокМеток;
				
				СписокСценариев.test_case.Добавить(Сценарий);
			КонецЕсли; 
		ИначеЕсли СтрСтроки.Тип = "Шаг" Тогда
			Если СтрСтроки.Родитель.ДопТип = "СтруктураСценария" Тогда
				// его не неадо добавлять в отчет, т.к. этот сценарий явно не выполняется
				ОбойтиДеревоДляОтчетаАллюр(СтрСтроки, Фабрика, ТекущаяФича, СписокСценариев, СписокШагов);
			КонецЕсли; 
		Иначе	
			ОбойтиДеревоДляОтчетаАллюр(СтрСтроки, Фабрика, ТекущаяФича, СписокСценариев, СписокШагов);
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьОтчетАллюр(СтруктураОФ = Неопределено) Экспорт
	Перем СтарыйКаталог, ИмяФайла;
	СтарыйКаталог = КаталогВыгрузкиAllure;
	
	Если СтруктураОФ <> Неопределено Тогда
		// для УФ формируется отчет в новом формате
		СформироватьОтчетАллюр2(СтруктураОФ, ДеревоТестов, ИмяТекущейСборки);
		Возврат;		
	КонецЕсли;	 
			
	ОтчетВРежимеУФ = Ложь;
	
	Если СтруктураОФ = Неопределено Тогда
		ИмяФайла = КаталогИнструментов + "/vendor/allure-framework/allure.xsd"; 
	КонецЕсли;	 
	
	Файл = Новый Файл(КаталогВыгрузкиAllure);
	Если Не Файл.Существует() Тогда
		СделатьСообщение("Не могу сформировать отчет Allure. Не существует каталог для вывода отчета.");
		Возврат;
	КонецЕсли; 

	Фабрика      = СоздатьФабрикуXDTO(ИмяФайла);

	КаталогВыгрузкиAllure = ДополнитьСлешВПуть(КаталогВыгрузкиAllure);

	ОбойтиДеревоДляОтчетаАллюр(ДеревоТестов, Фабрика);
	
	КаталогВыгрузкиAllure = СтарыйКаталог;

КонецПроцедуры

Функция ПолучитьРезультатПрохожденияТестовСценария(СтрСтроки)
	
	РезультатПрохожденияТестовСценария = Неопределено;
	
	Если ОтчетВРежимеУФ Тогда
		ИДВМассиве = ПараметрыОтчетаУФ.МассивИДСтрокиДерева[СтрСтроки.ИДСтроки];
		Если ИДВМассиве <> Неопределено Тогда
			РезультатПрохожденияТестовСценария = ПараметрыОтчетаУФ.МассивРезультатПрохожденияТестовСценария[ИДВМассиве];
		КонецЕсли;
	Иначе
		РезультатПрохожденияТестовСценария = СтрСтроки.РезультатПрохожденияТестовСценария;
	КонецЕсли;
	
	Возврат РезультатПрохожденияТестовСценария;

КонецФункции

#КонецОбласти

#Область Allure2

Процедура ЗаписатьСтатусВШагИлиСценарий2(ОбъектДляЗаписи, Статус, МассивТегов = Неопределено)
	Если МассивТегов = Неопределено Тогда
		МассивТегов = Новый Массив;
	КонецЕсли;
	
	Если Статус = "Success" Тогда
		ОбъектДляЗаписи.status = "passed";
	ИначеЕсли Статус = "Pending" Тогда
		Для Каждого Элемент Из МассивТегов Цикл
			Если Элемент.тег = "skipped" Тогда
				ОбъектДляЗаписи.status = "skipped";
				Возврат;
			КонецЕсли;
		КонецЦикла;
		ОбъектДляЗаписи.status = "pending";
	ИначеЕсли Статус = "Failed" Тогда
		ОбъектДляЗаписи.status = "failed";
	ИначеЕсли Статус = "Skipped" Тогда
		ОбъектДляЗаписи.status = "skipped";
	ИначеЕсли Статус = "Broken" Тогда
		ОбъектДляЗаписи.status = "broken";
	Иначе	
		ОбъектДляЗаписи.status = "skipped";
	КонецЕсли; 
КонецПроцедуры

Процедура ДобавитьМетку2(СписокМеток, name, value, СписокПереопределяемый = Неопределено)
	Если СписокПереопределяемый <> Неопределено И ТипЗнч(СписокПереопределяемый) = Тип("СписокЗначений") Тогда
		Если СписокПереопределяемый.НайтиПоЗначению(name) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Метка       = Новый Структура("name, value");
	Метка.name  = name;
	Метка.value = value; 
	
	Поз = Найти(value, ":");
	Если Поз > 0 Тогда
		Метка.name  = Лев(value, Поз - 1);
		Метка.value = Сред(value, Поз + 1); 
	КонецЕсли;	
	
	// Сделано специально, т.к. некоторые метки берут в отчет Первые, 
	// поэтому из сценария мы ставим их в начало, перед фичей.
	СписокМеток.Вставить(0, Метка);
	
КонецПроцедуры

Функция УбратьСимволыДляКорректногоОтчетаAllure2(Знач Стр)
	Стр = СтрЗаменить(Стр, ".", "_");
	Возврат Стр;
КонецФункции	

Функция ПолучитьПрефиксИмениСценария2(ДобавлятьКИмениСценарияУсловияВыгрузки = Ложь)
	
	Если ДобавлятьКИмениСценарияУсловияВыгрузки Тогда 
		Если ЗначениеЗаполнено(ИмяТекущейСборки) Тогда
			Возврат "(" + УбратьСимволыДляКорректногоОтчетаAllure2(ИмяТекущейСборки) + ") ";
		КонецЕсли;	 
	КонецЕсли;
	
	Возврат "";
	
КонецФункции	

Функция ПолучитьОписаниеСценарияАллюр2()
	Перем СтруктураРезультата;
	
	GUID             = Новый УникальныйИдентификатор();
	СтруктураРезультата = Новый Структура(); 
	СтруктураРезультата.Вставить("uuid", Строка(GUID));
	СтруктураРезультата.Вставить("historyId", Неопределено);
	СтруктураРезультата.Вставить("name", Неопределено);
	СтруктураРезультата.Вставить("fullName", Неопределено);
	СтруктураРезультата.Вставить("testCaseId", Неопределено);
	СтруктураРезультата.Вставить("start", Неопределено);
	СтруктураРезультата.Вставить("stop", Неопределено);
	СтруктураРезультата.Вставить("statusDetails",  Новый Структура("known, muted,flaky", Ложь, Ложь, Ложь));
	СтруктураРезультата.Вставить("status", Неопределено);
	СтруктураРезультата.Вставить("stage", "finished"); // Внятного описания, зачем это в каждом сценарии нет. 
	СтруктураРезультата.Вставить("steps", Новый Массив());
	СтруктураРезультата.Вставить("parameters", Новый Массив());
	СтруктураРезультата.Вставить("labels", Новый Массив());
	СтруктураРезультата.Вставить("links", Новый Массив());
	СтруктураРезультата.Вставить("attachments", Новый Массив());
	СтруктураРезультата.Вставить("description", Неопределено);
	
	Возврат СтруктураРезультата;
	
КонецФункции

Функция ПолучитьОписаниеКонтекстныхШаговАллюр2()
	Перем СтруктураРезультата;
	
	СтруктураРезультата = Новый Структура("uuid, name, description, children, befores, start, stop");
	СтруктураРезультата.Вставить("befores", Новый Массив());
	СтруктураРезультата.Вставить("children", Новый Массив());

	Возврат СтруктураРезультата;
	
КонецФункции

Функция ПолучитьОписаниеШагаАллюр2()
	Перем СтруктураРезультата;
	
	СтруктураРезультата = Новый Структура("name, start, stop, status, stage");
	СтруктураРезультата.Вставить("statusDetails",  Новый Структура("known, muted,flaky", Ложь, Ложь, Ложь));
	СтруктураРезультата.Вставить("parameters", Новый Массив());
	СтруктураРезультата.Вставить("attachments", Новый Массив());
	СтруктураРезультата.Вставить("steps", Новый Массив());
		
	Возврат СтруктураРезультата;

КонецФункции

Процедура ЗаписатьОписаниеАллюр2(Строка, СтруктураВыгрузки)

	ДополнительноеОписание = Новый Структура;
	Если ТипЗнч(ДополнительноеОписание) = Тип("Структура") И ДополнительноеОписание.Свойство("description") Тогда
		СтруктураВыгрузки.Вставить("description", ДополнительноеОписание["description"]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьФайлКЭлементуАллюр2(СтруктураВыгрузки, Имя, ИмяФайла, Тип = "image/png")
	
	attachment = Новый Структура("name, source, type");
	attachment.name    = Имя;
	attachment.source  = ИмяФайла;
	attachment.type	= Тип;
	
	СтруктураВыгрузки.attachments.Добавить(attachment);

КонецПроцедуры

Функция ИмяФайлаСкриншотаБезКаталога()
	УИД = Новый УникальныйИдентификатор;
	Возврат "" + УИД + "-attachment.png";
КонецФункции

Процедура ДобавитьСкриншотыКСценариюИлиШагуАллюр2(СтруктураВыгрузки, РезультатПрохождения)
	
	Если РезультатПрохождения.Свойство("МассивСкриншотов") Тогда
		// значит есть скриншоты
		
		Для каждого СтруктураСкриншот Из РезультатПрохождения.МассивСкриншотов Цикл
			ИмяФайлаСкриншотаВОтчете = "screenshot";
			Если СтруктураСкриншот.Свойство("ЗаголовокВнутреннегоОкна") Тогда
				ИмяФайлаСкриншотаВОтчете = СтруктураСкриншот.ЗаголовокВнутреннегоОкна;
			ИначеЕсли СтруктураСкриншот.Свойство("ИмяСкриншотаДляОтчета") Тогда
				ИмяФайлаСкриншотаВОтчете = СтруктураСкриншот.ИмяСкриншотаДляОтчета;
			КонецЕсли;
			Если СтруктураСкриншот.Свойство("ИмяКлиентаТестирования") Тогда
				ИмяФайлаСкриншотаВОтчете = СтруктураСкриншот.ИмяКлиентаТестирования + "." + ИмяФайлаСкриншотаВОтчете;
			КонецЕсли;	 
			
			Если СтруктураСкриншот.Свойство("ИмяФайлаИспользовалось") И СтруктураСкриншот.ИмяФайлаИспользовалось Тогда
				СтруктураСкриншот.ИмяФайла = ИмяФайлаСкриншотаБезКаталога();
			КонецЕсли;	 
			
			ДобавитьФайлКЭлементуАллюр2(СтруктураВыгрузки, ИмяФайлаСкриншотаВОтчете, СтруктураСкриншот.ИмяФайла, "image/png");
			СтруктураСкриншот.Вставить("ИмяФайлаИспользовалось", Истина);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьФайлыКСценариюИлиШагуАллюр2(СтруктураВыгрузки, СписокФайлов, МассивXMLОтчетаAllure, ДопПараметрыАллюр2)
	
	Для каждого СтруктураФайл Из СписокФайлов Цикл
		РеальноеИмяФайла = СтруктураФайл.ИмяФайла;
		Если СтруктураФайл.Свойство("ДвоичныеДанные") Тогда
			ФайлОбъект = Новый Файл(Строка(СтруктураФайл.ИмяФайла) );
			
			РеальноеИмяФайла = Строка(Новый УникальныйИдентификатор()) + "-attachment" + ФайлОбъект.Расширение;
			
			СтруктураФайлаXML = Новый Структура;
			СтруктураФайлаXML.Вставить("РеальноеИмяФайла", РеальноеИмяФайла); 
			СтруктураФайлаXML.Вставить("ФайлXMLДвоичныеДанные", СтруктураФайл.ДвоичныеДанные);
			МассивXMLОтчетаAllure.Добавить(СтруктураФайлаXML);
		КонецЕсли;
		
		ТипФайла = Неопределено;
		СтруктураФайл.Свойство("ТипФайла", ТипФайла);
		Если ТипФайла = Неопределено Тогда
			ТипФайла = "text/plain";
		КонецЕсли;
		ДобавитьФайлКЭлементуАллюр2(СтруктураВыгрузки, СтруктураФайл.ИмяФайла, РеальноеИмяФайла, ТипФайла);
	КонецЦикла;
	
КонецПроцедуры

Функция ПодставитьЗначенияПеременныхВШаг(Знач Стр, ДанныеШага)
	Для Каждого Элем Из ДанныеШага.ПеременныеДляСохраненияВШаг Цикл
		Если Элем.Тип Тогда
			//Это глобальная переменная
			СпецСимволы = "$$";
		Иначе	
			//Это локальная переменная
			СпецСимволы = "$";
		КонецЕсли;	 
		
		Стр = СтрЗаменить(Стр, СпецСимволы + Элем.Имя + СпецСимволы, Элем.Значение);
	КонецЦикла;	 
	
	Возврат Стр; 
КонецФункции	 

Функция ВставитьГруппыШагов(СтрокаВыполнения, ДопПараметрыАллюр2, РезультатыПрохождения, МассивШагов)
	
	ДанныеГруппыШагов = ДопПараметрыАллюр2.ГруппыШагов[СтрокаВыполнения.ИдСтроки];
	Если ДанныеГруппыШагов <> Неопределено Тогда
		Возврат ДанныеГруппыШагов; 
	КонецЕсли;	 
	
	Если СтрокаВыполнения.Тип = "Сценарий" ИЛИ СтрокаВыполнения.Тип = "Пример" Тогда
		Возврат МассивШагов;
	КонецЕсли;	 
	
	МассивШагов = ВставитьГруппыШагов(СтрокаВыполнения.Родитель, ДопПараметрыАллюр2, РезультатыПрохождения, МассивШагов);
	
	Если (СтрокаВыполнения.Тип = "Область" И ПустаяСтрока(СтрокаВыполнения.ДопТип))
		ИЛИ СтрокаВыполнения.Тип = "ШагСценарий"
		ИЛИ СтрокаВыполнения.ДопТип = "Попытка"
		ИЛИ СтрокаВыполнения.ДопТип = "Исключение"
		ИЛИ СтрокаВыполнения.ДопТип = "УсловиеИначе"
		Тогда
		ШагВложенный = ПолучитьОписаниеШагаАллюр2();
		ШагВложенный.name  = Строка(СтрокаВыполнения.Имя);
		ШагВложенный.stage = "finished";
		ЗаписатьСтатусВШагИлиСценарий2(ШагВложенный, РезультатыПрохождения.Статус);
		МассивШагов.Добавить(ШагВложенный);
		МассивШагов = ШагВложенный.steps;
		ДопПараметрыАллюр2.ГруппыШагов.Вставить(СтрокаВыполнения.ИдСтроки, ШагВложенный.steps);
	КонецЕсли;	 
	
	Возврат МассивШагов; 
КонецФункции	 

Процедура ЗаписатьВыполнениеШагаАллюр2(МассивШагов, ДеревоТестов, РезультатыПрохождения, СоответствиеГрупп, МассивXMLОтчетаAllure, СтруктураВыгрузкиСценария, ДопПараметрыАллюр2)
	Перем ШагВложенный;	
	
	МассивШаговДобавления = МассивШагов;
	СтрокаВыполнения = ДопПараметрыАллюр2.СтрокаДереваПоИдСтроки[РезультатыПрохождения.ИДСтроки];
	Если СтрокаВыполнения <> Неопределено Тогда
		МассивШаговДобавления = ВставитьГруппыШагов(СтрокаВыполнения.Родитель, ДопПараметрыАллюр2, РезультатыПрохождения, МассивШаговДобавления);
	КонецЕсли;
	
	Шаг = ПолучитьОписаниеШагаАллюр2();
	Шаг.name  = Строка(РезультатыПрохождения.Имя);
	ПодставитьЗначенияПеременныхВШаг = Ложь;
	Если РезультатыПрохождения.Свойство("ПеременныеДляСохраненияВШаг") Тогда
		ПодставитьЗначенияПеременныхВШаг = Истина;
		Шаг.name = ПодставитьЗначенияПеременныхВШаг(Строка(РезультатыПрохождения.Имя), РезультатыПрохождения);
	КонецЕсли;	 
	Если РезультатыПрохождения.ВремяНачала <> Неопределено Тогда
		Шаг.start = (РезультатыПрохождения.ВремяНачала - РазницаВМилисекундахМеждуЮниксИНачалЭпохи);
		Шаг.stop  = (РезультатыПрохождения.ВремяОкончания - РазницаВМилисекундахМеждуЮниксИНачалЭпохи);
	КонецЕсли;
	Шаг.stage = "finished";
	
	Если СтрокаВыполнения <> Неопределено Тогда	
		Счетчик = 1;
		Для каждого Элемент Из СтрокаВыполнения.ЗначенияПараметров Цикл
			ИмяПараметра = "Парам" + Счетчик;
			Счетчик = Счетчик + 1;
			Если ПодставитьЗначенияПеременныхВШаг Тогда
				Шаг["parameters"].Добавить(Новый Структура("name, value", ИмяПараметра,
					ПодставитьЗначенияПеременныхВШаг(Элемент.Значение.Значение, РезультатыПрохождения)));
			Иначе	
				Шаг["parameters"].Добавить(Новый Структура("name, value",
					ИмяПараметра, Элемент.Значение.Значение));
			КонецЕсли;	 
			
		КонецЦикла;
		
		МассивПараметров = Новый Массив();		
		Если СтрокаВыполнения.ШагСПараметрамиВТаблице = Истина Тогда
			СтрокаCSV = "";
			ПарамТаблица = Новый Массив;
			ПодчиненныеСтроки = СтрокаВыполнения.Строки;
			Для каждого СтрокиТаблицы Из ПодчиненныеСтроки Цикл
				Если ЗначениеЗаполнено(СтрокиТаблицы.Тип) Тогда
					// значит это уже не строка таблицы
					Прервать;
				КонецЕсли;	 
				
				СтруктураПарамТаблица = Новый Структура;
				
				Если (СтрокиТаблицы.СтрокаПараметровШагаВВидеТаблицы <> Истина) ИЛИ (НЕ ЗначениеЗаполнено(СтрокиТаблицы.Имя)) Тогда
					ПарамТаблица = Новый Массив;
					МассивПараметров.Добавить(ПарамТаблица);
					Продолжить;
				КонецЕсли;	 
				
				НомерКолонки = 0;
				Для каждого Колонка Из СтрокиТаблицы.ПараметрыТаблицы Цикл
					НомерКолонки       = НомерКолонки + 1;
					СтруктураПараметра = Колонка.Значение;
					Значение           = Строка(СтруктураПараметра.Значение);
					Если ПодставитьЗначенияПеременныхВШаг Тогда
						Значение = ПодставитьЗначенияПеременныхВШаг(Значение, РезультатыПрохождения);
					КонецЕсли;	 
					СтрокаCSV = СтрокаCSV + ?(НомерКолонки = 1, "", ",") + """" + СтрЗаменить(Значение, """", """""") + """";
					СтруктураПарамТаблица.Вставить("Кол" + НомерКолонки, Значение);
				КонецЦикла;
				
				ПарамТаблица.Добавить(СтруктураПарамТаблица);
				СтрокаCSV = СтрокаCSV + Символы.ПС;
			КонецЦикла;
			
			Если ПарамТаблица.Количество() > 0 Тогда
				МассивПараметров.Добавить(ПарамТаблица);
			КонецЕсли;
			
			Если МассивПараметров.Количество() > 0 Тогда
				РеальноеИмяФайла = Строка(Новый УникальныйИдентификатор) + "-attachment.csv";
				
				ВременноеИмяФайла = ПолучитьИмяВременногоФайла("csv");
				Запись = Новый ЗаписьТекста;
				Запись.Открыть(ВременноеИмяФайла);
				Запись.Записать(СтрокаCSV);
				Запись.Закрыть();
				
				ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ВременноеИмяФайла);
				СтруктураФайлаXML = Новый Структура;
				СтруктураФайлаXML.Вставить("РеальноеИмяФайла", Строка(РеальноеИмяФайла)); 
				СтруктураФайлаXML.Вставить("ФайлXMLДвоичныеДанные", ДвоичныеДанныеФайла);
				МассивXMLОтчетаAllure.Добавить(СтруктураФайлаXML);
				УдалитьФайлы(ВременноеИмяФайла);
				ДобавитьФайлКЭлементуАллюр2(Шаг, "table", РеальноеИмяФайла, "text/csv");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаВыполнения.ПроизвольныеЗначения = Неопределено Тогда
		СтрокаВыполнения.ПроизвольныеЗначения = Новый Структура;
	КонецЕсли;	 
	
	Если СтрокаВыполнения.Родитель.ПроизвольныеЗначения = Неопределено Тогда
		СтрокаВыполнения.Родитель.ПроизвольныеЗначения = Новый Структура;
	КонецЕсли;	 
	
	МассивТегов = Неопределено;
	СтрокаВыполнения.ПроизвольныеЗначения.Свойство("МассивТегов", МассивТегов);
	Если СтрокаВыполнения.Родитель.ПроизвольныеЗначения.Свойство("МассивТегов") Тогда
		СтрокаВыполнения.Родитель.ПроизвольныеЗначения.Свойство("МассивТегов", МассивТегов);
	КонецЕсли;

	ЗаписатьСтатусВШагИлиСценарий2(Шаг, РезультатыПрохождения.Статус, МассивТегов);
	Если ((РезультатыПрохождения.Статус = "Failed") ИЛИ (РезультатыПрохождения.Статус = "Pending")) 
		И РезультатыПрохождения.Свойство("ОписаниеОшибки") Тогда
		ОписаниеОшибки = "";
		ПодробноеОписаниеОшибки = "";
		ПодробноеОписаниеОшибкиAllure2(РезультатыПрохождения.ОписаниеОшибки, ОписаниеОшибки, ПодробноеОписаниеОшибки);
		Шаг.Вставить("statusDetails", 
			Новый Структура("known, muted, flaky, message, trace", 
							Ложь, Ложь, Ложь, ОписаниеОшибки, ПодробноеОписаниеОшибки));
	КонецЕсли; 
	
	МассивШаговДобавления.Добавить(Шаг);
	
	Если СтрокаВыполнения.Тип = "Область" И НЕ ПустаяСтрока(СтрокаВыполнения.ДопТип) Тогда
		МассивШаговДобавления = Шаг.steps;
		ДопПараметрыАллюр2.ГруппыШагов.Вставить(СтрокаВыполнения.ИдСтроки, Шаг.steps);
	КонецЕсли;	 
	
	Если ШагВложенный <> Неопределено Тогда
		Если ШагВложенный.start = Неопределено ИЛИ ШагВложенный.start > Шаг.start Тогда
			ШагВложенный.start = Шаг.start;
		КонецЕсли;
		
		Если ШагВложенный.stop = Неопределено ИЛИ ШагВложенный.stop <  Шаг.stop Тогда
			ШагВложенный.stop = Шаг.stop;
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатыПрохождения.Свойство("СписокФайлов") Тогда
		ДобавитьФайлыКСценариюИлиШагуАллюр2(Шаг, РезультатыПрохождения.СписокФайлов, МассивXMLОтчетаAllure, ДопПараметрыАллюр2);
		
		СписокФайловДляСценария = Новый Массив;
		Для Каждого СтруктураФайл Из РезультатыПрохождения.СписокФайлов Цикл
			Если СтруктураФайл.Свойство("ДобавлятьФайлКСценарию") И НЕ СтруктураФайл.ДобавлятьФайлКСценарию Тогда
				Продолжить;
			КонецЕсли;	 
			
			СписокФайловДляСценария.Добавить(СтруктураФайл);
		КонецЦикла;	 
		
		ДобавитьФайлыКСценариюИлиШагуАллюр2(СтруктураВыгрузкиСценария, СписокФайловДляСценария, МассивXMLОтчетаAllure, ДопПараметрыАллюр2);
	КонецЕсли;	 
	
	ДобавитьСкриншотыКСценариюИлиШагуАллюр2(Шаг, РезультатыПрохождения);
КонецПроцедуры

Процедура ПодробноеОписаниеОшибкиAllure2(Знач ИсходнаяСтрока, ОписаниеОшибки, ПодробноеОписаниеОшибки)
	ПодробноеОписаниеОшибки = ИсходнаяСтрока;
	
	СтрокаДеталиОшибки = ПолучитьТекстСообщенияПользователю("ДеталиОшибки:");
	Поз = Найти(ИсходнаяСтрока, СтрокаДеталиОшибки);
	Если Поз > 0 Тогда
		ИсходнаяСтрока = СокрЛП(Сред(ИсходнаяСтрока, Поз + 1 + СтрДлина(СтрокаДеталиОшибки)));
		ОписаниеОшибки = ИсходнаяСтрока;
		Возврат;
	КонецЕсли;	 
	
	Пока Истина Цикл
		Поз1 = Найти(ИсходнаяСтрока, "{");
		Поз2 = Найти(ИсходнаяСтрока, "}:");
		
		Если Поз1 = 0 ИЛИ Поз2 = 0 ИЛИ Поз1 > Поз2 Тогда
			Прервать;
		КонецЕсли;	 
		
		ЧастьСтроки1 = Лев(ИсходнаяСтрока, Поз1 - 1);
		ЧастьСтроки2 = СокрЛ(Сред(ИсходнаяСтрока, Поз2 + 3));
		
		ИсходнаяСтрока = ЧастьСтроки1 + ЧастьСтроки2;
	КонецЦикла;	

	СтрокаТехническиеДанные = ПолучитьТекстСообщенияПользователю("Технические данные");
	Поз = Найти(ИсходнаяСтрока, СтрокаТехническиеДанные);
	Если Поз > 0 Тогда
		ИсходнаяСтрока = СокрЛП(Лев(ИсходнаяСтрока, Поз - 1));
	КонецЕсли;	 
	
	ВСкобках = 0;
	
	ОткСкобки = "<([";
	ЗакрСкобки = ">)]";
	Прерывание = ".:" + Символы.ПС;
	
	Для Поз = 0 По СтрДлина(ИсходнаяСтрока) - 1 Цикл
		
		Символ = Сред(ИсходнаяСтрока, Поз, 1);
		Если Найти(ОткСкобки, Символ) > 0 Тогда
			
			ВСкобках = ВСкобках + 1;
			
		ИначеЕсли Найти(ЗакрСкобки, Символ) > 0 Тогда
			
			ВСкобках = Макс(ВСкобках - 1, 0);
			
		ИначеЕсли Найти(Прерывание, Символ) > 0 И ВСкобках = 0 Тогда
			
			ИсходнаяСтрока = Лев(ИсходнаяСтрока, Поз);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеОшибки = ИсходнаяСтрока;
	
КонецПроцедуры 

Процедура ЗаписатьОбъектВJson(СтруктураОбъекта, ИмяФайла, МассивXMLОтчетаAllure) 
	Перем ВременноеИмяФайла, ЗаписьJSON, ПараметрыЗаписиJSON, ДвоичныеДанныеФайла, СтруктураФайлаXML;
	
	ВременноеИмяФайла = ПолучитьИмяВременногоФайла("json");
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписьJSON.ОткрытьФайл(ВременноеИмяФайла, , , ПараметрыЗаписиJSON);
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураОбъекта); 
	ЗаписьJSON.Закрыть();
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ВременноеИмяФайла);
	СтруктураФайлаXML = Новый Структура;
	СтруктураФайлаXML.Вставить("РеальноеИмяФайла", Строка(ИмяФайла)); 
	СтруктураФайлаXML.Вставить("ФайлXMLДвоичныеДанные", ДвоичныеДанныеФайла);
	МассивXMLОтчетаAllure.Добавить(СтруктураФайлаXML);
	УдалитьФайлы(ВременноеИмяФайла);
	
КонецПроцедуры

Функция ОпределитьМассивТеговШага(СтрСтроки)
	Перем МассивТегов;
	МассивТегов = Новый Массив;

	МассивТеговШага = Новый Массив;
	Если ТипЗнч(СтрСтроки.ПроизвольныеЗначения) = Тип("Структура") Тогда 
		Если СтрСтроки.ПроизвольныеЗначения.Свойство("МассивТеговШага") Тогда
			СтрСтроки.ПроизвольныеЗначения.Свойство("МассивТеговШага", МассивТеговШага);
		КонецЕсли;
		
		Если ТипЗнч(МассивТеговШага) = Тип("Массив") И МассивТеговШага.Количество() = 0 Тогда 
			Если СтрСтроки.ПроизвольныеЗначения.Свойство("МассивТегов") Тогда
				СтрСтроки.ПроизвольныеЗначения.Свойство("МассивТегов", МассивТеговШага);
			КонецЕсли;
		ИначеЕсли  НЕ ТипЗнч(МассивТеговШага) = Тип("Массив")   Тогда
			Если СтрСтроки.ПроизвольныеЗначения.Свойство("МассивТегов") Тогда
				СтрСтроки.ПроизвольныеЗначения.Свойство("МассивТегов", МассивТеговШага);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(МассивТеговШага) = Тип("Массив") Тогда
		Если (МассивТеговШага.Количество() = 0 И ТипЗнч(СтрСтроки.Родитель) = Тип("СтрокаДереваЗначений"))
			ИЛИ (ТипЗнч(СтрСтроки.Родитель) = Тип("СтрокаДереваЗначений") И НЕ МассивТеговШага.Количество() > 0)  Тогда
			
			МассивТеговШага = ОпределитьМассивТеговШага(СтрСтроки.Родитель);
			
		КонецЕсли; 
	КонецЕсли; 
	
	Если ТипЗнч(МассивТеговШага) = Тип("Массив") Тогда
		ФиксМассив = Новый ФиксированныйМассив(МассивТеговШага);
		МассивТегов = Новый Массив(ФиксМассив);
	КонецЕсли;
	
	Возврат МассивТегов;
	
КонецФункции			

Функция ПустойРезультатПрохожденияТестовСценария(СтрокаДерева)
	РезультатПрохожденияТестовШагов = Новый Структура;
	РезультатПрохожденияТестовШагов.Вставить("ВремяНачала", ТекущаяУниверсальнаяДатаВМиллисекундах());
	РезультатПрохожденияТестовШагов.Вставить("ВремяОкончания", РезультатПрохожденияТестовШагов.ВремяНачала);
	РезультатПрохожденияТестовШагов.Вставить("ДатаНачала", ТекущаяДата());
	РезультатПрохожденияТестовШагов.Вставить("ИДСтроки", СтрокаДерева.ИДСтроки);
	РезультатПрохожденияТестовШагов.Вставить("НомерСтрокиВФиче", СтрокаДерева.НомерСтрокиВФиче);
	РезультатПрохожденияТестовШагов.Вставить("ОписаниеОшибки", "");
	РезультатПрохожденияТестовШагов.Вставить("РезультатПрохожденияТестовШагов", Новый Массив);
	Возврат РезультатПрохожденияТестовШагов; 
КонецФункции	 

Процедура РассчитатьДлительностьВыполненияГруппШаговРекурсивно(Шаги, НачалоВыполненияРодитель, ОкончаниеВыполненияРодитель)
	Для Каждого ТекШаг Из Шаги Цикл
		НачалоВыполнения = ТекШаг.start;
		ОкончаниеВыполнения = ТекШаг.stop;
		Если ТекШаг.Свойство("Steps") Тогда
			РассчитатьДлительностьВыполненияГруппШаговРекурсивно(ТекШаг.Steps, НачалоВыполнения, ОкончаниеВыполнения);
		ИначеЕсли ТекШаг.Свойство("befores") Тогда
			РассчитатьДлительностьВыполненияГруппШаговРекурсивно(ТекШаг.befores, НачалоВыполнения, ОкончаниеВыполнения);
		КонецЕсли;	 
		ТекШаг.start = НачалоВыполнения;
		ТекШаг.stop = ОкончаниеВыполнения;
		
		Если НачалоВыполненияРодитель = Неопределено ИЛИ (НачалоВыполнения <> Неопределено И НачалоВыполненияРодитель > НачалоВыполнения) Тогда
			НачалоВыполненияРодитель = НачалоВыполнения;
		КонецЕсли;	 
		Если ОкончаниеВыполненияРодитель = Неопределено ИЛИ (ОкончаниеВыполнения <> Неопределено И ОкончаниеВыполненияРодитель < ОкончаниеВыполнения) Тогда
			ОкончаниеВыполненияРодитель = ОкончаниеВыполнения;
		КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры 

Процедура РассчитатьДлительностьВыполненияГруппШагов(СтруктураВыгрузки)
	Если СтруктураВыгрузки.Свойство("Steps") Тогда
		НачалоВыполнения = СтруктураВыгрузки.start;
		ОкончаниеВыполнения = СтруктураВыгрузки.stop;
		РассчитатьДлительностьВыполненияГруппШаговРекурсивно(СтруктураВыгрузки.Steps, НачалоВыполнения, ОкончаниеВыполнения);
	ИначеЕсли СтруктураВыгрузки.Свойство("befores") Тогда
		НачалоВыполнения = СтруктураВыгрузки.start;
		ОкончаниеВыполнения = СтруктураВыгрузки.stop;
		РассчитатьДлительностьВыполненияГруппШаговРекурсивно(СтруктураВыгрузки.befores, НачалоВыполнения, ОкончаниеВыполнения);
	КонецЕсли;	 
КонецПроцедуры 

Функция ПолучитьИмяФичиИзПолногоПути(Знач Стр)
	Длина = СтрДлина(Стр);
	Поз   = Длина + 1;
	
	Для Ккк = 1 По Длина Цикл
		Символ = Сред(Стр, Длина - Ккк + 1, 1);
		Если Символ = ":" Тогда
			Поз = Длина - Ккк + 1;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	НовСтр = Лев(Стр, Поз - 1);
	
	Возврат СокрЛП(НовСтр);
КонецФункции

Функция УниверсальноеПолноеИмяФайлаTestOps(Знач ПолноеИмяФайлаИлиФайл)
	
	Возврат НРег(СтрЗаменить(ПолноеИмяФайлаИлиФайл, "\", "/"));
	
КонецФункции

Функция MD5Хеш(Строка)
	
	Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
	Хеш.Добавить(Строка);
	Возврат НРег(СтрЗаменить(Хеш.ХешСумма, " ", ""));
	
КонецФункции

Процедура ЗаполитьПараметрыДляAllureTestOps(СтруктураВыгрузки, СтрокаСценария, ДопПараметрыАллюр2)
	
	Если НЕ ДопПараметрыАллюр2.Свойство("КаталогПроекта") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДопПараметрыАллюр2.КаталогПроекта) Тогда
		Возврат;
	КонецЕсли;	
	
	ПутьКФиче = ПолучитьИмяФичиИзПолногоПути(СтрокаСценария.ПолныйПуть);
	ПутьКФичеУниверсальный = УниверсальноеПолноеИмяФайлаTestOps(ПутьКФиче);
	КаталогПроектаУниверсальный = УниверсальноеПолноеИмяФайлаTestOps(ДопПараметрыАллюр2.КаталогПроекта);
	Если Прав(КаталогПроектаУниверсальный, 1) <> "/" Тогда
		КаталогПроектаУниверсальный = КаталогПроектаУниверсальный + "/";
	КонецЕсли;	
	
	Поз = Найти(ПутьКФичеУниверсальный, КаталогПроектаУниверсальный);
	Если Поз = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ОтносительныйКаталогФичи = СокрЛП(Сред(ПутьКФичеУниверсальный, СтрДлина(КаталогПроектаУниверсальный) + 1));
	
	ПолноеИмяAllure = ОтносительныйКаталогФичи + "_" + НРег(СокрЛП(СтрокаСценария.Имя));
	
	СтруктураВыгрузки.Вставить("fullName", ПолноеИмяAllure);
	СтруктураВыгрузки.Вставить("testCaseId", MD5Хеш(ПолноеИмяAllure));
	
КонецПроцедуры

Функция ОбъединитьТегиФичиИСценария(СтрокаФичи, МассивТеговШага)
	Результат = Новый Массив;
	
	Для Каждого Элем Из МассивТеговШага Цикл
		Результат.Добавить(Элем);
	КонецЦикла;	     
	
	Если ТипЗнч(СтрокаФичи.ПроизвольныеЗначения) = Тип("Структура") И СтрокаФичи.ПроизвольныеЗначения.Свойство("МассивТегов") Тогда
		Для Каждого Элем Из СтрокаФичи.ПроизвольныеЗначения.МассивТегов Цикл
			Результат.Добавить(Элем);
		КонецЦикла;	
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции	

Процедура ОбойтиДеревоДляОтчетаАллюр2(Дерево, ДеревоТестов, ДанныеАллюрМеток, ДопПараметрыАллюр2)
	
	Для каждого СтрСтроки Из Дерево.Строки Цикл
		Если СтрСтроки.Тип = "Фича" Тогда
			
			ОбойтиДеревоДляОтчетаАллюр2(СтрСтроки, ДеревоТестов, ДанныеАллюрМеток, ДопПараметрыАллюр2); 
					
		ИначеЕсли (СтрСтроки.Тип = "Сценарий") ИЛИ (СтрСтроки.Тип = "Пример") Тогда
			ДопПараметрыАллюр2.Вставить("ГруппыШагов", Новый Соответствие);
			Если (СтрСтроки.ДопТип = "Контекст") Тогда
				// его не ненадо добавлять в отчет, т.к. этот сценарий включается в каждый сценарий
				
			ИначеЕсли (СтрСтроки.ДопТип = "СтруктураСценария") ИЛИ (СтрСтроки.Строки.Количество() = 0) Тогда
				// его не ненадо добавлять в отчет, т.к. этот сценарий явно не выполняется
				ОбойтиДеревоДляОтчетаАллюр2(СтрСтроки, ДеревоТестов, ДанныеАллюрМеток, ДопПараметрыАллюр2); 
			Иначе
				
				РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(СтрСтроки);
				Если РезультатПрохожденияТестовСценария = Неопределено Тогда
					РезультатПрохожденияТестовСценария = ПустойРезультатПрохожденияТестовСценария(СтрСтроки);
				КонецЕсли;
								
				GUID = Новый УникальныйИдентификатор();
				СтруктураВыгрузки = ПолучитьОписаниеСценарияАллюр2();
				СтруктураВыгрузки.Вставить("uuid", Строка(GUID));			
				
				ПрефиксИмениСценария = ПолучитьПрефиксИмениСценария2(ДобавлятьКИмениСценарияУсловияВыгрузки);
				
				СтрокаФичи = СтрСтроки.Родитель;
				Если СтрСтроки.Тип = "Пример" Тогда
					СтруктураВыгрузки.name	= ПрефиксИмениСценария + СтрСтроки.Родитель.Родитель.Имя + " №" + (СтрСтроки.Родитель.Строки.Индекс(СтрСтроки));
					СтрокаФичи		= СтрСтроки.Родитель.Родитель.Родитель;
					
					Для Каждого ИменованныйПараметр Из СтрСтроки.ИменованныеПараметры Цикл
						Если НРег(ИменованныйПараметр.Значение.ИмяПараметра) = "description"
							ИЛИ НРег(ИменованныйПараметр.Значение.ИмяПараметра) = "описание"
							Тогда
							СтруктураВыгрузки.name = ИменованныйПараметр.Значение.Значение;
						КонецЕсли;	 
					КонецЦикла;	 
					
				Иначе	
					СтруктураВыгрузки.name     = ПрефиксИмениСценария + СтрСтроки.Имя;
				КонецЕсли;
				СтруктураВыгрузки.historyId = СтрокаФичи.Имя + "." +  СтруктураВыгрузки.name;
				
				МассивТеговШага = ОпределитьМассивТеговШага(СтрСтроки);
				
				ЗаписатьОписаниеАллюр2(СтрокаФичи, СтруктураВыгрузки);
				ЗаписатьОписаниеАллюр2(СтрСтроки, СтруктураВыгрузки);
				
				СтруктураВыгрузки.Вставить("start", (РезультатПрохожденияТестовСценария.ВремяНачала - РазницаВМилисекундахМеждуЮниксИНачалЭпохи));
				Если РезультатПрохожденияТестовСценария.Свойство("ВремяОкончания") Тогда
					СтруктураВыгрузки.Вставить("stop", (РезультатПрохожденияТестовСценария.ВремяОкончания - РазницаВМилисекундахМеждуЮниксИНачалЭпохи));	
				КонецЕсли;	 
				
				Если СтрСтроки.ПроизвольныеЗначения = Неопределено Тогда
					СтрСтроки.ПроизвольныеЗначения = Новый Структура;
				КонецЕсли;	 
				
				ЗаполитьПараметрыДляAllureTestOps(СтруктураВыгрузки, СтрСтроки, ДопПараметрыАллюр2);
				
				МассивШаговBefore = Новый Массив();
				Если СтрСтроки.ДопТип = "СтруктураСценария" Тогда
					ОбойтиДеревоДляОтчетаАллюр2(СтрСтроки, ДеревоТестов, ДанныеАллюрМеток, ДопПараметрыАллюр2); 
				Иначе
					СоответствиеГрупп = Новый Соответствие;
					МассивШаговДляЗаполнения = СтруктураВыгрузки.steps;
					Если СтрСтроки.Тип = "Пример" Тогда
						Шаг = ПолучитьОписаниеШагаАллюр2();
						Шаг.name = СтрСтроки.Имя;
						
						Для Каждого ИменованныйПараметр Из СтрСтроки.ИменованныеПараметры Цикл
							Если НРег(ИменованныйПараметр.Значение.ИмяПараметра) = "description"
								ИЛИ НРег(ИменованныйПараметр.Значение.ИмяПараметра) = "описание"
								Тогда
								Шаг.name = ИменованныйПараметр.Значение.Значение;
							КонецЕсли;	 
						КонецЦикла;	 
						
						МассивТегов = Неопределено;
						СтрСтроки.ПроизвольныеЗначения.Свойство("МассивТегов", МассивТегов);
						
						ЗаписатьСтатусВШагИлиСценарий2(Шаг, СтрСтроки.Статус, МассивТегов);
						МассивШаговДляЗаполнения = Шаг.steps;
						СтруктураВыгрузки.steps.Добавить(Шаг);
					КонецЕсли;
					
					Для каждого СтрРезультатПрохожденияТестовШагов Из РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов Цикл
						
						Если СтрРезультатПрохожденияТестовШагов.ЭтоШагКонтекста Тогда
							МассивШаговBefore.Добавить(СтрРезультатПрохожденияТестовШагов);
						Иначе							
							ЗаписатьВыполнениеШагаАллюр2(
								МассивШаговДляЗаполнения,
								ДеревоТестов,
								СтрРезультатПрохожденияТестовШагов,
								СоответствиеГрупп, 
								ПараметрыОтчетаУФ.МассивXMLОтчетаAllure,
								СтруктураВыгрузки,
								ДопПараметрыАллюр2);
							ВложенныеШаги = Неопределено;
							Если СтрРезультатПрохожденияТестовШагов.Свойство("ВложенныеШаги", ВложенныеШаги) 
								И ТипЗнч(ВложенныеШаги) = Тип("Массив") Тогда
								ТекущийШагРезультата = МассивШаговДляЗаполнения.Получить(МассивШаговДляЗаполнения.ВГраница());
								Для каждого СтрПрохожденияВложенныхШагов Из ВложенныеШаги Цикл
									ЗаписатьВыполнениеШагаАллюр2(
										ТекущийШагРезультата.steps,
										ДеревоТестов,
										СтрПрохожденияВложенныхШагов,
										СоответствиеГрупп, 
										ПараметрыОтчетаУФ.МассивXMLОтчетаAllure,
										СтруктураВыгрузки,
										ДопПараметрыАллюр2);
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;	 		
				
				МассивТегов = Неопределено;
				Если СтрСтроки.ПроизвольныеЗначения.Свойство("МассивТегов") Тогда
					СтрСтроки.ПроизвольныеЗначения.Свойство("МассивТегов", МассивТегов);
				КонецЕсли;
				
				Если МассивТегов = Неопределено Тогда 
					Если СтрСтроки.ПроизвольныеЗначения.Свойство("МассивТегов") Тогда
						СтрСтроки.ПроизвольныеЗначения.Свойство("МассивТегов", МассивТегов);
					КонецЕсли;
				КонецЕсли;
				
				Если   МассивТеговШага = Неопределено ИЛИ (ТипЗнч(МассивТеговШага) = Тип("Массив") И МассивТеговШага.Количество() = 0) Тогда
					МассивТеговШага = ОпределитьМассивТеговШага(СтрСтроки);
				КонецЕсли;			
				
				Если РезультатПрохожденияТестовСценария.Свойство("Статус") Тогда
					ТекСтатус = РезультатПрохожденияТестовСценария.Статус;
				Иначе	
					ТекСтатус = СтрСтроки.Статус;
				КонецЕсли;	 
				
				Если РезультатПрохожденияТестовСценария.Свойство("СчитатьСценарийУпавшим") И РезультатПрохожденияТестовСценария.СчитатьСценарийУпавшим Тогда
					ТекСтатус = "Failed";
				КонецЕсли;	 
				
				Если РезультатПрохожденияТестовСценария.Свойство("УстановленСтатусВручную") Тогда
					ТекСтатус = РезультатПрохожденияТестовСценария.УстановленСтатусВручную;
					Если НЕ РезультатПрохожденияТестовСценария.Свойство("ОписаниеОшибки")
						И (ТекСтатус = "Failed" ИЛИ ТекСтатус = "Pending") Тогда
						РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", "Scenario status = " + ТекСтатус);
					КонецЕсли;	 
				КонецЕсли;	 
				
				ЗаписатьСтатусВШагИлиСценарий2(СтруктураВыгрузки, ТекСтатус, МассивТегов);
				
				ОписаниеОшибкиСценария = "";
				РезультатПрохожденияТестовСценария.Свойство("ОписаниеОшибки", ОписаниеОшибкиСценария);
				Если ЗначениеЗаполнено(ОписаниеОшибкиСценария) Тогда
					ОписаниеОшибки = "";
					ПодробноеОписаниеОшибки = "";
					ПодробноеОписаниеОшибкиAllure2(ОписаниеОшибкиСценария, ОписаниеОшибки, ПодробноеОписаниеОшибки);
					
					СтруктураОписанияОшибки = Новый Структура;
					СтруктураОписанияОшибки.Вставить("known", Ложь);
					СтруктураОписанияОшибки.Вставить("muted", Ложь);
					СтруктураОписанияОшибки.Вставить("flaky", Ложь);
					СтруктураОписанияОшибки.Вставить("message", ОписаниеОшибки);
					СтруктураОписанияОшибки.Вставить("trace", ПодробноеОписаниеОшибки);
					
					СтруктураВыгрузки.Вставить("statusDetails", СтруктураОписанияОшибки);
				КонецЕсли; 
				
				ДобавитьСкриншотыКСценариюИлиШагуАллюр2(СтруктураВыгрузки, РезультатПрохожденияТестовСценария);
				Если РезультатПрохожденияТестовСценария.Свойство("СписокФайлов") Тогда
					ДобавитьФайлыКСценариюИлиШагуАллюр2(СтруктураВыгрузки, РезультатПрохожденияТестовСценария.СписокФайлов, ПараметрыОтчетаУФ.МассивXMLОтчетаAllure, ДопПараметрыАллюр2);
				КонецЕсли;	 
				
				СисИнформация = Новый СистемнаяИнформация;
				СписокМетокПереопределяемый = Новый СписокЗначений;
				Если РезультатПрохожденияТестовСценария.Свойство("СписокМеток") Тогда
					СписокМетокПереопределяемый = РезультатПрохожденияТестовСценария["СписокМеток"];
				КонецЕсли;
				
				СписокСсылок = Новый СписокЗначений;
				Если РезультатПрохожденияТестовСценария.Свойство("СписокСсылок") Тогда
					СписокСсылок = РезультатПрохожденияТестовСценария["СписокСсылок"];
				КонецЕсли;
				
				Для каждого СсылкаUrl Из СписокСсылок Цикл
					ОписаниеСсылки = Новый Структура("name,url,type");
					ОписаниеСсылки.name = СсылкаUrl.Значение.name;
					ОписаниеСсылки.url = СсылкаUrl.Значение.url;
					ОписаниеСсылки.type = СсылкаUrl.Значение.type;
					
					СтруктураВыгрузки.links.Добавить(ОписаниеСсылки);					
				КонецЦикла;
				
				МассивТегов = Новый Массив();
				ЗначениеМеткиStory = СтрСтроки.Имя;
				Если СтрокаФичи.Тип = "Фича" Тогда
					ДополнительноеОписаниеФичи = СтрокаФичи.ПроизвольныеЗначения;
					//ДополнительноеОписаниеФичи= Новый Структура;
					Если ТипЗнч(ДополнительноеОписаниеФичи) = Тип("Структура") И ДополнительноеОписаниеФичи.Свойство("name") Тогда
						ЗначениеМеткиStory = ДополнительноеОписаниеФичи["name"];
					КонецЕсли;
					
					Если ТипЗнч(ДополнительноеОписаниеФичи) = Тип("Структура") И ДополнительноеОписаниеФичи.Свойство("tags") Тогда
						МассивТегов = ДополнительноеОписаниеФичи["tags"];
					КонецЕсли;
					
				КонецЕсли;
				
				ФайлФичи = Новый Файл(СтрокаФичи.ПолныйПуть);
				ПутьФичи = Новый Файл(ФайлФичи.Путь);
				КаталогФичи = ПутьФичи.ИмяБезРасширения;
				
				СписокМеток =  СтруктураВыгрузки.labels;

				ДобавитьМетку2(СписокМеток, "host", ИмяКомпьютера(), СписокМетокПереопределяемый);
				ДобавитьМетку2(СписокМеток, "package", КаталогФичи, СписокМетокПереопределяемый);
				Если РезультатПрохожденияТестовСценария.Свойство("ЕстьДополнительныеФайлыСравненияЗначенияСЭталоном")
					И РезультатПрохожденияТестовСценария.ЕстьДополнительныеФайлыСравненияЗначенияСЭталоном Тогда
					ДобавитьМетку2(СписокМеток, "testType", "screenshotDiff", СписокМетокПереопределяемый);
				КонецЕсли;	 

				Для каждого Строка Из ДанныеАллюрМеток Цикл 
					Если ПустаяСтрока(Строка.РегулярноеВыражение) Тогда
						//если не указано регулярное выражение, то метка добавляется безусловно
						ДобавитьМетку2(СписокМеток, Строка.ИмяМетки, Строка.Значение, СписокМетокПереопределяемый);
					КонецЕсли;	 
				КонецЦикла;		
				
				
				МассивТеговДляОбработки = ОбъединитьТегиФичиИСценария(СтрокаФичи, МассивТеговШага);
				
				Для каждого Тег Из МассивТеговДляОбработки Цикл
					ДобавитьМетку2(СписокМеток, "tag", Тег.Тег, СписокМетокПереопределяемый);
					Для каждого Строка Из ДанныеАллюрМеток Цикл 
						Если ПустаяСтрока(Строка.РегулярноеВыражение) Тогда
							//если не указано регулярное выражение, то метка игнорируется
							Продолжить;
						КонецЕсли;	 
						
						Если СтрокаСоответствуетШаблону(Тег.Тег, Строка.РегулярноеВыражение) Тогда 
							ДобавитьМетку2(СписокМеток, Строка.ИмяМетки, Строка.Значение, СписокМетокПереопределяемый);
						КонецЕсли;
					КонецЦикла;		
				КонецЦикла;
				
				Если СтрСтроки.Родитель.ПроизвольныеЗначения = Неопределено Тогда
					СтрСтроки.Родитель.ПроизвольныеЗначения = Новый Структура;
				КонецЕсли;	 
				
				Если ЗначениеЗаполнено(УровеньОтчета1) 
						ИЛИ ЗначениеЗаполнено(УровеньОтчета2) 
						ИЛИ ЗначениеЗаполнено(УровеньОтчета3) 
						ИЛИ ЗначениеЗаполнено(ГруппировкаTestSuites) Тогда
						
					epic    = "";
					feature = "";
					story   = "";
					suite   = "";
					ДанныеПоИерархииОтчетаИзОтносительногоПути2(epic, feature, story, suite, СтрСтроки.Родитель, СтрСтроки, КаталогОтносительноКоторогоНадоСтроитьИерархию);
					
					Если ЗначениеЗаполнено(suite) Тогда
							
						ДобавитьМетку2(СписокМеток, "suite", suite, СписокМетокПереопределяемый);
							
					КонецЕсли;	 
					
					Если ЗначениеЗаполнено(epic)
							И ИспользоватьУровеньОтчета(УровеньОтчета1) Тогда
							
						ДобавитьМетку2(СписокМеток, "epic", epic, СписокМетокПереопределяемый);
						
					КонецЕсли;	 
					
					Если ЗначениеЗаполнено(feature)
							И ИспользоватьУровеньОтчета(УровеньОтчета2) Тогда
							
						ДобавитьМетку2(СписокМеток, "feature", feature, СписокМетокПереопределяемый);
						
					КонецЕсли;	 

					Если ЗначениеЗаполнено(story) 
							И ИспользоватьУровеньОтчета(УровеньОтчета3) Тогда
							
						СтрСтроки.Родитель.ПроизвольныеЗначения.Вставить("story", story);
						
					КонецЕсли;
				Иначе	
					epic = "";
					Если ТипЗнч(СтрСтроки.Родитель.ПроизвольныеЗначения) = Тип("Структура")  Тогда
						// смотрим комментарии фичи
						МассивКомментариев = Новый Массив;
						Если СтрСтроки.Родитель.ПроизвольныеЗначения.Свойство("МассивКомментариев") Тогда
							МассивКомментариев = СтрСтроки.Родитель.ПроизвольныеЗначения.МассивКомментариев;
						КонецЕсли;	 
						
						Если СтрСтроки.Родитель.Тип = "Примеры" Тогда
							Если СтрСтроки.Родитель.Родитель.ПроизвольныеЗначения.Свойство("МассивКомментариев") Тогда
								МассивКомментариев = СтрСтроки.Родитель.Родитель.ПроизвольныеЗначения.МассивКомментариев;
							КонецЕсли;	 
						КонецЕсли;	 
						
						Для Каждого КомментарийСтруктура Из МассивКомментариев Цикл
							Комментарий = СокрЛП(КомментарийСтруктура.Комментарий);
							НрегКомментарий = НРег(Комментарий);
							Если Лев(НрегКомментарий, 12) = "report.epic=" Тогда
								ПромСтр = Сред(Комментарий, 13);
								Если ЗначениеЗаполнено(ПромСтр) Тогда
									epic = ПромСтр;
									Прервать;
								КонецЕсли;	 
							КонецЕсли;	 
						КонецЦикла;	 
					КонецЕсли;	 
					Если ЗначениеЗаполнено(epic) Тогда
						ДобавитьМетку2(СписокМеток, "epic", epic, СписокМетокПереопределяемый);
						
					КонецЕсли;	 

					feature = СтрСтроки.Имя;
					Если ТипЗнч(СтрСтроки.Родитель.ПроизвольныеЗначения) = Тип("Структура")  Тогда
						// смотрим комментарии фичи
						МассивКомментариев = Новый Массив;
						Если СтрСтроки.Родитель.ПроизвольныеЗначения.Свойство("МассивКомментариев") Тогда
							МассивКомментариев = СтрСтроки.Родитель.ПроизвольныеЗначения.МассивКомментариев;
						КонецЕсли;	 
						
						Если СтрСтроки.Родитель.Тип = "Примеры" 
								И СтрСтроки.Родитель.Родитель.ПроизвольныеЗначения.Свойство("МассивКомментариев") Тогда
							МассивКомментариев = СтрСтроки.Родитель.Родитель.ПроизвольныеЗначения.МассивКомментариев;
						КонецЕсли;	 
						
						Для Каждого КомментарийСтруктура Из МассивКомментариев Цикл
							Комментарий = СокрЛП(КомментарийСтруктура.Комментарий);
							НрегКомментарий = НРег(Комментарий);
							Если Лев(НрегКомментарий, 15) = "report.feature=" Тогда
								ПромСтр = Сред(Комментарий, 16);
								Если ЗначениеЗаполнено(ПромСтр) Тогда
									feature = ПромСтр;
									Прервать;
								КонецЕсли;	 
							КонецЕсли;	 
						КонецЦикла;	 
					КонецЕсли;	 
					ДобавитьМетку2(СписокМеток, "feature", feature, СписокМетокПереопределяемый);
				КонецЕсли;	 

				story = "";
				Если ЗначениеЗаполнено(УровеньОтчета3) 
						И ИспользоватьУровеньОтчета(УровеньОтчета3) Тогда
						
					Если ТипЗнч(СтрСтроки.Родитель.ПроизвольныеЗначения) = Тип("Структура") Тогда
								
						Если СтрСтроки.Родитель.ПроизвольныеЗначения.Свойство("story") 
								И ЗначениеЗаполнено(СтрСтроки.Родитель.ПроизвольныеЗначения.story) Тогда
								
							story = СтрСтроки.Родитель.ПроизвольныеЗначения.story;
								
						КонецЕсли;	 

						Если СтрСтроки.Родитель.ПроизвольныеЗначения.Свойство("ИмяСценария_для_story")
								И СтрСтроки.Родитель.ПроизвольныеЗначения.ИмяСценария_для_story = Истина Тогда
								
							story = СтрСтроки.Имя;
							
							Если СтрСтроки.Тип = "Пример" Тогда
								
								story = СтрСтроки.Родитель.Родитель.Имя;
								
							КонецЕсли;	 
							
						КонецЕсли;	 
						
					КонецЕсли;	 
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(story) Тогда
					Если ТипЗнч(СтрСтроки.Родитель.ПроизвольныеЗначения) = Тип("Структура")  Тогда
						Если СтрСтроки.Родитель.ПроизвольныеЗначения.Свойство("story") Тогда
							story = СтрСтроки.Родитель.ПроизвольныеЗначения.story;
						Иначе	
							// смотрим комментарии фичи
							МассивКомментариев = Новый Массив;
							Если СтрСтроки.Родитель.ПроизвольныеЗначения.Свойство("МассивКомментариев") Тогда
								МассивКомментариев = СтрСтроки.Родитель.ПроизвольныеЗначения.МассивКомментариев;
							КонецЕсли;	 
							
							Если СтрСтроки.Родитель.Тип = "Примеры" Тогда
								Если СтрСтроки.Родитель.Родитель.ПроизвольныеЗначения.Свойство("МассивКомментариев") Тогда
									МассивКомментариев = СтрСтроки.Родитель.Родитель.ПроизвольныеЗначения.МассивКомментариев;
								КонецЕсли;	 
							КонецЕсли;	 
							Для Каждого КомментарийСтруктура Из МассивКомментариев Цикл
								Комментарий = СокрЛП(КомментарийСтруктура.Комментарий);
								НрегКомментарий = НРег(Комментарий);
								Если Лев(НрегКомментарий, 13) = "report.story=" Тогда
									ПромСтр = Сред(Комментарий, 14);
									Если ЗначениеЗаполнено(ПромСтр) Тогда
										story = ПромСтр;
										Прервать;
									КонецЕсли;	 
								КонецЕсли;	 
							КонецЦикла;	 
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
				
				Если НЕ ЗначениеЗаполнено(story) Тогда
					story = СтрСтроки.Имя;
				КонецЕсли;	 
				
				Если ЗначениеЗаполнено(story) 
							И ИспользоватьУровеньОтчета(УровеньОтчета3) Тогда
							
					ДобавитьМетку2(СписокМеток, "story", story, СписокМетокПереопределяемый);
					
				КонецЕсли;	 

				Для каждого Тег Из МассивТегов Цикл
					ДобавитьМетку2(СписокМеток, "tag", Тег.Тег, СписокМетокПереопределяемый);
				КонецЦикла;
				
				Для каждого ЭлементМетки Из СписокМетокПереопределяемый Цикл
					ДобавитьМетку2(СписокМеток, ЭлементМетки.Значение, ЭлементМетки.Представление);
				КонецЦикла;

				СписокМетокПереопределяемый = Новый СписокЗначений;
				Если СтрСтроки.Строки.Количество() > 0 Тогда
					РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(СтрСтроки.Строки[0]);
					Если РезультатПрохожденияТестовСценария <> Неопределено И РезультатПрохожденияТестовСценария.Свойство("СписокМеток") Тогда
						СписокМетокПереопределяемый = РезультатПрохожденияТестовСценария["СписокМеток"];
					КонецЕсли;
				КонецЕсли;			
				
				Для каждого ЭлементМетки Из СписокМетокПереопределяемый Цикл
					ДобавитьМетку2(СписокМеток, ЭлементМетки.Значение, ЭлементМетки.Представление);
				КонецЦикла;

				РассчитатьДлительностьВыполненияГруппШагов(СтруктураВыгрузки);
				РеальноеИмяФайла = "" + GUID + "-result.json";
				ЗаписатьОбъектВJson(СтруктураВыгрузки, РеальноеИмяФайла, ПараметрыОтчетаУФ.МассивXMLОтчетаAllure);
				
				Если МассивШаговBefore.Количество() > 0 Тогда
					СтруктураШаговКонтекста = ПолучитьОписаниеКонтекстныхШаговАллюр2();
					СтруктураШаговКонтекста.uuid = Строка(Новый УникальныйИдентификатор);
					СтруктураШаговКонтекста.name = "Контекст_" + СтруктураВыгрузки.name;
					СтруктураШаговКонтекста.description =  "";
					СтруктураШаговКонтекста.children.Добавить(Строка(GUID));
					СтруктураШаговКонтекста.Вставить("befores", Новый Массив());
					
					ВремяНачала = 0;
					ВремяОкончания = 0;
					СоответствиеГрупп = Новый Соответствие;
					СоответствиеГрупп.Вставить("УдалятьРодителейПриСмене", Истина);
					Для Сч = 0 По МассивШаговBefore.ВГраница() Цикл
						
						ЭлементМассива = МассивШаговBefore.Получить(Сч);
						
						ЗаписатьВыполнениеШагаАллюр2(
						СтруктураШаговКонтекста.befores,
						ДеревоТестов,
						ЭлементМассива,
						СоответствиеГрупп, 
						ПараметрыОтчетаУФ.МассивXMLОтчетаAllure,
						СтруктураВыгрузки,
						ДопПараметрыАллюр2
						);
						
					КонецЦикла;
					РеальноеИмяФайла = "" + GUID + "-container.json";
					РассчитатьДлительностьВыполненияГруппШагов(СтруктураШаговКонтекста);
					ЗаписатьОбъектВJson(СтруктураШаговКонтекста, РеальноеИмяФайла, ПараметрыОтчетаУФ.МассивXMLОтчетаAllure);
				КонецЕсли;
				
				
			КонецЕсли; 
		ИначеЕсли СтрСтроки.Тип = "Шаг" Тогда
			Если СтрСтроки.Родитель.ДопТип = "СтруктураСценария" Тогда
				// его не ненадо добавлять в отчет, т.к. этот сценарий явно не выполняется
				ОбойтиДеревоДляОтчетаАллюр2(СтрСтроки, ДеревоТестов, ДанныеАллюрМеток, ДопПараметрыАллюр2); 
			КонецЕсли; 
		Иначе	
			ОбойтиДеревоДляОтчетаАллюр2(СтрСтроки, ДеревоТестов, ДанныеАллюрМеток, ДопПараметрыАллюр2); 
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

Процедура СтрокаДереваПоИдСтрокиРекурсивно(Дерево, Результат)
	Для Каждого ТекСтрока Из Дерево.Строки Цикл
		Результат.Вставить(ТекСтрока.ИдСтроки, ТекСтрока);
		СтрокаДереваПоИдСтрокиРекурсивно(ТекСтрока, Результат)
	КонецЦикла;	 
КонецПроцедуры 

Функция СтрокаДереваПоИдСтроки(Дерево)
	Результат = Новый Соответствие;
	СтрокаДереваПоИдСтрокиРекурсивно(Дерево, Результат);
	Возврат Результат; 
КонецФункции	 

Процедура СформироватьОтчетАллюр2(СтруктураОФ, ДеревоТестовПарам, ИмяСборки) Экспорт
	Перем СтарыйКаталог, ИмяФайла;
	
	ОтчетВРежимеУФ = Ложь;
	
	ДанныеАллюрМеток = Новый ТаблицаЗначений;
	
	Если СтруктураОФ = Неопределено Тогда
		ВызватьИсключение "Не поддерживаем ОФ";
	КонецЕсли;
	
	ИмяТекущейСборки = ИмяСборки;
	ОтчетВРежимеУФ = Истина;
	ПараметрыОтчетаУФ    = СтруктураОФ;
		
	СтруктураОФ.Свойство("ДанныеАллюрМеток", ДанныеАллюрМеток);
		
	МассивXMLОтчетаAllure = Новый Массив;
	СтруктураОФ.Вставить("МассивXMLОтчетаAllure", МассивXMLОтчетаAllure);
	
	ДопПараметрыАллюр2 = Новый Структура;
	ДопПараметрыАллюр2.Вставить("КешИменПриложенныхФайлов", Новый Соответствие);
	ДопПараметрыАллюр2.Вставить("СтрокаДереваПоИдСтроки", СтрокаДереваПоИдСтроки(ДеревоТестовПарам));
	Если СтруктураОФ.Свойство("КаталогПроекта") Тогда
		ДопПараметрыАллюр2.Вставить("КаталогПроекта", СтруктураОФ.КаталогПроекта);
	КонецЕсли;	
	ОбойтиДеревоДляОтчетаАллюр2(ДеревоТестовПарам, ДеревоТестовПарам, ДанныеАллюрМеток, ДопПараметрыАллюр2);
	ДопПараметрыАллюр2.СтрокаДереваПоИдСтроки.Очистить();
КонецПроцедуры

Функция ИспользоватьУровеньОтчета(ЗначениеГруппировки)
	
	Результат = Не (НРег(ЗначениеГруппировки) = "неиспользовать"
						ИЛИ НРег(ЗначениеГруппировки) = "donotuse");
						
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область jUnit

Функция Определить_classname(ДопПараметры, МассивТегов, РезультатПрохожденияТестовСценария, СтрСтроки)
	Если (СтрСтроки.Статус = "Failed") Тогда
		Для Каждого Элем Из МассивТегов Цикл
			Если НРег(Элем.Тег) <> "classname=moduleexceptionpath" Тогда
				Продолжить;
			КонецЕсли;
			ИсходнаяСтрока = РезультатПрохожденияТестовСценария.ОписаниеОшибки;
				
			Поз1 = Найти(ИсходнаяСтрока, "{");
			Поз2 = Найти(ИсходнаяСтрока, "}:");
				
			Если Поз1 = 0 ИЛИ Поз2 = 0 ИЛИ Поз1 > Поз2 Тогда
				Возврат ИсходнаяСтрока;
			КонецЕсли;	 
			
			ИсходнаяСтрока = Сред(ИсходнаяСтрока, Поз1 + 1, Поз2 - Поз1 - 1);
			Возврат ИсходнаяСтрока;
		КонецЦикла;	 
	КонецЕсли;	 
	
	classname = ДопПараметры.ТекущаяФичаИмя;
	
	Если ДопПараметры.ТекУровеньКаталога >= 2 Тогда
		classname = ДопПараметры.УровниКаталогов[0] + "." + ДопПараметры.ТекущаяФичаИмя;
	КонецЕсли;	 
	
	Возврат classname;
КонецФункции	

Процедура ОбойтиДеревоДляОтчетаjUnit(Дерево, ЗаписьXML, ДопПараметры, ДанныеФичи = Неопределено)
	ДелительМиллисек = 1000;
	Для каждого СтрСтроки Из Дерево.Строки Цикл
		Если СтрСтроки.Тип = "Фича" Тогда
			
			ДопПараметры.Вставить("ТекущаяФичаИмя", СтрСтроки.Имя);
			
			МассивСценариев = Новый Массив;
			
			ДанныеФичи = Новый Структура;
			ДанныеФичи.Вставить("МассивСценариев", МассивСценариев);
			ДанныеФичи.Вставить("errors", 0);
			ДанныеФичи.Вставить("skipped", 0);
			ДанныеФичи.Вставить("tests", 0);
			ДанныеФичи.Вставить("failures", 0);
			ДанныеФичи.Вставить("time", 0);
			
			ОбойтиДеревоДляОтчетаjUnit(СтрСтроки, ЗаписьXML, ДопПараметры, ДанныеФичи);
			
			ПрефиксИмениСценария = "";
			Если ДобавлятьКИмениСценарияУсловияВыгрузки Тогда
				ПрефиксИмениСценария = ПолучитьПрефиксИмениСценария();
			КонецЕсли;	 

			ЗаписьXML.ЗаписатьНачалоЭлемента("testsuite");
			ЗаписьXML.ЗаписатьАтрибут("name", СтрСтроки.Имя);
			ЗаписьXML.ЗаписатьАтрибут("errors", Формат(ДанныеФичи.errors, "ЧГ=; ЧН=0"));
			ЗаписьXML.ЗаписатьАтрибут("skipped", Формат(ДанныеФичи.skipped, "ЧГ=; ЧН=0"));
			ЗаписьXML.ЗаписатьАтрибут("tests", Формат(ДанныеФичи.tests, "ЧГ=; ЧН=0"));
			ЗаписьXML.ЗаписатьАтрибут("failures", Формат(ДанныеФичи.failures, "ЧГ=; ЧН=0"));
			ЗаписьXML.ЗаписатьАтрибут("time", Формат(ДанныеФичи.time / ДелительМиллисек, "ЧРД=.; ЧГ=; ЧН=0"));

			Для Каждого Сценарий Из МассивСценариев Цикл
				ЗаписьXML.ЗаписатьНачалоЭлемента("testcase");
				
				Если ДобавлятьКИмениСценарияУсловияВыгрузки Тогда
					ЗаписьXML.ЗаписатьАтрибут("name", ПрефиксИмениСценария + Сценарий.name);
				Иначе	
					ЗаписьXML.ЗаписатьАтрибут("name", Сценарий.name);
				КонецЕсли;	 
				ЗаписьXML.ЗаписатьАтрибут("classname", Сценарий.classname);
				ЗаписьXML.ЗаписатьАтрибут("time", Формат(Сценарий.time / ДелительМиллисек, "ЧРД=.; ЧГ=; ЧН=0"));
				Если Сценарий.Свойство("ДатаНачала") Тогда
					ЗаписьXML.ЗаписатьАтрибут("StartDate", Формат(Сценарий.ДатаНачала, "ДФ=yyyyMMddHHmmss"));
				КонецЕсли;	
				Если Сценарий.Свойство("ДатаОкончания") Тогда
					ЗаписьXML.ЗаписатьАтрибут("EndDate", Формат(Сценарий.ДатаОкончания, "ДФ=yyyyMMddHHmmss"));
				КонецЕсли;	
				Если Сценарий.Статус = "Failed" Тогда
					ТекстОшибкиКратко = "";
					Если ТипЗнч(Сценарий.СтрокаСценария.ПроизвольныеЗначения) = Тип("Структура") Тогда
						Если Сценарий.СтрокаСценария.ПроизвольныеЗначения.Свойство("ТекстОшибкиКратко") Тогда
							ТекстОшибкиКратко = Сценарий.СтрокаСценария.ПроизвольныеЗначения.ТекстОшибкиКратко;
						КонецЕсли;	 
					КонецЕсли;	 
					
					ОшибкаAssert = Ложь;
					Если ТипЗнч(Сценарий.СтрокаСценария.ПроизвольныеЗначения) = Тип("Структура") Тогда
						Если Сценарий.СтрокаСценария.ПроизвольныеЗначения.Свойство("ОшибкаAssert") Тогда
							ОшибкаAssert = Сценарий.СтрокаСценария.ПроизвольныеЗначения.ОшибкаAssert;
						КонецЕсли;	 
					КонецЕсли;	 
					
					ПолныйТекстОшибкиjUnut = ПолныйТекстОшибкиjUnut(Сценарий.message, ДопПараметры);
					
					Если ОшибкаAssert Тогда
						ЗаписьXML.ЗаписатьНачалоЭлемента("failure");
						ЗаписьXML.ЗаписатьНачалоЭлемента("expected");
						ЗаписьXML.ЗаписатьТекст(ЗначениеВСтрокуjUnit(Сценарий.СтрокаСценария.ПроизвольныеЗначения.ЗначениеExpected));
						ЗаписьXML.ЗаписатьКонецЭлемента();
						ЗаписьXML.ЗаписатьНачалоЭлемента("actual");
						ЗаписьXML.ЗаписатьТекст(ЗначениеВСтрокуjUnit(Сценарий.СтрокаСценария.ПроизвольныеЗначения.ЗначениеActual));
						ЗаписьXML.ЗаписатьКонецЭлемента();
					Иначе
						ЗаписьXML.ЗаписатьНачалоЭлемента("error");						
					КонецЕсли;	 
					
					ЗаписьXML.ЗаписатьТекст(ПолныйТекстОшибкиjUnut);					
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					РезультатПрохождения = ПолучитьРезультатПрохожденияТестовСценария(Сценарий.СтрокаСценария);
					
					Если ДелатьСкриншотПриВозникновенииОшибки И СкриншотыjUnit 
							И РезультатПрохождения.МассивСкриншотов.Количество() Тогда
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("system-out");
						
							Если РезультатПрохождения.МассивСкриншотов[0].Свойство("ИсходноеИмяФайла") Тогда
								ЗаписьXML.ЗаписатьТекст(ПриложитьСкриншотJUnit(РезультатПрохождения.МассивСкриншотов[0].ИсходноеИмяФайла));
							Иначе
								ЗаписьXML.ЗаписатьТекст(ПриложитьСкриншотJUnit(РезультатПрохождения.МассивСкриншотов[0].ИмяФайла));
							КонецЕсли;	 
						
						ЗаписьXML.ЗаписатьКонецЭлемента();
						
					КонецЕсли;
					
				ИначеЕсли Сценарий.Статус = "Pending" Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("skipped");
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;	 
				
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЦикла;	

			Если МассивСценариев.Количество() > 0 И ТипЗнч(МассивСценариев[0].СтрокаСценария.ПроизвольныеЗначения) = Тип("Структура") Тогда
				ПроизвольныеЗначения = МассивСценариев[0].СтрокаСценария.ПроизвольныеЗначения;
				
				properties = Новый Массив;
				Если (ПроизвольныеЗначения.Свойство("МассивТегов") И ТипЗнч(ПроизвольныеЗначения.МассивТегов) = Тип("Массив")) Тогда
					
					Для Каждого ДанныеТега Из ПроизвольныеЗначения.МассивТегов Цикл
						Поз = Найти(ДанныеТега.ТегИсходный, "=");
						Если Поз > 0 Тогда
							Имя      = Лев(ДанныеТега.ТегИсходный, Поз - 1);
							Значение = Сред(ДанныеТега.ТегИсходный, Поз + 1);
							
							property = Новый Структура;
							property.Вставить("Имя", Имя);
							property.Вставить("Значение", Значение);
							
							properties.Добавить(property);
						КонецЕсли;	 
					КонецЦикла;	 
				КонецЕсли;
				
				Если  ДопПараметры.Свойство("ЛогОшибки") И (ТипЗнч(ДопПараметры.ЛогОшибки) = Тип("Структура")) Тогда
					Для Каждого Элемент Из ДопПараметры.ЛогОшибки Цикл
						property = Новый Структура;
						property.Вставить("Имя", Элемент.Ключ);
						Если ТипЗнч(Элемент.Значение) = Тип("Булево") Тогда
							ЗначениеЭлемента = ?(Элемент.Значение, "true", "false");
						ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
							ЗначениеЭлемента = "";
							Для Каждого Элем Из Элемент.Значение Цикл
								ЗначениеЭлемента = ЗначениеЭлемента + Строка(Элем) + ";";
							КонецЦикла;	
							ЗначениеЭлемента = Лев(ЗначениеЭлемента, СтрДлина(ЗначениеЭлемента) - 1);
						Иначе
							ЗначениеЭлемента = Строка(Элемент.Значение);
						КонецЕсли;	
						property.Вставить("Значение", ЗначениеЭлемента);
							
						properties.Добавить(property);
					КонецЦикла;	 
				КонецЕсли;

					
				Если properties.Количество() > 0 Тогда
						
					ЗаписьXML.ЗаписатьНачалоЭлемента("properties");
					Для Каждого property Из properties Цикл
						ЗаписьXML.ЗаписатьНачалоЭлемента("property");
						ЗаписьXML.ЗаписатьАтрибут("name", property.Имя);
						ЗаписьXML.ЗаписатьАтрибут("value", property.Значение);
						ЗаписьXML.ЗаписатьКонецЭлемента();
					КонецЦикла;	 
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;	 
			КонецЕсли;	 

			
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		ИначеЕсли (СтрСтроки.Тип = "Сценарий") ИЛИ (СтрСтроки.Тип = "Пример") Тогда
			Если (СтрСтроки.ДопТип = "Контекст") Тогда
				// его не неадо добавлять в отчет, т.к. этот сценарий включается в каждый сценарий
				
			ИначеЕсли (СтрСтроки.ДопТип = "СтруктураСценария") ИЛИ (СтрСтроки.Строки.Количество() = 0) Тогда
				// его не неадо добавлять в отчет, т.к. этот сценарий явно не выполняется
				ОбойтиДеревоДляОтчетаjUnit(СтрСтроки, ЗаписьXML, ДопПараметры, ДанныеФичи);
			Иначе
				
				РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(СтрСтроки);
				
				Если РезультатПрохожденияТестовСценария = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				
				ЛогОшибки = ?(РезультатПрохожденияТестовСценария.Свойство("ЛогОшибки"),РезультатПрохожденияТестовСценария.ЛогОшибки, Неопределено);
				ДопПараметры.Вставить("ЛогОшибки", ЛогОшибки);
				
				Сценарий          = Новый Структура;
				Сценарий.Вставить("СтрокаСценария", СтрСтроки);
				ДанныеФичи.МассивСценариев.Добавить(Сценарий);

				МассивТегов = Новый Массив;
				
				Если СтрСтроки.Тип = "Пример" Тогда
					Сценарий.Вставить("name", СтрСтроки.Родитель.Родитель.Имя + " №" + (СтрСтроки.Родитель.Строки.Индекс(СтрСтроки)));//для структуры сценария надо вести нумерацию
					Если ТипЗнч(СтрСтроки.Родитель.ПроизвольныеЗначения) = Тип("Структура") Тогда
						Если СтрСтроки.Родитель.ПроизвольныеЗначения.Свойство("МассивТегов") Тогда
							МассивТегов = СтрСтроки.Родитель.ПроизвольныеЗначения.МассивТегов;
						КонецЕсли;	 
					КонецЕсли;	 
				Иначе	
					Сценарий.Вставить("name", СтрСтроки.Имя);
					Если ТипЗнч(СтрСтроки.ПроизвольныеЗначения) = Тип("Структура") Тогда
						Если СтрСтроки.ПроизвольныеЗначения.Свойство("МассивТегов") Тогда
							МассивТегов = СтрСтроки.ПроизвольныеЗначения.МассивТегов;
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли; 
				
				classname = Определить_classname(ДопПараметры, МассивТегов, РезультатПрохожденияТестовСценария, СтрСтроки);
				Сценарий.Вставить("classname", classname);
				
				Если РезультатПрохожденияТестовСценария.Свойство("ВремяОкончания") И РезультатПрохожденияТестовСценария.Свойство("ВремяНачала") Тогда
					Сценарий.Вставить("time", РезультатПрохожденияТестовСценария.ВремяОкончания - РезультатПрохожденияТестовСценария.ВремяНачала);
				Иначе	
					Сценарий.Вставить("time", 0);
				КонецЕсли;
				
				Если РезультатПрохожденияТестовСценария.Свойство("ДатаНачала") Тогда
					Сценарий.Вставить("ДатаНачала", РезультатПрохожденияТестовСценария.ДатаНачала);
				КонецЕсли;	
				Если РезультатПрохожденияТестовСценария.Свойство("ДатаОкончания") Тогда
					Сценарий.Вставить("ДатаОкончания", РезультатПрохожденияТестовСценария.ДатаОкончания);
				КонецЕсли;	
				
				ДанныеФичи.time = ДанныеФичи.time + Сценарий.time;

				Если СтрСтроки.ДопТип = "СтруктураСценария" Тогда
					ОбойтиДеревоДляОтчетаjUnit(СтрСтроки, ЗаписьXML, ДопПараметры, ДанныеФичи);
				КонецЕсли;	 
				
				Сценарий.Вставить("Статус", СтрСтроки.Статус);
				
				ДанныеФичи.tests = ДанныеФичи.tests + 1;
				
				Если (СтрСтроки.Статус = "Failed")  Тогда
					Если РезультатПрохожденияТестовСценария.Свойство("ОписаниеОшибки") Тогда
						Сценарий.Вставить("message", РезультатПрохожденияТестовСценария.ОписаниеОшибки);
					Иначе
						Сценарий.Вставить("message", "");
					КонецЕсли;	 
					ДанныеФичи.failures = ДанныеФичи.failures + 1;
				ИначеЕсли (СтрСтроки.Статус = "Pending") Тогда
					Если РезультатПрохожденияТестовСценария.Свойство("ОписаниеОшибки") Тогда
						Сценарий.Вставить("message", РезультатПрохожденияТестовСценария.ОписаниеОшибки);
					Иначе	
						Сценарий.Вставить("message", "");
					КонецЕсли;	 
					ДанныеФичи.skipped = ДанныеФичи.skipped + 1;
				КонецЕсли; 
			КонецЕсли; 
		ИначеЕсли СтрСтроки.Тип = "Шаг" Тогда
			Если СтрСтроки.Родитель.ДопТип = "СтруктураСценария" Тогда
				// его не неадо добавлять в отчет, т.к. этот сценарий явно не выполняется
				ОбойтиДеревоДляОтчетаjUnit(СтрСтроки, ЗаписьXML, ДопПараметры, ДанныеФичи);
			КонецЕсли; 
		ИначеЕсли СтрСтроки.Тип = "Каталог" Тогда
			
			ДопПараметры.ТекУровеньКаталога = ДопПараметры.ТекУровеньКаталога + 1;
			// Запоминаем уровни каталогов. Нас интересует только уровень 2 и 3. Т.е. если каталоги лежат как
			// features\Core\FeatureLoad, то мы запомним только Core\FeatureLoad
			Если ДопПараметры.ТекУровеньКаталога = 2 Тогда
				ДопПараметры.УровниКаталогов[0] = СтрСтроки.Имя;
			ИначеЕсли ДопПараметры.ТекУровеньКаталога = 3 Тогда
				ДопПараметры.УровниКаталогов[1] = СтрСтроки.Имя;
			КонецЕсли;	 

			ОбойтиДеревоДляОтчетаjUnit(СтрСтроки, ЗаписьXML, ДопПараметры, ДанныеФичи);

			ДопПараметры.ТекУровеньКаталога = ДопПараметры.ТекУровеньКаталога - 1;
		Иначе	
			ОбойтиДеревоДляОтчетаjUnit(СтрСтроки, ЗаписьXML, ДопПараметры, ДанныеФичи);
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьОтчетjUnit(СтруктураОФ) Экспорт
	
	Перем СтарыйКаталог, ПутьКВременномуКаталогуНаСервере, ИмяФайла;
	
	СтарыйКаталог = КаталогВыгрузкиjUnit;
	
	ОтчетВРежимеУФ = Ложь;
	Если НЕ СтруктураОФ.ЭтоОФ Тогда
		ОтчетВРежимеУФ = Истина;
		МассивXMLОтчетаjUnit = Новый Массив;
		СтруктураОФ.Вставить("МассивXMLОтчетаjUnit", МассивXMLОтчетаjUnit);

		ПараметрыОтчетаУФ    = СтруктураОФ;
	КонецЕсли;

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	// делаем запись без BOM
	ЗТ = Новый ЗаписьТекста(ИмяВременногоФайла, "Windows-1251",, Ложь); 
	ЗТ.Закрыть();
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("testsuites");

	// Определим уровни иерархии для отчета
	// если был загружен каталог - тогда фичи буду браться начиная со второго уровня каталога, чтобы не тратить уровень
	// иерархии на очевидное
	
	// JUnit позволяет создать три уровня иерархии для просмотра в Jenkins http://stackoverflow.com/questions/38118602/jenkins-test-result-parsing
	// т.е. может быть два уровня каталогов и третий уровень с тестами
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("УровниКаталогов", Новый Массив);
	ДопПараметры.УровниКаталогов.Добавить("");
	ДопПараметры.УровниКаталогов.Добавить("");
	
	ДопПараметры.Вставить("ТекУровеньКаталога", 0);
	Если СтруктураОФ.Свойство("СтрокаТехническиеДанные") Тогда
		ДопПараметры.Вставить("СтрокаТехническиеДанные", СтруктураОФ.СтрокаТехническиеДанные);
	Иначе	
		ДопПараметры.Вставить("СтрокаТехническиеДанные", Неопределено);
	КонецЕсли;
	
	ОбойтиДеревоДляОтчетаjUnit(ДеревоТестов, ЗаписьXML, ДопПараметры);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	ДД = Новый ДвоичныеДанные(ИмяВременногоФайла);
	СтруктураОФ.Вставить("xml", ДД);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры

Функция ПриложитьСкриншотJUnit(ФайлСкриншота)
	
	СтрокаШаблон = "[[ATTACHMENT|%1/%2]]";
	ОтносительныйПутьККаталогуСкриншотов = СтрЗаменить(
												СтрЗаменить(КаталогВыгрузкиСкриншотов, "\", "/")
												, СтрЗаменить(КаталогПроекта, "\", "/")
												, "");
												
	Если Лев(ОтносительныйПутьККаталогуСкриншотов, 1) <> "/" Тогда
		
		ОтносительныйПутьККаталогуСкриншотов = "/" + ОтносительныйПутьККаталогуСкриншотов;
		
	КонецЕсли;
												
	Результат = СтрЗаменить(СтрокаШаблон, "%1", ОтносительныйПутьККаталогуСкриншотов);
	Результат = СтрЗаменить(Результат,    "%2", ФайлСкриншота);
	
	Возврат Результат;
	
КонецФункции

Функция СведенияОСкриншотахJUnit(МассивРезультатов)
	
	Результат = Новый Соответствие;
	
	Для Каждого Эл Из МассивРезультатов Цикл
		
		Если Эл.МассивСкриншотов.Количество() Тогда
			
			Результат.Вставить(Эл.ИДСтроки, Эл.МассивСкриншотов[0]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Cucumber

Функция ЭтоЦелоеЧисло(Стр)
	Для Ккк = 1 По СтрДлина(Стр) Цикл
		Символ = Сред(Стр, Ккк, 1);
		Если    Символ = "0"
			Или Символ = "1"
			Или Символ = "2"
			Или Символ = "3"
			Или Символ = "4"
			Или Символ = "5"
			Или Символ = "6"
			Или Символ = "7"
			Или Символ = "8"
			Или Символ = "9"
			Тогда
			// это цифра
		Иначе
			Возврат Ложь;	
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ПолучитьНомерСтрокиИзПути(Стр)
	Длина = СтрДлина(Стр);
	Рез   = "";
	Для Ккк = 1 По Длина Цикл
		Символ = Сред(Стр, Длина - Ккк + 1, 1);
		Если ЭтоЦелоеЧисло(Символ) Тогда
			Рез = Символ + Рез;
		Иначе	
			Прервать;
		КонецЕсли;	 
	КонецЦикла; 
	
	Если Рез = "" Тогда
		Рез = "0";
	КонецЕсли;	 
	
	Возврат Число(Рез);
КонецФункции	

Процедура ПолучитьПервоеСлово(Знач Стр, keyword, Name)
	Стр = СокрЛП(СтрЗаменить(Стр, Символы.Таб," "));
	Поз = Найти(Стр," ");
	keyword = Лев(Стр, Поз - 1);
	Name = СокрЛП(Сред(Стр, Поз + 1));
КонецПроцедуры

Процедура ОбойтиДеревоДляОтчетаCucumberJson(Дерево, ЗаписьJson, ДопПараметры, ДанныеФичи = Неопределено)
	Для каждого СтрСтроки Из Дерево.Строки Цикл
		Если      СтрСтроки.Тип = "Фича" Тогда
			
			ЗаписьJson.ЗаписатьНачалоОбъекта(); //начало фичи
			
			ДопПараметры.Вставить("ТекущаяФичаИмя", СтрСтроки.Имя);
			
			МассивСценариев = Новый Массив;
			
			ДанныеФичи = Новый Структура;
			ДанныеФичи.Вставить("МассивСценариев", МассивСценариев);
			ДанныеФичи.Вставить("errors", 0);
			ДанныеФичи.Вставить("skipped", 0);
			ДанныеФичи.Вставить("tests", 0);
			ДанныеФичи.Вставить("failures", 0);
			ДанныеФичи.Вставить("time", 0);
			
			ОбойтиДеревоДляОтчетаCucumberJson(СтрСтроки, ЗаписьJson, ДопПараметры, ДанныеФичи);
			
			ПрефиксИмениСценария = "";
			Если ДобавлятьКИмениСценарияУсловияВыгрузки Тогда
				ПрефиксИмениСценария = ПолучитьПрефиксИмениСценария();
			КонецЕсли;	 

			ЗаписьJSON.ЗаписатьИмяСвойства("uri");
			ЗаписьJSON.ЗаписатьЗначение(СтрСтроки.Имя);
			
			ЗаписьJSON.ЗаписатьИмяСвойства("keyword");
			ЗаписьJSON.ЗаписатьЗначение("Feature");
			
			ЗаписьJSON.ЗаписатьИмяСвойства("id");
			ЗаписьJSON.ЗаписатьЗначение(Транслит(ПрефиксИмениСценария + СтрСтроки.ПолныйПуть));
			
			ЗаписьJSON.ЗаписатьИмяСвойства("name");
			ЗаписьJSON.ЗаписатьЗначение(ПрефиксИмениСценария + СтрСтроки.Имя);

			ЗаписьJSON.ЗаписатьИмяСвойства("description");
			ЗаписьJSON.ЗаписатьЗначение("");

			// теги фичи
			ЗаписьJSON.ЗаписатьИмяСвойства("tags");
			ЗаписьJSON.ЗаписатьНачалоМассива();
			Если ТипЗнч(СтрСтроки.ПроизвольныеЗначения) = Тип("Структура")  Тогда
				МассивТегов = Новый Массив;
				Если СтрСтроки.ПроизвольныеЗначения.Свойство("МассивТегов") Тогда
					МассивТегов = СтрСтроки.ПроизвольныеЗначения.МассивТегов;
				КонецЕсли;	 
				
				Для Каждого СвойстваТега Из МассивТегов Цикл
					ЗаписьJson.ЗаписатьНачалоОбъекта();
					
					ЗаписьJSON.ЗаписатьИмяСвойства("name");
					ЗаписьJSON.ЗаписатьЗначение("@" + СвойстваТега.Тег);
					
					ЗаписьJSON.ЗаписатьИмяСвойства("line");
					ЗаписьJSON.ЗаписатьЗначение(СвойстваТега.НомерСтроки);
					
					ЗаписьJson.ЗаписатьКонецОбъекта();
				КонецЦикла;	
			КонецЕсли;	 
			ЗаписьJSON.ЗаписатьКонецМассива();

			ЗаписьJSON.ЗаписатьИмяСвойства("elements");
			ЗаписьJSON.ЗаписатьНачалоМассива(); //elements

			НомерСценария = 0;
			Для Каждого Сценарий Из МассивСценариев Цикл
				НомерСценария = НомерСценария + 1;
				ЗаписьJson.ЗаписатьНачалоОбъекта();
				
				ЗаписьJSON.ЗаписатьИмяСвойства("keyword");
				ЗаписьJSON.ЗаписатьЗначение("Scenario");

				ЗаписьJSON.ЗаписатьИмяСвойства("id");
				ЗаписьJSON.ЗаписатьЗначение(Транслит(ДопПараметры.ТекущаяФичаИмя + "-" +  Сценарий.name + НомерСценария));
				
				ЗаписьJSON.ЗаписатьИмяСвойства("name");
				ЗаписьJSON.ЗаписатьЗначение(Сценарий.name);
				
				ЗаписьJSON.ЗаписатьИмяСвойства("line");
				ЗаписьJSON.ЗаписатьЗначение(Сценарий.НомерСтрокиВФиче);
				
				ЗаписьJSON.ЗаписатьИмяСвойства("description");
				ЗаписьJSON.ЗаписатьЗначение("");
				
				// теги сценария
				ЗаписьJSON.ЗаписатьИмяСвойства("tags");
				ЗаписьJSON.ЗаписатьНачалоМассива();
				Если Сценарий.МассивТегов <> Неопределено Тогда
					Для Каждого СвойстваТега Из Сценарий.МассивТегов Цикл
						ЗаписьJson.ЗаписатьНачалоОбъекта();
						
						ЗаписьJSON.ЗаписатьИмяСвойства("name");
						ЗаписьJSON.ЗаписатьЗначение("@" + СвойстваТега.Тег);
						
						ЗаписьJSON.ЗаписатьИмяСвойства("line");
						ЗаписьJSON.ЗаписатьЗначение(СвойстваТега.НомерСтроки);
						
						ЗаписьJson.ЗаписатьКонецОбъекта();
					КонецЦикла;	
				КонецЕсли;	 
				ЗаписьJSON.ЗаписатьКонецМассива();

				ЗаписьJSON.ЗаписатьИмяСвойства("type");
				ЗаписьJSON.ЗаписатьЗначение("scenario");
				
				// шаги сценария
				ЗаписьJSON.ЗаписатьИмяСвойства("steps");
				ЗаписьJSON.ЗаписатьНачалоМассива();
				ЕстьУпавшийШаг        = Ложь;
				ЕстьНеРеализованыйШаг = Ложь;
				Для Каждого Шаг Из Сценарий.МассивШагов Цикл
					ЗаписьJson.ЗаписатьНачалоОбъекта();
					
					keyword = "";
					name    = "";
					ПолучитьПервоеСлово(Шаг.name, keyword, name);
					
					ЗаписьJSON.ЗаписатьИмяСвойства("keyword");
					ЗаписьJSON.ЗаписатьЗначение(keyword);
					
					ЗаписьJSON.ЗаписатьИмяСвойства("name");
					ЗаписьJSON.ЗаписатьЗначение(name);
					
					ЗаписьJSON.ЗаписатьИмяСвойства("line");
					ЗаписьJSON.ЗаписатьЗначение(Шаг.НомерСтрокиВФиче);
					
					МассивРисунков = Неопределено;
					Если Шаг.Свойство("embeddings", МассивРисунков) И МассивРисунков.Количество() > 0 Тогда
						
						ЗаписьJson.ЗаписатьИмяСвойства("embeddings");
						ЗаписьJson.ЗаписатьНачалоМассива();
						Для каждого Элемент Из МассивРисунков Цикл
							
							ЗаписьJson.ЗаписатьНачалоОбъекта();
							ЗаписьJson.ЗаписатьИмяСвойства("mime_type");
							ЗаписьJson.ЗаписатьЗначение(Элемент["mime_type"]);
							
							ЗаписьJson.ЗаписатьИмяСвойства("data");
							ЗаписьJson.ЗаписатьЗначение(Формат(Элемент["data"], "ЧГ=; ЧН=0"));
							ЗаписьJson.ЗаписатьКонецОбъекта();
						КонецЦикла;
						
						ЗаписьJSON.ЗаписатьКонецМассива();
					КонецЕсли;

					// статус шага
					ЗаписьJSON.ЗаписатьИмяСвойства("result");
					ЗаписьJson.ЗаписатьНачалоОбъекта();
					
					ЗаписьJSON.ЗаписатьИмяСвойства("status");
					Если Шаг.Статус = "Failed" Тогда
						ЗаписьJSON.ЗаписатьЗначение("failed");
						
						ЗаписьJSON.ЗаписатьИмяСвойства("error_message");
						Если Шаг.Свойство("message") Тогда
							ЗаписьJSON.ЗаписатьЗначение(Шаг.message);
						Иначе	
							// значит ошибка возникла не в шагах, а раньше, например в ПередНачаломСценария()
							ЗаписьJSON.ЗаписатьЗначение(Сценарий.message);
						КонецЕсли;	 
						
						ЕстьУпавшийШаг = Истина;
					ИначеЕсли Шаг.Статус = "Pending" Тогда
						Если ЕстьУпавшийШаг Тогда
							ЗаписьJSON.ЗаписатьЗначение("skipped");
						Иначе	
							ЗаписьJSON.ЗаписатьЗначение("pending");
							ЕстьНеРеализованыйШаг = Истина;
						КонецЕсли;	 
					Иначе	
						Если ЕстьУпавшийШаг ИЛИ ЕстьНеРеализованыйШаг Тогда
							ЗаписьJSON.ЗаписатьЗначение("skipped");
						Иначе	
							ЗаписьJSON.ЗаписатьЗначение("passed");
						КонецЕсли;	 
					КонецЕсли;	 
					
					ЗаписьJSON.ЗаписатьИмяСвойства("duration");
					ЗаписьJSON.ЗаписатьЗначение((Шаг.stop - Шаг.start) * 1000000);
					
					ЗаписьJson.ЗаписатьКонецОбъекта();

					ЗаписьJson.ЗаписатьКонецОбъекта();
				КонецЦикла;	
				ЗаписьJSON.ЗаписатьКонецМассива();

				ЗаписьJson.ЗаписатьКонецОбъекта();
			КонецЦикла;	

			ЗаписьJSON.ЗаписатьКонецМассива(); //elements
			ЗаписьJson.ЗаписатьКонецОбъекта(); //фича
		ИначеЕсли (СтрСтроки.Тип = "Сценарий") ИЛИ (СтрСтроки.Тип = "Пример") Тогда
			Если (СтрСтроки.ДопТип = "Контекст") Тогда
				// его не неадо добавлять в отчет, т.к. этот сценарий включается в каждый сценарий
				
			ИначеЕсли (СтрСтроки.ДопТип = "СтруктураСценария") ИЛИ (СтрСтроки.Строки.Количество() = 0) Тогда
				// его не неадо добавлять в отчет, т.к. этот сценарий явно не выполняется
				ОбойтиДеревоДляОтчетаCucumberJson(СтрСтроки, ЗаписьJson, ДопПараметры, ДанныеФичи);
			Иначе
				
				РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(СтрСтроки);
				
				Если РезультатПрохожденияТестовСценария = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Сценарий          = Новый Структура;
				ДанныеФичи.МассивСценариев.Добавить(Сценарий);
				
				МассивТегов = Новый Массив;
				
				Если СтрСтроки.Тип = "Пример" Тогда
					Сценарий.Вставить("name", СтрСтроки.Родитель.Родитель.Имя + " №" + (СтрСтроки.Родитель.Строки.Индекс(СтрСтроки)));//для структуры сценария надо вести нумерацию
				Иначе	
					Сценарий.Вставить("name", СтрСтроки.Имя);
				КонецЕсли; 
				
				classname = Определить_classname(ДопПараметры, МассивТегов, РезультатПрохожденияТестовСценария, СтрСтроки);
				Сценарий.Вставить("classname", classname);
				Сценарий.Вставить("ПолныйПуть", СтрСтроки.ПолныйПуть);
				Если ТипЗнч(СтрСтроки.ПроизвольныеЗначения) = Тип("Структура")  Тогда
					МассивТегов = Новый Массив;
					Если СтрСтроки.ПроизвольныеЗначения.Свойство("МассивТегов") Тогда
						МассивТегов = СтрСтроки.ПроизвольныеЗначения.МассивТегов;
					КонецЕсли;	 
				Иначе	
					МассивТегов = Новый Массив;
				КонецЕсли;	 
				Сценарий.Вставить("МассивТегов", МассивТегов);
				
				Если РезультатПрохожденияТестовСценария.Свойство("ВремяОкончания") Тогда
					Сценарий.Вставить("time", РезультатПрохожденияТестовСценария.ВремяОкончания - РезультатПрохожденияТестовСценария.ВремяНачала);
				Иначе	
					Сценарий.Вставить("time", 0);
				КонецЕсли;	 
				ДанныеФичи.time = ДанныеФичи.time + Сценарий.time;
				
				Сценарий.Вставить("МассивШагов", Новый Массив);
				Сценарий.Вставить("id", ПолучитьНомерСтрокиИзПути(СтрСтроки.ПолныйПуть));
				Сценарий.Вставить("НомерСтрокиВФиче", СтрСтроки.НомерСтрокиВФиче);

				ДанныеШага = Неопределено;
				
				Если СтрСтроки.ДопТип = "СтруктураСценария" Тогда
					ОбойтиДеревоДляОтчетаCucumberJson(СтрСтроки, ЗаписьJson, ДопПараметры, ДанныеФичи);
				Иначе
					Для каждого СтрРезультатПрохожденияТестовШагов Из РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов Цикл
						
						ДанныеШага = Новый Структура;
						ДанныеШага.Вставить("name", СтрРезультатПрохожденияТестовШагов.Имя);
						ДанныеШага.Вставить("start", 0);
						ДанныеШага.Вставить("stop", 0);
						ДанныеШага.Вставить("Статус", СтрРезультатПрохожденияТестовШагов.Статус);
						ДанныеШага.Вставить("НомерСтрокиВФиче", РезультатПрохожденияТестовСценария.НомерСтрокиВФиче);
						
						Если СтрРезультатПрохожденияТестовШагов.ВремяНачала <> Неопределено Тогда
							ДанныеШага.Вставить("start", СтрРезультатПрохожденияТестовШагов.ВремяНачала - РазницаВМилисекундахМеждуЮниксИНачалЭпохи);
							ДанныеШага.Вставить("stop", СтрРезультатПрохожденияТестовШагов.ВремяОкончания - РазницаВМилисекундахМеждуЮниксИНачалЭпохи);
						КонецЕсли;	
						
						Если РезультатПрохожденияТестовСценария.Свойство("МассивСкриншотов") И СтрРезультатПрохожденияТестовШагов.Статус = "Failed" Тогда
							// значит есть скриншоты
							
							ДанныеШага.Вставить("embeddings", Новый Массив);
							
							Для каждого СтруктураСкриншот Из РезультатПрохожденияТестовСценария.МассивСкриншотов Цикл
								СтрокаРисунка = Base64Строка(СтруктураСкриншот.ДвоичныеДанные);
								СтрокаРисунка = СтрЗаменить(СтрокаРисунка, Символы.ВК, "");
								СтрокаРисунка = СтрЗаменить(СтрокаРисунка, Символы.ПС, "");
								СтруктураРисунка = Новый Структура("mime_type, data", "image/png", СтрокаРисунка);
								ДанныеШага["embeddings"].Добавить(СтруктураРисунка);
							КонецЦикла;
						КонецЕсли;
						
						Сценарий.МассивШагов.Добавить(ДанныеШага);
						
					КонецЦикла;
				КонецЕсли;	 
				
				Сценарий.Вставить("Статус", СтрСтроки.Статус);
				
				ДанныеФичи.tests = ДанныеФичи.tests + 1;
				
				Если (СтрСтроки.Статус = "Failed")  Тогда
					Сценарий.Вставить("message", РезультатПрохожденияТестовСценария.ОписаниеОшибки);
					Если ДанныеШага <> Неопределено Тогда
						ДанныеШага.Вставить("message", РезультатПрохожденияТестовСценария.ОписаниеОшибки);
					КонецЕсли;	 
					ДанныеФичи.failures = ДанныеФичи.failures + 1;
				ИначеЕсли (СтрСтроки.Статус = "Pending") Тогда
					Сценарий.Вставить("message", РезультатПрохожденияТестовСценария.ОписаниеОшибки);
					Если ДанныеШага <> Неопределено Тогда
						ДанныеШага.Вставить("message", РезультатПрохожденияТестовСценария.ОписаниеОшибки);
					КонецЕсли;	 
					ДанныеФичи.skipped = ДанныеФичи.skipped + 1;
				КонецЕсли;
			КонецЕсли; 
		ИначеЕсли СтрСтроки.Тип = "Шаг" Тогда
			Если СтрСтроки.Родитель.ДопТип = "СтруктураСценария" Тогда
				// его не неадо добавлять в отчет, т.к. этот сценарий явно не выполняется
				ОбойтиДеревоДляОтчетаCucumberJson(СтрСтроки, ЗаписьJSON, ДопПараметры, ДанныеФичи);
			КонецЕсли; 
		ИначеЕсли СтрСтроки.Тип = "Каталог" Тогда
			
			ДопПараметры.ТекУровеньКаталога = ДопПараметры.ТекУровеньКаталога + 1;
			// Запоминаем уровни каталогов. Нас интересует только уровень 2 и 3. Т.е. если каталоги лежат как
			// features\Core\FeatureLoad, то мы запомним только Core\FeatureLoad
			Если ДопПараметры.ТекУровеньКаталога = 2 Тогда
				ДопПараметры.УровниКаталогов[0] = СтрСтроки.Имя;
			ИначеЕсли ДопПараметры.ТекУровеньКаталога = 3 Тогда
				ДопПараметры.УровниКаталогов[1] = СтрСтроки.Имя;
			КонецЕсли;	 

			ОбойтиДеревоДляОтчетаCucumberJson(СтрСтроки, ЗаписьJSON, ДопПараметры, ДанныеФичи);

			ДопПараметры.ТекУровеньКаталога = ДопПараметры.ТекУровеньКаталога - 1;
		Иначе	
			ОбойтиДеревоДляОтчетаCucumberJson(СтрСтроки, ЗаписьJSON, ДопПараметры, ДанныеФичи);
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьОтчетCucumberJson(СтруктураОФ) Экспорт
	Перем СтарыйКаталог, ПутьКВременномуКаталогуНаСервере, ИмяФайла;
	СтарыйКаталог = КаталогВыгрузкиCucumberJson;
	
	ОтчетВРежимеУФ = Ложь;
	Если СтруктураОФ.ЭтоОФ Тогда
		ОтчетВРежимеУФ = Ложь;
	Иначе	
		ОтчетВРежимеУФ = Истина;
		МассивJsonОтчетаCucumberJson = Новый Массив;
		СтруктураОФ.Вставить("МассивJsonОтчетаCucumberJson", МассивJsonОтчетаCucumberJson);

		ПараметрыОтчетаУФ    = СтруктураОФ;
	КонецЕсли;

	ВременныйJson = ПолучитьИмяВременногоФайла("json");
	
	// делаем запись без BOM
	ЗТ = Новый ЗаписьТекста(ВременныйJson, "Windows-1251",, Ложь); 
	ЗТ.Закрыть();
	
	Попытка
		ЗаписьJson = Вычислить("Новый ЗаписьJson()");
		ТиповойJSON = Истина;
	Исключение
		Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
			ЗаписьJson = ПолучитьФорму("ЗаписьJSON");
		Иначе
			Возврат;
		КонецЕсли;
		ТиповойJSON = Ложь;
	КонецПопытки;
	Если ТиповойJSON Тогда
		ЗаписьJson.ОткрытьФайл(ВременныйJson,, Ложь, Вычислить("Новый ПараметрыЗаписиJSON(,Символы.Таб)"));
	Иначе
		ЗаписьJson.ОткрытьФайл(ВременныйJson, Символы.Таб);
	КонецЕсли;
	
	ЗаписьJson.ЗаписатьНачалоМассива();
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("УровниКаталогов", Новый Массив);
	ДопПараметры.УровниКаталогов.Добавить("");
	ДопПараметры.УровниКаталогов.Добавить("");
	
	ДопПараметры.Вставить("ТекУровеньКаталога", 0);
	ОбойтиДеревоДляОтчетаCucumberJson(ДеревоТестов, ЗаписьJson, ДопПараметры);
	
	ЗаписьJson.ЗаписатьКонецМассива();
	Если ТиповойJSON Тогда
		ЗаписьJson.Закрыть();
	Иначе
		ЗаписьJson.ЗакрытьФайл();
	КонецЕсли;
	
	ДД = Новый ДвоичныеДанные(ВременныйJson);
	СтруктураОФ.Вставить("Json", ДД);
	УдалитьФайлы(ВременныйJson);
	
КонецПроцедуры

#КонецОбласти

#Область ОтчетСППР

Функция СтруктураФайлаОшибкиСППР()
	
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ВерсияФормата", "");
	СтруктураОтчета.Вставить("УИ", "");
	СтруктураОтчета.Вставить("ТипОшибки", "");
	СтруктураОтчета.Вставить("ИсходнаяИнформация", "");
	СтруктураОтчета.Вставить("ПорядокВоспроизведения", "");
	СтруктураОтчета.Вставить("ОжидаемоеПоведение", "");
	СтруктураОтчета.Вставить("ВерсияПлатформы", "");
	СтруктураОтчета.Вставить("КлиентОперативнаяПамять", 0);
	СтруктураОтчета.Вставить("КлиентВерсияОС", "");
	СтруктураОтчета.Вставить("КлиентПроцессор", "");
	СтруктураОтчета.Вставить("КлиентТипПлатформы", "");
	СтруктураОтчета.Вставить("КлиентИнформацияПрограммыПросмотра", "");
	СтруктураОтчета.Вставить("КлиентТекущаяДата", Дата(1, 1, 1));
	СтруктураОтчета.Вставить("ОбъектыМетаданных", Новый Массив);
	СтруктураОтчета.Вставить("ИменаФайлов", Новый Массив);
	СтруктураОтчета.Вставить("СерверОперативнаяПамять", 0);
	СтруктураОтчета.Вставить("СерверВерсияОС", "");
	СтруктураОтчета.Вставить("СерверПроцессор", "");
	СтруктураОтчета.Вставить("СерверТипПлатформы", "");
	СтруктураОтчета.Вставить("СерверИнформацияПрограммыПросмотра", "");
	СтруктураОтчета.Вставить("ВерсияКонфигурации", "");
	СтруктураОтчета.Вставить("ИмяКонфигурации", "");
	СтруктураОтчета.Вставить("ДатаОбнаружения", Дата(1, 1, 1));
	СтруктураОтчета.Вставить("Ответственный", "");
	СтруктураОтчета.Вставить("КодСценария", "");
	СтруктураОтчета.Вставить("ИмяСценария", "");
	СтруктураОтчета.Вставить("ДостоверностьОбнаружения", "");
	СтруктураОтчета.Вставить("Срочность", "");
	СтруктураОтчета.Вставить("АдресРепозитория", "");
	
	Возврат СтруктураОтчета;

КонецФункции

Процедура ОбойтиДеревоДляОтчетаСППР(Дерево, ДопПараметры)
	
	Для каждого СтрокаДерева Из Дерево.Строки Цикл
		
		Если СтрокаДерева.Тип = "Фича" Тогда
			
			ДопПараметры.Вставить("ТекущаяФичаИмя", СтрокаДерева.Имя);
			
			МассивСценариев = Новый Массив;
			
			ДанныеФичи = Новый Структура;
			ДанныеФичи.Вставить("МассивСценариев", МассивСценариев);
			ДанныеФичи.Вставить("errors", 0);
			ДанныеФичи.Вставить("skipped", 0);
			ДанныеФичи.Вставить("tests", 0);
			ДанныеФичи.Вставить("failures", 0);
			ДанныеФичи.Вставить("time", 0);
			
			ОбойтиДеревоДляОтчетаСППР(СтрокаДерева, ДопПараметры);
			
			ПрефиксИмениСценария = "";
			Если ДобавлятьКИмениСценарияУсловияВыгрузки Тогда
				ПрефиксИмениСценария = ПолучитьПрефиксИмениСценария();
			КонецЕсли;	 
			
			Для Каждого Сценарий Из МассивСценариев Цикл
				Если Сценарий.Статус = "Failed" Тогда
					ТекстОшибкиКратко = "";
					Если ТипЗнч(Сценарий.СтрокаСценария.ПроизвольныеЗначения) = Тип("Структура") Тогда
						Если Сценарий.СтрокаСценария.ПроизвольныеЗначения.Свойство("ТекстОшибкиКратко") Тогда
							ТекстОшибкиКратко = Сценарий.СтрокаСценария.ПроизвольныеЗначения.ТекстОшибкиКратко;
						КонецЕсли;	 
						
						ОшибкаAssert = Ложь;
						Если Сценарий.СтрокаСценария.ПроизвольныеЗначения.Свойство("ОшибкаAssert") Тогда
							ОшибкаAssert = Сценарий.СтрокаСценария.ПроизвольныеЗначения.ОшибкаAssert;
						КонецЕсли;
						
					КонецЕсли;	 
					
					ПолныйТекстОшибкиjUnut = ПолныйТекстОшибкиjUnut(Сценарий.message, ДопПараметры);
					
				ИначеЕсли Сценарий.Статус = "Pending" Тогда
					
				КонецЕсли;	 
			КонецЦикла;	
			
		ИначеЕсли СтрокаДерева.Тип = "Сценарий" Или СтрокаДерева.Тип = "Пример" Тогда
			Если СтрокаДерева.ДопТип = "Контекст" Тогда
				// его не нужно добавлять в отчет, т.к. этот сценарий включается в каждый сценарий
				
			ИначеЕсли СтрокаДерева.ДопТип = "СтруктураСценария" Или СтрокаДерева.Строки.Количество() = 0 Тогда
				// его не нужно добавлять в отчет, т.к. этот сценарий явно не выполняется
				ОбойтиДеревоДляОтчетаСППР(СтрокаДерева, ДопПараметры);
			Иначе				
				РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(СтрокаДерева);
				
				Если РезультатПрохожденияТестовСценария = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
							
				МассивТегов = Новый Массив;
			
				Если СтрокаДерева.ДопТип = "СтруктураСценария" Тогда
					ОбойтиДеревоДляОтчетаСППР(СтрокаДерева, ДопПараметры);
				КонецЕсли;	 
					
				Если СтрокаДерева.Статус = "Failed" Или СтрокаДерева.Статус = "Pending" Тогда
					// Записываем xml с ошибкой
					СтруктураОшибки = СтруктураФайлаОшибкиСППР();
					
					СтруктураОшибки.ВерсияФормата = "1.4";
					СтруктураОшибки.УИ = Строка(Новый УникальныйИдентификатор);
					СтруктураОшибки.ТипОшибки = "Ошибка сценария";
					
					ПодробноеОписаниеОшибки = "";
					ОписаниеОшибки = "";
					Если РезультатПрохожденияТестовСценария.Свойство("ОписаниеОшибки") Тогда
						ПодробноеОписаниеОшибкиAllure2(РезультатПрохожденияТестовСценария.ОписаниеОшибки, ОписаниеОшибки, ПодробноеОписаниеОшибки);
					КонецЕсли;	 
					
					СтруктураОшибки.Вставить("ИсходнаяИнформация", ОписаниеОшибки);
					СтруктураОшибки.Вставить("ПорядокВоспроизведения", ПодробноеОписаниеОшибки);
					
					СистемнаяИнформация = Новый СистемнаяИнформация;
					
					СтруктураОшибки.Вставить("ВерсияПлатформы", СистемнаяИнформация.ВерсияПриложения);
					СтруктураОшибки.Вставить("КлиентОперативнаяПамять", СистемнаяИнформация.ОперативнаяПамять);
					СтруктураОшибки.Вставить("КлиентВерсияОС", СистемнаяИнформация.ВерсияОС);
					СтруктураОшибки.Вставить("КлиентПроцессор", СистемнаяИнформация.Процессор);
					СтруктураОшибки.Вставить("КлиентТипПлатформы", Строка(СистемнаяИнформация.ТипПлатформы));
					СтруктураОшибки.Вставить("КлиентИнформацияПрограммыПросмотра", СистемнаяИнформация.ИнформацияПрограммыПросмотра);
					СтруктураОшибки.Вставить("КлиентТекущаяДата", ТекущаяДатаСеанса());
															
					ИменаФайлов = Новый Массив;
					Если РезультатПрохожденияТестовСценария.Свойство("МассивСкриншотов") Тогда
						Для Каждого ДанныеФайла Из РезультатПрохожденияТестовСценария.МассивСкриншотов Цикл
							ИменаФайлов.Добавить(КаталогВыгрузкиСППР + "\" + ДанныеФайла.ИмяФайла);
						КонецЦикла;	 
					КонецЕсли;	 
					Если РезультатПрохожденияТестовСценария.Свойство("МассивФайлов") Тогда
						Для Каждого ИмяФайла Из РезультатПрохожденияТестовСценария.МассивФайлов Цикл
							Файл = Новый Файл(ИмяФайла);
							ИменаФайлов.Добавить(Файл.Имя);
						КонецЦикла;	 
					КонецЕсли;	 
					СтруктураОшибки.Вставить("ИменаФайлов", ИменаФайлов);
					СтруктураОшибки.Вставить("ВерсияПлатформы", СистемнаяИнформация.ВерсияПриложения);
					СтруктураОшибки.Вставить("СерверОперативнаяПамять", СистемнаяИнформация.ОперативнаяПамять);
					СтруктураОшибки.Вставить("СерверВерсияОС", СистемнаяИнформация.ВерсияОС);
					СтруктураОшибки.Вставить("СерверПроцессор", СистемнаяИнформация.Процессор);
					СтруктураОшибки.Вставить("СерверТипПлатформы", Строка(СистемнаяИнформация.ТипПлатформы));
					СтруктураОшибки.Вставить("СерверИнформацияПрограммыПросмотра", СистемнаяИнформация.ИнформацияПрограммыПросмотра);					
					СтруктураОшибки.Вставить("ВерсияКонфигурации", Метаданные.Версия);
					СтруктураОшибки.Вставить("ИмяКонфигурации", Метаданные.Имя);
					СтруктураОшибки.Вставить("ДатаОбнаружения", ТекущаяДатаСеанса());
					СтруктураОшибки.Вставить("ДостоверностьОбнаружения", "Высокая");
					
					ЗначениеТегаКодСценария = ЗначениеИзТегаСценария(СтрокаДерева, "КодСценария=");
					Если ЗначениеТегаКодСценария <> Неопределено Тогда
						СтруктураОшибки.Вставить("КодСценария", ЗначениеТегаКодСценария);
					КонецЕсли;	 
					СтруктураОшибки.Вставить("ИмяСценария", СтрокаДерева.Имя);
					
					ЗаписьXML = Новый ЗаписьXML;
					ЗаписьXML.УстановитьСтроку();
					
					СериализаторXDTO.ЗаписатьXML(ЗаписьXML, СтруктураОшибки);
					
					ТекстОшибкиXML = ЗаписьXML.Закрыть();
					
					ДанныеОшибки = Новый Структура;
					ДанныеОшибки.Вставить("ТекстОшибкиXML", ТекстОшибкиXML);
					ДопПараметры.МассивДанныхОшибок.Добавить(ДанныеОшибки);
					
				КонецЕсли; 
			КонецЕсли; 
		ИначеЕсли СтрокаДерева.Тип = "Шаг" Тогда
			Если СтрокаДерева.Родитель.ДопТип = "СтруктураСценария" Тогда
				// его не неадо добавлять в отчет, т.к. этот сценарий явно не выполняется
				ОбойтиДеревоДляОтчетаСППР(СтрокаДерева, ДопПараметры);
			КонецЕсли; 
		ИначеЕсли СтрокаДерева.Тип = "Каталог" Тогда
			
			ДопПараметры.ТекУровеньКаталога = ДопПараметры.ТекУровеньКаталога + 1;
			// Запоминаем уровни каталогов. Нас интересует только уровень 2 и 3. Т.е. если каталоги лежат как
			// features\Core\FeatureLoad, то мы запомним только Core\FeatureLoad
			Если ДопПараметры.ТекУровеньКаталога = 2 Тогда
				ДопПараметры.УровниКаталогов[0] = СтрокаДерева.Имя;
			ИначеЕсли ДопПараметры.ТекУровеньКаталога = 3 Тогда
				ДопПараметры.УровниКаталогов[1] = СтрокаДерева.Имя;
			КонецЕсли;	 
			
			ОбойтиДеревоДляОтчетаСППР(СтрокаДерева, ДопПараметры);
			
			ДопПараметры.ТекУровеньКаталога = ДопПараметры.ТекУровеньКаталога - 1;
		Иначе	
			ОбойтиДеревоДляОтчетаСППР(СтрокаДерева, ДопПараметры);
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры 

Процедура СформироватьОтчетСППР(СтруктураДанных) Экспорт
	
	СтруктураДанных.Вставить("ТекУровеньКаталога", 0);
	СтруктураДанных.Вставить("УровниКаталогов", Новый Массив);
	СтруктураДанных.УровниКаталогов.Добавить("");
	СтруктураДанных.УровниКаталогов.Добавить("");
	
	ОтчетВРежимеУФ = Истина;
	ПараметрыОтчетаУФ = СтруктураДанных;
	
	ОбойтиДеревоДляОтчетаСППР(ДеревоТестов, СтруктураДанных);
	
КонецПроцедуры

#КонецОбласти

#Область Ассерты

#Область Ассерты_EN

// Проверяет, что переданное значение является Истиной.
//
// Параметры:
//   Condition - Булево - Проверяемое значение
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура Assert(Condition, Message = "") Экспорт
	Проверить(Condition, Message);
КонецПроцедуры

// Проверяет, что переданное значение является Истиной.
//
// Параметры:
//   Condition - Булево - Проверяемое значение
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура AssertTrue(Condition, Message = "") Экспорт
	ПроверитьИстину(Condition, Message);
КонецПроцедуры

// Проверяет, что переданное значение является Ложью.
//
// Параметры:
//   Condition - Булево - Проверяемое значение
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура AssertFalse(Condition, Message = "") Экспорт
	ПроверитьЛожь(Condition, Message);
КонецПроцедуры

// Проверяет, что переданная дата входит в переданный период дат.
//
// Параметры:
//   Period - СтандартныйПериод - Период дат, который будет использован для проверки.
//   Date   - Дата - Проверяемая дата.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура AssertDate(Period, Date, Message = "") Экспорт
	ПроверитьДату(Period, Date, Message);
КонецПроцедуры

// Проверяет равенство дат с точностью до двух секунд.
//
// Параметры:
//   ExpectedDate - Дата - Первая проверяемая дата.
//   ActualDate - Дата - Вторая проверяемая дата.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура AssertDateWithin2Seconds(ExpectedDate, ActualDate, Message = "") Экспорт
	ПроверитьРавенствоДатСТочностью2Секунды(ExpectedDate, ActualDate, Message);
КонецПроцедуры

// Проверяет равенство двух значений.
//
// Параметры:
//   Expected - Произвольный - Первое проверяемое значение.
//   Actual - Произвольный - Второе проверяемое значение.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура AssertEqual(Expected, Actual, Message = "") Экспорт
	ПроверитьРавенство(Expected, Actual, Message);
КонецПроцедуры

// Проверяет неравенство двух значений.
//
// Параметры:
//   NotExpected - Произвольный - Первое проверяемое значение.
//   Actual - Произвольный - Второе проверяемое значение.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура AssertNotEqual(NotExpected, Actual, Message = "") Экспорт
	ПроверитьНеРавенство(NotExpected, Actual, Message);
КонецПроцедуры

// Проверяет, что второе значение больше первого.
//
// Параметры:
//   ExpectedNumber - Число, Строка, Дата - Первое проверяемое значение.
//   ActualNumber - Число, Строка, Дата - Второе проверяемое значение.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура AssertGreater(ExpectedNumber, ActualNumber, Message = "") Экспорт
	ПроверитьБольше(ExpectedNumber, ActualNumber, Message);
КонецПроцедуры

// Проверяет, что второе значение больше или равено первому.
//
// Параметры:
//   ExpectedNumber - Число, Строка, Дата - Первое проверяемое значение.
//   ActualNumber - Число, Строка, Дата - Второе проверяемое значение.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура AssertGreaterOrEqual(ExpectedNumber, ActualNumber, Message = "") Экспорт
	ПроверитьБольшеИлиРавно(ExpectedNumber, ActualNumber, Message);
КонецПроцедуры

// Проверяет, что второе значение меньше первого.
//
// Параметры:
//   ExpectedNumber - Число, Строка, Дата - Первое проверяемое значение.
//   ActualNumber - Число, Строка, Дата - Второе проверяемое значение.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура AssertLess(ExpectedNumber, ActualNumber, Message = "") Экспорт
	ПроверитьМеньше(ExpectedNumber, ActualNumber, Message);
КонецПроцедуры

// Проверяет, что второе значение меньше или равное первому.
//
// Параметры:
//   ExpectedNumber - Число, Строка, Дата - Первое проверяемое значение.
//   ActualNumber - Число, Строка, Дата - Второе проверяемое значение.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура AssertLessOrEqual(ExpectedNumber, ActualNumber, Message = "") Экспорт
	ПроверитьМеньшеИлиРавно(ExpectedNumber, ActualNumber, Message);
КонецПроцедуры

// Проверяет, что переданное выражение корректно выполнилось без ошибок.
//
// Параметры:
//   Algorithm - Строка - Строковое выражение, которое будет выполнено.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура AssertExecuted(Знач Algorithm, Знач Message = "") Экспорт
	ПроверитьВыполнилось(Algorithm,  Message);
КонецПроцедуры

// Проверяет, что данный метод у объекта корректно выполнилось без ошибок.
//
// Параметры:
//   Object - Произвольный - Объект, методо которого будет проверяться.
//   MethodName - Строка - Имя метода.
//   ArgsOrMessage - Строка, Массив
//       Если передн массив, то из массива будут получены параметры метода для выполнения.
//       Если передана строка, тогда параметр используется вместо параметра ДопСообщениеОшибки.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура AssertMethodExecuted(Object, Знач MethodName, ArgsOrMessage = Неопределено, Знач Message = "") Экспорт
	ПроверитьМетодВыполнился(Object, MethodName, ArgsOrMessage, Message);
КонецПроцедуры

// Проверяет, что переданное выражение не выполнилось без ошибок.
//
// Параметры:
//   Algorithm - Строка - Строковое выражение, которое будет выполнено.
//   ThrowsExceptionOrMessage - Строка - По этой строке будет выполнен поиск в тексте исключения. Если строка не найдена, тогда будет вызвано исключение.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура AssertNotExecuted(Знач Algorithm,  Знач ThrowsExceptionOrMessage = "", Знач Message = "") Экспорт
	ПроверитьНеВыполнилось(Algorithm, ThrowsExceptionOrMessage, Message);
КонецПроцедуры

// Проверяет, что данный метод у объекта вызвал исключение при выполнении.
//
// Параметры:
//   Object - Произвольный - Объект, методо которого будет проверяться.
//   MethodName - Строка - Имя метода.
//   ArgsOrThrowsException - Строка, Массив
//       Если передн массив, то из массива будут получены параметры метода для выполнения.
//       Если передана строка, тогда параметр используется вместо параметра ДопСообщениеОшибки.
//   ThrowsExceptionOrMessage - Строка - Строка, должна быть в строке исключения метода.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура AssertMethodNotExecuted(Object, MethodName, ArgsOrThrowsException, Знач ThrowsExceptionOrMessage = "", Знач Message = "") Экспорт
	ПроверитьМетодНеВыполнился(Object, MethodName, ArgsOrThrowsException, ThrowsExceptionOrMessage, Message);
КонецПроцедуры

// Проверяет, что переданное значение не является пустым.
//
// Параметры:
//   Value - Произвольный - Проверяемое на пустоту значение.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура AssertFilled(Value, Message = "") Экспорт
	ПроверитьЗаполненность(Value, Message);
КонецПроцедуры

// Проверяет, что переданное значение является пустым.
//
// Параметры:
//   Value - Произвольное - Проверяемое на пустоту значение.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура AssertNotFilled(Value, Message = "") Экспорт
	ПроверитьНеЗаполненность(Value, Message);
КонецПроцедуры

// Проверяет, что переданное значение нужного типа.
//
// Параметры:
//   Value - Произвольный - Проверяемое значение.
//   TypeOrTypeName       - Строка, Тип  - Тип значения.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура AssertType(Value, TypeOrTypeName, Message = "") Экспорт
	ПроверитьТип(Value, TypeOrTypeName, Message);
КонецПроцедуры

// Проверяет, что искомая подстрока входит в строку.
//
// Параметры:
//   String             - Строка - Строка, в которой происходит поиск.
//   Substring    - Строка - Строка, которая ищется.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура AssertStringContains(String, Substring, Message = "") Экспорт
	ПроверитьВхождение(String, Substring, Message);
КонецПроцедуры

// Проверяет, что значение входит в коллекцию.
//
// Параметры:
//   Item            - Произвольный - Значение, которое будет искаться в коллекции.
//   Collection          - Массив, Структура, Соответствие, ФиксированныйМассив, ФиксированнаяСтруктура, ФиксированноеСоответствие, СписокЗначений - Коллекция значений.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура AssertCollectionContains(Item, Collection, Message = "") Экспорт
	ПроверитьВхождениеВКоллекцию(Item, Collection, Message);
КонецПроцедуры

// Проверяет, что запрос СКД не вызовет ошибок компиляции.
//
// Параметры:
//   ТекстЗапроса       - Строка - Текст запроса.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//

Процедура AssertПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки = "") Экспорт
	ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки);
КонецПроцедуры

// Проверяет, что табличные документы равны, игнорируя оформление.
//
// Параметры:
//   ТабДок1       - ТабличныйДокумент - Табличный документ.
//   ТабДок2       - ТабличныйДокумент - Табличный документ.
//   УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки - Булево, Строка - Флаг, указывающий, что нужно проверять только видимые колонки.
//   УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки  - Булево, Строка - Флаг, указывающий, что нужно проверять только видимые строки.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//

Процедура AssertПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки = Ложь, 
		УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки = Ложь, 
		Знач ДопСообщениеОшибки = "", 
		ДопПараметры = Неопределено) Экспорт
	ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки, 
		УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки, 
		ДопСообщениеОшибки,
		ДопПараметры);
КонецПроцедуры

// Проверяет, что таблицы равны.
//
// Параметры:
//   ExpectedValueTable       - ТабличныйДокумент - Коллекция значений.
//   ActualValueTable       - ТабличныйДокумент - Коллекция значений.
//   Message - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//   Params - Структура - Дополнительные параметры.
//
Процедура AssertEqualValueTable(ExpectedValueTable, ActualValueTable, Message = "", Params = Undefined) Экспорт
	ПроверитьРавенствоТаблиц(ExpectedValueTable, ActualValueTable, Message, Params);
КонецПроцедуры

// Проверяет равенство файлов
//
// Параметры:
//   ПутьФайла1, ПутьФайла2 - Строка - полные пути к файлам
//   ДопСообщениеОшибки     - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//   ПарамСравнениеФайлов   - Структура - структура с ключами:
//    * ИгнорироватьПустоеПространство - Булево
//    * СпособСравнения                - СпособСравненияФайлов
//    * УчитыватьРазделителиСтрок      - Булево
//    * УчитыватьРегистр               - Булево
//   ПоказатьРазличия       - Строка - в случае ошибки появляется окно сравнения (для отладки)
//
Процедура AssertПроверитьРавенствоФайлов(ПутьФайла1, ПутьФайла2, ДопСообщениеОшибки = "", 
		ПарамСравнениеФайлов = Неопределено, ПоказатьРазличия = Ложь) Экспорт
	ПроверитьРавенствоФайлов(ПутьФайла1, ПутьФайла2, ДопСообщениеОшибки,
		ПарамСравнениеФайлов, ПоказатьРазличия)
КонецПроцедуры

// Позволяет вызывающей системе указать, что нужно прервать выполнени сценария
// Только на клиенте возможно накопление ошибок. На сервере будет вызвано исключение.
Процедура AddError(ErrorDescription) Экспорт
	ДобавитьОшибкуСценария(ErrorDescription);
КонецПроцедуры

#КонецОбласти

#Область Ассерты_RU

// Позволяет вызывающей системе указать, что нужно прервать выполнени сценария
// Только на клиенте возможно накопление ошибок. На сервере будет вызвано исключение.
Процедура ДобавитьОшибкуСценария(ТекстОшибки) Экспорт
	ВызватьИсключение ТекстОшибки;
КонецПроцедуры

// Проверяет, что переданное значение является Истиной.
//
// Параметры:
//   ПроверяемоеЗначение - Булево - Проверяемое значение
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура Проверить(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	Если Не ПроверяемоеЗначение Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Переданный параметр (%1) не является Истиной, а хотели, чтобы являлся. %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Формат(ПроверяемоеЗначение, "БЛ=ложь; БИ=истина")); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ФорматДСО(ДопСообщениеОшибки)); 
		ОбработатьAssertОжидаемоеРеальноеЗначение(ПроверяемоеЗначение, Ложь);
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Проверяет, что переданное значение является Истиной.
//
// Параметры:
//   ПроверяемоеЗначение - Булево - Проверяемое значение
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура ПроверитьИстину(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	Проверить(ПроверяемоеЗначение, ДопСообщениеОшибки);
КонецПроцедуры

// Проверяет, что переданное значение является Ложью.
//
// Параметры:
//   ПроверяемоеЗначение - Булево - Проверяемое значение
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура ПроверитьЛожь(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	Если ПроверяемоеЗначение Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Переданный параметр (%1) не является Ложью, а хотели, чтобы являлся. %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Формат(ПроверяемоеЗначение, "БЛ=ложь; БИ=истина")); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ФорматДСО(ДопСообщениеОшибки)); 
		ОбработатьAssertОжидаемоеРеальноеЗначение(Ложь, Истина);
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Проверяет, что переданная дата входит в переданный период дат.
//
// Параметры:
//   ПроверямыйПериод - СтандартныйПериод - Период дат, который будет использован для проверки.
//   ПроверяемаяДата   - Дата - Проверяемая дата.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура ПроверитьДату(ПроверямыйПериод, ПроверяемаяДата, ДопСообщениеОшибки = "") Экспорт
	Если ПроверяемаяДата < ПроверямыйПериод.ДатаНачала ИЛИ ПроверяемаяДата > ПроверямыйПериод.ДатаОкончания Тогда
		представление = ПредставлениеПериода(ПроверямыйПериод.ДатаНачала, ПроверямыйПериод.ДатаОкончания, "ФП = Истина");
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Переданный параметр (%1) не входит в период %2, а хотели, чтобы являлся. %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Формат(ПроверяемаяДата, "ДФ='dd.MM.yyyy HH:mm:ss'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", представление);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(ПроверямыйПериод, ПроверяемаяДата);
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Проверяет равенство дат с точностью до двух секунд.
//
// Параметры:
//   ПерваяДата - Дата - Первая проверяемая дата.
//   ВтораяДата - Дата - Вторая проверяемая дата.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура ПроверитьРавенствоДатСТочностью2Секунды(ПерваяДата, ВтораяДата, ДопСообщениеОшибки = "") Экспорт
	Если ВтораяДата < ПерваяДата - 2 ИЛИ ВтораяДата > ПерваяДата + 2 Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Переданная дата (%1) не равна дате (%2) с точностью до 2-х секунд, а хотели, чтобы они равнялись. %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Формат(ПерваяДата, "ДФ='dd.MM.yyyy HH:mm:ss'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Формат(ВтораяДата, "ДФ='dd.MM.yyyy HH:mm:ss'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(ПерваяДата, ВтораяДата);
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Проверяет равенство двух значений.
//
// Параметры:
//   ПервоеЗначение - Произвольный - Первое проверяемое значение.
//   ВтороеЗначение - Произвольный - Второе проверяемое значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура ПроверитьРавенство(ПервоеЗначение, ВтороеЗначение, ДопСообщениеОшибки = "") Экспорт
	Если ПервоеЗначение <> ВтороеЗначение Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Сравниваемые значения (%1; %2) не равны, а хотели, чтобы были равны.%3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПервоеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ВтороеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(ПервоеЗначение, ВтороеЗначение);
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры                                                                    

// Проверяет неравенство двух значений.
//
// Параметры:
//   ПервоеЗначение - Произвольный - Первое проверяемое значение.
//   ВтороеЗначение - Произвольный - Второе проверяемое значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура ПроверитьНеРавенство(ПервоеЗначение, ВтороеЗначение, ДопСообщениеОшибки = "") Экспорт
	Если ПервоеЗначение = ВтороеЗначение Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Сравниваемые значения (%1; %2) равны, а хотели, чтобы были не равны.%3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПервоеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ВтороеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(ПервоеЗначение, ВтороеЗначение);
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Проверяет, что второе значение больше первого.
//
// Параметры:
//   ПервоеЗначение - Число, Строка, Дата - Первое проверяемое значение.
//   ВтороеЗначение - Число, Строка, Дата - Второе проверяемое значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура ПроверитьБольше(ЭталонноеЧисло, ПроверяемоеЧисло, ДопСообщениеОшибки = "") Экспорт
	Если ПроверяемоеЧисло <= ЭталонноеЧисло Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Первый параметр (%1) меньше или равен второму (%2) а хотели, чтобы был больше.%3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПроверяемоеЧисло);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ЭталонноеЧисло);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(ЭталонноеЧисло, ПроверяемоеЧисло);
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Проверяет, что второе значение больше или равено первому.
//
// Параметры:
//   ПервоеЗначение - Число, Строка, Дата - Первое проверяемое значение.
//   ВтороеЗначение - Число, Строка, Дата - Второе проверяемое значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура ПроверитьБольшеИлиРавно(ЭталонноеЧисло, ПроверяемоеЧисло, ДопСообщениеОшибки = "") Экспорт
	Если ПроверяемоеЧисло < ЭталонноеЧисло Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Первый параметр (%1) меньше второго (%2) а хотели, чтобы был больше или равен.%3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПроверяемоеЧисло);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ЭталонноеЧисло);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(ЭталонноеЧисло, ПроверяемоеЧисло);
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Проверяет, что второе значение меньше первого.
//
// Параметры:
//   ПервоеЗначение - Число, Строка, Дата - Первое проверяемое значение.
//   ВтороеЗначение - Число, Строка, Дата - Второе проверяемое значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура ПроверитьМеньше(ЭталонноеЧисло, ПроверяемоеЧисло, СообщениеОбОшибке = "") Экспорт
	Если ПроверяемоеЧисло >= ЭталонноеЧисло Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Значение <%1> больше или равно, чем <%2>, а ожидалось меньше. %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПроверяемоеЧисло); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ЭталонноеЧисло); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ФорматДСО(СообщениеОбОшибке)); 
		ОбработатьAssertОжидаемоеРеальноеЗначение(ЭталонноеЧисло, ПроверяемоеЧисло);
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Проверяет, что второе значение меньше или равное первому.
//
// Параметры:
//   ПервоеЗначение - Число, Строка, Дата - Первое проверяемое значение.
//   ВтороеЗначение - Число, Строка, Дата - Второе проверяемое значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура ПроверитьМеньшеИлиРавно(ЭталонноеЧисло, ПроверяемоеЧисло, СообщениеОбОшибке = "") Экспорт
	Если ПроверяемоеЧисло > ЭталонноеЧисло Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Значение <%1> больше, чем <%2>, а ожидалось меньше или равно. %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПроверяемоеЧисло); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ЭталонноеЧисло); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ФорматДСО(СообщениеОбОшибке)); 
		ОбработатьAssertОжидаемоеРеальноеЗначение(ПроверяемоеЧисло, ЭталонноеЧисло);
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли; 
КонецПроцедуры

// Проверяет, что переданное выражение корректно выполнилось без ошибок.
//
// Параметры:
//   СтрокаАлгоритм - Строка - Строковое выражение, которое будет выполнено.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура ПроверитьВыполнилось(Знач СтрокаАлгоритм, Знач ДопСообщениеОшибки = "") Экспорт

	Попытка
		Выполнить(СтрокаАлгоритм);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Хотели, чтобы алгоритм <%1> выполнился, а он упал с ошибкой <%2>. %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаАлгоритм);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ПолученноеОписаниеОшибки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ФорматДСО(ДопСообщениеОшибки));
		
		ОбработатьAssertОжидаемоеРеальноеЗначение(Истина, Ложь);
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецПопытки;

КонецПроцедуры

// Проверяет, что данный метод у объекта корректно выполнилось без ошибок.
//
// Параметры:
//   Объект - Произвольный - Объект, методо которого будет проверяться.
//   ИмяМетода - Строка - Имя метода.
//   ПараметрыИлиДопСообщениеОшибки - Строка, Массив
//       Если передн массив, то из массива будут получены параметры метода для выполнения.
//       Если передана строка, тогда параметр используется вместо параметра ДопСообщениеОшибки.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура ПроверитьМетодВыполнился(Объект, Знач ИмяМетода, ПараметрыИлиДопСообщениеОшибки = Неопределено, Знач ДопСообщениеОшибки = "") Экспорт
	Перем ПараметрыМетода;
	
	Если ТипЗнч(ПараметрыИлиДопСообщениеОшибки) = Тип("Строка") Тогда
		ДопСообщениеОшибки = ПараметрыИлиДопСообщениеОшибки;
	Иначе
		ПараметрыМетода = ПараметрыИлиДопСообщениеОшибки;
		Если ПараметрыМетода <> Неопределено Тогда
			ТипПараметра = ТипЗнч(ПараметрыМетода);
			Если ТипПараметра <> Тип("Массив") Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ожидали, что вторым параметром будет передан массив параметров для метода <%1>, а получили другой объект с типом <%2>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяМетода);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ТипПараметра);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыСтрока = ПараметрыСтрокой(ПараметрыМетода, "ПараметрыМетода");
	
	СтрокаВыполнения = "Объект." + ИмяМетода + "(" + ПараметрыСтрока + ")";
	
	Попытка
		Выполнить(СтрокаВыполнения);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Хотели, чтобы код <%1> выполнился, а он упал с ошибкой <%2>. %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаВыполнения + "");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ПолученноеОписаниеОшибки + "");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ФорматДСО(ДопСообщениеОшибки));
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Проверяет, что переданное выражение не выполнилось без ошибок.
//
// Параметры:
//   СтрокаАлгоритм - Строка - Строковое выражение, которое будет выполнено.
//   ОжидаемоеОписаниеОшибки - Строка - По этой строке будет выполнен поиск в тексте исключения. Если строка не найдена, тогда будет вызвано исключение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура ПроверитьНеВыполнилось(Знач СтрокаАлгоритм, Знач ОжидаемоеОписаниеОшибки = "", Знач ДопСообщениеОшибки = "") Экспорт
	НужноВызватьОшибку = Истина;
	
	Попытка
		Выполнить(СтрокаАлгоритм);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Найти(ПолученноеОписаниеОшибки, ОжидаемоеОписаниеОшибки) = 0 Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Хотели, чтобы алгоритм <%1> упал с сообщением об ошибке <%2>, а он упал с сообщением <%3>.%4");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаАлгоритм);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ОжидаемоеОписаниеОшибки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ПолученноеОписаниеОшибки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%4", ФорматДСО(ДопСообщениеОшибки));
			ОбработатьAssertОжидаемоеРеальноеЗначение(Истина, Ложь);
			
			ВызватьОшибкуПроверки(ТекстСообщения);
		КонецЕсли;
		НужноВызватьОшибку = Ложь;
	КонецПопытки;
	
	Если НужноВызватьОшибку Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Хотели, чтобы алгоритм <%1> упал, а он выполнился%2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаАлгоритм);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(Истина, Ложь);
		
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;	 
	
КонецПроцедуры

// Проверяет, что данный метод у объекта вызвал исключение при выполнении.
//
// Параметры:
//   Объект - Произвольный - Объект, методо которого будет проверяться.
//   ИмяМетода - Строка - Имя метода.
//   ПараметрыИлиОжидаемоеОписаниеОшибки - Строка, Массив
//       Если передн массив, то из массива будут получены параметры метода для выполнения.
//       Если передана строка, тогда параметр используется вместо параметра ДопСообщениеОшибки.
//   ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки - Строка - Строка, должна быть в строке исключения метода.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура ПроверитьМетодНеВыполнился(Объект, ИмяМетода, ПараметрыИлиОжидаемоеОписаниеОшибки, 
			Знач ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки = "", 
			Знач ДопСообщениеОшибки = "") Экспорт

	Перем ПараметрыМетода, ОжидаемоеОписаниеОшибки; 
	
	Если ТипЗнч(ПараметрыИлиОжидаемоеОписаниеОшибки) = Тип("Строка") Тогда
		ОжидаемоеОписаниеОшибки = ПараметрыИлиОжидаемоеОписаниеОшибки;
		ДопСообщениеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	Иначе
		ПараметрыМетода = ПараметрыИлиОжидаемоеОписаниеОшибки;
		Если ПараметрыМетода <> Неопределено Тогда
			ТипПараметра = ТипЗнч(ПараметрыМетода);
			Если ТипПараметра <> Тип("Массив") Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ожидали, что третьим параметром будет передан массив параметров для метода <%1>, а получили другой объект с типом <%2>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяМетода);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ТипПараметра);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		КонецЕсли;
		ОжидаемоеОписаниеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	КонецЕсли;
	
	ПараметрыСтрока = ПараметрыСтрокой(ПараметрыМетода, "ПараметрыМетода");
	
	СтрокаВыполнения = "Объект." + ИмяМетода + "(" + ПараметрыСтрока + ")";
	
	Попытка
		Выполнить(СтрокаВыполнения);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Найти(ПолученноеОписаниеОшибки, ОжидаемоеОписаниеОшибки) = 0 Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Хотели, чтобы код <%1> упал с сообщением об ошибке <%2>, а он упал с сообщением <%3>.%4");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаВыполнения);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ОжидаемоеОписаниеОшибки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ПолученноеОписаниеОшибки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%4", ФорматДСО(ДопСообщениеОшибки));
			ВызватьОшибкуПроверки(ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	ТекстСообщения = ПолучитьТекстСообщенияПользователю("Хотели, чтобы код <%1> упал, а он выполнился%2");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаВыполнения);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ФорматДСО(ДопСообщениеОшибки));
	ВызватьОшибкуПроверки(ТекстСообщения);
	
КонецПроцедуры

// Проверяет, что переданное значение не является пустым.
//
// Параметры:
//   ПроверяемоеЗначение - Произвольный - Проверяемое на пустоту значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура ПроверитьЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	// Проверка идет через ЗначениеЗаполнено, но мутабельные значение всегда считаем заполненными
	Попытка
		фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
	Исключение
		Возврат;
	КонецПопытки;
	Если НЕ фЗаполнено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Значение (%1) не заполнено, а ожидалась заполненность%2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПроверяемоеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(Истина, Ложь);
		
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли; 
КонецПроцедуры

// Проверяет, что переданное значение является пустым.
//
// Параметры:
//   ПроверяемоеЗначение - Произвольный - Проверяемое на пустоту значение.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура ПроверитьНеЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	ТекстСообщения = ПолучитьТекстСообщенияПользователю("Значение (%1) заполнено, а ожидалась незаполненность %2");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПроверяемоеЗначение);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ФорматДСО(ДопСообщениеОшибки));
	Попытка
		фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
	Исключение
		ОбработатьAssertОжидаемоеРеальноеЗначение(Истина, Ложь);
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецПопытки;
	Если фЗаполнено Тогда
		ОбработатьAssertОжидаемоеРеальноеЗначение(Истина, Ложь);
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли; 
КонецПроцедуры

// Проверяет, что переданное значение нужного типа.
//
// Параметры:
//   ПроверяемоеЗначение - Произвольный - Проверяемое значение.
//   ТипИлиИмяТипа       - Строка, Тип  - Тип значения.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура ПроверитьТип(значение, ТипИлиИмяТипа, ДопСообщениеОшибки = "") Экспорт
	Если ТипЗнч(ТипИлиИмяТипа) = Тип("Строка") Тогда
		искомыйТип = Тип(ТипИлиИмяТипа);
	ИначеЕсли ТипЗнч(ТипИлиИмяТипа) = Тип("Тип") Тогда
		искомыйТип = ТипИлиИмяТипа;
	Иначе
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("ПроверитьТип: Тип значения параметра ТипИлиИмяТипа должен быть <Тип> или <Строка>, а получили <%1>%2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ТипЗнч(ТипИлиИмяТипа));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ФорматДСО(ДопСообщениеОшибки));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Если ТипЗнч(значение) <> искомыйТип Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Типом значения <%1> является <%2>, а ожидался тип <%3>.%4");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", значение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ТипЗнч(значение));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ТипИлиИмяТипа);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%4", ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(ТипЗнч(значение), искомыйТип);
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Проверяет, что искомая подстрока входит в строку.
//
// Параметры:
//   Строка             - Строка - Строка, в которой происходит поиск.
//   ПодстрокаПоиска    - Строка - Строка, которая ищется.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура ПроверитьВхождение(строка, подстрокаПоиска, ДопСообщениеОшибки = "") Экспорт
	Если Найти(строка, подстрокаПоиска) = 0 Тогда
		ПредставлениеСтроки = "<" + строка + ">";
		Если СтрДлина(строка) > 20 Тогда
			ПредставлениеСтроки = ПредставлениеСтроки + Символы.ПС;
		КонецЕсли;
		ПредставлениеПодСтроки = "<" + подстрокаПоиска + ">";
		Если СтрДлина(подстрокаПоиска) > 20 Тогда
			ПредставлениеПодСтроки = ПредставлениеПодСтроки + Символы.ПС;
		КонецЕсли;
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Искали в %1 подстроку %2, но не нашли.%3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПредставлениеСтроки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ПредставлениеПодСтроки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(строка, подстрокаПоиска);
		
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Проверяет, что значение входит в коллекцию.
//
// Параметры:
//   Элемент            - Произвольный - Значение, которое будет искаться в коллекции.
//   Коллекция          - Массив, Структура, Соответствие, ФиксированныйМассив, ФиксированнаяСтруктура, ФиксированноеСоответствие, СписокЗначений - Коллекция значений.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура ПроверитьВхождениеВКоллекцию(Элемент, Коллекция, ДопСообщениеОшибки = "") Экспорт
	// Коллекция - Массив, Структура, Соответствие, ФиксированныйМассив, ФиксированнаяСтруктура, ФиксированноеСоответствие, СписокЗначений
	Нашли = Неопределено;
	ТипКоллекции = ТипЗнч(Коллекция);
	Если ТипКоллекции = Тип("Массив") ИЛИ ТипКоллекции = Тип("ФиксированныйМассив") Тогда
		Нашли = Коллекция.Найти(Элемент) <> Неопределено;
	ИначеЕсли ТипКоллекции = Тип("Структура") ИЛИ ТипКоллекции = Тип("Соответствие") 
			ИЛИ ТипКоллекции = Тип("ФиксированнаяСтруктура") ИЛИ ТипКоллекции = Тип("ФиксированноеСоответствие") Тогда
		Для каждого КлючЗначение Из Коллекция Цикл
			Нашли = КлючЗначение.Значение = Элемент;
			Если Нашли Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипКоллекции = Тип("СписокЗначений") Тогда
		Нашли = Коллекция.НайтиПоЗначению(Элемент) <> Неопределено;
	КонецЕсли;
	Если Нашли = Неопределено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Утверждение <ПроверитьВхождениеВКоллекцию> не умеет работать с типом коллекции <%1>.%2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ТипКоллекции);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ФорматДСО(ДопСообщениеОшибки));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Если Не Нашли Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не нашли элемент <%1> в коллекции, а хотели, чтобы он был в коллекции.%2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Элемент);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ФорматДСО(ДопСообщениеОшибки));
		ОбработатьAssertОжидаемоеРеальноеЗначение(Элемент, Коллекция);
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Проверяет, что запрос СКД не вызовет ошибок компиляции.
//
// Параметры:
//   ТекстЗапроса       - Строка - Текст запроса.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки = "") Экспорт
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных 					  = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 
	ИсточникДанных.Имя                = "ИсточникДанных";
	ИсточникДанных.СтрокаСоединения   = "";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных 							 = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя            				 = "НаборДанных";
	НаборДанных.ИсточникДанных 				 = "ИсточникДанных";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос 						 = ТекстЗапроса;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	Попытка
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Исключение
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("%1.%2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОписаниеОшибки());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ФорматДСО(ДопСообщениеОшибки));
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры // ПроверитьВалидностьЗапросаСКД()

// Проверяет, что в ИБ существует ссылка
//
// Параметры:
//   Ссылка             - СсылочныйТип - Проверяемая ссылка.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//
Процедура ПроверитьНаличиеОбъектаИБ(Ссылка, ДопСообщениеОшибки = "") Экспорт
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ожидали заполненность ссылки, а получили пустую ссылку.%1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ФорматДСО(ДопСообщениеОшибки));
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
	лОбъект = Ссылка.ПолучитьОбъект();
	Если лОбъект = Неопределено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ожидали существование объекта в ИБ, а получили объект не найден <%1> .%2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Ссылка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ФорматДСО(ДопСообщениеОшибки));
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Проверяет, что табличные документы равны, игнорируя оформление.
//
// Параметры:
//   ТабДок1       - ТабличныйДокумент - Табличный документ.
//   ТабДок2       - ТабличныйДокумент - Табличный документ.
//   УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки - Булево, Строка - Флаг, указывающий, что нужно проверять только видимые колонки.
//   УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки  - Булево, Строка - Флаг, указывающий, что нужно проверять только видимые строки.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//   ДопПараметры - Структура - Дополнительные параметры.
//
Процедура ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабДок1, ТабДок2, 
		УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки = Ложь, 
		УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки = Ложь, 
		Знач ДопСообщениеОшибки = "", 
		ДопПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(ТабДок1) <> Тип("ТабличныйДокумент") Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям: Первый параметр-таблица не является табличным документом");
	КонецЕсли;
	Если ТипЗнч(ТабДок2) <> Тип("ТабличныйДокумент") Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям: Второй параметр-таблица не является табличным документом");
	КонецЕсли;
	
	УчитыватьТолькоВидимыеКолонки = Ложь;
	Если ТипЗнч(УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки) = Тип("Булево") Тогда
		УчитыватьТолькоВидимыеКолонки = УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки;
	ИначеЕсли ТипЗнч(УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки) = Тип("Строка") Тогда
		ДопСообщениеОшибки = УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки;
	КонецЕсли;
	УчитыватьТолькоВидимыеСтроки = Ложь;
	Если ТипЗнч(УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки) = Тип("Булево") Тогда
		УчитыватьТолькоВидимыеСтроки = УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки;
	ИначеЕсли ТипЗнч(УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки) = Тип("Строка") Тогда
		ДопСообщениеОшибки = УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки;
	КонецЕсли;
	
	Таб1 = ПолучитьТаблицуЗначенийИзТабличногоДокумента(ТабДок1, УчитыватьТолькоВидимыеКолонки, УчитыватьТолькоВидимыеСтроки);
	Таб2 = ПолучитьТаблицуЗначенийИзТабличногоДокумента(ТабДок2, УчитыватьТолькоВидимыеКолонки, УчитыватьТолькоВидимыеСтроки);
	
	ПроверитьРавенствоТаблиц(Таб1, Таб2, ДопСообщениеОшибки, ДопПараметры);
	
КонецПроцедуры

// Проверяет, что таблицы равны.
//
// Параметры:
//   Таб1       - ТабличныйДокумент - Коллекция значений.
//   Таб2       - ТабличныйДокумент - Коллекция значений.
//   ДопСообщениеОшибки - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//   ДопПараметры - Структура - Дополнительные параметры.
//
Процедура ПроверитьРавенствоТаблиц(Таб1, Таб2, ДопСообщениеОшибки = "", ДопПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Таб1) <> Тип("ТаблицаЗначений") Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("ПроверитьРавенствоТаблиц: Первый параметр-таблица таблицей не является");
	КонецЕсли;
	Если ТипЗнч(Таб2) <> Тип("ТаблицаЗначений") Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("ПроверитьРавенствоТаблиц: Второй параметр-таблица таблицей не является");
	КонецЕсли;
	
	Различия = Новый ТаблицаЗначений;
	РезультатСравнения = СравнитьТаблицыVA(Таб1, Таб2, Различия, ДопСообщениеОшибки, ДопПараметры);
	
	Если РезультатыСравненияТаблиц.ТаблицыСовпадают <> РезультатСравнения Тогда
		
		ИменаРезультатов = Новый Соответствие;
		Для Каждого КлючЗначение Из РезультатыСравненияТаблиц Цикл
			ИменаРезультатов.Вставить(КлючЗначение.Значение, КлючЗначение.Ключ);
		КонецЦикла; 
		
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Различия в таблицах:");
		СтрокаОшибок   = ТекстСообщения + Символы.ПС;
		
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ожидали статус <%1>, а получили <%2>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПолучитьТекстСообщенияПользователю(ИменаРезультатов[РезультатыСравненияТаблиц.ТаблицыСовпадают])); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ПолучитьТекстСообщенияПользователю(ИменаРезультатов[РезультатСравнения])); 
		
		СтрокаОшибок = СтрокаОшибок + ТекстСообщения + Символы.ПС;
		Для Каждого Строка Из Различия Цикл
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Значение [%1:%2]. Ожидали <%3>, а получили <%4>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Строка.Колонка); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Строка.Строка); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", Строка.Ожидание); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%4", Строка.Результат); 
			
			СтрокаОшибок = СтрокаОшибок + ТекстСообщения + Символы.ПС;
		КонецЦикла;
		
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Таблицы должны совпадать, а они различны.%1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Символы.ПС + СтрокаОшибок + Символы.ПС + ДопСообщениеОшибки);
		ОбработатьAssertОжидаемоеРеальноеЗначение(
		    ЗначениеВСтрокуТаблицаЗначенийjUnit(Таб1), ЗначениеВСтрокуТаблицаЗначенийjUnit(Таб2));
		ВызватьОшибкуПроверки(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет равенство файлов
//
// Параметры:
//   ПутьФайла1, ПутьФайла2 - Строка - полные пути к файлам
//   ДопСообщениеОшибки     - Строка - Описание ошибки, которое будет использовано в тексте исключения ассерта.
//   ПарамСравнениеФайлов   - Структура - структура с ключами:
//    * ИгнорироватьПустоеПространство - Булево
//    * СпособСравнения                - СпособСравненияФайлов
//    * УчитыватьРазделителиСтрок      - Булево
//    * УчитыватьРегистр               - Булево
//   ПоказатьРазличия       - Строка - в случае ошибки появляется окно сравнения (для отладки)
//
Процедура ПроверитьРавенствоФайлов(ПутьФайла1, ПутьФайла2, ДопСообщениеОшибки = "", 
		ПарамСравнениеФайлов = Неопределено, ПоказатьРазличия = Ложь) Экспорт
#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
	Если ПарамСравнениеФайлов = Неопределено Тогда
		ПарамСравнениеФайлов = Новый Структура;
	КонецЕсли;
	СравнениеФайлов = Новый СравнениеФайлов;
	СравнениеФайлов.ПервыйФайл = ПутьФайла1;
	СравнениеФайлов.ВторойФайл = ПутьФайла2;
	Если Не ПарамСравнениеФайлов.Свойство("СпособСравнения") Тогда
		Файл = Новый Файл(ПутьФайла1);
		ТипФайла = НРег(Файл.Расширение);
		ТекстовыеТипы = ".txt,.xml";
		Если ТипФайла = ".mxl" Тогда
			ПарамСравнениеФайлов.Вставить("СпособСравнения", СпособСравненияФайлов.ТабличныйДокумент);
		ИначеЕсли Найти(ТекстовыеТипы, ТипФайла) > 0 Тогда
			ПарамСравнениеФайлов.Вставить("СпособСравнения", СпособСравненияФайлов.ТекстовыйДокумент);
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СравнениеФайлов, ПарамСравнениеФайлов);
	ФайлыИдентичны = СравнениеФайлов.Сравнить();
	Если Не ФайлыИдентичны Тогда
		Если ПоказатьРазличия Тогда // для удобства отладки и расследования ошибок
			СравнениеФайлов.ПоказатьРазличия();
		КонецЕсли;
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ожидали идентичность файлов, а получили, что они различны.%1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ФорматДСО(ДопСообщениеОшибки));
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
#Иначе 
	ВызватьИсключение ПолучитьТекстСообщенияПользователю("Утверждение ПроверитьРавенствоФайлов можно использовать только в толстом клиенте.");
#КонецЕсли
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область АссертыСлужебное

// портирован из Functest
Функция СравнитьЗначенияТаблиц(ТаблицаОжиданий, ТаблицаРезультатов, Различия, ДопПараметры)
	СравнениеПоШаблону = Ложь;
	Если ДопПараметры <> Неопределено И ДопПараметры.Свойство("СравнениеПоШаблону") Тогда
		СравнениеПоШаблону = ДопПараметры.СравнениеПоШаблону;
	КонецЕсли;	 

	Различия = Новый ТаблицаЗначений;
	Различия.Колонки.Очистить();
	Различия.Колонки.Добавить("Строка", Новый ОписаниеТипов("Число"));
	Различия.Колонки.Добавить("Колонка", Новый ОписаниеТипов("Строка"));
	Различия.Колонки.Добавить("Ожидание");
	Различия.Колонки.Добавить("Результат");
	
	РезультатСравнения = РезультатыСравненияТаблиц.ТаблицыСовпадают;
	
	Колонки = ТаблицаОжиданий.Колонки;
	ГраницаСтрок = ТаблицаОжиданий.Количество() - 1;
	Для Индекс = 0 По ГраницаСтрок Цикл
		
		ОжидаемаяСтрока = ТаблицаОжиданий[Индекс];
		СтрокаРезультата = ТаблицаРезультатов[Индекс];
		
		Для Каждого Колонка Из Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			
			ОжидаемоеЗначение = ОжидаемаяСтрока[ИмяКолонки];
			ЗначениеРезультата = СтрокаРезультата[ИмяКолонки];
			
			Если ОжидаемоеЗначение = "*" Тогда
				Продолжить;
			КонецЕсли;	 
			
			ОжидаемоеЗначение  = СтрЗаменить(ОжидаемоеЗначение, Символы.НПП," ");
			ЗначениеРезультата = СтрЗаменить(ЗначениеРезультата, Символы.НПП," ");
			
			ОжидаемоеЗначение = СтрЗаменить(ОжидаемоеЗначение, Символы.ПС + Символы.ВК, "\n");
			ОжидаемоеЗначение = СтрЗаменить(ОжидаемоеЗначение, Символы.ВК + Символы.ПС, "\n");
			ОжидаемоеЗначение = СтрЗаменить(ОжидаемоеЗначение, Символы.ПС, "\n");
			
			ЗначениеРезультата = СтрЗаменить(ЗначениеРезультата, Символы.ПС + Символы.ВК, "\n");
			ЗначениеРезультата = СтрЗаменить(ЗначениеРезультата, Символы.ВК + Символы.ПС, "\n");
			ЗначениеРезультата = СтрЗаменить(ЗначениеРезультата, Символы.ПС, "\n");
			
			Если НЕ СравнениеПоШаблону Тогда
				Если ОжидаемоеЗначение = ЗначениеРезультата
					Или (Не ЗначениеЗаполнено(ОжидаемоеЗначение) И Не ЗначениеЗаполнено(ЗначениеРезультата)) Тогда //Пустые значения разных типов 1С-м не считаются равными :(
					Продолжить;
				КонецЕсли;
			Иначе	
				Если СтрокаСоответствуетШаблону(ЗначениеРезультата, ОжидаемоеЗначение) Тогда
					Продолжить;
				КонецЕсли;	 
			КонецЕсли;	 

			Различие = Различия.Добавить();
			Различие.Строка = Индекс + 1;
			Различие.Колонка = ИмяКолонки;
			Различие.Ожидание = ОжидаемоеЗначение;
			Различие.Результат = ЗначениеРезультата;
			РезультатСравнения = РезультатыСравненияТаблиц.НеСовпадаютЗначенияВЯчейкеТаблицы;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат РезультатСравнения;
	
КонецФункции

Функция ПодготовитьШаблонКИспользованиюВРегулярке(Шаблон, ДляЛинукс)

	// Экранируем все, кроме звездочки. Ее будем трактовать по-своему.
	СпецСимволы = Новый Массив;
	СпецСимволы.Добавить("\");
	СпецСимволы.Добавить("^");
	СпецСимволы.Добавить("$");
	СпецСимволы.Добавить("(");
	СпецСимволы.Добавить(")");
	СпецСимволы.Добавить("[");
	СпецСимволы.Добавить("]");
	СпецСимволы.Добавить("{");
	СпецСимволы.Добавить("}");
	СпецСимволы.Добавить("|");
	СпецСимволы.Добавить(".");
	СпецСимволы.Добавить("+");
	СпецСимволы.Добавить("?");
	
	Если ДляЛинукс Тогда
		Шаблон = СтрЗаменить(Шаблон, "<", "&lt;"); 
		Шаблон = СтрЗаменить(Шаблон, ">", "&gt;"); 
	Иначе	
		СпецСимволы.Добавить("<");
		СпецСимволы.Добавить(">");
	КонецЕсли;	 
	
	Для Каждого СпецСимвол Из СпецСимволы Цикл
		Шаблон = СтрЗаменить(Шаблон, СпецСимвол, "\" + СпецСимвол); 
	КонецЦикла;
	
	// Трактуем * по-нашему.
	Шаблон = СтрЗаменить(Шаблон, "*", ".*");
	
	Возврат Шаблон;
КонецФункции

Функция СравнитьТаблицыVA(ТаблицаОжиданий, ТаблицаРезультатов, ТаблицаРазличий, ДопСообщениеОшибки, ДопПараметры)
	
	Если ТаблицаОжиданий.Количество() <> ТаблицаРезультатов.Количество() Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("ТаблицаОжиданий.КоличествоСтрок()=%1, ТаблицаРезультатов.Количество()=%2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ТаблицаОжиданий.Количество()); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ТаблицаРезультатов.Количество()); 
		
		ДопСообщениеОшибки = ТекстСообщения;
		Возврат РезультатыСравненияТаблиц.РазноеКоличествоСтрок;
	КонецЕсли;
	
	Если ТаблицаОжиданий.Количество() = 0 Тогда
		Возврат РезультатыСравненияТаблиц.ТаблицыСовпадают; //Пустые таблицы всегда одинаковы
	КонецЕсли;
	
	// Проверим структуру колонок
	
	// TODO При этом сравнении в структуре ТаблицаРезультатов может оказаться больше колонок, чем в ТаблицаОжиданий,
	// так что для абсолютного точного сравнения нужно добавить проверку совпадения количества колонок.
	ОжидаемыеКолонки = ТаблицаОжиданий.Колонки;
	КолонкиРезультата = ТаблицаРезультатов.Колонки;
	Для Каждого Колонка Из ОжидаемыеКолонки Цикл
		Если КолонкиРезультата.Найти(Колонка.Имя) = Неопределено Тогда
			ДопСообщениеОшибки = "КолонкиЭталона.Количество()=" + ОжидаемыеКолонки.Количество() 
				+ ", КолонкиРезультата.Количество()=" + КолонкиРезультата.Количество();
			Возврат РезультатыСравненияТаблиц.РазличаютсяКолонки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СравнитьЗначенияТаблиц(ТаблицаОжиданий, ТаблицаРезультатов, ТаблицаРазличий, ДопПараметры);
	
КонецФункции

Функция ПараметрыСтрокой(Параметры, ИмяПеременной = "Параметры")
	
	ПараметрыСтрока = "";
	Если Параметры <> Неопределено Тогда
		Если ТипЗнч(Параметры) = Тип("Массив") Тогда
			Для Индекс = 0 По Параметры.ВГраница() Цикл 
				ПараметрыСтрока = ПараметрыСтрока + ", " + ИмяПеременной + "[" + Формат(Индекс, "ЧН=0; ЧГ=0") + "]";
			КонецЦикла;
			ПараметрыСтрока = Сред(ПараметрыСтрока, 3);
		Иначе
			ПараметрыСтрока = ИмяПеременной;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыСтрока;
	
КонецФункции

// Портирован блок ассертов из проекта xUnitFor1C (https://github.com/xDrivenDevelopment/xUnitFor1C)
// был взят релиз 3.0.0.3
// { МЕТОДЫ ДЛЯ ПРОВЕРКИ ЗНАЧЕНИЙ (assertions). 
Функция ФорматДСО(ДопСообщениеОшибки)
	Если ДопСообщениеОшибки = "" Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Символы.ПС + " <" + ДопСообщениеОшибки + ">";
КонецФункции

Процедура ВызватьОшибкуПроверки(СообщениеОшибки)
	
	Префикс = "[" + ПолучитьТекстСообщенияПользователю(СтатусыРезультатаТестирования.ОшибкаПроверки) + "]";
	ТекстСообщения = ПолучитьТекстСообщенияПользователю("%1 %2");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Префикс);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", СообщениеОшибки);
	ВызватьИсключение ТекстСообщения;
	
КонецПроцедуры

Функция ПолучитьТаблицуЗначенийИзТабличногоДокумента(ТабличныйДокумент, УчитыватьТолькоВидимыеКолонки = Ложь, УчитыватьТолькоВидимыеСтроки = Ложь)
	
	ТипТабличногоДокумента = ТипЗнч(ТабличныйДокумент);
	Если ТипТабличногоДокумента <> Тип("ТабличныйДокумент") И ТипТабличногоДокумента <> Тип("ПолеТабличногоДокумента") Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("ПолучитьТаблицуЗначенийИзТабличногоДокумента: Требуется тип ТабличныйДокумент или ПолеТабличногоДокумента");
	КонецЕсли;
	
	НомерПоследнейКолонки = ТабличныйДокумент.ШиринаТаблицы;
	НомерПоследнейСтроки = ТабличныйДокумент.ВысотаТаблицы;
	
	НоваяТаблицаЗначений = Новый ТаблицаЗначений;
	Колонки = НоваяТаблицаЗначений.Колонки;
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	// TODO При определении видимости не учитывается наличие нескольких форматов строк, сейчас видимоcть колонки
	// определяется по формату первой строки
	УчитываемыеКолонки = Новый Массив;
	Для НомерКолонки = 1 По НомерПоследнейКолонки Цикл
		ОбластьКолонки = ТабличныйДокумент.Область(0, НомерКолонки, 1, НомерКолонки);
		
		УчитыватьКолонку = Не УчитыватьТолькоВидимыеКолонки Или ОбластьКолонки.Видимость;
		Если УчитыватьКолонку Тогда
			УчитываемыеКолонки.Добавить(НомерКолонки);
			ШиринаКолонки = ОбластьКолонки.ШиринаКолонки;
			Если ШиринаКолонки <= 1 Тогда
				ШиринаКолонки = 1;
			КонецЕсли;
			ИмяКолонки = "К" + Формат(Колонки.Количество() + 1, "ЧН=; ЧГ=0");
			Колонки.Добавить(ИмяКолонки, ТипСтрока, ИмяКолонки, ШиринаКолонки);
		КонецЕсли;
	КонецЦикла;
	
	ГраницаКолонок = УчитываемыеКолонки.ВГраница();
	Для НомерСтроки = 1 По НомерПоследнейСтроки Цикл
		
		Если УчитыватьТолькоВидимыеСтроки И Не ТабличныйДокумент.Область(НомерСтроки,, НомерСтроки).Видимость Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НоваяТаблицаЗначений.Добавить();
		
		Для Индекс = 0 По ГраницаКолонок Цикл
			НомерКолонки = УчитываемыеКолонки[Индекс];
			Область = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
			НоваяСтрока[Индекс] = Область.Текст;
		КонецЦикла;
	КонецЦикла;
	
	Возврат НоваяТаблицаЗначений;
	
КонецФункции

// взято из https://infostart.ru/public/464971/
Функция ПроверитьСтрокуRegExpLinux(Строка, Фасет)
    Чтение = Новый ЧтениеXML;
    Чтение.УстановитьСтроку(
                "<Model xmlns=""http://v8.1c.ru/8.1/xdto"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Model"">
                |<package targetNamespace=""sample-my-package"">
                |<valueType name=""testtypes"" base=""xs:string"">
                |<pattern>" + Фасет + "</pattern>
                |</valueType>
                |<objectType name=""TestObj"">
                |<property xmlns:d4p1=""sample-my-package"" name=""TestItem"" type=""d4p1:testtypes""/>
                |</objectType>
                |</package>
                |</Model>");

    Модель = ФабрикаXDTO.ПрочитатьXML(Чтение);
    МояФабрикаXDTO = Новый ФабрикаXDTO(Модель);
    Пакет = МояФабрикаXDTO.Пакеты.Получить("sample-my-package");
    Тест = МояФабрикаXDTO.Создать(Пакет.Получить("TestObj"));

    Попытка
        Тест.TestItem = Строка;
        Возврат Истина;
    Исключение
        Возврат Ложь;
    КонецПопытки;
КонецФункции

#КонецОбласти

#Область НастройкиПользователя

// Возвращает глобальные пользовательские настройки.
// 
// Возвращаемое значение:
//  Структура, Неопределено - "Ключ" - имя настройки, - Значение - ее значение;
//								возвращается Неопределено, если настройки не найдены;
//
Функция НастройкиПользователя() Экспорт
	
	Перем НастройкиПользователя;

	ДополнительныеПараметры.Свойство("НастройкиПользователя", НастройкиПользователя);
	Возврат НастройкиПользователя; 
	
КонецФункции

// Возвращает глобальную пользовательскую настройку.
//
// Параметры:
//  Ключ - Строка - имя настройки;
// 
// Возвращаемое значение:
//  Строка, Неопределено - значение пользовательской настройки;
//							возвращается Неопределено, если настройка не найдена;
//
Функция НастройкаПользователя(Знач Ключ) Экспорт

	Перем НастройкаПользователя;

	НастройкиПользователя = НастройкиПользователя();
	
	НастройкаПользователя = Неопределено;
	Если НастройкиПользователя <> Неопределено Тогда
		НастройкиПользователя.Свойство(Ключ, НастройкаПользователя);
	КонецЕсли;
	
	Возврат НастройкаПользователя; 
	
КонецФункции

#КонецОбласти

Процедура ЗапретитьВыполнениеШагов() Экспорт
	ХостФорма = ПолучитьФорму("Форма");
	ХостФорма.ЗапретитьВыполнениеШаговФорма();
КонецПроцедуры

Процедура ПродолжитьВыполнениеШагов(ШагУпал = Ложь) Экспорт
	ХостФорма = ПолучитьФорму("Форма");
	ХостФорма.ПродолжитьВыполнениеШаговФорма(ШагУпал);
КонецПроцедуры

Процедура ОбойтиДеревоДляВнутреннегоФормата(Дерево, ТабличныйДокумент, Макет, Интервал, ПараметрыОтчетаУФ) 
	
	Для каждого СтрСтроки Из Дерево.Строки Цикл
		Секция = Неопределено;
		Сценарий = Новый Структура("имя, name, start, stop, message, status");
		Если СтрСтроки.Тип = "Шаг" Тогда 
			Секция = Макет.ПолучитьОбласть("Шаг");
		Иначе 
			Секция = Макет.ПолучитьОбласть("Заголовок");
		КонецЕсли; 
		Если СтрСтроки.Тип = "Пример" Тогда
			Сценарий.name     = СтрСтроки.Родитель.Родитель.Имя + " №" + (СтрСтроки.Родитель.Строки.Индекс(СтрСтроки));
		Иначе	
			Сценарий.name     = СтрСтроки.Имя;
		КонецЕсли; 
		Сценарий.Имя = Интервал + СтрСтроки.Имя;
		
		Если СтрСтроки.Статус = "Failed" И СтрСтроки.Тип <> "Сценарий" Тогда
			ИДВМассиве = ПараметрыОтчетаУФ.МассивИДСтрокиДерева[СтрСтроки.Родитель.ИДСтроки];
			Если ИДВМассиве <> Неопределено Тогда 
				РезультатПрохожденияТестовСценария = ПараметрыОтчетаУФ.МассивРезультатПрохожденияТестовСценария[ИДВМассиве];
			КонецЕсли;
		КонецЕсли;
		
		Если РезультатПрохожденияТестовСценария <> Неопределено Тогда 
			Сценарий.start = РезультатПрохожденияТестовСценария.ВремяНачала;
			Сценарий.stop  = РезультатПрохожденияТестовСценария.ВремяОкончания;
			Сценарий.message = РезультатПрохожденияТестовСценария.ОписаниеОшибки;
		КонецЕсли;
		
		Секция.Параметры.Заполнить(Сценарий);
		ТабличныйДокумент.Вывести(Секция);
		Если СтрСтроки.Статус = "Failed" И СтрСтроки.Тип <> "Сценарий" Тогда
			Секция = Макет.ПолучитьОбласть("Ошибка");
			Секция.Параметры.Заполнить(Сценарий);
			ТабличныйДокумент.Вывести(Секция);		
		КонецЕсли; 

		Если СтрСтроки.Строки.Количество() > 0 Тогда 
			ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
			ОбойтиДеревоДляВнутреннегоФормата(СтрСтроки, ТабличныйДокумент, Макет, Интервал + "   ", ПараметрыОтчетаУФ);
			ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ВывестиОтчетТестированияВоВнутреннемФормате(Дерево, ПараметрыОтчетаУФ) Экспорт

	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ОтчетТестирования");
	
	Секция = Макет.ПолучитьОбласть("Заголовок");
	
	Интервал = "";
	ОбойтиДеревоДляВнутреннегоФормата(Дерево, ТабДок, Макет, Интервал + "   ", ПараметрыОтчетаУФ);
		
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	Возврат ТабДок;
	
КонецФункции

Функция Шаг(Стр) Экспорт
	ХостФорма = ПолучитьФорму("Форма");
	ХостФорма.ШагФорма(Стр);
	// todo надо разобраться, может это все-таки процедура
	Возврат Неопределено;
КонецФункции	

Процедура СоздатьКолонкиДерева(Дерево) Экспорт
	Дерево.Колонки.Добавить("Имя");
	Дерево.Колонки.Добавить("Статус");
	Дерево.Колонки.Добавить("ПолныйПуть");
	
	Дерево.Колонки.Добавить("ИменованныеПараметры");
	
	Дерево.Колонки.Добавить("ЗначенияПараметров");
	Дерево.Колонки.Добавить("Снипет");
	Дерево.Колонки.Добавить("АдресСнипета");
	Дерево.Колонки.Добавить("ЭтоЧужойСнипет");
	Дерево.Колонки.Добавить("СтрокаРеальнойПроцедуры");
	
	Дерево.Колонки.Добавить("РезультатПрохожденияТестовСценария");
	
	Дерево.Колонки.Добавить("ШагСПараметрамиВТаблице");
	Дерево.Колонки.Добавить("СтрокаПараметровШагаВВидеТаблицы");
	Дерево.Колонки.Добавить("ПараметрыТаблицы");
	Дерево.Колонки.Добавить("ИмяШагаБезКлючевогоСлова");
	Дерево.Колонки.Добавить("ШагСценарий");
	Дерево.Колонки.Добавить("МассивСценариевЗащитаОтЗацикливания");
	Дерево.Колонки.Добавить("ФичаИмеетСвоюEPF");
	
	Дерево.Колонки.Добавить("НомерСтрокиВФиче");
	
	Если Дерево.Колонки.Найти("ТипКартинки") = Неопределено Тогда
		Дерево.Колонки.Добавить("ТипКартинки");
	КонецЕсли;	 
	
	Дерево.Колонки.Добавить("ЗначениеОтступа", Новый ОписаниеТипов("Число"));
	Дерево.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("ДопТип", Новый ОписаниеТипов("Строка"));
	
	Дерево.Колонки.Добавить("ПроизвольныеЗначения");

КонецПроцедуры

Функция ДобавитьШагВМассивТестов(МассивТестов, Снипет, ИмяПроцедуры, ПредставлениеТеста = Неопределено, 
		ОписаниеШага = Неопределено, ТипШагаДляОписания = Неопределено, ТипШагаВДереве = Неопределено) Экспорт
	
	Структура = Новый Структура;
	
	Структура.Вставить("Снипет", Снипет);
	Структура.Вставить("ИмяПроцедуры", ИмяПроцедуры);
	Структура.Вставить("ПредставлениеТеста", ПредставлениеТеста);
	Структура.Вставить("ОписаниеШага", ОписаниеШага);
	Структура.Вставить("ТипШага", ТипШагаДляОписания);
	Структура.Вставить("ТипШагаВДереве", ТипШагаВДереве);
	Структура.Вставить("Транзакция", Неопределено);
	МассивТестов.Добавить(Структура);
	
	// todo надо разобраться, может это все-таки процедура
	Возврат Неопределено;

КонецФункции

Процедура УстановитьРезультатУсловия(Результат) Экспорт
	РезультатУсловия = Результат;
КонецПроцедуры

Функция ПолныйТекстОшибкиjUnut(Знач Стр, ДопПараметры)
	Стр = СтрЗаменить(Стр,")}: ", ")}:");
	Стр = СтрЗаменить(Стр, ")}:", ")}:" + Символы.ПС);
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Стр, Символы.ПС);
	
	ИдСтрокиСтекВызоваНачало = 0;
	ИдСтрокиСтекВызоваКонец  = -1;
	ИдСтрокиДанныеОшибкиНачало  = -1;
	ИдСтрокиДанныеОшибкиКонец  = -1;
	ИдСтрокиТехническиеДанные = -1;
	Для Ккк = 0 По МассивСтрок.Количество() - 1 Цикл
		ТекСтр = МассивСтрок[Ккк];
		Если Прав(ТекСтр, 3) = ")}:" Тогда
			ИдСтрокиСтекВызоваКонец = Ккк;
		Иначе
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если ИдСтрокиСтекВызоваКонец >= 0 И ДопПараметры.СтрокаТехническиеДанные <> Неопределено Тогда
		ИдСтрокиДанныеОшибкиНачало = ИдСтрокиСтекВызоваКонец + 1;
		Для Ккк = ИдСтрокиДанныеОшибкиНачало По МассивСтрок.Количество() - 1 Цикл
			ТекСтр = МассивСтрок[Ккк];
			Если ТекСтр = ДопПараметры.СтрокаТехническиеДанные Тогда
				ИдСтрокиДанныеОшибкиКонец = Ккк - 1;
				ИдСтрокиТехническиеДанные = Ккк;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;
	КонецЕсли;	
	
	Если ИдСтрокиДанныеОшибкиКонец >= 0 И ИдСтрокиДанныеОшибкиКонец >= 0 И ИдСтрокиТехническиеДанные >= 0 Тогда
		Стр = "";
		Для Ккк = ИдСтрокиДанныеОшибкиНачало По ИдСтрокиДанныеОшибкиКонец Цикл
			Стр = Стр + МассивСтрок[Ккк] + Символы.ПС;
		КонецЦикла;	
		 
		Если Прав(Стр, 1) <> Символы.ПС Тогда
			Стр = Стр + Символы.ПС;
		КонецЕсли;	 
		
		Для Ккк = ИдСтрокиСтекВызоваНачало По ИдСтрокиСтекВызоваКонец Цикл
			Стр = Стр + МассивСтрок[Ккк] + Символы.ПС;
		КонецЦикла;	
		
		Стр = СокрП(Стр);
		Стр = Стр + Символы.ПС + Символы.ПС;
		
		Для Ккк = ИдСтрокиТехническиеДанные По МассивСтрок.Количество() - 1 Цикл
			Стр = Стр + МассивСтрок[Ккк] + Символы.ПС;
		КонецЦикла;	
	КонецЕсли;	 
	
	Возврат Стр;
КонецФункции	 

Функция ЗначениеВСтрокуjUnit(Знач Значение)
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗначения = Тип("Строка") Тогда
		Возврат Формат(Значение, "ЧГ=; ЧН=0");
	ИначеЕсли ТипЗначения = Тип("Массив") Тогда
		Возврат ЗначениеВСтрокуМассивjUnit(Значение); 
	ИначеЕсли ТипЗначения = Тип("Структура") 
			ИЛИ ТипЗначения = Тип("Соответствие") 
			ИЛИ ТипЗначения = Тип("СписокЗначений") Тогда
		Возврат ЗначениеВСтрокуПростаяКоллекцияjUnit(Значение); 
	ИначеЕсли ТипЗначения = Тип("ТаблицаЗначений") Тогда
		Возврат ЗначениеВСтрокуТаблицаЗначенийjUnit(Значение); 
	ИначеЕсли ТипЗначения = Тип("Тип") ИЛИ ТипЗначения = Тип("СтандартныйПериод") Тогда
		Возврат Строка(Значение); 
	Иначе
		Попытка
			Возврат Формат(Значение, "ЧГ=; ЧН=0");
		Исключение
			Возврат Строка(Значение); 
		КонецПопытки;
	КонецЕсли;	 
КонецФункции	 

Функция ЗначениеВСтрокуМассивjUnit(Коллекция)
	Стр = "";
	Для Ккк = 0 По Коллекция.Количество() - 1 Цикл
		Стр = Стр + ЗначениеВСтрокуjUnit(Коллекция[Ккк]);
		Если Ккк < Коллекция.Количество() - 1 Тогда
			Стр = Стр + Символы.ПС;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Стр; 
КонецФункции	

Функция ЗначениеВСтрокуПростаяКоллекцияjUnit(Коллекция)
	Стр = "|";
	Для Каждого Элем Из Коллекция Цикл
		Стр = " " + Стр + Элем.Значение + " |";
	КонецЦикла;	 
	
	Возврат Стр; 
КонецФункции	 

Функция ЗначениеВСтрокуТаблицаЗначенийjUnit(Тзн)
	МассивСтрокТаблицы = Новый Массив;
	
	СтрокаТаблица = "";
	КолСтрок = Тзн.Количество();
	Ном = 0;
	Для Каждого СтрокаТзн Из Тзн Цикл
		Ном = Ном + 1;
		Стр = "|";
		Для Каждого Колонка Из Тзн.Колонки Цикл
			Стр = Стр + " " + ЗначениеВСтрокуjUnit(СтрокаТзн[Колонка.Имя]) + " |";
		КонецЦикла;	 
		
		МассивСтрокТаблицы.Добавить(Стр);
	КонецЦикла;	 
	
	ФорматироватьТаблицуGherkin(МассивСтрокТаблицы);
	
	СтрокаТаблицы = "";
	Для Каждого Стр Из МассивСтрокТаблицы Цикл
		СтрокаТаблицы = СтрокаТаблицы + Стр + Символы.ПС;
	КонецЦикла;	 
	
	Возврат СтрокаТаблицы;
КонецФункции	 

Процедура ФорматироватьТаблицуGherkin(МассивТаблицы)
	Если МассивТаблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	МассивПараметров = ОпределитьПараметрыВСтрокеПримера(МассивТаблицы[0]);
	КолПараметров = МассивПараметров.Количество();
	МассивДлин = Новый Массив;
	Для каждого Элем Из МассивПараметров Цикл
		МассивДлин.Добавить(0);
	КонецЦикла;
	
	Для каждого СтрТзн Из МассивТаблицы Цикл
		МассивПараметров = ОпределитьПараметрыВСтрокеПримера(СтрТзн);
		
		Для Ккк = 0 По МассивДлин.Количество() - 1 Цикл
			ДлинаСтроки = СтрДлина(СокрЛП(МассивПараметров.Получить(Ккк)));
			Если ДлинаСтроки > МассивДлин[Ккк] Тогда
				МассивДлин[Ккк] = ДлинаСтроки;
			КонецЕсли;	 
		КонецЦикла;
	КонецЦикла;
	
	Для Ррр = 0 По (МассивТаблицы.Количество() - 1) Цикл
		СтрТзн = МассивТаблицы[Ррр];
		МассивПараметров = ОпределитьПараметрыВСтрокеПримера(СтрТзн);
		СтрПараметров = "| ";
		Для Ккк = 0 По МассивДлин.Количество() - 1 Цикл
			Зн = СокрЛП(МассивПараметров[Ккк]);
			Зн = Зн + НужноеЧислоПробелов(МассивДлин[Ккк] - СтрДлина(Зн));
			СтрПараметров = СтрПараметров + Зн + " | ";
		КонецЦикла;
		
		СтрПараметров = СокрЛП(СтрПараметров);
		
		МассивТаблицы[Ррр] = СтрПараметров;
	КонецЦикла;
КонецПроцедуры

Функция ОпределитьПараметрыВСтрокеПримера(Знач Стр)
	Массив = Новый Массив;

	Стр = СтрЗаменить(Стр, "\|", "~ЭкранированиеВертикальнойЧерты~");
	
	Стр = СокрЛП(Стр);
	Если Лев(Стр, 1) <> "|" ИЛИ Прав(Стр, 1) <> "|" Тогда
		Возврат Массив;
	КонецЕсли;	 
	
	Стр = Сред(Стр, 2);
	Стр = Сред(Стр, 1, СтрДлина(Стр) - 1);
	// убрали символы |
	
	Массив = РазложитьСтрокуВМассивПодстрок(Стр, "|");
	Если Массив.Количество() = 0 Тогда
		Массив.Добавить(Стр);
	КонецЕсли;	
	
	Для Ккк = 0 По Массив.Количество() - 1 Цикл
		Массив[Ккк] = СокрЛП(Массив[Ккк]);
		Массив[Ккк] = СтрЗаменить(Массив[Ккк], "~ЭкранированиеВертикальнойЧерты~", "\|");
	КонецЦикла;
	
	Спс = Новый СписокЗначений;
	Для каждого Элем Из Массив Цикл
		Спс.Добавить(Элем);
	КонецЦикла;
	
	Возврат  Спс;
КонецФункции

Процедура ОбработатьAssertОжидаемоеРеальноеЗначение(ОжидаемоеЗначение, РеальноеЗначение) Экспорт
	
	Если ПустаяСтрока(АдресДанныеОбОшибке) Тогда
		Возврат;
	КонецЕсли;	 
	
	СтруктураОшибки = ПолучитьИзВременногоХранилища(АдресДанныеОбОшибке);
	
	Если ТипЗнч(СтруктураОшибки) = Тип("Структура") Тогда
		СтруктураОшибки.ОшибкаAssert     = Истина;
		СтруктураОшибки.ЗначениеActual   = РеальноеЗначение;
		СтруктураОшибки.ЗначениеExpected = ОжидаемоеЗначение;
		
		ПоместитьВоВременноеХранилище(СтруктураОшибки, АдресДанныеОбОшибке);
	КонецЕсли;	 
	
КонецПроцедуры 

Функция НужноеЧислоПробелов(КолПробелов)
	Результат = КешСтрокаПробелов[КолПробелов];
	Если Результат <> Неопределено Тогда
		Возврат Результат; 
	КонецЕсли;	 
	
	Стр = "";
	Для Сч = 1 По КолПробелов Цикл
		Стр = Стр + " ";
	КонецЦикла;	
	
	КешСтрокаПробелов.Вставить(КолПробелов, Стр);
	Возврат Стр; 
		
КонецФункции	 

#КонецОбласти

#Область ПроцедурыИФункцииFeatureReader

Функция ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(Версия1,Версия2)
	Массив1 = РазложитьСтрокуВМассивПодстрок(Версия1,".");
	Массив2 = РазложитьСтрокуВМассивПодстрок(Версия2,".");
	
	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Массив1.Количество()-1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);
		
		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		ИначеЕсли Число(Элем2) < Число(Элем1) Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Версия1БольшеИлиРавно;
КонецФункции	

Функция ВЭтойСтрокеКлючевоеСловоПримеры(Стр)
	Если Стр = "" Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	
	ДанныеПеревода      = СоответствиеТаблицПереводов.Получить(ТекущийЯзыкФичаФайла);
	ТаблицаКлючевыхСлов = ДанныеПеревода.ТаблицаКлючевыхСлов;
	СловаПоТипамПримеры = ДанныеПеревода.СловаПоТипам.Получить("examples");
	
	
	//поиск в кеше
	
	
	НРег_Стр = НРег(Стр);
	Для каждого КлючевоеСлово Из СловаПоТипамПримеры Цикл
		Позиция = Найти(НРег_Стр, КлючевоеСлово);
		Если Позиция = 1 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции	

Функция ПолучитьКлючевоеСлово(Стр, ВтораяЧастьСтрокиПозиция=1,ПервоеСлово = Неопределено)
	Символ = Лев(Стр,1);
	
	Если Символ = "" ИЛИ Символ = "#"  ИЛИ Символ = "@" ИЛИ Символ = "*" ИЛИ Символ = "|" ИЛИ Лев(Стр,2) = "//" Тогда
		Возврат "";
	КонецЕсли;	 
	
	ДанныеПеревода      = СоответствиеТаблицПереводов.Получить(ТекущийЯзыкФичаФайла);
	ТаблицаКлючевыхСлов = ДанныеПеревода.ТаблицаКлючевыхСлов;
	
	Если ПервоеСлово <> Неопределено Тогда
		ПервоеСловоПоиск = СтрЗаменить(ПервоеСлово,":","");
		СтрТаблицаКлючевыхСлов = ТаблицаКлючевыхСлов.Найти(НРег(ПервоеСловоПоиск),"Слово");
		Если СтрТаблицаКлючевыхСлов <> Неопределено и СтрТаблицаКлючевыхСлов.Уникально Тогда
			ВтораяЧастьСтрокиПозиция = СтрДлина(ПервоеСловоПоиск)+1;
			Возврат СтрТаблицаКлючевыхСлов.Тип;
		КонецЕсли;	 
	КонецЕсли;	 
	
	//поиск в кеше
	МаксДлинаСлова = ДанныеПеревода.МаксДлинаСлова;
	
	ПодСтрока = Лев(Стр,МаксДлинаСлова);
	СтрТаблицаКешПервыхСлов = ТаблицаКешПервыхСлов.Найти(ПодСтрока,"ПерваяЧастьСтроки");
	Если СтрТаблицаКешПервыхСлов <> Неопределено Тогда
		ВтораяЧастьСтрокиПозиция = СтрДлина(СтрТаблицаКешПервыхСлов.Слово)+1;
		Возврат СтрТаблицаКешПервыхСлов.Тип;
	КонецЕсли;	 
	
	НРег_Стр = НРег(Стр);
	
	Для каждого СтрТаблицаКлючевыхСлов Из ТаблицаКлючевыхСлов Цикл
		Позиция = Найти(НРег_Стр, СтрТаблицаКлючевыхСлов.Слово);
		Если Позиция = 1 Тогда
			ВтораяЧастьСтрокиПозиция = СтрДлина(СтрТаблицаКлючевыхСлов.Слово)+1;
			
			Если СтрДлина(СтрТаблицаКлючевыхСлов.Слово) < МаксДлинаСлова Тогда
				СтрТаблицаКешПервыхСлов = ТаблицаКешПервыхСлов.Добавить();
				СтрТаблицаКешПервыхСлов.ПерваяЧастьСтроки = Подстрока;
				СтрТаблицаКешПервыхСлов.Слово             = СтрТаблицаКлючевыхСлов.Слово;
				СтрТаблицаКешПервыхСлов.Позиция           = ВтораяЧастьСтрокиПозиция;
				СтрТаблицаКешПервыхСлов.Тип               = СтрТаблицаКлючевыхСлов.Тип;
			КонецЕсли;	 
			
			Возврат СтрТаблицаКлючевыхСлов.Тип;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
КонецФункции

Функция ОпределитьПараметрыВСтрокеПримераПарсерФич(ОбъектСоСтрокой,СтруктураПараметров)
	ДанныеКеш = СтруктураПараметров.КешПараметрыВСтроке[ОбъектСоСтрокой.Стр];
	Если ДанныеКеш <> Неопределено Тогда
		Возврат ДанныеКеш.Скопировать();
	КонецЕсли;	 
	
	Стр = СокрЛП(ОбъектСоСтрокой.Стр);
	
	Если Лев(Стр,1) <> "|" Тогда
		СтрОшибки = "Таблица параметров должна начинаться с символа |";
		НомерСтрокиВФиче = Неопределено;
		Попытка
			НомерСтрокиВФиче = ОбъектСоСтрокой.НомерСтрокиВФиче;
			СтрОшибки = СтрОшибки + ". Строка №" + НомерСтрокиВФиче;
		Исключение
		КонецПопытки;
		
		Сообщить(СтрОшибки);
		СписокЗн = Новый СписокЗначений;
		Возврат СписокЗн;
	КонецЕсли;	 
	
	Если Прав(Стр,1) <> "|" Тогда
		СтрОшибки = "Таблица параметров должна заканчиваться символом |";
		
		Если СтруктураПараметров.Свойство("ТекущийФичаФайл") Тогда
			СтрОшибки = СтрОшибки + Символы.ПС +
				?(СтруктураПараметров.ЭтоLinux,
				СтруктураПараметров.ТекущийФичаФайл,
				СтрЗаменить(СтруктураПараметров.ТекущийФичаФайл, "/", "\"));
		КонецЕсли;	 
			
		НомерСтрокиВФиче = Неопределено;
		Попытка
			НомерСтрокиВФиче = ОбъектСоСтрокой.НомерСтрокиВФиче;
			СтрОшибки = СтрОшибки + Символы.ПС + "Строка №" + НомерСтрокиВФиче;
		Исключение
		КонецПопытки;
		
		Если НЕ СтруктураПараметров.Свойство("ИсторияОшибок") Тогда
			СтруктураПараметров.Вставить("ИсторияОшибок", Новый Соответствие);
		КонецЕсли;	 
		
		Если СтруктураПараметров.ИсторияОшибок[СтрОшибки] = Неопределено И НомерСтрокиВФиче <> Неопределено Тогда
			Сообщить(СтрОшибки);
			СтруктураПараметров.ИсторияОшибок.Вставить(СтрОшибки, Истина);
		КонецЕсли;	 
		
		СписокЗн = Новый СписокЗначений;
		Возврат СписокЗн;
	КонецЕсли;		
	
	Стр = Сред(Стр,2);
	Стр = Сред(Стр,1,СтрДлина(Стр)-1);
	//убрали символы | слева и справа
	
	Стр    = СтрЗаменить(Стр,"\|",ПредставлениеВертикальнаяЧерта);
	Массив = РазложитьСтрокуВМассивПодстрок(Стр,"|");
	Если Массив.Количество() = 0 Тогда
		Массив.Добавить(Стр);
	КонецЕсли;	
	
	Для Ккк = 0 По Массив.Количество()-1 Цикл
		Значение    = Массив[Ккк];
		Значение    = СтрЗаменить(Значение,ПредставлениеВертЧертыВТабДок,"|");//учли что вертикальная черта может быть в значении
		Значение    = СтрЗаменить(Значение,ПредставлениеВертикальнаяЧерта,"\|");//учли что вертикальная черта может быть в значении
		Массив[Ккк] = Значение;
		Массив[Ккк] = СокрЛП(Массив[Ккк]);
	КонецЦикла;
	
	СписокЗн = Новый СписокЗначений;
	Для каждого Элем Из Массив Цикл
		СписокЗн.Добавить(Элем);
	КонецЦикла;
	
	СтруктураПараметров.КешПараметрыВСтроке.Вставить(ОбъектСоСтрокой.Стр,СписокЗн.Скопировать());
	
	Возврат  СписокЗн;
КонецФункции

Процедура ФорматТаблицыПримеров(Тзн,РазныеИменованныеПараметры,БылаОшибка,ЭтоПередачаТаблицы,СтруктураПараметров)
	Если Тзн.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	//проверим соответствие параметров в шагах и в таблице примеров
	Если НЕ ЭтоПередачаТаблицы Тогда
		СписокПараметров = ОпределитьПараметрыВСтрокеПримераПарсерФич(Тзн[0],СтруктураПараметров);
		Для Ккк = 0 По СписокПараметров.Количество()-1 Цикл
			СписокПараметров[Ккк].Значение = УбратьОбрамляющиеСимволыСтроки(СокрЛП(НРег(СписокПараметров[Ккк].Значение)));
		КонецЦикла;
		
		Для каждого ЭлемРазныеИменованныеПараметры Из РазныеИменованныеПараметры Цикл
			Если СписокПараметров.НайтиПоЗначению(НРег(ЭлемРазныеИменованныеПараметры)) = Неопределено Тогда
				БылаОшибка = Истина;
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Параметр <%1> не найден в таблице параметров.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ЭлемРазныеИменованныеПараметры);
				Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
			КонецЕсли;
		КонецЦикла;    	
	КонецЕсли;	 
	
	СписокПараметров = ОпределитьПараметрыВСтрокеПримераПарсерФич(Тзн[0],СтруктураПараметров);
	КолПараметров = СписокПараметров.Количество();
	МассивДлин = Новый Массив;
	Для каждого Элем Из СписокПараметров Цикл
		МассивДлин.Добавить(0);
	КонецЦикла;
	
	
	Для каждого СтрТзн Из Тзн Цикл
		Если СокрЛП(СтрТзн.Стр) = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		//Если СтрТзн.Свойство("Тип") Тогда
		//	Если СтрТзн.Тип = "Шаг" Тогда
		//		//это может быть, когда в шаг условие передали таблицу, а ещё он содержит другие шаги
		//		Продолжить;
		//	КонецЕсли;	 
		//КонецЕсли;	 
		
		СписокПараметров = ОпределитьПараметрыВСтрокеПримераПарсерФич(СтрТзн,СтруктураПараметров);
		Если СписокПараметров.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Для Ккк = 0 По МассивДлин.Количество()-1 Цикл
			Если СписокПараметров.Количество()-1 < Ккк Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Неверное число параметров в строке таблицы. Должно быть <%1> параметров, а в строке найдено <%2>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",МассивДлин.Количество()); 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",СписокПараметров.Количество()); 
				
				ТекстСообщения = ТекстСообщения + Символы.ПС + СтрТзн.Стр;
				
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			ДлинаСтроки = СтрДлина(СокрЛП(СписокПараметров.Получить(Ккк)));
			Если ДлинаСтроки > МассивДлин[Ккк] Тогда
				МассивДлин[Ккк] = ДлинаСтроки;
			КонецЕсли;	 
			
		КонецЦикла;
	КонецЦикла;
	
	
	Для каждого СтрТзн Из Тзн Цикл
		Если СокрЛП(СтрТзн.Стр) = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		//последним параметром специально идёт неопределено, иначе не работает фича ПередачаВоВложенныйСценарийТаблиц
		СписокПараметров = ОпределитьПараметрыВСтрокеПримераПарсерФич(СтрТзн,СтруктураПараметров);
		Если СписокПараметров.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Если СписокПараметров.Количество() = 1 И ПустаяСтрока(СписокПараметров[0].Значение) Тогда
			Продолжить;
		КонецЕсли;	 
		
		СтрПараметров = "| ";
		Для Ккк = 0 По МассивДлин.Количество()-1 Цикл
			Зн = СокрЛП(СписокПараметров[Ккк]);
			СтрПараметров = СтрПараметров + Зн + СтрокаПробелов(МассивДлин[Ккк] - СтрДлина(Зн),СтруктураПараметров) + " | ";
		КонецЦикла;
		
		СтрТзн.Стр = СокрЛП(СтрПараметров);
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокаПробелов(Кол,СтруктураПараметров)
	Если Кол <= 0 Тогда
		Возврат "";
	КонецЕсли;	 
	
	Если Кол <= 120 Тогда
		Возврат СтруктураПараметров.СтрокаПробелов[Кол]; 
	КонецЕсли;	 
	
	Стр = "";
	Для Счетчик = 1 По Кол Цикл
		Стр = Стр + " ";
	КонецЦикла;	
	
	СтруктураПараметров.СтрокаПробелов.Вставить(Кол, Стр);
	
	Возврат Стр; 
КонецФункции	 

Функция ЭтоДата(Стр)
	Массив = РазложитьСтрокуВМассивПодстрок(Стр,".");
	Если Массив.Количество() <> 3 Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Элем1 = Массив[0];
	Элем2 = Массив[1];
	Элем3 = Массив[2];
	
	Если НЕ ЭтоЦелоеЧисло(Элем1) Тогда
		Возврат Ложь;
	КонецЕсли;	 
	Если НЕ ЭтоЦелоеЧисло(Элем2) Тогда
		Возврат Ложь;
	КонецЕсли;	 
	Если НЕ ЭтоЦелоеЧисло(Элем3) Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если СтрДлина(Элем1) <> 2 Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если СтрДлина(Элем2) <> 2 Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если (СтрДлина(Элем3) <> 2) и (СтрДлина(Элем3) <> 4) Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	

Процедура ОпределитьТипЗначенияСтрокиЦеликом(Знач Стр, Тип, СтруктураПараметров)
	ДанныеКеш = СтруктураПараметров.КешОпределенияТипа[Стр];
	Если ДанныеКеш <> Неопределено Тогда
		Тип = ДанныеКеш;
		Возврат;
	КонецЕсли;	 
	
	СтрокаОригинал = Стр;
	
	Тип = "Строка";
	
	Если ЭтоКорректноеЧисло(Стр) Тогда
		Тип = "Число";
	КонецЕсли;	 
	
	Если ЭтоДата(Стр) Тогда
		Тип = "Дата";
	КонецЕсли;	
	
	СтруктураПараметров.КешОпределенияТипа.Вставить(СтрокаОригинал,Тип);
	
КонецПроцедуры

Функция УбратьКавычкиСлеваИСправа(Знач Стр)
	Возврат Сред(Стр,2,СтрДлина(Стр)-2);
КонецФункции	

Функция УбратьОбрамляющиеСимволыСтроки(Знач  Стр)
	
	Если (Лев(Стр,1) = """") и (Прав(Стр,1) = """") Тогда
		Стр = УбратьКавычкиСлеваИСправа(Стр);
	ИначеЕсли (Лев(Стр,1) = "'") и (Прав(Стр,1) = "'") Тогда
		Стр = УбратьКавычкиСлеваИСправа(Стр);
	КонецЕсли;	 
	
	Возврат Стр; 
	
КонецФункции	 

Функция ПреобразоватьИменнованныеПараметрыСОпределениемТипов(Спс,СпсИмен,СтруктураПараметров)
	НовыйСписок = Новый СписокЗначений;
	Ном = 0;
	Для каждого Элем Из Спс Цикл
		СтруктураЗначения = Новый Структура;
		
		Значение = Неопределено;
		Тип      = Неопределено;
		ОпределитьТипЗначенияСтрокиЦеликом(Элем.Значение,Тип,СтруктураПараметров);
		
		Если Тип = "Строка" Тогда
			Если (Лев(Элем.Значение,1) = """") и (Прав(Элем.Значение,1) = """") Тогда
				Элем.Значение = УбратьКавычкиСлеваИСправа(Элем.Значение);
			ИначеЕсли (Лев(Элем.Значение,1) = "'") и (Прав(Элем.Значение,1) = "'") Тогда
				Элем.Значение = УбратьКавычкиСлеваИСправа(Элем.Значение);
			КонецЕсли;	 
		КонецЕсли;	 
		
		Элем.Значение = СтрЗаменить(Элем.Значение,"\'","'");
		Элем.Значение = СтрЗаменить(Элем.Значение,"\""","""");
		Элем.Значение = СтрЗаменить(Элем.Значение,"\|","|");
		//Элем.Значение = СтрЗаменить(Элем.Значение,"\\n","~ЭкранированиеПереводаСтроки~");
		Элем.Значение = СтрЗаменить(Элем.Значение,"\\","\");
		//Элем.Значение = СтрЗаменить(Элем.Значение,"~ЭкранированиеПереводаСтроки~","\\n");
		СтруктураЗначения.Вставить("Значение",Элем.Значение);
		СтруктураЗначения.Вставить("Тип",Тип);
		СтруктураЗначения.Вставить("ИмяПараметра",УбратьОбрамляющиеСимволыСтроки(СпсИмен[Ном].Значение));
		
		НовыйСписок.Добавить(СтруктураЗначения);
		
		Ном = Ном + 1;
	КонецЦикла;
	
	Возврат НовыйСписок;
КонецФункции

Функция СоздатьИмяШагаДляScenarioOutline_И_ОбработатьЗначенияПараметров(Знач Стр,ЗначенияПараметровОбычные,ЗначенияПараметровИменованные)
	Для каждого Элем Из ЗначенияПараметровОбычные Цикл
		Если Элем.Значение.Тип = "ПараметрИменованный" Тогда
			
			ИмяПараметра      = Элем.Значение.Значение;
			ЗначениеПараметра = Неопределено;
			ТипПараметра      = Неопределено;
			Для каждого ЗнПарам Из ЗначенияПараметровИменованные Цикл
				Если ЗнПарам.Значение.ИмяПараметра = ИмяПараметра Тогда
					ЗначениеПараметра = ЗнПарам.Значение.Значение;
					ТипПараметра      = ЗнПарам.Значение.Тип;
				КонецЕсли; 
			КонецЦикла;
			
			Если ЗначениеПараметра = Неопределено Тогда
				СтрОшибки = "Не получилось найти  в массиве ЗначенияПараметровИменованные элемент с именем " + ИмяПараметра;
				Сообщить(СтрОшибки);
				ВызватьИсключение СтрОшибки;
			КонецЕсли; 
			
			
			Если ТипПараметра = "Строка" Тогда
				Стр = СтрЗаменить(Стр,"<"+ ИмяПараметра + ">","""" + ЗначениеПараметра + """");
			Иначе	
				Стр = СтрЗаменить(Стр,"<"+ ИмяПараметра + ">",ЗначениеПараметра);
			КонецЕсли;	 
			
			Элем.Значение.Значение = ЗначениеПараметра;
			Элем.Значение.Тип      = ТипПараметра;
			
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Стр;
КонецФункции

Функция СкопироватьСписокЗначенийСтруктур(Массив)
	НовыйСписок = Новый СписокЗначений;
	
	Для каждого ЭлемМассив Из Массив Цикл
		НоваяСтруктура = Новый Структура;
		Для каждого ЭлемСтруктура Из ЭлемМассив.Значение Цикл
			НоваяСтруктура.Вставить(ЭлемСтруктура.Ключ,ЭлемСтруктура.Значение);
		КонецЦикла;
		
		НовыйСписок.Добавить(НоваяСтруктура);
	КонецЦикла;
	
    Возврат НовыйСписок;
КонецФункции

Процедура ДобавитьСценарийДляДанногоПримера(СтрокаПримеров,ИменованныеПараметры,СтруктураПараметров)
	//СтрШагПримера = СтрокаПримеров.Строки.Добавить();
	
	СтрокиШагов = СтрокаПримеров.Родитель.Родитель;
	ПараметрыКопирования = Новый Структура;
	ПараметрыКопирования.Вставить("СозданиеСекцииПримеров",Истина);
	ПараметрыКопирования.Вставить("СтрокаПримеров",СтрокаПримеров);
	ПараметрыКопирования.Вставить("ИменованныеПараметры",ИменованныеПараметры);
	СкопироватьСтрокуВДереваПодчиненныеЭлементы(СтрокаПримеров,СтрокиШагов,ПараметрыКопирования,СтруктураПараметров);
	ПараметрыКопирования = Неопределено;
КонецПроцедуры

Функция ПолучитьНовыйStepDefinition(Знач Стр)
	
	Стр = СтрЗаменить(Стр,"СтрокаК)",")");
	Стр = СтрЗаменить(Стр,"СтрокаА)",")");
	Стр = СтрЗаменить(Стр,"Дата)",")");
	Стр = СтрЗаменить(Стр,"Число)",")");
	
	Стр = СтрЗаменить(Стр,"СтрокаК,",",");
	Стр = СтрЗаменить(Стр,"СтрокаА,",",");
	Стр = СтрЗаменить(Стр,"Дата,",",");
	Стр = СтрЗаменить(Стр,"Число,",",");
	
	Возврат Стр;
КонецФункции

Функция ПолучитьНовуюСтрокуПараметров(Знач Стр)
	Стр = Стр + ",";
	
	Стр = СтрЗаменить(Стр,"Строка,",",");
	Стр = СтрЗаменить(Стр,"Дата,",",");
	Стр = СтрЗаменить(Стр,"Число,",",");
	
	Стр = Лев(Стр,СтрДлина(Стр)-1);
	
	Возврат Стр;
КонецФункции

Функция СкопироватьСтруктуру(Оригинал)
	Результат = Новый Структура();
	Для каждого Элем Из Оригинал Цикл
		Результат.Вставить(Элем.Ключ,Элем.Значение);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции	

Процедура ОбработатьПередачуПараметровТаблицей(СтрСтрокиШагов,МассивТаблицПередаваемыхКакПараметр,
	                                 РазныеИменованныеПараметры,СтруктураПараметров = Неопределено)
									 
	Если МассивТаблицПередаваемыхКакПараметр.Количество() > 0 Тогда
		СтрСтрокиШагов.ШагСПараметрамиВТаблице = Истина;
		СтрокиТаблицаСтрокПередачаПараметровТаблицей = СтрСтрокиШагов.Строки;
		
		МассивСтрокДляУдаления = Новый Массив;
		Для Каждого ТекСтрока Из СтрокиТаблицаСтрокПередачаПараметровТаблицей Цикл
			Если ТекСтрока.СтрокаПараметровШагаВВидеТаблицы Тогда
				МассивСтрокДляУдаления.Добавить(ТекСтрока);
			ИначеЕсли СокрЛП(ТекСтрока.Имя) = "" Тогда
				МассивСтрокДляУдаления.Добавить(ТекСтрока);
			КонецЕсли;	 
		КонецЦикла;	
		
		Для Каждого ТекСтрока Из МассивСтрокДляУдаления Цикл
			СтрокиТаблицаСтрокПередачаПараметровТаблицей.Удалить(ТекСтрока);
		КонецЦикла;	
		
		
		ИндексВставки = 0;
		НомерТаблицы = 0;
		Для Каждого ТаблицаСтрокПередачаПараметровТаблицей Из МассивТаблицПередаваемыхКакПараметр Цикл
			НомерТаблицы = НомерТаблицы + 1;
			
			БылаОшибка = Ложь;
			ФорматТаблицыПримеров(ТаблицаСтрокПередачаПараметровТаблицей,РазныеИменованныеПараметры,БылаОшибка,
			                                                                         Истина,СтруктураПараметров);
			
			Если НомерТаблицы > 1 Тогда
				СтрокаТаблицы             = СтрокиТаблицаСтрокПередачаПараметровТаблицей.Добавить(); //добавим разделитель
				ИндексВставки             = ИндексВставки + 1;
				СтрокаТаблицы.ТипКартинки = -1;
			КонецЕсли;	 
			
			Для каждого СтрТаблицаСтрокПередачаПараметровТаблицей Из ТаблицаСтрокПередачаПараметровТаблицей Цикл
				СтрокаТаблицы                                  = СтрокиТаблицаСтрокПередачаПараметровТаблицей.Вставить(ИндексВставки);
				ИндексВставки                                  = ИндексВставки + 1;
				СтрокаТаблицы.СтрокаПараметровШагаВВидеТаблицы = Истина;
				СтрокаТаблицы.Имя                              = СтрТаблицаСтрокПередачаПараметровТаблицей.Стр;
				СтрокаТаблицы.ТипКартинки                      = -1;
				Если ТипЗнч(СтрТаблицаСтрокПередачаПараметровТаблицей) = Тип("Структура") Тогда
					Если СтрТаблицаСтрокПередачаПараметровТаблицей.Свойство("НомерСтрокиВФиче") Тогда
						СтрокаТаблицы.НомерСтрокиВФиче                 = СтрТаблицаСтрокПередачаПараметровТаблицей.НомерСтрокиВФиче;
					КонецЕсли;	 
				КонецЕсли;	 
				Если СокрЛП(СтрТаблицаСтрокПередачаПараметровТаблицей.Стр) <> "" Тогда
					СтрокаТаблицы.ПараметрыТаблицы = РассчитатьПараметрыТаблицы(СтрТаблицаСтрокПередачаПараметровТаблицей, СтруктураПараметров);
				КонецЕсли;	 
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры

Функция РассчитатьПараметрыТаблицы(СтрТаблицаСтрокПередачаПараметровТаблицей, СтруктураПараметров)
	Если СтруктураПараметров.Свойство("КешРассчитатьПараметрыТаблицы") Тогда
		Результат = СтруктураПараметров.КешРассчитатьПараметрыТаблицы[СтрТаблицаСтрокПередачаПараметровТаблицей.Стр];
		Если Результат <> Неопределено Тогда
			Возврат Результат; 
		КонецЕсли;	 
	КонецЕсли;	 
	
	ПараметрыТаблицы = ОпределитьПараметрыВСтрокеПримераПарсерФич(
		СтрТаблицаСтрокПередачаПараметровТаблицей,СтруктураПараметров);
	Результат = ПреобразоватьИменнованныеПараметрыСОпределениемТипов(
	                          ПараметрыТаблицы,ПараметрыТаблицы, СтруктураПараметров);
							  
	Если СтруктураПараметров.Свойство("КешРассчитатьПараметрыТаблицы") Тогда
		СтруктураПараметров.КешРассчитатьПараметрыТаблицы.Вставить(СтрТаблицаСтрокПередачаПараметровТаблицей.Стр, Результат);
	КонецЕсли;	 
	
	Возврат Результат; 							  
КонецФункции	 

Функция ОпределитьКоличествоПередаваемыхТаблиц(СтрокаДерева)
	Если СтрокаДерева.ШагСПараметрамиВТаблице <> Истина Тогда
		Возврат 0;
	КонецЕсли;	 
	
	Количество = 1;
	Для Каждого ПодчиненнаяСтрокаДерева Из СтрокаДерева.Строки Цикл
		Если Не ЗначениеЗаполнено(ПодчиненнаяСтрокаДерева.Имя) Тогда
			Количество = Количество + 1;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Количество;
КонецФункции	

Функция ЗаменитьТаблицуПримеровНаПереданнуюТаблицу(Тзн)
	Массив = Новый Массив;
	Для Каждого СтрТзн Из Тзн Цикл
		Массив.Добавить(Новый Структура("Стр,НомерСтрокиВФиче",СтрТзн.Имя,СтрТзн.НомерСтрокиВФиче));
	КонецЦикла;	
	
	Возврат Массив;
КонецФункции	

Процедура ОпределитьРодителяШага(СтрТаблицаШагов,СтрокиШагов,СтрДеревоСтроки,ДеревоСтроки,СтруктураПараметров)
	
	Если СтрТаблицаШагов.Родитель <> Неопределено Тогда
		Если СтрТаблицаШагов.Родитель = -1 Тогда
			СтрокиШагов = СтрДеревоСтроки.Строки;
		Иначе	
			СтрокаТаблицыОбластей = СтруктураПараметров.ТаблицаОбластей.Найти(СтрТаблицаШагов.Родитель,"НомерСтрокиВФиче");
			Если СтрокаТаблицыОбластей <> Неопределено Тогда
				СтрокаДерева = СтрокаТаблицыОбластей.СтрокаДерева;
				СтрокиШагов  = СтрокаДерева.Строки;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

Процедура ОпределитьУровеньГруппы(СтрокиШагов,СтрТаблицаШагов)
	Родитель = СтрокиШагов.Родитель;
	Пока Истина Цикл
		Если Родитель.Тип = "Сценарий" Тогда
			Прервать;
		КонецЕсли;	 
		Если Родитель.Тип = "Пример" Тогда
			Прервать;
		КонецЕсли;	 
		
		Если СтрТаблицаШагов.ЗначениеОтступа > Родитель.ЗначениеОтступа Тогда
			Прервать;
		КонецЕсли;	 
			
		
		
		Родитель = Родитель.Родитель;
	КонецЦикла;	
	
	СтрокиШагов = Родитель.Строки;
КонецПроцедуры

Функция StepDefinitionИзТаблицыСценариев(IDИзStepDefinition,ТаблицаУжеСуществующихСценариев,СтруктураПараметров,НовыйStepDefinition)
	СтрТаблицаУжеСуществующихСценариев = ТаблицаУжеСуществующихСценариев.Найти(IDИзStepDefinition,"Снипет");
	Если СтрТаблицаУжеСуществующихСценариев = Неопределено и ТекущийЯзыкФичаФайла <> "ru"  Тогда
		Если Не СтруктураПараметров.Свойство("ТаблицаПеревода") Тогда
			СтруктураПараметров.Вставить("ТаблицаПеревода",ПолучитьТаблицуПеревода(СтруктураПараметров));
		КонецЕсли;	 
		
		ТаблицаПеревода = СтруктураПараметров.ТаблицаПеревода;
		СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(IDИзStepDefinition,"СтрокаДляПоискаПеревод");
		Если СтрокаТаблицаПеревода <> Неопределено Тогда
			СтрТаблицаУжеСуществующихСценариев = ТаблицаУжеСуществующихСценариев.Найти(СтрокаТаблицаПеревода.СтрокаДляПоискаРусский,"Снипет");
			Если СтрТаблицаУжеСуществующихСценариев <> Неопределено Тогда
				НовыйStepDefinition                = СтрТаблицаУжеСуществующихСценариев.Снипет + "()";
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;
	
	Возврат СтрТаблицаУжеСуществующихСценариев;
КонецФункции	

Функция StepDefinitionИзТаблицы(IDИзStepDefinition,ТаблицаИзвестныхStepDefinition,СтруктураПараметров,ЗначенияПараметров,СтрокаДереваШаг)
	СтрТаблицаИзвестныхStepDefinition = Неопределено;
	ЯзыкРодителя = ТекущийЯзыкФичаФайла;
	Если СтруктураПараметров.Свойство("ЯзыкРодителя") Тогда
		ЯзыкРодителя = СтруктураПараметров.ЯзыкРодителя;
	КонецЕсли;	 
	
	Если ТекущийЯзыкФичаФайла = "ru" И ЯзыкРодителя = "ru" Тогда
		СтрТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinition.Найти(IDИзStepDefinition,"СтрокаДляПоиска");
	Иначе	
		Если Не СтруктураПараметров.Свойство("ТаблицаПеревода") Тогда
			АдресВременногоХранилища = СтруктураПараметров.КешДанныеПеревода.СоответствиеПоЯзыкам[ЯзыкРодителя];
			Если АдресВременногоХранилища <> Неопределено Тогда
				СтруктураПараметров.Вставить("ТаблицаПеревода",ПолучитьИзВременногоХранилища(АдресВременногоХранилища));
			Иначе	
				СтруктураПараметров.Вставить("ТаблицаПеревода",ПолучитьТаблицуПеревода(СтруктураПараметров));
				UID = Новый УникальныйИдентификатор;
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СтруктураПараметров.ТаблицаПеревода,UID);
				СтруктураПараметров.КешДанныеПеревода.СоответствиеПоЯзыкам.Вставить(ЯзыкРодителя,АдресВременногоХранилища);
			КонецЕсли;	 
		КонецЕсли;	 
		
		ТаблицаПеревода = СтруктураПараметров.ТаблицаПеревода;
		СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(IDИзStepDefinition,"СтрокаДляПоискаПеревод");
		
		Если СтрокаТаблицаПеревода = Неопределено Тогда
			//возможно идёт встраивание вложенного сценария
			СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(IDИзStepDefinition,"СтрокаДляПоискаРусский");
			Если СтрокаТаблицаПеревода <> Неопределено Тогда
				СтрокаДереваШаг.Имя = СтрокаТаблицаПеревода.ТекстПереводаШаг;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если СтрокаТаблицаПеревода <> Неопределено Тогда
			СтрТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinition.Найти(СтрокаТаблицаПеревода.СтрокаДляПоискаРусский,"СтрокаДляПоиска");
			
			Если СтрокаТаблицаПеревода.МассивСоответствийПозицийПараметров <> Неопределено Тогда
				Если СтрокаТаблицаПеревода.МассивСоответствийПозицийПараметров.Количество() > 0 Тогда
					//значит надо поменять параметры местами
					Попытка
						ТзнСортировки = Новый ТаблицаЗначений;
						ТзнСортировки.Колонки.Добавить("Ид");
						ТзнСортировки.Колонки.Добавить("Значение");
						
						НовыеЗначенияПараметров = Новый СписокЗначений;
						ИдПараметра = -1;
						Для Каждого ТекПараметр Из ЗначенияПараметров Цикл
							ИдПараметра = ИдПараметра + 1;
							СтрокаТзнСортировки = ТзнСортировки.Добавить();
							СтрокаТзнСортировки.Ид = СтрокаТаблицаПеревода.МассивСоответствийПозицийПараметров[ИдПараметра];
							СтрокаТзнСортировки.Значение = ТекПараметр.Значение;
						КонецЦикла;	
						
						ТзнСортировки.Сортировать("Ид");
						
						Для Каждого СтрокаТзнСортировки Из ТзнСортировки Цикл
							НовыеЗначенияПараметров.Добавить(СтрокаТзнСортировки.Значение);
						КонецЦикла;	 
						
						ТзнСортировки.Очистить();
						
						ЗначенияПараметров = НовыеЗначенияПараметров;
					Исключение
						ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не получилось поменять параметры шага местами <%1>");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаТаблицаПеревода.ТекстПереводаШаг);
						Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	Если СтрТаблицаИзвестныхStepDefinition = Неопределено Тогда
		СтрТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinition.Найти(IDИзStepDefinition,"СтрокаДляПоиска");
	КонецЕсли;	 
	
	Возврат СтрТаблицаИзвестныхStepDefinition;
КонецФункции	

Процедура РассчитатьStepDefinition(Параметры)
	
	СтруктураПараметров = Параметры.СтруктураПараметров;
	Если СтруктураПараметров.Свойство("КешStepDefinition") И НЕ Параметры.Свойство("МногострочныеПараметрыШага") Тогда
		КешStepDefinition = СтруктураПараметров.КешStepDefinition;
		СтрокаКешStepDefinition = КешStepDefinition.Найти(Параметры.ИмяШагаБезКлючевогоСлова,"ИмяШагаБезКлючевогоСлова");
		Если СтрокаКешStepDefinition <> Неопределено Тогда
			Параметры.Вставить("НовыйStepDefinition",СтрокаКешStepDefinition.StepDefinition);
			Параметры.Вставить("НоваяСтрокаПараметров",СтрокаКешStepDefinition.СтрокаПараметров);
			Параметры.Вставить("ЗначенияПараметров",СтрокаКешStepDefinition.ЗначенияПараметров);
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	
	
	СтараяСтрокаПараметров = "";
	МногострочныеПараметрыШага = Неопределено;
	Параметры.Свойство("МногострочныеПараметрыШага", МногострочныеПараметрыШага);
	СтарыйStepDefinition = ПолучитьStepDefinitionПоСтроке(Параметры.ИмяШагаБезКлючевогоСлова,
	                                                        Параметры.ЗначенияПараметров,
															СтараяСтрокаПараметров,
															Параметры.ШагСПараметрамиВТаблице,
															Параметры.КоличествоПередаваемыхТаблиц,,СтруктураПараметров, МногострочныеПараметрыШага, Параметры);
															
	НовыйStepDefinition    = ПолучитьНовыйStepDefinition(СтарыйStepDefinition);
	НоваяСтрокаПараметров  = ПолучитьНовуюСтрокуПараметров(СтараяСтрокаПараметров);
	
	Параметры.Вставить("НовыйStepDefinition",НовыйStepDefinition);
	Параметры.Вставить("НоваяСтрокаПараметров",НоваяСтрокаПараметров);
	
	Если СтруктураПараметров.Свойство("КешStepDefinition") И НЕ Параметры.Свойство("МногострочныеПараметрыШага") Тогда	
		СтрокаКешStepDefinition                          = КешStepDefinition.Добавить();
		СтрокаКешStepDefinition.StepDefinition           = НовыйStepDefinition;
		СтрокаКешStepDefinition.СтрокаПараметров         = НоваяСтрокаПараметров;
		СтрокаКешStepDefinition.ЗначенияПараметров       = Параметры.ЗначенияПараметров;
		СтрокаКешStepDefinition.ИмяШагаБезКлючевогоСлова = Параметры.ИмяШагаБезКлючевогоСлова;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОбластьВТаблицуОбластей(НомерСтрокиВФиче,ТаблицаОбластей,СтрокаДерева)
	СтрокаТаблицаОбластей = ТаблицаОбластей.Добавить();
	СтрокаТаблицаОбластей.НомерСтрокиВФиче = НомерСтрокиВФиче;
	СтрокаТаблицаОбластей.СтрокаДерева     = СтрокаДерева;
КонецПроцедуры

Функция ОпределитьАдресСнипета(ИмяФайла,ЭтоLinux)
	Если ЭтоLinux Тогда
		Возврат ИмяФайла;
	Иначе
		Возврат СтрЗаменить(ИмяФайла,"/","\");
	КонецЕсли;	 
КонецФункции	 

Процедура ЗакрытьПредыдущийСценарий(ИмяФичи,ПолноеИмяФичи,ТекущийТипСценария,ПредыдущееКлючевоеСлово,ТекущееКлючевоеСлово,ДеревоСтроки,ОписаниеСценария,ТаблицаШагов,ТаблицаИзвестныхStepDefinition,ТаблицаСтрокПримеров,НомерСтрокиСценария,ТаблицаУжеСуществующихСценариев,СтруктураПараметров,МассивСценариевЗащитаОтЗацикливанияКеш,ЭтоЗагрузкаПодчиненногоСценария,ПередаваемыеТаблицы,ИмяЗагружаемогоСценария)
	
	Если (ТекущееКлючевоеСлово <> "scenario") и (ТекущееКлючевоеСлово <> "scenario_outline") Тогда
		Возврат;
	КонецЕсли;	 
	
	СтруктураПараметров.Вставить("ТекущийФичаФайл", ПолноеИмяФичи);
	
	МассивТеговФичи	       = СтруктураПараметров.МассивТеговФичи;
	МассивКомментариевФичи = СтруктураПараметров.МассивКомментариевФичи;
	МассивТеговСценариев   = СтруктураПараметров.МассивТеговСценариев;
	СписокТеговИсключение  = СтруктураПараметров.СписокТеговИсключение;
	СписокТеговОтбор       = СтруктураПараметров.СписокТеговОтбор;
	
	Если СтруктураПараметров.Свойство("ОтборПоТегам") Тогда
		Если НЕ СтруктураПараметров.ОтборПоТегам Тогда
			СписокТеговОтбор = Новый СписокЗначений;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТегиСценария = Новый Массив;
	КомментарииСценария = Новый Массив;
	Для Каждого Элем Из МассивТеговСценариев Цикл
		Если Элем.НомерСтрокиСценария = НомерСтрокиСценария Тогда
			ТегиСценария = Элем.МассивТегов;
			КомментарииСценария = Элем.МассивКомментариев;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если ТипЗнч(ДеревоСтроки.Родитель.ПроизвольныеЗначения) <> Тип("Структура")  Тогда
		ДеревоСтроки.Родитель.ПроизвольныеЗначения = Новый Структура;
	КонецЕсли;	 
	
	ДеревоСтроки.Родитель.ПроизвольныеЗначения.Вставить("МассивТегов",МассивТеговФичи);
	ДеревоСтроки.Родитель.ПроизвольныеЗначения.Вставить("МассивКомментариев",МассивКомментариевФичи);
	
	
	НаденТегОтборВФиче          = Ложь;
	НаденТегИсключениеВФиче     = Ложь;
	НаденТегОтборВСценарии      = Ложь;
	НаденТегИсключениеВСценарии = Ложь;
	Если СокрЛП(ТекущийТипСценария) <> "" и ТекущийТипСценария <> "background" Тогда//когда загружаем явно одну фичу то фильтры не работают
		Если СтруктураПараметров.ИдетЗагрузкаИзКаталога Тогда 
			
			//по исключению сценариев
			ТегИсключение = Неопределено;
			Для Каждого СвойстваТега Из ТегиСценария Цикл
				Тег = СвойстваТега.Тег;
				Если СписокТеговИсключение.НайтиПоЗначению(Тег) <> Неопределено Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("В сценарии <%1> найден тег исключение <%2>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеСценария);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Тег);
					Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
					НаденТегИсключениеВСценарии = Истина;
				КонецЕсли;	 
			КонецЦикла;	
			
			Для Каждого СвойстваТега Из МассивТеговФичи Цикл
				Тег = СвойстваТега.Тег;
				Если СписокТеговИсключение.НайтиПоЗначению(Тег) <> Неопределено Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("В фиче <%1> сценария <%2> найден тег исключение <%3>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПолноеИмяФичи);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОписаниеСценария);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Тег);
					Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
					НаденТегИсключениеВФиче = Истина;
				КонецЕсли;	 
			КонецЦикла;	
			
			
			//по отбору сценариев
			НаденТегОтборВСценарии = Ложь;
			Для Каждого СвойстваТега Из ТегиСценария Цикл
				Тег = СвойстваТега.Тег;
				Если СписокТеговОтбор.НайтиПоЗначению(Тег) <> Неопределено Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("В сценарии <%1> найден тег отбор <%2>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеСценария);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Тег);
					Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
					НаденТегОтборВСценарии = Истина;
				КонецЕсли;	 
			КонецЦикла;	
			
			Для Каждого СвойстваТега Из МассивТеговФичи Цикл
				Тег = СвойстваТега.Тег;
				Если СписокТеговОтбор.НайтиПоЗначению(Тег) <> Неопределено Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("В фиче <%1> сценария <%2> найден тег отбор <%3>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПолноеИмяФичи);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОписаниеСценария);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Тег);
					Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
					НаденТегОтборВФиче = Истина;
				КонецЕсли;	 
			КонецЦикла;	
			
			
			
			
			
			Если СписокТеговОтбор.Количество() > 0 Тогда
				Если Не НаденТегОтборВСценарии и НЕ НаденТегОтборВФиче Тогда
					Если НЕ ЭтоЗагрузкаПодчиненногоСценария Тогда //значит это загрузка именно фичи, а не вложенного сценария
						ТекстСообщения = ПолучитьТекстСообщенияПользователю("Сценарий <%1> не загружен.");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеСценария);
						Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
						Возврат;//значит установлен отбор, а у сценария нет этого тега и у фичи нет этого тега
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если СписокТеговИсключение.Количество() > 0 Тогда
				Если НаденТегИсключениеВСценарии или НаденТегИсключениеВФиче Тогда //значит надо проигнорировать этот сценарий
					Если Не НаденТегОтборВСценарии и НЕ НаденТегОтборВФиче Тогда //у отбора приоритет над исключением, значит надо оставить сценарий
						Если НЕ ЭтоЗагрузкаПодчиненногоСценария Тогда //значит это загрузка именно фичи, а не вложенного сценария
							ТекстСообщения = ПолучитьТекстСообщенияПользователю("Сценарий <%1> не загружен.");
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеСценария);
							Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
							Возврат;
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;
			
			
		Иначе
			
			//по исключению сценариев
			ТегИсключение = Неопределено;
			Для Каждого СвойстваТега Из ТегиСценария Цикл
				Тег = СвойстваТега.Тег;
				Если СписокТеговИсключение.НайтиПоЗначению(Тег) <> Неопределено Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("В сценарии <%1> найден тег исключение <%2>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеСценария);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Тег);
					Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
					НаденТегИсключениеВСценарии = Истина;
				КонецЕсли;	 
			КонецЦикла;	
			
			
			//по отбору сценариев
			НаденТегОтборВСценарии = Ложь;
			Для Каждого СвойстваТега Из ТегиСценария Цикл
				Тег = СвойстваТега.Тег;
				Если СписокТеговОтбор.НайтиПоЗначению(Тег) <> Неопределено Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("В сценарии <%1> найден тег отбор <%2>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеСценария);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Тег);
					Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
					НаденТегОтборВСценарии = Истина;
				КонецЕсли;	 
			КонецЦикла;	
			
			Для Каждого СвойстваТега Из МассивТеговФичи Цикл
				Тег = СвойстваТега.Тег;
				Если СписокТеговОтбор.НайтиПоЗначению(Тег) <> Неопределено Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("В фиче <%1> сценария <%2> найден тег отбор <%3>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПолноеИмяФичи);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОписаниеСценария);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Тег);
					Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
					НаденТегОтборВФиче = Истина;
				КонецЕсли;	 
			КонецЦикла;	
			
			Если СписокТеговОтбор.Количество() > 0 Тогда
				Если Не НаденТегОтборВСценарии и НЕ НаденТегОтборВФиче Тогда
					Если НЕ ЭтоЗагрузкаПодчиненногоСценария Тогда //значит это загрузка именно фичи, а не вложенного сценария
						ТекстСообщения = ПолучитьТекстСообщенияПользователю("Сценарий <%1> не загружен.");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеСценария);
						Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
						Возврат;//значит установлен отбор, а у сценария нет этого тега и у фичи нет этого тега
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если СписокТеговИсключение.Количество() > 0 Тогда
				Если НаденТегИсключениеВСценарии или НаденТегИсключениеВФиче Тогда //значит надо проигнорировать этот сценарий
					Если Не НаденТегОтборВСценарии и НЕ НаденТегОтборВФиче Тогда //у отбора приоритет над исключением, значит надо оставить сценарий
						Если НЕ ЭтоЗагрузкаПодчиненногоСценария Тогда //значит это загрузка именно фичи, а не вложенного сценария
							ТекстСообщения = ПолучитьТекстСообщенияПользователю("Сценарий <%1> не загружен.");
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеСценария);
							Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
							Возврат;
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;
			
			
		КонецЕсли;	 
	КонецЕсли;	 
	
	ИмяСценария = ОписаниеСценария;
	Если ТекущийТипСценария = "background" Тогда
		ИмяСценария = "Контекст";
		Если ТекущийЯзыкФичаФайла = "en" Тогда
			ИмяСценария = "Background";
		ИначеЕсли ТекущийЯзыкФичаФайла = "vi" Тогда
			ИмяСценария = "Bối cảnh";
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если (ТекущийТипСценария = "background") или (ТекущийТипСценария = "scenario") или (ТекущийТипСценария = "scenario_outline") Тогда
		Если (ТекущийТипСценария <> "background") Тогда
			СтруктураПараметров.КоличествоЗагруженныхСценариев = СтруктураПараметров.КоличествоЗагруженныхСценариев + 1;
		КонецЕсли;	 
		СтрДеревоСтроки = ДеревоСтроки.Добавить();
		СтрДеревоСтроки.Имя = ИмяСценария;
		СтрДеревоСтроки.Тип = "Сценарий";
		СтрДеревоСтроки.ТипКартинки = 2;
		Если ТекущийТипСценария = "background" Тогда
			СтрДеревоСтроки.ТипКартинки = 7;
		КонецЕсли; 
		СтрДеревоСтроки.ПолныйПуть = СтрДеревоСтроки.Родитель.ПолныйПуть + ":" + НомерСтрокиСценария;
		СтрДеревоСтроки.НомерСтрокиВФиче = НомерСтрокиСценария;
		ДобавитьОбластьВТаблицуОбластей(СтрДеревоСтроки.НомерСтрокиВФиче,СтруктураПараметров.ТаблицаОбластей,СтрДеревоСтроки);
		
		Если ТекущийТипСценария = "background" Тогда
			СтрДеревоСтроки.ДопТип = "Контекст";
		КонецЕсли;	 
		Если ТипЗнч(СтрДеревоСтроки.ПроизвольныеЗначения) <> Тип("Структура")  Тогда
			СтрДеревоСтроки.ПроизвольныеЗначения = Новый Структура;
		КонецЕсли;	 
		СтрДеревоСтроки.ПроизвольныеЗначения.Вставить("МассивТегов",ТегиСценария);
		СтрДеревоСтроки.ПроизвольныеЗначения.Вставить("МассивКомментариев",КомментарииСценария);
		
		СтрокиШагов         = СтрДеревоСтроки.Строки;
		СтрокиШаговИсходные = СтрДеревоСтроки.Строки;//запомним, чтобы потом использовать для секции примеров
		
		
		РазныеИменованныеПараметры = Новый Массив;
		
		//определим есть ли замена таблицы примеров
		ЕстьЗаменаТаблицыПримеров = Ложь;
		
		Если (ПередаваемыеТаблицы <> Неопределено) и (ЭтоЗагрузкаПодчиненногоСценария = Истина) и (НРег(ИмяСценария) = НРег(ИмяЗагружаемогоСценария)) Тогда
			КолТаблицВФиче = 0;
			Для каждого СтрТаблицаШагов Из ТаблицаШагов Цикл
				
				Если СтрТаблицаШагов.МассивТаблицПередаваемыхКакПараметр <> Неопределено Тогда
					КолТаблицВФиче = КолТаблицВФиче + СтрТаблицаШагов.МассивТаблицПередаваемыхКакПараметр.Количество();
				КонецЕсли;	 
			КонецЦикла;	
			
			Если КолТаблицВФиче = ПередаваемыеТаблицы.Количество()-1 Тогда
				ЕстьЗаменаТаблицыПримеров                     = Истина;
				БылаЗаменаТаблицыПараметровВСтруктуреСценария = Истина;
				//тогда нам передали ещё одну таблицу, которая заменяет таблицу примеров
			КонецЕсли;	 
		КонецЕсли;	 
		
		ЗакончиласьГруппа = Ложь;
		Для СчетчикТаблицыШагов = 0 По ТаблицаШагов.Количество()-1 Цикл
			СтрТаблицаШагов = ТаблицаШагов[СчетчикТаблицыШагов];
			
			Если ЗакончиласьГруппа Тогда
				ЗакончиласьГруппа = Ложь;
				Если СтрТаблицаШагов.ЗначениеОтступа <> Неопределено Тогда
					ОпределитьУровеньГруппы(СтрокиШагов,СтрТаблицаШагов);
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если НЕ ПустаяСтрока(СтрТаблицаШагов.ИмяОбласти) ИЛИ СтрТаблицаШагов.КлючевоеСлово = "if" ИЛИ СтрТаблицаШагов.КлючевоеСлово = "elseif" Тогда
				
				Если СтрТаблицаШагов.НачалоОбласти ИЛИ СтрТаблицаШагов.КлючевоеСлово = "if" ИЛИ СтрТаблицаШагов.КлючевоеСлово = "elseif" Тогда
					ОпределитьРодителяШага(СтрТаблицаШагов,СтрокиШагов,СтрДеревоСтроки,ДеревоСтроки,СтруктураПараметров);
					
					СтрОбласть = СтрокиШагов.Добавить();
					Если ПустаяСтрока(СтрТаблицаШагов.ИмяОбласти) Тогда
						СтрОбласть.Имя = СтрТаблицаШагов.ИмяШага;
					Иначе	
						СтрОбласть.Имя = СтрТаблицаШагов.ИмяОбласти;
					КонецЕсли;	 
					СтрОбласть.Тип              = "Область";
					СтрОбласть.ТипКартинки      = -1;
					СтрОбласть.НомерСтрокиВФиче = СтрТаблицаШагов.НомерСтроки;
					ДобавитьОбластьВТаблицуОбластей(СтрОбласть.НомерСтрокиВФиче,СтруктураПараметров.ТаблицаОбластей,СтрОбласть);
					СтрОбласть.ЗначениеОтступа  = СтрТаблицаШагов.ЗначениеОтступа;
					Если ТипЗнч(СтрОбласть.ПроизвольныеЗначения) <> Тип("Структура") Тогда
						СтрОбласть.ПроизвольныеЗначения = Новый Структура;
					КонецЕсли;	 
					СтрОбласть.ПроизвольныеЗначения.Вставить("МассивТеговШага",СтрТаблицаШагов.МассивТеговШага);
					СтрОбласть.ПроизвольныеЗначения.Вставить("МассивКомментариевШага",СтрТаблицаШагов.МассивКомментариевШага);
					
					СтрокиШагов = СтрОбласть.Строки;
					
					Если Лев(СтрТаблицаШагов.ИмяОбласти,1) <> "*" Тогда
						Если ЗначениеЗаполнено(СтрТаблицаШагов.МассивТаблицПередаваемыхКакПараметр) Тогда
							ОбработатьПередачуПараметровТаблицей(СтрОбласть,СтрТаблицаШагов.МассивТаблицПередаваемыхКакПараметр,РазныеИменованныеПараметры,СтруктураПараметров);
						КонецЕсли;	 
						
						ЗначенияПараметров = Новый СписокЗначений;
						
						ПараметрыДляПолученияStepDefenition = Новый Структура;
						ПараметрыДляПолученияStepDefenition.Вставить("ЗначенияПараметров",ЗначенияПараметров);
						ПараметрыДляПолученияStepDefenition.Вставить("НоваяСтрокаПараметров","");
						ПараметрыДляПолученияStepDefenition.Вставить("НовыйStepDefinition","");
						ПараметрыДляПолученияStepDefenition.Вставить("ИмяШагаБезКлючевогоСлова",СтрТаблицаШагов.ИмяШагаБезКлючевогоСлова);
						ПараметрыДляПолученияStepDefenition.Вставить("ШагСПараметрамиВТаблице",СтрОбласть.ШагСПараметрамиВТаблице);
						ПараметрыДляПолученияStepDefenition.Вставить("КоличествоПередаваемыхТаблиц",ОпределитьКоличествоПередаваемыхТаблиц(СтрОбласть));
						ПараметрыДляПолученияStepDefenition.Вставить("СтруктураПараметров",СтруктураПараметров);
						
						РассчитатьStepDefinition(ПараметрыДляПолученияStepDefenition);
						
						НоваяСтрокаПараметров             = ПараметрыДляПолученияStepDefenition.НоваяСтрокаПараметров;
						НовыйStepDefinition               = ПараметрыДляПолученияStepDefenition.НовыйStepDefinition;
						ЗначенияПараметров                = ПараметрыДляПолученияStepDefenition.ЗначенияПараметров;
						
						IDИзStepDefinition     = НРег(Лев(НовыйStepDefinition,Найти(НовыйStepDefinition,"(")-1));
						
						ЭтоОбычныйШагОбернутыйВУсловие = Ложь;
						СтрТаблицаИзвестныхStepDefinition = StepDefinitionИзТаблицы(IDИзStepDefinition,ТаблицаИзвестныхStepDefinition,СтруктураПараметров,ЗначенияПараметров,СтрОбласть);
						Если (СтрТаблицаШагов.КлючевоеСлово = "if" ИЛИ СтрТаблицаШагов.КлючевоеСлово = "elseif")
								И СтрТаблицаИзвестныхStepDefinition = Неопределено И НЕ ПустаяСтрока(СтрТаблицаШагов.ИмяШагаБезКлючевогоСлова) Тогда
							НовыйIDИзStepDefinition = Неопределено;
							Если ЭтоОбычныйШагОбернутыйВУсловие(IDИзStepDefinition, НовыйIDИзStepDefinition) Тогда
								СтрТаблицаИзвестныхStepDefinition = StepDefinitionИзТаблицы(НовыйIDИзStepDefinition,ТаблицаИзвестныхStepDefinition,СтруктураПараметров,ЗначенияПараметров,СтрОбласть);
								Если СтрТаблицаИзвестныхStepDefinition <> Неопределено Тогда
									ЭтоОбычныйШагОбернутыйВУсловие = Истина;
								КонецЕсли;	 
							КонецЕсли;	 
						КонецЕсли;	 
						
						Если СтрТаблицаИзвестныхStepDefinition = Неопределено И ТекущийЯзыкФичаФайла <> "ru" Тогда
							ТаблицаПеревода = СтруктураПараметров.ТаблицаПеревода;
							СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(IDИзStepDefinition,"СтрокаДляПоискаПеревод");
							
							Если (СтрТаблицаШагов.КлючевоеСлово = "if" ИЛИ СтрТаблицаШагов.КлючевоеСлово = "elseif")
									И СтрокаТаблицаПеревода = Неопределено И НЕ ПустаяСтрока(СтрТаблицаШагов.ИмяШагаБезКлючевогоСлова) Тогда
								НовыйIDИзStepDefinition = Неопределено;
								Если ЭтоОбычныйШагОбернутыйВУсловие(IDИзStepDefinition, НовыйIDИзStepDefinition) Тогда
									СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(НовыйIDИзStepDefinition,"СтрокаДляПоискаПеревод");
									Если СтрокаТаблицаПеревода <> Неопределено Тогда
										ЭтоОбычныйШагОбернутыйВУсловие = Истина;
									КонецЕсли;	 
								КонецЕсли;	 
							КонецЕсли;	 
							
							Если СтрокаТаблицаПеревода <> Неопределено Тогда
								IDИзStepDefinition = СтрокаТаблицаПеревода.СтрокаДляПоискаРусский;
								СтрТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinition.Найти(IDИзStepDefinition,"СтрокаДляПоиска");
							КонецЕсли;	 
						КонецЕсли;	 
						
						Если СтрТаблицаИзвестныхStepDefinition <> Неопределено Тогда
							Если (СтрТаблицаИзвестныхStepDefinition.ТипШагаВДереве = "Условие") или (СтрТаблицаИзвестныхStepDefinition.ТипШагаВДереве = "Цикл") ИЛИ ЭтоОбычныйШагОбернутыйВУсловие Тогда
								СтрОбласть.ДопТип                  = СтрТаблицаИзвестныхStepDefinition.ТипШагаВДереве;
								Если ПустаяСтрока(СтрОбласть.ДопТип) И ЭтоОбычныйШагОбернутыйВУсловие Тогда
									СтрОбласть.ДопТип = "Условие";
								КонецЕсли;	 
								Если СтрТаблицаШагов.КлючевоеСлово = "elseif" Тогда
									СтрОбласть.ДопТип                  = "УсловиеИначеЕсли";
								КонецЕсли;	 
								СтрОбласть.ПолныйПуть              = "     " + СтрДеревоСтроки.Родитель.ПолныйПуть + ":" + СтрТаблицаШагов.НомерСтроки;
								СтрОбласть.Снипет                  = НовыйStepDefinition;
								СтрОбласть.АдресСнипета            = ОпределитьАдресСнипета(СтрТаблицаИзвестныхStepDefinition.ИмяФайла,СтруктураПараметров.ЭтоLinux);
								
								СтрОбласть.СтрокаРеальнойПроцедуры = СтрТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры;
								СтрОбласть.ЗначенияПараметров      = ЗначенияПараметров;
								
								Если ЭтоОбычныйШагОбернутыйВУсловие Тогда
									Если НЕ ТипЗнч(СтрОбласть.ПроизвольныеЗначения) = Тип("Структура") Тогда
										СтрОбласть.ПроизвольныеЗначения = Новый Структура;
									КонецЕсли;	 
									
									СтрОбласть.ПроизвольныеЗначения.Вставить("ЭтоОбычныйШагОбернутыйВУсловие", Истина);
								КонецЕсли;	 
							КонецЕсли;	 
						Иначе
							Если СтрТаблицаШагов.КлючевоеСлово = "if" Тогда
								//тогда считаем, что пользователь хотел в сценари использовать условие, но неверно его написал
								СтрОбласть.ДопТип = "Условие";
								СтрОбласть.ПолныйПуть              = "     " + СтрДеревоСтроки.Родитель.ПолныйПуть + ":" + СтрТаблицаШагов.НомерСтроки;
								СтрОбласть.Снипет                  = НовыйStepDefinition;
							КонецЕсли;	 
						КонецЕсли;	 
						
						Если СтрТаблицаШагов.КлючевоеСлово = "else" Тогда
							СтрОбласть.ДопТип = "УсловиеИначе";
						ИначеЕсли СтрТаблицаШагов.КлючевоеСлово = "try" Тогда
							СтрОбласть.ДопТип = "Попытка";
						ИначеЕсли СтрТаблицаШагов.КлючевоеСлово = "except" Тогда
							СтрОбласть.ДопТип = "Исключение";
						КонецЕсли;	 
					КонецЕсли;	 
					
				Иначе
					ЗакончиласьГруппа = Истина;
				КонецЕсли;	 
				
				Если СчетчикТаблицыШагов < ТаблицаШагов.Количество()-1 Тогда
					СледущаяСтрока = ТаблицаШагов[СчетчикТаблицыШагов+1];
					Если СледущаяСтрока.ЗначениеОтступа <> Неопределено И СледущаяСтрока.ЗначениеОтступа <= СтрТаблицаШагов.ЗначениеОтступа Тогда
						ЗакончиласьГруппа = Истина;
					КонецЕсли;	 
				КонецЕсли;	 
				
				Продолжить;
			КонецЕсли;	 
			
			Если СтрТаблицаШагов.ГруппаЗакрывается Тогда
				ЗакончиласьГруппа = Истина;
				Продолжить;
			КонецЕсли;	 
			
			СтрСтрокиШагов                  = СтрокиШагов.Добавить();
			СтрСтрокиШагов.Имя              = СтрТаблицаШагов.ИмяШага;
			СтрСтрокиШагов.Тип              = "Шаг";
			СтрСтрокиШагов.ТипКартинки      = 3;
			СтрСтрокиШагов.ПолныйПуть       = "     " + СтрДеревоСтроки.Родитель.ПолныйПуть + ":" + СтрТаблицаШагов.НомерСтроки;
			СтрСтрокиШагов.НомерСтрокиВФиче = СтрТаблицаШагов.НомерСтроки;
			СтрСтрокиШагов.ЗначениеОтступа  = СтрТаблицаШагов.ЗначениеОтступа;
			Если ТипЗнч(СтрСтрокиШагов.ПроизвольныеЗначения) <> Тип("Структура") Тогда
				СтрСтрокиШагов.ПроизвольныеЗначения = Новый Структура;
			КонецЕсли;	 
			СтрСтрокиШагов.ПроизвольныеЗначения.Вставить("МассивТеговШага",СтрТаблицаШагов.МассивТеговШага);
			СтрСтрокиШагов.ПроизвольныеЗначения.Вставить("МассивКомментариевШага",СтрТаблицаШагов.МассивКомментариевШага);
			
			ОбработатьПередачуПараметровТаблицей(СтрСтрокиШагов,СтрТаблицаШагов.МассивТаблицПередаваемыхКакПараметр,РазныеИменованныеПараметры,СтруктураПараметров);
			
			ЗначенияПараметров = Новый СписокЗначений;
			
			ПараметрыДляПолученияStepDefenition = Новый Структура;
			ПараметрыДляПолученияStepDefenition.Вставить("ЗначенияПараметров",ЗначенияПараметров);
			ПараметрыДляПолученияStepDefenition.Вставить("НоваяСтрокаПараметров","");
			ПараметрыДляПолученияStepDefenition.Вставить("НовыйStepDefinition","");
			ПараметрыДляПолученияStepDefenition.Вставить("ИмяШагаБезКлючевогоСлова",СтрТаблицаШагов.ИмяШагаБезКлючевогоСлова);
			ПараметрыДляПолученияStepDefenition.Вставить("ШагСПараметрамиВТаблице",СтрСтрокиШагов.ШагСПараметрамиВТаблице);
			ПараметрыДляПолученияStepDefenition.Вставить("КоличествоПередаваемыхТаблиц",ОпределитьКоличествоПередаваемыхТаблиц(СтрСтрокиШагов));
			ПараметрыДляПолученияStepDefenition.Вставить("СтруктураПараметров",СтруктураПараметров);
			Если СтрТаблицаШагов.Свойство("МногострочныеПараметрыШага") Тогда
				ПараметрыДляПолученияStepDefenition.Вставить("МногострочныеПараметрыШага",СтрТаблицаШагов.МногострочныеПараметрыШага);
			КонецЕсли;	 
			
			РассчитатьStepDefinition(ПараметрыДляПолученияStepDefenition);
			
			НоваяСтрокаПараметров             = ПараметрыДляПолученияStepDefenition.НоваяСтрокаПараметров;
			НовыйStepDefinition               = ПараметрыДляПолученияStepDefenition.НовыйStepDefinition;
			СтрСтрокиШагов.ЗначенияПараметров = ПараметрыДляПолученияStepDefenition.ЗначенияПараметров;
			
			Для каждого ЭлемЗначенияПараметров Из ЗначенияПараметров Цикл
				Если ЭлемЗначенияПараметров.Значение.Тип = "ПараметрИменованный" Тогда
					Если РазныеИменованныеПараметры.Найти(НРег(ЭлемЗначенияПараметров.Значение.Значение)) = Неопределено Тогда
						РазныеИменованныеПараметры.Добавить(НРег(ЭлемЗначенияПараметров.Значение.Значение));
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
			
			НашелStepDefinitionВepf = Ложь;
			
			IDИзStepDefinition = НРег(Лев(НовыйStepDefinition,Найти(НовыйStepDefinition,"(")-1));
			
			Если Не НашелStepDefinitionВepf Тогда
				ЗначенияПараметров = СтрСтрокиШагов.ЗначенияПараметров;
				СтрТаблицаИзвестныхStepDefinition = StepDefinitionИзТаблицы(IDИзStepDefinition,ТаблицаИзвестныхStepDefinition,СтруктураПараметров,ЗначенияПараметров,СтрСтрокиШагов);
				СтрСтрокиШагов.ЗначенияПараметров = ЗначенияПараметров;
				Если СтрТаблицаИзвестныхStepDefinition <> Неопределено Тогда
					СтрСтрокиШагов.Снипет   = НовыйStepDefinition;
					НашелStepDefinitionВepf = Истина;
				КонецЕсли;	 
			КонецЕсли;  
			
			Если НашелStepDefinitionВepf Тогда
				
				СтрСтрокиШагов.АдресСнипета = ОпределитьАдресСнипета(СтрТаблицаИзвестныхStepDefinition.ИмяФайла,СтруктураПараметров.ЭтоLinux);
				
				СтрСтрокиШагов.СтрокаРеальнойПроцедуры = СтрТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры;
				
				СтрЗамены = НРег("/" + ИмяФичи + ".feature");
				ПутьФичи  = СтрЗаменить(НРег(ПолноеИмяФичи), СтрЗамены, "");
				Если Найти(НРег(СтрТаблицаИзвестныхStepDefinition.ИмяФайла),ПутьФичи) = 0 Тогда
					СтрСтрокиШагов.ЭтоЧужойСнипет = Истина;
				КонецЕсли; 
				Если НЕ СтрСтрокиШагов.ЭтоЧужойСнипет Тогда
					ФайлОбработки = Новый Файл(СтрТаблицаИзвестныхStepDefinition.ИмяФайла);
					Если НРег(ИмяФичи) <> НРег(ФайлОбработки.ИмяБезРасширения) Тогда
						СтрСтрокиШагов.ЭтоЧужойСнипет = Истина;
					КонецЕсли;
				КонецЕсли;	 
			Иначе
				
				СтрокаДляПоиска = Лев(НовыйStepDefinition,Найти(НовыйStepDefinition,"(")-1);
				СтрТаблицаУжеСуществующихСценариев = StepDefinitionИзТаблицыСценариев(НРег(СтрокаДляПоиска),ТаблицаУжеСуществующихСценариев,СтруктураПараметров,НовыйStepDefinition);
				Если СтрТаблицаУжеСуществующихСценариев = Неопределено Тогда
					СтрСтрокиШагов.Снипет                  = НовыйStepDefinition;
					СтрСтрокиШагов.СтрокаРеальнойПроцедуры = СтрЗаменить(НовыйStepDefinition, "("+НоваяСтрокаПараметров+")", "");
				Иначе
					//это подчиненное дерево
					
					НовыйStepDefinition = Лев(НовыйStepDefinition,Найти(НовыйStepDefinition,"(")-1);
					
					
					Если МассивСценариевЗащитаОтЗацикливанияКеш = Неопределено Тогда
						МассивСценариевЗащитаОтЗацикливанияКеш = Новый Массив;
					КонецЕсли; 
					
					Элем = МассивСценариевЗащитаОтЗацикливанияКеш.Найти(СтрТаблицаУжеСуществующихСценариев.ИмяСценария);
					Если Элем <> Неопределено Тогда
						Если СтруктураПараметров.СтекВызова.Найти(НРег(СтрТаблицаУжеСуществующихСценариев.ИмяСценария)) <> Неопределено Тогда
							//значит этот сценарий уже вызывался выше и сейчас произойдёт зацикливание
							ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не получилось скопировать сценарий %1, т.к. произошло бы зацикливание.");
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрТаблицаУжеСуществующихСценариев.ИмяСценария);
							Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
						КонецЕсли;	 
						Возврат;
					КонецЕсли; 
					
					МассивСценариевЗащитаОтЗацикливанияКеш.Добавить(СтрТаблицаУжеСуществующихСценариев.ИмяСценария);
					
					СтрСтрокиШагов.Тип         = "ШагСценарий";
					Если СтрТаблицаУжеСуществующихСценариев.ЭтоСтруктураСценария Тогда
						СтрСтрокиШагов.ДопТип  = "СтруктураСценария";
					КонецЕсли;	 
					
					СтрСтрокиШагов.ТипКартинки         = -1;
					СтрСтрокиШагов.АдресСнипета = ОпределитьАдресСнипета(СтрТаблицаУжеСуществующихСценариев.ИмяФайла,СтруктураПараметров.ЭтоLinux);
					Если ТипЗнч(СтрСтрокиШагов.ПроизвольныеЗначения) <> Тип("Структура") Тогда
						СтрСтрокиШагов.ПроизвольныеЗначения = Новый Структура;
					КонецЕсли;	 
					СтрСтрокиШагов.ПроизвольныеЗначения.Вставить("НомерСтрокиВФиче", СтрТаблицаУжеСуществующихСценариев.НомерСтрокиВФиче);
					
					//Загрузим эту фичу в промежуточное дерево
					
					КешФич = СтруктураПараметров.КешФич;
					
					СтрКешФич = КешФич.Найти(СтрТаблицаУжеСуществующихСценариев.ИмяФайла,"ИмяФайла");
					Если СтрКешФич = Неопределено Тогда
						ПромДерево       = СоздатьДеревоЗначений();
						ПромДеревоСтроки = ПромДерево.Строки;
						
						ПромСтрокаФичи   = ПромДеревоСтроки.Добавить();
						ПромСтрокаФичи.Тип = "Фича";
						ПромСтрокаФичи.Имя  = СтрТаблицаУжеСуществующихСценариев.ИмяФайла;
						ПромСтрокаФичи.ПолныйПуть = СтрТаблицаУжеСуществующихСценариев.ПолноеИмя;
						
						КопияСтруктураПараметров = СкопироватьСтруктуру(СтруктураПараметров);
						КопияСтруктураПараметров.ИдетЗагрузкаИзКаталога = Ложь;
						
						
						Если СтрТаблицаУжеСуществующихСценариев.ДвоичныеДанные = Неопределено Тогда
							ИмяВременнойФичи = СтрТаблицаУжеСуществующихСценариев.ПолноеИмя;
						Иначе	
							ДвДанныеФичи = СтрТаблицаУжеСуществующихСценариев.ДвоичныеДанные;
							ИмяВременнойФичи = ПолучитьИмяВременногоФайла("feature");
							ДвДанныеФичи.Записать(ИмяВременнойФичи);
						КонецЕсли;	 
						
						ПустаяСтрокаДереваРазделитель = Неопределено;
						ПередаваемыеТаблицы  = ПолучитьТаблицыОткудаКопировать(СтрСтрокиШагов.Строки,ПустаяСтрокаДереваРазделитель);
						Если ПередаваемыеТаблицы.Количество() = 0 Тогда
							ПередаваемыеТаблицы = Неопределено;
						КонецЕсли;	 
						
						ПредыдущийЯзыкФичаФайла = ТекущийЯзыкФичаФайла;
						
						КопияСтруктураПараметров.Вставить("ЯзыкРодителя",ТекущийЯзыкФичаФайла);
						
						ОписаниеОшибки = "";
						Если Не ПроверитьФичуНаКорректностьСинтаксисаИЗагрузитьСценарии(ИмяВременнойФичи,ОписаниеОшибки,ПромСтрокаФичи.Строки,ТаблицаИзвестныхStepDefinition,КопияСтруктураПараметров,МассивСценариевЗащитаОтЗацикливанияКеш,Истина,ПередаваемыеТаблицы,СтрТаблицаУжеСуществующихСценариев.ИмяСценария) Тогда
							ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не получилось загрузить %1. %2");
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрТаблицаУжеСуществующихСценариев.ИмяФайла);
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОписаниеОшибки);
							Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
							ТекущийЯзыкФичаФайла = ПредыдущийЯзыкФичаФайла;
							Возврат;
						КонецЕсли;	 
						
						ТекущийЯзыкФичаФайла = ПредыдущийЯзыкФичаФайла;
						
						ВФичеЕстьСтруктурыСценария = Ложь;
						Если СтруктураПараметров.Свойство("ВФичеЕстьСтруктураСценария") Тогда
							УниверсальноеИмяФайла = УниверсальноеИмяФайла(ИмяВременнойФичи);
							ЗначениеВФичеЕстьСтруктураСценария = СтруктураПараметров.ВФичеЕстьСтруктураСценария[УниверсальноеИмяФайла];
							Если ЗначениеВФичеЕстьСтруктураСценария = Истина Тогда
								ВФичеЕстьСтруктурыСценария = Истина;
							КонецЕсли;	 
						КонецЕсли;	 
						Если КопияСтруктураПараметров.Свойство("ВФичеЕстьСтруктураСценария") Тогда
							УниверсальноеИмяФайла = УниверсальноеИмяФайла(ИмяВременнойФичи);
							ЗначениеВФичеЕстьСтруктураСценария = КопияСтруктураПараметров.ВФичеЕстьСтруктураСценария[УниверсальноеИмяФайла];
							Если ЗначениеВФичеЕстьСтруктураСценария = Истина Тогда
								ВФичеЕстьСтруктурыСценария = Истина;
							КонецЕсли;	 
						КонецЕсли;	 
						
						Если НЕ ВФичеЕстьСтруктурыСценария Тогда
							СтрКешФич          = КешФич.Добавить();
							СтрКешФич.Дерево   = ПромДерево;
							СтрКешФич.ИмяФайла = СтрТаблицаУжеСуществующихСценариев.ИмяФайла;
						КонецЕсли;	 
					Иначе
						ПромДерево = СтрКешФич.Дерево;
					КонецЕсли;	 
					
					МассивСценариевЗащитаОтЗацикливанияКеш.Удалить(МассивСценариевЗащитаОтЗацикливанияКеш.Количество()-1);
					СтруктураПараметров.Вставить("ИмяСценарияДляКопирования",СтрТаблицаУжеСуществующихСценариев.ИмяСценария);
					
					МногострочныеПараметрыШага = Неопределено;
					СтрТаблицаШагов.Свойство("МногострочныеПараметрыШага", МногострочныеПараметрыШага);
					СкопироватьСтрокиСценарияВУказаннуюСтроку(СтрСтрокиШагов,ПромДерево,НРег(НовыйStepDefinition),СтрТаблицаУжеСуществующихСценариев.ИмяФайла,СтруктураПараметров, МногострочныеПараметрыШага);
				КонецЕсли;	 
				
			КонецЕсли;  
			
			СтрСтрокиШагов.ИмяШагаБезКлючевогоСлова   = СтрТаблицаШагов.ИмяШагаБезКлючевогоСлова;
			
		КонецЦикла;
		
		БылаОшибка = Ложь;
		
		
		Если ЕстьЗаменаТаблицыПримеров Тогда
			ТаблицаСтрокПримеров = ЗаменитьТаблицуПримеровНаПереданнуюТаблицу(ПередаваемыеТаблицы[ПередаваемыеТаблицы.Количество()-1]);
		КонецЕсли;	 
		
		ФорматТаблицыПримеров(ТаблицаСтрокПримеров,РазныеИменованныеПараметры,БылаОшибка,Ложь,СтруктураПараметров);
		Если БылаОшибка Тогда
			СтрОшибки = "Ошибка парсинга фичи " + ДеревоСтроки.Родитель.Имя + ". Сценарий: " + ОписаниеСценария;
			Сообщить(СтрОшибки);
			ВызватьИсключение СтрОшибки;
		КонецЕсли; 
		
		Если ТаблицаСтрокПримеров.Количество() > 0 Тогда
			СтрДеревоСтроки.ДопТип = "СтруктураСценария";
			
			
			СтрДеревоСтроки = СтрокиШаговИсходные.Добавить();
			СтрДеревоСтроки.Имя         = "Примеры";
			СтрДеревоСтроки.Тип         = "Примеры";
			СтрДеревоСтроки.ТипКартинки = -1;
			
			СтрокиПримеров = СтрДеревоСтроки.Строки;
			Ном = 0;
			ИменованныеПараметры = Неопределено;
			Для каждого СтрТаблицаСтрокПримеров Из ТаблицаСтрокПримеров Цикл
				Ном = Ном + 1;
				Если Ном = 1 Тогда
					//в первой строке лежат имена параметров
					СтрДеревоСтроки.ИменованныеПараметры = ОпределитьПараметрыВСтрокеПримераПарсерФич(СтрТаблицаСтрокПримеров,
					                                                                                 СтруктураПараметров);
					ИменованныеПараметры = СтрДеревоСтроки.ИменованныеПараметры;
				КонецЕсли; 
				
				СтрСтрокаПримеров             = СтрокиПримеров.Добавить();
				СтрСтрокаПримеров.Имя         = СтрТаблицаСтрокПримеров.Стр;
				СтрСтрокаПримеров.Тип         = "Пример";
				СтрСтрокаПримеров.ТипКартинки = -1;
				СтрСтрокаПримеров.НомерСтрокиВФиче = СтрТаблицаСтрокПримеров.НомерСтрокиВФиче;
				СтрокиПримеров.Родитель.НомерСтрокиВФиче = СтрСтрокаПримеров.НомерСтрокиВФиче;
				
				Если Ном > 1 Тогда
					//тут будут лежать конкретные значения параметров
					СтрСтрокаПримеров.ИменованныеПараметры = ОпределитьПараметрыВСтрокеПримераПарсерФич(СтрТаблицаСтрокПримеров,
					                                                                                  СтруктураПараметров);
					//Нужно определить типы значений
					СтрСтрокаПримеров.ИменованныеПараметры = ПреобразоватьИменнованныеПараметрыСОпределениемТипов(СтрСтрокаПримеров.ИменованныеПараметры,
					    СтрДеревоСтроки.ИменованныеПараметры, СтруктураПараметров);
					
					ДобавитьСценарийДляДанногоПримера(СтрСтрокаПримеров,ИменованныеПараметры,СтруктураПараметров);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;	 
		
	КонецЕсли;	 
КонецПроцедуры

Функция ЭтоОбычныйШагОбернутыйВУсловие(Стр, НовыйIDИзStepDefinition)
	Если Прав(Стр, 5) = "тогда" Тогда
		НовыйIDИзStepDefinition = Лев(Стр, СтрДлина(Стр) - 5);
		Возврат Истина;
	КонецЕсли;	 
	
	Если Прав(Стр, 4) = "then" Тогда
		НовыйIDИзStepDefinition = Лев(Стр, СтрДлина(Стр) - 4);
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	 

Функция ПолучитьСтрокуДляЗаменыПараметровВложенныхСценариев(Знач Стр)
	ПараметрыЧисла       = Новый Массив;
	ПараметрыСтрокиА     = Новый Массив;
	ПараметрыСтрокиК     = Новый Массив;
	ПараметрыДаты        = Новый Массив;
	ПараметрыИменованные = Новый Массив;
	
	
	ЭмуляцияRegExp(Стр,ПараметрыСтрокиА,ПараметрыСтрокиК,ПараметрыЧисла,ПараметрыДаты,ПараметрыИменованные,Истина);
	
	Ном = 0;
	Для каждого ПараметрДаты Из ПараметрыДаты Цикл
		Ном = Ном + 1;
		Стр = СтрЗаменить(Стр,"*||*ПараметрДата" + Ном + "*||*","*||*" + ПараметрДаты + "*||*");
	КонецЦикла;
	
	Возврат Стр;
КонецФункции	

Процедура СкопироватьСтрокиСценарияВУказаннуюСтроку(КудаКопировать,ДеревоОткудаКопировать,ИмяСценария,ИмяФайла,СтруктураПараметров, МногострочныеПараметрыШага)
	СтрокаСценария = Неопределено;
	
	МассивСценариевЗащитаОтЗацикливания = КудаКопировать.МассивСценариевЗащитаОтЗацикливания;
	Если МассивСценариевЗащитаОтЗацикливания = Неопределено Тогда
		МассивСценариевЗащитаОтЗацикливания = Новый Массив();
		КудаКопировать.МассивСценариевЗащитаОтЗацикливания = МассивСценариевЗащитаОтЗацикливания;
	КонецЕсли; 
	
	Элем = МассивСценариевЗащитаОтЗацикливания.Найти(ИмяСценария);
	Если Элем <> Неопределено Тогда
		//значит этот сценарий уже вызывался выше и сейчас произойдёт зацикливание
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не получилось скопировать сценарий %1, т.к. произошло бы зацикливание.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяСценария);
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		Возврат;
	КонецЕсли; 
	
	МассивСценариевЗащитаОтЗацикливания.Добавить(ИмяСценария);
	
	ЗначенияПараметровДляЗаменыВРодительскомСценарии   = Новый Массив;
	СтарыйStepDefinition = ПолучитьStepDefinitionПоСтроке(КудаКопировать.Имя,ЗначенияПараметровДляЗаменыВРодительскомСценарии,,,,,СтруктураПараметров);//получим параметры которые пойдут во вложенный сценарий
	НовыйStepDefinition  = ПолучитьНовыйStepDefinition(СтарыйStepDefinition);
	
	ЗначенияПараметровДляЗаменыВоВложенномСценарии = Неопределено;
	ЗначенияТаблицДляЗаменыВоВложенномСценарии     = Неопределено;
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Тип","Сценарий");
	НайденныеСтрокиВсе = ДеревоОткудаКопировать.Строки.НайтиСтроки(ПараметрыОтбора,Истина);
	НайденныеСтроки = Новый Массив;
	Для Каждого НайденнаяСтрока Из НайденныеСтрокиВсе Цикл
		ЗначенияПараметров   = Новый Массив;
		СтарыйStepDefinition = ПолучитьStepDefinitionПоСтроке(НайденнаяСтрока.Имя,ЗначенияПараметров,,,,,СтруктураПараметров);
		НовыйStepDefinition  = ПолучитьНовыйStepDefinition(СтарыйStepDefinition);
		НовыйStepDefinition  = Лев(НовыйStepDefinition,Найти(НовыйStepDefinition,"(")-1);
		
		Если НРег(НовыйStepDefinition) = ИмяСценария Тогда
			НайденныеСтроки.Добавить(НайденнаяСтрока);
			//имя сценария уже вставлено правильно из родительского шага
			ЗначенияПараметровДляЗаменыВоВложенномСценарии = ЗначенияПараметров;
			
			Если КудаКопировать.ШагСПараметрамиВТаблице = Истина Тогда
				//надо передать ещё и таблицы
				ЗначенияТаблицДляЗаменыВоВложенномСценарии = КудаКопировать.Строки;
			КонецЕсли;	 
			
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;	
	
	СтрокаОткудаКопировать = Неопределено;
	КолСценариев           = 0;
	Для каждого СтрокаДерева Из НайденныеСтроки Цикл
		Если СтрокаДерева.Тип = "Сценарий" Тогда
			КолСценариев = КолСценариев + 1;
			СтрокаОткудаКопировать = СтрокаДерева;
		КонецЕсли;	 
	КонецЦикла;
	
	Если КолСценариев <> 1 Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ошибка. В фиче %1 было найдено несколько сценариев с именем %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайла);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяСценария);
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		Возврат;
	КонецЕсли;	 
	
	ПараметрыКопирования = Новый Структура;
	ПараметрыКопирования.Вставить("ЗначенияПараметровДляЗаменыВРодительскомСценарии",ЗначенияПараметровДляЗаменыВРодительскомСценарии);
	ПараметрыКопирования.Вставить("ЗначенияПараметровДляЗаменыВоВложенномСценарии",ЗначенияПараметровДляЗаменыВоВложенномСценарии);
	ПараметрыКопирования.Вставить("ЗначенияТаблицДляЗаменыВоВложенномСценарии",ЗначенияТаблицДляЗаменыВоВложенномСценарии);
	ПараметрыКопирования.Вставить("ИдТаблицыДляКопирования",-1);
	ПараметрыКопирования.Вставить("КудаКопировать", КудаКопировать);
	ПараметрыКопирования.Вставить("ИмяФайла", ИмяФайла);
	ПараметрыКопирования.Вставить("МногострочныеПараметрыШага", МногострочныеПараметрыШага);
	ПараметрыКопирования.Вставить("ИдМногострочногоПараметра", -1);
	
	Если ЗначенияТаблицДляЗаменыВоВложенномСценарии <> Неопределено Тогда
		ПустаяСтрокаДереваРазделитель  = Неопределено;
		ТаблицыКудаКопировать          = ПолучитьТаблицыОткудаКопировать(КудаКопировать.Строки,ПустаяСтрокаДереваРазделитель);
	КонецЕсли;	 
	
	СкопироватьСтрокуВДереваПодчиненныеЭлементы(КудаКопировать,СтрокаОткудаКопировать,ПараметрыКопирования,СтруктураПараметров);
	
	Если ЗначенияТаблицДляЗаменыВоВложенномСценарии <> Неопределено Тогда
		Если СтрокаОткудаКопировать.ДопТип = "СтруктураСценария" Тогда
			Если ПараметрыКопирования.ИдТаблицыДляКопирования < (ТаблицыКудаКопировать.Количество()-2) Тогда //т.к. если была замена таблицы примеров - то это было сделано на этапе загрузки вложенного сценария
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Во вложенный сценарий <%1> было передано <%2> таблиц, а он принимает только <%3> таблиц.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КудаКопировать.Имя);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТаблицыКудаКопировать.Количество());
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",(ПараметрыКопирования.ИдТаблицыДляКопирования+1));
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		Иначе	
			Если ПараметрыКопирования.ИдТаблицыДляКопирования < (ТаблицыКудаКопировать.Количество()-1) Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Во вложенный сценарий <%1> было передано <%2> таблиц, а он принимает только <%3> таблиц.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КудаКопировать.Имя);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТаблицыКудаКопировать.Количество());
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",(ПараметрыКопирования.ИдТаблицыДляКопирования+1));
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецПроцедуры

Функция ПолучитьТаблицыОткудаКопировать(ДеревоСтроки,ПустаяСтрокаДереваРазделитель)
	МассивТаблиц = Новый Массив;
	ТекТаблица   = Новый Массив;
	МассивТаблиц.Добавить(ТекТаблица);
	
	БылаХотяБыОднаСтрока = Ложь;
	Для Каждого СтрокаДерева Из ДеревоСтроки Цикл
		Если Не ЗначениеЗаполнено(СтрокаДерева.Имя) Тогда
			ПустаяСтрокаДереваРазделитель = СтрокаДерева;
			ТекТаблица   = Новый Массив;
			МассивТаблиц.Добавить(ТекТаблица);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.СтрокаПараметровШагаВВидеТаблицы <> Истина Тогда
			Прервать; // тут могут после строк таблицы идти обычные шаги, т.к. ранее уже было копирование шагов в эту ветку дерева
		КонецЕсли;	 
		
		ТекТаблица.Добавить(СтрокаДерева);
		БылаХотяБыОднаСтрока = Истина;
	КонецЦикла;	
	
	Если Не БылаХотяБыОднаСтрока  Тогда
		Возврат Новый Массив;
	КонецЕсли;	 
	
	Возврат МассивТаблиц;
КонецФункции	

Функция ЭтоПустаяТаблицаСОднойКолонкой(ТаблицаСтрок)
	Для Каждого Строка Из ТаблицаСтрок Цикл
		Если Строка.Имя = "||" ИЛИ Строка.Имя = "| |" ИЛИ Строка.Имя = "|  |" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Возврат Ложь;
	КонецЦикла;	
	
	Возврат Истина;
КонецФункции	

Процедура СкопироватьСтрокуВДереваПодчиненныеЭлементы(КудаКопировать,ОткудаКопировать,ПараметрыКопирования,СтруктураПараметров)
	Для каждого СтрОткудаКопировать Из ОткудаКопировать.Строки Цикл
		Если ПараметрыКопирования <> Неопределено Тогда
			Если ПараметрыКопирования.Свойство("СозданиеСекцииПримеров") Тогда
				Если СтрОткудаКопировать.Тип = "Примеры" Тогда
					Продолжить;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	
		
		//создаём строку и копируеум свойства
		СтрокаКуда = КудаКопировать.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКуда,СтрОткудаКопировать);
		
		Если СтрОткудаКопировать.Тип = "Пример" Тогда
			ПараметрыКопирования.ИдТаблицыДляКопирования = -1;
		КонецЕсли;	 
		
		Если ПараметрыКопирования <> Неопределено Тогда
			Если ПараметрыКопирования.Свойство("СозданиеСекцииПримеров") Тогда
				Если СтрОткудаКопировать.Тип = "Примеры" Тогда
					Продолжить;
				КонецЕсли;	 
				
				ЗначенияПараметров = Неопределено;
				ИмяШага            = СтрОткудаКопировать.Имя;
				Если СтрОткудаКопировать.ЗначенияПараметров <> Неопределено Тогда
					ЗначенияПараметров = СкопироватьСписокЗначенийСтруктур(СтрОткудаКопировать.ЗначенияПараметров);
					ИмяШага            = СоздатьИмяШагаДляScenarioOutline_И_ОбработатьЗначенияПараметров(СтрОткудаКопировать.Имя,ЗначенияПараметров,ПараметрыКопирования.СтрокаПримеров.ИменованныеПараметры);
				КонецЕсли;	 
				
				Если СтрОткудаКопировать.СтрокаПараметровШагаВВидеТаблицы = Истина Тогда //тогда надо обновить параметры внутри таблицы
					Для Каждого ПараметрТаблицы Из СтрОткудаКопировать.ПараметрыТаблицы Цикл
						Для Каждого ИменнованныйПараметр Из ПараметрыКопирования.СтрокаПримеров.ИменованныеПараметры Цикл
							Если ИменнованныйПараметр.Значение.Тип = "Строка" Тогда
								ИмяШага = СтрЗаменить(ИмяШага,"<" + ИменнованныйПараметр.Значение.ИмяПараметра + ">","'" + ИменнованныйПараметр.Значение.Значение + "'");
								ИмяШага = СтрЗаменить(ИмяШага,"''" + ИменнованныйПараметр.Значение.Значение + "''","'" + ИменнованныйПараметр.Значение.Значение + "'");
							Иначе	
								ИмяШага = СтрЗаменить(ИмяШага,"<" + ИменнованныйПараметр.Значение.ИмяПараметра + ">",ИменнованныйПараметр.Значение.Значение);
							КонецЕсли;	 
						КонецЦикла;	
					КонецЦикла;	
				КонецЕсли;	 
				
				СтрШагПримера                    = СтрокаКуда;
				ЗаполнитьЗначенияСвойств(СтрШагПримера,СтрОткудаКопировать);
				
				//надо заменить только имя шага (с учетом реальных параметров) и значения параметров
				СтрШагПримера.Имя                = ИмяШага;
				СтрШагПримера.ЗначенияПараметров = ЗначенияПараметров;
			КонецЕсли;	 
			
			Если ПараметрыКопирования.Свойство("ЗначенияПараметровДляЗаменыВРодительскомСценарии") Тогда
				Если ПараметрыКопирования.ЗначенияПараметровДляЗаменыВРодительскомСценарии.Количество() > 0 Тогда
					СтрокаДляЗаментыПараметров = ПолучитьСтрокуДляЗаменыПараметровВложенныхСценариев(СтрокаКуда.Имя);
					Ном = -1;
					                                             
					Если ПараметрыКопирования.ЗначенияПараметровДляЗаменыВоВложенномСценарии.Количество() < ПараметрыКопирования.ЗначенияПараметровДляЗаменыВРодительскомСценарии.Количество() Тогда
						ТекстСообщения = ПолучитьТекстСообщенияПользователю("Подсценарий <%1> принимает <%2> параметров, а в него было передано <%3> параметров.");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтруктураПараметров.ИмяСценарияДляКопирования);
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПараметрыКопирования.ЗначенияПараметровДляЗаменыВоВложенномСценарии.Количество());
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ПараметрыКопирования.ЗначенияПараметровДляЗаменыВРодительскомСценарии.Количество());
						
						СтруктураПараметров.БылиОшибкиЗагрузкиФич = Истина;
						СтруктураПараметров.Вставить("ФичаЗагружена",Ложь);
						СтруктураПараметров.Вставить("БылиОшибкиЗагрузкиФич",Истина);
						СтруктураПараметров.Вставить("ОписаниеОшибки",ТекстСообщения);
						СтруктураПараметров.ОшибкиЗагрузкиФич.Добавить(ТекстСообщения);
						
						Если НЕ СтруктураПараметров.Свойство("ДанныеОшибокДляРедактора") Тогда
							СтруктураПараметров.Вставить("ДанныеОшибокДляРедактора", Новый Массив);
						КонецЕсли;	 
						ДанныеОшибокДляРедактора = СтруктураПараметров.ДанныеОшибокДляРедактора;
						
						ДанныеОшибкиДляРедактора = ДанныеОшибкиДляРедактора(ПараметрыКопирования.КудаКопировать.НомерСтрокиВФиче,
							ПараметрыКопирования.ИмяФайла, ТекстСообщения);
						
						ДанныеОшибокДляРедактора.Добавить(ДанныеОшибкиДляРедактора);
						
						ВызватьИсключение ТекстСообщения;
					КонецЕсли;	 
					
					Для каждого РодительскийПараметр Из ПараметрыКопирования.ЗначенияПараметровДляЗаменыВРодительскомСценарии Цикл
						Ном = Ном + 1;
						ВложенныйПараметр = ПараметрыКопирования.ЗначенияПараметровДляЗаменыВоВложенномСценарии[Ном];
						Если ТипЗнч(ВложенныйПараметр.Значение) = Тип("Структура") Тогда
							ВложенныйПараметр = ВложенныйПараметр.Значение;
						КонецЕсли;	 
						
						МассивЧтоЗаменяем1 = Новый Массив;
						МассивЧтоЗаменяем2 = Новый Массив;
						
						ЧтоЗаменяем = ВложенныйПараметр.Значение;
						Если ВложенныйПараметр.Тип = "Строка" Тогда
							МассивЧтоЗаменяем1.Добавить("'" + ЧтоЗаменяем + "'");
							МассивЧтоЗаменяем1.Добавить("""" + ЧтоЗаменяем + """");
							МассивЧтоЗаменяем2.Добавить("[" + ЧтоЗаменяем + "]");
						ИначеЕсли ВложенныйПараметр.Тип = "Число" Тогда
							МассивЧтоЗаменяем1.Добавить(ЧтоЗаменяем);
						ИначеЕсли ВложенныйПараметр.Тип = "Дата" Тогда
							МассивЧтоЗаменяем1.Добавить(ЧтоЗаменяем);
						КонецЕсли;	 
						
						НаЧтоЗаменяем = РодительскийПараметр.Значение;
						НаЧтоЗаменяем = СтрЗаменить(НаЧтоЗаменяем, "\'", ПредставлениеЭкранированныйСлеш);
						НаЧтоЗаменяем = СтрЗаменить(НаЧтоЗаменяем,"'","\'");
						НаЧтоЗаменяем = СтрЗаменить(НаЧтоЗаменяем, ПредставлениеЭкранированныйСлеш, "\'");
						Для каждого ЧтоЗаменяем Из МассивЧтоЗаменяем2 Цикл
							СтрокаДляЗаментыПараметров = СтрЗаменить(СтрокаДляЗаментыПараметров, ЧтоЗаменяем, НаЧтоЗаменяем);
						КонецЦикла;
						
						Если РодительскийПараметр.Тип = "Строка" Тогда
							НаЧтоЗаменяем = "'" + НаЧтоЗаменяем + "'";
						ИначеЕсли РодительскийПараметр.Тип = "ПараметрИменованный" Тогда
							НаЧтоЗаменяем = "<" + НаЧтоЗаменяем + ">";
						КонецЕсли;	 
						
						Для каждого ЧтоЗаменяем Из МассивЧтоЗаменяем1 Цикл
							СтрокаДляЗаментыПараметров = СтрЗаменить(СтрокаДляЗаментыПараметров,"*||*" + ЧтоЗаменяем + "*||*",НаЧтоЗаменяем);
						КонецЦикла;
					КонецЦикла;
					
					СтрокаДляЗаментыПараметров = СтрЗаменить(СтрокаДляЗаментыПараметров,"*||*","");
					СтрокаДляЗаментыПараметров = СтрЗаменить(СтрокаДляЗаментыПараметров,"*||*","");
					
					СтрокаКуда.Имя = СтрокаДляЗаментыПараметров;
					ВтораяЧастьСтрокиПозиция = -1;
					ТекущееКлючевоеСлово = ПолучитьКлючевоеСлово(НРег(СтрокаКуда.Имя), ВтораяЧастьСтрокиПозиция);
					ИмяШагаБезКлючевогоСлова = СокрЛП(Сред(СтрокаКуда.Имя, ВтораяЧастьСтрокиПозиция));
					СтрокаКуда.ИмяШагаБезКлючевогоСлова = ИмяШагаБезКлючевогоСлова;
					
					ЗначенияПараметров = Новый СписокЗначений;
					
					ПараметрыДляПолученияStepDefenition = Новый Структура;
					ПараметрыДляПолученияStepDefenition.Вставить("ЗначенияПараметров",ЗначенияПараметров);
					ПараметрыДляПолученияStepDefenition.Вставить("НоваяСтрокаПараметров","");
					ПараметрыДляПолученияStepDefenition.Вставить("НовыйStepDefinition","");
					ПараметрыДляПолученияStepDefenition.Вставить("ИмяШагаБезКлючевогоСлова",СтрокаКуда.ИмяШагаБезКлючевогоСлова);
					ПараметрыДляПолученияStepDefenition.Вставить("ШагСПараметрамиВТаблице",СтрокаКуда.ШагСПараметрамиВТаблице);
					ПараметрыДляПолученияStepDefenition.Вставить("КоличествоПередаваемыхТаблиц",ОпределитьКоличествоПередаваемыхТаблиц(СтрокаКуда));
					ПараметрыДляПолученияStepDefenition.Вставить("СтруктураПараметров",СтруктураПараметров);
					
					МногострочныеПараметрыШага = Неопределено;
					Если СтрокаКуда.ЗначенияПараметров <> Неопределено Тогда
						Для Каждого ТекЗн Из СтрокаКуда.ЗначенияПараметров Цикл
							Если ТекЗн.Значение.Свойство("Многострочный") Тогда
								Если МногострочныеПараметрыШага = Неопределено Тогда
									МногострочныеПараметрыШага = Новый Массив;
								КонецЕсли;	 
								МногострочныеПараметрыШага.Добавить(ТекЗн.Значение.Значение);
							КонецЕсли;	 
						КонецЦикла;	 
					КонецЕсли;	 
					
					Если МногострочныеПараметрыШага <> Неопределено Тогда
						ПараметрыДляПолученияStepDefenition.Вставить("МногострочныеПараметрыШага", МногострочныеПараметрыШага);
					КонецЕсли;	 
					
					ПараметрыДляПолученияStepDefenition.Вставить("ЗаменятьЭкранированныеСпецсимволы", Ложь);
					РассчитатьStepDefinition(ПараметрыДляПолученияStepDefenition);
					НоваяСтрокаПараметров = ПараметрыДляПолученияStepDefenition.НоваяСтрокаПараметров;
					НовыйStepDefinition   = ПараметрыДляПолученияStepDefenition.НовыйStepDefinition;
					
					ЗначенияПараметров = ПараметрыДляПолученияStepDefenition.ЗначенияПараметров;
					IDИзStepDefinition = НРег(Лев(НовыйStepDefinition,Найти(НовыйStepDefinition,"(")-1));
					СтрТаблицаИзвестныхStepDefinition = StepDefinitionИзТаблицы(IDИзStepDefinition,СтруктураПараметров.ТаблицаИзвестныхStepDefinition,СтруктураПараметров,ЗначенияПараметров,СтрокаКуда);
					СтрокаКуда.ЗначенияПараметров = ЗначенияПараметров;
					
					Если СтрокаКуда.СтрокаПараметровШагаВВидеТаблицы Тогда
						ДанныеСтроки = Новый Структура;
						ДанныеСтроки.Вставить("Стр", СтрокаКуда.Имя);
						ДанныеСтроки.Вставить("НомерСтрокиВФиче", СтрокаКуда.НомерСтрокиВФиче);
						СтрокаКуда.ПараметрыТаблицы = РассчитатьПараметрыТаблицы(ДанныеСтроки, СтруктураПараметров);
					КонецЕсли;	 
					
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		//подчиненный элемент получил МассивСценариевЗащитаОтЗацикливания
		СтрокаКуда.МассивСценариевЗащитаОтЗацикливания = КудаКопировать.МассивСценариевЗащитаОтЗацикливания;
		
		Если СтрОткудаКопировать.ШагСПараметрамиВТаблице = Истина И НЕ ПустаяСтрока(СтрОткудаКопировать.ДопТип) Тогда
			Если ТипЗнч(СтрОткудаКопировать.ПроизвольныеЗначения) <> Тип("Структура") Тогда
				СтрОткудаКопировать.ПроизвольныеЗначения = Новый Структура;
			КонецЕсли;	 
			СтрОткудаКопировать.ПроизвольныеЗначения.Вставить("ТаблицыСкопированы", Ложь);
		КонецЕсли;	 
		
		//Проверим родительский шаг, что если он является областью, то в него надо скопировать переданные таблицы
		Если КудаКопировать.ШагСПараметрамиВТаблице = Истина И НЕ ПустаяСтрока(КудаКопировать.ДопТип)
			И НЕ КудаКопировать.ДопТип = "СтруктураСценария" И НЕ КудаКопировать.ПроизвольныеЗначения.ТаблицыСкопированы Тогда
			Если НЕ ПустаяСтрока(СтрокаКуда.Имя) И НЕ СтрокаКуда.СтрокаПараметровШагаВВидеТаблицы Тогда
				СкопироватьПодчиненныеТаблицы(КудаКопировать, ОткудаКопировать, ПараметрыКопирования, СтруктураПараметров);
				КудаКопировать.ПроизвольныеЗначения.ТаблицыСкопированы = Истина;
			КонецЕсли;	 
		КонецЕсли;	 
		
		СкопироватьСтрокуВДереваПодчиненныеЭлементы(СтрокаКуда,СтрОткудаКопировать,ПараметрыКопирования,СтруктураПараметров);
		Если ПараметрыКопирования.Свойство("МногострочныеПараметрыШага") И ПараметрыКопирования.МногострочныеПараметрыШага <> Неопределено Тогда
			СтрокаКуда.ЗначенияПараметров = СкопироватьСписокЗначенийСтруктур(СтрокаКуда.ЗначенияПараметров);
			Для Каждого ТекПараметр Из СтрокаКуда.ЗначенияПараметров Цикл
				Если ТекПараметр.Значение.Свойство("Многострочный") И ТекПараметр.Значение.Многострочный Тогда
					ПараметрыКопирования.ИдМногострочногоПараметра = ПараметрыКопирования.ИдМногострочногоПараметра + 1;
					Если ПараметрыКопирования.ИдМногострочногоПараметра <= ПараметрыКопирования.МногострочныеПараметрыШага.Количество() - 1 Тогда
						ТекПараметр.Значение.Значение = ПараметрыКопирования.МногострочныеПараметрыШага[ПараметрыКопирования.ИдМногострочногоПараметра];
						ТекПараметр.Значение.Тип = "Строка";
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЦикла;	 
		КонецЕсли;	 
		
		Если СтрОткудаКопировать.ШагСПараметрамиВТаблице = Истина И ПустаяСтрока(СтрОткудаКопировать.ДопТип) Тогда
			СкопироватьПодчиненныеТаблицы(СтрокаКуда, СтрОткудаКопировать, ПараметрыКопирования, СтруктураПараметров);
		КонецЕсли;	 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьПодчиненныеТаблицы(КудаКопировать, ОткудаКопировать, ПараметрыКопирования, СтруктураПараметров)
	РазныеИменованныеПараметры            = Новый Массив;
	ТаблицаСтрокПередачаПараметровТаблицей = СоздатьТаблицуСтрокПримеров();
	
	ОткудаКопироватьТаблицу        = КудаКопировать.Строки;
	
	Если ПараметрыКопирования.Свойство("ЗначенияТаблицДляЗаменыВоВложенномСценарии") И (ОткудаКопировать.Родитель.ДопТип <> "СтруктураСценария") Тогда
		Если ПараметрыКопирования.ЗначенияТаблицДляЗаменыВоВложенномСценарии <> Неопределено Тогда
			ПустаяСтрокаДереваРазделитель  = Неопределено;
			ТаблицыКудаКопировать          = ПолучитьТаблицыОткудаКопировать(КудаКопировать.Строки,ПустаяСтрокаДереваРазделитель);
			КоличествоТаблицДляКопирования = ТаблицыКудаКопировать.Количество();
			
			//надо заменить таблицы в подчиненном сценарии
			ПустаяСтрокаДереваРазделитель = Неопределено;
			ТаблицыОткудаКопировать       = ПолучитьТаблицыОткудаКопировать(ПараметрыКопирования.ЗначенияТаблицДляЗаменыВоВложенномСценарии,ПустаяСтрокаДереваРазделитель);
			
			ФинальныйМассивДляКопирования = Новый Массив;
			Для Ккк = 1 По КоличествоТаблицДляКопирования Цикл
				Если Ккк > 1 Тогда
					ФинальныйМассивДляКопирования.Добавить(ПустаяСтрокаДереваРазделитель);
				КонецЕсли;	 
				
				ПараметрыКопирования.ИдТаблицыДляКопирования = ПараметрыКопирования.ИдТаблицыДляКопирования + 1;
				
				Если ПараметрыКопирования.ИдТаблицыДляКопирования <= (ТаблицыОткудаКопировать.Количество()-1) Тогда
					
					Если ЭтоПустаяТаблицаСОднойКолонкой(ТаблицыОткудаКопировать[ПараметрыКопирования.ИдТаблицыДляКопирования]) Тогда
						//тогда не будем заменять таблицу
						Для Каждого СтрокаТаблицыОткудаКопировать Из ТаблицыКудаКопировать[Ккк - 1] Цикл
							ФинальныйМассивДляКопирования.Добавить(СтрокаТаблицыОткудаКопировать);
						КонецЦикла;	
						
						Продолжить;
					КонецЕсли;	 
					
					Для Каждого СтрокаТаблицыОткудаКопировать Из ТаблицыОткудаКопировать[ПараметрыКопирования.ИдТаблицыДляКопирования] Цикл
						ФинальныйМассивДляКопирования.Добавить(СтрокаТаблицыОткудаКопировать);
					КонецЦикла;	
				КонецЕсли;	 
			КонецЦикла;	
			
			Если ФинальныйМассивДляКопирования.Количество() > 0 Тогда
				ОткудаКопироватьТаблицу = ФинальныйМассивДляКопирования;
			КонецЕсли;	 
			
		КонецЕсли;	 
	КонецЕсли;	 
	
	Для Каждого ПодчиненнаяСтрока Из ОткудаКопироватьТаблицу Цикл
		Если (НЕ ПодчиненнаяСтрока.СтрокаПараметровШагаВВидеТаблицы) и (СокрЛП(ПодчиненнаяСтрока.Имя) <> "") Тогда
			Продолжить;
		КонецЕсли;	 
		
		СтрТаблицаСтрокиСРазделителями = Новый Структура;
		СтрТаблицаСтрокиСРазделителями.Вставить("Стр",ПодчиненнаяСтрока.Имя);
		СтрТаблицаСтрокиСРазделителями.Вставить("Тип",ПодчиненнаяСтрока.Тип);
		ТаблицаСтрокПередачаПараметровТаблицей.Добавить(СтрТаблицаСтрокиСРазделителями);
	КонецЦикла;	
	
	МассивТаблицПередаваемыхКакПараметр = Новый Массив;
	МассивТаблицПередаваемыхКакПараметр.Добавить(ТаблицаСтрокПередачаПараметровТаблицей);
	
	ОбработатьПередачуПараметровТаблицей(КудаКопировать,МассивТаблицПередаваемыхКакПараметр,РазныеИменованныеПараметры,СтруктураПараметров);
КонецПроцедуры 

Функция ПолучитьСледующееОжидаемоеКлючевоеСлово(Стр,ТекущийТипСценария,ИдетЧтениеПримеров)
	СледующаяСтрокаМожетБыть = "";
	
	Если Стр = "feature" Тогда
		СледующаяСтрокаМожетБыть = "background,scenario,scenario_outline";
		ИдетЧтениеПримеров = Ложь;
	ИначеЕсли Стр = "background" Тогда
		ТекущийТипСценария = "background";
		СледующаяСтрокаМожетБыть = "when,given,then,and,but,if,elseif,else";
		ИдетЧтениеПримеров = Ложь;
	ИначеЕсли Стр = "scenario" Тогда
		ТекущийТипСценария = "scenario";
		СледующаяСтрокаМожетБыть = "when,given,then,and,but,if,elseif,else";
		ИдетЧтениеПримеров = Ложь;
	ИначеЕсли Стр = "scenario_outline" Тогда
		ТекущийТипСценария = "scenario_outline";
		СледующаяСтрокаМожетБыть = "when,given,then,and,but,if,elseif,else";
		ИдетЧтениеПримеров = Ложь;
	ИначеЕсли Стр = "given" Тогда
		Если ТекущийТипСценария = "background" Тогда
			СледующаяСтрокаМожетБыть = "when,then,and,but,given,if,elseif,else,scenario,scenario_outline";
		ИначеЕсли ТекущийТипСценария = "scenario" Тогда
			СледующаяСтрокаМожетБыть = "when,then,but,and,given,if,elseif,else,scenario,scenario_outline";
		ИначеЕсли ТекущийТипСценария = "scenario_outline" Тогда
			СледующаяСтрокаМожетБыть = "when,then,but,and,given,if,elseif,else,examples";
		КонецЕсли;	 
	ИначеЕсли (Стр = "and") или (Стр = "but")  или (Стр = "if")  или (Стр = "elseif")  или (Стр = "else") Тогда
		Если ТекущийТипСценария = "background" Тогда
			СледующаяСтрокаМожетБыть = "when,then,and,but,given,if,elseif,else,scenario,scenario_outline";
		ИначеЕсли ТекущийТипСценария = "scenario" Тогда
			СледующаяСтрокаМожетБыть = "when,then,and,but,given,if,elseif,else,scenario,scenario_outline";
		ИначеЕсли ТекущийТипСценария = "scenario_outline" Тогда
			СледующаяСтрокаМожетБыть = "when,then,but,and,given,if,elseif,else,examples";
		КонецЕсли;	 
	ИначеЕсли Стр = "when" Тогда
		Если ТекущийТипСценария = "background" Тогда
			СледующаяСтрокаМожетБыть = "when,then,and,but,given,if,elseif,else,scenario,scenario_outline";
		ИначеЕсли ТекущийТипСценария = "scenario" Тогда
			СледующаяСтрокаМожетБыть = "when,then,but,and,given,if,elseif,else,scenario,scenario_outline";
		ИначеЕсли ТекущийТипСценария = "scenario_outline" Тогда
			СледующаяСтрокаМожетБыть = "when,then,but,and,given,if,elseif,else,examples";
		КонецЕсли;	 
	ИначеЕсли Стр = "then" Тогда
		Если ТекущийТипСценария = "background" Тогда
			СледующаяСтрокаМожетБыть = "when,then,and,but,given,if,elseif,else,scenario,scenario_outline";
		ИначеЕсли ТекущийТипСценария = "scenario" Тогда
			СледующаяСтрокаМожетБыть = "when,then,but,and,given,if,elseif,else,scenario,scenario_outline";
		ИначеЕсли ТекущийТипСценария = "scenario_outline" Тогда
			СледующаяСтрокаМожетБыть = "when,then,but,and,given,if,elseif,else,examples";
		КонецЕсли;	 
	ИначеЕсли Стр = "examples" Тогда
		ИдетЧтениеПримеров = Истина;
		СледующаяСтрокаМожетБыть = "scenario,scenario_outline";
	КонецЕсли;	 
	
	Если СледующаяСтрокаМожетБыть = Неопределено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не получилось определить СледующееОжидаемоеКлючевое по: %1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Стр);
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
	КонецЕсли;	 
	
	Возврат СледующаяСтрокаМожетБыть;
КонецФункции

Функция ТекущееКлючевоеСловоСоответствуетОжидаемому(ТекущееКлючевоеСлово,ОжидаемоеКлючевоеСлово)
	Если ТекущееКлючевоеСлово = "" Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Поз = Найти(ОжидаемоеКлючевоеСлово,ТекущееКлючевоеСлово);
	Если Поз > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;	
	КонецЕсли;	 
КонецФункции

Функция СоздатьТаблицуШагов()
	Тзн = Новый Массив;
	Возврат Тзн;
КонецФункции

Процедура ДобавитьШаг(ТаблицаШагов,СтрокаТаблицаТекстФичи,КлючевоеСлово,ИмяШагаБезКлючевогоСлова,ИмяШага,НомерСтроки,МассивТаблицПередаваемыхКакПараметр,ДопПараметры,СруктураОбласти = Неопределено)
	
	СтруктураШага = Новый Структура;
	СтруктураШага.Вставить("КлючевоеСлово",КлючевоеСлово);
	СтруктураШага.Вставить("ИмяШагаБезКлючевогоСлова",ИмяШагаБезКлючевогоСлова);
	СтруктураШага.Вставить("ИмяШага",ИмяШага);
	СтруктураШага.Вставить("НомерСтроки",НомерСтроки);
	СтруктураШага.Вставить("МассивТаблицПередаваемыхКакПараметр",МассивТаблицПередаваемыхКакПараметр);
	СтруктураШага.Вставить("ЗначениеОтступа",СтрокаТаблицаТекстФичи.ЗначениеОтступа);
	СтруктураШага.Вставить("МассивТеговШага",ДопПараметры.МассивТеговШага);
	СтруктураШага.Вставить("МассивКомментариевШага",ДопПараметры.МассивКомментариевШага);
	
	СтруктураШага.Вставить("ИмяОбласти","");
	СтруктураШага.Вставить("НачалоОбласти",Ложь);
	СтруктураШага.Вставить("Родитель",Неопределено);
	СтруктураШага.Вставить("РазмерОтступа",0);
	СтруктураШага.Вставить("ГруппаЗакрывается",Ложь);
	Если СруктураОбласти <> Неопределено Тогда
		СтруктураШага.Вставить("ИмяОбласти",СруктураОбласти.ИмяОбласти);
		СтруктураШага.Вставить("НачалоОбласти",СруктураОбласти.НачалоОбласти);
		Если СруктураОбласти.Свойство("Родитель") Тогда
			СтруктураШага.Вставить("Родитель",СруктураОбласти.Родитель);
		КонецЕсли;	 
		Если СруктураОбласти.Свойство("РазмерОтступа") Тогда
			СтруктураШага.Вставить("РазмерОтступа",СруктураОбласти.РазмерОтступа);
		КонецЕсли;	 
		Если СруктураОбласти.Свойство("ГруппаЗакрывается") Тогда
			СтруктураШага.Вставить("ГруппаЗакрывается",СруктураОбласти.ГруппаЗакрывается);
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТаблицаШагов.Добавить(СтруктураШага);
КонецПроцедуры

Функция СоздатьТаблицуСтрокПримеров()
	Тзн = Новый Массив;
	Возврат Тзн;
КонецФункции

Функция ФичаИмеетКорректныеОтступыВНачалеСтрок(Тзн,ИмяФайла,ИмяФайлаОригинальное)
	Статус = Истина;
	ВыводилИмяФичи = Ложь;
	
	КолСтрокПробелы = 0;
	КолСтрокТабы    = 0;
	
	НомСтр               = 0;
	НайденоКлючевоеСлово = Ложь;
	Для Каждого СтрТзн Из Тзн Цикл
		НомСтр = НомСтр + 1;
		
		СокрСтр = СокрЛП(СтрТзн.Стр);
		
		Если СокрСтр = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Лев(СокрСтр,1) = "#" Тогда
			Продолжить;
		ИначеЕсли Лев(СокрСтр,2) = "//" Тогда
			Продолжить;
		ИначеЕсли Лев(СокрСтр,1) = "@" Тогда
			Продолжить;
		ИначеЕсли Лев(СокрСтр,1) = "|" Тогда
			Продолжить;
		КонецЕсли;	 
		
		КоличествоПробеловВНачалеСтроки = 0;
		КоличествоТабовВНачалеСтроки    = 0;
		
		ДлинаСтроки = СтрДлина(СтрТзн.Стр);
		
		Поз = -1;
		КлючевоеСлово        = ПолучитьКлючевоеСлово(СокрЛП(СтрТзн.Стр),Поз);
		СтрТзн.КлючевоеСлово = КлючевоеСлово;
		
		Если КлючевоеСлово = "scenario" или КлючевоеСлово = "scenario_outline" или КлючевоеСлово = "background" Тогда
			НайденоКлючевоеСлово = Истина;
			СтрТзн.ЗначениеОтступа = 0;
		КонецЕсли;	 
		
		Если Не НайденоКлючевоеСлово Тогда
			Продолжить;
		КонецЕсли;	 
		
		Для Ккк = 1 По ДлинаСтроки Цикл
			Символ = Сред(СтрТзн.Стр,Ккк,1);
			Если Символ = " " Тогда
				КоличествоПробеловВНачалеСтроки = КоличествоПробеловВНачалеСтроки + 1;
			ИначеЕсли Символ = Символы.Таб Тогда
				КоличествоТабовВНачалеСтроки = КоличествоТабовВНачалеСтроки + 1;
			Иначе
				Прервать;
			КонецЕсли;	 
		КонецЦикла; 
		
		Если КоличествоПробеловВНачалеСтроки > 0 Тогда
			КолСтрокПробелы = КолСтрокПробелы + 1;
		КонецЕсли;	 
		Если КоличествоТабовВНачалеСтроки > 0 Тогда
			КолСтрокТабы = КолСтрокТабы + 1;
		КонецЕсли;	 
		
		Если (КоличествоПробеловВНачалеСтроки > 0) и (КоличествоТабовВНачалеСтроки > 0) Тогда
			Если Не ВыводилИмяФичи Тогда
				ВыводилИмяФичи = Истина;
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Фича <%1> содержит тег @Tree. Найдены строки, которые содержат символы пробелов и символы табуляции в начале строки. Дерево не может быть корректно построено.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайлаОригинальное);
				Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
			КонецЕсли;	 
			
			Сообщить(СтрТзн.Стр);
			Статус = Ложь;
		КонецЕсли;	 
	КонецЦикла;	
	
	
	Если (КолСтрокПробелы > 0) и (КолСтрокТабы > 0) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Фича <%1> содержит тег @Tree. Часть строк содержит в начале строки символы пробелов <%2>, часть строк содержит символы табуляции <%3>. Дерево не может быть корректно построено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайлаОригинальное);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",КолСтрокПробелы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",КолСтрокТабы);
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		Статус = Ложь;
	КонецЕсли;	 
	
	Возврат Статус;
КонецФункции	

Функция ЗагрузитьФичуВТаблицуЗначений(ИмяФайла,НадоСтроитьДерево,ИмяФайлаОригинальное,ТэгУказанияЯзыка,СтруктураПараметров)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("Стр");
	Тзн.Колонки.Добавить("ЗначениеОтступа");
	Тзн.Колонки.Добавить("СледующийОступ");
	Тзн.Колонки.Добавить("ПредыдущийОтступ");
	Тзн.Колонки.Добавить("НомСтр");
	Тзн.Колонки.Добавить("Примеры");
	Тзн.Колонки.Добавить("НельзяСоздаватьОбласть");
	Тзн.Колонки.Добавить("КлючевоеСлово");
	
	Если СтруктураПараметров.Свойство("ФичаФайлПереданТекстом") И СтруктураПараметров.ФичаФайлПереданТекстом Тогда
		ТекстФайла = СтруктураПараметров.ПереданныйТекстФичаФайла;
	Иначе	
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайла, "UTF-8");
		ТекстФайла = Текст.Прочитать();
		Текст.Закрыть();
	КонецЕсли;	 
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(ТекстФайла, Символы.ПС);
	
	НомСтр = 0;
	Для Сч = 1 По МассивСтрок.Количество() Цикл
		Стр = МассивСтрок[НомСтр];
		
		Если Лев(СокрЛП(Стр),1) = "#" Тогда
			ПозицияПоиска = Найти(Стр, ТэгУказанияЯзыка);
			Если  ПозицияПоиска > 0 Тогда
				СтрокаЯзыка = СокрЛП(Сред(Стр, ПозицияПоиска+СтрДлина(ТэгУказанияЯзыка)));
				Если СоответствиеТаблицПереводов.Получить(СтрокаЯзыка) <> Неопределено Тогда 
					ТекущийЯзыкФичаФайла = СтрокаЯзыка;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли НЕ НадоСтроитьДерево И НРег(СокрЛП(Стр)) = "@tree" Тогда
			НадоСтроитьДерево = Истина;
		КонецЕсли;	 
		
		СтрТзн = Тзн.Добавить();
		СтрТзн.Стр = Стр;
		
		НомСтр        = НомСтр + 1;
		СтрТзн.НомСтр = НомСтр;
	КонецЦикла;	
	
	ПредыдущийОтступ = 0;
	Если НадоСтроитьДерево Тогда
		Ном = -1;
		Для Сч = 1 По МассивСтрок.Количество() Цикл
			Ном = Ном + 1;
			
			Стр = МассивСтрок[Ном];
			
			СтрТзн                  = Тзн[Ном];
			СтрТзн.ЗначениеОтступа  = ВычислитьЗначениеОтступа(СтрТзн.Стр,ПредыдущийОтступ);
			СтрТзн.ПредыдущийОтступ = ПредыдущийОтступ;
			СтрТзн.СледующийОступ   = СтрТзн.ЗначениеОтступа;
			
			Если Ном > 0 Тогда
				Тзн[Ном-1].СледующийОступ = СтрТзн.ЗначениеОтступа;
			КонецЕсли;	 
			
			ПредыдущийОтступ        = СтрТзн.ЗначениеОтступа;
		КонецЦикла;	
		
		ЕстьПримеры = Ложь;
		КолСтрок = Тзн.Количество()-1;
		ОбойтиТаблицуОтступов(Тзн,КолСтрок,ЕстьПримеры);
		
		Если ЕстьПримеры Тогда
			СтрокаСШагом = Неопределено;
			Для Ккк = 0 По КолСтрок-1 Цикл
				ТекСтрокаТзн  = Тзн[Ккк];
				
				Если ТекСтрокаТзн.Примеры = Истина Тогда
					//нашел строку секции примеров
					Если СтрокаСШагом <> Неопределено Тогда
						СтрокаСШагом.НельзяСоздаватьОбласть = Истина;
					КонецЕсли;	 
				КонецЕсли;	 
				
				Если Не ЭтоНеСтрокаСШагом_ОпределимПоПервомуСимволу(ТекСтрокаТзн.Стр) Тогда
					СтрокаСШагом = ТекСтрокаТзн;
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЕсли;	 
		
		ФичаИмеетКорректныеОтступыВНачалеСтрок(Тзн,ИмяФайла,ИмяФайлаОригинальное);
	КонецЕсли;	 
	
	Возврат Тзн;
КонецФункции	

Функция ЭтоНеСтрокаСШагом_ОпределимПоПервомуСимволу(Стр)
	ПервыйСимвол = Лев(СокрЛП(Стр),1);
	Если  (СокрЛП(Стр) = "") или (ПервыйСимвол = "#") или (ПервыйСимвол = "@") или (ПервыйСимвол = "|") или (Лев(СокрЛП(Стр),2) = "//") Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	

Процедура ОбойтиТаблицуОтступов(Тзн,КолСтрок,ЕстьПримеры)
	Для Ккк = 0 По КолСтрок-1 Цикл
		ТекСтрокаТзн  = Тзн[КолСтрок - Ккк];
		ПредСтрокаТзн = Тзн[КолСтрок - Ккк - 1];
		
		ТекСтрокаСтр  = ТекСтрокаТзн.Стр;
		ПредСтрокаСтр = ПредСтрокаТзн.Стр;
		
		//для пустых строк отступ приравнивается снизу вверх
		Если ЭтоНеСтрокаСШагом_ОпределимПоПервомуСимволу(ПредСтрокаСтр) Тогда
			ПредСтрокаТзн.ЗначениеОтступа = ТекСтрокаТзн.ЗначениеОтступа;
		ИначеЕсли ВЭтойСтрокеКлючевоеСловоПримеры(СокрЛП(ПредСтрокаСтр)) Тогда
			ПредСтрокаТзн.ЗначениеОтступа = ТекСтрокаТзн.ЗначениеОтступа;
			ПредСтрокаТзн.Примеры = Истина;
			ЕстьПримеры           = Истина;
		КонецЕсли;	
		
		ПредСтрокаТзн.СледующийОступ = ТекСтрокаТзн.ЗначениеОтступа;
		
		
	КонецЦикла;
КонецПроцедуры

Функция ВычислитьЗначениеОтступа(Знач Стр,ПредыдущийОтступ)
	
	ПервыйСимвол = Лев(СокрЛП(Стр),1);
	
	Если ПервыйСимвол = "|" ИЛИ ПервыйСимвол = "#" ИЛИ ПервыйСимвол = "@" ИЛИ ПустаяСтрока(Стр) ИЛИ Лев(СокрЛП(Стр),2) = "//" Тогда
		//чтобы строки обозначающие таблицы всегда шли как следущая строка
		Возврат ПредыдущийОтступ;
	КонецЕсли;	 
	
	Кол = 0;
	Для Ккк = 1 По СтрДлина(Стр) Цикл
		Символ = Сред(Стр,Ккк,1);
		Если Символ = Символы.Таб Тогда
			Кол = Кол + 1;
		ИначеЕсли Символ = " " Тогда
			Кол = Кол + 1;
		Иначе
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Кол;
	
КонецФункции	

Процедура ДобавитьКолонкуСнипетаВТаблицаУжеСуществующихСценариев(ТаблицаУжеСуществующихСценариев,СтруктураПараметров)
	СтрокиДляОбработки = ТаблицаУжеСуществующихСценариев.НайтиСтроки(Новый Структура("Снипет",""));
	
	Для каждого СтрТаблицаУжеСуществующихСценариев Из СтрокиДляОбработки Цикл
		ЗначенияПараметров = Новый СписокЗначений;
		
		ПараметрыДляПолученияStepDefenition = Новый Структура;
		ПараметрыДляПолученияStepDefenition.Вставить("ЗначенияПараметров",ЗначенияПараметров);
		ПараметрыДляПолученияStepDefenition.Вставить("НоваяСтрокаПараметров","");
		ПараметрыДляПолученияStepDefenition.Вставить("НовыйStepDefinition","");
		ПараметрыДляПолученияStepDefenition.Вставить("ИмяШагаБезКлючевогоСлова",СтрТаблицаУжеСуществующихСценариев.ИмяСценария);
		ПараметрыДляПолученияStepDefenition.Вставить("ШагСПараметрамиВТаблице","");
		ПараметрыДляПолученияStepDefenition.Вставить("КоличествоПередаваемыхТаблиц",0);
		ПараметрыДляПолученияStepDefenition.Вставить("СтруктураПараметров",СтруктураПараметров);
		
		РассчитатьStepDefinition(ПараметрыДляПолученияStepDefenition);
		
		НовыйStepDefinition = ПараметрыДляПолученияStepDefenition.НовыйStepDefinition;
		
		НовыйStepDefinition  = НРег(Лев(НовыйStepDefinition,Найти(НовыйStepDefinition,"(")-1));
		
		СтрокаТаблицаУжеСуществующихСценариев = ТаблицаУжеСуществующихСценариев.Найти(НовыйStepDefinition,"Снипет");
		Если СтрокаТаблицаУжеСуществующихСценариев <> Неопределено Тогда
			Если СтруктураПараметров.Свойство("ЗапускИзКоманднойСтроки") И НЕ СтруктураПараметров.ЗапускИзКоманднойСтроки Тогда
				Если УниверсальноеИмяФайла(СтрТаблицаУжеСуществующихСценариев.ПолноеИмя)
					<> УниверсальноеИмяФайла(СтрокаТаблицаУжеСуществующихСценариев.ПолноеИмя) Тогда
					
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("Обнаружено несколько файлов, экспортирующих подсценарий <%1>. Файлы: %2");
					ИменаФайлов = Символы.ПС;
					ИменаФайлов = ИменаФайлов + СтрТаблицаУжеСуществующихСценариев.ПолноеИмя + Символы.ПС;
					ИменаФайлов = ИменаФайлов + СтрокаТаблицаУжеСуществующихСценариев.ПолноеИмя;
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрТаблицаУжеСуществующихСценариев.ИмяСценария);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИменаФайлов);
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		СтрТаблицаУжеСуществующихСценариев.Снипет = НовыйStepDefinition;
	КонецЦикла;
КонецПроцедуры

Функция ПреобразоватьСписокЗначенийНСтр(Спс)
	Копия = Спс.Скопировать();
	Для каждого Элем Из Копия Цикл
		Элем.Значение = НРег(Элем.Значение);
	КонецЦикла;
	
	Возврат Копия;
КонецФункции	

Процедура ОпределитьТегиФичи(ТаблицаТекстФичи,МассивТеговФичи,МассивКомментариевФичи,МассивТеговСценариев,МассивТеговВсе,МассивТеговВсеДляПоиска)
	
	НайденСценарий = Ложь;
	ИмяСценария    = "";
	МассивТеговСценария        = Новый Массив;
	МассивКомментариевСценария = Новый Массив;
	Ном = 0;
	Для каждого СтрокаТаблицы Из ТаблицаТекстФичи Цикл
		Ном = Ном + 1;
		Стр = СокрЛП(СтрокаТаблицы.Стр);
		
		Поз = -1;
		КлючевоеСлово = ПолучитьКлючевоеСлово(Стр,Поз);
		
		Если КлючевоеСлово = "feature" Тогда
			НайденСценарий = Истина;//все теги фичи должны были быть объявлены выше ключевого слова Функционал и подобного
		КонецЕсли;	 
		
		СоздатьНовыеДанныеСценария = Ложь;
		СтрНрег = НРег(Стр);                     
		Если КлючевоеСлово = "scenario" Тогда
			НайденСценарий = Истина;
			СоздатьНовыеДанныеСценария = Истина;
			ИмяСценария = СокрЛП(Сред(СтрНрег,Поз));
		ИначеЕсли КлючевоеСлово = "scenario_outline" Тогда
			НайденСценарий = Истина;
			СоздатьНовыеДанныеСценария = Истина;
			ИмяСценария = СокрЛП(Сред(СтрНрег,Поз));
		КонецЕсли;	 
		
		Если СоздатьНовыеДанныеСценария Тогда
			
			Если Лев(ИмяСценария,1) = ":" Тогда
				ИмяСценария = Сред(ИмяСценария,2);
			КонецЕсли;	 
			
			ДанныеСценария = Новый Структура;
			ДанныеСценария.Вставить("ИмяСценария",ИмяСценария);
			ДанныеСценария.Вставить("МассивТегов",МассивТеговСценария);//здесь мы добавляем к сценарию теги, объявленные выше
			ДанныеСценария.Вставить("МассивКомментариев",МассивКомментариевСценария);//здесь мы добавляем к сценарию теги, объявленные выше
			ДанныеСценария.Вставить("НомерСтрокиСценария",Ном);
			МассивТеговСценариев.Добавить(ДанныеСценария);
			
			МассивТеговСценария        = Новый Массив;
			МассивКомментариевСценария = Новый Массив;
		КонецЕсли;	 
		
		
		Если Лев(Стр,1) = "@" Тогда //Это символ, обозначающий тег.
			Тег = НРег(Сред(Стр,2));
			ТегИсходный = Сред(Стр,2);
			Если НайденСценарий Тогда
				МассивТеговСценария.Добавить(Новый Структура("Тег,НомерСтроки,ТегИсходный",Тег,Ном,ТегИсходный));
			Иначе
				МассивТеговФичи.Добавить(Новый Структура("Тег,НомерСтроки,ТегИсходный",Тег,Ном,ТегИсходный));
			КонецЕсли;	 
			
			МассивТеговВсе.Добавить(Новый Структура("Тег,НомерСтроки,ТегИсходный",Тег,Ном,ТегИсходный));
			МассивТеговВсеДляПоиска.Добавить(Тег);
		ИначеЕсли Лев(Стр,1) = "#" Тогда //Это символ, обозначающий комментарий.
			Комментарий = Сред(Стр,2);
			Если НайденСценарий Тогда
				МассивКомментариевСценария.Добавить(Новый Структура("Комментарий,НомерСтроки",Комментарий,Ном));
			Иначе
				МассивКомментариевФичи.Добавить(Новый Структура("Комментарий,НомерСтроки",Комментарий,Ном));
			КонецЕсли;	 
		ИначеЕсли Лев(Стр,2) = "//" Тогда //Эти символы означают комментарий.
			Комментарий = Сред(Стр,3);
			Если НайденСценарий Тогда
				МассивКомментариевСценария.Добавить(Новый Структура("Комментарий,НомерСтроки",Комментарий,Ном));
			Иначе
				МассивКомментариевФичи.Добавить(Новый Структура("Комментарий,НомерСтроки",Комментарий,Ном));
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;		
КонецПроцедуры

Функция ПолучитьОписаниеШагаПоСтроке(Знач Стр,СтруктураПараметров) Экспорт
	ВтораяЧастьСтрокиПозиция = 1;
	ТекущееКлючевоеСлово = ПолучитьКлючевоеСлово(НРег(Стр), ВтораяЧастьСтрокиПозиция);
	ИмяШагаБезКлючевогоСлова = СокрЛП(Сред(Стр, ВтораяЧастьСтрокиПозиция));
	
	
	ЗначенияПараметров = Новый СписокЗначений;
	СтараяСтрокаПараметров = "";
	ДанныеОбработкиПараметров = Новый Структура;
	СтарыйStepDefinition   = ПолучитьStepDefinitionПоСтроке(ИмяШагаБезКлючевогоСлова, ЗначенияПараметров,
	                                           СтараяСтрокаПараметров,Ложь,0,ДанныеОбработкиПараметров,СтруктураПараметров);
											   
	НовыйStepDefinition    = ПолучитьНовыйStepDefinition(СтарыйStepDefinition);
	НоваяСтрокаПараметров  = ПолучитьНовуюСтрокуПараметров(СтараяСтрокаПараметров);
	
	
	ОписаниеШага = Новый Структура;
	ОписаниеШага.Вставить("StepDefinition",НовыйStepDefinition);
	ОписаниеШага.Вставить("ЗначенияПараметров",ЗначенияПараметров);
	ОписаниеШага.Вставить("СтрокаПараметров",НоваяСтрокаПараметров);
	ОписаниеШага.Вставить("ДанныеОбработкиПараметров",ДанныеОбработкиПараметров);
	ОписаниеШага.Вставить("КлючевоеСлово",ТекущееКлючевоеСлово);
	ОписаниеШага.Вставить("ТекстПереводаШаг",Стр);
	
	
	
	Возврат ОписаниеШага;
	
КонецФункции	

Функция СледующаяСтрокаСодержитВертикальнуюЧерту(ТаблицаТекстФичи,Знач СчетчикСтрокФичи)
	Пока Истина Цикл
		СчетчикСтрокФичи = СчетчикСтрокФичи + 1;
		Если СчетчикСтрокФичи > (ТаблицаТекстФичи.Количество()) Тогда
			Возврат Ложь;
		КонецЕсли;	 
		
		Стр = СокрЛП(ТаблицаТекстФичи[СчетчикСтрокФичи-1].Стр);
		Если Стр = "" Тогда
			Продолжить;
		ИначеЕсли Лев(Стр,1) = "#" Тогда
			Продолжить;
		ИначеЕсли Лев(Стр,2) = "//" Тогда
			Продолжить;
		ИначеЕсли Лев(Стр,1) = "|" Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;	 
		
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции	

Функция ОпределитьКакойСтрокеПодчиненаОбласть(ТаблицаТекстФичи,НомСтр,ЗначениеОтступа)
	Ид = НомСтр;
	
	Результат = -1;
	
	Пока Истина Цикл
		Ид = Ид - 1;
		
		Если Ид < 0 Тогда
			Прервать;
		КонецЕсли;
		
		СтрТаблицаТекстФичи = ТаблицаТекстФичи[Ид];
		
		Если СтрТаблицаТекстФичи.ЗначениеОтступа < ЗначениеОтступа Тогда
			Возврат (Ид+1);
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции	

Функция ПроверитьЧтоМожноСоздатьОбласть(ТаблицаТекстФичи,СчетчикСтрокФичи, ЗначениеОтступа)
	СледующееКлючевоеСлово = Неопределено;
	
	Ид = СчетчикСтрокФичи-1;
	Пока Истина Цикл
		Ид = Ид + 1;
		Если Ид > (ТаблицаТекстФичи.Количество()-1) Тогда
			Прервать;
		КонецЕсли;	 
		
		СтрТаблицаТекстФичи = ТаблицаТекстФичи[Ид];
		Если Не ЗначениеЗаполнено(СтрТаблицаТекстФичи.КлючевоеСлово) Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если СтрТаблицаТекстФичи.ЗначениеОтступа <= ЗначениеОтступа Тогда
			Возврат Ложь;
		КонецЕсли;	 
		
		СледующееКлючевоеСлово = СтрТаблицаТекстФичи.КлючевоеСлово;
		Прервать;
		
	КонецЦикла;	
	
	Если СледующееКлючевоеСлово = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли СледующееКлючевоеСлово = "scenario" Тогда
		Возврат Ложь;
	ИначеЕсли СледующееКлючевоеСлово = "scenario_outline" Тогда
		Возврат Ложь;
	ИначеЕсли СледующееКлючевоеСлово = "examples" Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	 
КонецФункции	

Функция СоздатьТаблицуОбластей()
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("НомерСтрокиВФиче",Новый ОписаниеТипов("Число"));
	Тзн.Колонки.Добавить("СтрокаДерева");
	Тзн.Индексы.Добавить("НомерСтрокиВФиче");
	
	Возврат Тзн;
КонецФункции	

Функция ОпределитьТипЗначенияИзСекцииПеременные(Значение)
	Если Лев(Значение, 1) = """" И Прав(Значение, 1) = """" Тогда
		Возврат "Строка";
	ИначеЕсли Лев(Значение, 1) = "'" И Прав(Значение, 1) = "'" Тогда
		Возврат "Строка";
	ИначеЕсли ЭтоКорректноеЧисло(Значение) Тогда 	
		Возврат "Число";
	ИначеЕсли ЭтоДата(Значение)	 Тогда
		Возврат "Дата";
	Иначе
		Возврат "Строка"; 
	КонецЕсли;	 
КонецФункции	 

Процедура ОчиститьЗначенияВСпискеОтОбрамляющихСпецсимволов(Данные)
	
	Для Каждого Элем Из Данные Цикл
		Если Лев(Элем.Значение, 1) = """" И Прав(Элем.Значение, 1) = """" Тогда
			Элем.Значение = Сред(Элем.Значение, 2, СтрДлина(Элем.Значение) - 2);
		ИначеЕсли Лев(Элем.Значение, 1) = "'" И Прав(Элем.Значение, 1) = "'" Тогда
			Элем.Значение = Сред(Элем.Значение, 2, СтрДлина(Элем.Значение) - 2);
		КонецЕсли;	 
	КонецЦикла;	 
	
КонецПроцедуры

Функция УбратьОбрамляющиеСимволыИзСтроки(Знач Стр)
	
	Если Лев(Стр, 1) = """" И Прав(Стр, 1) = """" Тогда
		Стр = Сред(Стр, 2, СтрДлина(Стр) - 2);
	ИначеЕсли Лев(Стр, 1) = "'" И Прав(Стр, 1) = "'" Тогда
		Стр = Сред(Стр, 2, СтрДлина(Стр) - 2);
	КонецЕсли;
	
	Возврат Стр; 
	
КонецФункции	 

Функция ПроверитьФичуНаКорректностьСинтаксисаИЗагрузитьСценарии(Знач ИмяФайла,ОписаниеОшибки,ДеревоСтроки,ТаблицаИзвестныхStepDefinition,СтруктураПараметров,МассивСценариевЗащитаОтЗацикливанияКеш,ЭтоЗагрузкаПодчиненногоСценария,ПередаваемыеТаблицы,ИмяЗагружаемогоСценария)
	Перем ТэгУказанияЯзыка;
	
	
	СписокТеговИсключение           = ПреобразоватьСписокЗначенийНСтр(СтруктураПараметров.СписокТеговИсключение);
	СписокТеговОтбор                = ПреобразоватьСписокЗначенийНСтр(СтруктураПараметров.СписокТеговОтбор);
	ТаблицаУжеСуществующихСценариев = СтруктураПараметров.ТаблицаУжеСуществующихСценариев;
	
	
	СтруктураПараметров.Вставить("ТаблицаОбластей",СоздатьТаблицуОбластей());
	
	
	ТекущийТипСценария      = Неопределено;
	ПредыдущееКлючевоеСлово = Неопределено;
	ОжидаемоеКлючевоеСлово  = "feature";
	ТекущееКлючевоеСлово    = Неопределено;
	ВтораяЧастьСтроки       = Неопределено;
	ОписаниеФичи            = "";
	ОписаниеСценария        = "";
	СтрокаШага              = "";
	ИдетЧтениеПримеров      = Ложь;
	ИдетПередачаПараметровТаблицей = Ложь;
	
	ТаблицаШагов                           = СоздатьТаблицуШагов();
	ТаблицаСтрокПримеров                   = СоздатьТаблицуСтрокПримеров();
	МассивТаблицПередаваемыхКакПараметр    = Неопределено;
	ТаблицаСтрокПередачаПараметровТаблицей = Неопределено;
	
	
	ТэгУказанияЯзыка 	 = "language:";
	ТекущийЯзыкФичаФайла = "ru";
	
	ИмяФайла = СтрЗаменить(ИмяФайла, "\", "/");
	УниверсальноеИмяФайла = УниверсальноеИмяФайла(ИмяФайла);
	ФайлФичи = Новый Файл(ИмяФайла);
	ИмяФичи  = ФайлФичи.ИмяБезРасширения;
	
	
	НадоСохранятьДвоичныеДанные = СтруктураПараметров.Свойство("МассивРезультатОбходаКаталогов");
	ФайлВременнаяФича = ИмяФайла;
	Если НадоСохранятьДвоичныеДанные Тогда
		НашлиЭлементМассивРезультатОбходаКаталогов = Ложь;
		ИД = Неопределено;
		Если СтруктураПараметров.Свойство("УниверсальныеИменаФайлов") Тогда
			ИД = СтруктураПараметров.УниверсальныеИменаФайлов[УниверсальноеИмяФайла];
		КонецЕсли;	 
		Если ИД <> Неопределено Тогда
			Элем = СтруктураПараметров.МассивРезультатОбходаКаталогов[ИД];
			НашлиЭлементМассивРезультатОбходаКаталогов = Истина;
		Иначе	
			МассивРезультатОбходаКаталогов = СтруктураПараметров.МассивРезультатОбходаКаталогов;
			Для каждого Элем Из МассивРезультатОбходаКаталогов Цикл
				Если Не Элем.Свойство("Фича") Тогда
					Продолжить;
				КонецЕсли;
				
				Если Элем.УниверсальноеИмя = УниверсальноеИмяФайла Тогда
					НашлиЭлементМассивРезультатОбходаКаталогов = Истина;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;
		КонецЕсли;	 
		Если НашлиЭлементМассивРезультатОбходаКаталогов Тогда
			Если НЕ СтруктураПараметров.ВозможнаОптимизацияРаботыСФайлами  Тогда
				ФайлВременнаяФича = ПолучитьИмяВременногоФайла("feature");
				Элем.ДвоичныеДанные.Записать(ФайлВременнаяФича);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	НадоСтроитьДерево = Истина;
	Если СтруктураПараметров.Свойство("ТегTreeВключенПоУмолчанию") Тогда
		НадоСтроитьДерево = СтруктураПараметров.ТегTreeВключенПоУмолчанию;
	КонецЕсли;	 
	
	ФичаФайлПереданТекстом = Ложь;
	Если СтруктураПараметров.Свойство("ФичаФайлПереданТекстом") Тогда
		ФичаФайлПереданТекстом = СтруктураПараметров.ФичаФайлПереданТекстом;
	КонецЕсли;	 
	
	ТаблицаЗагруженаИзКеш = Ложь;
	ИдКешЗагрузкиФич = Неопределено;
	Если СтруктураПараметров.ВозможнаОптимизацияРаботыСФайлами Тогда
		Если СтруктураПараметров.Свойство("КешЗагрузкиФич") Тогда
			КешЗагрузкиФич = СтруктураПараметров.КешЗагрузкиФич;
			
			
			Если НЕ ФичаФайлПереданТекстом Тогда
				Файл = Новый Файл(ФайлВременнаяФича);
				ДатаИзменения = Строка(Файл.ПолучитьВремяИзменения());
				ИдКешЗагрузкиФич = ФайлВременнаяФича + "_" + ДатаИзменения + "_" + НадоСтроитьДерево;
				ДанныеИзКеш = КешЗагрузкиФич[ИдКешЗагрузкиФич];
				Если ДанныеИзКеш <> Неопределено Тогда
					ТаблицаЗагруженаИзКеш = Истина;
					ТаблицаТекстФичи = ДанныеИзКеш.ТаблицаТекстФичи;
					ТекущийЯзыкФичаФайла = ДанныеИзКеш.ТекущийЯзыкФичаФайла;
					
					МассивТеговФичи = ДанныеИзКеш.МассивТеговФичи;
					МассивКомментариевФичи = ДанныеИзКеш.МассивКомментариевФичи;
					МассивТеговСценариев = ДанныеИзКеш.МассивТеговСценариев;
					МассивКомментариевСценария = ДанныеИзКеш.МассивКомментариевСценария;
					МассивТеговВсе = ДанныеИзКеш.МассивТеговВсе;
					МассивТеговВсеДляПоиска = ДанныеИзКеш.МассивТеговВсеДляПоиска;
					НадоСтроитьДерево = ДанныеИзКеш.НадоСтроитьДерево;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если НЕ ТаблицаЗагруженаИзКеш Тогда
		
		ТаблицаТекстФичи = ЗагрузитьФичуВТаблицуЗначений(ФайлВременнаяФича,НадоСтроитьДерево,ИмяФайла,ТэгУказанияЯзыка,СтруктураПараметров);
		
		МассивТеговФичи            = Новый Массив;
		МассивКомментариевФичи     = Новый Массив;
		МассивТеговСценариев       = Новый Массив;
		МассивКомментариевСценария = Новый Массив;
		МассивТеговВсе             = Новый Массив;
		МассивТеговВсеДляПоиска    = Новый Массив;
		ОпределитьТегиФичи(ТаблицаТекстФичи,МассивТеговФичи,МассивКомментариевФичи,МассивТеговСценариев,МассивТеговВсе,МассивТеговВсеДляПоиска);
		
		Если СтруктураПараметров.Свойство("КешЗагрузкиФич") Тогда
			Если ТипЗнч(СтруктураПараметров.КешЗагрузкиФич) = Тип("Соответствие") И ИдКешЗагрузкиФич <> Неопределено Тогда
				ДанныеФичи = Новый Структура;
				ДанныеФичи.Вставить("ТаблицаТекстФичи",ТаблицаТекстФичи);
				ДанныеФичи.Вставить("ТекущийЯзыкФичаФайла",ТекущийЯзыкФичаФайла);
				ДанныеФичи.Вставить("МассивТеговФичи",МассивТеговФичи);
				ДанныеФичи.Вставить("МассивКомментариевФичи",МассивКомментариевФичи);
				ДанныеФичи.Вставить("МассивТеговСценариев",МассивТеговСценариев);
				ДанныеФичи.Вставить("МассивКомментариевСценария",МассивКомментариевСценария);
				ДанныеФичи.Вставить("МассивТеговВсе",МассивТеговВсе);
				ДанныеФичи.Вставить("МассивТеговВсеДляПоиска",МассивТеговВсеДляПоиска);
				ДанныеФичи.Вставить("НадоСтроитьДерево",НадоСтроитьДерево);
				
				СтруктураПараметров.КешЗагрузкиФич.Вставить(ИдКешЗагрузкиФич, ДанныеФичи);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.Свойство("КешСловИмпортПеременных") Тогда
		СтруктураПараметров.Вставить("КешСловИмпортПеременных", КешСловИмпортПеременных());
	КонецЕсли;	 
	
	КолСтрокТаблицаТекстФичи = ТаблицаТекстФичи.Количество();
	
	СтруктураПараметров.Вставить("МассивТеговФичи",МассивТеговФичи);
	СтруктураПараметров.Вставить("МассивКомментариевФичи",МассивКомментариевФичи);
	СтруктураПараметров.Вставить("МассивКомментариевСценария",МассивКомментариевСценария);
	СтруктураПараметров.Вставить("МассивТеговСценариев",МассивТеговСценариев);
	СтруктураПараметров.Вставить("МассивТеговВсе",МассивТеговВсе);
	СтруктураПараметров.Вставить("МассивТеговВсеДляПоиска",МассивТеговВсеДляПоиска);
	СтруктураПараметров.Вставить("СписокТеговИсключение",СписокТеговИсключение);
	СтруктураПараметров.Вставить("СписокТеговОтбор",СписокТеговОтбор);
	СтруктураПараметров.Вставить("КоличествоЗагруженныхСценариев",0);
	
	ПростыеПеременныеИзСекцииПеременныеЭтойФичи = Новый Соответствие;
	ТаблицаПеременныхИзСекцииПеременныеЭтойФичи = Новый Соответствие;
	ПростыеПеременныеКакВФайлеЭтойФичи = Новый Массив;
	ДанныеЭкспортныхПеременных = Новый Массив;
	СтруктураПараметров.ДанныеСекцииПеременные.ПростыеПеременные.Вставить(УниверсальноеИмяФайла, ПростыеПеременныеИзСекцииПеременныеЭтойФичи);
	СтруктураПараметров.ДанныеСекцииПеременные.ТаблицыПеременных.Вставить(УниверсальноеИмяФайла, ТаблицаПеременныхИзСекцииПеременныеЭтойФичи);
	СтруктураПараметров.ДанныеСекцииПеременные.ПростыеПеременныеКакВФайле.Вставить(УниверсальноеИмяФайла, ПростыеПеременныеКакВФайлеЭтойФичи);
	СтруктураПараметров.ДанныеСекцииПеременные.ДанныеЭкспортныхПеременных.Вставить(УниверсальноеИмяФайла, ДанныеЭкспортныхПеременных);
	СтруктураПараметров.ДанныеСекцииПеременные.ЕстьТаблицаПеременных.Вставить(УниверсальноеИмяФайла, Ложь);
	
	Если СтруктураПараметров.ИдетЗагрузкаИзКаталога Тогда
		//ищем теги фильтр - начало
		
		Если СписокТеговОтбор.Количество() > 0 Тогда
			НашлиТегИзФичиВСпискеТеговФильтр = Ложь;
			
			Для каждого СтрокаТаблицы Из ТаблицаТекстФичи Цикл
			    Стр = СтрокаТаблицы.Стр;
				
				Если Лев(Стр,1) = "@" Тогда //Это символ, обозначающий тег.
					Тег = СокрЛП(Сред(Стр,2));
					Если СтруктураПараметров.ИдетЗагрузкаИзКаталога Тогда //если явно указали одну фичу, то теги не должны мешать загрузке
						Если СписокТеговОтбор.НайтиПоЗначению(НРег(Тег)) <> Неопределено Тогда //значит эту фичу надо оставить
							НашлиТегИзФичиВСпискеТеговФильтр = Истина;
						КонецЕсли;
					КонецЕсли;	 
					
					Продолжить;
				КонецЕсли;	 
			КонецЦикла;	
			
			Если Не НашлиТегИзФичиВСпискеТеговФильтр Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не стал загружать фичу: %1, т.к. в ней не найдено тегов фильтров.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайла);
				Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
				СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева",Истина);
				Возврат Истина;
			КонецЕсли;	 
		КонецЕсли;	 
		
		//ищем теги фильтр - окончание
	КонецЕсли;	 
	
	//проверим всю фичу на то, что её надо исключить по тегу исключение
	Если СписокТеговОтбор.Количество() = 0 Тогда //если нет отборов, иначе надо смотреть на каждый сценарий отдельно
		Если СтруктураПараметров.ИдетЗагрузкаИзКаталога Тогда //если явно указали одну фичу, то теги не должны мешать загрузке
			Для Каждого СвойстваТега Из МассивТеговФичи Цикл
				Тег = СвойстваТега.Тег;
				Зн = СписокТеговИсключение.НайтиПоЗначению(НРег(Тег));
				Если Зн <> Неопределено Тогда //значит эту фичу надо проигнорировать
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не стал загружать фичу: %1, т.к. обнаружен тег исключение: %2");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайла);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Тег);
					Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
					СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева",Истина);
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	НачалсяСценарий           = Ложь;
	НомСтр                    = 0;
	НомерСтрокиНачалоСценария = 0;
	ИмяОбласти                = "";
	МассивТеговШага           = Новый Массив;
	МассивКомментариевШага    = Новый Массив;
	ВФичеЕстьСтруктураСценария = Ложь;
	ИдетСчитываниеМногострочногоПараметра = Ложь;
	МногострочнаяСтрока = "";
	ИдетЧтениеСекцииПеременные = Ложь;
	ДанныеСекцииПеременныеЭтойФичи = Новый Массив;
	ИмяМногоСтрочнойПеременной = "";
	ИмяТаблицыПеременных = "";
	СтрокиТаблицыПеременных = Новый Массив;
	
	Для СчетчикСтрокФичи = 1 По КолСтрокТаблицаТекстФичи Цикл
		СтрокаТаблицаТекстФичи = ТаблицаТекстФичи[СчетчикСтрокФичи-1];
		СтрИсходная = СтрокаТаблицаТекстФичи.Стр;
		
		НомСтр = СтрокаТаблицаТекстФичи.НомСтр;
		
		Стр = СокрЛП(СтрИсходная);
		
		Если ПустаяСтрока(Стр) Тогда
			ТаблицаСтрокПередачаПараметровТаблицей = Неопределено;
			ИмяТаблицыПеременных = "";
			Продолжить;
		КонецЕсли;	
		
		Если НЕ ИдетСчитываниеМногострочногоПараметра Тогда
			Если Лев(Стр,1) = "#" Тогда //Это комментарий. Его игнорируем.
				МассивКомментариевШага.Добавить(СокрЛП(Стр));
				Продолжить;
			ИначеЕсли Лев(Стр,2) = "//" Тогда //Это комментарий. Его игнорируем.
				МассивКомментариевШага.Добавить(СокрЛП(Стр));
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если Лев(Стр,1) = "@" Тогда //Это символ, обозначающий тег.
			Тег = СокрЛП(Сред(Стр,2));
			МассивТеговШага.Добавить(Тег);
			Продолжить;
		КонецЕсли;	 
		
		Если ИдетЧтениеСекцииПеременные Тогда
			ДанныеСтроки = Новый Структура;
			ДанныеСтроки.Вставить("Стр", СтрИсходная);
			ДанныеСтроки.Вставить("НомерСтроки", СчетчикСтрокФичи);
			ДанныеСекцииПеременныеЭтойФичи.Добавить(ДанныеСтроки);
		Иначе	
			Если Лев(Стр,1) = "|" Тогда
				Если (Не ИдетЧтениеПримеров) и (Не ИдетПередачаПараметровТаблицей) Тогда //значит ошибка в синтаксисе
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("Строка №%1, обнаружен символ <|>, хотя не было ключевого слова <Примеры>.");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",НомСтр);
					ОписаниеОшибки = ТекстСообщения;
					СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева",Истина);
					Возврат Ложь;
				КонецЕсли;	 
				
				СтрТаблицаСтрокиСРазделителями = Новый Структура;
				СтрТаблицаСтрокиСРазделителями.Вставить("Стр",Стр);
				СтрТаблицаСтрокиСРазделителями.Вставить("НомерСтрокиВФиче",НомСтр);
				Если ИдетЧтениеПримеров Тогда
					ТаблицаСтрокПримеров.Добавить(СтрТаблицаСтрокиСРазделителями);
				КонецЕсли;	 
				
				Если ИдетПередачаПараметровТаблицей Тогда
					Если ТаблицаСтрокПередачаПараметровТаблицей = Неопределено Тогда
						 ТаблицаСтрокПередачаПараметровТаблицей = СоздатьТаблицуСтрокПримеров();
						 МассивТаблицПередаваемыхКакПараметр.Добавить(ТаблицаСтрокПередачаПараметровТаблицей);
					КонецЕсли;	 
					ТаблицаСтрокПередачаПараметровТаблицей.Добавить(СтрТаблицаСтрокиСРазделителями);
				КонецЕсли;	 
				
				Если НадоСтроитьДерево и НачалсяСценарий Тогда
					СтрТаблицаТекстФичи = ТаблицаТекстФичи[СчетчикСтрокФичи-1];
					Если СтрТаблицаТекстФичи.ЗначениеОтступа > СтрТаблицаТекстФичи.СледующийОступ Тогда
						//значит группа закрывается
						СруктураОбласти = Новый Структура;
						СруктураОбласти.Вставить("ИмяОбласти","");
						СруктураОбласти.Вставить("НачалоОбласти",Ложь);
						СруктураОбласти.Вставить("ГруппаЗакрывается",Истина);
						СруктураОбласти.Вставить("РазмерОтступа",СтрТаблицаТекстФичи.ЗначениеОтступа - СтрТаблицаТекстФичи.СледующийОступ);
						
						ДопПараметрыШага = Новый Структура;
						ДопПараметрыШага.Вставить("МассивТеговШага",МассивТеговШага);
						ДопПараметрыШага.Вставить("МассивКомментариевШага",МассивКомментариевШага);
						ДобавитьШаг(ТаблицаШагов,СтрокаТаблицаТекстФичи,"","","",НомСтр,Неопределено,ДопПараметрыШага,СруктураОбласти);
						
						МассивТеговШага        = Новый Массив;
						МассивКомментариевШага = Новый Массив;
						ИдетСчитываниеМногострочногоПараметра = Ложь;
						
						Продолжить;
					КонецЕсли;	 
				КонецЕсли;	 
				
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если Лев(Стр, 3) = """""""" Тогда
			ИдетСчитываниеМногострочногоПараметра = НЕ ИдетСчитываниеМногострочногоПараметра;
			Если НЕ ИдетСчитываниеМногострочногоПараметра Тогда
				Если ИдетЧтениеСекцииПеременные Тогда
				Иначе	
					ТекШаг = ТаблицаШагов[ТаблицаШагов.Количество()-1];
					Если НЕ ТекШаг.Свойство("МногострочныеПараметрыШага") Тогда
						ТекШаг.Вставить("МногострочныеПараметрыШага", Новый Массив);
					КонецЕсли;	 
					ТекШаг.МногострочныеПараметрыШага.Добавить(МногострочнаяСтрока);
				КонецЕсли;	 
				МногострочнаяСтрока = "";
			КонецЕсли;	 
			
			Продолжить;
		КонецЕсли;	 
		
		Если ИдетСчитываниеМногострочногоПараметра Тогда
			Если ПустаяСтрока(МногострочнаяСтрока) Тогда
				МногострочнаяСтрока = СокрЛП(СтрИсходная);
			Иначе	
				МногострочнаяСтрока = МногострочнаяСтрока + Символы.ПС + СокрЛП(СтрИсходная);
			КонецЕсли;	 
			Продолжить;
		КонецЕсли;	 
		
		ИдетПередачаПараметровТаблицей         = Ложь;
		ТаблицаСтрокПередачаПараметровТаблицей = Неопределено;
		
		ПромСлово = "";
		
		ДанныеКешПоискаКлючевыхСлов = СтруктураПараметров.КешПоискаКлючевыхСлов[Стр];
		Если ДанныеКешПоискаКлючевыхСлов <> Неопределено Тогда
			ТекущееКлючевоеСлово = ДанныеКешПоискаКлючевыхСлов.ТекущееКлючевоеСлово;
			ВтораяЧастьСтроки    = ДанныеКешПоискаКлючевыхСлов.ВтораяЧастьСтроки;
			ИмяШага              = ДанныеКешПоискаКлючевыхСлов.ИмяШага;
		Иначе
			ВтораяЧастьСтрокиПозиция = 1;
			МассивСлов = РазложитьСтрокуВМассивПодстрок(Стр," ");
			ТекущееКлючевоеСлово = ПолучитьКлючевоеСлово(НРег(Стр), ВтораяЧастьСтрокиПозиция,МассивСлов[0]);
			ИмяШага = Стр;
			ВтораяЧастьСтроки = СокрЛП(Сред(Стр, ВтораяЧастьСтрокиПозиция));
			Символ = Лев(ВтораяЧастьСтроки, 1);
			Если (Символ=" ") или (Символ=":") или (Символ=",") Тогда
				ВтораяЧастьСтроки = СокрЛП(Сред(ВтораяЧастьСтроки, 2));
			КонецЕсли;
			
			ДанныеКешПоискаКлючевыхСлов = Новый Структура;
			ДанныеКешПоискаКлючевыхСлов.Вставить("ТекущееКлючевоеСлово",ТекущееКлючевоеСлово);
			ДанныеКешПоискаКлючевыхСлов.Вставить("ВтораяЧастьСтроки",ВтораяЧастьСтроки);
			ДанныеКешПоискаКлючевыхСлов.Вставить("ИмяШага",ИмяШага);
			
			Если ЗначениеЗаполнено(ТекущееКлючевоеСлово) Тогда
				СтруктураПараметров.КешПоискаКлючевыхСлов.Вставить(Стр,ДанныеКешПоискаКлючевыхСлов);
			КонецЕсли;	 
		КонецЕсли;	 
	
		Если ТекущееКлючевоеСлово = "feature" Тогда
			ИдетЧтениеСекцииПеременные = Ложь;
			ОписаниеФичи = ВтораяЧастьСтроки;
			Если ДеревоСтроки.Родитель <> Неопределено Тогда
				Если ДеревоСтроки.Родитель.Тип = "Фича" Тогда
					СтрокаФичи = ДеревоСтроки.Родитель;
					СтрокаФичи.Имя = ОписаниеФичи;
					Если СтрокаФичи.ПроизвольныеЗначения = Неопределено Тогда
						СтрокаФичи.ПроизвольныеЗначения = Новый Структура;
					КонецЕсли;	 
					
					СтрокаФичи.ПроизвольныеЗначения.Вставить("Язык", ТекущийЯзыкФичаФайла);
					
				КонецЕсли;	 
			КонецЕсли;	 
		ИначеЕсли (ТекущееКлючевоеСлово = "scenario") или (ТекущееКлючевоеСлово = "scenario_outline") Тогда
			
			Если ДанныеСекцииПеременныеЭтойФичи.Количество() > 0 Тогда
				ПреобразоватьМассивСтрокВДанныеПеременных(ДанныеСекцииПеременныеЭтойФичи, СтруктураПараметров,
					СчетчикСтрокФичи, ПростыеПеременныеИзСекцииПеременныеЭтойФичи,
					ТаблицаПеременныхИзСекцииПеременныеЭтойФичи, ПростыеПеременныеКакВФайлеЭтойФичи, ДанныеЭкспортныхПеременных, ИмяФайла, "");
				ДанныеСекцииПеременныеЭтойФичи = Новый Массив;
			КонецЕсли;	 
			
			ИдетЧтениеСекцииПеременные = Ложь;
			Если ТекущееКлючевоеСлово = "scenario_outline" Тогда
				ВФичеЕстьСтруктураСценария = Истина;
				Если НЕ СтруктураПараметров.Свойство("ВФичеЕстьСтруктураСценария") Тогда
					СтруктураПараметров.Вставить("ВФичеЕстьСтруктураСценария", Новый Соответствие);
				КонецЕсли;	 
				
				СтруктураПараметров.ВФичеЕстьСтруктураСценария.Вставить(УниверсальноеИмяФайла, Истина);
			КонецЕсли;	 
			
			МассивТеговШага           = Новый Массив;
			МассивКомментариевШага    = Новый Массив;
			
			НачалсяСценарий = Истина;
			Если (ДеревоСтроки <> Неопределено) Тогда
				ДобавитьСценарийВСтекВызова(СтруктураПараметров, ОписаниеСценария);
				ЗакрытьПредыдущийСценарий(ИмяФичи,ИмяФайла,ТекущийТипСценария,ПредыдущееКлючевоеСлово,ТекущееКлючевоеСлово,ДеревоСтроки,ОписаниеСценария,ТаблицаШагов,ТаблицаИзвестныхStepDefinition,ТаблицаСтрокПримеров,НомерСтрокиНачалоСценария,ТаблицаУжеСуществующихСценариев,СтруктураПараметров,МассивСценариевЗащитаОтЗацикливанияКеш,ЭтоЗагрузкаПодчиненногоСценария,ПередаваемыеТаблицы,ИмяЗагружаемогоСценария);
				УдалитьСценарийИзСтекаВызова(СтруктураПараметров, ОписаниеСценария);
			КонецЕсли;	 
			
			ТаблицаШагов.Очистить();
			ТаблицаСтрокПримеров.Очистить();
			
			НомерСтрокиНачалоСценария = НомСтр;
			ОписаниеСценария = СокрЛП(ВтораяЧастьСтроки);
		ИначеЕсли ТекущееКлючевоеСлово = "background" Тогда
			НомерСтрокиНачалоСценария = НомСтр;
			НачалсяСценарий = Истина;
			ИдетЧтениеСекцииПеременные = Ложь;
		ИначеЕсли ТекущееКлючевоеСлово = "variables" Тогда
			ИдетЧтениеСекцииПеременные = Истина;
		ИначеЕсли НадоСтроитьДерево и НачалсяСценарий Тогда
			СтрТаблицаТекстФичи = ТаблицаТекстФичи[СчетчикСтрокФичи-1];
			ОбнаруженПризнакОбласти = Ложь;
			Если Лев(Стр,1)= "*" Тогда
				ОбнаруженПризнакОбласти = Истина;
			КонецЕсли;	 
			
			Если ОбнаруженПризнакОбласти ИЛИ ТекущееКлючевоеСлово = "except" ИЛИ
				((СтрТаблицаТекстФичи.ЗначениеОтступа < СтрТаблицаТекстФичи.СледующийОступ)
				И (СтрТаблицаТекстФичи.НельзяСоздаватьОбласть <> Истина) 
				И (ПроверитьЧтоМожноСоздатьОбласть(ТаблицаТекстФичи,СчетчикСтрокФичи, СтрТаблицаТекстФичи.ЗначениеОтступа))) Тогда
				//значит группа открывается
				ИмяОбласти      = Стр;
				СруктураОбласти = Новый Структура;
				СруктураОбласти.Вставить("ИмяОбласти",ИмяОбласти);
				СруктураОбласти.Вставить("НачалоОбласти",Истина);
				СруктураОбласти.Вставить("Родитель",ОпределитьКакойСтрокеПодчиненаОбласть(ТаблицаТекстФичи,НомСтр-1,СтрТаблицаТекстФичи.ЗначениеОтступа));
				
				ИдетПередачаПараметровТаблицей = СледующаяСтрокаСодержитВертикальнуюЧерту(ТаблицаТекстФичи,СчетчикСтрокФичи);
				МассивТаблицПередаваемыхКакПараметр = Новый Массив;
				
				ДопПараметрыШага = Новый Структура;
				ДопПараметрыШага.Вставить("МассивТеговШага",МассивТеговШага);
				ДопПараметрыШага.Вставить("МассивКомментариевШага",МассивКомментариевШага);
				ДобавитьШаг(ТаблицаШагов,СтрокаТаблицаТекстФичи,ТекущееКлючевоеСлово,ВтораяЧастьСтроки,"",НомСтр,МассивТаблицПередаваемыхКакПараметр,ДопПараметрыШага,СруктураОбласти);
				
				МассивТеговШага        = Новый Массив;
				МассивКомментариевШага = Новый Массив;
				ИдетСчитываниеМногострочногоПараметра = Ложь;
				
				Продолжить;
			КонецЕсли;	 
		Иначе
			СтрокаШага = ВтораяЧастьСтроки;
		КонецЕсли;	 
		
		Если ТекущееКлючевоеСлово = "" Тогда
			Если ПредыдущееКлючевоеСлово = "feature" Тогда
				//значит тут идёт описание фичи
				ОписаниеФичи = ОписаниеФичи + Символы.ПС + Стр;
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если Не ТекущееКлючевоеСловоСоответствуетОжидаемому(ТекущееКлючевоеСлово, ОжидаемоеКлючевоеСлово) Тогда
			Если ПредыдущееКлючевоеСлово = "feature" Тогда
				//значит тут идёт описание фичи
				Продолжить;
			КонецЕсли;	 
			Если (ПредыдущееКлючевоеСлово = "scenario") или (ПредыдущееКлючевоеСлово = "scenario_outline") Тогда
				//значит тут идёт описание фичи
				Продолжить;
			КонецЕсли;
			
			НрегСтр = Нрег(Стр);
			Если    НрегСтр = "конецесли"
				ИЛИ НрегСтр = "конеццикла"
				ИЛИ НрегСтр = "endif"
				ИЛИ НрегСтр = "enddo" Тогда
				
				Продолжить;
			КонецЕсли;	 
			
			СтрОшибки = ТекущееКлючевоеСлово;
			Если ТекущееКлючевоеСлово = "" Тогда
				СтрОшибки = ПромСлово;
				Если ПромСлово = "" Тогда
					СтрОшибки = Стр;
				КонецЕсли;	 
			КонецЕсли;
			
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Строка №%1, ожидалось (%2), а найдено (%3) ПредыдущееКлючевоеСлово=%4");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",НомСтр);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОжидаемоеКлючевоеСлово);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",СтрОшибки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ПредыдущееКлючевоеСлово);
			
			Если НЕ СтруктураПараметров.Свойство("ДанныеОшибокДляРедактора") Тогда
				СтруктураПараметров.Вставить("ДанныеОшибокДляРедактора", Новый Массив);
			КонецЕсли;	 
			ДанныеОшибокДляРедактора = СтруктураПараметров.ДанныеОшибокДляРедактора;
			
			ДанныеОшибкиДляРедактора = ДанныеОшибкиДляРедактора(НомСтр, ИмяФайла, ТекстСообщения);
			ДанныеОшибокДляРедактора.Добавить(ДанныеОшибкиДляРедактора);
			
			ОписаниеОшибки = ТекстСообщения;
			//тут не надо ставить признак удаления фичи из дерева, чтобы можно было увидеть в дереве проблему
			//СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева",Истина);
			Возврат Ложь;
		КонецЕсли;	 
		
		
		Если (ТекущееКлючевоеСлово = "given") или (ТекущееКлючевоеСлово = "when") или (ТекущееКлючевоеСлово = "then") или (ТекущееКлючевоеСлово = "and") или (ТекущееКлючевоеСлово = "but") 
			 или (ТекущееКлючевоеСлово = "if")или (ТекущееКлючевоеСлово = "elseif") или (ТекущееКлючевоеСлово = "else") Тогда
			МассивТаблицПередаваемыхКакПараметр = Новый Массив;
			
			ДопПараметрыШага = Новый Структура;
			ДопПараметрыШага.Вставить("МассивТеговШага",МассивТеговШага);
			ДопПараметрыШага.Вставить("МассивКомментариевШага",МассивКомментариевШага);
			ДобавитьШаг(ТаблицаШагов,СтрокаТаблицаТекстФичи,ТекущееКлючевоеСлово,ВтораяЧастьСтроки,ИмяШага,НомСтр,МассивТаблицПередаваемыхКакПараметр,ДопПараметрыШага);
			
			МассивТеговШага        = Новый Массив;
			МассивКомментариевШага = Новый Массив;
			ИдетСчитываниеМногострочногоПараметра = Ложь;
			
			ИдетПередачаПараметровТаблицей = СледующаяСтрокаСодержитВертикальнуюЧерту(ТаблицаТекстФичи,СчетчикСтрокФичи);
		КонецЕсли;	 
		
		ПредыдущееКлючевоеСлово = ТекущееКлючевоеСлово;
		ОжидаемоеКлючевоеСлово  = ПолучитьСледующееОжидаемоеКлючевоеСлово(ТекущееКлючевоеСлово,ТекущийТипСценария,ИдетЧтениеПримеров);
		
		Если НадоСтроитьДерево и НачалсяСценарий и (ТекущееКлючевоеСлово <> "scenario") и (ТекущееКлючевоеСлово <> "scenario_outline") Тогда

			СтрТаблицаТекстФичи = ТаблицаТекстФичи[СчетчикСтрокФичи-1];
			Если СтрТаблицаТекстФичи.ЗначениеОтступа > СтрТаблицаТекстФичи.СледующийОступ Тогда
				//значит группа закрывается
				СруктураОбласти = Новый Структура;
				СруктураОбласти.Вставить("ИмяОбласти","");
				СруктураОбласти.Вставить("НачалоОбласти",Ложь);
				СруктураОбласти.Вставить("РазмерОтступа",СтрТаблицаТекстФичи.ЗначениеОтступа - СтрТаблицаТекстФичи.СледующийОступ);
				СруктураОбласти.Вставить("ГруппаЗакрывается",Истина);
				
				ДопПараметрыШага = Новый Структура;
				ДопПараметрыШага.Вставить("МассивТеговШага",МассивТеговШага);
				ДопПараметрыШага.Вставить("МассивКомментариевШага",МассивКомментариевШага);

				ДобавитьШаг(ТаблицаШагов,СтрокаТаблицаТекстФичи,"","","","",Неопределено,ДопПараметрыШага,СруктураОбласти);
				
				МассивТеговШага        = Новый Массив;
				МассивКомментариевШага = Новый Массив;
				ИдетСчитываниеМногострочногоПараметра = Ложь;
				
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;	
	
	Если ТаблицаШагов.Количество() > 0 Тогда
		Попытка
			ДобавитьСценарийВСтекВызова(СтруктураПараметров, ОписаниеСценария);
			ЗакрытьПредыдущийСценарий(ИмяФичи,ИмяФайла,ТекущийТипСценария,ПредыдущееКлючевоеСлово,"scenario",ДеревоСтроки,ОписаниеСценария,ТаблицаШагов,ТаблицаИзвестныхStepDefinition,ТаблицаСтрокПримеров,НомерСтрокиНачалоСценария,ТаблицаУжеСуществующихСценариев,СтруктураПараметров,МассивСценариевЗащитаОтЗацикливанияКеш,ЭтоЗагрузкаПодчиненногоСценария,ПередаваемыеТаблицы,ИмяЗагружаемогоСценария);
			УдалитьСценарийИзСтекаВызова(СтруктураПараметров, ОписаниеСценария);
		Исключение
			СтруктураПараметров.Вставить("БылиОшибкиЗагрузкиФич", Истина);
			СтруктураПараметров.ОшибкиЗагрузкиФич.Добавить(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;	 
	
	ПроверкаСекцииПеременные(СтруктураПараметров, УниверсальноеИмяФайла);
	
	Если СтруктураПараметров.КоличествоЗагруженныхСценариев = 0 Тогда
		СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева",Истина);
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьСценарийВСтекВызова(СтруктураПараметров, ОписаниеСценария)
	Если НЕ ЗначениеЗаполнено(ОписаниеСценария) Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураПараметров.СтекВызова.Добавить(НРег(ОписаниеСценария));
	
КонецПроцедуры 

Процедура УдалитьСценарийИзСтекаВызова(СтруктураПараметров, ОписаниеСценария)
	Если НЕ ЗначениеЗаполнено(ОписаниеСценария) Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураПараметров.СтекВызова.Удалить(СтруктураПараметров.СтекВызова.Количество()-1);
КонецПроцедуры 

Процедура ПроверкаСекцииПеременные(СтруктураПараметров, УниверсальноеИмяФайла)
	
	Если СтруктураПараметров.ДанныеСекцииПеременные.ПростыеПеременные[УниверсальноеИмяФайла] <> Неопределено  
		И СтруктураПараметров.ДанныеСекцииПеременные.ПростыеПеременные[УниверсальноеИмяФайла].Количество() = 0 Тогда
		СтруктураПараметров.ДанныеСекцииПеременные.ПростыеПеременные.Удалить(УниверсальноеИмяФайла);
	КонецЕсли;	 
	Если СтруктураПараметров.ДанныеСекцииПеременные.ТаблицыПеременных[УниверсальноеИмяФайла] <> Неопределено 
		И СтруктураПараметров.ДанныеСекцииПеременные.ТаблицыПеременных[УниверсальноеИмяФайла].Количество() = 0 Тогда
		СтруктураПараметров.ДанныеСекцииПеременные.ТаблицыПеременных.Удалить(УниверсальноеИмяФайла);
	КонецЕсли;	 
	Если СтруктураПараметров.ДанныеСекцииПеременные.ПростыеПеременныеКакВФайле[УниверсальноеИмяФайла] <> Неопределено 
		И СтруктураПараметров.ДанныеСекцииПеременные.ПростыеПеременныеКакВФайле[УниверсальноеИмяФайла].Количество() = 0 Тогда
		СтруктураПараметров.ДанныеСекцииПеременные.ПростыеПеременныеКакВФайле.Удалить(УниверсальноеИмяФайла);
	КонецЕсли;	 
	Если СтруктураПараметров.ДанныеСекцииПеременные.ДанныеЭкспортныхПеременных[УниверсальноеИмяФайла] <> Неопределено 
		И СтруктураПараметров.ДанныеСекцииПеременные.ДанныеЭкспортныхПеременных[УниверсальноеИмяФайла].Количество() = 0 Тогда
		СтруктураПараметров.ДанныеСекцииПеременные.ДанныеЭкспортныхПеременных.Удалить(УниверсальноеИмяФайла);
	КонецЕсли;	 
	
КонецПроцедуры 

Функция ДанныеОшибкиДляРедактора(НомерСтроки, ИмяФайла, ОписаниеОшибки)
	Результат = Новый Структура;
	Результат.Вставить("НомерСтроки", НомерСтроки);
	Результат.Вставить("ИмяФайла", ИмяФайла);
	Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	Возврат Результат; 
КонецФункции	 
 
Функция БылиПовторыИменСнипетов(ТаблицаУжеСуществующихСценариев,ТаблицаИзвестныхStepDefinition)
	КопияТаблицаУжеСуществующихСценариев = ТаблицаУжеСуществующихСценариев.Скопировать();
	КопияТаблицаУжеСуществующихСценариев.Колонки.Добавить("СтрокаДляПоиска");
	
	Для Каждого СтрКопияТаблицаУжеСуществующихСценариев Из КопияТаблицаУжеСуществующихСценариев Цикл
		СтрКопияТаблицаУжеСуществующихСценариев.СтрокаДляПоиска = НРег(СтрКопияТаблицаУжеСуществующихСценариев.ИмяСценария);
	КонецЦикла;	
	
	Для каждого СтрТаблицаИзвестныхStepDefinition Из ТаблицаИзвестныхStepDefinition Цикл
		СтрКопияТаблицаУжеСуществующихСценариев                 = КопияТаблицаУжеСуществующихСценариев.Добавить();
		СтрКопияТаблицаУжеСуществующихСценариев.СтрокаДляПоиска = СтрТаблицаИзвестныхStepDefinition.СтрокаДляПоиска;
		СтрКопияТаблицаУжеСуществующихСценариев.ИмяФайла        = СтрТаблицаИзвестныхStepDefinition.ИмяФайла;
		
		//Сообщить("ИмяСценария2=" + СтрКопияТаблицаУжеСуществующихСценариев.ИмяСценария);
	КонецЦикла;
	
	БылоСтрок = КопияТаблицаУжеСуществующихСценариев.Количество();
	КопияТаблицаУжеСуществующихСценариев.Колонки.Добавить("Кол");
	Для каждого СтрКопияТаблицаУжеСуществующихСценариев Из КопияТаблицаУжеСуществующихСценариев Цикл
		СтрКопияТаблицаУжеСуществующихСценариев.Кол = 1;
	КонецЦикла;
	
	ТаблицаУжеСуществующихСценариевСлужебная = КопияТаблицаУжеСуществующихСценариев.Скопировать();
	КопияТаблицаУжеСуществующихСценариев.Свернуть("СтрокаДляПоиска","Кол");
	
	СталоСтрок = КопияТаблицаУжеСуществующихСценариев.Количество();
	
	Если БылоСтрок <> СталоСтрок Тогда
		Для каждого СтрКопияТаблицаУжеСуществующихСценариев Из КопияТаблицаУжеСуществующихСценариев Цикл
			Если СтрКопияТаблицаУжеСуществующихСценариев.Кол <> 1 Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Снипет <%1> встречается %2 раз.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрКопияТаблицаУжеСуществующихСценариев.СтрокаДляПоиска);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",СтрКопияТаблицаУжеСуществующихСценариев.Кол);
				Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
				
				Если СокрЛП(СтрКопияТаблицаУжеСуществующихСценариев.СтрокаДляПоиска) <> "" Тогда
					Отбор = Новый Структура;
					Отбор.Вставить("СтрокаДляПоиска",НРег(СтрКопияТаблицаУжеСуществующихСценариев.СтрокаДляПоиска));
					МассивСтрокСценариев = ТаблицаУжеСуществующихСценариевСлужебная.НайтиСтроки(Отбор);
					Для каждого СтрокаСценария Из МассивСтрокСценариев Цикл
						Сообщить(СтрокаСценария.ИмяФайла);
					КонецЦикла;
				КонецЕсли;	 
				
				
				
				//Отбор = Новый Структура;
				//Отбор.Вставить("СтрокаДляПоиска",СтрКопияТаблицаУжеСуществующихСценариев.СтрокаДляПоиска);
				//МассивСтрокStepDefinition = ТаблицаИзвестныхStepDefinition.НайтиСтроки(Отбор);
				//Для каждого СтрокаСценария Из МассивСтрокStepDefinition Цикл
				//	Сообщить("2. " + СтрокаСценария.ИмяФайла);
				//КонецЦикла;
				
				//Сообщить(" ");
				
				
			КонецЕсли;	 
		КонецЦикла;
		Возврат Истина;
	КонецЕсли;	 
	
	
	
	Возврат Ложь;
КонецФункции	

Функция ЗагрузитьФичу(ИмяФайла,ДеревоСтроки,СтруктураПараметров) Экспорт
	ТаблицаИзвестныхStepDefinition = СтруктураПараметров.ТаблицаИзвестныхStepDefinition;
	
	Если СтруктураПараметров.Свойство("ТекстСообщенийПользователю") Тогда
		ТекстСообщенийПользователю = СтруктураПараметров.ТекстСообщенийПользователю;
	КонецЕсли;	
	
	Если НЕ СтруктураПараметров.Свойство("КешФич") Тогда
		КешФич = Новый ТаблицаЗначений;
		КешФич.Колонки.Добавить("ИмяФайла");
		КешФич.Колонки.Добавить("Дерево");
		
		СтруктураПараметров.Вставить("КешФич",КешФич);
	КонецЕсли;	 
	
	ДобавитьКолонкуСнипетаВТаблицаУжеСуществующихСценариев(СтруктураПараметров.ТаблицаУжеСуществующихСценариев,СтруктураПараметров);
	
	Если НЕ СтруктураПараметров.Свойство("БылаПроверкаНаПовторыСнипетов") Тогда
		Если БылиПовторыИменСнипетов(СтруктураПараметров.ТаблицаУжеСуществующихСценариев,ТаблицаИзвестныхStepDefinition) Тогда
			Сообщить(ПолучитьТекстСообщенияПользователю("Были конфликты в именах снипетов."));
		КонецЕсли;
		СтруктураПараметров.Вставить("БылаПроверкаНаПовторыСнипетов",Истина);
	КонецЕсли;	
	
	ОписаниеОшибки = "";
	ПередаваемыеТаблицы = Неопределено;
	БылаЗаменаТаблицыПараметровВСтруктуреСценария = Ложь;
	Если Не ПроверитьФичуНаКорректностьСинтаксисаИЗагрузитьСценарии(ИмяФайла,ОписаниеОшибки,ДеревоСтроки,ТаблицаИзвестныхStepDefinition,СтруктураПараметров,Неопределено,Ложь,ПередаваемыеТаблицы,Неопределено) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не получилось загрузить %1. %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайла);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОписаниеОшибки);
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		СтруктураПараметров.Вставить("ФичаЗагружена",Ложь);
		СтруктураПараметров.Вставить("БылиОшибкиЗагрузкиФич",Истина);
		СтруктураПараметров.Вставить("ОписаниеОшибки",ОписаниеОшибки);
		Если НЕ СтруктураПараметров.Свойство("ОшибкиЗагрузкиФич") Тогда
			СтруктураПараметров.Вставить("ОшибкиЗагрузкиФич", Новый Массив);
		КонецЕсли;	 
		СтруктураПараметров.ОшибкиЗагрузкиФич.Добавить(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;	 
	
	СтруктураПараметров.Вставить("ФичаЗагружена",Истина);
	
КонецФункции

Функция ОбходКаталогов(ПутьКаталога,врДерево,ТаблицаИзвестныхStepDefinition,СтруктураПараметров)
	ФайлПутьКаталога = Новый Файл(ПутьКаталога);
	Если ФайлПутьКаталога.ЭтоКаталог() Тогда
		НайденныеФайлы = НайтиФайлы(ПутьКаталога,"*");
	Иначе
		НайденныеФайлы = Новый Массив;//вернём одну фичу
		НайденныеФайлы.Добавить(ФайлПутьКаталога);
	КонецЕсли;	 
	Для каждого ф из НайденныеФайлы цикл
		Если ф.ЭтоКаталог() тогда
			НовСтр = врДерево.Строки.Добавить();
			НовСтр.Тип        = "Каталог";
			НовСтр.ПолныйПуть = ф.ПолноеИмя;
			НовСтр.Имя        = ф.Имя;
			ОбходКаталогов(ПутьКаталога+"/"+ф.Имя,НовСтр,ТаблицаИзвестныхStepDefinition,СтруктураПараметров);
			
			Если НовСтр.Строки.Количество() = 0 Тогда
				врДерево.Строки.Удалить(НовСтр);
			КонецЕсли;
		ИначеЕсли НРег(ф.Расширение) = ".feature" Тогда
			НовСтр            = врДерево.Строки.Добавить();
			НовСтр.Тип        = "Фича";
			
			НовСтр.ПолныйПуть = ф.ПолноеИмя;
			НовСтр.Имя        = ф.ИмяБезРасширения;
			
			СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева",Ложь);
			
			ЗагрузитьФичу(ф.ПолноеИмя,НовСтр.Строки,СтруктураПараметров);
			
			Если СтруктураПараметров.УдалитьСтрокуФичиИзДерева Тогда
				врДерево.Строки.Удалить(НовСтр);
			КонецЕсли;	 
		КонецЕсли;
	КонецЦикла;
КонецФункции

Процедура ЗаполнитьДерево(ДеревоЗначений,Каталог,ТаблицаИзвестныхStepDefinition,СтруктураПараметров)
	Файл = Новый Файл(Каталог);
	
	НовСтр            = ДеревоЗначений.Строки.Добавить();
	НовСтр.Тип        = "Каталог";
	НовСтр.Имя        = Файл.Имя;
	НовСтр.ПолныйПуть = Каталог;
	ОбходКаталогов(Каталог,НовСтр,ТаблицаИзвестныхStepDefinition,СтруктураПараметров);    
КонецПроцедуры

Процедура ОбработатьКаталогФич(ДеревоЗначений,ПутьКФичам,ТаблицаИзвестныхStepDefinition,СтруктураПараметров)
	//Заполним дерево файлами фич с учетом иерархии
	ЗаполнитьДерево(ДеревоЗначений,ПутьКФичам,ТаблицаИзвестныхStepDefinition,СтруктураПараметров);
КонецПроцедуры

Функция СоздатьДеревоЗначений()
	ДеревоЗначений = Новый ДеревоЗначений;
	ДеревоЗначений.Колонки.Добавить("Имя");
	ДеревоЗначений.Колонки.Добавить("ПолныйПуть");
	//ДеревоЗначений.Колонки.Добавить("Каталог");
	//ДеревоЗначений.Колонки.Добавить("Фича");
	//ДеревоЗначений.Колонки.Добавить("Сценарий");
	//ДеревоЗначений.Колонки.Добавить("ЭтоScenarioOutline");
	//ДеревоЗначений.Колонки.Добавить("ЭтоКонтекст");
	//ДеревоЗначений.Колонки.Добавить("Примеры");
	ДеревоЗначений.Колонки.Добавить("ИменованныеПараметры");
	//ДеревоЗначений.Колонки.Добавить("Пример");
	//ДеревоЗначений.Колонки.Добавить("Шаг");
	ДеревоЗначений.Колонки.Добавить("ЗначенияПараметров");
	ДеревоЗначений.Колонки.Добавить("Снипет");
	ДеревоЗначений.Колонки.Добавить("АдресСнипета");
	ДеревоЗначений.Колонки.Добавить("ЭтоЧужойСнипет",Новый ОписаниеТипов("Булево"));
	ДеревоЗначений.Колонки.Добавить("СтрокаРеальнойПроцедуры");
	ДеревоЗначений.Колонки.Добавить("ТипКартинки");
	ДеревоЗначений.Колонки.Добавить("ШагСПараметрамиВТаблице");
	ДеревоЗначений.Колонки.Добавить("СтрокаПараметровШагаВВидеТаблицы",Новый ОписаниеТипов("Булево"));
	ДеревоЗначений.Колонки.Добавить("ПараметрыТаблицы");
	ДеревоЗначений.Колонки.Добавить("ИмяШагаБезКлючевогоСлова");
	//ДеревоЗначений.Колонки.Добавить("ШагСценарий");
	ДеревоЗначений.Колонки.Добавить("МассивСценариевЗащитаОтЗацикливания");
	//ДеревоЗначений.Колонки.Добавить("Область");
	//ДеревоЗначений.Колонки.Добавить("МассивТегов");
	ДеревоЗначений.Колонки.Добавить("НомерСтрокиВФиче");
	ДеревоЗначений.Колонки.Добавить("ЗначениеОтступа",Новый ОписаниеТипов("Число"));
	ДеревоЗначений.Колонки.Добавить("Тип",Новый ОписаниеТипов("Строка"));
	ДеревоЗначений.Колонки.Добавить("ДопТип",Новый ОписаниеТипов("Строка"));
	ДеревоЗначений.Колонки.Добавить("ПроизвольныеЗначения");
	
	Возврат ДеревоЗначений;
КонецФункции	

Функция ПолучитьДеревоФич(СтруктураПараметров) Экспорт
	КаталогИнструментов     = СтруктураПараметров.КаталогИнструментов;
	КаталогФич              = СтруктураПараметров.КаталогФич;
	МассивСообщений         = СтруктураПараметров.МассивСообщений;
	DebugLog                = СтруктураПараметров.DebugLog;
	КонтекстVanessaBehavoir = СтруктураПараметров.КонтекстVanessaBehavoir;
	КаталогиБиблиотек       = СтруктураПараметров.КаталогиБиблиотек;
	СписокТеговИсключение   = СтруктураПараметров.СписокТеговИсключение;
	СписокТеговОтбор        = СтруктураПараметров.СписокТеговОтбор;
	
	
	ПутьКФичам = Новый Файл(КаталогФич);
	Если Не ПутьКФичам.Существует() Тогда
		МассивСообщений.Добавить("Не найден путь " + КаталогФич);
		Возврат Неопределено;
	КонецЕсли;	 
	
	
	
	
	ТаблицаКонтекстовОбработок = Новый Массив;
	
	
	ТаблицаИзвестныхStepDefinition = СтруктураПараметров.ТаблицаИзвестныхStepDefinition;
	ТаблицаВерсийEPF               = СтруктураПараметров.ТаблицаВерсийEPF;
	
	
	Путь = ПутьКФичам.ПолноеИмя;
	СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога",Истина);
	Если ПутьКФичам.ЭтоФайл() Тогда
		СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога",Ложь);
		Путь = ПутьКФичам.Путь;
	КонецЕсли;	 
	
	
	
	ПолучитьУжеСуществующиеСнипетыИзОбработок(Путь,ТаблицаКонтекстовОбработок,ТаблицаИзвестныхStepDefinition,ТаблицаВерсийEPF,КонтекстVanessaBehavoir);
	Для каждого Элем Из КаталогиБиблиотек Цикл
		ПолучитьУжеСуществующиеСнипетыИзОбработок(Элем.Значение,ТаблицаКонтекстовОбработок,ТаблицаИзвестныхStepDefinition,ТаблицаВерсийEPF,КонтекстVanessaBehavoir);
	КонецЦикла;
	
	
	
	
	ДеревоЗначений = СоздатьДеревоЗначений();
	
	
	//Если ПутьКФичам.ЭтоКаталог() Тогда
	ОбработатьКаталогФич(ДеревоЗначений,ПутьКФичам.ПолноеИмя,ТаблицаИзвестныхStepDefinition,СтруктураПараметров);
	//ДеревоЗначений.ВыбратьСтроку();
	//КонецЕсли;	 
	
	
	
	
	
	
	
	Возврат ДеревоЗначений;
КонецФункции

Процедура ДобавитьКлючевоеСловоВТаблицу(Тзн,Слово,Тип,Уникально = Истина)
	
	СтрокаТаблицы           = Тзн.Добавить(); 
	СтрокаТаблицы.Слово     = НРег(Слово);
	СтрокаТаблицы.Тип       = Тип;
	СтрокаТаблицы.Уникально = Уникально;
	
	//СтруктураКлючевогоСлова = Новый Структура;
	//СтруктураКлючевогоСлова.Вставить("Слово",Слово);
	//СтруктураКлючевогоСлова.Вставить("Тип",Тип);
	//
	//Тзн.Добавить(СтруктураКлючевогоСлова);
КонецПроцедуры

Процедура ДобавитьНачальноеЗаполнениеВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ГенерироватьУФ,ЭтоУФ = Ложь,СоздаватьОбластиПриГенерацииКода) Экспорт
	
	Если ЭтоУФ Тогда
		ТелоМодуля = ЗначениеИзСтрокиВнутр(ТелоМодуля);
	КонецЕсли;	 
	
	//ДобавитьСтрокуВМодуль(ТелоМодуля,"Перем Контекст Экспорт;");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	Если СоздаватьОбластиПриГенерацииКода Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"#Область Служебные_функции_и_процедуры");
	Иначе	
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"///////////////////////////////////////////////////");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"//Служебные функции и процедуры");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"///////////////////////////////////////////////////");
	КонецЕсли;	 
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	
	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"&НаКлиенте");
	КонецЕсли;	 
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"// контекст фреймворка Vanessa-Automation");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Перем Ванесса;");
	
	
	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля," ");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"&НаКлиенте");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Перем Контекст Экспорт;");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля," ");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"&НаКлиенте");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Automation.");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Перем КонтекстСохраняемый Экспорт;");
	КонецЕсли;	 
		
	
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"&НаКлиенте");
	КонецЕсли;	 
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	Ванесса = КонтекстФреймворкаBDD;");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	ВсеТесты = Новый Массив;");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	Возврат ВсеТесты;");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"КонецФункции");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"// Делает отключение модуля");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Процедура ОтключениеМодуля() Экспорт");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	Ванесса = Неопределено;");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	Контекст = Неопределено;");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	КонтекстСохраняемый = Неопределено;");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"КонецПроцедуры");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	");
	
	
	
	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"&НаСервере");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"// Служебная функция.");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Функция ПолучитьМакетСервер(ИмяМакета)");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"КонецФункции");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"&НаКлиенте");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"// Служебная функция для подключения библиотеки создания fixtures.");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	Возврат ПолучитьМакетСервер(ИмяМакета);");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"КонецФункции");
	Иначе	
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"// Служебная функция для подключения библиотеки создания fixtures.");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	Возврат ПолучитьМакет(ИмяМакета);");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"КонецФункции");
	КонецЕсли;	 
	
	
	
	Если СоздаватьОбластиПриГенерацииКода Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"#КонецОбласти");
	КонецЕсли;	 
	
	
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	Если СоздаватьОбластиПриГенерацииКода Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"#Область Работа_со_сценариями");
	Иначе	
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"///////////////////////////////////////////////////");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"//Работа со сценариями");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"///////////////////////////////////////////////////");
	КонецЕсли;	 
	
	
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"&НаКлиенте");
	КонецЕсли;	 
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"// Функция выполняется перед началом каждого сценария");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Функция ПередНачаломСценария() Экспорт");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"КонецФункции");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	
	
	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"&НаКлиенте");
	КонецЕсли;	 
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"// Функция выполняется перед окончанием каждого сценария");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Функция ПередОкончаниемСценария() Экспорт");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"КонецФункции");
	
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	
	Если СоздаватьОбластиПриГенерацииКода Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"#КонецОбласти");
	КонецЕсли;	 
	
	
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	
	
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"///////////////////////////////////////////////////");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"//Реализация шагов");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"///////////////////////////////////////////////////");
	
	Если ЭтоУФ Тогда
		ТелоМодуля = ЗначениеВСтрокуВнутр(ТелоМодуля);
	КонецЕсли;	 
КонецПроцедуры

Функция ПолучитьМаксНомерИзТелаМодуля(ТелоМодуля)
	Если ТелоМодуля.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат ТелоМодуля[ТелоМодуля.Количество()-1].НомСтр;
КонецФункции

Процедура ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,Стр,НомерСрокиМодуля = Неопределено)
	НомСтр = ПолучитьМаксНомерИзТелаМодуля(ТелоМодуля);
	
	
	СтрТелоМодуля = ТелоМодуля.Добавить();
	Если НомерСрокиМодуля = Неопределено Тогда
		СтрТелоМодуля.НомСтр = НомСтр + ШагСтрокДляМодуля;
	Иначе
		СтрТелоМодуля.НомСтр = НомерСрокиМодуля;
	КонецЕсли;	 
	СтрТелоМодуля.Стр    = Стр;
	
	
	//Сообщить("ТелоМодуля.Количество()=" + ТелоМодуля.Количество());
КонецПроцедуры

Процедура ДобавитьСнипет(Знач ID,Знач СтрокаРеальнойПроцедуры,Знач ИмяФайла,БылиОшибки,ТаблицаИзвестныхStepDefinition,Снипет)
	
	СтрокаРеальнойПроцедуры = СокрЛП(СтрокаРеальнойПроцедуры);
	ID                      = СокрЛП(ID);
	
	//уберем слово "Экспорт"
	Если Прав(НРег(СтрокаРеальнойПроцедуры),7) = "экспорт" Тогда
		СтрокаРеальнойПроцедуры = Лев(СтрокаРеальнойПроцедуры,СтрДлина(СтрокаРеальнойПроцедуры)-7);
		СтрокаРеальнойПроцедуры = СокрЛП(СтрокаРеальнойПроцедуры);
	КонецЕсли;
	
	Если Лев(НРег(СтрокаРеальнойПроцедуры),9) = "процедура" Тогда
		СтрокаРеальнойПроцедуры = СокрЛП(Сред(СтрокаРеальнойПроцедуры,10));
	КонецЕсли;
	
	Поз = Найти(ID,"(");
	СтрПараметры = Сред(ID,Поз+1);
	СтрПараметры = Лев(СтрПараметры,СтрДлина(СтрПараметры)-1);
	
	МассивПром = РазложитьСтрокуВМассивПодстрок(СтрПараметры, ",");
	МассивПараметров = Новый Массив;
	Для Каждого Элем Из МассивПром Цикл
		СтруктураПарам = Новый Структура;
		Тип = "Строка";
		Если Найти(НРег(Элем),"число") > 0 Тогда
			Тип = "Число";
		КонецЕсли;
		Если Найти(НРег(Элем),"дата") > 0 Тогда
			Тип = "Дата";
		КонецЕсли;
		СтруктураПарам.Вставить("Тип",Тип);
		МассивПараметров.Добавить(СтруктураПарам);
	КонецЦикла;
	
	ПромСтр = ТаблицаИзвестныхStepDefinition.Найти(ID,"ID");
	Если ПромСтр <> Неопределено Тогда
		Если НРег(ПромСтр.ИмяФайла) = НРег(ИмяФайла) Тогда //значит этот снипет из того же файла
			Возврат;
		КонецЕсли;	
	КонецЕсли;	 
	
	Если ПромСтр <> Неопределено Тогда
		БылиОшибки = Истина;
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Warning. В файле %1, снипет %2 уже был в %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайла);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ID);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ПромСтр.ИмяФайла);
		СделатьСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТипШагаВДереве = Неопределено;
	Если Снипет.Свойство("ТипШагаВДереве") Тогда
		ТипШагаВДереве = Снипет.ТипШагаВДереве;
	КонецЕсли;	 
	
	СтрТаблицаИзвестныхStepDefinition                         = ТаблицаИзвестныхStepDefinition.Добавить();
	СтрТаблицаИзвестныхStepDefinition.ID                      = ID;
	СтрТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры = СтрокаРеальнойПроцедуры;
	СтрТаблицаИзвестныхStepDefinition.ИмяФайла                = ИмяФайла;
	СтрТаблицаИзвестныхStepDefinition.Параметры               = МассивПараметров;
	СтрТаблицаИзвестныхStepDefinition.СтрокаДляПоиска         = НРег(Лев(ID,Найти(ID,"(")-1));
	СтрТаблицаИзвестныхStepDefinition.ТипШагаВДереве          = ТипШагаВДереве;
КонецПроцедуры

Процедура ПолучитьУжеСуществующиеСнипетыИзОбработок(Знач КаталогФич,ТаблицаКонтекстовОбработок,ТаблицаИзвестныхStepDefinition,ТаблицаВерсийEPF,КонтекстVanessaBehavoir) Экспорт
	
	Файл = Новый Файл(КаталогФич);
	Если Не Файл.Существует() Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ошибка в ПолучитьУжеСуществующиеСнипетыИзОбработок(). Файл/каталог %1 не существует.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КаталогФич);
		СделатьСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли;	 
	
	Если Файл.ЭтоФайл() Тогда
		КаталогФич = Файл.Путь;
	КонецЕсли;	 
	
	Файл = Новый Файл(КаталогФич);
	
	БылиОшибки = Ложь;
	НачальныйКаталог = КаталогФич;
	КаталогПоиска    = НачальныйКаталог;
	
	Файл = Новый Файл(НачальныйКаталог);
	Если НРег(Файл.Расширение) = ".feature" Тогда
		КаталогПоиска = Файл.Путь;
	КонецЕсли;	 
	
	Отладка("Ищу снипеты в каталоге " + КаталогПоиска);
	
	МассивФайлов = НайтиФайлы(КаталогПоиска,"*.epf",Истина);
	Для Каждого Файл Из МассивФайлов Цикл
		
		ВерсияФайла = Файл.ПолучитьВремяИзменения();
		
		СтрТаблицаВерсийEPF = ТаблицаВерсийEPF.Найти(НРег(Файл.ПолноеИмя),"ИмяФайла");
		Если СтрТаблицаВерсийEPF = Неопределено Тогда
			СтрТаблицаВерсийEPF             = ТаблицаВерсийEPF.Добавить();
			СтрТаблицаВерсийEPF.ИмяФайла    = НРег(Файл.ПолноеИмя);
			СтрТаблицаВерсийEPF.ВерсияФайла = ВерсияФайла;
		Иначе	
			Если СтрТаблицаВерсийEPF.ВерсияФайла <> ВерсияФайла Тогда
				//значит файл изменился
				//обновляем версию и удаляем старые снипеты
				СтрТаблицаВерсийEPF.ВерсияФайла = ВерсияФайла;
				
				Отбор = Новый Структура;
				Отбор.Вставить("ИмяФайла",НРег(Файл.ПолноеИмя));
				МассивСтрок = ТаблицаИзвестныхStepDefinition.НайтиСтроки(Отбор);
				
				Для каждого СтрокаТаблицы Из МассивСтрок Цикл
					ТаблицаИзвестныхStepDefinition.Удалить(СтрокаТаблицы);
				КонецЦикла;
				
				Отладка("Обновил версию. " + Файл.ПолноеИмя);
			Иначе
				//значит уже актуальная версия файла загружена
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		Попытка
			Обработка = ВнешниеОбработки.Создать(Файл.ПолноеИмя);
			МассивСнипетовИзОбработки = Обработка.ПолучитьСписокТестов(КонтекстVanessaBehavoir);
		Исключение
			Отладка("Не вышло получить список шагов в обработке: " + Файл.ПолноеИмя);
			Отладка("" + ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		
		СтрТаблицаКонтекстовОбработок = Новый Структура;
		СтрТаблицаКонтекстовОбработок.Вставить("ИмяФайла",Файл.ПолноеИмя);
		СтрТаблицаКонтекстовОбработок.Вставить("Обработка",Обработка);
		ТаблицаКонтекстовОбработок.Добавить(СтрТаблицаКонтекстовОбработок);
		
		Для каждого Снипет Из МассивСнипетовИзОбработки Цикл
			ДобавитьСнипет(Снипет.Снипет,Снипет.ИмяПроцедуры,Файл.ПолноеИмя,БылиОшибки,ТаблицаИзвестныхStepDefinition,Снипет);
		КонецЦикла;
	КонецЦикла;
	
	Если БылиОшибки Тогда
		Сообщить(ПолучитьТекстСообщенияПользователю("Были ошибки в ПросканироватьИсходникиИНайтиВсеStepDefinition."));
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьСтруктуруСнипета()
	СтруктураСнипета = Новый Структура;
	
	Возврат СтруктураСнипета;
КонецФункции

Процедура УбратьЗапрещенныеСимволыИзStepDefinition(StepDefinition,ДелатьОберткуПараметров = Ложь,ДопПараметры = Неопределено) 
	StepDefinition = СтрЗаменить(StepDefinition,".","");
	StepDefinition = СтрЗаменить(StepDefinition,",","");
	StepDefinition = СтрЗаменить(StepDefinition,":","");
	StepDefinition = СтрЗаменить(StepDefinition,";","");
	StepDefinition = СтрЗаменить(StepDefinition,"+","");
	StepDefinition = СтрЗаменить(StepDefinition,"/","");
	StepDefinition = СтрЗаменить(StepDefinition,"\","");
	StepDefinition = СтрЗаменить(StepDefinition,"=","");
	StepDefinition = СтрЗаменить(StepDefinition,"!","");
	StepDefinition = СтрЗаменить(StepDefinition,"@","");
	StepDefinition = СтрЗаменить(StepDefinition,"#","");
	StepDefinition = СтрЗаменить(StepDefinition,"$","");
	StepDefinition = СтрЗаменить(StepDefinition,"%","");
	StepDefinition = СтрЗаменить(StepDefinition,"^","");
	StepDefinition = СтрЗаменить(StepDefinition,"&","");
	StepDefinition = СтрЗаменить(StepDefinition,"(","");
	StepDefinition = СтрЗаменить(StepDefinition,")","");
	StepDefinition = СтрЗаменить(StepDefinition,"№","");
	StepDefinition = СтрЗаменить(StepDefinition,"?","");
	StepDefinition = СтрЗаменить(StepDefinition,"`","");
	StepDefinition = СтрЗаменить(StepDefinition,"'","");
	StepDefinition = СтрЗаменить(StepDefinition,"~","");
	StepDefinition = СтрЗаменить(StepDefinition,Символы.НПП," ");
	StepDefinition = СтрЗаменить(StepDefinition,"<","");
	StepDefinition = СтрЗаменить(StepDefinition,">","");
	

	StepDefinition = СтрЗаменить(StepDefinition,"-","_");
	
	Если Не ДелатьОберткуПараметров Тогда
		StepDefinition = СтрЗаменить(StepDefinition,"*","");
	КонецЕсли;	 
КонецПроцедуры

Функция ДобавитьНолейВСтроку(Знач Стр,Длина);
	Пока СтрДлина(Стр) < Длина Цикл
		Стр = "0" + Стр;
	КонецЦикла;
	
	Возврат Стр;
КонецФункции	

Функция ДобавитьПараметрStepDefinition(Знач Стр,КолПараметров) Экспорт
	КолПараметровСтр = СокрЛП(КолПараметров);
	КолПараметровСтр = ДобавитьНолейВСтроку(КолПараметровСтр,2);
	
	Если (Найти(Стр,"||ПараметрЧисло||") > 0) или (Найти(Стр,"||ПараметрСтрокаА||") > 0) или (Найти(Стр,"||ПараметрСтрокаК||") > 0) или (Найти(Стр,"||ПараметрДата||") > 0) Тогда
		Стр = СтрЗаменить(Стр,"||Параметр","||Парам" + КолПараметровСтр) + ",";
	Иначе	
		Стр = Стр + ",";
	КонецЕсли;	 
	Стр = СтрЗаменить(Стр,"|","");
	Стр = СтрЗаменить(Стр,">","");
	Стр = СтрЗаменить(Стр,"<","");
	
	Возврат Стр;
КонецФункции

Функция СделатьПервуюБуквуЗаглавной(Стр) Экспорт
	Если СтрДлина(Стр) = 0 Тогда
		Возврат Стр;
	КонецЕсли;
	
	ПерваяБуква = ВРег(Лев(Стр,1));
	
	Возврат ПерваяБуква + Сред(Стр,2);
КонецФункции

Процедура ОбработатьСтрокиЭмуляцияRegExp(Стр,ПараметрыСтроки,Символ,ДелатьОберткуПараметров = Ложь, ЗаменятьЭкранированныеСпецсимволы = Истина);
	ПромСтр     = Стр;
	НоваяСтрока = "";
	
	ПромСтр = СтрЗаменить(ПромСтр,"\\",ПредставлениеДвойнойСлеш);
	ПромСтр = СтрЗаменить(ПромСтр,"\'",ПредставлениеАпостроф);
	ПромСтр = СтрЗаменить(ПромСтр,"\""",ПредставлениеКавычка);
	ПромСтр = СтрЗаменить(ПромСтр,"\|",ПредставлениеВертикальнаяЧерта);
	ПромСтр = СтрЗаменить(ПромСтр,ПредставлениеДвойнойСлеш,"\\");
	
	Поз = Найти(ПромСтр,Символ);
	
	Если Поз = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	Пока Поз > 0 Цикл
		НоваяСтрока = НоваяСтрока + Лев(ПромСтр,Поз-1);
		ПромСтр     = Сред(ПромСтр,Поз+1);
		
		Поз = Найти(ПромСтр,Символ);
		Если Поз > 0 Тогда
			ЗначениеПараметра = Лев(ПромСтр,Поз-1);
			Если ЗаменятьЭкранированныеСпецсимволы Тогда
				ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра,ПредставлениеАпостроф,"'");
				ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра,ПредставлениеКавычка,"""");
				ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра,ПредставлениеВертикальнаяЧерта,"|");
				ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра,"\\","\");
			Иначе	
				ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра,ПредставлениеАпостроф,"\'");
				ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра,ПредставлениеКавычка,"\""");
				ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра,ПредставлениеВертикальнаяЧерта,"\|");
			КонецЕсли;	 
			ПараметрыСтроки.Добавить(ЗначениеПараметра);
			
			СтрКолПараметров = "";
			Если ДелатьОберткуПараметров Тогда
				СтрКолПараметров = Формат(ПараметрыСтроки.Количество(), "ЧГ=; ЧН=0");
			КонецЕсли;	 
			
			ПромСтр = Сред(ПромСтр,Поз+1);
			Если Лев(ПромСтр,1) <> " " Тогда
				ПромСтр = " " + ПромСтр;
			КонецЕсли;	 
			
			Если Прав(НоваяСтрока,1) <> " " Тогда
				НоваяСтрока = НоваяСтрока + " ";
			КонецЕсли;	 
			
			Если Символ = "'" Тогда
				НоваяСтрока = НоваяСтрока + "||ПараметрСтрокаА" + СтрКолПараметров + "||";
			Иначе	
				НоваяСтрока = НоваяСтрока + "||ПараметрСтрокаК" + СтрКолПараметров + "||";
			КонецЕсли; 
			
		Иначе
			НоваяСтрока = НоваяСтрока + ПромСтр;
		КонецЕсли;	 
		
		
		Поз = Найти(ПромСтр,Символ);
		Если Поз = 0 Тогда
			НоваяСтрока               = НоваяСтрока + ПромСтр;
		КонецЕсли;	 
	КонецЦикла;
	
	Стр = НоваяСтрока;
КонецПроцедуры

Процедура ОбработатьДатыЭмуляцияRegExp(Стр,ПараметрыДаты,ДелатьОберткуПараметров = Ложь)
	Массив = РазложитьСтрокуВМассивПодстрок(Стр,".");
	
	Для Ккк = 0 По Массив.Количество()-1-2 Цикл
		Элем1 = Прав(Массив[Ккк],2);
		Элем2 = Массив[Ккк+1];
		Элем3 = Лев(Массив[Ккк+2],4);
		Если СтрДлина(Элем3) < 4 Тогда
			Элем3 = Лев(Массив[Ккк+2],2);
		КонецЕсли;	 
		Если СтрДлина(Элем3) = 4 Тогда
			Если НЕ ЭтоЦелоеЧисло(Элем3) Тогда
				Элем3 = Лев(Массив[Ккк+2],2);
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если СтрДлина(Элем1) <>  2 Тогда
			Продолжить;
		КонецЕсли;	 
		Если СтрДлина(Элем2) <>  2 Тогда
			Продолжить;
		КонецЕсли;	 
		Если (СтрДлина(Элем3) = 2) или (СтрДлина(Элем3) = 4) Тогда
		Иначе
			Продолжить;
		КонецЕсли;	 
		
		Если НЕ ЭтоЦелоеЧисло(Элем1) Тогда
			Продолжить;
		КонецЕсли;	 
		Если НЕ ЭтоЦелоеЧисло(Элем2) Тогда
			Продолжить;
		КонецЕсли;	 
		Если НЕ ЭтоЦелоеЧисло(Элем3) Тогда
			Продолжить;
		КонецЕсли;	 
		
		
		СтрДат = "" + Элем1 + "." + Элем2 + "." +Элем3;
		
		Поз = Найти(Стр,СтрДат);
		Если Поз > 0 Тогда
			ПараметрыДаты.Добавить(СтрДат);
			
			СтрКолПараметров = "";
			Если ДелатьОберткуПараметров Тогда
				СтрКолПараметров = Формат(ПараметрыДаты.Количество(), "ЧГ=; ЧН=0");
			КонецЕсли;	 
			
			//Если ДелатьОберткуПараметров Тогда
			//	Стр = Лев(Стр,Поз-1) + " *||*ПараметрДата" + ПараметрыДаты.Количество() + "*||* " + Сред(Стр,Поз+СтрДлина(СтрДат));
			//Иначе	
				Стр = Лев(Стр,Поз-1) + " ||ПараметрДата" + СтрКолПараметров + "|| " + Сред(Стр,Поз+СтрДлина(СтрДат));
			//КонецЕсли;	 
			//Сообщить("ЗначениеПараметра="+СтрДат);
			ОбработатьДатыЭмуляцияRegExp(Стр,ПараметрыДаты,ДелатьОберткуПараметров);
			Прервать;
		КонецЕсли;	 
		
		//Если ЭтоЦелоеЧисло(Элем1) и  Тогда
		//КонецЕсли;	 
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоКорректноеЧисло(Стр)
	Если ПустаяСтрока(Стр) или (Стр = "-") или (Стр = "+") Тогда Возврат Ложь; КонецЕсли;	 
		
	Если Стр = "0" Тогда Возврат Истина; КонецЕсли;
	
	Результат = ТипЧисло.ПривестиЗначение(Стр);
	Если Результат = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции

Процедура ОбработатьЧислаЭмуляцияRegExp(Стр,ПараметрыЧисла,ДелатьОберткуПараметров = Ложь)
	ПромСтр           = Стр;
	СтрокаРезультат   = "";
	НакопленнаяСтрока = "";
	ПредыдущийСимвол = Неопределено;
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Стр," ",Истина);
	Для Каждого НакопленнаяСтрока Из МассивСтрок Цикл
		Если ЭтоКорректноеЧисло(НакопленнаяСтрока) Тогда
			ПараметрыЧисла.Добавить(НакопленнаяСтрока);
			
			СтрКолПараметров = "";
			Если ДелатьОберткуПараметров Тогда
				СтрКолПараметров = Формат(ПараметрыЧисла.Количество(), "ЧГ=; ЧН=0");
			КонецЕсли;	 
			
			СтрокаРезультат = СтрокаРезультат + " ||ПараметрЧисло" + СтрКолПараметров + "|| ";
		Иначе
			СтрокаРезультат = СтрокаРезультат + " " + НакопленнаяСтрока;
		КонецЕсли;	 
	КонецЦикла;	
	
	Стр = СокрЛ(СтрокаРезультат);
КонецПроцедуры

Процедура ОбработатьПараметрыИменованные(Стр,ПараметрыИменованные)
	
	МассивТекПараметров = Новый Массив;
	
	Пока Истина Цикл
		Поз1 = Найти(Стр,"<");
		Поз2 = Найти(Стр,">");
		
		Если (Поз1 > 0) И (Поз2 > 0) и ((Поз2-Поз1) > 1) Тогда
			СтрПараметр = (Сред(Стр,Поз1+1,Поз2-Поз1-1));
			
			//ПараметрыИменованные.Добавить(СтрПараметр);
			
			
			ТекПараметр = "|||"+СтрПараметр + "|||";
			
			СтруктураПараметра = Новый Структура;
			СтруктураПараметра.Вставить("Имя",СтрЗаменить(СтрПараметр," ","|||ЗаменаПробела|||"));
			СтруктураПараметра.Вставить("ЗначениеВСтроке",ТекПараметр);
			
			МассивТекПараметров.Добавить(СтруктураПараметра);
			
			
			Стр = СтрЗаменить(Стр,"<" + СтрПараметр + ">",ТекПараметр);
			
			//ПромСтр = Сред(ПромСтр,Поз2+1);
		Иначе	
			Прервать;
		КонецЕсли; 
		
	КонецЦикла;
	
	Ном = 0;
	Для каждого Элем Из МассивТекПараметров Цикл
		Ном = Ном+1;
		//КолПараметровСтр = Ном;
		//Если СтрДлина(КолПараметровСтр) = 1 Тогда
		//	КолПараметровСтр = "0" + КолПараметровСтр;
		//КонецЕсли;
		Стр = СтрЗаменить(Стр,Элем.ЗначениеВСтроке,"<" + Элем.Имя + ">");
		
		ПараметрыИменованные.Добавить(Элем.Имя);
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПодготовитьСтрокуСОберткойПараметров(Стр,ПараметрыСтрокиА,ПараметрыСтрокиК,ПараметрыДаты,ПараметрыЧисла)
	Ном = 0;
	Для Каждого ЗначениеПараметра Из ПараметрыСтрокиА Цикл
		Ном    = Ном + 1;
		СтрНом = Формат(Ном, "ЧГ=; ЧН=0");
		Символ = "'";
		Стр = СтрЗаменить(Стр,"||ПараметрСтрокаА" + СтрНом + "||","*||*" + Символ + ЗначениеПараметра + Символ +  "*||*");
	КонецЦикла;	
	
	Ном = 0;
	Для Каждого ЗначениеПараметра Из ПараметрыСтрокиК Цикл
		Ном    = Ном + 1;
		СтрНом = Формат(Ном, "ЧГ=; ЧН=0");
		Символ = """";
		Стр = СтрЗаменить(Стр,"||ПараметрСтрокаК" + СтрНом + "||","*||*" + Символ + ЗначениеПараметра + Символ +  "*||*");
	КонецЦикла;	
	
	Ном = 0;
	Для Каждого ЗначениеПараметра Из ПараметрыДаты Цикл
		Ном    = Ном + 1;
		СтрНом = Формат(Ном, "ЧГ=; ЧН=0");
		Стр = СтрЗаменить(Стр,"||ПараметрДата" + СтрНом + "||","*||*" + ЗначениеПараметра + "*||*");
	КонецЦикла;	
	
	Ном = 0;
	Для Каждого ЗначениеПараметра Из ПараметрыЧисла Цикл
		Ном    = Ном + 1;
		СтрНом = Формат(Ном, "ЧГ=; ЧН=0");
		Стр = СтрЗаменить(Стр,"||ПараметрЧисло" + СтрНом + "||","*||*" + ЗначениеПараметра + "*||*");
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЭмуляцияRegExp(Стр,ПараметрыСтрокиА,ПараметрыСтрокиК,ПараметрыЧисла,ПараметрыДаты,ПараметрыИменованные,ДелатьОберткуПараметров = Ложь,ДопПараметры = Неопределено)
	
	ЗаменятьЭкранированныеСпецсимволы = Истина;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ЗаменятьЭкранированныеСпецсимволы") Тогда
			ЗаменятьЭкранированныеСпецсимволы = ДопПараметры.ЗаменятьЭкранированныеСпецсимволы;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ОбработатьСтрокиЭмуляцияRegExp(Стр,ПараметрыСтрокиА,"'",ДелатьОберткуПараметров, ЗаменятьЭкранированныеСпецсимволы);
	ОбработатьСтрокиЭмуляцияRegExp(Стр,ПараметрыСтрокиК,"""",ДелатьОберткуПараметров, ЗаменятьЭкранированныеСпецсимволы);
	ОбработатьПараметрыИменованные(Стр,ПараметрыИменованные);
	ОбработатьДатыЭмуляцияRegExp(Стр,ПараметрыДаты,ДелатьОберткуПараметров);
	ОбработатьЧислаЭмуляцияRegExp(Стр,ПараметрыЧисла,ДелатьОберткуПараметров);
	//УбратьЗапрещенныеСимволыИзStepDefinition(Стр,,ДопПараметры);
	
	
	Если ДелатьОберткуПараметров Тогда
		ПодготовитьСтрокуСОберткойПараметров(Стр,ПараметрыСтрокиА,ПараметрыСтрокиК,ПараметрыДаты,ПараметрыЧисла);
	КонецЕсли;	 
КонецПроцедуры

Функция ЭкранироватьСпецСимволыДляЗначенияШага(Знач Стр)
	Стр = СтрЗаменить(Стр,"""","\""");
	Возврат СтрЗаменить(Стр,"'","\'");
КонецФункции	

Функция ОбработатьСпецСимволыДляЗначенияПеременной(Знач Стр)
	Стр = СтрЗаменить(Стр,"\\","~~ОдинСлешЭкранирование~~");
	Стр = СтрЗаменить(Стр,"\""", """");
	Стр = СтрЗаменить(Стр,"\'", "'");
	Возврат СтрЗаменить(Стр,"~~ОдинСлешЭкранирование~~", "\");
КонецФункции	

Функция ПолучитьStepDefinitionПоСтроке(Знач Стр, ЗначенияПараметров, СтрокаПараметров = "",
	                            ЕстьПараметрыТаблицы = Ложь,КоличествоПараметровТаблица = 0,
								ДанныеОбработкиПараметров = Неопределено, СтруктураПараметров = Неопределено, МногострочныеПараметрыШага = Неопределено, ДопПараметры = Неопределено) 
	
	СтрокаКеш = Стр + "_" + ЕстьПараметрыТаблицы + "_" + КоличествоПараметровТаблица;
	КешСнипетов = СтруктураПараметров.КешСнипетов;
	ДанныеКеш = КешСнипетов[СтрокаКеш];
	Если ДанныеКеш <> Неопределено И МногострочныеПараметрыШага = Неопределено Тогда
		Если ДанныеКеш.Свойство("ЗначенияПараметров") Тогда
			ЗначенияПараметров = ДанныеКеш.ЗначенияПараметров;
		КонецЕсли;	 
		СтрокаПараметров = ДанныеКеш.СтрокаПараметров;
		
		Если ДанныеОбработкиПараметров <> Неопределено Тогда
			ДанныеОбработкиПараметров.Вставить("ОбработаннаяСтрокаПараметров",ДанныеКеш.ОбработаннаяСтрокаПараметров);
			Если ДанныеКеш.Свойство("ЗначенияПараметров") Тогда
				ДанныеОбработкиПараметров.Вставить("ЗначенияПараметров",ДанныеКеш.ЗначенияПараметров);
			Иначе	
				ДанныеОбработкиПараметров.Вставить("ЗначенияПараметров",ЗначенияПараметров);
			КонецЕсли;	 
			
			Если ДанныеКеш.Свойство("ПараметрыЧисла") Тогда
				ДанныеОбработкиПараметров.Вставить("ПараметрыЧисла",ДанныеКеш.ПараметрыЧисла);
			Иначе	
				ДанныеОбработкиПараметров.Вставить("ПараметрыЧисла",Новый Массив);
			КонецЕсли;	 
			
			Если ДанныеКеш.Свойство("ПараметрыСтрокиА") Тогда
				ДанныеОбработкиПараметров.Вставить("ПараметрыСтрокиА",ДанныеКеш.ПараметрыСтрокиА);
			Иначе	
				ДанныеОбработкиПараметров.Вставить("ПараметрыСтрокиА",Новый Массив);
			КонецЕсли;	 
			
			Если ДанныеКеш.Свойство("ПараметрыСтрокиК") Тогда
				ДанныеОбработкиПараметров.Вставить("ПараметрыСтрокиК",ДанныеКеш.ПараметрыСтрокиК);
			Иначе	
				ДанныеОбработкиПараметров.Вставить("ПараметрыСтрокиК",Новый Массив);
			КонецЕсли;	 
			
			Если ДанныеКеш.Свойство("ПараметрыДаты") Тогда
				ДанныеОбработкиПараметров.Вставить("ПараметрыДаты",ДанныеКеш.ПараметрыДаты);
			Иначе	
				ДанныеОбработкиПараметров.Вставить("ПараметрыДаты",Новый Массив);
			КонецЕсли;	 
			
			Если ДанныеКеш.Свойство("ПараметрыИменованные") Тогда
				ДанныеОбработкиПараметров.Вставить("ПараметрыИменованные",ДанныеКеш.ПараметрыИменованные);
			Иначе	
				ДанныеОбработкиПараметров.Вставить("ПараметрыИменованные",Новый Массив);
			КонецЕсли;	 
			
		КонецЕсли;	 
		
		Возврат ДанныеКеш.StepDefinition; 
	КонецЕсли;
								
	ПараметрыЧисла       = Новый Массив;
	ПараметрыСтрокиА     = Новый Массив;
	ПараметрыСтрокиК     = Новый Массив;
	ПараметрыДаты        = Новый Массив;
	ПараметрыИменованные = Новый Массив;
	
	СтрокаОригинал = Стр;
	
	ЭмуляцияRegExp(Стр,ПараметрыСтрокиА,ПараметрыСтрокиК,ПараметрыЧисла,ПараметрыДаты,ПараметрыИменованные,,ДопПараметры);
	ОбработаннаяСтрокаПараметров = Стр;
	
	Если ДанныеОбработкиПараметров <> Неопределено Тогда
		ДанныеОбработкиПараметров.Вставить("ОбработаннаяСтрокаПараметров",ОбработаннаяСтрокаПараметров);
		ДанныеОбработкиПараметров.Вставить("ПараметрыЧисла",ПараметрыЧисла);
		ДанныеОбработкиПараметров.Вставить("ПараметрыСтрокиА",ПараметрыСтрокиА);
		ДанныеОбработкиПараметров.Вставить("ПараметрыСтрокиК",ПараметрыСтрокиК);
		ДанныеОбработкиПараметров.Вставить("ПараметрыДаты",ПараметрыДаты);
		ДанныеОбработкиПараметров.Вставить("ПараметрыИменованные",ПараметрыИменованные);
		ДанныеОбработкиПараметров.Вставить("ЗначенияПараметров",ЗначенияПараметров);
	КонецЕсли;	 
	
	Стр = СтрЗаменить(Стр,Символы.Таб," ");
	Если Прав(Стр,1) = ":" Тогда
		Стр = Лев(Стр,СтрДлина(Стр)-1);
	КонецЕсли;	 
	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(Стр," ",Истина);
	КолПараметров        = 0;
	КолПараметровЧисло   = 0;
	КолПараметровСтрокаА = 0;
	КолПараметровСтрокаК = 0;
	КолПараметровДата    = 0;
	
	КолПараметровИменованные = 0;
	
	СтрокаПараметров    = "";
	StepDefinition      = "";
	
	Для Каждого Элем Из МассивПодстрок Цикл
		Если Лев(Элем,1) = "|" Тогда
			Если Элем = "||ПараметрСтрокаА||" Тогда
				КолПараметров        = КолПараметров       + 1;
				КолПараметровСтрокаА = КолПараметровСтрокаА + 1;
				
				СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
				
				Если (ПараметрыСтрокиА.Количество()-1) < КолПараметровСтрокаА-1 Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не получилось обработать параметры в строке <%1>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаОригинал); 
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				СтруктураЗначенияПараметра = Новый Структура;
				СтруктураЗначенияПараметра.Вставить("Значение",ПараметрыСтрокиА[КолПараметровСтрокаА-1]);
				СтруктураЗначенияПараметра.Вставить("Тип","Строка");
				
				ЗначенияПараметров.Добавить(СтруктураЗначенияПараметра);
				
				Продолжить;
			ИначеЕсли Элем = "||ПараметрСтрокаК||" Тогда
				КолПараметров        = КолПараметров       + 1;
				КолПараметровСтрокаК = КолПараметровСтрокаК + 1;
				
				СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
				
				Если (ПараметрыСтрокиК.Количество()-1) < КолПараметровСтрокаК-1 Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не получилось обработать параметры в строке <%1>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаОригинал); 
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				СтруктураЗначенияПараметра = Новый Структура;
				СтруктураЗначенияПараметра.Вставить("Значение",ПараметрыСтрокиК[КолПараметровСтрокаК-1]);
				СтруктураЗначенияПараметра.Вставить("Тип","Строка");
				
				ЗначенияПараметров.Добавить(СтруктураЗначенияПараметра);
				
				Продолжить;
			ИначеЕсли Элем = "||ПараметрЧисло||" Тогда
				КолПараметров      = КолПараметров      + 1;
				КолПараметровЧисло = КолПараметровЧисло + 1;
				
				СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем, КолПараметров);
				
				Если (ПараметрыЧисла.Количество()-1) < КолПараметровЧисло-1 Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не получилось обработать параметры в строке <%1>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаОригинал); 
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				СтруктураЗначенияПараметра = Новый Структура;
				СтруктураЗначенияПараметра.Вставить("Значение",ПараметрыЧисла[КолПараметровЧисло-1]);
				СтруктураЗначенияПараметра.Вставить("Тип","Число");
				
				ЗначенияПараметров.Добавить(СтруктураЗначенияПараметра);
				Продолжить;
			ИначеЕсли Элем = "||ПараметрДата||" Тогда
				КолПараметров      = КолПараметров      + 1;
				КолПараметровДата  = КолПараметровДата  + 1;
				
				СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
				
				Если (ПараметрыДаты.Количество()-1) < КолПараметровДата-1 Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не получилось обработать параметры в строке <%1>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаОригинал); 
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				СтруктураЗначенияПараметра = Новый Структура;
				СтруктураЗначенияПараметра.Вставить("Значение",ПараметрыДаты[КолПараметровДата-1]);
				СтруктураЗначенияПараметра.Вставить("Тип","Дата");
				
				ЗначенияПараметров.Добавить(СтруктураЗначенияПараметра);
				Продолжить;
			КонецЕсли;
		КонецЕсли;	 
		
		НашлиПараметрИменованный = Ложь;
		Для каждого ЭлемПараметрыИменованные Из ПараметрыИменованные Цикл
			ЭлемПараметрыИменованные = СтрЗаменить(ЭлемПараметрыИменованные,"|||ЗаменаПробела|||"," ");
			Элем                     = СокрЛП(СтрЗаменить(Элем,"|||ЗаменаПробела|||"," "));
			
			СтрДляСравнения = "<" + ЭлемПараметрыИменованные + ">";
			Если СтрДляСравнения = Элем Тогда
				КолПараметров            = КолПараметров      + 1;
				КолПараметровИменованные = КолПараметровИменованные  + 1;
				
				СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
				
				СтруктураЗначенияПараметра = Новый Структура;
				СтруктураЗначенияПараметра.Вставить("Значение",ЭлемПараметрыИменованные);
				СтруктураЗначенияПараметра.Вставить("Тип","ПараметрИменованный");
				
				ЗначенияПараметров.Добавить(СтруктураЗначенияПараметра);
				
				НашлиПараметрИменованный = Истина;
				Прервать;
			КонецЕсли; 
			
		КонецЦикла;
		Если НашлиПараметрИменованный Тогда
			Продолжить;
		КонецЕсли; 
		
		StepDefinition = StepDefinition + СделатьПервуюБуквуЗаглавной(Элем);
	КонецЦикла;
	
	Если МногострочныеПараметрыШага <> Неопределено Тогда
		Для Каждого МногострочныйПараметр Из МногострочныеПараметрыШага Цикл
			ДанныеПараметра = Новый Структура;
			ДанныеПараметра.Вставить("Значение", МногострочныйПараметр);
			ДанныеПараметра.Вставить("Тип", "Строка");
			ДанныеПараметра.Вставить("Многострочный", Истина);
			
			ЗначенияПараметров.Добавить(ДанныеПараметра);
			СтрокаПараметров = СтрокаПараметров + "Парам" + ДобавитьНолейВСтроку(ЗначенияПараметров.Количество(),2) + ",";
		КонецЦикла;	 
	КонецЕсли;	 
	
	Если ЕстьПараметрыТаблицы  = Истина Тогда
		Если КоличествоПараметровТаблица = 1 Тогда
			СтрокаПараметров = СтрокаПараметров + "ТабПарам,"; 
		Иначе
			Для Ккк = 1 По КоличествоПараметровТаблица Цикл
				СтрокаПараметров = СтрокаПараметров + "ТабПарам" + Формат(Ккк, "ЧГ=; ЧН=0") + ","; 
			КонецЦикла;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если СтрокаПараметров <> "" Тогда
		Если Прав(СтрокаПараметров,1) = "," Тогда
			СтрокаПараметров = Лев(СтрокаПараметров,СтрДлина(СтрокаПараметров)-1);//там лишняя запятая
		КонецЕсли;	 
	КонецЕсли;
	
	УбратьЗапрещенныеСимволыИзStepDefinition(StepDefinition);
	ПроверкаКорректностиStepDefinition(StepDefinition);
	
	StepDefinition = StepDefinition + "(" + СтрокаПараметров + ")";
	
	ДанныеКеш = Новый Структура;
	
	ДанныеКеш.Вставить("StepDefinition",StepDefinition);
	ДанныеКеш.Вставить("СтрокаПараметров",СтрокаПараметров);
	ДанныеКеш.Вставить("ОбработаннаяСтрокаПараметров",ОбработаннаяСтрокаПараметров);
	
	Если ЗначенияПараметров.Количество() > 0 Тогда
		ДанныеКеш.Вставить("ЗначенияПараметров",ЗначенияПараметров);
	КонецЕсли;	 
	Если ПараметрыЧисла.Количество() > 0 Тогда
		ДанныеКеш.Вставить("ПараметрыЧисла",ПараметрыЧисла);
	КонецЕсли;	 
	Если ПараметрыСтрокиА.Количество() > 0 Тогда
		ДанныеКеш.Вставить("ПараметрыСтрокиА",ПараметрыСтрокиА);
	КонецЕсли;	 
	Если ПараметрыСтрокиК.Количество() > 0 Тогда
		ДанныеКеш.Вставить("ПараметрыСтрокиК",ПараметрыСтрокиК);
	КонецЕсли;	 
	Если ПараметрыДаты.Количество() > 0 Тогда
		ДанныеКеш.Вставить("ПараметрыДаты",ПараметрыДаты);
	КонецЕсли;	 
	Если ПараметрыИменованные.Количество() > 0 Тогда
		ДанныеКеш.Вставить("ПараметрыИменованные",ПараметрыИменованные);
	КонецЕсли;	 
		
	КешСнипетов[СтрокаКеш] = ДанныеКеш;
		
	Возврат StepDefinition;
КонецФункции

Процедура ПроверкаКорректностиStepDefinition(StepDefinition)
	ПервыйСимвол = Лев(StepDefinition,1);
	Если ЭтоЦелоеЧисло(ПервыйСимвол) Тогда
		StepDefinition = "_" + StepDefinition;
	КонецЕсли;	 
КонецПроцедуры

Функция СнипетыПолучитьСнипетыПоШагам(Шаги, СтруктураПараметров) Экспорт
	МассивСнипетов = Новый Массив;
	
	МассивПовторов = Новый Массив;
	
	Для каждого СтрШаг Из Шаги Цикл
		ЗначенияПараметров = Новый Массив;
		СтарыйStepDefinition = ПолучитьStepDefinitionПоСтроке(СтрШаг.ИмяШагаБезКлючевогоСлова,ЗначенияПараметров,,СтрШаг.ШагСПараметрамиВТаблице,СтрШаг.КоличествоПередаваемыхТаблиц,,СтруктураПараметров);
		НовыйStepDefinition  = ПолучитьНовыйStepDefinition(СтарыйStepDefinition);
		StepDefinition       = НовыйStepDefinition;
		
		СнипетБезПараметров = Лев(StepDefinition,Найти(StepDefinition,"(")-1);
		Если МассивПовторов.Найти(СнипетБезПараметров) = Неопределено Тогда
			МассивПовторов.Добавить(СнипетБезПараметров);
		Иначе
			Продолжить;
		КонецЕсли;	 
		
		Отладка("По (" + СтрШаг.Имя + ") получил StepDefinition: " + StepDefinition);
		
		СтруктураСнипета = СоздатьСтруктуруСнипета();
		СтруктураСнипета.Вставить("Шаг",СтрШаг.Имя);
		СтруктураСнипета.Вставить("StepDefinition",StepDefinition);
		СтруктураСнипета.Вставить("ЗначенияПараметров",ЗначенияПараметров);
		СтруктураСнипета.Вставить("АдресСнипета",СтрШаг.АдресСнипета);
		
		МассивСнипетов.Добавить(СтруктураСнипета);
	КонецЦикла;
	
	Возврат МассивСнипетов;
КонецФункции

Процедура ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf,StepDefinition,ПримерИспользованияПроцедуры,ШагСтрокДляМодуля,АдресСнипета,СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур,ГенерироватьУФ,ЭтоУФ = Ложь) Экспорт 
	ГенерироватьСнипетЗакоментаренным = ?(СокрЛП(АдресСнипета) = "",Ложь,Истина);
	Если СравнитьПутиФайлов(СтруктураОписанияEpf.ИмяФайлаEpf,АдресСнипета) Тогда
		ГенерироватьСнипетЗакоментаренным = Ложь;
	КонецЕсли;	 
	
	Если Не СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур Тогда
		Если ГенерироватьСнипетЗакоментаренным Тогда
			Возврат;
		КонецЕсли;  
	КонецЕсли;  
	
	ТелоМодуля = СтруктураОписанияEpf.ТелоМодуля;
	Если ЭтоУФ Тогда
		ТелоМодуля = ЗначениеИзСтрокиВнутр(ТелоМодуля);
	КонецЕсли;	 
	ТелоМодуля.Сортировать("НомСтр");
	
	СтрокаПоискаStepDefinition = "//@" + НРег(Лев(StepDefinition,Найти(StepDefinition,"(")));//будем искать без параметров
	Если СтрокаПоискаStepDefinition = "" Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Ошибка в ДобавитьStepDefinitionВТекстМодуля.");
	КонецЕсли;	 
	
	УжеЕсть = Ложь;
	Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
		Стр = СокрЛП(СтрТелоМодуля.Стр);
		Если Лев(Стр,3) = "//@" Тогда //так определяется StepDefinition
			Если Найти(НРег(Стр),СтрокаПоискаStepDefinition) > 0 Тогда
				УжеЕсть = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если УжеЕсть Тогда
		Возврат;
	КонецЕсли;
	
	//НомСтр = ПолучитьМаксНомерИзТелаМодуля(ТелоМодуля);
	
	//Возврат;
	
	ПрефиксКоментария = ?(ГенерироватьСнипетЗакоментаренным,"//","");
	
	
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ПрефиксКоментария + "&НаКлиенте");
	КонецЕсли;	 
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ПрефиксКоментария + "//" + ПримерИспользованияПроцедуры);
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ПрефиксКоментария + "//@" + StepDefinition);
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ПрефиксКоментария + "Функция " + StepDefinition + " Экспорт");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ПрефиксКоментария + "	//Ванесса.ПосмотретьЗначение(Парам01,Истина);");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ПрефиксКоментария + "	ВызватьИсключение ""Не реализовано."";");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ПрефиксКоментария + "КонецФункции");
	
	Если ЭтоУФ Тогда
		//ТелоМодуля = ЗначениеВСтрокуВнутр(ТелоМодуля);
		СтруктураОписанияEpf.ТелоМодуля = ЗначениеВСтрокуВнутр(ТелоМодуля);
	КонецЕсли;	 
КонецПроцедуры

Функция ИнкрементЗначения(Зн,Инкремент)
	Зн = Зн + Инкремент;
	Возврат Зн;
КонецФункции

Функция СравнитьПутиФайлов(Знач Путь1, Знач Путь2)
	
	Возврат УниверсальноеПолноеИмяФайла(Путь1, Истина) = УниверсальноеПолноеИмяФайла(Путь2, Истина);
	

КонецФункции

Процедура ЗаполнитьПроцедуруПолучитьСписокТестов(ТелоМодуля,Снипеты,ЭтоУФ,ИмяФайлаФичи,СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур) Экспорт
	Если ЭтоУФ Тогда
		ТелоМодуля = ЗначениеИзСтрокиВнутр(ТелоМодуля);
	КонецЕсли;	 
	ТелоМодуля.Сортировать("НомСтр");
	
	
	
	КодПроцедурыПолучитьСписокТестов = Новый ТаблицаЗначений;
	КодПроцедурыПолучитьСписокТестов.Колонки.Добавить("Стр");
	
	
	
	НашелПроцедуруПолучитьСписокТестов = Ложь;
	НомерСтрокиНачалоФункции           = -1; 
	
	НашелКонецФункции                  = Ложь;
	НомерСтрокиКонецФункции            = -1; 
	
	Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
		Стр = НРег(СокрЛП(СтрТелоМодуля.Стр));
		Если (Найти(Стр,"функция") > 0) и (Найти(Стр,"получитьсписоктестов(") > 0) Тогда
			НашелПроцедуруПолучитьСписокТестов = Истина;
			НомерСтрокиНачалоФункции           = СтрТелоМодуля.НомСтр;
			Продолжить;
		КонецЕсли;
		
		
		Если НашелПроцедуруПолучитьСписокТестов Тогда
			СтрКодПроцедурыПолучитьСписокТестов     = КодПроцедурыПолучитьСписокТестов.Добавить();
			СтрКодПроцедурыПолучитьСписокТестов.Стр = СтрТелоМодуля.Стр;
		КонецЕсли;	 
		
		Если НашелПроцедуруПолучитьСписокТестов Тогда
			Если Стр = "конецфункции" Тогда
				НашелКонецФункции       = Истина;
				НомерСтрокиКонецФункции = СтрТелоМодуля.НомСтр;
				Прервать;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	
	Если Не НашелПроцедуруПолучитьСписокТестов Тогда
		СтрОшибки = "Не нашел функцию ""ПолучитьСписокТестов"".";
		Сообщить(СтрОшибки);
		ВызватьИсключение СтрОшибки;
	КонецЕсли;	 
	Если Не НашелКонецФункции Тогда
		СтрОшибки = "Не нашел конец функции ""ПолучитьСписокТестов"".";
		Сообщить(СтрОшибки);
		ВызватьИсключение СтрОшибки;
	КонецЕсли;	 
	
	
	СтрокиДляУдаления = Новый Массив;
	Для каждого СтрКодПроцедурыПолучитьСписокТестов Из КодПроцедурыПолучитьСписокТестов Цикл
		СтрокаКода = СокрЛП(НРег(СтрКодПроцедурыПолучитьСписокТестов.Стр));
		Если Лев(СтрокаКода,2) = "//" Тогда
			СтрокиДляУдаления.Добавить(СтрКодПроцедурыПолучитьСписокТестов);
			Продолжить;
		КонецЕсли;	 
		
		Если Найти(СтрокаКода,НРег("ДобавитьШагВМассивТестов")) = 0 Тогда
			СтрокиДляУдаления.Добавить(СтрКодПроцедурыПолучитьСписокТестов);
			Продолжить;
		КонецЕсли;	 
		
		Нашли = Ложь;
		Для каждого Снипет Из Снипеты Цикл
			StepDefinition = НРег(Снипет.StepDefinition);
			
			Если Найти(СтрокаКода,StepDefinition) > 0 Тогда //значит этот шаг надо удалить из КодПроцедурыПолучитьСписокТестов
				Нашли = Истина;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;
		
		Если Нашли Тогда
			СтрокиДляУдаления.Добавить(СтрКодПроцедурыПолучитьСписокТестов);
		КонецЕсли;	 
	КонецЦикла;
	
	Для каждого СтрКодПроцедурыПолучитьСписокТестов Из СтрокиДляУдаления Цикл
		КодПроцедурыПолучитьСписокТестов.Удалить(СтрКодПроцедурыПолучитьСписокТестов);
	КонецЦикла;
	
	
	
	
	//очистим содержимое функции
	КолСтрок = ТелоМодуля.Количество();
	Для Ккк = 0 По КолСтрок-1 Цикл
		ИдСтроки = КолСтрок - Ккк - 1;
		
		СтрокаМодуля = ТелоМодуля[ИдСтроки];
		Если (СтрокаМодуля.НомСтр > НомерСтрокиНачалоФункции) и (СтрокаМодуля.НомСтр < НомерСтрокиКонецФункции) Тогда
			ТелоМодуля.Удалить(СтрокаМодуля);
		КонецЕсли;	 
	КонецЦикла;
	
	
	
	НомСтр = НомерСтрокиНачалоФункции;
	
	
	
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	Ванесса = КонтекстФреймворкаBDD;",ИнкрементЗначения(НомСтр,1));
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	",ИнкрементЗначения(НомСтр,1));
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	ВсеТесты = Новый Массив;",ИнкрементЗначения(НомСтр,1));
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"",ИнкрементЗначения(НомСтр,1));
	
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	//описание параметров",ИнкрементЗначения(НомСтр,1));
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);",ИнкрементЗначения(НомСтр,1));
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"",ИнкрементЗначения(НомСтр,1));
	
	
	ФайлФичи = Новый Файл(ИмяФайлаФичи);
	ИмяEPFФичи = ФайлФичи.Путь + "step_definitions/" + ФайлФичи.ИмяБезРасширения + ".epf";
	
	
	//добавим строки, которые были раньше, но их нет в текущей фиче
	//это бывает, когда мы хотим добавить шаг,в библиотеку сначала из одной фичи, потом из другой
	Для каждого СтрКодПроцедурыПолучитьСписокТестов Из КодПроцедурыПолучитьСписокТестов Цикл
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,СтрКодПроцедурыПолучитьСписокТестов.Стр,ИнкрементЗначения(НомСтр,1));
	КонецЦикла;
	
	
	
	МассивДобавленыхСнипетов = Новый Массив;
	Для каждого Снипет Из Снипеты Цикл
		СнипетУжеБылВДругойEPF = ?(СокрЛП(Снипет.АдресСнипета) = "",Ложь,Истина);
		Если СравнитьПутиФайлов(ИмяEPFФичи,Снипет.АдресСнипета) Тогда
			СнипетУжеБылВДругойEPF = Ложь;
		КонецЕсли;	
		
		Если Не СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур Тогда
			Если СнипетУжеБылВДругойEPF Тогда
				Продолжить;
			КонецЕсли;  
		КонецЕсли;  
		
		ПрефиксКомментарий     = ?(СнипетУжеБылВДругойEPF,"//","");
		ПостфиксКомментарий    = ?(СнипетУжеБылВДругойEPF," //уже был в " + Снипет.АдресСнипета,"");
		
		
		Зн = МассивДобавленыхСнипетов.Найти(Снипет.StepDefinition);
		Если Зн <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		ИмяПроцедуры = Снипет.StepDefinition;
		Поз = Найти(ИмяПроцедуры,"(");
		ИмяПроцедуры = Лев(ИмяПроцедуры,Поз-1);
		
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ПрефиксКомментарий + "	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""" + Снипет.StepDefinition + """,""" + ИмяПроцедуры + """,""" + СтрЗаменить(Снипет.Шаг,"""","""""") + ""","""","""");" + ПостфиксКомментарий,ИнкрементЗначения(НомСтр,1));
		МассивДобавленыхСнипетов.Добавить(Снипет.StepDefinition);
	КонецЦикла;
	
	
	
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"",ИнкрементЗначения(НомСтр,1));
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	Возврат ВсеТесты;",ИнкрементЗначения(НомСтр,1));
	
	
	ТелоМодуля.Сортировать("НомСтр");
	
	
	
	
	Если ЭтоУФ Тогда
		ТелоМодуля = ЗначениеВСтрокуВнутр(ТелоМодуля);
	КонецЕсли;	 
	
	
	
КонецПроцедуры

Функция СоздатьТаблицуКлючевыхСлов()
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("Тип");
	Тзн.Колонки.Добавить("Слово");
	Тзн.Колонки.Добавить("Уникально");
	
	Тзн.Индексы.Добавить("Слово");
	
	Возврат Тзн;
КонецФункции	

Функция ПолучитьКлючевыеСловаПоТипам(Тзн)
	СоответствиеТипов = Новый Соответствие;
	Для Каждого СтрТзн Из Тзн Цикл
		Тип = СтрТзн.Тип;
		
		
		Если СоответствиеТипов.Получить(Тип) = Неопределено Тогда
			СоответствиеТипов.Вставить(Тип,Новый Массив);
		КонецЕсли;	 
		
		МассивСоответствия = СоответствиеТипов.Получить(Тип);
		МассивСоответствия.Добавить(СтрТзн.Слово);
	КонецЦикла;	
	
	Возврат СоответствиеТипов;
КонецФункции	

Функция КешПоискаКлючевыхСлов(Тзн)
	Стр = "";
	Соответствие = Новый Соответствие;
	НомерСлова = 0;
	Для Каждого СтрТзн Из Тзн Цикл
		НомерСлова = НомерСлова + 1;
		Стр = Стр + ";";
		Соответствие.Вставить(СтрДлина(Стр),НомерСлова);
		Стр = Стр + СтрТзн.Слово;
	КонецЦикла;	 
	
	Структура = Новый Структура;
	Структура.Вставить("СтрокаПоиска",Стр);
	Структура.Вставить("НомераСлов",Соответствие);
	Возврат Структура; 
КонецФункции	 

Функция СоздатьТаблицуКлючевыхСлов_ru()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"и","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"когда","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"тогда","then");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"затем","then");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"дано","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"функция","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"функционал","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"функциональность","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"свойство","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"предыстория","background");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"контекст","background");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"сценарий","scenario");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"переменные","variables");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"структура сценария","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"примеры","examples");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"допустим","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"пусть","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"если","if");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"иначеесли","elseif");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"иначе","else");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"попытка","try");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"исключение","except");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"то","then");

	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"к тому же","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"также","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"но","but");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"а","but");
	
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам,КешПоискаКлючевыхСлов",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн),КешПоискаКлючевыхСлов(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_en()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"feature","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Functionality","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Business Need","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Ability","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"background","background");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"scenario outline","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"scenario","scenario",Ложь);
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"example","scenario",Ложь);
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"variables","variables");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"examples","examples");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"given","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"when","when");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"then","then");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"and","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"but","but");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"if","if");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"elseif","elseif");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"else","else");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"try","try");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"except","except");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам,КешПоискаКлючевыхСлов",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн),КешПоискаКлючевыхСлов(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_uk()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"функціонал","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"передумова","background");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"сценарій","scenario");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"структура сценарію","scenario_outline");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"приклади","examples");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"припустимо","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"дано","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"припустимо, що","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"нехай","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"якщо","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"коли","when");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"то","then");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"тоді","then");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"і","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"а також","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"та","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"але","but");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам,КешПоискаКлючевыхСлов",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн),КешПоискаКлючевыхСлов(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_ro()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Și","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Si","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Şi","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Context","background");
	
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dar","but");
	
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Exemple","examples");
	
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funcționalitate","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Functionalitate","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funcţionalitate","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dat fiind","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Date fiind","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dati fiind","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dați fiind","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Daţi fiind","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Scenariu","scenario");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Structura scenariu","scenario_outline");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Structură scenariu","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Atunci","then");
	
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Cand","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Când","when");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам,КешПоискаКлючевыхСлов",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн),КешПоискаКлючевыхСлов(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_de()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Und","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Grundlage","background");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Aber","but");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Beispiele","examples");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funktionalität","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Angenommen","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Gegeben sei","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Gegeben seien","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Szenario","scenario");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Szenariogrundriss","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dann","then");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Wenn","when");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам,КешПоискаКлючевыхСлов",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн),КешПоискаКлючевыхСлов(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_lv()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Un","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Konteksts","background");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Situācija","background");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Bet","but");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Piemēri","examples");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Paraugs","examples");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funkcionalitāte","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Fīča","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Kad","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Scenārijs","scenario");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Scenārijs pēc parauga","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Tad","then");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Ja","when");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам,КешПоискаКлючевыхСлов",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн),КешПоискаКлючевыхСлов(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_it()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"E","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Contesto","background");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Ma","but");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Esempi","examples");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funzionalità","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dato","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Data","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dati","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Date","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Scenario","scenario");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Schema dello scenario","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Allora","then");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Quando","when");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам,КешПоискаКлючевыхСлов",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн),КешПоискаКлючевыхСлов(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_pl()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Oraz","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"I","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Założenia","background");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Ale","but");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Przykłady","examples");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Właściwość","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funkcja","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Aspekt","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Potrzeba biznesowa","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Zakładając","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Mając","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Zakładając, że","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Scenariusz","scenario");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Szablon scenariusza","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Wtedy","then");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Jeżeli","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Jeśli","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Gdy","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Kiedy","when");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам,КешПоискаКлючевыхСлов",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн),КешПоискаКлючевыхСлов(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_vi()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Và","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Bối cảnh","background");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Nhưng","but");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dữ liệu","examples");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Tính năng","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Biết","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Cho","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Tình huống","scenario");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Kịch bản","scenario");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Khung tình huống","scenario_outline");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Khung kịch bản","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Thì","then");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Khi","when");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Nếu","if");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"NóiCáchKhácNếu","elseif");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"NóiCáchKhác","else");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам,КешПоискаКлючевыхСлов",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн),КешПоискаКлючевыхСлов(Тзн));
КонецФункции

Функция РежимСовместимостиПозволяетИспользоватьНовыеСтроковыеФункции()
	ТекущийРежимСовместимости = Неопределено;
	
	Попытка
		ТекущийРежимСовместимости = Вычислить("Метаданные.РежимСовместимости");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		РежимыСовестимости = Метаданные.СвойстваОбъектов.РежимСовместимости;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		Если ТекущийРежимСовместимости = РежимыСовестимости.Версия8_1 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_2_13 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_2_16 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_3_1 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_3_2 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_3_3 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_3_4 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_3_5 Тогда
			Возврат Ложь;
		КонецЕсли;	 
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции	

//перевод текста Gherkin
Функция СоздатьТаблицаПеревода()
	ТаблицаПеревода = Новый ТаблицаЗначений;
	ТаблицаПеревода.Колонки.Добавить("ОригиналРусскийШаг");
	ТаблицаПеревода.Колонки.Добавить("ОригиналРусскийШагПредставлениеДляПеревода");
	ТаблицаПеревода.Колонки.Добавить("ОригиналРусскийШагНРег");
	ТаблицаПеревода.Колонки.Добавить("ОригиналРусскийОписание");
	ТаблицаПеревода.Колонки.Добавить("StepDefinitionРусский");
	ТаблицаПеревода.Колонки.Добавить("СтрокаДляПоискаРусский");
	ТаблицаПеревода.Колонки.Добавить("ОбработаннаяСтрокаПараметровРусский");
	
	ТаблицаПеревода.Колонки.Добавить("ТекстПереводаШаг");
	ТаблицаПеревода.Колонки.Добавить("ТекстПереводаШагНРег");
	ТаблицаПеревода.Колонки.Добавить("ТекстПереводаОписание");
	ТаблицаПеревода.Колонки.Добавить("StepDefinitionПеревод");
	ТаблицаПеревода.Колонки.Добавить("СтрокаДляПоискаПеревод");
	ТаблицаПеревода.Колонки.Добавить("ОбработаннаяСтрокаПараметровПеревод");
	
	ТаблицаПеревода.Колонки.Добавить("ДанныеОбработкиПараметровРусский");
	ТаблицаПеревода.Колонки.Добавить("ДанныеОбработкиПараметровПеревод");
	ТаблицаПеревода.Колонки.Добавить("КлючевоеСлово");
	ТаблицаПеревода.Колонки.Добавить("НомерСтрокиВФайлеПеревода",Новый ОписаниеТипов("Число"));
	ТаблицаПеревода.Колонки.Добавить("МассивСоответствийПозицийПараметров");
	
	
	ТаблицаПеревода.Индексы.Добавить("ОригиналРусскийШагНРег");
	ТаблицаПеревода.Индексы.Добавить("StepDefinitionРусский");
	ТаблицаПеревода.Индексы.Добавить("СтрокаДляПоискаРусский");
	ТаблицаПеревода.Индексы.Добавить("СтрокаДляПоискаПеревод");
	
	Возврат ТаблицаПеревода;
КонецФункции	

Функция ВставитьВПараметрыСимволыПроцента(Знач Стр, СтруктураПараметров)
	ЗначенияПараметров = Новый СписокЗначений;
	ДанныеОбработкиПараметров = Новый Структура;
	
	МассивСтрокОригинал = РазложитьСтрокуВМассивПодстрок(Стр,Символы.ПС);
	ПерваяЧастьСтроки = МассивСтрокОригинал[0];
	ВтораяЧастьСтроки = "";
	Для Ккк = 1 По МассивСтрокОригинал.Количество()-1 Цикл
		ВтораяЧастьСтроки = ВтораяЧастьСтроки + МассивСтрокОригинал[Ккк];
		Если Ккк < МассивСтрокОригинал.Количество()-1 Тогда
			ВтораяЧастьСтроки = ВтораяЧастьСтроки + Символы.ПС;
		КонецЕсли;	 
	КонецЦикла;	
	
	StepDefinition = ПолучитьStepDefinitionПоСтроке(ПерваяЧастьСтроки,ЗначенияПараметров,,,,ДанныеОбработкиПараметров,СтруктураПараметров);
	
	КолПараметров        = 0;
	КолПараметровЧисло   = 0;
	КолПараметровСтрокаА = 0;
	КолПараметровСтрокаК = 0;
	КолПараметровДата    = 0;
	
	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(ДанныеОбработкиПараметров.ОбработаннаяСтрокаПараметров," ",Истина);
	
	Ид = -1;
	Для Каждого Элем Из МассивПодстрок Цикл
		Ид = Ид + 1;
		
		Тип = Неопределено;
		Если Элем = "||ПараметрСтрокаК||" Тогда
			КолПараметров        = КолПараметров        + 1;
			КолПараметровСтрокаК = КолПараметровСтрокаК + 1;
			
			ЗначениеПараметра = ДанныеОбработкиПараметров.ПараметрыСтрокиК[КолПараметровСтрокаК-1];
			
			Тип = "СтрокаК";
			
		ИначеЕсли Элем = "||ПараметрСтрокаА||" Тогда
			КолПараметров        = КолПараметров        + 1;
			КолПараметровСтрокаА = КолПараметровСтрокаА + 1;
			
			ЗначениеПараметра = ДанныеОбработкиПараметров.ПараметрыСтрокиА[КолПараметровСтрокаА-1];
			
			Тип = "СтрокаА";
			
		ИначеЕсли Элем = "||ПараметрЧисло||" Тогда
			КолПараметров      = КолПараметров      + 1;
			КолПараметровЧисло = КолПараметровЧисло + 1;
			
			ЗначениеПараметра = ДанныеОбработкиПараметров.ПараметрыЧисла[КолПараметровЧисло-1];
			
			Тип = "СтрокаК";
		ИначеЕсли Элем = "||ПараметрДата||" Тогда
			КолПараметров      = КолПараметров      + 1;
			КолПараметровДата  = КолПараметровДата + 1;
			
			ЗначениеПараметра = ДанныеОбработкиПараметров.ПараметрыДаты[КолПараметровДата-1];
			
			Тип = "СтрокаК";
		КонецЕсли;	 
		
		
		
		Если Тип = Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Лев(ЗначениеПараметра,1) <> "%" Тогда
			ЗначениеПараметра = "%" + Формат(КолПараметров, "ЧГ=; ЧН=0") + " " + ЗначениеПараметра;
		КонецЕсли;	 
		
		
		Представление      = ПолучитьПредставлениеПараметраПриПереводе(ЗначениеПараметра,Тип);
		МассивПодстрок[Ид] = Представление;
	КонецЦикла;		
	
	
	Ид = -1;
	Для Каждого Элем Из МассивПодстрок Цикл
		Ид = Ид + 1;
		МассивПодстрок[Ид] = СтрЗаменить(МассивПодстрок[Ид],"|||ЗаменаПробела|||"," ");
	КонецЦикла;	
	
	Стр = "";
	Для Каждого Элем Из МассивПодстрок Цикл
		Стр = Стр + Элем + " ";
	КонецЦикла;	
	
	Стр = Лев(Стр,СтрДлина(Стр)-1);
	Если ВтораяЧастьСтроки <> "" Тогда
		Стр = Стр + Символы.ПС + ВтораяЧастьСтроки;
	КонецЕсли;	 
	
	Возврат Стр;
КонецФункции	

Процедура ПроверитьТаблицаПереводаНаДубли(ТаблицаПеревода)
	КопияТаблицаПеревода = ТаблицаПеревода.Скопировать();
	КопияТаблицаПеревода.Колонки.Добавить("КоличествоРусскихШаговНаОдинСнипетПеревода",Новый ОписаниеТипов("Число")); 
	Для Каждого СтрокаКопияТаблицаПеревода Из КопияТаблицаПеревода Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКопияТаблицаПеревода.СтрокаДляПоискаПеревод) Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если СтрокаКопияТаблицаПеревода.ОригиналРусскийОписание = "Категория шагов" Тогда
		ИначеЕсли СтрокаКопияТаблицаПеревода.ОригиналРусскийОписание = "Специальный текст" Тогда
		Иначе	
			СтрокаКопияТаблицаПеревода.КоличествоРусскихШаговНаОдинСнипетПеревода = 1;
		КонецЕсли;	 
	КонецЦикла;	
	
	КопияТаблицаПеревода.Свернуть("СтрокаДляПоискаПеревод","КоличествоРусскихШаговНаОдинСнипетПеревода");	
	
	КолСтрокШапки = 1;
	Для Каждого СтрокаКопияТаблицаПеревода Из КопияТаблицаПеревода Цикл
		Если СтрДлина(СтрокаКопияТаблицаПеревода.СтрокаДляПоискаПеревод) <= 1 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если СтрокаКопияТаблицаПеревода.КоличествоРусскихШаговНаОдинСнипетПеревода > 1 Тогда
			МассивСтрок = ТаблицаПеревода.НайтиСтроки(Новый Структура("СтрокаДляПоискаПеревод",СтрокаКопияТаблицаПеревода.СтрокаДляПоискаПеревод));
			
			Если НЕ ЭтоИсключениеПеревода(МассивСтрок) Тогда
				
				СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(СтрокаКопияТаблицаПеревода.СтрокаДляПоискаПеревод,"СтрокаДляПоискаПеревод");
				СтрокаШаг = "Шаги имеющие одинаковый перевод: <" + СтрокаТаблицаПеревода.ТекстПереводаШаг + ">" + Символы.ПС;
				Для Каждого СтрокаТаблицаПеревода Из МассивСтрок Цикл
					НомерСтроки = ТаблицаПеревода.Индекс(СтрокаТаблицаПеревода)+1+КолСтрокШапки;
					СтрокаШаг = СтрокаШаг + СтрокаТаблицаПеревода.ОригиналРусскийШаг + " <Строка №" + Формат(НомерСтроки, "ЧГ=; ЧН=0") + ">" + Символы.ПС;  
				КонецЦикла;	
				
				Сообщить(СтрокаШаг);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры

Функция ДанныеИсключенийПеревода()
	
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("Зн1");
	Тзн.Колонки.Добавить("Зн2");
	
	СтрокаТзн = Тзн.Добавить();
	СтрокаТзн.Зн1 = "И я закрываю все окна клиентского приложения";
	СтрокаТзн.Зн2 = "И я закрыл все окна клиентского приложения";
	
	СтрокаТзн = Тзн.Добавить();
	СтрокаТзн.Зн1 = "И я закрываю все окна клиентского приложения кроме ""Нужное окно""";
	СтрокаТзн.Зн2 = "И я закрыл все окна клиентского приложения кроме ""Нужное окно""";
	
	Возврат Тзн;
КонецФункции	 

Функция ЭтоИсключениеПеревода(МассивСтрок)
	Если МассивСтрок.Количество() <> 2 Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	ДанныеИсключенийПеревода = ДанныеИсключенийПеревода();
	
	Для Каждого СтрокаДанныеИсключенийПеревода Из ДанныеИсключенийПеревода Цикл
		Если
			(СтрокаДанныеИсключенийПеревода.Зн1 = МассивСтрок[0].ОригиналРусскийШаг
				И СтрокаДанныеИсключенийПеревода.Зн2 = МассивСтрок[1].ОригиналРусскийШаг)
			ИЛИ
			(СтрокаДанныеИсключенийПеревода.Зн1 = МассивСтрок[1].ОригиналРусскийШаг
				И СтрокаДанныеИсключенийПеревода.Зн2 = МассивСтрок[0].ОригиналРусскийШаг)
			Тогда
			
			Возврат Истина;
			
		КонецЕсли;	 
	КонецЦикла;	 
	
	Возврат Ложь;
	
КонецФункции	 

Процедура ПрочитатьФайлПеревода(ДанныеПеревода)
	Если ДанныеПеревода.ДвоичныеДанныеФайлПеревода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПеревода.ДвоичныеДанныеФайлПеревода[ДанныеПеревода.ЯзыкПеревода] = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	ТаблицаПеревода = ДанныеПеревода.ТаблицаПеревода;
	ТабДок = ДанныеПеревода.ДвоичныеДанныеФайлПеревода[ДанныеПеревода.ЯзыкПеревода];
	
	Для Ккк = 2 По ТабДок.ВысотаТаблицы Цикл
		ОригиналРусскийШаг      = СокрЛП(ТабДок.Область(Ккк,1,Ккк,1).Текст);
		ОригиналРусскийОписание = СокрЛП(ТабДок.Область(Ккк,2,Ккк,2).Текст);
		ТекстПереводаШаг        = СокрЛП(ТабДок.Область(Ккк,3,Ккк,3).Текст);
		ТекстПереводаОписание   = СокрЛП(ТабДок.Область(Ккк,4,Ккк,4).Текст);
		
		
		Если НЕ ЗначениеЗаполнено(ОригиналРусскийШаг) Тогда
			Продолжить;
		КонецЕсли;	 
		
		//обновим описание шагов если это возможно
		
		ОписаниеШагаРусский  = ПолучитьОписаниеШагаПоСтроке(СокрЛП(ПолучитьПервуюСтрокуИзМногострочной(ОригиналРусскийШаг)),ДанныеПеревода.СтруктураПараметров);
		
		Если ДанныеПеревода.Свойство("ТаблицаИзвестныхStepDefinition") Тогда
			ТаблицаИзвестныхStepDefinition = ДанныеПеревода.ТаблицаИзвестныхStepDefinition;
			
			Поз = Найти(ОписаниеШагаРусский.StepDefinition,"(");
			СтрокаДляПоискаРусский = Лев(НРег(ОписаниеШагаРусский.StepDefinition),Поз-1);
			
			СтрокаТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinition.Найти(СтрокаДляПоискаРусский,"СтрокаДляПоиска");
			Если СтрокаТаблицаИзвестныхStepDefinition <> Неопределено Тогда
				ОригиналРусскийШаг      = СокрЛП(СтрокаТаблицаИзвестныхStepDefinition.ПредставлениеТеста);
				Если ЗначениеЗаполнено(СтрокаТаблицаИзвестныхStepDefinition.ОписаниеШага) Тогда
					//шаг мог быть переименован, и тогда у варианта  из ТаблицаИзвестныхStepDefinition может не быть описания
					ОригиналРусскийОписание = СтрокаТаблицаИзвестныхStepDefinition.ОписаниеШага;
				КонецЕсли;	 
				ОписаниеШагаРусский     = ПолучитьОписаниеШагаПоСтроке(СокрЛП(ПолучитьПервуюСтрокуИзМногострочной(ОригиналРусскийШаг)),ДанныеПеревода.СтруктураПараметров);
			КонецЕсли;
		КонецЕсли;	 
		
		
		СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(НРег(ОригиналРусскийШаг),"ОригиналРусскийШагНРег");
		
		Если СтрокаТаблицаПеревода = Неопределено Тогда
			СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(ОписаниеШагаРусский.StepDefinition,"StepDefinitionРусский");
			Если СтрокаТаблицаПеревода = Неопределено Тогда
				СтрокаТаблицаПеревода = ТаблицаПеревода.Добавить();
			ИначеЕсли СтрокаТаблицаПеревода.ОригиналРусскийОписание = "Категория шагов" Тогда
				СтрокаТаблицаПеревода = ТаблицаПеревода.Добавить();
			КонецЕсли;	 
		КонецЕсли;	 
		
		СтрокаТаблицаПеревода.ОригиналРусскийШагНРег          = НРег(ОригиналРусскийШаг);
		СтрокаТаблицаПеревода.ТекстПереводаШагНРег            = НРег(ТекстПереводаШаг);
		СтрокаТаблицаПеревода.ОригиналРусскийШаг              = ОригиналРусскийШаг;
		СтрокаТаблицаПеревода.ТекстПереводаШаг                = ТекстПереводаШаг;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицаПеревода.ОригиналРусскийОписание) Тогда
			СтрокаТаблицаПеревода.ОригиналРусскийОписание = ОригиналРусскийОписание;
		КонецЕсли;	 
		СтрокаТаблицаПеревода.ТекстПереводаОписание   = ТекстПереводаОписание;
		
		СтрокаТаблицаПеревода.НомерСтрокиВФайлеПеревода = Ккк;
	КонецЦикла;	
	
	
	Для Каждого СтрокаТаблицаПеревода Из ТаблицаПеревода Цикл
		СтрокаТаблицаПеревода.ОригиналРусскийШагПредставлениеДляПеревода = СтрокаТаблицаПеревода.ОригиналРусскийШаг; 
		
		Если СтрокаТаблицаПеревода.ОригиналРусскийОписание = "Категория шагов" Тогда
		ИначеЕсли СтрокаТаблицаПеревода.ОригиналРусскийОписание = "Специальный текст" Тогда
		Иначе	
			СтрокаТаблицаПеревода.ОригиналРусскийШагПредставлениеДляПеревода = ВставитьВПараметрыСимволыПроцента(СтрокаТаблицаПеревода.ОригиналРусскийШаг,ДанныеПеревода.СтруктураПараметров); 
		КонецЕсли;	 
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьПервуюСтрокуИзМногострочной(Знач Стр)
	Если Найти(Стр,Символы.ПС) = 0 Тогда
		Возврат Стр;
	КонецЕсли;	 
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Стр,Символы.ПС);
	Возврат МассивСтрок[0];
КонецФункции	

Процедура ДобавитьВОписаниеШагаОчередностьПараметров(ОписаниеШага)
	МассивСоответствийПозицийПараметров = Новый Массив;
	НомерПараметра = 0;
	Для Каждого ЗначениеПараметра Из ОписаниеШага.ЗначенияПараметров Цикл
		
		НомерПараметра = НомерПараметра + 1;
		ТекЗначение    = ЗначениеПараметра.Значение.Значение;
		НоваяПозиция   = -1;
		
		Если Лев(ТекЗначение,1) = "%" Тогда
			МассивСтрок = РазложитьСтрокуВМассивПодстрок(ТекЗначение," ");
			Попытка
				НоваяПозиция = Число(Сред(МассивСтрок[0],2));
			Исключение
				Сообщить(ОписаниеШага.ТекстПереводаШаг);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
			МассивСоответствийПозицийПараметров.Добавить(НоваяПозиция);
		КонецЕсли;	 
	КонецЦикла;	
	
	ОписаниеШага.Вставить("МассивСоответствийПозицийПараметров",МассивСоответствийПозицийПараметров);
КонецПроцедуры

Процедура ПолучитьСнипетыДляТаблицыПеревода(ДанныеПеревода)
	ТаблицаПеревода = ДанныеПеревода.ТаблицаПеревода;
	
	ДляПоискаПеревод = Новый Соответствие;
	ДляПоискаРусский = Новый Соответствие;
	
	Ном = 0;
	Для Каждого СтрокаТаблицаПеревода Из ТаблицаПеревода Цикл
		Ном = Ном + 1;
		ТекущийЯзыкФичаФайла = "ru";
		ОписаниеШагаРусский  = ПолучитьОписаниеШагаПоСтроке(ПолучитьПервуюСтрокуИзМногострочной(СтрокаТаблицаПеревода.ОригиналРусскийШаг),ДанныеПеревода.СтруктураПараметров);
		СтрокаТаблицаПеревода.StepDefinitionРусский               = ОписаниеШагаРусский.StepDefinition;
		Поз = Найти(СтрокаТаблицаПеревода.StepDefinitionРусский,"(");
		СтрокаТаблицаПеревода.СтрокаДляПоискаРусский              = Лев(НРег(СтрокаТаблицаПеревода.StepDefinitionРусский),Поз-1);
		СтрокаТаблицаПеревода.ОбработаннаяСтрокаПараметровРусский = ОписаниеШагаРусский.ДанныеОбработкиПараметров.ОбработаннаяСтрокаПараметров;
		
		ТекущийЯзыкФичаФайла = ДанныеПеревода.ЯзыкПеревода;
		
		ИсходникДляПолученияStepDefinitionПеревод = СтрокаТаблицаПеревода.ТекстПереводаШаг;
		ИсходникДляПолученияStepDefinitionПеревод = СтрЗаменить(ИсходникДляПолученияStepDefinitionПеревод,"'","");
		
		ОписаниеШагаПеревод  = ПолучитьОписаниеШагаПоСтроке(ПолучитьПервуюСтрокуИзМногострочной(ИсходникДляПолученияStepDefinitionПеревод),ДанныеПеревода.СтруктураПараметров);
		
		
		ДобавитьВОписаниеШагаОчередностьПараметров(ОписаниеШагаПеревод);
		СтрокаТаблицаПеревода.StepDefinitionПеревод               = ОписаниеШагаПеревод.StepDefinition;
		СтрокаТаблицаПеревода.МассивСоответствийПозицийПараметров = ОписаниеШагаПеревод.МассивСоответствийПозицийПараметров;
		Поз = Найти(СтрокаТаблицаПеревода.StepDefinitionПеревод,"(");
		СтрокаТаблицаПеревода.СтрокаДляПоискаПеревод              = Лев(НРег(СтрокаТаблицаПеревода.StepDefinitionПеревод),Поз-1);
		СтрокаТаблицаПеревода.ОбработаннаяСтрокаПараметровПеревод = ОписаниеШагаПеревод.ДанныеОбработкиПараметров.ОбработаннаяСтрокаПараметров;
		
		
		СтрокаТаблицаПеревода.ДанныеОбработкиПараметровРусский = ОписаниеШагаРусский.ДанныеОбработкиПараметров;
		СтрокаТаблицаПеревода.ДанныеОбработкиПараметровПеревод = ОписаниеШагаПеревод.ДанныеОбработкиПараметров;
		СтрокаТаблицаПеревода.КлючевоеСлово                    = ОписаниеШагаРусский.КлючевоеСлово;
		
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("ТекстПереводаШаг",СтрокаТаблицаПеревода.ТекстПереводаШаг);
		ДанныеСтроки.Вставить("СтрокаДляПоискаРусский",СтрокаТаблицаПеревода.СтрокаДляПоискаРусский);
		ДанныеСтроки.Вставить("СтрокаДляПоискаПеревод",СтрокаТаблицаПеревода.СтрокаДляПоискаПеревод);
		ДанныеСтроки.Вставить("МассивСоответствийПозицийПараметров",СтрокаТаблицаПеревода.МассивСоответствийПозицийПараметров);
		
		ДляПоискаПеревод.Вставить(СтрокаТаблицаПеревода.СтрокаДляПоискаПеревод,ДанныеСтроки);
		ДляПоискаРусский.Вставить(СтрокаТаблицаПеревода.СтрокаДляПоискаРусский,ДанныеСтроки);
	КонецЦикла;
	
	ДанныеПеревода.СтруктураПараметров.Вставить("ДляПоискаПеревод",ДляПоискаПеревод);
	ДанныеПеревода.СтруктураПараметров.Вставить("ДляПоискаРусский",ДляПоискаРусский);
КонецПроцедуры

Функция ПолучитьПредставлениеПараметраПриПереводе(Значение,Тип)
	Если Тип = "СтрокаК" Тогда
		Возврат """" + ЭкранироватьСпецСимволыДляЗначенияШага(Значение) + """";
	ИначеЕсли Тип = "СтрокаА" Тогда
		Возврат "'" + ЭкранироватьСпецСимволыДляЗначенияШага(Значение) + "'";
	ИначеЕсли Тип = "Число" Тогда
		Возврат Значение;
	ИначеЕсли Тип = "Дата" Тогда
		Возврат Значение;
	Иначе
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не известный тип параметра в ПолучитьПредставлениеПараметраПриПереводе() <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Тип);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции	

Функция ВернутьВСтрокуПараметры(Знач Стр,ДанныеПеревода,ДанныеОбработкиПараметровРусский,ДанныеОбработкиПараметровПеревод)
	КолПараметров        = 0;
	КолПараметровЧисло   = 0;
	КолПараметровСтрокаА = 0;
	КолПараметровСтрокаК = 0;
	КолПараметровДата    = 0;
	
	
	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(Стр," ",Истина);
	
	
	Ид = -1;
	Для Каждого Элем Из МассивПодстрок Цикл
		Ид = Ид + 1;
		
		Тип = Неопределено;
		Если Элем = "||ПараметрСтрокаК||" Тогда
			КолПараметров        = КолПараметров        + 1;
			КолПараметровСтрокаК = КолПараметровСтрокаК + 1;
			
			
			ЗначениеПараметраРусский = ДанныеОбработкиПараметровРусский.ЗначенияПараметров[КолПараметров-1].Значение.Значение;
			ЗначениеПараметраПеревод = ДанныеОбработкиПараметровПеревод.ЗначенияПараметров[КолПараметров-1].Значение.Значение;
			//ЗначениеПараметраРусский = ДанныеОбработкиПараметровРусский.ПараметрыСтрокиК[КолПараметровСтрокаК-1];
			//ЗначениеПараметраПеревод = ДанныеОбработкиПараметровПеревод.ПараметрыСтрокиК[КолПараметровСтрокаК-1];
			
			Тип = "СтрокаК";
			
		ИначеЕсли Элем = "||ПараметрСтрокаА||" Тогда
			КолПараметров        = КолПараметров        + 1;
			КолПараметровСтрокаА = КолПараметровСтрокаА + 1;
			
			ЗначениеПараметраРусский = ДанныеОбработкиПараметровРусский.ЗначенияПараметров[КолПараметров-1].Значение.Значение;
			ЗначениеПараметраПеревод = ДанныеОбработкиПараметровПеревод.ЗначенияПараметров[КолПараметров-1].Значение.Значение;
			//ЗначениеПараметраРусский = ДанныеОбработкиПараметровРусский.ПараметрыСтрокиА[КолПараметровСтрокаА-1];
			//ЗначениеПараметраПеревод = ДанныеОбработкиПараметровПеревод.ПараметрыСтрокиА[КолПараметровСтрокаА-1];
			
			Тип = "СтрокаА";
			
		ИначеЕсли Элем = "||ПараметрЧисло||" Тогда
			КолПараметров      = КолПараметров      + 1;
			КолПараметровЧисло = КолПараметровЧисло + 1;
			
			ЗначениеПараметраРусский = ДанныеОбработкиПараметровРусский.ЗначенияПараметров[КолПараметров-1].Значение.Значение;
			ЗначениеПараметраПеревод = ДанныеОбработкиПараметровПеревод.ЗначенияПараметров[КолПараметров-1].Значение.Значение;
			//ЗначениеПараметраРусский = ДанныеОбработкиПараметровРусский.ПараметрыЧисла[КолПараметровЧисло-1];
			//ЗначениеПараметраПеревод = ДанныеОбработкиПараметровПеревод.ПараметрыЧисла[КолПараметровЧисло-1];
			
			Тип = "Число";
		ИначеЕсли Элем = "||ПараметрДата||" Тогда
			КолПараметров      = КолПараметров      + 1;
			КолПараметровДата  = КолПараметровДата + 1;
			
			ЗначениеПараметраРусский = ДанныеОбработкиПараметровРусский.ЗначенияПараметров[КолПараметров-1].Значение.Значение;
			ЗначениеПараметраПеревод = ДанныеОбработкиПараметровПеревод.ЗначенияПараметров[КолПараметров-1].Значение.Значение;
			//ЗначениеПараметраРусский = ДанныеОбработкиПараметровРусский.ПараметрыДаты[КолПараметровДата-1];
			//ЗначениеПараметраПеревод = ДанныеОбработкиПараметровПеревод.ПараметрыДаты[КолПараметровДата-1];
			
			Тип = "Дата";
		КонецЕсли;	 
		
		
		
		Если Тип = Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		
		
		МассивСтрокЗначениеПараметраПеревод = РазложитьСтрокуВМассивПодстрок(ЗначениеПараметраПеревод," ");
		Если Лев(МассивСтрокЗначениеПараметраПеревод[0],1) = "%" Тогда
			//подставим значения, у которых указаны проценты первым символом
			//значит явно указан номер параметра
			
			НомерПараметра = Число(Сред(МассивСтрокЗначениеПараметраПеревод[0],2));
			
			ПараметрРусский = ДанныеОбработкиПараметровРусский.ЗначенияПараметров[НомерПараметра-1];
			Если ПараметрРусский.Значение.Тип  <> "Строка" Тогда
				Тип = ПараметрРусский.Значение.Тип;
			КонецЕсли;
			
			Если МассивСтрокЗначениеПараметраПеревод.Количество() = 1 Тогда
				//значит в качестве параметра указано просто %1 - т.е. только номер, но нет значения параметра, например: "%1 ЗначениеПараметра"
				//поэтому берём значение из русского варианта
				Значение = ПараметрРусский.Значение.Значение;
			Иначе
				Если ДанныеПеревода.Свойство("ФормированиеТаблицыДляДальнейшегоПеревода") и ДанныеПеревода.ФормированиеТаблицыДляДальнейшегоПеревода Тогда
					//надо взять значение параметра из текста перевода, если он там есть
					//значит берём значение из строки, которая идёт после %1
					Значение = "";
					Для Ккк = 1 По МассивСтрокЗначениеПараметраПеревод.Количество()-1 Цикл
						Значение = Значение + МассивСтрокЗначениеПараметраПеревод[Ккк] + " ";
					КонецЦикла;	
					Значение = Лев(Значение,СтрДлина(Значение)-1);//убрали лишний пробел
				Иначе	
					//значит это происходит перевод реальной фичи - и надо брать параметры из русского
					Значение = ПараметрРусский.Значение.Значение;
				КонецЕсли;	 
			КонецЕсли;	 
			
			ПредставлениеПараметра = ПолучитьПредставлениеПараметраПриПереводе(Значение,Тип);
			
		Иначе	
			ПредставлениеПараметра = ПолучитьПредставлениеПараметраПриПереводе(ЗначениеПараметраРусский,Тип);
		КонецЕсли;	 
		

		МассивПодстрок[Ид] = ПредставлениеПараметра;
	КонецЦикла;		
	
	
	Ид = -1;
	Для Каждого Элем Из МассивПодстрок Цикл
		Ид = Ид + 1;
		МассивПодстрок[Ид] = СтрЗаменить(МассивПодстрок[Ид],"|||ЗаменаПробела|||"," ");
	КонецЦикла;	
	
	
	
	
	Стр = "";
	Для Каждого Элем Из МассивПодстрок Цикл
		Стр = Стр + Элем + " ";
	КонецЦикла;	
	
	Возврат Лев(Стр,СтрДлина(Стр)-1);
КонецФункции	

Функция ПеревестиТекстПоТаблицеПеревода(ДанныеПеревода)
	ТекстДляПеревода = ДанныеПеревода.ТекстДляПеревода;
	ТаблицаПеревода  = ДанныеПеревода.ТаблицаПеревода;
	
	МассивСтрокПеревод = Новый Массив;
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(ТекстДляПеревода,Символы.ПС);
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		СтрокаОригинал = МассивСтрок[Ккк];
		Стр            = СокрЛП(МассивСтрок[Ккк]);
		ПрефиксСтроки  = Лев(СтрокаОригинал,Найти(СтрокаОригинал,Стр)-1);
		
		Если Стр = "" Тогда
			МассивСтрокПеревод.Добавить(СтрокаОригинал);
			Продолжить;
		ИначеЕсли Лев(Стр,1) = "@" Тогда
			МассивСтрокПеревод.Добавить(СтрокаОригинал);
			Продолжить;
		ИначеЕсли Лев(Стр,9) = "#language" Тогда
			МассивСтрокПеревод.Добавить("#language: " + ДанныеПеревода.ЯзыкПеревода);
			Продолжить;
		ИначеЕсли Лев(Стр,1) = "#" Тогда
			МассивСтрокПеревод.Добавить(СтрокаОригинал);
			Продолжить;
		ИначеЕсли Лев(Стр,2) = "//" Тогда
			МассивСтрокПеревод.Добавить(СтрокаОригинал);
			Продолжить;
		ИначеЕсли Лев(НРег(Стр),9) = "сценарий:" Тогда
			Имя = СокрЛП(Сред(Стр, 10));
			СтрокаТаблицаПеревода = ТаблицаПеревода.Найти("Сценарий:","ОригиналРусскийШаг");
			Если СтрокаТаблицаПеревода <> Неопределено Тогда
				МассивСтрокПеревод.Добавить(СтрокаТаблицаПеревода.ТекстПереводаШаг + " " + Имя);
				Продолжить;
			КонецЕсли;	 
		ИначеЕсли Лев(НРег(Стр),11) = "функционал:" Тогда
			Имя = СокрЛП(Сред(Стр, 12));
			СтрокаТаблицаПеревода = ТаблицаПеревода.Найти("Функционал:","ОригиналРусскийШаг");
			Если СтрокаТаблицаПеревода <> Неопределено Тогда
				МассивСтрокПеревод.Добавить(СтрокаТаблицаПеревода.ТекстПереводаШаг + " " + Имя);
				Продолжить;
			КонецЕсли;	 
		ИначеЕсли Лев(НРег(Стр),16) = "функциональность:" Тогда
			Имя = СокрЛП(Сред(Стр, 17));
			СтрокаТаблицаПеревода = ТаблицаПеревода.Найти("Функциональность:","ОригиналРусскийШаг");
			Если СтрокаТаблицаПеревода <> Неопределено Тогда
				МассивСтрокПеревод.Добавить(СтрокаТаблицаПеревода.ТекстПереводаШаг + " " + Имя);
				Продолжить;
			КонецЕсли;	 
		ИначеЕсли Лев(НРег(Стр),19) = "структура сценария:" Тогда
			Имя = СокрЛП(Сред(Стр, 20));
			СтрокаТаблицаПеревода = ТаблицаПеревода.Найти("Структура сценария:","ОригиналРусскийШаг");
			Если СтрокаТаблицаПеревода <> Неопределено Тогда
				МассивСтрокПеревод.Добавить(СтрокаТаблицаПеревода.ТекстПереводаШаг + " " + Имя);
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
			
		
		ТекущийЯзыкФичаФайла  = "ru";
		ОписаниеШагаРусский   = ПолучитьОписаниеШагаПоСтроке(Стр,ДанныеПеревода.СтруктураПараметров);
		StepDefinitionРусский = ОписаниеШагаРусский.StepDefinition;
		
		СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(StepDefinitionРусский,"StepDefinitionРусский");
		Если СтрокаТаблицаПеревода <> Неопределено и СтрокаТаблицаПеревода.StepDefinitionРусский <> "_()" Тогда
			
			Если СтрокаТаблицаПеревода.ОригиналРусскийОписание = "Специальный текст" Тогда
				МассивСтрокПеревод.Добавить(СтрокаТаблицаПеревода.ТекстПереводаШаг);
				Продолжить;
			КонецЕсли;	 
			
			Если СтрокаТаблицаПеревода.ОригиналРусскийОписание = "Категория шагов" Тогда
				МассивСтрокПеревод.Добавить(СтрокаТаблицаПеревода.ТекстПереводаШаг);
				Продолжить;
			КонецЕсли;	 
			
			Если СтрокаТаблицаПеревода.КлючевоеСлово = "scenario" Тогда
				//ищем прямой перевод
				СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(НРег(Стр),"ОригиналРусскийШагНРег");
				Если СтрокаТаблицаПеревода <> Неопределено Тогда
					МассивСтрокПеревод.Добавить(ПрефиксСтроки + СтрокаТаблицаПеревода.ТекстПереводаШаг);
					Продолжить;
				КонецЕсли;	 
			КонецЕсли;	  
			
			
			
			Попытка
				СтрокаСПравильнымиПараметрами = ВернутьВСтрокуПараметры(
				   СтрокаТаблицаПеревода.ОбработаннаяСтрокаПараметровПеревод,ДанныеПеревода,
				   ОписаниеШагаРусский.ДанныеОбработкиПараметров,СтрокаТаблицаПеревода.ДанныеОбработкиПараметровПеревод);
			Исключение
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не получилось подставить в строку параметры: <%1>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаТаблицаПеревода.ОбработаннаяСтрокаПараметровПеревод);    
				ТекстСообщения = ТекстСообщения + " " + ОписаниеОшибки();
				   
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			
			   
			   
			ТаблицаКлючевыхСловПеревод = ДанныеПеревода.КлючевыеСловаПеревод.ТаблицаКлючевыхСлов;
			КлючевоеСлово = "";
			СтрокаТаблицаКлючевыхСлов = ТаблицаКлючевыхСловПеревод.Найти(СтрокаТаблицаПеревода.КлючевоеСлово,"Тип");
			Если СтрокаТаблицаКлючевыхСлов = Неопределено Тогда
				СтрокаТаблицаКлючевыхСлов = ТаблицаКлючевыхСловПеревод.Найти("and","Тип");
			КонецЕсли;	 
			
			Если СтрокаТаблицаКлючевыхСлов = Неопределено Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не найдено ключевое слово <%1>  для языка <%2>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаТаблицаПеревода.КлючевоеСлово);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ДанныеПеревода.ЯзыкПеревода);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	
			
			
			СтрокаПеревода = ПрефиксСтроки + СделатьПервуюБуквуЗаглавной(СтрокаТаблицаКлючевыхСлов.Слово) + " " + СтрокаСПравильнымиПараметрами;
			//СтрокаПеревода = СтрЗаменить(СтрокаПеревода,"_","-");
			МассивСтрокПеревод.Добавить(СтрокаПеревода);
				 
			Продолжить;
		КонецЕсли;	 
		
		//ищем прямой перевод
		СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(НРег(Стр),"ОригиналРусскийШагНРег");
		Если СтрокаТаблицаПеревода <> Неопределено Тогда
			МассивСтрокПеревод.Добавить(ПрефиксСтроки + СтрокаТаблицаПеревода.ТекстПереводаШаг);
			Продолжить;
		КонецЕсли;	 
		
		
		СтрокаДляПеревода = СтрокаОригинал;
		Если Лев(СокрЛП(СтрокаДляПеревода),1) <> "|" Тогда
			Если Лев(СокрЛП(СтрокаДляПеревода),3) <> "!!!" Тогда
				СтрокаДляПеревода = "!!!" + СтрокаДляПеревода;
			КонецЕсли;	 
		КонецЕсли;	
		МассивСтрокПеревод.Добавить(СтрокаДляПеревода);
	КонецЦикла;	
	
	Стр = "";
	Для Сч = 0 По МассивСтрокПеревод.Количество() - 1 Цикл
		Если Сч < МассивСтрокПеревод.Количество() - 1 Тогда
			Стр = Стр + МассивСтрокПеревод[Сч] + Символы.ПС;
		Иначе	
			Стр = Стр + МассивСтрокПеревод[Сч];
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Стр;
КонецФункции	

Функция СделатьПереводТекстаGherkin(ДанныеПеревода) Экспорт
	
	ДанныеПеревода.Вставить("КлючевыеСловаРусский",СоответствиеТаблицПереводов["ru"]);
	ДанныеПеревода.Вставить("КлючевыеСловаПеревод",СоответствиеТаблицПереводов[ДанныеПеревода.ЯзыкПеревода]);
	
	ЯзыкКеш = ДанныеПеревода.КешДанныеПеревода.Язык;
	
	Если ДанныеПеревода.КешДанныеПеревода.ТаблицаПеревода = Неопределено или ЯзыкКеш <> ДанныеПеревода.ЯзыкПеревода Тогда
		ТаблицаПеревода = СоздатьТаблицаПеревода();
		
		ДанныеПеревода.Вставить("ТаблицаПеревода",ТаблицаПеревода);
		ПрочитатьФайлПеревода(ДанныеПеревода);
		
		ПолучитьСнипетыДляТаблицыПеревода(ДанныеПеревода);
		
		UID = Новый УникальныйИдентификатор;
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ТаблицаПеревода,UID);
		ДанныеПеревода.КешДанныеПеревода.СоответствиеПоЯзыкам.Вставить(ДанныеПеревода.ЯзыкПеревода, АдресВременногоХранилища);
		
	Иначе	
		Если ТипЗнч(ДанныеПеревода.КешДанныеПеревода.ТаблицаПеревода) = Тип("Строка") Тогда
			//ДанныеПеревода.Вставить("ТаблицаПеревода",ЗначениеИзСтрокиВнутр(ДанныеПеревода.КешДанныеПеревода.ТаблицаПеревода));
			ДанныеПеревода.Вставить("ТаблицаПеревода",ПолучитьИзВременногоХранилища((ДанныеПеревода.КешДанныеПеревода.ТаблицаПеревода)));
			УдалитьИзВременногоХранилища(ДанныеПеревода.КешДанныеПеревода.ТаблицаПеревода);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Перевод = ПеревестиТекстПоТаблицеПеревода(ДанныеПеревода);
	ДанныеПеревода.Вставить("Перевод",Перевод);
	
	ДанныеПеревода.Вставить("КлючевыеСловаРусский",Неопределено);
	ДанныеПеревода.Вставить("КлючевыеСловаПеревод",Неопределено);
КонецФункции	

Функция ПолучитьПереводТекстаGherkin(ДанныеПеревода) Экспорт
	ДанныеПеревода.Вставить("ТабДок",Неопределено);
	
	ТаблицаПеревода = СоздатьТаблицаПеревода();
	
	
	Для Каждого СтрокаТаблицаДляПереводаИзвестныхШагов Из ДанныеПеревода.ТаблицаДляПереводаИзвестныхШагов Цикл
		СтрокаТаблицаПеревода                        = ТаблицаПеревода.Добавить();
		СтрокаТаблицаПеревода.ОригиналРусскийШаг     = СтрокаТаблицаДляПереводаИзвестныхШагов.ОригиналРусскийШаг;
		СтрокаТаблицаПеревода.ОригиналРусскийШагПредставлениеДляПеревода = СтрокаТаблицаДляПереводаИзвестныхШагов.ОригиналРусскийШаг;
		СтрокаТаблицаПеревода.ОригиналРусскийШагНРег = НРег(СтрокаТаблицаДляПереводаИзвестныхШагов.ОригиналРусскийШаг);
		
		СтрокаТаблицаПеревода.ОригиналРусскийОписание = СтрокаТаблицаДляПереводаИзвестныхШагов.ОригиналРусскийОписаниеШага;
		
		ОписаниеШагаРусский                          = ПолучитьОписаниеШагаПоСтроке(ПолучитьПервуюСтрокуИзМногострочной(СтрокаТаблицаПеревода.ОригиналРусскийШаг),ДанныеПеревода.СтруктураПараметров);
		СтрокаТаблицаПеревода.StepDefinitionРусский  = ОписаниеШагаРусский.StepDefinition;
	КонецЦикла;	
	
	
	ДанныеПеревода.Вставить("КлючевыеСловаРусский",СоответствиеТаблицПереводов["ru"]);
	ДанныеПеревода.Вставить("КлючевыеСловаПеревод",СоответствиеТаблицПереводов[ДанныеПеревода.ЯзыкПеревода]);
	
	ДанныеПеревода.Вставить("ТаблицаПеревода",ТаблицаПеревода);
	ПрочитатьФайлПеревода(ДанныеПеревода);
	
	ПолучитьСнипетыДляТаблицыПеревода(ДанныеПеревода);
	
	//проверим ТаблицаПеревода на дубли
	ПроверитьТаблицаПереводаНаДубли(ТаблицаПеревода);
	
	Для Каждого СтрокаТаблицаПеревода Из ТаблицаПеревода Цикл
		Если СтрокаТаблицаПеревода.НомерСтрокиВФайлеПеревода = 0 Тогда
			СтрокаТаблицаПеревода.НомерСтрокиВФайлеПеревода = 10000000;
		КонецЕсли;
		
		Если СтрокаТаблицаПеревода.ОригиналРусскийОписание = "Категория шагов" Тогда
			СтрокаТаблицаПеревода.НомерСтрокиВФайлеПеревода = -2;
		ИначеЕсли СтрокаТаблицаПеревода.ОригиналРусскийОписание = "Специальный текст" Тогда
			СтрокаТаблицаПеревода.НомерСтрокиВФайлеПеревода = -3;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТаблицаПеревода.ТекстПереводаШаг) Тогда
			//выводим наверх то что не переведено.
			СтрокаТаблицаПеревода.НомерСтрокиВФайлеПеревода = -1;
		КонецЕсли;	 
	КонецЦикла;	
	
	ТаблицаПеревода.Сортировать("НомерСтрокиВФайлеПеревода,ОригиналРусскийШаг");
	
	ТабДок = ДанныеПеревода.МакетШаблонПеревода;
	Сч = 1;
	Для Каждого СтрокаТаблицаПеревода Из ТаблицаПеревода Цикл
		Сч = Сч + 1;
		ТабДок.Область(Сч,1,Сч,1).Текст = СтрокаТаблицаПеревода.ОригиналРусскийШагПредставлениеДляПеревода;
		ТабДок.Область(Сч,2,Сч,2).Текст = СтрокаТаблицаПеревода.ОригиналРусскийОписание;
		ТабДок.Область(Сч,3,Сч,3).Текст = СтрокаТаблицаПеревода.ТекстПереводаШаг;
		ТабДок.Область(Сч,4,Сч,4).Текст = СтрокаТаблицаПеревода.ТекстПереводаОписание;
	КонецЦикла;	
	
	ДанныеПеревода.Вставить("ТабДок",ТабДок);
КонецФункции	

Функция ПолучитьТаблицуПеревода(СтруктураПараметров)
	ТаблицаПеревода = СоздатьТаблицаПеревода();
	
	Если Не СтруктураПараметров.Свойство("ДвоичныеДанныеФайлПеревода") Тогда
		Возврат ТаблицаПеревода;
	КонецЕсли;	 
	
	
	ДанныеПеревода = Новый Структура;
	
	ТекущийЯзык = "ru";
	
	ДанныеПеревода.Вставить("КлючевыеСловаРусский",СоответствиеТаблицПереводов["ru"]);
	Если СтруктураПараметров.Свойство("ЭтоЗагрузкаФич") и СтруктураПараметров.ЭтоЗагрузкаФич Тогда
		ТекущийЯзык = ТекущийЯзыкФичаФайла;
	Иначе	
		ТекущийЯзык = СтруктураПараметров.ЯзыкГенератораGherkin;
	КонецЕсли;	 
	ДанныеПеревода.Вставить("КлючевыеСловаПеревод",СоответствиеТаблицПереводов[ТекущийЯзык]);
	
	
	ДанныеПеревода.Вставить("ТаблицаПеревода",ТаблицаПеревода);
	ДанныеПеревода.Вставить("ДвоичныеДанныеФайлПеревода",СтруктураПараметров.ДвоичныеДанныеФайлПеревода);
	
	ДанныеПеревода.Вставить("ЯзыкПеревода",ТекущийЯзык);
	ДанныеПеревода.Вставить("СтруктураПараметров",СтруктураПараметров);
	
	ПрочитатьФайлПеревода(ДанныеПеревода);
	ПолучитьСнипетыДляТаблицыПеревода(ДанныеПеревода);
	Возврат ТаблицаПеревода;
КонецФункции	

Функция УниверсальноеПолноеИмяФайла(Знач ПолноеИмяФайлаИлиФайл, ВНРегистр = Ложь)
	ПолноеИмяФайла = ПолноеИмяФайлаИлиФайл;
	Если ТипЗнч(ПолноеИмяФайлаИлиФайл ) = Тип("Файл") Тогда
		ПолноеИмяФайла = ПолноеИмяФайлаИлиФайл.ПолноеИмя;
	КонецЕсли;

	УниверсальноеПолноеИмя = СтрЗаменить(ПолноеИмяФайла, "\", "/");
	Если ВНРегистр Тогда
		УниверсальноеПолноеИмя = НРег(УниверсальноеПолноеИмя);
	КонецЕсли;

	Возврат УниверсальноеПолноеИмя;
КонецФункции

Функция УниверсальноеИмяФайла(Стр)
	Возврат НРег(СтрЗаменить(Стр, "\", "/")); 
КонецФункции	 

Функция КешСловИмпортПеременных()
	
	Результат = Новый Соответствие;
	Результат.Вставить("import", Истина);
	Результат.Вставить("using", Истина);
	Результат.Вставить("импорт", Истина);
	Результат.Вставить("подключить", Истина);
	Возврат Результат; 
	
КонецФункции	 

Функция ПреобразоватьМассивСтрокВДанныеПеременных(МассивСтрок, СтруктураПараметров, СчетчикСтрокФичи, ПростыеПеременныеИзСекцииПеременныеЭтойФичи, ТаблицаПеременныхИзСекцииПеременныеЭтойФичи, ПростыеПеременныеКакВФайлеЭтойФичи, ДанныеЭкспортныхПеременных, ИмяФайла, ИмяФайлаФичиИмпорт)
	СтрокаФичиЭкспортныхПеременных = Неопределено;
	Если ЗначениеЗаполнено(ИмяФайлаФичиИмпорт) Тогда
		СтрокаФичиЭкспортныхПеременных = Новый Структура;
		Файл = Новый Файл(ИмяФайлаФичиИмпорт);
		СтрокаФичиЭкспортныхПеременных.Вставить("name", Файл.Имя);
		СтрокаФичиЭкспортныхПеременных.Вставить("path", ИмяФайлаФичиИмпорт);
		СтрокаФичиЭкспортныхПеременных.Вставить("items", Новый Массив);
		ДанныеЭкспортныхПеременных.Добавить(СтрокаФичиЭкспортныхПеременных);
	КонецЕсли;	 
	
	КешТаблицИмпорт = Новый Соответствие;
	ИмяТаблицыПеременных = "";
	УниверсальноеИмяФайла = УниверсальноеИмяФайла(ИмяФайла);
	ИдетСчитываниеМногострочногоПараметра = Ложь;
	МногострочнаяСтрока = "";
	ИмяМногоСтрочнойПеременной = "";
	СчетчикСтрок = 0;
	ИдСтрокиТаблицы = -1;
	Для Каждого ДанныеСтроки Из МассивСтрок Цикл
		СчетчикСтрок = ДанныеСтроки.НомерСтроки;
		СтрИсходная = ДанныеСтроки.Стр;
		
		Если НЕ ЗначениеЗаполнено(СтрИсходная) Тогда
			ИмяТаблицыПеременных = "";
		КонецЕсли;	 
		
		Стр = СокрЛП(СтрИсходная);
		Если Лев(Стр, 3) = """""""" Тогда
			ИдетСчитываниеМногострочногоПараметра = НЕ ИдетСчитываниеМногострочногоПараметра;
			Если НЕ ИдетСчитываниеМногострочногоПараметра Тогда
				ДанныеПеременной = Новый Структура;
				ДанныеПеременной.Вставить("Имя", ИмяМногоСтрочнойПеременной);
				ДанныеПеременной.Вставить("Значение", МногострочнаяСтрока);
				ДанныеПеременной.Вставить("Тип", "Строка");
				ДанныеПеременной.Вставить("НомерСтроки", СчетчикСтрок);
				ПростыеПеременныеИзСекцииПеременныеЭтойФичи.Вставить(НРег(ИмяМногоСтрочнойПеременной), ДанныеПеременной);
				СтруктураПараметров.ДанныеСекцииПеременные.ЕстьТаблицаПеременных.Вставить(УниверсальноеИмяФайла, Истина);
				ПростыеПеременныеКакВФайлеЭтойФичи.Добавить(ИмяМногоСтрочнойПеременной);
				МногострочнаяСтрока = "";
				
				Если ЗначениеЗаполнено(ИмяФайлаФичиИмпорт) Тогда
					ДанныеПеременнойИмпорт = Новый Структура;
					ДанныеПеременнойИмпорт.Вставить("name", ИмяМногоСтрочнойПеременной);
					ДанныеПеременнойИмпорт.Вставить("line", СчетчикСтрок);
					ДанныеПеременнойИмпорт.Вставить("text", Стр);
					Value = Новый Структура;
					Value.Вставить("column", 1);
					Value.Вставить("symbol", "'");
					Value.Вставить("text", МногострочнаяСтрока);
					Value.Вставить("type", "Param");
					ДанныеПеременнойИмпорт.Вставить("value", Value);
					СтрокаФичиЭкспортныхПеременных.items.Добавить(ДанныеПеременнойИмпорт);
				КонецЕсли;	 
				
			КонецЕсли;	 
			
			Продолжить;
		КонецЕсли;	 
		
		Если ИдетСчитываниеМногострочногоПараметра Тогда
			Если ПустаяСтрока(МногострочнаяСтрока) Тогда
				МногострочнаяСтрока = СокрЛП(СтрИсходная);
			Иначе	
				МногострочнаяСтрока = МногострочнаяСтрока + Символы.ПС + СокрЛП(СтрИсходная);
			КонецЕсли;	 
			Продолжить;
		КонецЕсли;	 
		
		Поз = Найти(Стр, "=");
		Если Поз > 0 И Лев(Стр, 1) <> "|" Тогда
			Если Прав(Стр, 1) = "=" Тогда
				//Значит это объявление многострочной переменной
				ИмяМногоСтрочнойПеременной = СокрЛП(Лев(Стр, Поз - 1));
			Иначе
				ИмяПеременной = СокрЛП(Лев(Стр, Поз - 1));
				ЗначениеПеременной = СокрЛП(Сред(Стр, Поз + 1));
				ЗначениеПеременной = ОбработатьСпецСимволыДляЗначенияПеременной(УбратьОбрамляющиеСимволыИзСтроки(ЗначениеПеременной));
				ДанныеПеременной = Новый Структура;
				ДанныеПеременной.Вставить("Имя", ИмяПеременной);
				ДанныеПеременной.Вставить("ПолныйПутьКФиче", ИмяФайлаФичиИмпорт);
				ДанныеПеременной.Вставить("Значение", ЗначениеПеременной);
				ТипПеременной = ОпределитьТипЗначенияИзСекцииПеременные(ЗначениеПеременной);
				ДанныеПеременной.Вставить("Тип", ТипПеременной);
				ДанныеПеременной.Вставить("НомерСтроки", СчетчикСтрок);
				ПростыеПеременныеИзСекцииПеременныеЭтойФичи.Вставить(НРег(ИмяПеременной), ДанныеПеременной);
				СтруктураПараметров.ДанныеСекцииПеременные.ЕстьТаблицаПеременных.Вставить(УниверсальноеИмяФайла, Истина);
				
				ПростыеПеременныеКакВФайлеЭтойФичи.Добавить(ИмяПеременной);
				
				Если ЗначениеЗаполнено(ИмяФайлаФичиИмпорт) Тогда
					ДанныеПеременнойИмпорт = Новый Структура;
					ДанныеПеременнойИмпорт.Вставить("name", ИмяПеременной);
					ДанныеПеременнойИмпорт.Вставить("line", СчетчикСтрок);
					ДанныеПеременнойИмпорт.Вставить("text", Стр);
					Value = Новый Структура;
					Value.Вставить("column", 1);
					Value.Вставить("symbol", "'");
					Value.Вставить("text", ЗначениеПеременной);
					Value.Вставить("type", "Param");
					ДанныеПеременнойИмпорт.Вставить("value", Value);
					СтрокаФичиЭкспортныхПеременных.items.Добавить(ДанныеПеременнойИмпорт);
				КонецЕсли;	 
				
			КонецЕсли;
		ИначеЕсли Лев(Стр, 1) = "*" Тогда
			// Это объявление таблицы переменных
			ИмяТаблицыПеременных = СокрЛП(Сред(Стр, 2));
			НомерСтрокиСИменемТаблицы = СчетчикСтрок;
		ИначеЕсли Лев(Стр, 1) = "|" Тогда
			// Идет чтение таблицы переменных
			ОбъектСоСтрокой = Новый Структура;
			ОбъектСоСтрокой.Вставить("Стр", Стр);
			Данные = ОпределитьПараметрыВСтрокеПримераПарсерФич(ОбъектСоСтрокой, СтруктураПараметров);
			ОчиститьЗначенияВСпискеОтОбрамляющихСпецсимволов(Данные);
			
			Если ТаблицаПеременныхИзСекцииПеременныеЭтойФичи[НРег(ИмяТаблицыПеременных)] = Неопределено Тогда
				ДанныеТаблицы = Новый Структура;
				ДанныеТаблицы.Вставить("ПолныйПутьКФиче", ИмяФайлаФичиИмпорт);
				ДанныеТаблицы.Вставить("Колонки", Новый Массив);
				ДанныеТаблицы.Вставить("Значения", Новый Структура);
				ТаблицаПеременныхИзСекцииПеременныеЭтойФичи.Вставить(НРег(ИмяТаблицыПеременных), ДанныеТаблицы);
				СтруктураПараметров.ДанныеСекцииПеременные.ЕстьТаблицаПеременных.Вставить(УниверсальноеИмяФайла, Истина);
			КонецЕсли;	 
			
			Если ЗначениеЗаполнено(ИмяФайлаФичиИмпорт) Тогда
				Если КешТаблицИмпорт[ИмяТаблицыПеременных] = Неопределено Тогда
					КешТаблицИмпорт.Вставить(ИмяТаблицыПеременных, ИмяТаблицыПеременных);
					
					ДанныеПеременнойИмпорт = Новый Структура;
					Если ЗначениеЗаполнено(ИмяТаблицыПеременных) Тогда
						ДанныеПеременнойИмпорт.Вставить("name", ИмяТаблицыПеременных);
						ДанныеПеременнойИмпорт.Вставить("text", "*" + ИмяТаблицыПеременных);
						ДанныеПеременнойИмпорт.Вставить("line", НомерСтрокиСИменемТаблицы);
					КонецЕсли;	 
					table = Новый Структура;
					table.Вставить("body", Новый Массив);
					table.Вставить("head", Новый Структура);
					table.head.Вставить("line", СчетчикСтрок);
					table.head.Вставить("text", Стр);
					table.head.Вставить("tokens", Новый Массив);
					ДанныеПеременнойИмпорт.Вставить("table", table);
					СтрокаФичиЭкспортныхПеременных.items.Добавить(ДанныеПеременнойИмпорт);
				КонецЕсли;	 
			КонецЕсли;	 
			
			ДанныеТаблицы = ТаблицаПеременныхИзСекцииПеременныеЭтойФичи[НРег(ИмяТаблицыПеременных)];
			Если ДанныеТаблицы.Колонки.Количество() = 0 Тогда
				Для Каждого Элем Из Данные Цикл
					ДанныеТаблицы.Колонки.Добавить(Элем.Значение);
				КонецЦикла;
			Иначе
				ИмяПеременнойИзТаблицы = Данные[0].Значение;
				ДанныеСтроки = Новый Структура;
				ДанныеСтроки.Вставить("_НомерСтроки_", СчетчикСтрок);
				ИдСтрокиТаблицы = ИдСтрокиТаблицы + 1;
				ДанныеСтроки.Вставить("_ИдСтрокиТаблицы_", ИдСтрокиТаблицы);
				
				Если ЗначениеЗаполнено(ИмяФайлаФичиИмпорт) Тогда
					Данныеbody = Новый Структура;
					Данныеbody.Вставить("line", СчетчикСтрок);
					Данныеbody.Вставить("text", Стр);
					Данныеbody.Вставить("tokens", Новый Массив);
					table.body.Добавить(Данныеbody);
				КонецЕсли;	 
				
				column = 0;
				Для Сч = 0 По Данные.Количество() - 1 Цикл
					ДанныеСтроки.Вставить(ДанныеТаблицы.Колонки[Сч], ОбработатьСпецСимволыДляЗначенияПеременной(Данные[Сч].Значение));
					Если ЗначениеЗаполнено(ИмяФайлаФичиИмпорт) Тогда
						Данныеtokens = Новый Структура;
						column = column + СтрДлина(Данные[Сч].Значение) + 3;
						Данныеtokens.Вставить("column", column);
						Данныеtokens.Вставить("symbol", "'");
						Данныеtokens.Вставить("text", Данные[Сч].Значение);
						Данныеtokens.Вставить("type", "Param");
						Данныеbody.tokens.Добавить(Данныеtokens);
					КонецЕсли;	 
				КонецЦикла;	
				
				ДанныеТаблицы.Значения.Вставить(ИмяПеременнойИзТаблицы, ДанныеСтроки);
			КонецЕсли;	 
		Иначе
			Поз = Найти(Стр, " ");
			Если Поз > 0 Тогда
				ЛеваяЧасть = Лев(Стр, Поз - 1);
				Если СтруктураПараметров.КешСловИмпортПеременных[НРег(ЛеваяЧасть)] <> Неопределено Тогда
					//Значит это импорт переменных из другой фичи
					ПраваяЧасть = УбратьОбрамляющиеСимволыИзСтроки(СокрЛП(Сред(Стр, Поз + 1)));
					Для Каждого ТекДанныеДругойФичи Из СтруктураПараметров.ДанныеСекцииПеременныхФич Цикл
						СтрокаПоиска = НРег("/" + ПраваяЧасть);
						Если Прав(ТекДанныеДругойФичи.Ключ, СтрДлина(СтрокаПоиска)) = СтрокаПоиска Тогда
							Если НЕ ТекДанныеДругойФичи.Значение.Свойство("Результат") Тогда
								ТекДанныеДругойФичи.Значение.Вставить("Результат",
									ПреобразоватьМассивСтрокВДанныеПеременных(ТекДанныеДругойФичи.Значение.ДанныеПеременных,
									СтруктураПараметров, СчетчикСтрок,
									ПростыеПеременныеИзСекцииПеременныеЭтойФичи, ТаблицаПеременныхИзСекцииПеременныеЭтойФичи,
									ПростыеПеременныеКакВФайлеЭтойФичи, ДанныеЭкспортныхПеременных, УниверсальноеИмяФайла, ТекДанныеДругойФичи.Ключ)
									);
							КонецЕсли;	 
						КонецЕсли;	 
					КонецЦикла;	 
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли		
		
	КонецЦикла;	 
КонецФункции	 

#КонецОбласти

#Область ПроцедурыИФункцииЗапросыИзБД

//TODO раскомментировать утверждения во всех методах после решения Архитектура взаимодействия плагинов/утилит между собой #568 https://github.com/xDrivenDevelopment/xUnitFor1C/issues/568

// { Plugin interface
Функция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Тип", ВозможныеТипыПлагинов.Утилита);
	Результат.Вставить("Идентификатор", Метаданные().Имя);
	Результат.Вставить("Представление", "ЗапросыИзБД");
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
КонецФункции

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	ТекстСообщенийПользователю = КонтекстЯдраПараметр.ТекстСообщенийПользователю;
КонецПроцедуры
// } Plugin interface


//}

#КонецОбласти

#Область ПроцедурыИФункцииСериализаторMXL

Функция ЗаголовокФормыСериализатор() Экспорт
	Возврат СокрЛП(Метаданные().Синоним) + ", версия " + ВерсияСериализатор();
КонецФункции

Функция ВерсияСериализатор() Экспорт
	Возврат "4.1.0.4";
КонецФункции

//{ Десериализация тестовых данных
Функция СоздатьДанныеПоМакетам(ТестОбъект, ИменаМакетов) Экспорт
	МассивИменМакетов = РазложитьСтрокуВМассивПодстрок(ИменаМакетов);
	МассивМакетов = Новый Массив;
	Для каждого ИмяМакета Из МассивИменМакетов Цикл
		МассивМакетов.Добавить(ТестОбъект.ПолучитьМакет(ИмяМакета));
	КонецЦикла;
	Возврат СоздатьДанныеПоТабличномуДокументу(МассивМакетов);
КонецФункции

Функция СоздатьДанныеПоТабличномуДокументу(ТабличныйДокументИлиМассивТабличныхДокументов, РежимыЗагрузкиИлиИмяКолонкиЗамещения = Неопределено, ИмяКолонкиЗамещения = Неопределено) Экспорт
	
	Перем РежимыЗагрузки;
	
	СоздатьСтруктурумТЗКэшОбъектов();
	
	Если ТипЗнч(РежимыЗагрузкиИлиИмяКолонкиЗамещения) = Тип("Строка") Тогда
		ИмяКолонкиЗамещения = РежимыЗагрузкиИлиИмяКолонкиЗамещения;
	Иначе
		РежимыЗагрузки = РежимыЗагрузкиИлиИмяКолонкиЗамещения;
		Если РежимыЗагрузки <> Неопределено Тогда
			ТипПараметра = ТипЗнч(РежимыЗагрузки);
			Если ТипПараметра <> Тип("Структура") Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ожидали, что вторым параметром будет передана структура параметров для метода <СоздатьДанныеПоТабличномуДокументу>, а получили другой объект с типом <%1>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТипПараметра);
				ВызватьИсключение(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	МассивТабличныхДокументов = Новый Массив();
	Если ТипЗнч(ТабличныйДокументИлиМассивТабличныхДокументов) = Тип("ТабличныйДокумент") Тогда
		МассивТабличныхДокументов.Добавить(ТабличныйДокументИлиМассивТабличныхДокументов);
	ИначеЕсли ТипЗнч(ТабличныйДокументИлиМассивТабличныхДокументов) = Тип("Массив") Тогда
		МассивТабличныхДокументов = ТабличныйДокументИлиМассивТабличныхДокументов;
	КонецЕсли;
	
	Данные = СоздатьДанныеИзМакетов(МассивТабличныхДокументов, РежимыЗагрузки, ИмяКолонкиЗамещения);
	
	ЗначениеСоответствияРегистрСведений    = ВернутьЗначениеСоответствия("РегистрСведенийНаборЗаписей");
	ЗначениеСоответствияРегистрНакопления  = ВернутьЗначениеСоответствия("РегистрНакопленияНаборЗаписей");
	ЗначениеСоответствияРегистрБухгалтерии = ВернутьЗначениеСоответствия("РегистрБухгалтерииНаборЗаписей");
	ЗначениеСоответствияРегистрРасчета     = ВернутьЗначениеСоответствия("РегистрРасчетаНаборЗаписей");
	
	Для каждого Элем Из Данные Цикл
		Стр = Строка(Элем.Значение);
		Если Найти(Стр, ЗначениеСоответствияРегистрСведений) > 0 Тогда
			ИмяРегистра = Сред(Стр, СтрДлина(ЗначениеСоответствияРегистрСведений) + 2);
			Данные[Элем.Ключ] = ПолучитьКлючиЗаписиРСПоНаборуЗаписейРС(Элем.Значение, ИмяРегистра);
		ИначеЕсли Найти(Стр, ЗначениеСоответствияРегистрНакопления) > 0 Тогда
			ИмяРегистра = Сред(Стр, СтрДлина(ЗначениеСоответствияРегистрНакопления) + 2);
			Данные[Элем.Ключ] = ПолучитьКлючиЗаписиРСПоНаборуЗаписейРН(Элем.Значение, ИмяРегистра);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

// удаляет созданные элементы (Справочники, Документы, Пользователи ИБ), регистры сведений не чистит - есть тесты
Функция УдалитьСозданныеДанные(Данные) Экспорт
	// обратный порядок нужен для получения правильного количества удаленных элементов, т.к Владелец.Удалить удаляет и подчиненные элементы из подчиненных справочников
	массивВОбратномПорядке = Новый Массив;
	Для каждого ключЗначение Из Данные Цикл
		массивВОбратномПорядке.Вставить(0, КлючЗначение.Значение);
	КонецЦикла;
	
	количествоУдаленных = 0;
	Для каждого элем Из массивВОбратномПорядке Цикл
		типЭлемента = ТипЗнч(элем);
		Если Справочники.ТипВсеСсылки().СодержитТип(типЭлемента) Тогда
			объект = элем.ПолучитьОбъект();
			Если объект <> Неопределено Тогда
				Попытка
					объект.Удалить();
					количествоУдаленных = количествоУдаленных + 1;
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли; 
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(типЭлемента) Тогда
			объект = элем.ПолучитьОбъект();
			Если объект <> Неопределено Тогда
				Попытка
					объект.Удалить();
					количествоУдаленных = количествоУдаленных + 1;
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли; 
		ИначеЕсли типЭлемента = Тип("ПользовательИнформационнойБазы") Тогда
			Попытка
				элем.Удалить();
				количествоУдаленных = количествоУдаленных + 1;
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли; 
	КонецЦикла;
	Возврат количествоУдаленных;
КонецФункции

Функция ПолучитьКлючиЗаписиРСПоНаборуЗаписейРС(НаборЗаписей,ИмяРегистра)
	Результат = Новый Массив;
	
	Периодический        = НЕ (Метаданные.РегистрыСведений[ИмяРегистра].ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический);
	ПодчиненРегистратору = (Метаданные.РегистрыСведений[ИмяРегистра].РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору);
	
	МассивИзмерений = Новый Массив;
	Для каждого Измерение Из Метаданные.РегистрыСведений[ИмяРегистра].Измерения Цикл
		МассивИзмерений.Добавить(Измерение.Имя);
	КонецЦикла;
	
	Для каждого Запись Из НаборЗаписей Цикл
		ЗначенияКлюча = Новый Структура;
		
		Если ПодчиненРегистратору Тогда
			ЗначенияКлюча.Вставить("Регистратор", Запись.Регистратор);
		КонецЕсли;
		Если Периодический Тогда
			ЗначенияКлюча.Вставить("Период", Запись.Период);
		КонецЕсли;
		
		Для каждого Измерение Из МассивИзмерений Цикл
			ЗначенияКлюча.Вставить(Измерение, Запись[Измерение]);
		КонецЦикла;
		
		КлючЗаписи = РегистрыСведений[ИмяРегистра].СоздатьКлючЗаписи(ЗначенияКлюча);
		
		Результат.Добавить(КлючЗаписи);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьКлючиЗаписиРСПоНаборуЗаписейРН(НаборЗаписей,ИмяРегистра)
	Результат = Новый Массив;
	
	МассивИзмерений = Новый Массив;
	Для каждого Измерение Из Метаданные.РегистрыНакопления[ИмяРегистра].Измерения Цикл
		МассивИзмерений.Добавить(Измерение.Имя);
	КонецЦикла;
	
	Для каждого Запись Из НаборЗаписей Цикл
		ЗначенияКлюча = Новый Структура;
		
		ЗначенияКлюча.Вставить("Регистратор", Запись.Регистратор);
		ЗначенияКлюча.Вставить("Период", Запись.Период);
		Для каждого Измерение Из МассивИзмерений Цикл
			ЗначенияКлюча.Вставить(Измерение, Запись[Измерение]);
		КонецЦикла;
		
		КлючЗаписи = РегистрыНакопления[ИмяРегистра].СоздатьКлючЗаписи(ЗначенияКлюча);
		
		Результат.Добавить(КлючЗаписи);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция СоздатьДанныеИзМакетов(МассивТабличныхДокументов, РежимыЗагрузки, ИмяКолонкиЗамещения)
	ПротоДанные = Новый Структура;
	Для каждого ТабличныйДокумент Из МассивТабличныхДокументов Цикл
		ПрочитатьДанныеИзМакета(ПротоДанные,ТабличныйДокумент,ИмяКолонкиЗамещения);
	КонецЦикла;
	ЗаменитьРежимыЗагрузки(ПротоДанные, РежимыЗагрузки);
	Данные = СоздатьТестовыеДанныеПоПротоДанным(ПротоДанные);
	Возврат Данные;
КонецФункции

Функция ПрочитатьДанныеИзМакета(ПротоДанные,ТабличныйДокумент,ИмяКолонкиЗамещения)
	
	СтрокаМакета = 1;
	НомерКолонкиМакета = 0;
	КолонкиМакета = КолонкиМакетаДанных();
	Пока НомерКолонкиМакета<ТабличныйДокумент.ШиринаТаблицы Цикл
		НомерКолонкиМакета = НомерКолонкиМакета + 1;
		ИмяКолонки = ТабличныйДокумент.Область("R" + 1 + "C" + НомерКолонкиМакета).Текст;
		Если НЕ ПустаяСтрока(ИмяКолонки) Тогда
			КолонкиМакета.Вставить(ИмяКолонки,НомерКолонкиМакета);
		КонецЕсли;
	КонецЦикла;
	
	ПроверитьКолонки(КолонкиМакета,ИмяКолонкиЗамещения);

	ДействиеТекущейСтроки = Неопределено;
	Пока СтрокаМакета<ТабличныйДокумент.ВысотаТаблицы Цикл
		СтрокаМакета = СтрокаМакета + 1;
		НомерСтроки = Формат(СтрокаМакета, "ЧГ=");
		
		//Если новый объект
		ИмяПеременной = ПрочитатьЗначениеЯчейкиМакета(ТабличныйДокумент,НомерСтроки,КолонкиМакета.ИмяПеременной);
		ИмяПеременной = СтрЗаменить(СокрЛП(ИмяПеременной), Символы.НПП, "");
		Если НЕ ПустаяСтрока(ИмяПеременной) Тогда
			Если ПротоДанные.Свойство(ИмяПеременной) Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ошибка при создании данных из макета. Неуникальное имя переменной: [%1]");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			Тип = ПрочитатьЗначениеЯчейкиМакета(ТабличныйДокумент,НомерСтроки,КолонкиМакета.Тип);
			Вид = ПрочитатьЗначениеЯчейкиМакета(ТабличныйДокумент,НомерСтроки,КолонкиМакета.Вид);
			Режим = ПрочитатьЗначениеЯчейкиМакета(ТабличныйДокумент,НомерСтроки,КолонкиМакета.Режим);
			Значение = ПрочитатьЗначениеДанныхСтроки(ТабличныйДокумент,НомерСтроки,КолонкиМакета,ИмяКолонкиЗамещения);
			
			ПротоОбъект = СоздатьСтруктуруОписанияОбъекта();
			ПротоОбъект.ИмяПеременной = ИмяПеременной;
			ПротоОбъект.Тип = Тип;
			ПротоОбъект.Вид = Вид;
			ПротоОбъект.ИмяПредопределенного = Значение;
			ПротоОбъект.ПоляОбъекта = СоздатьТаблицуОписанияПолей();
			Если НЕ ПустаяСтрока(Режим) Тогда
				Если ПротоОбъект.Режимы.Свойство(Режим) Тогда
					ПротоОбъект.Режимы[Режим] = Истина;
				КонецЕсли;
			КонецЕсли;
			
			ПротоДанные.Вставить(ИмяПеременной,ПротоОбъект);
			ДействиеТекущейСтроки = "ЧитаемПоляОбъекта";
			Продолжить;
		КонецЕсли;
		
		//Табличные части
		ИмяТабЧасти = ПрочитатьЗначениеЯчейкиМакета(ТабличныйДокумент,НомерСтроки,КолонкиМакета.ТЧ);
		Если НЕ ПустаяСтрока(ИмяТабЧасти) Тогда
			Если ВРег(ИмяТабЧасти)="XDDMODS" или ВРег(ИмяТабЧасти)="XDDDATAGEN" Тогда
				ДействиеТекущейСтроки = "ЧитаемРежимы";
				Продолжить;
			КонецЕсли;
			Если ВРег(ИмяТабЧасти)="ДОПОЛНИТЕЛЬНЫЕСВОЙСТВА" Тогда
				ДействиеТекущейСтроки = "ЧитаемДопСвойства";
				Продолжить;
			КонецЕсли;
			Если ВРег(ИмяТабЧасти)="ОБМЕНДАННЫМИ" Тогда
				ДействиеТекущейСтроки = "ЧитаемОбменДанными";
				Продолжить;
			КонецЕсли;
			
			ТабЧасть = Неопределено;
			Если НЕ ПротоОбъект.ТабличныеЧасти.Свойство(ИмяТабЧасти,ТабЧасть) Тогда
				//Новая ТабЧасть
				ОписаниеПолейТЧ = СоздатьТаблицуОписанияПолей();
				ТабЧасть = Новый Массив;
				ТабЧасть.Добавить(ОписаниеПолейТЧ);
				ПротоОбъект.ТабличныеЧасти.Вставить(ИмяТабЧасти,ТабЧасть);
				ДействиеТекущейСтроки = "ЧитаемТабЧасть";
				Продолжить;
			Иначе
				//Новая строка ТабЧасти
				ОписаниеПолейТЧ = СоздатьТаблицуОписанияПолей();
				ТабЧасть.Добавить(ОписаниеПолейТЧ);
				ДействиеТекущейСтроки = "ЧитаемТабЧасть";
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		//Поля объекта
		Если ДействиеТекущейСтроки = "ЧитаемПоляОбъекта" Тогда
			ИмяРеквизита = ПрочитатьЗначениеЯчейкиМакета(ТабличныйДокумент, НомерСтроки, КолонкиМакета.Реквизит);
			Если НЕ ПустаяСтрока(ИмяРеквизита) Тогда
				НовоеПолеОбъекта = ПротоОбъект.ПоляОбъекта.Добавить();
				НовоеПолеОбъекта.Имя = ПрочитатьЗначениеЯчейкиМакета(ТабличныйДокумент,НомерСтроки,КолонкиМакета.Реквизит);
				НовоеПолеОбъекта.Значение = ПрочитатьЗначениеДанныхСтроки(ТабличныйДокумент,НомерСтроки,КолонкиМакета,ИмяКолонкиЗамещения);
				НовоеПолеОбъекта.Режим = ПрочитатьЗначениеЯчейкиМакета(ТабличныйДокумент,НомерСтроки,КолонкиМакета.Режим);
				НовоеПолеОбъекта.ДополнительныйТип = ПрочитатьЗначениеЯчейкиМакета(ТабличныйДокумент,НомерСтроки,КолонкиМакета.ДополнительныйТипЗначения);
				
				Ключ = ПрочитатьЗначениеЯчейкиМакета(ТабличныйДокумент,НомерСтроки,КолонкиМакета.Ключ);
				Если ВРег(Ключ) = "КЛЮЧ" Тогда
					ПротоОбъект.Ключи.Вставить(НовоеПолеОбъекта.Имя, НовоеПолеОбъекта.Значение);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		//Поля табличной части
		Если ДействиеТекущейСтроки = "ЧитаемТабЧасть" Тогда
			ИмяРеквизитаТЧ = ПрочитатьЗначениеЯчейкиМакета(ТабличныйДокумент, НомерСтроки, КолонкиМакета.Реквизит);
			Если НЕ ПустаяСтрока(ИмяРеквизитаТЧ) Тогда
				НовоеПолеТЧ = ОписаниеПолейТЧ.Добавить();
				НовоеПолеТЧ.Имя = ИмяРеквизитаТЧ;
				НовоеПолеТЧ.Значение = ПрочитатьЗначениеДанныхСтроки(ТабличныйДокумент,НомерСтроки,КолонкиМакета,ИмяКолонкиЗамещения);
				НовоеПолеТЧ.Режим = ПрочитатьЗначениеЯчейкиМакета(ТабличныйДокумент,НомерСтроки,КолонкиМакета.Режим);
				НовоеПолеТЧ.ДополнительныйТип = ПрочитатьЗначениеЯчейкиМакета(ТабличныйДокумент,НомерСтроки,КолонкиМакета.ДополнительныйТипЗначения);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		//Режимы объекта
		Если ДействиеТекущейСтроки = "ЧитаемРежимы" Тогда
			КодРежима = ПрочитатьЗначениеЯчейкиМакета(ТабличныйДокумент,НомерСтроки,КолонкиМакета.Реквизит);
			Режим = ПрочитатьЗначениеДанныхСтроки(ТабличныйДокумент,НомерСтроки,КолонкиМакета,ИмяКолонкиЗамещения);
			Если ВРег(КодРежима)="РЕЖИМ" Тогда
				Если ПротоОбъект.Режимы.Свойство(Режим) Тогда
					ПротоОбъект.Режимы[Режим] = Истина;
				КонецЕсли;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		//Дополнительные свойства
		Если ДействиеТекущейСтроки = "ЧитаемДопСвойства" Тогда
			ИмяДопСвойства = ПрочитатьЗначениеЯчейкиМакета(ТабличныйДокумент, НомерСтроки, КолонкиМакета.Реквизит);
			Если НЕ ПустаяСтрока(ИмяДопСвойства) Тогда
				НовоеПолеДопСвойств = ПротоОбъект.ДопСвойства.Добавить();
				НовоеПолеДопСвойств.Имя = ИмяДопСвойства;
				НовоеПолеДопСвойств.Значение = ПрочитатьЗначениеДанныхСтроки(ТабличныйДокумент,НомерСтроки,КолонкиМакета,ИмяКолонкиЗамещения);
				НовоеПолеДопСвойств.Режим = ПрочитатьЗначениеЯчейкиМакета(ТабличныйДокумент,НомерСтроки,КолонкиМакета.Режим);
				НовоеПолеДопСвойств.ДополнительныйТип = ПрочитатьЗначениеЯчейкиМакета(ТабличныйДокумент,НомерСтроки,КолонкиМакета.ДополнительныйТипЗначения);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ДействиеТекущейСтроки = "ЧитаемОбменДанными" Тогда
			ИмяОбменДанными = ПрочитатьЗначениеЯчейкиМакета(ТабличныйДокумент, НомерСтроки, КолонкиМакета.Реквизит);
			Если НЕ ПустаяСтрока(ИмяОбменДанными) Тогда
				НовоеПолеОбменаДанными = ПротоОбъект.ОбменДанными.Добавить();
				НовоеПолеОбменаДанными.Имя = ИмяОбменДанными;
				НовоеПолеОбменаДанными.Значение = ПрочитатьЗначениеДанныхСтроки(ТабличныйДокумент,НомерСтроки,КолонкиМакета,ИмяКолонкиЗамещения);
				НовоеПолеОбменаДанными.Режим = ПрочитатьЗначениеЯчейкиМакета(ТабличныйДокумент,НомерСтроки,КолонкиМакета.Режим);
				НовоеПолеОбменаДанными.ДополнительныйТип = ПрочитатьЗначениеЯчейкиМакета(ТабличныйДокумент,НомерСтроки,КолонкиМакета.ДополнительныйТипЗначения);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ПроверитьКолонки(КолонкиМакета,ИмяКолонкиЗамещения)
	Для каждого Колонка Из КолонкиМакета Цикл
		Если Колонка.Значение = "0" Тогда
			Если Колонка.Ключ = "ДополнительныйТипЗначения" или Колонка.Ключ = "Ключ" Тогда
				//Это не обязательная колонка - может быть и не заполнена
			Иначе
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Неверно задан макет. Неверная колонка в первой строке. Не указана обязательная колонка с именем [%1]");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Колонка.Ключ);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(ИмяКолонкиЗамещения) Тогда
		Если не КолонкиМакета.Свойство(ИмяКолонкиЗамещения) Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Указанное Имя колонки замещения [%1] не существует в макете.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКолонкиЗамещения);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПрочитатьЗначениеДанныхСтроки(ТабличныйДокумент,НомерСтроки,КолонкиМакета,ИмяКолонкиЗамещения)
	Значение = ПрочитатьЗначениеЯчейкиМакета(ТабличныйДокумент,НомерСтроки,КолонкиМакета.Значение);
	Если ЗначениеЗаполнено(ИмяКолонкиЗамещения) Тогда
		ПриоритетноеЗначение = ПрочитатьЗначениеЯчейкиМакета(ТабличныйДокумент,НомерСтроки,КолонкиМакета[ИмяКолонкиЗамещения]);
		Если ЗначениеЗаполнено(ПриоритетноеЗначение) Тогда
			Значение = ПриоритетноеЗначение;
		КонецЕсли;
	КонецЕсли;
	Возврат Значение;
КонецФункции

Функция ПрочитатьЗначениеЯчейкиМакета(Макет,НомерСтроки,НомерКолонки);
	ТекстЯчейки = Неопределено;
	Если НомерСтроки<> "0" И НомерКолонки <> "0" Тогда
		ТекстЯчейки = Макет.Область("R" + НомерСтроки + "C" + НомерКолонки).Текст;
	КонецЕсли;
	Возврат ТекстЯчейки;
КонецФункции

Функция СоздатьСтруктуруОписанияОбъекта()
	СтруктураОписанияОбъекта = Новый Структура();
	СтруктураОписанияОбъекта.Вставить("Объект",Неопределено);
	СтруктураОписанияОбъекта.Вставить("Тип",Неопределено);
	СтруктураОписанияОбъекта.Вставить("Вид",Неопределено);
	СтруктураОписанияОбъекта.Вставить("ИмяПредопределенного",Неопределено);
	СтруктураОписанияОбъекта.Вставить("ИмяПеременной",Неопределено);
	СтруктураОписанияОбъекта.Вставить("Режимы",СоздатьСтруктуруРежимовОбъекта());
	СтруктураОписанияОбъекта.Вставить("Ключи", новый Структура);
	СтруктураОписанияОбъекта.Вставить("ПоляОбъекта",СоздатьТаблицуОписанияПолей());
	СтруктураОписанияОбъекта.Вставить("ТабличныеЧасти",Новый Структура);
	СтруктураОписанияОбъекта.Вставить("ДопСвойства",СоздатьТаблицуОписанияПолей());
	СтруктураОписанияОбъекта.Вставить("ОбменДанными",СоздатьТаблицуОписанияПолей());
	Возврат СтруктураОписанияОбъекта;
КонецФункции

Функция СоздатьСтруктуруРежимовОбъекта()
	Режимы = Новый Структура;
	Режимы.Вставить("Предопределенный",Ложь);
	Режимы.Вставить("СоздатьПоГуид",Ложь);
	Режимы.Вставить("ТолькоСоздание",Ложь);
	Режимы.Вставить("Проведение",Ложь);
	Режимы.Вставить("ОбменДанными",Ложь);
	Режимы.Вставить("Объект",Ложь);
	Режимы.Вставить("Группа",Ложь);
	Режимы.Вставить("ЭтотУзел",Ложь);
	Возврат Режимы;
КонецФункции

Функция СоздатьТаблицуОписанияПолей()
	тзОписаниеПолей = Новый ТаблицаЗначений;
	тзОписаниеПолей.Колонки.Добавить("Имя");
	тзОписаниеПолей.Колонки.Добавить("Значение");
	тзОписаниеПолей.Колонки.Добавить("Режим");
	тзОписаниеПолей.Колонки.Добавить("ДополнительныйТип");
	Возврат тзОписаниеПолей;
КонецФункции

Функция МенеджерыМетаданных()
	Менеджеры = Новый Структура;
	Менеджеры.Вставить("ПланОбмена",ПланыОбмена);
	Менеджеры.Вставить("Справочник",Справочники);
	Менеджеры.Вставить("Документ",Документы);
	Менеджеры.Вставить("БизнесПроцесс",БизнесПроцессы);
	Менеджеры.Вставить("Задача",Задачи);
	Менеджеры.Вставить("РегистрСведений",РегистрыСведений);
	Менеджеры.Вставить("РегистрНакопления",РегистрыНакопления);
	Менеджеры.Вставить("РегистрыБухгалтерии",РегистрыБухгалтерии);
	Менеджеры.Вставить("ПланВидовХарактеристик",ПланыВидовХарактеристик);
	Менеджеры.Вставить("ПользовательИБ",ПользователиИнформационнойБазы);
	Менеджеры.Вставить("ПланВидовРасчета", ПланыВидовРасчета);
	Менеджеры.Вставить("ПланСчетов",       ПланыСчетов);
	Возврат Новый ФиксированнаяСтруктура(Менеджеры);
КонецФункции

Процедура ЗаменитьРежимыЗагрузки(ПротоДанные, РежимыЗагрузки)
	Если ЗначениеЗаполнено(РежимыЗагрузки) Тогда
		Для каждого КлючЗначение Из ПротоДанные Цикл
			ПротоОбъект = КлючЗначение.Значение;
			ЗаполнитьЗначенияСвойств(ПротоОбъект.Режимы, РежимыЗагрузки);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция СоздатьТестовыеДанныеПоПротоДанным(ПротоДанные)
	Данные = Новый Структура;
	МенеджерыМетаданных = МенеджерыМетаданных();
	Для каждого ПротоОбъект из ПротоДанные Цикл
		ОбъектСсылка = ПолучитьОбъект(ПротоДанные,ПротоОбъект.Значение);
		Данные.Вставить(ПротоОбъект.Значение.ИмяПеременной,ОбъектСсылка);
	КонецЦикла;
	Возврат Данные;
КонецФункции

Функция ПолучитьОбъект(ПротоДанные,ПротоОбъект)
	ОбъектСсылка = Неопределено;
	Если ПротоОбъект.Объект<>Неопределено Тогда
		Возврат ПротоОбъект.Объект;
	ИначеЕсли ПротоОбъект.Тип = ВернутьЗначениеСоответствия("Справочник") Тогда
		ОбъектСсылка = СоздатьОбъект_Справочник(ПротоДанные,ПротоОбъект);
		
	ИначеЕсли ПротоОбъект.Тип = ВернутьЗначениеСоответствия("Документ") Тогда
		ОбъектСсылка = СоздатьОбъект_Документ_или_БизнесПроцесс_или_Задача(Документы, ПротоДанные,ПротоОбъект);
		
	ИначеЕсли ПротоОбъект.Тип = ВернутьЗначениеСоответствия("РегистрСведений") Тогда
		ОбъектСсылка = СоздатьОбъект_Регистр(РегистрыСведений, ПротоДанные,ПротоОбъект);
	ИначеЕсли ПротоОбъект.Тип = ВернутьЗначениеСоответствия("РегистрНакопления") Тогда
		ОбъектСсылка = СоздатьОбъект_Регистр(РегистрыНакопления, ПротоДанные,ПротоОбъект);
	ИначеЕсли ПротоОбъект.Тип = ВернутьЗначениеСоответствия("РегистрБухгалтерии") Тогда
		ОбъектСсылка = СоздатьОбъект_Регистр(РегистрыБухгалтерии, ПротоДанные,ПротоОбъект);
		
	ИначеЕсли ПротоОбъект.Тип = ВернутьЗначениеСоответствия("ПользовательИБ") Тогда
		ОбъектСсылка = СоздатьОбъект_ПользовательИБ(ПротоДанные,ПротоОбъект);
		
	ИначеЕсли ПротоОбъект.Тип = ВернутьЗначениеСоответствия("БизнесПроцесс") Тогда
		ОбъектСсылка = СоздатьОбъект_Документ_или_БизнесПроцесс_или_Задача(БизнесПроцессы, ПротоДанные,ПротоОбъект);
	ИначеЕсли ПротоОбъект.Тип = ВернутьЗначениеСоответствия("Задача") Тогда
		ОбъектСсылка = СоздатьОбъект_Документ_или_БизнесПроцесс_или_Задача(Задачи, ПротоДанные,ПротоОбъект);
	ИначеЕсли ПротоОбъект.Тип = ВернутьЗначениеСоответствия("ПланОбмена") Тогда
		ОбъектСсылка = СоздатьОбъект_УзелПланаОбмена(ПротоДанные,ПротоОбъект);
	ИначеЕсли ПротоОбъект.Тип = ВернутьЗначениеСоответствия("ПланВидовХарактеристик") Тогда
		ОбъектСсылка = СоздатьОбъект_ПВХ(ПротоДанные,ПротоОбъект);
	ИначеЕсли ПротоОбъект.Тип = ВернутьЗначениеСоответствия("ПланСчетов") Тогда
		ОбъектСсылка = СоздатьОбъект_ПланСчетов(ПротоДанные,ПротоОбъект);
	ИначеЕсли ПротоОбъект.Тип = ВернутьЗначениеСоответствия("ПланВидовРасчетов") Тогда
		ОбъектСсылка = СоздатьОбъект_ПланВидовРасчетов(ПротоДанные,ПротоОбъект);
	КонецЕсли;
	ПротоОбъект.Объект = ОбъектСсылка;
	Возврат ОбъектСсылка;
КонецФункции

Функция СоздатьОбъект_УзелПланаОбмена(ПротоДанные, ПротоОбъект)
	ПланОбменаМенеджер = ПланыОбмена[ПротоОбъект.Вид];
	
	//Подготовим ПротоОбъект
	Объект = ПолучитьОбъектЕслиВПротоДанныеПереданаСсылка(ПланОбменаМенеджер, ПротоОбъект);
	Если Объект = Неопределено И ЗначениеЗаполнено(ПротоОбъект.Ключи) Тогда
		Объект = НайтиОбъектПоКлючам(ПротоОбъект, ПланОбменаМенеджер, ПротоОбъект.Ключи);
	КонецЕсли;

	Если ПротоОбъект.Режимы.ТолькоСоздание И Объект <> Неопределено Тогда
		Возврат ПротоОбъект.Объект;
	КонецЕсли;
	
	//Создание узла плана обмена
	Если Объект = Неопределено Тогда
		Если ПротоОбъект.Режимы.ЭтотУзел Тогда
			Попытка
				Объект = ПланОбменаМенеджер.ЭтотУзел().ПолучитьОбъект();
			Исключение
				Ошибка = ОписаниеОшибки();
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("ПланОбмена.%1 не удалось получить узел этой ИБ.%2");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПротоОбъект.Вид);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Символы.ПС + Ошибка);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
		ИначеЕсли ПротоОбъект.Режимы.СоздатьПоГуид Тогда
			ВызватьИсключение ПолучитьТекстСообщенияПользователю("Устарело и больше не поддерживается: https://github.com/xDrivenDevelopment/xUnitFor1C/issues/332");
		Иначе
			Попытка
				Объект = ПланОбменаМенеджер.СоздатьУзел();
			Исключение
				Ошибка = ОписаниеОшибки();
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("ПланОбмена.%1 не удалось создать новый узел.%2");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПротоОбъект.Вид);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Символы.ПС + Ошибка);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
		КонецЕсли;
		
		Если Объект.ЭтоНовый() Тогда
			Если НЕ ЗначениеЗаполнено(ПротоОбъект.Объект) Тогда
				ПротоОбъект.Объект = ПланОбменаМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор);
			КонецЕсли;
			Объект.УстановитьСсылкуНового(ПротоОбъект.Объект);
		Иначе
			ПротоОбъект.Объект = Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	//Заполняем реквизиты узла плана обмена
	НаборМдРеквизитов = НаборРеквизитовМетаданных(ПротоОбъект.Тип, Объект.Метаданные());
	Для каждого стрПоле Из ПротоОбъект.ПоляОбъекта Цикл
		Объект[стрПоле.Имя] = ПолучитьЗначениеПоля(ПротоДанные, стрПоле, НаборМдРеквизитов);
	КонецЦикла;
	
	Для каждого ТабЧасть из ПротоОбъект.ТабличныеЧасти Цикл
		Для каждого СтрокаТабЧасти Из ТабЧасть.Значение Цикл
			СтрокаТабЧастиОбъекта = Объект[ТабЧасть.Ключ].Добавить();
			объектМетаданныеТабличнаяЧасть = Объект.Метаданные().ТабличныеЧасти[ТабЧасть.Ключ];
			НаборМдРеквизитовТЧ = объектМетаданныеТабличнаяЧасть.Реквизиты;
			Для каждого стрПоле Из СтрокаТабЧасти Цикл
				СтрокаТабЧастиОбъекта[стрПоле.Имя] = ПолучитьЗначениеПоля(ПротоДанные, стрПоле, НаборМдРеквизитовТЧ);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	//Служебные поля и значения
	Если НЕ ЗначениеЗаполнено(Объект.Код) тогда
		Объект.УстановитьНовыйКод();
	КонецЕсли;
	
	ЗаполнитьДополнительныеСвойства(Объект, ПротоДанные, ПротоОбъект);
	
	ПредставлениеМетаданного = "узел плана обмена";
	Результат = ЗаписатьОбъектПриНеобходимости(Объект, ПротоОбъект, ПредставлениеМетаданного, Истина);
	
	Возврат Результат;
КонецФункции

Функция СоздатьОбъект_Справочник(ПротоДанные,ПротоОбъект)
	СпрМенеджер = Справочники[ПротоОбъект.Вид];
	
	//Подготовим ПротоОбъект
	стрПолеЭтоГруппа = ПротоОбъект.ПоляОбъекта.Найти("ЭтоГруппа","Имя");
	Если стрПолеЭтоГруппа<>Неопределено Тогда
		ПротоОбъект.Режимы.Группа = Булево(стрПолеЭтоГруппа.Значение);
		ПротоОбъект.ПоляОбъекта.Удалить(стрПолеЭтоГруппа);
	КонецЕсли;

	Объект = ПолучитьОбъектЕслиВПротоДанныеПереданаСсылка(СпрМенеджер, ПротоОбъект);
	Если Объект=Неопределено И ЗначениеЗаполнено(ПротоОбъект.Ключи) Тогда
		Объект = НайтиОбъектПоКлючам(ПротоОбъект, СпрМенеджер, ПротоОбъект.Ключи);
	КонецЕсли;

	Если ПротоОбъект.Режимы.ТолькоСоздание И Объект<>Неопределено Тогда
		Возврат ПротоОбъект.Объект;
	КонецЕсли;
	
	//Создание объекта справочника
	Если Объект=Неопределено Тогда
		СтарыйПредопреденный = Неопределено;
		Если ПротоОбъект.Режимы.Предопределенный Тогда
			Попытка
				Объект = СпрМенеджер[ПротоОбъект.ИмяПредопределенного].ПолучитьОбъект();
			Исключение
				Ошибка = ОписаниеОшибки();
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Справочник.%1 не удалось найти предопределенный элемент/группу [%2].%3");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПротоОбъект.Вид);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПротоОбъект.ИмяПредопределенного);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Символы.ПС+Ошибка);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			
			Если Объект = Неопределено Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Справочник.%1.%2 - получен пустой элемент.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПротоОбъект.Вид);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПротоОбъект.ИмяПредопределенного);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			Если Объект <> Неопределено И ЗначениеЗаполнено(ПротоОбъект.Объект) И Объект.Ссылка <> ПротоОбъект.Объект Тогда
				СтарыйПредопреденный = СпрМенеджер[ПротоОбъект.ИмяПредопределенного];
				Объект.ИмяПредопределенныхДанных = "";
				Объект.Записать();
				Объект = Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если Объект=Неопределено Тогда
			Если ПротоОбъект.Режимы.СоздатьПоГуид Тогда
				ВызватьИсключение ПолучитьТекстСообщенияПользователю("Устарело и больше не поддерживается: https://github.com/xDrivenDevelopment/xUnitFor1C/issues/332");
			ИначеЕсли ПротоОбъект.Режимы.Группа Тогда
				Попытка
					Объект = СпрМенеджер.СоздатьГруппу();
				Исключение
					Ошибка = ОписаниеОшибки();
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("Справочник.%1 не удалось создать новую группу.%2");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПротоОбъект.Вид);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Символы.ПС+Ошибка);
					ВызватьИсключение ТекстСообщения;
				КонецПопытки;
			Иначе
				Попытка
					Объект = СпрМенеджер.СоздатьЭлемент();
				Исключение
					Ошибка = ОписаниеОшибки();
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("Справочник.%1 не удалось создать новый элемент.%2");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПротоОбъект.Вид);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Символы.ПС+Ошибка);
					ВызватьИсключение ТекстСообщения;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ЭтоНовый() Тогда
			Если НЕ ЗначениеЗаполнено(ПротоОбъект.Объект) Тогда
				ПротоОбъект.Объект = СпрМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор);
			КонецЕсли;
			Объект.УстановитьСсылкуНового(ПротоОбъект.Объект);
			
			Если ПротоОбъект.Режимы.Предопределенный и ЗначениеЗаполнено(СтарыйПредопреденный) И СтарыйПредопреденный <> ПротоОбъект.Объект Тогда
				Объект.ИмяПредопределенныхДанных = ПротоОбъект.ИмяПредопределенного;
			КонецЕсли;
		Иначе
			ПротоОбъект.Объект = Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	//Заполняем реквизиты справочника
	НаборМдРеквизитов = НаборРеквизитовМетаданных(ПротоОбъект.Тип, Объект.Метаданные());
	Для каждого стрПоле Из ПротоОбъект.ПоляОбъекта Цикл
		Объект[стрПоле.Имя] = ПолучитьЗначениеПоля(ПротоДанные,стрПоле,НаборМдРеквизитов);
	КонецЦикла;
	
	Для каждого мдТабЧасть из Объект.Метаданные().ТабличныеЧасти Цикл
		ЭтоРежимГруппа = ПротоОбъект.Режимы.Группа;
		Если (ЭтоРежимГруппа И мдТабЧасть.Использование<>Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
			Или (НЕ ЭтоРежимГруппа И мдТабЧасть.Использование<>Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы) Тогда
			
				Объект[мдТабЧасть.Имя].Очистить();
		КонецЕсли;
		 
	КонецЦикла;
	Для каждого ТабЧасть из ПротоОбъект.ТабличныеЧасти Цикл
		Для каждого СтрокаТабЧасти Из ТабЧасть.Значение Цикл
			СтрокаТабЧастиОбъекта = Объект[ТабЧасть.Ключ].Добавить();
			объектМетаданныеТабличнаяЧасть = Объект.Метаданные().ТабличныеЧасти[ТабЧасть.Ключ];
			НаборМдРеквизитовТЧ = объектМетаданныеТабличнаяЧасть.Реквизиты;
			Для каждого стрПоле Из СтрокаТабЧасти Цикл
				СтрокаТабЧастиОбъекта[стрПоле.Имя] = ПолучитьЗначениеПоля(ПротоДанные,стрПоле,НаборМдРеквизитовТЧ);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	//Служебные поля и значения
	Если НЕ ЗначениеЗаполнено(Объект.Код) тогда
		Объект.УстановитьНовыйКод();
	КонецЕсли;
	
	ЗаполнитьОбменДанными(Объект, ПротоДанные, ПротоОбъект);
	ЗаполнитьДополнительныеСвойства(Объект, ПротоДанные, ПротоОбъект);
	
	ПредставлениеМетаданного = "справочника";
	Результат = ЗаписатьОбъектПриНеобходимости(Объект, ПротоОбъект, ПредставлениеМетаданного, Истина);
	
	Возврат Результат;
КонецФункции

Функция НайтиОбъектПоКлючам(ПротоОбъект, МенеджерОбъекта, СтруктураРеквизитовКлючей)
	Рез = Неопределено;
	МдОбъект = МенеджерОбъекта.ПустаяСсылка().Метаданные();
	МдПолноеИмя = МдОбъект.ПолноеИмя();
	МдРеквизиты = МдОбъект.Реквизиты;
	МдСтандартныеРеквизиты = МдОбъект.СтандартныеРеквизиты;
	
	ТекстЗапроса = "Выбрать Первые 1 Т.Ссылка Из "+МдПолноеИмя+" КАК Т Где Истина ";
	Запрос = Новый Запрос;
	Для каждого КлючЗначение Из СтруктураРеквизитовКлючей Цикл
		ИмяРеквизита = КлючЗначение.Ключ;
		ЗначениеРеквизита = КлючЗначение.Значение;
		Если МдРеквизиты.Найти(ИмяРеквизита) = Неопределено и НЕ ЕстьСтандартныйРеквизит(МдСтандартныеРеквизиты, ИмяРеквизита) Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("В метаданных %1 не найден реквизит-ключ <%2>. Ошибка в макете данных");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",МдПолноеИмя);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяРеквизита);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + " И "+ИмяРеквизита+" = &"+ИмяРеквизита;
		Запрос.УстановитьПараметр(ИмяРеквизита, ЗначениеРеквизита);
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПротоОбъект.Объект = Выборка.Ссылка;
		Рез = ПротоОбъект.Объект.ПолучитьОбъект();
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

Функция ЕстьСтандартныйРеквизит(МдСтандартныеРеквизиты, ИмяРеквизита)
	Для каждого РеквизитМд Из МдСтандартныеРеквизиты Цикл
		Если РеквизитМд.Имя = ИмяРеквизита Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция СоздатьОбъект_Документ_или_БизнесПроцесс_или_Задача(МенеджерВсехВидов, ПротоДанные, ПротоОбъект)
	ЭтоДокумент = МенеджерВсехВидов = Документы;
	ЭтоБизнесПроцесс = МенеджерВсехВидов = БизнесПроцессы;
	ЭтоЗадача = МенеджерВсехВидов = Задачи;
	
	Если ЭтоДокумент Тогда
		ПредставлениеМенеджера = "Документы";
	ИначеЕсли ЭтоБизнесПроцесс Тогда
		ПредставлениеМенеджера = "БизнесПроцессы";
	ИначеЕсли ЭтоЗадача Тогда
		ПредставлениеМенеджера = "Задачи";
	Иначе
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Требуется документ, бизнес-процесс или задача. Неизвестный менеджер %1.%2 . Переменная %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПротоОбъект.Тип);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПротоОбъект.Вид);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ПротоОбъект.ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	МенеджерОбъекта = МенеджерВсехВидов[ПротоОбъект.Вид];
	Объект = ПолучитьОбъектЕслиВПротоДанныеПереданаСсылка(МенеджерОбъекта, ПротоОбъект);
	Если Объект=Неопределено И ЗначениеЗаполнено(ПротоОбъект.Ключи) Тогда
		Объект = НайтиОбъектПоКлючам(ПротоОбъект, МенеджерОбъекта, ПротоОбъект.Ключи);
	КонецЕсли;
	
	Если ПротоОбъект.Режимы.ТолькоСоздание И Объект<>Неопределено Тогда
		Возврат ПротоОбъект.Объект;
	КонецЕсли;
	
	//Создание объекта
	Если Объект = Неопределено Тогда
		Попытка
			Если ЭтоДокумент Тогда
				Объект = МенеджерОбъекта.СоздатьДокумент();
			ИначеЕсли ЭтоБизнесПроцесс Тогда
				Объект = МенеджерОбъекта.СоздатьБизнесПроцесс();
			ИначеЕсли ЭтоЗадача Тогда
				Объект = МенеджерОбъекта.СоздатьЗадачу();
			КонецЕсли;
		Исключение
			Ошибка = ОписаниеОшибки();
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("%1.%2 не удалось создать новый элемент.%3");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПредставлениеМенеджера);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПротоОбъект.Вид);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Символы.ПС+Ошибка);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	
		//Установка ссылки
		Если Объект.ЭтоНовый() Тогда
			Если НЕ ЗначениеЗаполнено(ПротоОбъект.Объект) Тогда
				ПротоОбъект.Объект = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор);
			КонецЕсли;
			Объект.УстановитьСсылкуНового(ПротоОбъект.Объект);
		КонецЕсли;
	КонецЕсли;
	
	//Заполняем реквизиты
	НаборМдРеквизитов = НаборРеквизитовМетаданных(ПротоОбъект.Тип, Объект.Метаданные());
	Для каждого стрПоле Из ПротоОбъект.ПоляОбъекта Цикл
		Объект[стрПоле.Имя] = ПолучитьЗначениеПоля(ПротоДанные,стрПоле,НаборМдРеквизитов);
	КонецЦикла;
	
	Для каждого мдТабЧасть из Объект.Метаданные().ТабличныеЧасти Цикл
		Объект[мдТабЧасть.Имя].Очистить();
	КонецЦикла;
	Для каждого ТабЧасть из ПротоОбъект.ТабличныеЧасти Цикл
		Для каждого СтрокаТабЧасти Из ТабЧасть.Значение Цикл
			СтрокаТабЧастиОбъекта = Объект[ТабЧасть.Ключ].Добавить();
			объектМетаданныеТабличнаяЧасть = Объект.Метаданные().ТабличныеЧасти[ТабЧасть.Ключ];
			НаборМдРеквизитовТЧ = объектМетаданныеТабличнаяЧасть.Реквизиты;
			Для каждого стрПоле Из СтрокаТабЧасти Цикл
				СтрокаТабЧастиОбъекта[стрПоле.Имя] = ПолучитьЗначениеПоля(ПротоДанные,стрПоле,НаборМдРеквизитовТЧ);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	//Служебные поля и значения
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Номер) тогда
		Объект.УстановитьНовыйНомер();
	КонецЕсли;
	
	ЗаполнитьОбменДанными(Объект, ПротоДанные, ПротоОбъект);
	ЗаполнитьДополнительныеСвойства(Объект, ПротоДанные, ПротоОбъект);
	
	РежимЗаписи = Неопределено;
	Если ЭтоДокумент И НЕ ПротоОбъект.Режимы.Объект Тогда
		РежимЗаписи = РежимЗаписиДокумента.Запись;
		Если ПротоОбъект.Режимы.Проведение Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	КонецЕсли;
	Результат = ЗаписатьОбъектПриНеобходимости(Объект, ПротоОбъект, ПредставлениеМенеджера, Истина, РежимЗаписи);
	
	Возврат Результат;
КонецФункции

Функция СоздатьОбъект_Регистр(МенеджерРегистра, ПротоДанные, ПротоОбъект)
	ЭтоРегистрСведения = МенеджерРегистра = РегистрыСведений;
	ЭтоРегистрБухгалтерии = МенеджерРегистра = РегистрыБухгалтерии;
	ЭтоРегистрНакопления = МенеджерРегистра = РегистрыНакопления;
	
	Если ЭтоРегистрСведения Тогда
		ПредставлениеМдМенеджераРегистра = "РегистрыСведения";
	ИначеЕсли ЭтоРегистрБухгалтерии Тогда
		ПредставлениеМдМенеджераРегистра = "РегистрыБухгалтерии";
	ИначеЕсли ЭтоРегистрНакопления Тогда
		ПредставлениеМдМенеджераРегистра = "РегистрыНакопления";
	Иначе
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Неизвестный менеджер регистра %1.%2 . Переменная %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПротоОбъект.Тип);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПротоОбъект.Вид);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ПротоОбъект.ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПротоОбъект.Ключи) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Работа с ключами для %1 пока не поддерживается");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПредставлениеМдМенеджераРегистра);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	//Создание объекта
	ПротоНаборЗаписей = Неопределено;
	Если ПротоОбъект.ТабличныеЧасти.Свойство("Запись",ПротоНаборЗаписей) Тогда
		Попытка
			Объект = МенеджерРегистра[ПротоОбъект.Вид].СоздатьНаборЗаписей();
		Исключение
			Ошибка = ОписаниеОшибки();
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("%1.%2 не удалось создать новый набор записей.%3");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПредставлениеМдМенеджераРегистра);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПротоОбъект.Вид);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Символы.ПС+Ошибка);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		
		МетаданныеНабора = Объект.Метаданные();
		НаборМдРеквизитов = НаборРеквизитовМетаданных(ПротоОбъект.Тип, МетаданныеНабора);
				
		РегистрСведенийПодчиненРегистратору = Истина;
		Если ЭтоРегистрСведения Тогда
			РегистрСведенийПодчиненРегистратору = МетаданныеНабора.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору;
			
		ИначеЕсли ЭтоРегистрБухгалтерии Тогда
			НаборВидовСубконто = Новый Структура;

			ПостфиксыСчетов = Новый Массив;
			Если МетаданныеНабора.Корреспонденция Тогда
				ПостфиксыСчетов.Добавить("Дт");
				ПостфиксыСчетов.Добавить("Кт");
			Иначе
				ПостфиксыСчетов.Добавить("");
			КонецЕсли;
			Для каждого ПостфиксСчета Из ПостфиксыСчетов Цикл
				НаборМдРеквизитов.Вставить("Счет"+ПостфиксСчета, МетаданныеНабора.ПланСчетов);
				Для НомерВидаСубконто = 1 По МетаданныеНабора.ПланСчетов.МаксКоличествоСубконто Цикл
					ОписаниеСубконто = Новый Структура("ИмяРеквизитаСчет,ИмяРеквизитаСубконто,НомерВидаСубконто", "Счет"+ПостфиксСчета, "Субконто"+ПостфиксСчета, НомерВидаСубконто-1);
					НаборВидовСубконто.Вставить("Субконто"+ПостфиксСчета+НомерВидаСубконто, ОписаниеСубконто);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Для каждого СтрокаЗаписи Из ПротоНаборЗаписей Цикл
			ЗаписьНабора = Объект.Добавить();
			Для каждого стрПоле Из СтрокаЗаписи Цикл
				ЗначениеПоля = ПолучитьЗначениеПоля(ПротоДанные,стрПоле,НаборМдРеквизитов);

				ОписаниеСубконто = Неопределено;
				Если ЭтоРегистрБухгалтерии И НаборВидовСубконто.Свойство(стрПоле.Имя, ОписаниеСубконто) Тогда
					ВидСубконто = ЗаписьНабора[ОписаниеСубконто.ИмяРеквизитаСчет].ВидыСубконто[ОписаниеСубконто.НомерВидаСубконто].ВидСубконто;
					ЗаписьНабора[ОписаниеСубконто.ИмяРеквизитаСубконто].Вставить(ВидСубконто, ЗначениеПоля);
				Иначе
					ЗаписьНабора[стрПоле.Имя] = ЗначениеПоля;
				КонецЕсли;
			КонецЦикла;
			
			Если РегистрСведенийПодчиненРегистратору Тогда
				Если НЕ ЗначениеЗаполнено(ЗаписьНабора.Регистратор) Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не задан регистратор для записей регистра %1. Переменная %2");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПредставлениеМдМенеджераРегистра);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПротоОбъект.ИмяПеременной);
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ЗаписьНабора.Период) Тогда
					ЗаписьНабора.Период = ЗаписьНабора.Регистратор.Дата;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьНабора = Объект[0];
		Если РегистрСведенийПодчиненРегистратору Тогда
			Объект.Отбор.Регистратор.Установить(ЗаписьНабора.Регистратор);
		Иначе
			Для каждого МетаИзмерение Из МетаданныеНабора.Измерения Цикл
				ИмяИзмерения = МетаИзмерение.Имя;
				Если Объект.Отбор.Найти(ИмяИзмерения)	<> Неопределено Тогда
					Объект.Отбор[ИмяИзмерения].Установить(ЗаписьНабора[ИмяИзмерения]);
				КонецЕсли;
			КонецЦикла;

			Если МетаданныеНабора.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				Объект.Отбор.Период.Установить(ЗаписьНабора["Период"]); 
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьОбменДанными(Объект, ПротоДанные, ПротоОбъект);
		ЗаполнитьДополнительныеСвойства(Объект, ПротоДанные, ПротоОбъект);
		
	ИначеЕсли ЭтоРегистрСведения Тогда
		Попытка
			Объект = РегистрыСведений[ПротоОбъект.Вид].СоздатьМенеджерЗаписи();
		Исключение
			Ошибка = ОписаниеОшибки();
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("%1.%2 не удалось создать новый набор записей%3");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПредставлениеМдМенеджераРегистра);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПротоОбъект.Вид);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Символы.ПС+Ошибка);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		
		НаборМдРеквизитов = НаборРеквизитовМетаданных(ПротоОбъект.Тип, РегистрыСведений[ПротоОбъект.Вид].СоздатьНаборЗаписей().Метаданные());
		Для каждого стрПоле Из ПротоОбъект.ПоляОбъекта Цикл
			Объект[стрПоле.Имя] = ПолучитьЗначениеПоля(ПротоДанные,стрПоле,НаборМдРеквизитов);
		КонецЦикла;
	Иначе
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("%1.%2 в макете нет записей для регистра %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПредставлениеМдМенеджераРегистра);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПротоОбъект.Вид);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ПредставлениеМдМенеджераРегистра);
		ВызватьИсключение  ТекстСообщения;
	КонецЕсли;
		
	ПредставлениеМетаданного = "набора записей "+ПредставлениеМдМенеджераРегистра;
	ЗаписатьОбъектПриНеобходимости(Объект, ПротоОбъект, ПредставлениеМетаданного, Ложь);
	
	Возврат Объект;
КонецФункции

Функция СоздатьОбъект_ПользовательИБ(ПротоДанные,ПротоОбъект)
	Если ЗначениеЗаполнено(ПротоОбъект.Ключи) Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Работа с ключами при создании пользователя ИБ пока не поддерживается");
	КонецЕсли;
	Объект = ПользователиИнформационнойБазы.СоздатьПользователя();
	
	параметрыПользователя = Новый Структура;
	параметрыПользователя.Вставить("Имя", "");
	параметрыПользователя.Вставить("ПолноеИмя", "");
	параметрыПользователя.Вставить("АутентификацияСтандартная", Истина);
	параметрыПользователя.Вставить("АутентификацияОС", Ложь);
	параметрыПользователя.Вставить("ПользовательОС", "");
	параметрыПользователя.Вставить("ОсновнойИнтерфейс", ""); //Метаданные.Интерфейсы.Администратор);
	параметрыПользователя.Вставить("Пароль", "пароль");
	параметрыПользователя.Вставить("ПоказыватьВСпискеВыбора", Истина);
	параметрыПользователя.Вставить("РежимЗапуска", РежимЗапускаКлиентскогоПриложения.Авто);
	параметрыПользователя.Вставить("Язык", Метаданные.Языки.Русский);
	массивРолей = Новый Массив;
	параметрыПользователя.Вставить("Роли", массивРолей);
	
	//Заполняем реквизиты справочника
	Для каждого стрПоле Из ПротоОбъект.ПоляОбъекта Цикл
		параметрыПользователя[стрПоле.Имя] = ПолучитьЗначениеПоля(ПротоДанные,стрПоле,Неопределено);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Объект, параметрыПользователя,, "ОсновнойИнтерфейс,РежимЗапуска");
	
	ПротоНаборРолей = Неопределено;
	Если ПротоОбъект.ТабличныеЧасти.Свойство("Роли",ПротоНаборРолей) Тогда
		Для каждого СтрокаРоли Из ПротоНаборРолей Цикл
			Для каждого стрПоле Из СтрокаРоли Цикл
				Роль = Метаданные.Роли.Найти(ПолучитьЗначениеПоля(ПротоДанные,стрПоле,Неопределено));
				параметрыПользователя.Роли.Добавить(Роль);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	НашлиРежимЗапуска = Ложь;
	Для каждого ЗначениеРежимаЗапуска Из РежимЗапускаКлиентскогоПриложения Цикл
		Если НРег(""+ЗначениеРежимаЗапуска) = НРег(параметрыПользователя.РежимЗапуска) Тогда
			НашлиРежимЗапуска = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НашлиРежимЗапуска Тогда
		Объект.РежимЗапуска = ЗначениеРежимаЗапуска;
	Иначе
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не нашли режим запуска <%1>. Возможно, нужно указать с пробелом, например, <Управляемое приложение>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",параметрыПользователя.РежимЗапуска);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(параметрыПользователя.ОсновнойИнтерфейс) Тогда
		Объект.ОсновнойИнтерфейс = Метаданные.Интерфейсы.Найти(параметрыПользователя.ОсновнойИнтерфейс);
	КонецЕсли;
	Для каждого роль Из параметрыПользователя.Роли Цикл
		Объект.Роли.Добавить(роль);
	КонецЦикла;
	
	ПредставлениеМетаданного = "пользователя ИБ ";
	ЗаписатьОбъектПриНеобходимости(Объект, ПротоОбъект, ПредставлениеМетаданного, Ложь);
	
	Возврат Объект.Имя;
КонецФункции

Функция СоздатьОбъект_ПВХ(ПротоДанные, ПротоОбъект)
	
	СпрМенеджер = ПланыВидовХарактеристик[ПротоОбъект.Вид];
	
	//Подготовим ПротоОбъект
	стрПолеЭтоГруппа = ПротоОбъект.ПоляОбъекта.Найти("ЭтоГруппа","Имя");
	Если стрПолеЭтоГруппа<>Неопределено Тогда
		ПротоОбъект.Режимы.Группа = Булево(стрПолеЭтоГруппа.Значение);
		ПротоОбъект.ПоляОбъекта.Удалить(стрПолеЭтоГруппа);
	КонецЕсли;

	Объект = ПолучитьОбъектЕслиВПротоДанныеПереданаСсылка(СпрМенеджер, ПротоОбъект);
	Если Объект=Неопределено И ЗначениеЗаполнено(ПротоОбъект.Ключи) Тогда
		Объект = НайтиОбъектПоКлючам(ПротоОбъект, СпрМенеджер, ПротоОбъект.Ключи);
	КонецЕсли;

	Если ПротоОбъект.Режимы.ТолькоСоздание И Объект<>Неопределено Тогда
		Возврат ПротоОбъект.Объект;
	КонецЕсли;
	
	//Создание объекта ПВХ
	Если Объект=Неопределено Тогда
		Если ПротоОбъект.Режимы.Предопределенный Тогда
			Попытка
				Объект = СпрМенеджер[ПротоОбъект.ИмяПредопределенного].ПолучитьОбъект();
			Исключение
				Ошибка = ОписаниеОшибки();
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("ПланВидовХарактеристик.%1 не удалось найти предопределенный элемент/группу [%2].%3");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПротоОбъект.Вид);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПротоОбъект.ИмяПредопределенного);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Символы.ПС+Ошибка);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
		ИначеЕсли ПротоОбъект.Режимы.СоздатьПоГуид Тогда
			ВызватьИсключение ПолучитьТекстСообщенияПользователю("Устарело и больше не поддерживается: https://github.com/xDrivenDevelopment/xUnitFor1C/issues/332");
		ИначеЕсли ПротоОбъект.Режимы.Группа Тогда
			Попытка
				Объект = СпрМенеджер.СоздатьГруппу();
			Исключение
				Ошибка = ОписаниеОшибки();
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("ПланВидовХарактеристик.%1 не удалось создать новую группу.%2");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПротоОбъект.Вид);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Символы.ПС+Ошибка);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
		Иначе
			Попытка
				Объект = СпрМенеджер.СоздатьЭлемент();
			Исключение
				Ошибка = ОписаниеОшибки();
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("ПланВидовХарактеристик.%1 не удалось создать новый элемент.%2");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПротоОбъект.Вид);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Символы.ПС+Ошибка);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
		КонецЕсли;
		
		Если Объект.ЭтоНовый() Тогда
			Если НЕ ЗначениеЗаполнено(ПротоОбъект.Объект) Тогда
				ПротоОбъект.Объект = СпрМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор);
			КонецЕсли;
			Объект.УстановитьСсылкуНового(ПротоОбъект.Объект);
		Иначе
			ПротоОбъект.Объект = Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	//Заполняем реквизиты справочника
	НаборМдРеквизитов = НаборРеквизитовМетаданных(ПротоОбъект.Тип, Объект.Метаданные());
	Для каждого стрПоле Из ПротоОбъект.ПоляОбъекта Цикл
		Объект[стрПоле.Имя] = ПолучитьЗначениеПоля(ПротоДанные,стрПоле,НаборМдРеквизитов);
	КонецЦикла;
	
	Для каждого мдТабЧасть из Объект.Метаданные().ТабличныеЧасти Цикл
		ЭтоРежимГруппа = ПротоОбъект.Режимы.Группа;
		Если (ЭтоРежимГруппа И мдТабЧасть.Использование<>Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
			Или (НЕ ЭтоРежимГруппа И мдТабЧасть.Использование<>Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы) Тогда
			
				Объект[мдТабЧасть.Имя].Очистить();
		КонецЕсли;
		 
	КонецЦикла;
	Для каждого ТабЧасть из ПротоОбъект.ТабличныеЧасти Цикл
		Для каждого СтрокаТабЧасти Из ТабЧасть.Значение Цикл
			СтрокаТабЧастиОбъекта = Объект[ТабЧасть.Ключ].Добавить();
			объектМетаданныеТабличнаяЧасть = Объект.Метаданные().ТабличныеЧасти[ТабЧасть.Ключ];
			НаборМдРеквизитовТЧ = объектМетаданныеТабличнаяЧасть.Реквизиты;
			Для каждого стрПоле Из СтрокаТабЧасти Цикл
				СтрокаТабЧастиОбъекта[стрПоле.Имя] = ПолучитьЗначениеПоля(ПротоДанные,стрПоле,НаборМдРеквизитовТЧ);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	//Служебные поля и значения
	Если НЕ ЗначениеЗаполнено(Объект.Код) тогда
		Объект.УстановитьНовыйКод();
	КонецЕсли;
	
	ЗаполнитьОбменДанными(Объект, ПротоДанные, ПротоОбъект);
	ЗаполнитьДополнительныеСвойства(Объект, ПротоДанные, ПротоОбъект);
	
	ПредставлениеМетаданного = "плана видов характеристик";
	Результат = ЗаписатьОбъектПриНеобходимости(Объект, ПротоОбъект, ПредставлениеМетаданного, Истина);
	
	Возврат Результат;
КонецФункции

Функция СоздатьОбъект_ПланСчетов(ПротоДанные, ПротоОбъект)
	
	СпрМенеджер = ПланыСчетов[ПротоОбъект.Вид];
	
	//Подготовим ПротоОбъект
	стрПолеЭтоГруппа = ПротоОбъект.ПоляОбъекта.Найти("ЭтоГруппа","Имя");
	Если стрПолеЭтоГруппа<>Неопределено Тогда
		ПротоОбъект.Режимы.Группа = Булево(стрПолеЭтоГруппа.Значение);
		ПротоОбъект.ПоляОбъекта.Удалить(стрПолеЭтоГруппа);
	КонецЕсли;

	Объект = ПолучитьОбъектЕслиВПротоДанныеПереданаСсылка(СпрМенеджер, ПротоОбъект);
	Если Объект=Неопределено И ЗначениеЗаполнено(ПротоОбъект.Ключи) Тогда
		Объект = НайтиОбъектПоКлючам(ПротоОбъект, СпрМенеджер, ПротоОбъект.Ключи);
	КонецЕсли;

	Если ПротоОбъект.Режимы.ТолькоСоздание И Объект<>Неопределено Тогда
		Возврат ПротоОбъект.Объект;
	КонецЕсли;
	
	//Создание объекта ПВХ
	Если Объект=Неопределено Тогда
		Если ПротоОбъект.Режимы.Предопределенный Тогда
			Попытка
				Объект = СпрМенеджер[ПротоОбъект.ИмяПредопределенного].ПолучитьОбъект();
			Исключение
				Ошибка = ОписаниеОшибки();
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("ПланСчетов.%1 не удалось найти предопределенный элемент/группу [%2].%3");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПротоОбъект.Вид);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПротоОбъект.ИмяПредопределенного);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Символы.ПС+Ошибка);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
		ИначеЕсли ПротоОбъект.Режимы.СоздатьПоГуид Тогда
			ВызватьИсключение ПолучитьТекстСообщенияПользователю("Устарело и больше не поддерживается: https://github.com/xDrivenDevelopment/xUnitFor1C/issues/332");
		ИначеЕсли ПротоОбъект.Режимы.Группа Тогда
			Попытка
				Объект = СпрМенеджер.СоздатьГруппу();
			Исключение
				Ошибка = ОписаниеОшибки();
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("ПланСчетов.%1 не удалось создать новую группу.%2");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПротоОбъект.Вид);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Символы.ПС+Ошибка);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
		Иначе
			Попытка
				Объект = СпрМенеджер.СоздатьЭлемент();
			Исключение
				Ошибка = ОписаниеОшибки();
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("ПланСчетов.%1 не удалось создать новый элемент.%2");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПротоОбъект.Вид);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Символы.ПС+Ошибка);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
		КонецЕсли;
		
		Если Объект.ЭтоНовый() Тогда
			Если НЕ ЗначениеЗаполнено(ПротоОбъект.Объект) Тогда
				ПротоОбъект.Объект = СпрМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор);
			КонецЕсли;
			Объект.УстановитьСсылкуНового(ПротоОбъект.Объект);
		Иначе
			ПротоОбъект.Объект = Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	//Заполняем реквизиты справочника
	НаборМдРеквизитов = НаборРеквизитовМетаданных(ПротоОбъект.Тип, Объект.Метаданные());
	Для каждого стрПоле Из ПротоОбъект.ПоляОбъекта Цикл
		Объект[стрПоле.Имя] = ПолучитьЗначениеПоля(ПротоДанные,стрПоле,НаборМдРеквизитов);
	КонецЦикла;
	
	Для каждого мдТабЧасть из Объект.Метаданные().ТабличныеЧасти Цикл
		ЭтоРежимГруппа = ПротоОбъект.Режимы.Группа;
		Если (ЭтоРежимГруппа И мдТабЧасть.Использование<>Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
			Или (НЕ ЭтоРежимГруппа И мдТабЧасть.Использование<>Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы) Тогда
			
				Объект[мдТабЧасть.Имя].Очистить();
		КонецЕсли;
		 
	КонецЦикла;
	Для каждого ТабЧасть из ПротоОбъект.ТабличныеЧасти Цикл
		Для каждого СтрокаТабЧасти Из ТабЧасть.Значение Цикл
			СтрокаТабЧастиОбъекта = Объект[ТабЧасть.Ключ].Добавить();
			объектМетаданныеТабличнаяЧасть = Объект.Метаданные().ТабличныеЧасти[ТабЧасть.Ключ];
			НаборМдРеквизитовТЧ = объектМетаданныеТабличнаяЧасть.Реквизиты;
			Для каждого стрПоле Из СтрокаТабЧасти Цикл
				СтрокаТабЧастиОбъекта[стрПоле.Имя] = ПолучитьЗначениеПоля(ПротоДанные,стрПоле,НаборМдРеквизитовТЧ);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	//Служебные поля и значения
	Если НЕ ЗначениеЗаполнено(Объект.Код) тогда
		Объект.УстановитьНовыйКод();
	КонецЕсли;
	
	ЗаполнитьОбменДанными(Объект, ПротоДанные, ПротоОбъект);
	ЗаполнитьДополнительныеСвойства(Объект, ПротоДанные, ПротоОбъект);
	
	ПредставлениеМетаданного = "плана счетов";
	Результат = ЗаписатьОбъектПриНеобходимости(Объект, ПротоОбъект, ПредставлениеМетаданного, Истина);
	
	Возврат Результат;
КонецФункции

Функция СоздатьОбъект_ПланВидовРасчетов(ПротоДанные, ПротоОбъект)
	
	СпрМенеджер = ПланыВидовРасчета[ПротоОбъект.Вид];
	
	//Подготовим ПротоОбъект
	Объект = ПолучитьОбъектЕслиВПротоДанныеПереданаСсылка(СпрМенеджер, ПротоОбъект);
	Если Объект=Неопределено И ЗначениеЗаполнено(ПротоОбъект.Ключи) Тогда
		Объект = НайтиОбъектПоКлючам(ПротоОбъект, СпрМенеджер, ПротоОбъект.Ключи);
	КонецЕсли;

	Если ПротоОбъект.Режимы.ТолькоСоздание И Объект<>Неопределено Тогда
		Возврат ПротоОбъект.Объект;
	КонецЕсли;
	
	//Создание объекта справочника
	Если Объект=Неопределено Тогда
		Если ПротоОбъект.Режимы.Предопределенный Тогда
			Попытка
				Объект = СпрМенеджер[ПротоОбъект.ИмяПредопределенного].ПолучитьОбъект();
			Исключение
				Ошибка = ОписаниеОшибки();
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("ПланВидовРасчета.%1 не удалось найти предопределенный элемент/группу [%2].%3");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПротоОбъект.Вид);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПротоОбъект.ИмяПредопределенного);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Символы.ПС+Ошибка);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
		ИначеЕсли ПротоОбъект.Режимы.СоздатьПоГуид Тогда
			ВызватьИсключение ПолучитьТекстСообщенияПользователю("Устарело и больше не поддерживается: https://github.com/xDrivenDevelopment/xUnitFor1C/issues/332");
		ИначеЕсли ПротоОбъект.Режимы.Группа Тогда
			Попытка
				Объект = СпрМенеджер.СоздатьГруппу();
			Исключение
				Ошибка = ОписаниеОшибки();
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("ПланВидовРасчета.%1 не удалось создать новую группу.%2");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПротоОбъект.Вид);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Символы.ПС+Ошибка);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
		Иначе
			Попытка
				Объект = СпрМенеджер.СоздатьЭлемент();
			Исключение
				Ошибка = ОписаниеОшибки();
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("ПланВидовРасчета.%1 не удалось создать новый элемент.%2");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПротоОбъект.Вид);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Символы.ПС+Ошибка);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
		КонецЕсли;
		
		Если Объект.ЭтоНовый() Тогда
			Если НЕ ЗначениеЗаполнено(ПротоОбъект.Объект) Тогда
				ПротоОбъект.Объект = СпрМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор);
			КонецЕсли;
			Объект.УстановитьСсылкуНового(ПротоОбъект.Объект);
		Иначе
			ПротоОбъект.Объект = Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	//Заполняем реквизиты справочника
	НаборМдРеквизитов = НаборРеквизитовМетаданных(ПротоОбъект.Тип, Объект.Метаданные());
	Для каждого стрПоле Из ПротоОбъект.ПоляОбъекта Цикл
		Объект[стрПоле.Имя] = ПолучитьЗначениеПоля(ПротоДанные,стрПоле,НаборМдРеквизитов);
	КонецЦикла;
	
	Для каждого мдТабЧасть из Объект.Метаданные().ТабличныеЧасти Цикл
		ЭтоРежимГруппа = ПротоОбъект.Режимы.Группа;
		Если (ЭтоРежимГруппа И мдТабЧасть.Использование<>Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
			Или (НЕ ЭтоРежимГруппа И мдТабЧасть.Использование<>Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы) Тогда
			
				Объект[мдТабЧасть.Имя].Очистить();
		КонецЕсли;
		 
	КонецЦикла;
	Для каждого ТабЧасть из ПротоОбъект.ТабличныеЧасти Цикл
		Для каждого СтрокаТабЧасти Из ТабЧасть.Значение Цикл
			СтрокаТабЧастиОбъекта = Объект[ТабЧасть.Ключ].Добавить();
			объектМетаданныеТабличнаяЧасть = Объект.Метаданные().ТабличныеЧасти[ТабЧасть.Ключ];
			НаборМдРеквизитовТЧ = объектМетаданныеТабличнаяЧасть.Реквизиты;
			Для каждого стрПоле Из СтрокаТабЧасти Цикл
				СтрокаТабЧастиОбъекта[стрПоле.Имя] = ПолучитьЗначениеПоля(ПротоДанные,стрПоле,НаборМдРеквизитовТЧ);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	//Служебные поля и значения
	Если НЕ ЗначениеЗаполнено(Объект.Код) тогда
		Объект.УстановитьНовыйКод();
	КонецЕсли;
	
	ЗаполнитьОбменДанными(Объект, ПротоДанные, ПротоОбъект);
	ЗаполнитьДополнительныеСвойства(Объект, ПротоДанные, ПротоОбъект);
	
	ПредставлениеМетаданного = "плана видов расчета";
	Результат = ЗаписатьОбъектПриНеобходимости(Объект, ПротоОбъект, ПредставлениеМетаданного, Истина);
	
	Возврат Результат;
КонецФункции

Функция ПолучитьОбъектЕслиВПротоДанныеПереданаСсылка(МенеджерОбъекта, ПротоОбъект)
	Перем Объект;
	стрПолеСсылка = ПротоОбъект.ПоляОбъекта.Найти(ВернутьЗначениеСоответствия("Ссылка"),"Имя");
	Если стрПолеСсылка<>Неопределено Тогда
		ПротоОбъект.Объект = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(стрПолеСсылка.Значение));
		ПротоОбъект.ПоляОбъекта.Удалить(стрПолеСсылка);
		Объект = ПротоОбъект.Объект.ПолучитьОбъект();
	КонецЕсли;
	Возврат Объект;
КонецФункции

Процедура ЗаполнитьОбменДанными(Объект, ПротоДанные, ПротоОбъект)
	Объект.ОбменДанными.Загрузка = ПротоОбъект.Режимы.ОбменДанными;
	
	//Дополнительные Свойства
	Для каждого стрДопСвойство Из ПротоОбъект.ДопСвойства Цикл
		Значение = ПолучитьЗначениеПоля(ПротоДанные,стрДопСвойство,Неопределено);
		Объект.ДополнительныеСвойства.Вставить(стрДопСвойство.Имя,Значение);
	КонецЦикла;
	Для каждого стрДопСвойство Из ПротоОбъект.ОбменДанными Цикл
		Значение = ПолучитьЗначениеПоля(ПротоДанные,стрДопСвойство,Неопределено);
		Объект.ОбменДанными[стрДопСвойство.Имя] = Значение;
	КонецЦикла;
КонецПроцедуры

Функция ЗаписатьОбъектПриНеобходимости(Объект, ПротоОбъект, ПредставлениеМетаданного, ЭтоСсылочныйОбъект, РежимЗаписи = Неопределено)
	Перем Результат;
	Если НЕ ПротоОбъект.Режимы.Объект Тогда
		Попытка
			Если РежимЗаписи = Неопределено Тогда
				Объект.Записать();
			Иначе
				Объект.Записать(РежимЗаписи);
			КонецЕсли;
			Если ЭтоСсылочныйОбъект Тогда
				Результат = Объект.Ссылка;
			КонецЕсли;
		Исключение
			Ошибка = ОписаниеОшибки();
			Ошибка = "Ошибка записи "+ПредставлениеМетаданного+" "+ПротоОбъект.Вид+", переменная "+ПротоОбъект.ИмяПеременной + Символы.ПС + Ошибка;
			ВызватьИсключение Ошибка;
		КонецПопытки;
	ИначеЕсли ЭтоСсылочныйОбъект Тогда
		Результат = Объект;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьДополнительныеСвойства(Объект, ПротоДанные, ПротоОбъект)
	Для каждого стрДопСвойство Из ПротоОбъект.ДопСвойства Цикл
		Значение = ПолучитьЗначениеПоля(ПротоДанные,стрДопСвойство,Неопределено);
		Объект.ДополнительныеСвойства.Вставить(стрДопСвойство.Имя,Значение);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьЗначениеПоля(ПротоДанные,стрПоле,НаборМдРеквизитов)
	Значение = Неопределено;
	Если ПустаяСтрока(стрПоле.Режим) Тогда
		Если ЗначениеЗаполнено(стрПоле.ДополнительныйТип) Тогда
			ТипЗначения = Новый ОписаниеТипов(стрПоле.ДополнительныйТип);
			Значение = ТипЗначения.ПривестиЗначение(стрПоле.Значение);
		ИначеЕсли ЭтоХранилищеЗначений(НаборМдРеквизитов, стрПоле.Имя) Тогда
			Значение = XMLЗначение(Тип("ХранилищеЗначения"), стрПоле.Значение);
		Иначе
			Значение = стрПоле.Значение;
		КонецЕсли;
	ИначеЕсли ВРег(стрПоле.Режим) = "ПЕРЕМ" Тогда
		Значение = ПротоДанные[стрПоле.Значение].Объект;
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Значение = ПолучитьОбъект(ПротоДанные, ПротоДанные[стрПоле.Значение]);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("ЗначениеНеНайдено: Реквизит <%1>: Искали значение <%2>, но не нашли.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",стрПоле.Имя);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",стрПоле.Значение);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	ИначеЕсли ВРег(стрПоле.Режим) = "ТЕКУЩАЯДАТА" Тогда
		Значение = ТекущаяДата();
	ИначеЕсли ВРег(стрПоле.Режим) = "ВЫРАЖЕНИЕ" Тогда 
		Значение = Вычислить(стрПоле.Значение);
	Иначе
		Значение = ВычислитьЗначениеПоТипуПоля(НаборМдРеквизитов,стрПоле);
	КонецЕсли;
	Возврат Значение;
КонецФункции

Функция ЭтоХранилищеЗначений(НаборМДРеквизитов, Поле)
	
	МетаданныеПоля = Неопределено;
	
	Если ТипЗнч(НаборМДРеквизитов) = Тип("Структура")
			И НаборМДРеквизитов.Свойство(Поле, МетаданныеПоля) Тогда
	
		Результат = (МетаданныеПоля.Тип = Новый ОписаниеТипов("ХранилищеЗначения"));

	Иначе

		Результат = Ложь;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ВычислитьЗначениеПоТипуПоля(НаборМдРеквизитов,стрПоле)
	Значение = Неопределено;
	Режим = ВРег(стрПоле.Режим);
	
	Попытка
		Если НаборМдРеквизитов = Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(стрПоле.ДополнительныйТип) Тогда
				ВызватьИсключение ПолучитьТекстСообщенияПользователю("Не указан дополнительный тип значения");
			КонецЕсли;
			МетаданныеРеквизита = Неопределено;
		Иначе
			МетаданныеРеквизита = НаборМдРеквизитов[стрПоле.Имя];
		КонецЕсли; 
		УжеВычислилиЗначение = Ложь;
		ЕстьМетаданныеРеквизита = Ложь;
		Если Режим = "ГУИД" И МетаданныеРеквизита <> Неопределено И МетаданныеРеквизита.Тип.СодержитТип(Тип("УникальныйИдентификатор")) Тогда
			Значение = Новый УникальныйИдентификатор(стрПоле.Значение);
			УжеВычислилиЗначение = Истина;
		Иначе
			
			Если ЗначениеЗаполнено(стрПоле.ДополнительныйТип) Тогда
				ТипЗначения = Новый ОписаниеТипов(стрПоле.ДополнительныйТип);
			Иначе
				Если Метаданные.ПланыСчетов.Найти(МетаданныеРеквизита) <> Неопределено Тогда
					ТипЗначения = Новый ОписаниеТипов("ПланСчетовСсылка."+МетаданныеРеквизита.Имя);
				Иначе
					ТипЗначения = МетаданныеРеквизита.Тип;
				КонецЕсли;
			КонецЕсли;
			ЗначениеПоУмолчанию = ТипЗначения.ПривестиЗначение();

			ПредыдДопТип = стрПоле.ДополнительныйТип;
			Если ЗначениеПоУмолчанию = Неопределено И ТипЗначения.Типы().Количество() > 1 И НЕ УжеВычислилиЗначение И стрПоле.Значение <> "00000000-0000-0000-0000-000000000000" Тогда
				Для Каждого Тип Из ТипЗначения.Типы() Цикл
					стрПоле.ДополнительныйТип = Новый Массив;
					стрПоле.ДополнительныйТип.Добавить(Тип);
					Значение = ВычислитьЗначениеПоТипуПоля(НаборМдРеквизитов, стрПоле);
					Если Найти(Строка(Значение), "Объект не найден") = 0 И ЗначениеЗаполнено(Значение) Тогда
						Прервать; 
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			стрПоле.ДополнительныйТип = ПредыдДопТип;

			Попытка
				МетаданныеТипаРеквизита = ЗначениеПоУмолчанию.Метаданные();
				ЕстьМетаданныеРеквизита = Истина;
			Исключение
			КонецПопытки;
			
			Если НЕ ЕстьМетаданныеРеквизита И Режим = "ПРЕДОПРЕДЕЛЕННЫЙ" Тогда
				Если БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(ТипЗначения.Типы()[0]) Тогда
					Значение = ПолучитьЗначениеТочкиБизнесПроцесса(стрПоле.Значение);
					УжеВычислилиЗначение = Истина;
				Иначе
					Значение = Неопределено;
					СтрокаДляВыполнения = "Значение = "+ТипЗначения+"["""+стрПоле.Значение+"""];";
					Выполнить(СтрокаДляВыполнения);
					УжеВычислилиЗначение = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ УжеВычислилиЗначение и ЕстьМетаданныеРеквизита Тогда
			ПолноеИмяТипаРеквизита = МетаданныеТипаРеквизита.ПолноеИмя();
			Если Найти(ПолноеИмяТипаРеквизита, ВернутьЗначениеСоответствия("Справочник")) = 1 Тогда
				менеджерОбъекта = Справочники[МетаданныеТипаРеквизита.Имя];
			ИначеЕсли Найти(ПолноеИмяТипаРеквизита, ВернутьЗначениеСоответствия("Документ")) = 1 Тогда
				менеджерОбъекта = Документы[МетаданныеТипаРеквизита.Имя];
			ИначеЕсли Найти(ПолноеИмяТипаРеквизита, ВернутьЗначениеСоответствия("Перечисление")) = 1 Тогда
				менеджерОбъекта = Перечисления[МетаданныеТипаРеквизита.Имя];
			ИначеЕсли Найти(ПолноеИмяТипаРеквизита, ВернутьЗначениеСоответствия("ПланСчетов")) = 1 Тогда
				менеджерОбъекта = ПланыСчетов[МетаданныеТипаРеквизита.Имя];
			ИначеЕсли Найти(ПолноеИмяТипаРеквизита, ВернутьЗначениеСоответствия("ПланВидовХарактеристик")) = 1 Тогда
				менеджерОбъекта = ПланыВидовХарактеристик[МетаданныеТипаРеквизита.Имя];
			ИначеЕсли Найти(ПолноеИмяТипаРеквизита, ВернутьЗначениеСоответствия("ПланВидовРасчета")) = 1 Тогда
				менеджерОбъекта = ПланыВидовРасчета[МетаданныеТипаРеквизита.Имя];
			ИначеЕсли Найти(ПолноеИмяТипаРеквизита, ВернутьЗначениеСоответствия("Задача")) = 1 Тогда
				менеджерОбъекта = Задачи[МетаданныеТипаРеквизита.Имя];
			КонецЕсли;
			Если менеджерОбъекта = Неопределено Тогда
				ВызватьИсключение ПолучитьТекстСообщенияПользователю("Не найден менеджерОбъекта");
			КонецЕсли;
			Если Режим = "ПРЕДОПРЕДЕЛЕННЫЙ" Тогда
				//Значение = менеджерОбъекта[стрПоле.Значение];
				Если ЗначениеЗаполнено(стрПоле.Значение) Тогда
					Значение = менеджерОбъекта[стрПоле.Значение];
				Иначе
					Значение = менеджерОбъекта.ПустаяСсылка();
				КонецЕсли;
			ИначеЕсли Режим = "КОД" Тогда
				МетаданныеИмя = МетаданныеТипаРеквизита.Имя;
				ПараметрыПоиска = Новый Структура();
				ПараметрыПоиска.Вставить("Код",стрПоле.Значение);
				РезультатФункции = ПолучитьЗначениеИзКэша(менеджерОбъекта,МетаданныеИмя,ПараметрыПоиска);
				Если РезультатФункции.ЭтоЗначениеИзКэша Тогда
					Значение = РезультатФункции.ЗначениеИзКэша;
				Иначе
					Значение = менеджерОбъекта.НайтиПоКоду(стрПоле.Значение);
					ДобавитьЗначениеВКэш(Значение,менеджерОбъекта,МетаданныеИмя,ПараметрыПоиска)
				Конецесли;	
			ИначеЕсли Режим = "НОМЕР" Тогда
				Значение = НайтиБлижайшийДокументПоНомеру(МетаданныеТипаРеквизита, стрПоле.Значение);
			ИначеЕсли Режим = "НАИМЕНОВАНИЕ" Тогда
				МетаданныеИмя = МетаданныеТипаРеквизита.Имя;
				ПараметрыПоиска = Новый Структура();
				ПараметрыПоиска.Вставить("Наименование",стрПоле.Значение);
				РезультатФункции = ПолучитьЗначениеИзКэша(менеджерОбъекта,МетаданныеИмя,ПараметрыПоиска);
				Если РезультатФункции.ЭтоЗначениеИзКэша Тогда
					Значение = РезультатФункции.ЗначениеИзКэша;
				Иначе
					Значение = менеджерОбъекта.НайтиПоНаименованию(стрПоле.Значение, Истина);
					ДобавитьЗначениеВКэш(Значение,менеджерОбъекта,МетаданныеИмя,ПараметрыПоиска)
				Конецесли;
			ИначеЕсли Режим = "ГУИД" Тогда
				Значение = менеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(стрПоле.Значение));
			Иначе
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Неверный режим поиска: Не поддерживаемый режим поиска. Реквизит <%1>: Искали значение <%2>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",стрПоле.Имя);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",стрПоле.Значение);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(стрПоле.Значение) И НЕ ЗначениеЗаполнено(Значение) Тогда //Если НЕ ЗначениеЗаполнено(Значение) Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("ЗначениеНеНайдено: Реквизит <%1>: Искали значение <%2>, но не нашли.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",стрПоле.Имя);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",стрПоле.Значение);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		КонецЕсли;
	Исключение
		ошибка = ОписаниеОшибки();
		Если Найти(ошибка, "НеверныйРежимПоиска") = 0 Тогда
			ошибка = "ОшибкаПоиска:  Реквизит <"+стрПоле.Имя+">: Искали значение <"+стрПоле.Значение+"> " + ошибка;
		КонецЕсли;
		ВызватьИсключение ошибка;
	КонецПопытки;
		
	Возврат Значение;
КонецФункции

Функция СоздатьПользователяИБ(параметры) Экспорт
	НовыйПользователь = ПользователиИнформационнойБазы.СоздатьПользователя();

	ЗаполнитьЗначенияСвойств(НовыйПользователь, параметры,, "ОсновнойИнтерфейс");
	Если ЗначениеЗаполнено(параметры.ОсновнойИнтерфейс) Тогда
		НовыйПользователь.ОсновнойИнтерфейс = Метаданные.Интерфейсы.Найти(параметры.ОсновнойИнтерфейс);
	КонецЕсли;
	Для каждого роль Из параметры.Роли Цикл
		НовыйПользователь.Роли.Добавить(роль);
	КонецЦикла;

	НовыйПользователь.Записать();  
	Возврат НовыйПользователь;
КонецФункции

Функция КолонкиМакетаДанных()
	КолонкиМакета = Новый Структура();
	СтрокаЗеро = "0";
	КолонкиМакета.Вставить("Тип", СтрокаЗеро);
	КолонкиМакета.Вставить("Вид", СтрокаЗеро);
	КолонкиМакета.Вставить("ИмяПеременной", СтрокаЗеро);
	КолонкиМакета.Вставить("ТЧ", СтрокаЗеро);
	КолонкиМакета.Вставить("Реквизит", СтрокаЗеро);
	КолонкиМакета.Вставить("Значение", СтрокаЗеро);
	КолонкиМакета.Вставить("Режим", СтрокаЗеро);
	КолонкиМакета.Вставить("ДополнительныйТипЗначения", СтрокаЗеро);
	КолонкиМакета.Вставить("Ключ", СтрокаЗеро);
	Возврат КолонкиМакета;
КонецФункции

Функция ПолучитьЗначениеТочкиБизнесПроцесса(Значение_Строкой)
	Значение = Неопределено;
	Для каждого БизнесПроцессМенеджер из БизнесПроцессы Цикл
		ТочкиМаршрута = БизнесПроцессМенеджер.ТочкиМаршрута;
		Для каждого ТочкаМаршрута Из ТочкиМаршрута Цикл
			Если ВРег(ТочкаМаршрута.Имя) = ВРег(Значение_Строкой) Тогда
				Значение = ТочкаМаршрута;
				Возврат Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Значение;
КонецФункции

Функция НайтиБлижайшийДокументПоНомеру(МетаданныеДокумента, Значение_Строкой)

	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Доки.Ссылка,
		|	Доки.Дата
		|ИЗ
		|	Документ."+МетаданныеДокумента.Имя+" КАК Доки
		|ГДЕ
		|	Доки.Номер = &Номер
		|
		|УПОРЯДОЧИТЬ ПО
		|	Доки.Дата УБЫВ";
	Запрос = Новый Запрос(ТекстЗапроса);
	Если МетаданныеДокумента.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Число Тогда
		Номер = Число(Значение_Строкой);
	Иначе
		Номер = Значение_Строкой;
	КонецЕсли; 
	Запрос.УстановитьПараметр("Номер", Номер);
	
	Результат = Запрос.Выполнить();
	
	Значение = Неопределено;
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Значение = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не удалось найти документ по номеру <%1>. Тип Документ.%2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Значение_Строкой);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",МетаданныеДокумента.Имя);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	Возврат Значение;
КонецФункции

Функция НаборРеквизитовМетаданных(КорневойТип, МетаданныеОбъекта)
	НаборМдРеквизитов = Новый Структура;
	Если КорневойТип = ВернутьЗначениеСоответствия("Справочник") 
			или КорневойТип = ВернутьЗначениеСоответствия("Документ") 
			или КорневойТип = ВернутьЗначениеСоответствия("ПланВидовХарактеристик")
			или КорневойТип = ВернутьЗначениеСоответствия("ПланСчетов")
			или КорневойТип = ВернутьЗначениеСоответствия("ПланВидовРасчета")
			или КорневойТип = ВернутьЗначениеСоответствия("БизнесПроцесс")
			или КорневойТип = ВернутьЗначениеСоответствия("ПланОбмена") Тогда
			
		ДобавитьРеквизитыМетаданныхВНаборРеквизитов(МетаданныеОбъекта.СтандартныеРеквизиты, НаборМдРеквизитов);
		ДобавитьРеквизитыМетаданныхВНаборРеквизитов(МетаданныеОбъекта.Реквизиты, НаборМдРеквизитов);
	ИначеЕсли КорневойТип = ВернутьЗначениеСоответствия("Задача") Тогда
		ДобавитьРеквизитыМетаданныхВНаборРеквизитов(МетаданныеОбъекта.СтандартныеРеквизиты, НаборМдРеквизитов);
		ДобавитьРеквизитыМетаданныхВНаборРеквизитов(МетаданныеОбъекта.Реквизиты, НаборМдРеквизитов);
		ДобавитьРеквизитыМетаданныхВНаборРеквизитов(МетаданныеОбъекта.РеквизитыАдресации, НаборМдРеквизитов);
		
	ИначеЕсли КорневойТип = ВернутьЗначениеСоответствия("РегистрСведений") 
		или КорневойТип = ВернутьЗначениеСоответствия("РегистрНакопления")
		или КорневойТип = ВернутьЗначениеСоответствия("РегистрБухгалтерии") Тогда
		
			ДобавитьРеквизитыМетаданныхВНаборРеквизитов(МетаданныеОбъекта.СтандартныеРеквизиты, НаборМдРеквизитов);
			ДобавитьРеквизитыМетаданныхВНаборРеквизитов(МетаданныеОбъекта.Измерения, НаборМдРеквизитов, КорневойТип);
			ДобавитьРеквизитыМетаданныхВНаборРеквизитов(МетаданныеОбъекта.Ресурсы, НаборМдРеквизитов);
			ДобавитьРеквизитыМетаданныхВНаборРеквизитов(МетаданныеОбъекта.Реквизиты, НаборМдРеквизитов);

	Иначе
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Необрабатываемый корневой тип <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КорневойТип);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Возврат НаборМдРеквизитов;
КонецФункции

Процедура ДобавитьРеквизитыМетаданныхВНаборРеквизитов(МдРеквизиты, НаборМдРеквизитов, КорневойТип = "")
	Для каждого МдРеквизит Из МдРеквизиты Цикл
		Если КорневойТип = "РегистрБухгалтерии" И НЕ МдРеквизит.Балансовый Тогда
			НаборМдРеквизитов.Вставить(МдРеквизит.Имя + "Дт", МдРеквизит);
			НаборМдРеквизитов.Вставить(МдРеквизит.Имя + "Кт", МдРеквизит);
		Иначе
			НаборМдРеквизитов.Вставить(МдРеквизит.Имя, МдРеквизит);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
// } Десериализация тестовых данных

// { Методы проверки таблиц метаданных
Функция ПолучитьКоличествоДокументовПоОтбору(видДокумента, Дата1, дата2, структураОтбора = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(видДокумента) Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Вид документа должен быть заполнен");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Дата1) Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Дата1 должнна быть заполнена");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Дата2) Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Дата2 должнна быть заполнена");
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доки.Ссылка) КАК КоличествоДокументов
	|ИЗ
	|	Документ."+видДокумента+" КАК Доки
	|ГДЕ
	|	Доки.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	|";
	Запрос.УстановитьПараметр("Дата1", Дата1);
	Запрос.УстановитьПараметр("Дата2", КонецДня(Дата2));
	
	Если ЗначениеЗаполнено(структураОтбора) Тогда
		Для каждого ключЗначение Из структураОтбора Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Доки."+имяРеквизита+" = &"+имяРеквизита+" ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли; 
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат выборка.КоличествоДокументов;
КонецФункции

Функция ПолучитьКоличествоЭлементовСправочникаПоОтбору(видСправочника, структураОтбора = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(видСправочника) Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Вид справочника должен быть заполнен");
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Спр.Ссылка) КАК КоличествоЭлементов
	|ИЗ
	|	Справочник."+видСправочника+" КАК Спр
	|ГДЕ
	|	Истина
	|";
	
	Если ЗначениеЗаполнено(структураОтбора) Тогда
		Для каждого ключЗначение Из структураОтбора Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Спр."+имяРеквизита+" = &"+имяРеквизита+" ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли; 
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат выборка.КоличествоЭлементов;
КонецФункции

Функция ПолучитьКоличествоСтрокВДокументахПоОтбору(видДокумента, имяТабличнойЧасти, Дата1, дата2, структураОтбораШапки = Неопределено, структураОтбораТабличнойЧасти = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(видДокумента) Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Вид документа должен быть заполнен");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Дата1) Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Дата1 должнна быть заполнена");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Дата2) Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Дата2 должнна быть заполнена");
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Доки.Ссылка) КАК КоличествоДокументов
	|ИЗ
	|	Документ."+видДокумента+"."+имяТабличнойЧасти+" КАК Доки
	|ГДЕ
	|	Доки.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	|";
	Запрос.УстановитьПараметр("Дата1", Дата1);
	Запрос.УстановитьПараметр("Дата2", КонецДня(Дата2));
	
	Если ЗначениеЗаполнено(структураОтбораШапки) Тогда
		Для каждого ключЗначение Из структураОтбораШапки Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Доки.Ссылка."+имяРеквизита+" = &"+имяРеквизита+" ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
	Если ЗначениеЗаполнено(структураОтбораТабличнойЧасти) Тогда
		Для каждого ключЗначение Из структураОтбораТабличнойЧасти Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Доки."+имяРеквизита+" = &"+имяРеквизита+" ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли; 
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат выборка.КоличествоДокументов;
КонецФункции

Функция ПолучитьИтоговуюСуммуТабличнойЧастиДокументовПоОтбору(видДокумента, имяТабличнойЧасти, имяРеквизита, Дата1, дата2, структураОтбораШапки = Неопределено, структураОтбораТабличнойЧасти = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(видДокумента) Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Вид документа должен быть заполнен");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Дата1) Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Дата1 должнна быть заполнена");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Дата2) Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Дата2 должнна быть заполнена");
	КонецЕсли;
	Если имяТабличнойЧасти = "" И ЗначениеЗаполнено(структураОтбораТабличнойЧасти) Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Если не указана табличная часть, то структура отбора табличной части не должна быть указана");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	текстТабличнаяЧасть = ?(НЕ ЗначениеЗаполнено(имяТабличнойЧасти), "", "."+имяТабличнойЧасти);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Доки."+имяРеквизита+"), 0) КАК Сумма
	|ИЗ
	|	Документ."+видДокумента+текстТабличнаяЧасть+" КАК Доки
	|ГДЕ
	|	Доки.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	|";
	Запрос.УстановитьПараметр("Дата1", Дата1);
	Запрос.УстановитьПараметр("Дата2", КонецДня(Дата2));
	
	Если ЗначениеЗаполнено(структураОтбораШапки) Тогда
		Для каждого ключЗначение Из структураОтбораШапки Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Доки.Ссылка."+имяРеквизита+" = &"+имяРеквизита+" ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(структураОтбораТабличнойЧасти) Тогда
		Для каждого ключЗначение Из структураОтбораТабличнойЧасти Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Доки."+имяРеквизита+" = &"+имяРеквизита+" ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли; 
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат выборка.Сумма;
КонецФункции

Функция ПолучитьИтоговуюСуммуДокументовПоОтбору(видДокумента, имяРеквизита, Дата1, дата2, структураОтбораШапки = Неопределено, структураОтбораТабличнойЧасти = Неопределено) Экспорт
	Возврат ПолучитьИтоговуюСуммуТабличнойЧастиДокументовПоОтбору(видДокумента, "", имяРеквизита, Дата1, дата2, структураОтбораШапки, структураОтбораТабличнойЧасти);
КонецФункции

Функция ПолучитьКоличествоЭлементовМетаданногоПоОтбору(типМетаданного, видМетаданного, структураОтбора = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(типМетаданного) Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Тип метаданного должен быть заполнен");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(видМетаданного) Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Вид метаданного должен быть заполнен");
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Таб.Ссылка) КАК КоличествоЭлементов
	|ИЗ
	|	"+типМетаданного+"."+видМетаданного+" КАК Таб
	|ГДЕ
	|	Истина
	|";
	
	Если ЗначениеЗаполнено(структураОтбора) Тогда
		Для каждого ключЗначение Из структураОтбора Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Таб."+имяРеквизита+" = &"+имяРеквизита+" ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли; 
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат выборка.КоличествоЭлементов;
КонецФункции

Функция ПолучитьКоличествоБизнесПроцессовПоОтбору(видМетаданного, структураОтбора = Неопределено) Экспорт
	Возврат ПолучитьКоличествоЭлементовМетаданногоПоОтбору("БизнесПроцесс", видМетаданного, структураОтбора);
КонецФункции

Функция ПолучитьКоличествоЗадачПоОтбору(видМетаданного, структураОтбора = Неопределено) Экспорт
	Возврат ПолучитьКоличествоЭлементовМетаданногоПоОтбору("Задача", видМетаданного, структураОтбора);
КонецФункции

Функция ПолучитьКоличествоЭлементовРегистраПоОтбору(типМетаданного, видМетаданного, структураОтбора = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(типМетаданного) Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Тип метаданного должен быть заполнен");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(видМетаданного) Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Вид метаданного должен быть заполнен");
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоЭлементов
	|ИЗ
	|	"+типМетаданного+"."+видМетаданного+" КАК Таб
	|ГДЕ
	|	Истина
	|";
	
	Если ЗначениеЗаполнено(структураОтбора) Тогда
		Для каждого ключЗначение Из структураОтбора Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Таб."+имяРеквизита+" = &"+имяРеквизита+" ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли; 
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат выборка.КоличествоЭлементов;
КонецФункции

Функция ПолучитьЭлементыМетаданногоПоОтбору(типМетаданного, видМетаданного, Количество=1, структураОтбора = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(типМетаданного) Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Тип метаданного должен быть заполнен");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(видМетаданного) Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Вид метаданного должен быть заполнен");
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ "+Количество+"
	|	*
	|ИЗ
	|	"+типМетаданного+"."+видМетаданного+" КАК Таб
	|ГДЕ
	|	Истина
	|";
		
	Если ЗначениеЗаполнено(структураОтбора) Тогда
		Для каждого ключЗначение Из структураОтбора Цикл
			имяРеквизита = ключЗначение.Ключ;
			Запрос.Текст = Запрос.Текст + " И Таб."+имяРеквизита+" = &"+имяРеквизита+" ";
			Запрос.УстановитьПараметр(имяРеквизита, ключЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗ = РезультатЗапроса.Выгрузить();
	
	Возврат ТЗ;
КонецФункции
// } Методы проверки таблиц метаданных

//{ ОСНОВНОЙ БЛОК
Функция СоздатьМакетДляГенерацииДанных(МассивДанных) Экспорт
	ШапкаДанных = ШапкаДанныхВМакете();
	Макет = Новый  ТабличныйДокумент;
	номерКолонки = 0;
	Для каждого ключЗначение Из ШапкаДанных Цикл
		номерКолонки = номерКолонки + 1;
		имяПоля = ключЗначение.Ключ;
		Макет.Область(1, номерКолонки, 1, номерКолонки).Текст = имяПоля ;
	КонецЦикла;
	
	Для каждого ОписательОбъекта Из МассивДанных Цикл
		ПользовательИБ = Неопределено;
		Если ЭтоОписательПользователяИБ(ОписательОбъекта, ПользовательИБ) Тогда
			
			ДобавитьПользователяИБ_ВМакет(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных);
			
		Иначе
		
			ДобавитьОбъектВМакет(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных);
			
		КонецЕсли;
	КонецЦикла;
	Возврат Макет;
КонецФункции

//{ Пример вызова из внешнего кода:
//		Путь_xUnitFor1C = "C:\Projects\GitHub\xUnitFor1C\";
//		ПутьГенератораМакета = Путь_xUnitFor1C + "ГенерацияМакетаДанных_На_БазеРеальныхДанных.epf";
//		Запрос = Новый Запрос;
//		запрос.Текст = "
//		|ВЫБРАТЬ
//		|	""РегистрыСведений.РегистрСведений1.СоздатьНаборЗаписей().Метаданные()"" КАК __Метаданные,
//		|	""ЗаписьРегистра"" КАК __Префикс,
//		|	РегистрСведений1.ПростойСправочник,
//		|	РегистрСведений1.ПростойСправочник2,
//		|	РегистрСведений1.РесурсЧисло,
//		|	РегистрСведений1.РесурсБулево
//		|ИЗ
//		|	РегистрСведений.РегистрСведений1 КАК РегистрСведений1
//		|УПОРЯДОЧИТЬ ПО
//		|	ПростойСправочник2";
//
			//или	Запрос.Текст = 
			//		"ВЫБРАТЬ
			//		|	"""" КАК __Метаданные,
			//		|	""ПростойСправочник"" КАК __Префикс,
			//		|	ПростойСправочник.Ссылка,
			//		|	ПростойСправочник.Код,
			//		|	ПростойСправочник.Наименование,
			//		|	ПростойСправочник.РеквизитБулево,
			//		|	ПростойСправочник.РеквизитПеречисление
			//		|ИЗ
			//		|	Справочник.ПростойСправочник КАК ПростойСправочник
			//		|Где РеквизитБулево И ПростойСправочник.Наименование = ""Тестовое наименование"" ";
//
//		РезультатЗапроса = Запрос.Выполнить();
//
//		ГенераторМакетаДанных = ВнешниеОбработки.Создать(ПутьГенератораМакета);
//		Макет = ГенераторМакетаДанных.СоздатьМакетДанныхНаОснованииЗапроса(РезультатЗапроса);
//		Макет.Показать();
//}
Функция СоздатьМакетДанныхНаОснованииЗапроса(РезультатЗапроса) Экспорт
	Таблица = РезультатЗапроса.Выгрузить();
	
	МассивПропускаемыхКолонок = Новый Массив;
	МассивПропускаемыхКолонок.Добавить("__Метаданные");
	МассивПропускаемыхКолонок.Добавить("__Префикс");
	СтрокаПропускаемыхКолонок = "";
	Для каждого Колонка Из МассивПропускаемыхКолонок Цикл
		СтрокаПропускаемыхКолонок = СтрокаПропускаемыхКолонок + Колонка+", ";
	КонецЦикла;
	
	КоличествоСлужебныхКолонок = МассивПропускаемыхКолонок.Количество();
	
	СтруктураДанных = Новый Структура();
	для каждого КолонкаЗапроса из Таблица.Колонки цикл
		Если МассивПропускаемыхКолонок.Найти(КолонкаЗапроса.Имя) <> Неопределено Тогда
			КоличествоСлужебныхКолонок = КоличествоСлужебныхКолонок - 1;
			Продолжить;
		КонецЕсли;
		
		имяКолонки = КолонкаЗапроса.имя;
		СтруктураДанных.Вставить(имяКолонки);
	КонецЦикла;
	
	Если КоличествоСлужебныхКолонок <> 0 Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не все служебные колонки заданы. В запросе обязательно должны быть колонки %1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаПропускаемыхКолонок);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	МассивДанных = Новый Массив;
			
	номер = 1;
	индекс = 1;
	Для каждого Строка из Таблица Цикл
		номер = номер + 1;
		
		ИмяПеременной = Строка.__Префикс + Формат(индекс, "ЧГ=; ЧН=0");
		РеквизитыЗаписи = Новый Структура();
		Для каждого ключЗначение Из СтруктураДанных Цикл
			РеквизитыЗаписи.Вставить(ключЗначение.Ключ)
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(РеквизитыЗаписи, Строка);
		
		описаниеЗаписиРегистраСведений1 = СоздатьОписательЭлемента();
		описаниеЗаписиРегистраСведений1.Вставить("ИмяПеременной", ИмяПеременной);
		описаниеЗаписиРегистраСведений1.Вставить("Реквизиты", РеквизитыЗаписи);
		
		Если ПустаяСтрока(Строка.__Метаданные) Тогда
			описаниеЗаписиРегистраСведений1.Вставить(ВернутьЗначениеСоответствия("Ссылка"), Строка.Ссылка);
		Иначе
			Мета = Неопределено;
			Выполнить("Мета = "+Строка.__Метаданные);
		
			описаниеЗаписиРегистраСведений1.Вставить("Метаданное", Мета);
		КонецЕсли;
		
		МассивДанных.Добавить(описаниеЗаписиРегистраСведений1);

		индекс = индекс + 1;
	КонецЦикла;
	
	Макет = ЭтотОбъект.СоздатьМакетДляГенерацииДанных(массивДанных);
	
	Возврат Макет;
КонецФункции

Функция СоздатьОписательЭлементаПоСсылке(Ссылка, МассивИмен, ДанныеОбъекта = Неопределено) Экспорт
	ОписательЭлемента = СоздатьОписательЭлемента();
	ОписательЭлемента[ВернутьЗначениеСоответствия("Ссылка")] = Ссылка;
	ОписательЭлемента.ИмяПеременной = УникальноеИмяПеременнойПоСсылке(Ссылка, МассивИмен);
	МетаСсылка = Ссылка.Метаданные();
	ОписательЭлемента.Метаданное = МетаСсылка;
	ОписательЭлемента.РежимПоиска = "Перем";
	ОписательЭлемента.ВыгружатьКод = ВыгружатьКод;
	МенеджерОбъекта = ПолучитьМенеджерОбъекта_ирЛкс(МетаСсылка);
	Если Метаданные.Справочники.Содержит(МетаСсылка) И Ссылка.ЭтоГруппа Тогда
		ОписательЭлемента.РежимСоздания = "Группа";
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(МетаСсылка) И Ссылка = МенеджерОбъекта.ЭтотУзел() Тогда
		ОписательЭлемента.РежимСоздания = "ЭтотУзел";
	Иначе
		ОписательЭлемента.РежимСоздания = "";
	КонецЕсли;
	Если ДанныеОбъекта <> Неопределено Тогда
		Если ДанныеОбъекта.Свойство("Предопределенный") Тогда
			ЭтоПредопределенноеЗначение = ДанныеОбъекта.Предопределенный;
		Иначе
			ЭтоПредопределенноеЗначение = Ложь;
		КонецЕсли;
		Если ЭтоПредопределенноеЗначение Тогда
			Если ЭтоПлатформа8_3_3БезРежимаСовместимости() Тогда
				ОписательЭлемента.РежимСоздания = "Предопределенный";
				ОписательЭлемента.Значение = ДанныеОбъекта.ИмяПредопределенныхДанных;
			Иначе // т.к. в 8.2 нет свойства ИмяПредопределенныхДанных, приходится использовать ГУИД
				ОписательЭлемента.РежимСоздания = "СоздатьПоГуид";
				ОписательЭлемента.ГуидСсылки = Ссылка.УникальныйИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ОписательЭлемента;
КонецФункции

Функция ЭтоПлатформа8_3_3БезРежимаСовместимости()
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ВерсияПриложения = СистемнаяИнформация.ВерсияПриложения;
	Если СравнитьВерсии(ВерсияПриложения, "8.3.3") >= 0 Тогда
		ВерсияРежимаСовместимости = СтрЗаменить(СтрЗаменить(Метаданные.РежимСовместимости, "Версия", ""), "_", ".");
		Если ВРег(ВерсияРежимаСовместимости) = ВРег("НеИспользовать") Или СравнитьВерсии(ВерсияРежимаСовместимости, "8.3.3") >= 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Сравнить две строки версий.
//
// Параметры
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
	Версия1 = РазложитьСтрокуВМассивПодстрок(Строка1, ".");
	Если Версия1.Количество() > 4 Тогда
		ВызватьИсключение СтрЗаменить(НСтр("ru='Неправильный формат параметра СтрокаВерсии1: %1';en='Incorrect parameter format СтрокаВерсии1: %1'"), "%1", СтрокаВерсии1);
	Иначе
		Для Инекс = Версия1.Количество() По 4 Цикл
			Версия1.Добавить("0");
		КонецЦикла;
	КонецЕсли;
	Версия2 = РазложитьСтрокуВМассивПодстрок(Строка2, ".");
	Если Версия2.Количество() > 4 Тогда
		ВызватьИсключение СтрЗаменить(НСтр("ru='Неправильный формат параметра СтрокаВерсии2: %1';en='Incorrect parameter format СтрокаВерсии2: %1'"), "%1", СтрокаВерсии2);
	Иначе
		Для Инекс = Версия2.Количество() По 4 Цикл
			Версия2.Добавить("0");
		КонецЦикла;
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция СоздатьОписательЭлементаПоНаборуЗаписей(НаборЗаписей, МассивИмен) Экспорт
	Мд = НаборЗаписей.Метаданные();
	ОписательЭлемента = СоздатьОписательЭлемента();
	ОписательЭлемента.ИмяПеременной = ПолучитьУникальноеИмяПеременной(МассивИмен, Мд.Имя);
	МассивИмен.Добавить(НРег(ОписательЭлемента.ИмяПеременной));
	
	ОписательЭлемента.Реквизиты = НаборЗаписей;
	ОписательЭлемента[ВернутьЗначениеСоответствия("Ссылка")] = Неопределено;
	ОписательЭлемента.Метаданное = Мд;
	Возврат ОписательЭлемента;
КонецФункции

Функция СоздатьОписательЭлементаПользовательИБ(ПользовательИБ, МассивИмен, ДанныеОбъекта = Неопределено) Экспорт
	ОписательЭлемента = СоздатьОписательЭлемента();
	ОписательЭлемента.ПользовательИБ = ПользовательИБ;
	ОписательЭлемента.ИмяПеременной = ПолучитьИдентификаторИзПредставления_Лкс(ПользовательИБ.Имя, "_"); //УникальноеИмяПеременнойПоСсылке(ПользовательИБ, МассивИмен);
	ОписательЭлемента.РежимПоиска = "Перем";
	Возврат ОписательЭлемента;
КонецФункции

Функция ЭтоОписательПользователяИБ(ОписательОбъекта, РезПользовательИБ = Неопределено)
	
	ЭтоПользовательИБ = ОписательОбъекта.Свойство("ПользовательИБ", РезПользовательИБ) И РезПользовательИБ <> Неопределено;
	Возврат ЭтоПользовательИБ;
	
КонецФункции

Функция СоздатьОписательЭлемента() Экспорт
	ОписательЭлемента = Новый Структура;
	ОписательЭлемента.Вставить(ВернутьЗначениеСоответствия("Ссылка"));
	ОписательЭлемента.Вставить("ИмяПеременной", "");
	ОписательЭлемента.Вставить("Значение", Неопределено);
	ОписательЭлемента.Вставить("Метаданное");
	ОписательЭлемента.Вставить("ВыгружатьКод", Ложь);
	ОписательЭлемента.Вставить("РежимПоиска", "");
	ОписательЭлемента.Вставить("РежимСоздания", "");
	ОписательЭлемента.Вставить("ГуидСсылки", Неопределено);
	ОписательЭлемента.Вставить("Реквизиты", Неопределено);
	ОписательЭлемента.Вставить("ПользовательИБ", Неопределено);
	Возврат ОписательЭлемента;
КонецФункции

Функция УникальноеИмяПеременнойПоСсылке(Ссылка, МассивИмен)
	ИмяПеременной = ПолучитьИдентификаторПредставленияПоСсылке(Ссылка);
	ИмяПеременной = ПолучитьУникальноеИмяПеременной(МассивИмен, ИмяПеременной);
	МассивИмен.Добавить(НРег(ИмяПеременной));
	Возврат ИмяПеременной;
КонецФункции

Функция ПолучитьУникальноеИмяПеременной(МассивИмен, Знач Имя)
	Если НЕ ЗначениеЗаполнено(МассивИмен) Тогда
		Возврат Имя;
	КонецЕсли;
	
	ПоменялиИмя = Ложь;
	Индекс = 1;
	ИсходноеИмя = Имя + "_"; // для генерации нормальных имен типа Перем_1, Перем_2, Перем_3
	Пока МассивИмен.Найти(НРег(Имя)) <> Неопределено Цикл
		Имя = ИсходноеИмя + Формат(Индекс, "ЧГ=; ЧН=0");
		Индекс = Индекс + 1;
		ПоменялиИмя = Истина;
	КонецЦикла;
	Возврат Имя;
КонецФункции

Функция ПолучитьИдентификаторПредставленияПоСсылке(Ссылка) //Экспорт
	Мд = Ссылка.Метаданные();
	
	менеджерОбъекта = ПолучитьМенеджерОбъекта_ирЛкс(Мд);
	КорневойТипКонфигурации = ПолучитьКорневойТипКонфигурации_ирЛкс(Мд);
	
	Представление = "";
	Если КорневойТипКонфигурации = ВернутьЗначениеСоответствия("Справочник") Тогда
		Представление = Ссылка.Наименование;
	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("Документ") Тогда
		Представление = ""+Ссылка;
	//ИначеЕсли КорневойТипКонфигурации = "РегистрСведений" Тогда 
	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("БизнесПроцесс") Тогда
		Представление = ""+Ссылка;
	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("Задача") Тогда
		Представление = ""+Ссылка;
	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("ПланОбмена") Тогда
		Представление = ""+Ссылка;
	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("ПланВидовХарактеристик") Тогда
		Представление = ""+Ссылка;
	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("ПланСчетов") Тогда
		Представление = ""+Ссылка;
	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("ПланВидовРасчета") Тогда
		Представление = ""+Ссылка;
	Иначе
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("ПолучитьИдентификаторПредставленияПоСсылке() : Неизвестный КорневойТипКонфигурации <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КорневойТипКонфигурации);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	рез = ПолучитьИдентификаторИзПредставления_Лкс(Представление, "_");
	Возврат рез;
КонецФункции

Процедура ДобавитьПользователяИБ_ВМакет(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных)
	ДобавитьШапкуПользователяИБ_ВМакет(Макет, ОписательОбъекта, ШапкаДанных);
		
	ДобавитьРеквизитыПользователяИБ_ВМакет(Макет, ОписательОбъекта, ШапкаДанных);
	ДобавитьРолиПользователяИБ_ВМакет(Макет, ОписательОбъекта, ШапкаДанных);
КонецПроцедуры

Процедура ДобавитьШапкуПользователяИБ_ВМакет(Макет, ОписательОбъекта, ШапкаДанных)
	ДобавитьПростойРеквизитВМакет(Макет, ШапкаДанных, "", ОписательОбъекта.Значение);
	
	НомерСтрокиМакета = Макет.ВысотаТаблицы;
	
	НомерКолонкиМакета_Тип = ШапкаДанных.Тип;
	ОбластьМакета = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_Тип, НомерСтрокиМакета, НомерКолонкиМакета_Тип);
	ОбластьМакета.Текст = "ПользовательИБ";
	
	НомерКолонкиМакета_ИмяПеременной = ШапкаДанных.ИмяПеременной;
	ОбластьМакета = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_ИмяПеременной, НомерСтрокиМакета, НомерКолонкиМакета_ИмяПеременной);
	ОбластьМакета.Текст = ОписательОбъекта.ИмяПеременной;
КонецПроцедуры

Процедура ДобавитьРеквизитыПользователяИБ_ВМакет(Макет, ОписательОбъекта, ШапкаДанных)
	
	параметрыПользователя = Новый Структура;
	параметрыПользователя.Вставить("Имя", "");
	параметрыПользователя.Вставить("ПолноеИмя", "");
	параметрыПользователя.Вставить("АутентификацияСтандартная", Истина);
	параметрыПользователя.Вставить("АутентификацияОС", Ложь);
	параметрыПользователя.Вставить("ПользовательОС", "");
	параметрыПользователя.Вставить("ОсновнойИнтерфейс", ""); //Метаданные.Интерфейсы.Администратор);
	параметрыПользователя.Вставить("ПоказыватьВСпискеВыбора", Истина);
	параметрыПользователя.Вставить("РежимЗапуска", РежимЗапускаКлиентскогоПриложения.Авто);
	//параметрыПользователя.Вставить("Язык", Метаданные.Языки.Русский);
	
	ЗаполнитьЗначенияСвойств(параметрыПользователя, ОписательОбъекта.ПользовательИБ);
	
	параметрыПользователя.Вставить("Пароль", "");
	
	НомерСтрокиМакета = Макет.ВысотаТаблицы+1;
	Для Каждого КлючЗначение Из параметрыПользователя Цикл
		ДобавитьПростойРеквизитВМакет(Макет, ШапкаДанных, КлючЗначение.Ключ, КлючЗначение.Значение);
		
		НомерСтрокиМакета = Макет.ВысотаТаблицы+1;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьРолиПользователяИБ_ВМакет(Макет, ОписательОбъекта, ШапкаДанных)
	НомерСтрокиМакета = Макет.ВысотаТаблицы+1;
	НомерКолонкиМакета_ТЧ = ШапкаДанных.ТЧ;
	ОбластьМакета = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_ТЧ, НомерСтрокиМакета, НомерКолонкиМакета_ТЧ);
	ОбластьМакета.Текст = "Роли";
	
	НомерСтрокиМакета = Макет.ВысотаТаблицы+1;
	
	Роли = ОписательОбъекта.ПользовательИБ.Роли;
	Для Каждого Роль Из Роли Цикл
		ДобавитьПростойРеквизитВМакет(Макет, ШапкаДанных, "Роль", Роль.Имя);
		
		НомерСтрокиМакета = Макет.ВысотаТаблицы+1;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьОбъектВМакет(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных)
	Ссылка = Неопределено;
	Мд = Неопределено;
	ЭтоСсылочныйОбъект = ЭтоОписательОбъектаСсылки(ОписательОбъекта, Ссылка);
	Если ЭтоСсылочныйОбъект Тогда
		ЭтоСсылочныйОбъект = Истина;
		Мд = Ссылка.Метаданные();
	ИначеЕсли ОписательОбъекта.Свойство("Метаданное", Мд) Тогда
	КонецЕсли;
	
	ДобавитьМетаданныеВМакетДляДобавляемогоОбъекта(Макет, ОписательОбъекта, ШапкаДанных, Макет.ВысотаТаблицы+1, Мд);
	
	менеджерОбъекта = ПолучитьМенеджерОбъекта_ирЛкс(Мд);
	КорневойТипКонфигурации = ПолучитьКорневойТипКонфигурации_ирЛкс(Мд);
	Если КорневойТипКонфигурации = ВернутьЗначениеСоответствия("Справочник") Тогда
		Если ЗначениеЗаполнено(Ссылка) и Ссылка.ЭтоГруппа Тогда
			Если НЕ ВариантВстроенногоЯзыкаАнглийский Тогда
				лПустойОбъект = менеджерОбъекта.СоздатьГруппу();
			Иначе
				лПустойОбъект = менеджерОбъекта.CreateFolder();
			КонецЕсли; 
		Иначе
			Если НЕ ВариантВстроенногоЯзыкаАнглийский Тогда
				лПустойОбъект = менеджерОбъекта.СоздатьЭлемент();
			Иначе
				лПустойОбъект = менеджерОбъекта.CreateItem();
			КонецЕсли; 
		КонецЕсли;
	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("Документ") Тогда
		лПустойОбъект = менеджерОбъекта.СоздатьДокумент();
	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("БизнесПроцесс") Тогда
		лПустойОбъект = менеджерОбъекта.СоздатьБизнесПроцесс();
	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("Задача") Тогда
		лПустойОбъект = менеджерОбъекта.СоздатьЗадачу();
	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("РегистрСведений") Тогда
	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("РегистрНакопления") Тогда 
	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("РегистрБухгалтерии") Тогда 
	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("ПланОбмена") Тогда
		лПустойОбъект = менеджерОбъекта.СоздатьУзел();
	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("ПланВидовХарактеристик") Тогда 
		Если ЗначениеЗаполнено(Ссылка) и Ссылка.ЭтоГруппа Тогда
			Если НЕ ВариантВстроенногоЯзыкаАнглийский Тогда
				лПустойОбъект = менеджерОбъекта.СоздатьГруппу();
			Иначе
				лПустойОбъект = менеджерОбъекта.CreateFolder();
			КонецЕсли; 
		Иначе
			Если НЕ ВариантВстроенногоЯзыкаАнглийский Тогда
				лПустойОбъект = менеджерОбъекта.СоздатьЭлемент();
			Иначе
				лПустойОбъект = менеджерОбъекта.CreateItem();
			КонецЕсли; 
		КонецЕсли;
	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("ПланСчетов") Тогда 
		лПустойОбъект = менеджерОбъекта.СоздатьСчет();
	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("ПланВидовРасчета") Тогда 
		лПустойОбъект = менеджерОбъекта.СоздатьВидРасчета();
	Иначе
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Неизвестный КорневойТипКонфигурации <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КорневойТипКонфигурации);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ВыгружаемыеСтандартныеРеквизиты = ВыгружаемыеСтандартныеРеквизиты(ОписательОбъекта, КорневойТипКонфигурации);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		объект = Ссылка.ПолучитьОбъект();
		
		Если НЕ ВыгружатьСсылку И ЗначениеЗаполнено(ОписательОбъекта.ГуидСсылки) Тогда
			Для каждого РеквизитМд Из Мд.СтандартныеРеквизиты Цикл
				Если РеквизитМд.Имя = ВернутьЗначениеСоответствия("Ссылка") Тогда
					НомерСтрокиМакета = Макет.ВысотаТаблицы+1;
					ДобавилиРеквизит = ОбработатьРеквизитОбъекта(Макет, МассивДанных, Объект, РеквизитМд, ОписательОбъекта.ГуидСсылки, Мд, НомерСтрокиМакета, ШапкаДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОбработатьРеквизитыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Объект, лПустойОбъект, Мд.СтандартныеРеквизиты, ВыгружаемыеСтандартныеРеквизиты);
		ОбработатьРеквизитыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Объект, лПустойОбъект, Мд.Реквизиты, Неопределено);
		
		ОбработатьТабличныеЧастиОбъекта(Макет, Мд.ТабличныеЧасти, ОписательОбъекта, ШапкаДанных, МассивДанных, Объект);
		ОбработатьРежимыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Объект);
		ДобавитьДополнительныеСвойства(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Объект);
		
	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("РегистрСведений") и ТипЗнч(ОписательОбъекта.Реквизиты) = Тип("Структура") Тогда
			ОбработатьРеквизитыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Мд, Неопределено, Мд.СтандартныеРеквизиты, ВыгружаемыеСтандартныеРеквизиты);
			ОбработатьРеквизитыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Мд, Неопределено, Мд.Измерения, Неопределено);
			ОбработатьРеквизитыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Мд, Неопределено, Мд.Ресурсы, Неопределено);
			ОбработатьРеквизитыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Мд, Неопределено, Мд.Реквизиты, Неопределено);
		
	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("РегистрСведений")
		  Или КорневойТипКонфигурации = ВернутьЗначениеСоответствия("РегистрНакопления")
		  Или КорневойТипКонфигурации = ВернутьЗначениеСоответствия("РегистрБухгалтерии") Тогда
		  
		ЭтоРегистрБухгалтерии = КорневойТипКонфигурации = ВернутьЗначениеСоответствия("РегистрБухгалтерии");
		
		НаборЗаписейРегистра = ОписательОбъекта.Реквизиты;
		Для Каждого ЗаписьРегистра Из НаборЗаписейРегистра Цикл
			Макет.Область(Макет.ВысотаТаблицы+1, ШапкаДанных.ТЧ).Текст = "Запись";
			ОписательОбъекта.Реквизиты = ЗаписьРегистра;
			
			НаборСтандартныеРеквизиты = Мд.СтандартныеРеквизиты;
			Если ЭтоРегистрБухгалтерии Тогда
				ДанныеСчета = Новый Структура;
				Если Мд.Корреспонденция Тогда
					ДанныеСчета.Вставить("СчетДт", Новый Структура("НомераВидовСубконто, НаименованиеРеквизитаСубконто", Новый Массив, "СубконтоДт"));
					ДанныеСчета.Вставить("СчетКт", Новый Структура("НомераВидовСубконто, НаименованиеРеквизитаСубконто", Новый Массив, "СубконтоКт"));
				Иначе				
					ДанныеСчета.Вставить("Счет", Новый Структура("НомераВидовСубконто, НаименованиеРеквизитаСубконто", Новый Массив, "Субконто"));
				КонецЕсли;
				
				НаборСтандартныеРеквизиты = Новый Массив;
				для каждого МдРеквизит из Мд.СтандартныеРеквизиты Цикл
					ИмяРеквизита = МдРеквизит.Имя;
					Если Лев(ИмяРеквизита, СтрДлина("ВидСубконто")) = "ВидСубконто" Тогда
						Продолжить;
					КонецЕсли;
					Если Лев(ИмяРеквизита, СтрДлина("Субконто")) = "Субконто" Тогда
						Продолжить;
					КонецЕсли;
					НаборСтандартныеРеквизиты.Добавить(МдРеквизит);
				КонецЦикла;
			КонецЕсли;
			
			ОбработатьРеквизитыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Мд, Неопределено, НаборСтандартныеРеквизиты, ВыгружаемыеСтандартныеРеквизиты);
			ОбработатьРеквизитыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Мд, Неопределено, Мд.Измерения, Неопределено, КорневойТипКонфигурации);
			ОбработатьРеквизитыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Мд, Неопределено, Мд.Ресурсы, Неопределено, КорневойТипКонфигурации);
			ОбработатьРеквизитыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Мд, Неопределено, Мд.Реквизиты, Неопределено);
			
			Если ЭтоРегистрБухгалтерии Тогда
				ВыгружаемыеРеквизиты = Новый Массив;
				МассивИмитаторРеквизитовМд = Новый Массив;
				Для каждого КлючЗначение Из ДанныеСчета Цикл
					ИмяРеквизита = КлючЗначение.Ключ;
					ВыгружаемыеРеквизиты.Добавить(ИмяРеквизита);
					Структура = Новый Структура("Имя,Субконто", ИмяРеквизита, КлючЗначение.Значение);
					МассивИмитаторРеквизитовМд.Добавить(Структура);
				КонецЦикла;

				ОбработатьРеквизитыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Мд, Неопределено, МассивИмитаторРеквизитовМд, ВыгружаемыеРеквизиты, КорневойТипКонфигурации);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Неизвестный вариант работы - метод <ДобавитьОбъектВМакет>");
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьДополнительныеСвойства(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Объект)
	НомерСтрокиМакета = Макет.ВысотаТаблицы+1;
	
	ДопСвойства = Новый Структура();
	Для Каждого СтрокаТЧ Из ЭтотОбъект.ДополнительныеСвойства Цикл
		ДопСвойства.Вставить(СтрокаТЧ.Имя, СтрокаТЧ.Значение);
	КонецЦикла;
	Если ДопСвойства.Количество() > 0 Тогда
		НомерКолонкиМакета_ТЧ = ШапкаДанных.ТЧ;
		ОбластьМакета = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_ТЧ, НомерСтрокиМакета, НомерКолонкиМакета_ТЧ);
		ОбластьМакета.Текст = "ДополнительныеСвойства";
	КонецЕсли;
	
	ДобавитьДопСвойстваВМакет(Макет, ШапкаДанных, "Режим", ДопСвойства);
КонецПроцедуры

Процедура ДобавитьМетаданныеВМакетДляДобавляемогоОбъекта(Макет, ОписательОбъекта, ШапкаДанных, НомерСтрокиМакета, Мд)
	НомерКолонкиМакета_Тип = ШапкаДанных.Тип;
	ОбластьМакета = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_Тип, НомерСтрокиМакета, НомерКолонкиМакета_Тип);
	ОбластьМакета.Текст = ПолучитьКорневойТипКонфигурации_ирЛкс(Мд);
	
	НомерКолонкиМакета_Вид = ШапкаДанных.Вид;
	ОбластьМакета = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_Вид, НомерСтрокиМакета, НомерКолонкиМакета_Вид);
	ОбластьМакета.Текст = Мд.Имя;
	
	НомерКолонкиМакета_ИмяПеременной = ШапкаДанных.ИмяПеременной;
	ОбластьМакета = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_ИмяПеременной, НомерСтрокиМакета, НомерКолонкиМакета_ИмяПеременной);
	
	ИмяПеременной = ИмяПеременнойИзОписателяОбъекта(Мд, ОписательОбъекта);
	ОбластьМакета.Текст = ИмяПеременной;
	
	НомерКолонкиМакета_Режим = ШапкаДанных.Режим;
	ОбластьМакета_Режим = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_Режим, НомерСтрокиМакета, НомерКолонкиМакета_Режим);
	ОбластьМакета_Режим.Текст = ОписательОбъекта.РежимСоздания;
	
	НомерКолонкиМакета_Значение = ШапкаДанных.Значение;
	ОбластьМакета_Значение = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_Значение, НомерСтрокиМакета, НомерКолонкиМакета_Значение);
	ОбластьМакета_Значение.Текст = ОписательОбъекта.Значение;
КонецПроцедуры

Функция ВыгружаемыеСтандартныеРеквизиты(ОписательОбъекта, КорневойТипКонфигурации)
	ВыгружаемыеСтандартныеРеквизиты = Новый Массив;
	Если КорневойТипКонфигурации = ВернутьЗначениеСоответствия("Справочник") Тогда
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Наименование"));
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("ПометкаУдаления"));
		ВыгружатьКод = Ложь;
		Если ОписательОбъекта.Свойство("ВыгружатьКод", ВыгружатьКод) и ВыгружатьКод Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Код"));
		КонецЕсли;
		Если ВыгружатьСсылку Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Ссылка"));
		КонецЕсли;
		
		МетаданныеСправочника = ОписательОбъекта[ВернутьЗначениеСоответствия("Ссылка")].Метаданные();
		Если МетаданныеСправочника.Владельцы.Количество() > 0 Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Владелец"));
		КонецЕсли;
		Если МетаданныеСправочника.Иерархический Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Родитель"));
		КонецЕсли;

	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("Документ") Тогда
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Дата"));
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("ПометкаУдаления"));
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Проведен"));
		ВыгружатьКод = Ложь;
		Если ОписательОбъекта.Свойство("ВыгружатьКод", ВыгружатьКод) и ВыгружатьКод Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Номер"));
		КонецЕсли;
		Если ВыгружатьСсылку Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Ссылка"));
		КонецЕсли;

	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("БизнесПроцесс") Тогда
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Дата"));
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("ПометкаУдаления"));
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Стартован"));
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Завершен"));
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("ВедущаяЗадача"));
		ВыгружатьКод = Ложь;
		Если ОписательОбъекта.Свойство("ВыгружатьКод", ВыгружатьКод) и ВыгружатьКод Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Номер"));
		КонецЕсли;
		Если ВыгружатьСсылку Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Ссылка"));
		КонецЕсли;

	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("Задача") Тогда
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Дата"));
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("ПометкаУдаления"));
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("БизнесПроцесс"));
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("ТочкаМаршрута"));
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Наименование"));
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Выполнена"));
		ВыгружатьКод = Ложь;
		Если ОписательОбъекта.Свойство("ВыгружатьКод", ВыгружатьКод) и ВыгружатьКод Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Номер"));
		КонецЕсли;
		Если ВыгружатьСсылку Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Ссылка"));
		КонецЕсли;

	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("РегистрСведений") Тогда
		Если НЕ ОписательОбъекта.Метаданное.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Период"));
		КонецЕсли;
		Если ОписательОбъекта.Метаданное.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Регистратор"));
			ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Активность"));
		КонецЕсли;

	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("РегистрНакопления") или КорневойТипКонфигурации = ВернутьЗначениеСоответствия("РегистрБухгалтерии") Тогда
		Для Каждого ОписаниеСтандартногоРеквизита Из ОписательОбъекта.Метаданное.СтандартныеРеквизиты Цикл
			Если ОписаниеСтандартногоРеквизита.Имя = ВернутьЗначениеСоответствия("НомерСтроки") Тогда
				Продолжить;
			КонецЕсли;
			ВыгружаемыеСтандартныеРеквизиты.Добавить(ОписаниеСтандартногоРеквизита.Имя);
		КонецЦикла;
		
	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("ПланОбмена") Тогда
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Наименование"));
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("ПометкаУдаления"));
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("НомерОтправленного"));
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("НомерПринятого"));
		ВыгружатьКод = Ложь;
		Если ОписательОбъекта.Свойство("ВыгружатьКод", ВыгружатьКод) и ВыгружатьКод Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Код"));
		КонецЕсли;
		Если ВыгружатьСсылку Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Ссылка"));
		КонецЕсли;
		
	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("ПланВидовХарактеристик") Тогда
		
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Наименование"));
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("ПометкаУдаления"));
		ВыгружатьКод = Ложь;
		Если ОписательОбъекта.Свойство("ВыгружатьКод", ВыгружатьКод) и ВыгружатьКод Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Код"));
		КонецЕсли;
		Если ВыгружатьСсылку Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Ссылка"));
		КонецЕсли;
		
		МетаданныеСправочника = ОписательОбъекта[ВернутьЗначениеСоответствия("Ссылка")].Метаданные();
		Если МетаданныеСправочника.Иерархический Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Родитель"));
		КонецЕсли;

	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("ПланСчетов") Тогда
		
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Наименование"));
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("ПометкаУдаления"));
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Код"));
		Если ВыгружатьСсылку Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Ссылка"));
		КонецЕсли;
		
		МетаданныеСправочника = ОписательОбъекта[ВернутьЗначениеСоответствия("Ссылка")].Метаданные();
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Родитель"));

	ИначеЕсли КорневойТипКонфигурации = ВернутьЗначениеСоответствия("ПланВидовРасчета") Тогда
		
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Наименование"));
		ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("ПометкаУдаления"));
		ВыгружатьКод = Ложь;
		Если ОписательОбъекта.Свойство("ВыгружатьКод", ВыгружатьКод) и ВыгружатьКод Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Код"));
		КонецЕсли;
		Если ВыгружатьСсылку Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить(ВернутьЗначениеСоответствия("Ссылка"));
		КонецЕсли;
		
		МетаданныеСправочника = ОписательОбъекта[ВернутьЗначениеСоответствия("Ссылка")].Метаданные();

	Иначе
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Неизвестный КорневойТипКонфигурации <%1> КорневойТипКонфигурации()");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КорневойТипКонфигурации);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Возврат ВыгружаемыеСтандартныеРеквизиты;
КонецФункции

Процедура ОбработатьРеквизитыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Объект, лПустойОбъект, МдРеквизиты, ВыгружаемыеРеквизиты, КорневойТипКонфигурации = "")
	НомерСтрокиМакета = Макет.ВысотаТаблицы+1;
	
	ЭтоСсылочныйОбъект = ЭтоОписательОбъектаСсылки(ОписательОбъекта);
	Если ЭтоСсылочныйОбъект Тогда
		Мд = Объект.Метаданные();
	Иначе
		Мд = Объект;
	КонецЕсли;

	Для каждого РеквизитМд Из МдРеквизиты Цикл
		имяРеквизита = РеквизитМд.Имя;
		Если ВыгружаемыеРеквизиты <> Неопределено и ВыгружаемыеРеквизиты.Найти(имяРеквизита) = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		БылДобавленСчетДляЗаписиРегистраБухгалтерии = Ложь;
		
		Если ЭтоСсылочныйОбъект Тогда
			ЗначениеРеквизита = объект[имяРеквизита];

			этоЗначениеБудетСозданоПоУмолчанию = лПустойОбъект[имяРеквизита] = ЗначениеРеквизита;
			Если этоЗначениеБудетСозданоПоУмолчанию Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если КорневойТипКонфигурации = "РегистрБухгалтерии" Тогда
				Если Лев(ИмяРеквизита, СтрДлина("Счет")) = "Счет" Тогда
					БылДобавленСчетДляЗаписиРегистраБухгалтерии = Истина;
					ИмяРеквизитаСчет = имяРеквизита;
				ИначеЕсли НЕ РеквизитМд.Балансовый Тогда
					Суффиксы = Новый Массив;
					Суффиксы.Добавить("Дт");
					Суффиксы.Добавить("Кт");
					Для Каждого Суффикс Из Суффиксы Цикл
						ЗначениеРеквизита = ОписательОбъекта.Реквизиты[имяРеквизита + Суффикс];
						ИмитаторРеквизитаМд = Новый Структура("Имя, Тип", имяРеквизита + Суффикс, РеквизитМд.Тип);
						ДобавилиРеквизит = ОбработатьРеквизитОбъекта(Макет, МассивДанных, Объект, ИмитаторРеквизитаМд, ЗначениеРеквизита, Мд, НомерСтрокиМакета, ШапкаДанных);
						Если ДобавилиРеквизит Тогда
							НомерСтрокиМакета = НомерСтрокиМакета + 1;
						КонецЕсли;
					КонецЦикла;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ЗначениеРеквизита = ОписательОбъекта.Реквизиты[имяРеквизита];
		КонецЕсли;
				
		ДобавилиРеквизит = ОбработатьРеквизитОбъекта(Макет, МассивДанных, Объект, РеквизитМд, ЗначениеРеквизита, Мд, НомерСтрокиМакета, ШапкаДанных);
		
		Если ДобавилиРеквизит Тогда
			НомерСтрокиМакета = НомерСтрокиМакета + 1;
		КонецЕсли;
		
		Если БылДобавленСчетДляЗаписиРегистраБухгалтерии Тогда
			Для Каждого ОписаниеВидаСубконто Из ОписательОбъекта.Реквизиты[ИмяРеквизитаСчет].ВидыСубконто Цикл
				ВидСубконто = ОписаниеВидаСубконто.ВидСубконто;
				НаименованиеРеквизитаСубконто = РеквизитМд.Субконто.НаименованиеРеквизитаСубконто;
				ЗначениеРеквизита = ОписательОбъекта.Реквизиты[НаименованиеРеквизитаСубконто][ВидСубконто];
				Если ЗначениеРеквизита = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ИмитаторРеквизитаМд = Новый Структура("Имя, Тип", НаименованиеРеквизитаСубконто + ОписаниеВидаСубконто.НомерСтроки, ВидСубконто.ТипЗначения);

				ДобавилиРеквизит = ОбработатьРеквизитОбъекта(Макет, МассивДанных, Объект, ИмитаторРеквизитаМд, ЗначениеРеквизита, Мд, НомерСтрокиМакета, ШапкаДанных);
				
				Если ДобавилиРеквизит Тогда
					НомерСтрокиМакета = НомерСтрокиМакета + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьТабличныеЧастиОбъекта(Макет, МдТабличныеЧасти, ОписательОбъекта, ШапкаДанных, МассивДанных, Объект)
	Для каждого МдТч Из МдТабличныеЧасти Цикл
		МдРеквизиты = МдТч.Реквизиты;
		ИмяТЧ = МдТч.Имя;
		
		НомерКолонкиМакета_ТЧ = ШапкаДанных.ТЧ;
		
		Для каждого строкаТчОбъекта Из объект[ИмяТЧ] Цикл
			НомерСтрокиМакета = Макет.ВысотаТаблицы+1;
			ОбластьМакета = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_ТЧ, НомерСтрокиМакета, НомерКолонкиМакета_ТЧ);
			ОбластьМакета.Текст = ИмяТЧ;
			
			ОбработатьРеквизитыТабличнойЧастиОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Объект, строкаТчОбъекта, МдРеквизиты);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьРежимыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Объект)
	НомерСтрокиМакета = Макет.ВысотаТаблицы+1;
	Режимы = новый Массив;
	Если ТолькоСоздание Тогда
		Режимы.Добавить("ТолькоСоздание");
	КонецЕсли;
	Если ОбменДанными Тогда
		Режимы.Добавить("ОбменДанными");
	КонецЕсли;
	Мета = Объект.Метаданные();
	Если Метаданные.Справочники.Содержит(Мета) И Объект.ЭтоГруппа Тогда
		Режимы.Добавить("Группа");
	КонецЕсли;
	
	Если Режимы.Количество()>0 Тогда
		НомерКолонкиМакета_ТЧ = ШапкаДанных.ТЧ;
		ОбластьМакета = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_ТЧ, НомерСтрокиМакета, НомерКолонкиМакета_ТЧ);
		ОбластьМакета.Текст = "xddMods";
		
		Для каждого Режим Из Режимы Цикл
			ДобавитьПростойРеквизитВМакет(Макет, ШапкаДанных, "Режим", Режим);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьРеквизитыТабличнойЧастиОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Объект, строкаТчОбъекта, МдРеквизиты)
	НомерСтрокиМакета = Макет.ВысотаТаблицы+1;
	
	Мд = Объект.Метаданные();

	Для каждого РеквизитМд Из МдРеквизиты Цикл
		имяРеквизита = РеквизитМд.Имя;

		ЗначениеРеквизита = строкаТчОбъекта[имяРеквизита];

		ДобавилиРеквизит = ОбработатьРеквизитОбъекта(Макет, МассивДанных, Объект, РеквизитМд, ЗначениеРеквизита, Мд, НомерСтрокиМакета, ШапкаДанных);

		Если ДобавилиРеквизит Тогда
			НомерСтрокиМакета = НомерСтрокиМакета + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ОбработатьРеквизитОбъекта(Макет, МассивДанных, Объект, РеквизитМд, ЗначениеРеквизита, Мд, НомерСтрокиМакета, ШапкаДанных)
	имяРеквизита = РеквизитМд.Имя;
	ЕстьТипы = Ложь;
	Попытка
		Тип = РеквизитМд.Тип.Типы();
		ЕстьТипы = Истина;
	Исключение
	КонецПопытки;
	
	Если ЕстьТипы И НЕ ЗначениеЗаполнено(ЗначениеРеквизита) И РеквизитМд.Тип.Типы().Количество() = 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	ТипРеквизита = ТипЗнч(ЗначениеРеквизита);
	Если ТипРеквизита = ТипЗнч(Неопределено) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ПредставлениеЗначенияРеквизита = "";
	РежимПоиска = "";
	ДополнительныйТипЗначения = "";
	Попытка
		ПолучитьПредставлениеИРежимПоискаПоЗначениюРеквизита(Объект, ЗначениеРеквизита, ТипРеквизита, МассивДанных, ПредставлениеЗначенияРеквизита, РежимПоиска, ДополнительныйТипЗначения);
	Исключение
		описаниеОшибки = ОписаниеОшибки();
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("%1 Не умею обрабатывать реквизит <%2> у объекта <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",описаниеОшибки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",имяРеквизита);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Мд.ПолноеИмя());
		ВызватьИсключение  ТекстСообщения;
	КонецПопытки;
	
	Если ЕстьТипы И РеквизитМд.Тип.Типы().Количество() = 1 Тогда
		ДополнительныйТипЗначения = "";
	КонецЕсли;
	
	ДобавитьПростойРеквизитВМакет(Макет, ШапкаДанных, ИмяРеквизита, ПредставлениеЗначенияРеквизита);

	НомерКолонкиМакета_Режим = ШапкаДанных.Режим;
	ОбластьМакета_Режим = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_Режим, НомерСтрокиМакета, НомерКолонкиМакета_Режим);
	Если РежимПоиска <> "" Тогда
		ОбластьМакета_Режим.Текст = РежимПоиска;
	КонецЕсли;

	НомерКолонкиМакета_ДополнительныйТипЗначения = ШапкаДанных.ДополнительныйТипЗначения;
	ОбластьМакета_ДополнительныйТипЗначения = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_ДополнительныйТипЗначения, НомерСтрокиМакета, НомерКолонкиМакета_ДополнительныйТипЗначения);
	ОбластьМакета_ДополнительныйТипЗначения.Текст = ДополнительныйТипЗначения;

	Возврат Истина;
КонецФункции

Процедура ДобавитьПростойРеквизитВМакет(Макет, ШапкаДанных, ИмяРеквизита, ПредставлениеЗначенияРеквизита)
	НомерСтрокиМакета = Макет.ВысотаТаблицы+1;
	
	НомерКолонкиМакета_Реквизит = ШапкаДанных.Реквизит;
	НомерКолонкиМакета_Значение = ШапкаДанных.Значение;
	
	ОбластьМакета_Реквизит = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_Реквизит, НомерСтрокиМакета, НомерКолонкиМакета_Реквизит);
	ОбластьМакета_Реквизит.Текст = ИмяРеквизита;
	
	ОбластьМакета_Значение = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_Значение, НомерСтрокиМакета, НомерКолонкиМакета_Значение);
	ОбластьМакета_Значение.Текст = ПредставлениеЗначенияРеквизита;
	
КонецПроцедуры

Процедура ДобавитьДопСвойстваВМакет(Макет, ШапкаДанных, ИмяРеквизита, СтруктураДопСвойств)
	Для Каждого ДопСвойство Из СтруктураДопСвойств Цикл
		НомерСтрокиМакета = Макет.ВысотаТаблицы+1;
		
		НомерКолонкиМакета_Реквизит = ШапкаДанных.Реквизит;
		НомерКолонкиМакета_Значение = ШапкаДанных.Значение;
		
		ОбластьМакета_Реквизит = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_Реквизит, НомерСтрокиМакета, НомерКолонкиМакета_Реквизит);
		ОбластьМакета_Реквизит.Текст = ДопСвойство.Ключ;
		
		ОбластьМакета_Значение = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_Значение, НомерСтрокиМакета, НомерКолонкиМакета_Значение);
		ОбластьМакета_Значение.Текст = ДопСвойство.Значение;
	КонецЦикла;
КонецПроцедуры

Процедура ПолучитьПредставлениеИРежимПоискаПоЗначениюРеквизита(Объект, ЗначениеРеквизита, ТипРеквизита, МассивДанных, резПредставлениеЗначенияРеквизита, резРежимПоиска, резДополнительныйТипЗначения)
	резДополнительныйТипЗначения = "";
	Если ТипРеквизита = Тип("Число") Тогда
		ПредставлениеЗначенияРеквизита = Формат(ЗначениеРеквизита, "ЧГ=");
		резДополнительныйТипЗначения = "Число";
	ИначеЕсли ТипРеквизита = Тип("Строка") Тогда
		ПредставлениеЗначенияРеквизита = ЗначениеРеквизита;
		резДополнительныйТипЗначения = "Строка";
	ИначеЕсли ТипРеквизита = Тип("Дата") Тогда
		ПредставлениеЗначенияРеквизита = Формат(ЗначениеРеквизита, "ДФ=yyyyMMddЧЧммсс"); // важно ЧЧ
		резДополнительныйТипЗначения = "Дата";
	ИначеЕсли ТипРеквизита = Тип("Булево") Тогда
		ПредставлениеЗначенияРеквизита = Формат(ЗначениеРеквизита, "БЛ=Ложь; БИ=Истина");
		резДополнительныйТипЗначения = "Булево";
		
	ИначеЕсли ЛиСсылкаНаОбъектБД_ирЛкс(ЗначениеРеквизита) Тогда
		ОписательЗначенияРеквизита = НайтиОписательОбъектаПоСсылке(МассивДанных, ЗначениеРеквизита); //МассивДанных.Найти(ЗначениеРеквизита);
		Если ОписательЗначенияРеквизита <> Неопределено Тогда
			ЕстьРеквизитСсылка = Истина;
			Если ТипЗнч(Объект) = Тип("ОбъектМетаданных") Тогда
				ЕстьРеквизитСсылка = Ложь;
				Для каждого РеквизитМд Из Объект.СтандартныеРеквизиты Цикл
					Если РеквизитМд.Имя = ВернутьЗначениеСоответствия("Ссылка") Тогда
						ЕстьРеквизитСсылка = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ЕстьРеквизитСсылка И ЗначениеРеквизита = Объект.Ссылка Тогда
				ПредставлениеЗначенияРеквизита = Строка(ЗначениеРеквизита.УникальныйИдентификатор());
				РежимПоиска = "";
			Иначе
				ИмяПеременнойИзОписателяОбъекта = ИмяПеременнойИзОписателяОбъекта(ЗначениеРеквизита.Метаданные(), ОписательЗначенияРеквизита);
				ИскатьПоГуид = Ложь;
				Если СвязьПоГуид Тогда
					Для каждого Элемент Из МассивДанных Цикл
						Если Элемент.ИмяПеременной = ИмяПеременнойИзОписателяОбъекта Тогда
							ИскатьПоГуид = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если ИскатьПоГуид Тогда
					ПредставлениеЗначенияРеквизита = Строка(ЗначениеРеквизита.УникальныйИдентификатор());
					РежимПоиска = "Гуид";
				Иначе
					ПредставлениеЗначенияРеквизита = ИмяПеременнойИзОписателяОбъекта;
					РежимПоиска = "Перем";
				КонецЕсли;
			КонецЕсли;
		Иначе
			ПредставлениеЗначенияРеквизита = ЗначениеРеквизита;
			Если БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(ТипРеквизита) Тогда
				ПредставлениеЗначенияРеквизита = ЗначениеРеквизита.Имя;
				РежимПоиска = "Предопределенный";
			Иначе
				СпецРежимПоиска = "";
				Если СвязьПоГуид Тогда
					СпецПредставлениеЗначенияРеквизита = Строка(ЗначениеРеквизита.УникальныйИдентификатор());
					СпецРежимПоиска = "Гуид";
				КонецЕсли;

				МетаданныеСсылки = ЗначениеРеквизита.Метаданные();
				Если Метаданные.Справочники.Содержит(МетаданныеСсылки) Тогда
					ОсновноеПредставлениеСсылки = МетаданныеСсылки.ОсновноеПредставление;
					Если ЗначениеРеквизита.Предопределенный Тогда
						НовыйРежимПоиска = "Предопределенный";
						ПредставлениеЗначенияРеквизита = Справочники[МетаданныеСсылки.Имя].ПолучитьИмяПредопределенного(ЗначениеРеквизита);
					ИначеЕсли ОсновноеПредставлениеСсылки = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника.ВВидеНаименования Тогда
						РежимПоиска = "Наименование";
					Иначе
						РежимПоиска = "Код";
					КонецЕсли;
					резДополнительныйТипЗначения = "СправочникСсылка."+МетаданныеСсылки.Имя;
				ИначеЕсли Метаданные.Документы.Содержит(МетаданныеСсылки) Тогда
					ПредставлениеЗначенияРеквизита = ЗначениеРеквизита.Номер;
					РежимПоиска = "Номер";
					резДополнительныйТипЗначения = "ДокументСсылка."+МетаданныеСсылки.Имя;
				ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеСсылки) Тогда
					ОсновноеПредставлениеСсылки = МетаданныеСсылки.ОсновноеПредставление;
					Если ЗначениеРеквизита.Предопределенный Тогда
						РежимПоиска = "Предопределенный";
						ПредставлениеЗначенияРеквизита = ПланыСчетов[МетаданныеСсылки.Имя].ПолучитьИмяПредопределенного(ЗначениеРеквизита);
					ИначеЕсли ОсновноеПредставлениеСсылки = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСчета.ВВидеНаименования Тогда
						РежимПоиска = "Наименование";
					Иначе
						РежимПоиска = "Код";
					КонецЕсли;
					резДополнительныйТипЗначения = "ПланСчетовСсылка."+МетаданныеСсылки.Имя;
				Иначе
					// пока так. надо добавить остальные типы
					РежимПоиска = "Наименование";
				КонецЕсли;
				Если ЗначениеРеквизита.Пустая() Тогда
					РежимПоиска = "";
				КонецЕсли; 
				Если СпецРежимПоиска <> "" Тогда
					РежимПоиска = СпецРежимПоиска;
					ПредставлениеЗначенияРеквизита = СпецПредставлениеЗначенияРеквизита;
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЛиСсылкаНаПеречисление_ирЛкс(ЗначениеРеквизита) Тогда
		ПредставлениеЗначенияРеквизита = "";
		ИмяПеречисления = ЗначениеРеквизита.Метаданные().Имя;
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			ИндексЗначения = Перечисления[ИмяПеречисления].Индекс(ЗначениеРеквизита);
			ИмяЗначения = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначения].Имя;
		КонецЕсли;
		ПредставлениеЗначенияРеквизита = ИмяЗначения;
		РежимПоиска = "Предопределенный";
		резДополнительныйТипЗначения = "ПеречислениеСсылка."+ИмяПеречисления;
		
	ИначеЕсли ТипРеквизита = Тип("УникальныйИдентификатор") Тогда
		ПредставлениеЗначенияРеквизита = ""+ЗначениеРеквизита;
		РежимПоиска = "Гуид";
	ИначеЕсли ТипРеквизита = Тип("ХранилищеЗначения") Тогда
		ПредставлениеЗначенияРеквизита = ""+ЗначениеРеквизита;
		
	Иначе
		УжеВычислилиЗначение = Ложь;
		ПредставлениеЗначенияРеквизита = Неопределено;
		СтрокаДляВыполнения = "ПредставлениеЗначенияРеквизита = "+ТипРеквизита+"["""+ЗначениеРеквизита+"""];";
		Попытка
			Выполнить(СтрокаДляВыполнения);
			УжеВычислилиЗначение = Истина;
			РежимПоиска = "Предопределенный";
		Исключение
		КонецПопытки;
		Если НЕ УжеВычислилиЗначение Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Генератор макета из реальных данных: Не умею обрабатывать такой тип <%1>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТипРеквизита);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;
	резПредставлениеЗначенияРеквизита = ПредставлениеЗначенияРеквизита;
	резРежимПоиска = РежимПоиска;
КонецПроцедуры

Функция НайтиОписательОбъектаПоСсылке(МассивДанных, Ссылка)
	Для каждого ОписательОбъекта Из МассивДанных Цикл
		СсылкаВрем = Неопределено;
		Если ЭтоОписательОбъектаСсылки(ОписательОбъекта, СсылкаВрем) и СсылкаВрем = Ссылка Тогда
			Возврат ОписательОбъекта;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Функция ЭтоОписательОбъектаСсылки(ОписательОбъекта, РезСсылка = Неопределено)
	
	ЭтоСсылочныйОбъект = ОписательОбъекта.Свойство(ВернутьЗначениеСоответствия("Ссылка"), РезСсылка) И РезСсылка <> Неопределено;
	Возврат ЭтоСсылочныйОбъект;
	
КонецФункции

Функция ИмяПеременнойИзОписателяОбъекта(Мд, ОписательОбъекта)
	ИмяПеременной = "";
	Если НЕ ОписательОбъекта.Свойство("ИмяПеременной", ИмяПеременной) или ПустаяСтрока(ИмяПеременной) Тогда
		ИмяПеременной = Мд.Имя;
	КонецЕсли;
	Возврат ИмяПеременной;
КонецФункции

Функция ШапкаДанныхВМакете()
	рез = Новый Структура();
	рез.Вставить("Тип", 1);
	рез.Вставить("Вид", 2);
	рез.Вставить("ИмяПеременной", 3);
	рез.Вставить("ТЧ", 4);
	рез.Вставить("Реквизит", 5);
	рез.Вставить("Значение", 6);
	рез.Вставить("Режим", 7);
	рез.Вставить("ДополнительныйТипЗначения", 8);
	Возврат рез;
КонецФункции

// { БЛОК МЕТОДОВ ИЗ ИР (Инструменты Разработчика, автор TormozIt)
//
// Определяет корневой тип конфигурации по описанию типов, типу, метаданным, ссылке или объекту.
// Для описания типов берется первый тип массива типов.
//
// Параметры:
//  пОбъект      – Произвольный – для чего получаем метаданные;
//  *пЛиТолькоДляКорневого - Булево, *Ложь - возвращать только для объекта корневого типа.
//
// Возвращаемое значение:
//               - Строка – имя типа корневого объекта метаданных;
//  Неопределено - не удалось получить имя типа.
//
Функция ПолучитьКорневойТипКонфигурации_ирЛкс(пОбъект, пЛиТолькоДляКорневого = Ложь) Экспорт

	Если ТипЗнч(пОбъект) = Тип("ОбъектМетаданных") Тогда 
		МетаданныеТипа = пОбъект;
	Иначе
		МетаданныеТипа = ПолучитьМетаданные_ирЛкс(пОбъект);
	КонецЕсли;
	Результат = Неопределено;
	Если МетаданныеТипа <> Неопределено Тогда
		ПолноеИмя = МетаданныеТипа.ПолноеИмя();
		Если пЛиТолькоДляКорневого Тогда 
			МассивФрагментов = ПолучитьМассивИзСтрокиСРазделителем_ирЛкс(ПолноеИмя);
			Если МассивФрагментов.Количество() = 2 Тогда
				Результат = МассивФрагментов[0];
			КонецЕсли;
		Иначе
			Результат = ПолучитьПервыйФрагмент_ирЛкс(ПолноеИмя);
		КонецЕсли;
	КонецЕсли;
	Если Результат = "ТабличнаяЧасть" Тогда
		// Баг платформы. У внешних метаданных полное имя не включает сам внешний метаобъект
		Результат = Неопределено;
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции // ЛксПолучитьКорневойТипКонфигурации()

// Проверяет, является ли значение ссылкой на объект БД. На базе ЛксЛиСсылкаНаОбъектБД
//
// Параметры:
//  пЗначение    – ОбъектМетаданных, Произвольный – проверяемое значение.
//
// Возвращаемое значение:
//  Истина       – значение является ссылкой на объект БД;
//  Ложь         – значение не является ссылкой на объект БД.
//
Функция ЛиСсылкаНаОбъектБД_ирЛкс(пЗначение) Экспорт

	Возврат ЛиКорневойТипОбъектаБД_ирЛкс(ПолучитьКорневойТипКонфигурации_ирЛкс(пЗначение, Истина));
		
КонецФункции // ЛксЛиСсылкаНаОбъектБД

// Проверяет, является ли значение ссылкой на значение перечисления.
//
// Параметры:
//  пЗначение    – Произвольный – проверяемое значение.
//
// Возвращаемое значение:
//  Истина       – значение является ссылкой на объект БД;
//  Ложь         – значение не является ссылкой на объект БД.
//
Функция ЛиСсылкаНаПеречисление_ирЛкс(пЗначение) Экспорт

	Возврат (ПолучитьКорневойТипКонфигурации_ирЛкс(пЗначение) = ВернутьЗначениеСоответствия("Перечисление"));

КонецФункции // ЛксЛиСсылкаНаПеречисление()

// Проверяет, является ли строка именем корневого типа объекта БД.
//
// Параметры:
//  пИмяКорневогоТипа - Строка, Неопределено - имя корневого типа.
//
// Возвращаемое значение:
//  Истина       – тип является корневым типом объекта БД;
//  Ложь         – иначе.
//
Функция ЛиКорневойТипОбъектаБД_ирЛкс(КорневойТип) Экспорт

	Если Ложь
		ИЛИ КорневойТип = ВернутьЗначениеСоответствия("БизнесПроцесс")
		ИЛИ КорневойТип = ВернутьЗначениеСоответствия("Задача") 
		ИЛИ КорневойТип = ВернутьЗначениеСоответствия("Документ")
		ИЛИ КорневойТип = ВернутьЗначениеСоответствия("ПланВидовРасчета")
		ИЛИ КорневойТип = ВернутьЗначениеСоответствия("ПланВидовХарактеристик") 
		ИЛИ КорневойТип = ВернутьЗначениеСоответствия("ПланОбмена")
		ИЛИ КорневойТип = ВернутьЗначениеСоответствия("ПланСчетов")
		ИЛИ КорневойТип = ВернутьЗначениеСоответствия("Справочник")
		
	Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;

КонецФункции // ЛксЛиКорневойТипОбъектаБД()

// Получает менеджер по описанию типов, типу, метаданным, ссылке или объекту. На базе метода ЛксПолучитьМенеджер
// Для описания типов берется первый тип массива типов.
//
// Параметры:
//  пОбъект      – Произвольный – для чего получаем менеджер.
//
// Возвращаемое значение:
//               – МенеджерОбъекта - для ссылки или ссылочного типа;
//  Неопределено - не удалось получить.
//
Функция ПолучитьМенеджерОбъекта_ирЛкс(пОбъект) Экспорт
	
	Если ТипЗнч(пОбъект) = Тип("ОбъектМетаданных") Тогда 
		МетаданныеОбъекта = пОбъект;
	Иначе
		МетаданныеОбъекта = ПолучитьМетаданные_ирЛкс(пОбъект);
	КонецЕсли;
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	МассивФрагментов = ПолучитьМассивИзСтрокиСРазделителем_ирЛкс(МетаданныеОбъекта.ПолноеИмя());
	КорневойТип = МассивФрагментов[0];
	Менеджер = Неопределено;
	Если Истина
		И МассивФрагментов.Количество() = 4 
		И КорневойТип = "ВнешнийИсточникДанных" 
	Тогда
		ИмяТипаМенеджера = МассивФрагментов[0] + "ТаблицаМенеджер." + МассивФрагментов[1] + "." + МассивФрагментов[3];
	Иначе
		//КорневойТип = ЛксПолучитьКорневойТипКонфигурации(МетаданныеОбъекта, Истина); // Изменил 02.03.2012
		Если КорневойТип <> Неопределено Тогда
			Если НЕ ВариантВстроенногоЯзыкаАнглийский Тогда
				ИмяМенеджер = "Менеджер.";
			Иначе
				ИмяМенеджер = "Manager."; 
			КонецЕсли; 
			ИмяТипаМенеджера = КорневойТип + ИмяМенеджер + МетаданныеОбъекта.Имя;
		Иначе
			ИмяТипаМенеджера = "Неопределено";
		КонецЕсли;
	КонецЕсли;
	Попытка
		Менеджер = Новый (ИмяТипаМенеджера);
	Исключение
	КонецПопытки;
	Возврат Менеджер;

КонецФункции // ЛксПолучитьМенеджер()

// Получает метаданные по полному имени, описанию типов, типу, ссылке или объекту. На базе ЛксПолучитьМетаданные
// Для описания типов берется первый тип массива типов.
//
// Параметры:
//  пОбъект      – Произвольный – для чего получаем метаданные.
//
// Возвращаемое значение:
//               – Метаданные - полученные;
//  Неопределено - не удалось получить метаданные.
//
Функция ПолучитьМетаданные_ирЛкс(пОбъект) Экспорт
	
	Если ТипЗнч(пОбъект) = Тип("Строка") Тогда
		Если ПустаяСтрока(пОбъект) Тогда
			Результат = Неопределено;
		Иначе
			Фрагменты = ПолучитьМассивИзСтрокиСРазделителем_ирЛкс(пОбъект);
			Если Фрагменты.Количество() = 3 Тогда
				// ВидыСубконто, Изменения
				ПолноеИмяМД = Фрагменты[0] + "." + Фрагменты[1];
			Иначе
				ПолноеИмяМД = пОбъект;
			КонецЕсли; 
			Результат = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМД);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	ТипОбъекта = ПолучитьТипОбъекта_ирЛкс(пОбъект);
	Результат = Метаданные.НайтиПоТипу(ТипОбъекта);
	Возврат Результат;
	
КонецФункции // ЛксПолучитьМетаданные()

// Получает тип из описания типов, типа или значения. На базе ЛксПолучитьТипОбъекта
//
// Параметры:
//  пОбъект    – Тип, ОписаниеТипов, Произвольный – проверяемое значение.
//
// Возвращаемое значение:
//  Тип - найденный тип.
//
Функция ПолучитьТипОбъекта_ирЛкс(пОбъект)

	ТипОбъекта = Тип("Неопределено");
	ТипПараметра = ТипЗнч(пОбъект);
	Если ТипПараметра = Тип("ОписаниеТипов") Тогда
		Если пОбъект.Типы().Количество() > 0 Тогда 
			ТипОбъекта = пОбъект.Типы()[0];
		КонецЕсли;
	ИначеЕсли ТипПараметра <> Тип("Тип") Тогда 
		ТипОбъекта = ТипПараметра;
	Иначе
		ТипОбъекта = пОбъект;
	КонецЕсли;
	
	Возврат ТипОбъекта;

КонецФункции // ЛксПолучитьТипОбъекта()

// Функция разбивает строку разделителем. На базе ЛксПолучитьМассивИзСтрокиСРазделителем
// 
// Параметры:
//  пСтрока      - Строка - которую разбиваем;
//  *пРазделитель - Строка, "." - символ-разделитель;
//  *ОбрезатьНепечатныеСимволы - Булево, *Ложь - делать СокрЛП.
//  *ОставлятьПустуюСтроку - Булево, *Истина - если передана пустая строка, то добавлять ее в массив.
//
// Возвращаемое значение:
//  Массив - фрагментов.
//
Функция ПолучитьМассивИзСтрокиСРазделителем_ирЛкс(Знач Стр, Разделитель = ".", ОбрезатьНепечатныеСимволы = Ложь, ОставлятьПустуюСтроку = Истина) Экспорт
	
	МассивСтрок = Новый Массив;
	Если Истина
		И НЕ ОставлятьПустуюСтроку 
		И ПустаяСтрока(Стр)
	Тогда
		Возврат МассивСтрок;
	КонецЕсли; 
	
	//лСтрока = СтрЗаменить(Стр, Разделитель, Символы.ПС);
	//// Баг платформы. СтрЧислоСтрок не учитывает терминальный перевод строки.
	//ЧислоСтрок = СтрЧислоСтрок(лСтрока + " ");
	//Для Счетчик = 1 По ЧислоСтрок Цикл 
	//	Фрагмент = СтрПолучитьСтроку(лСтрока, Счетчик);
	//	Если ОбрезатьНепечатныеСимволы Тогда
	//		Фрагмент = СокрЛП(Фрагмент);
	//	КонецЕсли;
	//	МассивСтрок.Добавить(Фрагмент);
	//КонецЦикла;
	
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				Фрагмент = Стр;
				Если ОбрезатьНепечатныеСимволы Тогда
					Фрагмент = СокрЛП(Фрагмент);
				КонецЕсли;
				МассивСтрок.Добавить(Фрагмент);
				Возврат МассивСтрок;
			КонецЕсли;
			Фрагмент = Лев(Стр,Поз-1);
			Если ОбрезатьНепечатныеСимволы Тогда
				Фрагмент = СокрЛП(Фрагмент);
			КонецЕсли;
			МассивСтрок.Добавить(Фрагмент);
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;

	Возврат МассивСтрок;
		
КонецФункции // ЛксПолучитьМассивИзСтрокиСРазделителем()

// Получает первый фрагмент, отделяемый разделителем от строки. На базе ЛксПолучитьПервыйФрагмент
// Написана для оптимизации по скорости.
// 
// Параметры:
//  пСтрока      - Строка - которую разбиваем;
//  *пРазделитель - Строка, "." - символ-разделитель;
//  *пЛиИспользоватьГраницуЕслиМаркерНеНайден - Булево, *Истина.
//
// Возвращаемое значение:
//               - Строка - первый фрагмент строки;
//  Неопределено - в строке не обнаружен разделитель.
//
Функция ПолучитьПервыйФрагмент_ирЛкс(пСтрока, пРазделитель = ".",
	пЛиИспользоватьГраницуЕслиМаркерНеНайден = Истина) Экспорт

	Позиция = Найти(пСтрока, пРазделитель);
	Если Позиция > 0 Тогда
		Возврат Лев(пСтрока, Позиция - 1);
	Иначе
		Если пЛиИспользоватьГраницуЕслиМаркерНеНайден Тогда 
			Возврат пСтрока;
		Иначе
			Возврат пСтрока;
		КонецЕсли;
	КонецЕсли;

КонецФункции // ЛксПолучитьПервыйФрагмент()

// Получает идентификатор из любой строки.
// "3-я Дебиторка По контрагентам с интервалами СНГ (для  Руководства)" => "_3_яДебиторкаПоКонтрагентамСИнтерваламиСНГ_дляРуководства_".
//
// Параметры:
//  Представление – Строка.
//
// Возвращаемое значение:
//  Строка.
//
Функция ПолучитьИдентификаторИзПредставления_Лкс(Знач Представление, ЗаменаПустойСтроки = "_") Экспорт
	
	Если ПустаяСтрока(Представление) Тогда
		Представление = ЗаменаПустойСтроки;
	КонецЕсли;
	Если СокрЛП(Представление) = Представление и Найти(Представление, ",") = 0 Тогда
		Попытка
			Пустышка = Новый Структура(Представление);
			Возврат Представление;
		Исключение КонецПопытки;
	КонецЕсли; 
	НовоеПредставление = СокрЛП(Представление);
	ПервыйСимвол = Сред(НовоеПредставление, 1, 1);
	Если ЭтоЦифра(ПервыйСимвол) Тогда
		НовоеПредставление = "_" + НовоеПредставление;
	КонецЕсли;
	ПредыдущийСимвол = " ";
	ТекущаяСтрока = "";
	Для Счетчик = 1 По СтрДлина(НовоеПредставление) Цикл
		ТекущийСимвол = Сред(НовоеПредставление, Счетчик, 1);
		Если ЭтоПробельныйСимвол(ПредыдущийСимвол) Тогда
			// Предыдущий символ - непечатаемый
			ТекущийСимвол = ВРег(ТекущийСимвол);
		КонецЕсли;
		Если ЭтоВалидныйСимволИдентификатора(ТекущийСимвол) Тогда
			ТекущаяСтрока = ТекущаяСтрока + ТекущийСимвол;
		ИначеЕсли НЕ ЭтоПробельныйСимвол(ТекущийСимвол) Тогда
			ТекущаяСтрока = ТекущаяСтрока + "_";
		КонецЕсли;
		ПредыдущийСимвол = ТекущийСимвол;
		
	КонецЦикла;
	Результат = ТекущаяСтрока;
	Возврат ТекущаяСтрока;

КонецФункции // ПолучитьИдентификаторИзПредставления()

Функция ЭтоЦифра(Символ)
	
	Возврат (Найти("0123456789", Символ) > 0);
	
КонецФункции

Функция ЭтоПробельныйСимвол(Символ)
	
	ПробельныеСимволы = " " + Символы.Таб + Символы.НПП + Символы.ВК + Символы.ВТаб + Символы.ПС + Символы.ПФ;
	Возврат (Найти(ПробельныеСимволы, Символ) > 0)
	
КонецФункции

Функция ЭтоВалидныйСимволИдентификатора(Символ)
	
	Алфавит = "_АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЬЫЪЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ";
	Возврат (Найти(Алфавит, ВРег(Символ)) > 0 Или ЭтоЦифра(Символ));
	
КонецФункции

// } Конец блока методов из ИР (Инструменты Разработчика, автор TormozIt)

//} КОНЕЦ ОСНОВНОГО БЛОКА

Процедура ПриИзмененииСсылки(ИдентификаторСтрокиДанных) Экспорт
	Перем Ссылка;
	ЭлементДанных = ИдентификаторСтрокиДанных;
	НовыйМассивИмен = ТаблицаДанных.ВыгрузитьКолонку("ИмяПеременной");
	
	Ссылка = ЭлементДанных.Ссылка;
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ОписательЭлемента = СоздатьОписательЭлементаПоСсылке(Ссылка, НовыйМассивИмен);
		ЗаполнитьЗначенияСвойств(ЭлементДанных, ОписательЭлемента);
		//	ЭлементДанных.ИмяПеременной = УникальноеИмяПеременнойПоСсылке(Ссылка, НовыйМассивИмен);
		//	
		//	Мета = Ссылка.Метаданные();
		//	ЭлементДанных.Метаданное = Мета.ПолноеИмя();
		//	ЭлементДанных.РежимПоиска = "Перем";
		//	Если Метаданные.Справочники.Содержит(Мета) И Ссылка.ЭтоГруппа Тогда
		//		ЭлементДанных.РежимСоздания = "Группа";
		//	Иначе
		//		ЭлементДанных.РежимСоздания = "";
		//	КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СоздатьМакетДанныхПоТаблицеДанных(Макет) Экспорт
	Макет.Очистить();
	
	массивДанных = Новый Массив;
	
	Для каждого строка Из ТаблицаДанных Цикл
		ОписательЭлемента = СоздатьОписательЭлемента();
		ЗаполнитьЗначенияСвойств(ОписательЭлемента, строка);
		массивДанных.Добавить(ОписательЭлемента);
	КонецЦикла;
	НовыйМакет = СоздатьМакетДляГенерацииДанных(массивДанных);
	Если ТипЗнч(НовыйМакет) = Тип("ТабличныйДокумент") Тогда
		Макет.Вывести(НовыйМакет);
	КонецЕсли;
	
	Возврат НовыйМакет;
КонецФункции

Функция СоздатьМакетДанныхПоМетаданным(Макет) Экспорт
	Макет.Очистить();
	
	массивДанных = Новый Массив;
	МассивИмен = ТаблицаДанных.ВыгрузитьКолонку("ИмяПеременной");
	
	СоздатьПоМетаданным(массивДанных);
	
	НовыйМакет = СоздатьМакетДляГенерацииДанных(массивДанных);
	Если ТипЗнч(НовыйМакет) = Тип("ТабличныйДокумент") Тогда
		Макет.Вывести(НовыйМакет);
	КонецЕсли;
	
	МассивИмен = Неопределено;
	
	Возврат НовыйМакет;
КонецФункции

Функция СоздатьМакетДанныхПоПользователямИБ(Макет, МассивИменПользователей) Экспорт
	Макет.Очистить();
	
	МассивПользователей = Новый Массив;
	МассивИмен = Новый Массив;
	
	Для Каждого ИмяПользователяИБ Из МассивИменПользователей  Цикл
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
		Если Неопределено = ПользовательИБ Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не найден пользователь ИБ по имени <%1>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПользователяИБ);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		МассивИмен.Добавить(ИмяПользователяИБ);
		
		ОписательПользователяИБ = СоздатьОписательЭлементаПользовательИБ(ПользовательИБ, МассивИмен);
		МассивПользователей.Добавить(ОписательПользователяИБ);
	КонецЦикла;
	
	НовыйМакет = СоздатьМакетДляГенерацииДанных(МассивПользователей);
	Если ТипЗнч(НовыйМакет) = Тип("ТабличныйДокумент") Тогда
		Макет.Вывести(НовыйМакет);
	КонецЕсли;
	
	МассивИмен = Неопределено;
	
	Возврат НовыйМакет;
КонецФункции

Процедура ПроверитьЗагрузкуМакета(ТабличныйДокумент) Экспорт
	НачатьТранзакцию();
	
	ТестовыеДанные = СоздатьДанныеПоТабличномуДокументу(ТабличныйДокумент);
	Если ТестовыеДанные.Количество() = 0 Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("не заполнены тестовые данные. Возможно, макет данных пуст.");
	КонецЕсли;
	
	Сообщить(ПолучитьТекстСообщенияПользователю("Проверка загрузки объектов в ИБ из макета данных выполнена успешно."));
	ТекстСообщения = ПолучитьТекстСообщенияПользователю("В ИБ загружены объекты: %1 шт.");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТестовыеДанные.Количество());
	Сообщить(ТекстСообщения);
	Для каждого ЗагруженныйОбъект Из ТестовыеДанные Цикл
		РеальныйОбъект = ЗагруженныйОбъект.Значение;
		ДопТекст = "";
		Если ВыгружатьСсылку Тогда
			Попытка
				ДопТекст = ", ГУИД "+РеальныйОбъект.УникальныйИдентификатор()+"";
			Исключение
			КонецПопытки;
		КонецЕсли;
		Попытка
			ДопТекст = ", записей "+РеальныйОбъект.Количество()+" шт."; // для регистров
		Исключение
		КонецПопытки;
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Загружен объект.Имя %1, Тип %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ЗагруженныйОбъект.Ключ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Строка(ТипЗнч(РеальныйОбъект))+ДопТекст);
		Сообщить(ТекстСообщения);
	КонецЦикла;
		
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

Функция ПодключитьВнешнююОбработку(АдресХранилища, ИдентификаторОбработки, ПолныйПутьФайлаОбработки) Экспорт
	#Если Клиент Тогда
	Возврат ПолныйПутьФайлаОбработки;
	#Иначе
	Возврат ВнешниеОбработки.Подключить(АдресХранилища, ИдентификаторОбработки, Ложь); // подключаю не в безопасном режиме
	#КонецЕсли
КонецФункции

Функция СписокВыбора_РежимПоиска(СписокВыбора_РежимПоиска) Экспорт
	СписокВыбора_РежимПоиска.Добавить("Перем");
	СписокВыбора_РежимПоиска.Добавить("Наименование");
	СписокВыбора_РежимПоиска.Добавить("Код");
	//СписокВыбора_РежимПоиска.Добавить("Группа");
	//СписокВыбора_РежимПоиска.Добавить("Объект");
	СписокВыбора_РежимПоиска.Добавить("Гуид");
	СписокВыбора_РежимПоиска.Добавить("Предопределенный");
	СписокВыбора_РежимПоиска.Добавить("ТекущаяДата");
	//СписокВыбора_РежимПоиска.Добавить("Проведение");
	СписокВыбора_РежимПоиска.Добавить("СоздатьПоГуид");
	Возврат	СписокВыбора_РежимПоиска;
КонецФункции

Функция СписокВыбора_РежимСоздания(СписокВыбора_РежимСоздания) Экспорт
	//СписокВыбора_РежимПоиска.Добавить("Перем");
	//СписокВыбора_РежимПоиска.Добавить("Наименование");
	//СписокВыбора_РежимПоиска.Добавить("Код");
	СписокВыбора_РежимСоздания.Добавить("Группа");
	СписокВыбора_РежимСоздания.Добавить("Объект");
	//СписокВыбора_РежимПоиска.Добавить("Гуид");
	//СписокВыбора_РежимПоиска.Добавить("Предопределенный");
	//СписокВыбора_РежимПоиска.Добавить("ТекущаяДата");
	СписокВыбора_РежимСоздания.Добавить("Проведение");
	//СписокВыбора_РежимСоздания.Добавить("СоздатьПоГуид");
	Возврат	СписокВыбора_РежимСоздания;
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Генерация по метаданным
///////////////////////////////////////////////////////////////////////////////

// Процедура производит начальную инициализацию - заполнение дерева описания
// классов объектов метаданных, дерево метаданных, список ссылочных типов
//
// Параметры
//
Процедура НачальнаяИнициализация() Экспорт
	
	ЗаполнитьПользователейИБ();
	
	// Создаем объект, описывающий процессы построения дерева и выгрузку
	ЗаполнитьОписаниеМетаданных();
	
	МетаданныеОписание = МетаданныеОписание.Строки[0];
	
	СсылочныеТипы = Новый Соответствие;
	СоответствиеОбъектовМетаданныхИСсылочныхТипов = Новый Соответствие;
	
	ДеревоМетаданных.Колонки.Очистить();
	// создание необходимых колонок
	ДеревоМетаданных.Колонки.Добавить("Выгружать", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	ДеревоМетаданных.Колонки.Добавить("ВыгружатьПриНеобходимости", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)), "При необходимости");
	ДеревоМетаданных.Колонки.Добавить("Метаданные");
	ДеревоМетаданных.Колонки.Добавить("ЭлементОписания");
	ДеревоМетаданных.Колонки.Добавить("ОбъектМД");
	ДеревоМетаданных.Колонки.Добавить("ПолноеИмяМетаданных");
	ДеревоМетаданных.Колонки.Добавить("НастройкиКомпоновщика");
	ДеревоМетаданных.Колонки.Добавить("ИспользоватьОтбор");
	ДеревоМетаданных.Колонки.Добавить("ИндексКартинки");
	ДеревоМетаданных.Колонки.Добавить("Развернут");
	ДеревоМетаданных.Колонки.Добавить("ПолноеИмяМетаданныхДляПоиска");
	
	//ОкноИсполнения = ПолучитьФорму("ОкноИсполнения");
	#Если Клиент Тогда
		Состояние("Выполняется анализ метаданных конфигурации...");
	#КонецЕсли
	
	//ИспользующиеИтоги = Новый Массив;
	Корень = ДеревоМетаданных.Строки.Добавить();
	ПостроениеПоддереваОбъекта(Метаданные, Корень, МетаданныеОписание);
	СверткаПоддереваОбъекта(Корень);
	
	Для Каждого Эл Из СсылочныеТипы Цикл
		СоответствиеОбъектовМетаданныхИСсылочныхТипов.Вставить(Эл.Значение, Эл.Ключ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПользователейИБ()
	НаборПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для Каждого ПользовательИБ Из НаборПользователиИБ Цикл
		
		НоваяСтрока = ПользователиИБ.Добавить();
		НоваяСтрока.ПолноеИмя                   = ПользовательИБ.ПолноеИмя;
		НоваяСтрока.Имя                         = ПользовательИБ.Имя;
		НоваяСтрока.АутентификацияСтандартная   = ПользовательИБ.АутентификацияСтандартная;
		НоваяСтрока.АутентификацияОС            = ПользовательИБ.АутентификацияОС;
		//НоваяСтрока.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
		НоваяСтрока.ПользовательОС              = ПользовательИБ.ПользовательОС;
		//НоваяСтрока.АутентификацияOpenID        = ПользовательИБ.АутентификацияOpenID;
		
		СтрокаРолей = "";
		Для Каждого Роль Из ПользовательИБ.Роли Цикл
			СтрокаРолей = СтрокаРолей + Роль.Имя+", ";
		КонецЦикла;
		Если НЕ ПустаяСтрока(СтрокаРолей) Тогда
			СтрокаРолей = Лев(СтрокаРолей, СтрДлина(СтрокаРолей)-2);
		КонецЕсли;
		НоваяСтрока.Роли = СтрокаРолей;
	КонецЦикла;
	
КонецПроцедуры

// Процедура производит заполнение дерева описания классов объектов метаданных
//
// Параметры
//
Процедура ЗаполнитьОписаниеМетаданных()
	
	СтэкДереваЗначенийСтроки = Новый Массив;
	МетаданныеОписание = Новый ДеревоЗначений;
	МетаданныеОписание.Колонки.Добавить("Выгружаемый", Новый ОписаниеТипов("Булево"));
	МетаданныеОписание.Колонки.Добавить("ДляЗапроса", Новый ОписаниеТипов("Строка"));
	МетаданныеОписание.Колонки.Добавить("Класс", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	МетаданныеОписание.Колонки.Добавить("Менеджер");
	МетаданныеОписание.Колонки.Добавить("Свойства", Новый ОписаниеТипов("СписокЗначений"));
	МетаданныеОписание.Колонки.Добавить("ИндексКартинки");
	СтэкДереваЗначенийСтроки.Вставить(0, МетаданныеОписание.Строки);
	//////////////////////////////////
	// Конфигурации
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Конфигурации";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.ИндексКартинки = 0;
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.Константы
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Константы";
	//ОписаниеКласса.Выгружаемый = истина;
	//ОписаниеКласса.Менеджер = Константы;
	//ОписаниеКласса.ДляЗапроса  = "";
	//ОписаниеКласса.ИндексКартинки = 1;
	//ОписаниеКласса.Свойства.Добавить("Тип");
	//////////////////////////////////
	// Конфигурации.Справочники
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Справочники";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = Справочники;
	ОписаниеКласса.ДляЗапроса  = ВернутьЗначениеСоответствия("Справочник") + ".";
	ОписаниеКласса.Свойства.Добавить("Владельцы");
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.ИндексКартинки = 3;
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.Справочники.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ОписаниеКласса.Свойства.Добавить("Использование");
	//////////////////////////////////
	// Конфигурации.Справочники.ТабличныеЧасти
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Использование");
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.Справочники.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	СтэкДереваЗначенийСтроки.Удалить(0);
	//////////////////////////////////
	// Конфигурации.Документы
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Документы";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = Документы;
	ОписаниеКласса.ДляЗапроса  = ВернутьЗначениеСоответствия("Документ") + ".";
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.Свойства.Добавить("Движения");
	ОписаниеКласса.ИндексКартинки = 7;
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.Документы.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	//////////////////////////////////
	// Конфигурации.Документы.ТабличныеЧасти
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.Документы.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	СтэкДереваЗначенийСтроки.Удалить(0);
	
	//////////////////////////////////
	// Конфигурации.Последовательности
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Последовательности";
	//ОписаниеКласса.Выгружаемый = истина;
	//ОписаниеКласса.Менеджер = Последовательности;
	//ОписаниеКласса.ДляЗапроса  = "Последовательность.";
	//ОписаниеКласса.Свойства.Добавить("Документы");
	//ОписаниеКласса.Свойства.Добавить("Движения");
	//ОписаниеКласса.ИндексКартинки = 5;
	//СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	////////////////////////////////////
	//// Конфигурации.Последовательности.Измерения
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Измерения";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.ДляЗапроса  = "";
	//ОписаниеКласса.Свойства.Добавить("Тип");
	//ОписаниеКласса.Свойства.Добавить("СоответствиеДокументам");
	//ОписаниеКласса.Свойства.Добавить("СоответствиеДвижениям");
	//СтэкДереваЗначенийСтроки.Удалить(0);
	//////////////////////////////////
	// Конфигурации.ПланыВидовХарактеристик
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ПланыВидовХарактеристик";
	ОписаниеКласса.Выгружаемый = Истина;
	ОписаниеКласса.Менеджер    = ПланыВидовХарактеристик;
	ОписаниеКласса.ДляЗапроса  = "ПланВидовХарактеристик.";
	ОписаниеКласса.Свойства.Добавить("ДополнительныеЗначенияХарактеристик");
	ОписаниеКласса.Свойства.Добавить("Тип");
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.ИндексКартинки = 9;
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.ПланыВидовХарактеристик.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ОписаниеКласса.Свойства.Добавить("Использование");
	//////////////////////////////////
	// Конфигурации.ПланыВидовХарактеристик.ТабличныеЧасти
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Использование");
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.ПланыВидовХарактеристик.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	СтэкДереваЗначенийСтроки.Удалить(0);
	//////////////////////////////////
	// Конфигурации.ПланыСчетов
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ПланыСчетов";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = ПланыСчетов;
	ОписаниеКласса.ДляЗапроса  = "ПланСчетов.";
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	//ОписаниеКласса.Свойства.Добавить("ВидыСубконто");
	ОписаниеКласса.ИндексКартинки = 11;
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.ПланыСчетов.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	//////////////////////////////////
	// Конфигурации.ПланыСчетов.ТабличныеЧасти
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.ПланыСчетов.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	СтэкДереваЗначенийСтроки.Удалить(0);
	//////////////////////////////////
	// Конфигурации.ПланыВидовРасчета
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ПланыВидовРасчета";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = ПланыВидовРасчета;
	ОписаниеКласса.ДляЗапроса  = "ПланВидовРасчета.";
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.Свойства.Добавить("ЗависимостьОтВидовРасчета");
	ОписаниеКласса.Свойства.Добавить("БазовыеВидыРасчета");
	ОписаниеКласса.Свойства.Добавить("ИспользованиеПериодаДействия");
	ОписаниеКласса.ИндексКартинки = 13;
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.ПланыВидовРасчета.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	//////////////////////////////////
	// Конфигурации.ПланыВидовРасчета.ТабличныеЧасти
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.ПланыВидовРасчета.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	СтэкДереваЗначенийСтроки.Удалить(0);
	//////////////////////////////////
	// Конфигурации.РегистрыСведений
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "РегистрыСведений";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = РегистрыСведений;
	ОписаниеКласса.ДляЗапроса  = "РегистрСведений.";
	ОписаниеКласса.ИндексКартинки = 15;
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.РегистрыСведений.Ресурсы
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Ресурсы";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	//////////////////////////////////
	// Конфигурации.РегистрыСведений.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	//////////////////////////////////
	// Конфигурации.РегистрыСведений.Измерения
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Измерения";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	//////////////////////////////////
	// Конфигурации.РегистрыНакопления
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "РегистрыНакопления";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = РегистрыНакопления;
	ОписаниеКласса.ДляЗапроса  = "РегистрНакопления.";
	ОписаниеКласса.ИндексКартинки = 17;
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.РегистрыНакопления.Ресурсы
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Ресурсы";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	//////////////////////////////////
	// Конфигурации.РегистрыНакопления.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	//////////////////////////////////
	// Конфигурации.РегистрыНакопления.Измерения
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Измерения";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	//////////////////////////////////
	// Конфигурации.РегистрыБухгалтерии
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "РегистрыБухгалтерии";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = РегистрыБухгалтерии;
	ОписаниеКласса.ДляЗапроса  = "РегистрБухгалтерии.";
	ОписаниеКласса.Свойства.Добавить("ПланСчетов");
	ОписаниеКласса.Свойства.Добавить("Корреспонденция");
	ОписаниеКласса.ИндексКартинки = 19;
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.РегистрыБухгалтерии.Измерения
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Измерения";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	//////////////////////////////////
	// Конфигурации.РегистрыБухгалтерии.Ресурсы
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Ресурсы";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	//////////////////////////////////
	// Конфигурации.РегистрыБухгалтерии.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	////////////////////////////////////
	//// Конфигурации.РегистрыРасчета
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "РегистрыРасчета";
	//ОписаниеКласса.Выгружаемый = истина;
	//ОписаниеКласса.Менеджер = РегистрыРасчета;
	//ОписаниеКласса.ДляЗапроса  = "РегистрРасчета.";
	//ОписаниеКласса.Свойства.Добавить("Периодичность");
	//ОписаниеКласса.Свойства.Добавить("ПериодДействия");
	//ОписаниеКласса.Свойства.Добавить("БазовыйПериод");
	//ОписаниеКласса.Свойства.Добавить("График");
	//ОписаниеКласса.Свойства.Добавить("ЗначениеГрафика");
	//ОписаниеКласса.Свойства.Добавить("ДатаГрафика");
	//ОписаниеКласса.Свойства.Добавить("ПланВидовРасчета");
	//ОписаниеКласса.ИндексКартинки = 21;
	//СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	////////////////////////////////////
	//// Конфигурации.РегистрыРасчета.Ресурсы
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Ресурсы";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.ДляЗапроса  = "";
	//ОписаниеКласса.Свойства.Добавить("Тип");
	////////////////////////////////////
	//// Конфигурации.РегистрыРасчета.Реквизиты
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Реквизиты";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.ДляЗапроса  = "";
	//ОписаниеКласса.Свойства.Добавить("Тип");
	//ОписаниеКласса.Свойства.Добавить("СвязьСГрафиком");
	////////////////////////////////////
	//// Конфигурации.РегистрыРасчета.Измерения
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Измерения";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.ДляЗапроса  = "";
	//ОписаниеКласса.Свойства.Добавить("Тип");
	//ОписаниеКласса.Свойства.Добавить("БазовоеИзмерение");
	//ОписаниеКласса.Свойства.Добавить("СвязьСГрафиком");
	//////////////////////////////////
	// Конфигурации.РегистрыРасчета.Перерасчеты
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Перерасчеты";
	//ОписаниеКласса.Выгружаемый = истина;
	//ОписаниеКласса.Менеджер  = "РегистрыРасчета.%i.Перерасчеты";
	//ОписаниеКласса.ДляЗапроса  = "РегистрРасчета.%i.";
	//СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.РегистрыРасчета.Перерасчеты.Измерения
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Измерения";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.Свойства.Добавить("ДанныеВедущихРегистров");
	//ОписаниеКласса.Свойства.Добавить("ИзмерениеРегистра");
	//СтэкДереваЗначенийСтроки.Удалить(0);
	//СтэкДереваЗначенийСтроки.Удалить(0);
	//////////////////////////////////
	// Конфигурации.БизнесПроцессы
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "БизнесПроцессы";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = БизнесПроцессы;
	ОписаниеКласса.ДляЗапроса  = "БизнесПроцесс.";
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.Свойства.Добавить("Задача");
	ОписаниеКласса.ИндексКартинки = 23;
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.БизнесПроцессы.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	//////////////////////////////////
	// Конфигурации.БизнесПроцессы.ТабличныеЧасти
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.БизнесПроцессы.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	СтэкДереваЗначенийСтроки.Удалить(0);
	//////////////////////////////////
	// Конфигурации.Задачи
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Задачи";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = Задачи;
	ОписаниеКласса.ДляЗапроса  = "Задача.";
	ОписаниеКласса.Свойства.Добавить("Адресация");
	ОписаниеКласса.Свойства.Добавить("ОсновнойРеквизитАдресации");
	ОписаниеКласса.Свойства.Добавить("ТекущийИсполнитель");
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.ИндексКартинки = 25;
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.Задачи.РеквизитыАдресации
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "РеквизитыАдресации";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ОписаниеКласса.Свойства.Добавить("ИзмерениеАдресации");
	//////////////////////////////////
	// Конфигурации.Задачи.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	//////////////////////////////////
	// Конфигурации.Задачи.ТабличныеЧасти
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.Задачи.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	СтэкДереваЗначенийСтроки.Удалить(0);
	
	//////////////////////////////////
	// Конфигурации.ПланыОбмена
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ПланыОбмена";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = ПланыОбмена;
	ОписаниеКласса.ДляЗапроса  = "ПланОбмена.";
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.ИндексКартинки = 27;
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.ПланыОбмена.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	//////////////////////////////////
	// Конфигурации.ПланыОбмена.ТабличныеЧасти
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.ПланыОбмена.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	СтэкДереваЗначенийСтроки.Удалить(0);
	
	СтэкДереваЗначенийСтроки.Удалить(0);
	
КонецПроцедуры

// Процедура заполняет строку дерева метаданных, попутно заполняя соответствие ссылочных типов объектам метаданных
//
// Параметры
//   ОбъектМД - описание объекта метаданных
//   ЭлементДЗ - заполняемая строка дерева метаданных
//   ЭлементОписания - описание класса, к которому принадлежит объект метаданных (свойства, подчиненные классы)
//
Процедура ПостроениеПоддереваОбъекта(ОбъектМД, ЭлементДЗ, ЭлементОписания)
	
	ЭлементДЗ.Метаданные = ОбъектМД;
	ЭлементДЗ.ОбъектМД   = ОбъектМД;
	ЭлементДЗ.ПолноеИмяМетаданных = ОбъектМД.Имя;
	ЭлементДЗ.ЭлементОписания = ЭлементОписания;
	ЭлементДЗ.Выгружать = Ложь;
	ЭлементДЗ.ВыгружатьПриНеобходимости = Истина;
	ЭлементДЗ.ИндексКартинки = ЭлементОписания.ИндексКартинки;
	
	Если ЭлементОписания.Менеджер <> Неопределено Тогда
		
		// заполнение соответствия ссылочных типов объектам метаданных
		Если ОбъектОбразуетСсылочныйТип(ОбъектМД) Тогда
			СсылочныеТипы[ТипЗнч(ЭлементОписания.Менеджер[ОбъектМД.Имя].ПустаяСсылка())] = ОбъектМД;
		КонецЕсли;
		
		//Если Метаданные.РегистрыНакопления.Содержит(ОбъектМД) 
		//	Или	Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМД) Тогда
		//	
		//	ИспользующиеИтоги.Добавить(ЭлементДЗ);
		//	
		//КонецЕсли;
		
	КонецЕсли;
	
	// подчиненные ветви
	Для Каждого ПодчиненныйКласс Из ЭлементОписания.Строки Цикл
		
		Если НЕ ПодчиненныйКласс.Выгружаемый Тогда
			Продолжить;
		КонецЕсли;
		
		ВеткаКласса = ЭлементДЗ.Строки.Добавить();
		ВеткаКласса.Метаданные = ПодчиненныйКласс.Класс;
		ВеткаКласса.Выгружать = Ложь;
		ВеткаКласса.ВыгружатьПриНеобходимости = Истина;
		ВеткаКласса.ПолноеИмяМетаданных = ПодчиненныйКласс.Класс;
		ВеткаКласса.ИндексКартинки = ПодчиненныйКласс.ИндексКартинки;
		
		ПодчиненныеОбъектыДанногоКласса = ОбъектМД[ПодчиненныйКласс.Класс];
		
		Для Каждого ПодчиненныйОбъектМД Из ПодчиненныеОбъектыДанногоКласса Цикл 
			
			//Если Метаданные.РегистрыСведений.Содержит(ПодчиненныйОбъектМД) Тогда
			//	Если ПодчиненныйОбъектМД.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
			//		Продолжить;
			//	КонецЕсли;
			//КонецЕсли;
			
			ПодчиненныйЭлементДЗ = ВеткаКласса.Строки.Добавить();
			ПостроениеПоддереваОбъекта(ПодчиненныйОбъектМД, ПодчиненныйЭлементДЗ, ПодчиненныйКласс);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура удаляет из дерева метаданных строки, соответствующие метаданным, заведомо не попадающим в выгрузку
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных, подчиненные которой рассматриваются
//        с точки зрения удаления из списка потенциально выгружаемых
//
Процедура СверткаПоддереваОбъекта(ЭлементДЗ)
	
	УдаляемыеВеткиКлассов = Новый Массив;
	Для Каждого ВеткаКласса Из ЭлементДЗ.Строки Цикл
		
		УдаляемыеПодчиненныеМД = Новый Массив;
		
		Для Каждого ПодчиненныйОбъектМД Из ВеткаКласса.Строки Цикл
			СверткаПоддереваОбъекта(ПодчиненныйОбъектМД);
			Если (ПодчиненныйОбъектМД.Строки.Количество()) = 0 
				и (НЕ ПодчиненныйОбъектМД.ЭлементОписания.Выгружаемый) Тогда 
				
				УдаляемыеПодчиненныеМД.Добавить(ВеткаКласса.Строки.Индекс(ПодчиненныйОбъектМД));
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Сч = 1 По УдаляемыеПодчиненныеМД.Количество() Цикл
			ВеткаКласса.Строки.Удалить(УдаляемыеПодчиненныеМД[УдаляемыеПодчиненныеМД.Количество() - Сч]);
		КонецЦикла;
		
		Если ВеткаКласса.Строки.Количество() = 0 Тогда
			УдаляемыеВеткиКлассов.Добавить(ЭлементДЗ.Строки.Индекс(ВеткаКласса));
		КонецЕсли;
		
	КонецЦикла;
	
	Для Сч = 1 По УдаляемыеВеткиКлассов.Количество() Цикл
		ЭлементДЗ.Строки.Удалить(УдаляемыеВеткиКлассов[УдаляемыеВеткиКлассов.Количество() - Сч]);
	КонецЦикла;
	
КонецПроцедуры

// Функция определяет имеет ли переданный объект метаданных ссылочный тип
//
// Возврат - Истина, если переданный объект метаданных имеет ссылочный тип, Ложь - противном случае
Функция ОбъектОбразуетСсылочныйТип(ОбъектМД) Экспорт
	
	Если ОбъектМД = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Метаданные.Справочники.Содержит(ОбъектМД)
		ИЛИ Метаданные.Документы.Содержит(ОбъектМД)
		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМД)
		ИЛИ Метаданные.ПланыСчетов.Содержит(ОбъектМД)
		ИЛИ Метаданные.ПланыВидовРасчета.Содержит(ОбъектМД)
		ИЛИ Метаданные.ПланыОбмена.Содержит(ОбъектМД)
		ИЛИ Метаданные.БизнесПроцессы.Содержит(ОбъектМД)
		ИЛИ Метаданные.Задачи.Содержит(ОбъектМД) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Процедура обрабатывает состояние признака Выгрузка, проставляя признаки Выгрузка и ВыгружатьПриНеобходимости
// связанным ветвям дерева
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
//
Процедура ОбработкаИзмененияСостоянияВыгружать(ЭлементДЗ) Экспорт
	Если ЭлементДЗ.Выгружать = 2 Тогда
		ЭлементДЗ.Выгружать = 0;
	КонецЕсли;
	// Изменяем состояние "вниз"
	УстановитьВыгружатьПодчиненным(ЭлементДЗ);
	// Изменяем состояние "вверх"
	ОбновитьСостояниеВыгружать(ЭлементДЗ.Родитель);
КонецПроцедуры

// Процедура обрабатывает состояние признака Выгрузка, проставляя признаки Выгрузка и ВыгружатьПриНеобходимости
// связанным ветвям дерева
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
//
Процедура ОбработкаИзмененияСостоянияВыгружатьПриНеобходимости(ЭлементДЗ) Экспорт
	
	Если ЭлементДЗ.ВыгружатьПриНеобходимости = 2 Тогда
		ЭлементДЗ.ВыгружатьПриНеобходимости = 0;
	КонецЕсли;
	
	// Изменяем состояние "вниз"
	УстановитьВыгружатьПриНеобходимостиПодчиненным(ЭлементДЗ);
	// Изменяем состояние "вверх"
	ОбновитьСостояниеВыгружатьПриНеобходимости(ЭлементДЗ.Родитель);
	
КонецПроцедуры

// Процедура проставляет признак Выгрузка строкам дерева метаданных, подчиненных данной, вычисляет и 
//      выставляет признак выгрузки "по ссылке" другим объектам, ссылки на которые может или должен
//      содержать объект, соответствующий данной строке
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
//
Процедура УстановитьВыгружатьПодчиненным(ЭлементДЗ)
	Для Каждого ПодчиненнаяСтрока Из ЭлементДЗ.Строки Цикл
		ПодчиненнаяСтрока.Выгружать = ЭлементДЗ.Выгружать;
		УстановитьВыгружатьПодчиненным(ПодчиненнаяСтрока);
	КонецЦикла;
КонецПроцедуры

// Процедура проставляет признак Выгрузка строке дерева метаданных на основании этого признака подчиненных строк,
// затем вызывает себя же для родителя, обеспечивая отработку до корня дерева
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
//
Процедура ОбновитьСостояниеВыгружать(ЭлементДЗ)
	Если ЭлементДЗ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если (ЭлементДЗ.ЭлементОписания <> Неопределено) И ЭлементДЗ.ЭлементОписания.Выгружаемый Тогда
		Возврат; // обновляем вверх или до корня, или до первого встретившегося выгружаемого
	КонецЕсли;
	Состояние = Неопределено;
	Для Каждого ПодчиненныйЭлементДЗ Из ЭлементДЗ.Строки Цикл
		Если Состояние = Неопределено Тогда
			Состояние = ПодчиненныйЭлементДЗ.Выгружать;
		Иначе
			Если НЕ Состояние = ПодчиненныйЭлементДЗ.Выгружать Тогда
				Состояние = 2;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Состояние <> Неопределено Тогда
		ЭлементДЗ.Выгружать = Состояние;
		ОбновитьСостояниеВыгружать(ЭлементДЗ.Родитель);
	КонецЕсли;
КонецПроцедуры

// Процедура проставляет признак Выгрузка строкам дерева метаданных, подчиненных данной, вычисляет и 
//      выставляет признак выгрузки "по ссылке" другим объектам, ссылки на которые может или должен
//      содержать объект, соответствующий данной строке
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
//
Процедура УстановитьВыгружатьПриНеобходимостиПодчиненным(ЭлементДЗ)
	
	Для Каждого ПодчиненнаяСтрока Из ЭлементДЗ.Строки Цикл
		ПодчиненнаяСтрока.ВыгружатьПриНеобходимости = ЭлементДЗ.ВыгружатьПриНеобходимости;
		УстановитьВыгружатьПриНеобходимостиПодчиненным(ПодчиненнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Процедура проставляет признак Выгрузка строке дерева метаданных на основании этого признака подчиненных строк,
// затем вызывает себя же для родителя, обеспечивая отработку до корня дерева
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
//
Процедура ОбновитьСостояниеВыгружатьПриНеобходимости(ЭлементДЗ)
	
	Если ЭлементДЗ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ЭлементДЗ.ЭлементОписания <> Неопределено) И ЭлементДЗ.ЭлементОписания.Выгружаемый Тогда
		Возврат; // обновляем вверх или до корня, или до первого встретившегося выгружаемого
	КонецЕсли;
	
	Состояние = Неопределено;
	Для Каждого ПодчиненныйЭлементДЗ Из ЭлементДЗ.Строки Цикл
		
		Если Состояние = Неопределено Тогда
			Состояние = ПодчиненныйЭлементДЗ.ВыгружатьПриНеобходимости;
		Иначе
			Если НЕ Состояние = ПодчиненныйЭлементДЗ.ВыгружатьПриНеобходимости Тогда
				Состояние = 2;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Состояние <> Неопределено Тогда
		ЭлементДЗ.ВыгружатьПриНеобходимости = Состояние;
		ОбновитьСостояниеВыгружатьПриНеобходимости(ЭлементДЗ.Родитель);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьКомпоновщикДляВыгрузки(СтрокаДереваМетаданных, СтрокаПолейДляВыборки = "") Экспорт
	
	Если ТипЗнч(СтрокаДереваМетаданных.НастройкиКомпоновщика) = Тип("ОтборКомпоновкиДанных") Тогда
		ЕстьДопОтборы = Ложь;
		Для Каждого ЭлементОтбора Из СтрокаДереваМетаданных.НастройкиКомпоновщика.Элементы Цикл
			Если ЭлементОтбора.Использование Тогда
				ЕстьДопОтборы = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЕстьДопОтборы = (СтрокаДереваМетаданных.НастройкиКомпоновщика <> Неопределено);
	КонецЕсли;
	
	ИтоговыйТекстЗапроса = ПолучитьТекстЗапросаПоСтроке(СтрокаДереваМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки);
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ТекущаяБаза";
	ИсточникДанных.СтрокаСоединения = "";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос = ИтоговыйТекстЗапроса;
	НаборДанных.Имя = "ОсновнойЗапрос";
	НаборДанных.ИсточникДанных = "ТекущаяБаза";
	
	Если ЕстьДопОтборы Тогда
		
		НастройкиКомпоновщикаXDTO = СериализаторXDTO.ЗаписатьXDTO(СтрокаДереваМетаданных.НастройкиКомпоновщика);
		СКДXDTO = СериализаторXDTO.ЗаписатьXDTO(СхемаКомпоновкиДанных);
		СКДXDTO.defaultSettings = СКДXDTO.settingsVariant[0].settings;
		СКДXDTO.defaultSettings.filter = НастройкиКомпоновщикаXDTO;
		СхемаКомпоновкиДанных = СериализаторXDTO.ПрочитатьXDTO(СКДXDTO);
		
	КонецЕсли;
	
	ПараметрДатаНачала = Новый ПараметрКомпоновкиДанных("ДатаНачала");
	ПараметрДатаОкончания = Новый ПараметрКомпоновкиДанных("ДатаОкончания");
	
	СхемаКомпоновкиДанных.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Очистить();
	Параметр = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = ПараметрДатаНачала;
	Параметр.Значение = ДатаНачала;
	Параметр.Использование = Истина;
	
	Параметр = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = ПараметрДатаОкончания;
	Параметр.Значение = ДатаОкончания;
	Параметр.Использование = Истина;
	
	Возврат СхемаКомпоновкиДанных; //ПостроительОтчета;
	
КонецФункции

Функция ПолучитьТекстЗапросаПоСтроке(СтрокаДереваМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки = "") Экспорт
	
	Если ТипЗнч(СтрокаДереваМетаданных) = Тип("ДанныеФормыЭлементДерева") Тогда
		// Вызов из управляемой формы
		РодительскийЭлемент = СтрокаДереваМетаданных.ПолучитьРодителя();
	Иначе //СтрокаДереваЗначений
		РодительскийЭлемент = СтрокаДереваМетаданных.Родитель;
	КонецЕсли;
	//ОбъектМетаданных  = СтрокаДереваМетаданных.Метаданные;
	ОбъектМетаданных = Метаданные[РодительскийЭлемент.ПолноеИмяМетаданных][СтрокаДереваМетаданных.ПолноеИмяМетаданных];
	ИмяМетаданных     = ОбъектМетаданных.ПолноеИмя();
	
	Если Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		
		ТекстЗапроса = ПолучитьТекстЗапросаДляРегистраСведений(ИмяМетаданных, ОбъектМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки);
		Возврат ТекстЗапроса;
		
	ИначеЕсли   Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		
		ТекстЗапроса = ПолучитьТекстЗапросаДляРегистра(ИмяМетаданных, ОбъектМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки);
		Возврат ТекстЗапроса;
		
	КонецЕсли;
	
	ЕстьОграничениеПоДатам = ЗначениеЗаполнено(ДатаНачала) Или ЗначениеЗаполнено(ДатаОкончания);
	
	Если НЕ ЗначениеЗаполнено(СтрокаПолейДляВыборки) Тогда
		СтрокаПолейДляВыборки = "_.*";
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ Разрешенные " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + " КАК _ ";
	
	// возможно нужно ограничение по датам установить
	Если ЕстьОграничениеПоДатам Тогда
		
		Если ЕстьДопОтборы И 
			НЕ ИспользоватьОтборПоДатеДляВсехОбъектов Тогда
			
			Возврат ТекстЗапроса;
			
		КонецЕсли;
		
		ДопОграничениеПоДате = "";
		
		// можно ли для данного объекта МД сторить ограничения по датам
		Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			
			ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ОбъектМетаданных, "Документ");
			
		ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных)
			ИЛИ Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
			
			ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ОбъектМетаданных, "Регистр");
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ДопОграничениеПоДате;
		
	КонецЕсли;
	
	Возврат  ТекстЗапроса;
	
КонецФункции

Функция ПолучитьСтрокуОграниченияПоДатеДляЗапроса(Свойства, ИмяТипа) Экспорт
	
	ИтоговоеОграничениеПоДате = "";
	ИмяАлиасаТаблицы = "_";
	
	Если НЕ (ИмяТипа = "Документ" ИЛИ ИмяТипа = "РегистрСведений" ИЛИ ИмяТипа = "Регистр") Тогда
		Возврат ИтоговоеОграничениеПоДате;
	КонецЕсли;
	
	ИмяПоляОграничения = ИмяАлиасаТаблицы + "." + ?(ИмяТипа = "Документ", "Дата", "Период");
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		
		ИтоговоеОграничениеПоДате = "
		|	ГДЕ
		|		" + ИмяПоляОграничения + " >= &ДатаНачала";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		
		Если ПустаяСтрока(ИтоговоеОграничениеПоДате) Тогда
			
			ИтоговоеОграничениеПоДате = "
			|	ГДЕ
			|		" + ИмяПоляОграничения + " <= &ДатаОкончания";
			
		Иначе
			
			ИтоговоеОграничениеПоДате = ИтоговоеОграничениеПоДате + "
			|	И
			|		" + ИмяПоляОграничения + " <= &ДатаОкончания";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИтоговоеОграничениеПоДате;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляРегистраСведений(ИмяМетаданных, ОбъектМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки = "")
	
	ЕстьОграничениеПоДатам = ЗначениеЗаполнено(ДатаНачала) Или ЗначениеЗаполнено(ДатаОкончания);
	
	ВыбираемВсеПоля = НЕ ЗначениеЗаполнено(СтрокаПолейДляВыборки) или 
		ОбъектМетаданных.РежимЗаписи	= Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору и СтрокаПолейДляВыборки = "Регистратор";
	
	Если ВыбираемВсеПоля Тогда
		МенеджерНабораЗаписей = Неопределено;
		Выполнить("МенеджерНабораЗаписей = РегистрыСведений."+ОбъектМетаданных.Имя);
		
		СтрокаПолейДляВыборки = " Различные " +  ПолучитьСтрокуПолейОтбораРегистра(МенеджерНабораЗаписей);
	Иначе
		СтрокаПолейДляВыборки = " Различные " +  СтрокаПолейДляВыборки;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ Разрешенные " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + " КАК _ ";
	
	Если ОбъектМетаданных.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	// 0 - отбор за период
	// 1 - срез последних на дату окончания
	// 2 - срез первых на дату начала
	// 3 - срез последних на дату начала + отбор за период
	
	Если ТипВыгрузкиПериодическихРегистров = 0 Тогда
		
		Если ЕстьДопОтборы И 
			НЕ ИспользоватьОтборПоДатеДляВсехОбъектов Тогда
			
			Возврат ТекстЗапроса;
			
		КонецЕсли;
		
		ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ОбъектМетаданных, "РегистрСведений");
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ДопОграничениеПоДате;
		
	ИначеЕсли ТипВыгрузкиПериодическихРегистров = 1 Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ Разрешенные " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + ".СрезПоследних(&ДатаОкончания) КАК _ ";
		
	ИначеЕсли ТипВыгрузкиПериодическихРегистров = 2 Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ Разрешенные " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + ".СрезПервых(&ДатаНачала) КАК _ ";
		
	ИначеЕсли ТипВыгрузкиПериодическихРегистров = 3 Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ Разрешенные " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + ".СрезПоследних(&ДатаНачала) КАК _ 
		|
		|Объединить все
		|
		|ВЫБРАТЬ " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + " КАК _ ";
		
		ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ОбъектМетаданных, "РегистрСведений");
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ДопОграничениеПоДате;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляРегистра(ИмяМетаданных, ОбъектМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки = "")
	
	ЕстьОграничениеПоДатам = ЗначениеЗаполнено(ДатаНачала) Или ЗначениеЗаполнено(ДатаОкончания);
	
	ВыбираемВсеПоля = НЕ ЗначениеЗаполнено(СтрокаПолейДляВыборки) или СтрокаПолейДляВыборки = "Регистратор";
	
	Если ВыбираемВсеПоля Тогда
		МенеджерНабораЗаписей = Неопределено;
		Если  НЕ (Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных)) Тогда
			ВызватьИсключение ПолучитьТекстСообщенияПользователю("должны были передать либо регистр накопления либо регистр бухгалтерии");
		КонецЕсли;
		
		ИмяМенеджераРегистра = 	?(Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных), "РегистрыНакопления", "РегистрыБухгалтерии");

		Выполнить("МенеджерНабораЗаписей = "+ИмяМенеджераРегистра+"."+ОбъектМетаданных.Имя);
		
		СтрокаПолейДляВыборки = " Различные " +  ПолучитьСтрокуПолейОтбораРегистра(МенеджерНабораЗаписей);
	Иначе
		СтрокаПолейДляВыборки = " РАЗЛИЧНЫЕ " +  СтрокаПолейДляВыборки;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ Разрешенные " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + " КАК _ ";
	
	// возможно нужно ограничение по датам установить
	Если ЕстьОграничениеПоДатам Тогда
		
		Если ЕстьДопОтборы И 
			НЕ ИспользоватьОтборПоДатеДляВсехОбъектов Тогда
			
			Возврат ТекстЗапроса;
			
		КонецЕсли;
		
		ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ОбъектМетаданных, "Регистр");
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ДопОграничениеПоДате;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура рекурсивно обрабатывает дерево метаданных, образуя списки полной и вспомогательной выгрузки
//
// Параметры
//
Процедура СоставВыгрузки(ПересчитатьВыгружаемыеПоСсылке = Ложь) Экспорт
	
	СоставПолнойВыгрузки = Новый ТаблицаЗначений;
	СоставПолнойВыгрузки.Колонки.Добавить("ОбъектМД");
	СоставПолнойВыгрузки.Колонки.Добавить("СтрокаДерева");
	СоставПолнойВыгрузки.Индексы.Добавить("ОбъектМД");
	
	СоставВспомогательнойВыгрузки = Новый ТаблицаЗначений;
	СоставВспомогательнойВыгрузки.Колонки.Добавить("ОбъектМД");
	СоставВспомогательнойВыгрузки.Колонки.Добавить("СтрокаДерева");
	СоставВспомогательнойВыгрузки.Индексы.Добавить("ОбъектМД");
	
	Для Каждого СтрокаДЗ Из ДеревоМетаданных.Строки Цикл
		ДобавитьВыгружаемыеОбъекты(СоставПолнойВыгрузки, СоставВспомогательнойВыгрузки, СтрокаДЗ);
	КонецЦикла;
	
	мНаличиеВыгрузкиПодчиненныхОбъектов = СоставВспомогательнойВыгрузки.Количество() > 0;
	
	Если ПересчитатьВыгружаемыеПоСсылке Тогда
		
		ПересчитатьВыгружаемыеПоСсылке(СоставПолнойВыгрузки);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура рекурсивно обрабатывает строку дерева метаданных, образуя списки полной и вспомогательной выгрузки
//
// Параметры
//   СоставПолнойВыгрузки - список полной выгрузки
//   СоставВспомогательнойВыгрузки - список вспомогательной выгрузки
//   СтрокаДЗ - обрабатываемая строка дерева метаданных
//
Процедура ДобавитьВыгружаемыеОбъекты(СоставПолнойВыгрузки, СоставВспомогательнойВыгрузки, СтрокаДЗ)
	
	Если (СтрокаДЗ.ЭлементОписания <> Неопределено) 
		И СтрокаДЗ.ЭлементОписания.Выгружаемый Тогда
		
		СтрокаДобавления = Неопределено;
		
		Если СтрокаДЗ.Выгружать Тогда
			
			СтрокаДобавления = СоставПолнойВыгрузки.Добавить();
			
		КонецЕсли;
		Если СтрокаДобавления <> Неопределено Тогда		
			СтрокаДобавления.ОбъектМД = СтрокаДЗ.ОбъектМД;
			СтрокаДобавления.СтрокаДерева = СтрокаДЗ;
			
		КонецЕсли;
		
		Если СтрокаДЗ.ВыгружатьПриНеобходимости Тогда // нужно для иерархических метаданных и подгрузки родителей
			
			СтрокаДобавления = СоставВспомогательнойВыгрузки.Добавить();
			
		КонецЕсли;
		
		Если СтрокаДобавления <> Неопределено Тогда		
			СтрокаДобавления.ОбъектМД = СтрокаДЗ.ОбъектМД;
			СтрокаДобавления.СтрокаДерева = СтрокаДЗ;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрокаДЗ Из СтрокаДЗ.Строки Цикл
		ДобавитьВыгружаемыеОбъекты(СоставПолнойВыгрузки, СоставВспомогательнойВыгрузки, ПодчиненнаяСтрокаДЗ);
	КонецЦикла;
	
КонецПроцедуры

// Процедура определяет, какие типы объектов следует выгружать для сохранения ссылочной целостности
//
// Параметры
//   Выгрузка - массив строк - совокупность выгружаемых объектов
Процедура ПересчитатьВыгружаемыеПоСсылке(Выгрузка) Экспорт
	
	// сброс всех флажков ВыгружатьПриНеобходимости
	СтрокаКонфигурации = ДеревоМетаданных.Строки[0];
	СтрокаКонфигурации.ВыгружатьПриНеобходимости = 0;
	ОбработкаИзмененияСостоянияВыгружатьПриНеобходимости(СтрокаКонфигурации);
	#Если Клиент Тогда
		Состояние("Выполняется поиск объектов метаданных, которые могут быть выгружены по ссылкам...");
	#КонецЕсли
	
	КоллекцияУжеИспользованныхЭлементовДЗ = Новый Соответствие;
	
	// 0 уровень - узел конфигурации, 1 - узел справочники, документы, 2-... - реальные метаданные
	НачальныйУровень = 0;
	Если УровеньВыгрузки = 0 Тогда
		МаксимальныйУровень = 99999999999; 
	Иначе
		МаксимальныйУровень = НачальныйУровень + УровеньВыгрузки - 1;// уровень выгрузки = 1, значит, грузим только отмеченные метаданные без зависимых
	КонецЕсли;
	
	// обработка переданного набора объектов
	Для Каждого Выгружаемый Из Выгрузка Цикл
		
		УстановкаСостоянияВыгружатьПриНеобходимости(Выгружаемый.СтрокаДерева, КоллекцияУжеИспользованныхЭлементовДЗ, НачальныйУровень, МаксимальныйУровень);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура определяет, на какие объект может ссылаться запись, соответствующая объекту метаданных, отображаемому
// данной строкой дерева метаданных и проставляет им признак ВыгружатьПриНеобходимости
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
//
Процедура УстановкаСостоянияВыгружатьПриНеобходимости(ЭлементДЗ, КоллекцияУжеИспользованныхЭлементовДЗ, Знач Уровень, Знач МаксимальныйУровень)
	Если Уровень > МаксимальныйУровень Тогда
		Возврат;
	КонецЕсли;
	
	Если КоллекцияУжеИспользованныхЭлементовДЗ.Получить(ЭлементДЗ) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	КоллекцияУжеИспользованныхЭлементовДЗ.Вставить(ЭлементДЗ, ЭлементДЗ);
	
	ОбновитьСостояниеВыгружатьПриНеобходимости(ЭлементДЗ.Родитель);
	Если ЭлементДЗ.Выгружать <> 1 И ЭлементДЗ.ВыгружатьПриНеобходимости <> 1 Тогда
		Возврат;
	КонецЕсли;
	Если ЭлементДЗ.ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Уровень = Уровень + 1;
	Если Уровень > МаксимальныйУровень Тогда
		Возврат;
	КонецЕсли;
	
	ВсеТипы = ПолучитьВсеТипы(ЭлементДЗ);
	Для Каждого СсылочныйТип Из ВсеТипы Цикл
		
		ТипИОбъект = СсылочныеТипы.Получить(СсылочныйТип);
		Если ТипИОбъект = Неопределено Тогда
			
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Внутреняя ошибка. Неполное заполнение структуры ссылочных типов - %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СсылочныйТип);
			ВызватьИсключение(ТекстСообщения);
			
		КонецЕсли;
		
		ОбъектМД = ТипИОбъект;
		СтрокаДЗ = ЭлементДЗПоОбъектуМД(ОбъектМД);
		Если СтрокаДЗ = Неопределено Тогда 
			
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Внутреняя ошибка. Неполное заполнение дерева метаданных. Отсутствует объект, образующий тип - %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СсылочныйТип);
			ВызватьИсключение(ТекстСообщения);
			
		КонецЕсли;
		
		Если СтрокаДЗ.Выгружать = 1 
			И СтрокаДЗ.ВыгружатьПриНеобходимости = 1 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаДЗ.ВыгружатьПриНеобходимости = 1;
		УстановкаСостоянияВыгружатьПриНеобходимости(СтрокаДЗ, КоллекцияУжеИспользованныхЭлементовДЗ, Уровень, МаксимальныйУровень);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает массив типов, которые могут иметь поля записи объекта метаданных, соответствующего строке дерева
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
// Возврат - массив потенциально используемых соответствующей записью типов
//
Функция ПолучитьВсеТипы(ЭлементДЗ)
	
	ОбъектМД = ЭлементДЗ.ОбъектМД;
	Если ТипЗнч(ОбъектМД) <> Тип("ОбъектМетаданных") 
		И ТипЗнч(ОбъектМД) <> Тип("ОбъектМетаданныхКонфигурация") Тогда
		
		ВызватьИсключение("Внутреняя ошибка обработки выгрузки");
		
	КонецЕсли;
	
	Возврат ПолучитьТипыИспользуемыеОМД(ОбъектМД, ЭлементДЗ.ЭлементОписания);
	
КонецФункции

// Функция возвращает строку дерева метаданных, соответствующую переданному объекту метаданных
// Поиск осуществляется по всему дереву метаданных
//
// Параметры
//   ОбъектМД - описание метаданного
// Возврат - строка дерева метаданных
//
Функция ЭлементДЗПоОбъектуМД(ОбъектМД)
	Для Каждого СтрокаДЗ Из ДеревоМетаданных.Строки Цикл
		ЭлементДЗ = ЭлементДЗПоОбъектуМДИСтроке(СтрокаДЗ, ОбъектМД);
		Если ЭлементДЗ <> Неопределено Тогда 
			Возврат ЭлементДЗ;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Функция возвращает массив типов, которые могут иметь поля записи объекта метаданных
//
// Параметры
//   ОбъектМД - описание метаданного
//   ЭлементОписания - описание класса объекта метаданного
// Возврат - массив потенциально используемых соответствующей записью типов
//
Функция ПолучитьТипыИспользуемыеОМД(ОбъектМД, ЭлементОписания)
	
	ВсеТипы = Новый Массив;
	
	Для Каждого Свойство Из ЭлементОписания.Свойства Цикл
		
		ЗначениеСвойства = ОбъектМД[Свойство.Значение];
		Если ТипЗнч(ЗначениеСвойства) = Тип("КоллекцияЗначенийСвойстваОбъектаМетаданных") И ЗначениеСвойства.Количество() > 0 Тогда
			
			Для Каждого СтрокаКоллекции Из ЗначениеСвойства Цикл
				
				СсылочныйТипКлючИЗначение = СоответствиеОбъектовМетаданныхИСсылочныхТипов[СтрокаКоллекции];
				
				Если СсылочныйТипКлючИЗначение <> Неопределено Тогда
					
					ДобавитьВМассивЕслиУникальный(ВсеТипы, СсылочныйТипКлючИЗначение);
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("ОбъектМетаданных") Тогда
			
			Для Каждого СсылочныйТипКлючИЗначение Из СсылочныеТипы Цикл
				
				Если ЗначениеСвойства = СсылочныйТипКлючИЗначение.Значение Тогда
					ДобавитьВМассивЕслиУникальный(ВсеТипы, СсылочныйТипКлючИЗначение.Ключ);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КлассМДТипизированный(ЭлементОписания) Тогда
		
		ОписаниеТипа = ОбъектМД.Тип;
		Для Каждого ОдинТип Из ОписаниеТипа.Типы() Цикл
			
			Если СсылочныйТип(ОдинТип) Тогда
				ДобавитьВМассивЕслиУникальный(ВсеТипы, ОдинТип);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если Метаданные.РегистрыСведений.Содержит(ОбъектМД) Или 
			Метаданные.РегистрыНакопления.Содержит(ОбъектМД) Или
			Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМД) Или
			Метаданные.РегистрыРасчета.Содержит(ОбъектМД) Тогда
			
			// какой-то из регистров, ищем в возможных регистраторах
			Для Каждого ДокументМД Из Метаданные.Документы Цикл
				
				Если ДокументМД.Движения.Содержит(ОбъектМД) Тогда
					
					ДобавитьВМассивЕслиУникальный(ВсеТипы, ТипЗнч(Документы[ДокументМД.Имя].ПустаяСсылка()));
					
				КонецЕсли;
				
			КонецЦикла;
			
		 // нужно для иерархических метаданных и подгрузки родителей
		ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМД) И ОбъектМД.Иерархический Тогда
			ДобавитьВМассивЕслиУникальный(ВсеТипы, ТипЗнч(Справочники[ОбъектМД.Имя].ПустаяСсылка()));
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМД) И ОбъектМД.Иерархический Тогда
			ДобавитьВМассивЕслиУникальный(ВсеТипы, ТипЗнч(ПланыВидовХарактеристик[ОбъектМД.Имя].ПустаяСсылка()));
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ПодчиненныйКласс Из ЭлементОписания.Строки Цикл
		
		Для Каждого ПодчиненныйОбъектМД Из ОбъектМД[ПодчиненныйКласс.Класс] Цикл
			
			ТипыПодчиненного = ПолучитьТипыИспользуемыеОМД(ПодчиненныйОбъектМД, ПодчиненныйКласс);
			Для Каждого ОдинТип Из ТипыПодчиненного Цикл
				ДобавитьВМассивЕслиУникальный(ВсеТипы, ОдинТип);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВсеТипы;
	
КонецФункции

// Функция возвращает строку дерева метаданных, соответствующую переданному объекту метаданных
// Поиск осуществляется среди строк, подчиненных переданной
//
// Параметры
//   СтрокаДЗ - строка дерева метаданных, от которй осуществляется поиск
//   ОбъектМД - описание метаданного
// Возврат - строка дерева метаданных
//
Функция ЭлементДЗПоОбъектуМДИСтроке(СтрокаДЗ, ОбъектМД)
	
	Возврат СтрокаДЗ.Строки.Найти(ОбъектМД, "ОбъектМД", Истина);
	
КонецФункции

// Процедура добавляет в массив новый элемент, если он является уникальным
//
// Параметры
//   Массив - исследуемый тип
//   Элемент - добавляемый элемент
//
Процедура ДобавитьВМассивЕслиУникальный(Массив, Элемент)
	
	Если Массив.Найти(Элемент) = Неопределено Тогда
		Массив.Добавить(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет, являются ли объекты данного класса метаданных типизированными
//
// Параметры
//   Описание - Описание класса
// Возврат - Истина, если объекты данного класса метаданных типизированы, Ложь в противном случае
//
Функция КлассМДТипизированный(Описание)
	
	Для Каждого Свойство Из Описание.Свойства Цикл
		Если Свойство.Значение = "Тип" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

Функция КлассМДИерархический(ОбъектМД)
	Рез = Ложь;
	Если ОбъектМД = Неопределено Тогда
	
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМД) И ОбъектМД.Иерархический Тогда
		Рез = Истина;
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМД) И ОбъектМД.Иерархический Тогда
		Рез = Истина;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

// Функция определяет, являются ли тип ссылочным
//
// Параметры
//   Тип - исследуемый тип
// Возврат - Истина, если тип ссылочный, Ложь в противном случае
//
Функция СсылочныйТип(Тип)
	
	МетаданныеТипа = СсылочныеТипы.Получить(Тип);
	Возврат МетаданныеТипа <> Неопределено;
	
КонецФункции


Процедура СоздатьПоМетаданным(массивДанных)
	
	ОбработанныхКонстант = 0;
	ОбработанныхНаборовЗаписей = 0;
	
	ОбъектыВыгруженныеСОшибками = Новый Соответствие;
	СоставВыгрузки();
	
	мВыгруженныеОбъекты = Новый ТаблицаЗначений;
	мВыгруженныеОбъекты.Колонки.Добавить(ВернутьЗначениеСоответствия("Ссылка"));
	мВыгруженныеОбъекты.Индексы.Добавить(ВернутьЗначениеСоответствия("Ссылка"));
	
	
	Если ОбъектыВыгруженныеСОшибками = Неопределено Тогда
		ОбъектыВыгруженныеСОшибками = Новый Соответствие;
	КонецЕсли;
	
	//ОкноИсполнения = ПолучитьФорму("ОкноИсполнения");
	//ОкноИсполненияОбщееКоличество = 1;
	//ОкноИсполненияОбработано = 0;
	//ОкноИсполнения.Открыть();
	
	Попытка
		
		Для Каждого СтрокаТаблицыВыгрузки Из СоставПолнойВыгрузки Цикл
			
			СтрокаДереваМетаданных = СтрокаТаблицыВыгрузки.СтрокаДерева;
			
			Если СтрокаДереваМетаданных.ЭлементОписания.Менеджер = Неопределено Тогда
				ВызватьИсключение("Выгрузка данных. Внутренняя ошибка");
			КонецЕсли;
			
			Если Метаданные.Константы.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда
				
				//ЗаписьКонстанты(СтрокаДереваМетаданных.ОбъектМД, ОбъектыВыгруженныеСОшибками);
				
			ИначеЕсли Метаданные.РегистрыСведений.Содержит(СтрокаДереваМетаданных.ОбъектМД) Или 
				Метаданные.РегистрыНакопления.Содержит(СтрокаДереваМетаданных.ОбъектМД) Или
				Метаданные.РегистрыРасчета.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда
				
				ЗаписьРегистра(СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками,, массивДанных);
				
			ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда
				
				ЗаписьРегистра(СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, Истина, массивДанных);
				
			ИначеЕсли ТипЗнч(СтрокаДереваМетаданных.ЭлементОписания.Менеджер) = Тип("Строка") Тогда
				// специальный случай для перерасчетов
				//ЗаписьПерерасчета(СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками);
				
			ИначеЕсли Метаданные.Последовательности.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда 
				
				//ЗаписьПоследовательности(СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками);
				
			Иначе
				ЗаписьДанныхОбъектногоТипа(СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, массивДанных);
				
			КонецЕсли;
			
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли
		
		КонецЦикла;
		
		//ДополнительныеОбъектыДляВыгрузки.Сортировать("ИмяОбъектаДляЗапроса");
		ТекущийМассивСсылок = Новый Массив();
		ТекущееИмяЗапроса = "";

		
		//Для Каждого СтрокаТаблицыВыгрузки Из ДополнительныеОбъектыДляВыгрузки Цикл
		//	
		//	Если НЕ ЗначениеЗаполнено(СтрокаТаблицыВыгрузки.Объект)
		//		ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицыВыгрузки.ИмяОбъектаДляЗапроса) Тогда
		//		
		//		Продолжить;
		//		
		//	КонецЕсли;
		//	
		//	Если ТекущееИмяЗапроса <> СтрокаТаблицыВыгрузки.ИмяОбъектаДляЗапроса Тогда
		//		
		//		ВыгрузитьДанныеМассиваСсылок(ТекущийМассивСсылок, ТекущееИмяЗапроса, ОбъектыВыгруженныеСОшибками);
		//		
		//		ТекущийМассивСсылок = Новый массив();
		//		ТекущееИмяЗапроса = СтрокаТаблицыВыгрузки.ИмяОбъектаДляЗапроса;
		//		
		//	КонецЕсли;
		//	
		//	ТекущийМассивСсылок.Добавить(СтрокаТаблицыВыгрузки.Объект);
		//	
		//КонецЦикла;
		
		//ВыгрузитьДанныеМассиваСсылок(ТекущийМассивСсылок, ТекущееИмяЗапроса, ОбъектыВыгруженныеСОшибками);
		
	Исключение
		//ОкноИсполнения.Закрыть();
		ВызватьИсключение;
	КонецПопытки;
	
	//ОкноИсполнения.Закрыть();
	#Если Клиент Тогда
	Состояние();
	#КонецЕсли
	
КонецПроцедуры

Процедура ЗаписьДанныхОбъектногоТипа(СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, массивДанных)
	
	ПодзаголовокОкнаИсполнения = СтрокаДереваМетаданных.ОбъектМД.ПолноеИмя();
	
	ОкноИсполненияОбщееКоличество = 1;
	//ОкноИсполненияОбработано = 0;
	
	РезультатЗапроса = ПолучитьРезультатЗапросаСОграничениями(СтрокаДереваМетаданных);
	
	ЗапросИЗапись(РезультатЗапроса, Истина, ОбъектыВыгруженныеСОшибками, массивДанных);
	
КонецПроцедуры

Функция ПолучитьРезультатЗапросаСОграничениями(СтрокаДереваМетаданных)
	
	СКД = ПодготовитьКомпоновщикДляВыгрузки(СтрокаДереваМетаданных);

	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	Компоновщик.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
	ПолеГруппировки = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	СистемныеПоля = Новый ПолеКомпоновкиДанных("СистемныеПоля");
	ПараметрыДанных = Новый ПолеКомпоновкиДанных("ПараметрыДанных");
	Для Каждого ДоступноеПоле Из Компоновщик.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		Если ДоступноеПоле.Поле = СистемныеПоля Или ДоступноеПоле.Поле = ПараметрыДанных Тогда
			Продолжить;
		КонецЕсли;
		ПолеНабора = СКД.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабора.Поле = Строка(ДоступноеПоле.Поле);
		ПолеНабора.ПутьКДанным = Строка(ДоступноеПоле.Поле);
		Если ДоступноеПоле.Папка
			И Строка(ДоступноеПоле.Поле) <> "ВидыСубконто" // Не хочет выгружать Счет.ВидыСубконто.*
			Тогда
			ПолеГруппировкиПапки = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			Для Каждого ВложенныйЭлемент Из ДоступноеПоле.Элементы Цикл
				ПолеНабора = СКД.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
				ПолеНабора.Поле = Строка(ВложенныйЭлемент.Поле);
				ПолеНабора.ПутьКДанным = Строка(ВложенныйЭлемент.Поле);
				ВыбранноеПоле = ПолеГруппировкиПапки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = ВложенныйЭлемент.Поле;
			КонецЦикла;
		Иначе
			ВыбранноеПоле = ПолеГруппировки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ДоступноеПоле.Поле;
		КонецЕсли;
		
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Компоновщик.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	Запрос = Новый Запрос(МакетКомпоновки.НаборыДанных.ОсновнойЗапрос.Запрос);
	ПараметрыЗапроса = Запрос.НайтиПараметры();
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		ПараметрМакетаСКД = МакетКомпоновки.ЗначенияПараметров.Найти(Параметр.Имя);
		Запрос.УстановитьПараметр(Параметр.Имя, ПараметрМакетаСКД.Значение);
	КонецЦикла;
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Процедура исполняет переданный запрос и записывает полученные через запрос объекты
//
// Параметры
//   Запрос - запрос для исполнения, результат содержит выборку объектов для записи
//   ЗаписьXML - объект, через которых происходит запись объектов ИБ
//   ЗапросВерхнегоУровня - признак необходимости анимации процесса
//
Процедура ЗапросИЗапись(РезультатЗапроса, ЗапросВерхнегоУровня = Ложь, ОбъектыВыгруженныеСОшибками, массивДанных)
	
	// универсальная процедура выгрузки ссылочных объектов процедура
	ОбработкаРезультатаЗапроса(РезультатЗапроса, Истина, ЗапросВерхнегоУровня, ОбъектыВыгруженныеСОшибками, массивДанных, МассивИмен);
	
КонецПроцедуры

// Процедура записывает содержащиеся в выборке результата запроса объекты и необходимые "по ссылке" объекты ИБ
//
// Параметры
//   РезультатЗапроса - результат запроса
//   ЗаписьXML - объект, через которых происходит запись объектов ИБ
//   ЭтоЗапросПоОбъекту - если Истина, выборка должна содержать объекты, на которые может быть ссылка,
//             если Ложь, выгружать, как объект не нужно, только обработать возможные ссылки на др. объекты ИБ
//
Процедура ОбработкаРезультатаЗапроса(РезультатЗапроса, ЭтоЗапросПоОбъекту = Ложь, 
	ЗапросВерхнегоУровня = Ложь, ОбъектыВыгруженныеСОшибками = Неопределено, массивДанных, МассивИмен)
	
	#Если Клиент Тогда
	ОбработкаПрерыванияПользователя();
	#КонецЕсли

	ВыборкаИзРезультатовЗапроса = РезультатЗапроса.Выбрать();
	Если ЗапросВерхнегоУровня Тогда
		
		ОкноИсполненияОбщееКоличество = ВыборкаИзРезультатовЗапроса.Количество();
		//ОкноИсполнения.ОбновитьВерхнююГраницу();
		
	КонецЕсли;
	
	ВсегоОбработаноОбъектов = 0;
	ОбработаноОбъектов = 0;
	
	Пока ВыборкаИзРезультатовЗапроса.Следующий() Цикл
		
		ДанныеОбъекта = ВыборкаИзРезультатаЗапросаВСтруктуру(РезультатЗапроса, ВыборкаИзРезультатовЗапроса);
		
		Если ЭтоЗапросПоОбъекту Тогда
			
			// выгрузка ссылочных объектов
			Ссылка = ДанныеОбъекта[ВернутьЗначениеСоответствия("Ссылка")];
			
			Если СсылкаВыгружена(Ссылка) Тогда
				
				Если ЗапросВерхнегоУровня Тогда
					
					ОбработаноОбъектов = ОбработаноОбъектов + 1;
					Если ОбработаноОбъектов % 100 = 0 Тогда
						//ОкноИсполненияОбработано = ОкноИсполненияОбработано + ОбработаноОбъектов;
						ОбработаноОбъектов = 0;
					КонецЕсли;
					
				КонецЕсли;
				Продолжить;
				
			КонецЕсли;
			
			ДобавитьСсылкуКВыгруженным(Ссылка);
			
			ВсегоОбработаноОбъектов = ВсегоОбработанныхЗаписей();
			
			ПоказатьПользователюИнформациюОСостоянииВыгрузки(ВсегоОбработаноОбъектов, ОбъектыВыгруженныеСОшибками);
			
		КонецЕсли;
		
		Если мНаличиеВыгрузкиПодчиненныхОбъектов Тогда
		
			// перебираем колонки запроса в поисках ссылочных значений, которые, возможно, нужно выгрузить
			Для Каждого КолонкаЗапроса Из РезультатЗапроса.Колонки Цикл
				
				ЗначениеКолонки = ДанныеОбъекта[КолонкаЗапроса.Имя];
				
				Если ТипЗнч(ЗначениеКолонки) = мТипРезультатЗапроса Тогда
					
					ОбработкаРезультатаЗапроса(ЗначениеКолонки, , , ОбъектыВыгруженныеСОшибками, массивДанных, МассивИмен);
					
				Иначе
				
					ЗаписатьЗначениеПриНеобходимости(ЗначениеКолонки, ОбъектыВыгруженныеСОшибками, массивДанных);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЭтоЗапросПоОбъекту Тогда
			
			//Объект = Ссылка.ПолучитьОбъект();
						
			Попытка
				
				//ВыполнитьВспомогательныеДействияДляЗаписиXML(ВсегоОбработаноОбъектов);
				
				//ЗаписатьXML(ЗаписьXML, Объект);
				
				//НоваяСтрокаТаблицыДанных = ТаблицаДанных.Добавить();
				//НоваяСтрокаТаблицыДанных.Ссылка = Ссылка;
				//ПриИзмененииСсылки(НоваяСтрокаТаблицыДанных);
				
				ОписательЭлемента = СоздатьОписательЭлементаПоСсылке(Ссылка, МассивИмен, ДанныеОбъекта);
					//ОписательЭлемента = СоздатьОписательЭлемента();
					//ОписательЭлемента.Ссылка = Ссылка;
					//ОписательЭлемента.ИмяПеременной = УникальноеИмяПеременнойПоСсылке(Ссылка, МассивИмен);
					//МетаСсылка = Ссылка.Метаданные();
					//ОписательЭлемента.Метаданное = МетаСсылка;
					//ОписательЭлемента.РежимПоиска = "Перем";
					//Если Метаданные.Справочники.Содержит(МетаСсылка) И Ссылка.ЭтоГруппа Тогда
					//	ОписательЭлемента.РежимСоздания = "Группа";
					//Иначе
					//	ОписательЭлемента.РежимСоздания = "";
					//КонецЕсли;
				МассивДанных.Добавить(ОписательЭлемента);
				
				Если ВыгружатьСДокументомЕгоДвижения
					И Метаданные.Документы.Содержит(Ссылка.Метаданные()) Тогда
					
					Объект = Ссылка.ПолучитьОбъект();
					// выгрузка движений документа
					Для Каждого Движение Из Объект.Движения Цикл
						
						Движение.Прочитать();
						
						Если мНаличиеВыгрузкиПодчиненныхОбъектов
							И Движение.Количество() > 0 Тогда
							
							ТипРегистра = Тип(Движение);
							
							МассивКолонок = мСоответствиеКолонокДвижений.Получить(ТипРегистра);
	
							Если МассивКолонок = Неопределено Тогда
								
								ТаблицаДвижений = Движение.Выгрузить();
								РегистрБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(Движение.Метаданные());
								МассивКолонок = ПолучитьМассивКолонокДвижения(ТаблицаДвижений, РегистрБухгалтерии);
								мСоответствиеКолонокДвижений.Вставить(ТипРегистра, МассивКолонок);
								
							КонецЕсли;
							
							ВыгрузитьПодчиненныеЗначенияНабора(Движение, МассивКолонок, ОбъектыВыгруженныеСОшибками, массивДанных);
							
							ОписательЭлемента = СоздатьОписательЭлементаПоНаборуЗаписей(Движение, МассивИмен);
							МассивДанных.Добавить(ОписательЭлемента);
						КонецЕсли;
						
						//ЗаписатьXML(ЗаписьXML, Движение);
						
					КонецЦикла;
					
				КонецЕсли;
				
			Исключение
				
				СтрокаОписанияОшибки = ОписаниеОшибки();
				//не смогли записать в XML
				// возможно проблема с недопустимыми символами в XML
				//Если ТолькоПроверкаНедопустимыхСимволов Тогда
				//	
				//	Если ОбъектыВыгруженныеСОшибками.Получить(Ссылка) = Неопределено Тогда
				//		ОбъектыВыгруженныеСОшибками.Вставить(Ссылка, СтрокаОписанияОшибки);
				//	КонецЕсли;
				//	
				//Иначе
				
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ошибка при выгрузке объекта: %1. Тип: %2");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Строка(Ссылка)); 
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Строка(ТипЗнч(Ссылка))); 
					ТекстСообщения = ТекстСообщения + "
					|" + СтрокаОписанияОшибки;
					
					Сообщить(ТекстСообщения);
					
					ВызватьИсключение ТекстСообщения;
					
				//КонецЕсли;
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если ЗапросВерхнегоУровня Тогда
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			Если ОбработаноОбъектов % 100 = 0 Тогда
				//ОкноИсполненияОбработано = ОкноИсполненияОбработано + ОбработаноОбъектов;
				ОбработаноОбъектов = 0;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
//	ОкноИсполненияОбработано = ОкноИсполненияОбработано + ОбработаноОбъектов;
	
КонецПроцедуры

Функция СсылкаВыгружена(Ссылка)
	
	Возврат мВыгруженныеОбъекты.Найти(Ссылка, ВернутьЗначениеСоответствия("Ссылка")) <> Неопределено;
	
КонецФункции

Процедура ДобавитьСсылкуКВыгруженным(Ссылка)
	
	СтрокаДобавления = мВыгруженныеОбъекты.Добавить();
	СтрокаДобавления[ВернутьЗначениеСоответствия("Ссылка")] = Ссылка;
		
КонецПроцедуры

// Функция определяет общее количество произведенных записей констант + объектного типа + наборов записей
//
// Возврат - общее количество произведенных записей
Функция ВсегоОбработанныхЗаписей()
	Возврат 0;
	Возврат мВыгруженныеОбъекты.Количество() + ОбработанныхКонстант + ОбработанныхНаборовЗаписей;
	
КонецФункции

// Процедура анализирует необходимость записи объекта "по ссылке" и осуществляет запись
//
// Параметры
//   АнализируемоеЗначение - анализируемое значение
//   ЗаписьXML - объект, через которых происходит запись объектов ИБ
//
Процедура ЗаписатьЗначениеПриНеобходимости(АнализируемоеЗначение, ОбъектыВыгруженныеСОшибками, массивДанных)
	
	Если НЕ ЗначениеЗаполнено(АнализируемоеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектМД = СсылочныеТипы.Получить(ТипЗнч(АнализируемоеЗначение));
	
	Если ОбъектМД = Неопределено Тогда
		Возврат; // это не ссылка
	КонецЕсли;
			
	Если СсылкаВыгружена(АнализируемоеЗначение) Тогда
		Возврат; // объект уже был выгружен
	КонецЕсли;
	
	КлассМДИерархический = КлассМДИерархический(ОбъектМД); // нужно для иерархических метаданных и подгрузки родителей
	Если НЕ КлассМДИерархический Тогда
		// Проверка того, что данный тип входит в список выгружаемых дополнительно
		СтрокаТаблицы = СоставПолнойВыгрузки.Найти(ОбъектМД, "ОбъектМД");
		Если СтрокаТаблицы <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
			
	СтрокаТаблицы = СоставВспомогательнойВыгрузки.Найти(ОбъектМД, "ОбъектМД");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		ДопЗапрос = Новый Запрос("ВЫБРАТЬ * ИЗ " + СтрокаТаблицы.СтрокаДерева.ЭлементОписания.ДляЗапроса + ОбъектМД.Имя +
			" КАК ТаблицаОбъекта_" + " ГДЕ Ссылка = &Ссылка");
		ДопЗапрос.УстановитьПараметр("Ссылка", АнализируемоеЗначение);
		РезультатЗапроса = ДопЗапрос.Выполнить();
		ЗапросИЗапись(РезультатЗапроса, , ОбъектыВыгруженныеСОшибками, массивДанных);
		
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьМассивКолонокДвижения(ТаблицаДвижений, РегистрБухгалтерии = Ложь)
	
	МассивКолонок = Новый Массив();
	Для Каждого КолонкаТаблицы Из ТаблицаДвижений.Колонки Цикл
		
		Если КолонкаТаблицы.Имя = "МоментВремени"
			ИЛИ Найти(КолонкаТаблицы.Имя, "ВидСубконтоДт") = 1
			ИЛИ Найти(КолонкаТаблицы.Имя, "ВидСубконтоКт") = 1 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если Найти(КолонкаТаблицы.Имя, "СубконтоДт") = 1 И РегистрБухгалтерии Тогда
			
			Если МассивКолонок.Найти("СубконтоДт") = Неопределено Тогда
				МассивКолонок.Добавить("СубконтоДт");
			Конецесли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если Найти(КолонкаТаблицы.Имя, "СубконтоКт") = 1 И РегистрБухгалтерии Тогда
			
			Если МассивКолонок.Найти("СубконтоКт") = Неопределено Тогда
				МассивКолонок.Добавить("СубконтоКт");
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		МассивКолонок.Добавить(КолонкаТаблицы.Имя);
		
	КонецЦикла;
	
	Возврат МассивКолонок;
	
КонецФункции

Процедура ВыгрузитьПодчиненныеЗначенияНабора(Движение, МассивКолонок, ОбъектыВыгруженныеСОшибками, массивДанных)
		
	Для Каждого ЗаписьИзНабора Из Движение Цикл
								
		Для Каждого Колонка Из МассивКолонок Цикл
			
			Если Колонка = "СубконтоДт"
				ИЛИ Колонка = "СубконтоКт" Тогда
				
				Значение = ЗаписьИзНабора[Колонка];
				Для Каждого КлючИЗначение Из Значение Цикл
					
					Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
						ЗаписатьЗначениеПриНеобходимости(КлючИЗначение.Значение, ОбъектыВыгруженныеСОшибками, массивДанных);
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
			
				СохраненноеЗначение = ЗаписьИзНабора[Колонка];
				ЗаписатьЗначениеПриНеобходимости(СохраненноеЗначение, ОбъектыВыгруженныеСОшибками, массивДанных);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура записывает наборы записей регистра (накопления, бухгалтерии...)
//
// Параметры
//   ЗаписьXML - объект, через которых происходит запись объектов ИБ
//   СтрокаДереваМетаданных - строка дерева метаданных, соответствующая регистру
//
Процедура ЗаписьРегистра(СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, РегистрБухгалтерии = Ложь, массивДанных)
	
	ПодзаголовокОкнаИсполнения = СтрокаДереваМетаданных.ОбъектМД.ПолноеИмя();
	ОкноИсполненияОбщееКоличество = 1;
	//ОкноИсполненияОбработано = 0;
	
	МенеджерНабораЗаписей = СтрокаДереваМетаданных.ЭлементОписания.Менеджер[СтрокаДереваМетаданных.ОбъектМД.Имя];
	
	ИмяТаблицыДляЗапроса = СтрокаДереваМетаданных.ЭлементОписания.ДляЗапроса;
		
	ЗаписьЧерезНаборЗаписей(МенеджерНабораЗаписей, ИмяТаблицыДляЗапроса, 
		СтрокаДереваМетаданных.ОбъектМД.Имя, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, РегистрБухгалтерии, массивДанных);
	
КонецПроцедуры

// Процедура записывает данные, доступ к которым осуществляется через набор записей
//
// Параметры
//   ЗаписьXML - объект, через которых происходит запись объектов ИБ
//   СтрокаДереваМетаданных - строка дерева метаданных, соответствующая регистру
//
Процедура ЗаписьЧерезНаборЗаписей(МенеджерНабораЗаписей, ДляЗапроса, ИмяОбъекта, 
	СтрокаДереваМетаданных = Неопределено, ОбъектыВыгруженныеСОшибками, РегистрБухгалтерии = Ложь, массивДанных)
	
	// получить состав колонок записи регистра и проверить наличие хотя бы одной записи
	Если ДляЗапроса = "РегистрБухгалтерии." Тогда
		ИмяТаблицыДляЗапроса = ДляЗапроса + ИмяОбъекта + ".ДвиженияССубконто";
	Иначе
		ИмяТаблицыДляЗапроса = ДляЗапроса + ИмяОбъекта;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 * ИЗ " + ИмяТаблицыДляЗапроса + " КАК ТаблицаОбъекта_" + ИмяОбъекта);
	РезультатЗапросаПоСоставу = Запрос.Выполнить();
	Если РезультатЗапросаПоСоставу.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений = РезультатЗапросаПоСоставу.Выгрузить();
	МассивКолонок = ПолучитьМассивКолонокДвижения(ТаблицаДвижений, РегистрБухгалтерии);
	
	// выгрузка регистров осуществляется через его набор записей
	НаборЗаписей = МенеджерНабораЗаписей.СоздатьНаборЗаписей();
	
	СтрокаПолейОтбора = ПолучитьСтрокуПолейОтбораРегистра(МенеджерНабораЗаписей);
	
	СКД = ПодготовитьКомпоновщикДляВыгрузки(СтрокаДереваМетаданных, СтрокаПолейОтбора); 
	//ПостроительОтчета.Выполнить();
	РезультатЗапросаПоЗначениямОтбора = ПолучитьРезультатЗапросаСКД(СКД);
	ВыборкаИзРезультата = РезультатЗапросаПоЗначениямОтбора.Выбрать();
	
	ОкноИсполненияОбщееКоличество = ВыборкаИзРезультата.Количество();
	//ОкноИсполненияОбработано = 0;
	//ОкноИсполнения.ОбновитьВерхнююГраницу();

	КоличествоПолейОтбора = НаборЗаписей.Отбор.Количество();
	
	// читаем наборы записей с различным составом отбора и записываем их
	Пока ВыборкаИзРезультата.Следующий() Цикл
		
		// Пересоздание набора, чтоб чтоб разные экземпляры объекта в МассивДанных попали
		НаборЗаписей = МенеджерНабораЗаписей.СоздатьНаборЗаписей();
		Отбор = НаборЗаписей.Отбор;
		
		// Отбор устанавливаем для регистров, у которых есть хотя бы один отбор (измерение)
		Если КоличествоПолейОтбора <> 0 Тогда
			
			Для Каждого Колонка Из РезультатЗапросаПоЗначениямОтбора.Колонки Цикл 
				Отбор[Колонка.Имя].Значение = ВыборкаИзРезультата[Колонка.Имя];
				Отбор[Колонка.Имя].ВидСравнения = ВидСравнения.Равно;
				Отбор[Колонка.Имя].Использование = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
		НаборЗаписей.Прочитать();
		
		Если мНаличиеВыгрузкиПодчиненныхОбъектов Тогда
		
			// проверяем все записанные в наборе значения на необходимость записи "по ссылке"
			ВыгрузитьПодчиненныеЗначенияНабора(НаборЗаписей, МассивКолонок, ОбъектыВыгруженныеСОшибками, массивДанных);
									
		КонецЕсли;
		
		ВсегоОбработаноОбъектов = ВсегоОбработанныхЗаписей();
		Попытка
					
			//ВыполнитьВспомогательныеДействияДляЗаписиXML(ВсегоОбработаноОбъектов, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов);
			
			//ЗаписатьXML(ЗаписьXML, НаборЗаписей);
			
			ОписательЭлемента = СоздатьОписательЭлементаПоНаборуЗаписей(НаборЗаписей, МассивИмен);
			МассивДанных.Добавить(ОписательЭлемента);
				//Мд = НаборЗаписей.Метаданные();
				////Для каждого ЗаписьНабора Из НаборЗаписей Цикл
				//	ОписательЭлемента = СоздатьОписательЭлемента();
				//	ОписательЭлемента.Реквизиты = НаборЗаписей; //ЗаписьНабора;
				//	ОписательЭлемента.Ссылка = Неопределено;
				//	ОписательЭлемента.Метаданное = Мд;
				//	МассивДанных.Добавить(ОписательЭлемента);
				////КонецЦикла;
			
		Исключение
			
			СтрокаОписанияОшибки = ОписаниеОшибки();
			//не смогли записать в XML
			// возможно проблема с недопустимыми символами в XML
			//Если ТолькоПроверкаНедопустимыхСимволов Тогда
			//	
			//	НовыйНабор = МенеджерНабораЗаписей.СоздатьНаборЗаписей();
			//	
			//	Для Каждого СтрокаОтбора Из НаборЗаписей.Отбор Цикл
			//		
			//		СтрокаОтбораФормы = НовыйНабор.Отбор.Найти(СтрокаОтбора.Имя);
			//		
			//		Если СтрокаОтбораФормы = Неопределено Тогда
			//			Продолжить;
			//		КонецЕсли;
			//		
			//		СтрокаОтбораФормы.Использование = СтрокаОтбора.Использование;
			//		СтрокаОтбораФормы.ВидСравнения = СтрокаОтбора.ВидСравнения;
			//		СтрокаОтбораФормы.Значение = СтрокаОтбора.Значение;
			//		
			//	КонецЦикла;
			//	
			//	ОбъектыВыгруженныеСОшибками.Вставить(НовыйНабор, СтрокаОписанияОшибки);
			//									
			//Иначе
			
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ошибка при выгрузке набора записей регистра: %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1","" + ДляЗапроса + ИмяОбъекта); 
			ТекстСообщения = ТекстСообщения + "
			|" + СтрокаОписанияОшибки;
			
			Сообщить(ТекстСообщения);
			
			ВызватьИсключение ТекстСообщения;
			
			
				
			//КонецЕсли;
			
		КонецПопытки;
		
		ОбработанныхНаборовЗаписей = ОбработанныхНаборовЗаписей + 1;
		//ОкноИсполненияОбработано = ОкноИсполненияОбработано + 1;
		
		ПоказатьПользователюИнформациюОСостоянииВыгрузки(ВсегоОбработаноОбъектов, ОбъектыВыгруженныеСОшибками);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоказатьПользователюИнформациюОСостоянииВыгрузки(ВсегоОбработаноОбъектов, ОбъектыВыгруженныеСОшибками)
	
	#Если Клиент Тогда
		
		Если ВсегоОбработаноОбъектов %100 = 0 Тогда
			
			Если ОбъектыВыгруженныеСОшибками <> Неопределено
				И ОбъектыВыгруженныеСОшибками.Количество() > 0 Тогда
				
				Состояние("Выгруженных объектов - " + ВсегоОбработаноОбъектов + ", ошибок при выгрузке - " + ОбъектыВыгруженныеСОшибками.Количество());
				
			Иначе
				Состояние("Выгруженных объектов - " + ВсегоОбработаноОбъектов);
			КонецЕсли;
			
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

Функция ПолучитьРезультатЗапросаСКД(СКД)
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	Компоновщик.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
	СистемныеПоля = Новый ПолеКомпоновкиДанных("СистемныеПоля");
	ПараметрыДанных = Новый ПолеКомпоновкиДанных("ПараметрыДанных");
	Для Каждого ДоступноеПоле Из Компоновщик.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		Если ДоступноеПоле.Поле = СистемныеПоля Или ДоступноеПоле.Поле = ПараметрыДанных Тогда
			Продолжить;
		КонецЕсли;
		ПолеНабора = СКД.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабора.Поле = Строка(ДоступноеПоле.Поле);
		ПолеНабора.ПутьКДанным = Строка(ДоступноеПоле.Поле);
		Если ДоступноеПоле.Папка Тогда
			ВыбранноеПолеГруппа = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ВыбранноеПолеГруппа.Заголовок = ДоступноеПоле.Заголовок;
			Для Каждого ВложенныйЭлемент Из ДоступноеПоле.Элементы Цикл
				ПолеНабора = СКД.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
				ПолеНабора.Поле = Строка(ВложенныйЭлемент.Поле);
				ПолеНабора.ПутьКДанным = Строка(ВложенныйЭлемент.Поле);
				ВыбранноеПоле = ВыбранноеПолеГруппа.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = ВложенныйЭлемент.Поле;
			КонецЦикла;
		Иначе
			ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ДоступноеПоле.Поле;
		КонецЕсли;
		
	КонецЦикла;
	
	ПолеГруппировки = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	
	//#Если Клиент Тогда
	//	
	//НастройкиКомпоновщикаXDTO = СериализаторXDTO.ЗаписатьXDTO(Компоновщик.Настройки);
	//СКДXDTO = СериализаторXDTO.ЗаписатьXDTO(СКД);
	//СКДXDTO.defaultSettings = НастройкиКомпоновщикаXDTO;
	//СКД = СериализаторXDTO.ПрочитатьXDTO(СКДXDTO);
	//	
	//КонструкторСКД = Новый КонструкторСхемыКомпоновкиДанных(СКД);
	//КонструкторСКД.Редактировать(ПолучитьФорму("Форма"));
	//#КонецЕсли
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Компоновщик.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	Запрос = Новый Запрос(МакетКомпоновки.НаборыДанных.ОсновнойЗапрос.Запрос);
	ПараметрыЗапроса = Запрос.НайтиПараметры();
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		ПараметрМакетаСКД = МакетКомпоновки.ЗначенияПараметров.Найти(Параметр.Имя);
		Запрос.УстановитьПараметр(Параметр.Имя, ПараметрМакетаСКД.Значение);
	КонецЦикла;
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ПолучитьСтрокуПолейОтбораРегистра(МенеджерНабораЗаписей) 
		
	НаборЗаписей = МенеджерНабораЗаписей.СоздатьНаборЗаписей();
	
	Отбор = НаборЗаписей.Отбор;
	
	СтрокаПолейОтбора = "";
	Для Каждого ЭлементОтбора Из Отбор Цикл 
		Если НЕ ПустаяСтрока(СтрокаПолейОтбора) Тогда 
			СтрокаПолейОтбора = СтрокаПолейОтбора + ",";
		КонецЕсли;
		СтрокаПолейОтбора = СтрокаПолейОтбора + ЭлементОтбора.Имя;
	КонецЦикла;
	Возврат СтрокаПолейОтбора;
КонецФункции

Функция СформироватьОтчетПоОтобраннымДанным(СтрокаДереваМетаданных) Экспорт
	
	СКД = ПодготовитьКомпоновщикДляВыгрузки(СтрокаДереваМетаданных);
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	Компоновщик.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
	СистемныеПоля = Новый ПолеКомпоновкиДанных("СистемныеПоля");
	ПараметрыДанных = Новый ПолеКомпоновкиДанных("ПараметрыДанных");
	Для Каждого ДоступноеПоле Из Компоновщик.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		Если ДоступноеПоле.Поле = СистемныеПоля Или ДоступноеПоле.Поле = ПараметрыДанных Или ДоступноеПоле.Папка Тогда
			Продолжить;
		КонецЕсли;
		ПолеНабора = СКД.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабора.Поле = Строка(ДоступноеПоле.Поле);
		ПолеНабора.ПутьКДанным = Строка(ДоступноеПоле.Поле);
		
		ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле = ДоступноеПоле.Поле;
	КонецЦикла;
	
	ПолеГруппировки = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Компоновщик.ПолучитьНастройки());
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
	ТабличныйДокумент.ОтображатьСетку = Ложь;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ВыборкаИзРезультатаЗапросаВСтруктуру(РезультатЗапроса, СтрокаВыборки)
	
	РезультирующаяСтруктура = Новый Структура;
	
	Если РезультатЗапроса = Неопределено Или СтрокаВыборки = Неопределено Тогда
		Возврат РезультирующаяСтруктура;
	КонецЕсли;
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		РезультирующаяСтруктура.Вставить(Колонка.Имя, СтрокаВыборки[Колонка.Имя]);
	КонецЦикла;
	
	Возврат РезультирующаяСтруктура;
	
КонецФункции

//Заполнение соответствий в английском языке.
Процедура ЗаполнитьСоответствие()
	АнглийскоеСоответствие = Новый Соответствие;
	АнглийскоеСоответствие.Вставить("Справочник",				"Catalog");
	АнглийскоеСоответствие.Вставить("Документ",					"Document");
	АнглийскоеСоответствие.Вставить("БизнесПроцесс",			"BusinessProcess");
	АнглийскоеСоответствие.Вставить("Задача",					"Task");
	АнглийскоеСоответствие.Вставить("ПланВидовРасчета",			"ChartOfCalculationTypes");
	АнглийскоеСоответствие.Вставить("ПланВидовХарактеристик",	"ChartOfCharacteristicTypes");
	АнглийскоеСоответствие.Вставить("ПланОбмена",				"ExchangePlan");
	АнглийскоеСоответствие.Вставить("ПланСчетов",				"ChartOfAccounts");
	АнглийскоеСоответствие.Вставить("РегистрСведений",			"InformationRegister");
	АнглийскоеСоответствие.Вставить("РегистрНакопления",		"AccumulationRegister");
	АнглийскоеСоответствие.Вставить("РегистрБухгалтерии",		"AccountingRegister");
	АнглийскоеСоответствие.Вставить("Перечисление",				"Enum");
	АнглийскоеСоответствие.Вставить("Наименование",				"Description");
	АнглийскоеСоответствие.Вставить("Код",						"Code");
	АнглийскоеСоответствие.Вставить("Родитель",					"Parent");
	АнглийскоеСоответствие.Вставить("ЭтоГруппа",				"IsFolder");
	АнглийскоеСоответствие.Вставить("ПометкаУдаления",			"DeletionMark");
	АнглийскоеСоответствие.Вставить("Ссылка",					"Ref");
	АнглийскоеСоответствие.Вставить("Предопределенный",			"Predefined");
	АнглийскоеСоответствие.Вставить("ИмяПредопределенныхДанных","PredefinedDataName");
	АнглийскоеСоответствие.Вставить("Владелец",					"Owner");
	АнглийскоеСоответствие.Вставить("Дата",						"Date");
	АнглийскоеСоответствие.Вставить("Проведен",					"Posted");
	АнглийскоеСоответствие.Вставить("Номер",					"Number");
	АнглийскоеСоответствие.Вставить("Стартован",				"Started");
	АнглийскоеСоответствие.Вставить("Завершен",					"Completed");
	АнглийскоеСоответствие.Вставить("ВедущаяЗадача",			"HeadTask");
	АнглийскоеСоответствие.Вставить("ТочкаМаршрута",			"RoutePoint");
	АнглийскоеСоответствие.Вставить("Выполнена",				"Executed");
	АнглийскоеСоответствие.Вставить("Период",					"Period");
	АнглийскоеСоответствие.Вставить("Регистратор",				"Recorder");
	АнглийскоеСоответствие.Вставить("Активность",				"Active");
	АнглийскоеСоответствие.Вставить("НомерСтроки",				"LineNumber");
	АнглийскоеСоответствие.Вставить("НомерОтправленного",		"SentNo");
	АнглийскоеСоответствие.Вставить("НомерПринятого",			"ReceivedNo");
	АнглийскоеСоответствие.Вставить("ПользовательИБ",			"InfoBaseUser");
	АнглийскоеСоответствие.Вставить("РегистрСведенийНаборЗаписей","InformationRegisterRecordSet");
	
КонецПроцедуры

//Функция возвращает полученное значение из списка соответствия в зависимости от языка
Функция ВернутьЗначениеСоответствия(ИскомоеЗначение)
	ЗначениеСоответствия = ИскомоеЗначение;
	Если ВариантВстроенногоЯзыкаАнглийский Тогда
		ЭлементСоответствия = АнглийскоеСоответствие.Получить(ИскомоеЗначение);
		Если НЕ ЭлементСоответствия = Неопределено Тогда
			ЗначениеСоответствия = ЭлементСоответствия
		КонецЕсли; 
	КонецЕсли; 
	Возврат ЗначениеСоответствия;
КонецФункции

Процедура СоздатьСтруктурумТЗКэшОбъектов()
	мТЗКэшОбъектов = Новый ТаблицаЗначений();
	мТЗКэшОбъектов.Колонки.Добавить("МенеджерОбъекта");
	мТЗКэшОбъектов.Колонки.Добавить("МетаданныеИмя");
	мТЗКэшОбъектов.Колонки.Добавить("Наименование");
	мТЗКэшОбъектов.Колонки.Добавить("Код");
	мТЗКэшОбъектов.Колонки.Добавить("Ссылка");
	
	мТЗКэшОбъектов.Индексы.Добавить("МенеджерОбъекта");
	мТЗКэшОбъектов.Индексы.Добавить("МетаданныеИмя");
КонецПроцедуры //Получить

Функция ПолучитьЗначениеИзКэша(МенеджерОбъекта,МетаданныеИмя,ПараметрыПоиска)
	РезультатФункции = Новый Структура();
	пЗначениеИзКэша = Неопределено;
	ЭтоЗначениеИзКэша = Ложь;
	ПараметрыОтбора=Новый Структура();
	ПараметрыОтбора.Вставить("МенеджерОбъекта",МенеджерОбъекта);
	ПараметрыОтбора.Вставить("МетаданныеИмя",МетаданныеИмя);
	ПараметрыПоискаСтрока = "";
	Для каждого СтрокаПараметрыПоиска из ПараметрыПоиска цикл
		ПараметрыОтбора.Вставить(СтрокаПараметрыПоиска.Ключ,СтрокаПараметрыПоиска.Значение);
		ПараметрыПоискаСтрока = ПараметрыПоискаСтрока + "" +СтрокаПараметрыПоиска.Ключ + " ["+СтрокаПараметрыПоиска.Значение+"]";
	Конеццикла;
	НайденныеСтроки = мТЗКэшОбъектов.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество()=1 тогда
		пЗначениеИзКэша = НайденныеСтроки[0].Ссылка;
		ЭтоЗначениеИзКэша = Истина;
	ИначеЕсли НайденныеСтроки.Количество()>1 Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ошибка. Найдено более 1 значения в кэше МетаданныеИмя [%1] по указанным параметрам поиска %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",МетаданныеИмя);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПараметрыПоискаСтрока);
		Сообщить(ТекстСообщения);
	Иначе
		//Сообщить("Не найден ");
	Конецесли;
	РезультатФункции.Вставить("ЭтоЗначениеИзКэша",ЭтоЗначениеИзКэша);
	РезультатФункции.Вставить("ЗначениеИзКэша",пЗначениеИзКэша);
	Возврат РезультатФункции;
КонецФункции //ПолучитьЗначениеИзКэша(ДопПараметры)

Процедура ДобавитьЗначениеВКэш(СсылкаНаОбъект,МенеджерОбъекта,МетаданныеИмя,ПараметрыПоиска)
	СтрокамТЗКэшОбъектов = мТЗКэшОбъектов.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокамТЗКэшОбъектов,ПараметрыПоиска);
	СтрокамТЗКэшОбъектов.Ссылка = СсылкаНаОбъект;
	СтрокамТЗКэшОбъектов.МенеджерОбъекта = МенеджерОбъекта;
	СтрокамТЗКэшОбъектов.МетаданныеИмя = МетаданныеИмя;
КонецПроцедуры //ДобавитьЗначениеВКэш(Справочники.Модели.ПустаяСсылка(),"Модели",ПараметрыПоиска)

#КонецОбласти

#Область ПроцедурыИФункцииУтвержденияBDD

Функция Что(Знач ПроверяемоеЗначение, Знач Сообщение = "") Экспорт
	ЭтотОбъект.ПроверяемоеЗначение = ПроверяемоеЗначение;
	ЭтотОбъект.ДопСообщениеОшибки = Сообщение;
	ЭтотОбъект.ФлагОтрицания = Ложь;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция Не_() Экспорт
	ЭтотОбъект.ФлагОтрицания = Истина;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ЭтоНе() Экспорт
	Возврат Не_();
КонецФункции

Функция Метод(Знач ИмяМетода, Знач ПараметрыМетода = Неопределено) Экспорт
	ЭтотОбъект.ИмяМетода = ИмяМетода;
	ЭтотОбъект.ПараметрыМетода = ПараметрыМетода;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ЭтоИстина() Экспорт
	Если Не ЛогическоеВыражениеВерно(ПроверяемоеЗначение = Истина) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("является истиной");
		ТекстСообщения = СформироватьСообщениеОбОшибке(Формат(ПроверяемоеЗначение, "БЛ=Ложь; БИ=Истина"),ТекстСообщения);
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ЕстьИстина() Экспорт
	Возврат ЭтоИстина();
КонецФункции

Функция ЭтоЛожь() Экспорт
	Если Не ЛогическоеВыражениеВерно(ПроверяемоеЗначение = Ложь) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("является ложью");
		ТекстСообщения = СформироватьСообщениеОбОшибке(Формат(ПроверяемоеЗначение, "БЛ=Ложь; БИ=Истина"), ТекстСообщения);
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ЕстьЛожь() Экспорт
	Возврат ЭтоЛожь();
КонецФункции

Функция Равно(Знач ОжидаемоеЗначение) Экспорт
	Если Не ЛогическоеВыражениеВерно(ПроверяемоеЗначение = ОжидаемоеЗначение) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("равно");
		ТекстСообщения = СформироватьСообщениеОбОшибке(ПроверяемоеЗначение, ТекстСообщения + " (" + ОжидаемоеЗначение + ").");
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция Больше(Знач МеньшееЗначение) Экспорт
	Если Не ЛогическоеВыражениеВерно(ПроверяемоеЗначение > МеньшееЗначение) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("больше");
		ТекстСообщения = СформироватьСообщениеОбОшибке(ПроверяемоеЗначение, ТекстСообщения + " (" + МеньшееЗначение + ").");
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция БольшеИлиРавно(Знач МеньшееИлиРавноеЗначение) Экспорт
	Если Не ЛогическоеВыражениеВерно(ПроверяемоеЗначение >= МеньшееИлиРавноеЗначение) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("больше или равно");
		ТекстСообщения = СформироватьСообщениеОбОшибке(ПроверяемоеЗначение, ТекстСообщения + " (" + МеньшееИлиРавноеЗначение + ").");
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция Минимум(Знач МинимальноеЗначение) Экспорт
	Возврат БольшеИлиРавно(МинимальноеЗначение);
КонецФункции

Функция МеньшеИлиРавно(Знач БольшееИлиРавноеЗначение) Экспорт
	Если Не ЛогическоеВыражениеВерно(ПроверяемоеЗначение <= БольшееИлиРавноеЗначение) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("меньше или равно");
		ТекстСообщения = СформироватьСообщениеОбОшибке(ПроверяемоеЗначение, ТекстСообщения + " (" + БольшееИлиРавноеЗначение + ").");
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция Максимум(Знач МаксимальноеЗначение) Экспорт
	Возврат МеньшеИлиРавно(МаксимальноеЗначение);
КонецФункции

Функция Меньше(Знач БольшееЗначение) Экспорт
	Если Не ЛогическоеВыражениеВерно(ПроверяемоеЗначение < БольшееЗначение) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("меньше");
		ТекстСообщения = СформироватьСообщениеОбОшибке(ПроверяемоеЗначение, ТекстСообщения + " (" + БольшееЗначение + ").");
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция Заполнено() Экспорт
	Если Не ЛогическоеВыражениеВерно(ЗначениеЗаполнено(ПроверяемоеЗначение)) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("является заполненным");
		ТекстСообщения = СформироватьСообщениеОбОшибке(ПроверяемоеЗначение, ТекстСообщения);
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция Существует() Экспорт
	Если Не ЛогическоеВыражениеВерно(ПроверяемоеЗначение <> Неопределено И ПроверяемоеЗначение <> Null) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("существует");
		ТекстСообщения = СформироватьСообщениеОбОшибке(ПроверяемоеЗначение, ТекстСообщения);
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ЭтоНеопределено() Экспорт
	Если Не ЛогическоеВыражениеВерно(ПроверяемоеЗначение = Неопределено) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("является неопределено");
		ТекстСообщения = СформироватьСообщениеОбОшибке(ПроверяемоеЗначение, ТекстСообщения);
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ЕстьНеопределено() Экспорт
	Возврат ЭтоНеопределено();
КонецФункции

Функция ЭтоNull() Экспорт
	Если Не ЛогическоеВыражениеВерно(ПроверяемоеЗначение = Null) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("является NULL");
		ТекстСообщения = СформироватьСообщениеОбОшибке(ПроверяемоеЗначение, ТекстСообщения);
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ЕстьNull() Экспорт
	Возврат ЭтоNull();
КонецФункции

Функция ИмеетТип(Знач ТипИлиИмяТипа) Экспорт
	ОжидаемыйТип = ?(ТипЗнч(ТипИлиИмяТипа) = Тип("Строка"), Тип(ТипИлиИмяТипа), ТипИлиИмяТипа);
	ТипПроверяемогоЗначения = ТипЗнч(ПроверяемоеЗначение);
	Если Не ЛогическоеВыражениеВерно(ТипПроверяемогоЗначения = ОжидаемыйТип) Тогда
		//эти строки нужны для автообработки - начало
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("тип");
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("имеет тип");
		//эти строки нужны для автообработки - окончание
		ТекстСообщения = СформироватьСообщениеОбОшибке(ПолучитьТекстСообщенияПользователю("тип") + " - " + ТипПроверяемогоЗначения, ПолучитьТекстСообщенияПользователю("имеет тип") + " (" + ОжидаемыйТип + ").");
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция Между(Знач НачальноеЗначение, Знач КонечноеЗначение) Экспорт
	Если Не ЛогическоеВыражениеВерно(ПроверяемоеЗначение >= НачальноеЗначение И ПроверяемоеЗначение <= КонечноеЗначение) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("между");
		ТекстСообщения = СформироватьСообщениеОбОшибке(ПроверяемоеЗначение, ТекстСообщения + " (" + НачальноеЗначение + ") и (" + КонечноеЗначение + ").");
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция Содержит(Знач ИскомоеЗначение) Экспорт
	Перем ИскомоеЗначениеНайдено;
	
	ТипПроверяемоегоЗначения = ТипЗнч(ПроверяемоеЗначение);
	Если ТипПроверяемоегоЗначения = Тип("Строка") Тогда
		ИскомоеЗначениеНайдено = Найти(ПроверяемоеЗначение, ИскомоеЗначение) > 0;
	ИначеЕсли ТипПроверяемоегоЗначения = Тип("Массив") Или ТипПроверяемоегоЗначения = Тип("ФиксированныйМассив") Тогда
		ИскомоеЗначениеНайдено = ПроверяемоеЗначение.Найти(ИскомоеЗначение) <> Неопределено;
	ИначеЕсли ТипПроверяемоегоЗначения = Тип("Структура") Или ТипПроверяемоегоЗначения = Тип("ФиксированнаяСтруктура")
			Или ТипПроверяемоегоЗначения = Тип("Соответствие") Или ТипПроверяемоегоЗначения = Тип("ФиксированноеСоответствие") Тогда
		Для каждого КлючЗначение Из ПроверяемоеЗначение Цикл
			ИскомоеЗначениеНайдено = КлючЗначение.Значение = ИскомоеЗначение;
			Если ИскомоеЗначениеНайдено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипПроверяемоегоЗначения = Тип("СписокЗначений") Тогда
		ИскомоеЗначениеНайдено = ПроверяемоеЗначение.НайтиПоЗначению(ИскомоеЗначение) <> Неопределено;
	КонецЕсли;
	
	Если ИскомоеЗначениеНайдено = Неопределено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Утверждение <Содержит> не умеет работать с типом <%1>.%2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТипПроверяемоегоЗначения);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ФорматДСО(ДопСообщениеОшибки));
		ТекстСообщения = ТекстСообщения;
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если Не ЛогическоеВыражениеВерно(ИскомоеЗначениеНайдено) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("содержит");
		ТекстСообщения = СформироватьСообщениеОбОшибке(ПроверяемоеЗначение, ТекстСообщения + " (" + ИскомоеЗначение + ").");
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ИмеетДлину(Знач ОжидаемаяДлина) Экспорт
	Перем ФактическаяДлина;
	
	ТипПроверяемоегоЗначения = ТипЗнч(ПроверяемоеЗначение);
	Если ТипПроверяемоегоЗначения = Тип("Строка") Тогда
		ФактическаяДлина = СтрДлина(ПроверяемоеЗначение);
	ИначеЕсли ТипПроверяемоегоЗначения = Тип("Массив") Или ТипПроверяемоегоЗначения = Тип("ФиксированныйМассив")
			Или ТипПроверяемоегоЗначения = Тип("Структура") Или ТипПроверяемоегоЗначения = Тип("ФиксированнаяСтруктура")
			Или ТипПроверяемоегоЗначения = Тип("Соответствие") Или ТипПроверяемоегоЗначения = Тип("ФиксированноеСоответствие")
			Или ТипПроверяемоегоЗначения = Тип("СписокЗначений") Тогда
		ФактическаяДлина = ПроверяемоеЗначение.Количество();
	КонецЕсли;
	
	Если ФактическаяДлина = Неопределено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Утверждение <ИмеетДлину> не умеет работать с типом <%1>.%2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТипПроверяемоегоЗначения);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ФорматДСО(ДопСообщениеОшибки));
		ТекстСообщения = ТекстСообщения;
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если Не ЛогическоеВыражениеВерно(ФактическаяДлина = ОжидаемаяДлина) Тогда
		//эти строки нужны для автообработки - начало
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("с длиной");
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("имеет длину");
		//эти строки нужны для автообработки - окончание
		ТекстСообщения = СформироватьСообщениеОбОшибке("<" +ПроверяемоеЗначение + "> " + ПолучитьТекстСообщенияПользователю("с длиной") + " " + ФактическаяДлина, ПолучитьТекстСообщенияПользователю("имеет длину") + " (" + ОжидаемаяДлина + ").");
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ВыбрасываетИсключение(Знач ФрагментИсключения = "") Экспорт
	Контекст = ПроверяемоеЗначение;
	СтрокаПараметры = "";
	Если ТипЗнч(ПараметрыМетода) = Тип("Массив") Тогда
		Для Сч = 0 По ПараметрыМетода.Количество() - 1 Цикл
			СтрокаПараметры = СтрокаПараметры + ",ПараметрыМетода[" + Сч + "]";
		КонецЦикла;
		СтрокаПараметры = Сред(СтрокаПараметры, 2);
	КонецЕсли;
	СтрокаДляВыполнения = "Контекст." + ИмяМетода + "(" + СтрокаПараметры + ")";
	
	ИсключениеВозникло = Ложь;
	Попытка
		Выполнить(СтрокаДляВыполнения);
	Исключение
		ИсключениеВозникло = Истина;
		ТекстИсключения = ОписаниеОшибки();
	КонецПопытки;
	
	Если Не ЛогическоеВыражениеВерно(ИсключениеВозникло И Найти(ТекстИсключения, ФрагментИсключения) > 0) Тогда
		//служебная строка. не удалять.
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("не"); 
		ТекстСообщения = ТекстСообщения + " ";
		
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("содержащее текст <%1>, а был текст <%2>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ФрагментИсключения); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТекстИсключения); 
		Часть2         = ТекстСообщения;
		
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ожидали, что %1 %2 выбросит исключение %3 %4");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаДляВыполнения); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",?(ФлагОтрицанияДляСообщения, " " + ПолучитьТекстСообщенияПользователю("не") + " ", " ")); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",?(ЗначениеЗаполнено(ФрагментИсключения), Часть2, "")); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ФорматДСО(ДопСообщениеОшибки)); 
		
		ВызватьОшибкуПроверки(ТекстСообщения);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

// { Helpers
Функция ЛогическоеВыражениеВерно(Знач ЛогическоеВыражение)
	Результат = ФлагОтрицания <> ЛогическоеВыражение;
	ФлагОтрицанияДляСообщения = ФлагОтрицания;
	ФлагОтрицания = Ложь;
	
	Возврат Результат;
КонецФункции

Функция СформироватьСообщениеОбОшибке(Знач ПроверяемоеЗначение, Знач Ожидание)
	ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ожидали, что проверяемое значение (%1) %2 %3 %4");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПроверяемоеЗначение); 
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",?(ФлагОтрицанияДляСообщения, " " + ПолучитьТекстСообщенияПользователю("не") + " ", " ")); 
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Ожидание); 
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ФорматДСО(ДопСообщениеОшибки)); 
	Возврат ТекстСообщения;
КонецФункции
// } Helpers

#КонецОбласти

// Служебная строка. Не удалять. #КонецОбласти ПроцедурыИФункции

#Область ИнициализацияПеременных

СтатусыРезультатаТестирования = Новый Структура;
СтатусыРезультатаТестирования.Вставить("ОшибкаПроверки", "Failed");
СтатусыРезультатаТестирования.Вставить("НеизвестнаяОшибка", "Broken");
СтатусыРезультатаТестирования.Вставить("ТестПропущен", "Pending");
СтатусыРезультатаТестирования = Новый ФиксированнаяСтруктура(СтатусыРезультатаТестирования);

РезультатыСравненияТаблиц = Новый Структура;
РезультатыСравненияТаблиц.Вставить("ТаблицыСовпадают", 0);
РезультатыСравненияТаблиц.Вставить("НеСовпадаютЗначенияВЯчейкеТаблицы", 1);
РезультатыСравненияТаблиц.Вставить("РазноеКоличествоСтрок", 2);
РезультатыСравненияТаблиц.Вставить("РазличаютсяКолонки", 3);
РезультатыСравненияТаблиц = Новый ФиксированнаяСтруктура(РезультатыСравненияТаблиц);

ЭтоLinux = Ложь;
СисИнфо = Новый СистемнаяИнформация;
Если СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 
	ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64
	ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.MacOS_x86
	ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда 
	ЭтоLinux = Истина;
КонецЕсли;

ТипыПлагинов = ТипыПлагинов();

РазницаВМилисекундахМеждуЮниксИНачалЭпохи = 62135596800000;

КешСтрокаПробелов = Новый Соответствие;

#КонецОбласти

#Область ИнициализацияПеременныхFeatureReader

ЭтоУФ = Ложь;

ТипЧисло  = Новый ОписаниеТипов("Число");

СоответствиеТаблицПереводов = Новый Соответствие;
СоответствиеТаблицПереводов.Вставить("ru", СоздатьТаблицуКлючевыхСлов_ru());
СоответствиеТаблицПереводов.Вставить("uk", СоздатьТаблицуКлючевыхСлов_uk());
СоответствиеТаблицПереводов.Вставить("en", СоздатьТаблицуКлючевыхСлов_en());
СоответствиеТаблицПереводов.Вставить("ro", СоздатьТаблицуКлючевыхСлов_ro());
СоответствиеТаблицПереводов.Вставить("de", СоздатьТаблицуКлючевыхСлов_de());
СоответствиеТаблицПереводов.Вставить("lv", СоздатьТаблицуКлючевыхСлов_lv());
СоответствиеТаблицПереводов.Вставить("it", СоздатьТаблицуКлючевыхСлов_it());
СоответствиеТаблицПереводов.Вставить("pl", СоздатьТаблицуКлючевыхСлов_pl());
СоответствиеТаблицПереводов.Вставить("vi", СоздатьТаблицуКлючевыхСлов_vi());



ТекущийЯзыкФичаФайла           = "ru";
ПредставлениеВертЧертыВТабДок  = "__&ВертЧерта__";
ПредставлениеАпостроф          = "__&Апостроф__";
ПредставлениеКавычка           = "__&Кавычка__";
ПредставлениеДвойнойСлеш       = "__&ДвойнойСлеш__";
ПредставлениеВертикальнаяЧерта = "__&ВертикальнаяЧерта__";
ПредставлениеТире              = "__&Тире__";
ПредставлениеЭкранированныйСлеш = "__&ЭкранированныйСлеш__";

ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок = Ложь;
СистемнаяИнформация = Новый СистемнаяИнформация;
Если ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения,"8.3.6.1977") Тогда
	Если РежимСовместимостиПозволяетИспользоватьНовыеСтроковыеФункции() Тогда
		ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок = Истина;
	КонецЕсли;	 
КонецЕсли;	 


ТаблицаКешПервыхСлов = Новый ТаблицаЗначений;
ТаблицаКешПервыхСлов.Колонки.Добавить("ПерваяЧастьСтроки");
ТаблицаКешПервыхСлов.Колонки.Добавить("Слово");
ТаблицаКешПервыхСлов.Колонки.Добавить("Позиция");
ТаблицаКешПервыхСлов.Колонки.Добавить("Тип");

ТаблицаКешПервыхСлов.Индексы.Добавить("ПерваяЧастьСтроки");

#КонецОбласти

#Область ИнициализацияПеременныхЗапросыИзБД

#КонецОбласти

#Область ИнициализацияПеременныхСериализаторMXL

ВариантВстроенногоЯзыкаАнглийский = ( Metadata.ScriptVariant = Metadata.ObjectProperties.ScriptVariant.English );

мНаличиеВыгрузкиПодчиненныхОбъектов = Ложь;
мТипРезультатЗапроса = Тип("РезультатЗапроса");
мСоответствиеКолонокДвижений = Новый Соответствие;

ЗаполнитьСоответствие();

#КонецОбласти

#Область ИнициализацияПеременныхУтвержденияBDD

СтатусыРезультатаТестирования = Новый Структура;
СтатусыРезультатаТестирования.Вставить("ОшибкаПроверки", "Failed");
СтатусыРезультатаТестирования.Вставить("НеизвестнаяОшибка", "Broken");
СтатусыРезультатаТестирования.Вставить("ТестПропущен", "Pending");
СтатусыРезультатаТестирования = Новый ФиксированнаяСтруктура(СтатусыРезультатаТестирования);

#КонецОбласти

// Служебная строка. Не удалять. #КонецОбласти ИнициализацияПеременных

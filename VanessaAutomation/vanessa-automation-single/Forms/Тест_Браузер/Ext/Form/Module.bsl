///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Automation
Перем Ванесса;

&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;

&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Automation.
Перем КонтекстСохраняемый Экспорт;

// Делает отключение модуля
&НаКлиенте
Функция ОтключениеМодуля() Экспорт

	Ванесса = Неопределено;
	Контекст = Неопределено;
	КонтекстСохраняемый = Неопределено;

КонецФункции

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;
	
	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯПоказываюПодсказкуEnjoyHintУЭлемента(Парам01,Парам02,ТабПарам)",
		"ЯПоказываюПодсказкуEnjoyHintУЭлемента",
		"И я показываю подсказку ""ТекстПодсказки"" EnjoyHint у элемента ""ИмяЭлемента""
		|		|'shape'|'rect'|
		|		|'timeout'|'5000'|",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯПоказываюПодсказкуEnjoyHintУЭлементаВБраузере(Парам01,Парам02,ТабПарам)",
		"ЯПоказываюПодсказкуEnjoyHintУЭлементаВБраузере",
		"И я показываю подсказку ""ТекстПодсказки"" EnjoyHint у элемента ""ИмяЭлемента"" в браузере
		|		|'shape'|'rect'|
		|		|'timeout'|'5000'|
		|		|'noFreeze'|'false'|",
		"Рисует фигуры в браузере.
		|noFreeze - значение true позволяет избежать лагов анимации, но на время выполнения эффекта будет невозможно выполнение других шагов.
		|Дополнительная информация по EnjoyHint находится тут: https://github.com/xbsoftware/enjoyhint/blob/master/README.md",
		"Прочее.Браузер.Эффекты.Затемнение");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯПоказываюПодсказкуEnjoyHintУНесколькихЭлементовВБраузере(ТекстПодсказки,ТабПарам)",
		"ЯПоказываюПодсказкуEnjoyHintУНесколькихЭлементовВБраузере",
		"И я показываю подсказку ""ТекстПодсказки"" EnjoyHint у нескольких элементов в браузере
		|		|'elem'|'Организация\\#title_div'|
		|		|'elem'|'Организация'|
		|		|'elem'|'ПодразделениеОрганизации'|
		|		|'shape'|'rect'|
		|		|'timeout'|'5000'|
		|		|'noFreeze'|'false'|",
		"Рисует фигуры в браузере вокруг области, определяемой несколькими элементами. Элементы ищутся по имени.
		|Стандартный заголовок элемента (если это не отдельная ДекорацияФормы) находится путем добавления \\#title_div после имени элемента.
		|noFreeze - значение true позволяет избежать лагов анимации, но на время выполнения эффекта будет невозможно выполнение других шагов.
		|Дополнительная информация по EnjoyHint находится тут: https://github.com/xbsoftware/enjoyhint/blob/master/README.md",
		"Прочее.Браузер.Эффекты.Затемнение");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯПоказываюПодсказкуEnjoyHintПоКоординатамВБраузере(Парам01,Парам02,ТабПарам)",
		"ЯПоказываюПодсказкуEnjoyHintПоКоординатамВБраузере",
		"И я показываю подсказку ""ТекстПодсказки"" EnjoyHint по координатам ""ИмяПеременной"" в браузере
		|		|'left'|'100'|
		|		|'top'|'100'|
		|		|'width'|'200'|
		|		|'height'|'100'|
		|		|'shape'|'rect'|
		|		|'timeout'|'5000'|
		|		|'noFreeze'|'false'|",
		"Рисует фигуры в браузере по переданным координатам.
		|В первый параметр передаётся текст подсказки, который будет отображен на экране.
		|Второй параметр необязательный - это имя переменной, которая является структурой и содержит значения left, top, width, height.
		|Если второй параметр не указан, то left, top, width, height используются данные из переданной таблицы.
		|Такую переменную можно создать программно, либо использовать шаг: И я определяю координаты картинки ""ИмяКартинки"" как ""ИмяПеременной"".
		|(Следует учесть, что в общем случае координаты будут одинаковыми, когда браузер открыт на полный экран (F11 для Chrome). Иначе нужно делать пересчёт координат.)
		|noFreeze - значение true позволяет избежать лагов анимации, но на время выполнения эффекта будет невозможно выполнение других шагов.
		|Дополнительная информация по EnjoyHint находится тут: https://github.com/xbsoftware/enjoyhint/blob/master/README.md",
		"Прочее.Браузер.Эффекты.Затемнение");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯПоказываюПодсказкуEnjoyHintУОбластиТаблицыВБраузере(Текст, ИмяТаблицы, ТабПарам)",
		"ЯПоказываюПодсказкуEnjoyHintУОбластиТаблицыВБраузере",
		"И я показываю подсказку ""ТекстПодсказки"" EnjoyHint у области таблицы ""ИмяТаблицы"" в браузере
		|		|'rowNumber'|'2'|
		|		|'rowNumberEnd'|'3'|
		|		|'columnTitle'|'Количество'|
		|		|'columnTitleEnd'|'Ставка НДС'|
		|		|'shape'|'rect'|
		|		|'timeout'|'5000'|
		|		|'noFreeze'|'false'|",
		"Рисует фигуры в браузере по переданным координатам.
		|В первый параметр передаётся текст подсказки, который будет отображен на экране. Второй параметр - имя таблицы.
		|Таблица ищется по имени, колонки - по заголовку, строки - по порядковому номеру (0 - строка шапки, -1 - текущая строка).
		|Если указать оба параметра rowNumber и rowNumberEnd, то область охватит строки начиная с номера rowNumber и до rowNumberEnd.
		|Если указать только rowNumber - область охватит одну укзанную строку.
		|Если не указать ни один из этих параметров - область охватит все строки
		|То же самое справедливо и для отбора по колонкам.
		|Для колонок, вместо заголовка можно указывать порядковый номер (columnNumber, columnNumberEnd)
		|noFreeze - значение true позволяет избежать лагов анимации, но на время выполнения эффекта будет невозможно выполнение других шагов.
		|Дополнительная информация по EnjoyHint находится тут: https://github.com/xbsoftware/enjoyhint/blob/master/README.md",
		"Прочее.Браузер.Эффекты.Затемнение");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯПоказываюСериюПодсказокEnjoyHintВБраузере(ТабПарам1, ТабПарам2, ТабПарам3, ТабПарам4, ТабПарам5, ТабПарам6, ТабПарам7, ТабПарам8,  ТабПарам9, ТабПарам10)",
		"ЯПоказываюСериюПодсказокEnjoyHintВБраузере",
		"И я показываю серию подсказок EnjoyHint в браузере
		|		|'text'|'Пример подсказки для элементов'|
		|		|'type'|'elems'|
		|		|'elem'|'Организация\\#title_div'|
		|		|'elem'|'Организация'|
		|		|'elem'|'ПодразделениеОрганизации'|
		|		|'shape'|'rect'|
		|		|'timeout'|'3000'|
		|
		|		|'text'|'Пример подсказки по координатам'|
		|		|'type'|'coords'|
		|		|'left'|'200'|
		|		|'top'|'110'|
		|		|'width'|'770'|
		|		|'height'|'140'|
		|		|'shape'|'rect'|
		|		|'timeout'|'3000'|
		|
		|		|'text'|'Пример подсказки для ячеек таблицы'|
		|		|'type'|'table'|
		|		|'tableName'|'Сотрудники'|
		|		|'rowNumber'|'0'|
		|		|'rowNumberEnd'|'4'|
		|		|'columnTitle'|'Начислено'|
		|		|'columnTitleEnd'|'Удержано'|
		|		|'shape'|'rect'|
		|		|'timeout'|'3000'|",
		"Рисует серию подсказок EnjoyHint (максимум 10 шт.)
		|Параметры подсказки:
		|text - отображаемый текст подсказки
		|type - тип указания области (elems - по именам элементов формы, table - по ячейкам таблицы формы, coords - по координатам)
		|
		|Для типа elems:
		|Следует указать один или более параметр elem, в значении указать имена элементов формы (не заголовки!).
		|Чтобы охватить не только поле формы, но и его заголовок (если это не отдельная ДекорацияФормы), следует добавить еще один параметр elem, с именем поля, к которому добавить суффикс \\#title_div (см. пример).
		|
		|Для типа table:
		|tableName - имя таблицы.
		|rowNumber, rowNumberEnd - номера строк
		|columnTitle, columnTitleEnd - заголовки колонок
		|Для колонок, вместо заголовка можно указывать порядковый номер (columnNumber, columnNumberEnd)
		|Таблица ищется по имени, колонки - по заголовку, строки - по порядковому номеру (0 - строка шапки, -1 - текущая строка).
		|Если указать оба параметра rowNumber и rowNumberEnd, то область охватит строки начиная с номера rowNumber и до rowNumberEnd.
		|Если указать только rowNumber - область охватит одну укзанную строку.
		|Если не указать ни один из этих параметров - область охватит все строки
		|То же самое справедливо и для отбора по колонкам.
		|
		|Для типа coords:
		|Значения левого-верхнего угла, и размер области: left, top, width, height.
		|
		|На время выполнения шага недоступно выполнение большинства других шагов!
		|
		|Дополнительная информация по EnjoyHint находится тут:
		|https://github.com/xbsoftware/enjoyhint/blob/master/README.md",
		"Прочее.Браузер.Эффекты.Затемнение");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯНакладываюЭффектРазмытияВБраузере(ТабПарам)",
		"ЯНакладываюЭффектРазмытияВБраузере",
		"И я накладываю эффект размытия в браузере
		|		|'blur'|'3'|
		|		|'type'|'elems'|
		|		|'elem'|'Организация\\#title_div'|
		|		|'elem'|'Организация'|
		|		|'elem'|'ПодразделениеОрганизации'|
		|		|'timeout'|'3000'|
		|
		|		|'blur'|'3'|
		|		|'type'|'coords'|
		|		|'left'|'200'|
		|		|'top'|'110'|
		|		|'width'|'770'|
		|		|'height'|'140'|
		|		|'timeout'|'3000'|
		|
		|		|'blur'|'3'|
		|		|'type'|'table'|
		|		|'tableName'|'Сотрудники'|
		|		|'rowNumber'|'0'|
		|		|'rowNumberEnd'|'4'|
		|		|'columnTitle'|'Начислено'|
		|		|'columnTitleEnd'|'Удержано'|
		|		|'timeout'|'3000'|",
		"Накладыват размытие на одну или несколько областей (максимум 10 шт.)
		|Параметры:
		|blur - степень размытия, целое число от 1 и выше.
		|type - тип указания области (elems - по именам элементов формы, table - по ячейкам таблицы формы, coords - по координатам)
		|
		|Для типа elems:
		|Следует указать один или более параметр elem, в значении указать имена элементов формы (не заголовки!).
		|Чтобы охватить не только поле формы, но и его заголовок (если это не отдельная ДекорацияФормы), следует добавить еще один параметр elem, с именем поля, к которому добавить суффикс \\#title_div (см. пример).
		|
		|Для типа table:
		|tableName - имя таблицы.
		|rowNumber, rowNumberEnd - номера строк
		|columnTitle, columnTitleEnd - заголовки колонок
		|Для колонок, вместо заголовка можно указывать порядковый номер (columnNumber, columnNumberEnd)
		|Таблица ищется по имени, колонки - по заголовку, строки - по порядковому номеру (0 - строка шапки, -1 - текущая строка).
		|Если указать оба параметра rowNumber и rowNumberEnd, то область охватит строки начиная с номера rowNumber и до rowNumberEnd.
		|Если указать только rowNumber - область охватит одну укзанную строку.
		|Если не указать ни один из этих параметров - область охватит все строки
		|То же самое справедливо и для отбора по колонкам.
		|
		|Для типа coords:
		|Значения левого-верхнего угла, и размер области: left, top, width, height.",
		"Прочее.Браузер.Эффекты.Размытие");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯРисуюСтрелкуОтКВБраузере(Парам01,Парам02,ТабПарам)",
		"ЯРисуюСтрелкуОтКВБраузере",
		"И я рисую стрелку от ""ИмяЭлемента1"" к ""ИмяЭлемента2"" в браузере
		|		|'color'|'red'|
		|		|'size'|'3'|
		|		|'startSocket'|'up'|
		|		|'endSocket'|'down'|
		|		|'startSocketGravity'|' 160, -80'|
		|		|'endSocketGravity'|' 160, 80'|
		|		|'dropShadow'|'true'|
		|		|'middleLabel'|''|
		|		|'timeout'|'5000'|",
		"Рисует стрелку в браузере. В качестве параметров могут быть как имена элементов формы, так и выражения на js, например:
		|rect('Заполните поле ""Комментарий""', 5000) - текст на экране
		|border('Комментарий', 5000) - рамка вокруг элемента
		|Если имя элемента не указано, то он считается текущим элементом. Дополнительные возможности тут: https://github.com/anseki/leader-line",
		"Прочее.Браузер.Эффекты.Стрелки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯРисуюРамкуВокругЭлементаВБраузере(Парам01,ТабПарам)",
		"ЯРисуюРамкуВокругЭлементаВБраузере",
		"И я рисую рамку вокруг элемента ""ИмяЭлемента"" в браузере
		|		|'color'|'red'|
		|		|'size'|'3'|
		|		|'timeout'|'5000'|",
		"Рисует рамку вокруг элемента в браузере. Элемент формы ищется по имени.",
		"Прочее.Браузер.Эффекты.Рамки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯРисуюРамкуВокругНесколькихЭлементовВБраузере(ТабПарам)",
		"ЯРисуюРамкуВокругНесколькихЭлементовВБраузере",
		"И я рисую рамку вокруг нескольких элементов в браузере
		|		|'elem'|'ИмяЭлемента1'|
		|		|'elem'|'ИмяЭлемента2'|
		|		|'color'|'red'|
		|		|'size'|'3'|
		|		|'timeout'|'5000'|",
		"Рисует рамку вокруг нескольких элементов в браузере. Элементы формы ищутся по имени.",
		"Прочее.Браузер.Эффекты.Рамки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯРисуюРамкуВокругЯчейкиВТекущейСтрокеТаблицыВБраузере(ЗаголовокКолонки, ИмяТаблицы, ТабПарам)",
		"ЯРисуюРамкуВокругЯчейкиВТекущейСтрокеТаблицыВБраузере",
		"И я рисую рамку вокруг ячейки ""Заголовок колонки"" в текущей строке таблицы ""ИмяТаблицы"" в браузере
		|		|'color'|'red'|
		|		|'size'|'3'|
		|		|'timeout'|'5000'|",
		"Рисует рамку вокруг ячейки текущей строки таблицы в браузере. Таблица ищется по имени, колонка - по заголовку",
		"Прочее.Браузер.Эффекты.Рамки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯРисуюРамкуВокругЯчейкиВСтрокеТаблицыВБраузере(ЗаголовокКолонки, НомерСтроки, ИмяТаблицы, ТабПарам)",
		"ЯРисуюРамкуВокругЯчейкиВСтрокеТаблицыВБраузере",
		"И я рисую рамку вокруг ячейки ""Заголовок колонки"" в строке ""НомерСтроки"" таблицы ""ИмяТаблицы"" в браузере
		|		|'color'|'red'|
		|		|'size'|'3'|
		|		|'timeout'|'5000'|",
		"Рисует рамку вокруг ячейки таблицы в браузере. Таблица ищется по имени, колонка - по заголовку, строка - по порядковому номеру (0 - строка шапки)",
		"Прочее.Браузер.Эффекты.Рамки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯРисуюРамкуВокругЯчеекТаблицыВБраузере(ИмяТаблицы, ТабПарам)",
		"ЯРисуюРамкуВокругЯчеекТаблицыВБраузере",
		"И я рисую рамку вокруг ячеек таблицы ""ИмяТаблицы"" в браузере
		|		|'rowNumber'|'2'|
		|		|'rowNumberEnd'|'3'|
		|		|'columnTitle'|'Количество'|
		|		|'columnTitleEnd'|'Ставка НДС'|
		|		|'color'|'red'|
		|		|'size'|'3'|
		|		|'timeout'|'5000'|",
		"Рисует рамку вокруг группы ячеек таблицы в браузере. Таблица ищется по имени, колонки - по заголовку, строки - по порядковому номеру (0 - строка шапки, -1 - текущая строка).
		|Если указать оба параметра rowNumber и rowNumberEnd, то рамка охватит строки начиная с номера rowNumber и до rowNumberEnd.
		|Если указать только rowNumber - рамка охватит одну укзанную строку.
		|Если не указать ни один из этих параметров - рамка охватит все строки
		|То же самое справедливо и для отбора по колонкам.
		|Для колонок, вместо заголовка можно указывать порядковый номер (columnNumber, columnNumberEnd)",
		"Прочее.Браузер.Эффекты.Рамки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯРисуюРамкуВокругЭлементаПанелиРазделовВБраузере(Парам01,ТабПарам)",
		"ЯРисуюРамкуВокругЭлементаПанелиРазделовВБраузере",
		"И я рисую рамку вокруг элемента панели разделов ""ИмяЭлемента"" в браузере
		|		|'color'|'red'|
		|		|'size'|'3'|
		|		|'timeout'|'5000'|",
		"Рисует рамку вокруг элемента в браузере. Элемент формы ищется по его представлению.",
		"Прочее.Браузер.Эффекты.Рамки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯРисуюРамкуВокругЭлементаПанелиФункцийВБраузере(Парам01,ТабПарам)",
		"ЯРисуюРамкуВокругЭлементаПанелиФункцийВБраузере",
		"И я рисую рамку вокруг элемента панели функций ""ИмяЭлемента"" в браузере
		|		|'color'|'red'|
		|		|'size'|'3'|
		|		|'timeout'|'5000'|",
		"Рисует рамку вокруг элемента в браузере. Элемент формы ищется по его представлению.",
		"Прочее.Браузер.Эффекты.Рамки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯПоказываюТекстНадПолемВБраузере(Парам01,Парам02,ТабПарам)",
		"ЯПоказываюТекстНадПолемВБраузере",
		"И я показываю текст ""НужныйТекст"" над полем ""ИмяПоля"" в браузере
		|		|'borderColor'|'red'|
		|		|'backgroundColor'|'white'|
		|		|'timeout'|'5000'|
		|		|'offsetup'|'80'|",
		"Рисует над полем текст.",
		"Прочее.Браузер.Эффекты.Текст над полем");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯПоказываюЗаставкуВБраузере(Парам01,ТабПарам)",
		"ЯПоказываюЗаставкуВБраузере",
		"И я показываю заставку ""НужныйТекст"" в браузере
		|		|'backgroundColor'|'blue'|
		|		|'color'|'white'|
		|		|'count'|'10'|
		|		|'effect'|'1'|
		|		|'fontSize'|'200%'|
		|		|'duration'|'2000'|
		|		|'timeout'|'5000'|",
		"Показывает заставку с указанной надписью, сопровождая показ одним из предопределённых видео эффектов.
		|- effect: может принимать значения от 1 до 5.",
		"Прочее.Браузер.Эффекты.Заставки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯПоказываюНажатиеМышиВБраузере(ТабПарам)",
		"ЯПоказываюНажатиеМышиВБраузере",
		"И я показываю нажатие мыши в браузере
		|		|'color'|'127'|
		|		|'duration'|'12'|
		|		|'radius'|'24'|
		|		|'width'|'8'|
		|		|'transparency'|'127'|",
		"Показывает видео эффект расходящихся концентрических кругов, визуализирующих нажатие мыши в браузере.
		|Если параметры анимации клика не заданы, то будут взяты значения по умолчанию из формы Vanessa Automation.",
		"Прочее.Браузер.Подсветка кликов мышки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯЗакрываюВсеВкладкиБраузера()",
		"ЯЗакрываюВсеВкладкиБраузера",
		"И я закрываю все вкладки браузера",
		"Закрываются все вкладки браузера",
		"Прочее.Браузер.Управление");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗакрываюВкладкуБраузераСЗаголовком(Парам01)",
		"ЯЗакрываюВкладкуБраузераСЗаголовком",
		"И я закрываю вкладку браузера с заголовком ""Заголовок""",
		"Закрывает вкладку браузера с указанным заголовком. Возможно использование символа * при указании заголовка вкладки. Чтобы закрыть вкладку, которая остаётся после закрытия сеанса 1С достаточно передать в качестве заголовка *exit*.",
		"Прочее.Браузер.Управление");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯАктивизируюТекущееОкноБраузера()",
		"ЯАктивизируюТекущееОкноБраузера",
		"И я активизирую текущее окно браузера",
		"Активизируется текущее окно браузера",
		"Прочее.Браузер.Управление");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯАктивизируюБраузерИУстанавливаюПолноэкранныйРежим()",
		"ЯАктивизируюБраузерИУстанавливаюПолноэкранныйРежим",
		"И я активизирую браузер и устанавливаю полноэкранный режим",
		"Браузер активизируется и переключается в полноэкранный режим",
		"Прочее.Браузер.Управление");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯПоказываюПодсказкуDriverJsУЭлементаВБраузере(Парам01,Парам02,ТабПарам)",
		"ЯПоказываюПодсказкуDriverJsУЭлементаВБраузере",
		"И я показываю подсказку ""ТекстПодсказки"" DriverJs у элемента ""ИмяЭлемента"" в браузере
		|		|'description'|'Подробное описание'|
		|		|'animate'|'true'|
		|		|'opacity'|'0.5'|
		|		|'padding'|'10'|
		|		|'position'|'bottom'|
		|		|'timeout'|'5000'|",
		"Рисует фигуры в браузере. Параметры описаны тут: https://kamranahmed.info/driver.js",
		"Прочее.Браузер.Эффекты.Затемнение");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯПоказываюАнимированныйБлокТекстаВБраузере(ТабПарам, ТабПарам1, ТабПарам2, ТабПарам3, ТабПарам4)",
		"ЯПоказываюАнимированныйБлокТекстаВБраузере",
		"И я показываю анимированный блок текста в браузере
		|		| 'effect'             | 'fold'   |
		|		| 'duration'           | 2000     |
		|		| 'timeout'            | 4000     |
		|		| 'options-size'       | 8        |
		|		| 'options-horizFirst' | 'false'  |
		|		| 'css-width'          | '100%'   |
		|		| 'css-bottom'         | '10%'    |
		|
		|		| 'text'                 | 'Привет, <b>мир</b>!' |
		|		| 'css-height'           | '3rem'                |
		|		| 'css-font-family'      | 'Lato, sans-serif'    |
		|		| 'css-font-size'        | '2rem'                |
		|		| 'css-color'            | 'white'               |
		|		| 'css-background-color' | 'red'                 |
		|		| 'css-padding-left'     | '5%'                  |
		|
		|		| 'text'                 | 'Здесь работают <span style=""font-style: italic;"">html</span> теги' |
		|		| 'css-height'           | '3rem'   |
		|		| 'css-color'            | 'black'  |
		|		| 'css-background-color' | 'yellow' |
		|		| 'css-padding-left'     | '5%'     |",
		"Рисует анимированный блок текста в браузере, например - блок субтитров с названиями сценария и решения. 
		|Поддерживаются до 4-х строк. Параметры для каждой строки задаются в отдельной таблице Gherkin. Первая таблица - общие параметры.
		|Доступные параметры:
		|	effect - имя эффекта анимации. Доступные эффекты: https://api.jqueryui.com/category/effects/
		|	options-<имя опции> - значения опций для эффекта анимации. Список опций по ссылке выше, на странице конкретного эффекта.
		|	duration - длительность анимации показа и скрытия, мс.
		|	timeout - пауза между окончанием показа и началом скрытия, мс.
		|	text (для строк) - содержимое. Доступны теги html.
		|	css-<имя параметра CSS> - возможность задать любые параметры CSS, как для блока в целом, так и для каждой из строк, в частности.",
		"Прочее.Браузер.Эффекты.Блоки текста");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯРисуюРамкуПоКоординатамВБраузере(ТабПарам)",
		"ЯРисуюРамкуПоКоординатамВБраузере",
		"И я рисую рамку по координатам в браузере
		|		|'left'|'100'|
		|		|'top'|'100'|
		|		|'width'|'200'|
		|		|'height'|'200'|
		|		|'color'|'red'|
		|		|'size'|'3'|
		|		|'timeout'|'5000'|",
		"Рисует рамку по переданных координатам в браузере. 
		|left, top - положение левого верхнего угла
		|width, height - размеры прямоугольника рамки.",
		"Прочее.Браузер.Эффекты.Рамки");	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯНажимаюНаПодменюКоманднойПанелиФормыВБраузере(Парам01)",
		"ЯНажимаюНаПодменюКоманднойПанелиФормыВБраузере",
		"И я нажимаю на подменю ""Заголовок подменю"" командной панели формы в браузере",
		"Открывает или закрывает подменю командной панели в браузере",
		"Прочее.Браузер.Управление.Формы");
		
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯНажимаюНаПодменюСИменемКоманднойПанелиФормыВБраузере(Парам01)",
		"ЯНажимаюНаПодменюСИменемКоманднойПанелиФормыВБраузере",
		"И я нажимаю на подменю с именем ""ИмяПодменю"" командной панели формы в браузере",
		"Открывает или закрывает подменю командной панели в браузере",
		"Прочее.Браузер.Управление.Формы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯПоказываюАнимациюЗагрузкиВБраузере()",
		"ЯПоказываюАнимациюЗагрузкиВБраузере",
		"И я показываю анимацию загрузки в браузере
		|		|'stroke'|'#FC46AD'|",
		"Показывает имитацию загрузки в браузере.
		|stroke - цвет анимации.",
		"Прочее.Браузер.Эффекты");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯОткрываюПодсказкуПоляСИменемВБраузере(ИмяПоля)",
		"ЯОткрываюПодсказкуПоляСИменемВБраузере",
		"И я открываю подсказку поля с именем ""ИмяПоля"" в браузере",
		"Выполняет открытие подсказки у поля в браузере",
		"Прочее.Браузер.Управление.Формы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯЗакрываюПодсказкуПоляСИменемВБраузере(ИмяПоля)",
		"ЯЗакрываюПодсказкуПоляСИменемВБраузере",
		"И я закрываю подсказку поля с именем ""ИмяПоля"" в браузере",
		"Выполняет закрытие подсказки у поля в браузере",
		"Прочее.Браузер.Управление.Формы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯНажимаюНаHTMLЭлементВБраузере(Элемент)",
		"ЯНажимаюНаHTMLЭлементВБраузере",
		"И я нажимаю на HTML элемент ""elem(\'НужноеПолеФормы\\\#extTooltipBtn\')"" в браузере",
		"Выполняет нажатие на произвольном HTML элементе в браузере
		|Параметр - код на javascript, выполнение которого вернет HTML элемент
		|Например: document.querySelector('#myElement')
		|
		|Существует список функций, облегчающих поиск типовых HTML элементов веб-клиента 1С,
		|Одна из них - elem (из примера этого шага).
		|Все доступные функции можно найти в vanessa-automation\lib\VA_Chrome\library.js",
		"Прочее.Браузер.Прочее");
	
	Возврат ВсеТесты;
КонецФункции

&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции

&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции

&НаКлиенте
Функция ВыполнитьСкриптВБраузереСПроверкойИсключения(Скрипт)
	
	РезультатВыполнения = Ванесса.ВыполнитьJavaScriptБраузер(Скрипт);
	Если РезультатВыполнения.Свойство("error") Тогда
		ВызватьИсключение РезультатВыполнения.error.message;
	КонецЕсли;
	Если РезультатВыполнения.result.Свойство("exceptionDetails") Тогда
		ТекстИсключения = "";
		Если НЕ РезультатВыполнения.result.exceptionDetails.exception.Свойство("description", ТекстИсключения) Тогда
			ТекстИсключения = РезультатВыполнения.result.exceptionDetails.exception.value;
		КонецЕсли; 
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции
 

///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Функция выполняется перед началом каждого сценария
Функция ПередНачаломСценария() Экспорт
	
КонецФункции

&НаКлиенте
// Функция выполняется перед окончанием каждого сценария
Функция ПередОкончаниемСценария() Экспорт
	
КонецФункции


///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
Функция ДанныеПараметровИзТаблицы(ДанныеПараметров, ТабПарам)
	Если ТабПарам = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		ДанныеПараметров.Вставить(СтрокаТабПарам.Кол1, СтрокаТабПарам.Кол2);
	КонецЦикла;
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеПараметровИзТаблицыКакСоответствие(ТаблицаПараметров)
	
	СоответствиеПараметров = Новый Соответствие;
	
	Если ТаблицаПараметров = Неопределено Тогда
		Возврат СоответствиеПараметров;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПараметров Цикл
		ИмяПараметра = СтрокаТаблицы.Кол1;
		ЗначениеПараметра = СтрокаТаблицы.Кол2;
		
		ЗначениеИзСоответствия = СоответствиеПараметров[ИмяПараметра];
		Если ЗначениеИзСоответствия = Неопределено Тогда
			СоответствиеПараметров.Вставить(ИмяПараметра, ЗначениеПараметра);
		ИначеЕсли ТипЗнч(ЗначениеИзСоответствия) = Тип("Массив") Тогда
			ЗначениеИзСоответствия.Добавить(ЗначениеПараметра);
		Иначе
			МассивЗначений = Новый Массив;
			МассивЗначений.Добавить(ЗначениеИзСоответствия);
			МассивЗначений.Добавить(ЗначениеПараметра);
			СоответствиеПараметров[ИмяПараметра] = МассивЗначений;	
		КонецЕсли; 
	КонецЦикла;
	
	Возврат СоответствиеПараметров;
	
КонецФункции

&НаКлиенте
Функция ОбернутьВАпострофы(Стр)
	Если Прав(СокрП(Стр), 1) = ")" Тогда
		Возврат Стр;
	КонецЕсли;
	
	Возврат "'" + Стр + "'";
КонецФункции

&НаКлиенте
//И я показываю подсказку EnjoyHint у элемента "ИмяЭлемента"
//@ЯПоказываюПодсказкуEnjoyHintУЭлементаВ(Парам01,ТабПарам)
Функция ЯПоказываюПодсказкуEnjoyHintУЭлемента(Текст, ИмяЭлемента, ТабПарам = Неопределено) Экспорт
	
	shape = "rect";
	timeout = "5000";
	
	Если Вычислить("ОкноВнешнегоСайта").Доступно Тогда
		
		ШаблонПодсказки = "let p = {
		|text: '%2',
		|shape: '%3',
		|timeout: %4
		|};
		|let r = theme('%1').getBoundingClientRect();
		|let node = document.createElement('div');
		|node.style.position = ""absolute"";
		|node.style.left = r.left + 'px';
		|node.style.top = r.top + 'px';
		|	node.style.width = r.width + 'px';
		|node.style.height = r.height + 'px';
		|node.style.zIndex = 9999;
		|document.body.appendChild(node);
		|node.getBoundingClientRect = () => {
		|return {
			|left: r.left,
			|top: r.top,
			|width: r.width,
			|height: r.height
		|}
		|};
		|enjoyhint = new EnjoyHint();
		|enjoyhint.set([{
		|selector: node,
		|description: p.text,
		|showSkip: false,
		|shape: p.shape
		|}]);
		|enjoyhint.run();
		|$('.enjoyhint_close_btn').hide();
		|setTimeout(() => (enjoyhint.stop(), node.remove()), p.timeout);";
		
		Если Не ТабПарам = Неопределено Тогда
			Для Каждого Элемент Из ТабПарам Цикл
				
				Если Элемент.Кол1 = "shape" Тогда
					shape = Элемент.Кол2;
				ИначеЕсли Элемент.Кол1 = "timeout" Тогда
					timeout = Элемент.Кол2;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		ТекстСкрипта = Ванесса._СтрШаблон(ШаблонПодсказки, ИмяЭлемента, Текст, shape, timeout);
		
		МодульРаботаСБраузером = Вычислить("РаботаСБраузером");
		МодульРаботаСБраузером.СообщениеВнешнемуСайтуПроизвольныйТекстJS(ТекстСкрипта);
		
	Иначе
		
		ДанныеПараметров = Новый Соответствие;
		ДанныеПараметров.Вставить("shape", "rect");
		ДанныеПараметров.Вставить("timeout", 5000);
		
		ДанныеПараметровИзТаблицы(ДанныеПараметров, ТабПарам);
		ДанныеПараметров.Вставить("text", Текст);
		ДанныеПараметров.Вставить("name", ИмяЭлемента);
		
		Скрипт = "{
		|let p = " + Ванесса.ЗаписатьОбъектJSON(ДанныеПараметров) + ";
		|let enjoyhint = new EnjoyHint();
		|enjoyhint.set([{
		|	selector: elem(p.name), 
		|	description: p.text, 
		|	showSkip: false, 
		|	shape: p.shape
		|}]);
		|enjoyhint.run(); 
		|$('.enjoyhint_close_btn').hide();
		|setTimeout(() => (enjoyhint.stop()), p.timeout);
		|}";
		
		Если ДанныеПараметров["noFreeze"] <> Неопределено И Булево(ДанныеПараметров["noFreeze"]) Тогда  
			ВременноОтключитьБраузерОтТестМенеджера(Число(ДанныеПараметров["timeout"]));
		КонецЕсли;
		
		Ванесса.ВыполнитьJavaScriptБраузер(Скрипт);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
//И я показываю подсказку EnjoyHint у элемента "ИмяЭлемента" в браузере
//@ЯПоказываюПодсказкуEnjoyHintУЭлементаВБраузере(Парам01,ТабПарам)
Функция ЯПоказываюПодсказкуEnjoyHintУЭлементаВБраузере(Текст, ИмяЭлемента, ТабПарам = Неопределено) Экспорт
	ЯПоказываюПодсказкуEnjoyHintУЭлемента(Текст, ИмяЭлемента, ТабПарам);
КонецФункции

&НаКлиенте
//И я показываю подсказку "ТекстПодсказки" EnjoyHint у нескольких элементов в браузере
//@ЯПоказываюПодсказкуEnjoyHintУНесколькихЭлементовВБраузере(Текст, ТабПарам)
Функция ЯПоказываюПодсказкуEnjoyHintУНесколькихЭлементовВБраузере(Текст, ТабПарам = Неопределено) Экспорт
	
	МассивИменЭлементов = Новый Массив;
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		Если Нрег(СтрокаТабПарам.Кол1) = "elem" Тогда
			МассивИменЭлементов.Добавить(СтрокаТабПарам.Кол2);
		КонецЕсли;
	КонецЦикла;
	
	Скрипт = "
		|var VAElementsArray = " + Ванесса.ЗаписатьОбъектJSON(МассивИменЭлементов) + ";
		|JSON.stringify(elemsBoundingRect(VAElementsArray));";
	
	РезультатВыполнения = Ванесса.ВыполнитьJavaScriptБраузер(Скрипт).result;
	Если РезультатВыполнения.Свойство("exceptionDetails") Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найдены координаты области, описываемой несколькими элементами, согласно переданным параметрам.
				|%1'"), РезультатВыполнения.exceptionDetails.exception.description);
	КонецЕсли;
	
	СтруктураКоординат = Ванесса.ПрочитатьОбъектJSON(РезультатВыполнения.result.value);
	Для каждого КлючИЗначение Из СтруктураКоординат Цикл
		ТабПарам.Добавить(Новый Структура("Кол1, Кол2", КлючИЗначение.Ключ, Формат(КлючИЗначение.Значение, "ЧГ=")));
	КонецЦикла;
	
	ЯПоказываюПодсказкуEnjoyHintПоКоординатамВБраузере(Текст, , ТабПарам);
	
КонецФункции

&НаКлиенте
//И я показываю подсказку "ТекстПодсказки" EnjoyHint по координатам "ИмяПеременной"
//@ЯПоказываюПодсказкуEnjoyHintПоКоординатамВБраузере(Парам01,ТабПарам)
Функция ЯПоказываюПодсказкуEnjoyHintПоКоординатамВБраузере(Текст, ИмяПеременной = Неопределено, ТабПарам = Неопределено) Экспорт
	
	ДанныеПараметров = Новый Соответствие;
	ДанныеПараметров.Вставить("left", "100");
	ДанныеПараметров.Вставить("top", "100");
	ДанныеПараметров.Вставить("width", "200");
	ДанныеПараметров.Вставить("height", "100");
	
	ДанныеПараметров.Вставить("shape", "rect");
	ДанныеПараметров.Вставить("timeout", "5000");
	
	Если ТабПарам = Неопределено И ТипЗнч(ИмяПеременной) = Тип("Массив") Тогда
		ТабПарам = ИмяПеременной;
	КонецЕсли;
	
	ДанныеПараметровИзТаблицы(ДанныеПараметров, ТабПарам);
	
	// У переменной приоритет.
	Если ИмяПеременной <> Неопределено и НЕ ПустаяСтрока(ИмяПеременной) Тогда
		Если Контекст.Свойство(ИмяПеременной) Тогда
			ДанныеПараметров.Вставить("left", Контекст[ИмяПеременной].left);
			ДанныеПараметров.Вставить("top", Контекст[ИмяПеременной].top);
			ДанныеПараметров.Вставить("width", Контекст[ИмяПеременной].width);
			ДанныеПараметров.Вставить("height", Контекст[ИмяПеременной].height);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеПараметров.Вставить("text", Текст);
	
	Скрипт = "
		|{
		|let p = {text: '%1', shape: '%2', timeout: %3};
		|let node = document.createElement('div');
		|node.style.position = ""absolute"";
		|node.style.left = ""%4px"";
		|node.style.top = ""%5px"";
		|node.style.width = ""%6px"";
		|node.style.height = ""%7px"";
		|node.style.zIndex = 9999;
		|document.body.appendChild(node);
		|node.getBoundingClientRect = () => { return {left: %4, top: %5, width: %6, height: %7}};
		|enjoyhint = new EnjoyHint();
		|enjoyhint.set([{
		|    selector: node,
		|    description: p.text,
		|    showSkip: false,
		|    shape: p.shape
		|}]);
		|enjoyhint.run();
		|$('.enjoyhint_close_btn').hide();
		|setTimeout(() => (enjoyhint.stop(), node.remove()), p.timeout);
		|}
		|";
	
	Скрипт = СтрЗаменить(Скрипт, "%1", ДанныеПараметров["text"]);
	Скрипт = СтрЗаменить(Скрипт, "%2", ДанныеПараметров["shape"]);
	Скрипт = СтрЗаменить(Скрипт, "%3", ДанныеПараметров["timeout"]);
	
	Скрипт = СтрЗаменить(Скрипт, "%4", Формат(Цел(ДанныеПараметров["left"]), "ЧГ=; ЧН=0"));
	Скрипт = СтрЗаменить(Скрипт, "%5", Формат(Цел(ДанныеПараметров["top"]), "ЧГ=; ЧН=0"));
	Скрипт = СтрЗаменить(Скрипт, "%6", Формат(Цел(ДанныеПараметров["width"]), "ЧГ=; ЧН=0"));
	Скрипт = СтрЗаменить(Скрипт, "%7", Формат(Цел(ДанныеПараметров["height"]), "ЧГ=; ЧН=0"));
	
	Если ДанныеПараметров["noFreeze"] <> Неопределено И Булево(ДанныеПараметров["noFreeze"]) Тогда  
		ВременноОтключитьБраузерОтТестМенеджера(Число(ДанныеПараметров["timeout"]));
	КонецЕсли;
	
	Ванесса.ВыполнитьJavaScriptБраузер(Скрипт);
	
КонецФункции

&НаКлиенте
//И я показываю подсказку "ТекстПодсказки" EnjoyHint у области таблицы "ИмяТаблицы" в браузере
//@ЯПоказываюПодсказкуEnjoyHintУОбластиТаблицыВБраузере(Текст, ИмяТаблицы, ТабПарам)
Функция ЯПоказываюПодсказкуEnjoyHintУОбластиТаблицыВБраузере(Текст, ИмяТаблицы, ТабПарам = Неопределено) Экспорт
	
	rowNumber = Неопределено;
	rowNumberEnd = Неопределено;
	columnTitle = Неопределено;
	columnTitleEnd = Неопределено;
	columnNumber = Неопределено;
	columnNumberEnd = Неопределено;
	
	ДанныеПараметров = Новый Соответствие;
	ДанныеПараметров.Вставить("rowNumber", rowNumber);
	ДанныеПараметров.Вставить("rowNumberEnd", rowNumberEnd);
	ДанныеПараметров.Вставить("columnTitle", columnTitle);
	ДанныеПараметров.Вставить("columnTitleEnd", columnTitleEnd);
	ДанныеПараметров.Вставить("columnNumber", columnNumber);
	ДанныеПараметров.Вставить("columnNumberEnd", columnNumberEnd);
	
	ДанныеПараметровИзТаблицы(ДанныеПараметров, ТабПарам);
	ДанныеПараметров.Вставить("tableName", ИмяТаблицы);
	
	Скрипт = "
		|var VATableRegionParams = " + Ванесса.ЗаписатьОбъектJSON(ДанныеПараметров) + ";
		|JSON.stringify(tableRegionBoundingRect(VATableRegionParams.tableName, VATableRegionParams));";
	
	РезультатВыполнения = Ванесса.ВыполнитьJavaScriptБраузер(Скрипт).result;
	Если РезультатВыполнения.Свойство("exceptionDetails") Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найдены координаты области таблицы согласно переданным параметрам.
				|%1'"), РезультатВыполнения.exceptionDetails.exception.description);
	КонецЕсли;
	
	СтруктураКоординат = Ванесса.ПрочитатьОбъектJSON(РезультатВыполнения.result.value);
	Для каждого КлючИЗначение Из СтруктураКоординат Цикл
		ТабПарам.Добавить(Новый Структура("Кол1, Кол2", КлючИЗначение.Ключ, Формат(КлючИЗначение.Значение, "ЧГ=")));
	КонецЦикла;
	
	ЯПоказываюПодсказкуEnjoyHintПоКоординатамВБраузере(Текст, , ТабПарам);
	
КонецФункции

&НаКлиенте
//И я показываю серию подсказок EnjoyHint в браузере
//@ЯПоказываюСериюПодсказокEnjoyHintВБраузере(ТабПарам1, ТабПарам2, ТабПарам3, ТабПарам4, ТабПарам5, ТабПарам6, ТабПарам7, ТабПарам8,  ТабПарам9, ТабПарам10)
Функция ЯПоказываюСериюПодсказокEnjoyHintВБраузере(ТабПарам1 = Неопределено, ТабПарам2 = Неопределено, 
	ТабПарам3 = Неопределено, ТабПарам4 = Неопределено, ТабПарам5 = Неопределено, ТабПарам6 = Неопределено, 
	ТабПарам7 = Неопределено, ТабПарам8 = Неопределено, ТабПарам9 = Неопределено, ТабПарам10 = Неопределено) Экспорт
	
	ОбщееВремя = 0;
	
	ВыполнитьСкриптВБраузереСПроверкойИсключения("stepsArray = [];");
	
	Для Сч = 1 По 10 Цикл
		ТаблицаПараметров = Вычислить("ТабПарам" + Сч);
		Если ТаблицаПараметров = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ПараметрыПодсказки = ПолучитьДанныеПараметровИзТаблицыКакСоответствие(ТаблицаПараметров);
		
		ЗначениеПодсказки = ПараметрыПодсказки["text"];
		Если ЗначениеПодсказки = Неопределено Тогда
			ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для подсказки №%1 не указан текст (text)!'"), Сч);	
		КонецЕсли;
		
		ВидФигуры = ПараметрыПодсказки["shape"];
		Если ВидФигуры = Неопределено Тогда
			ПараметрыПодсказки["shape"] = "rect";		
		КонецЕсли;
		
		ВремяВыполнения = ПараметрыПодсказки["timeout"];
		Если ВремяВыполнения = Неопределено Тогда
			ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для подсказки №%1 не указано время выполнения (timeout)!'"), Сч);	
		КонецЕсли;	
		ОбщееВремя = ОбщееВремя + Цел(ВремяВыполнения);
		
		Скрипт = "
				|let boundingRect = null;
				|let params = " + Ванесса.ЗаписатьОбъектJSON(ПараметрыПодсказки) + ";";
		
		ТипЭффекта = ПараметрыПодсказки["type"];
		Если ТипЭффекта = "elems" Тогда
			МассивИменЭлементов = ПараметрыПодсказки["elem"];
			Если МассивИменЭлементов = Неопределено Тогда
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для подсказки №%1 не указаны элементы (elem), для которых отображать эффект!'"), Сч);
			КонецЕсли;
			
			Если ТипЗнч(МассивИменЭлементов) <> Тип("Массив") Тогда
				ЗначениеЭлемента = МассивИменЭлементов;
				МассивИменЭлементов = Новый Массив;
				МассивИменЭлементов.Добавить(ЗначениеЭлемента);
			КонецЕсли; 
			
			Скрипт = Скрипт + "
				|boundingRect = " + Ванесса.ЗаписатьОбъектJSON(МассивИменЭлементов) + ";
				|try {
				|	boundingRect = elemsBoundingRect(boundingRect);
				|} catch(err) {
				|	throw 'У подсказки №" + Сч + " не найдены элементы (elem)!';
				|}";
		ИначеЕсли ТипЭффекта = "table" Тогда		
			Скрипт = Скрипт + "
				|try {
				|	boundingRect = tableRegionBoundingRect(params.tableName, params);
				|} catch(err) {
				|	throw 'У подсказки №" + Сч + " не найдены ячейки таблицы!';
				|}";
			
			ИмяТаблицы = ПараметрыПодсказки["tableName"];
			Если ИмяТаблицы = Неопределено Тогда
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для подсказки №%1 не указано имя таблицы (tableName)!'"), Сч);
			КонецЕсли;
		ИначеЕсли ТипЭффекта = "coords" Тогда
			Скрипт = Скрипт + "
				|try {
				|	boundingRect = {left: parseInt(params.left), top: parseInt(params.top), width: parseInt(params.width), height: parseInt(params.height)};
				|} catch(err) {
				|	throw 'У подсказки №" + Сч + " неверно заданы координаты!';
				|}";
		ИначеЕсли НЕ ЗначениеЗаполнено(ТипЭффекта) Тогда
			ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для подсказки №%1 не указан тип эффекта (type)!'"), Сч);
		Иначе
			ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(НСтр("ru = 'У подсказки №%1 не известный тип эффекта: %2'"), Сч, ТипЭффекта);
		КонецЕсли;
		
		Скрипт = Скрипт + "
				|stepsArray.push({boundingRect : boundingRect, params: params});";
		ВыполнитьСкриптВБраузереСПроверкойИсключения("{ " + Скрипт + " }");
	КонецЦикла;
		
	Скрипт = 
		"let commonParent = document.createElement('div');
		|commonParent.style.position = 'absolute';
		|commonParent.style.left = '0px';
		|commonParent.style.top = '0px';
		|commonParent.style.width = '100vw';
		|commonParent.style.height = '100vh';
		|commonParent.style.zIndex = 9998;
		|document.body.appendChild(commonParent);
		|
		|let enjoyHintSteps = [];
		|for(let step of stepsArray) {
		|	let node = document.createElement('div');
		|	node.style.position = 'absolute';
		|	node.style.left = step.boundingRect.left + 'px';
		|	node.style.top = step.boundingRect.top + 'px';
		|	node.style.width = step.boundingRect.width + 'px';
		|	node.style.height = step.boundingRect.height + 'px';
		|	node.style.zIndex = 9999;
		|	node.getBoundingClientRect = () => { return step.boundingRect; };
		|	commonParent.appendChild(node);
		|	
		|	enjoyHintSteps.push({
		|		selector: node,
		|		description: step.params.text,
		|		showSkip: false,
		|		shape: step.params.shape
		|	});
		|}
		|
		|let enjoyhint = new EnjoyHint();
		|enjoyhint.set(enjoyHintSteps);
		|enjoyhint.run();
		|
		|let cummulativeTimeout = 0;
		|for(let step of stepsArray) {
		|	cummulativeTimeout += parseInt(step.params.timeout);
		| 	setTimeout(() => {
		|		enjoyhint.trigger('next');
		|	}, cummulativeTimeout);
		|}
		|
		|$('.enjoyhint_close_btn').hide();
		|
		|setTimeout(() => { commonParent.remove(); }, " + Формат(ОбщееВремя, "ЧГ=; ЧН=0") + ");";
		
	ВременноОтключитьБраузерОтТестМенеджера(ОбщееВремя);
	
	ВыполнитьСкриптВБраузереСПроверкойИсключения("{ " + Скрипт + " }");
		
КонецФункции

&НаКлиенте
//И я накладываю эффект размытия в браузере
//@ЯНакладываюЭффектРазмытияВБраузере(ТабПарам1, ТабПарам2, ТабПарам3, ТабПарам4, ТабПарам5, ТабПарам6, ТабПарам7, ТабПарам8,  ТабПарам9, ТабПарам10)
Функция ЯНакладываюЭффектРазмытияВБраузере(ТабПарам1 = Неопределено, ТабПарам2 = Неопределено, 
	ТабПарам3 = Неопределено, ТабПарам4 = Неопределено, ТабПарам5 = Неопределено, ТабПарам6 = Неопределено, 
	ТабПарам7 = Неопределено, ТабПарам8 = Неопределено, ТабПарам9 = Неопределено, ТабПарам10 = Неопределено) Экспорт
	
	ВыполнитьСкриптВБраузереСПроверкойИсключения("stepsArray = [];");
	
	Для Сч = 1 По 10 Цикл
		ТаблицаПараметров = Вычислить("ТабПарам" + Сч);
		Если ТаблицаПараметров = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ПараметрыПодсказки = ПолучитьДанныеПараметровИзТаблицыКакСоответствие(ТаблицаПараметров);
		
		ЗначениеПодсказки = ПараметрыПодсказки["blur"];
		Если ЗначениеПодсказки = Неопределено Тогда
			ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для области №%1 не указана степень размытия (blur)!'"), Сч);	
		КонецЕсли;
		
		ВремяВыполнения = ПараметрыПодсказки["timeout"];
		Если ВремяВыполнения = Неопределено Тогда
			ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для области №%1 не указано время выполнения (timeout)!'"), Сч);	
		КонецЕсли;	
		
		Скрипт = "
				|let boundingRect = null;
				|let params = " + Ванесса.ЗаписатьОбъектJSON(ПараметрыПодсказки) + ";";
		
		ТипЭффекта = ПараметрыПодсказки["type"];
		Если ТипЭффекта = "elems" Тогда
			МассивИменЭлементов = ПараметрыПодсказки["elem"];
			Если МассивИменЭлементов = Неопределено Тогда
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для области №%1 не указаны элементы (elem), на которых отображать эффект!'"), Сч);
			КонецЕсли;
			
			Если ТипЗнч(МассивИменЭлементов) <> Тип("Массив") Тогда
				ЗначениеЭлемента = МассивИменЭлементов;
				МассивИменЭлементов = Новый Массив;
				МассивИменЭлементов.Добавить(ЗначениеЭлемента);
			КонецЕсли; 
			
			Скрипт = Скрипт + "
				|boundingRect = " + Ванесса.ЗаписатьОбъектJSON(МассивИменЭлементов) + ";
				|try {
				|	boundingRect = elemsBoundingRect(boundingRect);
				|} catch(err) {
				|	throw 'Для области №" + Сч + " не найдены элементы (elem)!';
				|}";
		ИначеЕсли ТипЭффекта = "table" Тогда		
			Скрипт = Скрипт + "
				|try {
				|	boundingRect = tableRegionBoundingRect(params.tableName, params);
				|} catch(err) {
				|	throw 'Для области №" + Сч + " не найдены ячейки таблицы!';
				|}";
			
			ИмяТаблицы = ПараметрыПодсказки["tableName"];
			Если ИмяТаблицы = Неопределено Тогда
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для области №%1 не указано имя таблицы (tableName)!'"), Сч);
			КонецЕсли;
		ИначеЕсли ТипЭффекта = "coords" Тогда
			Скрипт = Скрипт + "
				|try {
				|	boundingRect = {left: parseInt(params.left), top: parseInt(params.top), width: parseInt(params.width), height: parseInt(params.height)};
				|} catch(err) {
				|	throw 'Для области №" + Сч + " неверно заданы координаты!';
				|}";
		ИначеЕсли НЕ ЗначениеЗаполнено(ТипЭффекта) Тогда
			ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для области №%1 не указан тип (type)!'"), Сч);
		Иначе
			ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(НСтр("ru = 'У области №%1 не известный тип: %2'"), Сч, ТипЭффекта);
		КонецЕсли;
		
		Скрипт = Скрипт + "
				|stepsArray.push({boundingRect : boundingRect, params: params});";
		ВыполнитьСкриптВБраузереСПроверкойИсключения("{ " + Скрипт + " }");
	КонецЦикла;
		
	Скрипт = 
		"for(let step of stepsArray) {
		|	let node = document.createElement('div');
		|	node.style.position = 'absolute';
		|	node.style.left = step.boundingRect.left + 'px';
		|	node.style.top = step.boundingRect.top + 'px';
		|	node.style.width = step.boundingRect.width + 'px';
		|	node.style.height = step.boundingRect.height + 'px';
		|	node.style.zIndex = 9999;
		|	$(node).css('backdrop-filter', 'blur(' + step.params.blur + 'px)');
		|	node.getBoundingClientRect = () => { return step.boundingRect; };
		|	document.body.appendChild(node);
		|	setTimeout(() => { node.remove(); }, parseInt(step.params.timeout));
		|}";
	
	ВыполнитьСкриптВБраузереСПроверкойИсключения("{ " + Скрипт + " }");
		
КонецФункции

&НаКлиенте
//И я открываю подсказку поля с именем "ИмяПоля" в браузере
//@ЯОткрываюПодсказкуПоляСИменемВБраузере(ИмяПоля)
Функция ЯОткрываюПодсказкуПоляСИменемВБраузере(ИмяПоля) Экспорт
	
	ЯНажимаюНаHTMLЭлементВБраузере("elem('" + ИмяПоля + "\\#extTooltipBtn')");
		
КонецФункции

&НаКлиенте
//И я закрываю подсказку поля с именем "ИмяПоля" в браузере
//@ЯЗакрываюПодсказкуПоляСИменемВБраузере(ИмяПоля)
Функция ЯЗакрываюПодсказкуПоляСИменемВБраузере(ИмяПоля) Экспорт
	
	ЯНажимаюНаHTMLЭлементВБраузере("elem('" + ИмяПоля + "\\#extTooltipPnlCloseBtn')");
		
КонецФункции

&НаКлиенте
//И я нажимаю на HTML элемент "Элемент" в браузере
//@ЯНажимаюНаHTMLЭлементВБраузере(Элемент)
Функция ЯНажимаюНаHTMLЭлементВБраузере(Элемент) Экспорт
	#Если НЕ ВебКлиент Тогда
	
	ТекстJavaScript = "
	|{
	|function pos(){
	|	let targetElement = " + Элемент + ";
	|	let r = targetElement.getBoundingClientRect();
	|    return {
	|       x: Math.round(r.left + r.width / 2) + window.screenLeft,
	|       y: Math.round(r.top + r.height / 2) + window.screenTop + window.outerHeight - window.innerHeight,    
	|       sw: screen.width, 
	|       sh:screen.height,    
	|    }
	|}; JSON.stringify(pos())
	|}
	|";
	
	КоординатыЭлемента = Ванесса.ВыполнитьJavaScriptБраузер(ТекстJavaScript);
	
	Попытка
		СтрокаКоординаты = КоординатыЭлемента.result.result.value;
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(СтрокаКоординаты);
		ДанныеКоординат = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не получилось получить координаты элемента <%1> в браузере: %2.'"),
			Элемент,
			СтрокаКоординаты
		);
	КонецПопытки;
		
	Ванесса.ВыполнитьЭмуляциюКликаПоКоординатам(ДанныеКоординат.X, ДанныеКоординат.Y);
	
	#КонецЕсли
		
КонецФункции

&НаКлиенте
//И я рисую стрелку от "ИмяЭлемента1" к "ИмяЭлемента2" в браузере
//@ЯРисуюСтрелкуОтКВБраузере(Парам01,ТабПарам)
Функция ЯРисуюСтрелкуОтКВБраузере(Знач ИмяЭлемента1, Знач ИмяЭлемента2, ТабПарам = Неопределено) Экспорт
	
	color = "red";
	size = "3";
	timeout = "5000";
	startSocket = "up";
	endSocket = "down";
	startSocketGravity = "";
	endSocketGravity = "";
	dropShadow = "true";
	middleLabel = "";
	
	ДанныеПараметров = Новый Соответствие;
	ДанныеПараметров.Вставить("color", color);
	ДанныеПараметров.Вставить("size", size);
	ДанныеПараметров.Вставить("timeout", timeout);
	ДанныеПараметров.Вставить("startSocket", startSocket);
	ДанныеПараметров.Вставить("endSocket", endSocket);
	ДанныеПараметров.Вставить("startSocketGravity", startSocketGravity);
	ДанныеПараметров.Вставить("endSocketGravity", endSocketGravity);
	ДанныеПараметров.Вставить("dropShadow", dropShadow);
	ДанныеПараметров.Вставить("middleLabel", middleLabel);
	
	ДанныеПараметровИзТаблицы(ДанныеПараметров, ТабПарам);
	ДанныеПараметров.Вставить("name1", "%1");
	ДанныеПараметров.Вставить("name2", "%2");
	
	startSocketGravity = ДанныеПараметров.Получить("startSocketGravity");
	Если ЗначениеЗаполнено(startSocketGravity) Тогда
		ДанныеПараметров.Вставить("startSocketGravity", Ванесса.РазложитьСтрокуВМассивПодстрокКлиент(startSocketGravity, ","));
	ИначеЕсли startSocketGravity <> Неопределено Тогда
		ДанныеПараметров.Удалить("startSocketGravity");
	КонецЕсли;
	
	endSocketGravity = ДанныеПараметров.Получить("endSocketGravity");
	Если ЗначениеЗаполнено(endSocketGravity) Тогда
		ДанныеПараметров.Вставить("endSocketGravity", Ванесса.РазложитьСтрокуВМассивПодстрокКлиент(endSocketGravity, ","));
	ИначеЕсли endSocketGravity <> Неопределено Тогда
		ДанныеПараметров.Удалить("endSocketGravity");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяЭлемента1) Тогда
		ИмяЭлемента1 = "selected()";
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяЭлемента2) Тогда
		ИмяЭлемента2 = "selected()";
	КонецЕсли;
	
	Скрипт = "{
		|let p = " + Ванесса.ЗаписатьОбъектJSON(ДанныеПараметров) + ";
		|arrow(
		|" + ?(ПустаяСтрока(ИмяЭлемента1), "selected()", "p.name1") + ", 
		|" + ?(ПустаяСтрока(ИмяЭлемента2), "selected()", "p.name2") + ", 
		|p.timeout, p).setOptions(p);
		|}";
	
	ПодставитьИмяЭлементаВСкрипт("%1", ИмяЭлемента1, Скрипт);
	ПодставитьИмяЭлементаВСкрипт("%2", ИмяЭлемента2, Скрипт);
	
	Ванесса.ВыполнитьJavaScriptБраузер(Скрипт);
	
КонецФункции

&НаКлиенте
Функция ПодставитьИмяЭлементаВСкрипт(ЧтоЗаменить, Значение, Скрипт);
	Если Найти(Значение, "(") > 0 ИЛИ Найти(Значение, "{") > 0 Тогда
		Скрипт = СтрЗаменить(Скрипт, """" + ЧтоЗаменить + """", Значение);
	Иначе	
		Скрипт = СтрЗаменить(Скрипт, ЧтоЗаменить, Значение);
	КонецЕсли;	 
КонецФункции 

&НаКлиенте
//И я рисую рамку вокруг элемента "ИмяЭлемента" в браузере
//@ЯРисуюРамкуВокругЭлементаВБраузере(Парам01,ТабПарам)
Функция ЯРисуюРамкуВокругЭлементаВБраузере(ИмяЭлемента, ТабПарам = Неопределено) Экспорт
	
	color = "red";
	size = "3";
	timeout = "5000";
	
	ДанныеПараметров = Новый Соответствие;
	ДанныеПараметров.Вставить("color", color);
	ДанныеПараметров.Вставить("size", size);
	ДанныеПараметров.Вставить("timeout", timeout);
	
	ДанныеПараметровИзТаблицы(ДанныеПараметров, ТабПарам);
	ДанныеПараметров.Вставить("name", ИмяЭлемента);
	
	Скрипт = "{
		|let p = " + Ванесса.ЗаписатьОбъектJSON(ДанныеПараметров) + ";
		|border(p.name, p.timeout, p);
		|}";
	
	Ванесса.ВыполнитьJavaScriptБраузер(Скрипт);
	
КонецФункции

&НаКлиенте
//И я рисую рамку вокруг нескольких элементов в браузере
//@ЯРисуюРамкуВокругНесколькихЭлементовВБраузере(Парам01,ТабПарам)
Функция ЯРисуюРамкуВокругНесколькихЭлементовВБраузере(ТабПарам) Экспорт
	
	color = "red";
	size = "3";
	timeout = "5000";
	
	ДанныеПараметров = Новый Соответствие;
	ДанныеПараметров.Вставить("color", color);
	ДанныеПараметров.Вставить("size", size);
	ДанныеПараметров.Вставить("timeout", timeout);
	
	ДанныеПараметровИзТаблицы(ДанныеПараметров, ТабПарам);
	
	МассивИменЭлементов = Новый Массив;
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		Если Нрег(СтрокаТабПарам.Кол1) = "elem" Тогда
			МассивИменЭлементов.Добавить(СтрокаТабПарам.Кол2);
		КонецЕсли;
	КонецЦикла;
	ДанныеПараметров.Вставить("elem", МассивИменЭлементов);
	
	Скрипт = "{
		|let p = " + Ванесса.ЗаписатьОбъектJSON(ДанныеПараметров) + ";
		|border(p.elem, p.timeout, p);
		|}";
	
	Ванесса.ВыполнитьJavaScriptБраузер(Скрипт);
	
КонецФункции

&НаКлиенте
//И я рисую рамку вокруг ячейки "Заголовок колонки" в текущей строке таблицы "ИмяТаблицы" в браузере
//@ЯРисуюРамкуВокругЯчейкиВТекущейСтрокеТаблицыВБраузере(ЗаголовокКолонки, ИмяТаблицы, ТабПарам)
Функция ЯРисуюРамкуВокругЯчейкиВТекущейСтрокеТаблицыВБраузере(ЗаголовокКолонки, ИмяТаблицы, ТабПарам) Экспорт
	
	ЯРисуюРамкуВокругЯчейкиВСтрокеТаблицыВБраузере(ЗаголовокКолонки, - 1, ИмяТаблицы, ТабПарам);
	
КонецФункции

&НаКлиенте
//И я рисую рамку вокруг ячейки "Заголовок колонки" в строке "НомерСтроки" таблицы "ИмяТаблицы" в браузере
//@ЯРисуюРамкуВокругЯчейкиВСтрокеТаблицыВБраузере(ЗаголовокКолонки, НомерСтроки, ИмяТаблицы, ТабПарам)
Функция ЯРисуюРамкуВокругЯчейкиВСтрокеТаблицыВБраузере(ЗаголовокКолонки, НомерСтроки, ИмяТаблицы, ТабПарам) Экспорт
	
	ТабПарам.Добавить(Новый Структура("Кол1, Кол2", "columnTitle", ЗаголовокКолонки));
	ТабПарам.Добавить(Новый Структура("Кол1, Кол2", "rowNumber", НомерСтроки));
	ТабПарам.Добавить(Новый Структура("Кол1, Кол2", "tableName", ИмяТаблицы));
	
	ЯРисуюРамкуВокругЯчеекТаблицыВБраузере(ИмяТаблицы, ТабПарам);
	
КонецФункции

&НаКлиенте
//И я рисую рамку вокруг ячеек таблицы "ИмяТаблицы" в браузере
//@ЯРисуюРамкуВокругЯчеекТаблицыВБраузере(ИмяТаблицы, ТабПарам)
Функция ЯРисуюРамкуВокругЯчеекТаблицыВБраузере(ИмяТаблицы, ТабПарам) Экспорт
	
	color = "red";
	size = "3";
	timeout = "5000";
	rowNumber = Неопределено;
	rowNumberEnd = Неопределено;
	columnTitle = Неопределено;
	columnTitleEnd = Неопределено;
	columnNumber = Неопределено;
	columnNumberEnd = Неопределено;
	
	ДанныеПараметров = Новый Соответствие;
	ДанныеПараметров.Вставить("color", color);
	ДанныеПараметров.Вставить("size", size);
	ДанныеПараметров.Вставить("timeout", timeout);
	ДанныеПараметров.Вставить("rowNumber", rowNumber);
	ДанныеПараметров.Вставить("rowNumberEnd", rowNumberEnd);
	ДанныеПараметров.Вставить("columnTitle", columnTitle);
	ДанныеПараметров.Вставить("columnTitleEnd", columnTitleEnd);
	ДанныеПараметров.Вставить("columnNumber", columnNumber);
	ДанныеПараметров.Вставить("columnNumberEnd", columnNumberEnd);
	
	ДанныеПараметровИзТаблицы(ДанныеПараметров, ТабПарам);
	ДанныеПараметров.Вставить("tableName", ИмяТаблицы);
	
	Скрипт = "{
		|let p = " + Ванесса.ЗаписатьОбъектJSON(ДанныеПараметров) + ";
		|p.margin = 4;
		|p.size = parseInt(p.size);
		|let coordinates = tableRegionBoundingRect(p.tableName, p);
		|coordinates.left -= p.margin + p.size;
		|coordinates.top -= p.margin + p.size;
		|coordinates.right += p.margin - p.size;
		|coordinates.bottom += p.margin - p.size;
		|coordinates.width = coordinates.right - coordinates.left;
		|coordinates.height = coordinates.bottom - coordinates.top;
		|
		|border(coordinates, p.timeout, p);
		|}";
	
	Ванесса.ВыполнитьJavaScriptБраузер(Скрипт);
	
КонецФункции

&НаКлиенте
//И я рисую рамку вокруг элемента панели разделов "ИмяЭлемента" в браузере
//@ЯРисуюРамкуВокругЭлементаПанелиРазделовВБраузере(Парам01,ТабПарам)
Функция ЯРисуюРамкуВокругЭлементаПанелиРазделовВБраузере(ИмяЭлемента, ТабПарам = Неопределено) Экспорт
	
	color = "red";
	size = "3";
	timeout = "5000";
	
	ДанныеПараметров = Новый Соответствие;
	ДанныеПараметров.Вставить("color", color);
	ДанныеПараметров.Вставить("size", size);
	ДанныеПараметров.Вставить("timeout", timeout);
	
	ДанныеПараметровИзТаблицы(ДанныеПараметров, ТабПарам);
	ДанныеПараметров.Вставить("name", ИмяЭлемента);
	
	Скрипт = "{
		|let p = " + Ванесса.ЗаписатьОбъектJSON(ДанныеПараметров) + ";
		|let r = theme(p.name).getBoundingClientRect();
		|let coordinates = {left: r.x - 5, top: r.y - 5, width: r.width + 5, height: r.height + 5};
		|border(coordinates, p.timeout, p);
		|}";
	
	Ванесса.ВыполнитьJavaScriptБраузер(Скрипт);
	
КонецФункции

&НаКлиенте
//И я рисую рамку вокруг элемента панели функций "ИмяЭлемента" в браузере
//@ЯРисуюРамкуВокругЭлементаПанелиФункцийВБраузере(Парам01,ТабПарам)
Функция ЯРисуюРамкуВокругЭлементаПанелиФункцийВБраузере(ИмяЭлемента, ТабПарам = Неопределено) Экспорт
	
	color = "red";
	size = "3";
	timeout = "5000";
	
	ДанныеПараметров = Новый Соответствие;
	ДанныеПараметров.Вставить("color", color);
	ДанныеПараметров.Вставить("size", size);
	ДанныеПараметров.Вставить("timeout", timeout);
	
	ДанныеПараметровИзТаблицы(ДанныеПараметров, ТабПарам);
	ДанныеПараметров.Вставить("name", ИмяЭлемента);
	
	Скрипт = "{
		|let p = " + Ванесса.ЗаписатьОбъектJSON(ДанныеПараметров) + ";
		|let r = functionPanelItem(p.name).getBoundingClientRect();
		|let coordinates = {left: r.x - 5, top: r.y - 5, width: r.width + 5, height: r.height + 5};
		|border(coordinates, p.timeout, p);
		|}";
	
	Ванесса.ВыполнитьJavaScriptБраузер(Скрипт);
	
КонецФункции

&НаКлиенте
//И я показываю текст "НужныйТекст" над полем "ИмяПоля" в браузере
//@ЯПоказываюТекстНадПолемВБраузере(Парам01,ТабПарам)
Функция ЯПоказываюТекстНадПолемВБраузере(Текст, ИмяЭлемента, ТабПарам = Неопределено) Экспорт
	
	borderColor = "red";
	backgroundColor = "white";
	timeout = "5000";
	offsetup = "80";
	
	ДанныеПараметров = Новый Соответствие;
	ДанныеПараметров.Вставить("borderColor", borderColor);
	ДанныеПараметров.Вставить("backgroundColor", backgroundColor);
	ДанныеПараметров.Вставить("timeout", timeout);
	ДанныеПараметров.Вставить("offsetup", offsetup);
	
	ДанныеПараметровИзТаблицы(ДанныеПараметров, ТабПарам);
	ДанныеПараметров.Вставить("name", ИмяЭлемента);
	ДанныеПараметров.Вставить("text", Текст);
	
	Скрипт = "
		|{
		|let p = " + Ванесса.ЗаписатьОбъектJSON(ДанныеПараметров) + ";
		|let e = elem(p.name);
		|let r = e.getBoundingClientRect();
		|function rect(text, timeout, options) {
		|	let px = value => (typeof value == 'number' ? value + 'px' : value);
		|	let node = document.createElement('div');
		|	node.innerHTML = text;
		|	node.style.fontSize = '140%';
		|	node.style.position = 'fixed';
		|	node.style.zIndex = 999999;
		|	node.style.borderWidth = '0.2em';
		|	node.style.borderStyle = 'solid';
		|	node.style.borderColor = options.borderColor;
		|	node.style.boxShadow = '0 0 1em #333333';
		|	node.style.backgroundColor = options.backgroundColor;
		|	node.style.padding = '1em';
		|	node.style.borderRadius = '1em';
		|	window.top.document.body.appendChild(node);
		|	if (timeout) setTimeout(() => { if (node) node.remove() }, timeout);
		|	customDrawElements.push(node);
		|	return node;
		|};
		|let t = rect(p.text, p.timeout, p);
		|t.style.left = r.left + 'px';
		|t.style.top = (r.top - p.offsetup) + 'px';
		|}				
		|";
	
	Ванесса.ВыполнитьJavaScriptБраузер(Скрипт);
	
КонецФункции

&НаКлиенте
//"И я показываю заставку ""НужныйТекст"" в браузере
Функция ЯПоказываюЗаставкуВБраузере(Текст, ТабПарам = Неопределено) Экспорт
	Если НЕ Ванесса.ТекущийTestclientЭтоWebКлиент Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ДанныеПараметров = Новый Соответствие;
	ДанныеПараметров.Вставить("color", "white");
	ДанныеПараметров.Вставить("backgroundColor", "blue");
	ДанныеПараметров.Вставить("effect", "1");
	ДанныеПараметров.Вставить("timeout", "3000");
	ДанныеПараметров.Вставить("delay", "2000");
	ДанныеПараметров.Вставить("count", "10");
	ДанныеПараметров.Вставить("fontSize", "200%");
	ДанныеПараметров.Вставить("text", Текст);
	ДанныеПараметровИзТаблицы(ДанныеПараметров, ТабПарам);
	
	delay = ДанныеПараметров.Получить("delay");
	timeout = Число(ДанныеПараметров.Получить("timeout"));
	
	Если ТипЗнч(delay) = Тип("Строка") Тогда
		Попытка
			delay = Число(delay);
		Исключение
			delay = 2000;
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(timeout) = Тип("Строка") Тогда
		Попытка
			timeout = Число(timeout);
		Исключение
			timeout = 3000;
		КонецПопытки;
	КонецЕсли;
	
	Скрипт = "{
		|let p = " + Ванесса.ЗаписатьОбъектJSON(ДанныеПараметров) + ";
		|VanessaVisualEffect.show(p.text, p.timeout, p);
		|}";
	
	Ванесса.ВыполнитьJavaScriptБраузер(Скрипт);
	
	ВремяОжидания = 500;
	КоличествоИтераций = 3 * (timeout + delay * 2) / ВремяОжидания;
	Для Номер = 1 По КоличествоИтераций Цикл
		Ванесса.ВнешняяКомпонентаДляСкриншотов.Пауза(ВремяОжидания);
		Скрипт = "VanessaVisualEffect.completed()";
		Результат = Ванесса.ВыполнитьJavaScriptБраузер(Скрипт);
		Если Результат.result.result.value Тогда
			Прервать;
		КонецЕсли
	КонецЦикла
	
КонецФункции

&НаКлиенте
Функция ЯПоказываюНажатиеМышиВБраузере(ТабПарам) Экспорт
	ДанныеПараметров = Новый Соответствие;
	ДанныеПараметров.Вставить("color", Ванесса.Объект.ЦветПодсветкиКликаМышкиVanessaExt);
	ДанныеПараметров.Вставить("duration", Ванесса.Объект.ДлительностьПодсветкиКликаМышкиVanessaExt);
	ДанныеПараметров.Вставить("radius", Ванесса.Объект.РадиусПодсветкиКликаМышкиVanessaExt);
	ДанныеПараметров.Вставить("width", Ванесса.Объект.ТолщинаПодсветкиКликаМышкиVanessaExt);
	ДанныеПараметров.Вставить("transparency", Ванесса.Объект.ПрозрачностьПодсветкиКликаМышкиVanessaExt);
	ДанныеПараметровИзТаблицы(ДанныеПараметров, ТабПарам);
	
	Ванесса.ВнешняяКомпонентаДляСкриншотов.НачатьВызовПоказатьНажатиеМыши(
		Ванесса.ОписаниеПустогоОбработчика(3),
		Число(ДанныеПараметров["color"]),
		Число(ДанныеПараметров["radius"]),
		Число(ДанныеПараметров["width"]),
		Число(ДанныеПараметров["duration"]),
		Число(ДанныеПараметров["transparency"]),
		0
	);
КонецФункции

&НаКлиенте
//И я закрываю все вкладки браузера
Функция ЯЗакрываюВсеВкладкиБраузера() Экспорт
	Ванесса.МодульРаботаСБраузером().ЗакрытьВкладкиБраузера();
КонецФункции

&НаКлиенте
//И я активизирую текущее окно браузера
Функция ЯАктивизируюТекущееОкноБраузера() Экспорт
	Ванесса.МодульРаботаСБраузером().АктивизироватьОкноБраузера(Ложь);
КонецФункции

&НаКлиенте
//И я активизирую браузер и устанавливаю полноэкранный режим
Функция ЯАктивизируюБраузерИУстанавливаюПолноэкранныйРежим() Экспорт
	Ванесса.МодульРаботаСБраузером().АктивизироватьОкноБраузера(Истина);
КонецФункции

&НаКлиенте
//И я показываю подсказку EnjoyHint у элемента "ИмяЭлемента"
//@ЯПоказываюПодсказкуEnjoyHintУЭлемента(Парам01,ТабПарам)
Функция ЯПоказываюПодсказкуDriverJsУЭлементаВБраузере(Текст, ИмяЭлемента, ТабПарам = Неопределено) Экспорт
	
	animate = "true";
	description = "";
	opacity = "0.5";
	padding = "10";
	position = "bottom";
	timeout = "5000";
	
	ДанныеПараметров = Новый Соответствие;
	ДанныеПараметров.Вставить("animate", animate);
	ДанныеПараметров.Вставить("description", description);
	ДанныеПараметров.Вставить("opacity", opacity);
	ДанныеПараметров.Вставить("padding", padding);
	ДанныеПараметров.Вставить("position", position);
	ДанныеПараметров.Вставить("timeout", timeout);
	
	ДанныеПараметровИзТаблицы(ДанныеПараметров, ТабПарам);
	ДанныеПараметров.Вставить("name", ИмяЭлемента);
	ДанныеПараметров.Вставить("title", Текст);
	
	Скрипт = "{
		|let p = " + Ванесса.ЗаписатьОбъектJSON(ДанныеПараметров) + ";
		|p.timeout = fixNumericOptions(p.timeout, p);
		|if (window.VanessaDriverTimer) clearTimeout(window.VanessaDriverTimer);
		|if (!window.VanessaDriverJs) window.VanessaDriverJs = new Driver({
		|	animate: p.animate,
		|	showButtons: false,
		|	opacity: p.opacity,
		|	padding: p.padding,
		|});
		|let id = ++window.VanessaDriverId;
		|let driver = window.VanessaDriverJs;
		|driver.highlight({
		|	padding: p.padding,
		|	element: elem(p.name),
		|	popover: {
		|		title: p.title,
		|		description: p.description,
		|		position: p.position,
		|	}
		|});
		|
		|let patch_id = 'vanessa-driver-css-patch';
		|let patch = document.getElementById(patch_id);
		|if (!patch) {
		|    patch = document.createElement('style');
		|    patch.id = id;
		|    window.top.document.body.appendChild(patch);
		|}
		|patch.innerText = '#driver-page-overlay{opacity:' +  p.opacity + ' !important}';
		|
		|window.VanessaDriverTimer = setTimeout(() => driver.reset(), p.timeout);
		|}";
	
	Ванесса.ВыполнитьJavaScriptБраузер(Скрипт);
	
КонецФункции

&НаКлиенте
//И я показываю анимированный блок текста в браузере
//@ЯПоказываюАнимированныйБлокТекстаВБраузере(ТабПарам)
Функция ЯПоказываюАнимированныйБлокТекстаВБраузере(ТабПарам, ТабПарам1 = Неопределено, ТабПарам2 = Неопределено, ТабПарам3 = Неопределено, ТабПарам4 = Неопределено) Экспорт
	
	ОбщиеПараметры = Новый Соответствие;
	ОбщиеПараметры.Вставить("effect", "fold");
	ОбщиеПараметры.Вставить("duration", 2000);
	ОбщиеПараметры.Вставить("timeout", 4000);
	ОбщиеПараметры.Вставить("options-size", 8);
	ОбщиеПараметры.Вставить("options-horizFirst", false);
	ОбщиеПараметры.Вставить("css-width", "100%");
	ОбщиеПараметры.Вставить("blocks", Новый Массив);
	
	ДанныеПараметровИзТаблицы(ОбщиеПараметры, ТабПарам);
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ОбщиеПараметры);
	
	Для Сч = 1 По 4 Цикл
		ТаблицаПараметровБлока = Вычислить("ТабПарам" + Сч);
		Если ТаблицаПараметровБлока = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ПараметрыБлока = Новый Соответствие;
		ПараметрыБлока.Вставить("text", "");
		ПараметрыБлока.Вставить("css-height", "3rem");
		ПараметрыБлока.Вставить("css-font-family", "Lato, sans-serif");
		ПараметрыБлока.Вставить("css-font-size", "2rem");
		ПараметрыБлока.Вставить("css-color", "white");
		ПараметрыБлока.Вставить("css-background-color", "red");
		
		ДанныеПараметровИзТаблицы(ПараметрыБлока, ТаблицаПараметровБлока);
		
		Если ПараметрыБлока["css-line-height"] = Неопределено Тогда
			ПараметрыБлока.Вставить("css-line-height", ПараметрыБлока["css-height"]);
		КонецЕсли;
		
		ОбщиеПараметры["blocks"].Добавить(ПараметрыБлока);
		МассивПараметров.Добавить(ПараметрыБлока);
	КонецЦикла;
	
	ИменаГруппПараметров = Новый Массив;
	ИменаГруппПараметров.Добавить("css");
	ИменаГруппПараметров.Добавить("options");
	
	Для каждого ЗначенияПараметров Из МассивПараметров Цикл
		МассивПараметровКУдалению = Новый Массив;
		
		Для каждого ИмяГруппыПараметров Из ИменаГруппПараметров Цикл
			ПрефиксГруппыПараметров = ИмяГруппыПараметров + "-";
			ДлинаПрефикса = СтрДлина(ПрефиксГруппыПараметров);
			
			ЗначенияГруппыПараметров = Новый Соответствие;
			Для каждого КлючИЗначение Из ЗначенияПараметров Цикл
				ИмяПараметра = КлючИЗначение.Ключ;
				Если Лев(ИмяПараметра, ДлинаПрефикса) = ПрефиксГруппыПараметров Тогда
					ЗначениеПараметра = КлючИЗначение.Значение;
					Попытка
						ЗначениеПараметра = Число(ЗначениеПараметра);
					Исключение
						Попытка
							ЗначениеПараметра = Булево(ЗначениеПараметра);
						Исключение
						КонецПопытки;
					КонецПопытки;
					
					ЗначенияГруппыПараметров.Вставить(Сред(ИмяПараметра, ДлинаПрефикса + 1), ЗначениеПараметра);
					МассивПараметровКУдалению.Добавить(ИмяПараметра);
				КонецЕсли;
			КонецЦикла;
			ЗначенияПараметров.Вставить(ИмяГруппыПараметров, ЗначенияГруппыПараметров);
		КонецЦикла;
		
		Для каждого ИмяПараметраКУдалению Из МассивПараметровКУдалению Цикл
			ЗначенияПараметров.Удалить(ИмяПараметраКУдалению);
		КонецЦикла;
	КонецЦикла;
	
	JSONПараметры = Ванесса.ЗаписатьОбъектJSON(ОбщиеПараметры);
	
	Скрипт = "
		|{
		|	let params = " + JSONПараметры + ";
		|	let container = document.createElement('div');
		|	container.style.position = 'fixed';
		|	container.style.zIndex = 999999;
		|	container.style.display = 'none';
		|	let jqContainer = $(container);
		|	
		|	if(params.css) {
		|		for(let prop in params.css)
		|			jqContainer.css(prop, params.css[prop]);
		|	}
		|	
		|	for(let index in params.blocks) {
		|		let blockParams = params.blocks[index];
		|		
		|		let block = document.createElement('div');
		|		block.innerHTML = blockParams.text;
		|		if(blockParams.css) {
		|			let jqBlock = $(block);
		|			for(let prop in blockParams.css)
		|				jqBlock.css(prop, blockParams.css[prop]);
		|		}
		|		container.appendChild(block);
		|	}
		|	
		|	top.document.body.appendChild(container);
		|	customDrawElements.push(container);
		|	
		|	jqContainer.show(params.effect, params.options, params.duration, () => {
		|		setTimeout(() => {
		|			jqContainer.hide(params.effect, params.options, params.duration, () => {
		|				container.remove();
		|			});
		|		}, params.timeout);
		|	});
		|}";
	
	ОбщаяПродолжительность = Число(ОбщиеПараметры["duration"]) * 2 + Число(ОбщиеПараметры["timeout"]);
	ВременноОтключитьБраузерОтТестМенеджера(ОбщаяПродолжительность);
	
	Ванесса.ВыполнитьJavaScriptБраузер(Скрипт);
	
КонецФункции

&НаКлиенте
Функция ВременноОтключитьБраузерОтТестМенеджера(ДлительностьОтключения)
	
	Ванесса.ВыполнитьJavaScriptБраузер("
		|	pauseConnectionToTestManager();
		|	setTimeout(() => {
		|		resumeConnectionToTestManager();
		|	}, " + Формат(ДлительностьОтключения, "ЧГ=") + ");", Истина);
	
КонецФункции

&НаКлиенте
//И я рисую рамку по координатам в браузере
//@ЯРисуюРамкуВокругЯчеекТаблицыВБраузере(ИмяТаблицы, ТабПарам)
Функция ЯРисуюРамкуПоКоординатамВБраузере(ТабПарам) Экспорт
	
	ДанныеПараметров = Новый Соответствие;
	ДанныеПараметров.Вставить("color", 		"red");
	ДанныеПараметров.Вставить("size", 		"3");
	ДанныеПараметров.Вставить("timeout", 	"5000");
	ДанныеПараметров.Вставить("left", 		100);
	ДанныеПараметров.Вставить("top", 		100);
	ДанныеПараметров.Вставить("width", 		100);
	ДанныеПараметров.Вставить("height", 	100);
	ДанныеПараметров.Вставить("margin", 	0);
	
	ДанныеПараметровИзТаблицы(ДанныеПараметров, ТабПарам);
	
	ДанныеПараметров["size"] 	= Число(ДанныеПараметров["size"]);
	ДанныеПараметров["timeout"] = Число(ДанныеПараметров["timeout"]);
	ДанныеПараметров["left"] 	= Число(ДанныеПараметров["left"]);
	ДанныеПараметров["top"] 	= Число(ДанныеПараметров["top"]);
	ДанныеПараметров["width"] 	= Число(ДанныеПараметров["width"]) - ДанныеПараметров["size"];
	ДанныеПараметров["height"] 	= Число(ДанныеПараметров["height"]) - ДанныеПараметров["size"];
	ДанныеПараметров["right"] 	= ДанныеПараметров["left"] + ДанныеПараметров["width"];
	ДанныеПараметров["bottom"] 	= ДанныеПараметров["top"] + ДанныеПараметров["height"];
		
	Скрипт = "{
		|let p = " + Ванесса.ЗаписатьОбъектJSON(ДанныеПараметров) + ";
		|border(p, p.timeout, p);
		|}";
	
	Ванесса.ВыполнитьJavaScriptБраузер(Скрипт);
	
КонецФункции

&НаКлиенте
//И я нажимаю на подменю "Заголовок подменю" командной панели формы в браузере
//@ЯНажимаюНаПодменюКоманднойПанелиФормыВБраузере(Парам01)
Функция ЯНажимаюНаПодменюКоманднойПанелиФормыВБраузере(ИмяПодменю,ИскатьПоИмени = Ложь) Экспорт
	ТекстОшибки = "";
	БылаОшибка = Ложь;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		ТекстОшибки = "";
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ТекущаяФормаЭлемента",Неопределено);
		ДопПараметры.Вставить("ИсключитьГруппы",Ложь);
		ДопПараметры.Вставить("КоличествоПопыток", 1);
		
		Попытка
			Подменю = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПодменю, ИскатьПоИмени, Истина, Тип("ТестируемаяГруппаФормы"),ДопПараметры);
			
			Если Подменю = Неопределено Тогда
				Если ИскатьПоИмени Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Подменю с именем <%1> не найдено.");
				Иначе	
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Подменю с заголовком <%1> не найдено.");
				КонецЕсли;	 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПодменю); 
				
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			ТекущаяФорма = ДопПараметры.ТекущаяФормаЭлемента;
			
			ПредыдущийЭлементФормы = Неопределено;
			ТекущийЭлементФормы    = Неопределено;
			
			Попытка
				ПредыдущийЭлементФормы = ТекущаяФорма.ПолучитьТекущийЭлемент();
			Исключение
			КонецПопытки;
			
			Подменю.Активизировать();
			
			Попытка
				ТекущийЭлементФормы = ТекущаяФорма.ПолучитьТекущийЭлемент();
			Исключение
			КонецПопытки;
			
			Ванесса.НажатьНаКнопкуФормы(Подменю, , Истина);	
	
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И я нажимаю на подменю с именем "ИмяПодменю" командной панели формы в браузере
//@ЯНажимаюНаПодменюСИменемКоманднойПанелиФормыВБраузере(Парам01)
Функция ЯНажимаюНаПодменюСИменемКоманднойПанелиФормыВБраузере(ИмяПодменю) Экспорт

	ЯНажимаюНаПодменюКоманднойПанелиФормыВБраузере(ИмяПодменю, Истина);	
	
КонецФункции

&НаКлиенте
//И я показываю анимацию загрузки в браузере
//@ЯПоказываюАнимациюЗагрузкиВБраузере(ТабПарам)
Функция ЯПоказываюАнимациюЗагрузкиВБраузере(ТабПарам) Экспорт
	
	ДанныеПараметров = Новый Соответствие;
	ДанныеПараметров.Вставить("stroke", "#FC46AD");
	
	ДанныеПараметровИзТаблицы(ДанныеПараметров, ТабПарам);
	
	Скрипт = "{
	|let parent = document.createElement('div');
	|parent.style.position = 'absolute';
	|parent.style.height = '100%';
	|parent.style.width = '100%';
	|parent.style.overflow = 'hidden';
	|parent.style.zIndex = 99999;
	|
	|document.body.appendChild(parent);
	|
	|new mojs.Shape({
	|parent:           parent,
	|shape:            'circle',
	|stroke:           ""%1"",
	|strokeDasharray:  '125, 125',
	|strokeDashoffset: {'0': '-125'},
	|strokeWidth:      4,
	|fill:             'none',
	|left:             '50%',
	|top:              '50%',
	|angle:            {'-90': '270'},
	|radius:           20,
	|isShowStart:      true,
	|duration:         2000,
	|easing:           'back.in',
	|})
	|.then({
	|angle:            {'-90': '270'},
	|strokeDashoffset: {'-125': '-250'},
	|duration:         3000,
	|easing:           'cubic.out',
	|repeat:           0,
	|onComplete:       () => parent.remove()
	|}).play();
	|}";
	
	Скрипт = СтрЗаменить(Скрипт, "%1", ДанныеПараметров["stroke"]);
	
	Ванесса.ВыполнитьJavaScriptБраузер(Скрипт);
	
КонецФункции

&НаКлиенте
//И я закрываю вкладку браузера с заголовком "Заголовок"
//@ЯЗакрываюВкладкуБраузераСЗаголовком(Парам01)
Функция ЯЗакрываюВкладкуБраузераСЗаголовком(Парам01) Экспорт
	Ванесса.МодульРаботаСБраузером().ЗакрытьВкладкуБраузераСЗаголовком(Парам01);
КонецФункции

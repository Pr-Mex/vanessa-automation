//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;

&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;

&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
Перем МаксКоличествоСекундПодключения,ТекКоличествоСекундПодключения;

// Делает отключение модуля
&НаКлиенте
Функция ОтключениеМодуля() Экспорт

	Ванесса = Неопределено;
	Контекст = Неопределено;
	КонтекстСохраняемый = Неопределено;

КонецФункции

// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
&НаКлиенте
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования)","ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования","И Я подключаю клиент тестирования ""ИмяПрофиляTestClient"" из таблицы клиентов тестирования","Подключение нового сеанса, если он не был запущен ранее.","Подключение TestClient.Новое подключение к базе.Текущая база.Устаревшее");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОтИмениСПаролем(ИмяКлиентаТестирования,Логин,Пароль)","ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОтИмениСПаролем","Когда Я подключаю клиент тестирования ""ИмяКлиентаТестирования"" из таблицы клиентов тестирования от имени ""Логин"" с паролем ""Пароль""","Подключение нового сеанса, если он не был запущен ранее. Необходимо указать логин и пароль.","Подключение TestClient.Новое подключение к базе.Текущая база.Устаревшее");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюКлиентТестированияСПараметрами(ТабПарам)","ЯПодключаюКлиентТестированияСПараметрами",
		"Когда Я подключаю клиент тестирования с параметрами:
     	|    | 'Имя'             | 'Синоним'        | 'Тип клиента' |  'Порт' | 'Строка соединения'                     | 'Логин' | 'Пароль' | 'Запускаемая обработка' |  'Дополнительные параметры строки запуска'  |
     	|    | 'ИмяПрофиля'      | 'СинонимПрофиля' | 'Тонкий'      |  '1538' | 'Srvr=""localhost:1941"";Ref=""Test"";' | 'Админ' | 'Админ'  | 'c:\СуперОбработка.epf' |  '/UC'                                      |"
		,"Подключает TestClient. Все параметры подключения указываются в таблице. Запускает новый сеанс, если не найден запущенный ранее.
		|Если нужно переподключить уже запущеный клиент тестирования нельзя передавать в шаг значение порта.", "Подключение TestClient.Новое подключение к базе.Произвольная база");
		
		Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюКлиентТестированияСПараметрамиОдинНаИнформационнуюБазу(ТабПарам)","ЯПодключаюКлиентТестированияСПараметрамиОдинНаИнформационнуюБазу",
		"Когда Я подключаю клиент тестирования с параметрами один на информационную базу:
     	|    | 'Имя'             | 'Синоним'        | 'Порт' | 'Строка соединения'                     | 'Логин' | 'Пароль' | 'Запускаемая обработка' |  'Дополнительные параметры строки запуска'  |
     	|    | 'ИмяПрофиля'      | 'СинонимПрофиля' | '1538' | 'Srvr=""localhost:1941"";Ref=""Test"";' | 'Админ' | 'Админ'  | 'c:\СуперОбработка.epf' |  '/UC'                                      |"
		,"Подключает TestClient. Все параметры подключения указываются в таблице. Запускает новый сеанс, если не найден запущенный ранее. Все другие сеансы с информационной базой предварительно закрываются.
		|Если нужно переподключить уже запущеный клиент тестирования нельзя передавать в шаг значение порта.", "Подключение TestClient.Новое подключение к базе.Произвольная база");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюУжеЗапущенныйКлиентТестирования(Парам01)","ЯПодключаюУжеЗапущенныйКлиентТестирования","Затем Я подключаю уже запущенный клиент тестирования ""ИмяПрофиля""","Подключает запущенный ранее клиент тестирования, который мог быть запущен из другой программы. Если сеанс не найден - выдёт исключение.", "Подключение TestClient.Работа с подключенными TestClient.Активизировать TestClient");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюУжеЗапущенныйКлиентТестированияСПараметрами(ТабПарам)","ЯПодключаюУжеЗапущенныйКлиентТестированияСПараметрами",
		"Когда Я подключаю уже запущенный клиент тестирования с параметрами:
     	|    | 'Имя'             | 'Синоним'        | 'Порт' | 'Строка соединения'                     | 'Логин' | 'Пароль' | 'Запускаемая обработка' |  'Дополнительные параметры строки запуска'  |
     	|    | 'ИмяПрофиля'      | 'СинонимПрофиля' | '1538' | 'Srvr=""localhost:1941"";Ref=""Test"";' | 'Админ' | 'Админ'  | 'c:\СуперОбработка.epf' |  '/UC'                                      |"
		,"Подключает запущенный ранее клиент тестирования, который мог быть запущен из другой программы. Если сеанс не найден - выдёт исключение.", "Подключение TestClient.Работа с подключенными TestClient.Активизировать TestClient");
		
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюУжеЗапущенныйКлиентТестированияСПараметрамиВТечениеСекунд(Парам01,ТабПарам)","ЯПодключаюУжеЗапущенныйКлиентТестированияСПараметрамиВТечениеСекунд",
		"Когда Я подключаю уже запущенный клиент тестирования с параметрами в течение 10 секунд:
     	|    | 'Имя'             | 'Синоним'        | 'Порт' | 'Строка соединения'                     | 'Логин' | 'Пароль' | 'Запускаемая обработка' |  'Дополнительные параметры строки запуска'  |
     	|    | 'ИмяПрофиля'      | 'СинонимПрофиля' | '1538' | 'Srvr=""localhost:1941"";Ref=""Test"";' | 'Админ' | 'Админ'  | 'c:\СуперОбработка.epf' |  '/UC'                                      |"
		,"Подключает запущенный ранее клиент тестирования, который мог быть запущен из другой программы. Если сеанс не найден - выдёт исключение.", "Подключение TestClient.Работа с подключенными TestClient.Активизировать TestClient");
		
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯКопируюТекущийПрофильTestClientСУстановкойПараметров(ТабПарам)","ЯКопируюТекущийПрофильTestClientСУстановкойПараметров",
		"Когда Я копирую текущий профиль TestClient с установкой параметров:
     	|    | 'Имя'             | 'Синоним'        | 'Тип клиента' | 'Порт' | 'Строка соединения'                     | 'Логин' | 'Пароль' | 'Запускаемая обработка' |  'Дополнительные параметры строки запуска'  |
     	|    | 'ИмяПрофиля'      | 'СинонимПрофиля' | 'Тонкий'      | '1538' | 'Srvr=""localhost:1941"";Ref=""Test"";' | 'Админ' | 'Админ'  | 'c:\СуперОбработка.epf' |  '/UC'                                      |"
		,"Копирует текущий активный профиль TestClient и устанавилвает в копии новые значение параметров. Если профиль с требуемым именем уже есть, то он будет перезаписан, иначе будет создан новый. Все параметры подключения указываются в таблице Gherkin, в которой должно быть две строки: первая строка с именами параметров, вторая строка со значениями параметров.", "Подключение TestClient.Новое подключение к базе.Произвольная база");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрываюСеансTESTCLIENT()","ЯЗакрываюСеансTESTCLIENT","И я закрываю сеанс TESTCLIENT","", ""); //Устаревшее
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрываюСеансТекущегоКлиентаТестирования()","ЯЗакрываюСеансТекущегоКлиентаТестирования","И я закрываю сеанс текущего клиента тестирования","Закрывает активный сеанс клиента тестирования, если он есть. При этом происходит попытка закрыть модальные диалоги, если они появляются.","Подключение TestClient.Работа с подключенными TestClient.Закрыть сеанс TestClient");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрываюГлавноеОкноTestClient()","ЯЗакрываюГлавноеОкноTestClient","И я закрываю главное окно TestClient","Закрывает главное окно TestClient. Равносильно нажатию на крестик на главном окне приложения. Обработку диалогов, которые могут возникнуть при закрыти приложения, должен обеспечить сам сценарий.","Подключение TestClient.Работа с подключенными TestClient.Закрыть главное окно сеанса");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюTestClientЛогинПароль(Парам01,Парам02,Парам03)","ЯПодключаюTestClientЛогинПароль","И я подключаю TestClient ""ИмяКлиента"" логин ""Логин"" пароль ""Пароль""","Позволяет подключить TestClient с нужным логином и паролем. Если указанный профиль уже существует, то будет использован переданный профиль. Если такого профиля нет, то он будет создан на основе текущего подключенного клиента тестирования (если он есть) или профиля ""Этот клиент"", который в себе содержит строку подключения к тойже базе, в которой запущен TestManager","Подключение TestClient.Новое подключение к базе.Текущая база");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯАктивизируюTestClient(Парам01)","ЯАктивизируюTestClient","И я активизирую TestClient ""ИмяПрофиляTestClient""","Позволяет переключить контекст на нужный TestClient. Поиск TestClient в таблице подключений просиходит по имени или синониму.","Подключение TestClient.Работа с подключенными TestClient.Активизировать TestClient");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрываюTestClient(Парам01)","ЯЗакрываюTestClient","И я закрываю TestClient ""ИмяПрофиляTestClient""","Закрывает указанный TestClient Перед этим закрывает все окна в нём.","Подключение TestClient.Работа с подключенными TestClient.Закрыть сеанс TestClient");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюПрофильTestClient(Парам01)","ЯПодключаюПрофильTestClient","И я подключаю профиль TestClient ""ИмяПрофиляTestClient""","Позволяет подключить TestClient по имени уже существующего профиля","Подключение TestClient.Новое подключение к базе.Произвольная база");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюПрофильTestClientОдинНаИнформационнуюБазу(Парам01)","ЯПодключаюПрофильTestClientОдинНаИнформационнуюБазу","И я подключаю профиль TestClient ""ИмяПрофиляTestClient"" один на информационную базу","Позволяет подключить TestClient по имени уже существующего профиля, все другие сеансы с информационной базой предварительно закрываются","Подключение TestClient.Новое подключение к базе.Произвольная база");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрылНовыйСеансTestClientИлиПодключилУжеСуществующий()","ЯОткрылНовыйСеансTestClientИлиПодключилУжеСуществующий","Дано Я открыл новый сеанс TestClient или подключил уже существующий","Открывает новый Клиент тестирования для профиля указанного в текущей строке таблицы клиентов тестирования. Если строка в таблице клиентов тестирования не менялась, то активной строкой будет первая строка, в которой всегда содержится профиль для подключения к той же базе, в которой запущен сеанс Менеджера тестирования.","Подключение TestClient.Новое подключение к базе.Текущая база");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрылНовыйСеансTestClientИлиПодключилУжеСуществующийБезЗагрузкиНастроек()","ЯОткрылНовыйСеансTestClientИлиПодключилУжеСуществующийБезЗагрузкиНастроек","Дано Я открыл новый сеанс TestClient или подключил уже существующий без загрузки настроек");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрылНовыйСеансTestClientКакTestManagerИлиПодключилУжеСуществующийБезЗагрузкиНастроек()","ЯОткрылНовыйСеансTestClientКакTestManagerИлиПодключилУжеСуществующийБезЗагрузкиНастроек","Дано Я открыл новый сеанс TestClient как TestManager или подключил уже существующий без загрузки настроек","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрылСеансTestClientОтИмениСПаролемИлиПодключаюУжеСуществующий(Логин,Пароль)","ЯОткрылСеансTestClientОтИмениСПаролемИлиПодключаюУжеСуществующий","Дано Я открыл сеанс TestClient от имени ""МойПользователь"" с паролем ""МойПароль"" или подключаю уже существующий","Позволяет подключить TestClient с нужным логином и паролем в тойже базе, в которой запущен TestManager, с помощью профиля ""Этот клиент"". При этом предыдущие подключения к этому профилю должны быть закрыты.");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУстанавливаюТекущемуTestClientСиноним(Парам01)","ЯУстанавливаюТекущемуTestClientСиноним","И я устанавливаю текущему TestClient синоним ""МойСиноним""","Позволяет подключить указать дополнительный синоним для текущего профиля TestClient. Синоним может использовать как дополнительное имя сеанса TestClient.","Подключение TestClient.Работа с подключенными TestClient.Установить синоним");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеКлиентовТестированияЯАктивизируюСтроку(Парам01)","ВТаблицеКлиентовТестированияЯАктивизируюСтроку","И в таблице клиентов тестирования я активизирую строку 'ИмяКлиентаТестирования'","Актвизирует строку с нужным клиентом тестирования. Поиск строки просходит с начала по имени, затем по синониму.","Подключение TestClient.Прочее.Активизировать строку");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЧитаюДанныеТекущегоПрофиляКлиентаТестирования()","ЯЧитаюДанныеТекущегоПрофиляКлиентаТестирования","И я читаю данные текущего профиля клиента тестирования","Считывает данные текущего профиля (активная строка в таблице клиентов тестирования) клиента тестировани в переменные: ИмяКлиентаТестирования, СинонимКлиентаТестирования, ТипКлиентаТестирования, ПутьКИнфобазеКлиентаТестирования, ПортЗапускаКлиентаТестирования, ДопПараметрыКлиентаТестирования, ИмяКомпьютераКлиентаТестирования, PIDКлиентаТестирования, ДескрипторОкнаКлиентаТестирования","Подключение TestClient.Работа с подключенными TestClient.Чтение данных клиента тестирования");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯАктивизируюОкноТекущегоКлиентаТестирования()","ЯАктивизируюОкноТекущегоКлиентаТестирования","И я активизирую окно текущего клиента тестирования","Активизирует главное окно текущего клиента тестирования. Использует VanessaExt.","Подключение TestClient.Работа с подключенными TestClient.Активизировать TestClient");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапускаюСценарийОткрытияTestClientИлиПодключаюУжеСуществующий()","ЯЗапускаюСценарийОткрытияTestClientИлиПодключаюУжеСуществующий","Дано Я запускаю сценарий открытия TestClient или подключаю уже существующий","Подключает новый TestClient если необходимо и закрывает в нём все окна.","Подключение TestClient.Новое подключение к базе.Текущая база");
	
	
	Возврат ВсеТесты;
КонецФункции


///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Функция выполняется перед началом каждого сценария
Функция ПередНачаломСценария() Экспорт
	
КонецФункции

&НаКлиенте
// Функция выполняется перед окончанием каждого сценария
Функция ПередОкончаниемСценария() Экспорт
	
КонецФункции

///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
Функция ОбработчикЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования() Экспорт
	Ванесса.ПродолжитьВыполнениеШагов();
КонецФункции 

&НаКлиенте
Функция ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОсновной(ИмяКлиентаТестирования, ЗапускатьКлиентТестирования = Истина)
	Если ИмяКлиентаТестирования = "" Тогда
		ИмяКлиентаТестирования = "Этот клиент";
	КонецЕсли;
	
	ПодключитьTestClientИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования,,,ЗапускатьКлиентТестирования);
КонецФункции 

&НаКлиенте
//И Я подключаю клиент тестирования "ИмяКлиентаТестирования" из таблицы клиентов тестирования
//@ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования)
Функция ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования,ЗапускатьКлиентТестирования = Истина) Экспорт
	
	ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОсновной(ИмяКлиентаТестирования,ЗапускатьКлиентТестирования);
	
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ПодключитьОбработчикОжидания("ОбработчикЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования",0.1,Истина);
КонецФункции

&НаКлиенте
Функция ПодключитьTestClientИзТаблицыКлиентовТестирования(ИмяTestClient, Знач Логин = "", Знач Пароль = "",ЗапускатьКлиентТестирования = Истина)
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	ДопПараметры = "";
	Если ЗначениеЗаполнено(Логин) Тогда
		ДопПараметры = ДопПараметры + "/N""" + Логин + """ ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Пароль) Тогда
		ДопПараметры = ДопПараметры + "/P""" + Пароль + """ ";
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗапускатьКлиентТестирования",ЗапускатьКлиентТестирования);
	
	Ванесса.ЗаписатьЛогВЖРИнформация("ПодключитьTestClientИзТаблицыКлиентовТестирования", "ИмяTestClient="+ИмяTestClient);
	
	СтрокаОшибки = "";
	ЕстьПодключение = Ванесса.ПолучитьКлиентаТестирования(ИмяTestClient, ДопПараметры,СтрокаОшибки,ДополнительныеПараметры);
	Если Не ЕстьПодключение Тогда
		Ванесса.ОбработатьОшибкуПодключенияTestClient();
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не удалось подключить клиент тестирования. %1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ДанныеКлиентовТестирования = Ванесса.ДанныеКлиентовТестирования;
	Для Каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
		Если СтрокаДанныеКлиентовТестирования.Имя = ИмяTestClient Тогда
			СтрокаДанныеКлиентовТестирования.Подключен = Истина;
			Ванесса.Элементы.ДанныеКлиентовТестирования.ТекущаяСтрока = СтрокаДанныеКлиентовТестирования.ПолучитьИдентификатор();
		Иначе	
			СтрокаДанныеКлиентовТестирования.Подключен = Ложь;
		КонецЕсли;	 
	КонецЦикла;	
	
	ОбновитьДанныеВПодключенныеTestClient(ИмяTestClient);
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ОбработчикЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОтИмениСПаролем() Экспорт
	Ванесса.ПродолжитьВыполнениеШагов();
КонецФункции 

&НаКлиенте
//Когда Я подключаю клиент тестирования "ИмяКлиентаТестирования" из таблицы клиентов тестирования от имени "Логин" с паролем "Пароль"
//@ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОтИмениСПаролем(ИмяКлиентаТестирования,Логин,Пароль)
Функция ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОтИмениСПаролем(ИмяКлиентаТестирования, Знач Логин = "", Знач Пароль = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяКлиентаТестирования) Тогда
		ИмяКлиентаТестирования = "Этот клиент";
	КонецЕсли;
	
	Логин = СокрЛП(Логин);
	Пароль = СокрЛП(Пароль);
	
	Если НЕ ПодключитьTestClientИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования, Логин, Пароль) Тогда
		Ванесса.ОбработатьОшибкуПодключенияTestClient();
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось подключить TestClient.");
	КонецЕсли;
	
	Ванесса.ЗапретитьВыполнениеШагов();
	ПодключитьОбработчикОжидания("ОбработчикЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОтИмениСПаролем",0.1,Истина);
КонецФункции

&НаКлиенте
//Когда Я копирую текущий профиль TestClient с установкой параметров
//@ЯКопируюТекущийПрофильTestClientСУстановкойПараметров(ТабПарам)
Функция ЯКопируюТекущийПрофильTestClientСУстановкойПараметров(ТабПарам) Экспорт
	Если ТабПарам.Количество() <> 2 Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Должно быть передано 2 строки");
	КонецЕсли;
	
	ТекущиеДанные = Ванесса.ТекущиеДанныеКлиентаТестирования();
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущееИмяПрофиля = ТекущиеДанные.Имя;
	Иначе	
		ТекущееИмяПрофиля = "Этот клиент";
		Если КонтекстСохраняемый.Свойство("ТекущийПрофильTestClient") Тогда
			Если КонтекстСохраняемый.ТекущийПрофильTestClient <> Неопределено Тогда
				ТекущееИмяПрофиля = КонтекстСохраняемый.ТекущийПрофильTestClient;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	ДанныеКлиентовТестирования = Ванесса.ДанныеКлиентовТестирования;

	Отбор = Новый Структура;
	Отбор.Вставить("Имя", ТекущееИмяПрофиля);
	НайденныеСтрокиИмя = ДанныеКлиентовТестирования.НайтиСтроки(Отбор);
	Если НайденныеСтрокиИмя.Количество() = 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Профиль с именем <%1> не найден.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекущееИмяПрофиля); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	
	
	ТекущаяСтрокаПрофиля = НайденныеСтрокиИмя[0];
	
	НовоеИмяПрофиля = Неопределено;
	Для Каждого ЗначениеКолонки Из ТабПарам[0] Цикл
		ЗначениеКолонкиНрег = НРег(ЗначениеКолонки.Значение);
		
		Если ЗначениеКолонкиНрег = НРег("Имя подключения")
		ИЛИ  ЗначениеКолонкиНрег = НРег("Имя")
		ИЛИ  ЗначениеКолонкиНрег = НРег("Name")
		Тогда
			НовоеИмяПрофиля = ТабПарам[1][ЗначениеКолонки.Ключ];
		КонецЕсли;	 
	КонецЦикла;	
	
	Если НовоеИмяПрофиля = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице параметров не было передано имя нового профиля. Колонка <Имя подключения>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекущееИмяПрофиля); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	
	Отбор = Новый Структура;
	Отбор.Вставить("Имя", НовоеИмяПрофиля);
	НайденныеСтрокиИмя = ДанныеКлиентовТестирования.НайтиСтроки(Отбор);
	Если НайденныеСтрокиИмя.Количество() > 0 Тогда
		СтрокаСНовымПрофилем = НайденныеСтрокиИмя[0];
		ЗаполнитьЗначенияСвойств(СтрокаСНовымПрофилем,ТекущаяСтрокаПрофиля);
	Иначе	
		СтрокаСНовымПрофилем = Ванесса.ДанныеКлиентовТестирования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСНовымПрофилем,ТекущаяСтрокаПрофиля);
		СтрокаСНовымПрофилем.ЭтотКлиент = Ложь;
	КонецЕсли;	 
	
	СтрокаСНовымПрофилем.Имя = НовоеИмяПрофиля;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ЗаполнитьДанныеИзПрофиля",Истина);
	ДопПараметры.Вставить("ПрофильДляЗаполнения",СтрокаСНовымПрофилем);
	ДопПараметры.Вставить("ДанныеДляКопирования",ТекущаяСтрокаПрофиля);
	ИмяКлиентаТестирования = ПолучитьПараметрыПодключения(ТабПарам,ДопПараметры);
КонецФункции

&НаКлиенте
Функция ОбработчикЯПодключаюКлиентТестированияСПараметрами() Экспорт
	Ванесса.ПродолжитьВыполнениеШагов();
КонецФункции 

&НаКлиенте
//Когда Я подключаю клиент тестирования с параметрами:
//@ЯПодключаюКлиентТестированияСПараметрами(ТабПарам)
Функция ЯПодключаюКлиентТестированияСПараметрами(ТабПарам) Экспорт
	Если ТабПарам.Количество() <> 2 Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Должно быть передано 2 строки");
	КонецЕсли;
	//ТабПарам = Ванесса.ПолучитьЗначенияТаблицыGherkinИзКонтекста(ТабПарам);
	ИмяКлиентаТестирования = ПолучитьПараметрыПодключения(ТабПарам);

	ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОсновной(ИмяКлиентаТестирования);
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ПодключитьОбработчикОжидания("ОбработчикЯПодключаюКлиентТестированияСПараметрами",0.1,Истина);
КонецФункции

&НаКлиенте
//Когда Я подключаю клиент тестирования с параметрами один на информационную базу:
//@ЯПодключаюКлиентТестированияСПараметрамиОдинНаИнформационнуюБазу(ТабПарам)
Функция ЯПодключаюКлиентТестированияСПараметрамиОдинНаИнформационнуюБазу(ТабПарам) Экспорт
	Если ТабПарам.Количество() <> 2 Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Должно быть передано 2 строки");
	КонецЕсли;
	
	ИмяКлиентаТестирования = ПолучитьПараметрыПодключения(ТабПарам);
	
	ДанныеЗапускаКлиентаТестирования = Ванесса.НайтиДанныеЗапускаКлиентаТестирования(ИмяКлиентаТестирования);
	
	Если ДанныеЗапускаКлиентаТестирования = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не найден профиль клиента тестирования <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКлиентаТестирования);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ЗакрытьВсеСеансыИнформационнойБазы(ДанныеЗапускаКлиентаТестирования.Имя, ДанныеЗапускаКлиентаТестирования.ПутьКИнфобазе);
	
	ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОсновной(ИмяКлиентаТестирования);
	
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ПодключитьОбработчикОжидания("ОбработчикЯПодключаюКлиентТестированияСПараметрами",0.1,Истина);
КонецФункции

&НаКлиенте
Функция ОбработчикЯПодключаюУжеЗапущенныйКлиентТестирования() Экспорт
	Ванесса.ПродолжитьВыполнениеШагов();
КонецФункции 

&НаКлиенте
//Затем Я подключаю уже запущенный клиент тестирования "ИмяПрофиля"
//@ЯПодключаюУжеЗапущенныйКлиентТестирования(Парам01)
Функция ЯПодключаюУжеЗапущенныйКлиентТестирования(ИмяКлиентаТестирования) Экспорт
	ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОсновной(ИмяКлиентаТестирования,Ложь);
	Ванесса.ЗапретитьВыполнениеШагов();
	ПодключитьОбработчикОжидания("ОбработчикЯПодключаюУжеЗапущенныйКлиентТестирования",0.1,Истина);
КонецФункции

&НаКлиенте
Функция ОбработчикЯПодключаюУжеЗапущенныйКлиентТестированияСПараметрами() Экспорт
	Ванесса.ПродолжитьВыполнениеШагов();
КонецФункции 

&НаКлиенте
//Когда Я подключаю уже запущенный клиент тестирования с параметрами:
//@ЯПодключаюУжеЗапущенныйКлиентТестированияСПараметрами(ТабПарам)
Функция ЯПодключаюУжеЗапущенныйКлиентТестированияСПараметрами(ТабПарам) Экспорт
	Если ТабПарам.Количество() <> 2 Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Должно быть передано 2 строки");
	КонецЕсли;
	//ТабПарам = Ванесса.ПолучитьЗначенияТаблицыGherkinИзКонтекста(ТабПарам);
	ИмяКлиентаТестирования = ПолучитьПараметрыПодключения(ТабПарам);

	ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОсновной(ИмяКлиентаТестирования,Ложь);
	Ванесса.ЗапретитьВыполнениеШагов();
	ПодключитьОбработчикОжидания("ОбработчикЯПодключаюУжеЗапущенныйКлиентТестированияСПараметрами",0.1,Истина);
КонецФункции

&НаКлиенте
Функция ОбработчикОжиданияЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования()
	
	ИмяОбработчика = "ОбработчикОжиданияЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;	 
	
	ПолучилосьПодключить = Истина;
	Попытка
		ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОсновной(глИмяКлиентаТестирования,Ложь);
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат Неопределено;
	Исключение
		ПолучилосьПодключить = Ложь;
	КонецПопытки;
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд, прозойдёт подключение к клиенту тестирования.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;	 
КонецФункции 

&НаКлиенте
//Когда Я подключаю уже запущенный клиент тестирования с параметрами в течение 10 секунд:
//@ЯПодключаюУжеЗапущенныйКлиентТестированияСПараметрамиВТечениеСекунд(ТабПарам)
Функция ЯПодключаюУжеЗапущенныйКлиентТестированияСПараметрамиВТечениеСекунд(КоличествоСекунд, ТабПарам) Экспорт
	Если ТабПарам.Количество() <> 2 Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Должно быть передано 2 строки");
	КонецЕсли;
	//ТабПарам = Ванесса.ПолучитьЗначенияТаблицыGherkinИзКонтекста(ТабПарам);
	Ванесса.ЗапретитьВыполнениеШагов();
	глИмяКлиентаТестирования          = ПолучитьПараметрыПодключения(ТабПарам);
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);

	ПодключитьОбработчикОжидания("ОбработчикОжиданияЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования",1,Ложь);
КонецФункции

&НаКлиенте
// заполнение таблицы Test Client в vanesse
Функция ПолучитьПараметрыПодключения(ТабПарам,ДопПараметры = Неопределено)

	ЗаполнитьДанныеИзПрофиля = Ложь;
	ДанныеДляКопирования = Неопределено;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ЗаполнитьДанныеИзПрофиля") Тогда
			ЗаполнитьДанныеИзПрофиля = ДопПараметры.ЗаполнитьДанныеИзПрофиля;
		КонецЕсли;	 
		Если ДопПараметры.Свойство("ДанныеДляКопирования") Тогда
			ДанныеДляКопирования = ДопПараметры.ДанныеДляКопирования;
		КонецЕсли;	 
		
	КонецЕсли;
	
	Стр = Новый Структура;
	Стр.Вставить("Имя",                    "");
	Стр.Вставить("ПутьКИнфобазе",          "");
	Стр.Вставить("ПортЗапускаТестКлиента", "");
	Стр.Вставить("ДопПараметры",           "");
	Стр.Вставить("ТипКлиента",             "");
	Стр.Вставить("ИмяКомпьютера",          "");
	Стр.Вставить("Синоним",                "");

	Если ЗаполнитьДанныеИзПрофиля Тогда
		ЗаполнитьЗначенияСвойств(Стр,ДопПараметры.ПрофильДляЗаполнения);
	КонецЕсли;	 
	
	ИменаПараметров      = ТабПарам[0];// шапка
	ЗначенияПараметров   = ТабПарам[1];
	СтрокаАутентификации = "";
	Логин       = "";
	ДопПараметр = "";
	Если ДанныеДляКопирования <> Неопределено Тогда
		ДопПараметр = ДанныеДляКопирования.ДопПараметры;
		УбратьИзСтрокиДанныеПоАутентификации(ДопПараметр);
	КонецЕсли;	 
	
	БылЯвноПереданПортПодключения = Ложь;
	
	Для ккк = 1 По ИменаПараметров.Количество() Цикл
		ИмяПараметра = "";
		ЗначениеПараметра = "";

		ИменаПараметров.Свойство("Кол" + ккк, ИмяПараметра);
		ЗначенияПараметров.Свойство("Кол" + ккк, ЗначениеПараметра);
		Если ВРег(ИмяПараметра) = ВРег("Дополнительные параметры строки запуска") Тогда
			//если значение передано в параметрах, то оно будет взято из параметров шага
			ДопПараметр = "";
		КонецЕсли;	 
		
	КонецЦикла;	
	

	Для ккк = 1 По ИменаПараметров.Количество() Цикл
		ИмяПараметра = "";
		ЗначениеПараметра = "";

		ИменаПараметров.Свойство("Кол" + ккк, ИмяПараметра);
		ЗначенияПараметров.Свойство("Кол" + ккк, ЗначениеПараметра);

		ИмяПараметраВрег = ВРег(ИмяПараметра);
		Если ИмяПараметраВрег = ВРег("Имя подключения")
		ИЛИ  ИмяПараметраВрег = ВРег("Имя")
		ИЛИ  ИмяПараметраВрег = ВРег("Name")
		Тогда
			Стр.Имя = ЗначениеПараметра;
			// проверка заполнения данных
			Если Не ЗначениеЗаполнено(Стр.Имя) Тогда
				ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Параметр <Имя подключения> является обязательным.");
			КонецЕсли;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Строка соединения") Тогда
			Стр.ПутьКИнфобазе  = ЗначениеПараметра;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Порт") Тогда
			БылЯвноПереданПортПодключения = Истина;
			Стр.ПортЗапускаТестКлиента = ЗначениеПараметра;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Логин") Тогда
			Логин = ЗначениеПараметра;
			Если Не ПустаяСтрока(Логин) Тогда
				СтрокаАутентификации = "/N""" + СокрЛП(Логин)+ """";
			КонецЕсли;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Пароль") Тогда
			Если Не ПустаяСтрока(ЗначениеПараметра) Тогда
				СтрокаАутентификации = СтрокаАутентификации + " /P""" + ЗначениеПараметра + """";
			КонецЕсли;	 

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Запускаемая обработка") Тогда
			Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
				Если НЕ Ванесса.ФайлСуществуетКомандаСистемы(ЗначениеПараметра) Тогда
					ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Параметр <Запускаемая обработка> указывает на несуществующий файл.")
						+ Символы.ПС + "<" + ЗначениеПараметра + ">";
				КонецЕсли;	 
				ДопПараметр = ДопПараметр + " /EXECUTE " + """" + ЗначениеПараметра + """";
			КонецЕсли;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Дополнительные параметры строки запуска") Тогда
			ДопПараметр = ДопПараметр + " " + ЗначениеПараметра;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Тип клиента") Тогда
			Стр.ТипКлиента = ЗначениеПараметра;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Имя компьютера") Тогда
			Стр.ИмяКомпьютера = ЗначениеПараметра;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Синоним") Тогда
			Стр.Синоним = ЗначениеПараметра;

		КонецЕсли;
	КонецЦикла;

	Если Не ЗначениеЗаполнено(Стр.ТипКлиента) Тогда
		Стр.ТипКлиента = "Тонкий";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Стр.ПортЗапускаТестКлиента) Тогда
		Стр.ПортЗапускаТестКлиента = 1538;
	Иначе
		Стр.ПортЗапускаТестКлиента = Число(Стр.ПортЗапускаТестКлиента);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Стр.ПутьКИнфобазе) Тогда
		Стр.ПутьКИнфобазе = СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;

	Если СтрокаАутентификации <> "" И Найти(СтрокаАутентификации, "/N") = 0 Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Параметр <Логин> не задан");
	КонецЕсли;
	Стр.ДопПараметры = СтрокаАутентификации + " " +ДопПараметр;

	ДанныеКлиентовТестирования = Ванесса.ДанныеКлиентовТестирования;

	Отбор = Новый Структура;
	Отбор.Вставить("Имя", Стр.Имя);
	НайденныеСтрокиИмя = ДанныеКлиентовТестирования.НайтиСтроки(Отбор);
	Если НайденныеСтрокиИмя.Количество() = 0 Тогда
		
		//проверить нахождение нового порта подключения в таблице клиентов
		Отбор = Новый Структура;
		Отбор.Вставить("ПортЗапускаТестКлиента", Стр.ПортЗапускаТестКлиента);
		НайденныеСтрокиПорт = ДанныеКлиентовТестирования.НайтиСтроки(Отбор);
		Если НайденныеСтрокиПорт.Количество() > 0 Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Для подключения с именем <%1> изменен порт подключения, указанный порт уже есть в таблице подключений.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Стр.Имя);
			Сообщить(Ванесса.ПолучитьТекстСообщенияПользователю(ТекстСообщения));
			Стр.ПортЗапускаТестКлиента = Ванесса.ПроверитьПортНаЗанятость(Стр.ПортЗапускаТестКлиента);
		КонецЕсли;
		
		НоваяСтрока = ДанныеКлиентовТестирования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		НоваяСтрока.ЭтотКлиент = Ложь;
	Иначе
		Если ЗначениеЗаполнено(Стр.Синоним) Тогда
			//очистим синоним, если он был у другой строки
			Для Каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
				Если СтрокаДанныеКлиентовТестирования.Синоним = Стр.Синоним Тогда
					СтрокаДанныеКлиентовТестирования.Синоним = "";
				КонецЕсли;	 
			КонецЦикла;	
		КонецЕсли;	 
		НоваяСтрока = НайденныеСтрокиИмя.Получить(0);
		Если Не БылЯвноПереданПортПодключения Тогда
			//вернём порт который был, чтобы была возможность переподключить уже ранее запущенный TestClient, а Ванесса при этом была закрыта
			Стр.ПортЗапускаТестКлиента = НоваяСтрока.ПортЗапускаТестКлиента;
		КонецЕсли;	 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Подключение с именем <%1> перезаполнено в таблице подключений");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Стр.Имя);
		Сообщить(Ванесса.ПолучитьТекстСообщенияПользователю(ТекстСообщения));
	КонецЕсли;
	
	Возврат Стр.Имя;

КонецФункции

&НаКлиенте
//я закрываю сеанс TESTCLIENT
//@ЯЗакрываюСеансTESTCLIENT()
Функция ЯЗакрываюСеансTESTCLIENT() Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();	
	
	Попытка
		КонтекстСохраняемый.ГлавноеОкноТестируемого.Закрыть();
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Закрытие клиента тестирования.");
		Ванесса.ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(ТекстСообщения);
		Ванесса.ЗаписатьЛогВЖРИнформация("ЗакрытиеКлиентаТестирования", ТекстСообщения);
	Исключение
		КонтекстСохраняемый.Вставить("ГлавноеОкноТестируемого",Неопределено);
	КонецПопытки;
	КонтекстСохраняемый.ГлавноеОкноТестируемого = Неопределено;

	//чтобы успели появиться диалоги о закрытии
	Ванесса.sleep(1);
	
	// Закрытие платформенного-бспшного окна "Завершить работу"
	Попытка
		ИскомаяКнопка = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), "Завершить работу");
		Если ИскомаяКнопка <> Неопределено Тогда
			ИскомаяКнопка.Нажать();
		КонецЕсли;
	Исключение
		//
	КонецПопытки;
	
	Попытка
		КонтекстСохраняемый.ТестовоеПриложение.РазорватьСоединение();
	Исключение
		//	
	КонецПопытки;
	
	Если Ванесса.Объект.ЗакрыватьКлиентТестированияПринудительно
		И КонтекстСохраняемый.Свойство("ТекущийПрофильTestClient")
		Тогда
		Попытка
			СвойстваTestClient = Ванесса.ПолучитьДанныеКлиентаТестирования(КонтекстСохраняемый.ТекущийПрофильTestClient);
			Если СвойстваTestClient.PIDКлиентаТестирования <> 0 И СвойстваTestClient.ТипКлиента = "Тонкий" Тогда
				//Компоненту использовать нельзя, т.к. для неё нужно вызывать асинхронный метод, а этот код может выполняться синхронно при закрытии сеанса VA
				ТекДат = ТекущаяДата();
				МаксДата = ТекДат + Ванесса.Объект.ТаймаутПередПринудительнымЗакрытиемКлиентаТестирования;
				ПроцессОССуществует = Истина;
				Пока ТекущаяДата() < МаксДата Цикл
					ПроцессОССуществует = Ванесса.ПроцессОССуществует(СвойстваTestClient.PIDКлиентаТестирования);
					Если НЕ ПроцессОССуществует Тогда
						Прервать;
					КонецЕсли;	 
					
					Ванесса.sleep(1);
				КонецЦикла;
				
				Если ПроцессОССуществует Тогда
					Массив = Новый Массив;
					Массив.Добавить(СвойстваTestClient.PIDКлиентаТестирования);
					Попытка
						Ванесса.ЗавершитьСеансыОСПринудительно(Массив);
					Исключение
						
					КонецПопытки;
				КонецЕсли;	 
			КонецЕсли;	 
		Исключение
			
		КонецПопытки;
	КонецЕсли;	 
	
	Ванесса.ОбновитьДанныеКлиентовТестированияПослеОтключенияКлиентаТестирования();
КонецФункции

&НаКлиенте
//И я закрываю сеанс текущего клиента тестирования
//@ЯЗакрываюСеансТекущегоКлиентаТестирования()
Функция ЯЗакрываюСеансТекущегоКлиентаТестирования() Экспорт
	ЯЗакрываюСеансTESTCLIENT();
КонецФункции

&НаКлиенте
//И я закрываю TestClient "Кладовщик"
//@ЯЗакрываюTestClient(Парам01)
Функция ЯЗакрываюTestClient(ИмяTestClient) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Закрытие TestClient <%1>");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяTestClient);
	Сообщить(Ванесса.ПолучитьТекстСообщенияПользователю(ТекстСообщения));
	
	СвойстваTestClient = ПолучитьСвойстваПодключенногоTestClient(ИмяTestClient);
	Если СвойстваTestClient = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не найден профиль клиента тестирования <%1> чтобы его закрыть.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяTestClient);
		Сообщить(Ванесса.ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущийПрофильTestClient            = Неопределено;
	НадоВернутьТекущийПрофильTestClient = Ложь;
	Если КонтекстСохраняемый.Свойство("ТекущийПрофильTestClient") Тогда
		ТекущийПрофильTestClient = КонтекстСохраняемый.ТекущийПрофильTestClient;
		
		Если (ТекущийПрофильTestClient <> Неопределено) и (ТекущийПрофильTestClient <> ИмяTestClient)
			и (СокрЛП(СвойстваTestClient.Имя) <> СокрЛП(ТекущийПрофильTestClient)) Тогда
			СвойстваТекущийПрофильTestClient = ПолучитьСвойстваПодключенногоTestClient(ТекущийПрофильTestClient);
			Если СвойстваТекущийПрофильTestClient = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не найден профиль клиента тестирования <%1> хотя он должен быть активным в данный момент.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекущийПрофильTestClient);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			НадоВернутьТекущийПрофильTestClient = Истина;
		КонецЕсли;	 
	КонецЕсли;
	
	Если (ИмяTestClient <> ТекущийПрофильTestClient)
		и (СокрЛП(СвойстваTestClient.Имя) <> СокрЛП(ТекущийПрофильTestClient)) Тогда
		//активизируем этот TestClient, чтобы закрыть в нём все окна
		ЯАктивизируюTestClient(ИмяTestClient, Ложь);
	КонецЕсли;
	
	Попытка
		Ванесса.Шаг("И Я закрыл все окна клиентского приложения");
	Исключение
		Сообщить(Ванесса.ПолучитьТекстСообщенияПользователю("Ошибка при закрытии всех окон Testclient."));
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	ЯЗакрываюСеансTESTCLIENT();
	
	// снимем отметку о подключении
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя",ИмяTestClient);
	МассивСтрок = Ванесса.ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() = 1 Тогда
		СтрокаЭтотКлиент = МассивСтрок[0];
		СтрокаЭтотКлиент.Подключен = Ложь;
	КонецЕсли;
	
	Если НадоВернутьТекущийПрофильTestClient Тогда
		ЯАктивизируюTestClient(ТекущийПрофильTestClient, Ложь);
	Иначе	
		КонтекстСохраняемый.Вставить("ТекущийПрофильTestClient",Неопределено);
	КонецЕсли;	 
	
	Ванесса.УдалитьЭлементПодключенныеTestClient(КонтекстСохраняемый.ПодключенныеTestClient,ИмяTestClient);
	Если КонтекстСохраняемый.ПодключенныеTestClient.Количество() = 0 Тогда
		КонтекстСохраняемый.Вставить("ТекущийПрофильTestClient",Неопределено);
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И я активизирую окно текущего клиента тестирования
//@ЯАктивизируюОкноТекущегоКлиентаТестирования()
Функция ЯАктивизируюОкноТекущегоКлиентаТестирования() Экспорт
	ДанныеПодключения = Ванесса.ТекущиеДанныеКлиентаТестирования();
	АктивизироватьПроцессКлиентаТестирования(ДанныеПодключения);
КонецФункции

&НаКлиенте
//И я активизирую TestClient "Кладовщик"
//@ЯАктивизируюTestClient(Парам01)
Функция ЯАктивизируюTestClient(ИмяTestClient, НадоАктивизироватьОкно = Истина) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	СвойстваTestClient = ПолучитьСвойстваПодключенногоTestClient(ИмяTestClient);
	Если СвойстваTestClient = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не найден профиль клиента тестирования <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяTestClient);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	КонтекстСохраняемый.Вставить("ТестовоеПриложение",СвойстваTestClient.ТестовоеПриложение);
	КонтекстСохраняемый.Вставить("ГлавноеОкноТестируемого",СвойстваTestClient.ГлавноеОкноТестируемого);
	КонтекстСохраняемый.Вставить("ТекущийПрофильTestClient",СвойстваTestClient.Имя);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя",ИмяTestClient);
	МассивСтрок = Ванесса.ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(СвойстваTestClient.Синоним) Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Синоним",СвойстваTestClient.Синоним);
			МассивСтрок = Ванесса.ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если МассивСтрок.Количество() = 1 Тогда
		Ванесса.Элементы.ДанныеКлиентовТестирования.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Если НадоАктивизироватьОкно Тогда
		ДанныеПодключения = СтрокаTestClientВТаблицеПодключений(ИмяTestClient);
		АктивизироватьПроцессКлиентаТестирования(ДанныеПодключения);
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
Функция АктивизироватьПроцессКлиентаТестирования(ДанныеПодключения);
	Если Ванесса.Объект.ИспользоватьКомпонентуVanessaExt
		И ДанныеПодключения.PIDКлиентаТестирования <> 0
		И НРег(ДанныеПодключения.ТипКлиента) <> "web"
		Тогда
		ДопПараметры = Новый Структура;
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаПослеНачатьВызовАктивироватьПроцесс", ЭтаФорма, ДопПараметры);
		Ванесса.ВнешняяКомпонентаДляСкриншотов.НачатьВызовАктивироватьПроцесс(ОписаниеОповещения,
			ДанныеПодключения.PIDКлиентаТестирования);
			
		Ванесса.ЗапретитьВыполнениеШагов();
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ОбработкаПослеНачатьВызовАктивироватьПроцесс(Парам1, Парам2, Парам3) Экспорт
	Ванесса.ПродолжитьВыполнениеШагов();
КонецФункции

&НаКлиенте
Функция СтрокаTestClientВТаблицеПодключений(ИмяTestClient)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя",ИмяTestClient);
	МассивСтрок = Ванесса.ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Синоним",ИмяTestClient);
		МассивСтрок = Ванесса.ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	КонецЕсли;	 
	
	Если МассивСтрок.Количество() = 1 Тогда
		Возврат МассивСтрок[0]; 
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция ОбработчикЯПодключаюTestClientЛогинПароль() Экспорт
	ДанныеПодключения = Ванесса.ТекущиеДанныеКлиентаТестирования();
	Если НЕ АктивизироватьПроцессКлиентаТестирования(ДанныеПодключения) Тогда
		Ванесса.ПродолжитьВыполнениеШагов();
	КонецЕсли;	 
КонецФункции 

&НаКлиенте
//И я подключаю TestClient "Кладовщик" логин "Пользователь1" пароль "1"
//@ЯПодключаюTestClientЛогинПароль(Парам01,Парам02,Парам03)
Функция ЯПодключаюTestClientЛогинПароль(ИмяTestClient,Логин,Пароль) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	Если Не КонтекстСохраняемый.Свойство("ПодключенныеTestClient") Тогда
		КонтекстСохраняемый.Вставить("ПодключенныеTestClient",Новый Массив);
	КонецЕсли;	 
	
	ПодключенныеTestClient = КонтекстСохраняемый.ПодключенныеTestClient;
	
	СвойстваTestClient = СтрокаTestClientВТаблицеПодключений(ИмяTestClient);
	
	Если СвойстваTestClient = Неопределено Тогда //значит нет такого профиля в таблице
		ТекущиеДанныеКлиентаТестирования = Ванесса.ТекущиеДанныеКлиентаТестирования();
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Имя", ТекущиеДанныеКлиентаТестирования.Имя); //будем копировать эту строку
		
		МассивСтрок = Ванесса.ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() = 0 Тогда
			ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не найдена строка в таблице ДанныеКлиентовТестирования с <Имя=Этот клиент>");
		КонецЕсли;	 
		
		СтрокаЭтотКлиент = МассивСтрок[0];
		
		СтрокаДанныеКлиентовТестирования = Ванесса.ДанныеКлиентовТестирования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанныеКлиентовТестирования,СтрокаЭтотКлиент);
		СтрокаДанныеКлиентовТестирования.ЭтотКлиент = Ложь;
		СтрокаДанныеКлиентовТестирования.ПортЗапускаТестКлиента = Ванесса.ПроверитьПортНаЗанятость(48000);
	Иначе	
		СтрокаДанныеКлиентовТестирования = СвойстваTestClient;
	КонецЕсли;
		
	ДопПараметры = СокрЛП(СтрокаДанныеКлиентовТестирования.ДопПараметры);
	УбратьИзСтрокиДанныеПоАутентификации(ДопПараметры);
	
	Если ЗначениеЗаполнено(Логин) Тогда
		ДопПараметры = ДопПараметры + "/N""" + Логин + """ ";
	КонецЕсли;	 
	Если ЗначениеЗаполнено(Пароль) Тогда
		ДопПараметры = ДопПараметры + "/P""" + Пароль + """ ";
	КонецЕсли;	 
	
	СтрокаДанныеКлиентовТестирования.Имя = ИмяTestClient;
	СтрокаДанныеКлиентовТестирования.ДопПараметры = ДопПараметры;
	
	Если НЕ Ванесса.ПодключитьПрофильTestClientПоИмени(ИмяTestClient) Тогда
		Ванесса.ОбработатьОшибкуПодключенияTestClient();
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось подключить профиль TestClient <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяTestClient);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ОбновитьДанныеВПодключенныеTestClient(ИмяTestClient);
	ТекущееИмяПодключения = ИмяTestClient;
	
	Ванесса.ЗапретитьВыполнениеШагов();
	ПодключитьОбработчикОжидания("ОбработчикЯПодключаюTestClientЛогинПароль",0.1,Истина);
	
КонецФункции

&НаКлиенте
Функция ОбновитьДанныеВПодключенныеTestClient(ИмяTestClient)
	Если Не КонтекстСохраняемый.Свойство("ПодключенныеTestClient") Тогда
		КонтекстСохраняемый.Вставить("ПодключенныеTestClient",Новый Массив);
	КонецЕсли;	 
	
	ПодключенныеTestClient = КонтекстСохраняемый.ПодключенныеTestClient;
	
	ТестовоеПриложение      = КонтекстСохраняемый.ТестовоеПриложение;
	ГлавноеОкноТестируемого = КонтекстСохраняемый.ГлавноеОкноТестируемого;
	
	Синоним = "";
	Ванесса.УдалитьЭлементПодключенныеTestClient(ПодключенныеTestClient,ИмяTestClient,Синоним);
	
	ПодключенныеTestClient.Добавить(Новый Структура("Имя,Синоним,ТестовоеПриложение,ГлавноеОкноТестируемого",ИмяTestClient,Синоним,ТестовоеПриложение,ГлавноеОкноТестируемого));
	КонтекстСохраняемый.Вставить("ТекущийПрофильTestClient",ИмяTestClient);
КонецФункции

&НаКлиенте
Функция ПолучитьСвойстваПодключенногоTestClient(ИмяTestClient)
	Если Не КонтекстСохраняемый.Свойство("ПодключенныеTestClient") Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ПодключенныеTestClient = КонтекстСохраняемый.ПодключенныеTestClient;
	Для Каждого Элем Из ПодключенныеTestClient Цикл
		Если Элем.Имя = ИмяTestClient Тогда
			Возврат Элем;
		КонецЕсли;	 
	КонецЦикла;	
	
	//если не нашли по имени - ищем по синониму
	Для Каждого Элем Из ПодключенныеTestClient Цикл
		Если Элем.Синоним = ИмяTestClient Тогда
			Возврат Элем;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Функция ОбработчикЯОткрылНовыйСеансTestClientИлиПодключилУжеСуществующий() Экспорт
	Ванесса.ПродолжитьВыполнениеШагов();
КонецФункции 

&НаКлиенте
//Я открыл новый сеанс TestClient или подключил уже существующий
//@ЯОткрылНовыйСеансTestClientИлиПодключилУжеСуществующий()
Функция ЯОткрылНовыйСеансTestClientИлиПодключилУжеСуществующий() Экспорт
	ЯОткрылСеансTestClientОтИмениСПаролемИлиПодключаюУжеСуществующий();
КонецФункции

&НаКлиенте
Функция ОбработчикЯОткрылНовыйСеансTestClientКакTestManagerИлиПодключилУжеСуществующийБезЗагрузкиНастроек() Экспорт
	Ванесса.ПродолжитьВыполнениеШагов();
КонецФункции 

&НаКлиенте
//Дано Я открыл новый сеанс TestClient как TestManager или подключил уже существующий без загрузки настроек
//@ЯОткрылНовыйСеансTestClientКакTestManagerИлиПодключилУжеСуществующийБезЗагрузкиНастроек()
Функция ЯОткрылНовыйСеансTestClientКакTestManagerИлиПодключилУжеСуществующийБезЗагрузкиНастроек() Экспорт
	Если НЕ Ванесса.ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующий(" /CNoLoadConfig /TestManager /N""" + ИмяПользователя() + """") Тогда
		Ванесса.ОбработатьОшибкуПодключенияTestClient();
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось подключить TestClient.");
	КонецЕсли;
	Ванесса.ЗапретитьВыполнениеШагов();
	ПодключитьОбработчикОжидания("ОбработчикЯОткрылНовыйСеансTestClientКакTestManagerИлиПодключилУжеСуществующийБезЗагрузкиНастроек",0.1,Истина);
КонецФункции

&НаКлиенте
Функция ОбработчикЯОткрылНовыйСеансTestClientИлиПодключилУжеСуществующийБезЗагрузкиНастроек() Экспорт
	Ванесса.ПродолжитьВыполнениеШагов();
КонецФункции 

&НаКлиенте
//Я открыл новый сеанс TestClient или подключил уже существующий без загрузки настроек
//@ЯОткрылНовыйСеансTestClientИлиПодключилУжеСуществующийБезЗагрузкиНастроек()
Функция ЯОткрылНовыйСеансTestClientИлиПодключилУжеСуществующийБезЗагрузкиНастроек() Экспорт
	Если НЕ Ванесса.ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующий(" /CNoLoadConfig /N""" + ИмяПользователя() + """") Тогда
		Ванесса.ОбработатьОшибкуПодключенияTestClient();
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось подключить TestClient.");
	КонецЕсли;
	Ванесса.ЗапретитьВыполнениеШагов();
	ПодключитьОбработчикОжидания("ОбработчикЯОткрылНовыйСеансTestClientИлиПодключилУжеСуществующийБезЗагрузкиНастроек",0.1,Истина);
КонецФункции

&НаКлиенте
Функция ЗаэкранироватьСлешВнутриКавычек(Стр)
	Рез = "";
	
	КавычкаОткрылась = Ложь;
	Для Сч = 1 По СтрДлина(Стр) Цикл
		Символ = Сред(Стр, Сч, 1);
		Если Символ = """" Тогда
			КавычкаОткрылась = НЕ КавычкаОткрылась;
		ИначеЕсли Символ = "/" Тогда
			Если КавычкаОткрылась Тогда
				Символ = "~~ЭкранированиеСлеша~~";
			КонецЕсли;	 
		КонецЕсли;	 
		
		Рез = Рез + Символ;
		
	КонецЦикла;	
	
	Возврат Рез; 
	
КонецФункции	 

&НаКлиенте
Функция РазэкранироватьСлешВнутриКавычек(Стр)
	Возврат СтрЗаменить(Стр, "~~ЭкранированиеСлеша~~", "/"); 
КонецФункции	 

&НаКлиенте
Функция УбратьИзСтрокиДанныеПоАутентификации(Стр)
	Стр = СокрЛП(Стр);
	Стр = СтрЗаменить(Стр,"//","~ЭкранированиеДвойнойСлеш~");
	
	Стр = ЗаэкранироватьСлешВнутриКавычек(Стр);
	МассивСтрок = Ванесса.РазложитьСтрокуВМассивПодстрокКлиент(Стр,"/");
	Рез = "";
	
	Для Каждого Элем Из МассивСтрок Цикл
		Если Лев(НРег(Элем),1) = "n" Тогда
			Продолжить;
		КонецЕсли;	 
		Если Лев(НРег(Элем),1) = "p" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если СокрЛП(Элем) = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Рез = Рез + "/" + Элем + " ";
	КонецЦикла;	
	
	Рез = СтрЗаменить(Рез,"~ЭкранированиеДвойнойСлеш~","//");
	Стр = РазэкранироватьСлешВнутриКавычек(Рез);
КонецФункции

&НаКлиенте
Функция ОбработчикЯОткрылСеансTestClientОтИмениСПаролемИлиПодключаюУжеСуществующий() Экспорт
	Ванесса.ПродолжитьВыполнениеШагов();
КонецФункции 

//Дано Я открыл новый сеанс TestClient от имени "МойПользователь" с паролем "МойПароль"
//@ЯОткрылСеансTestClientОтИмениСПаролемИлиПодключаюУжеСуществующий(Парам01,Парам02)
&НаКлиенте
Функция ЯОткрылСеансTestClientОтИмениСПаролемИлиПодключаюУжеСуществующий(Знач Логин = "", Знач Пароль = "") Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	СтрокаАутентификации = "";
	Логин = СокрЛП(Логин); 
	Пароль = СокрЛП(Пароль);
	
	Если Не ПустаяСтрока(Логин) Тогда 
		СтрокаАутентификации = "/N""" + СокрЛП(Логин)+ """";
		
		Если Не ПустаяСтрока(Пароль) Тогда 
			СтрокаАутентификации = СтрокаАутентификации + " /P"""+Пароль + """";
		КонецЕсли;
	КонецЕсли;
	
	ДанныеКлиентовТестирования = Ванесса.ДанныеКлиентовТестирования;
	ТекущиеДанные = Ванесса.ТекущиеДанныеКлиентаТестирования();
	Если ТекущиеДанные = Неопределено Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Имя", "Этот клиент");
	Иначе	
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Имя", ТекущиеДанные.Имя);
	КонецЕсли;	 
	
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	ДанныеЗапускаКлиентаТестирования = Неопределено;
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДанныеЗапускаКлиентаТестирования = НайденныеСтроки[0];
	КонецЕсли;	
	
	ТекущаяСтрокаПараметров = "";
	Если ДанныеЗапускаКлиентаТестирования <> Неопределено Тогда
		ТекущаяСтрокаПараметров = СокрЛП(ДанныеЗапускаКлиентаТестирования.ДопПараметры);
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(СтрокаАутентификации) Тогда
		УбратьИзСтрокиДанныеПоАутентификации(ТекущаяСтрокаПараметров);
	КонецЕсли;	 
	
	СтрокаОшибки = Неопределено;
	Если НЕ Ванесса.ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующий(ТекущаяСтрокаПараметров + " " + СтрокаАутентификации,СтрокаОшибки) Тогда
		Ванесса.ОбработатьОшибкуПодключенияTestClient();
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось подключить TestClient.");
		ТекстСообщения = ТекстСообщения + Символы.ПС + СтрокаОшибки;
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если НадоЗакрытьОкнаКлиентаТестирования Тогда
		//Внутри "И Я закрываю все окна клиентского приложения" уже есть асинхронный разрыв.
		НадоЗакрытьОкнаКлиентаТестирования = Ложь;
		Ванесса.Шаг("И Я закрываю все окна клиентского приложения");
	Иначе	
		Ванесса.ЗапретитьВыполнениеШагов();
		ПодключитьОбработчикОжидания("ОбработчикЯОткрылСеансTestClientОтИмениСПаролемИлиПодключаюУжеСуществующий",0.1,Истина);
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
Функция ОбработчикЯПодключаюПрофильTestClient() Экспорт
	Ванесса.ПродолжитьВыполнениеШагов();
КонецФункции 

//И я подключаю профиль TestClient "Оператор"
//@ЯПодключаюПрофильTestClient(Парам01)
&НаКлиенте
Функция ЯПодключаюПрофильTestClient(ИмяПрофиля) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	ДанныеЗапускаКлиентаТестирования = Ванесса.НайтиДанныеЗапускаКлиентаТестирования(ИмяПрофиля);
	Если ДанныеЗапускаКлиентаТестирования = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не найден профиль клиента тестирования <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПрофиля);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ПодключитьTestClientИзТаблицыКлиентовТестирования(ДанныеЗапускаКлиентаТестирования.Имя);
	
	Ванесса.ЗапретитьВыполнениеШагов();
	ПодключитьОбработчикОжидания("ОбработчикЯПодключаюПрофильTestClient",0.1,Истина);
КонецФункции

//И я подключаю профиль TestClient "Оператор" один на информационную базу
//@ЯПодключаюПрофильTestClientОдинНаИнформационнуюБазу(Парам01)
&НаКлиенте
Функция ЯПодключаюПрофильTestClientОдинНаИнформационнуюБазу(ИмяПрофиля) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	ДанныеЗапускаКлиентаТестирования = Ванесса.НайтиДанныеЗапускаКлиентаТестирования(ИмяПрофиля);
	Если ДанныеЗапускаКлиентаТестирования = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не найден профиль клиента тестирования <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПрофиля);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ЗакрытьВсеСеансыИнформационнойБазы(ДанныеЗапускаКлиентаТестирования.Имя, ДанныеЗапускаКлиентаТестирования.ПутьКИнфобазе);
	ПодключитьTestClientИзТаблицыКлиентовТестирования(ДанныеЗапускаКлиентаТестирования.Имя);
	
	Ванесса.ЗапретитьВыполнениеШагов();
	ПодключитьОбработчикОжидания("ОбработчикЯПодключаюПрофильTestClient",0.1,Истина);
КонецФункции

&НаКлиенте
Функция ЗакрытьВсеСеансыИнформационнойБазы(ИмяПрофиля, ПутьКИнфобазе)
	
	ДанныеКлиентовТестирования = Ванесса.ДанныеКлиентовТестирования;
	Для Каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
		Если СтрокаДанныеКлиентовТестирования.ПутьКИнфобазе = ПутьКИнфобазе
			И СтрокаДанныеКлиентовТестирования.Имя <> ИмяПрофиля Тогда
			
			ИмяTestClient = СтрокаДанныеКлиентовТестирования.Имя;
			СвойстваTestClient = ПолучитьСвойстваПодключенногоTestClient(ИмяTestClient);
			Если СвойстваTestClient <> Неопределено Тогда
				ЯАктивизируюTestClient(ИмяTestClient);
				
				Попытка
					Ванесса.Шаг("И Я закрыл все окна клиентского приложения");
				Исключение
					Сообщить(Ванесса.ПолучитьТекстСообщенияПользователю("Ошибка при закрытии всех окон Testclient."));
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			
				ЯЗакрываюСеансTESTCLIENT();
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
//И я устанавливаю текущему TestClient синоним "Синоним1"
//@ЯУстанавливаюТекущемуTestClientСиноним(Парам01)
Функция ЯУстанавливаюТекущемуTestClientСиноним(Синоним) Экспорт
	Если НЕ КонтекстСохраняемый.Свойство("ПодключенныеTestClient") Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Нет подключенных TestClient.");
	КонецЕсли;	 
	Если НЕ КонтекстСохраняемый.Свойство("ТекущийПрофильTestClient") Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Нет подключенных TestClient.");
	КонецЕсли;	 
	
	ТекущийПрофильTestClient = КонтекстСохраняемый.ТекущийПрофильTestClient;
	ПодключенныеTestClient   = КонтекстСохраняемый.ПодключенныеTestClient;
	
	
	Нашли = Ложь;
	ДанныеКлиентовТестирования = Ванесса.ДанныеКлиентовТестирования;
	Для Каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
		Если СтрокаДанныеКлиентовТестирования.Имя = ТекущийПрофильTestClient Тогда
			Нашли = Истина;
			СтрокаДанныеКлиентовТестирования.Синоним = Синоним; 
		КонецЕсли;	 
	КонецЦикла;	
	
	
	Для Каждого Элем Из ПодключенныеTestClient Цикл
		Если Элем.Имя = ТекущийПрофильTestClient Тогда
			Элем.Синоним = Синоним;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если Не Нашли Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не нашли профиль <%1> в таблице TestClient.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекущийПрофильTestClient);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И я закрываю главное окно TestClient
//@ЯЗакрываюГлавноеОкноTestClient()
Функция ЯЗакрываюГлавноеОкноTestClient() Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	Если НЕ КонтекстСохраняемый.Свойство("ГлавноеОкноТестируемого") Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("TestClient НЕ подключен.");
	КонецЕсли;	 
	
	КонтекстСохраняемый.ГлавноеОкноТестируемого.Закрыть();
КонецФункции

&НаКлиенте
//И в таблице клиентов тестирования я активизирую строку 'Этот клиент'
//@ВТаблицеКлиентовТестированияЯАктивизируюСтроку(Парам01)
Функция ВТаблицеКлиентовТестированияЯАктивизируюСтроку(ИмяTestClient) Экспорт
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя",ИмяTestClient);
	МассивСтрок = Ванесса.ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Синоним",ИмяTestClient);
		МассивСтрок = Ванесса.ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	КонецЕсли;	 
	
	Если МассивСтрок.Количество() = 1 Тогда
		Ванесса.Элементы.ДанныеКлиентовТестирования.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
	Иначе
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Найдено несколько строк с профилем клиента тестирования: <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяTestClient);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И я читаю данные текущего профиля клиента тестирования
//@ЯЧитаюДанныеТекущегоПрофиляКлиентаТестирования()
Функция ЯЧитаюДанныеТекущегоПрофиляКлиентаТестирования() Экспорт
	
	Если НЕ КонтекстСохраняемый.Свойство("ТекущийПрофильTestClient") Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("TestClient НЕ подключен.");
	КонецЕсли;	 
	
	ТекущиеДанные = Ванесса.ТекущиеДанныеКлиентаТестирования();
	Если ТекущиеДанные = Неопределено Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("TestClient НЕ подключен.");
	КонецЕсли;	 
	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст("ИмяКлиентаТестирования",ТекущиеДанные.Имя, Истина);	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст("СинонимКлиентаТестирования",ТекущиеДанные.Синоним, Истина);	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст("ТипКлиентаТестирования",ТекущиеДанные.ТипКлиента, Истина);	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст("ПутьКИнфобазеКлиентаТестирования",ТекущиеДанные.ПутьКИнфобазе, Истина);	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст("ПортЗапускаКлиентаТестирования",ТекущиеДанные.ПортЗапускаТестКлиента, Истина);	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст("ДопПараметрыКлиентаТестирования",ТекущиеДанные.ДопПараметры, Истина);	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст("ИмяКомпьютераКлиентаТестирования",ТекущиеДанные.ИмяКомпьютера, Истина);	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст("PIDКлиентаТестирования",ТекущиеДанные.PIDКлиентаТестирования, Истина);	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст("ДескрипторОкнаКлиентаТестирования",ТекущиеДанные.ДескрипторОкна, Истина);	
	
КонецФункции

&НаКлиенте
//И Я запускаю сценарий открытия TestClient или подключаю уже существующий
//@ЯЗапускаюСценарийОткрытияTestClientИлиПодключаюУжеСуществующий()
Функция ЯЗапускаюСценарийОткрытияTestClientИлиПодключаюУжеСуществующий() Экспорт
	НадоЗакрытьОкнаКлиентаТестирования = Истина;
	ЯОткрылСеансTestClientОтИмениСПаролемИлиПодключаюУжеСуществующий();
КонецФункции


///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Automation
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Automation.
Перем КонтекстСохраняемый Экспорт;

// Делает отключение модуля
&НаКлиенте
Функция ОтключениеМодуля() Экспорт

	Ванесса = Неопределено;
	Контекст = Неопределено;
	КонтекстСохраняемый = Неопределено;

КонецФункции

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯРегистрируюОшибкуПоДаннымИсключения(Парам01)","ЯРегистрируюОшибкуПоДаннымИсключения","И я регистрирую ошибку ""Описание ошибки"" по данным исключения","Должен использоваться внутри секции ""Исключение"". Фиксирует данные об ошибке, чтобы они потом они отобразились в отчетах и в системах управления ошибками. Параметр ""Описание ошибки"" будет использоваться как идентификатор ошибки в отчетах Allure и подобных.","Прочее.ПопыткаИсключение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюТекстОшибкиВПеременную(Парам01)","ЯЗапоминаюТекстОшибкиВПеременную","И я запоминаю текст ошибки в переменную ""ИмяПеременной""","Запоминает текст ошибки, возникшей в конструкции Попытка/Исключения или в шаге, проверяющем другой шаг на исключение в переменную.","Прочее.ПопыткаИсключение");


	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Функция выполняется перед началом каждого сценария
Функция ПередНачаломСценария() Экспорт
	
КонецФункции

&НаКлиенте
// Функция выполняется перед окончанием каждого сценария
Функция ПередОкончаниемСценария() Экспорт
	
КонецФункции



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//И я регистрирую ошибку
//@ЯРегистрируюОшибкуПоДаннымИсключения()
Функция ЯРегистрируюОшибкуПоДаннымИсключения(ТекстОписаниеОшибки) Экспорт
	Ванесса.ЗарегистрироватьОшибкуПоПоследнемуУпавшемуШагуВПопыткеИсключении(ТекстОписаниеОшибки);
КонецФункции

&НаКлиенте
//И я запоминаю текст ошибки в переменную "ИмяПеременной"
//@ЯЗапоминаюТекстОшибкиВПеременную()
Функция ЯЗапоминаюТекстОшибкиВПеременную(ИмяПеременной) Экспорт
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, Ванесса.ПолучитьТекстОшибкиВозникшейВИсключении());
КонецФункции

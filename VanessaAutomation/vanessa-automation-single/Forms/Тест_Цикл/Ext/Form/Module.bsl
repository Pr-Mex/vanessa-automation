
///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

// Делает отключение модуля
&НаКлиенте
Функция ОтключениеМодуля() Экспорт

	Ванесса = Неопределено;
	Контекст = Неопределено;
	КонтекстСохраняемый = Неопределено;

КонецФункции

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПокаВыражениеВстроенногоЯзыкаИстинноТогда(Парам01)","ПокаВыражениеВстроенногоЯзыкаИстинноТогда","И пока выражение встроенного языка 'УсловиеНаВстроенномЯзыке' истинно тогда","Цикл. Выполняет шаги пока истинно условие","Встроенный язык.Устаревшее","Цикл");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПокаВыражениеВстроенногоЯзыкаИстинноЯВыполняю(Парам01)","ПокаВыражениеВстроенногоЯзыкаИстинноЯВыполняю","И пока выражение встроенного языка 'УсловиеНаВстроенномЯзыке' истинно я выполняю","Цикл. Выполняет шаги пока истинно условие","Встроенный язык","Цикл");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ДляКаждойСтрокиТаблицыЯВыполняю(Парам01)","ДляКаждойСтрокиТаблицыЯВыполняю","И для каждой строки таблицы ""ИмяТаблицы"" я выполняю"
	,"Цикл. Выполняет шаги для каждой строки таблицы.
	|Если передано имя таблицы, то сначала будет попытка перебрать все строки таблицы из секции переменных, если она там есть. 
	|Иначе будет попытка перебрать все строки в таблице клиента тестирования. 
	|Если вместо имени таблицы передана таблица Gherkin, то будут перебираться её строки. Первая строка должа содержать имена колонок. 
	|При переходе к следующей строке будет создаваться переменная с именем каждой колонки."
	,"UI.Таблицы.Перебор строк","Цикл");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ДляКаждойСтрокиТаблицыЯВыполняюВОбратномПорядке(Парам01)","ДляКаждойСтрокиТаблицыЯВыполняюВОбратномПорядке","И для каждой строки таблицы ""ИмяТаблицы"" я выполняю в обратном порядке"
	,"Цикл. Выполняет шаги для каждой строки таблицы. Перебор строк таблицы происходит снизу вверх.
	|Если передано имя таблицы, то будет попытка перебрать все строки в таблице клиента тестирования. 
	|Если передана таблица Gherkin, то будут перебираться её строки. Первая строка должа содержать имена колонок. 
	|При переходе к следующей строке будет создаваться переменная с именем каждой колонки."
	,"UI.Таблицы.Перебор строк","Цикл");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ДляКаждойСтрокиТаблицыЯВыполняюИспользуяКолонку(Парам01)","ДляКаждойСтрокиТаблицыЯВыполняюИспользуяКолонку","И для каждой строки таблицы ""ИмяТаблицы"" я выполняю используя колонку ""N"""
	,"Цикл. Выполняет шаги для каждой строки таблицы. При этом будет происходить явный переход по номеру строки по указанной колонке. Колонка, по которой будет происходить переход задается с помощью заголовка, а не имени.
	|Если передано имя таблицы, то будет попытка перебрать все строки в таблице клиента тестирования. 
	|Если передана таблица Gherkin, то будут перебираться её строки. Первая строка должа содержать имена колонок. 
	|При переходе к следующей строке будет создаваться переменная с именем каждой колонки."
	,"UI.Таблицы.Перебор строк","Цикл");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ДляКаждойСтрокиТаблицыЯВыполняюИспользуяКолонкуВОбратномПорядке(Парам01)","ДляКаждойСтрокиТаблицыЯВыполняюИспользуяКолонкуВОбратномПорядке","И для каждой строки таблицы ""ИмяТаблицы"" я выполняю используя колонку ""N"" в обратном порядке"
	,"Цикл. Выполняет шаги для каждой строки таблицы. При этом будет происходить явный переход по номеру строки снизу вверх по указанной колонке. Колонка, по которой будет происходить переход задается с помощью заголовка, а не имени.
	|Если передано имя таблицы, то будет попытка перебрать все строки в таблице клиента тестирования. 
	|Если передана таблица Gherkin, то будут перебираться её строки. Первая строка должа содержать имена колонок. 
	|При переходе к следующей строке будет создаваться переменная с именем каждой колонки."
	,"UI.Таблицы.Перебор строк","Цикл");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПокаВТаблицеКоличествоСтрокТогда(Парам01,Парам02,Парам03)","ПокаВТаблицеКоличествоСтрокТогда","И пока в таблице ""ИмяТаблицы"" количество строк "">"" 0 Тогда","Цикл. Выполняет шаги до тех пор, пока в таблице есть строки","UI.Таблицы.Перебор строк","Цикл");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"СлужебноеУсловиеВКоторомМеняетсяСлужебнаяПеременнаяИстинноТогда()","СлужебноеУсловиеВКоторомМеняетсяСлужебнаяПеременнаяИстинноТогда","Если служебное условие, в котором меняется служебная переменная истинно тогда","","","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТечениеСекундЯВыполняю(Парам01)","ВТечениеСекундЯВыполняю","И в течение 100 секунд я выполняю","Цикл. Выполняет действия в цикле в течение заданного числа секунд. По истечении времени вызывает исключение, если не был вызван шаг <Тогда я прерываю цикл>","Прочее.Циклы","Цикл");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПрерываюЦикл()","ЯПрерываюЦикл","Тогда я прерываю цикл","Прерывает выполнение цикла аналогично оператору ""Прервать"" из встроенного языка 1С.","Прочее.Циклы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПродолжаюЦикл()","ЯПродолжаюЦикл","Тогда я продолжаю цикл","Продолжает выполнение цикла аналогично оператору ""Продолжать"" из встроенного языка 1С.","Прочее.Циклы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯДелаюРаз(Парам01)","ЯДелаюРаз","И я делаю 10 раз","Цикл. Выполняет нужные действия указанное число раз. Можно прервать с помощью шага <Тогда я прерываю цикл>.","Прочее.Циклы","Цикл");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ДляКаждойСтрокиФайлаЯВыполняю(Парам01)","ДляКаждойСтрокиФайлаЯВыполняю","И для каждой строки файла ""ИмяФайла"" я выполняю","Перебирает строки файла и создает переменную ""_Строка"".","Файлы.Перебор строк файла", "Цикл");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ДляКаждойСтрокиМакетаЯВыполняю(Парам01)",
		"ДляКаждойСтрокиМакетаЯВыполняю",
		"И для каждой строки макета ""ИмяЭлементаИлиИмяФайла"" я выполняю",
		"Сначала будет предпринята попытка найти файл табличного документа.
		|Если файл не найден, то будет попытка получить макет из текущей формы клиента тестирвания. 
		|Первая строка макета должа содержать имена колонок. 
		|При переходе к следующей строке будет создаваться переменная с именем каждой колонки."
		,"UI.Табличный документ.Перебор строк","Цикл");
	
	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Функция выполняется перед началом каждого сценария
Функция ПередНачаломСценария() Экспорт
	
КонецФункции

&НаКлиенте
// Функция выполняется перед окончанием каждого сценария
Функция ПередОкончаниемСценария() Экспорт
	
КонецФункции



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//И Пока выражение встроенного "Контекст.СлужебнаяПеременная < 2" языка истинно тогда
//@ПокаВыражениеВстроенногоЯзыкаИстинноТогда(Парам01)
Функция ПокаВыражениеВстроенногоЯзыкаИстинноТогда(Выражение) Экспорт
	ИмяЦикла = "_Цикл_" + Формат(Ванесса.ПолучитьСостояниеVanessaAutomation().ТекущийШаг.ИдСтроки, "ЧГ=; ЧН=0");
	Если НЕ Контекст.Свойство(ИмяЦикла) Тогда
		Контекст.Вставить(ИмяЦикла,Истина);
	КонецЕсли;	 

	Если Контекст.Свойство("ЗавершитьВыполнениеЦикла") Тогда
		Если Контекст.ЗавершитьВыполнениеЦикла = Истина Тогда
			Контекст.ЗавершитьВыполнениеЦикла = Ложь;
			Ванесса.УстановитьРезультатУсловия(Ложь);
			Если Контекст.Свойство(ИмяЦикла) Тогда
				Контекст.Удалить(ИмяЦикла);
			КонецЕсли;	 
			
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ПолучилосьВычислить = Ложь;
	Попытка
		ТекстИсключения = Неопределено;
		Результат = Ванесса.ВычислитьВнутреннееВыражение(Выражение, ТекстИсключения);
		ПолучилосьВычислить = Истина;
	Исключение
		Результат = Выражение;
	КонецПопытки;
	
	Если НЕ ПолучилосьВычислить Тогда
		Попытка
			ТекстИсключения = Неопределено;
			Выражение = Ванесса.ЗаменитьСлужебныеСимволыВВыраженииДляВычисления(
				Ванесса.ЗначениеПараметраТекущегоСценария(0));
			Результат = Ванесса.ВычислитьВнутреннееВыражение(Выражение, ТекстИсключения);
		Исключение
			Результат = Выражение;
		КонецПопытки;
	КонецЕсли;	 
	
	Если Результат Тогда
		Ванесса.УстановитьРезультатУсловия(Истина);
	Иначе	
		Ванесса.УстановитьРезультатУсловия(Ложь);
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И Пока выражение встроенного "Контекст.СлужебнаяПеременная < 2" языка истинно я выполняю
//@ПокаВыражениеВстроенногоЯзыкаИстинноЯВыполняю(Парам01)
Функция ПокаВыражениеВстроенногоЯзыкаИстинноЯВыполняю(Выражение) Экспорт
	ПокаВыражениеВстроенногоЯзыкаИстинноТогда(Выражение);
КонецФункции

&НаКлиенте
//И для каждой строки макета "ИмяЭлементаИлиИмяФайла" я выполняю
//@ДляКаждойСтрокиМакетаЯВыполняю(Парам01)
Функция ДляКаждойСтрокиМакетаЯВыполняю(ИмяЭлементаИлиИмяФайла) Экспорт
	
	СостояниеVanessaAutomation = Ванесса.ПолучитьСостояниеVanessaAutomation();
	ИмяЦикла = "_Цикл_" + Формат(СостояниеVanessaAutomation.ТекущийШаг.ИдСтроки, "ЧГ=; ЧН=0");
	ИмяДанныеЦикла = ИмяЦикла + "_ДанныеЦикла";
	
	Если Контекст.Свойство("ЗавершитьВыполнениеЦикла") Тогда
		Если Контекст.ЗавершитьВыполнениеЦикла = Истина Тогда
			Контекст.ЗавершитьВыполнениеЦикла = Ложь;
			Ванесса.УстановитьРезультатУсловия(Ложь);
			Если Контекст.Свойство(ИмяЦикла) Тогда
				Контекст.Удалить(ИмяЦикла);
			КонецЕсли;	 
			
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЕсли;           
	
	Если НЕ Контекст.Свойство(ИмяЦикла) Тогда
		//значит это блок инициализации
		Контекст.Вставить(ИмяЦикла, Истина);
		Контекст.Вставить(ИмяДанныеЦикла, Новый Структура);
		
		Попытка
			ТабДок = Ванесса.НайтиМакетВКаталогеПроекта(ИмяЭлементаИлиИмяФайла);
		Исключение
			ТабДок = Неопределено;
		КонецПопытки;
		
		Если ТабДок = Неопределено Тогда
			//будем искать макет в каталоге проекта
			ТабДок = Ванесса.ПолучитьМакетОбработки(ИмяЭлементаИлиИмяФайла);
		КонецЕсли;
		
		Если ТабДок = Неопределено Тогда
			Попытка
				ДопПараметрыПоиска = Новый Структура;
				ЭлементТД   = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлементаИлиИмяФайла, Истина, Истина, Тип("ТестируемоеПолеФормы"), ДопПараметрыПоиска);
				ТабДок = Ванесса.ПолучитьТабличныйДокументTestClient(ЭлементТД);
			Исключение
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось найти табличный документ <%1>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяЭлементаИлиИмяФайла);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
		КонецЕсли;
		
		ДанныеТабличногоДокумента = Ванесса.ПреобразоватьТабличныйДокументВМассивСтруктур(ТабДок);
		
		Если ДанныеТабличногоДокумента.Количество() < 2 Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В табличном документа должно быть 2 или более строки.");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		ДанныеКолонок = ДанныеТабличногоДокумента[0];
		ДанныеСтрок = Новый Массив;
		
		Сч = 0;
		Для Каждого Элем Из ДанныеТабличногоДокумента Цикл
			Сч = Сч + 1;
			Если Сч = 1 Тогда
				Продолжить;
			КонецЕсли;	
			
			ДанныеСтрок.Добавить(Элем);
		КонецЦикла;	
		
		Контекст[ИмяДанныеЦикла].Вставить("ДанныеКолонок", ДанныеКолонок);
		Контекст[ИмяДанныеЦикла].Вставить("ДанныеСтрок", ДанныеСтрок);
		Контекст[ИмяДанныеЦикла].Вставить("СчетчикЦикла", 0);
		
	КонецЕсли;	 
	
	Контекст[ИмяДанныеЦикла].СчетчикЦикла = Контекст[ИмяДанныеЦикла].СчетчикЦикла + 1;
	Если Контекст[ИмяДанныеЦикла].СчетчикЦикла > Контекст[ИмяДанныеЦикла].ДанныеСтрок.Количество() Тогда
		Ванесса.УстановитьРезультатУсловия(Ложь);
		Контекст.Удалить(ИмяЦикла);
		Если Контекст.Свойство(ИмяДанныеЦикла) Тогда
			Контекст.Удалить(ИмяДанныеЦикла);
		КонецЕсли;	 
		Возврат Неопределено;
	КонецЕсли;	
	
	ТекСтрока = Контекст[ИмяДанныеЦикла].ДанныеСтрок[Контекст[ИмяДанныеЦикла].СчетчикЦикла - 1];
	Для Каждого КлючЗначение Из Контекст[ИмяДанныеЦикла].ДанныеКолонок Цикл
		ИмяПеременной = КлючЗначение.Значение;
		ЗначениеПеременной = ТекСтрока[КлючЗначение.Ключ];
		Контекст.Вставить(ИмяПеременной, ЗначениеПеременной);
	КонецЦикла;	
	
	Ванесса.УстановитьРезультатУсловия(Истина);
	
КонецФункции

&НаКлиенте
//И для каждой строки таблицы "ТабличнаяЧасть1" я выполняю
//@ДляКаждойСтрокиТаблицыЯВыполняю(Парам01)
Функция ДляКаждойСтрокиТаблицыЯВыполняю(ИмяТЧ,ИмяКолонкиДляПерехода = Неопределено, Направление = "Вниз") Экспорт
	СостояниеVanessaAutomation = Ванесса.ПолучитьСостояниеVanessaAutomation();
	ИмяЦикла = "_Цикл_" + Формат(СостояниеVanessaAutomation.ТекущийШаг.ИдСтроки, "ЧГ=; ЧН=0");
	СчетчикЦикла = ИмяЦикла + "_Счетчик";
	
	Если Контекст.Свойство("ЗавершитьВыполнениеЦикла") Тогда
		Если Контекст.ЗавершитьВыполнениеЦикла = Истина Тогда
			Контекст.ЗавершитьВыполнениеЦикла = Ложь;
			Ванесса.УстановитьРезультатУсловия(Ложь);
			Если Контекст.Свойство(ИмяЦикла) Тогда
				Контекст.Удалить(ИмяЦикла);
			КонецЕсли;	 
			
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ТипЗнч(ИмяТЧ) = Тип("Строка") Тогда
		ДанныеТаблицыИзСекцииПеременных = Неопределено;
		Если СостояниеVanessaAutomation.ТекущаяФича.ЕстьСекцияПеременные Тогда
			Если ТипЗнч(СостояниеVanessaAutomation.ТекущаяФича.ТаблицыПеременных) = Тип("Соответствие") Тогда
				ДанныеТаблицыИзСекцииПеременных = СостояниеVanessaAutomation.ТекущаяФича.ТаблицыПеременных[НРег(ИмяТЧ)];
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если ДанныеТаблицыИзСекцииПеременных = Неопределено Тогда
			ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
		КонецЕсли;	 
		//Получать всю таблицу не будем, т.к. это может быть долго
		
		Если НЕ Контекст.Свойство(ИмяЦикла) Тогда
			//значит это блок инициализации
			
			Если ДанныеТаблицыИзСекцииПеременных = Неопределено Тогда
				Если Направление = "Вниз" Тогда
					ТЧ.ПерейтиКПервойСтроке();
				Иначе	
					ТЧ.ПерейтиКПоследнейСтроке();
				КонецЕсли;	 
				
				ВыделенныеСтроки = ТЧ.ПолучитьВыделенныеСтроки();
				Если ВыделенныеСтроки = Неопределено Тогда
					//Если нет выделенной строки - значит в таблице нет строк
					Ванесса.УстановитьРезультатУсловия(Ложь);
					Возврат Неопределено;
				КонецЕсли;	
				
				Если ВыделенныеСтроки.Количество() = 0 Тогда
					//Если нет выделенной строки - значит в таблице нет строк
					Ванесса.УстановитьРезультатУсловия(Ложь);
					Возврат Неопределено;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Контекст.Вставить(ИмяЦикла, Истина);
			Контекст.Вставить(СчетчикЦикла, 1);
			Ванесса.УстановитьРезультатУсловия(Истина);
			
			Если ИмяКолонкиДляПерехода <> Неопределено И Направление <> "Вниз" Тогда
				ТекущееЗначениеСтроки = Формат(ВыделенныеСтроки[0][ИмяКолонкиДляПерехода], "ЧГ=; ЧН=0");
				Контекст.Вставить(СчетчикЦикла,Число(ТекущееЗначениеСтроки));
			КонецЕсли;	 
			
			Если ДанныеТаблицыИзСекцииПеременных <> Неопределено Тогда
				УстановитьПеременныеПоТаблицеИзСекцииПеременных(Контекст[СчетчикЦикла]-1, ДанныеТаблицыИзСекцииПеременных);
			КонецЕсли;	 
			
			Возврат Неопределено;
		КонецЕсли;	 
		
		Если ИмяКолонкиДляПерехода <> Неопределено И Направление <> "Вниз" Тогда
			Контекст[СчетчикЦикла] = Контекст[СчетчикЦикла] - 1;		
		Иначе	
			Контекст[СчетчикЦикла] = Контекст[СчетчикЦикла] + 1;		
		КонецЕсли;	 
		
		Попытка
			Если ДанныеТаблицыИзСекцииПеременных = Неопределено Тогда
				Если ИмяКолонкиДляПерехода = Неопределено Тогда
					Если Ванесса.Версия8312ИлиВыше И ТЧ.ТекущийРежимРедактирование() Тогда
						ТЧ.ЗакончитьРедактированиеСтроки();
					КонецЕсли;	 
					Если Направление = "Вниз" Тогда
						ТЧ.ПерейтиКСледующейСтроке();
					Иначе	
						ТЧ.ПерейтиКПредыдущейСтроке();
					КонецЕсли;	 
				Иначе	
					ОписаниеСтроки = Новый Соответствие;
					ОписаниеСтроки.Вставить(ИмяКолонкиДляПерехода,Формат(Контекст[СчетчикЦикла], "ЧГ=; ЧН=0"));
					ВыделенныеСтроки = ТЧ.ПолучитьВыделенныеСтроки();
					ТекущееЗначениеСтроки = ВыделенныеСтроки[0][ИмяКолонкиДляПерехода];
					Если Направление = "Вниз" Тогда
						ТЧ.ПерейтиКСтроке(ОписаниеСтроки);
					Иначе
						ТЧ.ПерейтиКСтроке(ОписаниеСтроки,Вычислить("НаправлениеПереходаКСтроке.Вверх"));
					КонецЕсли;	 
					
					ВыделенныеСтроки = ТЧ.ПолучитьВыделенныеСтроки();
					НовоеЗначениеСтроки = ВыделенныеСтроки[0][ИмяКолонкиДляПерехода];
					Если ТекущееЗначениеСтроки = НовоеЗначениеСтроки Тогда
						Ванесса.УстановитьРезультатУсловия(Ложь);
						Контекст.Удалить(ИмяЦикла);
						Если Контекст.Свойство(СчетчикЦикла) Тогда
							Контекст.Удалить(СчетчикЦикла);
						КонецЕсли;	 
						Возврат Неопределено;
					КонецЕсли;	 
				КонецЕсли;	 
			Иначе
				Если Контекст[СчетчикЦикла] > ДанныеТаблицыИзСекцииПеременных.Значения.Количество() Тогда
					Ванесса.УстановитьРезультатУсловия(Ложь);
					Контекст.Удалить(ИмяЦикла);
					Если Контекст.Свойство(СчетчикЦикла) Тогда
						Контекст.Удалить(СчетчикЦикла);
					КонецЕсли;	 
					Возврат Неопределено;
				КонецЕсли;	 
				УстановитьПеременныеПоТаблицеИзСекцииПеременных(Контекст[СчетчикЦикла]-1, ДанныеТаблицыИзСекцииПеременных);
			КонецЕсли;	 
			
			Ванесса.УстановитьРезультатУсловия(Истина);
		Исключение
			Ванесса.УстановитьРезультатУсловия(Ложь);
			Контекст.Удалить(ИмяЦикла);
			Если Контекст.Свойство(СчетчикЦикла) Тогда
				Контекст.Удалить(СчетчикЦикла);
			КонецЕсли;	 
		КонецПопытки;
	Иначе
		//значит это таблица Gherkin
		ТабПарам = ИмяТЧ;
		
		Если ТабПарам.Количество() <= 1 Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице должно быть боле 1 строки, а получили <%1> строк.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТабПарам.Количество());
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		Если НЕ Контекст.Свойство(ИмяЦикла) Тогда
			//значит это блок инициализации
			Контекст.Вставить(ИмяЦикла,Истина);
			Контекст.Вставить(СчетчикЦикла,0);
		КонецЕсли;	 
		
		Контекст[СчетчикЦикла] = Контекст[СчетчикЦикла] + 1;
		
		Если (Контекст[СчетчикЦикла]) > (ТабПарам.Количество()-1) Тогда
			Ванесса.УстановитьРезультатУсловия(Ложь);
			Контекст.Удалить(ИмяЦикла);
			Если Контекст.Свойство(СчетчикЦикла) Тогда
				Контекст.Удалить(СчетчикЦикла);
			КонецЕсли;	 
			Возврат Неопределено;
		КонецЕсли;	 
		
		Шапка = ТабПарам[0];
		СтрокаТаблицы = ТабПарам[Контекст[СчетчикЦикла]];
		
		Сч = 0;
		Для Каждого ЭлементШапки Из Шапка Цикл
			Сч = Сч + 1;
			Ключ       = ЭлементШапки.Ключ;
			ИмяКолонки = ЭлементШапки.Значение;
			Значение   = СтрокаТаблицы[Ключ];
			Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяКолонки, Значение, Истина);
		КонецЦикла;	 
		
		Ванесса.УстановитьРезультатУсловия(Истина);
	КонецЕсли;	 
КонецФункции

&НаКлиенте
Процедура УстановитьПеременныеПоТаблицеИзСекцииПеременных(Ид, ДанныеТаблицыИзСекцииПеременных)
	ДанныеПоПростымПеременным = 0; // Из ДанныеПоПростымПеременнымПоТекущемуСценарию() может вернуться Неопределено, поэтому инициалиция нулём
	ДанныеПоПеременныхВТаблицах = 0; // Тоже самое
	
	Для Каждого ТекСтрока Из ДанныеТаблицыИзСекцииПеременных.Значения Цикл
		Если ТекСтрока.Значение._ИдСтрокиТаблицы_ = Ид Тогда
			Для Каждого ТекКолонка Из ДанныеТаблицыИзСекцииПеременных.Колонки Цикл
				Значение = ТекСтрока.Значение[ТекКолонка];
				Значение = Ванесса.ВычислитьИнлайнВыражениеЕслиЭтоВозможно(Значение, ДанныеПоПростымПеременным, ДанныеПоПеременныхВТаблицах, Истина);
				Ванесса.СохранитьЗначениеПеременнойВКонтекст(ТекКолонка, Значение);
			КонецЦикла;	 
			Возврат;
		КонецЕсли;	 
	КонецЦикла;	 
	
КонецПроцедуры 

&НаКлиенте
//И для каждой строки таблицы "ТабличнаяЧасть1" я выполняю используя колонку "N"
//@ДляКаждойСтрокиТаблицыЯВыполняюИспользуяКолонку(Парам01)
Функция ДляКаждойСтрокиТаблицыЯВыполняюИспользуяКолонку(ИмяТЧ,ИмяКолонки) Экспорт
	ДляКаждойСтрокиТаблицыЯВыполняю(ИмяТЧ,ИмяКолонки);
КонецФункции

&НаКлиенте
//Пока в таблице "ТабличнаяЧасть1" количество строк ">" 0 Тогда
//@ПокаВТаблицеКоличествоСтрокТогда(Парам01,Парам02,Парам03)
Функция ПокаВТаблицеКоличествоСтрокТогда(ИмяТаблицы,Знач Сравнение,КоличествоСтрок) Экспорт
	ИмяЦикла = "_Цикл_" + Формат(Ванесса.ПолучитьСостояниеVanessaAutomation().ТекущийШаг.ИдСтроки, "ЧГ=; ЧН=0");
	
	Если Контекст.Свойство("ЗавершитьВыполнениеЦикла") Тогда
		Если Контекст.ЗавершитьВыполнениеЦикла = Истина Тогда
			Контекст.ЗавершитьВыполнениеЦикла = Ложь;
			Ванесса.УстановитьРезультатУсловия(Ложь);
			Если Контекст.Свойство(ИмяЦикла) Тогда
				Контекст.Удалить(ИмяЦикла);
			КонецЕсли;	 
			
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЕсли;	 

	ТЧ      = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	Таблица = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ);
	Если Таблица = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить строки ТЧ <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Контекст.Вставить("_ВременнаяТаблицаВычислитьВыражение",Таблица);
	Сравнение = Ванесса.ПолучитьОператорПоТексту(Сравнение);
	Выражение = "Контекст._ВременнаяТаблицаВычислитьВыражение.Количество() " + Сравнение +  " " + Формат(КоличествоСтрок, "ЧГ=; ЧН=0");
	
	Попытка
		Результат = Ванесса.ВычислитьВнутреннееВыражение(Выражение);
	Исключение
		Результат = Выражение;
	КонецПопытки;
	
	Если Результат Тогда
		Ванесса.УстановитьРезультатУсловия(Истина);
	Иначе	
		Ванесса.УстановитьРезультатУсловия(Ложь);
	КонецЕсли;
	
	Контекст.Удалить("_ВременнаяТаблицаВычислитьВыражение");
КонецФункции

&НаКлиенте
//Если служебное условие, в котором меняется служебная переменная истинно тогда
//@СлужебноеУсловиеВКоторомМеняетсяСлужебнаяПеременнаяИстинноТогда()
Функция СлужебноеУсловиеВКоторомМеняетсяСлужебнаяПеременнаяИстинноТогда() Экспорт
	Контекст.СлужебнаяПеременная1 = Контекст.СлужебнаяПеременная1 + 1;
	Если Контекст.СлужебнаяПеременная1 < 4 Тогда
		Ванесса.УстановитьРезультатУсловия(Истина);
		Возврат Неопределено;
	КонецЕсли;	 
	
	Ванесса.УстановитьРезультатУсловия(Ложь);
КонецФункции


&НаКлиенте
Функция ОбработчикОжиданияВТечениеСекундЯВыполняю()
	ИмяОбработчика = "ОбработчикОжиданияВТечениеСекундЯВыполняю";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТекущаяДата() >= ДатаОкончанияОбработкиОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.УстановитьРезультатУсловия(Ложь);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не удалось дождаться события завершения цикла в течение <%1> секунд.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", КоличествоСекундОбработкаОжидания);
		
		Если Контекст.Свойство("ТекущаяТЧ") Тогда
			Если Контекст.ТекущаяТЧ <> Неопределено Тогда
				ДопПараметры = Новый Структура;
				Попытка
					ЗначениеТЧ = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(Контекст.ТекущаяТЧ, ДопПараметры);
				Исключение
					ЗначениеТЧ = Неопределено;
				КонецПопытки;
				
				Если ЗначениеТЧ <> Неопределено Тогда
					МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
					Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,Ванесса.Локализовать("ТекущееЗначениеТаблицы"));
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если Контекст.Свойство(ИмяЦикла) Тогда
			Контекст.Удалить(ИмяЦикла);
			Контекст.Удалить(ИмяЦикла + "_ДатаОкончанияОбработкиОжидания");
		КонецЕсли;	 
		
		Ванесса.ПродолжитьВыполнениеШагов(Истина,Ванесса.ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		
		Возврат Неопределено;
	КонецЕсли;	
	
	Ванесса.УстановитьРезультатУсловия(Истина);
	Ванесса.ПродолжитьВыполнениеШагов();
КонецФункции

&НаКлиенте
//И в течение 10 секунд я выполняю
//@ВТечениеСекундЯВыполняю(Парам01)
Функция ВТечениеСекундЯВыполняю(КоличествоСекунд) Экспорт
	СостояниеVA = Ванесса.ПолучитьСостояниеVanessaAutomation();
	ИдСтроки                 = СостояниеVA.ТекущийШаг.ИдСтроки;
	ИмяЦикла                 = "_Цикл_" + Формат(ИдСтроки, "ЧГ=; ЧН=0");
	
	Если Контекст.Свойство("ЗавершитьВыполнениеЦикла") Тогда
		Если Контекст.ЗавершитьВыполнениеЦикла = Истина Тогда
			Контекст.ЗавершитьВыполнениеЦикла = Ложь;
			Ванесса.УстановитьРезультатУсловия(Ложь);
			Если Контекст.Свойство(ИмяЦикла) Тогда
				Контекст.Удалить(ИмяЦикла);
			КонецЕсли;	 
			Если Контекст.Свойство(ИмяЦикла + "_ДатаОкончанияОбработкиОжидания") Тогда
				Контекст.Удалить(ИмяЦикла + "_ДатаОкончанияОбработкиОжидания");
			КонецЕсли;	 
			
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Ванесса.ЗапретитьВыполнениеШагов();
	
	Если Не Контекст.Свойство(ИмяЦикла) Тогда
		//при запуске первой итерации определяем параметры окончания
		Контекст.Вставить(ИмяЦикла, Истина);
		
		ДатаНачалаОбработкиОжидания       = ТекущаяДата();
		КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
		ДатаОкончанияОбработкиОжидания    = ДатаНачалаОбработкиОжидания + КоличествоСекундОбработкаОжидания;
		
		Контекст.Вставить(ИмяЦикла + "_ДатаОкончанияОбработкиОжидания", ДатаОкончанияОбработкиОжидания);
	КонецЕсли;	 
	
	ДатаОкончанияОбработкиОжидания = Контекст[ИмяЦикла + "_ДатаОкончанияОбработкиОжидания"];
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияВТечениеСекундЯВыполняю", 1, Истина);
КонецФункции

&НаКлиенте
//Тогда я прерываю цикл
//@ЯПрерываюЦикл()
Функция ЯПрерываюЦикл() Экспорт
	Контекст.Вставить("ЗавершитьВыполнениеЦикла",Истина);
	Ванесса.УстановитьПризнакЧтоСледующимШагомДолженБытьШагЦикла();
КонецФункции

&НаКлиенте
//Тогда я продолжаю цикл
//@ЯПродолжаюЦикл()
Функция ЯПродолжаюЦикл() Экспорт
	Ванесса.УстановитьПризнакЧтоСледующимШагомДолженБытьШагЦикла();
КонецФункции

&НаКлиенте
//И я делаю 10 раз
//@ЯДелаюРаз(Парам01)
Функция ЯДелаюРаз(Знач КоличествоИтераций) Экспорт
	
	Если ТипЗнч(КоличествоИтераций)= Тип("Строка") Тогда
		КоличествоИтераций = Число(КоличествоИтераций);
	КонецЕсли;	 
	
	СостояниеVA = Ванесса.ПолучитьСостояниеVanessaAutomation();
	ИдСтроки                 = СостояниеVA.ТекущийШаг.ИдСтроки;
	ИмяЦикла                 = "_Цикл_" + Формат(ИдСтроки, "ЧГ=; ЧН=0");
	ИмяСвойстваЦикла         = "_Цикл_Свойства" + Формат(ИдСтроки, "ЧГ=; ЧН=0");
	
	Если Контекст.Свойство("ЗавершитьВыполнениеЦикла") Тогда
		Если Контекст.ЗавершитьВыполнениеЦикла = Истина Тогда
			Контекст.ЗавершитьВыполнениеЦикла = Ложь;
			Ванесса.УстановитьРезультатУсловия(Ложь);
			Если Контекст.Свойство(ИмяЦикла) Тогда
				Контекст.Удалить(ИмяЦикла);
			КонецЕсли;	 
			Если Контекст.Свойство(ИмяСвойстваЦикла) Тогда
				Контекст.Удалить(ИмяСвойстваЦикла);
			КонецЕсли;	 
			
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Не Контекст.Свойство(ИмяЦикла) Тогда
		//при запуске первой итерации определяем параметры окончания
		Контекст.Вставить(ИмяЦикла,Истина);
		СвойстваЦикла = Новый Структура;
		ТекущийНомерИтерации = 0;
		МаксЧислоИтераций    = КоличествоИтераций;
		СвойстваЦикла.Вставить("ТекущийНомерИтерации", ТекущийНомерИтерации);
		СвойстваЦикла.Вставить("МаксЧислоИтераций", МаксЧислоИтераций);
		Контекст.Вставить(ИмяСвойстваЦикла, СвойстваЦикла);
		
	КонецЕсли;	 
	
	СвойстваЦикла = Контекст[ИмяСвойстваЦикла];
	
	СвойстваЦикла.ТекущийНомерИтерации = СвойстваЦикла.ТекущийНомерИтерации + 1;
	Если СвойстваЦикла.ТекущийНомерИтерации > СвойстваЦикла.МаксЧислоИтераций Тогда
		Ванесса.УстановитьРезультатУсловия(Ложь);
		
		Если Контекст.Свойство(ИмяЦикла) Тогда
			Контекст.Удалить(ИмяЦикла);
		КонецЕсли;	 
		Если Контекст.Свойство(ИмяСвойстваЦикла) Тогда
			Контекст.Удалить(ИмяСвойстваЦикла);
		КонецЕсли;	 
		
		Возврат Неопределено;
	КонецЕсли;	 
	
	Ванесса.УстановитьРезультатУсловия(Истина);
	
КонецФункции

&НаКлиенте
//И для каждой строки таблицы 'Товары' я выполняю в обратном порядке
//@ДляКаждойСтрокиТаблицыЯВыполняюВОбратномПорядке(Парам01)
Функция ДляКаждойСтрокиТаблицыЯВыполняюВОбратномПорядке(ИмяТЧ) Экспорт
	ДляКаждойСтрокиТаблицыЯВыполняю(ИмяТЧ, , "Вверх");
КонецФункции


&НаКлиенте
//И для каждой строки таблицы "ТабличнаяЧасть1" я выполняю используя колонку "N" в обратном порядке
//@ДляКаждойСтрокиТаблицыЯВыполняюИспользуяКолонкуВОбратномПорядке(Парам01,Парам02)
Функция ДляКаждойСтрокиТаблицыЯВыполняюИспользуяКолонкуВОбратномПорядке(ИмяТЧ,ИмяКолонки) Экспорт
	ДляКаждойСтрокиТаблицыЯВыполняю(ИмяТЧ,ИмяКолонки,"Вверх");
КонецФункции

&НаКлиенте
//И для каждой строки файла "ИмяФайла" я выполняю
//@ДляКаждойСтрокиФайлаЯВыполняю(Парам01)
Функция ДляКаждойСтрокиФайлаЯВыполняю(ИмяФайла) Экспорт
	
	СостояниеVA = Ванесса.ПолучитьСостояниеVanessaAutomation();
	ИдСтроки                 = СостояниеVA.ТекущийШаг.ИдСтроки;
	ИмяЦикла                 = "_Цикл_" + Формат(ИдСтроки, "ЧГ=; ЧН=0");
	ИмяСвойстваЦикла         = "_Цикл_Свойства" + Формат(ИдСтроки, "ЧГ=; ЧН=0");
	
	Если Контекст.Свойство("ЗавершитьВыполнениеЦикла") Тогда
		Если Контекст.ЗавершитьВыполнениеЦикла = Истина Тогда
			Контекст.ЗавершитьВыполнениеЦикла = Ложь;
			Ванесса.УстановитьРезультатУсловия(Ложь);
			Если Контекст.Свойство(ИмяЦикла) Тогда
				Контекст.Удалить(ИмяЦикла);
			КонецЕсли;	 
			Если Контекст.Свойство(ИмяСвойстваЦикла) Тогда
				Контекст.Удалить(ИмяСвойстваЦикла);
			КонецЕсли;	 
			
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если НЕ Контекст.Свойство(ИмяЦикла) Тогда
		//при запуске первой итерации определяем параметры окончания
		Контекст.Вставить(ИмяЦикла,Истина);
		СвойстваЦикла = Новый Структура;
		ТекущийНомерИтерации = 0;
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайла, "UTF-8");
		ТекстФайла = Текст.Прочитать();
		Текст.Закрыть();
		
		МассивСтрокФайла = Ванесса._СтрРазделить(ТекстФайла, Символы.ПС);
		
		МаксЧислоИтераций    = МассивСтрокФайла.Количество();
		СвойстваЦикла.Вставить("ТекущийНомерИтерации", ТекущийНомерИтерации);
		СвойстваЦикла.Вставить("МаксЧислоИтераций", МаксЧислоИтераций);
		СвойстваЦикла.Вставить("МассивСтрокФайла", МассивСтрокФайла);
		Контекст.Вставить(ИмяСвойстваЦикла, СвойстваЦикла);
		
	КонецЕсли;
	
	СвойстваЦикла = Контекст[ИмяСвойстваЦикла];
	
	СвойстваЦикла.ТекущийНомерИтерации = СвойстваЦикла.ТекущийНомерИтерации + 1;
	Если СвойстваЦикла.ТекущийНомерИтерации > СвойстваЦикла.МаксЧислоИтераций Тогда
		Ванесса.УстановитьРезультатУсловия(Ложь);
		
		Если Контекст.Свойство(ИмяЦикла) Тогда
			Контекст.Удалить(ИмяЦикла);
		КонецЕсли;	 
		Если Контекст.Свойство(ИмяСвойстваЦикла) Тогда
			Контекст.Удалить(ИмяСвойстваЦикла);
		КонецЕсли;	 
		
		Возврат Неопределено;
	КонецЕсли;	 
	
	Контекст.Вставить("_Строка", СвойстваЦикла.МассивСтрокФайла[СвойстваЦикла.ТекущийНомерИтерации-1]);
	
	Ванесса.УстановитьРезультатУсловия(Истина);
	
КонецФункции

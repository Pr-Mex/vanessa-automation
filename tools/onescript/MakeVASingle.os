#Использовать v8runner
#Использовать logos

Перем Лог;
Перем УправлениеКонфигуратором;

Функция ДатуКСтроке(Дат)
	Возврат Формат(Дат, "ДФ=yyyy.MM.dd.HH.mm.ss");
КонецФункции

Процедура СообщениеПередИсключением(ТекстСообщения)
	Лог.Информация(ТекстСообщения);
	Sleep(5000);
КонецПроцедуры

// Перемещаят найденные по маскам файлы с сохранением пути.
//
// Параметры:
//  КаталогКуда - Строка - Путь к каталогу в который переносятся файлы;
//  КаталогиОткуда 		 - Массив - Пути к каталогам в которых осуществляется поиск файлов;
//  МассивМасок 		 - Массив - Маски, по которым осуществляется поиск файлов.
//
// Взято из https://infostart.ru/public/537028/
Процедура ПереместитьФайлыВКаталог(КаталогКуда, КаталогиОткуда, МассивМасок)
	
	Для Каждого КаталогПоиска Из КаталогиОткуда Цикл
		КаталогПоискаОбъект = Новый Файл(КаталогПоиска);
		Если НЕ КаталогПоискаОбъект.Существует() Тогда
			Лог.Ошибка(НСтр("ru = 'Каталог не найден.'"));
			Продолжить;
		КонецЕсли;
		
		Для Каждого Маска Из МассивМасок Цикл
			
			МассивФайлов = НайтиФайлы(КаталогПоиска, Маска, Истина);
			Для Каждого НайденныйФайл Из МассивФайлов Цикл
				
				НовыйПуть = СтрЗаменить(НайденныйФайл.Путь, КаталогПоиска, КаталогКуда);
				НовоеИмя = НайденныйФайл.Имя;
				
				Если НЕ ОбеспечитьКаталог(НовыйПуть) Тогда
					Продолжить;
				КонецЕсли;
				
				Если НайденныйФайл.ЭтоКаталог() Тогда
					Продолжить;
				КонецЕсли;
				
				
				ИмяФайлаДляПеремещения = ОбъединитьПути(НовыйПуть, НовоеИмя);
				УдалитьФайлы(ИмяФайлаДляПеремещения);
				
				Попытка
					ПереместитьФайл(НайденныйФайл.ПолноеИмя, ИмяФайлаДляПеремещения);
				Исключение
					Лог.Ошибка(СтрШаблон(НСтр("ru = 'Не удалось переместить файл:
								|%1'"), ОписаниеОшибки()));
					Продолжить;
				КонецПопытки;
				
				ФайлНаДиске = Новый Файл(ОбъединитьПути(НовыйПуть, НовоеИмя));
				Если НЕ ФайлНаДиске.Существует() Тогда
					Лог.Ошибка(НСтр("ru = 'Не удалось корректно переместить файл.'"));
					Продолжить;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет наличия каталога и в случае его отсутствия создает новый.
//
// Параметры:
//  Каталог - Строка - Путь к каталогу, существование которого нужно проверить.
//
// Возвращаемое значение:
//  Булево - признак существования каталога.
//
// Взято из https://infostart.ru/public/537028/
Функция ОбеспечитьКаталог(Знач Каталог)
	
	Файл = Новый Файл(Каталог);
	Если НЕ Файл.Существует() Тогда
		Попытка
			СоздатьКаталог(Каталог);
		Исключение
			Лог.Ошибка(СтрШаблон(НСтр("ru = 'Не удалось создать каталог %1.
						|%2'"), Каталог, ИнформацияОбОшибке()));
			Возврат Ложь;
		КонецПопытки;
	ИначеЕсли НЕ Файл.ЭтоКаталог() Тогда
		Лог.Ошибка(СтрШаблон(НСтр("ru = 'Каталог %1 не является каталогом.'"), Каталог));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьЧтоВсеФайлыИсходниковСоответствуютИхВерсиям(МассивВерсий, Знач ИмяКаталога)
	ПромКаталог = СтрЗаменить(ИмяКаталога, "/", "\");
	Если Прав(ПромКаталог, 1) <> "\" Тогда
		ИмяКаталога = ИмяКаталога + ПолучитьРазделительПути();
	КонецЕсли;
	
	//Сообщить("ИмяКаталога="+ИмяКаталога);
	
	МассивФайлов    = Новый Массив;
	МассивДляПоиска = Новый Массив;
	Файлы = НайтиФайлы(ИмяКаталога, "*", Истина);
	Для Каждого Файл Из Файлы Цикл
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоСлужебныйФайл(Файл.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивФайлов.Добавить(Файл);
		
		Стр = Сред(Файл.ПолноеИмя, СтрДлина(ИмяКаталога));
		Стр = СтрЗаменить(Стр, "/", "\");
		
		//Сообщить("СтрокаДляПоиска="+Стр);
		МассивДляПоиска.Добавить(Стр);
	КонецЦикла;
	
	//Сообщить("МассивФайлов.Количество()="+МассивФайлов.Количество());
	//Сообщить("МассивВерсий.Количество()="+МассивВерсий.Количество());
	
	Если МассивФайлов.Количество() <> МассивВерсий.Количество() Тогда
		Лог.Информация("Изменилось количество файлов.");
		
		//значит в исходниках появился новый файл или исчез
		Возврат Ложь;
	КонецЕсли;
	
	
	Для Каждого СтрокаВерсии Из МассивВерсий Цикл
		Поз       = Найти(СтрокаВерсии, "|");
		Версия    = Лев(СтрокаВерсии, Поз - 1);
		ЧастьПути = Сред(СтрокаВерсии, Поз + 1);
		
		ЧастьПути = СтрЗаменить(ЧастьПути, "/", "\");
		
		ИдФайла = МассивДляПоиска.Найти(ЧастьПути);
		
		Если ИдФайла = Неопределено Тогда
			Лог.Информация("Не найден файл версии: " + ЧастьПути);
			Возврат Ложь;
		КонецЕсли;
		
		Файл = МассивФайлов[ИдФайла];
		ТекущаяВерсияСтрокой = ДатуКСтроке(Файл.ПолучитьВремяИзменения());
		Если ТекущаяВерсияСтрокой <> Версия Тогда
			Лог.Информация("Изменилась версия у файла: " + ЧастьПути);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Процедура ЗагрузитьОбработкуИлиОтчетИзXML(ИмяФайла_filename, ИмяОбработкиИлиОтчета)
	Файл_filename = Новый Файл(ИмяФайла_filename);
	
	
	КаталогГдеЛежит_filename = Файл_filename.Путь;
	ИмяФайлаВерсии = Файл_filename.Путь + "fileversion";
	
	Файл_ИмяКаталога_filename = Новый Файл(Файл_filename.Путь);
	ИмяКаталога_filename      = Файл_ИмяКаталога_filename.Имя;
	
	ФайлКаталогГдеЛежит_filename = Новый Файл(КаталогГдеЛежит_filename);
	ИмяФайлаXML = ФайлКаталогГдеЛежит_filename.Имя + ".xml";
	
	ИмяФайлаКорневойXml = ФайлКаталогГдеЛежит_filename.Путь + ИмяФайлаXML;
	ФайлКорневойXML = Новый Файл(ИмяФайлаКорневойXml);
	Если НЕ ФайлКорневойXML.Существует() Тогда
		ТекстСообщения = "Файл " + ИмяФайлаКорневойXml + " не существует.";
		СообщениеПередИсключением(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ИмяФайлаОбработкиИлиОтчета = ФайлКорневойXML.Путь + ИмяОбработкиИлиОтчета;
	
	Если Прав(НРег(ИмяФайлаОбработкиИлиОтчета), 4) = ".epf" Тогда
		ИмяФайлаВременныйОбработкаИлиОтчет = ПолучитьИмяВременногоФайла("epf");
	Иначе
		ИмяФайлаВременныйОбработкаИлиОтчет = ПолучитьИмяВременногоФайла("erf");
	КонецЕсли;
	
	ФайлОбработкаИлиОтчет = Новый Файл(ИмяФайлаОбработкиИлиОтчета);
	Если ФайлОбработкаИлиОтчет.Существует() Тогда
		//Проверим версию. Если она совпадает, то собирать файл не надо.
		ФайлВерсии = Новый Файл(ИмяФайлаВерсии);
		Если ФайлВерсии.Существует() Тогда
			Массив = Новый Массив;
			
			Текст = Новый ЧтениеТекста;
			Текст.Открыть(ИмяФайлаВерсии, "UTF-8");
			
			Пока Истина Цикл
				Стр = Текст.ПрочитатьСтроку();
				Если Стр = Неопределено Тогда
					Прервать;
				КонецЕсли;
				
				Массив.Добавить(Стр);
			КонецЦикла;
			Текст.Закрыть();
			
			Если Массив.Количество() < 1 Тогда
				ТекстСообщения = "Не получилось прочитать файл версии: " + ИмяФайлаВерсии;
				СообщениеПередИсключением(ТекстСообщения);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			ВерсияСтрокой = Массив[0];
			Поз           = Найти(ВерсияСтрокой, "|");
			ВерсияСтрокой = Лев(ВерсияСтрокой, Поз - 1);
			
			ТекущаяВерсияСтрокой = ДатуКСтроке(ФайлОбработкаИлиОтчет.ПолучитьВремяИзменения());
			Если НРег(ВерсияСтрокой) = НРег(ТекущаяВерсияСтрокой) Тогда
				Массив.Удалить(0);
				Если ПроверитьЧтоВсеФайлыИсходниковСоответствуютИхВерсиям(Массив, ФайлОбработкаИлиОтчет.Путь + ИмяКаталога_filename) Тогда
					Лог.Информация("" + ИмяОбработкиИлиОтчета + " уже собран.");
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекущаяВерсияСтрокой > ВерсияСтрокой Тогда
				Лог.Ошибка("Файл <" + ИмяФайлаОбработкиИлиОтчета + "> имеет версию новее чем в исходниках. Удалите " + ФайлОбработкаИлиОтчет.Имя + ", если хотите пересобрать его.");
				Лог.Ошибка("Версия в исходниках: " + ВерсияСтрокой);
				Лог.Ошибка("Версия файла:        " + ТекущаяВерсияСтрокой);
				
				ТекстСообщения = "Обработка прервана.";
				СообщениеПередИсключением(ТекстСообщения);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗапуска = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/LoadExternalDataProcessorOrReportFromFiles """ + ИмяФайлаКорневойXml + """  """ + ИмяФайлаВременныйОбработкаИлиОтчет + """");
	
	ИмяФайлаOut = ПолучитьИмяВременногоФайла("txt");
	ПараметрыЗапуска.Добавить("/Out """ + ИмяФайлаOut + """");
	
	Попытка
		УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
		Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
		
		ТекстСообщения = "Выгрузка обработок в xml прервана.";
		СообщениеПередИсключением(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	УдалитьФайлы(ИмяФайлаОбработкиИлиОтчета);
	ПереместитьФайл(ИмяФайлаВременныйОбработкаИлиОтчет, ИмяФайлаОбработкиИлиОтчета);
	
	ФайлОбработкаИлиОтчет = Новый Файл(ИмяФайлаОбработкиИлиОтчета);
	ВремяИзменения = ДатуКСтроке(ФайлОбработкаИлиОтчет.ПолучитьВремяИзменения());
	
	//запишем версию файла
	ЗаписатьВерсиюОбработкиИлиОтчета(ФайлОбработкаИлиОтчет, ИмяКаталога_filename, ИмяОбработкиИлиОтчета);
	
	Лог.Информация("" + ИмяОбработкиИлиОтчета + " собран.");
КонецПроцедуры

Функция ЭтоСлужебныйФайл(ИмяФайла)
	Если Нрег(ИмяФайла) = "filename" Тогда
		Возврат Истина;
	ИначеЕсли Нрег(ИмяФайла) = "fileversion" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция ПолучитьВерсииФайловВКаталоге(Каталог)
	//Сообщить("КаталогПолучитьВерсииФайловВКаталоге="+Каталог);
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("ПолноеИмя");
	ТаблицаФайлов.Колонки.Добавить("ЧастьПути");
	ТаблицаФайлов.Колонки.Добавить("ЭтоКаталог");
	ТаблицаФайлов.Колонки.Добавить("ВремяИзменения");
	
	Файлы = НайтиФайлы(Каталог, "*", Истина);
	Для Каждого Файл Из Файлы Цикл
		Если ЭтоСлужебныйФайл(Файл.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицаФайлов = ТаблицаФайлов.Добавить();
		СтрокаТаблицаФайлов.ПолноеИмя = Файл.ПолноеИмя;
		СтрокаТаблицаФайлов.ЭтоКаталог = Файл.ЭтоКаталог();
		СтрокаТаблицаФайлов.ЧастьПути = Сред(Файл.ПолноеИмя, СтрДлина(Каталог));
		
		//Сообщить("СтрокаТаблицаФайлов.ЧастьПути="+СтрокаТаблицаФайлов.ЧастьПути);
		
		Если СтрокаТаблицаФайлов.ЭтоКаталог Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицаФайлов.ВремяИзменения = ДатуКСтроке(Файл.ПолучитьВремяИзменения());
	КонецЦикла;
	
	Возврат ТаблицаФайлов;
КонецФункции

Процедура ЗаписатьВерсиюОбработкиИлиОтчета(ФайлОбработкаИлиОтчет, ИмяКаталогаОбработки, ИмяОбработкиИлиОтчета)
	ИмяФайлаВерсии = ФайлОбработкаИлиОтчет.Путь + ПолучитьРазделительПути() + ИмяКаталогаОбработки + ПолучитьРазделительПути() + "fileversion";
	//Сообщить("ИмяФайлаВерсии="+ИмяФайлаВерсии);
	УдалитьФайлы(ИмяФайлаВерсии);
	ВремяИзменения = ДатуКСтроке(ФайлОбработкаИлиОтчет.ПолучитьВремяИзменения());
	
	ВерсииФайлов = ПолучитьВерсииФайловВКаталоге(ФайлОбработкаИлиОтчет.Путь + ИмяКаталогаОбработки + ПолучитьРазделительПути());
	
	ЗТ = Новый ЗаписьТекста(ИмяФайлаВерсии, "UTF-8", , Истина);
	ЗТ.ЗаписатьСтроку(ВремяИзменения + "|" + ИмяОбработкиИлиОтчета);
	
	Для Каждого СтрокаВерсииФайлов Из ВерсииФайлов Цикл
		Если СтрокаВерсииФайлов.ЭтоКаталог Тогда
			Продолжить;
		КонецЕсли;
		
		Стр = "" + СтрокаВерсииФайлов.ВремяИзменения + "|" + СтрокаВерсииФайлов.ЧастьПути;
		ЗТ.ЗаписатьСтроку(Стр);
	КонецЦикла;
	
	ЗТ.Закрыть();
КонецПроцедуры

Процедура СобратьОбработкуИлиОтчетВКаталогеИПодКаталогах(Путь)
	Файл = Новый Файл(Путь);
	Если НЕ Файл.Существует() Тогда
		ТекстСообщения = "Каталог <" + Путь + "> не существует.";
		СообщениеПередИсключением(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Файлы = НайтиФайлы(Путь, "filename.*", Истина);
	
	КоличествоФайлов = Файлы.Количество();
	
	НомерФайла = 0;
	Для Каждого Файл Из Файлы Цикл
		НомерФайла = НомерФайла + 1;
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(Файл.ПолноеИмя, "UTF-8");
		ИмяОбработкиИлиОтчета = "";
		
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			ИмяОбработкиИлиОтчета = Стр;
		КонецЦикла;
		Текст.Закрыть();
		
		Если ИмяОбработкиИлиОтчета = "" Тогда
			ТекстСообщения = "В файле " + Файл.ПолноеИмя + " не найдено имя собираемого файла.";
			СообщениеПередИсключением(ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		Лог.Информация("Файл " + НомерФайла + " из " + КоличествоФайлов + ": " + ИмяОбработкиИлиОтчета);
		
		ЗагрузитьОбработкуИлиОтчетИзXML(Файл.ПолноеИмя, ИмяОбработкиИлиОтчета);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьКаталог(Путь)
	Файлы = НайтиФайлы(Путь, "*", Истина);
	Для Каждого Файл Из Файлы Цикл
		Попытка
			УдалитьФайлы(Файл.ПолноеИмя);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Файлы = НайтиФайлы(Путь, "*", Истина);
	Для Каждого Файл Из Файлы Цикл
		Попытка
			УдалитьФайлы(Файл.ПолноеИмя);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Файлы = НайтиФайлы(Путь, "*", Истина);
	Если Файлы.Количество() > 0 Тогда
		ВызватьИсключение "Не получилось очистить каталог <" + Путь + ">";
	КонецЕсли;
КонецПроцедуры

Процедура СкопироватьФайлыВКаталог(Знач КаталогКуда, Знач КаталогиОткуда, МассивМасок)
	
	КаталогКуда = АбсолютныйПуть(КаталогКуда);
	
	Для Каждого КаталогПоиска Из КаталогиОткуда Цикл
		
		КаталогПоискаОбъект = Новый Файл(КаталогПоиска);
		Если НЕ КаталогПоискаОбъект.Существует() Тогда
			Лог.Ошибка(НСтр("ru = 'Каталог не найден.'"));
			Продолжить;
		КонецЕсли;
		
		КаталогПоиска = АбсолютныйПуть(КаталогПоиска);
		
		Для Каждого Маска Из МассивМасок Цикл
			
			МассивФайлов = НайтиФайлы(КаталогПоиска, Маска, Истина);
			Для Каждого НайденныйФайл Из МассивФайлов Цикл
				НовыйПуть = СтрЗаменить(НайденныйФайл.Путь, КаталогПоиска, КаталогКуда);
				// Сообщить(НайденныйФайл.Путь + " --> " + НовыйПуть);
				НовоеИмя = НайденныйФайл.Имя;
				
				Если НЕ ОбеспечитьКаталог(НовыйПуть) Тогда
					Продолжить;
				КонецЕсли;
				
				Если НайденныйФайл.ЭтоКаталог() Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяФайлаДляПеремещения = ОбъединитьПути(НовыйПуть, НовоеИмя);
				УдалитьФайлы(ИмяФайлаДляПеремещения);
				
				Попытка
					КопироватьФайл(НайденныйФайл.ПолноеИмя, ИмяФайлаДляПеремещения);
				Исключение
					Лог.Ошибка(СтрШаблон(НСтр("ru = 'Не удалось скопировать файл:
								|%1'"), ОписаниеОшибки()));
					Продолжить;
				КонецПопытки;
				
				ФайлНаДиске = Новый Файл(ОбъединитьПути(НовыйПуть, НовоеИмя));
				Если НЕ ФайлНаДиске.Существует() Тогда
					Лог.Ошибка(НСтр("ru = 'Не удалось корректно скопировать файл.'"));
					Продолжить;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьФайлыVA(ПутьКVA, ПутьКBin)
	ОчиститьКаталог(ПутьКBin);
	МассивМасок = Новый Массив;
	МассивМасок.Добавить("*");
	КаталогиОткуда = Новый Массив;
	КаталогиОткуда.Добавить(ОбъединитьПути(ПутьКVA, "VanessaAutomation"));
	СкопироватьФайлыВКаталог(ОбъединитьПути(ПутьКBin, "VanessaAutomation"), КаталогиОткуда, МассивМасок);
	
	КопироватьФайл(ОбъединитьПути(ПутьКVA, "VanessaAutomation.xml"), ОбъединитьПути(ПутьКBin, "VanessaAutomation.xml"));
КонецПроцедуры

Функция ЭтоXMLВнешнейОбработки(ИмяФайла)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");
	
	ЭтоВнешняяОбработка = Ложь;
	
	НомерСтроки = 0;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
		Если НомерСтроки = 3 Тогда
			Если Найти(Стр, "<ExternalDataProcessor uuid") > 0 Тогда
				ЭтоВнешняяОбработка = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Текст.Закрыть();
	
	Возврат ЭтоВнешняяОбработка;
КонецФункции

Функция ЭтоXMLМакета(ИмяФайла)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");
	
	ЭтоXMLМакета = Ложь;
	
	НомерСтроки = 0;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
		Если Найти(Стр, "<TemplateType>SpreadsheetDocument</TemplateType>") > 0 Тогда
			ЭтоXMLМакета = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Текст.Закрыть();
	
	Возврат ЭтоXMLМакета;
КонецФункции

Процедура СкопироватьФайлыФормы(КаталогФормы, ФормыVA, ИмяФормы, ДопИмя)
	//Сообщить("ФормыVA="+ФормыVA);
	//Сообщить("КаталогФормы="+КаталогФормы);
	//Сообщить("ИмяФормы="+ИмяФормы);
	
	МассивМасок = Новый Массив;
	МассивМасок.Добавить("*");
	
	КаталогиОткуда = Новый Массив;
	КаталогиОткуда.Добавить(КаталогФормы);
	СкопироватьФайлыВКаталог(ОбъединитьПути(ФормыVA, ИмяФормы), КаталогиОткуда, МассивМасок);
	
	ИмяФайлаForm = ОбъединитьПути(ФормыVA, ИмяФормы, "Ext", "Form.xml");
	
	Файл = Новый Файл(ИмяФайлаForm);
	Если НЕ Файл.Существует() Тогда
		//значит это обычная форма, а не управляемая
		Возврат;
	КонецЕсли;
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаForm, "UTF-8");
	
	Массив = Новый Массив;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Массив.Добавить(Стр);
	КонецЦикла;
	Текст.Закрыть();
	
	НовыйМассив = Новый Массив;
	Для Ккк = 0 По Массив.Количество() - 1 Цикл
		Стр = Массив.Получить(Ккк);
		
		Если Найти(Стр, "<v8:Type>cfg:ExternalDataProcessorObject.") > 0 Тогда
			НовыйМассив.Добавить("				<v8:Type>cfg:ExternalDataProcessorObject.VanessaAutomation" + ДопИмя + "</v8:Type>");
			Продолжить;
		КонецЕсли;
		
		НовыйМассив.Добавить(Стр);
	КонецЦикла;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
	ЗТ = Новый ЗаписьТекста(ВременныйФайл, "UTF-8", , Истина);
	Для Каждого Стр Из НовыйМассив Цикл
		ЗТ.ЗаписатьСтроку(Стр);
	КонецЦикла;
	ЗТ.Закрыть();
	
	УдалитьФайлы(ИмяФайлаForm);
	ПереместитьФайл(ВременныйФайл, ИмяФайлаForm);
	
КонецПроцедуры

Процедура СкопироватьФайлыМакета(КаталогМакета, МакетыVA, ИмяМакета, ДопИмя)
	Сообщить("МакетыVA=" + МакетыVA);
	Сообщить("КаталогМакета=" + КаталогМакета);
	Сообщить("ИмяМакета=" + ИмяМакета);
	
	МассивМасок = Новый Массив;
	МассивМасок.Добавить("*");
	
	КаталогиОткуда = Новый Массив;
	КаталогиОткуда.Добавить(КаталогМакета);
	СкопироватьФайлыВКаталог(ОбъединитьПути(МакетыVA, ИмяМакета), КаталогиОткуда, МассивМасок);
	
	ИмяФайлаForm = ОбъединитьПути(МакетыVA, ИмяМакета, "Ext", "Form.xml");
	
	Файл = Новый Файл(ИмяФайлаForm);
	Если НЕ Файл.Существует() Тогда
		//значит это обычная форма, а не управляемая
		Возврат;
	КонецЕсли;
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаForm, "UTF-8");
	
	Массив = Новый Массив;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Массив.Добавить(Стр);
	КонецЦикла;
	Текст.Закрыть();
	
	НовыйМассив = Новый Массив;
	Для Ккк = 0 По Массив.Количество() - 1 Цикл
		Стр = Массив.Получить(Ккк);
		
		Если Найти(Стр, "<v8:Type>cfg:ExternalDataProcessorObject.") > 0 Тогда
			НовыйМассив.Добавить("				<v8:Type>cfg:ExternalDataProcessorObject.VanessaAutomation" + ДопИмя + "</v8:Type>");
			Продолжить;
		КонецЕсли;
		
		НовыйМассив.Добавить(Стр);
	КонецЦикла;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
	ЗТ = Новый ЗаписьТекста(ВременныйФайл, "UTF-8", , Истина);
	Для Каждого Стр Из НовыйМассив Цикл
		ЗТ.ЗаписатьСтроку(Стр);
	КонецЦикла;
	ЗТ.Закрыть();
	
	УдалитьФайлы(ИмяФайлаForm);
	ПереместитьФайл(ВременныйФайл, ИмяФайлаForm);
	
КонецПроцедуры

Процедура ВставитьФормуВVA(ФайлXMLФормы, Префикс, МассивИменФорм, ВременныйКаталогVA, НомерФормы, ДопИмя)
	МассивСтрок = СтрРазделить(ФайлXMLФормы.ИмяБезРасширения, " ");
	Если МассивСтрок.Количество() = 1 Тогда
		ИмяФормы = МассивСтрок[0];
	Иначе
		ИмяФормы = "";
		Для Каждого Стр Из МассивСтрок Цикл
			ИмяФормы = ИмяФормы + Врег(Лев(Стр, 1)) + Сред(Стр, 2);
		КонецЦикла;
	КонецЕсли;
	
	ИмяФормы = Префикс + "_" + ИмяФормы;
	
	МассивИменФорм.Добавить(ИмяФормы);
	
	ПутьКФорме = ОбъединитьПути(ФайлXMLФормы.Путь, ФайлXMLФормы.ИмяБезРасширения, "Forms", "УправляемаяФорма");
	РеальноеИсходноеИмяФормы = "УправляемаяФорма";
	Файл = Новый Файл(ПутьКФорме);
	Если НЕ Файл.Существует() Тогда
		ПутьКФорме = ОбъединитьПути(ФайлXMLФормы.Путь, ФайлXMLФормы.ИмяБезРасширения, "Forms", "Форма");
		РеальноеИсходноеИмяФормы = "Форма";
	КонецЕсли;
	
	СкопироватьФайлыФормы(ПутьКФорме, ОбъединитьПути(ВременныйКаталогVA, "VanessaAutomation", "Forms"), ИмяФормы, ДопИмя);
	
	НовыйФайлФормы = ОбъединитьПути(ВременныйКаталогVA, "VanessaAutomation", "Forms", ИмяФормы + ".xml");
	КопироватьФайл(ОбъединитьПути(ФайлXMLФормы.Путь, ФайлXMLФормы.ИмяБезРасширения, "Forms", РеальноеИсходноеИмяФормы + ".xml"), НовыйФайлФормы);
	ЗаменитьВФайлеФормыИмяФормы(НовыйФайлФормы, ИмяФормы, НомерФормы);
	
	XML_VA = ОбъединитьПути(ВременныйКаталогVA, "VanessaAutomation.xml");
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(XML_VA, "UTF-8");
	
	Массив = Новый Массив;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Массив.Добавить(Стр);
	КонецЦикла;
	Текст.Закрыть();
	
	НовыйМассив = Новый Массив;
	Для Ккк = 0 По Массив.Количество() - 1 Цикл
		Стр = Массив.Получить(Ккк);
		
		Если Найти(Стр, "<Template>ОтчетТестирования</Template>") > 0 Тогда
			НовыйМассив.Добавить("			<Form>" + ИмяФормы + "</Form>");
		КонецЕсли;
		
		НовыйМассив.Добавить(Стр);
	КонецЦикла;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
	ЗТ = Новый ЗаписьТекста(ВременныйФайл, "UTF-8", , Истина);
	Для Каждого Стр Из НовыйМассив Цикл
		ЗТ.ЗаписатьСтроку(Стр);
	КонецЦикла;
	ЗТ.Закрыть();
	
	УдалитьФайлы(XML_VA);
	ПереместитьФайл(ВременныйФайл, XML_VA);
	
КонецПроцедуры

Процедура ВставитьМакетыВVA(ФайлXMLМакета, Префикс, ВременныйКаталогVA, ДопИмя)
	МассивСтрок = СтрРазделить(ФайлXMLМакета.ИмяБезРасширения, " ");
	Если МассивСтрок.Количество() = 1 Тогда
		ИмяМакета = МассивСтрок[0];
	Иначе
		ИмяМакета = "";
		Для Каждого Стр Из МассивСтрок Цикл
			ИмяМакета = ИмяМакета + Врег(Лев(Стр, 1)) + Сред(Стр, 2);
		КонецЦикла;
	КонецЕсли;
	
	ФайлTemplates    = Новый Файл(ФайлXMLМакета.Путь);
	ФайлИмяОбработки = Новый Файл(ФайлTemplates.Путь);
	Если ЗначениеЗаполнено(Префикс) Тогда
		ИмяМакета = Префикс + "_" + ФайлИмяОбработки.Имя + "_" + ИмяМакета;
	Иначе
		ИмяМакета = ФайлИмяОбработки.Имя + "_" + ИмяМакета;
	КонецЕсли;
	
	СкопироватьФайлыМакета(ФайлXMLМакета.Путь + ФайлXMLМакета.ИмяБезРасширения, ОбъединитьПути(ВременныйКаталогVA, "VanessaAutomation", "Templates"), ИмяМакета, ДопИмя);
	
	НовыйФайлМакета = ОбъединитьПути(ВременныйКаталогVA, "VanessaAutomation", "Templates", ИмяМакета + ".xml");
	КопироватьФайл(ФайлXMLМакета.ПолноеИмя, НовыйФайлМакета);
	ЗаменитьВФайлеМакетаИмяМакета(НовыйФайлМакета, ИмяМакета);
	
	XML_VA = ОбъединитьПути(ВременныйКаталогVA, "VanessaAutomation.xml");
	Сообщить("XML_VA=" + XML_VA);
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(XML_VA, "UTF-8");
	
	Массив = Новый Массив;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Массив.Добавить(Стр);
	КонецЦикла;
	Текст.Закрыть();
	
	
	НовыйМассив = Новый Массив;
	Для Ккк = 0 По Массив.Количество() - 1 Цикл
		Стр = Массив.Получить(Ккк);
		
		Если Найти(Стр, "<Template>ОтчетТестирования</Template>") > 0 Тогда
			НовыйМассив.Добавить("			<Template>" + ИмяМакета + "</Template>");
		КонецЕсли;
		
		НовыйМассив.Добавить(Стр);
	КонецЦикла;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
	ЗТ = Новый ЗаписьТекста(ВременныйФайл, "UTF-8", , Истина);
	Для Каждого Стр Из НовыйМассив Цикл
		ЗТ.ЗаписатьСтроку(Стр);
	КонецЦикла;
	ЗТ.Закрыть();
	
	УдалитьФайлы(XML_VA);
	ПереместитьФайл(ВременныйФайл, XML_VA);
КонецПроцедуры

Процедура ЗаменитьВФайлеФормыИмяФормы(НовыйФайлФормы, ИмяФормы, НомерФормы)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(НовыйФайлФормы, "UTF-8");
	
	Массив = Новый Массив;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Массив.Добавить(Стр);
	КонецЦикла;
	Текст.Закрыть();
	
	СтрокаНомерФормы = Строка(НомерФормы);
	Пока СтрДлина(СтрокаНомерФормы) < 4 Цикл
		СтрокаНомерФормы = "0" + СтрокаНомерФормы;
	КонецЦикла;
	
	НовыйМассив = Новый Массив;
	Для Ккк = 0 По Массив.Количество() - 1 Цикл
		Стр = Массив.Получить(Ккк);
		
		Если Найти(Стр, "<Name>") > 0 Тогда
			НовыйМассив.Добавить("			<Name>" + ИмяФормы + "</Name>");
			Продолжить;
		ИначеЕсли Найти(Стр, "<Form uuid") > 0 Тогда
			НовыйМассив.Добавить("	<Form uuid=""70e297e0-e8a2-43bf-8be1-62e408f6" + СтрокаНомерФормы + """>");
			Продолжить;
		КонецЕсли;
		
		НовыйМассив.Добавить(Стр);
	КонецЦикла;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
	ЗТ = Новый ЗаписьТекста(ВременныйФайл, "UTF-8", , Истина);
	Для Каждого Стр Из НовыйМассив Цикл
		ЗТ.ЗаписатьСтроку(Стр);
	КонецЦикла;
	ЗТ.Закрыть();
	
	УдалитьФайлы(НовыйФайлФормы);
	ПереместитьФайл(ВременныйФайл, НовыйФайлФормы);
КонецПроцедуры

Процедура ЗаменитьВФайлеМакетаИмяМакета(НовыйФайлМакета, ИмяМакета)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(НовыйФайлМакета, "UTF-8");
	
	Массив = Новый Массив;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Массив.Добавить(Стр);
	КонецЦикла;
	Текст.Закрыть();
	
	НовыйМассив = Новый Массив;
	Для Ккк = 0 По Массив.Количество() - 1 Цикл
		Стр = Массив.Получить(Ккк);
		
		Если Найти(Стр, "<Name>") > 0 Тогда
			НовыйМассив.Добавить("			<Name>" + ИмяМакета + "</Name>");
			Продолжить;
		КонецЕсли;
		
		НовыйМассив.Добавить(Стр);
	КонецЦикла;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
	ЗТ = Новый ЗаписьТекста(ВременныйФайл, "UTF-8", , Истина);
	Для Каждого Стр Из НовыйМассив Цикл
		ЗТ.ЗаписатьСтроку(Стр);
	КонецЦикла;
	ЗТ.Закрыть();
	
	УдалитьФайлы(НовыйФайлМакета);
	ПереместитьФайл(ВременныйФайл, НовыйФайлМакета);
КонецПроцедуры

Процедура ВставитьКодВОсновнуюФормуVA(ВременныйКаталогVA, МассивИменФорм)
	ПутьКФайлуКодаОсновнойФормы = ПутьКМодулюФормы(ВременныйКаталогVA, "УправляемаяФорма");
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлуКодаОсновнойФормы, "UTF-8");
	
	Массив = Новый Массив;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Массив.Добавить(Стр);
	КонецЦикла;
	Текст.Закрыть();
	
	НовыйМассив = Новый Массив;
	Для Ккк = 0 По Массив.Количество() - 1 Цикл
		Стр = Массив.Получить(Ккк);
		
		Стр = СтрЗаменить(Стр, "Объект.ВерсияПоставки = ""standart"";", "Объект.ВерсияПоставки = ""single"";");
		
		НовыйМассив.Добавить(Стр);
	КонецЦикла;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
	ЗТ = Новый ЗаписьТекста(ВременныйФайл, "UTF-8", , Истина);
	Для Каждого Стр Из НовыйМассив Цикл
		ЗТ.ЗаписатьСтроку(Стр);
	КонецЦикла;
	ЗТ.Закрыть();
	
	УдалитьФайлы(ПутьКФайлуКодаОсновнойФормы);
	ПереместитьФайл(ВременныйФайл, ПутьКФайлуКодаОсновнойФормы);
КонецПроцедуры

Процедура ВставитьКодСоставаБиблиотекВVA(ВременныйКаталогVA, МассивИменФорм)
	ПутьКФайлуКодаОсновнойФормы = МодульОбъекта(ВременныйКаталогVA, "VanessaAutomation");
	
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлуКодаОсновнойФормы, "UTF-8");
	
	Массив = Новый Массив;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Массив.Добавить(Стр);
	КонецЦикла;
	Текст.Закрыть();
	
	
	НовыйМассив = Новый Массив;
	Для Ккк = 0 По Массив.Количество() - 1 Цикл
		Стр = Массив.Получить(Ккк);
		
		НовыйМассив.Добавить(Стр);
		Если Найти(Стр, "Тут надо добавить имена форм, которые являются встроенными библиотеками") > 0 Тогда
			Для Каждого ИмяФормы Из МассивИменФорм Цикл
				Если Лев(ИмяФормы, 5) <> "Тест_" Тогда
					Продолжить;
				КонецЕсли;
				
				НовыйМассив.Добавить("	Спс.Добавить(""ВнешняяОбработка.VanessaAutomationsingle.Форма." + ИмяФормы + """);");
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
	ЗТ = Новый ЗаписьТекста(ВременныйФайл, "UTF-8", , Истина);
	Для Каждого Стр Из НовыйМассив Цикл
		ЗТ.ЗаписатьСтроку(Стр);
	КонецЦикла;
	ЗТ.Закрыть();
	
	УдалитьФайлы(ПутьКФайлуКодаОсновнойФормы);
	ПереместитьФайл(ВременныйФайл, ПутьКФайлуКодаОсновнойФормы);
КонецПроцедуры

Процедура ВставитьФормыОбработокВVA(ПутьКVA, ВременныйКаталогVA, БиблиотекиДляВстраивания, ДопИмя)
	МассивПутейБиблиотеки = СтрРазделить(БиблиотекиДляВстраивания, ";");
	
	МассивИменФорм = Новый Массив;
	
	НомерФормы = 0;
	КаталогПлагинов = ОбъединитьПути(ПутьКVA, "plugins");
	Файлы = НайтиФайлы(КаталогПлагинов, "*.xml", Истина);
	Для Каждого Файл Из Файлы Цикл
		Если НЕ ЭтоXMLВнешнейОбработки(Файл.ПолноеИмя) Тогда
			Продолжить;
		КонецЕсли;
		
		Сообщить("Найден файл обработки: " + Файл.ПолноеИмя);
		
		НомерФормы = НомерФормы + 1;
		ВставитьФормуВVA(Файл, "Плагин", МассивИменФорм, ВременныйКаталогVA, НомерФормы, ДопИмя);
	КонецЦикла;
	
	КаталогЛокализации = ОбъединитьПути(ПутьКVA, "locales");
	Файлы = НайтиФайлы(КаталогЛокализации, "*.xml", Истина);
	Для Каждого Файл Из Файлы Цикл
		Если НЕ ЭтоXMLВнешнейОбработки(Файл.ПолноеИмя) Тогда
			Продолжить;
		КонецЕсли;
		
		Сообщить("Найден файл обработки: " + Файл.ПолноеИмя);
		
		НомерФормы = НомерФормы + 1;
		ВставитьФормуВVA(Файл, "Локализация", МассивИменФорм, ВременныйКаталогVA, НомерФормы, ДопИмя);
	КонецЦикла;
	
	КаталогЛокализации = ОбъединитьПути(ПутьКVA, "lib", "Video");
	Файлы = НайтиФайлы(КаталогЛокализации, "*.xml", Истина);
	Для Каждого Файл Из Файлы Цикл
		Если НЕ ЭтоXMLВнешнейОбработки(Файл.ПолноеИмя) Тогда
			Продолжить;
		КонецЕсли;
		
		Сообщить("Найден файл обработки: " + Файл.ПолноеИмя);
		
		НомерФормы = НомерФормы + 1;
		ВставитьФормуВVA(Файл, "Video", МассивИменФорм, ВременныйКаталогVA, НомерФормы, ДопИмя);
	КонецЦикла;
	
	КаталогLib = ОбъединитьПути(ПутьКVA, "lib", "CompareFiles");
	Файлы = НайтиФайлы(КаталогLib, "*.xml", Истина);
	Для Каждого Файл Из Файлы Цикл
		Если НЕ ЭтоXMLВнешнейОбработки(Файл.ПолноеИмя) Тогда
			Продолжить;
		КонецЕсли;
		
		Сообщить("Найден файл обработки: " + Файл.ПолноеИмя);
		
		НомерФормы = НомерФормы + 1;
		ВставитьФормуВVA(Файл, "Служебные", МассивИменФорм, ВременныйКаталогVA, НомерФормы, ДопИмя);
	КонецЦикла;
	
	Для Каждого КаталогБиблиотеки Из МассивПутейБиблиотеки Цикл
		Файлы = НайтиФайлы(КаталогБиблиотеки, "*.xml", Истина);
		Для Каждого Файл Из Файлы Цикл
			Если НЕ ЭтоXMLВнешнейОбработки(Файл.ПолноеИмя) Тогда
				Продолжить;
			КонецЕсли;
			
			Сообщить("Найден файл обработки: " + Файл.ПолноеИмя);
			
			НомерФормы = НомерФормы + 1;
			ВставитьФормуВVA(Файл, "Тест", МассивИменФорм, ВременныйКаталогVA, НомерФормы, ДопИмя);
		КонецЦикла;
		
		ВставитьЭкспортныеФичиВМакеты(ВременныйКаталогVA, КаталогБиблиотеки);
	КонецЦикла;
	
	//макеты локализации
	КаталогЛокализации = ОбъединитьПути(ПутьКVA, "locales");
	Файлы = НайтиФайлы(КаталогЛокализации, "*.xml", Истина);
	Для Каждого Файл Из Файлы Цикл
		Если НЕ ЭтоXMLМакета(Файл.ПолноеИмя) Тогда
			Продолжить;
		КонецЕсли;
		
		Сообщить("Нашел файл макета: " + Файл.ПолноеИмя);
		
		ВставитьМакетыВVA(Файл, "Локализация", ВременныйКаталогVA, ДопИмя);
	КонецЦикла;
	
	//макеты обработок
	КаталогЛокализации = ОбъединитьПути(ПутьКVA, "features", "Libraries");
	Файлы = НайтиФайлы(КаталогЛокализации, "*.xml", Истина);
	Для Каждого Файл Из Файлы Цикл
		Если НЕ ЭтоXMLМакета(Файл.ПолноеИмя) Тогда
			Продолжить;
		КонецЕсли;
		
		Сообщить("Нашел файл макета: " + Файл.ПолноеИмя);
		
		ВставитьМакетыВVA(Файл, "МакетОбработки", ВременныйКаталогVA, ДопИмя);
	КонецЦикла;
	
	ВставитьКодСоставаБиблиотекВVA(ВременныйКаталогVA, МассивИменФорм);
	ВставитьКодВОсновнуюФормуVA(ВременныйКаталогVA, МассивИменФорм);
	
	ВставитьФичаРидер(ПутьКVA, ВременныйКаталогVA);
	
	Заполнитель = "--Шаблон--";
	ПутьКПлагинам = ОбъединитьПути(ПутьКVA, "plugins");
	ШаблонПути = МодульОбъекта(ПутьКПлагинам, Заполнитель);
	
	ВставитьМодульПлагина(ПутьКVA, ВременныйКаталогVA, "ЗапросыИзБД", СтрЗаменить(ШаблонПути, Заполнитель, "ЗапросыИзБД"));
	
	ВставитьМодульПлагина(ПутьКVA, ВременныйКаталогVA, "СериализаторMXL", СтрЗаменить(ШаблонПути, Заполнитель, "СериализаторMXL"));
	ВставитьРеквизитыОбработкиВVA(ВременныйКаталогVA, ОбъединитьПути(ПутьКПлагинам, "СериализаторMXL.xml"), "СериализаторMXL", ДопИмя);
	
	ВставитьМодульПлагина(ПутьКVA, ВременныйКаталогVA, "УтвержденияBDD", СтрЗаменить(ШаблонПути, Заполнитель, "УтвержденияBDD"));
	ВставитьРеквизитыОбработкиВVA(ВременныйКаталогVA, ОбъединитьПути(ПутьКПлагинам, "УтвержденияBDD.xml"), "УтвержденияBDD", ДопИмя);
	
	ЗаменитьИмяОсновнойОбработки(ВременныйКаталогVA, ДопИмя);
	
	ЗаменитьВФормахИмяОбработки(ВременныйКаталогVA, ДопИмя);
КонецПроцедуры

Процедура ЗаменитьВФормахИмяОбработки(ВременныйКаталогVA, ДопИмя)
	Файлы = НайтиФайлы(ВременныйКаталогVA, "Form.xml", Истина);
	Для Каждого Файл Из Файлы Цикл
		НовыйМассив = Новый Массив;
		XMlФормы = Файл.ПолноеИмя;
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(XMlФормы, "UTF-8");
		
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			НовыйМассив.Добавить(Стр);
		КонецЦикла;
		Текст.Закрыть();
		
		ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
		ЗТ = Новый ЗаписьТекста(ВременныйФайл, "UTF-8", , Истина);
		Для Каждого Стр Из НовыйМассив Цикл
			Если Найти(Стр, "<v8:Type>cfg:ExternalDataProcessorObject.VanessaAutomation</v8:Type>") > 0 Тогда
				Стр = СтрЗаменить(Стр, "<v8:Type>cfg:ExternalDataProcessorObject.VanessaAutomation</v8:Type>", "<v8:Type>cfg:ExternalDataProcessorObject.VanessaAutomation" + ДопИмя + "</v8:Type>");
			КонецЕсли;
			
			ЗТ.ЗаписатьСтроку(Стр);
		КонецЦикла;
		ЗТ.Закрыть();
		
		УдалитьФайлы(XMlФормы);
		ПереместитьФайл(ВременныйФайл, XMlФормы);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаменитьИмяОсновнойОбработки(ВременныйКаталогVA, ДопИмя)
	//Замена в xml
	НовыйМассив = Новый Массив;
	XMlОсновнойОбработки = ОбъединитьПути(ВременныйКаталогVA, "VanessaAutomation.xml");
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(XMlОсновнойОбработки, "UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		НовыйМассив.Добавить(Стр);
	КонецЦикла;
	Текст.Закрыть();
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
	ЗТ = Новый ЗаписьТекста(ВременныйФайл, "UTF-8", , Истина);
	Для Каждого Стр Из НовыйМассив Цикл
		Если Найти(Стр, "<Name>VanessaAutomation</Name>") > 0 Тогда
			Стр = СтрЗаменить(Стр, "VanessaAutomation", "VanessaAutomation" + ДопИмя);
		ИначеЕсли Найти(Стр, "<v8:content>Vanessa Automation</v8:content>") > 0 Тогда
			Стр = СтрЗаменить(Стр, "Vanessa Automation", "Vanessa Automation " + ДопИмя);
		ИначеЕсли Найти(Стр, ".VanessaAutomation") > 0 Тогда
			Стр = СтрЗаменить(Стр, ".VanessaAutomation", ".VanessaAutomation" + ДопИмя);
		КонецЕсли;
		
		ЗТ.ЗаписатьСтроку(Стр);
	КонецЦикла;
	ЗТ.Закрыть();
	
	УдалитьФайлы(XMlОсновнойОбработки);
	ПереместитьФайл(ВременныйФайл, XMlОсновнойОбработки);
	
	
	
	
	
	
	
	
	
	//модуль основной формы
	НовыйМассив = Новый Массив;
	ФайлМодуляФормы = ПутьКМодулюФормы(ВременныйКаталогVA, "УправляемаяФорма");
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ФайлМодуляФормы, "UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		НовыйМассив.Добавить(Стр);
	КонецЦикла;
	Текст.Закрыть();
	
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
	ЗТ = Новый ЗаписьТекста(ВременныйФайл, "UTF-8", , Истина);
	Для Каждого Стр Из НовыйМассив Цикл
		Если Найти(Стр, "ВнешняяОбработка.VanessaAutomation") > 0 Тогда
			Стр = СтрЗаменить(Стр, "ВнешняяОбработка.VanessaAutomation.", "ВнешняяОбработка.VanessaAutomation" + ДопИмя + ".");
		КонецЕсли;
		
		ЗТ.ЗаписатьСтроку(Стр);
	КонецЦикла;
	ЗТ.Закрыть();
	
	УдалитьФайлы(ФайлМодуляФормы);
	ПереместитьФайл(ВременныйФайл, ФайлМодуляФормы);
КонецПроцедуры

Процедура ВставитьЭкспортныеФичиВМакеты(ВременныйКаталогVA, КаталогБиблиотеки)
	НовыйМассив = Новый Массив;
	
	ТекстовыйМакетДляЗаписи = ФайлДанныеМакета(ВременныйКаталогVA, "VanessaAutomation", "ЭкспортныеСценарии");
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ТекстовыйМакетДляЗаписи, "UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		НовыйМассив.Добавить(Стр);
	КонецЦикла;
	Текст.Закрыть();
	
	
	КаталогДляПоиска = КаталогБиблиотеки;
	
	Файлы = НайтиФайлы(КаталогДляПоиска, "*.feature", Истина);
	Для Каждого Файл Из Файлы Цикл
		//надо найти макеты   @ExternalUse
		
		МассивФичи = Новый Массив;
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(Файл.ПолноеИмя, "UTF-8");
		
		НашлиСтрокуТега = Ложь;
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Если Найти(Стр, "@ExternalUse") > 0 Тогда
				НашлиСтрокуТега = Истина;
			КонецЕсли;
			
			МассивФичи.Добавить(Стр);
		КонецЦикла;
		
		Текст.Закрыть();
		
		Если НЕ НашлиСтрокуТега Тогда
			Продолжить;
		КонецЕсли;
		
		Сообщить("Нашел фичу ExternalUse: " + Файл.ПолноеИмя);
		
		НашлиОбъявлениеСценария = Ложь;
		Для Ккк = 0 По МассивФичи.Количество() - 1 Цикл
			Стр = МассивФичи.Получить(Ккк);
			
			Если Найти(Стр, "@ТипШага:") > 0 ИЛИ Найти(НРег(Стр), НРег("Сценарий:")) > 0 Тогда
				НашлиОбъявлениеСценария = Истина;
				НовыйМассив.Добавить(Стр);
				Продолжить;
			КонецЕсли;
			
			Если НЕ НашлиОбъявлениеСценария Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйМассив.Добавить(Стр);
		КонецЦикла;
		
		НовыйМассив.Добавить("");
		НовыйМассив.Добавить("");
	КонецЦикла;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("txt");
	ЗТ = Новый ЗаписьТекста(ВременныйФайл, "UTF-8", , Ложь);
	Для Каждого Стр Из НовыйМассив Цикл
		ЗТ.ЗаписатьСтроку(Стр);
	КонецЦикла;
	ЗТ.Закрыть();
	
	УдалитьФайлы(ТекстовыйМакетДляЗаписи);
	ПереместитьФайл(ВременныйФайл, ТекстовыйМакетДляЗаписи);
КонецПроцедуры

Процедура ВставитьРеквизитыОбработкиВVA(ВременныйКаталогVA, ОсновнойXMLОбработки, ИмяОбработки, ДопИмя);
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ОсновнойXMLОбработки, "UTF-8");
	
	МассивИсходнойОбработки = Новый Массив;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		МассивИсходнойОбработки.Добавить(Стр);
	КонецЦикла;
	Текст.Закрыть();
	
	ПутьКXML_VA = ОбъединитьПути(ВременныйКаталогVA, "VanessaAutomation.xml");
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКXML_VA, "UTF-8");
	
	МассивVA = Новый Массив;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		МассивVA.Добавить(Стр);
	КонецЦикла;
	Текст.Закрыть();
	
	МассивСекцияАтрибутов = Новый Массив;
	НашлиСекциюChildObjects = Ложь;
	Для Ккк = 0 По МассивИсходнойОбработки.Количество() - 1 Цикл
		Стр = МассивИсходнойОбработки.Получить(Ккк);
		
		Если Найти(Стр, "<ChildObjects>") > 0 Тогда
			НашлиСекциюChildObjects = Истина;
			Продолжить;
		ИначеЕсли Найти(Стр, "<Form>") > 0 Тогда
			Продолжить;
		ИначеЕсли Найти(Стр, "</ChildObjects>") > 0 Тогда
			Прервать;
		ИначеЕсли Найти(Стр, "<TabularSection uuid") > 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ НашлиСекциюChildObjects Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСекцияАтрибутов.Добавить(Стр);
	КонецЦикла;
	
	МассивСекцияТаблиц = Новый Массив;
	НашлиСекциюТаблиц = Ложь;
	Для Ккк = 0 По МассивИсходнойОбработки.Количество() - 1 Цикл
		Стр = МассивИсходнойОбработки.Получить(Ккк);
		
		Если Найти(Стр, "<TabularSection uuid") > 0 Тогда
			НашлиСекциюТаблиц = Истина;
			МассивСекцияТаблиц.Добавить(Стр);
			Продолжить;
		ИначеЕсли Найти(Стр, "<Form>") > 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ НашлиСекциюТаблиц Тогда
			Продолжить;
		КонецЕсли;
		
		Стр = СтрЗаменить(Стр, """DataProcessorTabularSection." + ИмяОбработки, """DataProcessorTabularSection.VanessaAutomation" + ДопИмя);
		Стр = СтрЗаменить(Стр, """DataProcessorTabularSectionRow." + ИмяОбработки, """DataProcessorTabularSectionRow.VanessaAutomation" + ДопИмя);
		
		МассивСекцияТаблиц.Добавить(Стр);
	КонецЦикла;
	
	БылаВставкаАтрибутов = Ложь;
	БылаВставкаТаблиц    = Ложь;
	НовыйМассив = Новый Массив;
	Для Ккк = 0 По МассивVA.Количество() - 1 Цикл
		Стр = МассивVA.Получить(Ккк);
		
		НашлиСекциюАтрибута = Ложь;
		Если Найти(Стр, "<ChildObjects>") > 0 И НЕ БылаВставкаАтрибутов Тогда
			НовыйМассив.Добавить(Стр);
			БылаВставкаАтрибутов = Истина;
			//делаем вставку реквизитов
			Для Ррр = 0 По МассивСекцияАтрибутов.Количество() - 1 Цикл
				СтрокаСекции = МассивСекцияАтрибутов.Получить(Ррр);
				
				Если Найти(СтрокаСекции, "<Attribute uuid") > 0 Тогда
					НашлиСекциюАтрибута = Истина;
					НовыйМассив.Добавить(СтрокаСекции);
					//Сообщить(СтрокаСекции);
					Продолжить;
				ИначеЕсли Найти(СтрокаСекции, "</Attribute>") > 0 Тогда
					НашлиСекциюАтрибута = Ложь;
					НовыйМассив.Добавить(СтрокаСекции);
					//Сообщить(СтрокаСекции);
					Продолжить;
				КонецЕсли;
				
				Если НЕ НашлиСекциюАтрибута Тогда
					Продолжить;
				КонецЕсли;
				
				//Сообщить(СтрокаСекции);
				
				НовыйМассив.Добавить(СтрокаСекции);
			КонецЦикла;
			
			Продолжить;
		ИначеЕсли Найти(Стр, "<Form>") > 0 И НЕ БылаВставкаТаблиц Тогда
			БылаВставкаТаблиц = Истина;
			
			Для Ррр = 0 По МассивСекцияТаблиц.Количество() - 1 Цикл
				СтрокаСекции = МассивСекцияТаблиц.Получить(Ррр);
				//Сообщить(СтрокаСекции);
				НовыйМассив.Добавить(СтрокаСекции);
			КонецЦикла;
			
		КонецЕсли;
		
		НовыйМассив.Добавить(Стр);
	КонецЦикла;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("bsl");
	ЗТ = Новый ЗаписьТекста(ВременныйФайл, "UTF-8", , Истина);
	Для Каждого Стр Из НовыйМассив Цикл
		ЗТ.ЗаписатьСтроку(Стр);
	КонецЦикла;
	ЗТ.Закрыть();
	
	УдалитьФайлы(ПутьКXML_VA);
	ПереместитьФайл(ВременныйФайл, ПутьКXML_VA);
	
КонецПроцедуры

Процедура ВставитьМодульПлагина(ПутьКVA, ВременныйКаталогVA, ИмяОбработкиДляВставки, МодульОбработкиVA)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(МодульОбработкиVA, "UTF-8");
	
	МассивИсходнойОбработки = Новый Массив;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		МассивИсходнойОбработки.Добавить(Стр);
	КонецЦикла;
	Текст.Закрыть();
	
	МодульДляВставки = МодульОбъекта(ВременныйКаталогVA, "VanessaAutomation");
	Сообщить("МодульДляВставки=" + МодульДляВставки);
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(МодульДляВставки, "UTF-8");
	
	НадоПродолжить = Ложь;
	Массив = Новый Массив;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Если Найти(Стр, "#Область ОбщиеПроцедурыИФункции") > 0 Тогда
			НадоПродолжить = Истина;
		ИначеЕсли Найти(Стр, "#Область ОбщееОписаниеПеременных") > 0 Тогда
			НадоПродолжить = Истина;
		КонецЕсли;
		
		Если НадоПродолжить Тогда
			Если Найти(Стр, "#КонецОбласти") > 0 Тогда
				НадоПродолжить = Ложь;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Массив.Добавить(Стр);
	КонецЦикла;
	Текст.Закрыть();
	
	НовыйМассив = Новый Массив;
	Для Ккк = 0 По Массив.Количество() - 1 Цикл
		Стр = Массив.Получить(Ккк);
		
		
		Если Найти(Стр, "#КонецОбласти ОписаниеПеременных") > 0 Тогда
			//добавляем часть с переменными из модуля
			НовыйМассив.Добавить("#Область Переменные" + ИмяОбработкиДляВставки);
			Для Каждого СтрВставка Из МассивИсходнойОбработки Цикл
				Если Найти(СтрВставка, "#КонецОбласти ОписаниеПеременных") > 0 Тогда
					//Для Каждого Элем Из МассивПеременных Цикл
					//	НовыйМассив.Добавить(Элем);
					//КонецЦикла;
					
					Прервать;
				ИначеЕсли Найти(СтрВставка, "#Область ОписаниеПеременных") > 0 Тогда
					Продолжить;
				ИначеЕсли Найти(СтрВставка, "Перем ТекстСообщенийПользователю;") > 0 Тогда
					Продолжить;
				КонецЕсли;
				НовыйМассив.Добавить(СтрВставка);
			КонецЦикла;
		КонецЕсли;
		
		Если Найти(Стр, "#КонецОбласти ПроцедурыИФункции") > 0 Тогда
			//добавляем часть с процедурами и функциями
			
			НадоПродолжить = Истина;
			НовыйМассив.Добавить("#Область ПроцедурыИФункции" + ИмяОбработкиДляВставки);
			Для Каждого СтрВставка Из МассивИсходнойОбработки Цикл
				Если Найти(СтрВставка, "#КонецОбласти ПроцедурыИФункции") > 0 Тогда
					Прервать;
				ИначеЕсли Найти(СтрВставка, "#Область ПроцедурыИФункции") > 0 Тогда
					НадоПродолжить = Ложь;
					Продолжить;
				КонецЕсли;
				
				Если НадоПродолжить Тогда
					Продолжить;
				КонецЕсли;
				
				Если Лев(НРег(СтрВставка), 8) = "#область" Тогда
					СтрВставка = СтрВставка + ИмяОбработкиДляВставки;
				КонецЕсли;	
				
				НовыйМассив.Добавить(СтрВставка);
			КонецЦикла;
		КонецЕсли;
		
		Если Найти(Стр, "#КонецОбласти ИнициализацияПеременных") > 0 Тогда
			//добавляем часть с процедурами и функциями
			
			НадоПродолжить = Истина;
			НовыйМассив.Добавить("#Область ИнициализацияПеременных" + ИмяОбработкиДляВставки);
			Для Каждого СтрВставка Из МассивИсходнойОбработки Цикл
				Если Найти(СтрВставка, "#КонецОбласти ИнициализацияПеременных") > 0 Тогда
					//Для Каждого Элем Из МассивИнициализация Цикл
					//	НовыйМассив.Добавить(Элем);
					//КонецЦикла;
					Прервать;
				ИначеЕсли Найти(СтрВставка, "#Область ИнициализацияПеременных") > 0 Тогда
					НадоПродолжить = Ложь;
					Продолжить;
				КонецЕсли;
				
				Если НадоПродолжить Тогда
					Продолжить;
				КонецЕсли;
				
				НовыйМассив.Добавить(СтрВставка);
			КонецЦикла;
		КонецЕсли;
		
		НовыйМассив.Добавить(Стр);
	КонецЦикла;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("bsl");
	ЗТ = Новый ЗаписьТекста(ВременныйФайл, "UTF-8", , Истина);
	Для Каждого Стр Из НовыйМассив Цикл
		ЗТ.ЗаписатьСтроку(Стр);
	КонецЦикла;
	ЗТ.Закрыть();
	
	УдалитьФайлы(МодульДляВставки);
	ПереместитьФайл(ВременныйФайл, МодульДляВставки);
КонецПроцедуры

Процедура ВставитьФичаРидер(ПутьКVA, ВременныйКаталогVA)
	ИмяОбработкиДляВставки = "FeatureReader";
	
	МодульОбработкиVA = МодульОбъекта(ОбъединитьПути(ПутьКVA, "lib", "FeatureReader"), "FeatureReader");
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(МодульОбработкиVA, "UTF-8");
	
	МассивИсходнойОбработки = Новый Массив;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		МассивИсходнойОбработки.Добавить(Стр);
	КонецЦикла;
	Текст.Закрыть();
	
	МодульДляВставки = МодульОбъекта(ВременныйКаталогVA, "VanessaAutomation");
	Сообщить("МодульДляВставки=" + МодульДляВставки);
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(МодульДляВставки, "UTF-8");
	
	Массив = Новый Массив;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Массив.Добавить(Стр);
	КонецЦикла;
	Текст.Закрыть();
	
	НовыйМассив = Новый Массив;
	Для Ккк = 0 По Массив.Количество() - 1 Цикл
		Стр = Массив.Получить(Ккк);
		
		Если Найти(Стр, "#КонецОбласти ОписаниеПеременных") > 0 Тогда
			//добавляем часть с переменными из модуля
			НовыйМассив.Добавить("#Область Переменные" + ИмяОбработкиДляВставки);
			Для Каждого СтрВставка Из МассивИсходнойОбработки Цикл
				Если Найти(СтрВставка, "#КонецОбласти ОписаниеПеременных") > 0 Тогда
					Прервать;
				ИначеЕсли Найти(СтрВставка, "#Область ОписаниеПеременных") > 0 Тогда
					Продолжить;
				ИначеЕсли Найти(СтрВставка, "Перем ТекстСообщенийПользователю;") > 0 Тогда
					Продолжить;
				ИначеЕсли СтрВставка = "#КонецОбласти" Тогда
					НовыйМассив.Добавить("Перем ШагСтрокДляМодуля;");
				КонецЕсли;
				НовыйМассив.Добавить(СтрВставка);
			КонецЦикла;
		КонецЕсли;
		
		Если Найти(Стр, "#КонецОбласти ПроцедурыИФункции") > 0 Тогда
			//добавляем часть с процедурами и функциями
			
			НадоПродолжить = Истина;
			НовыйМассив.Добавить("#Область ПроцедурыИФункции" + ИмяОбработкиДляВставки);
			Для Каждого СтрВставка Из МассивИсходнойОбработки Цикл
				Если Найти(СтрВставка, "#КонецОбласти ПроцедурыИФункции") > 0 Тогда
					Прервать;
				ИначеЕсли Найти(СтрВставка, "#Область ПроцедурыИФункции") > 0 Тогда
					НадоПродолжить = Ложь;
					Продолжить;
				КонецЕсли;
				
				Если НадоПродолжить Тогда
					Продолжить;
				КонецЕсли;
				
				НовыйМассив.Добавить(СтрВставка);
			КонецЦикла;
		КонецЕсли;
		
		Если Найти(Стр, "#КонецОбласти ИнициализацияПеременных") > 0 Тогда
			//добавляем часть с процедурами и функциями
			
			НадоПродолжить = Истина;
			НовыйМассив.Добавить("#Область ИнициализацияПеременных" + ИмяОбработкиДляВставки);
			Для Каждого СтрВставка Из МассивИсходнойОбработки Цикл
				Если Найти(СтрВставка, "#КонецОбласти ИнициализацияПеременных") > 0 Тогда
					Прервать;
				ИначеЕсли Найти(СтрВставка, "#Область ИнициализацияПеременных") > 0 Тогда
					НадоПродолжить = Ложь;
					Продолжить;
				КонецЕсли;
				
				Если НадоПродолжить Тогда
					Продолжить;
				КонецЕсли;
				
				НовыйМассив.Добавить(СтрВставка);
			КонецЦикла;
		КонецЕсли;
		
		НовыйМассив.Добавить(Стр);
	КонецЦикла;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("bsl");
	ЗТ = Новый ЗаписьТекста(ВременныйФайл, "UTF-8", , Истина);
	Для Каждого Стр Из НовыйМассив Цикл
		ЗТ.ЗаписатьСтроку(Стр);
	КонецЦикла;
	ЗТ.Закрыть();
	
	УдалитьФайлы(МодульДляВставки);
	ПереместитьФайл(ВременныйФайл, МодульДляВставки);
КонецПроцедуры

Процедура ОбновитьРидми(ИмяФайла)
	ВременныйФайл = ПолучитьИмяВременногоФайла("md");
	ЗТ = Новый ЗаписьТекста(ВременныйФайл, "UTF-8", , Истина);
	
	Стр = "# Vanessa-Automation-Single
		|
		|Vanessa-Automation-Single - это специальная сборка проекта [vanessa-automation](https://github.com/Pr-Mex/vanessa-automation).
		|Это такая же Ванесса, с той же функциональностью, но в виде одной EPF. Обычные формы также поддерживаются.
		|Vanessa-Automation-Single удобно использовать в составе расширений, встраивать в свою конфигурацию и т.д.
		|Также вариант поставки ""Single"" удобен для тех, кто использует Ванессу только для написания сценариев и не планирует её дорабатывать. 
		|
		|Разработка проекта ведётся в основном репозитории [vanessa-automation](https://github.com/Pr-Mex/vanessa-automation)
		|
		|[Телеграм канал](https://t.me/testspro1c), где можно обсудить Ванессу и всё, что связано с тестированием в 1С.
		|[![Открытый чат проекта https://gitter.im/vanessa-automation](https://badges.gitter.im/vanessa-automation.svg)](https://gitter.im/vanessa-automation?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
		|[![Build Status](http://vanessa.bit-erp.ru/buildStatus/icon?job=VASingleFullCheck)](http://vanessa.bit-erp.ru/job/VASingleFullCheck/)
		|
		|";
	
	ЗТ.ЗаписатьСтроку(Стр);
	ЗТ.Закрыть();
	
	УдалитьФайлы(ИмяФайла);
	ПереместитьФайл(ВременныйФайл, ИмяФайла);
КонецПроцедуры

Процедура СобратьVA_Single(ПутьКVA, ВременныйКаталогVA, ВерсияПлатформы, ДопИмя, КаталогБазы)
	//сборка epf
	Лог.Информация("Сборка дистрибутива");
	ПереместитьФайл(ОбъединитьПути(ВременныйКаталогVA, "VanessaAutomation.xml"), ОбъединитьПути(ВременныйКаталогVA, "VanessaAutomation" + ДопИмя + ".xml"));
	
	КаталогКуда = ОбъединитьПути(ВременныйКаталогVA, "VanessaAutomation" + ДопИмя);
	СоздатьКаталог(КаталогКуда);
	
	ВременныйКаталогИсходников = ОбъединитьПути(ВременныйКаталогVA, "VanessaAutomation");
	
	КаталогиОткуда = Новый Массив;
	КаталогиОткуда.Добавить(ВременныйКаталогИсходников);
	МассивМасок = Новый Массив;
	МассивМасок.Добавить("*");
	ПереместитьФайлыВКаталог(КаталогКуда, КаталогиОткуда, МассивМасок);
	
	ОчиститьКаталог(ВременныйКаталогИсходников);
	УдалитьФайлы(ВременныйКаталогИсходников);
	
	ИмяФайлаКорневойXml = ОбъединитьПути(ВременныйКаталогVA, "VanessaAutomation" + ДопИмя + ".xml");
	ИмяОбработки        = ОбъединитьПути(ВременныйКаталогVA, "vanessa-automation-" + ДопИмя + ".epf");
	УдалитьФайлы(ИмяОбработки);
	
	ПараметрыЗапуска = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
	Стр = "/LoadExternalDataProcessorOrReportFromFiles """ + ИмяФайлаКорневойXml + """  """ + ИмяОбработки + """";
	ПараметрыЗапуска.Добавить(Стр);
	
	ИмяФайлаOut = ПолучитьИмяВременногоФайла("txt");
	ПараметрыЗапуска.Добавить("/Out """ + ИмяФайлаOut + """");
	
	Попытка
		Сообщить("Первая сборка epf: " + ИмяОбработки);
		Сообщить(СтрокаИзПараметровЗапуска(ПараметрыЗапуска));
		УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
		Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
		
		ТекстСообщения = "Сбор обработки прерван.";
		СообщениеПередИсключением(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	//получение кеш step defenition и данных lib\TemplateEpfUF
	ЗаписьJson = Новый ЗаписьJson;
	ВременныйJson = ПолучитьИмяВременногоФайла("json");
	ИмяФайлаКеш = ПолучитьИмяВременногоФайла("txt");
	ИмяФайлаКеш = СтрЗаменить(ИмяФайлаКеш, "\", "/");
	КаталогTemplateEpfUF = ОбъединитьПути(ПутьКVA, "lib", "TemplateEpfUF");
	КаталогTemplateEpfUF = СтрЗаменить(КаталогTemplateEpfUF, "\", "/");
	ЗаписьJson.ОткрытьФайл(ВременныйJson);
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("ИмяФайлаКеш");
	ЗаписьJSON.ЗаписатьЗначение(ИмяФайлаКеш);
	ЗаписьJSON.ЗаписатьИмяСвойства("КаталогTemplateEpfUF");
	ЗаписьJSON.ЗаписатьЗначение(КаталогTemplateEpfUF);
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	ЗаписьJson.Закрыть();
	
	СтрокаКоманды = """" + ВерсияПлатформы + """ Enterprise /F""" + КаталогБазы + """ /Execute """ + ИмяОбработки + """ /C""GetStepsCache;ClearCacheSteps;VBParams=" + ВременныйJson + """";
	Сообщить(СтрокаКоманды);
	
	retCode = -1;
	ЗапуститьПриложение(СтрокаКоманды, , Истина, retCode);
	
	ФайлИмяФайлаКеш = Новый Файл(ИмяФайлаКеш);
	Если НЕ ФайлИмяФайлаКеш.Существует() Тогда
		ВызватьИсключение "Не получилось получить файл кеш step defenition.";
	КонецЕсли;
	
	//запись кеша в макет
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаКеш, "UTF-8");
	Стр = Текст.Прочитать();
	
	ЗТ = Новый ЗаписьТекста(ФайлДанныеМакета(КаталогКуда, , "МакетСлужебныйКеш"), "UTF-8", , Ложь);
	ЗТ.Записать(Стр);
	ЗТ.Закрыть();
	
	Текст.Закрыть();
	
	//сборка epf ещё раз
	УдалитьФайлы(ИмяОбработки);
	Попытка
		Сообщить("Вторая сборка epf: " + ИмяОбработки);
		Сообщить(СтрокаИзПараметровЗапуска(ПараметрыЗапуска));
		УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
		Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
		
		ТекстСообщения = "Сбор обработки прерван.";
		СообщениеПередИсключением(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	//сборка каталога Distrib
	
	КаталогDistrib = СборкаКаталогаDistrib(ПутьКVA, ВременныйКаталогVA, ДопИмя);
	
	Попытка
		retCode = -1;
		СтрокаКоманды = """" + КаталогDistrib + """";
		ЗапуститьПриложение(СтрокаКоманды, , Ложь, retCode);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция СборкаКаталогаDistrib(ПутьКVA, ВременныйКаталогVA, ДопИмя)
	
	КаталогDistrib = ОбъединитьПути(ВременныйКаталогVA, "DistribVanessaAutomation" + ДопИмя);
	СоздатьКаталог(КаталогDistrib);
	
	ИмяОбработки = ОбъединитьПути(ВременныйКаталогVA, "vanessa-automation-" + ДопИмя + ".epf");
	НовоеИмяEpf = ОбъединитьПути(КаталогDistrib, "vanessa-automation-" + ДопИмя + ".epf");
	ПереместитьФайл(ИмяОбработки, НовоеИмяEpf);
	
	Лог.Информация("Сборка каталога Distrib");
	ВременныйКаталогИсходников = ОбъединитьПути(ВременныйКаталогVA, "VanessaAutomation" + ДопИмя);
	УдалитьФайлы(ВременныйКаталогИсходников + ".xml");
	ОчиститьКаталог(ВременныйКаталогИсходников);
	УдалитьФайлы(ВременныйКаталогИсходников);
	
	МассивМасок = Новый Массив;
	МассивМасок.Добавить("*.epf");
	МассивМасок.Добавить("*.feature");
	МассивМасок.Добавить("*.mxl");
	МассивМасок.Добавить("*.json");
	МассивМасок.Добавить("*.md");
	МассивМасок.Добавить("*.cmd");
	МассивМасок.Добавить("*.os");
	МассивМасок.Добавить("*.xsd");
	МассивМасок.Добавить("*.txt");
	МассивМасок.Добавить("*.bat");
	МассивМасок.Добавить("*.gitattributes");
	МассивМасок.Добавить("*.gitignore");
	МассивМасок.Добавить("LICENSE");
	МассивМасок.Добавить("LICENSE.txt");
	МассивМасок.Добавить("LICENSE.xunitfor1c.txt");
	КаталогиОткуда = Новый Массив;
	КаталогиОткуда.Добавить(ПутьКVA);
	СкопироватьФайлыВКаталог(КаталогDistrib, КаталогиОткуда, МассивМасок);
	
	Лог.Информация("Удаление лишних файлов");
	Файлы = НайтиФайлы(КаталогDistrib, "*.epf", Истина);
	Разделитель = ПолучитьРазделительПути();
	
	Для Каждого Файл Из Файлы Цикл
		Если Найти(Файл.ПолноеИмя, "vanessa-automation.epf") Тогда
			УдалитьФайлы(Файл.ПолноеИмя);
		ИначеЕсли Найти(Файл.ПолноеИмя, ОбъединитьПути("features", "Libraries")) Тогда
			УдалитьФайлы(Файл.ПолноеИмя);
		ИначеЕсли Найти(Файл.ПолноеИмя, Разделитель + "lib" + Разделитель) Тогда
			УдалитьФайлы(Файл.ПолноеИмя);
		ИначеЕсли Найти(Файл.ПолноеИмя, Разделитель + "locales" + Разделитель) Тогда
			УдалитьФайлы(Файл.ПолноеИмя);
		ИначеЕсли Найти(Файл.ПолноеИмя, Разделитель + "plugins" + Разделитель) Тогда
			УдалитьФайлы(Файл.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьРидми(ОбъединитьПути(КаталогDistrib, "README.md"));
	
	//копируем \tools\Sikuli
	КаталогиОткуда = Новый Массив;
	КаталогиОткуда.Добавить(ОбъединитьПути(ПутьКVA, "tools", "Sikuli"));
	МассивМасок = Новый Массив;
	МассивМасок.Добавить("*");
	СкопироватьФайлыВКаталог(ОбъединитьПути(КаталогDistrib, "tools", "Sikuli"), КаталогиОткуда, МассивМасок);
	
	//копируем lib\CF
	КаталогиОткуда = Новый Массив;
	КаталогиОткуда.Добавить(ОбъединитьПути(ПутьКVA, "lib", "CF"));
	МассивМасок = Новый Массив;
	МассивМасок.Добавить("*");
	СкопироватьФайлыВКаталог(ОбъединитьПути(КаталогDistrib, "lib", "CF"), КаталогиОткуда, МассивМасок);
	
	//копируем lib\VA_Chrome
	КаталогиОткуда = Новый Массив;
	КаталогиОткуда.Добавить(ОбъединитьПути(ПутьКVA, "lib", "VA_Chrome"));
	МассивМасок = Новый Массив;
	МассивМасок.Добавить("*");
	СкопироватьФайлыВКаталог(ОбъединитьПути(КаталогDistrib, "lib", "VA_Chrome"), КаталогиОткуда, МассивМасок);
	
	//копируем lib\VAExtension
	КаталогиОткуда = Новый Массив;
	КаталогиОткуда.Добавить(ОбъединитьПути(ПутьКVA, "lib", "VAExtension"));
	МассивМасок = Новый Массив;
	МассивМасок.Добавить("*");
	СкопироватьФайлыВКаталог(ОбъединитьПути(КаталогDistrib, "lib", "VAExtension"), КаталогиОткуда, МассивМасок);
	
	//копируем картинки tools\VideoTools
	КаталогиОткуда = Новый Массив;
	КаталогиОткуда.Добавить(ОбъединитьПути(ПутьКVA, "tools", "VideoTools"));
	МассивМасок = Новый Массив;
	МассивМасок.Добавить("*.png");
	СкопироватьФайлыВКаталог(ОбъединитьПути(КаталогDistrib, "tools", "VideoTools"), КаталогиОткуда, МассивМасок);
	
	//замена в json имени обработки
	Файлы = НайтиФайлы(КаталогDistrib, "*.json", Истина);
	Для Каждого Файл Из Файлы Цикл
		МассивСтрок = Новый Массив;
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(Файл.ПолноеИмя, "UTF-8");
		
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Если Найти(Стр, "VBParams82OF.json") > 0 Тогда
				Продолжить;
			ИначеЕсли Найти(Стр, "VBParams836OF.json") > 0 Тогда
				Продолжить;
			ИначеЕсли Найти(Стр, "Web.json") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСтрок.Добавить(Стр);
		КонецЦикла;
		Текст.Закрыть();
		
		ВременныйJson = ПолучитьИмяВременногоФайла("json");
		ЗТ = Новый ЗаписьТекста(ВременныйJson, "UTF-8", , Истина);
		Для Каждого Стр Из МассивСтрок Цикл
			Стр = СтрЗаменить(Стр, "vanessa-automation.epf", "vanessa-automation-" + ДопИмя + ".epf");
			ЗТ.ЗаписатьСтроку(Стр);
		КонецЦикла;
		ЗТ.Закрыть();
		
		УдалитьФайлы(Файл.ПолноеИмя);
		ПереместитьФайл(ВременныйJson, Файл.ПолноеИмя);
	КонецЦикла;
	
	//удаление фич с тегом @ExternalUse
	Файлы = НайтиФайлы(КаталогDistrib, "*.feature", Истина);
	Для Каждого Файл Из Файлы Цикл
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(Файл.ПолноеИмя, "UTF-8");
		
		НашлиТег = Ложь;
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Если Найти(Стр, "@ExternalUse") > 0 Тогда
				НашлиТег = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Текст.Закрыть();
		
		Если НашлиТег Тогда
			УдалитьФайлы(Файл.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;
	
	//удаление пустых каталогов
	УдалитьПустыеКаталоги(КаталогDistrib);
	
	Возврат КаталогDistrib;
	
КонецФункции

Функция СтрокаИзПараметровЗапуска(Массив)
	Стр = "";
	Для Каждого Элем Из Массив Цикл
		Стр = Стр + " " + Элем;
	КонецЦикла;
	
	Возврат Стр;
КонецФункции

Процедура УдалитьПустыеКаталоги(Каталог)
	Файлы = НайтиФайлы(Каталог, "*", Истина);
	Для Каждого Файл Из Файлы Цикл
		Если НЕ Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		ФайлыКаталога = НайтиФайлы(Файл.ПолноеИмя, "*", Истина);
		Если ФайлыКаталога.Количество() = 0 Тогда
			УдалитьФайлы(Файл.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьОбработкуСингл(ПутьКVA, ПутьКBin, БиблиотекиДляВстраивания, ВерсияПлатформы, ПутьКБазе)
	
	ОчиститьКаталог(ПутьКBin);

	ВременныйКаталогVA = ОбъединитьПути(ПутьКBin, "Temp");
	
	СкопироватьФайлыVA(ПутьКVA, ВременныйКаталогVA);
	
	ВставитьФормыОбработокВVA(ПутьКVA, ВременныйКаталогVA, БиблиотекиДляВстраивания, "single");
	
	СобратьVA_Single(ПутьКVA, ВременныйКаталогVA, ВерсияПлатформы, "single", ПутьКБазе);
	
КонецПроцедуры

Функция ПутьКМодулюФормы(ВременныйКаталогVA, ИмяФормы)
	
	ПутьКФайламФормы = ОбъединитьПути(ВременныйКаталогVA, "VanessaAutomation", "Forms", ИмяФормы);
	Возврат ОбъединитьПути(ПутьКФайламФормы, "Ext", "Form", "Module.bsl");
	
КонецФункции

Функция МодульОбъекта(ПутьККаталогу, ИмяОбработки)
	
	Возврат ОбъединитьПути(ПутьККаталогу, ИмяОбработки, "Ext", "ObjectModule.bsl");
	
КонецФункции

Функция ФайлДанныеМакета(Каталог, ИмяОбработки = Неопределено, ИмяМакета, Расширение = "txt")
	
	Если ИмяОбработки <> Неопределено Тогда
		ФайлыМакета = ОбъединитьПути(Каталог, ИмяОбработки, "Templates", ИмяМакета);
	Иначе
		ФайлыМакета = ОбъединитьПути(Каталог, "Templates", ИмяМакета);
	КонецЕсли;
	
	Возврат ОбъединитьПути(ФайлыМакета, "Ext", "Template." + Расширение);
	
КонецФункции

Функция АбсолютныйПуть(Путь)
	
	Файл = Новый Файл(Путь);
	Возврат Файл.ПолноеИмя;
	
КонецФункции

Функция ИзвлечьВерсиюПлатформы(ПутьККаталогуBin)
	
	ФайлBin = Новый Файл(ПутьККаталогуBin); // Путь к каталогу bin платформы
	
	Если НЕ ФайлBin.Существует() И ФайлBin.Путь = "" Тогда
		ВерсияПлатформы = ПутьККаталогуBin;
	Иначе
		ФайлНаОдинКаталогВыше = Новый Файл(ФайлBin.Путь);
		ВерсияПлатформы = ФайлНаОдинКаталогВыше.Имя;
	КонецЕсли;
	
	Возврат ВерсияПлатформы;
	
КонецФункции


Лог = Логирование.ПолучитьЛог("vb.compile.log");
Лог.УстановитьУровень(УровниЛога.Отладка);

Если АргументыКоманднойСтроки.Количество() = 0 Тогда
	Лог.Ошибка("Не переданы параметры!");
ИначеЕсли АргументыКоманднойСтроки.Количество() <> 5 Тогда
	Лог.Ошибка("Скрипт принимает пять параметров!");
Иначе
	УправлениеКонфигуратором = Новый УправлениеКонфигуратором();
	ВерсияПлатформы = ИзвлечьВерсиюПлатформы(АргументыКоманднойСтроки[3]);
	Сообщить("Для пакетного запуска конфигуратора установлена платформа: " + ВерсияПлатформы);
	ПутьКПлатформе = УправлениеКонфигуратором.ПолучитьПутьКВерсииПлатформы(ВерсияПлатформы);
	УправлениеКонфигуратором.ПутьКПлатформе1С(ПутьКПлатформе);
	КаталогБазы = ПолучитьИмяВременногоФайла();
	УправлениеКонфигуратором.СоздатьФайловуюБазу(КаталогБазы);
	УправлениеКонфигуратором.УстановитьКонтекст("/F""" + КаталогБазы + """", "", "");
	
	ПутьКИсходникамVanessaAutomation = АбсолютныйПуть(АргументыКоманднойСтроки[0]);
	КаталогСборки = АбсолютныйПуть(АргументыКоманднойСтроки[1]);
	КаталогиБиблиотек = АбсолютныйПуть(АргументыКоманднойСтроки[2]);
	КаталогФайловойБазы = АбсолютныйПуть(АргументыКоманднойСтроки[4]);
	
	Лог.Информация("ПутьКИсходникамVanessaAutomation: " + ПутьКИсходникамVanessaAutomation);
	Лог.Информация("КаталогСборки: " + КаталогСборки);
	Лог.Информация("КаталогиБиблиотек: " + КаталогиБиблиотек);
	Лог.Информация("ПутьКПлатформе: " + ПутьКПлатформе);
	Лог.Информация("КаталогФайловойБазы: " + КаталогФайловойБазы);
	
	Если СтрНайти(КаталогСборки, ПутьКИсходникамVanessaAutomation) Тогда
		Лог.Ошибка("Каталог сборки должен находится вне каталога исходников");
	Иначе
		СоздатьОбработкуСингл(ПутьКИсходникамVanessaAutomation,
		КаталогСборки,
		КаталогиБиблиотек,
		ПутьКПлатформе,
		КаталогФайловойБазы);
	
	КонецЕсли;

КонецЕсли;

Сообщить("////////////////////");
Сообщить("Обработка завершена.");
Sleep(5000);
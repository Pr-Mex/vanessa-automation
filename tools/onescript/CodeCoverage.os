#Использовать v8runner

Перем ОсновнаяВерсияПлатформы;

Процедура ЗавершитьВсеВозможноЗависшиеПроцессы()
	СтрокаКоманды = "TASKKILL /F /IM 1cv8c.exe"; retCode = -1;
	ЗапуститьПриложение(СтрокаКоманды,,Истина,retCode);

	СтрокаКоманды = "TASKKILL /F /IM 1cv8.exe"; retCode = -1;
	ЗапуститьПриложение(СтрокаКоманды,,Истина,retCode);

	СтрокаКоманды = "TASKKILL /F /IM 1cv8s.exe"; retCode = -1;
	ЗапуститьПриложение(СтрокаКоманды,,Истина,retCode);

	СтрокаКоманды = "TASKKILL /F /IM vlc.exe"; retCode = -1;
	ЗапуститьПриложение(СтрокаКоманды,,Истина,retCode);
КонецПроцедуры

// Проверяет наличия каталога и в случае его отсутствия создает новый.
//
// Параметры:
//  Каталог - Строка - Путь к каталогу, существование которого нужно проверить.
//
// Возвращаемое значение:
//  Булево - признак существования каталога.
//
// Взято из https://infostart.ru/public/537028/
Функция ОбеспечитьКаталог(Знач Каталог)
	
	Файл = Новый Файл(Каталог);
	Если Не Файл.Существует() Тогда
		Попытка 
			СоздатьКаталог(Каталог);
		Исключение
			Сообщить(СтрШаблон(НСтр("ru='Не удалось создать каталог %1.
|%2';en='Failed to create directory %1.
|%2'"), Каталог, ИнформацияОбОшибке()));
			Возврат Ложь;
		КонецПопытки;
	ИначеЕсли Не Файл.ЭтоКаталог() Тогда 
		Сообщить(СтрШаблон(НСтр("ru='Каталог %1 не является каталогом.';en='Directory %1 is not a directory.'"), Каталог));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Перемещаят найденные по маскам файлы с сохранением пути.
//
// Параметры:
//  КаталогКуда - Строка - Путь к каталогу в который переносятся файлы;
//  КаталогиОткуда 		 - Массив - Пути к каталогам в которых осуществляется поиск файлов;
//  МассивМасок 		 - Массив - Маски, по которым осуществляется поиск файлов.
//
// Взято из https://infostart.ru/public/537028/
Процедура СкопироватьФайлыВКаталог(КаталогКуда, КаталогиОткуда, МассивМасок, МассивИсключений)
 	
 	Для Каждого КаталогПоиска Из КаталогиОткуда Цикл
		КаталогПоискаОбъект = Новый Файл(КаталогПоиска);
		Если НЕ КаталогПоискаОбъект.Существует() Тогда
			Сообщить(НСтр("ru='Каталог не найден.';en='Folder not found.'"));
			Продолжить;
		КонецЕсли;
		
		Для Каждого Маска Из МассивМасок Цикл
		
			МассивФайлов = НайтиФайлы(КаталогПоиска, Маска, Истина); 
			Для Каждого НайденныйФайл Из МассивФайлов Цикл
				
				НовыйПуть = СтрЗаменить(НайденныйФайл.Путь, КаталогПоиска, КаталогКуда);
				
				НадоСкопировать = Истина;
				Для Каждого Стр Из МассивИсключений Цикл
					Если Найти(НовыйПуть,Стр) > 0 Тогда
						НадоСкопировать = Ложь;
						Прервать;
					КонецЕсли;	 
				КонецЦикла;	 
				
				Если НЕ НадоСкопировать Тогда
					Продолжить;
				КонецЕсли;	 
				
				
				НовоеИмя = НайденныйФайл.Имя; 			
				
				Если НЕ ОбеспечитьКаталог(НовыйПуть) Тогда 
					Продолжить; 
				КонецЕсли;
				
				Если НайденныйФайл.ЭтоКаталог() Тогда
					Продолжить;
				КонецЕсли;	 
				
				ИмяФайлаДляПеремещения = ОбъединитьПути(НовыйПуть, НовоеИмя);
				УдалитьФайлы(ИмяФайлаДляПеремещения);
				
				Попытка
					НадоСкопировать = Истина;
					Для Каждого Стр Из МассивИсключений Цикл
						Если Найти(ИмяФайлаДляПеремещения,Стр) > 0 Тогда
							НадоСкопировать = Ложь;
							Прервать;
						КонецЕсли;	 
					КонецЦикла;	 
					
					Если НЕ НадоСкопировать Тогда
						Продолжить;
					КонецЕсли;	 
					
					КопироватьФайл(НайденныйФайл.ПолноеИмя,ИмяФайлаДляПеремещения);
				Исключение
					Сообщить(СтрШаблон(НСтр("ru='Не удалось скопировать файл:
|%1';en='Failed to copy file:
|%1'"), ОписаниеОшибки()));
					Продолжить;
				КонецПопытки;
								
				ФайлНаДиске = Новый Файл(ОбъединитьПути(НовыйПуть, НовоеИмя));
			    Если НЕ ФайлНаДиске.Существует() Тогда
					Сообщить(НСтр("ru='Не удалось корректно скопировать файл.';en='Failed to correctly copy file.'"));
					Продолжить;
			    КонецЕсли;
			КонецЦикла;	
		
		КонецЦикла;	

  	КонецЦикла;	

КонецПроцедуры

Функция ПолучитьВременныйКаталог()
	ИмяФайла = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяФайла);
	Возврат ИмяФайла;
КонецФункции	

Процедура ОчиститьКаталог(Каталог)
	ТаблицаКаталогов = Новый ТаблицаЗначений;
	ТаблицаКаталогов.Колонки.Добавить("ПолныйПуть");
	ТаблицаКаталогов.Колонки.Добавить("Длина");
	
	//Сообщить("КаталогОткуда="+КаталогОткуда);
	//Сообщить("КаталогКуда="+КаталогКуда);
	
	Файлы = НайтиФайлы(Каталог,"*",Истина);
	Для Каждого Файл Из Файлы Цикл
		Если Файл.ЭтоКаталог() Тогда
			СтрокаТаблицаКаталогов = ТаблицаКаталогов.Добавить();
			СтрокаТаблицаКаталогов.ПолныйПуть = Файл.ПолноеИмя;
			СтрокаТаблицаКаталогов.Длина      = СтрДлина(Файл.ПолноеИмя);
			Продолжить;
		КонецЕсли;	 
		
		УдалитьФайлы(Файл.ПолноеИмя);
	КонецЦикла;	
	
	ТаблицаКаталогов.Сортировать("Длина убыв");
	
	Для Каждого СтрокаТаблицаКаталогов Из ТаблицаКаталогов Цикл
		//Сообщить(СтрокаТаблицаКаталогов.ПолныйПуть);
		УдалитьФайлы(СтрокаТаблицаКаталогов.ПолныйПуть);
	КонецЦикла;	
КонецПроцедуры 

Процедура ОбработатьФайлConfiguration_xml(ИмяФайла,Версия)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	
	ЗТ = Новый ЗаписьТекста(ИмяВременногоФайла,"UTF-8",,Ложь); 
	
	ЗначениеВерсия = "DontUse";
	Если Версия = "8.3.9" Тогда
		ЗначениеВерсия = "VERSION" + СтрЗаменить(Версия,".","_");
	ИначеЕсли (Версия >= "8.3.10") И (СтрДлина(Версия) = 6) Тогда
		ЗначениеВерсия = "VERSION" + СтрЗаменить(Версия,".","_");
	КонецЕсли;	 
	
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если Найти(Стр,"<CompatibilityMode>") > 0 Тогда
			Стр = "			<CompatibilityMode>" + ЗначениеВерсия + "</CompatibilityMode>";
		КонецЕсли;	 
		
		ЗТ.ЗаписатьСтроку(Стр); 
	КонецЦикла;	
	
	Текст.Закрыть();
	ЗТ.Закрыть();
	
	КопироватьФайл(ИмяВременногоФайла,ИмяФайла);
	УдалитьФайлы(ИмяВременногоФайла);
КонецПроцедуры

Функция ТекДата()
	Возврат "" + ТекущаяДата() + ":"; 
КонецФункции	 

Процедура СоздатьПустуюБазу(ПутьКБазе, Исходники,ВерсияПлатформы = Неопределено)
	Сообщить(ТекДата() + " Создание базы.");
	
	Файл = Новый Файл(ПутьКБазе); 
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(ПутьКБазе);
	Иначе	
		ОчиститьКаталог(ПутьКБазе)
	КонецЕсли;	 
	
	Если ВерсияПлатформы = Неопределено Тогда
		ВерсияПлатформы = ОсновнаяВерсияПлатформы;
	КонецЕсли;	 
	
	УправлениеКонфигуратором = Новый УправлениеКонфигуратором();
	путьКПлатформе = УправлениеКонфигуратором.ПолучитьПутьКВерсииПлатформы(ВерсияПлатформы);
	
	УправлениеКонфигуратором.СоздатьФайловуюБазу(ПутьКБазе);
	
	УправлениеКонфигуратором.УстановитьКонтекст("/F" + ПутьКБазе + "\","","");
	
	ПараметрыЗапуска = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/LoadConfigFromFiles """ + Исходники + """ /UpdateDBCfg"); 

	УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);
	
	
	//теперь выгрузим конфу в файлы ещё раз и заменим параметр CompatibilityMode на DontUse, чтобы гарантировать, что не используется режим совместимости
	ВременныйКаталог = ПолучитьВременныйКаталог();
	
	ПараметрыЗапуска = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/DumpConfigToFiles  """ + ВременныйКаталог + """"); 
	УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);
	
	//Сообщить("ВременныйКаталог="+ВременныйКаталог);
	ОбработатьФайлConfiguration_xml(ВременныйКаталог + "\Configuration.xml",ВерсияПлатформы);
	
	//теперь загрузим конфу обратно
	ПараметрыЗапуска = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/LoadConfigFromFiles  """ + ВременныйКаталог + """ /UpdateDBCfg "); 
	УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);
	
	ОчиститьКаталог(ВременныйКаталог);
	

	УправлениеКонфигуратором.ОбновитьКонфигурациюБазыДанных();
	
	
КонецПроцедуры 

Функция ОбернутьВКавычки(Стр)
	Возврат """" + Стр + """"; 
КонецФункции	 

Функция ПолучитьСтрокуВызоваSikuli()
	ЭтоLinux = Ложь;
	Если ЭтоLinux Тогда
		Возврат "runsikulix -r ";
	Иначе
		Возврат "runsikulix -r ";
	КонецЕсли;
КонецФункции

Функция ВыполнитьSikuliСкрипт(СтрокаКоманды, ЖдатьОкончания = -1)
	Стр = ПолучитьСтрокуВызоваSikuli() + " " + СтрокаКоманды;
	
	Сообщить(Стр);
	retCode = -1;
	ЗапуститьПриложение(Стр,,Истина,retCode);
	
	Статус = retCode;
	
	Сообщить(ТекДата() + "Скрипт вернул: " + retCode);
	
	Возврат Статус;
КонецФункции

Функция ПолучитьКаталогBinПлатформы(ВерсияПлатформы = Неопределено)
	Если ВерсияПлатформы = Неопределено Тогда
		ВерсияПлатформы = ОсновнаяВерсияПлатформы;
	КонецЕсли;	 
	УправлениеКонфигуратором = Новый УправлениеКонфигуратором();
	путьКПлатформе = УправлениеКонфигуратором.ПолучитьПутьКВерсииПлатформы(ВерсияПлатформы);
	
	Файл = Новый Файл(путьКПлатформе); 
	Возврат Файл.Путь;
КонецФункции	 

Процедура ЗапуститьКонфигураторБазы(ПутьКБазе,ПутьКПроекту,ВерсияПлатформы = Неопределено,СтрокаПодключенияСервер = Неопределено)
	Сообщить(ТекДата() + "Запуск конфигуратора.");
	
	КаталогBin = ПолучитьКаталогBinПлатформы(ВерсияПлатформы);
	
	Если СтрокаПодключенияСервер = Неопределено Тогда
		СтрокаКоманды = ОбернутьВКавычки(КаталогBin + "1cv8") + " DESIGNER /F" + ОбернутьВКавычки(ПутьКБазе);
	Иначе	
		СтрокаКоманды = ОбернутьВКавычки(КаталогBin + "1cv8") + " DESIGNER " + СтрокаПодключенияСервер;
	КонецЕсли;	 
	
	Сообщить(СтрокаКоманды);
	retCode = -1;
	ЗапуститьПриложение(СтрокаКоманды,,Ложь,retCode);
	
КонецПроцедуры

Функция ПолучитьАдресОтладчика(ПутьКПроекту)
	ВременныйФайл = ПолучитьИмяВременногоФайла("txt");
	
	ИмяСкрипта = ПутьКПроекту + "\tools\Sikuli\GetDebuggerUrl.sikuli --args """ + ВременныйФайл + """";
	Статус = ВыполнитьSikuliСкрипт(ИмяСкрипта);
	Если Статус <> 0 Тогда
		ВызватьИсключение "Не получилось выполнить скрипт копирующий в буфер обмена адрес отладчика.";
	КонецЕсли;	 
	
	
	Файл = Новый Файл(ВременныйФайл); 
	Если НЕ Файл.Существует() Тогда
		ВызватьИсключение "Не найден файл с адресом отладчика.";
	КонецЕсли;	 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ВременныйФайл,"UTF-8");
	Стр = Текст.Прочитать();
	Текст.Закрыть();
	
	УдалитьФайлы(ВременныйФайл);
	
	Возврат Стр;
КонецФункции	

Функция СоздатьJsonДляЗапускаТестов(ПутьКПроекту,ПутьКБазе,АдресОтладчика,ИмяJson,ФайлСтатусаВыполненияСценариев = Неопределено);
	Сообщить(ТекДата() + "Создание JOSN для запуска тестов.");
	
	ПутьКJson = ПутьКПроекту + "\tools\JSON\" + ИмяJson;
	НовыйПутьКJson = ПутьКБазе + "\" + ИмяJson;
	УдалитьФайлы(НовыйПутьКJson);
	
	КопироватьФайл(ПутьКJson,НовыйПутьКJson);
	
	//Установка адреса отладчика
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(НовыйПутьКJson,"UTF-8");
	Стр = Текст.Прочитать();	
	Текст.Закрыть();
	
	//СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ФайлСтатусаВыполненияСценариев = ПутьКБазе + "\BuildStatus.log";
	ФайлСтатусаВыполненияСценариев = СтрЗаменить(ФайлСтатусаВыполненияСценариев,"\","/");
	
	Стр = СтрЗаменить(Стр,"{АдресОтладчика}",АдресОтладчика);
	Стр = СтрЗаменить(Стр,"{ФайлСтатусаВыполненияСценариев}",ФайлСтатусаВыполненияСценариев);
	
	УдалитьФайлы(НовыйПутьКJson);
	ЗТ = Новый ЗаписьТекста(НовыйПутьКJson,"UTF-8",,Истина); 
	ЗТ.Записать(Стр); 
	ЗТ.Закрыть();
	
	Возврат НовыйПутьКJson;
	
КонецФункции	 

Процедура ЗапуститьСессиюТестов(ПутьКПроекту,ПутьКБазе,АдресОтладчика,ИмяJson,ДопПараметр,UF,ЭтоSingle,ВерсияПлатформы = Неопределено,СтрокаПодключенияСервер = Неопределено)
	Сообщить(ТекДата() + "Запуск сессии тестирования.");
	
	КаталогBin = ПолучитьКаталогBinПлатформы(ВерсияПлатформы);

	ДопПараметрЗапуска = "/TESTMANAGER /DebuggerURL %1 /Debug /Execute ""%2"" /C""StartFeaturePlayer;NoLoadTestClientsTable;ClearCacheSteps;VBParams=%3"" " + ДопПараметр;
	Если ЭтоSingle Тогда
		ДопПараметрЗапуска = СтрШаблон(ДопПараметрЗапуска,АдресОтладчика,ПутьКПроекту + "\vanessa-automation-single.epf",ИмяJson);
	Иначе	
		ДопПараметрЗапуска = СтрШаблон(ДопПараметрЗапуска,АдресОтладчика,ПутьКПроекту + "\vanessa-automation.epf",ИмяJson);
	КонецЕсли;	 
	
	Если UF Тогда
		ПутьКПлатформе = ОбернутьВКавычки(КаталогBin + "1cv8c");
	Иначе	
		ПутьКПлатформе = ОбернутьВКавычки(КаталогBin + "1cv8");
	КонецЕсли;	 
	
	Если СтрокаПодключенияСервер = Неопределено Тогда
		СтрокаКоманды = ПутьКПлатформе + " ENTERPRISE /F" + ОбернутьВКавычки(ПутьКБазе) + " " + ДопПараметрЗапуска;
	Иначе	
		СтрокаКоманды = ПутьКПлатформе + " ENTERPRISE " + СтрокаПодключенияСервер + " " + ДопПараметрЗапуска;
	КонецЕсли;	 
	
	Сообщить(СтрокаКоманды);
	retCode = -1;
	ЗапуститьПриложение(СтрокаКоманды,,Истина,retCode);
КонецПроцедуры 

Процедура ВключитьСнятиеЗамеров(ПутьКПроекту)
	Сообщить(ТекДата() + "Включение снятия замеров.");
	
	sleep(3000);
	
	ИмяСкрипта = ПутьКПроекту + "\tools\Sikuli\StartZamer.sikuli";
	Статус = ВыполнитьSikuliСкрипт(ИмяСкрипта);
	Если Статус <> 0 Тогда
		ВызватьИсключение "Не получилось выключить снятие замеров производительности.";
	КонецЕсли;	 
КонецПроцедуры 

Процедура СохранитьЗамерыВКаталог(ПутьКПроекту,Каталог)
	Сообщить(ТекДата() + "Сохранение замеров в каталог.");
	
	Файл = Новый Файл(Каталог); 
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(Каталог);
	КонецЕсли;	 
	
	ИмяСкрипта = ПутьКПроекту + "\tools\Sikuli\SaveZamer.sikuli --args """ + Каталог + """";
	Статус = ВыполнитьSikuliСкрипт(ИмяСкрипта);
	Если Статус <> 0 Тогда
		ВызватьИсключение "Не получилось выполнить скрипт копирующий в буфер обмена адрес отладчика.";
	КонецЕсли;	 
	
	sleep(10000);
	
	ЗавершитьВсеВозможноЗависшиеПроцессы();
	
КонецПроцедуры 

Процедура ЗаменитьПутиВJsonНаАбсолютные(ИмяФайла,Знач ПутьКПроекту)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	Стр = Текст.Прочитать();
	Текст.Закрыть();
	
	УдалитьФайлы(ИмяФайла);
	
	Если Прав(ПутьКПроекту,1) = "/" ИЛИ Прав(ПутьКПроекту,1) = "\" Тогда
		ПутьКПроекту = Лев(ПутьКПроекту,СтрДлина(ПутьКПроекту)-1);
	КонецЕсли;	 
	
	Стр = СтрЗаменить(Стр,"""./","""" + СтрЗаменить(ПутьКПроекту,"\","/") + "/");
	
	
	ЗТ = Новый ЗаписьТекста(ИмяФайла,"UTF-8",,Истина); 
	ЗТ.Записать(Стр); 
	ЗТ.Закрыть();
	
	
КонецПроцедуры 

Процедура ЗаменитьПутиВJsonНаАбсолютныеСервер(ИмяФайла)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	Массив = Новый Массив;
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Поз = Найти(Нрег(Стр),"allure");
		Если Поз > 0 Тогда
			Стр = СтрЗаменить(Стр,"Server","");
		КонецЕсли;	 
		
		Поз = Найти(Нрег(Стр),"junit");
		Если Поз > 0 Тогда
			Стр = СтрЗаменить(Стр,"Server","");
		КонецЕсли;	 
		
		Поз = Найти(Нрег(Стр),"cucumber");
		Если Поз > 0 Тогда
			Стр = СтрЗаменить(Стр,"Server","");
		КонецЕсли;	 
		
		Поз = Найти(Нрег(Стр),"ИмяФайлаЛогВыполненияСценариев");
		Если Поз > 0 Тогда
			Стр = СтрЗаменить(Стр,"Server","");
		КонецЕсли;	 
		
		Массив.Добавить(Стр);
	КонецЦикла;	
	
	Текст.Закрыть();
	
	УдалитьФайлы(ИмяФайла);
	ЗТ = Новый ЗаписьТекста(ИмяФайла,"UTF-8",,Истина); 
	ЗТ.Записать(СтрСоединить(Массив,Символы.ПС)); 
	ЗТ.Закрыть();
	
	
КонецПроцедуры 

Процедура ЗаменитьПутиВJsonНаАбсолютныеSingle(ИмяФайла,Знач ПутьКПроекту, Знач ПутьКПроектуSingle)
	Если Прав(ПутьКПроекту,1) = "/" ИЛИ Прав(ПутьКПроекту,1) = "\" Тогда
		ПутьКПроекту = Лев(ПутьКПроекту,СтрДлина(ПутьКПроекту)-1);
	КонецЕсли;	 
	Если Прав(ПутьКПроектуSingle,1) = "/" ИЛИ Прав(ПутьКПроектуSingle,1) = "\" Тогда
		ПутьКПроектуSingle = Лев(ПутьКПроектуSingle,СтрДлина(ПутьКПроектуSingle)-1);
	КонецЕсли;	 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	Массив = Новый Массив;
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Поз = Найти(Нрег(Стр),"allure");
		Если Поз > 0 Тогда
			Стр = СтрЗаменить(Стр,"""./","""" + СтрЗаменить(ПутьКПроекту,"\","/") + "/");
		КонецЕсли;	 
		
		Поз = Найти(Нрег(Стр),"junit");
		Если Поз > 0 Тогда
			Стр = СтрЗаменить(Стр,"""./","""" + СтрЗаменить(ПутьКПроекту,"\","/") + "/");
		КонецЕсли;	 
		
		Поз = Найти(Нрег(Стр),"cucumber");
		Если Поз > 0 Тогда
			Стр = СтрЗаменить(Стр,"""./","""" + СтрЗаменить(ПутьКПроекту,"\","/") + "/");
		КонецЕсли;	 
		
		Поз = Найти(Нрег(Стр),"ИмяФайлаЛогВыполненияСценариев");
		Если Поз > 0 Тогда
			Стр = СтрЗаменить(Стр,"""./","""" + СтрЗаменить(ПутьКПроекту,"\","/") + "/");
		КонецЕсли;	 
		
		Массив.Добавить(Стр);
	КонецЦикла;	
	
	Текст.Закрыть();
	
	УдалитьФайлы(ИмяФайла);
	ЗТ = Новый ЗаписьТекста(ИмяФайла,"UTF-8",,Истина); 
	ЗТ.Записать(СтрСоединить(Массив,Символы.ПС)); 
	ЗТ.Закрыть();
	
	
	
		
	
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	Стр = Текст.Прочитать();
	Текст.Закрыть();
	
	УдалитьФайлы(ИмяФайла);
	
	Стр = СтрЗаменить(Стр,"""./","""" + СтрЗаменить(ПутьКПроектуSingle,"\","/") + "/");
	
	ЗТ = Новый ЗаписьТекста(ИмяФайла,"UTF-8",,Истина); 
	ЗТ.Записать(Стр); 
	ЗТ.Закрыть();
	
	
КонецПроцедуры 

Процедура ПроверитьЧтоНеБылоОшибок(ПутьКПроекту,ПутьКБазе)
	Сообщить(ТекДата() + "Проверка, что не было ошибок во время выполнения тестов.");
	
	ПутьФайлСтатусаВыполненияСценариев = ПутьКБазе + "\BuildStatus.log";
	
	Файл = Новый Файл(ПутьФайлСтатусаВыполненияСценариев); 
	Если НЕ Файл.Существует() Тогда
		ВызватьИсключение "Не найден файл: " + ПутьФайлСтатусаВыполненияСценариев;
	КонецЕсли;	 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьФайлСтатусаВыполненияСценариев,"UTF-8");
	
	Стр = СокрЛП(Текст.Прочитать());
	Текст.Закрыть();
	
	Если Стр <> "0" Тогда
		Сообщить(ТекДата() + "Были ошибки во время выполнения тестов.");
	Иначе	
		Сообщить(ТекДата() + "Ошибок не было.");
	КонецЕсли;	 
	
КонецПроцедуры 

Процедура ЗаменитьСтрокиВЗамерахSingle(КаталогЗамеров)
	//Убираем из замеров файл модуля объекта, т.к. у Single он собирается специальным образом.
	
	Путь = КаталогЗамеров;
	
	Файлы = НайтиФайлы(Путь,"*.pff",Ложь);
	Для Каждого Файл Из Файлы Цикл
		ИмяФайла = Файл.ПолноеИмя;
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайла,"UTF-8");
		Стр = Текст.Прочитать();
		Текст.Закрыть();
		
		Стр = СтрЗаменить(Стр,"07134aaf-b1d8-470a-8694-242d942af7a0",
		                      "00000000-0000-0000-0000-000000000000");
		
		УдалитьФайлы(ИмяФайла);
		
		ЗТ = Новый ЗаписьТекста(ИмяФайла,"UTF-8",,Истина); 
		ЗТ.Записать(Стр); 
		ЗТ.Закрыть();
	КонецЦикла;	
	
КонецПроцедуры 

Процедура СобратьЗамерыUFSingle(ПутьКПроекту,ПутьКПроектуSingle,ПутьКБазе,КаталогЗамеров)
	Сообщить(ТекДата() + "Сбор замеров UF Single.");
	
	СоздатьПустуюБазу(ПутьКБазе, ПутьКПроекту + "\lib\CF\83");
	ЗапуститьКонфигураторБазы(ПутьКБазе,ПутьКПроекту);
	
	АдресОтладчика = ПолучитьАдресОтладчика(ПутьКПроекту);
	Сообщить("АдресОтладчика="+АдресОтладчика);
	
	ВключитьСнятиеЗамеров(ПутьКПроекту);
	
	ИмяJson = СоздатьJsonДляЗапускаТестов(ПутьКПроекту,ПутьКБазе,АдресОтладчика,"VBParams8316UF_CodeCoverage_Single.json");
	ЗаменитьПутиВJsonНаАбсолютныеSingle(ИмяJson,ПутьКПроекту, ПутьКПроектуSingle);
	
	ЗапуститьСессиюТестов(ПутьКПроектуSingle,ПутьКБазе,АдресОтладчика,ИмяJson,"",Истина,Истина);
	
	ПроверитьЧтоНеБылоОшибок(ПутьКПроекту,ПутьКБазе);
	
	sleep(100000);
	
	СохранитьЗамерыВКаталог(ПутьКПроекту,КаталогЗамеров);
	
	ЗаменитьСтрокиВЗамерахSingle(КаталогЗамеров);
	
КонецПроцедуры 

Процедура СобратьЗамерыUFОсновной(ПутьКПроекту,ПутьКБазе,КаталогЗамеров)
	Сообщить(ТекДата() + "Сбор замеров UF.");
	
	СоздатьПустуюБазу(ПутьКБазе, ПутьКПроекту + "\lib\CF\83");
	ЗапуститьКонфигураторБазы(ПутьКБазе,ПутьКПроекту);
	
	АдресОтладчика = ПолучитьАдресОтладчика(ПутьКПроекту);
	Сообщить("АдресОтладчика="+АдресОтладчика);
	
	ВключитьСнятиеЗамеров(ПутьКПроекту);
	
	ИмяJson = СоздатьJsonДляЗапускаТестов(ПутьКПроекту,ПутьКБазе,АдресОтладчика,"VBParams8316UF_CodeCoverage.json");
	ЗаменитьПутиВJsonНаАбсолютные(ИмяJson,ПутьКПроекту);
	
	ЗапуститьСессиюТестов(ПутьКПроекту,ПутьКБазе,АдресОтладчика,ИмяJson,"",Истина,Ложь);
	
	ПроверитьЧтоНеБылоОшибок(ПутьКПроекту,ПутьКБазе);
	
	sleep(80000);
	
	СохранитьЗамерыВКаталог(ПутьКПроекту,КаталогЗамеров);
	
КонецПроцедуры 

Функция СтрокаПодключенияСервер(ПутьКПроекту,ПутьКБазе,КаталогЗамеров)
	ПутьКJson = ПутьКПроекту + "\tools\JSON\VBParams8316UF_CodeCoverage_Server.json";
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ПутьКJson);
	ДанныеJson = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	//Сообщить(ДанныеJson.СтрокаПодключенияКБазе);
	
	
	СтрокаПодключенияКБазе = ДанныеJson.СтрокаПодключенияКБазе;
	
	СтрокаПодключенияКБазе = СтрЗаменить(СтрокаПодключенияКБазе,"!","");
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(СтрокаПодключенияКБазе,"UTF-8");
	СтрокаПодключенияСервер = Текст.Прочитать();	
	Текст.Закрыть();
	
	Возврат СтрокаПодключенияСервер + " /NAdministratorMain"; 
КонецФункции	 

Процедура ЗагрузитьCFВБазу(СтрокаПодключения,Исходники,ПравильнаяВерсияПлатформы);
	УправлениеКонфигуратором = Новый УправлениеКонфигуратором();
	путьКПлатформе = УправлениеКонфигуратором.ПолучитьПутьКВерсииПлатформы(ОсновнаяВерсияПлатформы);
	УправлениеКонфигуратором.ПутьКПлатформе1С(путьКПлатформе);
	
	
	УправлениеКонфигуратором.УстановитьКонтекст(СтрокаПодключения,"","");
	
	ПараметрыЗапуска = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/LoadConfigFromFiles """ + Исходники + """ /UpdateDBCfg "); 

	ПравильнаяВерсияПлатформы = ОсновнаяВерсияПлатформы;
	ОписаниеОшибки = "";
	БылоИсключение = Ложь;
	Попытка
		УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		БылоИсключение = Истина;
		ПравильнаяВерсияПлатформы = Неопределено;
		Поз = Найти(ОписаниеОшибки,"Различаются версии клиента и сервера");
		Если Поз > 0 Тогда
			Стр = Сред(ОписаниеОшибки,Поз);
			Поз = Найти(Стр,"-");
			Стр = СокрЛП(Сред(Стр,Поз+1));
			Поз = Найти(Стр,")");
			ПравильнаяВерсияПлатформы = Лев(Стр,Поз-1);
		КонецЕсли;	 
	КонецПопытки;
	
	Сообщить("ПравильнаяВерсияПлатформы="+ПравильнаяВерсияПлатформы);
	
	Если БылоИсключение И ПравильнаяВерсияПлатформы = Неопределено Тогда
		ВызватьИсключение "Не получилось определить версию платформы у сервенной базы." + Символы.ПС + ОписаниеОшибки;
	КонецЕсли;	 
	
	УправлениеКонфигуратором = Неопределено;
	
	УправлениеКонфигуратором = Новый УправлениеКонфигуратором();
	путьКПлатформе = УправлениеКонфигуратором.ПолучитьПутьКВерсииПлатформы(ПравильнаяВерсияПлатформы);
	УправлениеКонфигуратором.ПутьКПлатформе1С(путьКПлатформе);
	
	
	УправлениеКонфигуратором.УстановитьКонтекст(СтрокаПодключения,"","");
	
	ПараметрыЗапуска = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/LoadConfigFromFiles """ + Исходники + """ /UpdateDBCfg "); 
	УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);
	
	
	
	
	//теперь выгрузим конфу в файлы ещё раз и заменим параметр CompatibilityMode на DontUse, чтобы гарантировать, что не используется режим совместимости
	ВременныйКаталог = ПолучитьВременныйКаталог();
	
	ПараметрыЗапуска = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/DumpConfigToFiles  """ + ВременныйКаталог + """"); 
	УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);
	
	//Сообщить("ВременныйКаталог="+ВременныйКаталог);
	ВерсияПлатформы = ОсновнаяВерсияПлатформы;
	ОбработатьФайлConfiguration_xml(ВременныйКаталог + "\Configuration.xml",ВерсияПлатформы);
	
	//теперь загрузим конфу обратно
	ПараметрыЗапуска = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/LoadConfigFromFiles  """ + ВременныйКаталог + """ /UpdateDBCfg "); 
	УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);
	
	ОчиститьКаталог(ВременныйКаталог);
	

	
КонецПроцедуры 

Функция КаталогПроектаКопияСервер(ПутьКПроекту)
	Файл = Новый Файл(ПутьКПроекту); 
	Путь = Файл.Путь;
	
	Возврат Путь + "vanessa-automationServer"; 
КонецФункции	 

Процедура СобратьЗамерыUFСервер(ПутьКПроекту,ПутьКБазе,КаталогЗамеров,ТипТестов)
	Сообщить(ТекДата() + СокрЛП("Сбор замеров UF сервер " + ТипТестов) + ".");
	
	СтрокаПодключенияСервер = СтрокаПодключенияСервер(ПутьКПроекту,ПутьКБазе,КаталогЗамеров);
	
	ПравильнаяВерсияПлатформы = Неопределено;
	ЗагрузитьCFВБазу(СтрокаПодключенияСервер,ПутьКПроекту + "\lib\CF\83" + ТипТестов,ПравильнаяВерсияПлатформы);
	
	КаталогПроектаКопияСервер = КаталогПроектаКопияСервер(ПутьКПроекту);
	Сообщить("КаталогПроектаКопияСервер="+КаталогПроектаКопияСервер);
	
	ОбеспечитьКаталог(КаталогПроектаКопияСервер);
	
	ОчиститьКаталог(КаталогПроектаКопияСервер);
	
	СкопироватьПроектКопияСервер(ПутьКПроекту,КаталогПроектаКопияСервер);
	
	ЗапуститьКонфигураторБазы(ПутьКБазе,ПутьКПроекту,ПравильнаяВерсияПлатформы,СтрокаПодключенияСервер);
	
	АдресОтладчика = ПолучитьАдресОтладчика(ПутьКПроекту);
	Сообщить("АдресОтладчика="+АдресОтладчика);
	
	ВключитьСнятиеЗамеров(ПутьКПроекту);
	
	ФайлСтатусаВыполненияСценариев = "";
	ИмяJson = СоздатьJsonДляЗапускаТестов(ПутьКПроекту,ПутьКБазе,АдресОтладчика,"VBParams8316UF_CodeCoverage_Server" + ТипТестов + ".json",ФайлСтатусаВыполненияСценариев);
	ЗаменитьПутиВJsonНаАбсолютные(ИмяJson,КаталогПроектаКопияСервер);
	ЗаменитьПутиВJsonНаАбсолютныеСервер(ИмяJson);
	
	УдалитьФайлы(ФайлСтатусаВыполненияСценариев);
	
	ЗапуститьСессиюТестов(КаталогПроектаКопияСервер,ПутьКБазе,АдресОтладчика,ИмяJson,"",Истина,Ложь,ПравильнаяВерсияПлатформы,СтрокаПодключенияСервер);
	
	Пока Истина Цикл
		Файл = Новый Файл(ФайлСтатусаВыполненияСценариев); 
		Если Файл.Существует() Тогда
			Прервать;
		КонецЕсли;	 
		
		sleep(10000);
	КонецЦикла;	
	
	ПроверитьЧтоНеБылоОшибок(ПутьКПроекту,ПутьКБазе);
	
	sleep(50000);
	
	СохранитьЗамерыВКаталог(ПутьКПроекту,КаталогЗамеров);
	
КонецПроцедуры 

Процедура СобратьЗамерыUF8316NoSync(ПутьКПроекту,ПутьКБазе,КаталогЗамеров)
	Сообщить(ТекДата() + "Сбор замеров UF NoSync.");
	
	СоздатьПустуюБазу(ПутьКБазе, ПутьКПроекту + "\lib\CF\83NoSync");
	ЗапуститьКонфигураторБазы(ПутьКБазе,ПутьКПроекту);
	
	АдресОтладчика = ПолучитьАдресОтладчика(ПутьКПроекту);
	Сообщить("АдресОтладчика="+АдресОтладчика);
	
	ВключитьСнятиеЗамеров(ПутьКПроекту);
	
	ИмяJson = СоздатьJsonДляЗапускаТестов(ПутьКПроекту,ПутьКБазе,АдресОтладчика,"VBParams8316UF_CodeCoverage_NoSync.json");
	ЗаменитьПутиВJsonНаАбсолютные(ИмяJson,ПутьКПроекту);
	
	ЗапуститьСессиюТестов(ПутьКПроекту,ПутьКБазе,АдресОтладчика,ИмяJson,"",Истина,Ложь);
	
	ПроверитьЧтоНеБылоОшибок(ПутьКПроекту,ПутьКБазе);
	
	sleep(50000);
	
	СохранитьЗамерыВКаталог(ПутьКПроекту,КаталогЗамеров);
	
КонецПроцедуры 

Процедура СобратьЗамерыUF8310(ПутьКПроекту,ПутьКБазе,КаталогЗамеров)
	Сообщить(ТекДата() + "Сбор замеров UF 8310.");
	
	СоздатьПустуюБазу(ПутьКБазе, ПутьКПроекту + "\lib\CF\83","8.3.10");
	ЗапуститьКонфигураторБазы(ПутьКБазе,ПутьКПроекту,"8.3.10");
	
	АдресОтладчика = ПолучитьАдресОтладчика(ПутьКПроекту);
	Сообщить(ТекДата() + "АдресОтладчика="+АдресОтладчика);
	
	ВключитьСнятиеЗамеров(ПутьКПроекту);
	
	ИмяJson = СоздатьJsonДляЗапускаТестов(ПутьКПроекту,ПутьКБазе,АдресОтладчика,"VBParams8310UF_CodeCoverage.json");
	ЗаменитьПутиВJsonНаАбсолютные(ИмяJson,ПутьКПроекту);
	
	ЗапуститьСессиюТестов(ПутьКПроекту,ПутьКБазе,АдресОтладчика,ИмяJson,"",Истина,Ложь,"8.3.10");
	
	ПроверитьЧтоНеБылоОшибок(ПутьКПроекту,ПутьКБазе);
	
	sleep(50000);
	
	СохранитьЗамерыВКаталог(ПутьКПроекту,КаталогЗамеров);
	
КонецПроцедуры 

Процедура СобратьЗамерыOFОсновной(ПутьКПроекту,ПутьКБазе,КаталогЗамеров)
	Сообщить(ТекДата() + "Сбор замеров OF.");
	
	СоздатьПустуюБазу(ПутьКБазе, ПутьКПроекту + "\lib\CF\83");
	ЗапуститьКонфигураторБазы(ПутьКБазе,ПутьКПроекту);
	
	АдресОтладчика = ПолучитьАдресОтладчика(ПутьКПроекту);
	Сообщить("АдресОтладчика="+АдресОтладчика);
	
	ВключитьСнятиеЗамеров(ПутьКПроекту);
	
	ИмяJson = СоздатьJsonДляЗапускаТестов(ПутьКПроекту,ПутьКБазе,АдресОтладчика,"VBParams8316OF_CodeCoverage.json");
	ЗаменитьПутиВJsonНаАбсолютные(ИмяJson,ПутьКПроекту);
	
	ЗапуститьСессиюТестов(ПутьКПроекту,ПутьКБазе,АдресОтладчика,ИмяJson,"/RunModeOrdinaryApplication",Ложь,Ложь);
	
	ПроверитьЧтоНеБылоОшибок(ПутьКПроекту,ПутьКБазе);
	
	sleep(50000);
	
	СохранитьЗамерыВКаталог(ПутьКПроекту,КаталогЗамеров);
	
КонецПроцедуры 

Процедура ПроверитьКорректностьПараметров(ПутьКПроекту, ПутьКПроектуSingle, ПутьКБазе, КаталогЗамеров)
	Файл = Новый Файл(ПутьКПроекту); 
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(ПутьКПроекту);
	КонецЕсли;	 
	
	Файл = Новый Файл(ПутьКПроекту); 
	Если НЕ Файл.Существует() Тогда
		ВызватьИсключение "Не найден каталог <" + ПутьКПроекту + ">";
	КонецЕсли;	 
	
	Файл = Новый Файл(КаталогЗамеров + "\pff"); 
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(КаталогЗамеров + "\pff");
	КонецЕсли;	 
	
	ОчиститьКаталог(КаталогЗамеров + "\pff");
	
	ОчиститьКаталог(ПутьКПроекту + "\tools\ServiceBases\allurereport");
	ОчиститьКаталог(ПутьКПроекту + "\tools\ServiceBases\cucumber");
	ОчиститьКаталог(ПутьКПроекту + "\tools\ServiceBases\junitreport");
	
КонецПроцедуры 

Процедура СкопироватьПроектКопияСервер(ПутьКПроекту,КаталогПриемник)
	КаталогКуда = КаталогПриемник;
	ОчиститьКаталог(КаталогКуда);
	
	ПутьИсточник = ПутьКПроекту;
	
	КаталогиОткуда = Новый Массив;
	КаталогиОткуда.Добавить(ПутьИсточник);
	
	МассивМасок = Новый Массив;
	МассивМасок.Добавить("*");
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить(".git\");
	МассивИсключений.Добавить(".git/");
	
	СкопироватьФайлыВКаталог(КаталогКуда, КаталогиОткуда, МассивМасок, МассивИсключений);
КонецПроцедуры 

Процедура СкопироватьПроект(ПутьКПроекту,КаталогЗамеров)
	КаталогКуда = КаталогЗамеров + "\vanessa-automation";
	ОчиститьКаталог(КаталогКуда);
	
	ПутьИсточник = ПутьКПроекту;
	
	КаталогиОткуда = Новый Массив;
	КаталогиОткуда.Добавить(ПутьИсточник);
	
	МассивМасок = Новый Массив;
	МассивМасок.Добавить("*");
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить(".git");
	
	СкопироватьФайлыВКаталог(КаталогКуда, КаталогиОткуда, МассивМасок, МассивИсключений);
	
КонецПроцедуры 

Процедура ВыполнитьОбработку(ПутьКПроекту, ПутьКПроектуSingle, ПутьКБазе, КаталогЗамеров)
	
	ПроверитьКорректностьПараметров(ПутьКПроекту, ПутьКПроектуSingle, ПутьКБазе, КаталогЗамеров);
	
	СкопироватьПроект(ПутьКПроекту,КаталогЗамеров);
	
	СобратьЗамерыUFОсновной(ПутьКПроекту,ПутьКБазе,КаталогЗамеров + "\pff\UFMain");
	СобратьЗамерыUF8310(ПутьКПроекту, ПутьКБазе,КаталогЗамеров + "\pff\UF8310");
	СобратьЗамерыUF8316NoSync(ПутьКПроекту, ПутьКБазе,КаталогЗамеров + "\pff\UF8316NoSync");
	СобратьЗамерыUFSingle(ПутьКПроекту,ПутьКПроектуSingle, ПутьКБазе,КаталогЗамеров + "\pff\UFSingle");
	СобратьЗамерыOFОсновной(ПутьКПроекту,ПутьКБазе,КаталогЗамеров + "\pff\OFMain");
	СобратьЗамерыUFСервер(ПутьКПроекту,ПутьКБазе,КаталогЗамеров + "\pff\UFServerNoSync","NoSync");
	СобратьЗамерыUFСервер(ПутьКПроекту,ПутьКБазе,КаталогЗамеров + "\pff\UFServer","");
	
КонецПроцедуры 

ОсновнаяВерсияПлатформы = "8.3.16";

Если АргументыКоманднойСтроки.Количество() = 0 Тогда
	Сообщить("Не переданы параметры!");
ИначеЕсли АргументыКоманднойСтроки.Количество() <>  4 Тогда
	Сообщить("Скрипт принимает четыре параметра!");
Иначе
	//параметры
	//1. путь к основному проекту
	//2. путь проекту Single
	//3. путь к базе
	//4. путь к каталогу, где будут сохранены замеры
	ВыполнитьОбработку(АргументыКоманднойСтроки[0],АргументыКоманднойСтроки[1],АргументыКоманднойСтроки[2],АргументыКоманднойСтроки[3]);
КонецЕсли;

Сообщить(ТекДата() + "Обработка завершена.");
Sleep(1000);




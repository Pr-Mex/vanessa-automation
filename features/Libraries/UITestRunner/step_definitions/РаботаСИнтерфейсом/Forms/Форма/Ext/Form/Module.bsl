	//начало текста модуля  
&НаКлиенте
Перем Ванесса;

&НаКлиенте
Перем Контекст Экспорт;
&НаКлиенте
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
Перем ТекущийЭлементДляРаботы;

&НаКлиенте
Перем ВерсияПлатформыБольшеИлиРавна839;

&НаКлиенте
Перем ТабПарамОбработкаОжидания;




&НаКлиенте
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	
	СистемнаяИнформация              = Новый СистемнаяИнформация;
	ВерсияПлатформыБольшеИлиРавна839 = Ванесса.ВерсияПриложенияБольшеИлиРавнаЧемЗаданнаяКлиент(
	                                         СистемнаяИнформация.ВерсияПриложения,"8.3.9.0");
	
	
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧИзВыпадающегоСпискаСЗаголовкомЯВыбираюСВыбором(Парам01,Парам02,Парам03)","ВОткрытойФормеВТЧИзВыпадающегоСпискаСЗаголовкомЯВыбираюСВыбором","И В открытой форме в таблице ""ИмяТаблицы"" из выпадающего списка с заголовком ""Заголовок поля"" я выбираю ""ЗначениеПоля"" с выбором",,"");//устаревшее
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧИзВыпадающегоСпискаЯВыбираюСВыбором(Парам01,Парам02,Парам03)","ВОткрытойФормеВТЧИзВыпадающегоСпискаЯВыбираюСВыбором","И В открытой форме в таблице ""ИмяТаблицы"" из выпадающего списка ""Заголовок поля"" я выбираю ""ЗначениеПоля"" с выбором",,"");//устаревшее
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧИзВыпадающегоСпискаЯВыбираюСВыбором(Парам01,Парам02,Парам03)","ВТЧИзВыпадающегоСпискаЯВыбираюСВыбором","И В таблице ""ИмяТаблицы"" из выпадающего списка ""Заголовок поля"" я выбираю ""ЗначениеПоля"" с выбором",,);
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВФормеВТЧЯЗавершаюРедактированиеСтроки(Парам01,Парам02)","ВФормеВТЧЯЗавершаюРедактированиеСтроки","И В форме ""ИмяФормы"" в таблице ""ИмяТаблицы"" я завершаю редактирование строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯЗавершаюРедактированиеСтроки(Парам01)","ВТЧЯЗавершаюРедактированиеСтроки","И В таблице ""ИмяТаблицы"" я завершаю редактирование строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯЗавершаюРедактированиеСтроки(Парам01)","ВТаблицеЯЗавершаюРедактированиеСтроки","И В таблице ""ИмяТаблицы"" я завершаю редактирование строки","Завершение редактирования строки","UI.Таблицы.Редактирование строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗавершаюРедактированиеСтроки()","ЯЗавершаюРедактированиеСтроки","И я завершаю редактирование строки","Завершение редактирования строки текущей таблицы.","UI.Таблицы.Редактирование строки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизитаСЗаголовком(Парам01,Парам02)","ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизитаСЗаголовком","И В открытой форме в таблице ""ИмяТаблицы"" я нажимаю кнопку выбора у реквизита с заголовком ""ИмяКолонки""","","");//устаревшее
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизита(Парам01,Парам02)","ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизита","В открытой форме в таблице ""ИмяТаблицы"" я нажимаю кнопку выбора у реквизита ""ИмяКолонки""","","");//устаревшее
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯНажимаюКнопкуВыбораУРеквизита(Парам01,Парам02)","ВТЧЯНажимаюКнопкуВыбораУРеквизита","И В таблице ""ИмяТаблицы"" я нажимаю кнопку выбора у реквизита ""ИмяКолонки""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯНажимаюКнопкуВыбораУРеквизита(Парам01,Парам02)","ВТаблицеЯНажимаюКнопкуВыбораУРеквизита","И В таблице ""ИмяТаблицы"" я нажимаю кнопку выбора у реквизита ""Заголовок колонки""","Нажатие кнопки выбора у реквизита в таблице","UI.Таблицы.Поля.Кнопка выбора");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯНажимаюКнопкуВыбораУРеквизитаСИменем(Парам01,Парам02)","ВТаблицеЯНажимаюКнопкуВыбораУРеквизитаСИменем","И В таблице ""ИмяТаблицы"" я нажимаю кнопку выбора у реквизита с именем ""ИмяКолонки""","Нажатие кнопки выбора у реквизита в таблице","UI.Таблицы.Поля.Кнопка выбора");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯНажимаюКнопкуОчиститьУПоля(Парам01,Парам02)","ВТаблицеЯНажимаюКнопкуОчиститьУПоля","И В таблице ""ИмяТаблицы"" я нажимаю кнопку очистить у поля ""Заголовок колонки""","Нажатие кнопки очистить у поля в таблице","UI.Таблицы.Поля.Очистить поле");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯНажимаюКнопкуОчиститьУПоляСИменем(Парам01,Парам02)","ВТаблицеЯНажимаюКнопкуОчиститьУПоляСИменем","И В таблице ""ИмяТаблицы"" я нажимаю кнопку очистить у поля с именем ""ИмяКолонки""","Нажатие кнопки очистить у поля в таблице","UI.Таблицы.Поля.Очистить поле");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуНаОдинУровеньВниз(Парам01)","ВТаблицеЯПерехожуНаОдинУровеньВниз"  ,"И в таблице  ""ИмяТаблицы"" я перехожу на один уровень вниз" ,"Переход на один уровень вниз в списке в режиме ""Иерархический список""" ,"UI.Таблицы.Иерархический список");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуНаОдинУровеньВверх(Парам01)","ВТаблицеЯПерехожуНаОдинУровеньВверх","И в таблице  ""ИмяТаблицы"" я перехожу на один уровень вверх","Переход на один уровень вверх в списке в режиме ""Иерархический список""","UI.Таблицы.Иерархический список");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯНачинаюРедактированиеСтроки(Парам01)","ВТаблицеЯНачинаюРедактированиеСтроки","И в таблице  ""ИмяТаблицы"" я начинаю редактирование строки","Начало редактирования строки","UI.Таблицы.Редактирование строки");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВниз(Парам01)","ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВниз","И В открытой форме в таблице  ""ИмяТаблицы"" я перехожу на одну строку вниз","","");//устаревшее
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВверх(Парам01)","ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВверх","И В открытой форме в таблице  ""ИмяТаблицы"" я перехожу на одну строку вверх","","");//устаревшее
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВнизСВыделением(Парам01)","ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВнизСВыделением","И В открытой форме в таблице  ""ИмяТаблицы"" я перехожу на одну строку вниз с выделением");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВверхСВыделением(Парам01)","ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВверхСВыделением","И В открытой форме в таблице  ""ИмяТаблицы"" я перехожу на одну строку вверх с выделением");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯПерехожуНаОднуСтрокуВнизСВыделением(Парам01)","ВТЧЯПерехожуНаОднуСтрокуВнизСВыделением","И В таблице  ""ИмяТаблицы"" я перехожу на одну строку вниз с выделением");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуНаОднуСтрокуВнизСВыделением(Парам01)","ВТаблицеЯПерехожуНаОднуСтрокуВнизСВыделением","И В таблице  ""ИмяТаблицы"" я перехожу на одну строку вниз с выделением", "Переходим в таблице на следующую строку с выделением", "UI.Таблицы.Переход к строке");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯПерехожуНаОднуСтрокуВверхСВыделением(Парам01)","ВТЧЯПерехожуНаОднуСтрокуВверхСВыделением","И В таблице  ""ИмяТаблицы"" я перехожу на одну строку вверх с выделением");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуНаОднуСтрокуВверхСВыделением(Парам01)","ВТаблицеЯПерехожуНаОднуСтрокуВверхСВыделением","И В таблице  ""ИмяТаблицы"" я перехожу на одну строку вверх с выделением", "Переходим в таблице на предыдущую строку с выделением", "UI.Таблицы.Переход к строке");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯПерехожуНаПервуюСтроку(Парам01)","ВОткрытойФормеВТЧЯПерехожуНаПервуюСтроку","И В открытой форме в таблице  ""ИмяТаблицы"" я перехожу на первую строку");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯПерехожуНаПоследнююСтроку(Парам01)","ВОткрытойФормеВТЧЯПерехожуНаПоследнююСтроку","И В открытой форме в таблице  ""ИмяТаблицы"" я перехожу на последнюю строку");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯПерехожуНаПервуюСтроку(Парам01)","ВТЧЯПерехожуНаПервуюСтроку","И В таблице  ""ИмяТаблицы"" я перехожу на первую строку");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯПерехожуНаПоследнююСтроку(Парам01)","ВТЧЯПерехожуНаПоследнююСтроку","И В таблице  ""ИмяТаблицы"" я перехожу на последнюю строку");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУдаляюВсеСтрокиТаблицы(Парам01)","ЯУдаляюВсеСтрокиТаблицы","И я удаляю все строки таблицы ""ИмяТаблицы""","Очистить таблицу","UI.Таблицы.Удаление строк");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеСИменемЯУдаляюТекущуюСтроку(Парам01)","ВТаблицеСИменемЯУдаляюТекущуюСтроку","И в таблице с именем ""ИмяТаблицы"" я удаляю текущую строку");
	//Дубль: я удаляю  строку
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯУдаляюТекущуюСтроку(Парам01)","ВТаблицеЯУдаляюТекущуюСтроку","И в таблице ""ИмяТаблицы"" я удаляю текущую строку");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯПерехожуНаОднуСтрокуВниз(Парам01)","ВТЧЯПерехожуНаОднуСтрокуВниз","И в таблице  ""ИмяТаблицы"" я перехожу на одну строку вниз");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуНаОднуСтрокуВниз(Парам01)","ВТаблицеЯПерехожуНаОднуСтрокуВниз","И в таблице  ""ИмяТаблицы"" я перехожу на одну строку вниз", "Переходим в таблице на следующую строку", "UI.Таблицы.Переход к строке");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯПерехожуНаОднуСтрокуВверх(Парам01)","ВТЧЯПерехожуНаОднуСтрокуВверх","И в таблице  ""ИмяТаблицы"" я перехожу на одну строку вверх");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуНаОднуСтрокуВверх(Парам01)","ВТаблицеЯПерехожуНаОднуСтрокуВверх","И в таблице  ""ИмяТаблицы"" я перехожу на одну строку вверх", "Переходим в таблице на предыдущую строку", "UI.Таблицы.Переход к строке");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВПолеСЗаголовкомЯВвожуТекст(Парам01,Парам02)","ВОткрытойФормеВПолеСЗаголовкомЯВвожуТекст","И В открытой форме в поле с заголовком ""Заголовок поля"" я ввожу текст ""Значение поля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВПолеЯВвожуТекст(Парам01,Парам02)","ВОткрытойФормеВПолеЯВвожуТекст","И В открытой форме в поле ""Заголовок поля"" я ввожу текст ""Значение поля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуТекст(Парам01,Парам02)","ВПолеЯВвожуТекст","И в поле ""Заголовок поля"" я ввожу текст ""Значение поля""","Вводит текст в поле. Также вводит текст в форматированный документ и поле HTML документа.","UI.Формы.Поля.Ввод текста");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляЯПерехожуКДате(Парам01,Парам02)","УПоляЯПерехожуКДате","И у поля ""Заголовок поля"" я перехожу к дате ""08.04.1981""","Делает переход к дате в поля календаря. Если переход делается через переменную контекста, то в ней должно лежать значение типа Дата.","UI.Формы.Календарь");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляСИменемЯПерехожуКДате(Парам01,Парам02)","УПоляСИменемЯПерехожуКДате","И у поля с именем ""ИмяПоля"" я перехожу к дате ""08.04.1981""","Делает переход к дате в поля календаря","UI.Формы.Календарь");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляКалендаряЯВыбираюДату(Парам01)","УПоляКалендаряЯВыбираюДату","И у поля календаря ""Заголовок поля"" я выбираю дату","Делает выбор даты, которая установлена в календаре","UI.Формы.Календарь");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляКалендаряСИменемЯВыбираюДату(Парам01)","УПоляКалендаряСИменемЯВыбираюДату","И у поля календаря с именем ""ИмяПоля"" я выбираю дату","Делает выбор даты, которая установлена в календаре","UI.Формы.Календарь");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуТекущуюДату(Парам01)","ВПолеЯВвожуТекущуюДату","И в поле ""Заголовок поля"" я ввожу текущую дату","Вводит текстовое представление значения текущей даты в поле. Например ""01.01.2018"".","UI.Формы.Поля.Ввод даты");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеСИменемЯВвожуТекущуюДату(Парам01)","ВПолеСИменемЯВвожуТекущуюДату","И в поле с именем ""ИмяПоля"" я ввожу текущую дату","Вводит текстовое представление значения текущей даты в поле. Например ""01.01.2018"".","UI.Формы.Поля.Ввод даты");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюНаКнопкуТекущегоМесяца()","ЯНажимаюНаКнопкуТекущегоМесяца","И я нажимаю на кнопку текущего месяца","Нажимает на кнопку текущего месяца в форме ввода даты.","UI.Формы.Поля.Ввод даты");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуНачалоТекущегоМесяца(Парам01)","ВПолеЯВвожуНачалоТекущегоМесяца","И в поле ""Заголовок поля"" я ввожу начало текущего месяца","Вводит в поле текстовое представление значения даты равной началу текущего месяца. Например ""01.01.2018"".","UI.Формы.Поля.Ввод даты");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуКонецТекущегоМесяца(Парам01)","ВПолеЯВвожуКонецТекущегоМесяца","И в поле ""Заголовок поля"" я ввожу конец текущего месяца","Вводит в поле текстовое представление значения даты равной концу текущего месяца. Например ""31.01.2018"".","UI.Формы.Поля.Ввод даты");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуНачалоСледующегоМесяца(Парам01)","ВПолеЯВвожуНачалоСледующегоМесяца","И в поле ""Заголовок поля"" я ввожу начало следующего месяца","Вводит в поле текстовое представление значения даты равной началу следующего месяца. Например ""01.01.2018"".","UI.Формы.Поля.Ввод даты");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуКонецСледующегоМесяца(Парам01)","ВПолеЯВвожуКонецСледующегоМесяца","И в поле ""Заголовок поля"" я ввожу конец следующего месяца","Вводит в поле текстовое представление значения даты равной концу следующего месяца. Например ""31.01.2018"".","UI.Формы.Поля.Ввод даты");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеСИменемЯВвожуНачалоТекущегоМесяца(Парам01)","ВТаблицеВПолеСИменемЯВвожуНачалоТекущегоМесяца","И в таблице ""ИмяТаблицы"" в поле с именем ""ИмяПоля"" я ввожу начало текущего месяца","Вводит в поле таблицы текстовое представление значения даты равной началу текущего месяца. Например ""01.01.2018"".","UI.Формы.Поля.Ввод даты");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеСИменемЯВвожуКонецТекущегоМесяца(Парам01)","ВТаблицеВПолеСИменемЯВвожуКонецТекущегоМесяца","И в таблице ""ИмяТаблицы"" в поле с именем ""ИмяПоля"" я ввожу конец текущего месяца","Вводит в поле таблицы текстовое представление значения даты равной концу текущего месяца. Например ""31.01.2018"".","UI.Формы.Поля.Ввод даты");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеСИменемЯВвожуНачалоСледующегоМесяца(Парам01)","ВТаблицеВПолеСИменемЯВвожуНачалоСледующегоМесяца","И в таблице ""ИмяТаблицы"" в поле с именем ""ИмяПоля"" я ввожу начало следующего месяца","Вводит в поле таблицы текстовое представление значения даты равной началу следующего месяца. Например ""01.01.2018"".","UI.Формы.Поля.Ввод даты");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеСИменемЯВвожуКонецСледующегоМесяца(Парам01)","ВТаблицеВПолеСИменемЯВвожуКонецСледующегоМесяца","И в таблице ""ИмяТаблицы"" в поле с именем ""ИмяПоля"" я ввожу конец следующего месяца","Вводит в поле таблицы текстовое представление значения даты равной концу следующего месяца. Например ""31.01.2018"".","UI.Формы.Поля.Ввод даты");
	
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуТекущуюДатуИТекущееВремя(Парам01)","ВПолеЯВвожуТекущуюДатуИТекущееВремя","И в поле ""Заголовок поля"" я ввожу текущую дату и текущее время","Вводит текстовое представление значения текущей даты и времени в поле. Например ""01.01.2018 12:00:00"".","UI.Формы.Поля.Ввод даты");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеСИменемЯВвожуТекущуюДатуИТекущееВремя(Парам01)","ВПолеСИменемЯВвожуТекущуюДатуИТекущееВремя","И в поле с именем ""ИмяПоля"" я ввожу текущую дату и текущее время","Вводит текстовое представление значения текущей даты и времени в поле. Например ""01.01.2018 12:00:00"".","UI.Формы.Поля.Ввод даты");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуЗначениеВыражения(Парам01,Парам02)","ВПолеЯВвожуЗначениеВыражения","И в поле ""Заголовок поля"" я ввожу значение выражения ""1+1""","Вычисляет выражение и вводит результат в поле","UI.Формы.Поля.Результат выражения в поле");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеСИменемЯВвожуЗначениеВыражения(Парам01,Парам02)","ВПолеСИменемЯВвожуЗначениеВыражения","И в поле с именем ""ИмяПоля"" я ввожу значение выражения ""1+1""","Вычисляет выражение и вводит результат в поле","UI.Формы.Поля.Результат выражения в поле");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеЯВвожуЗначениеВыражения(Парам01,Парам02,Парам03)","ВТаблицеВПолеЯВвожуЗначениеВыражения","И в таблице ""ИмяТаблицы"" в поле 'Заголовок поля' я ввожу значение выражения ""Выражение""","Вычисляет выражение и вводит результат в поле таблицы","UI.Таблицы.Поля.Результат выражения в поле");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолесИменемЯВвожуЗначениеВыражения(Парам01,Парам02,Парам03)","ВТаблицеВПолесИменемЯВвожуЗначениеВыражения","И в таблице ""ИмяТаблицы"" в поле с именем 'ИмяПоля' я ввожу значение выражения ""Выражение""","Вычисляет выражение и вводит результат в поле таблицы","UI.Таблицы.Поля.Результат выражения в поле");
	
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УТабличногоДокументаСИменемЯПерехожуКЯчейке(Парам01,Парам02)","УТабличногоДокументаСИменемЯПерехожуКЯчейке","И     у табличного документа с именем ""РеквизитТабличныйДокумент"" я перехожу к ячейке ""R4C2""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТабличномДокументеЯПерехожуКЯчейке(Парам01,Парам02)","ВТабличномДокументеЯПерехожуКЯчейке","И в табличном документе ""РеквизитТабличныйДокумент"" я перехожу к ячейке ""R4C2""","Делает нужную ячейку табличного документа активной","UI.Табличный документ.Ячейки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТабличномДокументеЯчейкаСАдресомРавна(Парам01,Парам02,Парам03)","ВТабличномДокументеЯчейкаСАдресомРавна","И в табличном документе ""РеквизитТабличныйДокумент"" ячейка с адресом ""АдресЯчейки"" равна ""ЗначениеЯчейки""","Проверяет значение ячейки с указанным адресом.","UI.Табличный документ.Ячейки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УТабличногоДокументаСИменемЯВвожуТекст(Парам01,Парам02)","УТабличногоДокументаСИменемЯВвожуТекст","И     у табличного документа с именем ""РеквизитТабличныйДокумент"" я ввожу текст ""МойТекст""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТабличныйДокументЯВвожуТекст(Парам01,Парам02)","ВТабличныйДокументЯВвожуТекст","И в табличный документ ""РеквизитТабличныйДокумент"" я ввожу текст ""МойТекст""","Вводит текст в текщую ячейку табличного документа","UI.Табличный документ.Ячейки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УТабличногоДокументаСИменемЯДелаюДвойнойКликНаТекущейЯчейке(Парам01)","УТабличногоДокументаСИменемЯДелаюДвойнойКликНаТекущейЯчейке","И     у табличного документа с именем ""РеквизитТабличныйДокумент"" я делаю двойной клик на текущей ячейке","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТабличномДокументеЯДелаюДвойнойКликНаТекущейЯчейке(Парам01)","ВТабличномДокументеЯДелаюДвойнойКликНаТекущейЯчейке","И в табличном документе ""РеквизитТабличныйДокумент"" я делаю двойной клик на текущей ячейке","Делает двойной клик на текущей ячейке табличного документа","UI.Табличный документ.Ячейки");
	
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаРавнаПереданнойТогда(Парам01,ТабПарам)","ТаблицаРавнаПереданнойТогда","Если таблица ""ИмяТаблицы"" равна переданной тогда" + Символы.ПС + Символы.Таб + "| 'Имя колонки' |" + Символы.ПС + Символы.Таб + "| 'Значение'               |","Условие. Истинно, если в таблица равна переданной таблице Gherkin.","UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Условие","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаРавнаМакетуТогда(Парам01,Парам02)","ТаблицаРавнаМакетуТогда","Если таблица ""ИмяТаблицы"" равна макету ""ИмяМакета"" тогда","Условие. Истинно, если в таблица равна переданному макету.","UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Условие","Условие");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаФормыСИменемСталаРавной(Парам01,ТабПарам)","ТаблицаФормыСИменемСталаРавной","И     таблица формы с именем ""ИмяТаблицы"" стала равной:");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаСталаРавной(Парам01,ТабПарам)","ТаблицаСталаРавной","И таблица ""ИмяТаблицы"" стала равной:" + Символы.ПС + "	| ИмяКолонки1 | ИмяКолонки2 |" + Символы.ПС + "	| Значение1 | Значение2 |","Проверяет, что таблица TestClient стала равна таблице Gherkin","UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Точное равенство");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеТекущаяСтрокаРавна(Парам01,ТабПарам)","ВТаблицеТекущаяСтрокаРавна","И в таблице ""ИмяТаблицы"" текущая строка равна:" + Символы.ПС + "	| ИмяКолонки1 | ИмяКолонки2 |" + Символы.ПС + "	| Значение1 | Значение2 |","Проверяет, что таблица TestClient стала равна таблице Gherkin","UI.Таблицы.Проверка значения текущей строки таблицы.Таблица Gherkin.Точное равенство");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаСталаРавнойПоШаблону(Парам01,ТабПарам)","ТаблицаСталаРавнойПоШаблону","И таблица ""ИмяТаблицы"" стала равной по шаблону:" + Символы.ПС + "	| ИмяКолонки1 | ИмяКолонки2 |" + Символы.ПС + "	| Значение1 | Значение2 |","Проверяет, что таблица TestClient стала равна таблице Gherkin. Значения могут содержать один или несколько символов *.","UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Равенство по шаблону");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаСталаРавнойМакету(Парам01,Парам02)","ТаблицаСталаРавнойМакету","И таблица ""ИмяТаблицы"" стала равной макету ""ИмяМакета""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаРавнаМакету(Парам01,Парам02)","ТаблицаРавнаМакету","И таблица ""ИмяТаблицы"" равна макету ""ИмяМакета""","Проверяет, что таблица TestClient стала равна переданному макету","UI.Таблицы.Проверка значения таблицы.Макет");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаРавнаМакетуПоШаблону(Парам01,Парам02)","ТаблицаРавнаМакетуПоШаблону","И таблица ""ИмяТаблицы"" равна макету ""ИмяМакета"" по шаблону","Проверяет, что таблица TestClient стала равна переданному макету. В ячейках макета можно использовать символы *","UI.Таблицы.Проверка значения таблицы.Макет");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеСтрокУКоторыхКолонка(Парам01,Парам02,Парам03,Парам04,Парам05)","ВТаблицеСтрокУКоторыхКолонка","И в таблице ""ИмяТаблицы"" 10 строк, у которых колонка ""ИмяКолонки"" ""ВидСравнения"" ""ЗначениеКолонки""","Проверяет, что у таблицы TestClient есть указанное число строк, у которых значение в нужной колоноке сответствует заданному","UI.Таблицы.Проверка значения колонки таблицы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоТаблицаСтанетРавнаДаннойВТеченииСекунд(Парам01,Парам02,ТабПарам)","ЯЖдуЧтоТаблицаСтанетРавнаДаннойВТеченииСекунд","И я жду, что таблица ""ИмяТаблицы"" станет равна данной в течении 20 секунд:");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоТаблицаСтанетРавнаДаннойВТечениеСекунд(Парам01,Парам02,ТабПарам)","ЯЖдуЧтоТаблицаСтанетРавнаДаннойВТечениеСекунд","И я жду, что таблица ""ИмяТаблицы"" станет равна данной в течение 20 секунд:" + Символы.ПС + "	| ИмяКолонки1 | ИмяКолонки2 |" + Символы.ПС + "	| Значение1 | Значение2 |","Проверяет, что таблица TestClient станет равной таблице Gherkin в течение нужного числа секунд","UI.Таблицы.Ожидание значения таблицы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоТаблицаСтанетСодержатьСтрокиВТечениеСекунд(Парам01,Парам02,ТабПарам)","ЯЖдуЧтоТаблицаСтанетСодержатьСтрокиВТечениеСекунд","И я жду, что таблица ""ИмяТаблицы"" станет содержать строки в течение 20 секунд:" + Символы.ПС + "	| ИмяКолонки1 | ИмяКолонки2 |" + Символы.ПС + "	| Значение1 | Значение2 |","Проверяет, что таблица TestClient станет содержать в себе строки из переданной таблицы Gherkin в течение нужного числа секунд.","UI.Таблицы.Ожидание значения таблицы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаФормыСИменемСодержитСтроки(Парам01,ТабПарам)","ТаблицаФормыСИменемСодержитСтроки","И     таблица формы с именем ""ИмяТаблицы"" содержит строки:");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаСодержитСтроки(Парам01,ТабПарам)","ТаблицаСодержитСтроки","И таблица ""ИмяТаблицы"" содержит строки:" + Символы.ПС + "	| ИмяКолонки1 | ИмяКолонки2 |" + Символы.ПС + "	| Значение1 | Значение2 |","Проверяет, что таблица TestClient содержит строки таблицы Gherkin. Т.е. если в таблице в TestClient 10 строк, то в шаге можно проверять наличие, например, только 3 строк. Также строки указанные в шаге могут идти в любом порядке.","UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Содержит строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаНеСодержитСтроки(Парам01,ТабПарам)","ТаблицаНеСодержитСтроки","И таблица  ""ИмяТаблицы"" не содержит строки:" + Символы.ПС + "	| ИмяКолонки1 | ИмяКолонки2 |" + Символы.ПС + "	| Значение1 | Значение2 |","Проверяет, что в таблице TestClient нет строк, указанных в таблице Gherkin.","UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Содержит строки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаСодержитСтрокиИзМакета(Парам01,Парам02)","ТаблицаСодержитСтрокиИзМакета","И таблица ""ИмяТаблицы"" содержит строки из макета ""ИмяМакета""","Проверяет, что таблица TestClient содержит строки таблицы из макета. Т.е. если в таблице в TestClient 10 строк, то в шаге можно проверять наличие, например, только 3 строк. Также строки указанные в макете могут идти в любом порядке.","UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Содержит строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаНеСодержитСтрокиИзМакета(Парам01,Парам02)","ТаблицаНеСодержитСтрокиИзМакета","И таблица ""ИмяТаблицы"" не содержит строки из макета ""ИмяМакета""","Проверяет, что таблица TestClient содержит строки таблицы из макета. Т.е. если в таблице в TestClient 10 строк, то в шаге можно проверять наличие, например, только 3 строк. Также строки указанные в макете могут идти в любом порядке.","UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Содержит строки");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаФормыСИменемСодержитИзменения(Парам01,ТабПарам)","ТаблицаФормыСИменемСодержитИзменения","Тогда таблица формы с именем ""ИмяТаблицы"" содержит изменения:");//дублирует ТаблицаФормыСИменемСталаРавной
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПанелиРазделовЯВыбираю(Парам01)","ВПанелиРазделовЯВыбираю","Когда В панели разделов я выбираю ""ИмяКоманды""","Нажатие кнопки на панели разделов","UI.Командный интерфейс.Панель разделов");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПанелиОткрытыхЯВыбираю(Парам01)","ВПанелиОткрытыхЯВыбираю","Когда В панели открытых я выбираю ""ИмяКоманды""","Нажатие кнопки на панели открытых окон","UI.Командный интерфейс.Панель открытых");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПанелиФункцийЯВыбираю(Парам01)","ВПанелиФункцийЯВыбираю","И В панели функций я выбираю ""ИмяКоманды""","Нажатие кнопки на панели функций","UI.Командный интерфейс.Панель функций");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПанелиФункцийВГруппеЯВыбираю(Парам01,Парам02)","ВПанелиФункцийВГруппеЯВыбираю","И В панели функций в группе ""Основное"" я выбираю ""ИмяКоманды""","Нажатие кнопки на панели функций нужной группы","UI.Командный интерфейс.Панель функций");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВКомандномИнтерфейсеЯВыбираю(Парам01,Парам02)","ВКомандномИнтерфейсеЯВыбираю","И В командном интерфейсе я выбираю ""ИмяКомандыПанелиРазделов"" ""ИмяКомандыПанелиФункций""","Нажатие кнопки на панели разделов, затем в панели функций.","UI.Командный интерфейс.Панель разделов");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеСИменемЯВыделяюВсеСтроки(Парам01)","ВТаблицеСИменемЯВыделяюВсеСтроки","Тогда в таблице с именем ""ИмяТаблицы"" я выделяю все строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯВыделяюВсеСтроки(Парам01)","ВТаблицеЯВыделяюВсеСтроки","Тогда в таблице ""ИмяТаблицы"" я выделяю все строки", "Выделение всех строк в таблице", "UI.Таблицы.Выделение строк");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯВыделяюВсеСтрокиВышеТекущей(Парам01)","ВТаблицеЯВыделяюВсеСтрокиВышеТекущей","И в таблице ""ИмяТаблицы"" я выделяю все строки выше текущей","Выделяет в таблице все строки выше данной","UI.Таблицы.Выделение строк");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯВыделяюВсеСтрокиНижеТекущей(Парам01)","ВТаблицеЯВыделяюВсеСтрокиНижеТекущей","И в таблице ""ИмяТаблицы"" я выделяю все строки ниже текущей","Выделяет в таблице все строки ниже данной","UI.Таблицы.Выделение строк");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюКнопкуВыбораУПоляСЗаголовком(Парам01)","ВОткрытойФормеЯНажимаюКнопкуВыбораУПоляСЗаголовком","И В открытой форме я нажимаю кнопку выбора у поля с заголовком ""Заголовок поля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюКнопкуВыбораУПоля(Парам01)","ВОткрытойФормеЯНажимаюКнопкуВыбораУПоля","И В открытой форме я нажимаю кнопку выбора у поля ""Заголовок поля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюКнопкуВыбораУПоля(Парам01)","ЯНажимаюКнопкуВыбораУПоля","И я нажимаю кнопку выбора у поля ""Заголовок поля""","Нажимает на кнопку выбора у поля","UI.Формы.Поля.Кнопка выбора");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСуществует(Парам01)","ПолеСуществует","И поле ""Заголовок поля"" существует","Проверка существования поля","UI.Формы.Поля.Проверка существования");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСИменемСуществует(Парам01)","ПолеСИменемСуществует","И поле с именем ""ИмяПоля"" существует","Проверка существования поля","UI.Формы.Поля.Проверка существования");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеНеСуществует(Парам01)","ПолеНеСуществует","И поле ""Заголовок поля"" не существует","Проверка не существования поля","UI.Формы.Поля.Проверка существования");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСИменемНеСуществует(Парам01)","ПолеСИменемНеСуществует","И поле с именем ""ИмяПоля"" не существует","Проверка не существования поля","UI.Формы.Поля.Проверка существования");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеПрисутствуетНаФорме(Парам01)","ПолеПрисутствуетНаФорме","И поле ""Заголовок поля"" присутствует на форме");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСИменемПрисутствуетНаФорме(Парам01)","ПолеСИменемПрисутствуетНаФорме","И поле с именем ""ИмяПоля"" присутствует на форме");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеОтсутствуетНаФорме(Парам01)","ПолеОтсутствуетНаФорме","И поле ""Заголовок поля"" отсутствует на форме");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСИменемОтсутствуетНаФорме(Парам01)","ПолеСИменемОтсутствуетНаФорме","И поле с именем ""ИмяПоля"" отсутствует на форме");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыПрисутствуетНаФорме(Парам01)","ЭлементФормыПрисутствуетНаФорме","И элемент формы ""Заголовок поля"" присутствует на форме","Проверка видимости поля. Поле обязано существовать.","UI.Формы.Поля.Проверка видимости");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыСИменемПрисутствуетНаФорме(Парам01)","ЭлементФормыСИменемПрисутствуетНаФорме","И элемент формы с именем ""ИмяПоля"" присутствует на форме","Проверка видимости поля. Поле обязано существовать.","UI.Формы.Поля.Проверка видимости");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыОтсутствуетНаФорме(Парам01)","ЭлементФормыОтсутствуетНаФорме","И элемент формы ""Заголовок поля"" отсутствует на форме","Проверка невидимости поля. Поле может не существовать.","UI.Формы.Поля.Проверка видимости");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыСИменемОтсутствуетНаФорме(Парам01)","ЭлементФормыСИменемОтсутствуетНаФорме","И элемент формы с именем ""ИмяПоля"" отсутствует на форме","Проверка невидимости поля. Поле может не существовать.","UI.Формы.Поля.Проверка видимости");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыСуществуетИНевидимНаФорме(Парам01)","ЭлементФормыСуществуетИНевидимНаФорме","И элемент формы ""Заголовок поля"" существует и невидим на форме","Проверка невидимости поля. Поле обязано существовать.","UI.Формы.Поля.Проверка видимости");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыСИменемСуществуетИНевидимНаФорме(Парам01)","ЭлементФормыСИменемСуществуетИНевидимНаФорме","И элемент формы с именем ""ИмяПоля"" существует и невидим на форме","Проверка невидимости поля. Поле обязано существовать.","UI.Формы.Поля.Проверка видимости");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСИменемИмеетЗаголовок(Парам01,Парам02)","ПолеСИменемИмеетЗаголовок","И поле с именем ""ИмяПоля"" имеет заголовок ""Заголовок""","Проверка, что у поля нужный заголовок. Поле ищется по внутреннему идентификатору.","UI.Формы.Поля.Заголовок");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляСИменемТекстПодсказкиРавен(Парам01,Парам02)","УПоляСИменемТекстПодсказкиРавен","И у поля с именем ""ИмяПоля"" текст подсказки равен ""ТекстПодсказки""","Проверка, что у поля нужный текст подсказки. Поле ищется по внутреннему идентификатору.","UI.Формы.Поля.Подсказка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеТаблицыСИменемИмеетЗаголовок(Парам01,Парам02,Парам03)","ПолеТаблицыСИменемИмеетЗаголовок","И поле таблицы ""ИмяТаблицы"" с именем ""ИмяРеквизита"" имеет заголовок ""Заголовок""","Проверка, что у поля таблицы нужный заголовок. Поле ищется по внутреннему идентификатору.","UI.Таблицы.Поля.Заголовок");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляТаблицыСИменемТекстПодсказкиРавен(Парам01,Парам02,Парам03)","УПоляТаблицыСИменемТекстПодсказкиРавен","И у поля таблицы ""ИмяТаблицы"" с именем ""ИмяРеквизита"" текст подсказки равен ""Текст подсказки""","Проверка, что у поля таблицы нужный текст подсказки. Поле ищется по внутреннему идентификатору.","UI.Таблицы.Поля.Подсказка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюКнопкуВыбораУПоляСИменем(Парам01)","ВОткрытойФормеЯНажимаюКнопкуВыбораУПоляСИменем","И В открытой форме я нажимаю кнопку выбора у поля с именем ""ИмяПоля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюКнопкуВыбораУПоляСИменем(Парам01)","ЯНажимаюКнопкуВыбораУПоляСИменем","И я нажимаю кнопку выбора у поля с именем ""ИмяПоля""","Нажимает на кнопку выбора у поля","UI.Формы.Поля.Кнопка выбора");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументФормыСИменемСталРавен(Парам01,ТабПарам)","ТабличныйДокументФормыСИменемСталРавен","И табличный документ формы с именем ""РеквизитТабличныйДокумент"" стал равен:");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументСталРавен(Парам01,ТабПарам)","ТабличныйДокументСталРавен","Дано табличный документ ""РеквизитТабличныйДокумент"" стал равен:" + Символы.ПС + "	| Значение1 | Значение2 |" + Символы.ПС + "	| Значение3 | Значение4 |");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументРавен(Парам01,ТабПарам)","ТабличныйДокументРавен","Тогда табличный документ ""РеквизитТабличныйДокумент"" равен:" + Символы.ПС + "	| Значение1 | Значение2 |" + Символы.ПС + "	| Значение3 | Значение4 |","Проверяет равенство табличного документа переданной таблице Gherkin. Чтобы получить mxl файл из TestClient, в тонком клиенте будет сделана попытка сохранить табличный документ в файл. В Web клиенте он всегда будет считываться по ячейкам. Детали в справке, в разделе, посвященному сравнению табличного документа с эталоном.","UI.Табличный документ.Проверка значения табличного документа.Таблица Gherkin.Весь документ");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументРавенПоШаблону(Парам01,ТабПарам)","ТабличныйДокументРавенПоШаблону","Тогда табличный документ ""РеквизитТабличныйДокумент"" равен по шаблону:" + Символы.ПС + "	| Значение1 | Значение2 |" + Символы.ПС + "	| Значение3 | Значение4 |","Проверяет равенство табличного документа переданной таблице Gherkin. В значениях допускатеся использование символов *. Чтобы получить mxl файл из TestClient, в тонком клиенте будет сделана попытка сохранить табличный документ в файл. В Web клиенте он всегда будет считываться по ячейкам. Детали в справке, в разделе, посвященному сравнению табличного документа с эталоном.","UI.Табличный документ.Проверка значения табличного документа.Таблица Gherkin.Весь документ");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ОбластьТабличногоДокументаСталаРавна(Парам01,Парам02,ТабПарам)","ОбластьТабличногоДокументаСталаРавна","И область ""R1C1:R10C10"" табличного документа ""РеквизитТабличныйДокумент"" стала равна:" + Символы.ПС + "	| Значение1 | Значение2 |" + Символы.ПС + "	| Значение3 | Значение4 |");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ОбластьТабличногоДокументаРавна(Парам01,Парам02,ТабПарам)","ОбластьТабличногоДокументаРавна","Тогда область ""R1C1:R10C10"" табличного документа ""РеквизитТабличныйДокумент"" равна:" + Символы.ПС + "	| Значение1 | Значение2 |" + Символы.ПС + "	| Значение3 | Значение4 |","Проверяет равенство области табличного документа переданной таблице Gherkin. Чтобы получить mxl файл из TestClient, в тонком клиенте будет сделана попытка сохранить табличный документ в файл. В Web клиенте он всегда будет считываться по ячейкам. Детали в справке, в разделе, посвященному сравнению табличного документа с эталоном.","UI.Табличный документ.Проверка значения табличного документа.Таблица Gherkin.Область");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ОбластьТабличногоДокументаРавнаПоШаблону(Парам01,Парам02,ТабПарам)","ОбластьТабличногоДокументаРавнаПоШаблону","Тогда область ""R1C1:R10C10"" табличного документа ""РеквизитТабличныйДокумент"" равна по шаблону:" + Символы.ПС + "	| Значение1 | Значение2 |" + Символы.ПС + "	| Значение3 | Значение4 |","Проверяет равенство области табличного документа переданной таблице Gherkin. В значениях допускается использовать символы *. Чтобы получить mxl файл из TestClient, в тонком клиенте будет сделана попытка сохранить табличный документ в файл. В Web клиенте он всегда будет считываться по ячейкам. Детали в справке, в разделе, посвященному сравнению табличного документа с эталоном.","UI.Табличный документ.Проверка значения табличного документа.Таблица Gherkin.Область");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументФормыСИменемСодержитСтроки(Парам01,ТабПарам)","ТабличныйДокументФормыСИменемСодержитСтроки","И табличный документ формы с именем ""РеквизитТабличныйДокумент"" содержит строки:" + Символы.ПС + "	| Значение1 | Значение2 |" + Символы.ПС + "	| Значение3 | Значение4 |", "Проверяет, что табличный документ TestClient содержит строки таблицы Gherkin", "UI.Табличный документ.Содержит строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументСодержитЗначенияОбластей(Парам01,ТабПарам)","ТабличныйДокументСодержитЗначенияОбластей","И Табличный документ ""ИмяТабДок"" содержит значения областей" + Символы.ПС + "| ИмяОбласти | ЗначениеОбласти |","Проверяет что в табличном документа содержатся значения, перечисленные в таблице. Таблица состоит из двух колонок: ""ИмяОбласти"" и ""ЗначениеОбласти"".","UI.Табличный документ.Проверка значений именнованных областей");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументСодержитСтрокиВОбластях(Парам01,ТабПарам)","ТабличныйДокументСодержитСтрокиВОбластях","И Табличный документ ""ИмяТабДок"" содержит строки в областях" + Символы.ПС + "| ИмяОбласти | Подстрока |","Проверяет что в табличном документа содержатся значения, перечисленные в таблице. Таблица состоит из двух колонок: ""ИмяОбласти"" и ""Подстрока"".","UI.Табличный документ.Проверка значений именнованных областей");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументСодержитЗначенияОбластейПоШаблону(Парам01,ТабПарам)","ТабличныйДокументСодержитЗначенияОбластейПоШаблону","И Табличный документ ""РеквизитТабличныйДокумент"" содержит значения областей по шаблону" + Символы.ПС + "| ИмяОбласти | ШаблонОбласти |","Проверяет что в табличном документа содержатся значения, перечисленные в таблице. Таблица состоит из двух колонок: ""ИмяОбласти"" и ""ШаблонОбласти"". В шаблоне можно указывать символ * много раз.","UI.Табличный документ.Проверка значений именнованных областей");

	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументСодержитЗначения(Парам01,ТабПарам)","ТабличныйДокументСодержитЗначения","И табличный документ ""РеквизитТабличныйДокумент"" содержит значения:" + Символы.ПС + "	| Значение1 |" + Символы.ПС  + "	| Значение2 |","Проверяет, что в табличном документе есть значения из таблицы","UI.Табличный документ.Содержит значения");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументНеСодержитЗначения(Парам01,ТабПарам)","ТабличныйДокументНеСодержитЗначения","И табличный документ ""РеквизитТабличныйДокумент"" не содержит значения:" + Символы.ПС + "	| Значение1 |" + Символы.ПС  + "	| Значение2 |","Проверяет, что в табличном документе нет значений из таблицы","UI.Табличный документ.Содержит значения");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТабличномДокументеЗначенияВКолонкеРавноЗначению(Парам01,Парам02,Парам03)","ВТабличномДокументеЗначенияВКолонкеРавноЗначению","И в табличном документе ""РеквизитТабличныйДокумент"" значения в колонке ""ИмяКолонки"" равно значению """"","Проверяет, что в табличном документе значение в колонке равно переданному параметру","UI.Табличный документ.Проверка колонки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТабличномДокументеЗначенияВКолонкеНеравноЗначению(Парам01,Парам02,Парам03)","ВТабличномДокументеЗначенияВКолонкеНеравноЗначению","И в табличном документе ""РеквизитТабличныйДокумент"" значения в колонке ""ИмяКолонки"" неравно значению """"","Проверяет, что в табличном документе значение в колонке равно переданному параметру","UI.Табличный документ.Проверка колонки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТабличномДокументеЗначенияВКолонкеСоответствуютУсловию(Парам01,Парам02,Парам03,Парам04)","ВТабличномДокументеЗначенияВКолонкеСоответствуютУсловию","И в табличном документе ""РеквизитТабличныйДокумент"" значения в колонке ""ИмяКолонки"" соответствуют условию  ""равно""  10","Проверяет, что в табличном документе значение в колонке соответствует условию. Можно использовать числа.","UI.Табличный документ.Проверка колонки");
	
	                                              
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрылВсеОкнаКлиентскогоПриложения()","ЯЗакрылВсеОкнаКлиентскогоПриложения","И я закрыл все окна клиентского приложения","Закрывает все окна текущего TestClient.","UI.Окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрылВсеОкнаКлиентскогоПриложенияКроме(Парам01)","ЯЗакрылВсеОкнаКлиентскогоПриложенияКроме","И я закрыл все окна клиентского приложения кроме ""Нужное окно""","Закрывает все окна текущего TestClient, кроме нужного окна.","UI.Окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюКнопкуКомандногоИнтерфейса(Парам01)","ЯНажимаюКнопкуКомандногоИнтерфейса","Когда я нажимаю кнопку командного интерфейса ""Заголовок кнопки""","Нажимает на кнопку командного интерфейса","UI.Командный интерфейс.Панель разделов");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ОткрылосьОкно(Парам01)","ОткрылосьОкно","Тогда открылось окно ""Заголовок окна""","Проверяет, что на экране есть активное окно с нужым заголовком","UI.Окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ОткрыласьФорма(Парам01)","ОткрыласьФорма","Тогда открылась форма ""Справочник.Справочник1.Форма.ФормаЭлемента""","Проверяет, что на экране есть активное окно с нужной формой","UI.Окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ОткрыласьФормаСИменем(Парам01)","ОткрыласьФормаСИменем","Тогда открылась форма с именем ""Справочник.Справочник1.Форма.ФормаЭлемента""","Проверяет, что на экране есть активное окно с нужной формой","UI.Окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯАктивизируюОкно(Парам01)","ЯАктивизируюОкно","И я активизирую окно ""Заголовок окна""","Активизирует окно с нужным заголовком","UI.Окна");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЗакрытияОкнаВТеченииСекунд(Парам01,Парам02)","ЯЖдуЗакрытияОкнаВТеченииСекунд","И я жду закрытия окна ""Заголовок окна"" в течении 20 секунд");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЗакрытияОкнаВТечениеСекунд(Парам01,Парам02)","ЯЖдуЗакрытияОкнаВТечениеСекунд","И я жду закрытия окна ""Заголовок окна"" в течение 20 секунд","Ожидает, что окно исчезнет в течение указанного числа секунд. Поиск окна происходит среди всех открытых окон. Поэтому шаг будет ждать пока закроются все окна, удовлетворяющие переданному параметру ""Заголовок окна"".","UI.Окна");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуОткрытияОкнаВТеченииСекунд(Парам01,Парам02)","ЯЖдуОткрытияОкнаВТеченииСекунд","И я жду открытия окна ""Заголовок окна"" в течении 20 секунд");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуОткрытияОкнаВТечениеСекунд(Парам01,Парам02)","ЯЖдуОткрытияОкнаВТечениеСекунд","И я жду открытия окна ""Заголовок окна"" в течение 20 секунд","Ожидает, что окно появится в течение указанного числа секунд","UI.Окна");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком(Парам01)","ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком","И В открытой форме я нажимаю на кнопку с заголовком ""Создать""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюНаКнопку(Парам01)","ВОткрытойФормеЯНажимаюНаКнопку","И В открытой форме я нажимаю на кнопку ""Создать""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюНаКнопку(Парам01)","ЯНажимаюНаКнопку","И я нажимаю на кнопку ""Заголовок кнопки""","Нажимает на кнопку с нужным заголовком","UI.Формы.Кнопки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВПолеСИменемЯВвожуТекст(Парам01,Парам02)","ВОткрытойФормеВПолеСИменемЯВвожуТекст","И В открытой форме в поле с именем ""ИмяПоля"" я ввожу текст ""Значение поля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеСИменемЯВвожуТекст(Парам01,Парам02)","ВПолеСИменемЯВвожуТекст","И в поле с именем ""ИмяПоля"" я ввожу текст ""Значение поля""","Вводит текст в поле. Также вводит текст в форматированный документ и поле HTML документа.","UI.Формы.Поля.Ввод текста");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯПерехожуКЗакладкеСЗаголовком(Парам01)","ВОткрытойФормеЯПерехожуКЗакладкеСЗаголовком","И В открытой форме я перехожу к закладке с заголовком ""Вспомогательная""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯПерехожуКЗакладке(Парам01)","ВОткрытойФормеЯПерехожуКЗакладке","И В открытой форме я перехожу к закладке ""Вспомогательная""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПерехожуКЗакладке(Парам01)","ЯПерехожуКЗакладке","И я перехожу к закладке ""Вспомогательная""","Шаг делает переход к закладке формы","UI.Формы.Закладки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯПерехожуКЗакладкеСИменем(Парам01)","ВОткрытойФормеЯПерехожуКЗакладкеСИменем","И В открытой форме я перехожу к закладке с именем ""Вспомогательная""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПерехожуКЗакладкеСИменем(Парам01)","ЯПерехожуКЗакладкеСИменем","И я перехожу к закладке с именем ""Вспомогательная""","Шаг делает переход к закладке формы","UI.Формы.Закладки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеЗаполнено(Парам01)","ПолеЗаполнено","И поле ""Заголовок поля"" заполнено","Проверяет заполненность поля формы","UI.Формы.Поля.Заполненность");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСИменемЗаполнено(Парам01)","ПолеСИменемЗаполнено","И поле с именем ""ИмяПоля"" заполнено","Проверяет заполненность поля формы","UI.Формы.Поля.Заполненность");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯАктивизируюПоле(Парам01)","ЯАктивизируюПоле","И я активизирую поле ""Заголовок поля""","Сделать поле активным","UI.Формы.Поля.Активизировать");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯАктивизируюПолеСИменем(Парам01)","ЯАктивизируюПолеСИменем","И я активизирую поле с именем ""ИмяПоля""","Сделать поле активным","UI.Формы.Поля.Активизировать");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыСталРавен(Парам01,Парам02)","ЭлементФормыСталРавен","Тогда элемент формы ""Заголовок поля"" стал равен ""Значение поля""","Проверка значения элемента формы","UI.Формы.Поля.Проверка значения поля");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыСИменемСталРавен(Парам01,Парам02)","ЭлементФормыСИменемСталРавен","Тогда элемент формы с именем ""ИмяПоля"" стал равен ""Значение поля""","Проверка значения элемента формы","UI.Формы.Поля.Проверка значения поля");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УЭлементаФормыСИменемТекстРедактированияСталРавен(Парам01,Парам02)","УЭлементаФормыСИменемТекстРедактированияСталРавен","И у элемента формы с именем ""ИмяПоля"" текст редактирования стал равен ""ТекстПоля""","Проверка значения текста редактирования элемента формы","UI.Формы.Поля.Проверка значения поля");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыСталРавенШаблону(Парам01,Парам02)","ЭлементФормыСталРавенШаблону","Тогда элемент формы ""Заголовок поля"" стал равен шаблону ""Шаблон""","Проверка значения элемента формы. В значении допускаются символы *","UI.Формы.Поля.Проверка значения поля");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыСИменемСталРавенШаблону(Парам01,Парам02)","ЭлементФормыСИменемСталРавенШаблону","Тогда элемент формы с именем ""ИмяПоля"" стал равен шаблону ""Шаблон""","Проверка значения элемента формы. В значении допускаются символы *","UI.Формы.Поля.Проверка значения поля");
	                                                       
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЗначениеПоляСодержитТекст(Парам01,Парам02)","ЗначениеПоляСодержитТекст","Тогда значение поля ""Заголовок поля"" содержит текст ""Значение поля""","Проверка, что значение поля формы содержит текст","UI.Формы.Поля.Содержит текст");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЗначениеПоляСИменемСодержитТекст(Парам01,Парам02)","ЗначениеПоляСИменемСодержитТекст","Тогда значение поля с именем ""ИмяПоля"" содержит текст ""Значение поля""","Проверка, что значение поля формы содержит текст","UI.Формы.Поля.Содержит текст");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЗначениеПоляНеСодержитТекст(Парам01,Парам02)","ЗначениеПоляНеСодержитТекст","Тогда значение поля ""Заголовок поля"" не содержит текст ""Подстрока""","Проверка, что значение поля формы содержит текст","UI.Формы.Поля.Содержит текст");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЗначениеПоляСИменемНеСодержитТекст(Парам01,Парам02)","ЗначениеПоляСИменемНеСодержитТекст","Тогда значение поля с именем ""ИмяПоля"" не содержит текст ""Подстрока""","Проверка, что значение поля формы содержит текст","UI.Формы.Поля.Содержит текст");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТекстЯчейкиТаблицыСталРавен(Парам01,Парам02,Парам03)","ТекстЯчейкиТаблицыСталРавен","Тогда текст ячейки таблицы ""Таблица"" ""ИмяПоля"" стал равен ""Значение поля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТекстТекущейЯчейкиТаблицыСталРавен(Парам01,Парам02)","ТекстТекущейЯчейкиТаблицыСталРавен","Тогда текст текущей ячейки таблицы ""Таблица"" стал равен ""Значение поля""","Проверка значения текущей ячейки таблицы.","UI.Таблицы.Значение ячейки таблицы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюНаГиперссылкуСЗаголовком(Парам01)","ВОткрытойФормеЯНажимаюНаГиперссылкуСЗаголовком","И В открытой форме я нажимаю на гиперссылку с заголовком ""Гиперссылка""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюНаГиперссылку(Парам01)","ВОткрытойФормеЯНажимаюНаГиперссылку","И В открытой форме я нажимаю на гиперссылку ""Гиперссылка""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюНаГиперссылку(Парам01)","ЯНажимаюНаГиперссылку","И я нажимаю на гиперссылку ""Гиперссылка""","Нажатие на гиперссылку.","UI.Формы.Поля.Гиперссылки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюНаГиперссылкуСИменем(Парам01)","ВОткрытойФормеЯНажимаюНаГиперссылкуСИменем","И В открытой форме я нажимаю на гиперссылку с именем ""Гиперссылка""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюНаГиперссылкуСИменем(Парам01)","ЯНажимаюНаГиперссылкуСИменем","И я нажимаю на гиперссылку с именем ""Гиперссылка""","Нажатие на гиперссылку.","UI.Формы.Поля.Гиперссылки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюНаКнопкуСИменем(Парам01)","ВОткрытойФормеЯНажимаюНаКнопкуСИменем","И В открытой форме я нажимаю на кнопку с именем ""ИмяКнопки""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюНаКнопкуСИменем(Парам01)","ЯНажимаюНаКнопкуСИменем","И я нажимаю на кнопку с именем ""ИмяКнопки""","Нажимает на кнопку с нужным именем","UI.Формы.Кнопки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯСворачиваюГруппуСЗаголовком(Парам01)","ВОткрытойФормеЯСворачиваюГруппуСЗаголовком","И В открытой форме я сворачиваю группу с заголовком ""ИмяГруппы""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯСворачиваюГруппу(Парам01)","ВОткрытойФормеЯСворачиваюГруппу","И В открытой форме я сворачиваю группу ""Заголовок группы""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯСворачиваюГруппу(Парам01)","ЯСворачиваюГруппу","И я сворачиваю группу ""Заголовок группы""","Сворачивает группу","UI.Формы.Группы.Развернуть/свернуть группу");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯСворачиваюГруппуСИменем(Парам01)","ВОткрытойФормеЯСворачиваюГруппуСИменем","И В открытой форме я сворачиваю группу с именем ""ИмяГруппы""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯСворачиваюГруппуСИменем(Парам01)","ЯСворачиваюГруппуСИменем","И я сворачиваю группу с именем ""ИмяГруппы""","Сворачивает группу","UI.Формы.Группы.Развернуть/свернуть группу");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯРазворачиваюГруппуСЗаголовком(Парам01)","ВОткрытойФормеЯРазворачиваюГруппуСЗаголовком","И В открытой форме я разворачиваю группу с заголовком ""ИмяГруппы""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯРазворачиваюГруппу(Парам01)","ВОткрытойФормеЯРазворачиваюГруппу","И В открытой форме я разворачиваю группу ""Заголовок группы""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯРазворачиваюГруппу(Парам01)","ЯРазворачиваюГруппу","И я разворачиваю группу ""Заголовок группы""","Разворачивает группу","UI.Формы.Группы.Развернуть/свернуть группу");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯРазворачиваюГруппуСИменем(Парам01)","ВОткрытойФормеЯРазворачиваюГруппуСИменем","И В открытой форме я разворачиваю группу с именем ""ИмяГруппы""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯРазворачиваюГруппуСИменем(Парам01)","ЯРазворачиваюГруппуСИменем","И я разворачиваю группу с именем ""ИмяГруппы""","Разворачивает группу","UI.Формы.Группы.Развернуть/свернуть группу");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УГруппыСтраницТекущаяСтраница(Парам01,Парам02)","УГруппыСтраницТекущаяСтраница","И у группы страниц ""ГруппаСтраниц"" текущая страница ""ИмяСтраницы""","Проверяет что у заданной группы текущей страницей является указанная","UI.Формы.Группы.Текущая страница");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТеченииСекунд(Парам01,Парам02,Парам03)","ЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТеченииСекунд","И я жду, что у группы страниц ""ГруппаСтраниц"" текущей страницей станет ""ИмяСтраницы"" в течении 20 секунд");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТечениеСекунд(Парам01,Парам02,Парам03)","ЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТечениеСекунд","И я жду, что у группы страниц ""ГруппаСтраниц"" текущей страницей станет ""ИмяСтраницы"" в течение 20 секунд","Ожидает, что у заданной группы текущей страницей станет нужная группа в течение указанного числа секунд","UI.Формы.Группы.Текущая страница");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯОткрываюВыпадающийСписокСЗаголовком(Парам01)","ВОткрытойФормеЯОткрываюВыпадающийСписокСЗаголовком","И В открытой форме я открываю выпадающий список с заголовком ""Заголовок списка""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯОткрываюВыпадающийСписок(Парам01)","ВОткрытойФормеЯОткрываюВыпадающийСписок","И В открытой форме я открываю выпадающий список ""Заголовок списка""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрываюВыпадающийСписок(Парам01)","ЯОткрываюВыпадающийСписок","И я открываю выпадающий список ""Заголовок списка""","Открывает выпадающий список","UI.Выпадающий список.Открыть список");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯОткрываюВыпадающийСписокСИменем(Парам01)","ВОткрытойФормеЯОткрываюВыпадающийСписокСИменем","И В открытой форме я открываю выпадающий список с именем ""ИмяСписка""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрываюВыпадающийСписокСИменем(Парам01)","ЯОткрываюВыпадающийСписокСИменем","И я открываю выпадающий список с именем ""ИмяСписка""","Открывает выпадающий список","UI.Выпадающий список.Открыть список");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка(Парам01)","ВОткрытойФормеЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка","И В открытой форме я выбираю значение реквизита с заголовком ""Заголовок поля"" из формы списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01)","ВОткрытойФормеЯВыбираюЗначениеРеквизитаИзФормыСписка","И В открытой форме я выбираю значение реквизита ""ИмяПоля"" из формы списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01)","ЯВыбираюЗначениеРеквизитаИзФормыСписка","И я выбираю значение реквизита ""Заголовок поля"" из формы списка","Нажимает на кнопку ""Выбрать из списка"" у поля","UI.Формы.Поля.Выбор из списка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01)","ВОткрытойФормеЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка","И В открытой форме я выбираю значение реквизита с именем ""ИмяПоля"" из формы списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01)","ЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка","И я выбираю значение реквизита с именем ""ИмяПоля"" из формы списка","Нажимает на кнопку ""Выбрать из списка"" у поля","UI.Формы.Поля.Выбор из списка");
	
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВФормеВТаблицеЯПерехожуКСтроке(Парам01,Парам02,ТабПарам)","ВФормеВТаблицеЯПерехожуКСтроке","И В форме ""Справочник2"" в таблице ""ИмяТаблицы"" я перехожу к строке:" + Символы.ПС + "		| 'ИмяКолонки' |" + Символы.ПС + "		| 'ЗначениеКолонки' |");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуКСтроке(Парам01,ТабПарам)","ВТаблицеЯПерехожуКСтроке","И в таблице ""ИмяТаблицы"" я перехожу к строке:" + Символы.ПС + "		| 'ИмяКолонки' |" + Символы.ПС + "		| 'ЗначениеКолонки' |","Переход к нужной строке данной таблицы. Если обернуть значение с помощью символа $, тогда значение будет взято из переменной Контекст. Если $$, тогда из КонтекстСохраняемый.","UI.Таблицы.Переход к строке");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуКСтрокеСПереключениемВыделения(Парам01,ТабПарам)","ВТаблицеЯПерехожуКСтрокеСПереключениемВыделения","И в таблице ""ИмяТаблицы"" я перехожу к строке с переключением выделения:" + Символы.ПС + "		| 'ИмяКолонки' |" + Символы.ПС + "		| 'ЗначениеКолонки' |","Переход к нужной строке данной таблицы со сменой выделения строки (клавиша Ctrl). Если обернуть значение с помощью символа $, тогда значение будет взято из переменной Контекст. Если $$, тогда из КонтекстСохраняемый.","UI.Таблицы.Переход к строке");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуКПервойСтроке(Парам01)","ВТаблицеЯПерехожуКПервойСтроке",      "И в таблице ""ИмяТаблицы"" я перехожу к первой строке","Переход к первой строке данной таблицы","UI.Таблицы.Переход к строке");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуКПоследнейСтроке(Парам01)","ВТаблицеЯПерехожуКПоследнейСтроке","И в таблице ""ИмяТаблицы"" я перехожу к последней строке","Переход к последней строке данной таблицы","UI.Таблицы.Переход к строке");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуКПредыдущейСтроке(Парам01)","ВТаблицеЯПерехожуКПредыдущейСтроке",      "И в таблице ""ИмяТаблицы"" я перехожу к предыдущей строке","Переход к предыдущей строке данной таблицы","UI.Таблицы.Переход к строке");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуКСледующейСтроке(Парам01)","ВТаблицеЯПерехожуКСледующейСтроке",      "И в таблице ""ИмяТаблицы"" я перехожу к следующей строке","Переход к следующей строке данной таблицы","UI.Таблицы.Переход к строке");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуКСтрокеСодержащейПодстроки(Парам01,ТабПарам)","ВТаблицеЯПерехожуКСтрокеСодержащейПодстроки","И в таблице ""ИмяТаблицы"" я перехожу к строке содержащей подстроки" + Символы.ПС + "	|'ИмяКолонки'|"  + Символы.ПС + "	|'ЗначениеКолонки'|","Переход к строке таблицы, когда значения колонок заданы не полностью, а подстрокой","UI.Таблицы.Переход к строке");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуКСтрокеПоШаблону(Парам01,ТабПарам)","ВТаблицеЯПерехожуКСтрокеПоШаблону","И в таблице ""ИмяТаблицы"" я перехожу к строке по шаблону" + Символы.ПС + "	|'ИмяКолонки'|"  + Символы.ПС + "	|'*ЧастьСтроки*'|","Переход к строке таблицы, когда в значении колонок встречаются символы *","UI.Таблицы.Переход к строке");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯДобавляюСтроку(Парам01)","ВТаблицеЯДобавляюСтроку",      "И в таблице ""ИмяТаблицы"" я добавляю строку","Добавление строки","UI.Таблицы.Добавить строку");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯУдаляюСтроку(Парам01)","ВТаблицеЯУдаляюСтроку",          "И в таблице ""ИмяТаблицы"" я удаляю строку"  ,"Удаление строки","UI.Таблицы.Удаление строк");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВФормеВТаблицеЯРазворачиваюСтроку(Парам01,Парам02,ТабПарам)","ВФормеВТаблицеЯРазворачиваюСтроку","И В форме ""Справочник2"" в таблице ""ИмяТаблицы"" я разворачиваю строку:" + Символы.ПС + "		| 'ИмяКолонки' |" + Символы.ПС + "		| 'ЗначениеКолонки' |");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯРазворачиваюСтроку(Парам01,ТабПарам)","ВТаблицеЯРазворачиваюСтроку","И    в таблице ""ИмяТаблицы"" я разворачиваю строку:" + Символы.ПС + "		| 'ИмяКолонки' |" + Символы.ПС + "		| 'ЗначениеКолонки' |","Развернуть группу строк","UI.Таблицы.Развернуть/Свернуть.Произвольная строка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯРазворачиваюСтрокуСПодчиненными(Парам01,ТабПарам)","ВТаблицеЯРазворачиваюСтрокуСПодчиненными","И    в таблице ""ИмяТаблицы"" я разворачиваю строку с подчиненными:" + Символы.ПС + "		| 'ИмяКолонки' |" + Символы.ПС + "		| 'ЗначениеКолонки' |","Развернуть группу строк со всеми подчиненными строками. Нужен режим совместимости 8.3.13 или выше.","UI.Таблицы.Развернуть/Свернуть.Произвольная строка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯРазворачиваюТекущуюСтроку(Парам01)","ВТаблицеЯРазворачиваюТекущуюСтроку","И    в таблице ""ИмяТаблицы"" я разворачиваю текущую строку","Развернуть текущую строку таблицы/дерева","UI.Таблицы.Развернуть/Свернуть.Текущая строка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯРазворачиваюТекущуюСтрокуСПодчиненными(Парам01)","ВТаблицеЯРазворачиваюТекущуюСтрокуСПодчиненными","И    в таблице ""ИмяТаблицы"" я разворачиваю текущую строку с подчиненными","Развернуть текущую строку таблицы/дерева со всеми подчиненными строками. Нужен режим совместимости 8.3.13 или выше.","UI.Таблицы.Развернуть/Свернуть.Текущая строка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВФормеВТаблицеЯСворачиваюСтроку(Парам01,Парам02,ТабПарам)","ВФормеВТаблицеЯСворачиваюСтроку","И В форме ""Справочник2"" в таблице ""ИмяТаблицы"" я сворачиваю строку:" + Символы.ПС + "		| 'ИмяКолонки' |" + Символы.ПС + "		| 'ЗначениеКолонки' |");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯСворачиваюСтроку(Парам01,ТабПарам)","ВТаблицеЯСворачиваюСтроку","И    в таблице ""ИмяТаблицы"" я сворачиваю строку:" + Символы.ПС + "		| 'ИмяКолонки' |" + Символы.ПС + "		| 'ЗначениеКолонки' |","Свернуть группу строк","UI.Таблицы.Развернуть/Свернуть.Произвольная строка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯСворачиваюТекущуюСтроку(Парам01)","ВТаблицеЯСворачиваюТекущуюСтроку","И    в таблице ""ИмяТаблицы"" я сворачиваю текущую строку","Свернуть текущую строку таблицы/дерева","UI.Таблицы.Развернуть/Свернуть.Текущая строка");
	
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВФормеВТЧЯВыбираюТекущуюСтроку(Парам01,Парам02)","ВФормеВТЧЯВыбираюТекущуюСтроку","И В форме ""Справочник2"" в таблице ""ИмяТаблицы"" я выбираю текущую строку");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯВыбираюТекущуюСтроку(Парам01)","ВТаблицеЯВыбираюТекущуюСтроку","И в таблице ""ИмяТаблицы"" я выбираю текущую строку","Выбор текущей строки с указанием таблицы","UI.Таблицы.Выбор строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЕстьЭлементСправочникаСНаименованиемИРеквизитомРавным(Парам01,Парам02,Парам03,Парам04)","ЕстьЭлементСправочникаСНаименованиемИРеквизитомРавным","И     Есть элемент справочника ""ИмяФормы"" с наименованием ""Тест"" и  реквизитом ""ИмяПоля"" равным ""Группа2Элем2""");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯИзменяюФлагСЗаголовком(Парам01)","ВОткрытойФормеЯИзменяюФлагСЗаголовком","И В открытой форме я изменяю флаг с заголовком ""ИмяФлага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯИзменяюФлаг(Парам01)","ВОткрытойФормеЯИзменяюФлаг","И В открытой форме я изменяю флаг ""Заголовок флага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯИзменяюФлаг(Парам01)","ЯИзменяюФлаг","И я изменяю флаг ""Заголовок флага""", "Изменяет текущее состояние флага", "UI.Формы.Поля.Флаги");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯИзменяюФлагСИменем(Парам01)","ВОткрытойФормеЯИзменяюФлагСИменем","И В открытой форме я изменяю флаг с именем ""ИмяФлага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯИзменяюФлагСИменем(Парам01)","ЯИзменяюФлагСИменем","И я изменяю флаг с именем ""ИмяФлага""", "Изменяет текущее состояние флага", "UI.Формы.Поля.Флаги");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯМеняюЗначениеПереключателяСЗаголовкомНа(Парам01,Парам02)","ВОткрытойФормеЯМеняюЗначениеПереключателяСЗаголовкомНа","И В открытой форме я меняю значение переключателя с заголовком ""Заголовок элемента"" на ""Значение переключателя""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯМеняюЗначениеПереключателяНа(Парам01,Парам02)","ВОткрытойФормеЯМеняюЗначениеПереключателяНа","И В открытой форме я меняю значение переключателя ""Заголовок элемента"" на ""Значение переключателя""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯМеняюЗначениеПереключателяНа(Парам01,Парам02)","ЯМеняюЗначениеПереключателяНа","И я меняю значение переключателя ""Заголовок элемента"" на ""Значение переключателя""","Меняет значение переключателя (радиобаттона)","UI.Формы.Поля.Переключатели");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯМеняюЗначениеПереключателяНаПоШаблону(Парам01,Парам02)","ЯМеняюЗначениеПереключателяНаПоШаблону","И я меняю значение переключателя 'Заголовок элемента' на 'Значение переключателя' по шаблону","Меняет значение переключателя (радиобаттона). При этом возможно использовать символ * в значении. Работает в 8.3.12 и выше.","UI.Формы.Поля.Переключатели");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯМеняюЗначениеПереключателяСИменемНа(Парам01,Парам02)","ВОткрытойФормеЯМеняюЗначениеПереключателяСИменемНа","И В открытой форме я меняю значение переключателя с именем ""РеквизитПереключатель"" на ""Значение переключателя""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯМеняюЗначениеПереключателяСИменемНа(Парам01,Парам02)","ЯМеняюЗначениеПереключателяСИменемНа","И я меняю значение переключателя с именем ""РеквизитПереключатель"" на ""Значение переключателя""","Меняет значение переключателя (радиобаттона)","UI.Формы.Поля.Переключатели");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯМеняюЗначениеПереключателяСИменемНаПоШаблону(Парам01,Парам02)","ЯМеняюЗначениеПереключателяСИменемНаПоШаблону","И я меняю значение переключателя с именем 'ИмяЭлемента' на 'Значение переключателя' по шаблону","Меняет значение переключателя (радиобаттона). При этом возможно использовать символ * в значении. Работает в 8.3.12 и выше.","UI.Формы.Поля.Переключатели");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯНажимаюНаКнопкуСЗаголовком(Парам01,Парам02)","ВОткрытойФормеВТЧЯНажимаюНаКнопкуСЗаголовком","И В открытой форме в таблице ""ИмяТаблицы"" я нажимаю на кнопку с заголовком ""Добавить""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯНажимаюНаКнопку(Парам01,Парам02)","ВОткрытойФормеВТЧЯНажимаюНаКнопку","И В открытой форме в таблице ""ИмяТаблицы"" я нажимаю на кнопку ""Добавить""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯНажимаюНаКнопку(Парам01,Парам02)","ВТЧЯНажимаюНаКнопку","И в таблице ""ИмяТаблицы"" я нажимаю на кнопку ""Добавить""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯНажимаюНаКнопку(Парам01,Парам02)","ВТаблицеЯНажимаюНаКнопку","И в таблице ""ИмяТаблицы"" я нажимаю на кнопку ""Добавить""","Нажимает на кнопку таблицы. Кнопка ищется по заголовку.","UI.Таблицы.Кнопки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯНажимаюНаКнопкуСИменем(Парам01,Парам02)","ВОткрытойФормеВТЧЯНажимаюНаКнопкуСИменем","И В открытой форме в таблице ""ИмяТаблицы"" я нажимаю на кнопку с именем ""Добавить""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯНажимаюНаКнопкуСИменем(Парам01,Парам02)","ВТЧЯНажимаюНаКнопкуСИменем","И в таблице ""ИмяТаблицы"" я нажимаю на кнопку с именем ""Добавить""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯНажимаюНаКнопкуСИменем(Парам01,Парам02)","ВТаблицеЯНажимаюНаКнопкуСИменем","И в таблице ""ИмяТаблицы"" я нажимаю на кнопку с именем ""Добавить""","Нажимает на кнопку таблицы. Кнопка ищется по имени.","UI.Таблицы.Кнопки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧВПолеСЗаголовкомЯВвожуТекст(Парам01,Парам02,Парам03)","ВОткрытойФормеВТЧВПолеСЗаголовкомЯВвожуТекст","И В открытой форме в таблице ""ИмяТаблицы"" в поле с заголовком ""Заголовок поля"" я ввожу текст ""НужныйМнеТекст""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧВПолеЯВвожуТекст(Парам01,Парам02,Парам03)","ВОткрытойФормеВТЧВПолеЯВвожуТекст","И В открытой форме в таблице ""ИмяТаблицы"" в поле ""Заголовок поля"" я ввожу текст ""НужныйМнеТекст""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧВПолеЯВвожуТекст(Парам01,Парам02,Парам03)","ВТЧВПолеЯВвожуТекст","И в таблице ""ИмяТаблицы"" в поле ""Заголовок поля"" я ввожу текст ""НужныйМнеТекст""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеЯВвожуТекст(Парам01,Парам02,Парам03)","ВТаблицеВПолеЯВвожуТекст","И в таблице ""ИмяТаблицы"" в поле ""Заголовок поля"" я ввожу текст ""НужныйМнеТекст""","Ввод текста в поле таблицы","UI.Таблицы.Поля.Ввод текста");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеЯВвожуТекущуюДату(Парам01,Парам02)","ВТаблицеВПолеЯВвожуТекущуюДату","И в таблице ""ИмяТаблицы"" в поле ""Заголовок поля"" я ввожу текущую дату","Ввод текущей даты в поле таблицы","UI.Таблицы.Поля.Ввод даты");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеУПоляЯЖдуЗначенияВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)","ВТаблицеУПоляЯЖдуЗначенияВТечениеСекунд","И в таблице ""ИмяТаблицы"" у поля ""Заголовок элемента"" я жду значения ""Значение"" в течение 20 секунд","Ожидает значения в ячейке таблицы в текущей строке в течение указанного числа секунд. Ячейка указывается по её заголовку.","UI.Таблицы.Ожидание значения ячейки таблицы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеУПоляСИменемЯЖдуЗначенияВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)","ВТаблицеУПоляСИменемЯЖдуЗначенияВТечениеСекунд","И в таблице ""ИмяТаблицы"" у поля с именем ""ИмяЭлемента"" я жду значения ""Значение"" в течение 20 секунд","Ожидает значения в ячейке таблицы в текущей строке в течение указанного числа секунд. Ячейка указывается по её имени.","UI.Таблицы.Ожидание значения ячейки таблицы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеУПоляЯЖдуЗначенияОтличногоОтВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)","ВТаблицеУПоляЯЖдуЗначенияОтличногоОтВТечениеСекунд","И в таблице ""ИмяТаблицы"" у поля ""Заголовок элемента"" я жду значения отличного от ""Значение"" в течение 20 секунд","Ожидает значения отличного от указанного в ячейке таблицы в текущей строке в течение указанного числа секунд. Ячейка указывается по её заголовку.","UI.Таблицы.Ожидание значения ячейки таблицы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеУПоляСИменемЯЖдуЗначенияОтличногоОтВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)","ВТаблицеУПоляСИменемЯЖдуЗначенияОтличногоОтВТечениеСекунд","И в таблице ""ИмяТаблицы"" у поля с именем ""ИмяЭлемента"" я жду значения отличного от ""Значение"" в течение 20 секунд","Ожидает значения отличного от указанного в ячейке таблицы в текущей строке в течение указанного числа секунд. Ячейка указывается по её имени.","UI.Таблицы.Ожидание значения ячейки таблицы");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеИмеетЗначение(Парам01,Парам02,Парам03)","ВТаблицеПолеИмеетЗначение","И в таблице ""ИмяТаблицы"" поле ""Заголовок поля"" имеет значение ""ЗначениеПоля""","Проверка значения поля (ячейки) текущей строки таблицы","UI.Таблицы.Значение ячейки таблицы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеСИменемИмеетЗначение(Парам01,Парам02,Парам03)","ВТаблицеПолеСИменемИмеетЗначение","И в таблице ""ИмяТаблицы"" поле с именем ""ИмяПоля"" имеет значение ""ЗначениеПоля""","Проверка значения поля (ячейки) текущей строки таблицы","UI.Таблицы.Значение ячейки таблицы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧВПолеСИменемЯВвожуТекст(Парам01,Парам02,Парам03)","ВОткрытойФормеВТЧВПолеСИменемЯВвожуТекст","И В открытой форме в таблице ""ИмяТаблицы"" в поле с именем ""ИмяПоля"" я ввожу текст ""НужныйМнеТекст""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧВПолеСИменемЯВвожуТекст(Парам01,Парам02,Парам03)","ВТЧВПолеСИменемЯВвожуТекст","И в таблице ""ИмяТаблицы"" в поле с именем ""ИмяПоля"" я ввожу текст ""НужныйМнеТекст""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеСИменемЯВвожуТекст(Парам01,Парам02,Парам03)","ВТаблицеВПолеСИменемЯВвожуТекст","И в таблице ""ИмяТаблицы"" в поле с именем ""ИмяПоля"" я ввожу текст ""НужныйМнеТекст""","Ввод текста в поле таблицы","UI.Таблицы.Поля.Ввод текста");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВТекущееПолеЯВвожуТекст(Парам01,Парам02)","ВТаблицеВТекущееПолеЯВвожуТекст","И в таблице ""ИмяТаблицы"" в текущее поле я ввожу текст ""НужныйМнеТекст""","Ввод текста в текущее поле таблицы.","UI.Таблицы.Поля.Ввод текста");
	
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧИзВыпадающегоСпискаСЗаголовкомЯВыбираю(Парам01,Парам02,Парам03)","ВОткрытойФормеВТЧИзВыпадающегоСпискаСЗаголовкомЯВыбираю","И В открытой форме в таблице ""ИмяТаблицы"" из выпадающего списка с заголовком ""Заголовок поля"" я выбираю ""ЗначениеПоля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03)","ВОткрытойФормеВТЧИзВыпадающегоСпискаЯВыбираю","И В открытой форме в таблице ""ИмяТаблицы"" из выпадающего списка ""Заголовок поля"" я выбираю ""ЗначениеПоля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03)","ВТЧИзВыпадающегоСпискаЯВыбираю","И в таблице ""ИмяТаблицы"" из выпадающего списка ""Заголовок поля"" я выбираю ""ЗначениеПоля""");
	
	//устаревшее. всегда выбирает по строке
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03)","ВТаблицеИзВыпадающегоСпискаЯВыбираю","И в таблице ""ИмяТаблицы"" из выпадающего списка ""Заголовок поля"" я выбираю ""ЗначениеПоля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираю(Парам01,Парам02,Парам03)","ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираю","И в таблице ""ИмяТаблицы"" из выпадающего списка с именем ""ИмяПоля"" я выбираю ""ЗначениеПоля""");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеИзВыпадающегоСпискаЯВыбираюТочноеЗначение(Парам01,Парам02,Парам03)","ВТаблицеИзВыпадающегоСпискаЯВыбираюТочноеЗначение","И в таблице ""ИмяТаблицы"" из выпадающего списка ""Заголовок поля"" я выбираю точное значение ""ЗначениеПоля""","Выбор значения из выпадающего списка. Должно быть указано точное значение","UI.Таблицы.Поля.Выбор из списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираюТочноеЗначение(Парам01,Парам02,Парам03)","ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираюТочноеЗначение","И в таблице ""ИмяТаблицы"" из выпадающего списка с именем ""ИмяПоля"" я выбираю точное значение ""ЗначениеПоля""","Выбор значения из выпадающего списка","UI.Таблицы.Поля.Выбор из списка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеИзВыпадающегоСпискаЯВыбираюПоСтроке(Парам01,Парам02,Парам03)","ВТаблицеИзВыпадающегоСпискаЯВыбираюПоСтроке","И в таблице ""ИмяТаблицы"" из выпадающего списка ""Заголовок поля"" я выбираю по строке ""ЗначениеПоля""","Выбор значения из выпадающего списка. Сначала будет ввод по строке указанного значения, затем будет выбрано первое значение из списка.","UI.Таблицы.Поля.Выбор из списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираюПоСтроке(Парам01,Парам02,Парам03)","ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираюПоСтроке","И в таблице ""ИмяТаблицы"" из выпадающего списка с именем ""ИмяПоля"" я выбираю по строке ""ЗначениеПоля""","Выбор значения из выпадающего списка. Сначала будет ввод по строке указанного значения, затем будет выбрано первое значение из списка.","UI.Таблицы.Поля.Выбор из списка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯИзменяюФлагСЗаголовком(Парам01,Парам02)","ВОткрытойФормеВТЧЯИзменяюФлагСЗаголовком","И В открытой форме в таблице ""ИмяТаблицы"" я изменяю флаг с заголовком ""ИмяФлага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯИзменяюФлаг(Парам01,Парам02)","ВОткрытойФормеВТЧЯИзменяюФлаг","И В открытой форме в таблице ""ИмяТаблицы"" я изменяю флаг ""Заголовок флага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯИзменяюФлаг(Парам01,Парам02)","ВТЧЯИзменяюФлаг","И в таблице ""ИмяТаблицы"" я изменяю флаг ""Заголовок флага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯИзменяюФлаг(Парам01,Парам02)","ВТаблицеЯИзменяюФлаг","И в таблице ""ИмяТаблицы"" я изменяю флаг ""Заголовок флага""", "Изменяет текущее состояние флага", "UI.Таблицы.Флаги");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯИзменяюФлагСИменем(Парам01,Парам02)","ВТаблицеЯИзменяюФлагСИменем","И в таблице ""ИмяТаблицы"" я изменяю флаг с именем ""ИмяФлага""", "Изменяет текущее состояние флага", "UI.Таблицы.Флаги");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка(Парам01,Парам02)","ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка","И В открытой форме в таблице ""ИмяТаблицы"" я выбираю значение реквизита с заголовком ""ИмяРеквизита"" из формы списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01,Парам02)","ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаИзФормыСписка","И В открытой форме в таблице ""ИмяТаблицы"" я выбираю значение реквизита ""ИмяРеквизита"" из формы списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01,Парам02)","ВТЧЯВыбираюЗначениеРеквизитаИзФормыСписка","И в таблице ""ИмяТаблицы"" я выбираю значение реквизита ""ИмяРеквизита"" из формы списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01,Парам02)","ВТаблицеЯВыбираюЗначениеРеквизитаИзФормыСписка","И в таблице ""ИмяТаблицы"" я выбираю значение реквизита ""Заголовок поля"" из формы списка","Выбор значения реквизита из выпадающего списка","UI.Таблицы.Поля.Выбор из списка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01,Парам02)","ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка","И В открытой форме в таблице ""ИмяТаблицы"" я выбираю значение реквизита с именем ""ИмяРеквизита"" из формы списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01,Парам02)","ВТЧЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка","И в таблице ""ИмяТаблицы"" я выбираю значение реквизита с именем ""ИмяРеквизита"" из формы списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01,Парам02)","ВТаблицеЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка","И в таблице ""ИмяТаблицы"" я выбираю значение реквизита с именем ""ИмяРеквизита"" из формы списка","Выбор значения реквизита из выпадающего списка","UI.Таблицы.Поля.Выбор из списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементСправочника1СИменемЗаписалсяКорректно(Парам01)","ЭлементСправочника1СИменемЗаписалсяКорректно","И     Элемент Справочника1 с именем ""Тестовый Элемент 2"" записался корректно");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрываюОкноСЗаголовком(Парам01)","ЯЗакрываюОкноСЗаголовком","И я закрываю окно с заголовком ""ИмяОкна""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрываюОкно(Парам01)","ЯЗакрываюОкно","И я закрываю окно ""Заголовок окна""","Закрывает окно с нужным заголовком","UI.Окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрываюТекущееОкно()","ЯЗакрываюТекущееОкно","И я закрываю текущее окно","Закрывает активное окно","UI.Окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрываюОкноПредупреждения()","ЯЗакрываюОкноПредупреждения","И я закрываю окно предупреждения","Закрывает окно предупреждения если оно есть","UI.Всплывающие окна");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТекущемОкнеЯНажимаюКнопкуКомандногоИнтерфейса(Парам01)","ВТекущемОкнеЯНажимаюКнопкуКомандногоИнтерфейса","И В текущем окне я нажимаю кнопку командного интерфейса ""КомандаИнтерфейса""","Нажатие кнопки командного интерфейса в текущей форме","UI.Командный интерфейс.Текущее окно");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯДобавляюНовуюСтроку(Парам01)","ВОткрытойФормеВТЧЯДобавляюНовуюСтроку","И В открытой форме в таблице ""Товары"" я добавляю новую строку");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯДобавляюНовуюСтроку(Парам01)","ВТЧЯДобавляюНовуюСтроку","И в таблице ""Товары"" я добавляю новую строку");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯДобавляюНовуюСтроку(Парам01)","ВТаблицеЯДобавляюНовуюСтроку","И в таблице ""Товары"" я добавляю новую строку");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоляСЗаголовком(Парам01)","ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоляСЗаголовком","И В открытой форме я нажимаю на кнопку открытия поля с заголовком ""Заголовок поля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоля(Парам01)","ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоля","И В открытой форме я нажимаю на кнопку открытия поля ""Заголовок поля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюНаКнопкуОткрытияПоля(Парам01)","ЯНажимаюНаКнопкуОткрытияПоля","И я нажимаю на кнопку открытия поля ""Заголовок поля""","Нажимает на кнопку открытия поля ввода.","UI.Формы.Поля.Открыть");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоляСИменем(Парам01)","ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоляСИменем","И В открытой форме я нажимаю на кнопку открытия поля с именем ""ИмяПоля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюНаКнопкуОткрытияПоляСИменем(Парам01)","ЯНажимаюНаКнопкуОткрытияПоляСИменем","И я нажимаю на кнопку открытия поля с именем ""ИмяПоля""","Нажимает на кнопку открытия поля ввода.","UI.Формы.Поля.Открыть");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюНаКнопкуСоздатьПоля(Парам01)","ЯНажимаюНаКнопкуСоздатьПоля","И я нажимаю на кнопку создать поля ""Заголовок поля""","Эмулирует нажатие кнопки ""Создать"" у выпадающего списка.","UI.Формы.Поля.Создать");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюНаКнопкуСоздатьПоляСИменем(Парам01)","ЯНажимаюНаКнопкуСоздатьПоляСИменем","И я нажимаю на кнопку создать поля с именем ""ИмяПоля""","Эмулирует нажатие кнопки ""Создать"" у выпадающего списка.","UI.Формы.Поля.Создать");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеИзВыпадающегоСпискаСЗаголовкомЯВыбираю(Парам01,Парам02)","ВОткрытойФормеИзВыпадающегоСпискаСЗаголовкомЯВыбираю","И В открытой форме из выпадающего списка с заголовком ""Заголовок поля"" я выбираю ""ЗначениеПоля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02)","ВОткрытойФормеИзВыпадающегоСпискаЯВыбираю","И В открытой форме из выпадающего списка ""Заголовок поля"" я выбираю ""ЗначениеПоля""");
	
	//устаревшее. делает ввод по строке
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02)","ИзВыпадающегоСпискаЯВыбираю","И из выпадающего списка ""Заголовок поля"" я выбираю ""ЗначениеПоля""");
	//устаревшее. делает ввод по строке
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ИзВыпадающегоСпискаСИменемЯВыбираю(Парам01,Парам02)","ИзВыпадающегоСпискаСИменемЯВыбираю","И из выпадающего списка с именем ""МойВыпадающийСписок"" я выбираю ""ЗначениеПоля""");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ИзВыпадающегоСпискаЯВыбираюТочноеЗначение(Парам01,Парам02)","ИзВыпадающегоСпискаЯВыбираюТочноеЗначение","И из выпадающего списка ""Заголовок поля"" я выбираю точное значение ""ЗначениеПоля""","Выбор из выпадающего списка. Переданное значение должно в точности совпадать с тем, что видит пользователь при выборе из списка.","UI.Выпадающий список.Точное значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ИзВыпадающегоСпискаСИменемЯВыбираюТочноеЗначение(Парам01,Парам02)","ИзВыпадающегоСпискаСИменемЯВыбираюТочноеЗначение","И из выпадающего списка с именем ""ИмяПоля"" я выбираю точное значение ""ЗначениеПоля""","Выбор из выпадающего списка. Переданное значение должно в точности совпадать с тем, что видит пользователь при выборе из списка.","UI.Выпадающий список.Точное значение");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ИзВыпадающегоСпискаЯВыбираюПоСтроке(Парам01,Парам02)","ИзВыпадающегоСпискаЯВыбираюПоСтроке","И из выпадающего списка ""Заголовок поля"" я выбираю по строке ""ЧастьСтроки""","Выбор из выпадающего списка. Значение будет выбрано через ввод по строке. Допускается вводить строку не целиком.","UI.Выпадающий список.Ввод по строке");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ИзВыпадающегоСпискаСИменемЯВыбираюПоСтроке(Парам01,Парам02)","ИзВыпадающегоСпискаСИменемЯВыбираюПоСтроке","И из выпадающего списка с именем ""ИмяПоля"" я выбираю по строке ""ЧастьСтроки""","Выбор из выпадающего списка. Значение будет выбрано через ввод по строке. Допускается вводить строку не целиком.","UI.Выпадающий список.Ввод по строке");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеИзВыпадающегоСпискаСИменемЯВыбираю(Парам01,Парам02)","ВОткрытойФормеИзВыпадающегоСпискаСИменемЯВыбираю","И В открытой форме из выпадающего списка с именем ""ИмяПоля"" я выбираю ""ЗначениеПоля""");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоляСЗаголовком(Парам01)","ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоляСЗаголовком","И В открытой форме я нажимаю кнопку очистить у поля с заголовком ""Заголовок поля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоля(Парам01)","ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоля","И В открытой форме я нажимаю кнопку очистить у поля ""Заголовок поля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюКнопкуОчиститьУПоля(Парам01)","ЯНажимаюКнопкуОчиститьУПоля","И я нажимаю кнопку очистить у поля ""Заголовок поля""","Очищает поле","UI.Формы.Поля.Очистить поле");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоляСИменем(Парам01)","ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоляСИменем","И В открытой форме я нажимаю кнопку очистить у поля с именем ""ИмяПоля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюКнопкуОчиститьУПоляСИменем(Парам01)","ЯНажимаюКнопкуОчиститьУПоляСИменем","И я нажимаю кнопку очистить у поля с именем ""ИмяПоля""","Очищает поле","UI.Формы.Поля.Очистить поле");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументФормыСИменемСталПустым(Парам01)","ТабличныйДокументФормыСИменемСталПустым","И табличный документ формы с именем ""РеквизитТабличныйДокумент"" стал пустым","Проверяет, что табличный документ пустой","UI.Табличный документ.Проверка на пустоту");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТаблицеСИменемВКолонкеНетЗначения(Парам01,Парам02,Парам03)","ВОткрытойФормеВТаблицеСИменемВКолонкеНетЗначения","И В открытой форме в таблице с именем ""ДеревоТестов"" в колонке ""Имя"" нет значения ""Temp1""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеСИменемВКолонкеНетЗначения(Парам01,Парам02,Парам03)","ВТаблицеСИменемВКолонкеНетЗначения","И в таблице с именем ""ДеревоТестов"" в колонке ""Имя"" нет значения ""Temp1""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТаблицеСИменемВКолонкеЕстьЗначение(Парам01,Парам02,Парам03)","ВОткрытойФормеВТаблицеСИменемВКолонкеЕстьЗначение","И В открытой форме в таблице с именем ""ДеревоТестов"" в колонке ""Имя"" есть значение ""ОткрытиеФормы""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеСИменемВКолонкеЕстьЗначение(Парам01,Парам02,Парам03)","ВТаблицеСИменемВКолонкеЕстьЗначение","И в таблице с именем ""ДеревоТестов"" в колонке ""Имя"" есть значение ""ОткрытиеФормы""");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯАктивизируюПоле(Парам01,Парам02)","ВОткрытойФормеВТЧЯАктивизируюПоле","И В открытой форме в таблице ""ИмяТаблицы"" я активизирую поле ""Заголовок поля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯАктивизируюПоле(Парам01,Парам02)","ВТЧЯАктивизируюПоле","И в таблице ""ИмяТаблицы"" я активизирую поле ""Заголовок поля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯАктивизируюПоле(Парам01,Парам02)","ВТаблицеЯАктивизируюПоле","И в таблице ""ИмяТаблицы"" я активизирую поле ""Заголовок поля""","Активизирует поле таблицы","UI.Таблицы.Поля.Активизировать поле");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯАктивизируюПолеСИменем(Парам01,Парам02)","ВОткрытойФормеВТЧЯАктивизируюПолеСИменем","И В открытой форме в таблице ""ИмяТаблицы"" я активизирую поле с именем ""ИмяПоля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯАктивизируюПолеСИменем(Парам01,Парам02)","ВТЧЯАктивизируюПолеСИменем","И в таблице ""ИмяТаблицы"" я активизирую поле с именем ""ИмяПоля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯАктивизируюПолеСИменем(Парам01,Парам02)","ВТаблицеЯАктивизируюПолеСИменем","И в таблице ""ИмяТаблицы"" я активизирую поле с именем ""ИмяПоля""","Активизирует поле таблицы","UI.Таблицы.Поля.Активизировать поле");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯАктивизируюКолонкуВГруппе(Парам01,Парам02,Парам03)","ВТаблицеЯАктивизируюКолонкуВГруппе","И в таблице ""ИмяТаблицы"" я активизирую колонку ""Заголовок колонки"" в группе ""ИмяГруппыКолонок""","Активизирует поле таблицы в указанной группе колонок.","UI.Таблицы.Поля.Активизировать поле");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯАктивизируюКолонкуСИменемВГруппе(Парам01,Парам02,Парам03)","ВТаблицеЯАктивизируюКолонкуСИменемВГруппе","И в таблице ""ИмяТаблицы"" я активизирую колонку с именем ""ИмяКолонки"" в группе ""ИмяГруппыКолонок""","Активизирует поле таблицы в указанной группе колонок.","UI.Таблицы.Поля.Активизировать поле");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯБудуВыбиратьВнешнийФайл(Парам01)","ЯБудуВыбиратьВнешнийФайл","И я буду выбирать внешний файл ""ИмяФайла""","Устанавливает результат диалога выбора файла. Допустимо указать директиву $КаталогПроекта$, чтобы подставить в часть пути путь к каталогу проекта.","Файлы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОчищаюОкноСообщенийПользователю()","ЯОчищаюОкноСообщенийПользователю","И я очищаю окно сообщений пользователю","Очищает окно сообщений пользователю.","UI.Сообщения пользователю.Очистка окна сообщений");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПерехожуПоНавигационнойСсылке(Парам01)","ЯПерехожуПоНавигационнойСсылке","Когда я перехожу по навигационной ссылке ""НавигационнаяСсылка""");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПерехожуКСледующемуРеквизиту()","ЯПерехожуКСледующемуРеквизиту","И я перехожу к следующему реквизиту","Переходит к следующему реквизиту формы","UI.Формы.Поля.Перейти к следующему реквизиту");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыбираюПунктМеню(ЗначениеМеню)","ЯВыбираюПунктМеню","И я выбираю пункт меню ""ЗначениеМеню""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляЯВыбираюПунктКонтекстногоМеню(Парам01,Парам02)","УПоляЯВыбираюПунктКонтекстногоМеню","И у поля ""Заголовок поля"" я выбираю пункт контекстного меню ""ИмяПунктаМеню""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляСИменемЯВыбираюПунктКонтекстногоМеню(Парам01,Парам02)","УПоляСИменемЯВыбираюПунктКонтекстногоМеню","И у поля с именем ""ИмяПоля"" я выбираю пункт контекстного меню ""ИмяПунктаМеню""");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыбираюПунктКонтекстногоМенюНаЭлементеФормы(Парам01,Парам02)","ЯВыбираюПунктКонтекстногоМенюНаЭлементеФормы","И я выбираю пункт контекстного меню ""ИмяПунктаМеню"" на элементе формы ""Заголовок поля""","Выбирает нужный пункт контекстного меню у элемента формы","UI.Формы.Контекстное меню");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыбираюПунктКонтекстногоМенюНаЭлементеФормыСИменем(Парам01,Парам02)","ЯВыбираюПунктКонтекстногоМенюНаЭлементеФормыСИменем","И я выбираю пункт контекстного меню ""ИмяПунктаМеню"" на элементе формы с именем ""ЭлементФормы""","Выбирает нужный пункт контекстного меню у элемента формы","UI.Формы.Контекстное меню");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыбираюПунктКонтекстногоМенюСИменемНаЭлементеФормы(Парам01,Парам02)","ЯВыбираюПунктКонтекстногоМенюСИменемНаЭлементеФормы","И я выбираю пункт контекстного меню с именем ""ИмяПунктаМеню"" на элементе формы ""Заголовок поля""","Выбирает нужный пункт контекстного меню у элемента формы","UI.Формы.Контекстное меню");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыбираюПунктКонтекстногоМенюСИменемНаЭлементеФормыСИменем(Парам01,Парам02)","ЯВыбираюПунктКонтекстногоМенюСИменемНаЭлементеФормыСИменем","И я выбираю пункт контекстного меню с именем ""ИмяПунктаМеню"" на элементе формы с именем ""ЭлементФормы""","Выбирает нужный пункт контекстного меню у элемента формы","UI.Формы.Контекстное меню");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыбираюИзСписка(Значение)","ЯВыбираюИзСписка","И я выбираю из списка ""Значение""","Выбирает значение из списка, который привязан к форме. Такой список может появиться, если происходит перехват стандартных событий формы, и пользователю показывается другой список для выбора значения.","UI.Выпадающий список.Точное значение");
	
	// В таблице я Устанавливаю Флаг
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯУстанавливаюФлагСЗаголовком(Парам01,Парам02)","ВОткрытойФормеВТЧЯУстанавливаюФлагСЗаголовком","И В открытой форме в таблице ""ИмяТаблицы"" я устанавливаю флаг с заголовком ""ИмяФлага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯУстанавливаюФлаг(Парам01,Парам02)","ВОткрытойФормеВТЧЯУстанавливаюФлаг","И В открытой форме в таблице ""ИмяТаблицы"" я устанавливаю флаг ""Заголовок флага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯУстанавливаюФлаг(Парам01,Парам02)","ВТЧЯУстанавливаюФлаг","И в таблице ""ИмяТаблицы"" я устанавливаю флаг ""Заголовок флага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯУстанавливаюФлаг(Парам01,Парам02)","ВТаблицеЯУстанавливаюФлаг","И в таблице ""ИмяТаблицы"" я устанавливаю флаг ""Заголовок флага""", "Устанавливает флаг в Истина", "UI.Таблицы.Флаги");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯУстанавливаюФлагСИменем(Парам01,Парам02)","ВТаблицеЯУстанавливаюФлагСИменем","И в таблице ""ИмяТаблицы"" я устанавливаю флаг с именем ""ИмяФлага""", "Устанавливает флаг в Истина", "UI.Таблицы.Флаги");

	// В таблице я Снимаю Флаг
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯСнимаюФлагСЗаголовком(Парам01,Парам02)","ВОткрытойФормеВТЧЯСнимаюФлагСЗаголовком","И В открытой форме в таблице ""ИмяТаблицы"" я снимаю флаг с заголовком ""ИмяФлага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯСнимаюФлаг(Парам01,Парам02)","ВОткрытойФормеВТЧЯСнимаюФлаг","И В открытой форме в таблице ""ИмяТаблицы"" я снимаю флаг ""Заголовок флага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯСнимаюФлаг(Парам01,Парам02)","ВТЧЯСнимаюФлаг","И в таблице ""ИмяТаблицы"" я снимаю флаг ""Заголовок флага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯСнимаюФлаг(Парам01,Парам02)","ВТаблицеЯСнимаюФлаг","И в таблице ""ИмяТаблицы"" я снимаю флаг ""Заголовок флага""", "Устанавливает флаг в Ложь", "UI.Таблицы.Флаги");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯСнимаюФлагСИменем(Парам01,Парам02)","ВТаблицеЯСнимаюФлагСИменем","И в таблице ""ИмяТаблицы"" я снимаю флаг с именем ""ИмяФлага""", "Устанавливает флаг в Ложь", "UI.Таблицы.Флаги");
	
	// я Снимаю Флаг
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯСнимаюФлагСЗаголовком(Парам01)","ВОткрытойФормеЯСнимаюФлагСЗаголовком","И В открытой форме я снимаю флаг с заголовком ""ИмяФлага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯСнимаюФлаг(Парам01)","ВОткрытойФормеЯСнимаюФлаг","И В открытой форме я снимаю флаг ""Заголовок флага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯСнимаюФлаг(Парам01)","ЯСнимаюФлаг","И я снимаю флаг ""Заголовок флага""","Устанавливает флаг в Ложь", "UI.Формы.Поля.Флаги");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯСнимаюФлагСИменем(Парам01)","ВОткрытойФормеЯСнимаюФлагСИменем","И В открытой форме я снимаю флаг с именем ""ИмяФлага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯСнимаюФлагСИменем(Парам01)","ЯСнимаюФлагСИменем","И я снимаю флаг с именем ""ИмяФлага""", "Устанавливает флаг в Ложь", "UI.Формы.Поля.Флаги");
	
	// я Устанавливаю Флаг
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯУстанавливаюФлагСЗаголовком(Парам01)","ВОткрытойФормеЯУстанавливаюФлагСЗаголовком","И В открытой форме я устанавливаю флаг с заголовком ""ИмяФлага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯУстанавливаюФлаг(Парам01)","ВОткрытойФормеЯУстанавливаюФлаг","И В открытой форме я устанавливаю флаг ""Заголовок флага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУстанавливаюФлаг(Парам01)","ЯУстанавливаюФлаг","И я устанавливаю флаг ""Заголовок флага""","Устанавливает флаг в Истина","UI.Формы.Поля.Флаги");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯУстанавливаюФлагСИменем(Парам01)","ВОткрытойФормеЯУстанавливаюФлагСИменем","И В открытой форме я устанавливаю флаг с именем ""ИмяФлага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУстанавливаюФлагСИменем(Парам01)","ЯУстанавливаюФлагСИменем","И я устанавливаю флаг с именем ""ИмяФлага""", "Устанавливает флаг в Истина", "UI.Формы.Поля.Флаги");
	
	//чтобы запомнить в переменной Контекст значение элемента формы
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеПоляКак(Парам01,Парам02)","ЯЗапоминаюЗначениеПоляКак","И я запоминаю значение поля ""Заголовок поля"" как ""ИмяПеременной""","Сохранение значения поля в переменную Контекст","Контекст.Контекст.Сохранить значение.Поле формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеПоляСИменемКак(Парам01,Парам02)","ЯЗапоминаюЗначениеПоляСИменемКак","И я запоминаю значение поля с именем ""ИмяПоля"" как ""ИмяПеременной""","Сохранение значения поля в переменную Контекст","Контекст.Контекст.Сохранить значение.Поле формы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеТаблицыПоляКак(Парам01,Парам02,Парам03)","ЯЗапоминаюЗначениеТаблицыПоляКак","И я запоминаю значение таблицы ""ИмяТаблицы"" поля ""Заголовок поля"" как ""ИмяПеременной""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеТаблицыПоляСИменемКак(Парам01,Парам02,Парам03)","ЯЗапоминаюЗначениеТаблицыПоляСИменемКак","И я запоминаю значение таблицы ""ИмяТаблицы"" поля с именем ""ИмяПоля"" как ""ИмяПеременной""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеПоляТаблицыКак(Парам01,Парам02,Парам03)","ЯЗапоминаюЗначениеПоляТаблицыКак","И я запоминаю значение поля ""Заголовок поля"" таблицы ""ИмяТаблицы"" как ""ИмяПеременной""","Сохранение значения поля таблицы в переменную Контекст","Контекст.Контекст.Сохранить значение.Таблица.Поле таблицы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеПоляСИменемТаблицыКак(Парам01,Парам02,Парам03)","ЯЗапоминаюЗначениеПоляСИменемТаблицыКак","И я запоминаю значение поля с именем ""ИмяПоля"" таблицы ""ИмяТаблицы"" как ""ИмяПеременной""","Сохранение значения поля таблицы в переменную Контекст","Контекст.Контекст.Сохранить значение.Таблица.Поле таблицы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеПоляСКлючом(Парам01,Парам02)","ЯЗапоминаюЗначениеПоляСКлючом","И я запоминаю значение поля ""Заголовок поля"" с ключом ""Номер документа""","Сохранение значения поля в переменную Контекст с произвольным ключом","Контекст.Контекст.Сохранить значение.Поле формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеПоляКакГлобально(Парам01,Парам02)","ЯЗапоминаюЗначениеПоляКакГлобально","И я запоминаю значение поля ""Заголовок поля"" как ""ИмяПеременной"" глобально","Сохранение значения поля в переменную КонтекстСохраняемый","Контекст.Контекст сохраняемый.Сохранить значение.Поле формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеПоляСИменемКакГлобально(Парам01,Парам02)","ЯЗапоминаюЗначениеПоляСИменемКакГлобально","И я запоминаю значение поля с именем ""ИмяПоля"" как ""ИмяПеременной"" глобально","Сохранение значения поля в переменную КонтекстСохраняемый","Контекст.Контекст сохраняемый.Сохранить значение.Поле формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеПоляСКлючомГлобально(Парам01,Парам02)","ЯЗапоминаюЗначениеПоляСКлючомГлобально","И я запоминаю значение поля ""Заголовок поля"" с ключом ""Номер документа"" глобально","Сохранение значения поля в переменную КонтекстСохраняемый с произвольным ключом","Контекст.Контекст сохраняемый.Сохранить значение.Поле формы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюТекущееОкноКак(Парам01)","ЯЗапоминаюТекущееОкноКак","И я запоминаю текущее окно как ""НужныйМнеЗаголовокОкна""","Сохранение значения заголовка текущего окна в переменную Контекст","Контекст.Контекст.Сохранить значение.Окно");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюКоличествоСтрокТаблицыКак(Парам01,Парам02)","ЯЗапоминаюКоличествоСтрокТаблицыКак","И я запоминаю количество строк таблицы ""ИмяТаблицы"" как ""ИмяПеременной""","Сохранение количества строк таблицы в переменную Контекст","Контекст.Контекст.Сохранить значение.Таблица.Количество строк");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"КоличествоСтрокТаблицыРавноПеременной(Парам01,Парам02)","КоличествоСтрокТаблицыРавноПеременной","И количество строк таблицы ""ИмяТаблицы"" равно переменной ""ИмяПеременной""","Сравнение количество строк таблицы с переменной Контекста","Контекст.Контекст.Прочитать значение.Таблица.Количество строк");
	
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеВвожуЗначениеПеременной(Парам01,Парам02)","ВПолеВвожуЗначениеПеременной","И в поле ""Заголовок поля"" ввожу значение переменной ""ИмяПеременной""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицуВПолеВвожуЗначениеПеременной(Парам01,Парам02,Парам03)","ВТаблицуВПолеВвожуЗначениеПеременной","И в Таблицу ""ИмяТаблицы"" в поле ""Заголовок поля"" ввожу значение переменной ""ИмяПеременной""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеВвожуЗначениеКлюча(Парам01,Парам02)","ВПолеВвожуЗначениеКлюча","И в поле ""Заголовок поля"" ввожу значение ключа ""Номер документа""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеВвожуЗначениеГлобальнойПеременной(Парам01,Парам02)","ВПолеВвожуЗначениеГлобальнойПеременной","И в поле ""Заголовок поля"" ввожу значение глобальной переменной ""ИмяПеременной""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеВвожуЗначениеГлобальногоКлюча(Парам01,Парам02)","ВПолеВвожуЗначениеГлобальногоКлюча","И в поле ""Заголовок поля"" ввожу значение глобального ключа ""Ключ""");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуЗначениеПеременной(Парам01,Парам02)","ВПолеЯВвожуЗначениеПеременной","И в поле ""Заголовок поля"" я ввожу значение переменной ""ИмяПеременной""", "Вставка значения ранее сохраненной переменной в реквизит", "Контекст.Контекст.Прочитать значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицуВПолеЯВвожуЗначениеПеременной(Парам01,Парам02,Парам03)","ВТаблицуВПолеЯВвожуЗначениеПеременной","И в Таблицу ""ИмяТаблицы"" в поле ""Заголовок поля"" я ввожу значение переменной ""ИмяПеременной""", "Вставка значения ранее сохраненной переменной в реквизит", "Контекст.Контекст.Прочитать значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуЗначениеКлюча(Парам01,Парам02)","ВПолеЯВвожуЗначениеКлюча","И в поле ""Заголовок поля"" я ввожу значение ключа ""Номер документа""", "Вставка значения ранее сохраненного произвольного ключа в реквизит", "Контекст.Контекст.Прочитать значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуЗначениеГлобальнойПеременной(Парам01,Парам02)","ВПолеЯВвожуЗначениеГлобальнойПеременной","И в поле ""Заголовок поля"" я ввожу значение глобальной переменной ""ИмяПеременной""", "Вставка значения ранее сохраненной переменной в реквизит", "Контекст.Контекст сохраняемый.Прочитать значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуЗначениеГлобальногоКлюча(Парам01,Парам02)","ВПолеЯВвожуЗначениеГлобальногоКлюча","И в поле ""Заголовок поля"" я ввожу значение глобального ключа ""Ключ""", "Вставка значения ранее сохраненного ключа в реквизит", "Контекст.Контекст сохраняемый.Прочитать значение");
	
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВывожуЗначениеПеременной(Парам01)","ЯВывожуЗначениеПеременной","И я вывожу значение переменной ""ИмяПеременной""","Выводит значение переменной контекста в окно сообщений","Контекст.Контекст.Прочитать значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТеченииСекунд(Парам01,Парам02,Парам03,Парам04,Парам05)","ЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТеченииСекунд","И я жду, что в окне ""ЗаголовокОкна"" в таблице ""ИмяТаблицы"" количество строк будет ""больше"" 0 в течении 20 секунд");
	
	//Устарело. Шаг использовался для обхода ошибки платформы поиска активного окна.
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТечениеСекунд(Парам01,Парам02,Парам03,Парам04,Парам05)","ЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТечениеСекунд","И я жду, что в окне ""ЗаголовокОкна"" в таблице ""ИмяТаблицы"" количество строк будет ""больше"" 0 в течение 20 секунд","В течение нужного числа секунд проверяется количество строк в таблице в нужном окне","");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеРавноПеременной(Парам01,Парам02)","ПолеРавноПеременной","И поле ""Заголовок поля"" равно переменной ""ИмяПеременной""","Сравнение значения поля с переменной Контекста","Контекст.Контекст.Прочитать значение.Поле формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСИменемРавноПеременной(Парам01,Парам02)","ПолеСИменемРавноПеременной","И поле с именем ""ИмяПоля"" равно переменной ""ИмяПеременной""","Сравнение значения поля с переменной Контекста","Контекст.Контекст.Прочитать значение.Поле формы");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеТаблицыРавноПеременной(Парам01,Парам02,Парам03)","ПолеТаблицыРавноПеременной","И поле таблицы ""ИмяТаблицы"" ""ИмяПоля"" равно переменной ""ИмяПеременной""","Сравнение значения поля с переменной Контекста. Имя поля задаётся как оно задано в конфигураторе.","Контекст.Контекст.Прочитать значение.Таблица.Поле таблицы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПеременнаяИмеетЗначение(Парам01,Парам02)","ПеременнаяИмеетЗначение","Тогда переменная ""ИмяПеременной"" имеет значение ""ЗначениеПеременной""","Проверяет значение переменной контекста","Контекст.Контекст.Прочитать значение","Условие");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТеченииСекунд(Парам01,Парам02,Парам03,Парам04)","ЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТеченииСекунд","И я жду, что в таблице ""ИмяТаблицы"" количество строк будет ""больше"" 0 в течении 20 секунд");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)","ЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТечениеСекунд","И я жду, что в таблице ""ИмяТаблицы"" количество строк будет ""больше"" 0 в течение 20 секунд","В течение нужного числа секунд проверяется количество строк в таблице в текущем окне","UI.Таблицы.Ожидание значения таблицы");
	
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯМеняюЗначениеПереключателяНаЗначениеПеременной(Парам01,Парам02)","ЯМеняюЗначениеПереключателяНаЗначениеПеременной","И я меняю значение переключателя ""Заголовок элемента"" на значение переменной ""ИмяПеременной""", "Изменение значение переключателя на значение ранее сохраненной переменной", "Контекст.Контекст.Прочитать значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯМеняюЗначениеПереключателяСИменемНаЗначениеПеременной(Парам01,Парам02)","ЯМеняюЗначениеПереключателяСИменемНаЗначениеПеременной","И я меняю значение переключателя с именем ""РеквизитПереключатель"" на значение переменной ""ИмяПеременной""", "Изменение значение переключателя на значение ранее сохраненной переменной", "Контекст.Контекст.Прочитать значение");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеСИменемВвожуЗначениеПеременной(Парам01,Парам02)","ВПолеСИменемВвожуЗначениеПеременной","И в поле с именем ""ИмяПоля"" ввожу значение переменной ""ИмяПеременной""", "Вставка значения ранее сохраненной переменной в реквизит", "Контекст.Контекст.Прочитать значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеСИменемВвожуЗначениеКлюча(Парам01,Парам02)","ВПолеСИменемВвожуЗначениеКлюча","И в поле с именем ""ИмяПоля"" ввожу значение ключа ""Номер документа""", "Вставка значения ранее сохраненного произвольного ключа в реквизит", "Контекст.Контекст.Прочитать значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеСИменемВвожуЗначениеГлобальнойПеременной(Парам01,Парам02)","ВПолеСИменемВвожуЗначениеГлобальнойПеременной","И в поле с именем ""ИмяПоля"" ввожу значение глобальной переменной ""ИмяПеременной""", "Вставка значения ранее сохраненной переменной в реквизит", "Контекст.Контекст сохраняемый.Прочитать значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеСИменемВвожуЗначениеГлобальногоКлюча(Парам01,Парам02)","ВПолеСИменемВвожуЗначениеГлобальногоКлюча","И в поле с именем ""ИмяПоля"" ввожу значение глобального ключа ""Ключ""", "Вставка значения ранее сохраненного произвольного ключа в реквизит", "Контекст.Контекст сохраняемый.Прочитать значение");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ФлагРавен(Парам01,Парам02)","ФлагРавен","И     флаг ""Заголовок флага"" равен ""Истина""","Проверяет значение флага","UI.Формы.Поля.Флаги");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ФлагСИменемРавен(Парам01,Парам02)","ФлагСИменемРавен","И     флаг с именем ""ИмяФлага"" равен ""Истина""","Проверяет значение флага","UI.Формы.Поля.Флаги");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПоявилосьПредупреждениеСодержащееТекст(Парам01)","ПоявилосьПредупреждениеСодержащееТекст","Тогда появилось предупреждение, содержащее текст ""Текст""","Проверяет, что появилось окно предупреждения, содержащее нужный текст.","UI.Всплывающие окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"НеПоявилосьОкноПредупрежденияСистемы()","НеПоявилосьОкноПредупрежденияСистемы","Тогда не появилось окно предупреждения системы","Проверяет, что на экране нет предупреждения системы.","UI.Всплывающие окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЕслиПоявилосьОкноДиалогаЯНажимаюНаКнопку(Парам01)","ЕслиПоявилосьОкноДиалогаЯНажимаюНаКнопку","Затем Если появилось окно диалога я нажимаю на кнопку ""Заголовок кнопки""","Если на экране появилось диалоговое окно - нажимает на нужную кнопку.","UI.Всплывающие окна");
	
	//убрал шаг, т.к. есть аналогичный
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуПоявленияЭлемента(Парам01)", 								"ЯЖдуПоявленияЭлемента", 						"И я жду появления элемента ""Заголовок элемента""","Ожидание появления элемента формы с нужным заголовком","");
	//убрал шаг, т.к. есть аналогичный
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуПоявленияЭлементаСИменем(Парам01)", 							"ЯЖдуПоявленияЭлементаСИменем", 				"И я жду появления элемента с именем ""ИмяЭлемента""","Ожидание появления элемента формы с нужным именем","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуПоявленияЭлементаВТеченииСекунд(Парам01, Парам02)", 			"ЯЖдуПоявленияЭлементаВТеченииСекунд", 			"И я жду появления элемента ""Заголовок элемента"" в течении 20 секунд");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуПоявленияЭлементаВТечениеСекунд(Парам01, Парам02)", 			"ЯЖдуПоявленияЭлементаВТечениеСекунд", 			"И я жду появления элемента ""Заголовок элемента"" в течение 20 секунд","Ожидание появления (видимости) элемента формы с нужным заголовком в течение указанного числа секунд","UI.Формы.Ожидание появления элемента");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуПоявленияЭлементаСИменемВТеченииСекунд(Парам01, Парам02)", 	"ЯЖдуПоявленияЭлементаСИменемВТеченииСекунд", 	"И я жду появления элемента с именем ""ИмяЭлемента"" в течении 20 секунд");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуПоявленияЭлементаСИменемВТечениеСекунд(Парам01, Парам02)", 	"ЯЖдуПоявленияЭлементаСИменемВТечениеСекунд", 	"И я жду появления элемента с именем ""ИмяЭлемента"" в течение 20 секунд","Ожидание появления (видимости) элемента формы с нужным именем в течение указанного числа секунд","UI.Формы.Ожидание появления элемента");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуДоступностиЭлементаВТечениеСекунд(Парам01, Парам02)", 			"ЯЖдуДоступностиЭлементаВТечениеСекунд", 			"И я жду доступности элемента ""Заголовок элемента"" в течение 20 секунд","Ожидание доступности элемента формы с нужным заголовком в течение указанного числа секунд","UI.Формы.Ожидание доступности элемента");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуДоступностиЭлементаСИменемВТечениеСекунд(Парам01, Парам02)", 	"ЯЖдуДоступностиЭлементаСИменемВТечениеСекунд", 	"И я жду доступности элемента с именем ""ИмяЭлемента"" в течение 20 секунд","Ожидание доступности элемента формы с нужным именем в течение указанного числа секунд","UI.Формы.Ожидание доступности элемента");
	
	
	//убрал шаг, т.к. есть аналогичный
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УЭлементаЯЖдуЗначения(Парам01,Парам02)", 							"УЭлементаЯЖдуЗначения", 						"И у элемента ""Заголовок элемента"" я жду значения ""Значение""","Ожидание что элемент формы примет нужное значение (таймаут 10)","");
	//убрал шаг, т.к. есть аналогичный
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УЭлементаСИменемЯЖдуЗначения(Парам01,Парам02)", 						"УЭлементаСИменемЯЖдуЗначения", 				"И у элемента с именем ""ИмяЭлемента"" я жду значения ""Значение""","Ожидание что элемент формы примет нужное значение (таймаут 10)","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УЭлементаЯЖдуЗначенияВТеченииСекунд(Парам01,Парам02,Парам03)",		"УЭлементаЯЖдуЗначенияВТеченииСекунд", 			"И у элемента ""Заголовок элемента"" я жду значения ""Значение"" в течении 20 секунд");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УЭлементаЯЖдуЗначенияВТечениеСекунд(Парам01,Парам02,Парам03)",		"УЭлементаЯЖдуЗначенияВТечениеСекунд", 			"И у элемента ""Заголовок элемента"" я жду значения ""Значение"" в течение 20 секунд","Ожидание что элемент формы примет нужное значение в течение нужного времени. Иначе будет вызвано исключение.","UI.Формы.Ожидание значения элемента");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УЭлементаСИменемЯЖдуЗначенияВТеченииСекунд(Парам01,Парам02,Парам03)",		"УЭлементаСИменемЯЖдуЗначенияВТеченииСекунд", 			"И у элемента с именем ""ИмяЭлемента"" я жду значения ""Значение"" в течении 20 секунд");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УЭлементаСИменемЯЖдуЗначенияВТечениеСекунд(Парам01,Парам02,Парам03)",		"УЭлементаСИменемЯЖдуЗначенияВТечениеСекунд", 			"И у элемента с именем ""ИмяЭлемента"" я жду значения ""Значение"" в течение 20 секунд","Ожидание что элемент формы примет нужное значение в течение нужного времени. Иначе будет вызвано исключение.","UI.Формы.Ожидание значения элемента");
	
	
	// проверка видимости элемента
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВижуЭлемент(ИмяЭлемента)",               "ЯВижуЭлемент",               "И я вижу элемент ""Заголовок элемента""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВижуЭлементНаФорме(ИмяЭлемента)",        "ЯВижуЭлементНаФорме",        "И я вижу элемент ""Заголовок элемента"" на форме");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВижуЭлементСИменем(ИмяЭлемента)",        "ЯВижуЭлементСИменем",        "И я вижу элемент с именем ""ИмяЭлемента""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВижуЭлементСИменемНаФорме(ИмяЭлемента)", "ЯВижуЭлементСИменемНаФорме", "И я вижу элемент с именем ""ИмяЭлемента"" на форме");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНеВижуЭлемент(ИмяЭлемента)",              "ЯНеВижуЭлемент",              "И я не вижу элемент ""Заголовок элемента""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНеВижуЭлементНаФорме(ИмяЭлемента)",       "ЯНеВижуЭлементНаФорме",       "И я не вижу элемент ""Заголовок элемента"" на форме");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНеВижуЭлементСИменем(ИмяЭлемента)",       "ЯНеВижуЭлементСИменем",       "И я не вижу элемент с именем ""ИмяЭлемента""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНеВижуЭлементСИменемНаФорме(ИмяЭлемента)","ЯНеВижуЭлементСИменемНаФорме","И я не вижу элемент с именем ""ИмяЭлемента"" на форме");	
	
	// стоит флаг "только просмотр"
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементДоступенТолькоДляПросмотра(ИмяЭлемента)",               "ЭлементДоступенТолькоДляПросмотра",                     "И элемент ""Заголовок элемента"" доступен только для просмотра","Проверка флага ""Только просмотр""","UI.Формы.Поля.Просмотр");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементСИменемДоступенТолькоДляПросмотра(ИмяЭлемента)",        "ЭлементСИменемДоступенТолькоДляПросмотра",              "И элемент с именем ""ИмяЭлемента"" доступен только для просмотра","Проверка флага ""Только просмотр""","UI.Формы.Поля.Просмотр");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЭлементДоступенДляПросмотра(ИмяЭлемента)",       "ВОткрытойФормеЭлементДоступенДляПросмотра",       "И в открытой форме элемент ""Заголовок элемента"" доступен для просмотра");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЭлементСИменемДоступенДляПросмотра(ИмяЭлемента)","ВОткрытойФормеЭлементСИменемДоступенДляПросмотра","И в открытой форме элемент с именем ""ИмяЭлемента"" доступен для просмотра");	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементДоступенНеТолькоДляПросмотра(ИмяЭлемента)",       "ЭлементДоступенНеТолькоДляПросмотра",       "И элемент ""Заголовок поля"" доступен не только для просмотра","Проверка флага ""Только просмотр""",         "UI.Формы.Поля.Просмотр");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементСИменемДоступенНеТолькоДляПросмотра(ИмяЭлемента)","ЭлементСИменемДоступенНеТолькоДляПросмотра","И элемент с именем ""ИмяПоля"" доступен не только для просмотра","Проверка флага ""Только просмотр""","UI.Формы.Поля.Просмотр");	
	
	// проверка доступность элемента
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыДоступен(ИмяЭлемента)",         "ЭлементФормыДоступен",         "И элемент формы ""Заголовок элемента"" доступен",            "Проверка доступности элемента формы","UI.Формы.Поля.Доступность");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыНеДоступен(ИмяЭлемента)",       "ЭлементФормыНеДоступен",       "И элемент формы ""Заголовок элемента"" не доступен",         "Проверка доступности элемента формы","UI.Формы.Поля.Доступность");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыСИменемДоступен(ИмяЭлемента)",  "ЭлементФормыСИменемДоступен",  "И элемент формы с именем ""ИмяЭлемента"" доступен",   "Проверка доступности элемента формы","UI.Формы.Поля.Доступность");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыСИменемНеДоступен(ИмяЭлемента)","ЭлементФормыСИменемНеДоступен","И элемент формы с именем ""ИмяЭлемента"" не доступен","Проверка доступности элемента формы","UI.Формы.Поля.Доступность");
	
	// проверка доступность элемента таблицы
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧПолеДоступно(ИмяТЧ, ИмяРеквизита)", "ВТЧПолеДоступно","И В таблице ""ИмяТаблицы"" поле ""Заголовок реквизита"" доступно");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеДоступно(ИмяТЧ, ИмяРеквизита)", "ВТаблицеПолеДоступно","И В таблице ""ИмяТаблицы"" поле ""Заголовок реквизита"" доступно", "Проверка доступности элемента таблицы","UI.Таблицы.Доступность");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧПолеСИменемДоступно(ИмяТЧ, ИмяРеквизита)", "ВТЧПолеСИменемДоступно","И В таблице ""ИмяТаблицы"" поле с именем ""ИмяРеквизита"" доступно");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеСИменемДоступно(ИмяТЧ, ИмяРеквизита)", "ВТаблицеПолеСИменемДоступно","И В таблице ""ИмяТаблицы"" поле с именем ""ИмяРеквизита"" доступно", "Проверка доступности элемента таблицы","UI.Таблицы.Доступность");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧПолеНеДоступно(ИмяТЧ, ИмяРеквизита)", "ВТЧПолеНеДоступно","И В таблице ""ИмяТаблицы"" поле ""Заголовок реквизита"" не доступно");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеНеДоступно(ИмяТЧ, ИмяРеквизита)", "ВТаблицеПолеНеДоступно","И В таблице ""ИмяТаблицы"" поле ""Заголовок реквизита"" не доступно", "Проверка не доступности элемента таблицы","UI.Таблицы.Доступность");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧПолеСИменемНеДоступно(ИмяТЧ, ИмяРеквизита)", "ВТЧПолеСИменемНеДоступно","И В таблице ""ИмяТаблицы"" поле с именем ""ИмяРеквизита"" не доступно");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеСИменемНеДоступно(ИмяТЧ, ИмяРеквизита)", "ВТаблицеПолеСИменемНеДоступно","И В таблице ""ИмяТаблицы"" поле с именем ""ИмяРеквизита"" не доступно", "Проверка не доступности элемента таблицы","UI.Таблицы.Доступность");
	
	// стоит флаг "только просмотр" для реквизита таблицы
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧПолеДоступноТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)", "ВТЧПолеДоступноТолькоДляПросмотра","И В таблице ""ИмяТаблицы"" поле ""Заголовок реквизита"" доступно только для просмотра");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеДоступноТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)", "ВТаблицеПолеДоступноТолькоДляПросмотра","И В таблице ""ИмяТаблицы"" поле ""Заголовок реквизита"" доступно только для просмотра", "Проверка установленного флага ""Только просмотр"" для реквизита в таблице","UI.Таблицы.Просмотр");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧПолеСИменемДоступноТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)", "ВТЧПолеСИменемДоступноТолькоДляПросмотра","И В таблице ""ИмяТаблицы"" поле с именем ""ИмяПоля"" доступно только для просмотра");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеСИменемДоступноТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)", "ВТаблицеПолеСИменемДоступноТолькоДляПросмотра","И В таблице ""ИмяТаблицы"" поле с именем ""ИмяПоля"" доступно только для просмотра", "Проверка установленного флага ""Только просмотр"" для реквизита в таблице","UI.Таблицы.Просмотр");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧПолеДоступноНеТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)", "ВТЧПолеДоступноНеТолькоДляПросмотра","И В таблице ""ИмяТаблицы"" поле с именем ""ИмяРеквизита"" доступно не только для просмотра");	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеДоступноНеТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)", "ВТаблицеПолеДоступноНеТолькоДляПросмотра","И В таблице ""ИмяТаблицы"" поле ""Заголовок реквизита"" доступно не только для просмотра", "Проверка установленного флага ""Только просмотр"" для реквизита в таблице","UI.Таблицы.Просмотр");	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧПолеСИменемДоступноНеТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)", "ВТЧПолеСИменемДоступноНеТолькоДляПросмотра","И В таблице ""ИмяТаблицы"" поле с именем ""ИмяРеквизита"" доступно не только для просмотра");	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеСИменемДоступноНеТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)", "ВТаблицеПолеСИменемДоступноНеТолькоДляПросмотра","И В таблице ""ИмяТаблицы"" поле с именем ""ИмяРеквизита"" доступно не только для просмотра", "Проверка установленного флага ""Только просмотр"" для реквизита в таблице","UI.Таблицы.Просмотр");	

	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуТекстИзМакета(Парам01,Парам02)","ВПолеЯВвожуТекстИзМакета","И в поле ""Заголовок поля"" я ввожу текст из макета ""ИмяМакета""","Вводит текст в поле. Текст будет взят из макета. Также вводит текст в форматированный документ и поле HTML документа.","UI.Формы.Поля.Ввод текста");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоПолеПерестанетБытьПустымВТеченииСекунд(Парам01,Парам02)","ЯЖдуЧтоПолеПерестанетБытьПустымВТеченииСекунд","И я жду, что поле ""Заголовок поля"" перестанет быть пустым в течении 30 секунд");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоПолеПерестанетБытьПустымВТечениеСекунд(Парам01,Парам02)","ЯЖдуЧтоПолеПерестанетБытьПустымВТечениеСекунд","И я жду, что поле ""Заголовок поля"" перестанет быть пустым в течение 30 секунд","Проверяет, что в течение нужного числа секунд текстовое поле станет заполненным.","UI.Формы.Поля.Заполненность");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоПолеСИменемПерестанетБытьПустымВТечениеСекунд(Парам01,Парам02)","ЯЖдуЧтоПолеСИменемПерестанетБытьПустымВТечениеСекунд","И я жду, что поле с именем ""ИмяПоля"" перестанет быть пустым в течение 30 секунд","Проверяет, что в течение нужного числа секунд текстовое поле станет заполненным.","UI.Формы.Поля.Заполненность");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЗначениеПоляРавноЗначениюИзМакета(Парам01,Парам02)","ЗначениеПоляРавноЗначениюИзМакета","И значение поля ""Заголовок поля"" равно значению из макета ""Xml_1En""","","");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯБудуРаботатьСТаблицей(Парам01)","ЯБудуРаботатьСТаблицей","Затем я буду работать с таблицей ""ИмяТаблицы""","","");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯУвеличиваюЗначение(Парам01)","ВПолеЯУвеличиваюЗначение","И в поле ""Заголовок поля"" я увеличиваю значение","Увеличивает значение поля в помощью специальной кнопки","UI.Формы.Поля.Увеличить значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеСИменемЯУвеличиваюЗначение(Парам01)","ВПолеСИменемЯУвеличиваюЗначение","И в поле с именем ""ИмяПоля"" я увеличиваю значение","Увеличивает значение поля в помощью специальной кнопки","UI.Формы.Поля.Увеличить значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯУменьшаюЗначение(Парам01)","ВПолеЯУменьшаюЗначение","И в поле ""Заголовок поля"" я уменьшаю значение","Уменьшает значение поля в помощью специальной кнопки","UI.Формы.Поля.Уменьшить значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеСИменемЯУменьшаюЗначение(Парам01)","ВПолеСИменемЯУменьшаюЗначение","И в поле с именем ""ИмяПоля"" я уменьшаю значение","Уменьшает значение поля в помощью специальной кнопки","UI.Формы.Поля.Уменьшить значение");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеЯУвеличиваюЗначение(Парам01,Парам02)","ВТаблицеВПолеЯУвеличиваюЗначение","И в таблице ""ИмяТаблицы"" в поле ""Заголовок поля"" я увеличиваю значение","Увеличивает значение поля в помощью специальной кнопки","UI.Таблицы.Поля.Увеличить значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеСИменемЯУвеличиваюЗначение(Парам01,Парам02)","ВТаблицеВПолеСИменемЯУвеличиваюЗначение","И в таблице ""ИмяТаблицы"" в поле с именем ""ИмяПоля"" я увеличиваю значение","Увеличивает значение поля в помощью специальной кнопки","UI.Таблицы.Поля.Увеличить значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеЯУменьшаюЗначение(Парам01,Парам02)","ВТаблицеВПолеЯУменьшаюЗначение","И в таблице ""ИмяТаблицы"" в поле ""Заголовок поля"" я уменьшаю значение","Уменьшает значение поля в помощью специальной кнопки","UI.Таблицы.Поля.Уменьшить значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеСИменемЯУменьшаюЗначение(Парам01,Парам02)","ВТаблицеВПолеСИменемЯУменьшаюЗначение","И в таблице ""ИмяТаблицы"" в поле с именем ""ИмяПоля"" я уменьшаю значение","Уменьшает значение поля в помощью специальной кнопки","UI.Таблицы.Поля.Уменьшить значение");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуКСледующейЯчейке(Парам01)","ВТаблицеЯПерехожуКСледующейЯчейке","И в таблице ""ИмяТаблицы"" я перехожу к следующей ячейке","Переходит к следующей ячейки таблицы","UI.Таблицы.Переход к ячейке");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуКПредыдущейЯчейке(Парам01)","ВТаблицеЯПерехожуКПредыдущейЯчейке","И в таблице ""ИмяТаблицы"" я перехожу к предыдущей ячейке","Переходит к предыдущей ячейки таблицы","UI.Таблицы.Переход к ячейке");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВМенюФормыЯВыбираю(Парам01)","ВМенюФормыЯВыбираю","И в меню формы я выбираю ""ИмяПунктаМеню""","Выбирает значение из пункта меню. Например, когда происходит расшифровка отчета.","UI.Формы.Контекстное меню");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПредставлениеЭлементаСталоРавно(Парам01,Парам02)","ПредставлениеЭлементаСталоРавно","И представление элемента ""Заголовок элемента"" стало равно ""ПредставлениеЭлемента""","Проверяет представление элемента формы. Работает, начиная с 8.3.12.","UI.Формы.Поля.Представление элемента");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПредставлениеЭлементаСИменемСталоРавно(Парам01,Парам02)","ПредставлениеЭлементаСИменемСталоРавно","И представление элемента с именем ""ИмяЭлемента"" стало равно ""ПредставлениеЭлемента""","Проверяет представление элемента формы. Работает, начиная с 8.3.12.","UI.Формы.Поля.Представление элемента");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯФиксируюФорму(Парам01)","ЯФиксируюФорму","И я фиксирую форму ""ИмяФормы""","Фиксирует форму, с которой будет работать пользователь. Т.е. поиск элементов будет происходить только в этой форме.","UI.Формы.Зафиксировать форму");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯФиксируюТекущуюФорму()","ЯФиксируюТекущуюФорму","И я фиксирую текущую форму","Фиксирует форму, с которой будет работать пользователь. Т.е. поиск элементов будет происходить только в этой форме.","UI.Формы.Зафиксировать форму");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯФиксируюФормуСИменем(Парам01)","ЯФиксируюФормуСИменем","И я фиксирую форму с именем ""ИмяФормы""","Фиксирует форму, с которой будет работать пользователь. Т.е. поиск элементов будет происходить только в этой форме.","UI.Формы.Зафиксировать форму");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОтменяюФиксированиеФормы()","ЯОтменяюФиксированиеФормы","И я отменяю фиксирование формы","Снимает фиксирование формы.","UI.Формы.Зафиксировать форму");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПрикрепляюКСценариюЗначениеТаблицыКак(Парам01,Парам02)","ЯПрикрепляюКСценариюЗначениеТаблицыКак","И я прикрепляю к сценарию значение таблицы ""ИмяТаблицы"" как ""ИмяЗначения""","Прикрепляет к сценарию указанную таблицу. Параметр ""ИмяЗначения"" будет использован для имени файла. Прикрепленные данные пойдут в отчет о выполнении сценария.","Прочее.Результат выполнения сценария");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеТекущегоПоляКак(Парам01)","ЯЗапоминаюЗначениеТекущегоПоляКак","И я запоминаю значение текущего поля как ""ИмяПеременной""","Запоминает значение активного поля (не таблицы) в переменную","UI.Формы.Поля.Запомнить значение поля");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюИмяТекущегоПоляКак(Парам01)","ЯЗапоминаюИмяТекущегоПоляКак","И я запоминаю имя текущего поля как ""ИмяПеременной""","Запоминает имя активного поля в переменную","UI.Формы.Поля.Запомнить имя поля");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТекущееПолеЯВвожуТекст(Парам01)","ВТекущееПолеЯВвожуТекст","И в текущее поле я ввожу текст ""ЗначениеПоля""","Вводит в активное поле формы (не таблицы) переданное значение","UI.Формы.Поля.Установить значение");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭтоWebКлиентТогда()","ЭтоWebКлиентТогда","Если это web клиент Тогда","Условие. Проверяет, что текущий TestClient - это web клиент.","Прочее.Проверка типа TestClient","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭтоТонкийКлиентТогда()","ЭтоТонкийКлиентТогда","Если это тонкий клиент тогда","Условие. Проверяет, что текущий TestClient - это тонкий клиент.","Прочее.Проверка типа TestClient","Условие");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеТекущееПолеЗаполнено()","ВТаблицеТекущееПолеЗаполнено","И в таблице текущее поле заполнено","Проверяет, что текущая ячейка текущей таблицы заполнена.","UI.Таблицы.Значение ячейки таблицы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеТекущееПолеНезаполнено()","ВТаблицеТекущееПолеНезаполнено","И в таблице текущее поле не заполнено","Проверяет, что текущая ячейка текущей таблицы не заполнена.","UI.Таблицы.Значение ячейки таблицы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоВТаблицеТекущееПолеБудетЗаполненоВТечениеСекунд(Парам01)","ЯЖдуЧтоВТаблицеТекущееПолеБудетЗаполненоВТечениеСекунд","И я жду, что в таблице текущее поле будет заполнено в течение 10 секунд.","Проверяет, что текущая ячейка текущей таблицы перестанет быть пустой в течение нужного числа секунд.","UI.Таблицы.Значение ячейки таблицы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоВТаблицеТекущееПолеБудетНеЗаполненоВТечениеСекунд(Парам01)","ЯЖдуЧтоВТаблицеТекущееПолеБудетНеЗаполненоВТечениеСекунд","И я жду, что в таблице текущее поле будет не заполнено в течение 10 секунд.","Проверяет, что текущая ячейка текущей таблицы станет пустой в течение нужного числа секунд.","UI.Таблицы.Значение ячейки таблицы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУстанавливаюМаксимальноеВремяВыполненияДействия(Парам01)","ЯУстанавливаюМаксимальноеВремяВыполненияДействия","И я устанавливаю максимальное время выполнения действия","Устанавливает максимальное время выполнения действий, которые возвращают значение в менеджер тестирования.","Прочее.Время выполнения действия");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВыпадающийСписокСталРавен(Парам01,ТабПарам)"       ,"ВыпадающийСписокСталРавен"       ,"И выпадающий список ""Заголовок элемента"" стал равен:"          + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список в точности равен переданному набору значений. Поиск элемента формы выполняется по заголовку.","UI.Формы.Поля.Значение выпадающего списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВыпадающийСписокСИменемСталРавен(Парам01,ТабПарам)","ВыпадающийСписокСИменемСталРавен","И выпадающий список с именем ""ИмяЭлемента"" стал равен:" + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список в точности равен переданному набору значений. Поиск элемента формы выполняется по имени.","UI.Формы.Поля.Значение выпадающего списка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВыпадающийСписокСодержитЗначения(Парам01,ТабПарам)"       ,"ВыпадающийСписокСодержитЗначения"       ,"И выпадающий список ""Заголовок элемента"" содержит значения"          + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список в содержит каждое значение из переданного набора значений. Поиск элемента формы выполняется по заголовку.","UI.Формы.Поля.Значение выпадающего списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВыпадающийСписокСИменемСодержитЗначения(Парам01,ТабПарам)","ВыпадающийСписокСИменемСодержитЗначения","И выпадающий список с именем ""ИмяЭлемента"" содержит значения" + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список в содержит каждое значение из переданного набора значений. Поиск элемента формы выполняется по имени.","UI.Формы.Поля.Значение выпадающего списка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВыпадающийСписокНеСодержитЗначения(Парам01,ТабПарам)"       ,"ВыпадающийСписокНеСодержитЗначения"       ,"И выпадающий список ""Заголовок элемента"" не содержит значения"          + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список не содержит ни одного значения из переданного набора значений. Поиск элемента формы выполняется по заголовку.","UI.Формы.Поля.Значение выпадающего списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВыпадающийСписокСИменемНеСодержитЗначения(Парам01,ТабПарам)","ВыпадающийСписокСИменемНеСодержитЗначения","И выпадающий список с именем ""ИмяЭлемента"" не содержит значения" + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список не содержит ни одного значения из переданного набора значений. Поиск элемента формы выполняется по имени.","UI.Формы.Поля.Значение выпадающего списка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляЯНажимаюГиперссылку(Парам01,Парам02)","УПоляЯНажимаюГиперссылку","И у поля ""Заголовок поля"" я нажимаю гиперссылку 'ИмяГиперссылки'","Нажимает на гиперссылку в поле с данным заголовком. Гиперссылка задаётся либо по её представлению, либо по номеру.","UI.Формы.Поля.Гиперссылки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляСИменемЯНажимаюГиперссылку(Парам01,Парам02)","УПоляСИменемЯНажимаюГиперссылку","И у поля с именем ""ИмяПоля"" я нажимаю гиперссылку 'ИмяГиперссылки'","Нажимает на гиперссылку в поле с данным заголовком. Гиперссылка задаётся либо по её представлению, либо по номеру.","UI.Формы.Поля.Гиперссылки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоВТабличномДокументеЯчейкаСтанетРавнаВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)","ЯЖдуЧтоВТабличномДокументеЯчейкаСтанетРавнаВТечениеСекунд","И я жду, что в табличном документе ""ИмяРеквизита"" ячейка ""АдресЯчейки"" станет равна ""Значение"" в течение 20 секунд","Ожидает в течение нужного числа секунд, что нужная ячейка табличного документа станет равна заданному значению.","UI.Табличный документ.Ячейки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЗаголовокАктивнойКолонки(Парам01,Парам02)","ВТаблицеЗаголовокАктивнойКолонки","И в таблице ""ИмяТаблицы"" заголовок активной колонки ""Текст""","Проверяет, что у активная колока таблицы имеет нужный заголовок","UI.Таблицы.Колонки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеИмяАктивнойКолонки(Парам01,Парам02)","ВТаблицеИмяАктивнойКолонки","И в таблице ""ИмяТаблицы"" имя активной колонки ""Текст""","Проверяет, что у активная колока таблицы имеет нужное имя","UI.Таблицы.Колонки");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеТаблицыКак(Парам01,Парам02,ТабПарам)","ЯЗапоминаюЗначениеТаблицыКак","И я запоминаю значение таблицы ""Таблица1"" как ""ИмяПеременной""" + Символы.ПС + "	| 'ИмяКолонки1' |" + Символы.ПС + "	| 'ИмяКолонки2' |","Запоминает значение указанных колонок таблицы в переменную.","UI.Таблицы.Запомнить значение таблицы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаСодержитсяВТаблице(Парам01,Парам02)","ТаблицаСодержитсяВТаблице","И таблица ""ИмяПеременной1"" содержится в таблице ""ИмяПеременной2""","Проверяет, что одна таблица содержится в другой. Значения таблиц должны были быть сохранены ранее с помощью шага: И я запоминаю значение таблицы ""Таблица1"" как ""Таб1""","UI.Таблицы.Вхождение таблицы в другую таблицу");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюВыделенныеСтрокиТаблицыКак(Парам01,Парам02,ТабПарам)","ЯЗапоминаюВыделенныеСтрокиТаблицыКак","И я запоминаю выделенные строки таблицы ""Таблица1"" как ""ИмяПеременной""" + Символы.ПС + "	| 'ИмяКолонки1' |" + Символы.ПС + "	| 'ИмяКолонки2' |","Запоминает значение выделенных строк указанных колонок таблицы в переменную.","UI.Таблицы.Запомнить значение таблицы");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВключаюПроверкуВидимостиЭлементовСУчётомВидимостиГруппЭлементов()","ЯВключаюПроверкуВидимостиЭлементовСУчётомВидимостиГруппЭлементов","И я включаю проверку видимости элементов с учётом видимости групп элементов","Включает проверку видимости элементов с учетом родителя.","Прочее.Видимость элементов");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыключаюПроверкуВидимостиЭлементовСУчётомВидимостиГруппЭлементов()","ЯВыключаюПроверкуВидимостиЭлементовСУчётомВидимостиГруппЭлементов","И я выключаю проверку видимости элементов с учётом видимости групп элементов","Выключает проверку видимости элементов с учетом родителя.","Прочее.Видимость элементов");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВключаюПроверкуДоступностиЭлементовСУчётомДоступностиГруппЭлементов()","ЯВключаюПроверкуДоступностиЭлементовСУчётомДоступностиГруппЭлементов","И я включаю проверку доступности элементов с учётом доступности групп элементов","Включает проверку доступности элементов с учетом родителя.","Прочее.Доступность элементов");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыключаюПроверкуДоступностиЭлементовСУчётомДоступностиГруппЭлементов()","ЯВыключаюПроверкуДоступностиЭлементовСУчётомДоступностиГруппЭлементов","И я выключаю проверку доступности элементов с учётом доступности групп элементов","Выключает проверку доступности элементов с учетом родителя.","Прочее.Доступность элементов");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВГруппеСодержатсяЭлементы(Парам01,ТабПарам)","ВГруппеСодержатсяЭлементы","И в группе ""Заголовок группы"" содержатся элементы""" + Символы.ПС + "	| 'ИмяЭлемента1' |" + Символы.ПС + "	| 'ИмяЭлемента2' |","Проверяет, что в группа с указанным заголовком содержит элементы из таблицы. Элемент по умолчанию ищется заголовку. Чтобы искать по внутреннему имени нужно перед именем элемента добавить символ ""!"".","UI.Формы.Группы.Содержит элементы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВГруппеСИменемСодержатсяЭлементы(Парам01,ТабПарам)","ВГруппеСИменемСодержатсяЭлементы","И в группе с именем ""ИмяГруппы"" содержатся элементы""" + Символы.ПС + "	| 'ИмяЭлемента1' |" + Символы.ПС + "	| 'ИмяЭлемента2' |","Проверяет, что в группа с указанным именем содержит элементы из таблицы. Элемент по умолчанию ищется заголовку. Чтобы искать по внутреннему имени нужно перед именем элемента добавить символ ""!"".","UI.Формы.Группы.Содержит элементы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВГруппеНеСодержатсяЭлементы(Парам01,ТабПарам)","ВГруппеНеСодержатсяЭлементы","И в группе ""Заголовок группы"" не содержатся элементы""" + Символы.ПС + "	| 'ИмяЭлемента1' |" + Символы.ПС + "	| 'ИмяЭлемента2' |","Проверяет, что в группа с указанным заголовком не содержит элементы из таблицы. Элемент по умолчанию ищется заголовку. Чтобы искать по внутреннему имени нужно перед именем элемента добавить символ ""!"".","UI.Формы.Группы.Содержит элементы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВГруппесИменемНеСодержатсяЭлементы(Парам01,ТабПарам)","ВГруппесИменемНеСодержатсяЭлементы","И в группе с именем ""ИмяГруппы"" не содержатся элементы""" + Символы.ПС + "	| 'ИмяЭлемента1' |" + Символы.ПС + "	| 'ИмяЭлемента2' |","Проверяет, что в группа с указанным заголовком не содержит элементы из таблицы. Элемент по умолчанию ищется заголовку. Чтобы искать по внутреннему имени нужно перед именем элемента добавить символ ""!"".","UI.Формы.Группы.Содержит элементы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПанельРазделовРавна(ТабПарам)","ПанельРазделовРавна","И панель разделов равна""" + Символы.ПС + "	| 'ИмяЭлемента1' |" + Символы.ПС + "	| 'ИмяЭлемента2' |","Проверяет равенство панели разделов переданной таблице, содержащей пункты панели разделов.","UI.Командный интерфейс.Панель разделов");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПанельРазделовСодержитПунктыМеню(ТабПарам)","ПанельРазделовСодержитПунктыМеню","И панель разделов содержит пункты меню""" + Символы.ПС + "	| 'ИмяЭлемента1' |" + Символы.ПС + "	| 'ИмяЭлемента2' |","Проверяет, что панель разделов содержит элементы из переданной таблицы, содержащей пункты панели разделов.","UI.Командный интерфейс.Панель разделов");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПанельРазделовНеСодержитПунктыМеню(ТабПарам)","ПанельРазделовНеСодержитПунктыМеню","И панель разделов не содержит пункты меню""" + Символы.ПС + "	| 'ИмяЭлемента1' |" + Символы.ПС + "	| 'ИмяЭлемента2' |","Проверяет, что панель разделов не содержит элементы из переданной таблицы, содержащей пункты панели разделов.","UI.Командный интерфейс.Панель разделов");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПанельФункцийРавна(ТабПарам)","ПанельФункцийРавна","И панель функций равна""" + Символы.ПС + "	| 'ИмяЭлемента1' |" + Символы.ПС + "	| 'ИмяЭлемента2' |","Проверяет равенство панели функция переданной таблице, содержащей пункты панели функий.","UI.Командный интерфейс.Панель функций");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПанельФункцийСодержитПунктыМеню(ТабПарам)","ПанельФункцийСодержитПунктыМеню","И панель функций содержит пункты меню""" + Символы.ПС + "	| 'ИмяЭлемента1' |" + Символы.ПС + "	| 'ИмяЭлемента2' |","Проверяет, что панель функций содержит элементы из переданной таблицы, содержащей пункты панели функций.","UI.Командный интерфейс.Панель функций");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПанельФункцийНеСодержитПунктыМеню(ТабПарам)","ПанельФункцийНеСодержитПунктыМеню","И панель функций не содержит пункты меню""" + Символы.ПС + "	| 'ИмяЭлемента1' |" + Символы.ПС + "	| 'ИмяЭлемента2' |","Проверяет, что панель функций не содержит элементы из переданной таблицы, содержащей пункты панели функций.","UI.Командный интерфейс.Панель функций");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ГруппаВПанелиФункцийСодержитПунктыМеню(Парам01,ТабПарам)","ГруппаВПанелиФункцийСодержитПунктыМеню","И группа ""ЗаголовокГруппы"" в панели функций содержит пункты меню","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ГруппаВПанелиФункцийНеСодержитПунктыМеню(Парам01,ТабПарам)","ГруппаВПанелиФункцийНеСодержитПунктыМеню","И группа ""ЗаголовокГруппы"" в панели функций  не содержит пункты меню","","");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗаполняюТаблицуДанными(Парам01,ТабПарам)","ЯЗаполняюТаблицуДанными","И я заполняю таблицу ""ИмяТаблицы"" данными" + Символы.ПС + "	| 'ИмяКолонки1' | 'ИмяКолонки2' |" + Символы.ПС + "	| 'Значение1'     | 'Значение2'     |","Заполняет указанную таблицу данными, переданными в таблице Gherkin.","UI.Таблицы.Заполнить данными");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УТекущегоЭлементаФормыЯВызываюЗаписьСодержимогоВФайл()","УТекущегоЭлементаФормыЯВызываюЗаписьСодержимогоВФайл","И у текущего элемента формы я вызываю запись содержимого в файл","","");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюВерсиюКонфигурацииКак(Парам01,Парам02)","ЯЗапоминаюВерсиюКонфигурацииКак","И я запоминаю версию конфигурации ""ИмяКонфигурации"" как ""Версия""","Для типовых конфигураций. Требует наличия прав на открытие регистра сведений ""ВерсииПодсистем"". ","Прочее.Версия конфигурации");
	
	//у групп в панели функций нет имен, поэтому следующие шаги закомментированы
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ГруппаСИменемВПанелиФункцийСодержитПунктыМеню(Парам01,ТабПарам)","ГруппаСИменемВПанелиФункцийСодержитПунктыМеню","И группа с именем ""ИмяГруппы"" в панели функций содержит пункты меню","","");
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ГруппаСИменемВПанелиФункцийНеСодержитПунктыМеню(Парам01,ТабПарам)","ГруппаСИменемВПанелиФункцийНеСодержитПунктыМеню","И группа с именем ""ИмяГруппы"" в панели функций  не содержит пункты меню","","");
	
	Возврат ВсеТесты;
КонецФункции

//---------------------------------------

&НаСервереБезКонтекста
Функция ПолучитьТекстСообщенияПользователюСервер(Текст,ТекстСообщенийПользователю)
	Значение = ТекстСообщенийПользователю[Текст];
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Значение;
	КонецЕсли;	 
	
	Возврат Текст; 
КонецФункции

//---------------------------------------

&НаКлиенте
Процедура ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита)
	Если Не ВерсияПлатформыБольшеИлиРавна839 Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ ПолеРеквизит.ТекущаяВидимость() Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле <%1> в данный момент невидимо пользователю.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Функция НайтиЭлементНаФорме(ИмяЭлемента, ТипЭлемента = Неопределено, ИскатьПоИмени, Таймаут = 0)

	МассивФорм = НайтиФормыТекущегоОкна();
	
	Для каждого ТекущаяФорма Из МассивФорм Цикл
		
		Если ИскатьПоИмени Тогда
			ЭлементФормы = ТекущаяФорма.НайтиОбъект(ТипЭлемента,, ИмяЭлемента, Таймаут);
		Иначе
			ЭлементФормы = ТекущаяФорма.НайтиОбъект(ТипЭлемента, ИмяЭлемента,, Таймаут);
		КонецЕсли;
		
		Если ЭлементФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Прервать;
		
	КонецЦикла;
	
	Возврат ЭлементФормы;

КонецФункции // НайтиЭлементНаФорме()

&НаКлиенте
Процедура ОбработичкОжиданияВОткрытойФормеЯЖдуПоявленияЭлементаВТеченииСекунд()
	ИмяОбработчика = "ОбработичкОжиданияВОткрытойФормеЯЖдуПоявленияЭлементаВТеченииСекунд";
	
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоляОбработкаОжидания,ИскатьПоИмениОбрабткаОжидания,Ложь);
	
	Если ЭлементФормы = Неопределено Тогда
		Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчика);
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд появления поля <%2>. Но такой элемент на форме не найден.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоляОбработкаОжидания);
			Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
			Возврат;
		КонецЕсли;	 
		Возврат;
	КонецЕсли;	 
	
	Попытка
		ТекущаяВидимость = ЭлементФормы.ТекущаяВидимость();
	Исключение
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Если ТекущаяВидимость Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат;
	КонецЕсли;	 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд появления поля <%2>. ТекущаяВидимость=%3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоляОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ТекущаяВидимость);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ВОткрытойФормеЯЖдуПоявленияЭлементаВТеченииСекунд(ИмяЭлемента, КоличествоСекунд = 10, ИскатьПоИмени = Ложь)
	Ванесса.ЗапретитьВыполнениеШагов();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = ИмяЭлемента;
	ИскатьПоИмениОбрабткаОжидания     = ИскатьПоИмени;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ОбработичкОжиданияВОткрытойФормеЯЖдуПоявленияЭлементаВТеченииСекунд",1,Ложь);
КонецПроцедуры

&НаКлиенте
//И я жду появления элемента "Имя элемента"
//@ЯЖдуПоявленияЭлемента(Парам01)
Процедура ЯЖдуПоявленияЭлемента(Парам01) Экспорт
	ВОткрытойФормеЯЖдуПоявленияЭлементаВТеченииСекунд(Парам01);
КонецПроцедуры

&НаКлиенте
//И я жду появления элемента с именем "Имя элемента"
//@ЯЖдуПоявленияЭлементаСИменем(Парам01)
Процедура ЯЖдуПоявленияЭлементаСИменем(Парам01) Экспорт
	ВОткрытойФормеЯЖдуПоявленияЭлементаВТеченииСекунд(Парам01,, Истина);
КонецПроцедуры

&НаКлиенте
//И я жду появления элемента "Имя элемента" в течении "Таймаут" секунд
//@ЯЖдуПоявленияЭлементаВТеченииСекунд(Парам01, Парам02)
Процедура ЯЖдуПоявленияЭлементаВТеченииСекунд(Парам01, Парам02) Экспорт
	ВОткрытойФормеЯЖдуПоявленияЭлементаВТеченииСекунд(Парам01, Парам02);
КонецПроцедуры

&НаКлиенте
//И я жду появления элемента "Имя элемента" в течение "Таймаут" секунд
//@ЯЖдуПоявленияЭлементаВТечениеСекунд(Парам01, Парам02)
Процедура ЯЖдуПоявленияЭлементаВТечениеСекунд(Парам01, Парам02) Экспорт
	ЯЖдуПоявленияЭлементаВТеченииСекунд(Парам01, Парам02);
КонецПроцедуры

&НаКлиенте
//И я жду появления элемента с именем "Имя элемента" в течении "Таймаут" секунд
//@ЯЖдуПоявленияЭлементаСИменемВТеченииСекунд(Парам01, Парам02)
Процедура ЯЖдуПоявленияЭлементаСИменемВТеченииСекунд(Парам01, Парам02) Экспорт
	ВОткрытойФормеЯЖдуПоявленияЭлементаВТеченииСекунд(Парам01, Парам02, Истина);
КонецПроцедуры

&НаКлиенте
//И я жду появления элемента с именем "Имя элемента" в течение "Таймаут" секунд
//@ЯЖдуПоявленияЭлементаСИменемВТечениеСекунд(Парам01, Парам02)
Процедура ЯЖдуПоявленияЭлементаСИменемВТечениеСекунд(Парам01, Парам02) Экспорт
	ЯЖдуПоявленияЭлементаСИменемВТеченииСекунд(Парам01, Парам02);
КонецПроцедуры




&НаКлиенте
Процедура ОбработичкОжиданияВОткрытойФормеЯЖдуДоступностиЭлементаВТечениеСекунд()
	ИмяОбработчика = "ОбработичкОжиданияВОткрытойФормеЯЖдуДоступностиЭлементаВТечениеСекунд";
	
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоляОбработкаОжидания,ИскатьПоИмениОбрабткаОжидания,Ложь);
	
	Если ЭлементФормы = Неопределено Тогда
		Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчика);
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд доступности поля <%2>. Но такой элемент на форме не найден.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоляОбработкаОжидания);
			Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
			Возврат;
		КонецЕсли;	 
		Возврат;
	КонецЕсли;	 
	
	Попытка
		ТекущаяДоступность = ЭлементФормы.ТекущаяДоступность();
	Исключение
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Если ТекущаяДоступность Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат;
	КонецЕсли;	 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд доступности поля <%2>. ТекущаяДоступность=%3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоляОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ТекущаяДоступность);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат;
	КонецЕсли;	 
КонецПроцедуры


&НаКлиенте
//И я жду доступности элемента "Имя элемента" в течение "Таймаут" секунд
//@ЯЖдуДоступностиЭлементаВТечениеСекунд(Парам01, Парам02)
Процедура ЯЖдуДоступностиЭлементаВТечениеСекунд(ИмяЭлемента, КоличествоСекунд, ИскатьПоИмени = Ложь) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = ИмяЭлемента;
	ИскатьПоИмениОбрабткаОжидания     = ИскатьПоИмени;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ОбработичкОжиданияВОткрытойФормеЯЖдуДоступностиЭлементаВТечениеСекунд",1,Ложь);
КонецПроцедуры


&НаКлиенте
//И я жду доступности элемента с именем "ИмяЭлемента" в течение "Таймаут" секунд
//@ЯЖдуДоступностиЭлементаСИменемВТечениеСекунд(Парам01, Парам02)
Процедура ЯЖдуДоступностиЭлементаСИменемВТечениеСекунд(ИмяЭлемента, КоличествоСекунд) Экспорт
	ЯЖдуДоступностиЭлементаВТечениеСекунд(ИмяЭлемента, КоличествоСекунд,Истина);
КонецПроцедуры





&НаКлиенте
//И я перехожу к следующему реквизиту
//@ЯПерехожуКСледующемуРеквизиту()
Процедура ЯПерехожуКСледующемуРеквизиту() Экспорт
    АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
    АктивнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
    АктивнаяФорма.ПерейтиКСледующемуЭлементу();
КонецПроцедуры

//---------------------------------------




&НаКлиенте
//И у элемента "Имя элемента" я жду значения "Значение"
//@УЭлементаЯЖдуЗначения(Парам01,Парам02)
Процедура УЭлементаЯЖдуЗначения(ИмяПоля,Значение) Экспорт
	УЭлементаЯЖдуЗначенияВТеченииСекунд(ИмяПоля,Значение,10,Ложь);
КонецПроцедуры

&НаКлиенте
//И у элемента с именем "Имя элемента" я жду значения "Значение"
//@УЭлементасИменемЯЖдуЗначения(Парам01,Парам02)
Процедура УЭлементасИменемЯЖдуЗначения(ИмяПоля,Значение) Экспорт
	УЭлементаЯЖдуЗначенияВТеченииСекунд(ИмяПоля,Значение,10,Истина);
КонецПроцедуры



&НаКлиенте
Процедура ОбработичкОжиданияУЭлементаЯЖдуЗначенияВТеченииСекунд()
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВызыватьИсключение",Ложь);
	
	Попытка
		ТекущееЗначение = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяПоляОбработкаОжидания,ИскатьПоИмениОбрабткаОжидания,ДопПараметры);
	Исключение
		ТекущееЗначение = Неопределено;
	КонецПопытки;
	
	Если (НРег(ЗначениеОбрабткаОжидания) = НРег(ТекущееЗначение)) И (ТекущееЗначение <> Неопределено) Тогда
		ОтключитьОбработчикОжидания("ОбработичкОжиданияУЭлементаЯЖдуЗначенияВТеченииСекунд");
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат;
	КонецЕсли;	 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания("ОбработичкОжиданияУЭлементаЯЖдуЗначенияВТеченииСекунд");
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд у поля <%2> значения <%3>. Текущее значение <%4>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоляОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ЗначениеОбрабткаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ТекущееЗначение);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат;
	КонецЕсли;	 
	
	
КонецПроцедуры

&НаКлиенте
//И у элемента "Имя элемента" я жду значения "Значение" в течении 11 секунд
//@УЭлементаЯЖдуЗначенияВТеченииСекунд(Парам01,Парам02)
Процедура УЭлементаЯЖдуЗначенияВТеченииСекунд(ИмяПоля,Значение,КоличествоСекунд,ИскатьПоИмени = Ложь) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = ИмяПоля;
	ИскатьПоИмениОбрабткаОжидания     = ИскатьПоИмени;
	ЗначениеОбрабткаОжидания          = Значение;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ОбработичкОжиданияУЭлементаЯЖдуЗначенияВТеченииСекунд",1,Ложь);
КонецПроцедуры

&НаКлиенте
//И у элемента "Имя элемента" я жду значения "Значение" в течение 11 секунд
//@УЭлементаЯЖдуЗначенияВТечениеСекунд(Парам01,Парам02)
Процедура УЭлементаЯЖдуЗначенияВТечениеСекунд(ИмяПоля,Значение,КоличествоСекунд,ИскатьПоИмени = Ложь) Экспорт
	УЭлементаЯЖдуЗначенияВТеченииСекунд(ИмяПоля,Значение,КоличествоСекунд,ИскатьПоИмени);
КонецПроцедуры


&НаКлиенте
//И у элемента с именем "Имя элемента" я жду значения "Значение"
//@УЭлементаСИменемЯЖдуЗначенияВТеченииСекунд(Парам01,Парам02)
Процедура УЭлементаСИменемЯЖдуЗначенияВТеченииСекунд(ИмяПоля,Значение,КоличествоСекунд) Экспорт
	УЭлементаЯЖдуЗначенияВТеченииСекунд(ИмяПоля,Значение,КоличествоСекунд,Истина);
КонецПроцедуры

&НаКлиенте
//И у элемента с именем "Имя элемента" я жду значения "Значение"
//@УЭлементаСИменемЯЖдуЗначенияВТечениеСекунд(Парам01,Парам02)
Процедура УЭлементаСИменемЯЖдуЗначенияВТечениеСекунд(ИмяПоля,Значение,КоличествоСекунд) Экспорт
	УЭлементаСИменемЯЖдуЗначенияВТеченииСекунд(ИмяПоля,Значение,КоличествоСекунд);
КонецПроцедуры




&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я устанавливаю флаг "Реквизит булево"
//@ВТЧЯУстанавливаюФлаг(Парам01,Парам02)
Процедура ВТЧЯУстанавливаюФлаг(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯУстанавливаюФлаг(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я устанавливаю флаг "Реквизит булево"
//@ВТаблицеЯУстанавливаюФлаг(Парам01,Парам02)
Процедура ВТаблицеЯУстанавливаюФлаг(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯУстанавливаюФлаг(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я устанавливаю флаг с именем "РеквизитБулево"
//@ВТаблицеЯУстанавливаюФлагСИменем(Парам01,Парам02)
Процедура ВТаблицеЯУстанавливаюФлагСИменем(ИмяТЧ,ИмяРеквизита) Экспорт
	ВОткрытойФормеВТЧЯУстанавливаюФлагСЗаголовком(ИмяТЧ,ИмяРеквизита,Истина);
КонецПроцедуры

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я устанавливаю флаг "Реквизит булево"
//@ВОткрытойФормеВТЧЯУстанавливаюФлаг(Парам01,Парам02)
Процедура ВОткрытойФормеВТЧЯУстанавливаюФлаг(ИмяТЧ,ИмяРеквизита) Экспорт
	ВОткрытойФормеВТЧЯУстанавливаюФлагСЗаголовком(ИмяТЧ,ИмяРеквизита);
КонецПроцедуры

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я устанавливаю флаг с заголовком "Реквизит булево"
//@ВОткрытойФормеВТЧЯУстанавливаюФлагСЗаголовком(Парам01,Парам02)
Процедура ВОткрытойФормеВТЧЯУстанавливаюФлагСЗаголовком(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	 
	
	Если ПолеРеквизит = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> не найдено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита);
	ПолеРеквизит.Активизировать();
	//тут нет активного контрола
	//СделатьДействияПриЗаписиВидео();
	ПредставлениеДанных = ПолеРеквизит.ПолучитьПредставлениеДанных();
	
	Если Ванесса.ЗначениеФлагаСоответствуетСреднееПоложение(ПредставлениеДанных) Тогда
		ПолеРеквизит.УстановитьОтметку();
		ПолеРеквизит.УстановитьОтметку();
	ИначеЕсли НЕ Ванесса.ЗначениеФлагаСоответствуетИстина(ПредставлениеДанных) Тогда
		ПолеРеквизит.УстановитьОтметку();
	КонецЕсли;	 
	
	//тут нет активного контрола
	//СделатьДействияПриЗаписиHTML();
КонецПроцедуры

//---------------------------------------

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я снимаю флаг "Реквизит булево"
//@ВТЧЯСнимаюФлаг(Парам01,Парам02)
Процедура ВТЧЯСнимаюФлаг(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯСнимаюФлаг(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я снимаю флаг "Реквизит булево"
//@ВТаблицеЯСнимаюФлаг(Парам01,Парам02)
Процедура ВТаблицеЯСнимаюФлаг(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯСнимаюФлаг(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я снимаю флаг с именем "РеквизитБулево"
//@ВТаблицеЯСнимаюФлагСИменем(Парам01,Парам02)
Процедура ВТаблицеЯСнимаюФлагСИменем(ИмяТЧ,ИмяРеквизита) Экспорт
	ВОткрытойФормеВТЧЯСнимаюФлагСЗаголовком(ИмяТЧ,ИмяРеквизита,Истина);
КонецПроцедуры

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я снимаю флаг "Реквизит булево"
//@ВОткрытойФормеВТЧЯСнимаюФлаг(Парам01,Парам02)
Процедура ВОткрытойФормеВТЧЯСнимаюФлаг(ИмяТЧ,ИмяРеквизита) Экспорт
	ВОткрытойФормеВТЧЯСнимаюФлагСЗаголовком(ИмяТЧ,ИмяРеквизита);
КонецПроцедуры

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я снимаю флаг с заголовком "Реквизит булево"
//@ВОткрытойФормеВТЧЯСнимаюФлагСЗаголовком(Парам01,Парам02)
Процедура ВОткрытойФормеВТЧЯСнимаюФлагСЗаголовком(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	 
	
	Если ПолеРеквизит = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> не найдено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита);
	ПолеРеквизит.Активизировать();
	//тут нет активного контрола
	//СделатьДействияПриЗаписиВидео();
	
	ПредставлениеДанных = ПолеРеквизит.ПолучитьПредставлениеДанных();
	
	Если Ванесса.ЗначениеФлагаСоответствуетИстина(ПредставлениеДанных) Тогда
		ПолеРеквизит.УстановитьОтметку();
	ИначеЕсли Ванесса.ЗначениеФлагаСоответствуетСреднееПоложение(ПредставлениеДанных) Тогда
		ПолеРеквизит.УстановитьОтметку();
	КонецЕсли;	 
	
	//СделатьДействияПриЗаписиHTML();
КонецПроцедуры

//---------------------------------------

&НаКлиенте
//В открытой форме я снимаю флаг с заголовком "Реквизит булево"
//@ВОткрытойФормеЯСнимаюФлагСЗаголовком(Парам01)
Процедура ВОткрытойФормеЯСнимаюФлагСЗаголовком(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Истина);
	ДопПараметры.Вставить("ОставитьТолькоФлаги",Истина);
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"),ДопПараметры);	
	
	Если ПолеРеквизит = Неопределено Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Флаг с именем <%1> не найден.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Флаг с заголовком <%1> не найден.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ПолеРеквизит.Активизировать();
	СделатьДействияПриЗаписиВидео();
	
	ПредставлениеДанных = ПолеРеквизит.ПолучитьПредставлениеДанных();
	Если Ванесса.ЗначениеФлагаСоответствуетИстина(ПредставлениеДанных) Тогда
		ПолеРеквизит.УстановитьОтметку();
	ИначеЕсли Ванесса.ЗначениеФлагаСоответствуетСреднееПоложение(ПредставлениеДанных) Тогда
		ПолеРеквизит.УстановитьОтметку();
	КонецЕсли;	 
	
	СделатьДействияПриЗаписиHTML();
КонецПроцедуры

&НаКлиенте
//В открытой форме я снимаю флаг "Реквизит булево"
//@ВОткрытойФормеЯСнимаюФлаг(Парам01)
Процедура ВОткрытойФормеЯСнимаюФлаг(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯСнимаюФлагСЗаголовком(ИмяРеквизита,ИскатьПоИмени);
КонецПроцедуры

&НаКлиенте
//В открытой форме я снимаю флаг с именем "Реквизит булево"
//@ВОткрытойФормеЯСнимаюФлагСИменем(Парам01)
Процедура ВОткрытойФормеЯСнимаюФлагСИменем(ИмяРеквизита) Экспорт
	ВОткрытойФормеЯСнимаюФлагСЗаголовком(ИмяРеквизита,Истина)
КонецПроцедуры

&НаКлиенте
//И я снимаю флаг "Реквизит булево"
//@ЯСнимаюФлаг(Парам01)
Процедура ЯСнимаюФлаг(Парам01) Экспорт
	ВОткрытойФормеЯСнимаюФлагСЗаголовком(Парам01);
КонецПроцедуры

&НаКлиенте
//И я снимаю флаг с именем "Реквизит булево"
//@ЯСнимаюФлагСИменем(Парам01)
Процедура ЯСнимаюФлагСИменем(Парам01) Экспорт
	ВОткрытойФормеЯСнимаюФлагСИменем(Парам01);
КонецПроцедуры

//---------------------------------------

&НаКлиенте
//И я устанавливаю флаг "Реквизит булево"
//@ЯУстанавливаюФлаг(Парам01)
Процедура ЯУстанавливаюФлаг(Парам01) Экспорт
	ВОткрытойФормеЯУстанавливаюФлагСЗаголовком(Парам01);
КонецПроцедуры

&НаКлиенте
//И я устанавливаю флаг с именем "Реквизит булево"
//@ЯУстанавливаюФлагСИменем(Парам01)
Процедура ЯУстанавливаюФлагСИменем(Парам01) Экспорт
	ВОткрытойФормеЯУстанавливаюФлагСИменем(Парам01);
КонецПроцедуры

&НаКлиенте
//В открытой форме я устанавливаю флаг с заголовком "Реквизит булево"
//@ВОткрытойФормеЯУстанавливаюФлагСЗаголовком(Парам01)
Процедура ВОткрытойФормеЯУстанавливаюФлагСЗаголовком(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Истина);
	ДопПараметры.Вставить("ОставитьТолькоФлаги",Истина);
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"),ДопПараметры);
	Если ПолеРеквизит = Неопределено Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Флаг с именем <%1> не найден.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Флаг с заголовком <%1> не найден.");
		КонецЕсли;
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	ПолеРеквизит.Активизировать();
	СделатьДействияПриЗаписиВидео();
	
	ПредставлениеДанных = ПолеРеквизит.ПолучитьПредставлениеДанных();
	Если Ванесса.ЗначениеФлагаСоответствуетСреднееПоложение(ПредставлениеДанных) Тогда
		ПолеРеквизит.УстановитьОтметку();
		ПолеРеквизит.УстановитьОтметку();
	ИначеЕсли НЕ Ванесса.ЗначениеФлагаСоответствуетИстина(ПредставлениеДанных) Тогда
		ПолеРеквизит.УстановитьОтметку();
	КонецЕсли;	 
	СделатьДействияПриЗаписиHTML();
КонецПроцедуры

&НаКлиенте
//В открытой форме я устанавливаю флаг "Реквизит булево"
//@ВОткрытойФормеЯУстанавливаюФлаг(Парам01)
Процедура ВОткрытойФормеЯУстанавливаюФлагФлаг(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯУстанавливаюФлагСЗаголовком(ИмяРеквизита,ИскатьПоИмени);
КонецПроцедуры

&НаКлиенте
//В открытой форме я устанавливаю флаг с именем "Реквизит булево"
//@ВОткрытойФормеЯУстанавливаюФлагСИменем(Парам01)
Процедура ВОткрытойФормеЯУстанавливаюФлагСИменем(ИмяРеквизита) Экспорт
	ВОткрытойФормеЯУстанавливаюФлагСЗаголовком(ИмяРеквизита,Истина)
КонецПроцедуры

&НаКлиенте
//В открытой форме я устанавливаю флаг "Реквизит булево"
//@ВОткрытойФормеЯУстанавливаюФлаг(Парам01)
Процедура ВОткрытойФормеЯУстанавливаюФлаг(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯУстанавливаюФлагСЗаголовком(ИмяРеквизита,ИскатьПоИмени);
КонецПроцедуры

//---------------------------------------


&НаКлиенте
Процедура ПередНачаломСценария() Экспорт
	УдалитьВсеЭлементыСправочникаВида("Справочник1");
	УдалитьВсеЭлементыСправочникаВида("Справочник2");
	Если Ванесса.Объект.ВерсияПоставки = "standart" Тогда
		ИмяМакета = "Fixtures";
	Иначе	
		ИмяМакета = "МакетОбработки_РаботаСИнтерфейсом_Fixtures";
	КонецЕсли;	 
	Макет = ПолучитьМакетСервер(ИмяМакета);
	Ванесса.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
Функция АктивизироватьКнопку(Кнопка,ТекущаяФорма = Неопределено,ТЧ = Неопределено)
	Если Ванесса.ТекущийTestclientЭтоWebКлиент Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	ПолучилосьАктивизировать = Ложь;
	Если Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели Тогда
		Попытка
			//в 8.3.7 эта строка вызывает проблему для кнопок диалогов
			Если ТЧ <> Неопределено Тогда
				КоманднаяПанельФормы = ТЧ.ПолучитьКоманднуюПанель();
			Иначе	
				КоманднаяПанельФормы = ТекущаяФорма.ПолучитьКоманднуюПанель();
			КонецЕсли;	 
			
			Если КоманднаяПанельФормы <> Неопределено Тогда
				КоманднаяПанельФормы.Активизировать();
				ПолучилосьАктивизировать = Истина;
			КонецЕсли;	 
		Исключение
		
		КонецПопытки;
	Иначе	
		Кнопка.Активизировать();
		ПолучилосьАктивизировать = Истина;
	КонецЕсли;	 
	
	Возврат ПолучилосьАктивизировать;
КонецФункции	

&НаКлиенте
Процедура СделатьДействияПриЗаписиВидео(ПарамСтр = "")
	Ванесса.СделатьДействияПриЗаписиВидео(ПарамСтр);
КонецПроцедуры

&НаКлиенте
Процедура СделатьДействияПриЗаписиHTML(ПарамСтр = "")
	Ванесса.СделатьДействияПриЗаписиHTML(ПарамСтр);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьАктивноеОкноИзКонтекста()
	Возврат Контекст.АктивноеОкно;
КонецФункции	

&НаКлиенте
Функция ПолучитьАктивноеОкноИзТестовоеПриложение()
	Возврат Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
КонецФункции	

&НаКлиенте
Функция НайтиФормуПоЗаголовку(ИмяФормы)
	Возврат Ванесса.НайтиФормуПоЗаголовку(ИмяФормы);
КонецФункции	

&НаКлиенте
Функция НайтиТЧПоИмени(ИмяТЧ,НужнаяФорма = Неопределено)
	Возврат Ванесса.НайтиТЧПоИмени(ИмяТЧ,НужнаяФорма);
КонецФункции	

&НаКлиенте
Функция НайтиФормыТекущегоОкна(ДопПараметры = Неопределено)
	Возврат Ванесса.НайтиФормыТекущегоОкнаTestClient(ДопПараметры);
КонецФункции	

&НаКлиенте
Функция НайтиТекущуюФорму()
	Возврат Ванесса.НайтиТекущуюФормуTestClient();
КонецФункции	

&НаСервереБезконтекста
Процедура УдалитьВсеЭлементыСправочникаВида(ИмяСпр)
	
	Если Метаданные.Справочники[ИмяСпр].Иерархический Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочник1.Ссылка
		|ИЗ
		|	Справочник.Справочник1 КАК Справочник1
		|ГДЕ
		|	ИСТИНА
		|	И НЕ Справочник1.ЭтоГруппа";
		
		
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Справочник1",ИмяСпр);	
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбъектСпр = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ОбъектСпр.Удалить();
		КонецЦикла;
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочник1.Ссылка
		|ИЗ
		|	Справочник.Справочник1 КАК Справочник1
		|ГДЕ
		|	ИСТИНА
		|	И Справочник1.ЭтоГруппа";
		
		
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Справочник1",ИмяСпр);	
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбъектСпр = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ОбъектСпр.Удалить();
		КонецЦикла;
	Иначе
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочник1.Ссылка
		|ИЗ
		|	Справочник.Справочник1 КАК Справочник1";
		
		
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Справочник1",ИмяСпр);	
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбъектСпр = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ОбъектСпр.Удалить();
		КонецЦикла;
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
	
КонецФункции


&НаКлиенте
Процедура ЕслиНаЭкранеДиалогМодальныйДиалогТоНадоЕгоЗакрыть()
	Нашли = Ложь;
	НужноеОкно = Неопределено;
	
	ОкнаПриложения = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	Для Каждого ОкноПриложения Из ОкнаПриложения Цикл
		Если Ванесса.ЭтоЗаголовокОкнаМодальногоДиалога(ОкноПриложения.Заголовок) Тогда
			НужноеОкно = ОкноПриложения;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если НужноеОкно = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	МассивКнопок = НужноеОкно.НайтиОбъекты(Тип("ТестируемаяКнопкаФормы"));
	Для Каждого Кнопка Из МассивКнопок Цикл
		Если НРег(Кнопка.ТекстЗаголовка) = "нет" Тогда
			Кнопка.Нажать();
			Возврат;
		ИначеЕсли НРег(Кнопка.ТекстЗаголовка) = "no" Тогда
			Кнопка.Нажать();
			Возврат;
		ИначеЕсли НРег(Кнопка.ТекстЗаголовка) = "отмена" Тогда
			Кнопка.Нажать();
			Возврат;
		ИначеЕсли ВРег(Кнопка.ТекстЗаголовка) = "OK" Тогда
			Кнопка.Нажать();
			Возврат;
		ИначеЕсли НРег(Кнопка.ТекстЗаголовка) = "закрыть" Тогда
			//для форм БСП
			Кнопка.Нажать();
			Возврат;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Функция НаЭкранеДиалогАвторизации()
	Возврат Ванесса.НаЭкранеДиалогАвторизации(); 
КонецФункции	

&НаКлиенте
Функция ЗаголовокиОконТиповыхКонфигурацийНРег()
	Массив = Новый Массив;
	Массив.Добавить(НРег(".:      Выберите операцию      :."));
	Возврат Массив;
КонецФункции	 

&НаКлиенте
//И я закрыл все окна клиентского приложения
//@ЯЗакрылВсеОкнаКлиентскогоПриложения()
Процедура ЯЗакрылВсеОкнаКлиентскогоПриложения() Экспорт
	Если Не КонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Возврат;
	КонецЕсли;	
	
	Если КонтекстСохраняемый.ТестовоеПриложение = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Попытка
		ОкнаПриложения = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	Исключение
		Возврат;
	КонецПопытки;
	
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	НайденДиалогАвторизации = НаЭкранеДиалогАвторизации();
	Если НайденДиалогАвторизации Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не удалось авторизоваться в базе.");
	КонецЕсли;	 
	
	ЕслиНаЭкранеДиалогМодальныйДиалогТоНадоЕгоЗакрыть();//диалог мог остаться от предыдущего сценария
	
	ЗаголовокиОконТиповыхКонфигураций = ЗаголовокиОконТиповыхКонфигурацийНРег();
	
	ПроблемныеОкна = Новый Массив;
	
	//Перебираем окна в обратном порядке.
	//Тогда больше шанс, сначала будет закрыто окно нового объекта, а потом уже форма списка.
	Для Ккк = 0 По ОкнаПриложения.Количество()-1 Цикл
		ОкноПриложение = ОкнаПриложения[ОкнаПриложения.Количество()-1-Ккк];
	
		Если ОкноПриложение.Основное Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если ОкноПриложение.НачальнаяСтраница Тогда
			Продолжить;
		КонецЕсли;	 
		
		ЗаголовокНрег = НРег(ОкноПриложение.Заголовок);
		
		//не будем закрывать служебные окна, т.к. возможно сценарий будет с ними работать
		Если ЗаголовокНрег = Нрег("Легальность получения обновлений") Тогда
			Продолжить;
		ИначеЕсли ЗаголовокНрег = Нрег("Initial configuration setup") Тогда
			Продолжить;
		ИначеЕсли ЗаголовокНрег = Нрег("Legitimate software") Тогда
			Продолжить;
		ИначеЕсли ЗаголовокиОконТиповыхКонфигураций.Найти(ЗаголовокНрег) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		Попытка
			ФормаОкна = ОкноПриложение.НайтиОбъект(Тип("ТестируемаяФорма"));
		Исключение
			ФормаОкна = Неопределено;
		КонецПопытки;
		
		Если ФормаОкна <> Неопределено Тогда
			Если НРег(ФормаОкна.ИмяФормы) = НРег("ОбщаяФорма.Вопрос") Тогда
				МногострочныйТекстСообщения = ФормаОкна.НайтиОбъект(,,"МногострочныйТекстСообщения");
				Если МногострочныйТекстСообщения <> Неопределено Тогда
					ПредставлениеДанных = МногострочныйТекстСообщения.ПолучитьПредставлениеДанных();
					Если Найти(НРег(ПредставлениеДанных),"ошибка") > 0 Тогда
						ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Найдено окно с текстом ошибки: %1.");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Символы.ПС + СокрЛП(ПредставлениеДанных));
						ВызватьИсключение ТекстСообщения;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		Попытка
			ОкноПриложение.Закрыть();
		Исключение
			ПроблемныеОкна.Добавить(ОкноПриложение);
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог закрыть окно %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОкноПриложение.Заголовок); 
			Сообщить(Ванесса.ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		КонецПопытки;
		
		Если Ванесса.ТекущийTestclientЭтоWebКлиент Тогда
			Ванесса.Sleep(1);
		КонецЕсли;	 
		
		ЕслиНаЭкранеДиалогМодальныйДиалогТоНадоЕгоЗакрыть();//диалог мог появиться при закрытии окна.
	КонецЦикла;
	
	ОкноПриложение = Неопределено;
	//попробуем закрыть проблемыные окна ещё раз
	Для Каждого ОкноПриложение Из ПроблемныеОкна Цикл
		Попытка
			ОкноПриложение.Закрыть();
		Исключение
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог закрыть окно повторно %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОкноПриложение.Заголовок); 
			Сообщить(Ванесса.ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		КонецПопытки;
		
		Если Ванесса.ТекущийTestclientЭтоWebКлиент Тогда
			Ванесса.Sleep(1);
		КонецЕсли;
		
		ЕслиНаЭкранеДиалогМодальныйДиалогТоНадоЕгоЗакрыть();//диалог мог появиться при закрытии окна.
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
//И я закрыл все окна клиентского приложения кроме "Нужное окно"
//@ЯЗакрылВсеОкнаКлиентскогоПриложенияКроме(Парам01)
Процедура ЯЗакрылВсеОкнаКлиентскогоПриложенияКроме(ЗаголовокОкна) Экспорт
	Если Не КонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Возврат;
	КонецЕсли;	
	
	Если КонтекстСохраняемый.ТестовоеПриложение = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Попытка
		ОкнаПриложения = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	Исключение
		Возврат;
	КонецПопытки;
	
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	НужноеОкно     = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"),ЗаголовокОкна);
	
	ЕслиНаЭкранеДиалогМодальныйДиалогТоНадоЕгоЗакрыть();//диалог мог остаться от предыдущего сценария
	
	Для каждого ОкноПриложение Из ОкнаПриложения Цикл
		Если ОкноПриложение.Основное Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если ОкноПриложение.НачальнаяСтраница Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если НужноеОкно <> Неопределено Тогда
			Если НРег(ОкноПриложение.Заголовок) = НРег(НужноеОкно.Заголовок) Тогда
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Попытка
			ОкноПриложение.Закрыть();
		Исключение
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог закрыть окно %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОкноПриложение); 
			Сообщить(Ванесса.ПолучитьТекстСообщенияПользователю(ТекстСообщения));
			Продолжить;
		КонецПопытки;
		
		ЕслиНаЭкранеДиалогМодальныйДиалогТоНадоЕгоЗакрыть();//диалог мог появиться при закрытии окна.
		
	КонецЦикла;
	
	
КонецПроцедуры


&НаКлиенте
//Я нажимаю кнопку командного интерфейса "Основная"
//@ЯНажимаюКнопкуКомандногоИнтерфейса(Парам01)
Процедура ЯНажимаюКнопкуКомандногоИнтерфейса(ИмяКнопки) Экспорт
	Если НЕ КонтекстСохраняемый.Свойство("ГлавноеОкноТестируемого") Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не подключен Testclient.");
	КонецЕсли;	 
	
	Если КонтекстСохраняемый.ГлавноеОкноТестируемого = Неопределено Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не подключен Testclient.");
	КонецЕсли;	 
	
	ОкноПриложенияОсновноеCommandInterface = КонтекстСохраняемый.ГлавноеОкноТестируемого.ПолучитьКомандныйИнтерфейс();
	//ОкноПриложенияОсновноеCommandInterface = КонтекстСохраняемый.ОкноПриложенияОсновноеCommandInterface;
	КнопкаКомандногоИнтерфейса = ОкноПриложенияОсновноеCommandInterface.НайтиОбъект(Тип("ТестируемаяКнопкаКомандногоИнтерфейса"), ИмяКнопки,,5);
	Если КнопкаКомандногоИнтерфейса = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка/команда с заголовком <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКнопки); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	
	КнопкаКомандногоИнтерфейса.Нажать();
	Ванесса.ОбработатьСменуАктивногоОкна();
КонецПроцедуры



&НаКлиенте
//открылось окно "Справочник1"
//@ОткрылосьОкно(Парам01)
Процедура ОткрылосьОкно(Знач ИмяОкна,ЧастьИмени2 = Неопределено
	                           ,ЧастьИмени3 = Неопределено
	                           ,ЧастьИмени4 = Неопределено
	                           ,ЧастьИмени5 = Неопределено
	                           ,ЧастьИмени6 = Неопределено
	                           ,ЧастьИмени7 = Неопределено) Экспорт
							   
							   
	Ванесса.СоеденитьСтрокиЕслиЭтоВозможно(ИмяОкна,ЧастьИмени2,
	                                       ЧастьИмени3,
	                                       ЧастьИмени4,
	                                       ЧастьИмени5,
	                                       ЧастьИмени6,
	                                       ЧастьИмени7);							   
										   
	Ванесса.ОбработатьСменуАктивногоОкна();
	ИмяОкна = Ванесса.ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(ИмяОкна);
	
	
	Если Не КонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не подключен TestClient.");
	КонецЕсли;	
	
	Если КонтекстСохраняемый.ТестовоеПриложение = Неопределено Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не подключен TestClient.");
	КонецЕсли;	 
	
	
	ТекстСообщения = "";
	Если Ванесса.ЭтоЗаголовокОкнаМодальногоДиалога(ИмяОкна)
		Или НРег(ИмяОкна) = "выбор типа данных"									   
		Или НРег(ИмяОкна) = "выберите период"									   
		Тогда
		АктивноеОкно = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), ИмяОкна, , 10);
		
		Если АктивноеОкно = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Окно с заголовком <%1> не найдено.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяОкна);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		Ванесса.ЗапомнитьАктивноеОкно(АктивноеОкно);
	Иначе	
		
		НужноеОкноНайдено = Ложь;
		КоличествоПопытокПроверкиАктивногоОкна = Ванесса.Объект.КоличествоСекундПоискаОкна;
		Для Ррр = 1 По КоличествоПопытокПроверкиАктивногоОкна Цикл
			Попытка
				Таймаут       = 1;
				АктивноеОкно2 = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), ИмяОкна, , Таймаут);
				
				Если АктивноеОкно2 = Неопределено Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Окно с заголовком <%1> не найдено.");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяОкна);
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				КоличествоПопытокПолученияОкнаИзПриложения = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
				ПолучилосьПолучитьАктивноеОкно             = Ложь;
				Для Ккк = 1 По КоличествоПопытокПолученияОкнаИзПриложения Цикл
					Попытка
						АктивноеОкно                   = КонтекстСохраняемый.ТестовоеПриложение.ПолучитьАктивноеОкно();
						ПолучилосьПолучитьАктивноеОкно = Истина;
						Прервать;
					Исключение
						Ванесса.sleep(1);
					КонецПопытки;
				КонецЦикла;	
				
				Если Не ПолучилосьПолучитьАктивноеОкно Тогда
					ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось определить активное окно TestClient.");
				КонецЕсли;	 
				
				ЭтоМодальныйДиалогПлатформы = Ложь;
				ФормаСПустымИменем = АктивноеОкно2.НайтиОбъект(Тип("ТестируемаяФорма"),,Неопределено);
				Если ФормаСПустымИменем <> Неопределено Тогда
					Если СокрЛП(ФормаСПустымИменем.ИмяФормы) = "" Тогда
						ЭтоМодальныйДиалогПлатформы = Истина;
					КонецЕсли;	 
				КонецЕсли;	 
				
				Если Не ЭтоМодальныйДиалогПлатформы Тогда
					Если АктивноеОкно.Заголовок <> АктивноеОкно2.Заголовок Тогда
						ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что активным окном будет <%1>, а нашли <%2>. Таймаут поиска окна: %3");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяОкна);
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",АктивноеОкно.Заголовок);
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Ванесса.Объект.КоличествоСекундПоискаОкна);
						ВызватьИсключение ТекстСообщения;
					КонецЕсли;	 
				КонецЕсли;	 
				
				НужноеОкноНайдено = Истина;
				Прервать;
			Исключение
				Ванесса.sleep(1);
			КонецПопытки;
		КонецЦикла;	
		
		Если Не НужноеОкноНайдено Тогда
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		Ванесса.ЗапомнитьАктивноеОкно(АктивноеОкно2);
	КонецЕсли;
	
	Если Ванесса.БезопасноеВыполнениеШагов() Тогда
		//чтобы сработали оповещения форм
		Ванесса.Sleep(1);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И я активизирую окно "Справочник1"
//@ЯАктивизируюОкно(Парам01)
Процедура ЯАктивизируюОкно(Знач ИмяОкна,ЧастьИмени2 = Неопределено
	                           ,ЧастьИмени3 = Неопределено
	                           ,ЧастьИмени4 = Неопределено
	                           ,ЧастьИмени5 = Неопределено
	                           ,ЧастьИмени6 = Неопределено
	                           ,ЧастьИмени7 = Неопределено) Экспорт
							   
							   
	Ванесса.ОбработатьСменуАктивногоОкна();
	Ванесса.СоеденитьСтрокиЕслиЭтоВозможно(ИмяОкна,ЧастьИмени2,
	                                       ЧастьИмени3,
	                                       ЧастьИмени4,
	                                       ЧастьИмени5,
	                                       ЧастьИмени6,
	                                       ЧастьИмени7);							   
										   
										   
	СтрокаОшибки = "";
	БылаОшибка = Ложь;
	
	ИмяОкна = Ванесса.ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(ИмяОкна);	
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
		
		Попытка
			АктивноеОкно = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), ИмяОкна);
			Если АктивноеОкно = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Окно с заголовком <%1> не найдено.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяОкна);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Ванесса.sleep(1);
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;

	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
	
	Ванесса.ЗапомнитьАктивноеОкно(АктивноеОкно);
	АктивноеОкно.Активизировать();
КонецПроцедуры


&НаКлиенте
//Тогда открылась форма "Справочник.Справочник1.Форма.ФормаЭлемента"
//@ОткрыласьФорма(Парам01)
Процедура ОткрыласьФорма(Знач ИмяФормыTestClient,ИскатьПоИмени = Ложь) Экспорт
							   
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	Если Не КонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не подключен TestClient.");
	КонецЕсли;	 
	
	АктивноеОкно = КонтекстСохраняемый.ТестовоеПриложение.ПолучитьАктивноеОкно();
	Если АктивноеОкно = Неопределено Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не обнаружено активное окно.");
	КонецЕсли;	 
	
	Если НЕ ИскатьПоИмени Тогда
		НужнаяФорма  = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"), ИмяФормыTestClient, , 10);
	Иначе	
		НужнаяФорма  = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"), , ИмяФормыTestClient, 10);
	КонецЕсли;	 
	
	Если НужнаяФорма = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Форма <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФормыTestClient);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры


&НаКлиенте
//Тогда открылась форма с именем "Справочник.Справочник1.Форма.ФормаЭлемента"
//@ОткрыласьФормаСИменем(Парам01)
Процедура ОткрыласьФормаСИменем(Знач ИмяФормыTestClient) Экспорт
	ОткрыласьФорма(ИмяФормыTestClient,Истина);
КонецПроцедуры




&НаКлиенте
Процедура ЯЖдуЗакрытияОкнаВТеченииСекундОбработчикОжидания()
	НужноеОкно = Ванесса.НайтиОкноTestClientПоЗаголовку(ЗначениеОбрабткаОжидания);
	
	Если НужноеОкно = Неопределено Тогда
		ОтключитьОбработчикОжидания("ЯЖдуЗакрытияОкнаВТеченииСекундОбработчикОжидания");
		Ванесса.ЗапомнитьАктивноеОкно(Неопределено);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат;
	КонецЕсли;	 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания("ЯЖдуЗакрытияОкнаВТеченииСекундОбработчикОжидания");
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд, что закроется окно с заголовком <%2>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ЗначениеОбрабткаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И я жду закрытия окна "Имя окна" в течении 60 секунд
//@ЯЖдуЗакрытияОкнаВТеченииСекунд(Парам01,Парам02)
Процедура ЯЖдуЗакрытияОкнаВТеченииСекунд(ИмяОкна,КоличествоСекунд) Экспорт
	Попытка
		НужноеОкно = Ванесса.НайтиОкноTestClientПоЗаголовку(ИмяОкна);
		Если НужноеОкно = Неопределено Тогда
			Ванесса.ЗапомнитьАктивноеОкно(Неопределено);
			Возврат;
		КонецЕсли;	 
	Исключение
		//значит будет подключен таймер
	КонецПопытки;
	
	Ванесса.ЗапретитьВыполнениеШагов();
	
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ЗначениеОбрабткаОжидания          = ИмяОкна;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ЯЖдуЗакрытияОкнаВТеченииСекундОбработчикОжидания",1,Ложь);
КонецПроцедуры

&НаКлиенте
//И я жду закрытия окна "Имя окна" в течение 60 секунд
//@ЯЖдуЗакрытияОкнаВТечениеСекунд(Парам01,Парам02)
Процедура ЯЖдуЗакрытияОкнаВТечениеСекунд(ИмяОкна,КоличествоСекунд) Экспорт
	ЯЖдуЗакрытияОкнаВТеченииСекунд(ИмяОкна,КоличествоСекунд);
КонецПроцедуры







&НаКлиенте
Процедура ЯЖдуОткрытияОкнаВТеченииСекундОбработчикОжидания()
	НужноеОкно = Ванесса.НайтиОкноTestClientПоЗаголовку(ЗначениеОбрабткаОжидания);
	
	Если НужноеОкно <> Неопределено Тогда
		ОтключитьОбработчикОжидания("ЯЖдуОткрытияОкнаВТеченииСекундОбработчикОжидания");
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат;
	КонецЕсли;	 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания("ЯЖдуОткрытияОкнаВТеченииСекундОбработчикОжидания");
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд, что откроется окно с заголовком <%2>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ЗначениеОбрабткаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И я жду открытия окна "Имя окна" в течении 60 секунд
//@ЯЖдуОткрытияОкнаВТеченииСекунд(Парам01,Парам02)
Процедура ЯЖдуОткрытияОкнаВТеченииСекунд(ИмяОкна,КоличествоСекунд) Экспорт
	НужноеОкно = Ванесса.НайтиОкноTestClientПоЗаголовку(ЗначениеОбрабткаОжидания);
	Если НужноеОкно <> Неопределено Тогда
		Ванесса.ОбработатьСменуАктивногоОкна();
		Возврат;
	КонецЕсли;	 
	
	
	Ванесса.ЗапретитьВыполнениеШагов();
	Ванесса.ОбработатьСменуАктивногоОкна();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ЗначениеОбрабткаОжидания          = ИмяОкна;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ЯЖдуОткрытияОкнаВТеченииСекундОбработчикОжидания",1,Ложь);
КонецПроцедуры

&НаКлиенте
//И я жду открытия окна "Имя окна" в течение 60 секунд
//@ЯЖдуОткрытияОкнаВТечениеСекунд(Парам01,Парам02)
Процедура ЯЖдуОткрытияОкнаВТечениеСекунд(ИмяОкна,КоличествоСекунд) Экспорт
	ЯЖдуОткрытияОкнаВТеченииСекунд(ИмяОкна,КоличествоСекунд);
КонецПроцедуры

&НаКлиенте
Функция СделатьПереход(ТаблицаСписок,ОписаниеСтроки,ОшибкаПереходВниз,ОшибкаПереходВверх,ПереключитьВыделение = Ложь)
	Возврат Ванесса.СделатьПереход(ТаблицаСписок,ОписаниеСтроки,ОшибкаПереходВниз,ОшибкаПереходВверх,ПереключитьВыделение);
КонецФункции	

&НаКлиенте
Процедура ПривестиСтрокиКОднойДлине(ИмяКолонки,ЗначениеКолонки)
	Пока СтрДлина(ИмяКолонки) > СтрДлина(ЗначениеКолонки) Цикл
		ЗначениеКолонки = ЗначениеКолонки + " ";
	КонецЦикла;	
	Пока СтрДлина(ИмяКолонки) < СтрДлина(ЗначениеКолонки) Цикл
		ИмяКолонки = ИмяКолонки + " ";
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОшибкаНетКолонок(ИмяТЧ,ТабПарам)
	Стр = "Не найдены колонки: ";
	
	Попытка
		Таблица = НайтиТЧПоИмени(ИмяТЧ);
	Исключение
		Возврат ""; 
	КонецПопытки;
	
	Попытка
		КолонкиТаблицы = Таблица.НайтиОбъекты();
	Исключение
		Возврат ""; 
	КонецПопытки;
	
	МассивЗаголовков = Новый Массив;
	Для Каждого Элем Из КолонкиТаблицы Цикл
		МассивЗаголовков.Добавить(Элем.ТекстЗаголовка);
	КонецЦикла;	
	
	БылиОшибки = Ложь;
	
	Для Каждого Элем Из ТабПарам[0] Цикл
		ИскомыйЗаголовокТаблицы = Элем.Значение;
		ИскомыйЗаголовокТаблицы = СтрЗаменить(ИскомыйЗаголовокТаблицы,"\n"," ");
		Если МассивЗаголовков.Найти(ИскомыйЗаголовокТаблицы) = Неопределено Тогда
			Стр = Стр + ИскомыйЗаголовокТаблицы + ", ";
			БылиОшибки = Истина;
		КонецЕсли;	 
	КонецЦикла;		
	
	Если Не БылиОшибки Тогда
		Возврат "";
	КонецЕсли;	 
	
	Если Прав(Стр,2) = ", " Тогда
		Стр = Лев(Стр,СтрДлина(Стр)-2);
	КонецЕсли;	 
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Функция ПолучитьОшибкуПерехода(ИмяТЧ,ОшибкаПереходВниз,ОшибкаПереходВверх,ТабПарам)
	ОшибкаНетКолонок = ПолучитьОшибкаНетКолонок(ИмяТЧ,ТабПарам);
	
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не удалось перейти к нужной строке в таблице <%1>. %2");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОшибкаНетКолонок); 
	Стр = ТекстСообщения + Символы.ПС;
	
	СтрокаИмКолонки = "		| ";
	СтрокаЗначение  = "		| ";
	
	
	Колонки = ТабПарам[0];
	Для Каждого Элем Из Колонки Цикл
		ИмяКолонки      = "'" + Элем.Значение + "'";
		ЗначениеКолонки = "'" + ТабПарам[1][Элем.Ключ] + "'";
		
		ПривестиСтрокиКОднойДлине(ИмяКолонки,ЗначениеКолонки);
		
		СтрокаИмКолонки = СтрокаИмКолонки + ИмяКолонки      + " | ";
		СтрокаЗначение  = СтрокаЗначение  + ЗначениеКолонки + " | ";
	КонецЦикла;	
	
	
	Стр = Стр + СтрокаИмКолонки + Символы.ПС + СтрокаЗначение;
	
	Ванесса.СделатьСообщение(Стр);
	Если ОшибкаПереходВниз <> "" Тогда
		Сообщить(ОшибкаПереходВниз);
	КонецЕсли;	 
	Если ОшибкаПереходВверх <> "" Тогда
		Сообщить(ОшибкаПереходВверх);
	КонецЕсли;	 
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Функция ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам,ИмяТаблицы = Неопределено,ДопПараметры = Неопределено)
	Возврат Ванесса.ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам,ИмяТаблицы,ДопПараметры);
КонецФункции	


&НаКлиенте
//В форме "Справочник1" в таблице "Список" я перехожу к строке с переключением выделения:
//@ВТаблицеЯПерехожуКСтрокеСПереключениемВыделения(Парам01,Парам02,ТабПарам)
Процедура ВТаблицеЯПерехожуКСтрокеСПереключениемВыделения(ИмяТЧ,ТабПарам) Экспорт
	ВТаблицеЯПерехожуКСтроке(ИмяТЧ,ТабПарам,Истина);
КонецПроцедуры

&НаКлиенте
//В форме "Справочник1" в таблице "Список" я перехожу к строке:
//@ВФормеВТаблицеЯПерехожуКСтроке(Парам01,Парам02,ТабПарам)
Процедура ВФормеВТаблицеЯПерехожуКСтроке(ИмяФормы,ИмяТЧ,ТабПарам) Экспорт
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Строка должна быть описана таблицей с двумя строками.");
	Ванесса.ПроверитьРавенство(ТабПарам.Количество(),2,ТекстСообщения);
	
	НужнаяФорма = НайтиФормуПоЗаголовку(ИмяФормы);
	
	Если НужнаяФорма = Неопределено Тогда
		Если НужнаяФорма = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Форма с заголовком <%1> не найдена.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФормы); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	ТаблицаСписок = НайтиТЧПоИмени(ИмяТЧ,НужнаяФорма);
	
	ТаблицаСписок.Активизировать();
	
	СделатьДействияПриЗаписиВидео("толькофрейм");
	
	ОписаниеСтроки = ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам,ТаблицаСписок.Имя);
	
	
	ОшибкаПереходВниз  = "";
	ОшибкаПереходВверх = "";
	
	
	ПолучилосьПерейти = СделатьПереход(ТаблицаСписок,ОписаниеСтроки,ОшибкаПереходВниз,ОшибкаПереходВверх);
	Если НЕ ПолучилосьПерейти Тогда
		Попытка
			//Возможно, это  ошибка платформы. Такое бывает с таблицами значений в УФ. Смотри https://github.com/silverbulleters/vanessa-behavior/issues/342
			//Делаем обход проблемы
			ТаблицаСписок.ПерейтиКПервойСтроке();
			ПолучилосьПерейти = СделатьПереход(ТаблицаСписок,ОписаниеСтроки,ОшибкаПереходВниз,ОшибкаПереходВверх);
		Исключение
			Стр = ПолучитьОшибкуПерехода(ИмяТЧ,ОшибкаПереходВниз,ОшибкаПереходВверх,ТабПарам);
			ВызватьИсключение Стр;
		КонецПопытки;	
	КонецЕсли;	 
	
	
	Если НЕ ПолучилосьПерейти Тогда
		Стр = ПолучитьОшибкуПерехода(ИмяТЧ,ОшибкаПереходВниз,ОшибкаПереходВверх,ТабПарам);
		ВызватьИсключение Стр;
	КонецЕсли;	
	
	СделатьДействияПриЗаписиHTML("толькофрейм");
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСтрокеТаблицы(ИмяТЧ, ОписаниеСтроки,ТабПарам) Экспорт
	
	ТаблицаСписок = НайтиТЧПоИмени(ИмяТЧ);
	ТаблицаСписок.Активизировать();
	
	СделатьДействияПриЗаписиВидео("толькофрейм");
	
	ОшибкаПереходВниз  = "";
	ОшибкаПереходВверх = "";
		
	ПолучилосьПерейти = СделатьПереход(ТаблицаСписок,ОписаниеСтроки,ОшибкаПереходВниз,ОшибкаПереходВверх);
	Если НЕ ПолучилосьПерейти Тогда
		Попытка
			//Возможно, это  ошибка платформы. Такое бывает с таблицами значений в УФ. Смотри https://github.com/silverbulleters/vanessa-behavior/issues/342
			//Делаем обход проблемы
			ТаблицаСписок.ПерейтиКПервойСтроке();
			ПолучилосьПерейти = СделатьПереход(ТаблицаСписок,ОписаниеСтроки,ОшибкаПереходВниз,ОшибкаПереходВверх);
		Исключение
			Стр = ПолучитьОшибкуПерехода(ИмяТЧ,ОшибкаПереходВниз,ОшибкаПереходВверх,ТабПарам);
			ВызватьИсключение Стр;
		КонецПопытки;	
	КонецЕсли;	 
	
	
	Если НЕ ПолучилосьПерейти Тогда
		Стр = ПолучитьОшибкуПерехода(ИмяТЧ,ОшибкаПереходВниз,ОшибкаПереходВверх,ТабПарам);
		ВызватьИсключение Стр;
	КонецЕсли;	
	
	СделатьДействияПриЗаписиHTML("толькофрейм");
	
КонецПроцедуры

&НаКлиенте
//И в таблице "Таблица" я перехожу к строке содержащей подстроки
//@ВТаблицеЯПерехожуКСтрокеСодержащейПодстроки(Парам01,ТабПарам)
Процедура ВТаблицеЯПерехожуКСтрокеСодержащейПодстроки(ИмяТЧ, ТабПарам,СравнениеПоШаблону = Ложь) Экспорт
	// Проверим корректность фильтра по значениям колонок.
	Ванесса.ПроверитьРавенство(ТабПарам.Количество(),2,"Строка должна быть описана таблицей с двумя строками.");
	
	СтрокаОшибки = "";
	БылаОшибка = Ложь;
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			ТЧ                = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
			ТаблицаTestclient = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ);
			ФильтрПоКолонкам  = ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам);
			
			// Проверим, что все указанные в фильтре колонки существуют в таблице.
			Если ТаблицаTestclient.Количество() > 0 Тогда
				ОписаниеСтроки = ТаблицаTestclient[0];
				
				Для Каждого ЭлементФильтра Из ФильтрПоКолонкам Цикл
					Если ОписаниеСтроки[ЭлементФильтра.Ключ] = Неопределено Тогда
						ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> отсутствует колонка <%2>, указанная в параметрах.");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ЭлементФильтра.Ключ); 
						ВызватьИсключение ТекстСообщения;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			//Ванесса.ПосмотретьЗначение(ТаблицаTestclient);
			
			// Переберем строки и найдем ту, которая полностью соответствует фильтру
			ОписаниеПодходящейСтроки = Неопределено;
			Для Каждого ЗначенияСтрокиТаблицы Из ТаблицаTestclient Цикл
				ВсеЗначенияСовпали = Истина;
				Для Каждого ЭлементФильтра Из ФильтрПоКолонкам Цикл
					ЗначениеКолонкиTesClient = ЗначенияСтрокиТаблицы[ЭлементФильтра.Ключ];
					Если СравнениеПоШаблону Тогда
						Если НЕ Ванесса.СтрокаСоответствуетШаблону(ЗначениеКолонкиTesClient, ЭлементФильтра.Значение) Тогда
							ВсеЗначенияСовпали = Ложь;
						КонецЕсли;	 
					Иначе	
						Если ЗначениеКолонкиTesClient = Неопределено
							ИЛИ Найти(ЗначениеКолонкиTesClient, ЭлементФильтра.Значение) = 0 Тогда
							
							ВсеЗначенияСовпали = Ложь;
							Прервать;
						КонецЕсли;
					КонецЕсли;	 
				КонецЦикла;
				
				Если ВсеЗначенияСовпали Тогда
					ОписаниеПодходящейСтроки = ЗначенияСтрокиТаблицы;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ОписаниеПодходящейСтроки <> Неопределено Тогда
				ПерейтиКСтрокеТаблицы(ИмяТЧ, ОписаниеПодходящейСтроки,ТабПарам);
			Иначе
				ОшибкаПереходВниз  = "";
				ОшибкаПереходВверх = "";
				СтрокаОшибки = ПолучитьОшибкуПерехода(ИмяТЧ,ОшибкаПереходВниз,ОшибкаПереходВверх,ТабПарам);
				ВызватьИсключение СтрокаОшибки;
			КонецЕсли;
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		Иначе
			Ванесса.sleep(1);
		КонецЕсли;	 
		
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И в таблице "Таблица" я перехожу к строке по шаблону
//@ВТаблицеЯПерехожуКСтрокеПоШаблону(Парам01,ТабПарам)
Процедура ВТаблицеЯПерехожуКСтрокеПоШаблону(ИмяТЧ, ТабПарам) Экспорт
	ВТаблицеЯПерехожуКСтрокеСодержащейПодстроки(ИмяТЧ,ТабПарам,Истина);
КонецПроцедуры


&НаКлиенте
//В таблице "Список" я перехожу к строке:
//@ВТаблицеЯПерехожуКСтроке(Парам01,ТабПарам)
Процедура ВТаблицеЯПерехожуКСтроке(ИмяТЧ,ТабПарам,ПереключитьВыделение = Ложь) Экспорт
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Строка должна быть описана таблицей с двумя строками.");
	Ванесса.ПроверитьРавенство(ТабПарам.Количество(),2,ТекстСообщения);
	
	ТаблицаСписок = НайтиТЧПоИмени(ИмяТЧ);
	ТаблицаСписок.Активизировать();
	СделатьДействияПриЗаписиВидео("толькофрейм");
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Таблица",ТаблицаСписок);
	ДопПараметры.Вставить("ПерводСтроки",Истина);
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		ОписаниеСтроки = ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам,ТаблицаСписок.Имя,ДопПараметры);
		
		ОшибкаПереходВниз  = "";
		ОшибкаПереходВверх = "";
		БылаОшибка = Ложь;
		ПолучилосьПерейти = Ложь;
		
		Попытка
			ПолучилосьПерейти = СделатьПереход(ТаблицаСписок,ОписаниеСтроки,ОшибкаПереходВниз,ОшибкаПереходВверх,ПереключитьВыделение);
			Если НЕ ПолучилосьПерейти Тогда
				Попытка
					//Возможно, это  ошибка платформы. Такое бывает с таблицами значений в УФ. Смотри https://github.com/silverbulleters/vanessa-behavior/issues/342
					//Делаем обход проблемы
					ТаблицаСписок.ПерейтиКПервойСтроке();
					ПолучилосьПерейти = СделатьПереход(ТаблицаСписок,ОписаниеСтроки,ОшибкаПереходВниз,ОшибкаПереходВверх,ПереключитьВыделение);
				Исключение
					Стр = ПолучитьОшибкуПерехода(ИмяТЧ,ОшибкаПереходВниз,ОшибкаПереходВверх,ТабПарам);
					ВызватьИсключение Стр;
				КонецПопытки;	
			КонецЕсли;	 
		Исключение
			БылаОшибка = Истина;
		КонецПопытки;
		
		Если БылаОшибка или (НЕ ПолучилосьПерейти) Тогда
			Ванесса.sleep(1);
			Продолжить;
		КонецЕсли;	 
		
		//значит получилось перейти к строке
		Прервать;
	КонецЦикла;	
	
	Если НЕ ПолучилосьПерейти Тогда
		ДопПараметры = Новый Структура;
		Попытка
			ЗначениеТЧ = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТаблицаСписок,ДопПараметры);
		Исключение
			ЗначениеТЧ = Неопределено;
		КонецПопытки;
		
		Если ЗначениеТЧ <> Неопределено Тогда
			МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
			Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,"ТекущееЗначениеТаблицы");
		КонецЕсли;	 
		
		Стр = ПолучитьОшибкуПерехода(ИмяТЧ,ОшибкаПереходВниз,ОшибкаПереходВверх,ТабПарам);
		
		ТекстСообщения = "";
		КоличествоРешений = 0;
		Если ТабПарам[0].Количество() > 1 Тогда
			//попробуем найти проблемную колонку, если она одна
			Для Ккк = 1 По ТабПарам[0].Количество() Цикл
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("ИсключитьКолонку",Ккк);
				ОписаниеСтроки = ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам,ТаблицаСписок.Имя,ДопПараметры);
				
				ПолучилосьПерейти = СделатьПереход(ТаблицаСписок,ОписаниеСтроки,ОшибкаПереходВниз,ОшибкаПереходВверх,ПереключитьВыделение);
				Если НЕ ПолучилосьПерейти Тогда
					Попытка
						//Возможно, это  ошибка платформы. Такое бывает с таблицами значений в УФ. Смотри https://github.com/silverbulleters/vanessa-behavior/issues/342
						//Делаем обход проблемы
						ТаблицаСписок.ПерейтиКПервойСтроке();
						ПолучилосьПерейти = СделатьПереход(ТаблицаСписок,ОписаниеСтроки,ОшибкаПереходВниз,ОшибкаПереходВверх,ПереключитьВыделение);
					Исключение
						//значит эта не та комбинация колонок
					КонецПопытки;	
				КонецЕсли;	 
				
				Если ПолучилосьПерейти Тогда
					ИмяКолонки      = ТабПарам[0][XMLСтрока("Кол" + Ккк)];
					ЗначениеКолонки = ТабПарам[1][XMLСтрока("Кол" + Ккк)];
					ТекстСообщения  = Ванесса.ПолучитьТекстСообщенияПользователю("Не найдено значение <%1> из колонки <%2>.");
					ТекстСообщения  = СтрЗаменить(ТекстСообщения,"%1",ЗначениеКолонки); 
					ТекстСообщения  = СтрЗаменить(ТекстСообщения,"%2",ИмяКолонки); 
					КоличествоРешений = КоличествоРешений + 1;
				КонецЕсли;	 
				
			КонецЦикла;	
		КонецЕсли;	 
		
		Если КоличествоРешений = 1 Тогда
			Стр = Стр +Символы.ПС + ТекстСообщения;
		КонецЕсли;	 
		
		
		ВызватьИсключение Стр;
	КонецЕсли;	
	
	СделатьДействияПриЗаписиHTML("толькофрейм");
КонецПроцедуры

&НаКлиенте
//В таблице "Список" я перехожу к первой строке
//@ВТаблицеЯПерехожуКПервойСтроке(Парам01)
Процедура ВТаблицеЯПерехожуКПервойСтроке(ИмяТЧ) Экспорт
	Таблица = НайтиТЧПоИмени(ИмяТЧ);
	
	Таблица.Активизировать();
	СделатьДействияПриЗаписиВидео("толькофрейм");
	
	Таблица.ПерейтиКПервойСтроке();
КонецПроцедуры


&НаКлиенте
//В таблице "Список" я перехожу к последней строке
//@ВТаблицеЯПерехожуКПоследнейСтроке(Парам01)
Процедура ВТаблицеЯПерехожуКПоследнейСтроке(ИмяТЧ) Экспорт
	Таблица = НайтиТЧПоИмени(ИмяТЧ);
	
	Таблица.Активизировать();
	СделатьДействияПриЗаписиВидео("толькофрейм");
	
	Таблица.ПерейтиКПоследнейСтроке();
КонецПроцедуры

&НаКлиенте
//В таблице "Список" я перехожу к предыдущей строке
//@ВТаблицеЯПерехожуКПредыдущейСтроке(Парам01)
Процедура ВТаблицеЯПерехожуКПредыдущейСтроке(ИмяТЧ) Экспорт
	Таблица = НайтиТЧПоИмени(ИмяТЧ);
	
	Таблица.Активизировать();
	СделатьДействияПриЗаписиВидео("толькофрейм");
	
	Таблица.ПерейтиКПредыдущейСтроке();
КонецПроцедуры

&НаКлиенте
//В таблице "Список" я перехожу к следующей строке
//@ВТаблицеЯПерехожуКСледующейСтроке(Парам01)
Процедура ВТаблицеЯПерехожуКСледующейСтроке(ИмяТЧ) Экспорт
	Таблица = НайтиТЧПоИмени(ИмяТЧ);
	
	Таблица.Активизировать();
	СделатьДействияПриЗаписиВидео("толькофрейм");
	
	Таблица.ПерейтиКСледующейСтроке();
КонецПроцедуры



&НаКлиенте
//В таблице "Список" я добавляю строку
//@ВТаблицеЯДобавляюСтроку(Парам01)
Процедура ВТаблицеЯДобавляюСтроку(ИмяТЧ) Экспорт
	Таблица = НайтиТЧПоИмени(ИмяТЧ);
	
	Таблица.Активизировать();
	СделатьДействияПриЗаписиВидео("толькофрейм");
	
	Таблица.ДобавитьСтроку();
КонецПроцедуры

&НаКлиенте
//В таблице "Список" я удаляю строку
//@ВТаблицеЯУдаляюСтроку(Парам01)
Процедура ВТаблицеЯУдаляюСтроку(ИмяТЧ) Экспорт
	Таблица = НайтиТЧПоИмени(ИмяТЧ);
	
	Таблица.Активизировать();
	СделатьДействияПриЗаписиВидео("толькофрейм");
	
	Таблица.УдалитьСтроку();
КонецПроцедуры









&НаКлиенте
//В форме "Справочник1" в таблице "Список" я разворачиваю строку:
//@ВФормеВТаблицеЯРазворачиваюСтроку(Парам01,Парам02,ТабПарам)
Процедура ВФормеВТаблицеЯРазворачиваюСтроку(ИмяФормы,ИмяТЧ,ТабПарам) Экспорт
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Строка должна быть описана таблицей с двумя строками.");
	Ванесса.ПроверитьРавенство(ТабПарам.Количество(),2,ТекстСообщения);
	
	
	ВФормеВТаблицеЯПерехожуКСтроке(ИмяФормы,ИмяТЧ,ТабПарам);
	
	НужнаяФорма = НайтиФормуПоЗаголовку(ИмяФормы);
	
	Если НужнаяФорма = Неопределено Тогда
		Если НужнаяФорма = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Форма с заголовком <%1> не найдена.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФормы); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	ТаблицаСписок = НайтиТЧПоИмени(ИмяТЧ,НужнаяФорма);
	
	ТаблицаСписок.Активизировать();
	
	СделатьДействияПриЗаписиВидео("толькофрейм");
	
	ОписаниеСтроки = ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам);
	
	Если Не ТаблицаСписок.Развернут() Тогда
		ТаблицаСписок.Развернуть(ОписаниеСтроки);
	КонецЕсли;	 
	
	СделатьДействияПриЗаписиHTML("толькофрейм");
КонецПроцедуры



&НаКлиенте
//В таблице "Список" я разворачиваю строку:
//@ВТаблицеЯРазворачиваюСтроку(Парам01,Парам02,ТабПарам)
Процедура ВТаблицеЯРазворачиваюСтроку(ИмяТЧ,ТабПарам,СПодчиненными = Ложь) Экспорт
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Строка должна быть описана таблицей с двумя строками.");
	Ванесса.ПроверитьРавенство(ТабПарам.Количество(),2,ТекстСообщения);
	
	ВТаблицеЯПерехожуКСтроке(ИмяТЧ,ТабПарам);
	
	ТаблицаСписок = НайтиТЧПоИмени(ИмяТЧ);
	
	ТаблицаСписок.Активизировать();
	
	СделатьДействияПриЗаписиВидео("толькофрейм");
	
	ОписаниеСтроки = ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам);
	
	Если Не ТаблицаСписок.Развернут() Тогда
		Если СПодчиненными Тогда
			ТаблицаСписок.Развернуть(ОписаниеСтроки,Истина);
		Иначе	
			ТаблицаСписок.Развернуть(ОписаниеСтроки);
		КонецЕсли;	 
	КонецЕсли;	 
	
	СделатьДействияПриЗаписиHTML("толькофрейм");
КонецПроцедуры

&НаКлиенте
//В таблице "Список" я разворачиваю строку с подчиненными:
//@ВТаблицеЯРазворачиваюСтрокуСПодчиненными(Парам01,Парам02,ТабПарам)
Процедура ВТаблицеЯРазворачиваюСтрокуСПодчиненными(ИмяТЧ,ТабПарам) Экспорт
	ВТаблицеЯРазворачиваюСтроку(ИмяТЧ,ТабПарам,Истина);
КонецПроцедуры

&НаКлиенте
//В таблице "Список" я разворачиваю текущую строку:
//@ВТаблицеЯРазворачиваюТекущуюСтроку(Парам01)
Процедура ВТаблицеЯРазворачиваюТекущуюСтроку(ИмяТЧ,СПодчиненными = Ложь) Экспорт
	ТаблицаСписок = НайтиТЧПоИмени(ИмяТЧ);
	ТаблицаСписок.Активизировать();
	СделатьДействияПриЗаписиВидео("толькофрейм");
	
	Если Не ТаблицаСписок.Развернут() Тогда
		Если СПодчиненными Тогда
			ТаблицаСписок.Развернуть(,Истина);
		Иначе	
			ТаблицаСписок.Развернуть();
		КонецЕсли;	 
	КонецЕсли;	 
	
	СделатьДействияПриЗаписиHTML("толькофрейм");
КонецПроцедуры

&НаКлиенте
//В таблице "Список" я разворачиваю текущую строку с подчиненными:
//@ВТаблицеЯРазворачиваюТекущуюСтрокуСПодчиненными(Парам01)
Процедура ВТаблицеЯРазворачиваюТекущуюСтрокуСПодчиненными(ИмяТЧ) Экспорт
	ВТаблицеЯРазворачиваюТекущуюСтроку(ИмяТЧ,Истина);
КонецПроцедуры




&НаКлиенте
//В форме "Справочник1" в таблице "Список" я сворачиваю строку:
//@ВФормеВТаблицеЯСворачиваюСтроку(Парам01,Парам02,ТабПарам)
Процедура ВФормеВТаблицеЯСворачиваюСтроку(ИмяФормы,ИмяТЧ,ТабПарам) Экспорт
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Строка должна быть описана таблицей с двумя строками.");
	Ванесса.ПроверитьРавенство(ТабПарам.Количество(),2,ТекстСообщения);
	
	ВФормеВТаблицеЯПерехожуКСтроке(ИмяФормы,ИмяТЧ,ТабПарам);
	
	
	НужнаяФорма = НайтиФормуПоЗаголовку(ИмяФормы);
	
	Если НужнаяФорма = Неопределено Тогда
		Если НужнаяФорма = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Форма с заголовком <%1> не найдена.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФормы); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	ТаблицаСписок = НайтиТЧПоИмени(ИмяТЧ,НужнаяФорма);
	
	ТаблицаСписок.Активизировать();
	
	СделатьДействияПриЗаписиВидео("толькофрейм");
	
	ОписаниеСтроки = ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам);
	
	Если ТаблицаСписок.Развернут() Тогда
		ТаблицаСписок.Свернуть(ОписаниеСтроки);
	КонецЕсли;	 
	
	СделатьДействияПриЗаписиHTML("толькофрейм");
	
КонецПроцедуры

&НаКлиенте
//В таблице "Список" я сворачиваю строку:
//@ВТаблицеЯСворачиваюСтроку(Парам01,Парам02,ТабПарам)
Процедура ВТаблицеЯСворачиваюСтроку(ИмяТЧ,ТабПарам) Экспорт
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Строка должна быть описана таблицей с двумя строками.");
	Ванесса.ПроверитьРавенство(ТабПарам.Количество(),2,ТекстСообщения);
	
	ВТаблицеЯПерехожуКСтроке(ИмяТЧ,ТабПарам);
	
	ТаблицаСписок = НайтиТЧПоИмени(ИмяТЧ);
	
	ТаблицаСписок.Активизировать();
	
	СделатьДействияПриЗаписиВидео("толькофрейм");
	
	ОписаниеСтроки = ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам);
	
	Если ТаблицаСписок.Развернут() Тогда
		ТаблицаСписок.Свернуть(ОписаниеСтроки);
	КонецЕсли;	 
	
	СделатьДействияПриЗаписиHTML("толькофрейм");
	
КонецПроцедуры

&НаКлиенте
//В таблице "Список" я сворачиваю теукщую строку:
//@ВТаблицеЯСворачиваюТекущуюСтроку(Парам01)
Процедура ВТаблицеЯСворачиваюТекущуюСтроку(ИмяТЧ) Экспорт
	ТаблицаСписок = НайтиТЧПоИмени(ИмяТЧ);
	ТаблицаСписок.Активизировать();
	СделатьДействияПриЗаписиВидео("толькофрейм");
	
	Если ТаблицаСписок.Развернут() Тогда
		ТаблицаСписок.Свернуть();
	КонецЕсли;	 
	
	СделатьДействияПриЗаписиHTML("толькофрейм");
КонецПроцедуры




&НаКлиенте
//"В форме "Справочник1" в таблице "Список" я выбираю текущую строку"
//@ВФормеВТЧЯВыбираюТекущуюСтроку(Парам01,Парам02)
Процедура ВФормеВТЧЯВыбираюТекущуюСтроку(ИмяФормы,ИмяТЧ) Экспорт
	НужнаяФорма            = НайтиФормуПоЗаголовку(ИмяФормы);
	ТЧ                     =  НайтиТЧПоИмени(ИмяТЧ,НужнаяФорма);
	ТЧ.Активизировать();
	ТЧ.Выбрать();
КонецПроцедуры

&НаКлиенте
//"В таблице "Список" я выбираю текущую строку"
//@ВТаблицеЯВыбираюТекущуюСтроку(Парам01,Парам02)
Процедура ВТаблицеЯВыбираюТекущуюСтроку(ИмяТЧ) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	
	Попытка
		ТЧ.ПолучитьТекстЯчейки();
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> нет строк для выбора.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	ТЧ.Выбрать();
	
	Если Ванесса.БезопасноеВыполнениеШагов() Тогда
		//чтобы сработали оповещения форм
		Ванесса.Sleep(1);
	КонецЕсли;	 
	
	//Форма могла закрыться
	Ванесса.ОбработатьСменуАктивногоОкна();
КонецПроцедуры






&НаКлиенте
//В открытой форме я открываю выпадающий список с заголовком "Реквизит1"
//@ВОткрытойФормеЯОткрываюВыпадающийСписокСЗаголовком(Парам01)
Процедура ВОткрытойФормеЯОткрываюВыпадающийСписокСЗаголовком(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ТекущийВыпадающийСписок = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"));
	Если ТекущийВыпадающийСписок = Неопределено Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Выпадающий список с именем <%1> не найден.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Выпадающий список с заголовком <%1> не найден.");
		КонецЕсли;	 
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	ТекущийВыпадающийСписок.Активизировать();
	СделатьДействияПриЗаписиВидео();
	СделатьДействияПриЗаписиHTML();
	
	ТекущийВыпадающийСписок.ОткрытьВыпадающийСписок();
	Контекст.Вставить("ТекущийВыпадающийСписок",ТекущийВыпадающийСписок);
КонецПроцедуры

&НаКлиенте
//В открытой форме я открываю выпадающий список "Реквизит1"
//@ВОткрытойФормеЯОткрываюВыпадающийСписок(Парам01)
Процедура ВОткрытойФормеЯОткрываюВыпадающийСписок(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯОткрываюВыпадающийСписокСЗаголовком(ИмяРеквизита,ИскатьПоИмени);
КонецПроцедуры






&НаКлиенте
//В открытой форме я открываю выпадающий список с именем "Реквизит1"
//@ВОткрытойФормеЯОткрываюВыпадающийСписокСИменем(Парам01)
Процедура ВОткрытойФормеЯОткрываюВыпадающийСписокСИменем(ИмяРеквизита) Экспорт
	ВОткрытойФормеЯОткрываюВыпадающийСписокСЗаголовком(ИмяРеквизита,Истина);
КонецПроцедуры


&НаКлиенте
//В открытой форме я выбираю значение реквизита с заголовком "Реквизит2" из формы списка
//@ВОткрытойФормеЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка(Парам01)
Процедура ВОткрытойФормеЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	ТекущийВыпадающийСписок = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"));
	Если ТекущийВыпадающийСписок = Неопределено Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Выпадающий список с именем <%1> не найден.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Выпадающий список с заголовком <%1> не найден.");
		КонецЕсли;	
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ТекущийВыпадающийСписок.Активизировать();
	СделатьДействияПриЗаписиВидео();
	СделатьДействияПриЗаписиHTML();
	
	ТекущийВыпадающийСписок.Выбрать();
КонецПроцедуры

&НаКлиенте
//В открытой форме я выбираю значение реквизита "Реквизит2" из формы списка
//@ВОткрытойФормеЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01)
Процедура ВОткрытойФормеЯВыбираюЗначениеРеквизитаИзФормыСписка(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка(ИмяРеквизита,ИскатьПоИмени);
КонецПроцедуры




&НаКлиенте
//В открытой форме я выбираю значение реквизита с именем "Реквизит2" из формы списка
//@ВОткрытойФормеЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01)
Процедура ВОткрытойФормеЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(ИмяРеквизита) Экспорт

	ВОткрытойФормеЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка(ИмяРеквизита,Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКорректныйТекстДляВставкиВПоле(Знач Текст)
	Если ТипЗнч(Текст) = Тип("Массив") Тогда
		НовыйТекст = "";
		КолЗначений = Текст.Количество();
		Счетчик = 0;
		Для Каждого Элем Из Текст Цикл
			Счетчик = Счетчик + 1;
			Если Счетчик < КолЗначений Тогда
				НовыйТекст = НовыйТекст + Элем.Кол1 + Символы.ПС;
			Иначе	
				НовыйТекст = НовыйТекст + Элем.Кол1;
			КонецЕсли;	 
		КонецЦикла;	
		
		Текст = НовыйТекст;
	КонецЕсли;	 
	
	Возврат Ванесса.ПолучитьКорректноеЗначениеДляРаботыСПолем(Текст);
КонецФункции	

&НаКлиенте
//В открытой форме в поле с заголовком "Реквизит строка" я ввожу текст "тест"
//@ВОткрытойФормеВПолеСЗаголовкомЯВвожуТекст(Парам01,Парам02)
Процедура ВОткрытойФормеВПолеСЗаголовкомЯВвожуТекст(ИмяРеквизита,Текст,ИскатьПоИмени = Ложь) Экспорт
	
	//Текст может быть строкой или массивом структур, где данные будут браться из первой колонки.
	Текст = ПолучитьКорректныйТекстДляВставкиВПоле(Текст);
	Текст = Ванесса.ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(Текст);

	ТипПоля = Тип("ТестируемоеПолеФормы");
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИскатьТолькоПоляВКоторыеВозможенВводТекста",Истина);
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, ТипПоля,ДопПараметры);
	ПолеРеквизит.Активизировать();
	
	СделатьДействияПриЗаписиВидео();
	
	Если ПолеРеквизит.Вид = ВидПоляФормы.ПолеФорматированногоДокумента или ПолеРеквизит.Вид = ВидПоляФормы.ПолеHTMLДокумента Тогда
		ПолеРеквизит.ВвестиHTML(Текст);
	Иначе	
		Если Текст = "" Тогда
			ПолеРеквизит.Очистить();
		Иначе	
			//ПолеРеквизит.ВвестиТекст(Текст);
			Ванесса.ВвестиВПолеТекст(ПолеРеквизит,Текст);
		КонецЕсли;	 
	КонецЕсли;

	СделатьДействияПриЗаписиHTML();
	
КонецПроцедуры

&НаКлиенте
//В открытой форме в поле "Реквизит строка" я ввожу текст "тест"
//@ВОткрытойФормеВПолеЯВвожуТекст(Парам01,Парам02)
Процедура ВОткрытойФормеВПолеЯВвожуТекст(ИмяРеквизита,Текст,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеВПолеСЗаголовкомЯВвожуТекст(ИмяРеквизита,Текст,ИскатьПоИмени);
КонецПроцедуры




&НаКлиенте
//В открытой форме в поле с именем "Реквизит строка" я ввожу текст "тест"
//@ВОткрытойФормеВПолеСИменемЯВвожуТекст(Парам01,Парам02)
Процедура ВОткрытойФормеВПолеСИменемЯВвожуТекст(ИмяРеквизита,Текст) Экспорт
	ВОткрытойФормеВПолеСЗаголовкомЯВвожуТекст(ИмяРеквизита,Текст,Истина);
КонецПроцедуры


&НаКлиенте
//В открытой форме я нажимаю на кнопку с заголовком "Записать и закрыть"
//@ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком(Парам01)
Процедура ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком(ИмяКнопки,ИскатьПоИмени = Ложь) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИскатьМодальныйДиалог",Истина);
	
	//Для обхода бага платформы с поиском активных окон на старых версиях платформы.
	ДопПараметры.Вставить("ЗапомнитьАктивноеОкно",Ложь);
	
	ТекстОшибки = "";
	
	НадоВызватьИсключение = Истина;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			МассивФорм = Ванесса.НайтиФормыТекущегоОкнаTestClient(ДопПараметры);
			НомерФормы = 0;
			Для Каждого ТекущаяФорма Из МассивФорм Цикл
				НомерФормы = НомерФормы + 1;
				Нашли = Ложь;
				Кнопка = Неопределено;
				Попытка
					Если ИскатьПоИмени Тогда
						Кнопка = ТекущаяФорма.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,ИмяКнопки);
					Иначе	
						МассивКнопок = ТекущаяФорма.НайтиОбъекты(Тип("ТестируемаяКнопкаФормы"),ИмяКнопки);
						Если МассивКнопок.Количество() > 1 Тогда
							МассивКнопок = Новый Массив(МассивКнопок);
							Ванесса.УдалитьНедоступныеДляИнтерактивнойРаботыПользователюЭлементыИзМассиваЭлементовTestClient(МассивКнопок,Неопределено);
							Если МассивКнопок.Количество() = 1 Тогда
								Кнопка = МассивКнопок[0];
							КонецЕсли;	 
						КонецЕсли;	 
					КонецЕсли;	 
				Исключение
				КонецПопытки;
				
				Если Кнопка = Неопределено Тогда
					Если ИскатьПоИмени Тогда
						ТекстОшибки = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка с именем <%1> не найдена. ТекущееОкно=%2");
					Иначе	
						ТекстОшибки = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка/команда с заголовком <%1> не найдена. ТекущееОкно=%2");
					КонецЕсли;	
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%1",ИмяКнопки); 
					Если ДопПараметры.Свойство("АктивноеОкно") Тогда
						Если ДопПараметры.АктивноеОкно <> Неопределено Тогда
							ТекстОшибки = СтрЗаменить(ТекстОшибки,"%2",ДопПараметры.АктивноеОкно.Заголовок); 
						КонецЕсли;	 
					КонецЕсли;	 
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%2",""); 
				Иначе	
					Нашли = Истина;
				КонецЕсли;	 
				
				
				Если НЕ Нашли Тогда //для модальных диалогов
					ТекущаяФорма = НайтиТекущуюФорму();
					
					Кнопка = Неопределено;
					Попытка
						Если ИскатьПоИмени Тогда
							Кнопка = ТекущаяФорма.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,ИмяКнопки);
						Иначе	
							Кнопка = ТекущаяФорма.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),ИмяКнопки);
						КонецЕсли;	 
					Исключение
					КонецПопытки;
					
					Если Кнопка <> Неопределено Тогда
						Нашли = Истина;
					КонецЕсли;	 
				КонецЕсли;	 
				
				Если НЕ Нашли Тогда
					Если ДопПараметры.Свойство("АктивноеОкно") Тогда
						Если ДопПараметры.АктивноеОкно <> Неопределено Тогда
							Если Ванесса.ЭтоЗаголовокОкнаМодальногоДиалога(ДопПараметры.АктивноеОкно.Заголовок) Тогда
								//обход бага модальных окон
								//иногда платформа отдаёт уже закрытое окно предупреждения, которого реально нет
								ОкнаПредупреждений = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"),"1С:Предприятие");
								Для Каждого ОкноПредупреждения Из ОкнаПредупреждений Цикл
									Если ИскатьПоИмени Тогда
										Кнопка = ОкноПредупреждения.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,ИмяКнопки);
									Иначе	
										Кнопка = ОкноПредупреждения.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),ИмяКнопки);
									КонецЕсли;	
									
									Если Кнопка <> Неопределено Тогда
										Нашли = Истина;
										Прервать;
									КонецЕсли;	 
								КонецЦикла;	
							КонецЕсли;	 
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
				
				Если НЕ Нашли Тогда
					Ванесса.ОбработатьСменуАктивногоОкна();
					Если ИскатьПоИмени Тогда
						ТекстОшибки = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка с именем <%1> не найдена. ТекущееОкно=%2");
					Иначе	
						ТекстОшибки = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка/команда с заголовком <%1> не найдена. ТекущееОкно=%2");
					КонецЕсли;	
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%1",ИмяКнопки); 
					
					Если ДопПараметры.Свойство("АктивноеОкно") Тогда
						Если ДопПараметры.АктивноеОкно <> Неопределено Тогда
							ТекстОшибки = СтрЗаменить(ТекстОшибки,"%2",ДопПараметры.АктивноеОкно.Заголовок); 
						КонецЕсли;	 
					КонецЕсли;	 
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%2",""); 
				Иначе	
					НадоВызватьИсключение = Ложь;
					Прервать;
				КонецЕсли;	 
				
			КонецЦикла;	 
			
			Если НадоВызватьИсключение и (НомерФормы = МассивФорм.Количество()) Тогда
				//исключение буде вызвано в завершении процедуры если это необходимо
				Ванесса.sleep(1);
			Иначе	
				Прервать;
			КонецЕсли;	 

		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Ванесса.sleep(1);
			Ванесса.ОбработатьСменуАктивногоОкна();
		КонецПопытки;
		
	КонецЦикла;

	Если НадоВызватьИсключение Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 	
	
	ПолучилосьАктивизировать = АктивизироватьКнопку(Кнопка,ТекущаяФорма);
	                                           
	Если ПолучилосьАктивизировать Тогда
		СделатьДействияПриЗаписиВидео();
		СделатьДействияПриЗаписиHTML();
	КонецЕсли;	 
	
	ТекстОшибки        = "";
	ПолучилосьНажать   = Ложь;
	КоличествоПопыток  = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			Кнопка.Нажать();
			ПолучилосьНажать = Истина;
			Прервать;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Ванесса.sleep(1);
		КонецПопытки;
	КонецЦикла;	
	
	Если НЕ ПолучилосьНажать Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СбрасыватьЗафиксированнуюФорму",Истина);
	//параметр СбрасыватьЗафиксированнуюФорму должен быть Истина, иначе после нажатия на "Провести и закрыть", могут быть ошибки
	Ванесса.ОбработатьСменуАктивногоОкна(ДопПараметры);
КонецПроцедуры

&НаКлиенте
//В открытой форме я нажимаю на кнопку "Записать и закрыть"
//@ВОткрытойФормеЯНажимаюНаКнопку(Парам01)
Процедура ВОткрытойФормеЯНажимаюНаКнопку(ИмяКнопки,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком(ИмяКнопки,ИскатьПоИмени);
КонецПроцедуры







&НаКлиенте
Процедура НажтиеНаКнопку()
	Ванесса.ПереместитьКурсорМышиКАктивномуОбъекту();
	Ванесса.ПодсветитьАктивныйЭлементФормы();
	ТекущийЭлементДляРаботы.Нажать();
	Ванесса.ОбработатьСменуАктивногоОкна();
	Ванесса.ПродолжитьВыполнениеШагов();
КонецПроцедуры

&НаСервере
Функция ЭлементСправочника1СИменемЗаписалсяКорректноСервер(Наименование,ДопПараметры)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочник1.Ссылка
		|ИЗ
		|	Справочник.Справочник1 КАК Справочник1
		|ГДЕ
		|	Справочник1.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
		Если Ссылка.Реквизит1 <> Перечисления.Перечисление1.ЗначениеПеречисления1 Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$Реквизит1: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
		Если Ссылка.Реквизит2 <> Справочники.Справочник2.НайтиПоНаименованию("ТестовыйЭлемент21") Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$Реквизит2: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
		Если Ссылка.РеквизитЧисло <> 12.34 Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$РеквизитЧисло: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
		Если Ссылка.РеквизитДата <> '19810408' Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$РеквизитДата: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
		Если СокрЛП(Ссылка.РеквизитСтрока) <> "тест" Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$РеквизитСтрока: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
		Если НЕ Ссылка.РеквизитБулево Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$РеквизитБулево: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
		Если Ссылка.РеквизитПереключатель <> 1 Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$РеквизитПереключатель: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	
		
		СтрокаТЧ = Ссылка.ТабличнаяЧасть1[0];
		
		Если СтрокаТЧ.РеквизитЧисло <> 56.78 Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$ТЧ Реквизит1: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
		Если СокрЛП(СтрокаТЧ.РеквизитСтрока) <> "ТестСтрока" Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$ТЧ РеквизитСтрока: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
		Если СтрокаТЧ.РеквизитДата <> '19830911' Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$ТЧ РеквизитДата: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
		Если СтрокаТЧ.РеквизитСправочник <> Справочники.Справочник2.НайтиПоНаименованию("ТестовыйЭлемент21") Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$ТЧ РеквизитСправочник: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
		Если НЕ СтрокаТЧ.РеквизитБулево Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$ТЧ РеквизитБулево: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
		Если СтрокаТЧ.РеквизитСправочникВыборИзФормыСписка <> Справочники.Справочник2.НайтиПоНаименованию("ТестовыйЭлемент21") Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$ТЧ РеквизитСправочникВыборИзФормыСписка: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Истина;
КонецФункции	

&НаКлиенте
//Элемент Справочника1 с именем "Тестовый Элемент 1" записался корректно
//@ЭлементСправочника1СИменемЗаписалсяКорректно(Парам01)
Процедура ЭлементСправочника1СИменемЗаписалсяКорректно(Наименование) Экспорт
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Записался корректный элемент.");
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекстСообщенийПользователю",Ванесса.ДанныеПереводаСообщенийПользователю());
	Ванесса.ПроверитьРавенство(ЭлементСправочника1СИменемЗаписалсяКорректноСервер(Наименование,ДопПараметры),Истина,ТекстСообщения);
КонецПроцедуры





&НаКлиенте
//В открытой форме я изменяю флаг с заголовком "Реквизит булево"
//@ВОткрытойФормеЯИзменяюФлагСЗаголовком(Парам01)
Процедура ВОткрытойФормеЯИзменяюФлагСЗаголовком(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Истина);
	ДопПараметры.Вставить("ОставитьТолькоФлаги",Истина);
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"),ДопПараметры);
	Если ПолеРеквизит = Неопределено Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Флаг с именем <%1> не найден.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Флаг с заголовком <%1> не найден.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ПолеРеквизит.Активизировать();
	СделатьДействияПриЗаписиВидео();
	ПолеРеквизит.УстановитьОтметку();
	СделатьДействияПриЗаписиHTML();
КонецПроцедуры

&НаКлиенте
//В открытой форме я изменяю флаг "Реквизит булево"
//@ВОткрытойФормеЯИзменяюФлаг(Парам01)
Процедура ВОткрытойФормеЯИзменяюФлаг(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯИзменяюФлагСЗаголовком(ИмяРеквизита,ИскатьПоИмени);
КонецПроцедуры






&НаКлиенте
//В открытой форме я изменяю флаг с именем "Реквизит булево"
//@ВОткрытойФормеЯИзменяюФлагСИменем(Парам01)
Процедура ВОткрытойФормеЯИзменяюФлагСИменем(ИмяРеквизита) Экспорт
	ВОткрытойФормеЯИзменяюФлагСЗаголовком(ИмяРеквизита,Истина)
КонецПроцедуры



&НаКлиенте
//В открытой форме я меняю значение переключателя с заголовком "Реквизит переключатель" на "Первое значение"
//@ВОткрытойФормеЯМеняюЗначениеПереключателяСЗаголовкомНа(Парам01,Парам02)
Процедура ВОткрытойФормеЯМеняюЗначениеПереключателяСЗаголовкомНа(ИмяРеквизита,Значение,ИскатьПоИмени = Ложь) Экспорт
	//Значение может быть как строкой так и числом. Если число - то это номер значения, начиная с 0.
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Истина);
	ДопПараметры.Вставить("ОставитьТолькоПереключатели",Истина);
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"),ДопПараметры);
	Если ПолеРеквизит = Неопределено Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переключатель с именем <%1> не найден.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переключатель с заголовком <%1> не найден.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ПолеРеквизит.Активизировать();
	СделатьДействияПриЗаписиВидео();
	ПолеРеквизит.ВыбратьВариант(Значение);
	СделатьДействияПриЗаписиHTML();
КонецПроцедуры

&НаКлиенте
//В открытой форме я меняю значение переключателя "Реквизит переключатель" на "Первое значение"
//@ВОткрытойФормеЯМеняюЗначениеПереключателяНа(Парам01,Парам02)
Процедура ВОткрытойФормеЯМеняюЗначениеПереключателяНа(ИмяРеквизита,Значение,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯМеняюЗначениеПереключателяСЗаголовкомНа(ИмяРеквизита,Значение,ИскатьПоИмени);
КонецПроцедуры


&НаКлиенте
//В открытой форме я меняю значение переключателя с именем "Реквизит переключатель" на "Первое значение"
//@ВОткрытойФормеЯМеняюЗначениеПереключателяСИменемНа(Парам01,Парам02)
Процедура ВОткрытойФормеЯМеняюЗначениеПереключателяСИменемНа(ИмяРеквизита,Значение) Экспорт
	ВОткрытойФормеЯМеняюЗначениеПереключателяСЗаголовкомНа(ИмяРеквизита,Значение,Истина);	
КонецПроцедуры



&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я нажимаю на кнопку с заголовком "Добавить"
//@ВОткрытойФормеВТЧЯНажимаюНаКнопкуСЗаголовком(Парам01,Парам02)
Процедура ВОткрытойФормеВТЧЯНажимаюНаКнопкуСЗаголовком(ИмяТЧ,ИмяКнопки,ИскатьПоИмени = Ложь) Экспорт
	НашлиТЧ = Ложь;
	НашлиКнопку = Ложь;
	ПолучилосьНажатьКнопку = Ложь;
	
	ТекстОшибки = "";
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		НашлиКнопку = Ложь;
		НашлиТЧ = Ложь;
		ПолучилосьНажатьКнопку = Ложь;
		
		Попытка
			МассивФорм = Ванесса.НайтиФормыТекущегоОкнаTestClient();
			Для Каждого ТекущаяФорма Из МассивФорм Цикл
				ТЧ = ТекущаяФорма.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"),,ИмяТЧ);
				Если ТЧ = Неопределено Тогда
					Продолжить;
				КонецЕсли;	 
				
				НашлиТЧ = Истина;
				Контекст.Вставить("ТекущаяТЧ",ТЧ);
				
				Если ИскатьПоИмени Тогда
					Кнопка = ТЧ.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),, ИмяКнопки);
				Иначе	
					Кнопка = ТЧ.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), ИмяКнопки);
					
					Попытка
						Если Не ТЧ = Неопределено Тогда
							КоманднаяПанельФормы = ТЧ.ПолучитьКоманднуюПанель();
							
							Кнопка = КоманднаяПанельФормы.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), ИмяКнопки);
						КонецЕсли;	 
					Исключение
						
					КонецПопытки;
				КонецЕсли;	 
				
				Если Кнопка = Неопределено Тогда
					Продолжить;
				КонецЕсли;	 
				
				НашлиКнопку = Истина;
				
				ПолучилосьАктивизировать = АктивизироватьКнопку(Кнопка,ТекущаяФорма,ТЧ);
				Если ПолучилосьАктивизировать Тогда
					СделатьДействияПриЗаписиВидео();
					СделатьДействияПриЗаписиHTML();
				КонецЕсли;	 
				
				Кнопка.Нажать();
				Ванесса.ОбработатьСменуАктивногоОкна();
				ПолучилосьНажатьКнопку = Истина;
				Прервать;
			КонецЦикла;	 
			
			Если ПолучилосьНажатьКнопку Тогда
				Прервать;
			КонецЕсли;	 
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Ванесса.sleep(1);
		КонецПопытки;
	КонецЦикла;
	
	Если Не НашлиТЧ Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("ТЧ с именем <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстОшибки;
		КонецЕсли;	 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если НЕ НашлиКнопку Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка с именем <%1> не найдена.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка/команда с заголовком <%1> не найдена.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКнопки); 
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстОшибки;
		КонецЕсли;	 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если НЕ ПолучилосьНажатьКнопку Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось нажать на кнопку <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКнопки); 
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстОшибки;
		КонецЕсли;	 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я нажимаю на кнопку "Добавить"
//@ВОткрытойФормеВТЧЯНажимаюНаКнопку(Парам01,Парам02)
Процедура ВОткрытойФормеВТЧЯНажимаюНаКнопку(ИмяТЧ,ИмяКнопки,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеВТЧЯНажимаюНаКнопкуСЗаголовком(ИмяТЧ,ИмяКнопки,ИскатьПоИмени);
КонецПроцедуры



&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я нажимаю на кнопку с именем "Добавить"
//@ВОткрытойФормеВТЧЯНажимаюНаКнопкуСИменем(Парам01,Парам02)
Процедура ВОткрытойФормеВТЧЯНажимаюНаКнопкуСИменем(ИмяТЧ,ИмяКнопки) Экспорт
	ВОткрытойФормеВТЧЯНажимаюНаКнопкуСЗаголовком(ИмяТЧ,ИмяКнопки,Истина);
КонецПроцедуры



&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" в поле с заголовком "Реквизит число" я ввожу текст "54,00"
//@ВОткрытойФормеВТЧВПолеСЗаголовкомЯВвожуТекст(Парам01,Парам02,Парам03)
Процедура ВОткрытойФормеВТЧВПолеСЗаголовкомЯВвожуТекст(ИмяТЧ,ИмяРеквизита,Знач Текст,ИскатьПоИмени = Ложь) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	 
	
	Если ПолеРеквизит = Неопределено Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с именем <%1> не найдено.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> не найдено.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита);
	Текст = ПолучитьКорректныйТекстДляВставкиВПоле(Текст);
	
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			ПолеРеквизит.Активизировать();
			
			ТаблицаВРежимеРедактирования = ТЧ.ТекущийРежимРедактирование();
			Если Не ТаблицаВРежимеРедактирования Тогда
				ТЧ.ИзменитьСтроку();
			КонецЕсли;	 
			
			СделатьДействияПриЗаписиВидео();
			//ПолеРеквизит.ВвестиТекст(Текст);
			Ванесса.ВвестиВПолеТекст(ПолеРеквизит,Текст);
			СделатьДействияПриЗаписиHTML();
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Ванесса.УстановитьТекстИнструкции("И в поле """ + ИмяРеквизита + """ я ввожу """ + Текст + """");
КонецПроцедуры

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" в поле "Реквизит число" я ввожу текст "54,00"
//@ВОткрытойФормеВТЧВПолеЯВвожуТекст(Парам01,Парам02,Парам03)
Процедура ВОткрытойФормеВТЧВПолеЯВвожуТекст(ИмяТЧ,ИмяРеквизита,Текст) Экспорт
	ВОткрытойФормеВТЧВПолеСЗаголовкомЯВвожуТекст(ИмяТЧ,ИмяРеквизита,Текст);
КонецПроцедуры

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" в поле с именем "Реквизит число" я ввожу текст "54,00"
//@ВОткрытойФормеВТЧВПолеСИменемЯВвожуТекст(Парам01,Парам02,Парам03)
Процедура ВОткрытойФормеВТЧВПолеСИменемЯВвожуТекст(ИмяТЧ,ИмяРеквизита,Текст) Экспорт
	ВОткрытойФормеВТЧВПолеСЗаголовкомЯВвожуТекст(ИмяТЧ,ИмяРеквизита,Текст,Истина);
КонецПроцедуры






&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" из выпадающего списка с заголовком "Реквизит справочник" я выбираю "ТестовыйЭлемент21"
//@ВОткрытойФормеВТЧИзВыпадающегоСпискаСЗаголовкомЯВыбираю(Парам01,Парам02,Парам03)
Процедура ВОткрытойФормеВТЧИзВыпадающегоСпискаСЗаголовкомЯВыбираю(ИмяТЧ,ИмяРеквизита,ВыбираемоеЗначение,ИскатьПоИмени = Ложь) Экспорт
	//Шаг будет вводить в поле текст, ожидать формирования выпадающего списка и затем выбирать первое значение из списка.
	
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	 
	
	Если ПолеРеквизит = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> не найдено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита);
	ПолеРеквизит.Активизировать();
	СделатьДействияПриЗаписиВидео("толькомышь");
	СделатьДействияПриЗаписиHTML("толькомышь");
	
	
	ДопПараметры = Новый Структура;
	СделатьВводПоСтрокеВПолеВВода(ТЧ,ИмяТЧ,ПолеРеквизит,ИмяРеквизита,ИскатьПоИмени,ВыбираемоеЗначение,ДопПараметры);
КонецПроцедуры

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" из выпадающего списка "Реквизит справочник" я выбираю "ТестовыйЭлемент21"
//@ВОткрытойФормеВТЧИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03)
Процедура ВОткрытойФормеВТЧИзВыпадающегоСпискаЯВыбираю(ИмяТЧ,ИмяРеквизита,ВыбираемоеЗначение,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеВТЧИзВыпадающегоСпискаСЗаголовкомЯВыбираю(ИмяТЧ,ИмяРеквизита,ВыбираемоеЗначение,ИскатьПоИмени);
КонецПроцедуры






&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" из выпадающего списка с заголовком "Реквизит справочник" я выбираю "ТестовыйЭлемент21" с выбором
//@ВОткрытойФормеВТЧИзВыпадающегоСпискаСЗаголовкомЯВыбираюСВыбором(Парам01,Парам02,Парам03)
Процедура ВОткрытойФормеВТЧИзВыпадающегоСпискаСЗаголовкомЯВыбираюСВыбором(ИмяТЧ,ИмяРеквизита,ВыбираемоеЗначение,ИскатьПоИмени = Ложь) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Если ПолеРеквизит = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> не найдено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита);
	ПолеРеквизит.Активизировать();
	СделатьДействияПриЗаписиВидео("толькомышь");
	СделатьДействияПриЗаписиHTML("толькомышь");
	
	
	ПолеРеквизит.Выбрать();
	ТаймаутОжидания = 10;
	ТаймаутОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(ТаймаутОжидания);
	ПолеРеквизит.ОжидатьФормированияВыпадающегоСписка(ТаймаутОжидания);
	ПолеРеквизит.ВыполнитьВыборИзСпискаВыбора(ВыбираемоеЗначение);
КонецПроцедуры

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" из выпадающего списка "Реквизит справочник" я выбираю "ТестовыйЭлемент21" с выбором
//@ВОткрытойФормеВТЧИзВыпадающегоСпискаЯВыбираюСВыбором(Парам01,Парам02,Парам03)
Процедура ВОткрытойФормеВТЧИзВыпадающегоСпискаЯВыбираюСВыбором(ИмяТЧ,ИмяРеквизита,ВыбираемоеЗначение) Экспорт
	ВОткрытойФормеВТЧИзВыпадающегоСпискаСЗаголовкомЯВыбираюСВыбором(ИмяТЧ,ИмяРеквизита,ВыбираемоеЗначение);
КонецПроцедуры




&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я изменяю флаг с заголовком "Реквизит булево"
//@ВОткрытойФормеВТЧЯИзменяюФлагСЗаголовком(Парам01,Парам02)
Процедура ВОткрытойФормеВТЧЯИзменяюФлагСЗаголовком(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	
	ТекстСообщения = "";
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			
			Если ИскатьПоИмени Тогда
				ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
			Иначе	
				ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
			КонецЕсли;	 
			
			Если ПолеРеквизит = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> не найдено.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита);
			ПолеРеквизит.Активизировать();
			
			//тут нет активного контрола
			//СделатьДействияПриЗаписиВидео();
			ПолеРеквизит.УстановитьОтметку();
			//СделатьДействияПриЗаписиHTML();
			
			Прервать;
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			Ванесса.sleep(1);
			БылаОшибка = Истина;
		КонецПопытки;
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я изменяю флаг "Реквизит булево"
//@ВОткрытойФормеВТЧЯИзменяюФлаг(Парам01,Парам02)
Процедура ВОткрытойФормеВТЧЯИзменяюФлаг(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеВТЧЯИзменяюФлагСЗаголовком(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени);
КонецПроцедуры






&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я выбираю значение реквизита с заголовком "Реквизит справочник выбор из формы списка" из формы списка
//@ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка(Парам01,Парам02)
Процедура ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	 
	
	Если ПолеРеквизит = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> не найдено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита);
	ПолеРеквизит.Активизировать();
	СделатьДействияПриЗаписиВидео();
	СделатьДействияПриЗаписиHTML();
	
	ТаблицаВРежимеРедактирования = ТЧ.ТекущийРежимРедактирование();
	Если Не ТаблицаВРежимеРедактирования Тогда
		ТЧ.ИзменитьСтроку();
	КонецЕсли;	 
	
	ПолеРеквизит.Выбрать();
КонецПроцедуры

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я выбираю значение реквизита "Реквизит справочник выбор из формы списка" из формы списка
//@ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01,Парам02)
Процедура ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаИзФормыСписка(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени);
КонецПроцедуры







&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я выбираю значение реквизита с именем "Реквизит справочник выбор из формы списка" из формы списка
//@ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01,Парам02)
Процедура ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(ИмяТЧ,ИмяРеквизита) Экспорт
	ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка(ИмяТЧ,ИмяРеквизита,Истина);
КонецПроцедуры


&НаКлиенте
//В форме "Справочник1" в таблице "ТабличнаяЧасть1" я завершаю редактирование строки
//@ВФормеВТЧЯЗавершаюРедактированиеСтроки(Парам01,Парам02)
Процедура ВФормеВТЧЯЗавершаюРедактированиеСтроки(ИмяФормы,ИмяТЧ) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	Если ТЧ.ТекущийРежимРедактирование() Тогда
		ТЧ.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//В таблице "ТабличнаяЧасть1" я завершаю редактирование строки
//@ВТЧЯЗавершаюРедактированиеСтроки(Парам01)
Процедура ВТЧЯЗавершаюРедактированиеСтроки(ИмяТЧ) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	Если ТЧ.ТекущийРежимРедактирование() Тогда
		ТЧ.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//В таблице "ТабличнаяЧасть1" я завершаю редактирование строки
//@ВТаблицеЯЗавершаюРедактированиеСтроки(Парам01)
Процедура ВТаблицеЯЗавершаюРедактированиеСтроки(ИмяТЧ) Экспорт
	ВТЧЯЗавершаюРедактированиеСтроки(ИмяТЧ);
КонецПроцедуры

&НаКлиенте
//Я завершаю редактирование строки
//@ЯЗавершаюРедактированиеСтроки()
Процедура ЯЗавершаюРедактированиеСтроки() Экспорт
	ТЧ = Контекст.ТекущаяТЧ;
	ТЧ.ЗакончитьРедактированиеСтроки(Ложь);
КонецПроцедуры




&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я нажимаю кнопку выбора у реквизита с заголовком "Реквизит1"
//@ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизитаСЗаголовком(Парам01,Парам02)
Процедура ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизитаСЗаголовком(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	            
	
	Если ПолеРеквизит = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> не найдено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	
	ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита);
	ПолеРеквизит.Активизировать();
	
	Если НЕ ТЧ.ТекущийРежимРедактирование() Тогда
		ТЧ.ИзменитьСтроку();
	КонецЕсли;	 
	
	СделатьДействияПриЗаписиВидео();
	СделатьДействияПриЗаписиHTML();
	ПолеРеквизит.Выбрать();
КонецПроцедуры

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я нажимаю кнопку выбора у реквизита "Реквизит1"
//@ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизита(Парам01,Парам02)
Процедура ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизита(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизитаСЗаголовком(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени);
КонецПроцедуры




&НаКлиенте
//И В таблице "ДокументыПоВидам" я нажимаю кнопку очистить у поля "Скан"
//@ВТаблицеЯНажимаюКнопкуОчиститьУПоля(Парам01,Парам02)
Процедура ВТаблицеЯНажимаюКнопкуОчиститьУПоля(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	            
	
	Если ПолеРеквизит = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> не найдено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	
	ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита);
	ПолеРеквизит.Активизировать();
	
	Если НЕ ТЧ.ТекущийРежимРедактирование() Тогда
		ТЧ.ИзменитьСтроку();
	КонецЕсли;	 
	
	СделатьДействияПриЗаписиВидео();
	СделатьДействияПриЗаписиHTML();
	ПолеРеквизит.Очистить();
КонецПроцедуры

&НаКлиенте
//И В таблице "ДокументыПоВидам" я нажимаю кнопку очистить у поля с именем "Скан"
//@ВТаблицеЯНажимаюКнопкуОчиститьУПоляСИменем(Парам01,Парам02)
Процедура ВТаблицеЯНажимаюКнопкуОчиститьУПоляСИменем(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВТаблицеЯНажимаюКнопкуОчиститьУПоля(ИмяТЧ,ИмяРеквизита,Истина);
КонецПроцедуры







&НаКлиенте
//И В открытой форме в таблице  "Список" я перехожу на первую строку
//@ВОткрытойФормеВТЧЯПерехожуНаПервуюСтроку(Парам01)
Процедура ВОткрытойФормеВТЧЯПерехожуНаПервуюСтроку(ИмяТЧ) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	ТЧ.ПерейтиКПервойСтроке();
КонецПроцедуры

&НаКлиенте
//И В таблице  "Список" я перехожу на первую строку
//@ВТЧЯПерехожуНаПервуюСтроку(Парам01)
Процедура ВТЧЯПерехожуНаПервуюСтроку(ИмяТЧ) Экспорт
	ВОткрытойФормеВТЧЯПерехожуНаПервуюСтроку(ИмяТЧ);
КонецПроцедуры

&НаКлиенте
//И В открытой форме в таблице  "Список" я перехожу на последнюю строку
//@ВОткрытойФормеВТЧЯПерехожуНаПоследнююСтроку(Парам01)
Процедура ВОткрытойФормеВТЧЯПерехожуНаПоследнююСтроку(ИмяТЧ) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	ТЧ.ПерейтиКПоследнейСтроке();
КонецПроцедуры

&НаКлиенте
//И В таблице  "Список" я перехожу на последнюю строку
//@ВТЧЯПерехожуНаПоследнююСтроку(Парам01)
Процедура ВТЧЯПерехожуНаПоследнююСтроку(ИмяТЧ) Экспорт
	ВОткрытойФормеВТЧЯПерехожуНаПоследнююСтроку(ИмяТЧ);
КонецПроцедуры

&НаКлиенте
//И В открытой форме в таблице  "Список" я перехожу на одну строку вверх
//@ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВверх(Парам01)
Процедура ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВверх(ИмяТЧ) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	ТЧ.ПерейтиКПредыдущейСтроке();
КонецПроцедуры




&НаКлиенте
//И в таблице  "Список" я перехожу на один уровень вниз
//@ВТаблицеЯПерехожуНаОдинУровеньВниз(Парам01)
Процедура ВТаблицеЯПерехожуНаОдинУровеньВниз(ИмяТЧ) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	ТЧ.ПерейтиНаУровеньВниз();
КонецПроцедуры

&НаКлиенте
//И в таблице  "Список" я перехожу на один уровень вверх
//@ВТаблицеЯПерехожуНаОдинУровеньВверх(Парам01)
Процедура ВТаблицеЯПерехожуНаОдинУровеньВверх(ИмяТЧ) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	ТЧ.ПерейтиНаУровеньВверх();
КонецПроцедуры

&НаКлиенте
//И в таблице  ""ИмяТаблицы"" я начинаю редактирование строки
//@ВТаблицеЯНачинаюРедактированиеСтроки(Парам01)
Процедура ВТаблицеЯНачинаюРедактированиеСтроки(ИмяТЧ) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	
	Если НЕ ТЧ.ТекущийРежимРедактирование() Тогда
		ТЧ.ИзменитьСтроку();
	КонецЕсли;	 
КонецПроцедуры






&НаКлиенте
//И В открытой форме в таблице  "Список" я перехожу на одну строку вниз
//@ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВниз(Парам01)
Процедура ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВниз(ИмяТЧ) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	ТЧ.ПерейтиКСледующейСтроке();
КонецПроцедуры

&НаКлиенте
//И В открытой форме в таблице  "Список" я перехожу на одну строку вверх
//@ВТЧЯПерехожуНаОднуСтрокуВверх(Парам01)
Процедура ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВверхСВыделением(ИмяТЧ) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	ТЧ.ПерейтиКПредыдущейСтроке(Истина);
КонецПроцедуры

&НаКлиенте
//И В таблице  "Список" я перехожу на одну строку вверх
//@ВТЧЯПерехожуНаОднуСтрокуВверхСВыделением(Парам01)
Процедура ВТЧЯПерехожуНаОднуСтрокуВверхСВыделением(ИмяТЧ) Экспорт
	ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВверхСВыделением(ИмяТЧ);
КонецПроцедуры

&НаКлиенте
//И В таблице  "Список" я перехожу на одну строку вверх
//@ВТаблицеЯПерехожуНаОднуСтрокуВверхСВыделением(Парам01)
Процедура ВТаблицеЯПерехожуНаОднуСтрокуВверхСВыделением(ИмяТЧ) Экспорт
	ВТЧЯПерехожуНаОднуСтрокуВверхСВыделением(ИмяТЧ);
КонецПроцедуры

&НаКлиенте
//И В открытой форме в таблице  "Список" я перехожу на одну строку вниз
//@ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВниз(Парам01)
Процедура ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВнизСВыделением(ИмяТЧ) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	ТЧ.ПерейтиКСледующейСтроке(Истина);
КонецПроцедуры

&НаКлиенте
//И В таблице  "Список" я перехожу на одну строку вниз
//ВТЧЯПерехожуНаОднуСтрокуВнизСВыделением(Парам01)
Процедура ВТЧЯПерехожуНаОднуСтрокуВнизСВыделением(ИмяТЧ) Экспорт
	ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВнизСВыделением(ИмяТЧ);
КонецПроцедуры

&НаКлиенте
//И В таблице  "Список" я перехожу на одну строку вниз
//ВТаблицеЯПерехожуНаОднуСтрокуВнизСВыделением(Парам01)
Процедура ВТаблицеЯПерехожуНаОднуСтрокуВнизСВыделением(ИмяТЧ) Экспорт
	ВТЧЯПерехожуНаОднуСтрокуВнизСВыделением(ИмяТЧ);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьЗначениеРеквизитаСправочника(ИмяСпр,Наименование,ИмяРек,СтроковокПредставление)
	Элем = Справочники[ИмяСпр].НайтиПоНаименованию(Наименование,Истина);
	Если Не ЗначениеЗаполнено(Элем) Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если СокрЛП(Элем[ИмяРек]) <> СтроковокПредставление Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	

&НаКлиенте
//И     Есть элемент справочника "Справочник1" с наименованием "Тест" и  реквизитом "Реквизит2" равным "Группа2Элем2"
//@ЕстьЭлементСправочникаСНаименованиемИРеквизитомРавным(Парам01,Парам02,Парам03,Парам04)
Процедура ЕстьЭлементСправочникаСНаименованиемИРеквизитомРавным(ИмяСпр,Наименование,ИмяРек,СтроковокПредставление) Экспорт
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не нашел значение реквизита у спр: ИмяСпр=%1, Наименование=%2, ИмяРек=%3, СтроковокПредставление=%4");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяСпр); 
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Наименование); 
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ИмяРек); 
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",СтроковокПредставление); 
	Ванесса.ПроверитьРавенство(ПроверитьЗначениеРеквизитаСправочника(ИмяСпр,Наименование,ИмяРек,СтроковокПредставление),Истина,ТекстСообщения);
КонецПроцедуры





&НаКлиенте
//И В открытой форме я перехожу к закладке с заголовком "Вспомогательная"
//@ВОткрытойФормеЯПерехожуКЗакладкеСЗаголовком(Парам01)
Процедура ВОткрытойФормеЯПерехожуКЗакладкеСЗаголовком(ИмяЗакладки,ИскатьПоИмени = Ложь) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ПоискЗакладки",Истина);
	ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Ложь);
	ПолеЗакладка = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЗакладки, ИскатьПоИмени, Истина, Тип("ТестируемаяГруппаФормы"),ДопПараметры);
	Если ПолеЗакладка = Неопределено Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Закладка с именем <%1> не найдена.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Закладка с заголовком <%1> не найдена.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЗакладки); 
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ПолеЗакладка.Активизировать();
КонецПроцедуры

&НаКлиенте
//И В открытой форме я перехожу к закладке "Вспомогательная"
//@ВОткрытойФормеЯПерехожуКЗакладке(Парам01)
Процедура ВОткрытойФормеЯПерехожуКЗакладке(ИмяЗакладки,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯПерехожуКЗакладкеСЗаголовком(ИмяЗакладки,ИскатьПоИмени);
КонецПроцедуры







&НаКлиенте
//И В открытой форме я перехожу к закладке с именем "Вспомогательная"
//@ВОткрытойФормеЯПерехожуКЗакладкеСИменем(Парам01)
Процедура ВОткрытойФормеЯПерехожуКЗакладкеСИменем(ИмяЗакладки) Экспорт
	ВОткрытойФормеЯПерехожуКЗакладкеСЗаголовком(ИмяЗакладки,Истина);
КонецПроцедуры






&НаКлиенте
//И В открытой форме я сворачиваю группу с заголовком "СворачиваемаяГруппа"
//@ВОткрытойФормеЯСворачиваюГруппуСЗаголовком(Парам01)
Процедура ВОткрытойФормеЯСворачиваюГруппуСЗаголовком(ИмяГруппы,ИскатьПоИмени = Ложь) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущаяФормаЭлемента",Неопределено);
	ДопПараметры.Вставить("ИсключитьГруппы",Ложь);
	Группа = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяГруппы, ИскатьПоИмени, Истина, Тип("ТестируемаяГруппаФормы"),ДопПараметры);
	Если Группа = Неопределено  Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Группа с именем <%1> не найдена.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Группа с заголовком <%1> не найдена.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяГруппы); 
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Группа.Активизировать();
	СделатьДействияПриЗаписиВидео();
	СделатьДействияПриЗаписиHTML();
	Попытка
		Группа.Свернуть();
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
//И В открытой форме я сворачиваю группу "СворачиваемаяГруппа"
//@ВОткрытойФормеЯСворачиваюГруппу(Парам01)
Процедура ВОткрытойФормеЯСворачиваюГруппу(ИмяГруппы,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯСворачиваюГруппуСЗаголовком(ИмяГруппы,ИскатьПоИмени);
КонецПроцедуры






&НаКлиенте
//И В открытой форме я сворачиваю группу с именем "СворачиваемаяГруппа"
//@ВОткрытойФормеЯСворачиваюГруппуСИменем(Парам01)
Процедура ВОткрытойФормеЯСворачиваюГруппуСИменем(ИмяГруппы) Экспорт
	ВОткрытойФормеЯСворачиваюГруппуСЗаголовком(ИмяГруппы,Истина);	
КонецПроцедуры



&НаКлиенте
//И В открытой форме я разворачиваю группу с заголовком "СворачиваемаяГруппа"
//@ВОткрытойФормеЯРазворачиваюГруппуСЗаголовком(Парам01)
Процедура ВОткрытойФормеЯРазворачиваюГруппуСЗаголовком(ИмяГруппы,ИскатьПоИмени = Ложь) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущаяФормаЭлемента",Неопределено);
	ДопПараметры.Вставить("ИсключитьГруппы",Ложь);
	
	Группа = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяГруппы, ИскатьПоИмени, Истина, Тип("ТестируемаяГруппаФормы"),ДопПараметры);
	
	Если Группа = Неопределено Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Группа с именем <%1> не найдена.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Группа с заголовком <%1> не найдена.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяГруппы); 
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ТекущаяФорма = ДопПараметры.ТекущаяФормаЭлемента;
	
	ПредыдущийЭлементФормы = Неопределено;
	ТекущийЭлементФормы    = Неопределено;
	
	Попытка
		ПредыдущийЭлементФормы = ТекущаяФорма.ПолучитьТекущийЭлемент();
	Исключение
	КонецПопытки;
	
	Группа.Активизировать();
	
	Попытка
		ТекущийЭлементФормы = ТекущаяФорма.ПолучитьТекущийЭлемент();
	Исключение
	КонецПопытки;
	
	Если ПредыдущийЭлементФормы <> ТекущийЭлементФормы Тогда
		//значит получилось активизировать группу
		СделатьДействияПриЗаписиВидео();
		СделатьДействияПриЗаписиHTML();
	КонецЕсли;	 
	
	Попытка
		Группа.Развернуть();
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
//И В открытой форме я разворачиваю группу "СворачиваемаяГруппа"
//@ВОткрытойФормеЯРазворачиваюГруппу(Парам01)
Процедура ВОткрытойФормеЯРазворачиваюГруппу(ИмяГруппы,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯРазворачиваюГруппуСЗаголовком(ИмяГруппы,ИскатьПоИмени);
КонецПроцедуры







&НаКлиенте
//И В открытой форме я разворачиваю группу с именем "СворачиваемаяГруппа"
//@ВОткрытойФормеЯРазворачиваюГруппуСИменем(Парам01)
Процедура ВОткрытойФормеЯРазворачиваюГруппуСИменем(ИмяГруппы) Экспорт
	ВОткрытойФормеЯРазворачиваюГруппуСЗаголовком(ИмяГруппы,Истина);
КонецПроцедуры



&НаКлиенте
//И В открытой форме я нажимаю на гиперссылку с заголовком "Гиперссылка"
//@ВОткрытойФормеЯНажимаюНаГиперссылкуСЗаголовком(Парам01)
Процедура ВОткрытойФормеЯНажимаюНаГиперссылкуСЗаголовком(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИскатьТолькоПоляГиперссылок",Истина);
	ПолеГиперссылка = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, Неопределено,ДопПараметры);	
	
	ПолеГиперссылка.Активизировать();
	СделатьДействияПриЗаписиВидео();
	СделатьДействияПриЗаписиHTML();
	ПолеГиперссылка.Нажать();
	Ванесса.ОбработатьСменуАктивногоОкна();
КонецПроцедуры

&НаКлиенте
//И В открытой форме я нажимаю на гиперссылку "Гиперссылка"
//@ВОткрытойФормеЯНажимаюНаГиперссылку(Парам01)
Процедура ВОткрытойФормеЯНажимаюНаГиперссылку(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯНажимаюНаГиперссылкуСЗаголовком(ИмяРеквизита,ИскатьПоИмени);
КонецПроцедуры






&НаКлиенте
//И В открытой форме я нажимаю на гиперссылку с именем "Гиперссылка"
//@ВОткрытойФормеЯНажимаюНаГиперссылкуСИменем(Парам01)
Процедура ВОткрытойФормеЯНажимаюНаГиперссылкуСИменем(ИмяРеквизита) Экспорт
	ВОткрытойФормеЯНажимаюНаГиперссылкуСЗаголовком(ИмяРеквизита,Истина);
КонецПроцедуры


&НаКлиенте
//Тогда элемент формы "Наименование" стал равен шаблону "111"
//@ЭлементФормыСталРавенШаблону(Парам01,Парам02)
Процедура ЭлементФормыСталРавенШаблону(ИмяЭлемента,СтроковоеПредставление,ИскатьПоИмени = Ложь) Экспорт
	ЭлементФормы        = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени);
	ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(ЭлементФормы);
	
	СтроковоеПредставление = ПолучитьКорректныйТекстДляВставкиВПоле(СтроковоеПредставление);
	
	Если Не Ванесса.СтрокаСоответствуетШаблону(ПредставлениеДанных, СтроковоеПредставление) Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Для элемента формы %1 текущее значение равно <%2>, а ожидали <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПредставлениеДанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",СтроковоеПредставление);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//Тогда элемент формы с именем "Наименование" стал равен шаблону "111"
//@ЭлементФормыСИменемСталРавенШаблону(Парам01,Парам02)
Процедура ЭлементФормыСИменемСталРавенШаблону(ИмяЭлемента,СтроковоеПредставление,ИскатьПоИмени = Ложь) Экспорт
	ЭлементФормыСталРавенШаблону(ИмяЭлемента,СтроковоеПредставление,Истина);
КонецПроцедуры



&НаКлиенте
//Тогда элемент формы "Наименование" стал равен "111"
//@ЭлементФормыСталРавен(Парам01,Парам02)
Процедура ЭлементФормыСталРавен(ИмяЭлемента,Знач СтроковоеПредставление,ИскатьПоИмени = Ложь) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИсключитьГруппы",Истина);
	ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Ложь);
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени,,,ДопПараметры);
	
	СтроковоеПредставление = ПолучитьКорректныйТекстДляВставкиВПоле(СтроковоеПредставление);
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	ТекстСообщения = "";
	БылаОшибка = Ложь;
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		ТекстСообщения = "";
		БылаОшибка = Ложь;
		
		Попытка
			ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(ЭлементФормы);
			
			Если НЕ Ванесса.СтрокиРавны(ПредставлениеДанных,СтроковоеПредставление) Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Для элемента формы %1 текущее значение равно <%2>, а ожидали <%3>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПредставлениеДанных);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",СтроковоеПредставление);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Прервать;
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Ванесса.sleep(1);
		КонецПопытки;
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//Тогда элемент формы с именем "Наименование" стал равен "111"
//@ЭлементФормыСИменемСталРавен(Парам01,Парам02)
Процедура ЭлементФормыСИменемСталРавен(ИмяЭлемента,СтроковоеПредставление) Экспорт
	ЭлементФормыСталРавен(ИмяЭлемента,СтроковоеПредставление,Истина);
КонецПроцедуры

&НаКлиенте
//И у элемента формы с именем "ИмяПоля" текст редактирования стал равен "ТекстПоля"
//@УЭлементаФормыСИменемТекстРедактированияСталРавен(Парам01,Парам02)
Процедура УЭлементаФормыСИменемТекстРедактированияСталРавен(ИмяЭлемента,НужныйТекстРедактирования) Экспорт
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,Истина);
	
	ТекТекстРедактирования = Неопределено;
	Попытка
		ТекТекстРедактирования = ЭлементФормы.ПолучитьОтображаемыйТекст();
	Исключение
	КонецПопытки;
	
	Если ТекТекстРедактирования = Неопределено Тогда
		Попытка
			ТекТекстРедактирования = ЭлементФормы.ПолучитьТекстРедактирования();
		Исключение
		КонецПопытки;
	КонецЕсли;	 
	
	Если ТекТекстРедактирования = Неопределено Тогда
		ТекТекстРедактирования = "";
	КонецЕсли;	 
	
	НужныйТекстРедактирования = ПолучитьКорректныйТекстДляВставкиВПоле(НужныйТекстРедактирования);
	
	Если ТекТекстРедактирования <> НужныйТекстРедактирования Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У элемента формы <%1> текущий текст редактирования <%2>, а ожидали <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТекТекстРедактирования);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",НужныйТекстРедактирования);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры



&НаКлиенте
//Тогда значение поля "Наименование" содержит текст "111"
//@ЗначениеПоляСодержитТекст(Парам01,Парам02)
Процедура ЗначениеПоляСодержитТекст(ИмяЭлемента,Знач СтроковоеПредставление,ИскатьПоИмени = Ложь) Экспорт
	СтроковоеПредставление = Ванесса.ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(СтроковоеПредставление);
	
	ЭлементФормы        = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени);
	ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(ЭлементФормы);
	
	Если Найти(НРег(ПредставлениеДанных),НРег(СтроковоеПредставление)) = 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В значение элемента формы %1 не найдена строка <%2>. Текущее значение поля <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",СтроковоеПредставление);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ПредставлениеДанных);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//Тогда значение поля с именем "Наименование" содержит текст "111"
//@ЗначениеПоляСИменемСодержитТекст(Парам01,Парам02)
Процедура ЗначениеПоляСИменемСодержитТекст(ИмяЭлемента,СтроковоеПредставление) Экспорт
	ЗначениеПоляСодержитТекст(ИмяЭлемента,СтроковоеПредставление,Истина);
КонецПроцедуры


&НаКлиенте
//Тогда значение поля "Наименование" не содержит текст "111"
//@ЗначениеПоляНеСодержитТекст(Парам01,Парам02)
Процедура ЗначениеПоляНеСодержитТекст(ИмяЭлемента,СтроковоеПредставление,ИскатьПоИмени = Ложь) Экспорт
	ЭлементФормы        = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени);
	ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(ЭлементФормы);
	
	Если Найти(НРег(ПредставлениеДанных),НРег(СтроковоеПредставление)) <> 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В значение элемента формы %1 найдена строка <%2>. Текущее значение поля <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",СтроковоеПредставление);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ПредставлениеДанных);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//Тогда значение поля с именем "Наименование" не содержит текст "111"
//@ЗначениеПоляСИменемНеСодержитТекст(Парам01,Парам02)
Процедура ЗначениеПоляСИменемНеСодержитТекст(ИмяЭлемента,СтроковоеПредставление) Экспорт
	ЗначениеПоляНеСодержитТекст(ИмяЭлемента,СтроковоеПредставление,Истина);
КонецПроцедуры




&НаКлиенте
//И я активизирую поле "Имя поля"
//@ЯАктивизируюПоле(Парам01)
Процедура ЯАктивизируюПоле(ИмяЭлемента,ИскатьПоИмени = Ложь) Экспорт
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени);
	ЭлементФормы.Активизировать();        
КонецПроцедуры

&НаКлиенте
//И я активизирую поле с именем "Имя поля"
//@ЯАктивизируюПолеСИменем(Парам01,Парам02)
Процедура ЯАктивизируюПолеСИменем(ИмяЭлемента,ИскатьПоИмени = Ложь) Экспорт
	ЯАктивизируюПоле(ИмяЭлемента,Истина);
КонецПроцедуры


&НаКлиенте
//Тогда текст ячейки таблицы "Таблица" "Наименование" стал равен "111"
//@ТекстЯчейкиТаблицыСталРавен(Парам01,Парам02,Парам03)
Процедура ТекстЯчейкиТаблицыСталРавен(ИмяТЧ,ИмяЭлемента,Знач СтроковоеПредставление,ИскатьПоИмени = Истина) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	Если ИскатьПоИмени Тогда
		ПредставлениеДанных = ТЧ.ПолучитьТекстЯчейки(ИмяЭлемента);
	Иначе
		ВыделенныеСтроки = ТЧ.ПолучитьВыделенныеСтроки();
		Если ВыделенныеСтроки.Количество() = 0 Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> не найдено ни одной строки");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ЗначениеТекущейСтроки = ВыделенныеСтроки[0];
		ПредставлениеДанных   = ЗначениеТекущейСтроки[ИмяЭлемента];
		Если ПредставлениеДанных = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> не найдено ячейки с заголовком <%2>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяЭлемента);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЕсли;	 
	
	СтроковоеПредставление = ПолучитьКорректныйТекстДляВставкиВПоле(СтроковоеПредставление);
	
	Если ПредставлениеДанных <> СтроковоеПредставление Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Для ячейки <%1> таблицы <%2> текущее значение равно <%3>, а ожидали <%4>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ПредставлениеДанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",СтроковоеПредставление);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры


&НаКлиенте
//Тогда текст ячейки таблицы "Таблица" "Наименование" стал равен "111"
//@ТекстТекущейЯчейкиТаблицыСталРавен(Парам01,Парам02)
Процедура ТекстТекущейЯчейкиТаблицыСталРавен(ИмяТЧ,СтроковоеПредставление) Экспорт
	ТЧ                  = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	ПредставлениеДанных = ТЧ.ПолучитьТекстЯчейки();
	
	Если ПредставлениеДанных <> СтроковоеПредставление Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Для текущей ячейки таблицы <%1> текущее значение равно <%2>, а ожидали <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПредставлениеДанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",СтроковоеПредставление);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры





&НаКлиенте
//И поле "Имя поля" заполнено
//@ПолеЗаполнено(Парам01)
Процедура ПолеЗаполнено(ИмяЭлемента,ИскатьПоИмени = Ложь) Экспорт
	Значение = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени);
	Если Не ЗначениеЗаполнено(Значение) Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что поле с заголовком <%1> будет заполнено, но оно пустое.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И поле с именем "Имя поля" заполнено
//@ПолеСИменемЗаполнено(Парам01)
Процедура ПолеСИменемЗаполнено(ИмяЭлемента) Экспорт
	ПолеЗаполнено(ИмяЭлемента,Истина);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокиИзТаблицыTestClient(ТЧ)
	Возврат Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ); 
КонецФункции	

&НаКлиенте
//И     таблица формы с именем ""ИмяТаблицы"" стала равной:
//@ТаблицаФормыСИменемСталаРавной(Парам01,ТабПарам)
Процедура ТаблицаФормыСИменемСталаРавной(ИмяТЧ,ТабПарам,ДопПараметры = Неопределено) Экспорт
	
	ТекстОшибки = "";
	БылаОшибка = Ложь;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		ТекстОшибки = "";
		
		Попытка
			СравнениеПоШаблону = Ложь;
			ПрикреплятьЗначенияТаблицы = Истина;
			Если ДопПараметры <> Неопределено Тогда
				Если ДопПараметры.Свойство("СравнениеПоШаблону") Тогда
					СравнениеПоШаблону = ДопПараметры.СравнениеПоШаблону;
				КонецЕсли;	 
				Если ДопПараметры.Свойство("ПрикреплятьЗначенияТаблицы") Тогда
					ПрикреплятьЗначенияТаблицы = ДопПараметры.ПрикреплятьЗначенияТаблицы;
				КонецЕсли;	 
			КонецЕсли;	 
			
			ТабПарам = Ванесса.ПолучитьЗначенияТаблицыGherkinИзКонтекста(ТабПарам);
			
			ТЧ = НайтиТЧПоИмени(ИмяТЧ);
			
			ЗначениеТЧ = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ,ДопПараметры);
			
			Если ЗначениеТЧ = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог получить значение таблицы <%1>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			ОшибкаНетКолонок = ПолучитьОшибкаНетКолонок(ИмяТЧ,ТабПарам);	
			Если ЗначениеЗаполнено(ОшибкаНетКолонок) Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ошибка проверки значения таблицы <%1>. %2");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОшибкаНетКолонок);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			
			КолСтрок = ТабПарам.Количество()-1;//без шапки
			Если ЗначениеТЧ.Количество() <> КолСтрок Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Таблица <%1> не соответствует эталону. Ожидали <%2> строк, а в ней <%3> строк.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",КолСтрок);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ЗначениеТЧ.Количество());
				
				Если ПрикреплятьЗначенияТаблицы Тогда
					Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабПарам,ЗначениеТЧ);
					
					МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
					МакетТабПарам   = Ванесса.ПреобразоватьЗначениеВМакет(ТабПарам);
					Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,"ТекущееЗначениеТаблицы");
					Ванесса.ПрикрепитьМакетКСценарию(МакетТабПарам,"ЭталонноеЗначениеТаблицы");
				КонецЕсли;	 
				
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			СтрокаШапки = ТабПарам[0];
			
			Для Ккк = 1 По ТабПарам.Количество()-1 Цикл //в первой строке шапка
				СтрСтарое  = ТабПарам[Ккк];
				СтрНовое   = ЗначениеТЧ[Ккк-1];
				
				Для каждого Колонка Из СтрокаШапки Цикл
					ИмяКолонкиСтарое = СтрокаШапки[Колонка.Ключ];
					
					Попытка
						ЗначСтарое = СтрСтарое[Колонка.Ключ];
					Исключение
						ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Таблица <%1>. Строка №<%2>. Колонка <%3>. Не смог получить значение из эталона.");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",(Ккк));
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ИмяКолонкиСтарое);
						ВызватьИсключение ТекстСообщения;
					КонецПопытки;
					
					Если ЗначСтарое = "*" Тогда
						Продолжить;
					КонецЕсли;	 
					
					ИмяКолонкиСтарое = СтрЗаменить(ИмяКолонкиСтарое,"\n",Символы.ПС);
					ЗначНовое  = СтрНовое[ИмяКолонкиСтарое];
					Если ЗначНовое = Неопределено Тогда
						ИмяКолонкиСтарое = СтрокаШапки[Колонка.Ключ];
						ИмяКолонкиСтарое = СтрЗаменить(ИмяКолонкиСтарое,"\n",Символы.ВК + Символы.ПС);
						ЗначНовое  = СтрНовое[ИмяКолонкиСтарое];
					КонецЕсли;	 
					ЗначНовое = СтрЗаменить(ЗначНовое,Символы.НПП," ");
					ЗначСтарое = СтрЗаменить(ЗначСтарое,"\n",Символы.ПС);
					ЗначСтарое = СтрЗаменить(ЗначСтарое,Символы.НПП," ");
					
					
					Если СравнениеПоШаблону Тогда
						Если Не Ванесса.СтрокаСоответствуетШаблону(ЗначНовое, ЗначСтарое) Тогда
							Ванесса.АктивизироватьЭлементформы(ТЧ);
							ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Таблица <%1>. Строка №<%2>. Колонка <%3>. Ожидали <%4>, а получили <%5>");
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",(Ккк));
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ИмяКолонкиСтарое);
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ЗначСтарое);
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",ЗначНовое);
							
							Если ПрикреплятьЗначенияТаблицы Тогда
								Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабПарам,ЗначениеТЧ);
								
								МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
								МакетТабПарам   = Ванесса.ПреобразоватьЗначениеВМакет(ТабПарам);
								Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,"ТекущееЗначениеТаблицы");
								Ванесса.ПрикрепитьМакетКСценарию(МакетТабПарам,"ЭталонноеЗначениеТаблицы");
							КонецЕсли;	 
							
							ВызватьИсключение ТекстСообщения;
						КонецЕсли;	 
					Иначе	
						Если ЗначНовое <> ЗначСтарое Тогда
							Ванесса.АктивизироватьЭлементформы(ТЧ);
							ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Таблица <%1>. Строка №<%2>. Колонка <%3>. Ожидали <%4>, а получили <%5>");
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",(Ккк));
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ИмяКолонкиСтарое);
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ЗначСтарое);
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",ЗначНовое);
							
							Если ПрикреплятьЗначенияТаблицы Тогда
								Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабПарам,ЗначениеТЧ);
								
								МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
								МакетТабПарам   = Ванесса.ПреобразоватьЗначениеВМакет(ТабПарам);
								Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,"ТекущееЗначениеТаблицы");
								Ванесса.ПрикрепитьМакетКСценарию(МакетТабПарам,"ЭталонноеЗначениеТаблицы");
							КонецЕсли;	 
							
							ВызватьИсключение ТекстСообщения;
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЦикла;
			КонецЦикла;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Ванесса.sleep(1);
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//Если таблица "ИмяТаблицы" равне переданной тогда
//@ТаблицаРавнаПереданнойТогда(Парам01,ТабПарам)
Процедура ТаблицаРавнаПереданнойТогда(ИмяТЧ,ТабПарам) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ПрикреплятьЗначенияТаблицы",Ложь);
	
	Попытка
		ТаблицаФормыСИменемСталаРавной(ИмяТЧ,ТабПарам,ДопПараметры);
	Исключение
		Ванесса.УстановитьРезультатУсловия(Ложь);
		Возврат;
	КонецПопытки;
	
	Ванесса.УстановитьРезультатУсловия(Истина);
КонецПроцедуры

&НаКлиенте
//И в таблице ""ИмяТаблицы"" текущая строка равна:
//@ВТаблицеТекущаяСтрокаРавна(Парам01,ТабПарам)
Процедура ВТаблицеТекущаяСтрокаРавна(ИмяТЧ,ТабПарам) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВыделятьВсеСтроки",Ложь);
	ТаблицаФормыСИменемСталаРавной(ИмяТЧ,ТабПарам,ДопПараметры);
КонецПроцедуры


&НаКлиенте
//И в таблице "ИмяТаблицы" "КоличествоСтрок" строк, у которых колонка "ИмяКолонки" "ВидСравнения" 2
//@ВТаблицеСтрокУКоторыхКолонка(Парам01,Парам02,Парам03,Парам04,Парам05)
Процедура ВТаблицеСтрокУКоторыхКолонка(ИмяТаблицы,НужноеКоличествоСтрок,ИмяКолонки,ПереданныйВидСравнения,НужноеЗначениеКолонки) Экспорт
	ТЧ =  НайтиТЧПоИмени(ИмяТаблицы);
	
	ЗначениеТЧ = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ);
	//Ванесса.ПосмотретьЗначение(ЗначениеТЧ);
	
	Если ЗначениеТЧ = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог получить значение таблицы <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	КоличествоЗначений = 0;
	
	КоличествоСтрок = ЗначениеТЧ.Количество();
	
	ПолученныйВидСравнения = Ванесса.ПолучитьОператорПоТексту(ПереданныйВидСравнения);
	
	Для Ккк = 0 По КоличествоСтрок-1 Цикл
		СтрокаТаблицы = ЗначениеТЧ[Ккк];
		
		ЗначениеВКолонке = СтрокаТаблицы[ИмяКолонки];
		
		ЗначениеСравнения = Неопределено;
		Выражение = "ЗначениеСравнения = (ЗначениеВКолонке " + ПолученныйВидСравнения + " НужноеЗначениеКолонки)";
		Выполнить(Выражение);
		
		Если ЗначениеСравнения Тогда
			КоличествоЗначений = КоличествоЗначений + 1;
		КонецЕсли;	 
		
	КонецЦикла;	
	
	Если КоличествоЗначений <> НужноеКоличествоСтрок Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> найдено <%2> значений. А ожидали <%3>. Имя колонки <%4>. Искомое значение <%5>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",КоличествоЗначений);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",НужноеКоличествоСтрок);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ИмяКолонки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",НужноеЗначениеКолонки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецПроцедуры


&НаКлиенте
//И таблица ""ИмяТаблицы"" стала равной:
//@ТаблицаСталаРавной(Парам01,ТабПарам)
Процедура ТаблицаСталаРавной(ИмяТЧ,ТабПарам) Экспорт
	ТаблицаФормыСИменемСталаРавной(ИмяТЧ,ТабПарам);
КонецПроцедуры

&НаКлиенте
//И таблица ""ИмяТаблицы"" стала равной макету "ИмяМакета"
//@ТаблицаСталаРавнойМакету(Парам01,ИмяМакета)
Процедура ТаблицаСталаРавнойМакету(ИмяТЧ,ИмяМакета,ДопПараметры = Неопределено) Экспорт
	СравнениеПоШаблону         = Ложь;
	ПрикреплятьЗначенияТаблицы = Истина;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("СравнениеПоШаблону") Тогда
			СравнениеПоШаблону = ДопПараметры.СравнениеПоШаблону;
		КонецЕсли;	 
		
		Если ДопПараметры.Свойство("ПрикреплятьЗначенияТаблицы") Тогда
			ПрикреплятьЗначенияТаблицы = ДопПараметры.ПрикреплятьЗначенияТаблицы;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТабДокБыло = ПолучитьМакетИзОбработкиИлиИзКаталогаПроекта(ИмяМакета);
	
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	
	ЗначениеТЧ = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяТЧ,Истина);
	
	Если Ложь Тогда
		ТабДокБыло = Новый ТабличныйДокумент;
	КонецЕсли;	 
	
	КолСтрок = ТабДокБыло.ВысотаТаблицы-1;//без шапки
	Если ЗначениеТЧ.Количество() <> КолСтрок Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("ТЧ %1 не соответствует эталону. Ожидали %2 строк, а в ней %3 строк.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",КолСтрок);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ЗначениеТЧ.Количество());
		
		Если ПрикреплятьЗначенияТаблицы Тогда
			Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабДокБыло,ЗначениеТЧ);
			
			МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
			Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,"ТекущееЗначениеТаблицы");
			Ванесса.ПрикрепитьМакетКСценарию(ТабДокБыло,"ЭталонноеЗначениеТаблицы");
		КонецЕсли;	 
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	//СтрокаШапки = ТабПарам[0];
	МассивКолонок = Новый Массив;
	Для Ккк = 1 По ТабДокБыло.ШиринаТаблицы Цикл
		МассивКолонок.Добавить(ТабДокБыло.Область(1,Ккк,1,Ккк).Текст);
	КонецЦикла;	
	
	МассивНеНайденыхКолонок = Новый Массив;
	Для каждого ИмяКолонкиСтарое Из МассивКолонок Цикл
		ЗначениеИзТаблицы = ЗначениеТЧ[0][ИмяКолонкиСтарое];
		Если ЗначениеИзТаблицы = Неопределено Тогда
			ЗначениеИзТаблицы = ЗначениеТЧ[0][СтрЗаменить(ИмяКолонкиСтарое,Символы.ВК,"")];
			//значит такой колонки нет
			Если ЗначениеИзТаблицы = Неопределено Тогда
				МассивНеНайденыхКолонок.Добавить(ИмяКолонкиСтарое);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	
	
	Если МассивНеНайденыхКолонок.Количество() > 0 Тогда
		Стр = "";
		Для Каждого Элем Из МассивНеНайденыхКолонок Цикл
			Стр = Стр + """" +  Элем + """, ";
		КонецЦикла;	
		Стр = Лев(Стр,СтрДлина(Стр)-2);
		
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> не найдены колонки: %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяМакета);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Стр);
		
		Если ПрикреплятьЗначенияТаблицы Тогда
			Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабДокБыло,ЗначениеТЧ);
			
			МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
			Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,"ТекущееЗначениеТаблицы");
			Ванесса.ПрикрепитьМакетКСценарию(ТабДокБыло,"ЭталонноеЗначениеТаблицы");
		КонецЕсли;	 
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	МассивРасхождений = Новый Массив;
	
	Для Ккк = 1 По ТабДокБыло.ВысотаТаблицы-1 Цикл //в первой строке шапка
		СтрНовое   = ЗначениеТЧ[Ккк-1];
		
		НомерКолоноки = 0;
		Для каждого ИмяКолонкиСтарое Из МассивКолонок Цикл
			НомерКолоноки = НомерКолоноки + 1;
			
			ЗначСтарое = ТабДокБыло.Область(Ккк+1,НомерКолоноки,Ккк+1,НомерКолоноки).Текст;
			Если ЗначСтарое = "*" Тогда
				Продолжить;
			КонецЕсли;	 
			
			ЗначНовое  = СтрНовое[ИмяКолонкиСтарое];
			Если ЗначНовое = Неопределено Тогда
				ИмяКолонкиСтарое = СтрЗаменить(ИмяКолонкиСтарое,Символы.ВК,"");
				ЗначНовое  = СтрНовое[ИмяКолонкиСтарое];
			КонецЕсли;	 
			ЗначНовое = СтрЗаменить(ЗначНовое,Символы.НПП," ");
			ЗначСтарое = СтрЗаменить(ЗначСтарое,"\n",Символы.ПС);
			ЗначСтарое = СтрЗаменить(ЗначСтарое,Символы.НПП," ");
			
			Если НЕ СравнениеПоШаблону Тогда
				Если ЗначНовое <> ЗначСтарое Тогда
					Ванесса.АктивизироватьЭлементформы(ТЧ);
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Таблица <%1>. Строка №<%2>. Колонка <%3>. Ожидали <%4>, а получили <%5>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",(Ккк));
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ИмяКолонкиСтарое);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ЗначСтарое);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",ЗначНовое);
					
					Если ПрикреплятьЗначенияТаблицы Тогда
						ЗначениеТаблицыБыло  = Ванесса.ПреобразоватьТабличныйДокументВМассивСтруктур(ТабДокБыло);
						//ЗначениеТаблицыСтало = Ванесса.ПреобразоватьТабличныйДокументВМассивСтруктур(ЗначениеТЧ);
						Ванесса.УстановитьЗначенияТаблицДляСравнения(ЗначениеТаблицыБыло,ЗначениеТЧ);
						
						МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
						Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,"ТекущееЗначениеТаблицы");
						Ванесса.ПрикрепитьМакетКСценарию(ТабДокБыло,"ЭталонноеЗначениеТаблицы");
					КонецЕсли;	 
					
					МассивРасхождений.Добавить(ТекстСообщения);
				КонецЕсли;	 
			Иначе
				Если Не Ванесса.СтрокаСоответствуетШаблону(ЗначНовое,ЗначСтарое) Тогда
					Ванесса.АктивизироватьЭлементформы(ТЧ);
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Таблица <%1>. Строка №<%2>. Колонка <%3>. Ожидали <%4>, а получили <%5>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",(Ккк));
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ИмяКолонкиСтарое);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ЗначСтарое);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",ЗначНовое);
					
					Если ПрикреплятьЗначенияТаблицы Тогда
						ЗначениеТаблицыБыло  = Ванесса.ПреобразоватьТабличныйДокументВМассивСтруктур(ТабДокБыло);
						//ЗначениеТаблицыСтало = Ванесса.ПреобразоватьТабличныйДокументВМассивСтруктур(ЗначениеТЧ);
						Ванесса.УстановитьЗначенияТаблицДляСравнения(ЗначениеТаблицыБыло,ЗначениеТЧ);
						
						
						МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
						Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,"ТекущееЗначениеТаблицы");
						Ванесса.ПрикрепитьМакетКСценарию(ТабДокБыло,"ЭталонноеЗначениеТаблицы");
					КонецЕсли;	 
					
					МассивРасхождений.Добавить(ТекстСообщения);
				КонецЕсли;	 
			КонецЕсли;	 
			
		КонецЦикла;
	КонецЦикла;
	
	Если МассивРасхождений.Количество() > 0 Тогда
		ТекстСообщения = "";
		Для Каждого Элем Из МассивРасхождений Цикл
			ТекстСообщения = ТекстСообщения + Элем + Символы.ПС;
		КонецЦикла;	 
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//Если таблица равна макету "ИмяМакета" Тогда
//@ТаблицаРавнаМакетуТогда(Парам01,ИмяМакета)
Процедура ТаблицаРавнаМакетуТогда(ИмяТЧ,ИмяМакета) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ПрикреплятьЗначенияТаблицы",Ложь);
	
	Попытка
		ТаблицаСталаРавнойМакету(ИмяТЧ,ИмяМакета,ДопПараметры);
	Исключение
		Ванесса.УстановитьРезультатУсловия(Ложь);
		Возврат;
	КонецПопытки;
	
	Ванесса.УстановитьРезультатУсловия(Истина);
КонецПроцедуры

&НаКлиенте
//И таблица ""ИмяТаблицы"" равна макету "ИмяМакета"
//@ТаблицаРавнаМакету(Парам01,ИмяМакета)
Процедура ТаблицаРавнаМакету(ИмяТЧ,ИмяМакета) Экспорт
	ТаблицаСталаРавнойМакету(ИмяТЧ,ИмяМакета);
КонецПроцедуры

&НаКлиенте
//И таблица ""ИмяТаблицы"" равна макету "ИмяМакета" по шаблону
//@ТаблицаРавнаМакетуПоШаблону(Парам01,ИмяМакета)
Процедура ТаблицаРавнаМакетуПоШаблону(ИмяТЧ,ИмяМакета) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СравнениеПоШаблону",Истина);
	ТаблицаСталаРавнойМакету(ИмяТЧ,ИмяМакета,ДопПараметры);
КонецПроцедуры


&НаКлиенте
//И таблица ""ИмяТаблицы"" стала равной по шаблону:
//@ТаблицаСталаРавнойПоШаблону(Парам01,ТабПарам)
Процедура ТаблицаСталаРавнойПоШаблону(ИмяТЧ,ТабПарам) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СравнениеПоШаблону",Истина);
	
	ТаблицаФормыСИменемСталаРавной(ИмяТЧ,ТабПарам,ДопПараметры);
КонецПроцедуры




&НаКлиенте
Процедура ОбработичкОжиданияЯЖдуЧтоТаблицаСтанетРавнаДаннойВТеченииСекунд()
	ИмяОбработчикаОжидания = "ОбработичкОжиданияЯЖдуЧтоТаблицаСтанетРавнаДаннойВТеченииСекунд";

	Попытка
		ТЧ =  НайтиТЧПоИмени(ИмяТаблицыОбработкаОжидания);
	Исключение
		ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Таблица <%1> не стала равной за <%2> секунд. %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицыОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",СтрокаОшибкаОбработкаОжидания);
		
		ЕстьЗначениеТЧ = Истина;
		Попытка
			ЗначениеТЧ = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ);
			МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
		Исключение
			ЕстьЗначениеТЧ = Ложь;
		КонецПопытки;
		
		Если ЕстьЗначениеТЧ Тогда
			Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,"ТекущееЗначениеТаблицы");
		КонецЕсли;	 
		
		СтрокиКоторыеИскалисьВТаблице = Ванесса.ПреобразоватьЗначениеВМакет(ТабПарамОбработкаОжидания);
		Ванесса.ПрикрепитьМакетКСценарию(СтрокиКоторыеИскалисьВТаблице,"ЭталонноеЗначениеТаблицы");
		
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	
	Попытка
		ЗначениеТЧ = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ);
	Исключение
		//возможно форма не отвечает
		Возврат;
	КонецПопытки;
	
	
	Попытка
		КоличествоПолученныхСтрок = ЗначениеТЧ.Количество();
	Исключение
		//значит не получилось получить строки таблицы
		Возврат;
	КонецПопытки;
	
	ТабПарам = ТабПарамОбработкаОжидания;
	
	КолСтрок = ТабПарам.Количество()-1;//без шапки
	
	Если ЗначениеТЧ.Количество() <> КолСтрок Тогда
		СтрокаОшибкаОбработкаОжидания =  "ТЧ " + ИмяТаблицыОбработкаОжидания + " не соответствует эталону. Ожидали " + КолСтрок + " строк, а в ней " + ЗначениеТЧ.Количество() + " строк.";
		Возврат;
	КонецЕсли;	 
	
	СтрокаШапки = ТабПарам[0];
	
	Для Ккк = 1 По ТабПарам.Количество()-1 Цикл //в первой строке шапка
		СтрСтарое  = ТабПарам[Ккк];
		СтрНовое   = ЗначениеТЧ[Ккк-1];
		
		Для каждого Колонка Из СтрокаШапки Цикл
			ИмяКолонкиСтарое = СтрокаШапки[Колонка.Ключ];
			
			ЗначСтарое = СтрСтарое[Колонка.Ключ];
			Если ЗначСтарое = "*" Тогда
				Продолжить;
			КонецЕсли;	 
			
			ЗначНовое  = СтрНовое[ИмяКолонкиСтарое];
			ЗначНовое = СтрЗаменить(ЗначНовое,Символы.НПП," ");
			ЗначСтарое = СтрЗаменить(ЗначСтарое,"\n",Символы.ПС);
			ЗначСтарое = СтрЗаменить(ЗначСтарое,Символы.НПП," ");
			
			Если ЗначНовое <> ЗначСтарое Тогда
				Ванесса.АктивизироватьЭлементформы(ТЧ);
				СтрокаОшибкаОбработкаОжидания =  "ТЧ " + ИмяТаблицыОбработкаОжидания + ". Строка № " + (Ккк) + ". Колонка " + ИмяКолонкиСтарое + ". Ожидали " + ЗначСтарое + ", а получили " + ЗначНовое;
				Возврат;
			КонецЕсли;	 
		КонецЦикла;
	КонецЦикла;
	
	//если оказались здесь - значит таблица равна нужной
	ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
	Ванесса.ПродолжитьВыполнениеШагов();
КонецПроцедуры

&НаКлиенте
//И я жду, что таблица "ТабличнаяЧасть1" станет равна данной в течении 20 секунд:
//@ЯЖдуЧтоТаблицаСтанетРавнаДаннойВТеченииСекунд(Парам01,Парам02,ТабПарам)
Процедура ЯЖдуЧтоТаблицаСтанетРавнаДаннойВТеченииСекунд(ИмяТаблицы,КоличествоСекунд,ТабПарам) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяТаблицыОбработкаОжидания       = ИмяТаблицы;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ТабПарамОбработкаОжидания         = ТабПарам;
	СтрокаОшибкаОбработкаОжидания     = "";
	ПодключитьОбработчикОжидания("ОбработичкОжиданияЯЖдуЧтоТаблицаСтанетРавнаДаннойВТеченииСекунд",1,Ложь);
КонецПроцедуры

&НаКлиенте
//И я жду, что таблица "ТабличнаяЧасть1" станет равна данной в течение 20 секунд:
//@ЯЖдуЧтоТаблицаСтанетРавнаДаннойВТечениеСекунд(Парам01,Парам02,ТабПарам)
Процедура ЯЖдуЧтоТаблицаСтанетРавнаДаннойВТечениеСекунд(ИмяТаблицы,КоличествоСекунд,ТабПарам) Экспорт
	//исправление опечатки
	ЯЖдуЧтоТаблицаСтанетРавнаДаннойВТеченииСекунд(ИмяТаблицы,КоличествоСекунд,ТабПарам);
КонецПроцедуры


&НаКлиенте
Процедура ОбработичкОжиданияЯЖдуЧтоТаблицаСтанетСодержатьСтрокиВТечениеСекунд()
	ИмяОбработчикаОжидания = "ОбработичкОжиданияЯЖдуЧтоТаблицаСтанетСодержатьСтрокиВТечениеСекунд";

	Попытка
		ТЧ = НайтиТЧПоИмени(ИмяТаблицыОбработкаОжидания);
	Исключение
		ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ТабПарам = ТабПарамОбработкаОжидания;
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Таблица <%1> не стала содержать строки из переданной таблицы за <%2> секунд. %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицыОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",СтрокаОшибкаОбработкаОжидания);
		
		Попытка
			ЗначениеТЧ = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ);
		Исключение
			//возможно форма не отвечает
			ЗначениеТЧ = Новый Массив;
		КонецПопытки;
		
		МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
		Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,"ТекущееЗначениеТаблицы");
		
		СтрокиКоторыеИскалисьВТаблице = Ванесса.ПреобразоватьЗначениеВМакет(ТабПарам);
		Ванесса.ПрикрепитьМакетКСценарию(СтрокиКоторыеИскалисьВТаблице,"СтрокиКоторыеИскалисьВТаблице");
		
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	
	Попытка
		ЗначениеТЧ = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ);
	Исключение
		//возможно форма не отвечает
		Возврат;
	КонецПопытки;
	
	
	Попытка
		КоличествоПолученныхСтрок = ЗначениеТЧ.Количество();
	Исключение
		//значит не получилось получить строки таблицы
		Возврат;
	КонецПопытки;
	
	МассивОшибок = Новый Массив;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекстСообщенийПользователю",Ванесса.ДанныеПереводаСообщенийПользователю());
	Попытка
		Отказ = ПроизвестиСравнениеТаблицНаВхождениеСтрокНаСервере(ИмяТаблицыОбработкаОжидания, ТабПарам, ЗначениеТЧ,МассивОшибок,ДопПараметры);
	Исключение
		Отказ = Истина;
		МассивОшибок.Добавить(ОписаниеОшибки());
	КонецПопытки;
	
	
	Если Отказ Тогда
		Стр = "";
		Для Каждого Элем Из МассивОшибок Цикл
			Стр = Стр + Элем + Символы.ПС;
		КонецЦикла;	
		
		СтрокаОшибкаОбработкаОжидания = Ванесса.ПолучитьТекстСообщенияПользователю("Одна или несколько строк эталонной таблицы не найдена в таблице формы%1");
		СтрокаОшибкаОбработкаОжидания = СтрЗаменить(СтрокаОшибкаОбработкаОжидания,"%1",Символы.ПС + Стр);
		Возврат;
	КонецЕсли;
	
	//если оказались здесь - значит таблица равна нужной
	ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
	Ванесса.ПродолжитьВыполнениеШагов();
КонецПроцедуры 

&НаКлиенте
//И я жду, что таблица "ИмяТаблицы" станет содержать строки в течение 20 секунд:
//@ЯЖдуЧтоТаблицаСтанетСодержатьСтрокиВТечениеСекунд(Парам01,Парам02,ТабПарам)
Процедура ЯЖдуЧтоТаблицаСтанетСодержатьСтрокиВТечениеСекунд(ИмяТаблицы,КоличествоСекунд,ТабПарам) Экспорт
	Если ТабПарам.Количество() < 2 Тогда	// шапка + строка данных
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Должны быть переданы минимум 2 строки. Первая строка с именами колонок, вторая и следующие - данные для проверки.");		
	КонецЕсли;
	
	ТабПарам = Ванесса.ПолучитьЗначенияТаблицыGherkinИзКонтекста(ТабПарам);
	
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяТаблицыОбработкаОжидания       = ИмяТаблицы;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ТабПарамОбработкаОжидания         = ТабПарам;
	СтрокаОшибкаОбработкаОжидания     = "";
	ПодключитьОбработчикОжидания("ОбработичкОжиданияЯЖдуЧтоТаблицаСтанетСодержатьСтрокиВТечениеСекунд",1,Ложь);
КонецПроцедуры



&НаКлиенте
//Тогда таблица формы с именем "ТабличнаяЧасть1" содержит изменения:
//@ТаблицаФормыСИменемСталаРавной(Парам01,ТабПарам)
Процедура ТаблицаФормыСИменемСодержитИзменения(ИмяТЧ,ТабПарам) Экспорт
	ТаблицаФормыСИменемСталаРавной(ИмяТЧ,ТабПарам);
КонецПроцедуры

&НаСервереБезКонтекста
Функция УбратьВсеЗапрещенныеСимволы(Знач Стр)
	
	Стр = СтрЗаменить(Стр,"""","");
	Стр = СтрЗаменить(Стр,Символы.ПС,"");
	Стр = СтрЗаменить(Стр,Символы.ВК,"");
	ЗапрещенныеСимволы = " <>.,\/|':;!№%?*()@#$%^&*+-`~↓↑";
	
	Для НомерСимвола = 1 По СтрДлина(ЗапрещенныеСимволы) Цикл
		ЗапрещенныйСимвол = Сред(ЗапрещенныеСимволы, НомерСимвола, 1);
		Стр = СтрЗаменить(Стр, ЗапрещенныйСимвол, "_");
	КонецЦикла;
	
	Если Стр = "" Тогда
		Стр = "_";
	КонецЕсли;	 
	
	//чтобы экранировать служебные слова построителя запросов, т.к. колонки таблицы могут назвать с их использованием
	Стр = "_" + Стр;
	
	Возврат Стр;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТЗПроверяемыхДанных(ТабПарам,ДопПараметры)

	СтрокаШапки = ТабПарам[0];
	
	ТЗБыло = Новый ТаблицаЗначений;
	Для каждого Колонка Из СтрокаШапки Цикл
		ИмяКолонкиСтарое = УбратьВсеЗапрещенныеСимволы(СтрокаШапки[Колонка.Ключ]);
		
		Попытка
			ТЗБыло.Колонки.Добавить(ИмяКолонкиСтарое, Новый ОписаниеТипов("Строка"));
		Исключение
			ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("В эталонной таблице существуют две колонки с одинаковым заголовком: %1",ДопПараметры.ТекстСообщенийПользователю);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаШапки[Колонка.Ключ]);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЦикла;
	
	Для СтрокаБыло = 1 По ТабПарам.Количество()-1 Цикл //в первой строке шапка
		СтрокаТЗБыло = ТЗБыло.Добавить();
		Для каждого Колонка Из СтрокаШапки Цикл
			ИмяКолонкиСтарое = УбратьВсеЗапрещенныеСимволы(СтрокаШапки[Колонка.Ключ]);
			ЗначениеБыло = Неопределено;
			ТабПарам[СтрокаБыло].Свойство(Колонка.Ключ, ЗначениеБыло);
			СтрокаТЗБыло[ИмяКолонкиСтарое] = ЗначениеБыло;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТЗБыло;

КонецФункции // ПолучитьТЗПроверяемыхДанных(ТЗБыло)()

&НаСервереБезКонтекста
Функция ПолучитьТЗТекущихДанных(ЗначениеТЧ,ДопПараметры)
	
	ТЗСтало = Новый ТаблицаЗначений;
	
	Если ТЗСтало = Неопределено Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователюСервер("Не смог получить строки таблицы.",ДопПараметры.ТекстСообщенийПользователю);
	КонецЕсли;	 
	
	// создаем колонки
	Для каждого Колонка Из ЗначениеТЧ[0] Цикл
		Попытка
			ТЗСтало.Колонки.Добавить(УбратьВсеЗапрещенныеСимволы(Колонка.Ключ), Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
		Исключение
			ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("В результирующей таблице существуют две колонки с одинаковым заголовком: %1",ДопПараметры.ТекстСообщенийПользователю);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Колонка.Ключ);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЦикла;
	
	// создаем строки
	Для каждого СтрокаКолонки Из ЗначениеТЧ Цикл
		СтрокаТЗСтало = ТЗСтало.Добавить();
		Для каждого Колонка Из СтрокаКолонки Цикл
			СтрокаТЗСтало[УбратьВсеЗапрещенныеСимволы(Колонка.Ключ)] = Колонка.Значение;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТЗСтало;
	
КонецФункции // ПолучитьТЗТекущихДанных(ЗначениеТЧ)

&НаСервереБезКонтекста
Функция ПолучитьМассивКолонокКоторыеЕстьТолькоВБыло(ТЗБыло,ТЗСтало)
	Массив = Новый Массив;
	
	Для Каждого Колонка Из ТЗБыло.Колонки Цикл
		Если ТЗСтало.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Массив.Добавить(Колонка.Имя);
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Массив;
КонецФункции	

&НаСервереБезКонтекста
Функция ПоискВхожденияСтроки(ТЗБыло,СтрокаТЗБыло,Построитель,ИдКолонкиПропуск)
	ИдКолонки = -1;
	Для каждого Колонка Из ТЗБыло.Колонки Цикл
		ИдКолонки = ИдКолонки + 1;
		Если ИдКолонки = ИдКолонкиПропуск Тогда
			Продолжить;
		КонецЕсли;	 
		
		ЗначениеПоиска = СтрокаТЗБыло[Колонка.Имя];
		Если Не ЗначениеЗаполнено(ЗначениеПоиска) Или СокрЛП(ЗначениеПоиска) = "*" Тогда
			Продолжить;
		КонецЕсли;
		
		тОтбор = Построитель.Отбор.Добавить(Колонка.Имя);
		тОтбор.Использование = Истина;
		Если Сред(ЗначениеПоиска, СтрДлина(ЗначениеПоиска), 1) = "*" Тогда
			тОтбор.Значение     = Сред(ЗначениеПоиска, 1, СтрДлина(ЗначениеПоиска) - 1);
			тОтбор.ВидСравнения = ВидСравнения.Содержит;
		Иначе
			тОтбор.Значение     = ЗначениеПоиска;
			тОтбор.ВидСравнения = ВидСравнения.Равно;
		КонецЕсли;
	КонецЦикла;
	
	Построитель.Выполнить();
	ТабРезультат = Построитель.Результат.Выгрузить();		
	
	Возврат ТабРезультат;
КонецФункции	 

&НаСервереБезКонтекста
Процедура УбратьИзИмениКолонокСпецСимволы(Массив)
	Для Ккк = 0 По Массив.Количество()-1 Цикл
		Если Лев(Массив[Ккк],1) = "_" Тогда
			Массив[Ккк] = Сред(Массив[Ккк],2);
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПроизвестиСравнениеТаблицНаВхождениеСтрокНаСервере(ИмяТЧ, ТабПарам, ЗначениеТЧ,МассивОшибок,ДопПараметры)
	Отказ = Ложь;
	
	// преобразовать в Таблицу Значений
	ТЗБыло  = ПолучитьТЗПроверяемыхДанных(ТабПарам,ДопПараметры);
	ТЗСтало = ПолучитьТЗТекущихДанных(ЗначениеТЧ,ДопПараметры);
	
	МассивКолонокКоторыеЕстьТолькоВБыло = ПолучитьМассивКолонокКоторыеЕстьТолькоВБыло(ТЗБыло,ТЗСтало);
	Если МассивКолонокКоторыеЕстьТолькоВБыло.Количество() > 0 Тогда
		Стр = "В таблице <" + ИмяТЧ + "> нет колонок: ";
		УбратьИзИмениКолонокСпецСимволы(МассивКолонокКоторыеЕстьТолькоВБыло);
		Для Каждого Элем Из МассивКолонокКоторыеЕстьТолькоВБыло Цикл
			Стр = Стр + Элем + ", ";
		КонецЦикла;
		
		Стр = Лев(Стр,СтрДлина(Стр)-2);
		ВызватьИсключение Стр;
	КонецЕсли;	 
	
	// начинаем сравнение
	
	Для НомерСтроки = 0 По ТЗБыло.Количество()-1 Цикл
		СтрокаТЗБыло = ТЗБыло[НомерСтроки];
		Построитель = Новый ПостроительЗапроса;
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗСтало);
		ТабРезультат = ПоискВхожденияСтроки(ТЗБыло,СтрокаТЗБыло,Построитель,Неопределено);
		
		Если ТабРезультат.Количество() = 0 Тогда
			Стр = "|";
			Для каждого Колонка Из ТЗБыло.Колонки Цикл
				Стр = Стр + " '" + СтрокаТЗБыло[Колонка.Имя] + "' |";
			КонецЦикла;	
			
			ИдКолонки = -1;
			ТекстСообщения = "";
			КоличествоРешений = 0;
			Если ТЗБыло.Колонки.Количество() > 1 Тогда
				Для каждого Колонка Из ТЗБыло.Колонки Цикл
					ИдКолонки = ИдКолонки + 1;
					Построитель = Новый ПостроительЗапроса;
					Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗСтало);
					ТабРезультат = ПоискВхожденияСтроки(ТЗБыло,СтрокаТЗБыло,Построитель,ИдКолонки);
					
					Если ТабРезультат.Количество() <> 0 Тогда
						//значит нашли проблемную колонку
						Попытка
							ИмяКолонки      = ТабПарам[0][XMLСтрока("Кол" + (ИдКолонки+1))];
							ЗначениеКолонки = СтрокаТЗБыло[Колонка.Имя];
							ЗначениеКолонки = СтрЗаменить(ЗначениеКолонки,Символы.ПС,"\n");
						Исключение
							//не получилось получить имя колонки
							Прервать;
						КонецПопытки;
						
						ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("Не найдено значение <%1> из колонки <%2>.",ДопПараметры.ТекстСообщенийПользователю);
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ЗначениеКолонки); 
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяКолонки); 
						КоличествоРешений = КоличествоРешений + 1;
					КонецЕсли;	 
					
				КонецЦикла;	
			КонецЕсли;	 
			
			Если ЗначениеЗаполнено(ТекстСообщения) и КоличествоРешений = 1 Тогда
				Стр = Стр + Символы.ПС + ТекстСообщения;
			КонецЕсли;	 
			
			МассивОшибок.Добавить(Стр);
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Отказ;
КонецФункции

&НаКлиенте
Функция ПолучитьМакетИзОбработкиИлиИзКаталогаПроекта(ИмяМакета,ДопПараметры = Неопределено,ВызыватьИсключение = Истина)
	Макет    = Ванесса.ПолучитьМакетОбработки(ИмяМакета);
	Если Макет = Неопределено Тогда
		//будем искать макет в каталоге проекта
		Макет = Ванесса.НайтиМакетВКаталогеПроекта(ИмяМакета);
	КонецЕсли;	
	
	Если Макет = Неопределено Тогда
		Если ВызыватьИсключение Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог получить макет %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяМакета); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Макет; 
КонецФункции	 

&НаКлиенте
//Тогда таблица формы с именем "ТабличнаяЧасть1" содержит строки:
//@ТаблицаФормыСИменемСодержитСтроки(ИмяТЧ,ТабПарам)
Процедура ТаблицаФормыСИменемСодержитСтроки(ИмяТЧ,ТабПарам,ИмяМакета = Неопределено) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	
	Если ИмяМакета <> Неопределено Тогда
		Макет    = ПолучитьМакетИзОбработкиИлиИзКаталогаПроекта(ИмяМакета);
		ТабПарам = Ванесса.ПолучитьТаблицуGherkinИзМакета(Макет);
	КонецЕсли;	 
	
	ТекстОшибки = "";
	БылаОшибка = Ложь;
	ЗначениеТЧ = Неопределено;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		ТекстОшибки = "";
		
		Попытка
			ЗначениеТЧ = ПолучитьСтрокиИзТаблицыTestClient(ТЧ);
			
			Попытка
				КоличествоСтрокТаблицы = ЗначениеТЧ.Количество();
			Исключение
				КоличествоСтрокТаблицы = 0;
			КонецПопытки;
			
			Если КоличествоСтрокТаблицы = 0 Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог получить строки таблицы <%1>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Если ТабПарам.Количество() < 2 Тогда	// шапка + строка данных
				ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Должны быть переданы минимум 2 строки. Первая строка с именами колонок, вторая и следующие - данные для проверки.");		
			КонецЕсли;
			
			МассивОшибок = Новый Массив;
			ТабПарам     = Ванесса.ПолучитьЗначенияТаблицыGherkinИзКонтекста(ТабПарам);
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ТекстСообщенийПользователю",Ванесса.ДанныеПереводаСообщенийПользователю());
			Отказ = ПроизвестиСравнениеТаблицНаВхождениеСтрокНаСервере(ИмяТЧ, ТабПарам, ЗначениеТЧ,МассивОшибок,ДопПараметры);
			
			Если Отказ Тогда
				Ванесса.ОчиститьКешАктивнойТаблицыTestClient();
				
				Стр = "";
				Для Каждого Элем Из МассивОшибок Цикл
					Стр = Стр + Элем + Символы.ПС;
				КонецЦикла;	
				
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Одна или несколько строк эталонной таблицы не найдена в таблице формы%1");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Символы.ПС + Стр);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Ванесса.sleep(1);
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		Если ЗначениеТЧ <> Неопределено Тогда
			МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
			Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,"ТекущееЗначениеТаблицы");
		КонецЕсли;	 
		СтрокиКоторыеИскалисьВТаблице = Ванесса.ПреобразоватьЗначениеВМакет(ТабПарам);
		Ванесса.ПрикрепитьМакетКСценарию(СтрокиКоторыеИскалисьВТаблице,"СтрокиКоторыеИскалисьВТаблице");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
//Тогда таблица "ТабличнаяЧасть1" содержит строки:
//@ТаблицаСодержитСтроки(ИмяТЧ,ТабПарам)
Процедура ТаблицаСодержитСтроки(ИмяТЧ,ТабПарам) Экспорт
	ТаблицаФормыСИменемСодержитСтроки(ИмяТЧ,ТабПарам);
КонецПроцедуры

&НаКлиенте
//Тогда таблица "ТабличнаяЧасть1" содержит строки из макета
//@ТаблицаСодержитСтрокиИзМакета(ИмяТЧ,ТабПарам)
Процедура ТаблицаСодержитСтрокиИзМакета(ИмяТЧ,ИмяМакета) Экспорт
	ТаблицаФормыСИменемСодержитСтроки(ИмяТЧ,Неопределено,ИмяМакета);
КонецПроцедуры


&НаКлиенте
Процедура КолонкиОжидаемойИРельнойТаблицыСовпадают(ПереданныеКолонки,КолонкиТаблицыTestClient,ТабПарам,ЗначениеТЧ,ИмяТЧ)
	ПерваяСтрокаПереданнойТаблицы = ТабПарам[0];
	Для Каждого Значение Из ПерваяСтрокаПереданнойТаблицы Цикл
		ПереданныеКолонки.Добавить(Значение.Значение)
	КонецЦикла;	
	
	ПерваяСтрокаЗначениеТЧ = ЗначениеТЧ[0];
	Для Каждого Значение Из ПерваяСтрокаЗначениеТЧ Цикл
		КолонкиТаблицыTestClient.Добавить(Значение.Ключ)
	КонецЦикла;	
	
	
	
	Стр = "";
	Для Каждого ИмяКолонки Из ПереданныеКолонки Цикл
		Ид = КолонкиТаблицыTestClient.Найти(ИмяКолонки);
		Если Ид = Неопределено Тогда
			Стр = Стр + ИмяКолонки + ";";
		КонецЕсли;	
	КонецЦикла;	
	
	Если Стр <> "" Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> не найдены колонки: %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Стр);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//Тогда таблица "ТабличнаяЧасть1" не содержит строки:
//@ТаблицаНеСодержитСтроки(ИмяТЧ,ТабПарам)
Процедура ТаблицаНеСодержитСтроки(ИмяТЧ,ТабПарам,ИмяМакета = Неопределено) Экспорт
	Если ИмяМакета <> Неопределено Тогда
		Макет    = ПолучитьМакетИзОбработкиИлиИзКаталогаПроекта(ИмяМакета);
		ТабПарам = Ванесса.ПолучитьТаблицуGherkinИзМакета(Макет);
	КонецЕсли;	 
	
	Если ТабПарам.Количество() < 2 Тогда	// шапка + строка данных
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Должны быть переданы минимум 2 строки. Первая строка с именами колонок, вторая и следующие - данные для проверки.");		
	КонецЕсли;
	
	ТекстОшибки = "";
	БылаОшибка = Ложь;
	ЗначениеТЧ = Неопределено;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		ТекстОшибки = "";
		
		Попытка
			ТЧ = НайтиТЧПоИмени(ИмяТЧ);
			
			ЗначениеТЧ = ПолучитьСтрокиИзТаблицыTestClient(ТЧ);
			
			Если ЗначениеТЧ = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось получить значение таблицы <%1>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			Если ЗначениеТЧ.Количество() = 0 Тогда
				//значит таблица точно не содержит строки
				Прервать;		
			КонецЕсли;	 
			
			//проверим, что переданы все колонки
			ПереданныеКолонки        = Новый Массив;
			КолонкиТаблицыTestClient = Новый Массив;
			
			КолонкиОжидаемойИРельнойТаблицыСовпадают(ПереданныеКолонки,КолонкиТаблицыTestClient,ТабПарам,ЗначениеТЧ,ИмяТЧ);
			
			МассивНайденныхСтрок = Новый Массив;
			
			//проверим, что в таблице нет указанных строк
			Для Ккк = 0 По ЗначениеТЧ.Количество()-1 Цикл
				СтрокаТаблицыTestClient = ЗначениеТЧ[Ккк];
				
				Для Ррр = 1 По ТабПарам.Количество()-1 Цикл
					СтрокаПереданнойТаблицы = ТабПарам[Ррр];
					
					НашлиСтроку = Истина;
					
					Ном = -1;
					Для Каждого ИмяКолонки Из ПереданныеКолонки Цикл
						Ном                       = Ном + 1;
						ЗначениеTestClient        = СтрокаТаблицыTestClient[ИмяКолонки];
						ЗначениеПереданнойТаблицы = СтрокаПереданнойТаблицы["Кол"+ XMLСтрока(Ном+1)];
						
						Если ЗначениеTestClient <> ЗначениеПереданнойТаблицы Тогда
							НашлиСтроку = Ложь;
							Прервать;
						КонецЕсли;	 
					КонецЦикла;	
					
					Если НашлиСтроку Тогда
						Если МассивНайденныхСтрок.Найти(СтрокаПереданнойТаблицы) = Неопределено Тогда
							МассивНайденныхСтрок.Добавить(СтрокаПереданнойТаблицы);
						КонецЕсли;	 
					КонецЕсли;	 
					
				КонецЦикла;	
				
			КонецЦикла;	
			
			Если МассивНайденныхСтрок.Количество() > 0 Тогда
				Стр = "";
				Для Каждого СтрокаПереданнойТаблицы Из МассивНайденныхСтрок Цикл
					Если Стр <> "" Тогда
						Стр = Стр +  Символы.ПС;
					КонецЕсли;	 
					Стр = Стр + "|";
					Ном = -1;
					Для Каждого ИмяКолонки Из ПереданныеКолонки Цикл
						Ном = Ном + 1;
						ЗначениеПереданнойТаблицы = СтрокаПереданнойТаблицы["Кол"+ XMLСтрока(Ном+1)];
						Стр = Стр + " '" + ЗначениеПереданнойТаблицы + "' |";
					КонецЦикла;	
				КонецЦикла;	
				
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Нашли строки в таблице <%1>:%2");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Символы.ПС + Стр);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Ванесса.sleep(1);
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		Если ЗначениеТЧ <> Неопределено Тогда
			МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
			Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,"ТекущееЗначениеТаблицы");
		КонецЕсли;	 
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//Тогда таблица "ТабличнаяЧасть1" не содержит строки из макета
//@ТаблицаНеСодержитСтрокиИзМакета(ИмяТЧ,ТабПарам)
Процедура ТаблицаНеСодержитСтрокиИзМакета(ИмяТЧ,ИмяМакета) Экспорт
	ТаблицаНеСодержитСтроки(ИмяТЧ,Неопределено,ИмяМакета);
КонецПроцедуры



&НаКлиенте
//Когда В панели разделов я выбираю "Склады"
//@ВПанелиРазделовЯВыбираю(Парам01)
Процедура ВПанелиРазделовЯВыбираю(ИмяКнопки) Экспорт
	ПанельРазделов = Ванесса.ПанельРазделов();
	
	КнопкаКомандногоИнтерфейса = ПанельРазделов.НайтиОбъект(Тип("ТестируемаяКнопкаКомандногоИнтерфейса"), ИмяКнопки,,10);
	Если КнопкаКомандногоИнтерфейса = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка панели разделов <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКнопки); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	КнопкаКомандногоИнтерфейса.Нажать();
	Ванесса.ОбработатьСменуАктивногоОкна();
КонецПроцедуры

&НаКлиенте
//И В панели функций я выбираю "Склады"
//@ВПанелиФункцийЯВыбираю(Парам01)
Процедура ВПанелиФункцийЯВыбираю(ИмяКнопки) Экспорт
	МенюФункцийТекущегоРаздела = Неопределено;
	ПанельФункций = Ванесса.ПанельФункций(МенюФункцийТекущегоРаздела);
	
	Если ПанельФункций <> Неопределено Тогда
		КнопкаКомандногоИнтерфейса = ПанельФункций.НайтиОбъект(Тип("ТестируемаяКнопкаКомандногоИнтерфейса"), ИмяКнопки,,10);
	КонецЕсли;	 
	
	Если КнопкаКомандногоИнтерфейса = Неопределено Тогда
		Если МенюФункцийТекущегоРаздела <> Неопределено Тогда
			КнопкаКомандногоИнтерфейса = МенюФункцийТекущегоРаздела.НайтиОбъект(Тип("ТестируемаяКнопкаКомандногоИнтерфейса"), ИмяКнопки,,10);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если КнопкаКомандногоИнтерфейса = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Команда меню <%1> не найдена в панели функций.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКнопки); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	КнопкаКомандногоИнтерфейса.Нажать();
	Ванесса.ОбработатьСменуАктивногоОкна();
КонецПроцедуры

&НаКлиенте
//И В панели функций в группе "Основное" я выбираю "Склады"
//@ВПанелиФункцийВГруппеЯВыбираю(Парам01,Парам02)
Процедура ВПанелиФункцийВГруппеЯВыбираю(ИмяГруппы,ИмяКнопки) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	ОкноПриложенияОсновноеCommandInterface = КонтекстСохраняемый.ГлавноеОкноТестируемого.ПолучитьКомандныйИнтерфейс();
	//ОкноПриложенияОсновноеCommandInterface = КонтекстСохраняемый.ОкноПриложенияОсновноеCommandInterface;
	ПодчиненныеОбъекты = ОкноПриложенияОсновноеCommandInterface.ПолучитьПодчиненныеОбъекты();
	//Ванесса.ПосмотретьЗначение(ПодчиненныеОбъекты,Истина);
	МенюФункций                = Неопределено;
	МенюФункцийТекущегоРаздела = Неопределено;
	Для каждого Элем Из ПодчиненныеОбъекты Цикл
		Если НРег(Элем.ТекстЗаголовка) = НРег("Меню функций") Тогда
			МенюФункций = Элем;
		ИначеЕсли НРег(Элем.ТекстЗаголовка) = НРег("Functions menu") Тогда
			МенюФункций = Элем;
		ИначеЕсли НРег(Элем.ТекстЗаголовка) = НРег("Панель функций текущего раздела") Тогда
			МенюФункцийТекущегоРаздела = Элем;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если (МенюФункций = Неопределено) и (МенюФункцийТекущегоРаздела = Неопределено) Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не нашли меню функций раздела.");
	КонецЕсли;	 
	
	ГруппаИнтерфейса = МенюФункций.НайтиОбъект(Тип("ТестируемаяГруппаКомандногоИнтерфейса"), ИмяГруппы,,10);
	
	
	Если ГруппаИнтерфейса = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не найдена группа командного интерфейса <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяГруппы);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	КнопкаКомандногоИнтерфейса = ГруппаИнтерфейса.НайтиОбъект(Тип("ТестируемаяКнопкаКомандногоИнтерфейса"), ИмяКнопки,,10);
	
	Если КнопкаКомандногоИнтерфейса = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Команда меню <%1> не найдена в панели функций.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКнопки); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	КнопкаКомандногоИнтерфейса.Нажать();
	Ванесса.ОбработатьСменуАктивногоОкна();
КонецПроцедуры

&НаКлиенте
//Когда В панели открытых я выбираю "Склады"
//@ВПанелиОткрытыхЯВыбираю(Парам01)
Процедура ВПанелиОткрытыхЯВыбираю(ИмяКнопки) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	ОкноПриложенияОсновноеCommandInterface = КонтекстСохраняемый.ГлавноеОкноТестируемого.ПолучитьКомандныйИнтерфейс();
	//ОкноПриложенияОсновноеCommandInterface = КонтекстСохраняемый.ОкноПриложенияОсновноеCommandInterface;
	ПодчиненныеОбъекты = ОкноПриложенияОсновноеCommandInterface.ПолучитьПодчиненныеОбъекты();
	ПанельРазделов = Неопределено;
	Для каждого Элем Из ПодчиненныеОбъекты Цикл
		Если Ванесса.ЭтоПанельОткрытых(Элем.ТекстЗаголовка) Тогда
			ПанельРазделов = Элем;
			Прервать;
		КонецЕсли;	 
		
		//Если НРег(Элем.ТекстЗаголовка) = НРег("Панель открытых") Тогда
		//	ПанельРазделов = Элем;
		//КонецЕсли;	 
	КонецЦикла;
	
	Если ПанельРазделов = Неопределено Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не нашли панель открытых окон.");
	КонецЕсли;	 
	
	
	КнопкаКомандногоИнтерфейса = ПанельРазделов.НайтиОбъект(Тип("ТестируемаяКнопкаКомандногоИнтерфейса"), ИмяКнопки,,10);
	Если КнопкаКомандногоИнтерфейса = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка панели открытых окон <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКнопки); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	КнопкаКомандногоИнтерфейса.Нажать();
	Ванесса.ОбработатьСменуАктивногоОкна();
КонецПроцедуры

&НаКлиенте
//И В командном интерфейсе я выбираю "Основная" "Справочник1"
//@ВКомандномИнтерфейсеЯВыбираю(Парам01,Парам02)
Процедура ВКомандномИнтерфейсеЯВыбираю(ИмяКомандыПанелиРазделов,ИмяКомандыПанелиФункций) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	ВПанелиРазделовЯВыбираю(ИмяКомандыПанелиРазделов);
	ВПанелиФункцийЯВыбираю(ИмяКомандыПанелиФункций);
КонецПроцедуры





&НаКлиенте
//И В открытой форме я нажимаю кнопку выбора у поля с заголовком "Реквизит2"
//@ВОткрытойФормеЯНажимаюКнопкуВыбораУПоляСЗаголовком(Парам01)
Процедура ВОткрытойФормеЯНажимаюКнопкуВыбораУПоляСЗаголовком(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	Поле = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"));
	Если Поле = Неопределено Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с именем <%1> не найдено.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> не найдено.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Поле.Активизировать();
	СделатьДействияПриЗаписиВидео();
	СделатьДействияПриЗаписиHTML();
	Поле.Выбрать();
КонецПроцедуры

&НаКлиенте
//И В открытой форме я нажимаю кнопку выбора у поля "Реквизит2"
//@ВОткрытойФормеЯНажимаюКнопкуВыбораУПоля(Парам01)
Процедура ВОткрытойФормеЯНажимаюКнопкуВыбораУПоля(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯНажимаюКнопкуВыбораУПоляСЗаголовком(ИмяРеквизита,ИскатьПоИмени);
КонецПроцедуры







&НаКлиенте
//И В открытой форме я нажимаю кнопку выбора у поля с именем "Реквизит4"
//@ВОткрытойФормеЯНажимаюКнопкуВыбораУПоляСИменем(Парам01)
Процедура ВОткрытойФормеЯНажимаюКнопкуВыбораУПоляСИменем(ИмяРеквизита) Экспорт
	ВОткрытойФормеЯНажимаюКнопкуВыбораУПоляСЗаголовком(ИмяРеквизита,Истина);
КонецПроцедуры

&НаКлиенте
//И табличный документ формы с именем "РеквизитТабличныйДокумент" стал равен:
//@ТабличныйДокументФормыСИменемСталРавен(Парам01,ТабПарам)
Процедура ТабличныйДокументФормыСИменемСталРавен(ИмяРеквизита,ТабПарамБыло,СталПустым = Ложь,ДопПараметры = Неопределено) Экспорт
	СравнениеПоШаблону = Ложь;
	Если ДопПараметры <> Неопределено Тогда
		Если ДопПараметры.Свойство("СравнениеПоШаблону") Тогда
			СравнениеПоШаблону = ДопПараметры.СравнениеПоШаблону;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ПолеТабДок = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, Истина, Истина, Тип("ТестируемоеПолеФормы"));
	Если ПолеТабДок = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент формы с именем <%1> не найден.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	
	
	ТабДокСтало = Ванесса.ПолучитьТабДокИзTestClientКакМассив(ПолеТабДок,ДопПараметры);
	Если СталПустым Тогда
		Если ТабДокСтало.Количество() = 0 Тогда
			Возврат;
		Иначе
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В табличном документе %1 строк, а ожидалось, что он пустой.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТабДокСтало.Количество()); 
			
			Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабПарамБыло,ТабДокСтало,"Макет");
			
			ТекущееЗначениеМакета   = Ванесса.ПреобразоватьЗначениеВМакет(ТабДокСтало);
			Ванесса.ПрикрепитьМакетКСценарию(ТекущееЗначениеМакета,"ТекущееЗначениеМакета");
			
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ТабДокСтало.Количество() <> ТабПарамБыло.Количество() Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В табличном документе %1 строк, а ожидалось %2 строк.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТабДокСтало.Количество()); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТабПарамБыло.Количество()); 
		
		
		Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабПарамБыло,ТабДокСтало,"Макет");
		
		ЭталонноеЗначениеМакета = Ванесса.ПреобразоватьЗначениеВМакет(ТабПарамБыло);
		ТекущееЗначениеМакета   = Ванесса.ПреобразоватьЗначениеВМакет(ТабДокСтало);
		Ванесса.ПрикрепитьМакетКСценарию(ТекущееЗначениеМакета,"ТекущееЗначениеМакета");
		Ванесса.ПрикрепитьМакетКСценарию(ЭталонноеЗначениеМакета,"ЭталонноеЗначениеМакета");
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Ном = -1;
	Для каждого СтрСтало Из ТабДокСтало Цикл
		Ном     = Ном + 1;
		
		СтрБыло = ТабПарамБыло[Ном];
		
		Если СтрСтало.Количество() <> СтрБыло.Количество() Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В табличном документе %1 колонок, а ожидалось %2 колонок.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрСтало.Количество()); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",СтрБыло.Количество()); 
			
			
			Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабПарамБыло,ТабДокСтало,"Макет");
			
			ЭталонноеЗначениеМакета = Ванесса.ПреобразоватьЗначениеВМакет(ТабПарамБыло);
			ТекущееЗначениеМакета   = Ванесса.ПреобразоватьЗначениеВМакет(ТабДокСтало);
			Ванесса.ПрикрепитьМакетКСценарию(ТекущееЗначениеМакета,"ТекущееЗначениеМакета");
			Ванесса.ПрикрепитьМакетКСценарию(ЭталонноеЗначениеМакета,"ЭталонноеЗначениеМакета");
			
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		НомКол = 0;
		Для каждого ЗнСтало Из СтрСтало Цикл
			НомКол  = НомКол + 1;
			
			ЗнБыло  = СтрБыло["Кол" + НомКол];
			
			ЗнБыло  = СтрЗаменить(ЗнБыло,Символы.НПП," ");
			ЗнСтало = СтрЗаменить(ЗнСтало,Символы.НПП," ");
			
			Если НЕ СравнениеПоШаблону Тогда
				Если ЗнСтало <> ЗнБыло Тогда
					Если ЗнБыло <> "*" Тогда
						ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В табличном документе в колонке №%1 значение= <%2> , а ожидалось <%3>");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",НомКол); 
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ЗнСтало); 
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ЗнБыло); 
						
						Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабПарамБыло,ТабДокСтало,"Макет");
						
						ЭталонноеЗначениеМакета = Ванесса.ПреобразоватьЗначениеВМакет(ТабПарамБыло);
						ТекущееЗначениеМакета   = Ванесса.ПреобразоватьЗначениеВМакет(ТабДокСтало);
						Ванесса.ПрикрепитьМакетКСценарию(ТекущееЗначениеМакета,"ТекущееЗначениеМакета");
						Ванесса.ПрикрепитьМакетКСценарию(ЭталонноеЗначениеМакета,"ЭталонноеЗначениеМакета");
						
						ВызватьИсключение ТекстСообщения;
					КонецЕсли;	 
				КонецЕсли;	 
			Иначе	
				Если Не Ванесса.СтрокаСоответствуетШаблону(ЗнСтало, ЗнБыло) Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В табличном документе в колонке №%1 значение= <%2> , а ожидалось <%3>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",НомКол); 
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ЗнСтало); 
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ЗнБыло); 
					
					Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабПарамБыло,ТабДокСтало);
					
					ЭталонноеЗначениеМакета = Ванесса.ПреобразоватьЗначениеВМакет(ТабПарамБыло);
					ТекущееЗначениеМакета   = Ванесса.ПреобразоватьЗначениеВМакет(ТабДокСтало);
					Ванесса.ПрикрепитьМакетКСценарию(ТекущееЗначениеМакета,"ТекущееЗначениеМакета");
					Ванесса.ПрикрепитьМакетКСценарию(ЭталонноеЗначениеМакета,"ЭталонноеЗначениеМакета");
					
					
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
			КонецЕсли;	 
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
//И табличный документ формы с именем "РеквизитТабличныйДокумент" стал равен:
//@ТабличныйДокументСталРавен(Парам01,ТабПарам)
Процедура ТабличныйДокументСталРавен(ИмяРеквизита,ТабПарамБыло,СталПустым = Ложь) Экспорт
	ТабличныйДокументФормыСИменемСталРавен(ИмяРеквизита,ТабПарамБыло,СталПустым);
КонецПроцедуры

&НаКлиенте
//И табличный документ формы с именем "РеквизитТабличныйДокумент" равен:
//@ТабличныйДокументРавен(Парам01,ТабПарам)
Процедура ТабличныйДокументРавен(ИмяРеквизита,ТабПарамБыло,СталПустым = Ложь) Экспорт
	ТабличныйДокументФормыСИменемСталРавен(ИмяРеквизита,ТабПарамБыло,СталПустым);
КонецПроцедуры

&НаКлиенте
//И табличный документ формы с именем "РеквизитТабличныйДокумент" равен по шаблону:
//@ТабличныйДокументРавенПоШаблону(Парам01,ТабПарам)
Процедура ТабличныйДокументРавенПоШаблону(ИмяРеквизита,ТабПарамБыло,СталПустым = Ложь) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СравнениеПоШаблону",Истина);
	
	ТабличныйДокументФормыСИменемСталРавен(ИмяРеквизита,ТабПарамБыло,СталПустым,ДопПараметры);
КонецПроцедуры

&НаКлиенте
//И область "R1C1:R10C10" табличного документа "РеквизитТабличныйДокумент" стала равна:
//@ОбластьТабличногоДокументаСталаРавна(Парам01,Парам02,ТабПарам)
Процедура ОбластьТабличногоДокументаСталаРавна(ИмяОбласти,ИмяРеквизита,ТабПарамБыло,СталПустым = Ложь,СравнениеПоШаблону = Ложь) Экспорт
	НачСтр = -1;
	НачКол = -1;
	КолСтр = -1;
	КолКол = -1;
	
	Попытка
		Ванесса.ПолучитьПараметрыОбластиМакета(ИмяОбласти,НачСтр,НачКол,КолСтр,КолКол);
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не верный формат области <%1>. %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяОбласти);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОписаниеОшибки());
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("НачСтр",НачСтр);
	ДопПараметры.Вставить("НачКол",НачКол);
	ДопПараметры.Вставить("КолСтр",КолСтр);
	ДопПараметры.Вставить("КолКол",КолКол);
	ДопПараметры.Вставить("НадоСчитатьОбласть",Истина);
	ДопПараметры.Вставить("УдалятьПустыеСтрокиИзМакета",Ложь);
	ДопПараметры.Вставить("СравнениеПоШаблону",СравнениеПоШаблону);
	
	ТабличныйДокументФормыСИменемСталРавен(ИмяРеквизита,ТабПарамБыло,СталПустым,ДопПараметры);
КонецПроцедуры

&НаКлиенте
//И область "R1C1:R10C10" табличного документа "РеквизитТабличныйДокумент" равна:
//@ОбластьТабличногоДокументаРавна(Парам01,Парам02,ТабПарам)
Процедура ОбластьТабличногоДокументаРавна(ИмяОбласти,ИмяРеквизита,ТабПарамБыло,СталПустым = Ложь) Экспорт
	ОбластьТабличногоДокументаСталаРавна(ИмяОбласти,ИмяРеквизита,ТабПарамБыло,СталПустым);
КонецПроцедуры

&НаКлиенте
//И область "R1C1:R10C10" табличного документа "РеквизитТабличныйДокумент" равна по шаблону:
//@ОбластьТабличногоДокументаРавнаПоШаблону(Парам01,Парам02,ТабПарам)
Процедура ОбластьТабличногоДокументаРавнаПоШаблону(ИмяОбласти,ИмяРеквизита,ТабПарамБыло,СталПустым = Ложь) Экспорт
	ОбластьТабличногоДокументаСталаРавна(ИмяОбласти,ИмяРеквизита,ТабПарамБыло,СталПустым,Истина);
КонецПроцедуры

&НаКлиенте
//И табличный документ формы с именем "РеквизитТабличныйДокумент" содержит строки:
//@ТабличныйДокументФормыСИменемСодержитСтроки(Парам01,ТабПарам)
Процедура ТабличныйДокументФормыСИменемСодержитСтроки(ИмяРеквизита,ТабПарамБыло) Экспорт
	Нашли = Ложь;
	МассивФорм = НайтиФормыТекущегоОкна();
	
	ПолеТабДок = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, Истина, Истина, Тип("ТестируемоеПолеФормы"));
	ТабДокСтало = Ванесса.ПолучитьТабДокИзTestClientКакМассив(ПолеТабДок);
	
	Ном = -1;
	Для каждого СтрБыло Из ТабПарамБыло Цикл
		Ном     = Ном + 1;
		
		СтрокаСовпала = Ложь;
		Для Каждого СтрСтало Из ТабДокСтало Цикл
		
			НомКол = 0;
			КолонкиСовпали = Истина;
			Для каждого ЗнСтало Из СтрСтало Цикл
				НомКол = НомКол + 1;
				
				Попытка
					ЗнБыло = СтрБыло["Кол" + НомКол];
				Исключение
					// Не совпало количество колонок
					КолонкиСовпали = Ложь;
					Прервать;
				КонецПопытки;
				
				ЗнБыло  = СокрЛП(СтрЗаменить(ЗнБыло,Символы.НПП," "));
				ЗнСтало = СокрЛП(СтрЗаменить(ЗнСтало,Символы.НПП," "));
				
				Если ЗнСтало <> ЗнБыло Тогда
					Если ЗнБыло <> "*" Тогда
						КолонкиСовпали = Ложь;
						Прервать;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЦикла;
			
			Если КолонкиСовпали Тогда
				СтрокаСовпала = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ СтрокаСовпала Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Строка №%1 не найдена в табличном документе на форме");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",(Ном + 1)); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
//И В открытой форме я нажимаю на кнопку с именем "ЗаполнитьРекСтрока1"
//@ВОткрытойФормеЯНажимаюНаКнопкуСИменем(Парам01)
Процедура ВОткрытойФормеЯНажимаюНаКнопкуСИменем(ИмяКнопки) Экспорт
	ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком(ИмяКнопки,Истина);
КонецПроцедуры




&НаКлиенте
//И я закрываю окно с заголовком "Справочник1"
//@ЯЗакрываюОкноСЗаголовком(Парам01)
Процедура ЯЗакрываюОкноСЗаголовком(Знач ЗаголовокОкна) Экспорт
	ЗаголовокОкна = Ванесса.ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(ЗаголовокОкна);
	ОкноПриложения = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"),ЗаголовокОкна);
	Если ОкноПриложения = Неопределено Тогда
		Ванесса.ОбработатьСменуАктивногоОкна();
		Попытка
			АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
			ЗаголовокАктивногоОкна = АктивноеОкно.Заголовок;
		Исключение
			ЗаголовокАктивногоОкна = "";
		КонецПопытки;
		
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Окно с заголовком <%1> не найдено. Текущее окно: <%2>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ЗаголовокОкна); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ЗаголовокАктивногоОкна); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Ванесса.ОбработатьСменуАктивногоОкна();
	ОкноПриложения.Закрыть();
КонецПроцедуры

&НаКлиенте
//И я закрываю окно "Справочник1"
//@ЯЗакрываюОкно(Парам01)
Процедура ЯЗакрываюОкно(ЗаголовокОкна) Экспорт
	ЯЗакрываюОкноСЗаголовком(ЗаголовокОкна);
КонецПроцедуры

&НаКлиенте
//И я закрываю текущее окно
//@ЯЗакрываюТекущееОкно()
Процедура ЯЗакрываюТекущееОкно() Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	Если АктивноеОкно = Неопределено Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Активное окно не найдено.");
	КонецЕсли;	 
	
	ПолучилосьЗакрыть = Ложь;
	
	Попытка
		АктивноеОкно.Закрыть();	
		ПолучилосьЗакрыть = Истина;
	Исключение
	КонецПопытки;
	
	Если Не ПолучилосьЗакрыть Тогда
		//попробуем найти окно предупреждения
		АктивноеОкно = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"),"1С:Предприятие");
		Если АктивноеОкно <> Неопределено Тогда
			ЕслиНаЭкранеДиалогМодальныйДиалогТоНадоЕгоЗакрыть();
			ПолучилосьЗакрыть = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Не ПолучилосьЗакрыть Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось закрыть активное окно. %1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеОшибки());
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И я закрываю окно предупреждения
//@ЯЗакрываюОкноПредупреждения()
Процедура ЯЗакрываюОкноПредупреждения() Экспорт
	ОкноПредупреждения  = Ванесса.НайтиОкноМодальногоДиалога();
	Если ОкноПредупреждения = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ОкноПредупреждения.Закрыть();
КонецПроцедуры






&НаКлиенте
//И В текущем окне я нажимаю кнопку командного интерфейса "Общая команда для справочника1"
//@ВТекущемОкнеЯНажимаюКнопкуКомандногоИнтерфейса(Парам01)
Процедура ВТекущемОкнеЯНажимаюКнопкуКомандногоИнтерфейса(ИмяКнопки) Экспорт
	АктивноеОкно       = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	КомандныйИнтерфейс = АктивноеОкно.ПолучитьКомандныйИнтерфейс();
	//ОкноПриложенияОсновноеCommandInterface = КонтекстСохраняемый.ОкноПриложенияОсновноеCommandInterface;
	КнопкаКомандногоИнтерфейса = КомандныйИнтерфейс.НайтиОбъект(Тип("ТестируемаяКнопкаКомандногоИнтерфейса"), ИмяКнопки,,5);
	Если КнопкаКомандногоИнтерфейса = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка/команда с заголовком <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКнопки); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	КнопкаКомандногоИнтерфейса.Нажать();
	Ванесса.ОбработатьСменуАктивногоОкна();
КонецПроцедуры

&НаКлиенте
//И В открытой форме в таблице ""Товары"" я добавляю новую строку
//@ВОткрытойФормеВТЧЯДобавляюНовуюСтроку(Парам01)
Процедура ВОткрытойФормеВТЧЯДобавляюНовуюСтроку(ИмяТЧ) Экспорт
	Таблица = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	Если Таблица = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("ТЧ с именем <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Таблица.ДобавитьСтроку();
КонецПроцедуры




&НаКлиенте
//И я нажимаю на кнопку создать поля "Вид цены"
//@ЯНажимаюНаКнопкуСоздатьПоля(Парам01)
Процедура ЯНажимаюНаКнопкуСоздатьПоля(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"));
	ПолеРеквизит.Активизировать();
	
	СделатьДействияПриЗаписиВидео();
	СделатьДействияПриЗаписиHTML();
	
	Попытка
		ПолеРеквизит.ОткрытьВыпадающийСписок();
		ТаймаутОжидания = 10;
		ТаймаутОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(ТаймаутОжидания);
		ПолеРеквизит.ОжидатьФормированияВыпадающегоСписка(ТаймаутОжидания);
	Исключение
	КонецПопытки;
	
	ПолеРеквизит.Создать();
КонецПроцедуры

&НаКлиенте
//И я нажимаю на кнопку создать поля с именем "Вид цены"
//@ЯНажимаюНаКнопкуСоздатьПоляСИменем(Парам01)
Процедура ЯНажимаюНаКнопкуСоздатьПоляСИменем(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ЯНажимаюНаКнопкуСоздатьПоля(ИмяРеквизита,Истина);
КонецПроцедуры



&НаКлиенте
//И В открытой форме я нажимаю на кнопку открытия поля с заголовком "Реквизит2"
//@ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоляСЗаголовком(Парам01)
Процедура ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоляСЗаголовком(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"));
	ПолеРеквизит.Активизировать();
	СделатьДействияПриЗаписиВидео();
	СделатьДействияПриЗаписиHTML();
	ПолеРеквизит.Открыть();
КонецПроцедуры

&НаКлиенте
//И В открытой форме я нажимаю на кнопку открытия поля "Реквизит2"
//@ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоля(Парам01)
Процедура ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоля(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоляСЗаголовком(ИмяРеквизита,ИскатьПоИмени);
КонецПроцедуры






&НаКлиенте
//И В открытой форме я нажимаю на кнопку открытия поля с именем "Реквизит2"
//@ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоляСИменем(Парам01)
Процедура ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоляСИменем(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоляСЗаголовком(ИмяРеквизита,Истина);
КонецПроцедуры

&НаКлиенте
Процедура СделатьВводПоСтрокеВПолеВВода(ТЧ,ИмяТЧ,ПолеРеквизит,ИмяРеквизита,ИскатьПоИмени,ВыбираемоеЗначение,ДопПараметры)
	ТаймаутОжидания = 10;
	ТаймаутОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(ТаймаутОжидания);
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	КоличествоПопыток = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоПопыток);
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		
		Если ИмяТЧ <> Неопределено Тогда
			ТаблицаВРежимеРедактирования = ТЧ.ТекущийРежимРедактирование();
			Если Не ТаблицаВРежимеРедактирования Тогда
				ТЧ.ИзменитьСтроку();
			КонецЕсли;	 
		КонецЕсли;	 
		
		Попытка
			
			Попытка
				//ПолеРеквизит.ВвестиТекст(ВыбираемоеЗначение);
				Ванесса.ВвестиВПолеТекст(ПолеРеквизит,ВыбираемоеЗначение);
				Если Ванесса.БезопасноеВыполнениеШагов() Тогда
					Ванесса.Sleep(1);
				КонецЕсли;	 
			Исключение
				//для комбобоксов надо открыть список
				Если НЕ ПолеРеквизит.ВыпадающийСписокОткрыт() Тогда
					ПолеРеквизит.ОткрытьВыпадающийСписок();
				КонецЕсли;	 
				
				СписокСформировался = ПолеРеквизит.ОжидатьФормированияВыпадающегоСписка(ТаймаутОжидания);
				Если Ванесса.Версия8311ИлиВыше И НЕ СписокСформировался Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Выпадающий список <%1> не открылся для ввода текста.");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				//ПолеРеквизит.ВвестиТекст(ВыбираемоеЗначение);
				Ванесса.ВвестиВПолеТекст(ПолеРеквизит,ВыбираемоеЗначение);
				Если Ванесса.БезопасноеВыполнениеШагов() Тогда
					Ванесса.Sleep(1);
				КонецЕсли;	 
			КонецПопытки;
			
			СписокСформировался = ПолеРеквизит.ОжидатьФормированияВыпадающегоСписка(ТаймаутОжидания);
			Если Ванесса.Версия8311ИлиВыше И НЕ СписокСформировался Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Выпадающий список <%1> не был сформирован.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Если НЕ Ванесса.Версия8310ИлиВыше Тогда
				ТекТекст = ПолеРеквизит.ПолучитьТекстРедактирования();
				Если ТекТекст <> ВыбираемоеЗначение Тогда
					//скорее всего это ошибка web клиента, т.к. в поле запрещено воводить текст, а не было вызвано исключение
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Выпадающий список <%1>. Ожидали, что в нём будет текст %2, а получили %3.");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ВыбираемоеЗначение); 
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ТекТекст); 
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	
			КонецЕсли;	
			
			Попытка
				Если Ванесса.Версия8310ИлиВыше Тогда
					//проверим что текст был корректнро введен
					ТекТекст = ПолеРеквизит.ПолучитьТекстРедактирования();
					Если ТекТекст <> ВыбираемоеЗначение Тогда
						//ПолеРеквизит.ВвестиТекст(ВыбираемоеЗначение);
						Ванесса.ВвестиВПолеТекст(ПолеРеквизит,ВыбираемоеЗначение);
						СписокСформировался = ПолеРеквизит.ОжидатьФормированияВыпадающегоСписка(ТаймаутОжидания);
						Ванесса.Sleep(1);
						
						ТекТекст = ПолеРеквизит.ПолучитьТекстРедактирования();
						Если ТекТекст <> ВыбираемоеЗначение Тогда
							ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Выпадающий список <%1>. Ожидали, что в нём будет текст %2, а получили %3.");
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ВыбираемоеЗначение); 
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ТекТекст); 
							ВызватьИсключение ТекстСообщения;
						КонецЕсли;	  
						
						Продолжить;
					КонецЕсли;	 
				КонецЕсли;	 
				
				ПолеРеквизит.ВыполнитьВыборИзСпискаВыбора(0);
				
				//ждём закрытия выпадающего списка
				ПолучилосьПроверитьЧтоВыпадающийСписокОткрыт = Ложь;
				Если Ванесса.Версия8310ИлиВыше Тогда
					
					Для Ррр = 1 По 5 Цикл
						ВыпадающийСписокОткрыт = Истина;
						Попытка
							ВыпадающийСписокОткрыт = ПолеРеквизит.ВыпадающийСписокОткрыт();
						Исключение
							//значит, возможно, открылось другое окно и тогда метод будет вызывать исключение
							Прервать;
						КонецПопытки;
						
						ПолучилосьПроверитьЧтоВыпадающийСписокОткрыт = Истина;
						Если Не ВыпадающийСписокОткрыт Тогда
							Прервать;
						КонецЕсли;	 
						
						Ванесса.Sleep(1);
						//ждём закрытия выпадающего списка
					КонецЦикла;	
				КонецЕсли;	 
				
				
				Если ПолучилосьПроверитьЧтоВыпадающийСписокОткрыт и ВыпадающийСписокОткрыт Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог сделать выбрать из списка выбора <%1> по строке <%2>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ВыбираемоеЗначение); 
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				Возврат;//штатное завершение шага должно быть тут
			Исключение
				//Ванесса.Sleep(1);
				//ПолеРеквизит.ВвестиТекст(ВыбираемоеЗначение);
				//СписокСформировался = ПолеРеквизит.ОжидатьФормированияВыпадающегоСписка(ТаймаутОжидания);
				//Ванесса.Sleep(1);
			КонецПопытки;
			
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог сделать выбрать из списка выбора <%1> по строке <%2>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ВыбираемоеЗначение); 
			ВызватьИсключение ТекстСообщения;
			
		Исключение
			
			
			СтарыйТекстОшибки = ОписаниеОшибки();
			
			
			Попытка
				Если Ванесса.Версия8310ИлиВыше Тогда
					Если НЕ ПолеРеквизит.ВыпадающийСписокОткрыт() Тогда
						ПолеРеквизит.ОткрытьВыпадающийСписок();
					КонецЕсли;	 
				КонецЕсли;	 
			Исключение
			КонецПопытки;
			
		КонецПопытки;
		
		//значит возникла ошибка, будем пытаться ещё раз
		
		
		Если (СчетчикПопыток % 2) = 0 Тогда
			//для совместимости со старым вводом по строке
			Попытка
				Ванесса.Sleep(1);
				Попытка
					//ПолеРеквизит.ОтменитьРедактирование();
					ПолеРеквизит.ЗакрытьВыпадающийСписок();
					Ванесса.Sleep(1);
					ПолеРеквизит.ОткрытьВыпадающийСписок();
					Ванесса.Sleep(1);
				Исключение
				КонецПопытки;
				
				ПолеРеквизит.ВыполнитьВыборИзВыпадающегоСписка(ВыбираемоеЗначение);
				Возврат;
			Исключение
			КонецПопытки;
		КонецЕсли;	 
		
		Ванесса.Sleep(1);
	КонецЦикла; 
	
	//если оказались тут, значит надо вызвать исключение
	Если ИмяТЧ <> Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог в таблице <%1> сделать выбрать из списка выбора <%2> по строке <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяРеквизита); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ВыбираемоеЗначение); 
		ВызватьИсключение ТекстСообщения;
		
	Иначе
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог сделать выбрать из списка выбора <%1> по строке <%2>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ВыбираемоеЗначение); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
//И В открытой форме из выпадающего списка с заголовком "Реквизит2" я выбираю "ТестовыйЭлемент21"
//@ВОткрытойФормеИзВыпадающегоСпискаСЗаголовкомЯВыбираю(Парам01)
Процедура ВОткрытойФормеИзВыпадающегоСпискаСЗаголовкомЯВыбираю(ИмяРеквизита,Знач ВыбираемоеЗначение,ИскатьПоИмени = Ложь) Экспорт
	ВыбираемоеЗначение = ПолучитьКорректныйТекстДляВставкиВПоле(ВыбираемоеЗначение);
	
	ТипПоля = Тип("ТестируемоеПолеФормы");
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИскатьТолькоПоляВКоторыеВозможенВводТекста",Истина);
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, ТипПоля,ДопПараметры);
	
	ПолеРеквизит.Активизировать();
	СделатьДействияПриЗаписиВидео("толькомышь");
	СделатьДействияПриЗаписиHTML("толькомышь");
	
	//ВыпадающийСписокОткрыт = ПолеРеквизит.ВыпадающийСписокОткрыт();
	//Сообщить("ВыпадающийСписокОткрыт="+ВыпадающийСписокОткрыт);
	
	СделатьВводПоСтрокеВПолеВВода(Неопределено,Неопределено,ПолеРеквизит,ИмяРеквизита,ИскатьПоИмени,ВыбираемоеЗначение,ДопПараметры);
	
	
КонецПроцедуры

&НаКлиенте
//И В открытой форме из выпадающего списка "Реквизит2" я выбираю "ТестовыйЭлемент21"
//@ВОткрытойФормеИзВыпадающегоСпискаЯВыбираю(Парам01)
Процедура ВОткрытойФормеИзВыпадающегоСпискаЯВыбираю(ИмяРеквизита,ВыбираемоеЗначение,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеИзВыпадающегоСпискаСЗаголовкомЯВыбираю(ИмяРеквизита,ВыбираемоеЗначение,ИскатьПоИмени);
КонецПроцедуры







&НаКлиенте
//И В открытой форме из выпадающего списка с именем "Реквизит2" я выбираю "ТестовыйЭлемент21"
//@ВОткрытойФормеИзВыпадающегоСпискаСИменемЯВыбираю(Парам01)
Процедура ВОткрытойФормеИзВыпадающегоСпискаСИменемЯВыбираю(ИмяРеквизита,ВыбираемоеЗначение) Экспорт
	ВОткрытойФормеИзВыпадающегоСпискаСЗаголовкомЯВыбираю(ИмяРеквизита,ВыбираемоеЗначение,Истина);
КонецПроцедуры




&НаКлиенте
//И В открытой форме я нажимаю кнопку очистить у поля с заголовком "Отбор"
//@ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоляСЗаголовком(Парам01)
Процедура ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоляСЗаголовком(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"));
	ПолеРеквизит.Активизировать();
	СделатьДействияПриЗаписиВидео();
	СделатьДействияПриЗаписиHTML();
	ПолеРеквизит.Очистить();
КонецПроцедуры

&НаКлиенте
//И В открытой форме я нажимаю кнопку очистить у поля "Отбор"
//@ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоля(Парам01)
Процедура ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоля(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоляСЗаголовком(ИмяРеквизита,ИскатьПоИмени);
КонецПроцедуры






&НаКлиенте
//И В открытой форме я нажимаю кнопку очистить у поля с именем "Отбор"
//@ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоляСИменем(Парам01)
Процедура ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоляСИменем(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоляСЗаголовком(ИмяРеквизита,Истина);
КонецПроцедуры


&НаКлиенте
//И табличный документ формы с именем "РеквизитТабличныйДокумент" стал пустым
//@ТабличныйДокументФормыСИменемСталПустым(Парам01)
Процедура ТабличныйДокументФормыСИменемСталПустым(ИмяРеквизита) Экспорт
	ТабличныйДокументФормыСИменемСталРавен(ИмяРеквизита,Неопределено,Истина);
КонецПроцедуры



&НаКлиенте
//И В открытой форме в таблице с именем "ДеревоТестов" в колонке "Имя" нет значения "Temp1"
//@ВОткрытойФормеВТаблицеСИменемВКолонкеНетЗначения(Парам01,Парам02,Парам03)
Процедура ВОткрытойФормеВТаблицеСИменемВКолонкеНетЗначения(ИмяТЧ,ИмяКолонки,ПроверяемоеЗначение) Экспорт
	ТЧ         = НайтиТЧПоИмени(ИмяТЧ);
	ЗначениеТЧ = ПолучитьСтрокиИзТаблицыTestClient(ТЧ);
	
	НомСтр = 0;
	Для каждого СтрокаТЧ Из ЗначениеТЧ Цикл
		НомСтр = НомСтр + 1;
		
		Значение = СтрокаТЧ[ИмяКолонки];
		Если Значение = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1>  нет колонки <%2>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяКолонки); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		Если Значение = ПроверяемоеЗначение Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> в строке №%2 найдено значение %3, а его не должно было быть.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",НомСтр); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ПроверяемоеЗначение); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
//И В открытой форме в таблице с именем "ДеревоТестов" в колонке "Имя" есть значение "ОткрытиеФормы"
//@ВОткрытойФормеВТаблицеСИменемВКолонкеЕстьЗначение(Парам01,Парам02,Парам03)
Процедура ВОткрытойФормеВТаблицеСИменемВКолонкеЕстьЗначение(ИмяТЧ,ИмяКолонки,ПроверяемоеЗначение) Экспорт
	ТЧ         = НайтиТЧПоИмени(ИмяТЧ);
	ЗначениеТЧ = ПолучитьСтрокиИзТаблицыTestClient(ТЧ);
	Если ЗначениеТЧ = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог получить значение таблицы <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Нашли = Ложь;
	
	НомСтр = 0;
	Для каждого СтрокаТЧ Из ЗначениеТЧ Цикл
		НомСтр = НомСтр + 1;
		
		Значение = СтрокаТЧ[ИмяКолонки];
		Если Значение = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1>  нет колонки <%2>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяКолонки); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		Если Значение = ПроверяемоеЗначение Тогда
			Нашли = Истина;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если Не Нашли Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1>  НЕ найдено значение %2, а оно должно было быть.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПроверяемоеЗначение); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЧтоПолеТаблицыАктивизировалось(ТЧ,ИмяТЧ,ИмяРеквизита,НужноеИмяПоля,ТекущийРежимРедактирование)
	Если ТекущийРежимРедактирование = Истина Тогда
		ТекущийЭлементТаблицы = ТЧ.ПолучитьТекущийЭлемент();
		Если ТекущийЭлементТаблицы.Имя <> НужноеИмяПоля Тогда
			ЭлементАктивизировался = Ложь;
			КолПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
			Для Ккк = 1 По КолПопыток Цикл
				Ванесса.sleep(1);
				ТекущийРежимРедактирование = ТЧ.ТекущийРежимРедактирование();
				Если ТекущийРежимРедактирование = Ложь Тогда
					Прервать;
				КонецЕсли;	 
				
				ТекущийЭлементТаблицы = ТЧ.ПолучитьТекущийЭлемент();
				
				Если ТекущийЭлементТаблицы.Имя = НужноеИмяПоля Тогда
					ЭлементАктивизировался = Истина;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	 
			
			Если НЕ ЭлементАктивизировался Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> не получилось активизировать поле <%2>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяРеквизита); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
//И В открытой форме в таблице "Отборы" я активизирую поле "ИмяПоля"
//@ВОткрытойФормеВТЧЯАктивизируюПоле(Парам01,Парам02)
Процедура ВОткрытойФормеВТЧЯАктивизируюПоле(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ФормаТаблицы = Неопределено;
	
	ТекстОшибки = "";
	БылаОшибка = Ложь;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		ФормаТаблицы = Неопределено;
		БылаОшибка = Ложь;
		ТекстОшибки = "";
		
		Попытка	
			ТЧ = НайтиТЧПоИмени(ИмяТЧ,ФормаТаблицы);
			
			Если ИскатьПоИмени Тогда
				ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
			Иначе	
				ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
			КонецЕсли;	 
			
			Если ПолеРеквизит = Неопределено Тогда
				Если ИскатьПоИмени Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с именем <%2> не найдено.");
				Иначе	
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с заголовком <%2> не найдено.");
				КонецЕсли;	 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяРеквизита); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита);
			НужноеИмяПоля = ПолеРеквизит.Имя;
			
			ТекущийРежимРедактирование = Неопределено;
			Если Ванесса.Версия8312ИлиВыше Тогда
				ТекущийРежимРедактирование = ТЧ.ТекущийРежимРедактирование();
			КонецЕсли;	 
			
			ПолеРеквизит.Активизировать();
			
			ПроверитьЧтоПолеТаблицыАктивизировалось(ТЧ,ИмяТЧ,ИмяРеквизита,НужноеИмяПоля,ТекущийРежимРедактирование);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Ванесса.sleep(1);
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 
	
	СделатьДействияПриЗаписиВидео();
	СделатьДействияПриЗаписиHTML();
КонецПроцедуры


&НаКлиенте
//И В открытой форме в таблице "Отборы" я активизирую поле с именем "ИмяПоля"
//@ВОткрытойФормеВТЧЯАктивизируюПолеСИменем(Парам01,Парам02)
Процедура ВОткрытойФормеВТЧЯАктивизируюПолеСИменем(ИмяТЧ,ИмяРеквизита) Экспорт
	ВОткрытойФормеВТЧЯАктивизируюПоле(ИмяТЧ,ИмяРеквизита,Истина);
КонецПроцедуры


&НаКлиенте
Функция ДополнитьРазделительПути(Знач Путь)
	Если Прав(Путь,1) = "\" или Прав(Путь,1) = "/" Тогда
		Возврат Лев(Путь,СтрДлина(Путь)-1);
	КонецЕсли;	 
	
	Возврат Путь;
КонецФункции	 

&НаКлиенте
//И я буду выбирать внешний файл "c:\temp\333.epf"
//@ЯБудуВыбиратьВнешнийФайл(Парам01)
Процедура ЯБудуВыбиратьВнешнийФайл(Знач ИмяФайла) Экспорт
	ИмяФайла = СтрЗаменить(ИмяФайла,"$КаталогПроекта$",ДополнитьРазделительПути(Ванесса.Объект.КаталогПроекта));
	ИмяФайла = Ванесса.ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(ИмяФайла);
	КонтекстСохраняемый.ТестовоеПриложение.УстановитьРезультатДиалогаВыбораФайла(Истина,ИмяФайла);
КонецПроцедуры

&НаКлиенте
//И я очищаю окно сообщений пользователю
//@ЯОчищаюОкноСообщенийПользователю
Процедура ЯОчищаюОкноСообщенийПользователю() Экспорт
	АктивноеОкно = ПолучитьАктивноеОкноИзТестовоеПриложение();
	Если АктивноеОкно <> Неопределено Тогда
		АктивноеОкно.ЗакрытьПанельСообщенийПользователю();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//Когда я перехожу по навигационной ссылке "НавигационнаяСсылка"
//@ЯПерехожуПоНавигационнойСсылке(Парам01)
Процедура ЯПерехожуПоНавигационнойСсылке(Знач НавигационнаяСсылка) Экспорт
	НавигационнаяСсылка = Ванесса.ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(НавигационнаяСсылка);
	ГлавноеОкноТестируемого = Ванесса.ПолучитьГлавноеОкноИзТестовоеПриложение();
    ГлавноеОкноТестируемого.ВыполнитьКоманду(НавигационнаяСсылка);
КонецПроцедуры


&НаКлиенте
//В таблице "ТабличнаяЧасть1" из выпадающего списка "Реквизит справочник" я выбираю "ТестовыйЭлемент21" с выбором"
//@ВТЧИзВыпадающегоСпискаЯВыбираюСВыбором(Парам01,Парам02,Парам03)
Процедура ВТЧИзВыпадающегоСпискаЯВыбираюСВыбором(Парам01,Парам02,Парам03) Экспорт
	ВОткрытойФормеВТЧИзВыпадающегоСпискаЯВыбираюСВыбором(Парам01,Парам02,Парам03);
КонецПроцедуры

&НаКлиенте
//В таблице "ДокументыПоВидам" я нажимаю кнопку выбора у реквизита "Скан"
//@ВТЧЯНажимаюКнопкуВыбораУРеквизита(Парам01,Парам02)
Процедура ВТЧЯНажимаюКнопкуВыбораУРеквизита(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизита(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//В таблице "ДокументыПоВидам" я нажимаю кнопку выбора у реквизита "Скан"
//@ВТаблицеЯНажимаюКнопкуВыбораУРеквизита(Парам01,Парам02)
Процедура ВТаблицеЯНажимаюКнопкуВыбораУРеквизита(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизита(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//В таблице "ДокументыПоВидам" я нажимаю кнопку выбора у реквизита с именем "Скан"
//@ВТаблицеЯНажимаюКнопкуВыбораУРеквизитаСИменем(Парам01,Парам02)
Процедура ВТаблицеЯНажимаюКнопкуВыбораУРеквизитаСИменем(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизита(Парам01,Парам02,Истина);
КонецПроцедуры

&НаКлиенте
//И в таблице  "Список" я перехожу на одну строку вверх"
//@ВТЧЯПерехожуНаОднуСтрокуВверх(Парам01)
Процедура ВТЧЯПерехожуНаОднуСтрокуВверх(Парам01) Экспорт
	ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВверх(Парам01);
КонецПроцедуры

&НаКлиенте
//И в таблице  "Список" я перехожу на одну строку вверх"
//@ВТаблицеЯПерехожуНаОднуСтрокуВверх(Парам01)
Процедура ВТаблицеЯПерехожуНаОднуСтрокуВверх(Парам01) Экспорт
	ВТЧЯПерехожуНаОднуСтрокуВверх(Парам01);
КонецПроцедуры


&НаКлиенте
//И в таблице  "Список" я перехожу на одну строку вниз"
//@ВТЧЯПерехожуНаОднуСтрокуВниз(Парам01)
Процедура ВТЧЯПерехожуНаОднуСтрокуВниз(Парам01) Экспорт
	ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВниз(Парам01);
КонецПроцедуры

&НаКлиенте
//И в таблице  "Список" я перехожу на одну строку вниз"
//@ВТаблицеЯПерехожуНаОднуСтрокуВниз(Парам01)
Процедура ВТаблицеЯПерехожуНаОднуСтрокуВниз(Парам01) Экспорт
	ВТЧЯПерехожуНаОднуСтрокуВниз(Парам01);
КонецПроцедуры

&НаКлиенте
//И в поле "Наименование" я ввожу текст "111"
//@ВПолеЯВвожуТекст(Парам01,Парам02)
Процедура ВПолеЯВвожуТекст(Парам01,Парам02,ЧастьИмени2 = Неопределено,
	                                       ЧастьИмени3 = Неопределено,
	                                       ЧастьИмени4 = Неопределено,
	                                       ЧастьИмени5 = Неопределено,
	                                       ЧастьИмени6 = Неопределено,
	                                       ЧастьИмени7 = Неопределено) Экспорт
										   
	Ванесса.СоеденитьСтрокиЕслиЭтоВозможно(Парам02,ЧастьИмени2,
	                                       ЧастьИмени3,
	                                       ЧастьИмени4,
	                                       ЧастьИмени5,
	                                       ЧастьИмени6,
	                                       ЧастьИмени7);							   
										   
	ВОткрытойФормеВПолеЯВвожуТекст(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
// Возвращает Дату без времени (не зависит от региональных настроек Windows)
// Дата должна содержать Пробел, например 01-01-2019 12:00:00, 01.01.2019 12:00:00, 01/01/2019 12:00:00 PM 
Функция ДатаБезВремениСтрока(Дата)
	
	ДатаСтрока = Строка(Дата);
	ПоложениеПробела = Найти(ДатаСтрока, " ");
	ДатаБезВремени = Лев(ДатаСтрока, ПоложениеПробела); 

	Возврат ДатаБезВремени;
КонецФункции


&НаКлиенте
//И в поле "ИмяПоля" я ввожу текущую дату
//@ВПолеЯВвожуТекущуюДату(Парам01)
Процедура ВПолеЯВвожуТекущуюДату(ИмяПоля,ИскатьПоИмени = Ложь) Экспорт
	Текст = Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
	
	Если ИскатьПоИмени Тогда
		ВОткрытойФормеВПолеСИменемЯВвожуТекст(ИмяПоля,Текст);
	Иначе	
		ВОткрытойФормеВПолеЯВвожуТекст(ИмяПоля,Текст);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И в поле с именем "ИмяПоля" я ввожу текущую дату
//@ВПолеСИменемЯВвожуТекущуюДату(Парам01)
Процедура ВПолеСИменемЯВвожуТекущуюДату(ИмяПоля) Экспорт
	ВПолеЯВвожуТекущуюДату(ИмяПоля,Истина);
КонецПроцедуры

&НаКлиенте
//И в поле "ИмяПоля" я ввожу начало текущего месяца
//@ВПолеЯВвожуНачалоТекущегоМесяца(Парам01)
Процедура ВПолеЯВвожуНачалоТекущегоМесяца(ИмяПоля) Экспорт
	//Текст = Формат(НачалоМесяца(ТекущаяДата()),"ДФ=dd.MM.yyyy");
	Текст = ДатаБезВремениСтрока(НачалоМесяца(ТекущаяДата())); 
	ВОткрытойФормеВПолеСЗаголовкомЯВвожуТекст(ИмяПоля,Текст,Неопределено);
КонецПроцедуры

&НаКлиенте
//И в поле "ИмяПоля" я ввожу конец текущего месяца
//@ВПолеЯВвожуКонецТекущегоМесяца(Парам01)
Процедура ВПолеЯВвожуКонецТекущегоМесяца(ИмяПоля) Экспорт
	//Текст = Формат(КонецМесяца(ТекущаяДата()),"ДФ=dd.MM.yyyy");
	Текст = ДатаБезВремениСтрока(КонецМесяца(ТекущаяДата())); 
	ВОткрытойФормеВПолеСЗаголовкомЯВвожуТекст(ИмяПоля,Текст,Неопределено);

КонецПроцедуры

&НаКлиенте
//И в поле "ИмяПоля" я ввожу начало следующего месяца
//@ВПолеЯВвожуНачалоСледующегоМесяца(Парам01)
Процедура ВПолеЯВвожуНачалоСледующегоМесяца(ИмяПоля) Экспорт
	Текст = Формат(НачалоМесяца(ДобавитьМесяц(ТекущаяДата(),1)),"ДФ=dd.MM.yyyy");
	ВОткрытойФормеВПолеСЗаголовкомЯВвожуТекст(ИмяПоля,Текст,Неопределено);
КонецПроцедуры

&НаКлиенте
//И в поле "ИмяПоля" я ввожу конец следующего месяца
//@ВПолеЯВвожуКонецСледующегоМесяца(Парам01)
Процедура ВПолеЯВвожуКонецСледующегоМесяца(ИмяПоля) Экспорт
	Текст = Формат(КонецМесяца(ДобавитьМесяц(ТекущаяДата(),1)),"ДФ=dd.MM.yyyy");
	ВОткрытойФормеВПолеСЗаголовкомЯВвожуТекст(ИмяПоля,Текст,Неопределено);
КонецПроцедуры



&НаКлиенте
//И в таблице "ИмяТаблицы" в поле с именем "ИмяПоля" я ввожу начало текущего месяца
//@ВТаблицеВПолеСИменемЯВвожуНачалоТекущегоМесяца(Парам01,Парам02)
Процедура ВТаблицеВПолеСИменемЯВвожуНачалоТекущегоМесяца(ИмяТаблицы,ИмяПоля) Экспорт
	Текст = Формат(НачалоМесяца(ТекущаяДата()),"ДФ=dd.MM.yyyy");
	ВОткрытойФормеВТЧВПолеСЗаголовкомЯВвожуТекст(ИмяТаблицы,ИмяПоля,Текст,Истина);
КонецПроцедуры

&НаКлиенте
//И в таблице "ИмяТаблицы" в поле с именем "ИмяПоля" я ввожу конец текущего месяца
//@ВТаблицеВПолеСИменемЯВвожуКонецТекущегоМесяца(Парам01,Парам02)
Процедура ВТаблицеВПолеСИменемЯВвожуКонецТекущегоМесяца(ИмяТаблицы,ИмяПоля) Экспорт
	Текст = Формат(КонецМесяца(ТекущаяДата()),"ДФ=dd.MM.yyyy");
	ВОткрытойФормеВТЧВПолеСЗаголовкомЯВвожуТекст(ИмяТаблицы,ИмяПоля,Текст,Истина);
КонецПроцедуры

&НаКлиенте
//И в таблице "ИмяТаблицы" в поле с именем "ИмяПоля" я ввожу начало следующего месяца
//@ВТаблицеВПолеСИменемЯВвожуНачалоСледующегоМесяца(Парам01,Парам02)
Процедура ВТаблицеВПолеСИменемЯВвожуНачалоСледующегоМесяца(ИмяТаблицы,ИмяПоля) Экспорт
	Текст = Формат(НачалоМесяца(ДобавитьМесяц(ТекущаяДата(),1)),"ДФ=dd.MM.yyyy");
	ВОткрытойФормеВТЧВПолеСЗаголовкомЯВвожуТекст(ИмяТаблицы,ИмяПоля,Текст,Истина);
КонецПроцедуры

&НаКлиенте
//И в таблице "ИмяТаблицы" в поле с именем "ИмяПоля" я ввожу конец следующего месяца
//@ВТаблицеВПолеСИменемЯВвожуКонецСледующегоМесяца(Парам01,Парам02)
Процедура ВТаблицеВПолеСИменемЯВвожуКонецСледующегоМесяца(ИмяТаблицы,ИмяПоля) Экспорт
	Текст = Формат(КонецМесяца(ДобавитьМесяц(ТекущаяДата(),1)),"ДФ=dd.MM.yyyy");
	ВОткрытойФормеВТЧВПолеСЗаголовкомЯВвожуТекст(ИмяТаблицы,ИмяПоля,Текст,Истина);
КонецПроцедуры




&НаКлиенте
//И в поле "ИмяПоля" я ввожу текущую дату и текущее время
//@ВПолеЯВвожуТекущуюДатуИТекущееВремя(Парам01)
Процедура ВПолеЯВвожуТекущуюДатуИТекущееВремя(ИмяПоля,ИскатьПоИмени = Ложь) Экспорт
	Текст = Строка(ТекущаяДата());
	
	Если ИскатьПоИмени Тогда
		ВОткрытойФормеВПолеСИменемЯВвожуТекст(ИмяПоля,Текст);
	Иначе	
		ВОткрытойФормеВПолеЯВвожуТекст(ИмяПоля,Текст);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И в поле с именем "ИмяПоля" я ввожу текущую дату и текущее время
//@ВПолеСИменемЯВвожуТекущуюДатуИТекущееВремя(Парам01)
Процедура ВПолеСИменемЯВвожуТекущуюДатуИТекущееВремя(ИмяПоля) Экспорт
	ВПолеЯВвожуТекущуюДатуИТекущееВремя(ИмяПоля,Истина);
КонецПроцедуры




&НаКлиенте
//И в поле "Наименование" я ввожу значение выражения "1+1"
//@ВПолеЯВвожуЗначениеВыражения(Парам01,Парам02)
Процедура ВПолеЯВвожуЗначениеВыражения(ИмяРеквизита,Знач Текст,ИскатьПоИмени = Ложь) Экспорт
	Текст = XMLСтрока(Ванесса.ВычислитьВнутреннееВыражение(Текст));
	
	ТипПоля = Тип("ТестируемоеПолеФормы");
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИскатьТолькоПоляВКоторыеВозможенВводТекста",Истина);
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, ТипПоля,ДопПараметры);
	ПолеРеквизит.Активизировать();
	
	СделатьДействияПриЗаписиВидео();

	Если ПолеРеквизит.Вид = ВидПоляФормы.ПолеФорматированногоДокумента или ПолеРеквизит.Вид = ВидПоляФормы.ПолеHTMLДокумента Тогда
		ПолеРеквизит.ВвестиHTML(Текст);
	Иначе	
		//ПолеРеквизит.ВвестиТекст(Текст);
		Ванесса.ВвестиВПолеТекст(ПолеРеквизит,Текст);
	КонецЕсли;

	СделатьДействияПриЗаписиHTML();
КонецПроцедуры

&НаКлиенте
//И в поле с именем "Наименование" я ввожу значение выражения "1+1"
//@ВПолеСИменемЯВвожуЗначениеВыражения(Парам01,Парам02)
Процедура ВПолеСИменемЯВвожуЗначениеВыражения(ИмяРеквизита,Текст,ИскатьПоИмени = Ложь) Экспорт
	ВПолеЯВвожуЗначениеВыражения(ИмяРеквизита,Текст,Истина);
КонецПроцедуры



&НаКлиенте
//И в таблице "ТабличнаяЧасть1" в поле 'Реквизит строка' я ввожу значение выражения '"Значение" + $ТекНомерСтроки$'
//@ВТаблицеВПолеЯВвожуЗначениеВыражения(Парам01,Парам02,Парам03)
Процедура ВТаблицеВПолеЯВвожуЗначениеВыражения(ИмяТаблицы,ИмяРеквизита,Знач Текст,ИскатьПоИмени = Ложь) Экспорт
	Текст = XMLСтрока(Ванесса.ВычислитьВнутреннееВыражение(Текст));
	
	ТЧ = НайтиТЧПоИмени(ИмяТаблицы);
	
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТаблицы,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТаблицы,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	 
	
	ПолеРеквизит.Активизировать();
	
	ТаблицаВРежимеРедактирования = ТЧ.ТекущийРежимРедактирование();
	Если Не ТаблицаВРежимеРедактирования Тогда
		ТЧ.ИзменитьСтроку();
	КонецЕсли;	 
	
	СделатьДействияПриЗаписиВидео();

	//ПолеРеквизит.ВвестиТекст(Текст);
	Ванесса.ВвестиВПолеТекст(ПолеРеквизит,Текст);

	СделатьДействияПриЗаписиHTML();
КонецПроцедуры


&НаКлиенте
//И в таблице "ТабличнаяЧасть1" в поле с именем 'РеквизитСтрока' я ввожу значение выражения '"Значение" + $ТекНомерСтроки$'
//@ВТаблицеВПолеСименемЯВвожуЗначениеВыражения(Парам01,Парам02,Парам03)
Процедура ВТаблицеВПолеСименемЯВвожуЗначениеВыражения(ИмяТаблицы,ИмяРеквизита,Знач Текст) Экспорт
	ВТаблицеВПолеЯВвожуЗначениеВыражения(ИмяТаблицы,ИмяРеквизита,Текст,Истина);
КонецПроцедуры




&НаКлиенте
//И я нажимаю кнопку выбора у поля "Реквизит2"
//@ЯНажимаюКнопкуВыбораУПоля(Парам01)
Процедура ЯНажимаюКнопкуВыбораУПоля(Парам01) Экспорт
	ВОткрытойФормеЯНажимаюКнопкуВыбораУПоля(Парам01);
КонецПроцедуры

&НаКлиенте
//И я нажимаю кнопку выбора у поля с именем "Реквизит4"
//@ЯНажимаюКнопкуВыбораУПоляСИменем(Парам01)
Процедура ЯНажимаюКнопкуВыбораУПоляСИменем(Парам01) Экспорт
	ВОткрытойФормеЯНажимаюКнопкуВыбораУПоляСИменем(Парам01);
КонецПроцедуры

&НаКлиенте
//И я нажимаю на кнопку "Создать"
//@ЯНажимаюНаКнопку(Парам01)
Процедура ЯНажимаюНаКнопку(Парам01) Экспорт
	ВОткрытойФормеЯНажимаюНаКнопку(Парам01);
КонецПроцедуры

&НаКлиенте
//И в поле с именем "Наименование" я ввожу текст "111"
//@ВПолеСИменемЯВвожуТекст(Парам01,Парам02)
Процедура ВПолеСИменемЯВвожуТекст(Парам01,Парам02,ЧастьИмени2 = Неопределено,
	                                       ЧастьИмени3 = Неопределено,
	                                       ЧастьИмени4 = Неопределено,
	                                       ЧастьИмени5 = Неопределено,
	                                       ЧастьИмени6 = Неопределено,
	                                       ЧастьИмени7 = Неопределено) Экспорт
	
	Ванесса.СоеденитьСтрокиЕслиЭтоВозможно(Парам02,ЧастьИмени2,
	                                       ЧастьИмени3,
	                                       ЧастьИмени4,
	                                       ЧастьИмени5,
	                                       ЧастьИмени6,
	                                       ЧастьИмени7);							   
	ВОткрытойФормеВПолеСИменемЯВвожуТекст(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//И я перехожу к закладке "Вспомогательная"
//@ЯПерехожуКЗакладке(Парам01)
Процедура ЯПерехожуКЗакладке(Парам01) Экспорт
	ВОткрытойФормеЯПерехожуКЗакладке(Парам01);
КонецПроцедуры

&НаКлиенте
//И я перехожу к закладке с именем "Вспомогательная"
//@ЯПерехожуКЗакладкеСИменем(Парам01)
Процедура ЯПерехожуКЗакладкеСИменем(Парам01) Экспорт
	ВОткрытойФормеЯПерехожуКЗакладкеСИменем(Парам01);
КонецПроцедуры

&НаКлиенте
//И я нажимаю на гиперссылку "Гиперссылка"
//@ЯНажимаюНаГиперссылку(Парам01)
Процедура ЯНажимаюНаГиперссылку(Парам01) Экспорт
	ВОткрытойФормеЯНажимаюНаГиперссылку(Парам01);
КонецПроцедуры

&НаКлиенте
//И я нажимаю на гиперссылку с именем "Гиперссылка"
//@ЯНажимаюНаГиперссылкуСИменем(Парам01)
Процедура ЯНажимаюНаГиперссылкуСИменем(Парам01) Экспорт
	ВОткрытойФормеЯНажимаюНаГиперссылкуСИменем(Парам01);
КонецПроцедуры

&НаКлиенте
//И я нажимаю на кнопку с именем "ЗаполнитьРекСтрока1"
//@ЯНажимаюНаКнопкуСИменем(Парам01)
Процедура ЯНажимаюНаКнопкуСИменем(Парам01) Экспорт
	ВОткрытойФормеЯНажимаюНаКнопкуСИменем(Парам01);
КонецПроцедуры

&НаКлиенте
//И я сворачиваю группу "СворачиваемаяГруппа"
//@ЯСворачиваюГруппу(Парам01)
Процедура ЯСворачиваюГруппу(Парам01) Экспорт
	ВОткрытойФормеЯСворачиваюГруппу(Парам01);
КонецПроцедуры

&НаКлиенте
//И я сворачиваю группу с именем "СворачиваемаяГруппа"
//@ЯСворачиваюГруппуСИменем(Парам01)
Процедура ЯСворачиваюГруппуСИменем(Парам01) Экспорт
	ВОткрытойФормеЯСворачиваюГруппуСИменем(Парам01);
КонецПроцедуры

&НаКлиенте
//И я разворачиваю группу "СворачиваемаяГруппа"
//@ЯРазворачиваюГруппу(Парам01)
Процедура ЯРазворачиваюГруппу(Парам01) Экспорт
	ВОткрытойФормеЯРазворачиваюГруппу(Парам01);
КонецПроцедуры

&НаКлиенте
//И я разворачиваю группу с именем "СворачиваемаяГруппа"
//@ЯРазворачиваюГруппуСИменем(Парам01)
Процедура ЯРазворачиваюГруппуСИменем(Парам01) Экспорт
	ВОткрытойФормеЯРазворачиваюГруппуСИменем(Парам01);
КонецПроцедуры

&НаКлиенте
//И я открываю выпадающий список "Реквизит2"
//@ЯОткрываюВыпадающийСписок(Парам01)
Процедура ЯОткрываюВыпадающийСписок(Парам01) Экспорт
	ВОткрытойФормеЯОткрываюВыпадающийСписок(Парам01);
КонецПроцедуры

&НаКлиенте
//И я открываю выпадающий список с именем "Реквизит2"
//@ЯОткрываюВыпадающийСписокСИменем(Парам01)
Процедура ЯОткрываюВыпадающийСписокСИменем(Парам01) Экспорт
	ВОткрытойФормеЯОткрываюВыпадающийСписокСИменем(Парам01);
КонецПроцедуры

&НаКлиенте
//И я выбираю значение реквизита "Реквизит2" из формы списка"
//@ЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01)
Процедура ЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01) Экспорт
	ВОткрытойФормеЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01);
КонецПроцедуры

&НаКлиенте
//И я выбираю значение реквизита с именем "Реквизит2" из формы списка"
//@ЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01)
Процедура ЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01) Экспорт
	ВОткрытойФормеЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01);
КонецПроцедуры

&НаКлиенте
//И я изменяю флаг "Реквизит булево"
//@ЯИзменяюФлаг(Парам01)
Процедура ЯИзменяюФлаг(Парам01) Экспорт
	ВОткрытойФормеЯИзменяюФлаг(Парам01);
КонецПроцедуры

&НаКлиенте
//И я изменяю флаг с именем "Реквизит булево"
//@ЯИзменяюФлагСИменем(Парам01)
Процедура ЯИзменяюФлагСИменем(Парам01) Экспорт
	ВОткрытойФормеЯИзменяюФлагСИменем(Парам01);
КонецПроцедуры

&НаКлиенте
//И я меняю значение переключателя "Реквизит переключатель" на "Первое значение"
//@ЯМеняюЗначениеПереключателяНа(Парам01,Парам02)
Процедура ЯМеняюЗначениеПереключателяНа(Парам01,Парам02) Экспорт
	ВОткрытойФормеЯМеняюЗначениеПереключателяНа(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//И я меняю значение переключателя 'Реквизит переключатель' на 'Второе*' по шаблону
//@ЯМеняюЗначениеПереключателяНаПоШаблону(Парам01,Парам02)
Процедура ЯМеняюЗначениеПереключателяНаПоШаблону(ИмяРеквизита,Знач Значение,ИскатьПоИмени = Ложь) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Истина);
	ДопПараметры.Вставить("ОставитьТолькоПереключатели",Истина);
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"),ДопПараметры);
	Если ПолеРеквизит = Неопределено Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переключатель с именем <%1> не найден.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переключатель с заголовком <%1> не найден.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ИсходнаяСтрокаШаблона = Значение;
	
	НашлиЗначение = Ложь;
	ПредставлениеСпискаВыбора = ПолеРеквизит.ПолучитьПредставлениеСпискаВыбора();
	Для Каждого СтрокаПредставлениеСпискаВыбора Из ПредставлениеСпискаВыбора Цикл
		Если Ванесса.СтрокаСоответствуетШаблону(СтрокаПредставлениеСпискаВыбора.ОтображаемыйТекст,Значение) Тогда
			Значение = СтрокаПредставлениеСпискаВыбора.ОтображаемыйТекст;
			НашлиЗначение = Истина;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если Не НашлиЗначение Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В значение элемента формы %1 не найдена строка <%2>. Текущее значение поля <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИсходнаяСтрокаШаблона);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ПолеРеквизит.ПолучитьПредставлениеДанных());
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ПолеРеквизит.Активизировать();
	СделатьДействияПриЗаписиВидео();
	ПолеРеквизит.ВыбратьВариант(Значение);
	СделатьДействияПриЗаписиHTML();
КонецПроцедуры

&НаКлиенте
//И я меняю значение переключателя с именем 'Реквизит переключатель' на 'Второе*' по шаблону
//@ЯМеняюЗначениеПереключателяСИменемНаПоШаблону(Парам01,Парам02)
Процедура ЯМеняюЗначениеПереключателяСИменемНаПоШаблону(ИмяРеквизита,Знач Значение,ИскатьПоИмени = Ложь) Экспорт
	ЯМеняюЗначениеПереключателяНаПоШаблону(ИмяРеквизита,Значение,Истина);
КонецПроцедуры

&НаКлиенте
//И я меняю значение переключателя с именем "Реквизит переключатель" на "Первое значение"
//@ЯМеняюЗначениеПереключателяСИменемНа(Парам01,Парам02)
Процедура ЯМеняюЗначениеПереключателяСИменемНа(Парам01,Парам02) Экспорт
	ВОткрытойФормеЯМеняюЗначениеПереключателяСИменемНа(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я нажимаю на кнопку "Добавить"
//@ВТЧЯНажимаюНаКнопку(Парам01,Парам02)
Процедура ВТЧЯНажимаюНаКнопку(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯНажимаюНаКнопку(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я нажимаю на кнопку "Добавить"
//@ВТаблицеЯНажимаюНаКнопку(Парам01,Парам02)
Процедура ВТаблицеЯНажимаюНаКнопку(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯНажимаюНаКнопку(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я нажимаю на кнопку с именем "Добавить"
//@ВТЧЯНажимаюНаКнопкуСИменем(Парам01,Парам02)
Процедура ВТЧЯНажимаюНаКнопкуСИменем(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯНажимаюНаКнопкуСИменем(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я нажимаю на кнопку с именем "Добавить"
//@ВТаблицеЯНажимаюНаКнопкуСИменем(Парам01,Парам02)
Процедура ВТаблицеЯНажимаюНаКнопкуСИменем(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯНажимаюНаКнопкуСИменем(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" в поле "Реквизит число" я ввожу текст "56,78"
//@ВТЧВПолеЯВвожуТекст(Парам01,Парам02,Парам03)
Процедура ВТЧВПолеЯВвожуТекст(Парам01,Парам02,Парам03) Экспорт
	ВОткрытойФормеВТЧВПолеЯВвожуТекст(Парам01,Парам02,Парам03);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" в поле "Реквизит число" я ввожу текст "56,78"
//@ВТаблицеВПолеЯВвожуТекст(Парам01,Парам02,Парам03)
Процедура ВТаблицеВПолеЯВвожуТекст(Парам01,Парам02,Парам03) Экспорт
	ВТЧВПолеЯВвожуТекст(Парам01,Парам02,Парам03);
КонецПроцедуры


&НаКлиенте
//И в таблице "ТабличнаяЧасть1" в поле "Реквизит число" я ввожу текущую дату
//@ВТаблицеВПолеЯВвожуТекущуюДату(Парам01,Парам02)
Процедура ВТаблицеВПолеЯВвожуТекущуюДату(Парам01,Парам02) Экспорт
	Текст = Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
	ВТЧВПолеЯВвожуТекст(Парам01,Парам02,Текст);
КонецПроцедуры



&НаКлиенте
//И в таблице "ТабличнаяЧасть1" поле "Реквизит булево" имеет значение "Да"
//@ВТаблицеПолеИмеетЗначение(Парам01,Парам02,Парам03)
Процедура ВТаблицеПолеИмеетЗначение(ИмяТЧ,ИмяЭлемента,СтроковоеПредставление) Экспорт
	ТекстЯчейкиТаблицыСталРавен(ИмяТЧ,ИмяЭлемента,СтроковоеПредставление,Ложь);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" поле с именем "Реквизит булево" имеет значение "Да"
//@ВТаблицеПолеСИменемИмеетЗначение(Парам01,Парам02,Парам03)
Процедура ВТаблицеПолеСИменемИмеетЗначение(ИмяТЧ,ИмяЭлемента,СтроковоеПредставление) Экспорт
	ТекстЯчейкиТаблицыСталРавен(ИмяТЧ,ИмяЭлемента,СтроковоеПредставление,Истина);
КонецПроцедуры





&НаКлиенте
//И в таблице "ТабличнаяЧасть1" в поле с именем "Реквизит число" я ввожу текст "56,78"
//@ВТЧВПолеСИменемЯВвожуТекст(Парам01,Парам02,Парам03)
Процедура ВТЧВПолеСИменемЯВвожуТекст(Парам01,Парам02,Парам03) Экспорт
	ВОткрытойФормеВТЧВПолеСИменемЯВвожуТекст(Парам01,Парам02,Парам03);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" в поле с именем "Реквизит число" я ввожу текст "56,78"
//@ВТаблицеВПолеСИменемЯВвожуТекст(Парам01,Парам02,Парам03)
Процедура ВТаблицеВПолеСИменемЯВвожуТекст(Парам01,Парам02,Парам03) Экспорт
	ВТЧВПолеСИменемЯВвожуТекст(Парам01,Парам02,Парам03);
КонецПроцедуры


&НаКлиенте
//И в таблице "ТабличнаяЧасть1" из выпадающего списка "Реквизит справочник" я выбираю "ТестовыйЭлемент21"
//@ВТЧИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03)
Процедура ВТЧИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеВТЧИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03,ИскатьПоИмени);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" из выпадающего списка "Реквизит справочник" я выбираю "ТестовыйЭлемент21"
//@ВТаблицеИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03)
Процедура ВТаблицеИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03) Экспорт
	ВТЧИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" из выпадающего списка "Реквизит справочник" я выбираю по строке "ТестовыйЭлемент21"
//@ВТаблицеИзВыпадающегоСпискаЯВыбираюПоСтроке(Парам01,Парам02,Парам03)
Процедура ВТаблицеИзВыпадающегоСпискаЯВыбираюПоСтроке(Парам01,Парам02,Парам03) Экспорт
	ВТЧИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" из выпадающего списка с именем "Реквизит справочник" я выбираю "ТестовыйЭлемент21"
//@ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираю(Парам01,Парам02,Парам03)
Процедура ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираю(Парам01,Парам02,Парам03) Экспорт
	ВТЧИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03,Истина);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" из выпадающего списка с именем "Реквизит справочник" я выбираю по строке ТестовыйЭлемент21"
//@ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираюПоСтроке(Парам01,Парам02,Парам03)
Процедура ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираюПоСтроке(Парам01,Парам02,Парам03) Экспорт
	ВТЧИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03,Истина);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я изменяю флаг "Реквизит булево"
//@ВТЧЯИзменяюФлаг(Парам01,Парам02)
Процедура ВТЧЯИзменяюФлаг(Парам01,Парам02,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеВТЧЯИзменяюФлаг(Парам01,Парам02,ИскатьПоИмени);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я изменяю флаг "Реквизит булево"
//@ВТаблицеЯИзменяюФлаг(Парам01,Парам02)
Процедура ВТаблицеЯИзменяюФлаг(Парам01,Парам02) Экспорт
	ВТЧЯИзменяюФлаг(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я изменяю флаг с именем "Реквизит булево"
//@ВТаблицеЯИзменяюФлагСИменем(Парам01,Парам02)
Процедура ВТаблицеЯИзменяюФлагСИменем(Парам01,Парам02) Экспорт
	ВТЧЯИзменяюФлаг(Парам01,Парам02,Истина);
КонецПроцедуры


&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я выбираю значение реквизита "Реквизит справочник выбор из формы списка" из формы списка"
//@ВТЧЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01,Парам02)
Процедура ВТЧЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я выбираю значение реквизита "Реквизит справочник выбор из формы списка" из формы списка"
//@ВТаблицеЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01,Парам02)
Процедура ВТаблицеЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01,Парам02) Экспорт
	ВТЧЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я выбираю значение реквизита с именем "Реквизит справочник выбор из формы списка" из формы списка"
//@ВТЧЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01,Парам02)
Процедура ВТЧЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я выбираю значение реквизита с именем "Реквизит справочник выбор из формы списка" из формы списка"
//@ВТаблицеЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01,Парам02)
Процедура ВТаблицеЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01,Парам02) Экспорт
	ВТЧЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//И в таблице "Товары" я добавляю новую строку"
//@ВТЧЯДобавляюНовуюСтроку(Парам01)
Процедура ВТЧЯДобавляюНовуюСтроку(Парам01) Экспорт
	ВОткрытойФормеВТЧЯДобавляюНовуюСтроку(Парам01);
КонецПроцедуры

&НаКлиенте
//И в таблице "Товары" я добавляю новую строку"
//@ВТаблицеЯДобавляюНовуюСтроку(Парам01)
Процедура ВТаблицеЯДобавляюНовуюСтроку(Парам01) Экспорт
	ВТЧЯДобавляюНовуюСтроку(Парам01);
КонецПроцедуры

&НаКлиенте
//И я нажимаю на кнопку открытия поля "Реквизит2"
//@ЯНажимаюНаКнопкуОткрытияПоля(Парам01)
Процедура ЯНажимаюНаКнопкуОткрытияПоля(Парам01) Экспорт
	ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоля(Парам01);
КонецПроцедуры

&НаКлиенте
//И я нажимаю на кнопку открытия поля с именем "Реквизит2"
//@ЯНажимаюНаКнопкуОткрытияПоляСИменем(Парам01)
Процедура ЯНажимаюНаКнопкуОткрытияПоляСИменем(Парам01) Экспорт
	ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоляСИменем(Парам01);
КонецПроцедуры

&НаКлиенте
//И     из выпадающего списка "Реквизит2" я выбираю "ТестовыйЭлемент21"
//@ИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02)
Процедура ИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02) Экспорт
	ВОткрытойФормеИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//И из выпадающего списка "Реквизит2" я выбираю по строке "ТестовыйЭлемент21"
//@ИзВыпадающегоСпискаЯВыбираюПоСтроке(Парам01,Парам02)
Процедура ИзВыпадающегоСпискаЯВыбираюПоСтроке(Парам01,Парам02) Экспорт
	ВОткрытойФормеИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02);
КонецПроцедуры



&НаКлиенте
//И     из выпадающего списка "Реквизит2" я выбираю точное значение "ТестовыйЭлемент21"
//@ИзВыпадающегоСпискаЯВыбираюТочноеЗначение(Парам01,Парам02)
Процедура ИзВыпадающегоСпискаЯВыбираюТочноеЗначение(ИмяРеквизита,Знач ВыбираемоеЗначение,ИскатьПоИмени = Ложь) Экспорт
	ВыбираемоеЗначение = ПолучитьКорректныйТекстДляВставкиВПоле(ВыбираемоеЗначение);
	
	ТипПоля      = Тип("ТестируемоеПолеФормы");
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, ТипПоля);
	ПолеРеквизит.Активизировать();
	СделатьДействияПриЗаписиВидео("толькомышь");
	СделатьДействияПриЗаписиHTML("толькомышь");
	
	
	Если НЕ ПолеРеквизит.ВыпадающийСписокОткрыт() Тогда
		ПолеРеквизит.ОткрытьВыпадающийСписок();
	КонецЕсли;	 
	
	ПолучилосьВыбрать = Ложь;
	Попытка
		ПолеРеквизит.ВыполнитьВыборИзВыпадающегоСписка(ВыбираемоеЗначение);
		ПолучилосьВыбрать = Истина;
	Исключение
		
	КонецПопытки;
	
	Если Не ПолучилосьВыбрать Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось сделать выбор в поле <%1> значения <%2>. %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ВыбираемоеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ОписаниеОшибки());
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
//И     из выпадающего списка с именем "Реквизит2" я выбираю точное значение "ТестовыйЭлемент21"
//@ИзВыпадающегоСпискаСИменемЯВыбираюТочноеЗначение(Парам01,Парам02)
Процедура ИзВыпадающегоСпискаСИменемЯВыбираюТочноеЗначение(ИмяРеквизита,ВыбираемоеЗначение,ИскатьПоИмени = Ложь) Экспорт
	ИзВыпадающегоСпискаЯВыбираюТочноеЗначение(ИмяРеквизита,ВыбираемоеЗначение,Истина);
КонецПроцедуры




&НаКлиенте
//И     из выпадающего списка с именем "Реквизит2" я выбираю "ТестовыйЭлемент21"
//@ИзВыпадающегоСпискаСИменемЯВыбираю(Парам01,Парам02)
Процедура ИзВыпадающегоСпискаСИменемЯВыбираю(Парам01,Парам02) Экспорт
	ВОткрытойФормеИзВыпадающегоСпискаСИменемЯВыбираю(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//И из выпадающего списка с именем "Реквизит2" я выбираю по строке "ТестовыйЭлемент21"
//@ИзВыпадающегоСпискаСИменемЯВыбираюПоСтроке(Парам01,Парам02)
Процедура ИзВыпадающегоСпискаСИменемЯВыбираюПоСтроке(Парам01,Парам02) Экспорт
	ВОткрытойФормеИзВыпадающегоСпискаСИменемЯВыбираю(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//И я нажимаю кнопку очистить у поля "Отбор"
//@ЯНажимаюКнопкуОчиститьУПоля(Парам01)
Процедура ЯНажимаюКнопкуОчиститьУПоля(Парам01) Экспорт
	ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоля(Парам01);
КонецПроцедуры

&НаКлиенте
//И я нажимаю кнопку очистить у поля с именем "Отбор"
//@ЯНажимаюКнопкуОчиститьУПоляСИменем(Парам01)
Процедура ЯНажимаюКнопкуОчиститьУПоляСИменем(Парам01) Экспорт
	ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоляСИменем(Парам01);
КонецПроцедуры

&НаКлиенте
//И в таблице с именем "ДеревоТестов" в колонке "Имя" нет значения "Temp1"
//@ВТаблицеСИменемВКолонкеНетЗначения(Парам01,Парам02,Парам03)
Процедура ВТаблицеСИменемВКолонкеНетЗначения(Парам01,Парам02,Парам03) Экспорт
	ВОткрытойФормеВТаблицеСИменемВКолонкеНетЗначения(Парам01,Парам02,Парам03);
КонецПроцедуры

&НаКлиенте
//И в таблице с именем "ДеревоТестов" в колонке "Имя" есть значение "ОткрытиеФормы"
//@ВТаблицеСИменемВКолонкеЕстьЗначение(Парам01,Парам02,Парам03)
Процедура ВТаблицеСИменемВКолонкеЕстьЗначение(Парам01,Парам02,Парам03) Экспорт
	ВОткрытойФормеВТаблицеСИменемВКолонкеЕстьЗначение(Парам01,Парам02,Парам03);
КонецПроцедуры

&НаКлиенте
//И в таблице "Отборы" я активизирую поле "ИмяПоля"
//@ВТЧЯАктивизируюПоле(Парам01,Парам02)
Процедура ВТЧЯАктивизируюПоле(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯАктивизируюПоле(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//И в таблице "Отборы" я активизирую поле "ИмяПоля"
//@ВТаблицеЯАктивизируюПоле(Парам01,Парам02)
Процедура ВТаблицеЯАктивизируюПоле(Парам01,Парам02) Экспорт
	ВТЧЯАктивизируюПоле(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//И в таблице "Отборы" я активизирую поле с именем "ИмяПоля"
//@ВТЧЯАктивизируюПолеСИменем(Парам01,Парам02)
Процедура ВТЧЯАктивизируюПолеСИменем(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯАктивизируюПолеСИменем(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//И в таблице "Отборы" я активизирую поле с именем "ИмяПоля"
//@ВТаблицеЯАктивизируюПолеСИменем(Парам01,Парам02)
Процедура ВТаблицеЯАктивизируюПолеСИменем(Парам01,Парам02) Экспорт
	ВТЧЯАктивизируюПолеСИменем(Парам01,Парам02);
КонецПроцедуры

&НаКлиенте
//И я запоминаю значение поля "Номер" как "НомерДокумента"
//@ЯЗапоминаюЗначениеПоляСКлючом(Парам01,Парам02)
Процедура ЯЗапоминаюЗначениеПоляСКлючом(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	Значение = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяПоля,ИскатьПоИмени);
	Ванесса.СохранитьЗначениеВКонтекст(ИмяПеременной,Значение);
КонецПроцедуры

&НаКлиенте
//И я запоминаю значение поля "Номер" с ключом "Номер документа"
//@ЯЗапоминаюЗначениеПоляКак(Парам01,Парам02)
Процедура ЯЗапоминаюЗначениеПоляКак(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	Значение = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяПоля,ИскатьПоИмени);
	Контекст.Вставить(ИмяПеременной,Значение);
КонецПроцедуры

&НаКлиенте
//И я запоминаю значение поля с именем "Номер" с ключом "Номер документа"
//@ЯЗапоминаюЗначениеПоляСИменемКак(Парам01,Парам02)
Процедура ЯЗапоминаюЗначениеПоляСИменемКак(ИмяПоля,ИмяПеременной) Экспорт
	ЯЗапоминаюЗначениеПоляКак(ИмяПоля,ИмяПеременной,Истина);
КонецПроцедуры


&НаКлиенте
//И я запоминаю значение таблицы "ТабличнаяЧасть1" поля "Номер" с ключом "Номер документа"
//@ЯЗапоминаюЗначениеТаблицыПоляКак(Парам01,Парам02)
Процедура ЯЗапоминаюЗначениеТаблицыПоляКак(ИмяТЧ,ИмяПоля,ИмяПеременной) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	Попытка
		
		СтрокиТаблицы = ТЧ.ПолучитьВыделенныеСтроки();
		Если СтрокиТаблицы.Количество() = 0 Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог получить строку таблицы %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		СтрокаТаблицы = СтрокиТаблицы[0];
		Значение      = СтрокаТаблицы[ИмяПоля];
		
		Если Значение = Неопределено Тогда
			//для совместимости
			Значение = ТЧ.ПолучитьТекстЯчейки(ИмяПоля); 
		КонецЕсли;	 
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог получить значение поля <%1> у таблицы <%2>.%3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПоля);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Символы.ПС + ОписаниеОшибки());
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	Контекст.Вставить(ИмяПеременной,Значение);
КонецПроцедуры

&НаКлиенте
//И я запоминаю значение таблицы "ТабличнаяЧасть1" поляс именем "Номер" с ключом "Номер документа"
//@ЯЗапоминаюЗначениеТаблицыПолясИменемКак(Парам01,Парам02)
Процедура ЯЗапоминаюЗначениеТаблицыПолясИменемКак(ИмяТЧ,ИмяПоля,ИмяПеременной) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	Попытка
		Значение = ТЧ.ПолучитьТекстЯчейки(ИмяПоля); 
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог получить значение поля <%1> у таблицы <%2>.%3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПоля);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Символы.ПС + ОписаниеОшибки());
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	Контекст.Вставить(ИмяПеременной,Значение);
КонецПроцедуры

&НаКлиенте
//И я запоминаю значение поля "Номер" таблицы "ТабличнаяЧасть1" как "НомерДокумента"
//@ЯЗапоминаюЗначениеПоляТаблицыКак(Парам01,Парам02)
Процедура ЯЗапоминаюЗначениеПоляТаблицыКак(ИмяПоля,ИмяТЧ,ИмяПеременной) Экспорт
	ЯЗапоминаюЗначениеТаблицыПоляКак(ИмяТЧ,ИмяПоля,ИмяПеременной);
КонецПроцедуры

&НаКлиенте
//И я запоминаю значение поля с именем "Номер" таблицы "ТабличнаяЧасть1" как "НомерДокумента"
//@ЯЗапоминаюЗначениеПоляСИменемТаблицыКак(Парам01,Парам02)
Процедура ЯЗапоминаюЗначениеПоляСИменемТаблицыКак(ИмяПоля,ИмяТЧ,ИмяПеременной) Экспорт
	ЯЗапоминаюЗначениеТаблицыПолясИменемКак(ИмяТЧ,ИмяПоля,ИмяПеременной);
КонецПроцедуры



&НаКлиенте
//И я запоминаю значение поля "Номер" как "НомерДокумента" глобально
//@ЯЗапоминаюЗначениеПоляКакГлобально(Парам01,Парам02)
Процедура ЯЗапоминаюЗначениеПоляКакГлобально(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	Значение = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяПоля,ИскатьПоИмени);
	Попытка
		КонтекстСохраняемый.Вставить(ИмяПеременной,Значение);
	Исключение
		//значит надо сохранить значение не в структуру а в соответствие
		Ванесса.СохранитьЗначениеВКонтекстСохраняемый(ИмяПеременной,Значение);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
//И я запоминаю значение поля с именем "Номер" как "НомерДокумента" глобально
//@ЯЗапоминаюЗначениеПоляСИменемКакГлобально(Парам01,Парам02)
Процедура ЯЗапоминаюЗначениеПоляСИменемКакГлобально(ИмяПоля,ИмяПеременной) Экспорт
	ЯЗапоминаюЗначениеПоляКакГлобально(ИмяПоля,ИмяПеременной,Истина);
КонецПроцедуры

&НаКлиенте
//И я запоминаю значение поля "Номер" с ключом "НомерДокумента" глобально
//@ЯЗапоминаюЗначениеПоляСКлючомГлобально(Парам01,Парам02)
Процедура ЯЗапоминаюЗначениеПоляСКлючомГлобально(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	Значение = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяПоля,ИскатьПоИмени);
	Ванесса.СохранитьЗначениеВКонтекстСохраняемый(ИмяПеременной,Значение);
КонецПроцедуры



&НаКлиенте
//И я запоминаю значение таблицы "ТабличнаяЧасть1" поля "Номер" с ключом "Номер документа"
//@ЯЗапоминаюКоличествоСтрокТаблицыКак(Парам01,Парам02)
Процедура ЯЗапоминаюКоличествоСтрокТаблицыКак(ИмяТаблицы,ИмяПеременной) Экспорт
	ТЧ      = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	Таблица = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ);
	Если Таблица = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог получить строки ТЧ <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Контекст.Вставить(ИмяПеременной,Таблица.Количество());
КонецПроцедуры


&НаКлиенте
//И количество строк таблицы "ИмяТаблицы" равно переменной "ИмяПеременной"
//@КоличествоСтрокТаблицыРавноПеременной(Парам01,Парам02)
Процедура КоличествоСтрокТаблицыРавноПеременной(ИмяТаблицы,ИмяПеременной) Экспорт
	ТЧ      = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	Таблица = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ);
	Если Таблица = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог получить строки ТЧ <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ЗначениеВКонтексте = Контекст[ИмяПеременной];
	
	Если Таблица.Количество() <> ЗначениеВКонтексте Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что количество строк таблицы <%1> будет равно переменной <%2>. Значение переменной <%3>. Количество строк <%4>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПеременной);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ЗначениеВКонтексте);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",Таблица.Количество());
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры




&НаКлиенте
//И я запоминаю текущее окно как "НужныйМнеЗаголовокОкна"
//@ЯЗапоминаюТекущееОкноКак(Парам01)
Процедура ЯЗапоминаюТекущееОкноКак(ИмяПеременной) Экспорт
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	Контекст.Вставить(ИмяПеременной,АктивноеОкно.Заголовок);
КонецПроцедуры





&НаКлиенте
//И я выбираю пункт меню "ЗначениеМеню"
//@ЯВыбираюПунктМеню(ЗначениеМеню)
Процедура ЯВыбираюПунктМеню(ЗначениеМеню) Экспорт
	
	ТекущаяФорма = НайтиТекущуюФорму();
	
	Попытка
		ТекущаяФорма.ВыполнитьВыборИзМеню(ЗначениеМеню);
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В меню нет значения <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ЗначениеМеню);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
//И у поля "ИмяПоля" я выбираю пункт контекстного меню "ПунктМеню"
//@УПоляЯВыбираюПунктКонтекстногоМеню(Парам01,Парам02)
Процедура УПоляЯВыбираюПунктКонтекстногоМеню(ИмяПоля,ПунктМеню,ИскатьПолеПоИмени = Ложь,ИскатьПунктМенюПоИмени = Ложь) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	Поле = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоля,ИскатьПолеПоИмени);
	
	Меню = Поле.ПолучитьКонтекстноеМеню();
	
	Если ИскатьПунктМенюПоИмени Тогда
		ПунктМеню = Меню.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,ПунктМеню);
	Иначе	
		ПунктМеню = Меню.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),ПунктМеню);
	КонецЕсли;	 
	ПунктМеню.Нажать();
	Ванесса.ОбработатьСменуАктивногоОкна();
КонецПроцедуры

&НаКлиенте
//И у поля с именем "ИмяПоля" я выбираю пункт контекстного меню "ПунктМеню"
//@УПоляСИменемЯВыбираюПунктКонтекстногоМеню(Парам01,Парам02)
Процедура УПоляСИменемЯВыбираюПунктКонтекстногоМеню(ИмяПоля,ПунктМеню) Экспорт
	УПоляЯВыбираюПунктКонтекстногоМеню(ИмяПоля,ПунктМеню, Истина); 
КонецПроцедуры



&НаКлиенте
//И я выбираю пункт контекстного меню "ПунктМеню" на элементе формы "ЭлементФормы"
//@ЯВыбираюПунктКонтекстногоМенюНаЭлементеФормы(Парам01,Парам02)
Процедура ЯВыбираюПунктКонтекстногоМенюНаЭлементеФормы(ПунктМеню,ИмяПоля) Экспорт
	УПоляЯВыбираюПунктКонтекстногоМеню(ИмяПоля,ПунктМеню, Ложь); 
КонецПроцедуры

&НаКлиенте
//И я выбираю пункт контекстного меню с именем "ПунктМеню" на элементе формы "ЭлементФормы"
//@ЯВыбираюПунктКонтекстногоМенюСИменемНаЭлементеФормы(Парам01,Парам02)
Процедура ЯВыбираюПунктКонтекстногоМенюСИменемНаЭлементеФормы(ПунктМеню,ИмяПоля) Экспорт
	УПоляЯВыбираюПунктКонтекстногоМеню(ИмяПоля,ПунктМеню, Ложь, Истина); 
КонецПроцедуры

&НаКлиенте
//И я выбираю пункт контекстного меню "ПунктМеню" на элементе формы с именем "ЭлементФормы"
//@УПоляСИменемЯВыбираюПунктКонтекстногоМеню(Парам01,Парам02)
Процедура ЯВыбираюПунктКонтекстногоМенюНаЭлементеФормыСИменем(ПунктМеню,ИмяПоля) Экспорт
	УПоляЯВыбираюПунктКонтекстногоМеню(ИмяПоля,ПунктМеню, Истина); 
КонецПроцедуры

&НаКлиенте
//И я выбираю пункт контекстного меню с именем "ПунктМеню" на элементе формы с именем "ЭлементФормы"
//@ЯВыбираюПунктКонтекстногоМенюсИменемНаЭлементеФормыСИменем(Парам01,Парам02)
Процедура ЯВыбираюПунктКонтекстногоМенюсИменемНаЭлементеФормыСИменем(ПунктМеню,ИмяПоля) Экспорт
	УПоляЯВыбираюПунктКонтекстногоМеню(ИмяПоля,ПунктМеню, Истина,Истина); 
КонецПроцедуры




&НаКлиенте
//И я выбираю из списка "Значение"
//@ЯВыбираюИзСписка(Значение)
Процедура ЯВыбираюИзСписка(Знач Значение) Экспорт
	ТекущаяФорма = НайтиТекущуюФорму();
	НадоПрервать = Ложь;
	БылаОшибка   = Ложь;
	
	ТекстОшибки = "";
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			
			Попытка
				Значение = Ванесса.ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(Значение);
				ТекущаяФорма.ВыполнитьВыборИзСписка(Значение);
				НадоПрервать = Истина;
			Исключение
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В списке нет значения <%1>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Значение);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Ванесса.sleep(1);
		КонецПопытки;
		
		Если НадоПрервать Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Функция ПривестиЗначениеФлагаКСтандарту(Значение)
	НРегЗначение = НРег(Значение);
	
	Если НРегЗначение = "истина" Тогда
		ЗначениеПоиска = "Да";
	ИначеЕсли НРегЗначение = "да" Тогда
		ЗначениеПоиска = "Да";
	ИначеЕсли НРегЗначение = "ложь" Тогда
		ЗначениеПоиска = "Нет";
	ИначеЕсли НРегЗначение = "нет" Тогда
		ЗначениеПоиска = "Нет";
	Иначе	
		ЗначениеПоиска = Значение;
	КонецЕсли;	
	
	Возврат ЗначениеПоиска; 
КонецФункции	 

&НаКлиенте
//И     флаг "Реквизит булево" равен "Истина"
//@ФлагРавен(Парам01,Парам02)
Процедура ФлагРавен(Знач Заголовок,Знач Значение,ИскатьПоИмени = Ложь) Экспорт
	Значение  = ПривестиЗначениеФлагаКСтандарту(Значение);
	ЭлементФормыСталРавен(Заголовок,Значение,ИскатьПоИмени);
КонецПроцедуры

&НаКлиенте
//И     флаг с именем "РеквизитБулево" равен "Истина"
//@ФлагСИменемРавен(Парам01,Парам02)
Процедура ФлагСИменемРавен(Заголовок,Значение) Экспорт
	ФлагРавен(Заголовок,Значение,Истина);
КонецПроцедуры

&НаКлиенте
//Тогда появилось предупреждение, содержащее текст "Текст"
//@ПоявилосьПредупреждениеСодержащееТекст(Парам01)
Процедура ПоявилосьПредупреждениеСодержащееТекст(Текст) Экспорт
	Нашли = Ложь;
	НужноеОкно = Неопределено;
	
	ОкнаПриложения = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	Для Каждого ОкноПриложения Из ОкнаПриложения Цикл
		Если Ванесса.ЭтоЗаголовокОкнаМодальногоДиалога(ОкноПриложения.Заголовок) Тогда
			НужноеОкно = ОкноПриложения;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если НужноеОкно = Неопределено Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не найдено окно предупреждения.");
	КонецЕсли;	 
	
	Ванесса.ЗапомнитьАктивноеОкно(НужноеОкно);
	
	
	ПоляФормы = НужноеОкно.НайтиОбъекты(Тип("ТестируемоеПолеФормы"));
	Если ПоляФормы.Количество() = 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У окна <%1> не найдено ни одного элемента с типом <ТестируемоеПолеФормы>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",НужноеОкно.Заголовок);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ПолеФормы = ПоляФормы[0];
	
	ТекстЗаголовка = ПолеФормы.ТекстЗаголовка;
	
	Если Найти(НРег(ТекстЗаголовка),НРег(Текст)) = 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В строке <%1> не найдена подстрока <%2>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекстЗаголовка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Текст);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
//Тогда не появилось окно предупреждения системы
//@НеПоявилосьОкноПредупрежденияСистемы()
Процедура НеПоявилосьОкноПредупрежденияСистемы() Экспорт
	Нашли = Ложь;
	НужноеОкно = Неопределено;
	
	ОкнаПриложения = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	Для Каждого ОкноПриложения Из ОкнаПриложения Цикл
		Если Ванесса.ЭтоЗаголовокОкнаМодальногоДиалога(ОкноПриложения.Заголовок) Тогда
			НужноеОкно = ОкноПриложения;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если НужноеОкно = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	
	ПоляФормы = НужноеОкно.НайтиОбъекты(Тип("ТестируемоеПолеФормы"));
	Если ПоляФормы.Количество() = 0 Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Было найдено окно предупреждения. А ожидалось, что таких окон не будет.");
	КонецЕсли;	 
	
	ПолеФормы = ПоляФормы[0];
	
	ТекстЗаголовка = ПолеФормы.ТекстЗаголовка;
	
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Было найдено окно предупреждения с текстом: <%1> А ожидалось, что таких окон не будет.");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекстЗаголовка);
	ВызватьИсключение ТекстСообщения;
КонецПроцедуры

&НаКлиенте
//Если появилось окно диалога я нажимаю на кнопку "ОК"
//@ЕслиПоявилосьОкноДиалогаЯНажимаюНаКнопку()
Процедура ЕслиПоявилосьОкноДиалогаЯНажимаюНаКнопку(ИмяКнопки) Экспорт
	ОкноПредупреждения  = Ванесса.НайтиОкноМодальногоДиалога();
	Если ОкноПредупреждения = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Кнопка = ОкноПредупреждения.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),ИмяКнопки);
	Если Кнопка = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка/команда с заголовком <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКнопки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Кнопка.Нажать();
	Ванесса.ОбработатьСменуАктивногоОкна();
КонецПроцедуры



&НаКлиенте
Процедура ДоступенДляПросмотра(ИмяЭлемента, ИскатьПоИмени = Ложь)
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Ложь);
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени,,,ДопПараметры);
		
	Нашли = ЭлементФормы.ТекущееТолькоПросмотр();
	
	Если НЕ Нашли Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с именем <%1> доступен только для просмотра");
		Иначе
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с заголовком <%1> доступен только для просмотра");
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НеДоступенДляПросмотра(ИмяЭлемента, ИскатьПоИмени = Ложь)
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Ложь);
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени,,,ДопПараметры);
		
	Нашли = ЭлементФормы.ТекущееТолькоПросмотр();
	
	Если Нашли Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с именем <%1> доступен только для просмотра");
		Иначе
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с заголовком <%1> доступен только для просмотра");
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента); 
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//И элемент "Имя Элемента" доступен для просмотра
//@ЭлементДоступенТолькоДляПросмотра(ИмяЭлемента)
Процедура ЭлементДоступенТолькоДляПросмотра(ИмяЭлемента) Экспорт
	ДоступенДляПросмотра(ИмяЭлемента, Ложь);
КонецПроцедуры

&НаКлиенте
//И элемент с именем "Имя Элемента" доступен для просмотра
//@ЭлементСИменемДоступенТолькоДляПросмотра(ИмяЭлемента)
Процедура ЭлементСИменемДоступенТолькоДляПросмотра(ИмяЭлемента) Экспорт
	ДоступенДляПросмотра(ИмяЭлемента, Истина);
КонецПроцедуры

&НаКлиенте
//И в открытой форме элемент "Имя Элемента" доступен для просмотра
//@ВОткрытойФормеЭлементДоступенТолькоДляПросмотра(ИмяЭлемента)
Процедура ВОткрытойФормеЭлементДоступенДляПросмотра(ИмяЭлемента) Экспорт
	ДоступенДляПросмотра(ИмяЭлемента, Ложь);
КонецПроцедуры

&НаКлиенте
//И в открытой форме элемент с именем "Имя Элемента" доступен для просмотра
//@ВОткрытойФормеЭлементСИменемДоступенТолькоДляПросмотра(ИмяЭлемента)
Процедура ВОткрытойФормеЭлементСИменемДоступенДляПросмотра(ИмяЭлемента) Экспорт
	ДоступенДляПросмотра(ИмяЭлемента, Истина);
КонецПроцедуры

&НаКлиенте
//И элемент "Реквизит1" доступен не только для просмотра
//@ЭлементДоступенНеТолькоДляПросмотра(ИмяЭлемента)
Процедура ЭлементДоступенНеТолькоДляПросмотра(ИмяЭлемента) Экспорт
	НеДоступенДляПросмотра(ИмяЭлемента, Ложь);
КонецПроцедуры

&НаКлиенте
//И элемент с именем "Реквизит1" доступен не только для просмотра
//@ЭлементСИменемДоступенНеТолькоДляПросмотра(ИмяЭлемента)
Процедура ЭлементСИменемДоступенНеТолькоДляПросмотра(ИмяЭлемента) Экспорт
	НеДоступенДляПросмотра(ИмяЭлемента, Истина);
КонецПроцедуры




&НаКлиенте
Процедура ВОткрытойФормеЯВижуЭлемент(ИмяЭлемента, ИскатьПоИмени = Ложь)
	БылаОшибка = Ложь;
	СтрокаОшибки = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ТекущаяФормаЭлемента",Неопределено);
			ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Ложь);
			ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени, Истина,,ДопПараметры);
			
			ТекущаяВидимость = ЭлементФормы.ТекущаяВидимость();
			Если ТекущаяВидимость Тогда
				//проверим также видимость групп, т.к. у них видимость может отличаться от видимости элемента
				Если ДопПараметры.ТекущаяФормаЭлемента <> Неопределено Тогда
					ТекущаяВидимость = Ванесса.ВидимостьЭлементаСУчетомРодителя(ДопПараметры.ТекущаяФормаЭлемента,ЭлементФормы,ТекущаяВидимость);
				ИначеЕсли Контекст.АктивноеОкно <> Неопределено Тогда
					ТекущаяВидимость = Ванесса.ВидимостьЭлементаСУчетомРодителя(Контекст.АктивноеОкно,ЭлементФормы,ТекущаяВидимость);
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если НЕ ТекущаяВидимость Тогда
				Если ИскатьПоИмени Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с именем <%1> не виден на текущей форме");
				Иначе
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с заголовком <%1> не виден на текущей форме");
				КонецЕсли;
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Ванесса.sleep(1);
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ВОткрытойФормеЯНеВижуЭлемент(ИмяЭлемента, ИскатьПоИмени = Ложь,ПолеОбязаноСуществовать = Ложь)
	БылаОшибка = Ложь;
	СтрокаОшибки = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ТекущаяФормаЭлемента",Неопределено);
			ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени,Ложь,,ДопПараметры);
			Если ЭлементФормы = Неопределено Тогда
				Если ПолеОбязаноСуществовать Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент формы <%1> не найден.");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
					ВызватьИсключение ТекстСообщения;
				Иначе	
					Возврат;
				КонецЕсли;	 
			КонецЕсли;
			
			ТекущаяВидимость = ЭлементФормы.ТекущаяВидимость();
			Если ТекущаяВидимость Тогда
				//проверим также видимость групп, т.к. у них видимость может отличаться от видимости элемента
				Если ДопПараметры.ТекущаяФормаЭлемента <> Неопределено Тогда
					ТекущаяВидимость = Ванесса.ВидимостьЭлементаСУчетомРодителя(ДопПараметры.ТекущаяФормаЭлемента,ЭлементФормы,ТекущаяВидимость);
				ИначеЕсли Контекст.АктивноеОкно <> Неопределено Тогда
					ТекущаяВидимость = Ванесса.ВидимостьЭлементаСУчетомРодителя(Контекст.АктивноеОкно,ЭлементФормы,ТекущаяВидимость);
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если ТекущаяВидимость Тогда
				Если ИскатьПоИмени Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с именем <%1> виден на текущей форме");
				Иначе
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с заголовком <%1> виден на текущей форме");
				КонецЕсли;
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Ванесса.sleep(1);
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И я вижу элемент "Имя элемента"
//@ЯВижуЭлемент(ИмяЭлемента)
Процедура ЯВижуЭлемент(ИмяЭлемента) Экспорт
	ВОткрытойФормеЯВижуЭлемент(ИмяЭлемента, Ложь);
КонецПроцедуры

&НаКлиенте
//И я вижу элемент "Имя элемента" на форме
//@ЯВижуЭлементНаФорме(ИмяЭлемента)
Процедура ЯВижуЭлементНаФорме(ИмяЭлемента) Экспорт
	ВОткрытойФормеЯВижуЭлемент(ИмяЭлемента, Ложь);
КонецПроцедуры

&НаКлиенте
//И я вижу элемент с именем "Имя элемента"
//@ЯВижуЭлементСИменем(ИмяЭлемента)
Процедура ЯВижуЭлементСИменем(ИмяЭлемента) Экспорт
	ВОткрытойФормеЯВижуЭлемент(ИмяЭлемента, Истина);
КонецПроцедуры

&НаКлиенте
//И я вижу элемент с именем "Имя элемента" на форме
//@ЯВижуЭлементСИменемНаФорме(ИмяЭлемента)
Процедура ЯВижуЭлементСИменемНаФорме(ИмяЭлемента) Экспорт
	ВОткрытойФормеЯВижуЭлемент(ИмяЭлемента, Истина);
КонецПроцедуры

&НаКлиенте
//И я не вижу элемент "Имя элемента"
//@ЯНеВижуЭлемент(Парам01)
Процедура ЯНеВижуЭлемент(ИмяЭлемента) Экспорт
	ВОткрытойФормеЯНеВижуЭлемент(ИмяЭлемента, Ложь);
КонецПроцедуры

&НаКлиенте
//И я не вижу элемент "Имя элемента" на форме
//@ЯНеВижуЭлементНаФорме(Парам01)
Процедура ЯНеВижуЭлементНаФорме(ИмяЭлемента) Экспорт
	ВОткрытойФормеЯНеВижуЭлемент(ИмяЭлемента, Ложь);
КонецПроцедуры

&НаКлиенте
//И я не вижу элемент с именем "Имя элемента"
//@ЯНеВижуЭлементСИменем(Парам01)
Процедура ЯНеВижуЭлементСИменем(ИмяЭлемента) Экспорт
	ВОткрытойФормеЯНеВижуЭлемент(ИмяЭлемента, Истина);
КонецПроцедуры

&НаКлиенте
//И я не вижу элемент с именем "Имя элемента" на форме
//@ЯНеВижуЭлементСИменемНаФорме(Парам01)
Процедура ЯНеВижуЭлементСИменемНаФорме(ИмяЭлемента) Экспорт
	ВОткрытойФормеЯНеВижуЭлемент(ИмяЭлемента, Истина);
КонецПроцедуры

// { доступность
&НаКлиенте
Процедура ЯПроверяюДоступностьЭлементаФормы(ИмяЭлемента, ИскатьПоИмени = Ложь,ПроверятьДоступность = Истина)
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Ложь);
	ДопПараметры.Вставить("ТекущаяФормаЭлемента",Неопределено);
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени,,,ДопПараметры);
	ТекущаяДоступность = ЭлементФормы.ТекущаяДоступность();
	
	Если ТекущаяДоступность Тогда
		//проверим также видимость групп, т.к. у них видимость может отличаться от видимости элемента
		Если ДопПараметры.ТекущаяФормаЭлемента <> Неопределено Тогда
			ТекущаяДоступность = Ванесса.ДоступностьЭлементаСУчетомРодителя(ДопПараметры.ТекущаяФормаЭлемента,ЭлементФормы,ТекущаяДоступность);
		ИначеЕсли Контекст.АктивноеОкно <> Неопределено Тогда
			ТекущаяДоступность = Ванесса.ДоступностьЭлементаСУчетомРодителя(Контекст.АктивноеОкно,ЭлементФормы,ТекущаяДоступность);
		КонецЕсли;	 
	КонецЕсли;	 

	Если ПроверятьДоступность и НЕ ТекущаяДоступность Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с именем <%1> не доступен на форме");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с заголовком <%1> не доступен на форме");
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента); 
		ВызватьИсключение ТекстСообщения;
	ИначеЕсли НЕ ПроверятьДоступность и ТекущаяДоступность Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с именем <%1> доступен на форме");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с заголовком <%1> доступен на форме");
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ЯПроверяюНеДоступностьЭлементаФормы(ИмяЭлемента, ИскатьПоИмени = Ложь)
	ЯПроверяюДоступностьЭлементаФормы(ИмяЭлемента, ИскатьПоИмени,Ложь);
КонецПроцедуры

&НаКлиенте
//И элемент формы "ИмяЭлемента" доступен
//@ЭлементФормыДоступен(ИмяЭлемента)
Процедура ЭлементФормыДоступен(ИмяЭлемента) Экспорт
	ЯПроверяюДоступностьЭлементаФормы(ИмяЭлемента, Ложь);
КонецПроцедуры

&НаКлиенте
//И элемент формы "ИмяЭлемента" не доступен
//@ЭлементФормыНеДоступен(ИмяЭлемента)
Процедура ЭлементФормыНеДоступен(ИмяЭлемента) Экспорт
	ЯПроверяюНеДоступностьЭлементаФормы(ИмяЭлемента, Ложь);
КонецПроцедуры

&НаКлиенте
//И элемент формы с именем "ИмяЭлемента" доступен
//@ЭлементФормыСИменемДоступен(ИмяЭлемента)
Процедура ЭлементФормыСИменемДоступен(ИмяЭлемента) Экспорт
	ЯПроверяюДоступностьЭлементаФормы(ИмяЭлемента, Истина);
КонецПроцедуры

&НаКлиенте
//И элемент формы с именем "ИмяЭлемента" не доступен
//@ЭлементФормыСИменемНеДоступен(ИмяЭлемента)
Процедура ЭлементФормыСИменемНеДоступен(ИмяЭлемента) Экспорт
	ЯПроверяюНеДоступностьЭлементаФормы(ИмяЭлемента, Истина);
КонецПроцедуры

// ТЧ

&НаКлиенте
//И В таблице "ИмяТЧ" поле "ИмяРеквизита" доступно
//@ВТЧПолеДоступно(ИмяТЧ, ИмяРеквизита)
Процедура ВТЧПолеДоступно(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	 
	
	Если ПолеРеквизит = Неопределено Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с именем <%2> не найдено.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с заголовком <%2> не найдено.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Нашли = ПолеРеквизит.ТекущаяДоступность();
	
	Если НЕ Нашли Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с именем <%1> не доступен на форме");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с заголовком <%1> не доступен на форме");
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
//И В таблице "ИмяТЧ" поле "ИмяРеквизита" доступно
//@ВТаблицеПолеДоступно(ИмяТЧ, ИмяРеквизита)
Процедура ВТаблицеПолеДоступно(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВТЧПолеДоступно(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени);
КонецПроцедуры 



&НаКлиенте
//И В таблице "ИмяТЧ" поле с именем "ИмяРеквизита" доступно
//@ВТЧПолеСИменемДоступно(ИмяТЧ, ИмяРеквизита)
Процедура ВТЧПолеСИменемДоступно(ИмяТЧ,ИмяРеквизита) Экспорт
	ВТЧПолеДоступно(ИмяТЧ,ИмяРеквизита,Истина);
КонецПроцедуры

&НаКлиенте
//И В таблице "ИмяТЧ" поле с именем "ИмяРеквизита" доступно
//@ВТаблицеПолеСИменемДоступно(ИмяТЧ, ИмяРеквизита)
Процедура ВТаблицеПолеСИменемДоступно(ИмяТЧ,ИмяРеквизита) Экспорт
	ВТЧПолеДоступно(ИмяТЧ,ИмяРеквизита,Истина);
КонецПроцедуры




&НаКлиенте
//И В таблице "ИмяТЧ" поле "ИмяРеквизита" не доступно
//@ВТЧПолеНеДоступно(ИмяТЧ, ИмяРеквизита)
Процедура ВТЧПолеНеДоступно(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	 
	
	Если ПолеРеквизит = Неопределено Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с именем <%2> не найдено.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с заголовком <%2> не найдено.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Нашли = ПолеРеквизит.ТекущаяДоступность();
	
	Если Нашли Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с именем <%1> доступен на форме");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с заголовком <%1> доступен на форме");
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
//И В таблице "ИмяТЧ" поле "ИмяРеквизита" не доступно
//@ВТаблицеПолеНеДоступно(ИмяТЧ, ИмяРеквизита)
Процедура ВТаблицеПолеНеДоступно(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВТЧПолеНеДоступно(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени);
КонецПроцедуры 





&НаКлиенте
//И В таблице "ИмяТЧ" поле с именем "ИмяРеквизита" недоступно
//@ВТЧПолеСИменемНеДоступно(ИмяТЧ, ИмяРеквизита)
Процедура ВТЧПолеСИменемНеДоступно(ИмяТЧ,ИмяРеквизита) Экспорт
	ВТЧПолеНеДоступно(ИмяТЧ,ИмяРеквизита,Истина);
КонецПроцедуры

&НаКлиенте
//И В таблице "ИмяТЧ" поле с именем "ИмяРеквизита" недоступно
//@ВТаблицеПолеСИменемНеДоступно(ИмяТЧ, ИмяРеквизита)
Процедура ВТаблицеПолеСИменемНеДоступно(ИмяТЧ,ИмяРеквизита) Экспорт
	ВТЧПолеНеДоступно(ИмяТЧ,ИмяРеквизита,Истина);
КонецПроцедуры





&НаКлиенте
//И В таблице "ИмяТЧ" поле "ИмяРеквизита" доступно только для просмотра
//@ВТЧПолеДоступноТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)
Процедура ВТЧПолеДоступноТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	 
	
	Если ПолеРеквизит = Неопределено Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с именем <%2> не найдено.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с заголовком <%2> не найдено.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Нашли = ПолеРеквизит.ТекущееТолькоПросмотр();
	
	Если НЕ Нашли Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с именем <%1> доступен только для просмотра");
		Иначе
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с заголовком <%1> доступен только для просмотра");
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//И В таблице "ИмяТЧ" поле "ИмяРеквизита" доступно только для просмотра
//@ВТаблицеПолеДоступноТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)
Процедура ВТаблицеПолеДоступноТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВТЧПолеДоступноТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени);
КонецПроцедуры




&НаКлиенте
//И В таблице "ИмяТЧ" поле с именем "ИмяРеквизита" доступно только для просмотра
//@ВТЧПолеСИменемДоступноТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)
Процедура ВТЧПолеСИменемДоступноТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВТЧПолеДоступноТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита, Истина);
КонецПроцедуры

&НаКлиенте
//И В таблице "ИмяТЧ" поле с именем "ИмяРеквизита" доступно только для просмотра
//@ВТаблицеПолеСИменемДоступноТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)
Процедура ВТаблицеПолеСИменемДоступноТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВТЧПолеДоступноТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита, Истина);
КонецПроцедуры




&НаКлиенте
//И В таблице "ИмяТЧ" поле "ИмяРеквизита" доступно не только для просмотра
//@ВТЧПолеДоступноНеТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)
Процедура ВТЧПолеДоступноНеТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	 
	
	Если ПолеРеквизит = Неопределено Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с именем <%2> не найдено.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с заголовком <%2> не найдено.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Нашли = ПолеРеквизит.ТекущееТолькоПросмотр();
	
	Если Нашли Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с именем <%1> доступен не только для просмотра");
		Иначе
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с заголовком <%1> доступен не только для просмотра");
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//И В таблице "ИмяТЧ" поле "ИмяРеквизита" доступно не только для просмотра
//@ВТаблицеПолеДоступноНеТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)
Процедура ВТаблицеПолеДоступноНеТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВТЧПолеДоступноНеТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени);
КонецПроцедуры



&НаКлиенте
//И В таблице "ИмяТЧ" поле с именем "ИмяРеквизита" доступно не только для просмотра
//@ВТЧПолеСИменемДоступноНеТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)
Процедура ВТЧПолеСИменемДоступноНеТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВТЧПолеДоступноНеТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита, Истина);
КонецПроцедуры

&НаКлиенте
//И В таблице "ИмяТЧ" поле с именем "ИмяРеквизита" доступно не только для просмотра
//@ВТаблицеПолеСИменемДоступноНеТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)
Процедура ВТаблицеПолеСИменемДоступноНеТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВТЧПолеДоступноНеТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита, Истина);
КонецПроцедуры

// } доступность



&НаКлиенте
//Тогда в таблице с именем "ТабличнаяЧасть1" я выделяю все строки
//@ВТаблицеСИменемЯВыделяюВсеСтроки(Парам01)
Процедура ВТаблицеСИменемЯВыделяюВсеСтроки(ИмяТЧ) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	Попытка
		ТЧ.ВыделитьВсеСтроки();
		Если Ванесса.ТекущийTestclientЭтоWebКлиент Тогда
			//чтобы дать web клиенту успеть выделить строки
			Если Ванесса.БезопасноеВыполнениеШагов() Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецЕсли;	 
		
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог выделить все строки в таблице <%1>. %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Символы.ПС + ОписаниеОшибки());
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
//Тогда в таблице "ТабличнаяЧасть1" я выделяю все строки
//@ВТаблицеЯВыделяюВсеСтроки(Парам01)
Процедура ВТаблицеЯВыделяюВсеСтроки(ИмяТЧ) Экспорт
	ВТаблицеСИменемЯВыделяюВсеСтроки(ИмяТЧ);
КонецПроцедуры



&НаКлиенте
//И в таблице "ИмяТаблицы" я выделяю все строки выше текущей
//@ВТаблицеЯВыделяюВсеСтрокиВышеТекущей(Парам01)
Процедура ВТаблицеЯВыделяюВсеСтрокиВышеТекущей(ИмяТЧ) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	
	Попытка
		ТЧ.ПерейтиКПредыдущейСтроке();
	Исключение
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ТЧ.ПерейтиКПредыдущейСтроке(Истина);
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;	
КонецПроцедуры


&НаКлиенте
//И в таблице "ИмяТаблицы" я выделяю все строки ниже текущей
//@ВТаблицеЯВыделяюВсеСтрокиНижеТекущей(Парам01)
Процедура ВТаблицеЯВыделяюВсеСтрокиНижеТекущей(ИмяТЧ) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	
	Попытка
		ТЧ.ПерейтиКСледующейСтроке();
	Исключение
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ТЧ.ПерейтиКСледующейСтроке(Истина);
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;	
КонецПроцедуры



&НаКлиенте
//И в поле "&Что искать" ввожу значение переменной "Документ2_Сценарий_1"
//@ВПолеВвожуЗначениеПеременной(Парам01,Парам02)
Процедура ВПолеВвожуЗначениеПеременной(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	ЗначениеПеременной = "";
	Контекст.Свойство(ИмяПеременной, ЗначениеПеременной);
	Если ЗначениеПеременной = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> ранее не была сохранена");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Ванесса.Шаг("И в поле """+ИмяПоля+""" я ввожу текст """+ЗначениеПеременной+"""");
КонецПроцедуры

&НаКлиенте
//И в поле "&Что искать" я ввожу значение переменной "Документ2_Сценарий_1"
//@ВПолеЯВвожуЗначениеПеременной(Парам01,Парам02)
Процедура ВПолеЯВвожуЗначениеПеременной(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	ВПолеВвожуЗначениеПеременной(ИмяПоля,ИмяПеременной,ИскатьПоИмени);
КонецПроцедуры

&НаКлиенте
//И в Таблицу "ТабличнаяЧасть1" поле "Номер" ввожу значение переменной "НомерДок"
//@ВТаблицуВПолеВвожуЗначениеПеременной(Парам01,Парам02,Парам03)
Процедура ВТаблицуВПолеВвожуЗначениеПеременной(ИмяТЧ,ИмяПоля,ИмяПеременной) Экспорт
	ЗначениеПеременной = "";
	Контекст.Свойство(ИмяПеременной, ЗначениеПеременной);
	Если ЗначениеПеременной = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> ранее не была сохранена");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	ВТЧВПолеЯВвожуТекст(ИмяТЧ,ИмяПоля,ЗначениеПеременной);
КонецПроцедуры

&НаКлиенте
//И в Таблицу "ТабличнаяЧасть1" поле "Номер" я ввожу значение переменной "НомерДок"
//@ВТаблицуВПолеЯВвожуЗначениеПеременной(Парам01,Парам02,Парам03)
Процедура ВТаблицуВПолеЯВвожуЗначениеПеременной(ИмяТЧ,ИмяПоля,ИмяПеременной) Экспорт
	ВТаблицуВПолеВвожуЗначениеПеременной(ИмяТЧ,ИмяПоля,ИмяПеременной);
КонецПроцедуры


&НаКлиенте
//И в поле "&Что искать" ввожу значение ключа "Номер документа"
//@ВПолеВвожуЗначениеКлюча(Парам01,Парам02)
Процедура ВПолеВвожуЗначениеКлюча(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	ЗначениеПеременной = Ванесса.ПолучитьСохраненноеЗначениеИзКонтекста(ИмяПеременной);
	Если ЗначениеПеременной = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> ранее не была сохранена");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Ванесса.Шаг("И в поле """+ИмяПоля+""" я ввожу текст """+ЗначениеПеременной+"""");
КонецПроцедуры

&НаКлиенте
//И в поле "&Что искать" я ввожу значение ключа "Номер документа"
//@ВПолеЯВвожуЗначениеКлюча(Парам01,Парам02)
Процедура ВПолеЯВвожуЗначениеКлюча(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	ВПолеВвожуЗначениеКлюча(ИмяПоля,ИмяПеременной,ИскатьПоИмени);
КонецПроцедуры


&НаКлиенте
//И в поле "&Что искать" ввожу значение глобальной переменной "Документ2_Сценарий_1"
//@ВПолеВвожуЗначениеГлобальнойПеременной(Парам01,Парам02)
Процедура ВПолеВвожуЗначениеГлобальнойПеременной(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	ЗначениеПеременной = "";
	КонтекстСохраняемый.Свойство(ИмяПеременной, ЗначениеПеременной);
	Если ЗначениеПеременной = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> ранее не была сохранена");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Ванесса.Шаг("И в поле """+ИмяПоля+""" я ввожу текст """+ЗначениеПеременной+"""");
КонецПроцедуры

&НаКлиенте
//И в поле "&Что искать" я ввожу значение глобальной переменной "Документ2_Сценарий_1"
//@ВПолеЯВвожуЗначениеГлобальнойПеременной(Парам01,Парам02)
Процедура ВПолеЯВвожуЗначениеГлобальнойПеременной(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	ВПолеВвожуЗначениеГлобальнойПеременной(ИмяПоля,ИмяПеременной,ИскатьПоИмени);
КонецПроцедуры


&НаКлиенте
//И в поле "&Что искать" ввожу значение глобального ключа "Номер документа"
//@ВПолеВвожуЗначениеГлобальногоКлюча(Парам01,Парам02)
Процедура ВПолеВвожуЗначениеГлобальногоКлюча(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	ЗначениеПеременной = Ванесса.ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого(ИмяПеременной);
	Если ЗначениеПеременной = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> ранее не была сохранена");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Ванесса.Шаг("И в поле """+ИмяПоля+""" я ввожу текст """+ЗначениеПеременной+"""");
КонецПроцедуры

&НаКлиенте
//И в поле "&Что искать" я ввожу значение глобального ключа "Номер документа"
//@ВПолеЯВвожуЗначениеГлобальногоКлюча(Парам01,Парам02)
Процедура ВПолеЯВвожуЗначениеГлобальногоКлюча(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	ВПолеВвожуЗначениеГлобальногоКлюча(ИмяПоля,ИмяПеременной,ИскатьПоИмени);
КонецПроцедуры


&НаКлиенте
//И в поле с именем "&Что искать" ввожу значение переменной "Документ2_Сценарий_1"
//@ВПолеСИменемВвожуЗначениеПеременной(Парам01,Парам02)
Процедура ВПолеСИменемВвожуЗначениеПеременной(Парам01,ИмяПеременной) Экспорт
	ЗначениеПеременной = "";
	Контекст.Свойство(ИмяПеременной, ЗначениеПеременной);
	Если ЗначениеПеременной = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> ранее не была сохранена");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Ванесса.Шаг("И В открытой форме в поле с именем """+Парам01+""" я ввожу текст """+ЗначениеПеременной+"""");
КонецПроцедуры

&НаКлиенте
//И в поле с именем "&Что искать" ввожу значение ключа "Номер документа"
//@ВПолеСИменемВвожуЗначениеКлюча(Парам01,Парам02)
Процедура ВПолеСИменемВвожуЗначениеКлюча(Парам01,ИмяПеременной) Экспорт
	ЗначениеПеременной = Ванесса.ПолучитьСохраненноеЗначениеИзКонтекста(ИмяПеременной);
	Если ЗначениеПеременной = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> ранее не была сохранена");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Ванесса.Шаг("И В открытой форме в поле с именем """+Парам01+""" я ввожу текст """+ЗначениеПеременной+"""");
КонецПроцедуры

&НаКлиенте
//И в поле с именем "&Что искать" ввожу значение глобальной переменной "Документ2_Сценарий_1"
//@ВПолеСИменемВвожуЗначениеГлобальнойПеременной(Парам01,Парам02)
Процедура ВПолеСИменемВвожуЗначениеГлобальнойПеременной(Парам01,ИмяПеременной) Экспорт
	ЗначениеПеременной = "";
	КонтекстСохраняемый.Свойство(ИмяПеременной, ЗначениеПеременной);
	Если ЗначениеПеременной = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> ранее не была сохранена");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Ванесса.Шаг("И В открытой форме в поле с именем """+Парам01+""" я ввожу текст """+ЗначениеПеременной+"""");
КонецПроцедуры

&НаКлиенте
//И в поле с именем "&Что искать" ввожу значение глобального ключа "Номер документа"
//@ВПолеСИменемВвожуЗначениеГлобальногоКлюча(Парам01,Парам02)
Процедура ВПолеСИменемВвожуЗначениеГлобальногоКлюча(Парам01,ИмяПеременной) Экспорт
	ЗначениеПеременной = Ванесса.ПолучитьСохраненноеЗначениеИзКонтекста(ИмяПеременной);
	Если ЗначениеПеременной = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> ранее не была сохранена");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Ванесса.Шаг("И В открытой форме в поле с именем """+Парам01+""" я ввожу текст """+ЗначениеПеременной+"""");
КонецПроцедуры








&НаКлиенте
//И я удаляю все строки таблицы "График"
//@ЯУдаляюВсеСтрокиТаблицы(Парам01)
Процедура ЯУдаляюВсеСтрокиТаблицы(ИмяТаблицы) Экспорт
	ТЧ =  НайтиТЧПоИмени(ИмяТаблицы);
	
	ЗначениеТЧ = ПолучитьСтрокиИзТаблицыTestClient(ТЧ);
	ОсталосьУдалить = ЗначениеТЧ.Количество();
	
	Для Счетчик = 1 По ОсталосьУдалить Цикл
		Попытка
			ТЧ.ПерейтиКПоследнейСтроке();
			ТЧ.УдалитьСтроку();
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
//И в таблице с именем "ТабличнаяЧасть1" я удаляю текущую строку
//@ВТаблицеСИменемЯУдаляюТекущуюСтроку(Парам01)
Процедура ВТаблицеСИменемЯУдаляюТекущуюСтроку(ИмяТаблицы) Экспорт
	Таблица = НайтиТЧПоИмени(ИмяТаблицы);
	
	Таблица.Активизировать();
	СделатьДействияПриЗаписиВидео("толькофрейм");
	
	Таблица.УдалитьСтроку();
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я удаляю текущую строку
//@ВТаблицеЯУдаляюТекущуюСтроку(Парам01)
Процедура ВТаблицеЯУдаляюТекущуюСтроку(ИмяТаблицы) Экспорт
	ВТаблицеСИменемЯУдаляюТекущуюСтроку(ИмяТаблицы);
КонецПроцедуры





&НаКлиенте
//И поле "Реквизит2" существует
//@ПолеСуществует(Парам01)
Процедура ПолеСуществует(ИмяПоля,ИскатьПоИмени = Ложь) Экспорт
	Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоля,ИскатьПоИмени);
КонецПроцедуры

&НаКлиенте
//И поле "Реквизит2" не существует
//@ПолеНеСуществует(Парам01)
Процедура ПолеНеСуществует(ИмяПоля,ИскатьПоИмени = Ложь) Экспорт
	Нашли = Ложь;
	МассивФорм = Ванесса.НайтиФормыТекущегоОкнаTestClient();
	Для каждого ТекущаяФорма Из МассивФорм Цикл
		
		Если ИскатьПоИмени Тогда
			МассивЭлементов        = ТекущаяФорма.НайтиОбъекты(, , ИмяПоля);
		Иначе
			МассивЭлементов        = ТекущаяФорма.НайтиОбъекты(, ИмяПоля);
		КонецЕсли;	 
		
		Если МассивЭлементов = Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если МассивЭлементов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Нашли = Истина;
		Прервать;
	КонецЦикла;	
	
	Если Нашли Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле <%1> существует, а ожидали, что его нет.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПоля);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецПроцедуры


&НаКлиенте
//И поле с именем "Реквизит2" существует
//@ПолеСИменемСуществует(Парам01)
Процедура ПолеСИменемСуществует(ИмяПоля,ИскатьПоИмени = Ложь) Экспорт
	ПолеСуществует(ИмяПоля,Истина);
КонецПроцедуры

&НаКлиенте
//И поле с именем "Реквизит2" не существует
//@ПолеСИменемНеСуществует(Парам01)
Процедура ПолеСИменемНеСуществует(ИмяПоля) Экспорт
	ПолеНеСуществует(ИмяПоля,Истина);
КонецПроцедуры





&НаКлиенте
//И поле с именем "Реквизит2" имеет заголовок
//@ПолеСИменемИмеетЗаголовок(Парам01)
Процедура ПолеСИменемИмеетЗаголовок(ИмяПоля,ОжидаемыйТекстЗаголовка) Экспорт
	Поле = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоля,Истина);
	
	Если Поле.ТекстЗаголовка <> ОжидаемыйТекстЗаголовка Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У поля <%1> ожидали заголовок <%2>, а получили <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПоля);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОжидаемыйТекстЗаголовка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Поле.ТекстЗаголовка);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И у поля с именем "Реквизит2" текст подсказки равен "ТекстПодсказки"
//@УПоляСИменемТекстПодсказкиРавен(Парам01,Парам02)
Процедура УПоляСИменемТекстПодсказкиРавен(ИмяПоля,НужныйТекстПодсказки) Экспорт
	Поле = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоля,Истина);
	
	ТекущийТекстПодсказки = Поле.ПолучитьТекстПодсказки();
	
	Если ТекущийТекстПодсказки <> НужныйТекстПодсказки Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У поля <%1> ожидали текст подсказки <%2>, а получили <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПоля);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",НужныйТекстПодсказки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ТекущийТекстПодсказки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И поле таблицы "ИмяТаблицы" с именем "ИмяРеквизита" имеет заголовок "Реквизит строка"
//@ПолеТаблицыСИменемИмеетЗаголовок(Парам01,Парам02,Парам03)
Процедура ПолеТаблицыСИменемИмеетЗаголовок(ИмяТаблицы,ИмяПоля,ОжидаемыйТекстЗаголовка) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТаблицы);
	Поле = ТЧ.НайтиОбъект(,,ИмяПоля);
	Если Поле = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с именем <%2> не найдено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоля);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если Поле.ТекстЗаголовка <> ОжидаемыйТекстЗаголовка Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> у поля <%2> ожидали заголовок <%3>, а получили <%4>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоля);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ОжидаемыйТекстЗаголовка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",Поле.ТекстЗаголовка);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И у поля таблицы "ИмяТаблицы" с именем "РеквизитСтрока" текст подсказки равен ""
//@УПоляТаблицыСИменемТекстПодсказкиРавен(Парам01,Парам02,Парам03)
Процедура УПоляТаблицыСИменемТекстПодсказкиРавен(ИмяТаблицы,ИмяПоля,ОжидаемыйТекстПодсказки) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТаблицы);
	Поле = ТЧ.НайтиОбъект(,,ИмяПоля);
	Если Поле = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с именем <%2> не найдено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоля);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если Поле.ПолучитьТекстПодсказки() <> ОжидаемыйТекстПодсказки Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> у поля <%2> ожидали текст подсказки <%3>, а получили <%4>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоля);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ОжидаемыйТекстПодсказки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",Поле.ТекстЗаголовка);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры




&НаКлиенте
//И у поля "Имя поля" я перехожу к дате 08.04.1981
//@УПоляЯПерехожуКДате(Парам01,Парам02)
Процедура УПоляЯПерехожуКДате(ИмяРеквизита,Дат,ИскатьПоИмени = Ложь) Экспорт
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"));
	ПолеРеквизит.Активизировать();
	
	СделатьДействияПриЗаписиВидео();
	ПолеРеквизит.ПерейтиКДате(Ванесса.ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(Дат));
	СделатьДействияПриЗаписиHTML();
КонецПроцедуры


&НаКлиенте
//И у поля с именем "Имя поля" я перехожу к дате "08.04.1981"
//@УПоляСИменемЯПерехожуКДате(Парам01,Парам02)
Процедура УПоляСИменемЯПерехожуКДате(ИмяРеквизита,Дат,ИскатьПоИмени = Ложь) Экспорт
	УПоляЯПерехожуКДате(ИмяРеквизита,Дат,Истина);
КонецПроцедуры


&НаКлиенте
//И у поля календаря "ИмяПоля" я выбираю дату
//@УПоляКалендаряЯВыбираюДату(Парам01)
Процедура УПоляКалендаряЯВыбираюДату(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"));
	ПолеРеквизит.Выбрать();
КонецПроцедуры

&НаКлиенте
//И у поля календаря с именем "ИмяПоля" я выбираю дату
//@УПоляКалендаряСИменемЯВыбираюДату(Парам01)
Процедура УПоляКалендаряСИменемЯВыбираюДату(ИмяРеквизита) Экспорт
	УПоляКалендаряЯВыбираюДату(ИмяРеквизита,Истина);
КонецПроцедуры




&НаКлиенте
//И поле ""Заголовок поля"" присутствует на форме
//@ПолеПрисутствуетНаФорме(Парам01)
Процедура ПолеПрисутствуетНаФорме(ИмяЭлемента,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯВижуЭлемент(ИмяЭлемента, ИскатьПоИмени);
КонецПроцедуры

&НаКлиенте
//И элемент формы ""ИмяПоля"" присутствует на форме
//@ЭлементФормыПрисутствуетНаФорме(Парам01)
Процедура ЭлементФормыПрисутствуетНаФорме(ИмяЭлемента,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯВижуЭлемент(ИмяЭлемента, ИскатьПоИмени);
КонецПроцедуры

&НаКлиенте
//И поле с именем ""ИмяПоля"" присутствует на форме
//@ПолесИменемПрисутствуетНаФорме(Парам01)
Процедура ПолесИменемПрисутствуетНаФорме(ИмяЭлемента) Экспорт
	ПолеПрисутствуетНаФорме(ИмяЭлемента,Истина);
КонецПроцедуры

&НаКлиенте
//И элемент формы с именем ""ИмяПоля"" присутствует на форме
//@ЭлементФормыСИменемПрисутствуетНаФорме(Парам01)
Процедура ЭлементФормыСИменемПрисутствуетНаФорме(ИмяЭлемента) Экспорт
	ПолеПрисутствуетНаФорме(ИмяЭлемента,Истина);
КонецПроцедуры

&НаКлиенте
//И поле ""Заголовок поля"" отсутствует на форме
//@ПолеОтсутствуетНаФорме(Парам01)
Процедура ПолеОтсутствуетНаФорме(ИмяЭлемента,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯНеВижуЭлемент(ИмяЭлемента, ИскатьПоИмени);
КонецПроцедуры

&НаКлиенте
//И элемент формы ""ИмяПоля"" отсутствует на форме
//@ЭлементФормыОтсутствуетНаФорме(Парам01)
Процедура ЭлементФормыОтсутствуетНаФорме(ИмяЭлемента,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯНеВижуЭлемент(ИмяЭлемента, ИскатьПоИмени);
КонецПроцедуры

&НаКлиенте
//И элемент формы ""ИмяПоля"" существует и невидим на форме
//@ЭлементФормыСуществуетИНевидимНаФорме(Парам01)
Процедура ЭлементФормыСуществуетИНевидимНаФорме(ИмяЭлемента,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯНеВижуЭлемент(ИмяЭлемента, ИскатьПоИмени,Истина);
КонецПроцедуры

&НаКлиенте
//И поле с именем ""ИмяПоля"" отсутствует на форме
//@ПолесИменемОтсутствуетНаФорме(Парам01)
Процедура ПолесИменемОтсутствуетНаФорме(ИмяЭлемента) Экспорт
	ПолеОтсутствуетНаФорме(ИмяЭлемента,Истина);
КонецПроцедуры

&НаКлиенте
//И элемент формы с именем ""ИмяПоля"" отсутствует на форме
//@ЭлементФормыСИменемОтсутствуетНаФорме(Парам01)
Процедура ЭлементФормыСИменемОтсутствуетНаФорме(ИмяЭлемента) Экспорт
	ПолеОтсутствуетНаФорме(ИмяЭлемента,Истина);
КонецПроцедуры

&НаКлиенте
//И элемент формы с именем ""ИмяПоля"" существует и невидим на форме
//@ЭлементФормыСИменемСуществуетИНевидимНаФорме(Парам01)
Процедура ЭлементФормыСИменемСуществуетИНевидимНаФорме(ИмяЭлемента) Экспорт
	ВОткрытойФормеЯНеВижуЭлемент(ИмяЭлемента, Истина, Истина);
КонецПроцедуры




&НаКлиенте
//И     у табличного документа с именем "ТабДок" я перехожу к ячейке "R4C2"
//@УТабличногоДокументаСИменемЯПерехожуКЯчейке(Парам01,Парам02)
Процедура УТабличногоДокументаСИменемЯПерехожуКЯчейке(ИмяРеквизита,ИмяЯчейки) Экспорт
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,Истина, Истина, Тип("ТестируемоеПолеФормы"));
	ПолеРеквизит.УстановитьТекущуюОбласть(ИмяЯчейки);
КонецПроцедуры

&НаКлиенте
//И в табличном документе "ТабДок" я перехожу к ячейке "R4C2"
//@ВТабличномДокументеЯПерехожуКЯчейке(Парам01,Парам02)
Процедура ВТабличномДокументеЯПерехожуКЯчейке(ИмяРеквизита,ИмяЯчейки) Экспорт
	УТабличногоДокументаСИменемЯПерехожуКЯчейке(ИмяРеквизита,ИмяЯчейки);
КонецПроцедуры


&НаКлиенте
//И в табличном документе "РеквизитТабличныйДокумент" ячейка с адресом "АдресЯчейки" равна "ЗначениеЯчейки"
//@ВТабличномДокументеЯчейкаСАдресомРавна(Парам01,Парам02,Парам03)
Процедура ВТабличномДокументеЯчейкаСАдресомРавна(ИмяРеквизита,Знач АдресЯчейки,Знач Значение) Экспорт
	АдресЯчейки = Ванесса.ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(АдресЯчейки);
	Значение    = Ванесса.ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(Значение);
	
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,Истина, Истина, Тип("ТестируемоеПолеФормы"));
	ТекстОбласти = ЭлементФормы.ПолучитьТекстОбласти(АдресЯчейки);
	
	Значение     = Ванесса.ПолучитьКорректоеЗначениеДляСравненияТекста(Значение);
	ТекстОбласти = Ванесса.ПолучитьКорректоеЗначениеДляСравненияТекста(ТекстОбласти);
	
	
	Если ТекстОбласти <> Значение Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что у табличного документа <%1> в ячейке с адресом <%2> будет значение <%3>, а получили <%4>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",АдресЯчейки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Значение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ТекстОбласти);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры




&НаКлиенте
//И     у табличного документа с именем "ТабДок" я ввожу текст "222"
//@УТабличногоДокументаСИменемЯВвожуТекст(Парам01,Парам02)
Процедура УТабличногоДокументаСИменемЯВвожуТекст(ИмяРеквизита,Текст) Экспорт
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,Истина, Истина, Тип("ТестируемоеПолеФормы"));
	ПолеРеквизит.НачатьРедактированиеТекущейОбласти();
	
	//ПолеРеквизит.ВвестиТекст(Текст);
	Ванесса.ВвестиВПолеТекст(ПолеРеквизит,Текст);
	ПолеРеквизит.ЗакончитьРедактированиеТекущейОбласти();
КонецПроцедуры

&НаКлиенте
//И в табличный документ с именем "ТабДок" я ввожу текст "222"
//@ВТабличныйДокументЯВвожуТекст(Парам01,Парам02)
Процедура ВТабличныйДокументЯВвожуТекст(ИмяРеквизита,Текст) Экспорт
	УТабличногоДокументаСИменемЯВвожуТекст(ИмяРеквизита,Текст);
КонецПроцедуры

&НаКлиенте
//И     у табличного документа с именем "РеквизитТабличныйДокумент" я делаю двойной клик на текущей ячейке
//@УТабличногоДокументаСИменемЯДелаюДвойнойКликНаТекущейЯчейке(Парам01)
Процедура УТабличногоДокументаСИменемЯДелаюДвойнойКликНаТекущейЯчейке(ИмяРеквизита) Экспорт
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,Истина, Истина, Тип("ТестируемоеПолеФормы"));
	ПолеРеквизит.НачатьРедактированиеТекущейОбласти();
КонецПроцедуры

&НаКлиенте
//И в табличном документе "РеквизитТабличныйДокумент" я делаю двойной клик на текущей ячейке
//@ВТабличномДокументеЯДелаюДвойнойКликНаТекущейЯчейке(Парам01)
Процедура ВТабличномДокументеЯДелаюДвойнойКликНаТекущейЯчейке(ИмяРеквизита) Экспорт
	УТабличногоДокументаСИменемЯДелаюДвойнойКликНаТекущейЯчейке(ИмяРеквизита);
КонецПроцедуры




&НаКлиенте
//И я меняю значение переключателя "Реквизит переключатель" на значение переменной "ЗначениеПереключателя"
//@ЯМеняюЗначениеПереключателяНаЗначениеПеременной(Парам01,Парам02)
Процедура ЯМеняюЗначениеПереключателяНаЗначениеПеременной(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	ЗначениеПеременной = "";
	Контекст.Свойство(ИмяПеременной, ЗначениеПеременной);
	Если ЗначениеПеременной = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> ранее не была сохранена");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ИскатьПоИмени Тогда
		Ванесса.Шаг("И я меняю значение переключателя с именем """ + ИмяПоля + """ на """ + ЗначениеПеременной + """");
	Иначе	
		Ванесса.Шаг("И я меняю значение переключателя """ + ИмяПоля + """ на """ + ЗначениеПеременной + """");
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И я меняю значение переключателя с именем "Реквизит переключатель" на значение переменной "ЗначениеПереключателя"
//@ЯМеняюЗначениеПереключателяСИменемНаЗначениеПеременной(Парам01,Парам02)
Процедура ЯМеняюЗначениеПереключателяСИменемНаЗначениеПеременной(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	ЯМеняюЗначениеПереключателяНаЗначениеПеременной(ИмяПоля,ИмяПеременной,Истина);
КонецПроцедуры

 





&НаКлиенте
//И я жду, что в таблице "ИмяТаблицы" количество строк будет "больше" 0 в течении 20 секунд
//@ЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТеченииСекунд(Парам01,Парам02,Парам03,Парам04)
Процедура ЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТеченииСекунд(ИмяТаблицы,ВидСравнения,КоличествоСтрок,КоличествоСекунд) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяТаблицыОбработкаОжидания       = ИмяТаблицы;
	ВидСравненияОбрабткаОжидания      = Ванесса.ПолучитьОператорПоТексту(ВидСравнения);
	КоличествоСтрокОбработкаОжидания  = КоличествоСтрок;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ОбработичкОжиданияЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТеченииСекунд",1,Ложь);
КонецПроцедуры

&НаКлиенте
//И я жду, что в таблице "ИмяТаблицы" количество строк будет "больше" 0 в течение 20 секунд
//@ЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)
Процедура ЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТечениеСекунд(ИмяТаблицы,ВидСравнения,КоличествоСтрок,КоличествоСекунд) Экспорт
	ЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТеченииСекунд(ИмяТаблицы,ВидСравнения,КоличествоСтрок,КоличествоСекунд);
КонецПроцедуры

&НаКлиенте
Процедура ОбработичкОжиданияЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТеченииСекунд()
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВызыватьИсключение",Ложь);
	ДопПараметры.Вставить("ПроверкаКоличестваСтрок",Истина);
	ДопПараметры.Вставить("ВидСравненияТаблицы",ВидСравненияОбрабткаОжидания);
	ДопПараметры.Вставить("ЗначениеСравнения",КоличествоСтрокОбработкаОжидания);
	
	Попытка
		МассивСтрок = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяТаблицыОбработкаОжидания,Истина,ДопПараметры);
	Исключение
		//для стабильности работы шага
		МассивСтрок = Новый Массив;
	КонецПопытки;
	
	Если МассивСтрок = Неопределено Тогда
		МассивСтрок = Новый Массив;
	КонецЕсли;
	
	Попытка
		Количество = МассивСтрок.Количество();
	Исключение
		ОтключитьОбработчикОжидания("ОбработичкОжиданияЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТеченииСекунд");
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог получить количество строк у таблицы <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицыОбработкаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	ЗначениеСравнения = Неопределено;
	Выражение = "ЗначениеСравнения = (МассивСтрок.Количество() " + ВидСравненияОбрабткаОжидания + " КоличествоСтрокОбработкаОжидания)";
	Выполнить(Выражение);
	
	Если ЗначениеСравнения Тогда
		ОтключитьОбработчикОжидания("ОбработичкОжиданияЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТеченииСекунд");
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат;
	КонецЕсли; 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания("ОбработичкОжиданияЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТеченииСекунд");
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд у таблицы <%2> количество строк %3 %4. Текущее количество строк <%5>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяТаблицыОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ВидСравненияОбрабткаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",КоличествоСтрокОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",МассивСтрок.Количество());
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
//И я жду, что в окне "ИмяОкна" в таблице "ИмяТаблицы" количество строк будет "больше" 0 в течении 20 секунд
//@ЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТеченииСекунд(Парам01,Парам02,Парам03,Парам04,Парам05)
Процедура ЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТеченииСекунд(ИмяОкна,ИмяТаблицы,ВидСравнения,КоличествоСтрок,КоличествоСекунд) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяОкнаОбработкаОжидания          = ИмяОкна;
	ИмяТаблицыОбработкаОжидания       = ИмяТаблицы;
	ВидСравненияОбрабткаОжидания      = Ванесса.ПолучитьОператорПоТексту(ВидСравнения);
	КоличествоСтрокОбработкаОжидания  = КоличествоСтрок;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ОбработичкОжиданияЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТеченииСекунд",1,Ложь);
КонецПроцедуры

&НаКлиенте
//И я жду, что в окне "ИмяОкна" в таблице "ИмяТаблицы" количество строк будет "больше" 0 в течение 20 секунд
//@ЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТечениеСекунд(Парам01,Парам02,Парам03,Парам04,Парам05)
Процедура ЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТечениеСекунд(ИмяОкна,ИмяТаблицы,ВидСравнения,КоличествоСтрок,КоличествоСекунд) Экспорт
	ЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТеченииСекунд(ИмяОкна,ИмяТаблицы,ВидСравнения,КоличествоСтрок,КоличествоСекунд);
КонецПроцедуры

&НаКлиенте
Процедура ОбработичкОжиданияЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТеченииСекунд()
	Таблица = Неопределено;
	Попытка
		НужноеОкно = КонтекстСохраняемый.ТестовоеПриложение.НайтиОБъект(Тип("ТестируемоеОкноКлиентскогоПриложения"),ИмяОкнаОбработкаОжидания);
		
		Если НужноеОкно = Неопределено Тогда
			ОтключитьОбработчикОжидания("ОбработичкОжиданияЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТеченииСекунд");
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не нашли окно с заголовком <%1>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяОкнаОбработкаОжидания);
			Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Таблица = НужноеОкно.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"), , ИмяТаблицыОбработкаОжидания);
	Исключение
		ОтключитьОбработчикОжидания("ОбработичкОжиданияЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТеченииСекунд");
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Если Таблица = Неопределено Тогда
		ОтключитьОбработчикОжидания("ОбработичкОжиданияЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТеченииСекунд");
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не нашли таблицу с именем <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицыОбработкаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(Таблица);
	Если МассивСтрок = Неопределено Тогда
		МассивСтрок = Новый Массив;
	КонецЕсли;
	
	
	Попытка
		Количество = МассивСтрок.Количество();
	Исключение
		ОтключитьОбработчикОжидания("ОбработичкОжиданияЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТеченииСекунд");
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог получить количество строк у таблицы <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицыОбработкаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	
	ЗначениеСравнения = Неопределено;
	Выражение = "ЗначениеСравнения = (МассивСтрок.Количество() " + ВидСравненияОбрабткаОжидания + " КоличествоСтрокОбработкаОжидания)";
	Выполнить(Выражение);
	
	Если ЗначениеСравнения Тогда
		ОтключитьОбработчикОжидания("ОбработичкОжиданияЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТеченииСекунд");
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат;
	КонецЕсли; 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания("ОбработичкОжиданияЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТеченииСекунд");
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд у таблицы <%2> количество строк %3 %4. Текущее количество строк <%5>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяТаблицыОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ВидСравненияОбрабткаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",КоличествоСтрокОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",МассивСтрок.Количество());
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//И я вывожу значение переменной "ВариантЗаполненияСостава"
//@ЯВывожуЗначениеПеременной(Парам01)
Процедура ЯВывожуЗначениеПеременной(Знач ИмяПеременной) Экспорт
	ИмяПеременной = СтрЗаменить(ИмяПеременной,"$","");
	Если НЕ Контекст.Свойство(ИмяПеременной) Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("%1 = %2");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Контекст[ИмяПеременной]);
	Сообщить(ТекстСообщения);
КонецПроцедуры





&НаКлиенте
//И поле "РеквизитЧисло" равно переменной "ЗначениеРеквизитЧисло"
//@ПолеРавноПеременной(Парам01,Парам02)
Процедура ПолеРавноПеременной(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	ЗначениеПоля = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяПоля,ИскатьПоИмени);
	
	ЗначениеВКонтексте = Контекст[ИмяПеременной];
	
	Если ЗначениеПоля <> ЗначениеВКонтексте Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что поле <%1> будет равно переменной <%2>. Значение переменной <%3>. ЗначениеПоля <%4>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПоля);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПеременной);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ЗначениеВКонтексте);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ЗначениеПоля);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И поле с именем "РеквизитЧисло" равно переменной "ЗначениеРеквизитЧисло"
//@ПолеСИменемРавноПеременной(Парам01,Парам02)
Процедура ПолеСИменемРавноПеременной(ИмяПоля,ИмяПеременной) Экспорт
	ПолеРавноПеременной(ИмяПоля,ИмяПеременной,Истина);
КонецПроцедуры





&НаКлиенте
//И поле таблицы "ТабличнаяЧасть1" "РеквизитЧисло" равно переменной "ЗначениеРеквизитЧислоТаблица"
//@ПолеТаблицыРавноПеременной(Парам01,Парам02,Парам03)
Процедура ПолеТаблицыРавноПеременной(ИмяТЧ,ИмяПоля,ИмяПеременной) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	
	ЗначениеПоля = ТЧ.ПолучитьТекстЯчейки(ИмяПоля);
	ЗначениеВКонтексте = Контекст[ИмяПеременной];
	
	Если ЗначениеПоля <> ЗначениеВКонтексте Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, чтов таблице <%1> поле <%2> будет равно переменной <%3>. Значение переменной <%4>. ЗначениеПоля <%5>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоля);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ИмяПеременной);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ЗначениеВКонтексте);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",ЗначениеПоля);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры






&НаКлиенте
//Тогда переменная "ЗначениеВариантЗаполненияСостава" имеет значение "Отбор"
//@ПеременнаяИмеетЗначение(Парам01,Парам02)
Процедура ПеременнаяИмеетЗначение(ИмяПеременной,Значение) Экспорт
	Если НЕ Контекст.Свойство(ИмяПеременной) Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ТекЗначение = Контекст[ИмяПеременной];
	Если ТекЗначение <> Значение Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что переменная <%1> будет равна <%2>. Текущее значение <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Значение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ТекЗначение);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры





&НаСервере
Функция ПолучитьРасхожденияТД(Макет, ТабПарам,ТипСравнения,ДопПараметры)
	//Макет = Новый ТабличныйДокумент;
	//Макет.Прочитать(ФайлМакета.ОткрытьПотокДляЧтения());
	
	ТаблицаПараметровМакета = Новый ТаблицаЗначений;
	ТаблицаПараметровМакета.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ТаблицаПараметровМакета.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Область Из Макет.Области Цикл
		Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			НоваяСтрока          = ТаблицаПараметровМакета.Добавить();
			НоваяСтрока.Имя      = Область.Имя;
			НоваяСтрока.Значение = СтрЗаменить(Область.Текст, Символы.НПП, " ");
		КонецЕсли;
	КонецЦикла;
	ТаблицаПараметровМакета.Индексы.Добавить("Имя");
	
	МассивРасхождений = Новый Массив;
	Для Каждого СтрокаОжидаемая Из ТабПарам Цикл
		ИмяПараметра = СтрокаОжидаемая.Кол1;
		ЗначениеПараметра = СтрокаОжидаемая.Кол2;
		
		СтрокаТаблицыМакета = ТаблицаПараметровМакета.Найти(ИмяПараметра, "Имя");
		Если СтрокаТаблицыМакета = Неопределено Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("Именованная область %1 не найдена;",ДопПараметры.ТекстСообщенийПользователю);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПараметра); 
			МассивРасхождений.Добавить(ТекстСообщения);
		ИначеЕсли ТипСравнения = "точный" Тогда
			Если СтрокаТаблицыМакета.Значение <> ЗначениеПараметра Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("Значение параметра %1: ожидали <%2>, получили <%3>;",ДопПараметры.ТекстСообщенийПользователю);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПараметра); 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ЗначениеПараметра); 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",СтрокаТаблицыМакета.Значение); 
				МассивРасхождений.Добавить(ТекстСообщения);
			КонецЕсли;	 
		ИначеЕсли ТипСравнения = "подстрока" Тогда
			Если Найти(СтрокаТаблицыМакета.Значение,ЗначениеПараметра) = 0 Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("Значение параметра %1: ожидали подстроку <%2>, в <%3>;",ДопПараметры.ТекстСообщенийПользователю);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПараметра); 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ЗначениеПараметра); 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",СтрокаТаблицыМакета.Значение); 
				МассивРасхождений.Добавить(ТекстСообщения);
			КонецЕсли;	 
		Иначе
			ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("Не ожиданное значение у переменной ТипСравнения: <%1>",ДопПараметры.ТекстСообщенийПользователю);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТипСравнения);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРасхождений;
КонецФункции



&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьВОднострочныйТекст(ИсходныйТекст)

	ПолучившийсяТекст = ИсходныйТекст;
	
	Если СтрЧислоСтрок(ПолучившийсяТекст) > 1 Тогда
		ПолучившийсяТекст = СтрЗаменить(ПолучившийсяТекст, Символы.ВК + Символы.ПС, " ");
	КонецЕсли;
	
	Возврат ПолучившийсяТекст;

КонецФункции 

&НаСервереБезКонтекста
Функция ПараметрыИзФайлаМакета(Знач Макет)
	ПараметрыМакета = Новый Соответствие;
	
	Для Каждого Область Из Макет.Области Цикл
		Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			ИмяПараметра = Область.Имя;
			ЗначениеПараметра = ПреобразоватьВОднострочныйТекст(СтрЗаменить(Область.Текст, Символы.НПП, " "));
			
			ПараметрыМакета.Вставить(ИмяПараметра, ЗначениеПараметра);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыМакета;

КонецФункции

&НаКлиенте
Функция ПолучитьРасхожденияТДRegExp(Макет, ТабПарам)
	
	ПараметрыМакета = ПараметрыИзФайлаМакета(Макет);
	
	ЦветЯчейки = WebЦвета.Аквамарин;
	
	МассивРасхождений = Новый Массив;
	Для Каждого СтрокаОжидаемая Из ТабПарам Цикл
		ИмяПараметра = СтрокаОжидаемая.Кол1;
		ЗначениеПараметра = СтрЗаменить(СтрокаОжидаемая.Кол2, Символы.НПП, " ");
		
		ЗначениеПараметраМакета = ПараметрыМакета[ИмяПараметра];
		Если ЗначениеПараметраМакета = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("%1 не найден;");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПараметра); 
			Макет.Область(СтрокаОжидаемая.Кол1).ЦветФона = ЦветЯчейки;
			МассивРасхождений.Добавить(ТекстСообщения);
		ИначеЕсли Не Ванесса.СтрокаСоответствуетШаблону(ЗначениеПараметраМакета, ЗначениеПараметра) Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Значение параметра %1: ожидали <%2>, получили <%3>;");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПараметра); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ЗначениеПараметра); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ЗначениеПараметраМакета); 
			Макет.Область(СтрокаОжидаемая.Кол1).ЦветФона = ЦветЯчейки;
			МассивРасхождений.Добавить(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРасхождений;

КонецФункции


&НаКлиенте
//И Табличный документ "ИмяТабДок" содержит в себе значения
//@ТабличныйДокументСодержитЗначенияОбластей(Парам01,ТабПарам)
Процедура ТабличныйДокументСодержитЗначенияОбластей(ИмяЭлементаФормы,ТабПарам) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ПолучатьИменаОбластей",Истина);
	
	ЭлементТД = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлементаФормы,Истина, Истина, Тип("ТестируемоеПолеФормы"));
	ТабДок    = Ванесса.ПолучитьТабличныйДокументTestClient(ЭлементТД,ДопПараметры);	
	
	ДопПараметры.Вставить("ТекстСообщенийПользователю",Ванесса.ДанныеПереводаСообщенийПользователю());
	МассивРасхождений = ПолучитьРасхожденияТД(ТабДок, ТабПарам,"точный",ДопПараметры);
	
	Если МассивРасхождений.Количество() > 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ошибка при поиске значений в макете %1:");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлементаФормы); 
		МассивРасхождений.Вставить(0, ТекстСообщения);
		ТекстСообщения = Вычислить("СтрСоединить(МассивРасхождений, Символы.ПС)");
		Ванесса.ПрикрепитьМакетКСценарию(ТабДок,"ТекущееЗначениеТаблицы");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//И Табличный документ "ИмяТабДок" содержит строки в областях
//@ТабличныйДокументСодержитСтрокиВОбластях(Парам01,ТабПарам)
Процедура ТабличныйДокументСодержитСтрокиВОбластях(ИмяЭлементаФормы,ТабПарам) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ПолучатьИменаОбластей",Истина);
	
	ЭлементТД = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлементаФормы,Истина, Истина, Тип("ТестируемоеПолеФормы"));
	ТабДок    = Ванесса.ПолучитьТабличныйДокументTestClient(ЭлементТД,ДопПараметры);	
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекстСообщенийПользователю",Ванесса.ДанныеПереводаСообщенийПользователю());
	МассивРасхождений = ПолучитьРасхожденияТД(ТабДок, ТабПарам,"подстрока",ДопПараметры);
	
	Если МассивРасхождений.Количество() > 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ошибка при поиске значений в макете %1:");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлементаФормы); 
		МассивРасхождений.Вставить(0, ТекстСообщения);
		ТекстСообщения = Вычислить("СтрСоединить(МассивРасхождений, Символы.ПС)");
		Ванесса.ПрикрепитьМакетКСценарию(ТабДок,"ТекущееЗначениеТаблицы");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезконтекста
Процедура ПроверитьВхождениеСтрокВТабличныйДокументСервер(ТабДок,МассивДляПоиска,ЗначенияВходят,ДопПараметры)
	//ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");
	//ФайлМакета.Записать(ИмяВременногоФайла);
	//
	//
	//ТабДок = Новый ТабличныйДокумент;
	//ТабДок.Прочитать(ИмяВременногоФайла);
	
	МассивОшибок           = Новый Массив;
	МассивНенайденныхСтрок = Новый Массив;
	
	
	Для Каждого СтрокаПоиска Из МассивДляПоиска Цикл
		Область = ТабДок.НайтиТекст(СтрокаПоиска);
		
		Если Область = Неопределено  и ЗначенияВходят Тогда
			МассивОшибок.Добавить(СтрокаПоиска);
		КонецЕсли;	 
		
		Если  НЕ ЗначенияВходят Тогда
			Если Область = Неопределено  Тогда
				МассивНенайденныхСтрок.Добавить(СтрокаПоиска);
			Иначе	
				МассивОшибок.Добавить(СтрокаПоиска);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	
	
	Если ЗначенияВходят Тогда
		Если МассивОшибок.Количество() > 0 Тогда
			СтрокаИсключения = "";
			Для Каждого Элем Из МассивОшибок Цикл
				СтрокаИсключения = СтрокаИсключения + Элем + ";";
			КонецЦикла;	
			ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("Табличный документ не содержит нужные строки <%1>",ДопПараметры.ТекстСообщенийПользователю);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаИсключения);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	Иначе	
		Если МассивНенайденныхСтрок.Количество() <>  МассивДляПоиска.Количество() Тогда  
			СтрокаИсключения = "";
			Для Каждого Элем Из МассивОшибок Цикл
				СтрокаИсключения = СтрокаИсключения + Элем + ";";
			КонецЦикла;	
			ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("Табличный документ содержит ненужные строки <%1>",ДопПараметры.ТекстСообщенийПользователю);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаИсключения);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	//УдалитьФайлы(ИмяВременногоФайла);
КонецПроцедуры

&НаКлиенте
//И табличный документ формы с именем "РеквизитТабличныйДокумент" содержит элементы:
//@ТабличныйДокументСодержитЗначения(Парам01,ТабПарам)
Процедура ТабличныйДокументСодержитЗначения(ИмяЭлементаФормы,ТабПарам,ЗначенияВходят = Истина) Экспорт
	ИмяВременногоФайла = "";
	ТабДок = ТабличныйДокументИзTestClient(ИмяВременногоФайла,ИмяЭлементаФормы);
	
	
	МассивДляПоиска = Новый Массив;
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		МассивДляПоиска.Добавить(СтрокаТабПарам.Кол1);
	КонецЦикла;	
	
ДопПараметры = Новый Структура;
ДопПараметры.Вставить("ТекстСообщенийПользователю",Ванесса.ДанныеПереводаСообщенийПользователю());
	ПроверитьВхождениеСтрокВТабличныйДокументСервер(ТабДок,МассивДляПоиска,ЗначенияВходят,ДопПараметры);
	
	Если ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		Ванесса.УдалитьФайлыКомандаСистемы(ИмяВременногоФайла);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И табличный документ формы с именем "РеквизитТабличныйДокумент" не содержит элементы:
//@ТабличныйДокументНеСодержитЗначения(Парам01,ТабПарам)
Процедура ТабличныйДокументНеСодержитЗначения(ИмяЭлементаФормы,ТабПарам) Экспорт
	ТабличныйДокументСодержитЗначения(ИмяЭлементаФормы,ТабПарам,Ложь);
КонецПроцедуры

&НаКлиенте
//И Табличный документ "РеквизитТабличныйДокумент" содержит в себе значения по шаблону
//@ТабличныйДокументСодержитЗначенияОбластейПоШаблону(Парам01,ТабПарам)
Процедура ТабличныйДокументСодержитЗначенияОбластейПоШаблону(ИмяЭлементаФормы,ТабПарам) Экспорт
	ЭлементТД = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлементаФормы,Истина, Истина, Тип("ТестируемоеПолеФормы"));
	Если ЭлементТД = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент формы <%1> не найден.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлементаФормы);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ПолучатьИменаОбластей",Истина);
	ТабДок    = Ванесса.ПолучитьТабличныйДокументTestClient(ЭлементТД,ДопПараметры);	
	
	МассивРасхождений = ПолучитьРасхожденияТДRegExp(ТабДок, ТабПарам);
	
	Если МассивРасхождений.Количество() > 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ошибка при поиске значений в макете %1:");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлементаФормы); 
		МассивРасхождений.Вставить(0, ТекстСообщения);
		ТекстСообщения = Вычислить("СтрСоединить(МассивРасхождений, Символы.ПС)");
		Ванесса.ПрикрепитьМакетКСценарию(ТабДок,"ТекущееЗначениеТаблицы");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры





&НаСервереБезконтекста
Процедура ПолучитьРядКолонкуИзИмениЯчейки(Стр,Ряд,Колонка)
	Поз     = Найти(Стр,"C");
	Ряд     = Число(Сред(Лев(Стр,Поз-1),2));
	Колонка = Число(Сред(Стр,Поз+1));
КонецПроцедуры

&НаСервереБезконтекста
Процедура ПроверитьЗначениеКолонкиНаЗначениеСтроки(ТабДок,ИмяКолонки,Значение,ПроверятьРавенство,ДопПараметры)
	//ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");
	//ФайлТабличногоДокумента.Записать(ИмяВременногоФайла);
	//
	//ТабДок = Новый ТабличныйДокумент;
	//ТабДок.Прочитать(ИмяВременногоФайла);
	
	ОбластьКолонка = ТабДок.НайтиТекст(ИмяКолонки);
	Если ОбластьКолонка = Неопределено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("В табличном документе колонка <%1> не найдена.",ДопПараметры.ТекстСообщенийПользователю);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКолонки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Ряд     = -1;
	Колонка =  -1;
	ПолучитьРядКолонкуИзИмениЯчейки(ОбластьКолонка.Имя,Ряд,Колонка);
	
	Для Ккк = Ряд+1 По ТабДок.ВысотаТаблицы Цикл
		ТекстОбласти = ТабДок.Область(Ккк,Колонка,Ккк,Колонка).Текст;
		Если ПроверятьРавенство Тогда
			Если ТекстОбласти <> Значение Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("В табличном документе в колонке <%1> ожидали значение <%2>, а нашли <%3>. Ряд <%4>, колонка <%5>",ДопПараметры.ТекстСообщенийПользователю);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКолонки);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Значение);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ТекстОбласти);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",Ккк);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",Колонка);
				ВызватьИсключение ПолучитьТекстСообщенияПользователюСервер(ТекстСообщения,ДопПараметры.ТекстСообщенийПользователю);
			КонецЕсли;	 
		Иначе	
			Если ТекстОбласти = Значение Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("В табличном документе в колонке <%1> ожидали, что не будет значения <%2>, а нашли <%3>. Ряд <%4>, колонка <%5>",ДопПараметры.ТекстСообщенийПользователю);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКолонки);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Значение);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ТекстОбласти);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",Ккк);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",Колонка);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;	
	
	//УдалитьФайлы(ИмяВременногоФайла);
КонецПроцедуры


&НаСервереБезконтекста
Функция ПолучитьЧислоИзТекстаОбласти(Знач Стр)
	Стр = СтрЗаменить(Стр,Символы.НПП,"");
	Стр = СтрЗаменить(Стр,",",".");
	
	Возврат Число(Стр);
КонецФункции	

&НаСервереБезконтекста
Процедура ПроверитьЗначениеКолонкиНаЗначениеУсловия(ТабДок,ИмяКолонки,ВидСравнения,Значение,ДопПараметры);
	ОбластьКолонка = ТабДок.НайтиТекст(ИмяКолонки);
	Если ОбластьКолонка = Неопределено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("В табличном документе колонка <%1> не найдена.",ДопПараметры.ТекстСообщенийПользователю);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКолонки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Ряд     = -1;
	Колонка =  -1;
	ПолучитьРядКолонкуИзИмениЯчейки(ОбластьКолонка.Имя,Ряд,Колонка);
	
	Для Ккк = Ряд+1 По ТабДок.ВысотаТаблицы Цикл
		ТекстОбласти = ТабДок.Область(Ккк,Колонка,Ккк,Колонка).Текст;
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			ТекстОбласти = ПолучитьЧислоИзТекстаОбласти(ТекстОбласти);
		КонецЕсли;	 
		
		ЗначениеСравнения = Неопределено;
		Выражение = "ЗначениеСравнения = (ТекстОбласти " + ВидСравнения + " Значение)";
		Выполнить(Выражение);
		
		Если НЕ ЗначениеСравнения Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("В табличном документе в колонке <%1> значение не соответствует условию 'Значение в колонке %2 %3'. Текущее значение колонки <%4>. Ряд <%5>, колонка <%6>",ДопПараметры.ТекстСообщенийПользователю);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКолонки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ВидСравнения);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Значение);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ТекстОбласти);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",Ккк);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%6",Колонка);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
	КонецЦикла;	
КонецПроцедуры




&НаКлиенте
//И в табличном документе "РеквизитТабличныйДокумент" значения в колонке "ИмяКолонки" равно значению ""
//@ВТабличномДокументеЗначенияВКолонкеРавноЗначению(Парам01,Парам02,Парам03)
Процедура ВТабличномДокументеЗначенияВКолонкеРавноЗначению(ИмяЭлементаФормы,ИмяКолонки,Значение,ПроверятьРавенство = Истина) Экспорт
	ИмяВременногоФайла = "";
	ТабДок = ТабличныйДокументИзTestClient(ИмяВременногоФайла,ИмяЭлементаФормы);
	
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекстСообщенийПользователю",Ванесса.ДанныеПереводаСообщенийПользователю());
	
	Попытка
		ПроверитьЗначениеКолонкиНаЗначениеСтроки(ТабДок,ИмяКолонки,Значение,ПроверятьРавенство,ДопПараметры);
	Исключение
		Ванесса.ПрикрепитьМакетКСценарию(ТабДок,"ТекущееЗначениеОтчета");
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;

	
	Если ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		Ванесса.УдалитьФайлыКомандаСистемы(ИмяВременногоФайла);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И в табличном документе "РеквизитТабличныйДокумент" значения в колонке "ИмяКолонки" неравно значению ""
//@ВТабличномДокументеЗначенияВКолонкеНеравноЗначению(Парам01,Парам02,Парам03)
Процедура ВТабличномДокументеЗначенияВКолонкеНеравноЗначению(ИмяЭлементаФормы,ИмяКолонки,Значение) Экспорт
	ВТабличномДокументеЗначенияВКолонкеРавноЗначению(ИмяЭлементаФормы,ИмяКолонки,Значение,Ложь);
КонецПроцедуры

&НаКлиенте
//И в табличном документе "РеквизитТабличныйДокумент" значения в колонке "ИмяКолонки" соответствуют условию  "равно"  10
//@ВТабличномДокументеЗначенияВКолонкеСоответствуютУсловию(Парам01,Парам02,Парам03,Парам04)
Процедура ВТабличномДокументеЗначенияВКолонкеСоответствуютУсловию(ИмяЭлементаФормы,ИмяКолонки,ВидСравнения,Значение) Экспорт
	ИмяВременногоФайла = "";
	ТабДок = ТабличныйДокументИзTestClient(ИмяВременногоФайла,ИмяЭлементаФормы);
	
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекстСообщенийПользователю",Ванесса.ДанныеПереводаСообщенийПользователю());
	
	
	НужныйВидСравнения = Ванесса.ПолучитьОператорПоТексту(ВидСравнения);
	Попытка
		ПроверитьЗначениеКолонкиНаЗначениеУсловия(ТабДок,ИмяКолонки,НужныйВидСравнения,Значение,ДопПараметры);
	Исключение
		Ванесса.ПрикрепитьМакетКСценарию(ТабДок,"ТекущееЗначениеОтчета");
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;

	
	Если ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		Ванесса.УдалитьФайлыКомандаСистемы(ИмяВременногоФайла);
	КонецЕсли;	 
КонецПроцедуры




&НаКлиенте
//И в поле "СгенерированныйXML" я ввожу текст из макета "Xml1"
//@ВПолеЯВвожуТекстИзМакета(Парам01,Парам02)
Процедура ВПолеЯВвожуТекстИзМакета(ИмяПоля,ИмяМакета) Экспорт
	Макет = ПолучитьМакетИзОбработкиИлиИзКаталогаПроекта(ИмяМакета);
	Текст = Макет.ПолучитьТекст();
	
	ВОткрытойФормеВПолеЯВвожуТекст(ИмяПоля,Текст,Ложь);
КонецПроцедуры



&НаКлиенте
Процедура ОбработичкОжиданияЯЖдуЧтоПолеПерестанетБытьПустымВТеченииСекунд()
	ИмяОбработчикаОжидания = "ОбработичкОжиданияЯЖдуЧтоПолеПерестанетБытьПустымВТеченииСекунд";
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВызыватьИсключение",Ложь);
	
	ТекущееЗначение = Неопределено;
	Попытка
		ТекущееЗначение = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяПоляОбработкаОжидания,ИскатьПоИмениОбрабткаОжидания,ДопПараметры);
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ТекущееЗначение) Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат;
	КонецЕсли; 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд, что поле <%2> будет заполненным.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоляОбработкаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//И я жду, что поле "СгенерированныйСценарий" перестанет быть пустым в течении 30 секунд
//@ЯЖдуЧтоПолеПерестанетБытьПустымВТеченииСекунд(Парам01,Парам02)
Процедура ЯЖдуЧтоПолеПерестанетБытьПустымВТеченииСекунд(ИмяПоля,КоличествоСекунд,ИскатьПоИмени = Ложь) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВызыватьИсключение",Ложь);
	
	ТекущееЗначение = Неопределено;
	Попытка
		ТекущееЗначение = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяПоляОбработкаОжидания,ИскатьПоИмениОбрабткаОжидания,ДопПараметры);
		Если ЗначениеЗаполнено(ТекущееЗначение) Тогда
			//значит получилось определить значение поля до таймера
			Возврат;
		КонецЕсли; 
	Исключение
		ТекущееЗначение = Неопределено;
	КонецПопытки;
	
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = ИмяПоля;
	ИскатьПоИмениОбрабткаОжидания     = ИскатьПоИмени;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ОбработичкОжиданияЯЖдуЧтоПолеПерестанетБытьПустымВТеченииСекунд",1,Ложь);
КонецПроцедуры

&НаКлиенте
//И я жду, что поле "СгенерированныйСценарий" перестанет быть пустым в течение 30 секунд
//@ЯЖдуЧтоПолеПерестанетБытьПустымВТечениеСекунд(Парам01,Парам02)
Процедура ЯЖдуЧтоПолеПерестанетБытьПустымВТечениеСекунд(ИмяПоля,КоличествоСекунд,ИскатьПоИмени = Ложь) Экспорт
	ЯЖдуЧтоПолеПерестанетБытьПустымВТеченииСекунд(ИмяПоля,КоличествоСекунд,ИскатьПоИмени);
КонецПроцедуры

&НаКлиенте
//И я жду, что поле с именем "СгенерированныйСценарий" перестанет быть пустым в течение 30 секунд
//@ЯЖдуЧтоПолеСИменемПерестанетБытьПустымВТечениеСекунд(Парам01,Парам02)
Процедура ЯЖдуЧтоПолеСИменемПерестанетБытьПустымВТечениеСекунд(ИмяПоля,КоличествоСекунд) Экспорт
	ЯЖдуЧтоПолеПерестанетБытьПустымВТеченииСекунд(ИмяПоля,КоличествоСекунд,Истина);
КонецПроцедуры


&НаКлиенте
//И значение поля "СгенерированныйСценарий" равно значению из макета "Xml_1En"
//@ЗначениеПоляРавноЗначениюИзМакета(Парам01,Парам02)
Процедура ЗначениеПоляРавноЗначениюИзМакета(ИмяПоля,ИмяМакета,ИскатьПоИмени = Ложь) Экспорт
	ТекущееЗначение = СокрЛП(Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяПоля,ИскатьПоИмени));
	Макет = ПолучитьМакетИзОбработкиИлиИзКаталогаПроекта(ИмяМакета);
	Текст = СокрЛП(Макет.ПолучитьТекст());
	Если НРег(ТекущееЗначение) <> НРег(Текст) Тогда
		ТекстИсключения = "Ожидали что значение поля <" + ИмяПоля + "> будет равно содержимому макета <" + ИмяМакета + ">.";
		ТекстИсключения = ТекстИсключения + Символы.ПС + "Значение поля=" + Символы.ПС + ТекущееЗначение + Символы.ПС + "Значение макета=" + Символы.ПС + Текст;
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;	 
	
КонецПроцедуры




&НаКлиенте
//И у группы страниц "ГруппаСтраниц" текущая страница "ТекущаяСтраница"
//@УГруппыСтраницТекущаяСтраница(Парам01,Парам02)
Процедура УГруппыСтраницТекущаяСтраница(ГруппаСтраниц,ТекущаяСтраница) Экспорт
	ТипПоля      = Тип("ТестируемаяГруппаФормы");
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ГруппаСтраниц,Истина, Истина, ТипПоля);
	Страница     = ПолеРеквизит.ПолучитьТекущуюСтраницу();
	
	Если НРег(Страница.Имя) <> НРег(ТекущаяСтраница) Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что у группы <%1> текущей страницей будет <%2>, а оказалась <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ГруппаСтраниц);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТекущаяСтраница);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Страница.Имя);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры





&НаКлиенте
Процедура ОбработичкОжиданияЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТеченииСекунд()
	ИмяОбработчикаОжидания = "ОбработичкОжиданияЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТеченииСекунд";
	
	ТекущееЗначение = Неопределено;
	ТипПоля         = Тип("ТестируемаяГруппаФормы");
	Попытка
		ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоляОбработкаОжидания,Истина, Истина, ТипПоля);
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Страница = Неопределено;
	Попытка
		Страница = ПолеРеквизит.ПолучитьТекущуюСтраницу();
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Если НРег(Страница.Имя) = НРег(ТекущаяСтраницаОбработкаОжидания) Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат;
	КонецЕсли;	 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что у группы <%1> текущей страницей будет <%2>, а оказалась <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПоляОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТекущаяСтраницаОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Страница.Имя);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//И я жду, что у группы страниц ""ГруппаСтраниц"" текущей страницей станет ""ИмяСтраницы"" в течении 20 секунд
//@ЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТеченииСекунд(Парам01,Парам02,Парам03)
Процедура ЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТеченииСекунд(ГруппаСтраниц,ТекущаяСтраница,КоличествоСекунд) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = ГруппаСтраниц;
	ИскатьПоИмениОбрабткаОжидания     = Истина;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ТекущаяСтраницаОбработкаОжидания  = ТекущаяСтраница;
	ПодключитьОбработчикОжидания("ОбработичкОжиданияЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТеченииСекунд",1,Ложь);
КонецПроцедуры

&НаКлиенте
//И я жду, что у группы страниц ""ГруппаСтраниц"" текущей страницей станет ""ИмяСтраницы"" в течение 20 секунд
//@ЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТечениеСекунд(Парам01,Парам02,Парам03)
Процедура ЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТечениеСекунд(ГруппаСтраниц,ТекущаяСтраница,КоличествоСекунд) Экспорт
	ЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТеченииСекунд(ГруппаСтраниц,ТекущаяСтраница,КоличествоСекунд);
КонецПроцедуры


&НаКлиенте
Функция ТабличныйДокументИзTestClient(ИмяВременногоФайла,ИмяЭлементаФормы)
	ЭлементТД = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлементаФормы,Истина, Истина, Тип("ТестируемоеПолеФормы"));
	Возврат Ванесса.ПолучитьТабличныйДокументTestClient(ЭлементТД);
КонецФункции	


 
&НаКлиенте
//Затем я буду работать с таблицей "ИмяТаблицы"
//@ЯБудуРаботатьСТаблицей(Парам01)
Процедура ЯБудуРаботатьСТаблицей(ИмяТаблицы) Экспорт
	Ванесса.ОчиститьКешАктивнойТаблицыTestClient();
	Таблица = НайтиТЧПоИмени(ИмяТаблицы);
	Ванесса.СохранитьВКешТаблицуTestClient(ИмяТаблицы,Таблица);
КонецПроцедуры



&НаКлиенте
//И в поле "Реквизит число" я увеличиваю значение
//@ВПолеЯУвеличиваюЗначение(Парам01)
Процедура ВПолеЯУвеличиваюЗначение(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"));
	ПолеРеквизит.УвеличитьЗначение();
КонецПроцедуры

&НаКлиенте
//И в поле с именем "Реквизит число" я увеличиваю значение
//@ВПолеСИменемЯУвеличиваюЗначение(Парам01)
Процедура ВПолеСИменемЯУвеличиваюЗначение(ИмяРеквизита) Экспорт
	ВПолеЯУвеличиваюЗначение(ИмяРеквизита,Истина);
КонецПроцедуры

&НаКлиенте
//И в поле "Реквизит число" я уменьшаю значение
//@ВПолеЯУменьшаюЗначение(Парам01)
Процедура ВПолеЯУменьшаюЗначение(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"));
	ПолеРеквизит.УменьшитьЗначение();
КонецПроцедуры

&НаКлиенте
//И в поле с именем "Реквизит число" я уменьшаю значение
//@ВПолеСИменемЯУменьшаюЗначение(Парам01)
Процедура ВПолеСИменемЯУменьшаюЗначение(ИмяРеквизита) Экспорт
	ВПолеЯУменьшаюЗначение(ИмяРеквизита,Истина);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" в поле "Реквизит число" я увеличиваю значение
//@ВТаблицеВПолеЯУвеличиваюЗначение(Парам01,Парам02)
Процедура ВТаблицеВПолеЯУвеличиваюЗначение(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	Таблица = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Таблица.НайтиОбъект(Тип("ТестируемоеПолеФормы"), ,ИмяРеквизита);
	Иначе	
		ПолеРеквизит = Таблица.НайтиОбъект(Тип("ТестируемоеПолеФормы"), ИмяРеквизита);
	КонецЕсли;	
	
	Если ПолеРеквизит = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Реквизит <%1> не найден.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ПолеРеквизит.УвеличитьЗначение();
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" в поле с именем "РеквизитЧисло" я увеличиваю значение
//@ВТаблицеВПолеСИменемЯУвеличиваюЗначение(Парам01,Парам02)
Процедура ВТаблицеВПолеСИменемЯУвеличиваюЗначение(ИмяТЧ,ИмяРеквизита) Экспорт
	ВТаблицеВПолеЯУвеличиваюЗначение(ИмяТЧ,ИмяРеквизита,Истина);
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" в поле "Реквизит число" я уменьшаю значение
//@ВТаблицеВПолеЯУменьшаюЗначение(Парам01,Парам02)
Процедура ВТаблицеВПолеЯУменьшаюЗначение(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	Таблица = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Таблица.НайтиОбъект(Тип("ТестируемоеПолеФормы"), ,ИмяРеквизита);
	Иначе	
		ПолеРеквизит = Таблица.НайтиОбъект(Тип("ТестируемоеПолеФормы"), ИмяРеквизита);
	КонецЕсли;	
	
	Если ПолеРеквизит = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Реквизит <%1> не найден.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ПолеРеквизит.УменьшитьЗначение();
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" в поле с именем РеквизитЧисло" я уменьшаю значение
//@ВТаблицеВПолеСИменемЯУменьшаюЗначение(Парам01,Парам02)
Процедура ВТаблицеВПолеСИменемЯУменьшаюЗначение(ИмяТЧ,ИмяРеквизита) Экспорт
	ВТаблицеВПолеЯУменьшаюЗначение(ИмяТЧ,ИмяРеквизита,Истина);
КонецПроцедуры





&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я перехожу к следующей ячейке
//@ВТаблицеЯПерехожуКСледующейЯчейке(Парам01)
Процедура ВТаблицеЯПерехожуКСледующейЯчейке(ИмяТЧ) Экспорт
	Таблица = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	Таблица.ПерейтиКСледующемуЭлементу();
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я перехожу к предыдущей ячейке
//@ВТаблицеЯПерехожуКПредыдущейЯчейке(Парам01)
Процедура ВТаблицеЯПерехожуКПредыдущейЯчейке(ИмяТЧ) Экспорт
	Таблица = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	Таблица.ПерейтиКПредыдущемуЭлементу();
КонецПроцедуры



&НаКлиенте
//И в меню формы я выбираю "ИмяПунктаМеню"
//@ВМенюФормыЯВыбираю(Парам01)
Процедура ВМенюФормыЯВыбираю(ИмяПунктаМеню) Экспорт
    АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
    АктивнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
	АктивнаяФорма.ВыполнитьВыборИзМеню(ИмяПунктаМеню);
КонецПроцедуры



&НаКлиенте
//И представление элемента "НаименованиеНадписью" стало равно ""
//@ПредставлениеЭлементаСталоРавно(Парам01,Парам02)
Процедура ПредставлениеЭлементаСталоРавно(ИмяРеквизита,ПредставлениеЭлемента,ИскатьПоИмени = Ложь) Экспорт
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени);
	ОтображаемыйТекст = ПолеРеквизит.ПолучитьОтображаемыйТекст();
	Если НЕ Ванесса.СтрокиРавны(ОтображаемыйТекст,ПредставлениеЭлемента) Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У поля <%1> ожидали отображаемый текст <%2>, а получили <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПредставлениеЭлемента);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ОтображаемыйТекст);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И представление элемента с именем "НаименованиеНадписью" стало равно ""
//@ПредставлениеЭлементаСИменемСталоРавно(Парам01,Парам02)
Процедура ПредставлениеЭлементаСИменемСталоРавно(ИмяРеквизита,ПредставлениеЭлемента) Экспорт
	ПредставлениеЭлементаСталоРавно(ИмяРеквизита,ПредставлениеЭлемента,Истина);
КонецПроцедуры



&НаКлиенте
//И в таблице "ТабличнаяЧасть1" из выпадающего списка "Реквизит быстрый выбор ТЧ" я выбираю точное значение 'Группа1Элем1'
//@ВТаблицеИзВыпадающегоСпискаЯВыбираюТочноеЗначение(Парам01,Парам02,Парам03)
Процедура ВТаблицеИзВыпадающегоСпискаЯВыбираюТочноеЗначение(ИмяТЧ,ИмяРеквизита,ВыбираемоеЗначение,ИскатьПоИмени = Ложь) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);
	
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	 
	
	Если ПолеРеквизит = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> не найдено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита);
	ПолеРеквизит.Активизировать();
	СделатьДействияПриЗаписиВидео("толькомышь");
	СделатьДействияПриЗаписиHTML("толькомышь");
	
	ВыпадающийСписокОткрыт = Истина;
	Попытка
		ВыпадающийСписокОткрыт = ПолеРеквизит.ВыпадающийСписокОткрыт();
	Исключение
		
	КонецПопытки;
	
	ТаблицаВРежимеРедактирования = ТЧ.ТекущийРежимРедактирование();
	Если Не ТаблицаВРежимеРедактирования Тогда
		ТЧ.ИзменитьСтроку();
	КонецЕсли;	 
	
	
	Если НЕ ВыпадающийСписокОткрыт Тогда
		ПолеРеквизит.ОткрытьВыпадающийСписок();
	КонецЕсли;	 
	
	ОткрывалиВыпадающийСписок = Ложь;
	
	Если Ванесса.Объект.ЯзыкГенератораGherkin = "ru" Тогда
		Ванесса.УстановитьТекстИнструкции("И из списка """ + ИмяРеквизита + """ я выбираю """ + ВыбираемоеЗначение + """");
	КонецЕсли;	 
	
	ПолучилосьВыбрать = Ложь;
	Попытка
		ПолеРеквизит.ВыполнитьВыборИзВыпадающегоСписка(ВыбираемоеЗначение);
		ПолучилосьВыбрать = Истина;
	Исключение
		
	КонецПопытки;
	
	Если Не ПолучилосьВыбрать Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось сделать выбор в поле <%1> значения <%2>. %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ВыбираемоеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ОписаниеОшибки());
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" из выпадающего списка с именем "Реквизит быстрый выбор ТЧ" я выбираю точное значение 'Группа1Элем1'
//@ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираюТочноеЗначение(Парам01,Парам02,Парам03)
Процедура ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираюТочноеЗначение(ИмяТЧ,ИмяРеквизита,ВыбираемоеЗначение,ИскатьПоИмени = Ложь) Экспорт
	ВТаблицеИзВыпадающегоСпискаЯВыбираюТочноеЗначение(ИмяТЧ,ИмяРеквизита,ВыбираемоеЗначение,Истина);
КонецПроцедуры




&НаКлиенте
//И я фиксирую форму "ИмяФормы"
//@ЯФиксируюФорму(Парам01)
Процедура ЯФиксируюФорму(ИмяФормы,ИскатьПоИмени = Ложь) Экспорт
	ТестовоеПриложение = Ванесса.ПолучитьТестовоеПриложение();
	
	ФормаПриложения = Неопределено;
	
	Если ИскатьПоИмени Тогда
		ФормаПриложения = ТестовоеПриложение.НайтиОбъект(Тип("ТестируемаяФорма"),,ИмяФормы);
	Иначе	
		ФормаПриложения = ТестовоеПриложение.НайтиОбъект(Тип("ТестируемаяФорма"),ИмяФормы);
	КонецЕсли;	 
	
	Если ФормаПриложения = Неопределено Тогда
		ВсеФормы = ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемаяФорма"));
		Для Каждого ТекФорма Из ВсеФормы Цикл
			Если ИскатьПоИмени Тогда
				Если НРег(ТекФорма.ИмяФормы) = Нрег(ИмяФормы) Тогда
					ФормаПриложения = ТекФорма;
					Прервать;
				КонецЕсли;	 
			Иначе	
				Если НРег(ТекФорма.ТекстЗаголовка) = Нрег(ИмяФормы) Тогда
					ФормаПриложения = ТекФорма;
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЦикла;	
	КонецЕсли;	 
	
	Если ФормаПриложения = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Форма <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФормы);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Ванесса.ЗафиксироватьФормуTestClient(ФормаПриложения);
КонецПроцедуры

&НаКлиенте
//И я фиксирую форму с именем "ИмяФормы"
//@ЯФиксируюФормуСИменем(Парам01)
Процедура ЯФиксируюФормуСИменем(ИмяФормы) Экспорт
	ЯФиксируюФорму(ИмяФормы,Истина);
КонецПроцедуры

&НаКлиенте
//И я отменяю фиксирование формы
//@ЯОтменяюФиксированиеФормы()
Процедура ЯОтменяюФиксированиеФормы() Экспорт
	Ванесса.ЗафиксироватьФормуTestClient(Неопределено);
КонецПроцедуры

&НаКлиенте
//И я фиксирую текущую форму
//@ЯФиксируюТекущуюФорму()
Процедура ЯФиксируюТекущуюФорму() Экспорт
	Ванесса.ЗафиксироватьФормуTestClient(Неопределено);
	МассивФорм = НайтиФормыТекущегоОкна();
	
	Если МассивФорм = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог получить форму текущего окна.");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если МассивФорм.Количество() = 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог получить форму текущего окна.");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если МассивФорм.Количество() > 1 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У текущего окна найдено %1 форм.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",МассивФорм.Количество()); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ТекФорма = МассивФорм[0];
	
	Ванесса.ЗафиксироватьФормуTestClient(ТекФорма);
КонецПроцедуры



&НаКлиенте
//И я прикрепляю к сценарию значение таблицы "ИмяТаблицы" как "ИмяЗначения"
//@ЯПрикрепляюКСценариюЗначениеТаблицыКак(Парам01)
Процедура ЯПрикрепляюКСценариюЗначениеТаблицыКак(ИмяТаблицы,ИмяЗначения) Экспорт
	ЗначениеТЧ = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяТаблицы,Истина);
	Макет      = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
	
	Ванесса.ПрикрепитьМакетКСценарию(Макет,ИмяЗначения);
КонецПроцедуры


&НаКлиенте
//И я запоминаю значение текущего поля как "ИмяПеременной"
//@ЯЗапоминаюЗначениеТекущегоПоляКак(Парам01)
Процедура ЯЗапоминаюЗначениеТекущегоПоляКак(ИмяПеременной) Экспорт
    АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
    АктивнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
	
	ТекущееПоле = АктивнаяФорма.ПолучитьТекущийЭлемент();
	
	Если ТекущееПоле = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не найден активный элемент формы.");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если ТипЗнч(ТекущееПоле) = Тип("ТестируемаяТаблицаФормы") Тогда
		ЗначениеПоля = ТекущееПоле.ПолучитьТекстЯчейки();
	Иначе	
		ЗначениеПоля = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(ТекущееПоле);
	КонецЕсли;	 
	
	Контекст.Вставить(ИмяПеременной,ЗначениеПоля);
КонецПроцедуры

&НаКлиенте
//И я запоминаю имя текущего поля как "ИмяПеременной"
//@ЯЗапоминаюИмяТекущегоПоляКак(Парам01)
Процедура ЯЗапоминаюИмяТекущегоПоляКак(ИмяПеременной) Экспорт
    АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
    АктивнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
	
	ТекущееПоле = АктивнаяФорма.ПолучитьТекущийЭлемент();
	
	Если ТекущееПоле = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не найден активный элемент формы.");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Контекст.Вставить(ИмяПеременной,ТекущееПоле.Имя);
КонецПроцедуры

&НаКлиенте
//И в текущее поле я ввожу текст "ЗначениеПоля"
//@ВТекущееПолеЯВвожуТекст(Парам01)
Процедура ВТекущееПолеЯВвожуТекст(ЗначениеПоля) Экспорт
    АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
    АктивнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
	
	ТекущееПоле = АктивнаяФорма.ПолучитьТекущийЭлемент();
	
	Если ТекущееПоле = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не найден активный элемент формы.");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если ТипЗнч(ТекущееПоле) = Тип("ТестируемаяТаблицаФормы") Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Данный шаг не работает с таблицами.");
		ВызватьИсключение ТекстСообщения;
	Иначе
		ВОткрытойФормеВПолеСЗаголовкомЯВвожуТекст(ТекущееПоле.Имя,ЗначениеПоля,Истина);
	КонецЕсли;	
	
КонецПроцедуры



&НаКлиенте
Процедура ОбработичкОжиданияВТаблицеУПоляЯЖдуЗначенияВТечениеСекунд()
	ИмяОбработчикаОжидания = "ОбработичкОжиданияВТаблицеУПоляЯЖдуЗначенияВТечениеСекунд";
	
	ПредставлениеДанных = Неопределено;
	Попытка
		ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТаблицыОбработкаОжидания);
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Таблица формы с именем <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицыОбработкаОжидания);
		ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	Попытка
		Если ИскатьПоИмениОбрабткаОжидания Тогда
			ПредставлениеДанных = ТЧ.ПолучитьТекстЯчейки(ИмяПоляОбработкаОжидания);
		Иначе
			ВыделенныеСтроки = ТЧ.ПолучитьВыделенныеСтроки();
			Если ВыделенныеСтроки.Количество() = 0 Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> не найдено ни одной строки");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицыОбработкаОжидания);
				ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
				Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
				Возврат;
			КонецЕсли;	 
			
			ЗначениеТекущейСтроки = ВыделенныеСтроки[0];
			ПредставлениеДанных   = ЗначениеТекущейСтроки[ИмяПоляОбработкаОжидания];
			Если ПредставлениеДанных = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> не найдено ячейки с заголовком <%2>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицыОбработкаОжидания);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоляОбработкаОжидания);
				ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
				Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
				Возврат;
			КонецЕсли;	 
		КонецЕсли;	 
	Исключение
	КонецПопытки;
	
	СтроковоеПредставление = ПолучитьКорректныйТекстДляВставкиВПоле(ЗначениеОбрабткаОжидания);
	
	Если ВидСравненияОбрабткаОжидания = "=" Тогда
		Если (ПредставлениеДанных <> Неопределено) И (НРег(ПредставлениеДанных) = НРег(СтроковоеПредставление)) Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
			Ванесса.ПродолжитьВыполнениеШагов();
			Возврат;
		КонецЕсли;
	Иначе	
		Если (ПредставлениеДанных <> Неопределено) И (НРег(ПредставлениеДанных) <> НРег(СтроковоеПредставление)) Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
			Ванесса.ПродолжитьВыполнениеШагов();
			Возврат;
		КонецЕсли;
	КонецЕсли;	 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
		Если ВидСравненияОбрабткаОжидания = "=" Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали у таблицы <%1> в течение <%2> секунд у поля <%3> значения <%4>. Текущее значение <%5>.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали у таблицы <%1> в течение <%2> секунд у поля <%3> значения отличного от <%4>. Текущее значение <%5>.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицыОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ИмяПоляОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ЗначениеОбрабткаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",ПредставлениеДанных);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
//И в таблице "ИмяТаблицы" у элемента "Имя элемента" я жду значения "Значение" в течение 20 секунд
//@ВТаблицеУПоляЯЖдуЗначенияВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)
Процедура ВТаблицеУПоляЯЖдуЗначенияВТечениеСекунд(ИмяТаблицы,ИмяПоля,Знач Значение,КоличествоСекунд,ИскатьПоИмени = Ложь,ВидСравнения = "=") Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = ИмяПоля;
	ИмяТаблицыОбработкаОжидания       = ИмяТаблицы;
	ИскатьПоИмениОбрабткаОжидания     = ИскатьПоИмени;
	ЗначениеОбрабткаОжидания          = Ванесса.ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(Значение);
	ВидСравненияОбрабткаОжидания      = ВидСравнения;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ОбработичкОжиданияВТаблицеУПоляЯЖдуЗначенияВТечениеСекунд",1,Ложь);
КонецПроцедуры

&НаКлиенте
//И в таблице "ИмяТаблицы" у элемента с именем "Имя элемента" я жду значения "Значение" в течение 20 секунд
//@ВТаблицеУПоляСИменемЯЖдуЗначенияВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)
Процедура ВТаблицеУПоляСИменемЯЖдуЗначенияВТечениеСекунд(ИмяТаблицы,ИмяПоля,Значение,КоличествоСекунд) Экспорт
	ВТаблицеУПоляЯЖдуЗначенияВТечениеСекунд(ИмяТаблицы,ИмяПоля,Значение,КоличествоСекунд,Истина);
КонецПроцедуры


&НаКлиенте
//И в таблице "ИмяТаблицы" у поля "Имя элемента" я жду значения отличного от "Значение" в течение 20 секунд
//@ВТаблицеУПоляЯЖдуЗначенияОтличногоОтВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)
Процедура ВТаблицеУПоляЯЖдуЗначенияОтличногоОтВТечениеСекунд(ИмяТаблицы,ИмяПоля,Знач Значение,КоличествоСекунд,ИскатьПоИмени = Ложь) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = ИмяПоля;
	ИмяТаблицыОбработкаОжидания       = ИмяТаблицы;
	ИскатьПоИмениОбрабткаОжидания     = ИскатьПоИмени;
	ЗначениеОбрабткаОжидания          = Ванесса.ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(Значение);
	ВидСравненияОбрабткаОжидания      = "<>";
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ОбработичкОжиданияВТаблицеУПоляЯЖдуЗначенияВТечениеСекунд",1,Ложь);
КонецПроцедуры

&НаКлиенте
//И в таблице "ИмяТаблицы" у поля с именем "ИмяЭлемента" я жду значения отличного от "Значение" в течение 20 секунд
//@ВТаблицеУПоляСИменемЯЖдуЗначенияОтличногоОтВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)
Процедура ВТаблицеУПоляСИменемЯЖдуЗначенияОтличногоОтВТечениеСекунд(ИмяТаблицы,ИмяПоля,Знач Значение,КоличествоСекунд) Экспорт
	ВТаблицеУПоляЯЖдуЗначенияОтличногоОтВТечениеСекунд(ИмяТаблицы,ИмяПоля,Значение,КоличествоСекунд,Истина);
КонецПроцедуры



&НаКлиенте
//Если это web клиент Тогда
//@ЭтоWebКлиентТогда()
Процедура ЭтоWebКлиентТогда() Экспорт
	Ванесса.УстановитьРезультатУсловия(Ванесса.ТекущийTestclientЭтоWebКлиент);
КонецПроцедуры

&НаКлиенте
//Если это тонкий клиент тогда
//@ЭтоТонкийКлиентТогда()
Процедура ЭтоТонкийКлиентТогда() Экспорт
	Ванесса.УстановитьРезультатУсловия(НЕ Ванесса.ТекущийTestclientЭтоWebКлиент);
КонецПроцедуры





&НаКлиенте
Функция ТекстТекущейЯчейкиТекущейТаблицы(ИмяТЧ,ВызыватьИсключение = Истина)
	ТекущаяФорма = Ванесса.НайтиТекущуюФормуTestClient();
	Если ТекущаяФорма = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Активная форма не найдена");
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстСообщения;
		Иначе
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТекущийЭлементФормы = ТекущаяФорма.ПолучитьТекущийЭлемент();
	Если ТипЗнч(ТекущийЭлементФормы) <> Тип("ТестируемаяТаблицаФормы") Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Типом значения <%1> является <%2>, а ожидался тип <%3>.%4");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1","таблицы");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТипЗнч(ТекущийЭлементФормы));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3","ТестируемаяТаблицаФормы");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4","");
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстСообщения;
		Иначе
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТЧ    = ТекущийЭлементФормы;
	ИмяТЧ = ТекущийЭлементФормы.Имя;
	
	Попытка
		ТекстЯчейки = ТЧ.ПолучитьТекстЯчейки();
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> нет строк для выбора.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстСообщения;
		Иначе
			Возврат Неопределено;
		КонецЕсли;	 
	КонецПопытки;
	
	Возврат ТекстЯчейки; 
КонецФункции	 

&НаКлиенте
//И в таблице текущее поле заполнено
//@ВТаблицеТекущееПолеЗаполнено()
Процедура ВТаблицеТекущееПолеЗаполнено() Экспорт
	ИмяТЧ                            = Неопределено;
	ТекстТекущейЯчейкиТекущейТаблицы = ТекстТекущейЯчейкиТекущейТаблицы(ИмяТЧ);
	
	Если Не ЗначениеЗаполнено(ТекстТекущейЯчейкиТекущейТаблицы) Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что в таблице <%1> текуще поле будет заполнено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И в таблице текущее поле не заполнено
//@ВТаблицеТекущееПолеНезаполнено()
Процедура ВТаблицеТекущееПолеНезаполнено() Экспорт
	ИмяТЧ                            = Неопределено;
	ТекстТекущейЯчейкиТекущейТаблицы = ТекстТекущейЯчейкиТекущейТаблицы(ИмяТЧ);
	
	Если ЗначениеЗаполнено(ТекстТекущейЯчейкиТекущейТаблицы) Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что в таблице <%1> текуще поле будет не заполнено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры


&НаКлиенте
Процедура ОбработичкОжиданияЯЖдуЧтоВТаблицеТекущееПолеБудетЗаполненоВТечениеСекунд()
	ИмяОбработчикаОжидания = "ОбработичкОжиданияЯЖдуЧтоВТаблицеТекущееПолеБудетЗаполненоВТечениеСекунд";
	ИмяТЧ                            = Неопределено;
	ТекстТекущейЯчейкиТекущейТаблицы = ТекстТекущейЯчейкиТекущейТаблицы(ИмяТЧ,Ложь);
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
		Если ТипПроверкиПоляОбработкаОжидания  = "заполнено" Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали у таблицы <%1> в течение <%2> секунд, что текущее поле будет заполнено.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали у таблицы <%1> в течение <%2> секунд, что текущее поле будет не заполнено.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",КоличествоСекундОбработкаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ТекстТекущейЯчейкиТекущейТаблицы = Неопределено Тогда
		//значит пока не получилось получить значение
		Возврат; 
	КонецЕсли;	 
	
	Если ТипПроверкиПоляОбработкаОжидания  = "заполнено" Тогда
		Если ЗначениеЗаполнено(ТекстТекущейЯчейкиТекущейТаблицы)  Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
			Ванесса.ПродолжитьВыполнениеШагов();
			Возврат;
		КонецЕсли;	 
	ИначеЕсли ТипПроверкиПоляОбработкаОжидания  = "незаполнено" Тогда
		Если НЕ ЗначениеЗаполнено(ТекстТекущейЯчейкиТекущейТаблицы)  Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
			Ванесса.ПродолжитьВыполнениеШагов();
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
//И я жду, что в таблице текущее поле будет заполнено в течение 10 секунд.
//@ЯЖдуЧтоВТаблицеТекущееПолеБудетЗаполненоВТечениеСекунд(Парам01)
Процедура ЯЖдуЧтоВТаблицеТекущееПолеБудетЗаполненоВТечениеСекунд(КоличествоСекунд) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ТипПроверкиПоляОбработкаОжидания  = "заполнено";
	ПодключитьОбработчикОжидания("ОбработичкОжиданияЯЖдуЧтоВТаблицеТекущееПолеБудетЗаполненоВТечениеСекунд",1,Ложь);
КонецПроцедуры

&НаКлиенте
//И я жду, что в таблице текущее поле будет не заполнено в течение 10 секунд.
//@ЯЖдуЧтоВТаблицеТекущееПолеБудетНеЗаполненоВТечениеСекунд(Парам01)
Процедура ЯЖдуЧтоВТаблицеТекущееПолеБудетНеЗаполненоВТечениеСекунд(КоличествоСекунд) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ТипПроверкиПоляОбработкаОжидания  = "незаполнено";
	ПодключитьОбработчикОжидания("ОбработичкОжиданияЯЖдуЧтоВТаблицеТекущееПолеБудетЗаполненоВТечениеСекунд",1,Ложь);
КонецПроцедуры



&НаКлиенте
//И я устанавливаю максимальное время выполнения действия
//@ЯУстанавливаюМаксимальноеВремяВыполненияДействия()
Процедура ЯУстанавливаюМаксимальноеВремяВыполненияДействия(КолСекунд) Экспорт
	Если Не КонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не подключен TestClient.");
	КонецЕсли;	
	
	Если КонтекстСохраняемый.ТестовоеПриложение = Неопределено Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не подключен TestClient.");
	КонецЕсли;	 
	
	КонтекстСохраняемый.ТестовоеПриложение.УстановитьМаксимальноеВремяВыполненияДействия(КолСекунд);
КонецПроцедуры



&НаКлиенте
//И выпадающий список "ИмяЭлемента" стал равен
//@ВыпадающийСписокСталРавен(Парам01,ТабПарам)
Процедура ВыпадающийСписокСталРавен(ИмяЭлемента,ТабПарам,ИскатьПоИмени = Ложь) Экспорт
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"));
	
	Попытка
		ПредставлениеСпискаВыбора = ЭлементФормы.ПолучитьПредставлениеСпискаВыбора();
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось получить представление открытого списка выбора <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Если ПредставлениеСпискаВыбора = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось получить представление открытого списка выбора <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если ТабПарам.Количество() <> ПредставлениеСпискаВыбора.Количество() Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У списка выбора <%1> ожидалось %2 значений, а было получено %3 значений.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТабПарам.Количество());
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ПредставлениеСпискаВыбора.Количество());
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	МассивРазличий = Новый Массив;
	
	НомСтр = -1;
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		НомСтр = НомСтр + 1;
		СтрокаПредставлениеСпискаВыбора = ПредставлениеСпискаВыбора[НомСтр];
		
		Если НРег(СокрЛП(СтрокаТабПарам.Кол1)) <> НРег(СокрЛП(СтрокаПредставлениеСпискаВыбора.ОтображаемыйТекст)) Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось получить %1, а было получено %2.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаТабПарам.Кол1);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",СтрокаПредставлениеСпискаВыбора.ОтображаемыйТекст);
			МассивРазличий.Добавить(ТекстСообщения);
		КонецЕсли;	 
		
	КонецЦикла;	
	
	Если МассивРазличий.Количество() > 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Открытый список выбора <%1> не равен эталону. Различия: %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
		
		Стр = Символы.ПС;
		Для Каждого Элем Из МассивРазличий Цикл
			Стр = Стр + Элем + Символы.ПС;
		КонецЦикла;	
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Стр);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
//И выпадающий список с именем "ИмяЭлемента" стал равен
//@ВыпадающийСписокСИменемСталРавен(Парам01,ТабПарам)
Процедура ВыпадающийСписокСИменемСталРавен(ИмяЭлемента,ТабПарам) Экспорт
	ВыпадающийСписокСталРавен(ИмяЭлемента,ТабПарам,Истина);
КонецПроцедуры


&НаКлиенте
//И выпадающий список "Реквизит1" содержит значения
//@ВыпадающийСписокСодержитЗначения(Парам01,ТабПарам)
Процедура ВыпадающийСписокСодержитЗначения(ИмяЭлемента,ТабПарам,ИскатьПоИмени = Ложь) Экспорт
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"));
	
	Попытка
		ПредставлениеСпискаВыбора = ЭлементФормы.ПолучитьПредставлениеСпискаВыбора();
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось получить представление открытого списка выбора <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Если ПредставлениеСпискаВыбора = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось получить представление открытого списка выбора <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	
	МассивТекущихЗначений = Новый Массив;
	Для Каждого Элем Из ПредставлениеСпискаВыбора Цикл
		МассивТекущихЗначений.Добавить(СокрЛП(НРег(Элем.ОтображаемыйТекст)));
	КонецЦикла;	
	
	
	МассивРазличий = Новый Массив;
	
	НомСтр = -1;
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		НомСтр = НомСтр + 1;
		
		ЗначениеИзЭталона = СокрЛП(НРег(СтрокаТабПарам.Кол1));
		
		Если МассивТекущихЗначений.Найти(ЗначениеИзЭталона) = Неопределено Тогда
			Если МассивРазличий.Найти(СтрокаТабПарам.Кол1) = Неопределено Тогда
				МассивРазличий.Добавить(СтрокаТабПарам.Кол1);
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;	
	
	Если МассивРазличий.Количество() > 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Открытый список выбора <%1> не содержит ожидаемые значения: %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
		
		Стр = Символы.ПС;
		Для Каждого Элем Из МассивРазличий Цикл
			Стр = Стр + Элем + Символы.ПС;
		КонецЦикла;	
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Стр);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И выпадающий список с именем "Реквизит1" содержит значения
//@ВыпадающийСписокСИменемСодержитЗначения(Парам01,ТабПарам)
Процедура ВыпадающийСписокСИменемСодержитЗначения(ИмяЭлемента,ТабПарам) Экспорт
	ВыпадающийСписокСодержитЗначения(ИмяЭлемента,ТабПарам,Истина);
КонецПроцедуры


&НаКлиенте
//И выпадающий список "Реквизит1" не содержит значения
//@ВыпадающийСписокНеСодержитЗначения(Парам01,ТабПарам)
Процедура ВыпадающийСписокНеСодержитЗначения(ИмяЭлемента,ТабПарам,ИскатьПоИмени = Ложь) Экспорт
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"));
	
	Попытка
		ПредставлениеСпискаВыбора = ЭлементФормы.ПолучитьПредставлениеСпискаВыбора();
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось получить представление открытого списка выбора <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Если ПредставлениеСпискаВыбора = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось получить представление открытого списка выбора <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	
	МассивТекущихЗначений = Новый Массив;
	Для Каждого Элем Из ПредставлениеСпискаВыбора Цикл
		МассивТекущихЗначений.Добавить(СокрЛП(НРег(Элем.ОтображаемыйТекст)));
	КонецЦикла;	
	
	
	МассивРазличий = Новый Массив;
	
	НомСтр = -1;
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		НомСтр = НомСтр + 1;
		
		ЗначениеИзЭталона = СокрЛП(НРег(СтрокаТабПарам.Кол1));
		
		Если МассивТекущихЗначений.Найти(ЗначениеИзЭталона) <> Неопределено Тогда
			Если МассивРазличий.Найти(СтрокаТабПарам.Кол1) = Неопределено Тогда
				МассивРазличий.Добавить(СтрокаТабПарам.Кол1);
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;	
	
	Если МассивРазличий.Количество() > 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Открытый список выбора <%1> содержит значения, которых не должно быть: %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
		
		Стр = Символы.ПС;
		Для Каждого Элем Из МассивРазличий Цикл
			Стр = Стр + Элем + Символы.ПС;
		КонецЦикла;	
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Стр);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И выпадающий список с именем "Реквизит1" не содержит значения
//@ВыпадающийСписокСИменемНеСодержитЗначения(Парам01,ТабПарам)
Процедура ВыпадающийСписокСИменемНеСодержитЗначения(ИмяЭлемента,ТабПарам) Экспорт
	ВыпадающийСписокНеСодержитЗначения(ИмяЭлемента,ТабПарам,Истина);
КонецПроцедуры



&НаКлиенте
//И у поля "Надпись форматированная строка" я нажимаю гиперссылку 'Ссылка1'
//@УПоляЯНажимаюГиперссылку(Парам01,Парам02)
Процедура УПоляЯНажимаюГиперссылку(ИмяЭлемента,Гиперссылка,ИскатьПоИмени = Ложь) Экспорт
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени, Истина);
	Попытка
		ЭлементФормы.НажатьНаГиперссылкуВФорматированнойСтроке(Гиперссылка);
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У поля <%1> не получилось нажать на гиперссылку <%2>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Гиперссылка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
//И у поля с именем "Надпись форматированная строка" я нажимаю гиперссылку 'Ссылка1'
//@УПоляСИменемЯНажимаюГиперссылку(Парам01,Парам02)
Процедура УПоляСИменемЯНажимаюГиперссылку(ИмяПоля,Гиперссылка) Экспорт
	УПоляЯНажимаюГиперссылку(ИмяПоля,Гиперссылка,Истина);
КонецПроцедуры



&НаКлиенте
Процедура ОбработичкОжиданияЯЖдуЧтоВТабличномДокументеЯчейкаСтанетРавнаВТечениеСекунд()
	ИмяОбработчикаОжидания = "ОбработичкОжиданияЯЖдуЧтоВТабличномДокументеЯчейкаСтанетРавнаВТечениеСекунд";
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоляОбработкаОжидания,Истина,Ложь, Тип("ТестируемоеПолеФормы"));
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		Попытка
			ТекстЯчейки = ПолеРеквизит.ПолучитьТекстОбласти(ИмяЯчейкиОбработкаОжидания);
		Исключение
			ТекстЯчейки = "";
		КонецПопытки;
		
		Попытка
			ТабДокСтало = Ванесса.ПолучитьТабличныйДокументTestClient(ПолеРеквизит);
		Исключение
			ТабДокСтало = Неопределено;
		КонецПопытки;
		
		Если ТабДокСтало <> Неопределено Тогда
			Ванесса.ПрикрепитьМакетКСценарию(ТабДокСтало,"ТекущееЗначениеМакета");
		КонецЕсли;	 
		
		ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что у табличного документа <%1> в течение <%2> секунд значение ячейки <%3> станет равно <%4>. Текущее значение <%5>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПоляОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ИмяЯчейкиОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ЗначениеОбрабткаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",ТекстЯчейки);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ПолеРеквизит = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	ТекстЯчейки = ПолеРеквизит.ПолучитьТекстОбласти(ИмяЯчейкиОбработкаОжидания);
	
	Если НРег(ТекстЯчейки) = НРег(ЗначениеОбрабткаОжидания) Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат;
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
//И я жду, что в табличном документе "РеквизитТабличныйДокумент" ячейка "r4c2" станет равна "Значение" в течение 20 секунд
//@ЯЖдуЧтоВТабличномДокументеЯчейкаСтанетРавнаВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)
Процедура ЯЖдуЧтоВТабличномДокументеЯчейкаСтанетРавнаВТечениеСекунд(ИмяРеквизита,ИмяЯчейки,Значение,КоличествоСекунд) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = ИмяРеквизита;
	ИмяЯчейкиОбработкаОжидания        = ИмяЯчейки;
	ЗначениеОбрабткаОжидания          = Значение;
	ИскатьПоИмениОбрабткаОжидания     = Истина;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ОбработичкОжиданияЯЖдуЧтоВТабличномДокументеЯчейкаСтанетРавнаВТечениеСекунд",1,Ложь);
КонецПроцедуры



&НаКлиенте
//И в таблице "ИмяТаблицы" заголовок активной колонки "Текст"
//@ВТаблицеЗаголовокАктивнойКолонки(Парам01,Парам02)
Процедура ВТаблицеЗаголовокАктивнойКолонки(ИмяТаблицы,ИмяКолонки,ПолучитьЗаголовок = Истина) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	АктивноеПоле = ТЧ.ПолучитьТекущийЭлемент();
	Если АктивноеПоле = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось определить активное поле у таблицы <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если ПолучитьЗаголовок Тогда
		ТекущееИмя = АктивноеПоле.ТекстЗаголовка;
	Иначе	
		ТекущееИмя = АктивноеПоле.Имя;
	КонецЕсли;	 
	
	Если НРег(ТекущееИмя) <> НРег(ИмяКолонки) Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У таблицы <%1> ожидалась, что активной будет колонка <%2>, а не <%3>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяКолонки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ТекущееИмя);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И в таблице "ИмяТаблицы" имя активной колонки "Текст"
//@ВТаблицеИмяАктивнойКолонки(Парам01,Парам02)
Процедура ВТаблицеИмяАктивнойКолонки(ИмяТаблицы,ИмяКолонки) Экспорт
	ВТаблицеЗаголовокАктивнойКолонки(ИмяТаблицы,ИмяКолонки,Ложь);
КонецПроцедуры





&НаКлиенте
//И я запоминаю значение таблицы "Таблица1" как "Таб1"
//@ЯЗапоминаюЗначениеТаблицыКак(Парам01,Парам02,ТабПарам)
Процедура ЯЗапоминаюЗначениеТаблицыКак(ИмяТаблицы,ИмяПеременной,ТабПарам,ВыделятьВсеСтроки = Истина) Экспорт
	ТабПарам = Ванесса.ПолучитьЗначенияТаблицыGherkinИзКонтекста(ТабПарам);
	ТЧ       = НайтиТЧПоИмени(ИмяТаблицы);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВыделятьВсеСтроки",ВыделятьВсеСтроки);
	ЗначениеТЧ   = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ,ДопПараметры);
	
	Если ЗначениеТЧ = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог получить значение таблицы <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	НовоеЗначениеТЧ = Новый Массив;
	Для Каждого СтрокаЗначениеТЧ Из ЗначениеТЧ Цикл
		СтрокаНовоеЗначениеТЧ = Новый Соответствие;
		
		Для Ккк = 1 По ТабПарам.Количество() Цикл
			ИмяКолонкиТаблицыФормы = ТабПарам[Ккк-1]["Кол1"];
			ЗначениеКолонкиТаблицыФормы = СтрокаЗначениеТЧ[ИмяКолонкиТаблицыФормы];
			Если ЗначениеКолонкиТаблицыФормы = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1>  нет колонки <%2>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяКолонкиТаблицыФормы);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			СтрокаНовоеЗначениеТЧ.Вставить(ИмяКолонкиТаблицыФормы,ЗначениеКолонкиТаблицыФормы);
			
		КонецЦикла;	
		
		НовоеЗначениеТЧ.Добавить(СтрокаНовоеЗначениеТЧ);
	КонецЦикла;	
	
	Попытка
		Контекст.Вставить(ИмяПеременной,НовоеЗначениеТЧ);
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось сохранить в переменную <%1> таблицу с именем <%2>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяТаблицы);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
//И таблица "Таб1" содержится в таблице "Таб2"
//@ТаблицаСодержитсяВТаблице(Парам01,Парам02,ТабПарам)
Процедура ТаблицаСодержитсяВТаблице(Переменная1,Переменная2) Экспорт
	Если Не Контекст.Свойство(Переменная1) Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Переменная1);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если Не Контекст.Свойство(Переменная2) Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Переменная2);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Таблица1 = Контекст[Переменная1];
	Таблица2 = Контекст[Переменная2];
	
	Если ТипЗнч(Таблица1) <> Тип("Массив") и ТипЗнч(Таблица1) <> Тип("ФиксированныйМассив") Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Типом значения <%1> является <%2>, а ожидался тип <%3>.%4");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Переменная1);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТипЗнч(Таблица1));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3","Массив");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4","");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если ТипЗнч(Таблица2) <> Тип("Массив") и ТипЗнч(Таблица2) <> Тип("ФиксированныйМассив") Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Типом значения <%1> является <%2>, а ожидался тип <%3>.%4");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Переменная2);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТипЗнч(Таблица2));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3","Массив");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4","");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если Таблица1.Количество() = 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Таблица <%1> пустая.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Переменная1);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если Таблица2.Количество() = 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Таблица <%1> пустая.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Переменная2);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	СтрокаТаблица1 = Таблица1[0];
	СтрокаТаблица2 = Таблица2[0];
	
	Если СтрокаТаблица1.Количество() <> СтрокаТаблица2.Количество() Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблицах <%1> и <%2> разное количество колонок <%3> и <%4>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Переменная1);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Переменная2);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",СтрокаТаблица1.Количество());
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",СтрокаТаблица2.Количество());
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	//сравнив состав колонок
	
	Для Каждого Колонка1 Из СтрокаТаблица1 Цикл
		Если СтрокаТаблица2[Колонка1.Ключ] = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1>  нет колонки <%2>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Переменная2);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Колонка1.Ключ);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЦикла;	
	
	МассивОшибок = Новый Массив;
	Для Каждого СтрокаТаблица1 Из Таблица1 Цикл
		НашлиСтроку = Ложь;
		Для Каждого СтрокаТаблица2 Из Таблица2 Цикл
			СовпалиВсеКолонки = Истина;
			Для Каждого КолонкаСтроки1 Из СтрокаТаблица1 Цикл
				Значение1 = СтрокаТаблица1[КолонкаСтроки1.Ключ];
				Значение2 = СтрокаТаблица2[КолонкаСтроки1.Ключ];
				
				Если Значение1 <> Значение2 Тогда
					СовпалиВсеКолонки = Ложь;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
			
			Если СовпалиВсеКолонки Тогда
				НашлиСтроку = Истина;
				Прервать;
			КонецЕсли;	 
			
		КонецЦикла;	
		
		Если НЕ НашлиСтроку Тогда
			МассивОшибок.Добавить(СтрокаТаблица1);
		КонецЕсли;	 
	КонецЦикла;	
	
	Если МассивОшибок.Количество() > 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не все строки таблицы <%1> найдены в таблице <%2>:");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Переменная1);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Переменная2);
		
		Стр = "";
		Для Каждого СтрокаМассивОшибок Из МассивОшибок Цикл
			СтрокаИмКолонки = "		| ";
			СтрокаЗначение  = "		| ";
			
			Колонки = СтрокаМассивОшибок;
			Для Каждого Элем Из Колонки Цикл
				ИмяКолонки      = "'" + Элем.Ключ     + "'";
				ЗначениеКолонки = "'" + Элем.Значение + "'";
				
				ПривестиСтрокиКОднойДлине(ИмяКолонки,ЗначениеКолонки);
				
				СтрокаИмКолонки = СтрокаИмКолонки + ИмяКолонки      + " | ";
				СтрокаЗначение  = СтрокаЗначение  + ЗначениеКолонки + " | ";
			КонецЦикла;	
			
			Если Не ЗначениеЗаполнено(Стр) Тогда
				Стр = Стр + Символы.ПС + СтрокаИмКолонки + Символы.ПС + СтрокаЗначение;
			Иначе	
				Стр = Стр + Символы.ПС + СтрокаЗначение;
			КонецЕсли;	 
		КонецЦикла;	
		
		ВызватьИсключение ТекстСообщения + Стр;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И я запоминаю выделенные строки таблицы "Список" как "ВыделенныеСтроки"
//@ЯЗапоминаюВыделенныеСтрокиТаблицыКак(Парам01,Парам02,ТабПарам)
Процедура ЯЗапоминаюВыделенныеСтрокиТаблицыКак(ИмяТаблицы,ИмяПеременной,ТабПарам) Экспорт
	ЯЗапоминаюЗначениеТаблицыКак(ИмяТаблицы,ИмяПеременной,ТабПарам,Ложь);
КонецПроцедуры




&НаКлиенте
//И я включаю проверку видимости элементов с учётом видимости групп элементов
//@ЯВключаюПроверкуВидимостиЭлементовСУчётомВидимостиГруппЭлементов()
Процедура ЯВключаюПроверкуВидимостиЭлементовСУчётомВидимостиГруппЭлементов() Экспорт
	Ванесса.УстановитьСтатусПроверятьВидимостьЭлементаСУчетомРодителя(Истина);
КонецПроцедуры

&НаКлиенте
//И я выключаю проверку видимости элементов с учётом видимости групп элементов
//@ЯВыключаюПроверкуВидимостиЭлементовСУчётомВидимостиГруппЭлементов()
Процедура ЯВыключаюПроверкуВидимостиЭлементовСУчётомВидимостиГруппЭлементов() Экспорт
	Ванесса.УстановитьСтатусПроверятьВидимостьЭлементаСУчетомРодителя(Ложь);
КонецПроцедуры


&НаКлиенте
//И я включаю проверку доступности элементов с учётом доступности групп элементов
//@ЯВключаюПроверкуДоступностиЭлементовСУчётомДоступностиГруппЭлементов()
Процедура ЯВключаюПроверкуДоступностиЭлементовСУчётомДоступностиГруппЭлементов() Экспорт
	Ванесса.УстановитьСтатусПроверятьДоступностьЭлементаСУчетомРодителя(Истина);
КонецПроцедуры

&НаКлиенте
//И я выключаю проверку доступности элементов с учётом доступности групп элементов
//@ЯВыключаюПроверкуДоступностиЭлементовСУчётомДоступностиГруппЭлементов()
Процедура ЯВыключаюПроверкуДоступностиЭлементовСУчётомДоступностиГруппЭлементов() Экспорт
	Ванесса.УстановитьСтатусПроверятьДоступностьЭлементаСУчетомРодителя(Ложь);
КонецПроцедуры



&НаКлиенте
Процедура ЭлементыГруппы(ПолеГруппа,ЗаголовкиЭлементов,ИменаЭлементов)
	ЭлементыГруппы     = ПолеГруппа.НайтиОбъекты();
	Для Каждого ЭлеметГруппы Из ЭлементыГруппы Цикл
		ИменаЭлементов.Вставить(ЭлеметГруппы.Имя,ЭлеметГруппы);
		ЗаголовкиЭлементов.Вставить(ЭлеметГруппы.ТекстЗаголовка,ЭлеметГруппы);
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
//И в группе "ИмяГруппы" содержатся элементы
//@ВГруппеСодержатсяЭлементы(Парам01,ТабПарам)
Процедура ВГруппеСодержатсяЭлементы(ИмяРеквизита,ТабПарам,ИскатьПоИмени = Ложь) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Ложь);
	ПолеГруппа = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени, Истина, Тип("ТестируемаяГруппаФормы"),ДопПараметры);	
	
	ЗаголовкиЭлементов = Новый Соответствие;
	ИменаЭлементов     = Новый Соответствие;
	ЭлементыГруппы(ПолеГруппа,ЗаголовкиЭлементов,ИменаЭлементов);
	
	МассивОшибок = Новый Массив;
	Для Каждого Строка Из ТабПарам Цикл
		ИмяЭлемента = Строка.Кол1;
		ИскатьЭлементПоИмени = Ложь;
		Ванесса.ОпределитьРежимПоискаЭлементаНаФорме(ИмяЭлемента,ИскатьЭлементПоИмени);
		
		Если ИскатьЭлементПоИмени Тогда
			ЭлементПоИмени = ИменаЭлементов[ИмяЭлемента];
		Иначе	
			ЭлементПоИмени = ЗаголовкиЭлементов[ИмяЭлемента];
		КонецЕсли;	 
		
		Если ЭлементПоИмени = Неопределено Тогда
			МассивОшибок.Добавить(ИмяЭлемента);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если МассивОшибок.Количество() > 0 Тогда
		Стр = "";
		Для Каждого Элем Из МассивОшибок Цикл
			Стр = Стр + Символы.ПС + Элем;
		КонецЦикла;	 
		
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что группа элементов <%1> содержит данные элементы формы: %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Стр);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И в группе с именем "ИмяГруппы" содержатся элементы
//@ВГруппеСИменемСодержатсяЭлементы(Парам01,ТабПарам)
Процедура ВГруппеСИменемСодержатсяЭлементы(ИмяРеквизита,ТабПарам,ИскатьПоИмени = Ложь) Экспорт
	ВГруппеСодержатсяЭлементы(ИмяРеквизита,ТабПарам,Истина);
КонецПроцедуры

&НаКлиенте
//И в группе "ИмяГруппы" не содержатся элементы
//@ВГруппеНеСодержатсяЭлементы(Парам01,ТабПарам)
Процедура ВГруппеНеСодержатсяЭлементы(ИмяРеквизита,ТабПарам,ИскатьПоИмени = Ложь) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Ложь);
	ПолеГруппа = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени, Истина, Тип("ТестируемаяГруппаФормы"),ДопПараметры);	
	
	ЗаголовкиЭлементов = Новый Соответствие;
	ИменаЭлементов     = Новый Соответствие;
	ЭлементыГруппы(ПолеГруппа,ЗаголовкиЭлементов,ИменаЭлементов);
	
	МассивОшибок = Новый Массив;
	Для Каждого Строка Из ТабПарам Цикл
		ИмяЭлемента = Строка.Кол1;
		ИскатьЭлементПоИмени = Ложь;
		Ванесса.ОпределитьРежимПоискаЭлементаНаФорме(ИмяЭлемента,ИскатьЭлементПоИмени);
		
		Если ИскатьЭлементПоИмени Тогда
			ЭлементПоИмени = ИменаЭлементов[ИмяЭлемента];
		Иначе	
			ЭлементПоИмени = ЗаголовкиЭлементов[ИмяЭлемента];
		КонецЕсли;
		
		Если ЭлементПоИмени <> Неопределено Тогда
			МассивОшибок.Добавить(ИмяЭлемента);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если МассивОшибок.Количество() > 0 Тогда
		Стр = "";
		Для Каждого Элем Из МассивОшибок Цикл
			Стр = Стр + Символы.ПС + Элем;
		КонецЦикла;	 
		
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что группа элементов <%1> не содержит данные элементы формы: %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Стр);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И в группе с именем "ИмяГруппы" не содержатся элементы
//@ВГруппесИменемНеСодержатсяЭлементы(Парам01,ТабПарам)
Процедура ВГруппесИменемНеСодержатсяЭлементы(ИмяРеквизита,ТабПарам,ИскатьПоИмени = Ложь) Экспорт
	ВГруппеНеСодержатсяЭлементы(ИмяРеквизита,ТабПарам,Истина);
КонецПроцедуры




&НаКлиенте
//И панель разделов равна
//@ПанельРазделовРавна(ТабПарам)
Процедура ПанельРазделовРавна(ТабПарам) Экспорт
	ПанельРазделов = Ванесса.ПанельРазделов();
	
	ОбъектыПанелиРазделов = ПанельРазделов.НайтиОбъекты();
	Если ТабПарам.Количество() <> ОбъектыПанелиРазделов.Количество() Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что в панели разделов будет <%1> элементов, а найдено <%2> элементов.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТабПарам.Количество());
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОбъектыПанелиРазделов.Количество());
		Стр = "";
		Для Каждого ЭлемОбъектыПанелиРазделов Из ОбъектыПанелиРазделов Цикл
			Стр = Стр + Символы.ПС + ЭлемОбъектыПанелиРазделов.ТекстЗаголовка;
		КонецЦикла;	 
		ТекстСообщения = ТекстСообщения + Стр;
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Ном = -1;
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		Ном = Ном + 1;
		ОбъектПанелиРазделов = ОбъектыПанелиРазделов[Ном];
		
		Если НРег(СтрокаТабПарам.Кол1) <> НРег(ОбъектПанелиРазделов.ТекстЗаголовка) Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что в панели разделов будет элемент <%1> , а был найден элемент <%2>.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаТабПарам.Кол1);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОбъектПанелиРазделов.ТекстЗаголовка);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры

&НаКлиенте
Функция ЗаголовкиЭлементовИзМассиваОбъектов(Массив,ПривестиКНрег = Ложь)
	Результат = Новый Массив;
	Для Каждого Элем Из Массив Цикл
		Если ПривестиКНрег Тогда
			Результат.Добавить(НРег(Элем.ТекстЗаголовка));
		Иначе	
			Результат.Добавить(Элем.ТекстЗаголовка);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Возврат Результат; 
КонецФункции	 

&НаКлиенте
//И панель разделов содержит пункты меню
//@ПанельРазделовСодержитПунктыМеню(ТабПарам)
Процедура ПанельРазделовСодержитПунктыМеню(ТабПарам,ПроверятьВхождение = Истина) Экспорт
	ПанельРазделов = Ванесса.ПанельРазделов();
	ОбъектыПанелиРазделов = ПанельРазделов.НайтиОбъекты();
	ЗаголовкиЭлементов    = ЗаголовкиЭлементовИзМассиваОбъектов(ОбъектыПанелиРазделов,Истина);
	
	МассивОшибок = Новый Массив;
	
	Ном = -1;
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		Ном = Ном + 1;
		ОжидаемыйЗаголовокЭлемента = НРег(СтрокаТабПарам.Кол1);
		
		Если ПроверятьВхождение Тогда
			Если ЗаголовкиЭлементов.Найти(ОжидаемыйЗаголовокЭлемента) = Неопределено Тогда
				МассивОшибок.Добавить(СтрокаТабПарам.Кол1);
			КонецЕсли;	 
		Иначе	
			Если ЗаголовкиЭлементов.Найти(ОжидаемыйЗаголовокЭлемента) <> Неопределено Тогда
				МассивОшибок.Добавить(СтрокаТабПарам.Кол1);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если МассивОшибок.Количество() > 0 Тогда
		Если ПроверятьВхождение Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что в панели разделов будут содержаться следующие элементы: %1");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что в панели разделов не будут содержаться следующие элементы: %1");
		КонецЕсли;	 
		
		Стр = "";
		Для Каждого Элем Из МассивОшибок Цикл
			Стр = Стр + Символы.ПС + Элем;
		КонецЦикла;	 
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Стр);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И панель разделов не содержит пункты меню
//@ПанельРазделовНеСодержитПунктыМеню(ТабПарам)
Процедура ПанельРазделовНеСодержитПунктыМеню(ТабПарам) Экспорт
	ПанельРазделовСодержитПунктыМеню(ТабПарам,Ложь);
КонецПроцедуры

&НаКлиенте
//И панель функций равна
//@ПанельФункцийРавна(ТабПарам)
Процедура ПанельФункцийРавна(ТабПарам) Экспорт
	ПанельФункций = Ванесса.ПанельФункций();
	ОбъектыПанелиФункций = ПанельФункций.НайтиОбъекты();
	
	Если ТабПарам.Количество() <> ОбъектыПанелиФункций.Количество() Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что в панели функций будет <%1> элементов, а найдено <%2> элементов.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТабПарам.Количество());
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОбъектыПанелиФункций.Количество());
		Стр = "";
		Для Каждого ЭлемОбъектыПанелиРазделов Из ОбъектыПанелиФункций Цикл
			Стр = Стр + Символы.ПС + ЭлемОбъектыПанелиРазделов.ТекстЗаголовка;
		КонецЦикла;	 
		ТекстСообщения = ТекстСообщения + Стр;
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Ном = -1;
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		Ном = Ном + 1;
		ОбъектПанелиРазделов = ОбъектыПанелиФункций[Ном];
		
		Если НРег(СтрокаТабПарам.Кол1) <> НРег(ОбъектПанелиРазделов.ТекстЗаголовка) Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что в панели функций будет элемент <%1> , а был найден элемент <%2>.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаТабПарам.Кол1);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОбъектПанелиРазделов.ТекстЗаголовка);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры

&НаКлиенте
//И панель функций содержит пункты меню
//@ПанельФункцийСодержитПунктыМеню(ТабПарам)
Процедура ПанельФункцийСодержитПунктыМеню(ТабПарам,ПроверятьВхождение = Истина) Экспорт
	ПанельФункций = Ванесса.ПанельФункций();
	ОбъектыПанелиФункций  = ПанельФункций.НайтиОбъекты();
	ЗаголовкиЭлементов    = ЗаголовкиЭлементовИзМассиваОбъектов(ОбъектыПанелиФункций,Истина);
	
	МассивОшибок = Новый Массив;
	
	Ном = -1;
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		Ном = Ном + 1;
		ОжидаемыйЗаголовокЭлемента = НРег(СтрокаТабПарам.Кол1);
		
		Если ПроверятьВхождение Тогда
			Если ЗаголовкиЭлементов.Найти(ОжидаемыйЗаголовокЭлемента) = Неопределено Тогда
				МассивОшибок.Добавить(СтрокаТабПарам.Кол1);
			КонецЕсли;	 
		Иначе	
			Если ЗаголовкиЭлементов.Найти(ОжидаемыйЗаголовокЭлемента) <> Неопределено Тогда
				МассивОшибок.Добавить(СтрокаТабПарам.Кол1);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если МассивОшибок.Количество() > 0 Тогда
		Если ПроверятьВхождение Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что в панели функций будут содержаться следующие элементы: %1");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что в панели функций не будут содержаться следующие элементы: %1");
		КонецЕсли;	 
		
		Стр = "";
		Для Каждого Элем Из МассивОшибок Цикл
			Стр = Стр + Символы.ПС + Элем;
		КонецЦикла;	 
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Стр);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И панель функций не содержит пункты меню
//@ПанельФункцийНеСодержитПунктыМеню(ТабПарам)
Процедура ПанельФункцийНеСодержитПунктыМеню(ТабПарам) Экспорт
	ПанельФункцийСодержитПунктыМеню(ТабПарам,Ложь);
КонецПроцедуры

&НаКлиенте
//И группа "ЗаголовокГруппы" в панели функций содержит пункты меню
//@ГруппаВПанелиФункцийСодержитПунктыМеню(Парам01,ТабПарам)
Процедура ГруппаВПанелиФункцийСодержитПунктыМеню(ИмяРеквизита,ТабПарам,ПоискПоИмени = Ложь,ПроверятьВхождение = Истина) Экспорт
	ПанельФункций         = Ванесса.ПанельФункций();
	Если ПоискПоИмени Тогда
		Группа = ПанельФункций.НайтиОбъект(Тип("ТестируемаяГруппаКомандногоИнтерфейса"),,ИмяРеквизита);
	Иначе	
		Группа = ПанельФункций.НайтиОбъект(Тип("ТестируемаяГруппаКомандногоИнтерфейса"),ИмяРеквизита);
	КонецЕсли;	 
	
	Если Группа = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Группа <%1> не найдена в панели функций.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ОбъектыПанелиФункций  = Группа.НайтиОбъекты();
	ЗаголовкиЭлементов    = ЗаголовкиЭлементовИзМассиваОбъектов(ОбъектыПанелиФункций,Истина);
	
	МассивОшибок = Новый Массив;
	
	Ном = -1;
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		Ном = Ном + 1;
		ОжидаемыйЗаголовокЭлемента = НРег(СтрокаТабПарам.Кол1);
		
		Если ПроверятьВхождение Тогда
			Если ЗаголовкиЭлементов.Найти(ОжидаемыйЗаголовокЭлемента) = Неопределено Тогда
				МассивОшибок.Добавить(СтрокаТабПарам.Кол1);
			КонецЕсли;	 
		Иначе	
			Если ЗаголовкиЭлементов.Найти(ОжидаемыйЗаголовокЭлемента) <> Неопределено Тогда
				МассивОшибок.Добавить(СтрокаТабПарам.Кол1);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если МассивОшибок.Количество() > 0 Тогда
		Если ПроверятьВхождение Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что в группе <%1> панели функций будут содержаться следующие элементы: %2");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что в группе <%1> панели функций не будут содержаться следующие элементы: %2");
		КонецЕсли;	 
		
		Стр = "";
		Для Каждого Элем Из МассивОшибок Цикл
			Стр = Стр + Символы.ПС + Элем;
		КонецЦикла;	 
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Стр);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И группа с именем "ИмяГруппы" в панели функций содержит пункты меню
//@ГруппаСИменемВПанелиФункцийСодержитПунктыМеню(Парам01,ТабПарам)
Процедура ГруппаСИменемВПанелиФункцийСодержитПунктыМеню(ИмяРеквизита,ТабПарам) Экспорт
	ГруппаВПанелиФункцийСодержитПунктыМеню(ИмяРеквизита,ТабПарам,Истина,Истина);
КонецПроцедуры

&НаКлиенте
//И группа "ЗаголовокГруппы" в панели функций  не содержит пункты меню
//@ГруппаВПанелиФункцийНеСодержитПунктыМеню(Парам01,ТабПарам)
Процедура ГруппаВПанелиФункцийНеСодержитПунктыМеню(ИмяРеквизита,ТабПарам,ПоискПоИмени = Ложь) Экспорт
	ГруппаВПанелиФункцийСодержитПунктыМеню(ИмяРеквизита,ТабПарам,ПоискПоИмени,Ложь);
КонецПроцедуры

&НаКлиенте
//И группа с именем "ИмяГруппы" в панели функций  не содержит пункты меню
//@ГруппаСИменемВПанелиФункцийНеСодержитПунктыМеню(Парам01,ТабПарам)
Процедура ГруппаСИменемВПанелиФункцийНеСодержитПунктыМеню(ИмяРеквизита,ТабПарам) Экспорт
	ГруппаВПанелиФункцийСодержитПунктыМеню(ИмяРеквизита,ТабПарам,Истина,Ложь);
КонецПроцедуры

&НаКлиенте
//И я нажимаю на кнопку Текущего месяца
//@ЯНажимаюНаКнопкуТекущегоМесяца()
Процедура ЯНажимаюНаКнопкуТекущегоМесяца() Экспорт
	ТекущийМесяцПрописью = Формат(ТекущаяДата(),"DF=MMMM");
	Кнопка = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ТекущийМесяцПрописью, Ложь);
	Кнопка.Нажать()
КонецПроцедуры


&НаКлиенте
//И я заполняю таблицу "ТабличнаяЧасть1" данными
//@ЯЗаполняюТаблицуДанными(Парам01,ТабПарам)
Процедура ЯЗаполняюТаблицуДанными(ИмяТаблицы,ТабПарам) Экспорт
	Таблица = НайтиТЧПоИмени(ИмяТаблицы);
	
	Если ТабПарам.Количество() < 2 Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Должны быть переданы минимум 2 строки. Первая строка с именами колонок, вторая и следующие - данные для проверки.");		
	КонецЕсли;	 
	
	Колонки = ТабПарам[0];
	РеквизитыТаблицы = Новый Соответствие;
	Для Каждого СтрокаКолонки Из Колонки Цикл
		ИмяКолонки = СтрокаКолонки.Значение;
		РеквизитТаблицы = Таблица.НайтиОбъект(,ИмяКолонки);
		Если РеквизитТаблицы = Неопределено Тогда
			//поиск по имени
			РеквизитТаблицы = Таблица.НайтиОбъект(,,ИмяКолонки);
		КонецЕсли;	 
		
		Если РеквизитТаблицы = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1>  нет колонки <%2>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяКолонки); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		РеквизитыТаблицы.Вставить(ИмяКолонки,РеквизитТаблицы);
	КонецЦикла;	 
	
	Для Ккк = 1 По ТабПарам.Количество()-1 Цикл
		Таблица.ДобавитьСтроку();
		СтрокаТабПарам = ТабПарам[Ккк];
		НомерКолонки = 0;
		Для Каждого СтрокаКолонки Из Колонки Цикл
			НомерКолонки = НомерКолонки + 1;
			ИмяКолонки = СтрокаКолонки.Значение;
			РеквизитТаблицы = РеквизитыТаблицы[ИмяКолонки];
			РеквизитТаблицы.Активизировать();
			//РеквизитТаблицы.ВвестиТекст(СтрокаТабПарам[XMLСтрока("Кол" + НомерКолонки)]);
			Ванесса.ВвестиВПолеТекст(РеквизитТаблицы,СтрокаТабПарам[XMLСтрока("Кол" + НомерКолонки)]);
		КонецЦикла;	 
	КонецЦикла;	
	
	ПолучилосьЗавершитьРедактирование = Истина;
	Попытка
		Таблица.ЗакончитьРедактированиеСтроки();
	Исключение
		ПолучилосьЗавершитьРедактирование = Ложь;
	КонецПопытки;
	
	
	
КонецПроцедуры


&НаКлиенте
//И у текущего элемента формы я вызываю запись содержимого в файл
//@УТекущегоЭлементаФормыЯВызываюЗаписьСодержимогоВФайл()
Процедура УТекущегоЭлементаФормыЯВызываюЗаписьСодержимогоВФайл() Экспорт
    АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
    АктивнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
	
	ТекущееПоле = АктивнаяФорма.ПолучитьТекущийЭлемент();
	
	Если ТекущееПоле = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не найден активный элемент формы.");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ТекущееПоле.ЗаписатьСодержимоеВФайл();
КонецПроцедуры



&НаКлиенте
//И в таблице "ИмяТаблицы" я активизирую колонку "ИмяКолонки" в группе "ИмяГруппы"
//@ВТаблицеЯАктивизируюКолонкуВГруппе(Парам01,Парам02,Парам03)
Процедура ВТаблицеЯАктивизируюКолонкуВГруппе(ИмяТаблицы,ИмяКолонки,ИмяГруппы,ИскатьКолонкуПоИмени = Ложь) Экспорт
	Таблица = НайтиТЧПоИмени(ИмяТаблицы);
	ГруппаКолонок = Таблица.НайтиОбъект(Тип("ТестируемаяГруппаФормы"),ИмяГруппы);
	
	Если ГруппаКолонок = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Группа колонок <%1> в таблице <%2> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяГруппы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяТаблицы);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если ИскатьКолонкуПоИмени Тогда
		НужнаяКолонка = ГруппаКолонок.НайтиОбъект(Тип("ТестируемоеПолеФормы"),,ИмяКолонки);
	Иначе	
		НужнаяКолонка = ГруппаКолонок.НайтиОбъект(Тип("ТестируемоеПолеФормы"),ИмяКолонки);
	КонецЕсли;	 
	Если НужнаяКолонка = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> в группе колонок <%2> колонка <%3> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяГруппы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ИмяКолонки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	НужноеИмяПоля = НужнаяКолонка.Имя;
	ТекущийРежимРедактирование = Неопределено;
	Если Ванесса.Версия8312ИлиВыше Тогда
		ТекущийРежимРедактирование = Таблица.ТекущийРежимРедактирование();
	КонецЕсли;	 
	
	НужнаяКолонка.Активизировать();
	ПроверитьЧтоПолеТаблицыАктивизировалось(Таблица,ИмяТаблицы,ИмяКолонки,НужноеИмяПоля,ТекущийРежимРедактирование);
	
КонецПроцедуры

&НаКлиенте
//И в таблице "ИмяТаблицы" я активизирую колонку с именем "ИмяКолонки" в группе "ИмяГруппы"
//@ВТаблицеЯАктивизируюКолонкуСИменемВГруппе(Парам01,Парам02,Парам03)
Процедура ВТаблицеЯАктивизируюКолонкуСИменемВГруппе(ИмяТаблицы,ИмяКолонки,ИмяГруппы) Экспорт
	ВТаблицеЯАктивизируюКолонкуВГруппе(ИмяТаблицы,ИмяКолонки,ИмяГруппы,Истина);
КонецПроцедуры



&НаКлиенте
//И в таблице "ИмяТаблицы" в текущее поле я ввожу текст "НужныйМнеТекст"
//@ВТаблицеВТекущееПолеЯВвожуТекст(Парам01,Парам02)
Процедура ВТаблицеВТекущееПолеЯВвожуТекст(ИмяТаблицы,Текст) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТаблицы);
	ПолеРеквизит = ТЧ.ПолучитьТекущийЭлемент();
	ИмяРеквизита = ПолеРеквизит.Имя;
	
	Текст = ПолучитьКорректныйТекстДляВставкиВПоле(Текст);
	
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			
			ТаблицаВРежимеРедактирования = ТЧ.ТекущийРежимРедактирование();
			Если Не ТаблицаВРежимеРедактирования Тогда
				ТЧ.ИзменитьСтроку();
			КонецЕсли;	 
			
			СделатьДействияПриЗаписиВидео();
			//ПолеРеквизит.ВвестиТекст(Текст);
			Ванесса.ВвестиВПолеТекст(ПолеРеквизит,Текст);
			СделатьДействияПриЗаписиHTML();
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Ванесса.УстановитьТекстИнструкции("И в поле """ + ИмяРеквизита + """ я ввожу """ + Текст + """");
КонецПроцедуры



&НаКлиенте
//И я запоминаю версию конфигурации "ИмяКонфигурации" как "Версия"
//@ЯЗапоминаюВерсиюКонфигурацииКак(Парам01,Парам02)
Процедура ЯЗапоминаюВерсиюКонфигурацииКак(ИмяКонфигурации,ИмяПеременной) Экспорт
	ГлавноеОкноТестируемого = Ванесса.ПолучитьГлавноеОкноИзТестовоеПриложение();
	Попытка
	    ГлавноеОкноТестируемого.ВыполнитьКоманду("e1cib/list/РегистрСведений.ВерсииПодсистем");
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось открыть форму регистра сведений <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1","ВерсииПодсистем");
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	ТабПарам = Новый Массив;
	
	Структура = Новый Структура;
	Структура.Вставить("Кол1","Имя подсистемы");
	ТабПарам.Добавить(Структура);
	
	Структура = Новый Структура;
	Структура.Вставить("Кол1",ИмяКонфигурации);
	ТабПарам.Добавить(Структура);
	
	Попытка
		ВТаблицеЯПерехожуКСтроке("Список", ТабПарам);
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось найти подсистему <%1> в регистре версии подсистем.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1","ИмяКонфигурации");
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	ТаблицаСписок    = НайтиТЧПоИмени("Список");
	ВыделенныеСтроки = ТаблицаСписок.ПолучитьВыделенныеСтроки();
	
	Если ВыделенныеСтроки.Количество() <> 1 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось получить <%1> строк в таблице <%2>, а было получено <%3> строк.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1","1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2","Список");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ВыделенныеСтроки.Количество());
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ЗначениеВерсии = ВыделенныеСтроки[0]["Версия"];
	
	Попытка
		Контекст.Вставить(ИмяПеременной,ЗначениеВерсии);
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось сохранить значение <%1> в переменную <%2>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ЗначениеВерсии);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	//закроем окно РС
	Попытка
		АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
		АктивноеОкно.Закрыть();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

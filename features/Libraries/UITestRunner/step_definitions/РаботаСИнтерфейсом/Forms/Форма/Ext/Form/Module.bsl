	//начало текста модуля  
&НаКлиенте
Перем Ванесса;
 
&НаКлиенте
Перем Контекст Экспорт;
&НаКлиенте
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
Перем ТекущийЭлементДляРаботы;

&НаКлиенте
Перем ВерсияПлатформыБольшеИлиРавна839;

&НаКлиенте
Перем ТабПарамОбработкаОжидания;

// Делает отключение модуля
&НаКлиенте
Функция ОтключениеМодуля() Экспорт

	Ванесса = Неопределено;
	Контекст = Неопределено;
	КонтекстСохраняемый = Неопределено;

КонецФункции

&НаКлиенте
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	
	СистемнаяИнформация              = Новый СистемнаяИнформация;
	ВерсияПлатформыБольшеИлиРавна839 = Ванесса.ВерсияПриложенияБольшеИлиРавнаЧемЗаданнаяКлиент(
	                                         СистемнаяИнформация.ВерсияПриложения,"8.3.9.0");
	
	
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧИзВыпадающегоСпискаСЗаголовкомЯВыбираюСВыбором(Парам01,Парам02,Парам03)","ВОткрытойФормеВТЧИзВыпадающегоСпискаСЗаголовкомЯВыбираюСВыбором","И В открытой форме в ТЧ ""ИмяТаблицы"" из выпадающего списка с заголовком ""Заголовок поля"" я выбираю ""ЗначениеПоля"" с выбором",,"");//устаревшее
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧИзВыпадающегоСпискаЯВыбираюСВыбором(Парам01,Парам02,Парам03)","ВОткрытойФормеВТЧИзВыпадающегоСпискаЯВыбираюСВыбором","И В открытой форме в ТЧ ""ИмяТаблицы"" из выпадающего списка ""Заголовок поля"" я выбираю ""ЗначениеПоля"" с выбором",,"");//устаревшее
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧИзВыпадающегоСпискаЯВыбираюСВыбором(Парам01,Парам02,Парам03)","ВТЧИзВыпадающегоСпискаЯВыбираюСВыбором","И В таблице ""ИмяТаблицы"" из выпадающего списка ""Заголовок поля"" я выбираю ""ЗначениеПоля"" с выбором",,);
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВФормеВТЧЯЗавершаюРедактированиеСтроки(Парам01,Парам02)","ВФормеВТЧЯЗавершаюРедактированиеСтроки","И В форме ""ИмяФормы"" в таблице ""ИмяТаблицы"" я завершаю редактирование строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯЗавершаюРедактированиеСтроки(Парам01)","ВТЧЯЗавершаюРедактированиеСтроки","И В таблице ""ИмяТаблицы"" я завершаю редактирование строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯЗавершаюРедактированиеСтроки(Парам01)","ВТаблицеЯЗавершаюРедактированиеСтроки","И В таблице ""ИмяТаблицы"" я завершаю редактирование строки","Завершение редактирования строки. ","UI.Таблицы.Редактирование строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯОтменяюРедактированиеСтроки(Парам01)","ВТаблицеЯОтменяюРедактированиеСтроки","И В таблице ""ИмяТаблицы"" я отменяю редактирование строки","Отмена редактирования строки.","UI.Таблицы.Редактирование строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗавершаюРедактированиеСтроки()","ЯЗавершаюРедактированиеСтроки","И я завершаю редактирование строки","Завершение редактирования строки текущей таблицы.","UI.Таблицы.Редактирование строки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизитаСЗаголовком(Парам01,Парам02)","ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизитаСЗаголовком","И В открытой форме в ТЧ ""ИмяТаблицы"" я нажимаю кнопку выбора у реквизита с заголовком ""ИмяКолонки""","","");//устаревшее
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизита(Парам01,Парам02)","ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизита","В открытой форме в ТЧ ""ИмяТаблицы"" я нажимаю кнопку выбора у реквизита ""ИмяКолонки""","","");//устаревшее
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯНажимаюКнопкуВыбораУРеквизита(Парам01,Парам02)","ВТЧЯНажимаюКнопкуВыбораУРеквизита","И В таблице ""ИмяТаблицы"" я нажимаю кнопку выбора у реквизита ""ИмяКолонки""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯНажимаюКнопкуВыбораУРеквизита(Парам01,Парам02)","ВТаблицеЯНажимаюКнопкуВыбораУРеквизита","И В таблице ""ИмяТаблицы"" я нажимаю кнопку выбора у реквизита ""Заголовок колонки""","Нажатие кнопки выбора у реквизита в таблице","UI.Таблицы.Поля.Кнопка выбора");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯНажимаюКнопкуВыбораУРеквизитаСИменем(Парам01,Парам02)","ВТаблицеЯНажимаюКнопкуВыбораУРеквизитаСИменем","И В таблице ""ИмяТаблицы"" я нажимаю кнопку выбора у реквизита с именем 'ИмяКолонки'","Нажатие кнопки выбора у реквизита в таблице","UI.Таблицы.Поля.Кнопка выбора");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯНажимаюКнопкуОчиститьУПоля(Парам01,Парам02)","ВТаблицеЯНажимаюКнопкуОчиститьУПоля","И В таблице ""ИмяТаблицы"" я нажимаю кнопку очистить у поля ""Заголовок колонки""","Нажатие кнопки очистить у поля в таблице","UI.Таблицы.Поля.Очистить поле");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯНажимаюКнопкуОчиститьУПоляСИменем(Парам01,Парам02)","ВТаблицеЯНажимаюКнопкуОчиститьУПоляСИменем","И В таблице ""ИмяТаблицы"" я нажимаю кнопку очистить у поля с именем 'ИмяКолонки'","Нажатие кнопки очистить у поля в таблице","UI.Таблицы.Поля.Очистить поле");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуНаОдинУровеньВниз(Парам01)","ВТаблицеЯПерехожуНаОдинУровеньВниз"  ,"И в таблице  ""ИмяТаблицы"" я перехожу на один уровень вниз" ,"Переход на один уровень вниз в списке в режиме ""Иерархический список""" ,"UI.Таблицы.Иерархический список");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуНаОдинУровеньВверх(Парам01)","ВТаблицеЯПерехожуНаОдинУровеньВверх","И в таблице  ""ИмяТаблицы"" я перехожу на один уровень вверх","Переход на один уровень вверх в списке в режиме ""Иерархический список""","UI.Таблицы.Иерархический список");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯНачинаюРедактированиеСтроки(Парам01)","ВТаблицеЯНачинаюРедактированиеСтроки","И в таблице  ""ИмяТаблицы"" я начинаю редактирование строки","Начало редактирования строки","UI.Таблицы.Редактирование строки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВТаблицеЯМеняюПометкуУдаленияСтроки(Парам01)",
		"ВТаблицеЯМеняюПометкуУдаленияСтроки",
		"И в таблице 'Список' я меняю пометку удаления строки",
		"Переключает пометку удаления у текущей строки таблицы если это возможно.",
		"UI.Таблицы.Пометка строки на удаление / Снятие пометки на удаление");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВниз(Парам01)","ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВниз","И В открытой форме в ТЧ ""ИмяТаблицы"" я перехожу на одну строку вниз","","");//устаревшее
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВверх(Парам01)","ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВверх","И В открытой форме в ТЧ ""ИмяТаблицы"" я перехожу на одну строку вверх","","");//устаревшее
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВнизСВыделением(Парам01)","ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВнизСВыделением","И В открытой форме в ТЧ ""ИмяТаблицы"" я перехожу на одну строку вниз с выделением");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВверхСВыделением(Парам01)","ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВверхСВыделением","И В открытой форме в ТЧ ""ИмяТаблицы"" я перехожу на одну строку вверх с выделением");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯПерехожуНаОднуСтрокуВнизСВыделением(Парам01)","ВТЧЯПерехожуНаОднуСтрокуВнизСВыделением","И В таблице  ""ИмяТаблицы"" я перехожу на одну строку вниз с выделением");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуНаОднуСтрокуВнизСВыделением(Парам01)","ВТаблицеЯПерехожуНаОднуСтрокуВнизСВыделением","И В таблице  ""ИмяТаблицы"" я перехожу на одну строку вниз с выделением", "Переходим в таблице на следующую строку с выделением", "UI.Таблицы.Переход к строке");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯПерехожуНаОднуСтрокуВверхСВыделением(Парам01)","ВТЧЯПерехожуНаОднуСтрокуВверхСВыделением","И В таблице  ""ИмяТаблицы"" я перехожу на одну строку вверх с выделением");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуНаОднуСтрокуВверхСВыделением(Парам01)","ВТаблицеЯПерехожуНаОднуСтрокуВверхСВыделением","И В таблице  ""ИмяТаблицы"" я перехожу на одну строку вверх с выделением", "Переходим в таблице на предыдущую строку с выделением", "UI.Таблицы.Переход к строке");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯПерехожуНаПервуюСтроку(Парам01)","ВОткрытойФормеВТЧЯПерехожуНаПервуюСтроку","И В открытой форме в ТЧ ""ИмяТаблицы"" я перехожу на первую строку");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯПерехожуНаПоследнююСтроку(Парам01)","ВОткрытойФормеВТЧЯПерехожуНаПоследнююСтроку","И В открытой форме в ТЧ ""ИмяТаблицы"" я перехожу на последнюю строку");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯПерехожуНаПервуюСтроку(Парам01)","ВТЧЯПерехожуНаПервуюСтроку","И В таблице  ""ИмяТаблицы"" я перехожу на первую строку");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯПерехожуНаПоследнююСтроку(Парам01)","ВТЧЯПерехожуНаПоследнююСтроку","И В таблице  ""ИмяТаблицы"" я перехожу на последнюю строку");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУдаляюВсеСтрокиТаблицы(Парам01)","ЯУдаляюВсеСтрокиТаблицы","И я удаляю все строки таблицы ""ИмяТаблицы""","Очистить таблицу","UI.Таблицы.Удаление строк");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеСИменемЯУдаляюТекущуюСтроку(Парам01)","ВТаблицеСИменемЯУдаляюТекущуюСтроку","И в таблице с именем 'ИмяТаблицы' я удаляю текущую строку");
	//Дубль: я удаляю  строку
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯУдаляюТекущуюСтроку(Парам01)","ВТаблицеЯУдаляюТекущуюСтроку","И в таблице ""ИмяТаблицы"" я удаляю текущую строку");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯПерехожуНаОднуСтрокуВниз(Парам01)","ВТЧЯПерехожуНаОднуСтрокуВниз","И в таблице  ""ИмяТаблицы"" я перехожу на одну строку вниз");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуНаОднуСтрокуВниз(Парам01)","ВТаблицеЯПерехожуНаОднуСтрокуВниз","И в таблице  ""ИмяТаблицы"" я перехожу на одну строку вниз", "Переходим в таблице на следующую строку", "UI.Таблицы.Переход к строке");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯПерехожуНаОднуСтрокуВверх(Парам01)","ВТЧЯПерехожуНаОднуСтрокуВверх","И в таблице  ""ИмяТаблицы"" я перехожу на одну строку вверх");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуНаОднуСтрокуВверх(Парам01)","ВТаблицеЯПерехожуНаОднуСтрокуВверх","И в таблице  ""ИмяТаблицы"" я перехожу на одну строку вверх", "Переходим в таблице на предыдущую строку", "UI.Таблицы.Переход к строке");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВПолеСЗаголовкомЯВвожуТекст(Парам01,Парам02)","ВОткрытойФормеВПолеСЗаголовкомЯВвожуТекст","И В открытой форме в поле с заголовком ""Заголовок поля"" я ввожу текст ""ЗначениеПоля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВПолеЯВвожуТекст(Парам01,Парам02)","ВОткрытойФормеВПолеЯВвожуТекст","И В открытой форме в поле ""Заголовок поля"" я ввожу текст ""ЗначениеПоля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуТекст(Парам01,Парам02)","ВПолеЯВвожуТекст","И в поле ""Заголовок поля"" я ввожу текст ""ЗначениеПоля""","Вводит текст в поле. Также вводит текст в форматированный документ и поле HTML документа.","UI.Формы.Поля.Ввод текста");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляЯПерехожуКДате(Парам01,Парам02)","УПоляЯПерехожуКДате","И у поля ""Заголовок поля"" я перехожу к дате ""08.04.1981""","Делает переход к дате в поля календаря. Если переход делается через переменную контекста, то в ней должно лежать значение типа Дата.","UI.Формы.Календарь");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляСИменемЯПерехожуКДате(Парам01,Парам02)","УПоляСИменемЯПерехожуКДате","И у поля с именем 'ИмяПоля' я перехожу к дате ""08.04.1981""","Делает переход к дате в поля календаря","UI.Формы.Календарь");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляКалендаряЯВыбираюДату(Парам01)","УПоляКалендаряЯВыбираюДату","И у поля календаря ""Заголовок поля"" я выбираю дату","Делает выбор даты, которая установлена в календаре","UI.Формы.Календарь");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляКалендаряСИменемЯВыбираюДату(Парам01)","УПоляКалендаряСИменемЯВыбираюДату","И у поля календаря с именем 'ИмяПоля' я выбираю дату","Делает выбор даты, которая установлена в календаре","UI.Формы.Календарь");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуТекущуюДату(Парам01)","ВПолеЯВвожуТекущуюДату","И в поле ""Заголовок поля"" я ввожу текущую дату","Вводит текстовое представление значения текущей даты в поле. Например ""01.01.2018"".","UI.Формы.Поля.Ввод даты");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеСИменемЯВвожуТекущуюДату(Парам01)","ВПолеСИменемЯВвожуТекущуюДату","И в поле с именем 'ИмяПоля' я ввожу текущую дату","Вводит текстовое представление значения текущей даты в поле. Например ""01.01.2018"".","UI.Формы.Поля.Ввод даты");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюНаКнопкуТекущегоМесяца()","ЯНажимаюНаКнопкуТекущегоМесяца","И я нажимаю на кнопку текущего месяца","Нажимает на кнопку текущего месяца в форме ввода даты.","UI.Формы.Поля.Ввод даты");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуНачалоТекущегоМесяца(Парам01)","ВПолеЯВвожуНачалоТекущегоМесяца","И в поле ""Заголовок поля"" я ввожу начало текущего месяца","Вводит в поле текстовое представление значения даты равной началу текущего месяца. Например ""01.01.2018"".","UI.Формы.Поля.Ввод даты");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуКонецТекущегоМесяца(Парам01)","ВПолеЯВвожуКонецТекущегоМесяца","И в поле ""Заголовок поля"" я ввожу конец текущего месяца","Вводит в поле текстовое представление значения даты равной концу текущего месяца. Например ""31.01.2018"".","UI.Формы.Поля.Ввод даты");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуНачалоСледующегоМесяца(Парам01)","ВПолеЯВвожуНачалоСледующегоМесяца","И в поле ""Заголовок поля"" я ввожу начало следующего месяца","Вводит в поле текстовое представление значения даты равной началу следующего месяца. Например ""01.01.2018"".","UI.Формы.Поля.Ввод даты");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуКонецСледующегоМесяца(Парам01)","ВПолеЯВвожуКонецСледующегоМесяца","И в поле ""Заголовок поля"" я ввожу конец следующего месяца","Вводит в поле текстовое представление значения даты равной концу следующего месяца. Например ""31.01.2018"".","UI.Формы.Поля.Ввод даты");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеСИменемЯВвожуНачалоТекущегоМесяца(Парам01)","ВТаблицеВПолеСИменемЯВвожуНачалоТекущегоМесяца","И в таблице ""ИмяТаблицы"" в поле с именем 'ИмяПоля' я ввожу начало текущего месяца","Вводит в поле таблицы текстовое представление значения даты равной началу текущего месяца. Например ""01.01.2018"".","UI.Формы.Поля.Ввод даты");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеСИменемЯВвожуКонецТекущегоМесяца(Парам01)","ВТаблицеВПолеСИменемЯВвожуКонецТекущегоМесяца","И в таблице ""ИмяТаблицы"" в поле с именем 'ИмяПоля' я ввожу конец текущего месяца","Вводит в поле таблицы текстовое представление значения даты равной концу текущего месяца. Например ""31.01.2018"".","UI.Формы.Поля.Ввод даты");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеСИменемЯВвожуНачалоСледующегоМесяца(Парам01)","ВТаблицеВПолеСИменемЯВвожуНачалоСледующегоМесяца","И в таблице ""ИмяТаблицы"" в поле с именем 'ИмяПоля' я ввожу начало следующего месяца","Вводит в поле таблицы текстовое представление значения даты равной началу следующего месяца. Например ""01.01.2018"".","UI.Формы.Поля.Ввод даты");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеСИменемЯВвожуКонецСледующегоМесяца(Парам01)","ВТаблицеВПолеСИменемЯВвожуКонецСледующегоМесяца","И в таблице ""ИмяТаблицы"" в поле с именем 'ИмяПоля' я ввожу конец следующего месяца","Вводит в поле таблицы текстовое представление значения даты равной концу следующего месяца. Например ""31.01.2018"".","UI.Формы.Поля.Ввод даты");
	
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуТекущуюДатуИТекущееВремя(Парам01)","ВПолеЯВвожуТекущуюДатуИТекущееВремя","И в поле ""Заголовок поля"" я ввожу текущую дату и текущее время","Вводит текстовое представление значения текущей даты и времени в поле. Например ""01.01.2018 12:00:00"".","UI.Формы.Поля.Ввод даты");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеСИменемЯВвожуТекущуюДатуИТекущееВремя(Парам01)","ВПолеСИменемЯВвожуТекущуюДатуИТекущееВремя","И в поле с именем 'ИмяПоля' я ввожу текущую дату и текущее время","Вводит текстовое представление значения текущей даты и времени в поле. Например ""01.01.2018 12:00:00"".","UI.Формы.Поля.Ввод даты");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуЗначениеВыражения(Парам01,Парам02)","ВПолеЯВвожуЗначениеВыражения","И в поле ""Заголовок поля"" я ввожу значение выражения ""1+1""","Вычисляет выражение и вводит результат в поле","UI.Формы.Поля.Результат выражения в поле");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеСИменемЯВвожуЗначениеВыражения(Парам01,Парам02)","ВПолеСИменемЯВвожуЗначениеВыражения","И в поле с именем 'ИмяПоля' я ввожу значение выражения ""1+1""","Вычисляет выражение и вводит результат в поле","UI.Формы.Поля.Результат выражения в поле");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеЯВвожуЗначениеВыражения(Парам01,Парам02,Парам03)","ВТаблицеВПолеЯВвожуЗначениеВыражения","И в таблице ""ИмяТаблицы"" в поле 'Заголовок поля' я ввожу значение выражения ""Выражение""","Вычисляет выражение и вводит результат в поле таблицы","UI.Таблицы.Поля.Результат выражения в поле");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолесИменемЯВвожуЗначениеВыражения(Парам01,Парам02,Парам03)","ВТаблицеВПолесИменемЯВвожуЗначениеВыражения","И в таблице ""ИмяТаблицы"" в поле с именем 'ИмяПоля' я ввожу значение выражения ""Выражение""","Вычисляет выражение и вводит результат в поле таблицы","UI.Таблицы.Поля.Результат выражения в поле");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УТабличногоДокументаСИменемЯПерехожуКЯчейке(Парам01,Парам02)","УТабличногоДокументаСИменемЯПерехожуКЯчейке","И у табличного документа с именем 'РеквизитТабличныйДокумент' я перехожу к ячейке ""R4C2""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТабличномДокументеЯПерехожуКЯчейке(Парам01,Парам02)","ВТабличномДокументеЯПерехожуКЯчейке","И в табличном документе ""РеквизитТабличныйДокумент"" я перехожу к ячейке ""АдресЯчейки""","Делает нужную ячейку табличного документа активной. Можно указать диапазон ячеек.","UI.Табличный документ.Переход к ячейке");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТабличномДокументеЯчейкаСАдресомРавна(Парам01,Парам02,Парам03)","ВТабличномДокументеЯчейкаСАдресомРавна","И в табличном документе ""РеквизитТабличныйДокумент"" ячейка с адресом ""АдресЯчейки"" равна ""ЗначениеЯчейки""","Проверяет значение ячейки с указанным адресом.","UI.Табличный документ.Ячейки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТабличномДокументеЯчейкаСАдресомРавнаПоШаблону(Парам01,Парам02,Парам03)","ВТабличномДокументеЯчейкаСАдресомРавнаПоШаблону","И в табличном документе ""РеквизитТабличныйДокумент"" ячейка с адресом ""АдресЯчейки"" равна ""ЗначениеЯчейки"" по шаблону","Проверяет значение ячейки с указанным адресом. Допускается использовать символы *.","UI.Табличный документ.Ячейки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВТабличномДокументеВЯчейкеТекстНаходитсяВПределахГраницОбласти(Парам01,Парам02)",
		"ВТабличномДокументеВЯчейкеТекстНаходитсяВПределахГраницОбласти",
		"И в табличном документе 'ИмяРеквизита' в ячейке 'R1C1' текст находится в пределах границ области",
		"Проверяет, что текст в указанной области помещается в ее размеры, а не отображается символами #.
		|Если не указан параметр области, то проверяется текущая ячейка табличного документа.
		|Работает в платформе 8.3.25 и выше.",
		"UI.Табличный документ.Ячейки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВТабличномДокументеОбластьВходитВОбъединеннуюОбласть(Парам01,Парам02)",
		"ВТабличномДокументеОбластьВходитВОбъединеннуюОбласть",
		"И в табличном документе 'РеквизитТабличныйДокумент' область 'ИмяОбласти' входит в объединенную область",
		"Проверяет включение указанного диапазона (области) ячеек в объединенную область ячеек табличного документа.
		|Имя проверямой области задаётся в формате RNCN[:RMCM]. Если имя области не указано, то проверяется текущая ячейка.
		|Работает в платформе 8.3.25 и выше.",
		"UI.Табличный документ.Вхождение области (ячейки) в другую область");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВТабличномДокументеОбластьНеВходитВОбъединеннуюОбласть(Парам01,Парам02)",
		"ВТабличномДокументеОбластьНеВходитВОбъединеннуюОбласть",
		"И в табличном документе 'РеквизитТабличныйДокумент' область 'ИмяОбласти' не входит в объединенную область",
		"Проверяет включение указанного диапазона (области) ячеек в объединенную область ячеек табличного документа.
		|Имя проверямой области задаётся в формате RNCN[:RMCM]. Если имя области не указано, то проверяется текущая ячейка.
		|Работает в платформе 8.3.25 и выше.",
		"UI.Табличный документ.Вхождение области (ячейки) в другую область");

	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВТабличномДокументеЯПерехожуНаЯчеекВправо(Парам01,Парам02)", // Сниппет.
		"ВТабличномДокументеЯПерехожуНаЯчеекВправо", // Имя процедуры.
		"И в табличном документе ""РеквизитТабличныйДокумент"" я перехожу на ""ЧислоЯчеек"" ячеек вправо", // Представление теста.
		"Позволяет переместиться в табличном документе на нужное количество ячеек вправо относительно текущей ячейки.", // Описание.
		"UI.Табличный документ.Переход к ячейке"); // Раздел.
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВТабличномДокументеЯПерехожуНаЯчеекВлево(Парам01,Парам02)", // Сниппет.
		"ВТабличномДокументеЯПерехожуНаЯчеекВлево", // Имя процедуры.
		"И в табличном документе ""РеквизитТабличныйДокумент"" я перехожу на ""ЧислоЯчеек"" ячеек влево", // Представление теста.
		"Позволяет переместиться в табличном документе на нужное количество ячеек влево относительно текущей ячейки.", // Описание.
		"UI.Табличный документ.Переход к ячейке"); // Раздел.
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВТабличномДокументеЯПерехожуНаЯчеекВверх(Парам01,Парам02)", // Сниппет.
		"ВТабличномДокументеЯПерехожуНаЯчеекВверх", // Имя процедуры.
		"И в табличном документе ""РеквизитТабличныйДокумент"" я перехожу на ""ЧислоЯчеек"" ячеек вверх", // Представление теста.
		"Позволяет переместиться в табличном документе на нужное количество ячеек вверх относительно текущей ячейки.", // Описание.
		"UI.Табличный документ.Переход к ячейке"); // Раздел.
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВТабличномДокументеЯПерехожуНаЯчеекВниз(Парам01,Парам02)", // Сниппет.
		"ВТабличномДокументеЯПерехожуНаЯчеекВниз", // Имя процедуры.
		"И в табличном документе ""РеквизитТабличныйДокумент"" я перехожу на ""ЧислоЯчеек"" ячеек вниз", // Представление теста.
		"Позволяет переместиться в табличном документе на нужное количество ячеек вниз относительно текущей ячейки.", // Описание.
		"UI.Табличный документ.Переход к ячейке"); // Раздел.
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВТабличномДокументеВМенюРасшифровкиЯВыбираю(Парам01,Парам02)",
		"ВТабличномДокументеВМенюРасшифровкиЯВыбираю",
		"И в табличном документе 'ИмяРеквизита' в меню расшифровки я выбираю 'ПунктМеню'",
		"Выбирает пункт меню в расшифровке табличного документа.
		|Допускается указывать как строковое представление пункта меню, так и его номер.
		|Работает в платформе 8.3.25 и выше.",
		"UI.Табличный документ.Расшифровка");

	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УТабличногоДокументаСИменемЯВвожуТекст(Парам01,Парам02)","УТабличногоДокументаСИменемЯВвожуТекст","И у табличного документа с именем 'РеквизитТабличныйДокумент' я ввожу текст ""МойТекст""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТабличныйДокументЯВвожуТекст(Парам01,Парам02)","ВТабличныйДокументЯВвожуТекст","И в табличный документ ""РеквизитТабличныйДокумент"" я ввожу текст ""МойТекст""","Вводит текст в текщую ячейку табличного документа","UI.Табличный документ.Ячейки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УТабличногоДокументаСИменемЯДелаюДвойнойКликНаТекущейЯчейке(Парам01)","УТабличногоДокументаСИменемЯДелаюДвойнойКликНаТекущейЯчейке","И у табличного документа с именем 'РеквизитТабличныйДокумент' я делаю двойной клик на текущей ячейке","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТабличномДокументеЯДелаюДвойнойКликНаТекущейЯчейке(Парам01)","ВТабличномДокументеЯДелаюДвойнойКликНаТекущейЯчейке","И в табличном документе ""РеквизитТабличныйДокумент"" я делаю двойной клик на текущей ячейке","Делает двойной клик на текущей ячейке табличного документа","UI.Табличный документ.Ячейки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаРавнаПереданнойТогда(Парам01,ТабПарам)","ТаблицаРавнаПереданнойТогда","Если таблица ""ИмяТаблицы"" равна переданной тогда" + Символы.ПС + Символы.Таб + "| 'Имя колонки' |" + Символы.ПС + Символы.Таб + "| 'Значение'               |","Условие. Истинно, если в таблица равна переданной таблице Gherkin.","UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Условие","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаРавнаМакетуТогда(Парам01,Парам02)","ТаблицаРавнаМакетуТогда","Если таблица ""ИмяТаблицы"" равна макету ""ИмяМакета"" тогда","Условие. Истинно, если в таблица равна переданному макету.","UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Условие","Условие");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаФормыСИменемСталаРавной(Парам01,ТабПарам)","ТаблицаФормыСИменемСталаРавной","И таблица формы с именем 'ИмяТаблицы' стала равной:");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаСталаРавной(Парам01,ТабПарам)","ТаблицаСталаРавной","И таблица ""ИмяТаблицы"" стала равной:" + Символы.ПС + "	| 'ИмяКолонки1' | 'ИмяКолонки2' |" + Символы.ПС + "	| 'Значение1' | 'Значение2' |","Проверяет, что таблица TestClient стала равна таблице Gherkin","UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Точное равенство");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеТекущаяСтрокаРавна(Парам01,ТабПарам)","ВТаблицеТекущаяСтрокаРавна","И в таблице ""ИмяТаблицы"" текущая строка равна:" + Символы.ПС + "	| 'ИмяКолонки1' | 'ИмяКолонки2' |" + Символы.ПС + "	| 'Значение1' | 'Значение2' |","Проверяет, что таблица TestClient стала равна таблице Gherkin","UI.Таблицы.Проверка значения текущей строки таблицы.Таблица Gherkin.Точное равенство");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаСталаРавнойПоШаблону(Парам01,ТабПарам)","ТаблицаСталаРавнойПоШаблону","И таблица ""ИмяТаблицы"" стала равной по шаблону:" + Символы.ПС + "	| 'ИмяКолонки1' | 'ИмяКолонки2' |" + Символы.ПС + "	| 'Значение1' | 'Значение2' |","Проверяет, что таблица TestClient стала равна таблице Gherkin. Значения могут содержать один или несколько символов *.","UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Равенство по шаблону");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаСталаРавнойМакету(Парам01,Парам02)","ТаблицаСталаРавнойМакету","И таблица ""ИмяТаблицы"" стала равной макету ""ИмяМакета""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаРавнаМакету(Парам01,Парам02)","ТаблицаРавнаМакету","И таблица ""ИмяТаблицы"" равна макету ""ИмяМакета""","Проверяет, что таблица TestClient стала равна переданному макету","UI.Таблицы.Проверка значения таблицы.Макет");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаРавнаМакетуПоШаблону(Парам01,Парам02)","ТаблицаРавнаМакетуПоШаблону","И таблица ""ИмяТаблицы"" равна макету ""ИмяМакета"" по шаблону","Проверяет, что таблица TestClient стала равна переданному макету. В ячейках макета можно использовать символы *.","UI.Таблицы.Проверка значения таблицы.Макет");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеСтрокУКоторыхКолонка(Парам01,Парам02,Парам03,Парам04,Парам05)","ВТаблицеСтрокУКоторыхКолонка","И в таблице ""ИмяТаблицы"" 10 строк, у которых колонка ""ИмяКолонки"" ""ВидСравнения"" ""ЗначениеКолонки""","Проверяет, что у таблицы TestClient есть указанное число строк, у которых значение в нужной колоноке сответствует заданному","UI.Таблицы.Проверка значения колонки таблицы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоТаблицаСтанетРавнаДаннойВТеченииСекунд(Парам01,Парам02,ТабПарам)","ЯЖдуЧтоТаблицаСтанетРавнаДаннойВТеченииСекунд","И я жду, что таблица ""ИмяТаблицы"" станет равна данной в течении 20 секунд:");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоТаблицаСтанетРавнаДаннойВТечениеСекунд(Парам01,Парам02,ТабПарам)","ЯЖдуЧтоТаблицаСтанетРавнаДаннойВТечениеСекунд","И я жду, что таблица ""ИмяТаблицы"" станет равна данной в течение 20 секунд:" + Символы.ПС + "	| 'ИмяКолонки1' | 'ИмяКолонки2' |" + Символы.ПС + "	| 'Значение1' | 'Значение2' |","Проверяет, что таблица TestClient станет равной таблице Gherkin в течение нужного числа секунд","UI.Таблицы.Ожидание значения таблицы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоТаблицаСтанетСодержатьСтрокиВТечениеСекунд(Парам01,Парам02,ТабПарам)","ЯЖдуЧтоТаблицаСтанетСодержатьСтрокиВТечениеСекунд","И я жду, что таблица ""ИмяТаблицы"" станет содержать строки в течение 20 секунд:" + Символы.ПС + "	| 'ИмяКолонки1' | 'ИмяКолонки2' |" + Символы.ПС + "	| 'Значение1' | 'Значение2' |","Проверяет, что таблица TestClient станет содержать в себе строки из переданной таблицы Gherkin в течение нужного числа секунд.","UI.Таблицы.Ожидание значения таблицы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоТаблицаНеСтанетСодержатьСтрокиВТечениеСекунд(Парам01,Парам02,ТабПарам)","ЯЖдуЧтоТаблицаНеСтанетСодержатьСтрокиВТечениеСекунд","И я жду, что таблица ""ИмяТаблицы"" не станет содержать строки в течение 20 секунд:" + Символы.ПС + "	| 'ИмяКолонки1' | 'ИмяКолонки2' |" + Символы.ПС + "	| 'Значение1' | 'Значение2' |","Проверяет, что таблица TestClient не станет содержать в себе строки из переданной таблицы Gherkin в течение нужного числа секунд.","UI.Таблицы.Ожидание значения таблицы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаФормыСИменемСодержитСтроки(Парам01,ТабПарам)","ТаблицаФормыСИменемСодержитСтроки","И таблица формы с именем 'ИмяТаблицы' содержит строки:");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаСодержитСтроки(Парам01,ТабПарам)","ТаблицаСодержитСтроки","И таблица ""ИмяТаблицы"" содержит строки:" + Символы.ПС + "	| 'ИмяКолонки1' | 'ИмяКолонки2' |" + Символы.ПС + "	| 'Значение1' | 'Значение2' |","Проверяет, что таблица TestClient содержит строки таблицы Gherkin. Т.е. если в таблице в TestClient 10 строк, то в шаге можно проверять наличие, например, только 3 строк. Также строки указанные в шаге могут идти в любом порядке.","UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Содержит строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаНеСодержитСтроки(Парам01,ТабПарам)","ТаблицаНеСодержитСтроки","И таблица  ""ИмяТаблицы"" не содержит строки:" + Символы.ПС + "	| 'ИмяКолонки1' | 'ИмяКолонки2' |" + Символы.ПС + "	| 'Значение1' | 'Значение2' |","Проверяет, что в таблице TestClient нет строк, указанных в таблице Gherkin.","UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Содержит строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаСодержитСтрокиПоШаблону(Парам01,ТабПарам)","ТаблицаСодержитСтрокиПоШаблону","И таблица ""ИмяТаблицы"" содержит строки по шаблону:" + Символы.ПС + "	| 'ИмяКолонки1' | 'ИмяКолонки2' |" + Символы.ПС + "	| 'Значение1' | 'Значение2' |","Проверяет, что таблица TestClient содержит строки таблицы Gherkin. Т.е. если в таблице в TestClient 10 строк, то в шаге можно проверять наличие, например, только 3 строк. Также строки указанные в шаге могут идти в любом порядке. В значениях ячеек допустимо использовать символ *.","UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Содержит строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаНеСодержитСтрокиПоШаблону(Парам01,ТабПарам)","ТаблицаНеСодержитСтрокиПоШаблону","И таблица ""ИмяТаблицы"" не содержит строки по шаблону:" + Символы.ПС + "	| 'ИмяКолонки1' | 'ИмяКолонки2' |" + Символы.ПС + "	| 'Значение1' | 'Значение2' |","Проверяет, что таблица TestClient не содержит строки таблицы Gherkin. Т.е. если в таблице в TestClient 10 строк, то в шаге можно проверять наличие, например, только 3 строк. Также строки указанные в шаге могут идти в любом порядке. В значениях ячеек допустимо использовать символ *.","UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Содержит строки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ТаблицаСодержитТолькоУказанныеСтроки(Парам01,ТабПарам)",
		"ТаблицаСодержитТолькоУказанныеСтроки",
		"И таблица ""ИмяТаблицы"" содержит только указанные строки:" + Символы.ПС + "	| 'ИмяКолонки1' | 'ИмяКолонки2' |" + Символы.ПС + "	| 'Значение1' | 'Значение2' |",
		"Проверяет, что таблица TestClient содержит строки из таблицы Gherkin. При этом таблице запрещается содержать другие строки. Другими словами шаг проверяет, что таблица соответствует эталону, но строки таблицы могут в любом порядке.",
		"UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Содержит строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ТаблицаСодержитТолькоУказанныеСтрокиПоШаблону(Парам01,ТабПарам)",
		"ТаблицаСодержитТолькоУказанныеСтрокиПоШаблону",
		"И таблица ""ИмяТаблицы"" содержит только указанные строки по шаблону:" + Символы.ПС + "	| 'ИмяКолонки1' | 'ИмяКолонки2' |" + Символы.ПС + "	| 'Значение1' | 'Значение2' |",	
		"Проверяет, что таблица TestClient содержит строки из таблицы Gherkin. В значениях ячеек эталонной таблицы можно все символы или часть символов заменить на *. При этом таблице запрещается содержать другие строки. Другими словами шаг проверяет, что таблица соответствует эталону, но строки таблицы могут в любом порядке.",
		"UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Содержит строки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаСодержитСтрокиИзМакета(Парам01,Парам02)","ТаблицаСодержитСтрокиИзМакета","И таблица ""ИмяТаблицы"" содержит строки из макета ""ИмяМакета""","Проверяет, что таблица TestClient содержит строки таблицы из макета. Т.е. если в таблице в TestClient 10 строк, то в шаге можно проверять наличие, например, только 3 строк. Также строки указанные в макете могут идти в любом порядке.","UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Содержит строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаСодержитСтрокиИзМакетаПоШаблону(Парам01,Парам02)","ТаблицаСодержитСтрокиИзМакетаПоШаблону","И таблица ""ИмяТаблицы"" содержит строки из макета ""ИмяМакета"" по шаблону","Проверяет, что таблица TestClient содержит строки таблицы из макета. Т.е. если в таблице в TestClient 10 строк, то в шаге можно проверять наличие, например, только 3 строк. Также строки указанные в макете могут идти в любом порядке. При этом возможно использовать символ * в значении ячеек.","UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Содержит строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ТаблицаНеСодержитСтрокиИзМакета(Парам01,Парам02)",
		"ТаблицаНеСодержитСтрокиИзМакета",
		"И таблица ""ИмяТаблицы"" не содержит строки из макета ""ИмяМакета""",
		"Проверяет, что таблица TestClient содержит строки таблицы из макета. Т.е. если в таблице в TestClient 10 строк, то в шаге можно проверять наличие, например, только 3 строк. Также строки указанные в макете могут идти в любом порядке.",
		"UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Содержит строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ТаблицаСодержитСтрокиТолькоИзМакета(Парам01,Парам02)",
		"ТаблицаСодержитСтрокиТолькоИзМакета","И таблица ""ИмяТаблицы"" содержит строки только из макета ""ИмяМакета""",
		"Проверяет, что таблица TestClient содержит строки из макета. При этом таблице запрещается содержать другие строки. Другими словами шаг проверяет, что таблица соответствует эталону, но строки таблицы могут в любом порядке.",
		"UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Содержит строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ТаблицаСодержитСтрокиТолькоИзМакетаПоШаблону(Парам01,Парам02)",
		"ТаблицаСодержитСтрокиТолькоИзМакетаПоШаблону","И таблица ""ИмяТаблицы"" содержит строки только из макета ""ИмяМакета"" по шаблону",
		"Проверяет, что таблица TestClient содержит строки из макета. В ячейках эталонного макета можно использовать символы *. При этом таблице запрещается содержать другие строки. Другими словами шаг проверяет, что таблица соответствует эталону, но строки таблицы могут в любом порядке.",
		"UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Содержит строки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаФормыСИменемСодержитИзменения(Парам01,ТабПарам)","ТаблицаФормыСИменемСодержитИзменения","Тогда таблица формы с именем 'ИмяТаблицы' содержит изменения:");//дублирует ТаблицаФормыСИменемСталаРавной
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПанелиРазделовЯВыбираю(Парам01)","ВПанелиРазделовЯВыбираю","Когда В панели разделов я выбираю ""ИмяКоманды""","Нажатие кнопки на панели разделов","UI.Командный интерфейс.Панель разделов");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПанелиОткрытыхЯВыбираю(Парам01)","ВПанелиОткрытыхЯВыбираю","Когда В панели открытых я выбираю ""ИмяКоманды""","Нажатие кнопки на панели открытых окон","UI.Командный интерфейс.Панель открытых");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПанелиФункцийЯВыбираю(Парам01)","ВПанелиФункцийЯВыбираю","И В панели функций я выбираю ""ИмяКоманды""","Нажатие кнопки на панели функций","UI.Командный интерфейс.Панель функций");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПанелиФункцийВГруппеЯВыбираю(Парам01,Парам02)","ВПанелиФункцийВГруппеЯВыбираю","И В панели функций в группе ""Основное"" я выбираю ""ИмяКоманды""","Нажатие кнопки на панели функций нужной группы","UI.Командный интерфейс.Панель функций");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПанелиФункцийЯАктивизирую(Парам01)","ВПанелиФункцийЯАктивизирую","И В панели функций я активизирую 'ИмяКоманды'","Активизация кнопки панели функций","UI.Командный интерфейс.Панель функций");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВКомандномИнтерфейсеЯВыбираю(Парам01,Парам02)","ВКомандномИнтерфейсеЯВыбираю","И В командном интерфейсе я выбираю ""ИмяКомандыПанелиРазделов"" ""ИмяКомандыПанелиФункций""","Нажатие кнопки на панели разделов, затем в панели функций.","UI.Командный интерфейс.Панель разделов");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеСИменемЯВыделяюВсеСтроки(Парам01)","ВТаблицеСИменемЯВыделяюВсеСтроки","Тогда в таблице с именем 'ИмяТаблицы' я выделяю все строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯВыделяюВсеСтроки(Парам01)","ВТаблицеЯВыделяюВсеСтроки","Тогда в таблице ""ИмяТаблицы"" я выделяю все строки", "Выделение всех строк в таблице", "UI.Таблицы.Выделение строк");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯВыделяюВсеСтрокиВышеТекущей(Парам01)","ВТаблицеЯВыделяюВсеСтрокиВышеТекущей","И в таблице ""ИмяТаблицы"" я выделяю все строки выше текущей","Выделяет в таблице все строки выше данной","UI.Таблицы.Выделение строк");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯВыделяюВсеСтрокиНижеТекущей(Парам01)","ВТаблицеЯВыделяюВсеСтрокиНижеТекущей","И в таблице ""ИмяТаблицы"" я выделяю все строки ниже текущей","Выделяет в таблице все строки ниже данной","UI.Таблицы.Выделение строк");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюКнопкуВыбораУПоляСЗаголовком(Парам01)","ВОткрытойФормеЯНажимаюКнопкуВыбораУПоляСЗаголовком","И В открытой форме я нажимаю кнопку выбора у поля с заголовком ""Заголовок поля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюКнопкуВыбораУПоля(Парам01)","ВОткрытойФормеЯНажимаюКнопкуВыбораУПоля","И В открытой форме я нажимаю кнопку выбора у поля ""Заголовок поля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюКнопкуВыбораУПоля(Парам01)","ЯНажимаюКнопкуВыбораУПоля","И я нажимаю кнопку выбора у поля ""Заголовок поля""","Нажимает на кнопку выбора у поля","UI.Формы.Поля.Кнопка выбора");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСуществует(Парам01)","ПолеСуществует","И поле ""Заголовок поля"" существует","Проверка существования поля","UI.Формы.Поля.Проверка существования");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСИменемСуществует(Парам01)","ПолеСИменемСуществует","И поле с именем 'ИмяПоля' существует","Проверка существования поля","UI.Формы.Поля.Проверка существования");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеНеСуществует(Парам01)","ПолеНеСуществует","И поле ""Заголовок поля"" не существует","Проверка не существования поля","UI.Формы.Поля.Проверка существования");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСИменемНеСуществует(Парам01)","ПолеСИменемНеСуществует","И поле с именем 'ИмяПоля' не существует","Проверка не существования поля","UI.Формы.Поля.Проверка существования");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"КнопкаСуществует(Парам01)","КнопкаСуществует","И кнопка ""Заголовок кнопки"" существует","Проверка существования кнопки","UI.Формы.Поля.Проверка существования");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"КнопкаСИменемСуществует(Парам01)","КнопкаСИменемСуществует","И кнопка с именем 'ИмяКнопки' существует","Проверка существования кнопки","UI.Формы.Поля.Проверка существования");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"КнопкаНеСуществует(Парам01)","КнопкаНеСуществует","И кнопка ""Заголовок кнопки"" не существует","Проверка не существования кнопки","UI.Формы.Поля.Проверка существования");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"КнопкаСИменемНеСуществует(Парам01)","КнопкаСИменемНеСуществует","И кнопка с именем 'ИмяКнопки' не существует","Проверка не существования кнопки","UI.Формы.Поля.Проверка существования");

	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСуществуетТогда(Парам01)","ПолеСуществуетТогда","Если поле ""Заголовок поля"" существует тогда","Проверка существования поля","UI.Формы.Поля.Проверка существования","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСИменемСуществуетТогда(Парам01)","ПолеСИменемСуществуетТогда","Если поле с именем 'ИмяПоля' существует тогда","Проверка существования поля","UI.Формы.Поля.Проверка существования","Условие");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеПрисутствуетНаФорме(Парам01)","ПолеПрисутствуетНаФорме","И поле ""Заголовок поля"" присутствует на форме");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСИменемПрисутствуетНаФорме(Парам01)","ПолеСИменемПрисутствуетНаФорме","И поле с именем 'ИмяПоля' присутствует на форме");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеОтсутствуетНаФорме(Парам01)","ПолеОтсутствуетНаФорме","И поле ""Заголовок поля"" отсутствует на форме");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСИменемОтсутствуетНаФорме(Парам01)","ПолеСИменемОтсутствуетНаФорме","И поле с именем 'ИмяПоля' отсутствует на форме");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыПрисутствуетНаФорме(Парам01)","ЭлементФормыПрисутствуетНаФорме","И элемент формы ""Заголовок поля"" присутствует на форме","Проверка видимости поля. Поле обязано существовать.","UI.Формы.Поля.Проверка видимости");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыСИменемПрисутствуетНаФорме(Парам01)","ЭлементФормыСИменемПрисутствуетНаФорме","И элемент формы с именем 'ИмяПоля' присутствует на форме","Проверка видимости поля. Поле обязано существовать.","UI.Формы.Поля.Проверка видимости");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыОтсутствуетНаФорме(Парам01)","ЭлементФормыОтсутствуетНаФорме","И элемент формы ""Заголовок поля"" отсутствует на форме","Проверка невидимости поля. Поле может не существовать.","UI.Формы.Поля.Проверка видимости");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыСИменемОтсутствуетНаФорме(Парам01)","ЭлементФормыСИменемОтсутствуетНаФорме","И элемент формы с именем 'ИмяПоля' отсутствует на форме","Проверка невидимости поля. Поле может не существовать.","UI.Формы.Поля.Проверка видимости");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыСуществуетИНевидимНаФорме(Парам01)","ЭлементФормыСуществуетИНевидимНаФорме","И элемент формы ""Заголовок поля"" существует и невидим на форме","Проверка невидимости поля. Поле обязано существовать.","UI.Формы.Поля.Проверка видимости");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыСИменемСуществуетИНевидимНаФорме(Парам01)","ЭлементФормыСИменемСуществуетИНевидимНаФорме","И элемент формы с именем 'ИмяПоля' существует и невидим на форме","Проверка невидимости поля. Поле обязано существовать.","UI.Формы.Поля.Проверка видимости");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСИменемИмеетЗаголовок(Парам01,Парам02)","ПолеСИменемИмеетЗаголовок","И поле с именем 'ИмяПоля' имеет заголовок ""Заголовок""","Проверка, что у поля нужный заголовок. Поле ищется по внутреннему идентификатору.","UI.Формы.Поля.Заголовок");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСИменемИмеетЗаголовокТогда(Парам01,Парам02)","ПолеСИменемИмеетЗаголовокТогда","Если поле с именем 'ИмяПоля' имеет заголовок ""Заголовок"" тогда","Условие. Проверка, что у поля нужный заголовок. Поле ищется по внутреннему идентификатору.","UI.Формы.Поля.Заголовок","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляСИменемТекстПодсказкиРавен(Парам01,Парам02)","УПоляСИменемТекстПодсказкиРавен","И у поля с именем 'ИмяПоля' текст подсказки равен ""ТекстПодсказки""","Проверка, что у поля нужный текст подсказки. Поле ищется по внутреннему идентификатору.","UI.Формы.Поля.Подсказка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеТаблицыСИменемИмеетЗаголовок(Парам01,Парам02,Парам03)","ПолеТаблицыСИменемИмеетЗаголовок","И поле таблицы ""ИмяТаблицы"" с именем 'ИмяРеквизита' имеет заголовок ""Заголовок""","Проверка, что у поля таблицы нужный заголовок. Поле ищется по внутреннему идентификатору.","UI.Таблицы.Поля.Заголовок");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляТаблицыСИменемТекстПодсказкиРавен(Парам01,Парам02,Парам03)","УПоляТаблицыСИменемТекстПодсказкиРавен","И у поля таблицы ""ИмяТаблицы"" с именем 'ИмяРеквизита' текст подсказки равен ""Текст подсказки""","Проверка, что у поля таблицы нужный текст подсказки. Поле ищется по внутреннему идентификатору.","UI.Таблицы.Поля.Подсказка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюКнопкуВыбораУПоляСИменем(Парам01)","ВОткрытойФормеЯНажимаюКнопкуВыбораУПоляСИменем","И В открытой форме я нажимаю кнопку выбора у поля с именем 'ИмяПоля'");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюКнопкуВыбораУПоляСИменем(Парам01)","ЯНажимаюКнопкуВыбораУПоляСИменем","И я нажимаю кнопку выбора у поля с именем 'ИмяПоля'","Нажимает на кнопку выбора у поля","UI.Формы.Поля.Кнопка выбора");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументФормыСИменемСталРавен(Парам01,ТабПарам)","ТабличныйДокументФормыСИменемСталРавен","И табличный документ формы с именем 'РеквизитТабличныйДокумент' стал равен:");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументСталРавен(Парам01,ТабПарам)","ТабличныйДокументСталРавен","Дано табличный документ ""РеквизитТабличныйДокумент"" стал равен:" + Символы.ПС + "	| 'Значение1' | 'Значение2' |" + Символы.ПС + "	| 'Значение3' | 'Значение4' |");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументРавен(Парам01,ТабПарам)","ТабличныйДокументРавен","Тогда табличный документ ""РеквизитТабличныйДокумент"" равен:" + Символы.ПС + "	| 'Значение1' | 'Значение2' |" + Символы.ПС + "	| 'Значение3' | 'Значение4' |","Проверяет равенство табличного документа переданной таблице Gherkin. Чтобы получить mxl файл из TestClient, в тонком клиенте будет сделана попытка сохранить табличный документ в файл. В Web клиенте он всегда будет считываться по ячейкам. Детали в справке, в разделе, посвященному сравнению табличного документа с эталоном.","UI.Табличный документ.Проверка значения табличного документа.Таблица Gherkin.Весь документ");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументРавенПоШаблону(Парам01,ТабПарам)","ТабличныйДокументРавенПоШаблону","Тогда табличный документ ""РеквизитТабличныйДокумент"" равен по шаблону:" + Символы.ПС + "	| 'Значение1' | 'Значение2' |" + Символы.ПС + "	| 'Значение3' | 'Значение4' |","Проверяет равенство табличного документа переданной таблице Gherkin. В значениях допускатеся использование символов *. Чтобы получить mxl файл из TestClient, в тонком клиенте будет сделана попытка сохранить табличный документ в файл. В Web клиенте он всегда будет считываться по ячейкам. Детали в справке, в разделе, посвященному сравнению табличного документа с эталоном.","UI.Табличный документ.Проверка значения табличного документа.Таблица Gherkin.Весь документ");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ОбластьТабличногоДокументаСталаРавна(Парам01,Парам02,ТабПарам)","ОбластьТабличногоДокументаСталаРавна","И область ""R1C1:R10C10"" табличного документа ""РеквизитТабличныйДокумент"" стала равна:" + Символы.ПС + "	| 'Значение1' | 'Значение2' |" + Символы.ПС + "	| 'Значение3' | 'Значение4' |");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ОбластьТабличногоДокументаРавна(Парам01,Парам02,ТабПарам)","ОбластьТабличногоДокументаРавна","Тогда область ""R1C1:R10C10"" табличного документа ""РеквизитТабличныйДокумент"" равна:" + Символы.ПС + "	| 'Значение1' | 'Значение2' |" + Символы.ПС + "	| 'Значение3' | 'Значение4' |","Проверяет равенство области табличного документа переданной таблице Gherkin. Чтобы получить mxl файл из TestClient, в тонком клиенте будет сделана попытка сохранить табличный документ в файл. В Web клиенте он всегда будет считываться по ячейкам. Детали в справке, в разделе, посвященному сравнению табличного документа с эталоном.","UI.Табличный документ.Проверка значения табличного документа.Таблица Gherkin.Область");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ОбластьТабличногоДокументаРавнаПоШаблону(Парам01,Парам02,ТабПарам)","ОбластьТабличногоДокументаРавнаПоШаблону","Тогда область ""R1C1:R10C10"" табличного документа ""РеквизитТабличныйДокумент"" равна по шаблону:" + Символы.ПС + "	| 'Значение1' | 'Значение2' |" + Символы.ПС + "	| 'Значение3' | 'Значение4' |","Проверяет равенство области табличного документа переданной таблице Gherkin. В значениях допускается использовать символы *. Чтобы получить mxl файл из TestClient, в тонком клиенте будет сделана попытка сохранить табличный документ в файл. В Web клиенте он всегда будет считываться по ячейкам. Детали в справке, в разделе, посвященному сравнению табличного документа с эталоном.","UI.Табличный документ.Проверка значения табличного документа.Таблица Gherkin.Область");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументСодержитСтроки(Парам01,ТабПарам)","ТабличныйДокументСодержитСтроки","И табличный документ ""РеквизитТабличныйДокумент"" содержит строки:" + Символы.ПС + "	| 'Значение1' | 'Значение2' |" + Символы.ПС + "	| 'Значение3' | 'Значение4' |", "Проверяет, что табличный документ TestClient содержит строки таблицы Gherkin.", "UI.Табличный документ.Содержит строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументСодержитСтрокиПоШаблону(Парам01,ТабПарам)","ТабличныйДокументСодержитСтрокиПоШаблону","И табличный документ ""РеквизитТабличныйДокумент"" содержит строки по шаблону:" + Символы.ПС + "	| 'Значение1' | 'Значение2' |" + Символы.ПС + "	| 'Значение3' | 'Значение4' |", "Проверяет, что табличный документ TestClient содержит строки таблицы Gherkin. В ячейках макета можно использовать символы *.", "UI.Табличный документ.Содержит строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументСодержитСтрокиИзМакета(Парам01,Парам02)","ТабличныйДокументСодержитСтрокиИзМакета","И табличный документ ""РеквизитТабличныйДокумент"" содержит строки из макета ""ИмяМакета""","Проверяет, что табличный документ TestClient содержит строки из макета.", "UI.Табличный документ.Содержит строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументСодержитСтрокиИзМакетаПоШаблону(Парам01,Парам02)","ТабличныйДокументСодержитСтрокиИзМакетаПоШаблону","И табличный документ ""РеквизитТабличныйДокумент"" содержит строки из макета ""ИмяМакета"" по шаблону","Проверяет, что табличный документ TestClient содержит строки из макета. В ячейках макета можно использовать символы *.", "UI.Табличный документ.Содержит строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументСодержитСтрокиТолькоИзМакета(Парам01,Парам02)","ТабличныйДокументСодержитСтрокиТолькоИзМакета","И табличный документ ""РеквизитТабличныйДокумент"" содержит строки только из макета ""ИмяМакета""","Проверяет, что табличный документ TestClient содержит строки из макета. При этом макету запрещается содержать другие строки. Другими словами шаг проверяет, что макет соответствует эталону, но строки макета могут в любом порядке.", "UI.Табличный документ.Содержит строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументСодержитСтрокиТолькоИзМакетаПоШаблону(Парам01,Парам02)","ТабличныйДокументСодержитСтрокиТолькоИзМакетаПоШаблону","И табличный документ ""РеквизитТабличныйДокумент"" содержит строки только из макета ""ИмяМакета"" по шаблону","Проверяет, что табличный документ TestClient содержит строки из макета. В ячейках макета можно использовать символы *.  При этом макету запрещается содержать другие строки. Другими словами шаг проверяет, что макет соответствует эталону, но строки макета могут в любом порядке.", "UI.Табличный документ.Содержит строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументФормыСИменемСодержитСтроки(Парам01,ТабПарам)","ТабличныйДокументФормыСИменемСодержитСтроки","И табличный документ формы с именем 'РеквизитТабличныйДокумент' содержит строки:" + Символы.ПС + "	| 'Значение1' | 'Значение2' |" + Символы.ПС + "	| 'Значение3' | 'Значение4' |", "Проверяет, что табличный документ TestClient содержит строки таблицы Gherkin", "UI.Табличный документ.Содержит строки.Устаревшее");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументСодержитЗначенияОбластей(Парам01,ТабПарам)","ТабличныйДокументСодержитЗначенияОбластей","И Табличный документ ""ИмяТабДок"" содержит значения областей" + Символы.ПС + "| ИмяОбласти | ЗначениеОбласти |","Проверяет что в табличном документа содержатся значения, перечисленные в таблице. Таблица состоит из двух колонок: ""ИмяОбласти"" и ""ЗначениеОбласти"".","UI.Табличный документ.Проверка значений именнованных областей");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументСодержитСтрокиВОбластях(Парам01,ТабПарам)","ТабличныйДокументСодержитСтрокиВОбластях","И Табличный документ ""ИмяТабДок"" содержит строки в областях" + Символы.ПС + "| ИмяОбласти | Подстрока |","Проверяет что в табличном документа содержатся значения, перечисленные в таблице. Таблица состоит из двух колонок: ""ИмяОбласти"" и ""Подстрока"".","UI.Табличный документ.Проверка значений именнованных областей");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументСодержитЗначенияОбластейПоШаблону(Парам01,ТабПарам)","ТабличныйДокументСодержитЗначенияОбластейПоШаблону","И Табличный документ ""РеквизитТабличныйДокумент"" содержит значения областей по шаблону" + Символы.ПС + "| ИмяОбласти | ШаблонОбласти |","Проверяет что в табличном документа содержатся значения, перечисленные в таблице. Таблица состоит из двух колонок: ""ИмяОбласти"" и ""ШаблонОбласти"". В шаблоне можно указывать символ * много раз.","UI.Табличный документ.Проверка значений именнованных областей");

	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументСодержитЗначения(Парам01,ТабПарам)","ТабличныйДокументСодержитЗначения","И табличный документ ""ИмяРеквизитаИлиИмяФайла"" содержит значения:" + Символы.ПС + "	| 'Значение1' |" + Символы.ПС  + "	| 'Значение2' |","Проверяет, что в табличном документе есть значения из таблицы. Данные могут быть получены как из реквизита формы клиента тестировния так и из файла. Для получения данных из файла нужно передавать полное имя файла.","UI.Табличный документ.Содержит значения");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументНеСодержитЗначения(Парам01,ТабПарам)","ТабличныйДокументНеСодержитЗначения","И табличный документ ""ИмяРеквизитаИлиИмяФайла"" не содержит значения:" + Символы.ПС + "	| 'Значение1' |" + Символы.ПС  + "	| 'Значение2' |","Проверяет, что в табличном документе нет значений из таблицы. Данные могут быть получены как из реквизита формы клиента тестировния так и из файла. Для получения данных из файла нужно передавать полное имя файла.","UI.Табличный документ.Содержит значения");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТабличномДокументеЗначенияВКолонкеРавноЗначению(Парам01,Парам02,Парам03)","ВТабличномДокументеЗначенияВКолонкеРавноЗначению","И в табличном документе ""РеквизитТабличныйДокумент"" значения в колонке ""ИмяКолонки"" равно значению """"","Проверяет, что в табличном документе значение в колонке равно переданному параметру","UI.Табличный документ.Проверка колонки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТабличномДокументеЗначенияВКолонкеНеравноЗначению(Парам01,Парам02,Парам03)","ВТабличномДокументеЗначенияВКолонкеНеравноЗначению","И в табличном документе ""РеквизитТабличныйДокумент"" значения в колонке ""ИмяКолонки"" неравно значению """"","Проверяет, что в табличном документе значение в колонке равно переданному параметру","UI.Табличный документ.Проверка колонки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТабличномДокументеЗначенияВКолонкеСоответствуютУсловию(Парам01,Парам02,Парам03,Парам04)","ВТабличномДокументеЗначенияВКолонкеСоответствуютУсловию","И в табличном документе ""РеквизитТабличныйДокумент"" значения в колонке ""ИмяКолонки"" соответствуют условию  ""равно""  10","Проверяет, что в табличном документе значение в колонке соответствует условию. Можно использовать числа.","UI.Табличный документ.Проверка колонки");
	
	                                              
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрылВсеОкнаКлиентскогоПриложения()","ЯЗакрылВсеОкнаКлиентскогоПриложения","И я закрыл все окна клиентского приложения");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрываюВсеОкнаКлиентскогоПриложения()","ЯЗакрываюВсеОкнаКлиентскогоПриложения","И я закрываю все окна клиентского приложения","Закрывает все окна текущего клиента тестирования.","UI.Окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрылВсеОкнаКлиентскогоПриложенияКроме(Парам01)","ЯЗакрылВсеОкнаКлиентскогоПриложенияКроме","И я закрыл все окна клиентского приложения кроме ""Нужное окно""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрываюВсеОкнаКлиентскогоПриложенияКроме(Парам01)","ЯЗакрываюВсеОкнаКлиентскогоПриложенияКроме","И я закрываю все окна клиентского приложения кроме ""Нужное окно""","Закрывает все окна текущего TestClient, кроме нужного окна.","UI.Окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюКнопкуКомандногоИнтерфейса(Парам01)","ЯНажимаюКнопкуКомандногоИнтерфейса","Когда я нажимаю кнопку командного интерфейса ""Заголовок кнопки""","Нажимает на кнопку командного интерфейса","UI.Командный интерфейс.Панель разделов");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ОткрылосьОкно(Парам01)","ОткрылосьОкно","Тогда открылось окно ""Заголовок окна""","Проверяет, что на экране есть активное окно с нужым заголовком. Возможно передавать сразу несколько заголовков окон через таблицу Gherkin.","UI.Окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ОткрыласьФорма(Парам01)","ОткрыласьФорма","Тогда открылась форма ""Справочник.Справочник1.Форма.ФормаЭлемента""","Проверяет, что на экране есть активное окно с нужной формой. Возможно передавать сразу несколько заголовков форм через таблицу Gherkin.","UI.Окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ОткрыласьФормаСИменем(Парам01)","ОткрыласьФормаСИменем","Тогда открылась форма с именем 'Справочник.Справочник1.Форма.ФормаЭлемента'","Проверяет, что на экране есть активное окно с нужной формой. Возможно передавать сразу несколько имен форм через таблицу Gherkin.","UI.Окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯАктивизируюОкно(Парам01)","ЯАктивизируюОкно","И я активизирую окно ""Заголовок окна""","Активизирует окно с нужным заголовком","UI.Окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯАктивизируюФорму(Парам01)","ЯАктивизируюФорму","И я активизирую форму ""Заголовок формы""","Активизирует окно, в котором будет найдена форма с нужным заголовком.","UI.Окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯАктивизируюФормуСИменем(Парам01)","ЯАктивизируюФормуСИменем","И я активизирую форму с именем ""ИмяФормы""","Активизирует окно, в котором будет найдена форма с нужным именем.","UI.Окна");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЗакрытияОкнаВТеченииСекунд(Парам01,Парам02)","ЯЖдуЗакрытияОкнаВТеченииСекунд","И я жду закрытия окна ""Заголовок окна"" в течении 20 секунд");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЗакрытияОкнаВТечениеСекунд(Парам01,Парам02)","ЯЖдуЗакрытияОкнаВТечениеСекунд","И я жду закрытия окна ""Заголовок окна"" в течение 20 секунд","Ожидает, что окно исчезнет в течение указанного числа секунд. Поиск окна происходит среди всех открытых окон. Поэтому шаг будет ждать пока закроются все окна, удовлетворяющие переданному параметру ""Заголовок окна"".","UI.Окна");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуОткрытияОкнаВТеченииСекунд(Парам01,Парам02)","ЯЖдуОткрытияОкнаВТеченииСекунд","И я жду открытия окна ""Заголовок окна"" в течении 20 секунд");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуОткрытияОкнаВТечениеСекунд(Парам01,Парам02)","ЯЖдуОткрытияОкнаВТечениеСекунд","И я жду открытия окна ""Заголовок окна"" в течение 20 секунд","Ожидает, что окно появится в течение указанного числа секунд. Окно не обязательно должно быть активным окном. Поиск производится среди всех окон.","UI.Окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЖдуЧтоАктивнымОкномСтанетВТечениеСекунд(Парам01,Парам02)",
		"ЯЖдуЧтоАктивнымОкномСтанетВТечениеСекунд",
		"И я жду, что активным окном станет ""Заголовок окна"" в течение 10 секунд",
		"Ожидает, что указанное окно станет активным окном в течение указанного времени.",
		"UI.Окна");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуОткрытияОкнаОтличногоОтВТечениеСекунд(Парам01,Парам02)","ЯЖдуОткрытияОкнаОтличногоОтВТечениеСекунд","И я жду открытия окна отличного от ""Заголовок окна"" в течение 20 секунд","Ожидает что откроется другое окно, отличное от переданного в течение указанного числа секунд. Используется, чтобы определить смену окон.","UI.Окна");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком(Парам01)","ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком","И В открытой форме я нажимаю на кнопку с заголовком ""Создать""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюНаКнопку(Парам01)","ВОткрытойФормеЯНажимаюНаКнопку","И В открытой форме я нажимаю на кнопку ""Создать""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюНаКнопку(Парам01)","ЯНажимаюНаКнопку","И я нажимаю на кнопку ""Заголовок кнопки""","Нажимает на кнопку с нужным заголовком","UI.Формы.Кнопки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюНаКнопкуСЗаголовкомИИменем(Парам01,Парам02)","ЯНажимаюНаКнопкуСЗаголовкомИИменем","И я нажимаю на кнопку с заголовком ""Заголовок кнопки"" и именем ""ИмяКнопки""","Нажимает на кнопку с нужным заголовком и именем. Шаг используется, когда надо найти кнопку почасти заголовка и части имени.","UI.Формы.Кнопки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВПолеСИменемЯВвожуТекст(Парам01,Парам02)","ВОткрытойФормеВПолеСИменемЯВвожуТекст","И В открытой форме в поле с именем 'ИмяПоля' я ввожу текст ""ЗначениеПоля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеСИменемЯВвожуТекст(Парам01,Парам02)","ВПолеСИменемЯВвожуТекст","И в поле с именем 'ИмяПоля' я ввожу текст ""ЗначениеПоля""","Вводит текст в поле. Также вводит текст в форматированный документ и поле HTML документа.","UI.Формы.Поля.Ввод текста");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолосеРегулированияЯПерехожуКЗначению(ЗаголовокПоля,Значение)","ВПолосеРегулированияЯПерехожуКЗначению","И в полосе регулирования 'Заголовок элемента' я перехожу к значению 'Значение'","Изменяет значение в полосе регулирования","UI.Формы.Поля.Полоса регулирования");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолосеРегулированияСИменемЯПерехожуКЗначению(ИмяПоля,Значение)","ВПолосеРегулированияСИменемЯПерехожуКЗначению","И в полосе регулирования с именем 'ИмяЭлемента' я перехожу к значению 'Значение'","Изменяет значение в полосе регулирования","UI.Формы.Поля.Полоса регулирования");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯПерехожуКЗакладкеСЗаголовком(Парам01)","ВОткрытойФормеЯПерехожуКЗакладкеСЗаголовком","И В открытой форме я перехожу к закладке с заголовком ""ИмяЗакладки""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯПерехожуКЗакладке(Парам01)","ВОткрытойФормеЯПерехожуКЗакладке","И В открытой форме я перехожу к закладке ""ИмяЗакладки""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПерехожуКЗакладке(Парам01)","ЯПерехожуКЗакладке","И я перехожу к закладке ""ИмяЗакладки""","Шаг делает переход к закладке формы","UI.Формы.Закладки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯПерехожуКЗакладкеСИменем(Парам01)","ВОткрытойФормеЯПерехожуКЗакладкеСИменем","И В открытой форме я перехожу к закладке с именем 'ИмяЗакладки'");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПерехожуКЗакладкеСИменем(Парам01)","ЯПерехожуКЗакладкеСИменем","И я перехожу к закладке с именем 'ИмяЗакладки'","Шаг делает переход к закладке формы","UI.Формы.Закладки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеЗаполнено(Парам01)","ПолеЗаполнено","И поле ""Заголовок поля"" заполнено","Проверяет заполненность поля формы","UI.Формы.Поля.Заполненность");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСИменемЗаполнено(Парам01)","ПолеСИменемЗаполнено","И поле с именем 'ИмяПоля' заполнено","Проверяет заполненность поля формы","UI.Формы.Поля.Заполненность");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеНеЗаполнено(Парам01)","ПолеНеЗаполнено","И поле ""Заголовок поля"" не заполнено","Проверяет заполненность поля формы","UI.Формы.Поля.Заполненность");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСИменемНеЗаполнено(Парам01)","ПолеСИменемНеЗаполнено","И поле с именем 'ИмяПоля' не заполнено","Проверяет заполненность поля формы","UI.Формы.Поля.Заполненность");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеЗаполненоТогда(Парам01)","ПолеЗаполненоТогда","Если поле ""Заголовок поля"" заполнено Тогда","Условие. Проверяет заполненность поля формы","UI.Формы.Поля.Заполненность","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСИменемЗаполненоТогда(Парам01)","ПолеСИменемЗаполненоТогда","Если поле с именем 'ИмяПоля' заполнено Тогда","Проверяет заполненность поля формы","UI.Формы.Поля.Заполненность","Условие");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯАктивизируюПоле(Парам01)","ЯАктивизируюПоле","И я активизирую поле ""Заголовок поля""","Сделать поле активным","UI.Формы.Поля.Активизировать");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯАктивизируюПолеСИменем(Парам01)","ЯАктивизируюПолеСИменем","И я активизирую поле с именем 'ИмяПоля'","Сделать поле активным","UI.Формы.Поля.Активизировать");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыСталРавен(Парам01,Парам02)","ЭлементФормыСталРавен","Тогда элемент формы ""Заголовок поля"" стал равен ""ЗначениеПоля""","Проверка значения элемента формы","UI.Формы.Поля.Проверка значения элемента формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыСИменемСталРавен(Парам01,Парам02)","ЭлементФормыСИменемСталРавен","Тогда элемент формы с именем 'ИмяПоля' стал равен ""ЗначениеПоля""","Проверка значения элемента формы","UI.Формы.Поля.Проверка значения элемента формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыСталРавенПоШаблону(Парам01,Парам02)","ЭлементФормыСталРавенПоШаблону","Тогда элемент формы ""Заголовок поля"" стал равен ""ЗначениеПоля"" по шаблону","Проверка значения элемента формы","UI.Формы.Поля.Проверка значения элемента формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыСИменемСталРавенПоШаблону(Парам01,Парам02)","ЭлементФормыСИменемСталРавенПоШаблону","Тогда элемент формы с именем 'ИмяПоля' стал равен ""ЗначениеПоля"" по шаблону","Проверка значения элемента формы. Возможно использовать символы *.","UI.Формы.Поля.Проверка значения элемента формы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УЭлементаФормыСИменемТекстРедактированияСталРавен(Парам01,Парам02)","УЭлементаФормыСИменемТекстРедактированияСталРавен","И у элемента формы с именем 'ИмяПоля' текст редактирования стал равен ""ТекстПоля""","Проверка значения текста редактирования элемента формы.","UI.Формы.Поля.Проверка значения элемента формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УЭлементаФормыСИменемТекстРедактированияСталРавенПоШаблону(Парам01,Парам02)","УЭлементаФормыСИменемТекстРедактированияСталРавенПоШаблону","И у элемента формы с именем 'ИмяПоля' текст редактирования стал равен ""ТекстПоля"" по шаблону","Проверка значения текста редактирования элемента формы. Возможно использовать символы * при проверке значения.","UI.Формы.Поля.Проверка значения элемента формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УЭлементаФормыСИменемТекстРедактированияСталРавенВТечениеСекунд(Парам01,Парам02,Парам03)","УЭлементаФормыСИменемТекстРедактированияСталРавенВТечениеСекунд","И у элемента формы с именем 'ИмяПоля' текст редактирования стал равен ""ТекстПоля"" в течение 10 секунд","Проверка значения текста редактирования элемента формы.","UI.Формы.Поля.Проверка значения элемента формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УЭлементаФормыСИменемТекстРедактированияСталРавенПоШаблонуВТечениеСекунд(Парам01,Парам02,Парам03)","УЭлементаФормыСИменемТекстРедактированияСталРавенПоШаблонуВТечениеСекунд","И у элемента формы с именем 'ИмяПоля' текст редактирования стал равен ""ТекстПоля"" по шаблону в течение 10 секунд","Проверка значения текста редактирования элемента формы. Возможно использовать символы * при проверке значения.","UI.Формы.Поля.Проверка значения элемента формы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыСталРавенШаблону(Парам01,Парам02)","ЭлементФормыСталРавенШаблону","Тогда элемент формы ""Заголовок поля"" стал равен шаблону ""Шаблон""","Проверка значения элемента формы. В значении допускаются символы *","UI.Формы.Поля.Проверка значения элемента формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыСИменемСталРавенШаблону(Парам01,Парам02)","ЭлементФормыСИменемСталРавенШаблону","Тогда элемент формы с именем 'ИмяПоля' стал равен шаблону ""Шаблон""","Проверка значения элемента формы. В значении допускаются символы *","UI.Формы.Поля.Проверка значения элемента формы");
	                                                       
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЗначениеПоляСодержитТекст(Парам01,Парам02)","ЗначениеПоляСодержитТекст","Тогда значение поля ""Заголовок поля"" содержит текст ""ЗначениеПоля""","Проверка, что значение поля формы содержит текст","UI.Формы.Поля.Содержит текст");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЗначениеПоляСИменемСодержитТекст(Парам01,Парам02)","ЗначениеПоляСИменемСодержитТекст","Тогда значение поля с именем 'ИмяПоля' содержит текст ""ЗначениеПоля""","Проверка, что значение поля формы содержит текст","UI.Формы.Поля.Содержит текст");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЗначениеПоляНеСодержитТекст(Парам01,Парам02)","ЗначениеПоляНеСодержитТекст","Тогда значение поля ""Заголовок поля"" не содержит текст ""Подстрока""","Проверка, что значение поля формы не содержит текст","UI.Формы.Поля.Содержит текст");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЗначениеПоляСИменемНеСодержитТекст(Парам01,Парам02)","ЗначениеПоляСИменемНеСодержитТекст","Тогда значение поля с именем 'ИмяПоля' не содержит текст ""Подстрока""","Проверка, что значение поля формы не содержит текст","UI.Формы.Поля.Содержит текст");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТекстЯчейкиТаблицыСталРавен(Парам01,Парам02,Парам03)","ТекстЯчейкиТаблицыСталРавен","Тогда текст ячейки таблицы ""Таблица"" ""ИмяПоля"" стал равен ""ЗначениеПоля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТекстТекущейЯчейкиТаблицыСталРавен(Парам01,Парам02)","ТекстТекущейЯчейкиТаблицыСталРавен","Тогда текст текущей ячейки таблицы ""Таблица"" стал равен ""ЗначениеПоля""","Проверка значения текущей ячейки таблицы.","UI.Таблицы.Значение ячейки таблицы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюНаГиперссылкуСЗаголовком(Парам01)","ВОткрытойФормеЯНажимаюНаГиперссылкуСЗаголовком","И В открытой форме я нажимаю на гиперссылку с заголовком ""Гиперссылка""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюНаГиперссылку(Парам01)","ВОткрытойФормеЯНажимаюНаГиперссылку","И В открытой форме я нажимаю на гиперссылку ""Гиперссылка""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюНаГиперссылку(Парам01)","ЯНажимаюНаГиперссылку","И я нажимаю на гиперссылку ""Гиперссылка""","Нажатие на гиперссылку.","UI.Формы.Поля.Гиперссылки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюНаГиперссылкуСИменем(Парам01)","ВОткрытойФормеЯНажимаюНаГиперссылкуСИменем","И В открытой форме я нажимаю на гиперссылку с именем 'Гиперссылка'");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюНаГиперссылкуСИменем(Парам01)","ЯНажимаюНаГиперссылкуСИменем","И я нажимаю на гиперссылку с именем 'Гиперссылка'","Нажатие на гиперссылку.","UI.Формы.Поля.Гиперссылки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюНаКнопкуСИменем(Парам01)","ВОткрытойФормеЯНажимаюНаКнопкуСИменем","И В открытой форме я нажимаю на кнопку с именем 'ИмяКнопки'");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюНаКнопкуСИменем(Парам01)","ЯНажимаюНаКнопкуСИменем","И я нажимаю на кнопку с именем 'ИмяКнопки'","Нажимает на кнопку с нужным именем","UI.Формы.Кнопки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯСворачиваюГруппуСЗаголовком(Парам01)","ВОткрытойФормеЯСворачиваюГруппуСЗаголовком","И В открытой форме я сворачиваю группу с заголовком ""ИмяГруппы""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯСворачиваюГруппу(Парам01)","ВОткрытойФормеЯСворачиваюГруппу","И В открытой форме я сворачиваю группу ""Заголовок группы""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯСворачиваюГруппу(Парам01)","ЯСворачиваюГруппу","И я сворачиваю группу ""Заголовок группы""","Сворачивает группу","UI.Формы.Группы.Развернуть/свернуть группу");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯСворачиваюГруппуСИменем(Парам01)","ВОткрытойФормеЯСворачиваюГруппуСИменем","И В открытой форме я сворачиваю группу с именем 'ИмяГруппы'");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯСворачиваюГруппуСИменем(Парам01)","ЯСворачиваюГруппуСИменем","И я сворачиваю группу с именем 'ИмяГруппы'","Сворачивает группу","UI.Формы.Группы.Развернуть/свернуть группу");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯРазворачиваюГруппуСЗаголовком(Парам01)","ВОткрытойФормеЯРазворачиваюГруппуСЗаголовком","И В открытой форме я разворачиваю группу с заголовком ""ИмяГруппы""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯРазворачиваюГруппу(Парам01)","ВОткрытойФормеЯРазворачиваюГруппу","И В открытой форме я разворачиваю группу ""Заголовок группы""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯРазворачиваюГруппу(Парам01)","ЯРазворачиваюГруппу","И я разворачиваю группу ""Заголовок группы""","Разворачивает группу","UI.Формы.Группы.Развернуть/свернуть группу");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯРазворачиваюГруппуСИменем(Парам01)","ВОткрытойФормеЯРазворачиваюГруппуСИменем","И В открытой форме я разворачиваю группу с именем 'ИмяГруппы'");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯРазворачиваюГруппуСИменем(Парам01)","ЯРазворачиваюГруппуСИменем","И я разворачиваю группу с именем 'ИмяГруппы'","Разворачивает группу","UI.Формы.Группы.Развернуть/свернуть группу");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УГруппыСтраницТекущаяСтраница(Парам01,Парам02)","УГруппыСтраницТекущаяСтраница","И у группы страниц ""ГруппаСтраниц"" текущая страница ""ИмяСтраницы""","Проверяет что у заданной группы текущей страницей является указанная","UI.Формы.Группы.Текущая страница");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТеченииСекунд(Парам01,Парам02,Парам03)","ЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТеченииСекунд","И я жду, что у группы страниц ""ГруппаСтраниц"" текущей страницей станет ""ИмяСтраницы"" в течении 20 секунд");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТечениеСекунд(Парам01,Парам02,Парам03)","ЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТечениеСекунд","И я жду, что у группы страниц ""ГруппаСтраниц"" текущей страницей станет ""ИмяСтраницы"" в течение 20 секунд","Ожидает, что у заданной группы текущей страницей станет нужная группа в течение указанного числа секунд","UI.Формы.Группы.Текущая страница");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯОткрываюВыпадающийСписокСЗаголовком(Парам01)","ВОткрытойФормеЯОткрываюВыпадающийСписокСЗаголовком","И В открытой форме я открываю выпадающий список с заголовком ""Заголовок элемента""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯОткрываюВыпадающийСписок(Парам01)","ВОткрытойФормеЯОткрываюВыпадающийСписок","И В открытой форме я открываю выпадающий список ""Заголовок элемента""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрываюВыпадающийСписок(Парам01)","ЯОткрываюВыпадающийСписок","И я открываю выпадающий список ""Заголовок элемента""","Открывает выпадающий список","UI.Формы.Поля.Выпадающий список.Открыть список");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯОткрываюВыпадающийСписок(Парам01)","ВТаблицеЯОткрываюВыпадающийСписок","И в таблице ""ИмяТаблицы"" я открываю выпадающий список ""Заголовок элемента""","Открывает выпадающий список","UI.Таблицы.Выпадающий список.Открыть список");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯОткрываюВыпадающийСписокСИменем(Парам01)","ВОткрытойФормеЯОткрываюВыпадающийСписокСИменем","И В открытой форме я открываю выпадающий список с именем 'ИмяЭлемента'");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрываюВыпадающийСписокСИменем(Парам01)","ЯОткрываюВыпадающийСписокСИменем","И я открываю выпадающий список с именем 'ИмяЭлемента'","Открывает выпадающий список","UI.Формы.Поля.Выпадающий список.Открыть список");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯОткрываюВыпадающийСписокСИменем(Парам01)","ВТаблицеЯОткрываюВыпадающийСписокСИменем","И в таблице ""ИмяТаблицы"" я открываю выпадающий список с именем 'ИмяЭлемента'","Открывает выпадающий список","UI.Таблицы.Выпадающий список.Открыть список");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯСохраняюВыпадающийСписокКак(Парам01,Парам02)","ЯСохраняюВыпадающийСписокКак","И я сохраняю выпадающий список ""Заголовок элемента"" как ""ИмяПеременной""","Сохраняет представление выпадающего списка выбора в виде таблицы в памяти с колонками ПредставлениеДанных и ОтображаемыйТекст ","UI.Формы.Поля.Выпадающий список.Сохранить список");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯСохраняюВыпадающийСписокСИменемКак(Парам01,Парам02)","ЯСохраняюВыпадающийСписокСИменемКак","И я сохраняю выпадающий список с именем 'ИмяЭлемента' как ""ИмяПеременной""","Сохраняет представление выпадающего списка выбора в виде таблицы в памяти с колонками ПредставлениеДанных и ОтображаемыйТекст ","UI.Формы.Поля.Выпадающий список.Сохранить список");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯСохраняюВыпадающийСписокФормыКак(Парам01,Парам02)",
		"ЯСохраняюВыпадающийСписокФормыКак",
		"И я сохраняю выпадающий список формы как ""ИмяПеременной""",
		"Сохраняет представление выпадающего списка выбора привязанного к форме в виде таблицы в памяти с колонками ПредставлениеДанных и ОтображаемыйТекст
		|Работает в платформе 8.3.25 и выше.",
		"UI.Формы.Выпадающий список формы.Сохранить список");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка(Парам01)","ВОткрытойФормеЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка","И В открытой форме я выбираю значение реквизита с заголовком ""Заголовок поля"" из формы списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01)","ВОткрытойФормеЯВыбираюЗначениеРеквизитаИзФормыСписка","И В открытой форме я выбираю значение реквизита ""ИмяПоля"" из формы списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01)","ЯВыбираюЗначениеРеквизитаИзФормыСписка","И я выбираю значение реквизита ""Заголовок поля"" из формы списка","Нажимает на кнопку ""Выбрать из списка"" у поля","UI.Формы.Поля.Выбор из списка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01)","ВОткрытойФормеЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка","И В открытой форме я выбираю значение реквизита с именем 'ИмяПоля' из формы списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01)","ЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка","И я выбираю значение реквизита с именем 'ИмяПоля' из формы списка","Нажимает на кнопку ""Выбрать из списка"" у поля","UI.Формы.Поля.Выбор из списка");
	                                                                      
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВФормеВТаблицеЯПерехожуКСтроке(Парам01,Парам02,ТабПарам)","ВФормеВТаблицеЯПерехожуКСтроке","И В форме ""Справочник2"" в таблице ""ИмяТаблицы"" я перехожу к строке" + Символы.ПС + "		| 'ИмяКолонки' |" + Символы.ПС + "		| 'ЗначениеКолонки' |");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВТаблицеЯПерехожуКСтроке(Парам01,ТабПарам)",
		"ВТаблицеЯПерехожуКСтроке",
		"И в таблице ""ИмяТаблицы"" я перехожу к строке" + Символы.ПС + "		| 'ИмяКолонки' |" + Символы.ПС + "		| 'ЗначениеКолонки' |",
		"Переход к нужной строке данной таблицы.
		|Сначала делается попытка перейти к нужной строке вниз от текущей позиции в таблице.
		|Если это не получилось, то будет выполнена попытка перехода от текущей позиции наверх.
		|Если это тоже не получилось, то будет выполнен переход к первой строке таблицы и ещё одна попытка перейти к нужной строке вниз, а затем наверх.
		|Начиная с платформы версии 8.3.25 в значениях колонок допустимо указывать символы *(любой набор символов) и ?(любой один символ).",
		"UI.Таблицы.Переход к строке");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуКСтрокеСПереключениемВыделения(Парам01,ТабПарам)","ВТаблицеЯПерехожуКСтрокеСПереключениемВыделения","И в таблице ""ИмяТаблицы"" я перехожу к строке с переключением выделения:" + Символы.ПС + "		| 'ИмяКолонки' |" + Символы.ПС + "		| 'ЗначениеКолонки' |","Переход к нужной строке данной таблицы со сменой выделения строки (клавиша Ctrl). Если обернуть значение с помощью символа $, тогда значение будет взято из переменной Контекст. Если $$, тогда из КонтекстСохраняемый.","UI.Таблицы.Переход к строке");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВТаблицеЯПерехожуКСтрокеНаправлениеВверх(Парам01,ТабПарам)",
		"ВТаблицеЯПерехожуКСтрокеНаправлениеВверх",
		"И в таблице ""ИмяТаблицы"" я перехожу к строке направление вверх" + Символы.ПС + "		| 'ИмяКолонки' |" + Символы.ПС + "		| 'ЗначениеКолонки' |",
		"Переход к нужной строке данной таблицы. Делается попытка перейти к нужной строке вверх от текущей позиции в таблице.
		|Начиная с платформы версии 8.3.25 в значениях колонок допустимо указывать символы *(любой набор символов) и ?(любой один символ).",
		"UI.Таблицы.Переход к строке");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВТаблицеЯПерехожуКСтрокеНаправлениеВниз(Парам01,ТабПарам)",
		"ВТаблицеЯПерехожуКСтрокеНаправлениеВниз",
		"И в таблице ""ИмяТаблицы"" я перехожу к строке направление вниз" + Символы.ПС + "		| 'ИмяКолонки' |" + Символы.ПС + "		| 'ЗначениеКолонки' |",
		"Переход к нужной строке данной таблицы. Делается попытка перейти к нужной строке вниз от текущей позиции в таблице.
		|Начиная с платформы версии 8.3.25 в значениях колонок допустимо указывать символы *(любой набор символов) и ?(любой один символ).",
		"UI.Таблицы.Переход к строке");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуКПервойСтроке(Парам01)","ВТаблицеЯПерехожуКПервойСтроке",      "И в таблице ""ИмяТаблицы"" я перехожу к первой строке","Переход к первой строке данной таблицы","UI.Таблицы.Переход к строке");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуКПоследнейСтроке(Парам01)","ВТаблицеЯПерехожуКПоследнейСтроке","И в таблице ""ИмяТаблицы"" я перехожу к последней строке","Переход к последней строке данной таблицы","UI.Таблицы.Переход к строке");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуКПредыдущейСтроке(Парам01)","ВТаблицеЯПерехожуКПредыдущейСтроке",      "И в таблице ""ИмяТаблицы"" я перехожу к предыдущей строке","Переход к предыдущей строке данной таблицы","UI.Таблицы.Переход к строке");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуКСледующейСтроке(Парам01)","ВТаблицеЯПерехожуКСледующейСтроке",      "И в таблице ""ИмяТаблицы"" я перехожу к следующей строке","Переход к следующей строке данной таблицы","UI.Таблицы.Переход к строке");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуКСтрокеСодержащейПодстроки(Парам01,ТабПарам)","ВТаблицеЯПерехожуКСтрокеСодержащейПодстроки","И в таблице ""ИмяТаблицы"" я перехожу к строке содержащей подстроки" + Символы.ПС + "	|'ИмяКолонки'|"  + Символы.ПС + "	|'ЗначениеКолонки'|","Переход к строке таблицы, когда значения колонок заданы не полностью, а подстрокой","UI.Таблицы.Переход к строке.Устаревшее");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВТаблицеЯПерехожуКСтрокеПоШаблону(Парам01,ТабПарам)",
		"ВТаблицеЯПерехожуКСтрокеПоШаблону",
		"И в таблице ""ИмяТаблицы"" я перехожу к строке по шаблону" + Символы.ПС + "	|'ИмяКолонки'|"  + Символы.ПС + "	|'*ЧастьСтроки*'|",
		"Переход к строке таблицы, когда в значении колонок встречаются символы *. Также символы * могут встречаться и в именах колонок.
		|Начиная с платформы версии 8.3.25 предпочтельно использовать шаг ""И в таблице 'ИмяТаблицы' я перехожу к строке"", т.к. в платформе появилась поддержка перехода с учетом символов * и ?.",
		"UI.Таблицы.Переход к строке");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯДобавляюСтроку(Парам01)","ВТаблицеЯДобавляюСтроку",      "И в таблице ""ИмяТаблицы"" я добавляю строку","Добавление строки","UI.Таблицы.Добавить строку");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯУдаляюСтроку(Парам01)","ВТаблицеЯУдаляюСтроку",          "И в таблице ""ИмяТаблицы"" я удаляю строку"  ,"Удаление строки","UI.Таблицы.Удаление строк");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВТаблицеЯКопируюСтроку(Парам01)",
		"ВТаблицеЯКопируюСтроку",
		"И в таблице ""ИмяТаблицы"" я копирую строку",
		"Копирование строки таблицы (аналогично клавише F9)
		|Работает в платформе 8.3.25 и выше.",
		"UI.Таблицы.Добавить строку");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВФормеВТаблицеЯРазворачиваюСтроку(Парам01,Парам02,ТабПарам)","ВФормеВТаблицеЯРазворачиваюСтроку","И В форме ""Справочник2"" в таблице ""ИмяТаблицы"" я разворачиваю строку:" + Символы.ПС + "		| 'ИмяКолонки' |" + Символы.ПС + "		| 'ЗначениеКолонки' |");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯРазворачиваюСтроку(Парам01,ТабПарам)","ВТаблицеЯРазворачиваюСтроку","И в таблице ""ИмяТаблицы"" я разворачиваю строку:" + Символы.ПС + "		| 'ИмяКолонки' |" + Символы.ПС + "		| 'ЗначениеКолонки' |","Развернуть группу строк","UI.Таблицы.Развернуть/Свернуть.Произвольная строка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯРазворачиваюСтрокуСПодчиненными(Парам01,ТабПарам)","ВТаблицеЯРазворачиваюСтрокуСПодчиненными","И в таблице ""ИмяТаблицы"" я разворачиваю строку с подчиненными:" + Символы.ПС + "		| 'ИмяКолонки' |" + Символы.ПС + "		| 'ЗначениеКолонки' |","Развернуть группу строк со всеми подчиненными строками. Нужен режим совместимости 8.3.13 или выше.","UI.Таблицы.Развернуть/Свернуть.Произвольная строка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯРазворачиваюТекущуюСтроку(Парам01)","ВТаблицеЯРазворачиваюТекущуюСтроку","И в таблице ""ИмяТаблицы"" я разворачиваю текущую строку","Развернуть текущую строку таблицы/дерева","UI.Таблицы.Развернуть/Свернуть.Текущая строка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯРазворачиваюТекущуюСтрокуСПодчиненными(Парам01)","ВТаблицеЯРазворачиваюТекущуюСтрокуСПодчиненными","И в таблице ""ИмяТаблицы"" я разворачиваю текущую строку с подчиненными","Развернуть текущую строку таблицы/дерева со всеми подчиненными строками. Нужен режим совместимости 8.3.13 или выше.","UI.Таблицы.Развернуть/Свернуть.Текущая строка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВФормеВТаблицеЯСворачиваюСтроку(Парам01,Парам02,ТабПарам)","ВФормеВТаблицеЯСворачиваюСтроку","И В форме ""Справочник2"" в таблице ""ИмяТаблицы"" я сворачиваю строку:" + Символы.ПС + "		| 'ИмяКолонки' |" + Символы.ПС + "		| 'ЗначениеКолонки' |");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯСворачиваюСтроку(Парам01,ТабПарам)","ВТаблицеЯСворачиваюСтроку","И в таблице ""ИмяТаблицы"" я сворачиваю строку:" + Символы.ПС + "		| 'ИмяКолонки' |" + Символы.ПС + "		| 'ЗначениеКолонки' |","Свернуть группу строк","UI.Таблицы.Развернуть/Свернуть.Произвольная строка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯСворачиваюТекущуюСтроку(Парам01)","ВТаблицеЯСворачиваюТекущуюСтроку","И в таблице ""ИмяТаблицы"" я сворачиваю текущую строку","Свернуть текущую строку таблицы/дерева","UI.Таблицы.Развернуть/Свернуть.Текущая строка");
	
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВФормеВТЧЯВыбираюТекущуюСтроку(Парам01,Парам02)","ВФормеВТЧЯВыбираюТекущуюСтроку","И В форме ""Справочник2"" в ТЧ ""ИмяТаблицы"" я выбираю текущую строку");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯВыбираюТекущуюСтроку(Парам01)","ВТаблицеЯВыбираюТекущуюСтроку","И в таблице ""ИмяТаблицы"" я выбираю текущую строку","Выбор текущей строки с указанием таблицы","UI.Таблицы.Выбор строки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЕстьЭлементСправочникаСНаименованиемИРеквизитомРавным(Парам01,Парам02,Парам03,Парам04)","ЕстьЭлементСправочникаСНаименованиемИРеквизитомРавным","И Есть элемент справочника ""ИмяФормы"" с наименованием ""Тест"" и  реквизитом ""ИмяПоля"" равным ""Группа2Элем2""");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯИзменяюФлагСЗаголовком(Парам01)","ВОткрытойФормеЯИзменяюФлагСЗаголовком","И В открытой форме я изменяю флаг с заголовком ""ИмяФлага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯИзменяюФлаг(Парам01)","ВОткрытойФормеЯИзменяюФлаг","И В открытой форме я изменяю флаг ""Заголовок флага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯИзменяюФлаг(Парам01)","ЯИзменяюФлаг","И я изменяю флаг ""Заголовок флага""", "Изменяет текущее состояние флага", "UI.Формы.Поля.Флаги");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯИзменяюФлагСИменем(Парам01)","ВОткрытойФормеЯИзменяюФлагСИменем","И В открытой форме я изменяю флаг с именем 'ИмяФлага'");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯИзменяюФлагСИменем(Парам01)","ЯИзменяюФлагСИменем","И я изменяю флаг с именем 'ИмяФлага'", "Изменяет текущее состояние флага", "UI.Формы.Поля.Флаги");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯМеняюЗначениеПереключателяСЗаголовкомНа(Парам01,Парам02)","ВОткрытойФормеЯМеняюЗначениеПереключателяСЗаголовкомНа","И В открытой форме я меняю значение переключателя с заголовком ""Заголовок элемента"" на ""Значение переключателя""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯМеняюЗначениеПереключателяНа(Парам01,Парам02)","ВОткрытойФормеЯМеняюЗначениеПереключателяНа","И В открытой форме я меняю значение переключателя ""Заголовок элемента"" на ""Значение переключателя""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯМеняюЗначениеПереключателяНа(Парам01,Парам02)","ЯМеняюЗначениеПереключателяНа","И я меняю значение переключателя ""Заголовок элемента"" на ""Значение переключателя""","Меняет значение переключателя (радиобаттона). Значение задаётся либо по представлению, либо по номеру.","UI.Формы.Поля.Переключатели");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯМеняюЗначениеПереключателяНаПоШаблону(Парам01,Парам02)","ЯМеняюЗначениеПереключателяНаПоШаблону","И я меняю значение переключателя 'Заголовок элемента' на 'Значение переключателя' по шаблону","Меняет значение переключателя (радиобаттона). При этом возможно использовать символ * в значении. Работает в 8.3.12 и выше.","UI.Формы.Поля.Переключатели");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯМеняюЗначениеПереключателяСИменемНа(Парам01,Парам02)","ВОткрытойФормеЯМеняюЗначениеПереключателяСИменемНа","И В открытой форме я меняю значение переключателя с именем 'РеквизитПереключатель' на ""Значение переключателя""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯМеняюЗначениеПереключателяСИменемНа(Парам01,Парам02)","ЯМеняюЗначениеПереключателяСИменемНа","И я меняю значение переключателя с именем 'РеквизитПереключатель' на ""Значение переключателя""","Меняет значение переключателя (радиобаттона). Значение задаётся либо по представлению, либо по номеру.","UI.Формы.Поля.Переключатели");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯМеняюЗначениеПереключателяСИменемНаПоШаблону(Парам01,Парам02)","ЯМеняюЗначениеПереключателяСИменемНаПоШаблону","И я меняю значение переключателя с именем 'ИмяЭлемента' на 'Значение переключателя' по шаблону","Меняет значение переключателя (радиобаттона). При этом возможно использовать символ * в значении. Работает в 8.3.12 и выше.","UI.Формы.Поля.Переключатели");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯНажимаюНаКнопкуСЗаголовком(Парам01,Парам02)","ВОткрытойФормеВТЧЯНажимаюНаКнопкуСЗаголовком","И В открытой форме в ТЧ ""ИмяТаблицы"" я нажимаю на кнопку с заголовком ""Добавить""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯНажимаюНаКнопку(Парам01,Парам02)","ВОткрытойФормеВТЧЯНажимаюНаКнопку","И В открытой форме в ТЧ ""ИмяТаблицы"" я нажимаю на кнопку ""Добавить""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯНажимаюНаКнопку(Парам01,Парам02)","ВТЧЯНажимаюНаКнопку","И в таблице ""ИмяТаблицы"" я нажимаю на кнопку ""Добавить""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯНажимаюНаКнопку(Парам01,Парам02)","ВТаблицеЯНажимаюНаКнопку","И в таблице ""ИмяТаблицы"" я нажимаю на кнопку ""Добавить""","Нажимает на кнопку таблицы. Кнопка ищется по заголовку.","UI.Таблицы.Кнопки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯНажимаюНаКнопкуСИменем(Парам01,Парам02)","ВОткрытойФормеВТЧЯНажимаюНаКнопкуСИменем","И В открытой форме в ТЧ ""ИмяТаблицы"" я нажимаю на кнопку с именем 'Добавить'");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯНажимаюНаКнопкуСИменем(Парам01,Парам02)","ВТЧЯНажимаюНаКнопкуСИменем","И в таблице ""ИмяТаблицы"" я нажимаю на кнопку с именем 'Добавить'");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯНажимаюНаКнопкуСИменем(Парам01,Парам02)","ВТаблицеЯНажимаюНаКнопкуСИменем","И в таблице ""ИмяТаблицы"" я нажимаю на кнопку с именем 'Добавить'","Нажимает на кнопку таблицы. Кнопка ищется по имени.","UI.Таблицы.Кнопки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧВПолеСЗаголовкомЯВвожуТекст(Парам01,Парам02,Парам03)","ВОткрытойФормеВТЧВПолеСЗаголовкомЯВвожуТекст","И В открытой форме в ТЧ ""ИмяТаблицы"" в поле с заголовком ""Заголовок поля"" я ввожу текст ""ЗначениеПоля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧВПолеЯВвожуТекст(Парам01,Парам02,Парам03)","ВОткрытойФормеВТЧВПолеЯВвожуТекст","И В открытой форме в ТЧ ""ИмяТаблицы"" в поле ""Заголовок поля"" я ввожу текст ""ЗначениеПоля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧВПолеЯВвожуТекст(Парам01,Парам02,Парам03)","ВТЧВПолеЯВвожуТекст","И в таблице ""ИмяТаблицы"" в поле ""Заголовок поля"" я ввожу текст ""ЗначениеПоля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеЯВвожуТекст(Парам01,Парам02,Парам03)","ВТаблицеВПолеЯВвожуТекст","И в таблице ""ИмяТаблицы"" в поле ""Заголовок поля"" я ввожу текст ""ЗначениеПоля""","Ввод текста в поле таблицы","UI.Таблицы.Поля.Ввод текста");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеЯВвожуТекущуюДату(Парам01,Парам02)","ВТаблицеВПолеЯВвожуТекущуюДату","И в таблице ""ИмяТаблицы"" в поле ""Заголовок поля"" я ввожу текущую дату","Ввод текущей даты в поле таблицы","UI.Таблицы.Поля.Ввод даты");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеСИменемЯВвожуТекущуюДату(Парам01,Парам02)(Парам01,Парам02)","ВТаблицеВПолеСИменемЯВвожуТекущуюДату(Парам01,Парам02)","И в таблице ""ИмяТаблицы"" в поле с именем 'ИмяПоля' я ввожу текущую дату","Ввод текущей даты в поле таблицы","UI.Таблицы.Поля.Ввод даты");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеУПоляЯЖдуЗначенияВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)","ВТаблицеУПоляЯЖдуЗначенияВТечениеСекунд","И в таблице ""ИмяТаблицы"" у поля ""Заголовок элемента"" я жду значения ""Значение"" в течение 20 секунд","Ожидает значения в ячейке таблицы в текущей строке в течение указанного числа секунд. Ячейка указывается по её заголовку.","UI.Таблицы.Ожидание значения ячейки таблицы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеУПоляСИменемЯЖдуЗначенияВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)","ВТаблицеУПоляСИменемЯЖдуЗначенияВТечениеСекунд","И в таблице ""ИмяТаблицы"" у поля с именем 'ИмяЭлемента' я жду значения ""Значение"" в течение 20 секунд","Ожидает значения в ячейке таблицы в текущей строке в течение указанного числа секунд. Ячейка указывается по её имени.","UI.Таблицы.Ожидание значения ячейки таблицы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеУПоляЯЖдуЗначенияОтличногоОтВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)","ВТаблицеУПоляЯЖдуЗначенияОтличногоОтВТечениеСекунд","И в таблице ""ИмяТаблицы"" у поля ""Заголовок элемента"" я жду значения отличного от ""Значение"" в течение 20 секунд","Ожидает значения отличного от указанного в ячейке таблицы в текущей строке в течение указанного числа секунд. Ячейка указывается по её заголовку.","UI.Таблицы.Ожидание значения ячейки таблицы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеУПоляСИменемЯЖдуЗначенияОтличногоОтВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)","ВТаблицеУПоляСИменемЯЖдуЗначенияОтличногоОтВТечениеСекунд","И в таблице ""ИмяТаблицы"" у поля с именем 'ИмяЭлемента' я жду значения отличного от ""Значение"" в течение 20 секунд","Ожидает значения отличного от указанного в ячейке таблицы в текущей строке в течение указанного числа секунд. Ячейка указывается по её имени.","UI.Таблицы.Ожидание значения ячейки таблицы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляЯЖдуЗначенияОтличногоОтВТечениеСекунд(Парам01,Парам02,Парам03)","УПоляЯЖдуЗначенияОтличногоОтВТечениеСекунд","И  у поля ""Заголовок элемента"" я жду значения отличного от ""Значение"" в течение 20 секунд","Ожидает, что значение поля станет отличным от указанного значения в течение указанного числа секунд.","UI.Формы.Поля.Ожидание значения");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляСИменемЯЖдуЗначенияОтличногоОтВТечениеСекунд(Парам01,Парам02,Парам03)","УПоляСИменемЯЖдуЗначенияОтличногоОтВТечениеСекунд","И  у поля с именем 'ИмяЭлемента' я жду значения отличного от ""Значение"" в течение 20 секунд","Ожидает, что значение поля станет отличным от указанного значения в течение указанного числа секунд.","UI.Формы.Поля.Ожидание значения");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеИмеетЗначение(Парам01,Парам02,Парам03)","ВТаблицеПолеИмеетЗначение","И в таблице ""ИмяТаблицы"" поле ""Заголовок поля"" имеет значение ""ЗначениеПоля""","Проверка значения поля (ячейки) текущей строки таблицы","UI.Таблицы.Значение ячейки таблицы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеСИменемИмеетЗначение(Парам01,Парам02,Парам03)","ВТаблицеПолеСИменемИмеетЗначение","И в таблице ""ИмяТаблицы"" поле с именем 'ИмяПоля' имеет значение ""ЗначениеПоля""","Проверка значения поля (ячейки) текущей строки таблицы","UI.Таблицы.Значение ячейки таблицы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеИмеетЗначениеПоШаблону(Парам01,Парам02,Парам03)","ВТаблицеПолеИмеетЗначениеПоШаблону","И в таблице ""ИмяТаблицы"" поле ""Заголовок поля"" имеет значение ""ЗначениеПоля"" по шаблону","Проверка значения поля (ячейки) текущей строки таблицы. При этом возможно использовать символ * для замены произвольного числа символов в значении.","UI.Таблицы.Значение ячейки таблицы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеСИменемИмеетЗначениеПоШаблону(Парам01,Парам02,Парам03)","ВТаблицеПолеСИменемИмеетЗначениеПоШаблону","И в таблице ""ИмяТаблицы"" поле с именем 'ИмяПоля' имеет значение ""ЗначениеПоля"" по шаблону","Проверка значения поля (ячейки) текущей строки таблицы. При этом возможно использовать символ * для замены произвольного числа символов в значении.","UI.Таблицы.Значение ячейки таблицы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧВПолеСИменемЯВвожуТекст(Парам01,Парам02,Парам03)","ВОткрытойФормеВТЧВПолеСИменемЯВвожуТекст","И В открытой форме в ТЧ ""ИмяТаблицы"" в поле с именем 'ИмяПоля' я ввожу текст ""ЗначениеПоля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧВПолеСИменемЯВвожуТекст(Парам01,Парам02,Парам03)","ВТЧВПолеСИменемЯВвожуТекст","И в таблице ""ИмяТаблицы"" в поле с именем 'ИмяПоля' я ввожу текст ""ЗначениеПоля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеСИменемЯВвожуТекст(Парам01,Парам02,Парам03)","ВТаблицеВПолеСИменемЯВвожуТекст","И в таблице ""ИмяТаблицы"" в поле с именем 'ИмяПоля' я ввожу текст ""ЗначениеПоля""","Ввод текста в поле таблицы","UI.Таблицы.Поля.Ввод текста");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВТекущееПолеЯВвожуТекст(Парам01,Парам02)","ВТаблицеВТекущееПолеЯВвожуТекст","И в таблице ""ИмяТаблицы"" в текущее поле я ввожу текст ""ЗначениеПоля""","Ввод текста в текущее поле таблицы.","UI.Таблицы.Поля.Ввод текста");
	
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧИзВыпадающегоСпискаСЗаголовкомЯВыбираю(Парам01,Парам02,Парам03)","ВОткрытойФормеВТЧИзВыпадающегоСпискаСЗаголовкомЯВыбираю","И В открытой форме в ТЧ ""ИмяТаблицы"" из выпадающего списка с заголовком ""Заголовок поля"" я выбираю ""ЗначениеПоля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03)","ВОткрытойФормеВТЧИзВыпадающегоСпискаЯВыбираю","И В открытой форме в ТЧ ""ИмяТаблицы"" из выпадающего списка ""Заголовок поля"" я выбираю ""ЗначениеПоля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03)","ВТЧИзВыпадающегоСпискаЯВыбираю","И в таблице ""ИмяТаблицы"" из выпадающего списка ""Заголовок поля"" я выбираю ""ЗначениеПоля""");
	
	//устаревшее. всегда выбирает по строке
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03)","ВТаблицеИзВыпадающегоСпискаЯВыбираю","И в таблице ""ИмяТаблицы"" из выпадающего списка ""Заголовок поля"" я выбираю ""ЗначениеПоля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираю(Парам01,Парам02,Парам03)","ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираю","И в таблице ""ИмяТаблицы"" из выпадающего списка с именем 'ИмяПоля' я выбираю ""ЗначениеПоля""");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеИзВыпадающегоСпискаЯВыбираюТочноеЗначение(Парам01,Парам02,Парам03)","ВТаблицеИзВыпадающегоСпискаЯВыбираюТочноеЗначение","И в таблице ""ИмяТаблицы"" из выпадающего списка ""Заголовок поля"" я выбираю точное значение ""ЗначениеПоля""","Выбор значения из выпадающего списка. Должно быть указано точное значение","UI.Таблицы.Поля.Выбор из списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираюТочноеЗначение(Парам01,Парам02,Парам03)","ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираюТочноеЗначение","И в таблице ""ИмяТаблицы"" из выпадающего списка с именем 'ИмяПоля' я выбираю точное значение ""ЗначениеПоля""","Выбор значения из выпадающего списка","UI.Таблицы.Поля.Выбор из списка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеИзВыпадающегоСпискаЯВыбираюПоСтроке(Парам01,Парам02,Парам03)","ВТаблицеИзВыпадающегоСпискаЯВыбираюПоСтроке","И в таблице ""ИмяТаблицы"" из выпадающего списка ""Заголовок поля"" я выбираю по строке ""ЗначениеПоля""","Выбор значения из выпадающего списка. Сначала будет ввод по строке указанного значения, затем будет выбрано первое значение из списка.","UI.Таблицы.Поля.Выбор из списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираюПоСтроке(Парам01,Парам02,Парам03)","ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираюПоСтроке","И в таблице ""ИмяТаблицы"" из выпадающего списка с именем 'ИмяПоля' я выбираю по строке ""ЗначениеПоля""","Выбор значения из выпадающего списка. Сначала будет ввод по строке указанного значения, затем будет выбрано первое значение из списка.","UI.Таблицы.Поля.Выбор из списка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯИзменяюФлагСЗаголовком(Парам01,Парам02)","ВОткрытойФормеВТЧЯИзменяюФлагСЗаголовком","И В открытой форме в ТЧ ""ИмяТаблицы"" я изменяю флаг с заголовком ""ИмяФлага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯИзменяюФлаг(Парам01,Парам02)","ВОткрытойФормеВТЧЯИзменяюФлаг","И В открытой форме в ТЧ ""ИмяТаблицы"" я изменяю флаг ""Заголовок флага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯИзменяюФлаг(Парам01,Парам02)","ВТЧЯИзменяюФлаг","И в таблице ""ИмяТаблицы"" я изменяю флаг ""Заголовок флага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯИзменяюФлаг(Парам01,Парам02)","ВТаблицеЯИзменяюФлаг","И в таблице ""ИмяТаблицы"" я изменяю флаг ""Заголовок флага""", "Изменяет текущее состояние флага", "UI.Таблицы.Флаги");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯИзменяюФлагСИменем(Парам01,Парам02)","ВТаблицеЯИзменяюФлагСИменем","И в таблице ""ИмяТаблицы"" я изменяю флаг с именем 'ИмяФлага'", "Изменяет текущее состояние флага", "UI.Таблицы.Флаги");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка(Парам01,Парам02)","ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка","И В открытой форме в ТЧ ""ИмяТаблицы"" я выбираю значение реквизита с заголовком ""ИмяРеквизита"" из формы списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01,Парам02)","ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаИзФормыСписка","И В открытой форме в ТЧ ""ИмяТаблицы"" я выбираю значение реквизита ""ИмяРеквизита"" из формы списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01,Парам02)","ВТЧЯВыбираюЗначениеРеквизитаИзФормыСписка","И в таблице ""ИмяТаблицы"" я выбираю значение реквизита ""ИмяРеквизита"" из формы списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01,Парам02)","ВТаблицеЯВыбираюЗначениеРеквизитаИзФормыСписка","И в таблице ""ИмяТаблицы"" я выбираю значение реквизита ""Заголовок поля"" из формы списка","Выбор значения реквизита из выпадающего списка","UI.Таблицы.Поля.Выбор из списка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01,Парам02)","ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка","И В открытой форме в ТЧ ""ИмяТаблицы"" я выбираю значение реквизита с именем 'ИмяРеквизита' из формы списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01,Парам02)","ВТЧЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка","И в таблице ""ИмяТаблицы"" я выбираю значение реквизита с именем 'ИмяРеквизита' из формы списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01,Парам02)","ВТаблицеЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка","И в таблице ""ИмяТаблицы"" я выбираю значение реквизита с именем 'ИмяРеквизита' из формы списка","Выбор значения реквизита из выпадающего списка","UI.Таблицы.Поля.Выбор из списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементСправочника1СИменемЗаписалсяКорректно(Парам01)","ЭлементСправочника1СИменемЗаписалсяКорректно","И Элемент Справочника1 с именем ""Тестовый Элемент 2"" записался корректно");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрываюОкноСЗаголовком(Парам01)","ЯЗакрываюОкноСЗаголовком","И я закрываю окно с заголовком ""ИмяОкна""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрываюОкно(Парам01)","ЯЗакрываюОкно","И я закрываю окно ""Заголовок окна""","Закрывает окно с нужным заголовком","UI.Окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрываюТекущееОкно()","ЯЗакрываюТекущееОкно","И я закрываю текущее окно","Закрывает активное окно","UI.Окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрываюОкноПредупреждения()","ЯЗакрываюОкноПредупреждения","И я закрываю окно предупреждения","Закрывает окно предупреждения если оно есть","UI.Всплывающие окна");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТекущемОкнеЕстьКнопкаКомандногоИнтерфейсаТогда(Парам01)","ВТекущемОкнеЕстьКнопкаКомандногоИнтерфейсаТогда","Если в текущем окне есть кнопка командного интерфейса ""КомандаИнтерфейса"" Тогда","Условие. Проверяет существование кнопки командного интерфейса в текущей форме.","UI.Командный интерфейс.Текущее окно","Условие");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТекущемОкнеЯНажимаюКнопкуКомандногоИнтерфейса(Парам01)","ВТекущемОкнеЯНажимаюКнопкуКомандногоИнтерфейса","И В текущем окне я нажимаю кнопку командного интерфейса ""КомандаИнтерфейса""","Нажатие кнопки командного интерфейса в текущей форме","UI.Командный интерфейс.Текущее окно");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯДобавляюНовуюСтроку(Парам01)","ВОткрытойФормеВТЧЯДобавляюНовуюСтроку","И В открытой форме в ТЧ ""Товары"" я добавляю новую строку");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯДобавляюНовуюСтроку(Парам01)","ВТЧЯДобавляюНовуюСтроку","И в таблице ""Товары"" я добавляю новую строку");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯДобавляюНовуюСтроку(Парам01)","ВТаблицеЯДобавляюНовуюСтроку","И в таблице ""Товары"" я добавляю новую строку");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоляСЗаголовком(Парам01)","ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоляСЗаголовком","И В открытой форме я нажимаю на кнопку открытия поля с заголовком ""Заголовок поля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоля(Парам01)","ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоля","И В открытой форме я нажимаю на кнопку открытия поля ""Заголовок поля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюНаКнопкуОткрытияПоля(Парам01)","ЯНажимаюНаКнопкуОткрытияПоля","И я нажимаю на кнопку открытия поля ""Заголовок поля""","Нажимает на кнопку открытия поля ввода.","UI.Формы.Поля.Открыть");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоляСИменем(Парам01)","ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоляСИменем","И В открытой форме я нажимаю на кнопку открытия поля с именем 'ИмяПоля'");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюНаКнопкуОткрытияПоляСИменем(Парам01)","ЯНажимаюНаКнопкуОткрытияПоляСИменем","И я нажимаю на кнопку открытия поля с именем 'ИмяПоля'","Нажимает на кнопку открытия поля ввода.","UI.Формы.Поля.Открыть");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюНаКнопкуСоздатьПоля(Парам01)","ЯНажимаюНаКнопкуСоздатьПоля","И я нажимаю на кнопку создать поля ""Заголовок поля""","Эмулирует нажатие кнопки ""Создать"" у выпадающего списка.","UI.Формы.Поля.Создать");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюНаКнопкуСоздатьПоляСИменем(Парам01)","ЯНажимаюНаКнопкуСоздатьПоляСИменем","И я нажимаю на кнопку создать поля с именем 'ИмяПоля'","Эмулирует нажатие кнопки ""Создать"" у выпадающего списка.","UI.Формы.Поля.Создать");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеИзВыпадающегоСпискаСЗаголовкомЯВыбираю(Парам01,Парам02)","ВОткрытойФормеИзВыпадающегоСпискаСЗаголовкомЯВыбираю","И В открытой форме из выпадающего списка с заголовком ""Заголовок поля"" я выбираю ""ЗначениеПоля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02)","ВОткрытойФормеИзВыпадающегоСпискаЯВыбираю","И В открытой форме из выпадающего списка ""Заголовок поля"" я выбираю ""ЗначениеПоля""");
	
	//устаревшее. делает ввод по строке
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02)","ИзВыпадающегоСпискаЯВыбираю","И из выпадающего списка ""Заголовок поля"" я выбираю ""ЗначениеПоля""");
	//устаревшее. делает ввод по строке
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ИзВыпадающегоСпискаСИменемЯВыбираю(Парам01,Парам02)","ИзВыпадающегоСпискаСИменемЯВыбираю","И из выпадающего списка с именем 'МойВыпадающийСписок' я выбираю ""ЗначениеПоля""");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ИзВыпадающегоСпискаЯВыбираюТочноеЗначение(Парам01,Парам02)","ИзВыпадающегоСпискаЯВыбираюТочноеЗначение","И из выпадающего списка ""Заголовок поля"" я выбираю точное значение ""ЗначениеПоля""","Выбор из выпадающего списка. Переданное значение либо должно в точности совпадать с тем, что видит пользователь при выборе из списка, либо задаётся по номеру.","UI.Формы.Поля.Выпадающий список.Точное значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ИзВыпадающегоСпискаСИменемЯВыбираюТочноеЗначение(Парам01,Парам02)","ИзВыпадающегоСпискаСИменемЯВыбираюТочноеЗначение","И из выпадающего списка с именем 'ИмяПоля' я выбираю точное значение ""ЗначениеПоля""","Выбор из выпадающего списка. Переданное значение либо должно в точности совпадать с тем, что видит пользователь при выборе из списка, либо задаётся по номеру.","UI.Формы.Поля.Выпадающий список.Точное значение");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ИзВыпадающегоСпискаЯВыбираюПоСтроке(Парам01,Парам02)","ИзВыпадающегоСпискаЯВыбираюПоСтроке","И из выпадающего списка ""Заголовок поля"" я выбираю по строке ""ЧастьСтроки""","Выбор из выпадающего списка. Значение будет выбрано через ввод по строке. Допускается вводить строку не целиком.","UI.Формы.Поля.Выпадающий список.Ввод по строке");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ИзВыпадающегоСпискаСИменемЯВыбираюПоСтроке(Парам01,Парам02)","ИзВыпадающегоСпискаСИменемЯВыбираюПоСтроке","И из выпадающего списка с именем 'ИмяПоля' я выбираю по строке ""ЧастьСтроки""","Выбор из выпадающего списка. Значение будет выбрано через ввод по строке. Допускается вводить строку не целиком.","UI.Формы.Поля.Выпадающий список.Ввод по строке");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеИзВыпадающегоСпискаСИменемЯВыбираю(Парам01,Парам02)","ВОткрытойФормеИзВыпадающегоСпискаСИменемЯВыбираю","И В открытой форме из выпадающего списка с именем 'ИмяПоля' я выбираю ""ЗначениеПоля""");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоляСЗаголовком(Парам01)","ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоляСЗаголовком","И В открытой форме я нажимаю кнопку очистить у поля с заголовком ""Заголовок поля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоля(Парам01)","ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоля","И В открытой форме я нажимаю кнопку очистить у поля ""Заголовок поля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюКнопкуОчиститьУПоля(Парам01)","ЯНажимаюКнопкуОчиститьУПоля","И я нажимаю кнопку очистить у поля ""Заголовок поля""","Очищает поле","UI.Формы.Поля.Очистить поле");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоляСИменем(Парам01)","ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоляСИменем","И В открытой форме я нажимаю кнопку очистить у поля с именем 'ИмяПоля'");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюКнопкуОчиститьУПоляСИменем(Парам01)","ЯНажимаюКнопкуОчиститьУПоляСИменем","И я нажимаю кнопку очистить у поля с именем 'ИмяПоля'","Очищает поле","UI.Формы.Поля.Очистить поле");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТабличныйДокументФормыСИменемСталПустым(Парам01)","ТабличныйДокументФормыСИменемСталПустым","И табличный документ формы с именем 'РеквизитТабличныйДокумент' стал пустым","Проверяет, что табличный документ пустой","UI.Табличный документ.Проверка на пустоту");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТаблицеСИменемВКолонкеНетЗначения(Парам01,Парам02,Парам03)","ВОткрытойФормеВТаблицеСИменемВКолонкеНетЗначения","И В открытой форме в таблице с именем 'ДеревоТестов' в колонке ""Имя"" нет значения ""Temp1""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеСИменемВКолонкеНетЗначения(Парам01,Парам02,Парам03)","ВТаблицеСИменемВКолонкеНетЗначения","И в таблице с именем 'ДеревоТестов' в колонке ""Имя"" нет значения ""Temp1""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТаблицеСИменемВКолонкеЕстьЗначение(Парам01,Парам02,Парам03)","ВОткрытойФормеВТаблицеСИменемВКолонкеЕстьЗначение","И В открытой форме в таблице с именем 'ДеревоТестов' в колонке ""Имя"" есть значение ""ОткрытиеФормы""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеСИменемВКолонкеЕстьЗначение(Парам01,Парам02,Парам03)","ВТаблицеСИменемВКолонкеЕстьЗначение","И в таблице с именем 'ДеревоТестов' в колонке ""Имя"" есть значение ""ОткрытиеФормы""");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯАктивизируюПоле(Парам01,Парам02)","ВОткрытойФормеВТЧЯАктивизируюПоле","И В открытой форме в ТЧ ""ИмяТаблицы"" я активизирую поле ""Заголовок поля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯАктивизируюПоле(Парам01,Парам02)","ВТЧЯАктивизируюПоле","И в таблице ""ИмяТаблицы"" я активизирую поле ""Заголовок поля""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯАктивизируюПоле(Парам01,Парам02)","ВТаблицеЯАктивизируюПоле","И в таблице ""ИмяТаблицы"" я активизирую поле ""Заголовок поля""","Активизирует поле таблицы","UI.Таблицы.Поля.Активизировать поле");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯАктивизируюПолеСИменем(Парам01,Парам02)","ВОткрытойФормеВТЧЯАктивизируюПолеСИменем","И В открытой форме в ТЧ ""ИмяТаблицы"" я активизирую поле с именем 'ИмяПоля'");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯАктивизируюПолеСИменем(Парам01,Парам02)","ВТЧЯАктивизируюПолеСИменем","И в таблице ""ИмяТаблицы"" я активизирую поле с именем 'ИмяПоля'");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯАктивизируюПолеСИменем(Парам01,Парам02)","ВТаблицеЯАктивизируюПолеСИменем","И в таблице ""ИмяТаблицы"" я активизирую поле с именем 'ИмяПоля'","Активизирует поле таблицы","UI.Таблицы.Поля.Активизировать поле");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯАктивизируюКолонкуВГруппе(Парам01,Парам02,Парам03)","ВТаблицеЯАктивизируюКолонкуВГруппе","И в таблице ""ИмяТаблицы"" я активизирую колонку ""Заголовок колонки"" в группе ""ИмяГруппыКолонок""","Активизирует поле таблицы в указанной группе колонок.","UI.Таблицы.Поля.Активизировать поле");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯАктивизируюКолонкуСИменемВГруппе(Парам01,Парам02,Парам03)","ВТаблицеЯАктивизируюКолонкуСИменемВГруппе","И в таблице ""ИмяТаблицы"" я активизирую колонку с именем 'ИмяКолонки' в группе ""ИмяГруппыКолонок""","Активизирует поле таблицы в указанной группе колонок.","UI.Таблицы.Поля.Активизировать поле");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯБудуВыбиратьВнешнийФайл(Парам01,Парам02,Парам03,Парам04,Парам05,Парам06,Парам07)","ЯБудуВыбиратьВнешнийФайл","И я буду выбирать внешний файл ""ИмяФайла""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯБудуВыбиратьВнешнийФайлСИндексомФильтра(Индекс,Парам01,Парам02,Парам03,Парам04,Парам05,Парам06,Парам07)","ЯБудуВыбиратьВнешнийФайлСИндексомФильтра","И я буду выбирать внешний файл с индексом фильтра ""Индекс"" ""ИмяФайла""");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыбираюФайл(Парам01,Парам02,Парам03,Парам04,Парам05,Парам06,Парам07)","ЯВыбираюФайл","И я выбираю файл ""ИмяФайла""","Устанавливает результат диалога выбора файла. Шаг необходимо вызывать до того действия, которое приводит к появлению диалога выбора файлов. Работает только в тонком клиенте.","Файлы.Выбор файла");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыбираюФайлСИндексомФильтра(Индекс,Парам01,Парам02,Парам03,Парам04,Парам05,Парам06,Парам07)",
		"ЯВыбираюФайлСИндексомФильтра","И я выбираю файл с индексом фильтра ""Индекс"" ""ИмяФайла""",
		"Устанавливает результат диалога выбора файла с учетом индекса фильтра в диалоге после выбора файлов. Шаг необходимо вызывать до того действия, которое приводит к появлению диалога выбора файлов. Работает только в тонком клиенте.",
		"Файлы.Выбор файла");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯОтменяюВыборФайла()",
		"ЯОтменяюВыборФайла",
		"И я отменяю выбор файла",
		"Отменяет выбор файла",
		"Файлы.Отмена выбора файла");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОчищаюОкноСообщенийПользователю()","ЯОчищаюОкноСообщенийПользователю","И я очищаю окно сообщений пользователю","Очищает окно сообщений пользователю.","UI.Сообщения пользователю.Очистка окна сообщений");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПерехожуПоНавигационнойСсылке(Парам01)","ЯПерехожуПоНавигационнойСсылке","Когда я перехожу по навигационной ссылке ""НавигационнаяСсылка""");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПерехожуКСледующемуРеквизиту()","ЯПерехожуКСледующемуРеквизиту","И я перехожу к следующему реквизиту","Переходит к следующему реквизиту формы","UI.Формы.Поля.Перейти к следующему реквизиту");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПерехожуКПредыдущемуРеквизиту()","ЯПерехожуКПредыдущемуРеквизиту","И я перехожу к предыдущему реквизиту","Переходит к предыдущему реквизиту формы","UI.Формы.Поля.Перейти к предыдущему реквизиту");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыбираюПунктМеню(ЗначениеМеню)","ЯВыбираюПунктМеню","И я выбираю пункт меню ""ЗначениеМеню""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляЯВыбираюПунктКонтекстногоМеню(Парам01,Парам02)","УПоляЯВыбираюПунктКонтекстногоМеню","И у поля ""Заголовок поля"" я выбираю пункт контекстного меню ""ИмяПунктаМеню""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляСИменемЯВыбираюПунктКонтекстногоМеню(Парам01,Парам02)","УПоляСИменемЯВыбираюПунктКонтекстногоМеню","И у поля с именем 'ИмяПоля' я выбираю пункт контекстного меню ""ИмяПунктаМеню""");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыбираюПунктКонтекстногоМенюНаЭлементеФормы(Парам01,Парам02)","ЯВыбираюПунктКонтекстногоМенюНаЭлементеФормы","И я выбираю пункт контекстного меню ""ИмяПунктаМеню"" на элементе формы ""Заголовок поля""","Выбирает нужный пункт контекстного меню у элемента формы","UI.Формы.Контекстное меню");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыбираюПунктКонтекстногоМенюНаЭлементеФормыСИменем(Парам01,Парам02)","ЯВыбираюПунктКонтекстногоМенюНаЭлементеФормыСИменем","И я выбираю пункт контекстного меню ""ИмяПунктаМеню"" на элементе формы с именем 'ЭлементФормы'","Выбирает нужный пункт контекстного меню у элемента формы","UI.Формы.Контекстное меню");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыбираюПунктКонтекстногоМенюСИменемНаЭлементеФормы(Парам01,Парам02)","ЯВыбираюПунктКонтекстногоМенюСИменемНаЭлементеФормы","И я выбираю пункт контекстного меню с именем 'ИмяПунктаМеню' на элементе формы ""Заголовок поля""","Выбирает нужный пункт контекстного меню у элемента формы","UI.Формы.Контекстное меню");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыбираюПунктКонтекстногоМенюСИменемНаЭлементеФормыСИменем(Парам01,Парам02)","ЯВыбираюПунктКонтекстногоМенюСИменемНаЭлементеФормыСИменем","И я выбираю пункт контекстного меню с именем 'ИмяПунктаМеню' на элементе формы с именем 'ЭлементФормы'","Выбирает нужный пункт контекстного меню у элемента формы","UI.Формы.Контекстное меню");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыбираюИзСписка(Значение)","ЯВыбираюИзСписка","И я выбираю из списка ""Значение""","Выбирает значение из списка, который привязан к форме. При этом список должен быть вызван методом ПоказатьВыборИзСписка(). Такой список может появиться, если происходит перехват стандартных событий формы, и пользователю показывается другой список для выбора значения. Следует различать выбор из меню формы и выбор из списка привязнного к форме.","UI.Формы.Выпадающий список формы.Выбор точного значения");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыбираюИзСпискаПоШаблону(Парам01)","ЯВыбираюИзСпискаПоШаблону","И я выбираю из списка 'Значение' по шаблону","Выбирает значение из списка, который привязан к форме. Допустимо использовать символ *. При этом список должен быть вызван методом ПоказатьВыборИзСписка(). Такой список может появиться, если происходит перехват стандартных событий формы, и пользователю показывается другой список для выбора значения. Следует различать выбор из меню формы и выбор из списка привязнного к форме.","UI.Формы.Выпадающий список формы.Выбор по шаблону");
	
	// В таблице я Устанавливаю Флаг
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯУстанавливаюФлагСЗаголовком(Парам01,Парам02)","ВОткрытойФормеВТЧЯУстанавливаюФлагСЗаголовком","И В открытой форме в ТЧ ""ИмяТаблицы"" я устанавливаю флаг с заголовком ""ИмяФлага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯУстанавливаюФлаг(Парам01,Парам02)","ВОткрытойФормеВТЧЯУстанавливаюФлаг","И В открытой форме в ТЧ ""ИмяТаблицы"" я устанавливаю флаг ""Заголовок флага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯУстанавливаюФлаг(Парам01,Парам02)","ВТЧЯУстанавливаюФлаг","И в таблице ""ИмяТаблицы"" я устанавливаю флаг ""Заголовок флага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯУстанавливаюФлаг(Парам01,Парам02)","ВТаблицеЯУстанавливаюФлаг","И в таблице ""ИмяТаблицы"" я устанавливаю флаг ""Заголовок флага""", "Устанавливает флаг в Истина", "UI.Таблицы.Флаги");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯУстанавливаюФлагСИменем(Парам01,Парам02)","ВТаблицеЯУстанавливаюФлагСИменем","И в таблице ""ИмяТаблицы"" я устанавливаю флаг с именем 'ИмяФлага'", "Устанавливает флаг в Истина", "UI.Таблицы.Флаги");

	// В таблице я Снимаю Флаг
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯСнимаюФлагСЗаголовком(Парам01,Парам02)","ВОткрытойФормеВТЧЯСнимаюФлагСЗаголовком","И В открытой форме в ТЧ ""ИмяТаблицы"" я снимаю флаг с заголовком ""ИмяФлага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеВТЧЯСнимаюФлаг(Парам01,Парам02)","ВОткрытойФормеВТЧЯСнимаюФлаг","И В открытой форме в ТЧ ""ИмяТаблицы"" я снимаю флаг ""Заголовок флага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧЯСнимаюФлаг(Парам01,Парам02)","ВТЧЯСнимаюФлаг","И в таблице ""ИмяТаблицы"" я снимаю флаг ""Заголовок флага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯСнимаюФлаг(Парам01,Парам02)","ВТаблицеЯСнимаюФлаг","И в таблице ""ИмяТаблицы"" я снимаю флаг ""Заголовок флага""", "Устанавливает флаг в Ложь", "UI.Таблицы.Флаги");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯСнимаюФлагСИменем(Парам01,Парам02)","ВТаблицеЯСнимаюФлагСИменем","И в таблице ""ИмяТаблицы"" я снимаю флаг с именем 'ИмяФлага'", "Устанавливает флаг в Ложь", "UI.Таблицы.Флаги");
	
	// я Снимаю Флаг
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯСнимаюФлагСЗаголовком(Парам01)","ВОткрытойФормеЯСнимаюФлагСЗаголовком","И В открытой форме я снимаю флаг с заголовком ""ИмяФлага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯСнимаюФлаг(Парам01)","ВОткрытойФормеЯСнимаюФлаг","И В открытой форме я снимаю флаг ""Заголовок флага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯСнимаюФлаг(Парам01)","ЯСнимаюФлаг","И я снимаю флаг ""Заголовок флага""","Устанавливает флаг в Ложь", "UI.Формы.Поля.Флаги");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯСнимаюФлагСИменем(Парам01)","ВОткрытойФормеЯСнимаюФлагСИменем","И В открытой форме я снимаю флаг с именем 'ИмяФлага'");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯСнимаюФлагСИменем(Парам01)","ЯСнимаюФлагСИменем","И я снимаю флаг с именем 'ИмяФлага'", "Устанавливает флаг в Ложь", "UI.Формы.Поля.Флаги");
	
	// я Устанавливаю Флаг
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯУстанавливаюФлагСЗаголовком(Парам01)","ВОткрытойФормеЯУстанавливаюФлагСЗаголовком","И В открытой форме я устанавливаю флаг с заголовком ""ИмяФлага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯУстанавливаюФлаг(Парам01)","ВОткрытойФормеЯУстанавливаюФлаг","И В открытой форме я устанавливаю флаг ""Заголовок флага""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУстанавливаюФлаг(Парам01)","ЯУстанавливаюФлаг","И я устанавливаю флаг ""Заголовок флага""","Устанавливает флаг в Истина","UI.Формы.Поля.Флаги");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЯУстанавливаюФлагСИменем(Парам01)","ВОткрытойФормеЯУстанавливаюФлагСИменем","И В открытой форме я устанавливаю флаг с именем 'ИмяФлага'");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУстанавливаюФлагСИменем(Парам01)","ЯУстанавливаюФлагСИменем","И я устанавливаю флаг с именем 'ИмяФлага'", "Устанавливает флаг в Истина", "UI.Формы.Поля.Флаги");
	
	//чтобы запомнить в переменной Контекст значение элемента формы
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеПоляКак(Парам01,Парам02)","ЯЗапоминаюЗначениеПоляКак","И я запоминаю значение поля ""Заголовок поля"" как ""ИмяПеременной""","Сохранение значения поля в переменную Контекст","Переменные.Сохранить значение.Поле формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеПоляСИменемКак(Парам01,Парам02)","ЯЗапоминаюЗначениеПоляСИменемКак","И я запоминаю значение поля с именем 'ИмяПоля' как ""ИмяПеременной""","Сохранение значения поля в переменную Контекст","Переменные.Сохранить значение.Поле формы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеТаблицыПоляКак(Парам01,Парам02,Парам03)","ЯЗапоминаюЗначениеТаблицыПоляКак","И я запоминаю значение таблицы ""ИмяТаблицы"" поля ""Заголовок поля"" как ""ИмяПеременной""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеТаблицыПоляСИменемКак(Парам01,Парам02,Парам03)","ЯЗапоминаюЗначениеТаблицыПоляСИменемКак","И я запоминаю значение таблицы ""ИмяТаблицы"" поля с именем 'ИмяПоля' как ""ИмяПеременной""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеПоляТаблицыКак(Парам01,Парам02,Парам03)","ЯЗапоминаюЗначениеПоляТаблицыКак","И я запоминаю значение поля ""Заголовок поля"" таблицы ""ИмяТаблицы"" как ""ИмяПеременной""","Сохранение значения поля таблицы в переменную Контекст","Переменные.Сохранить значение.Таблица.Поле таблицы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеПоляСИменемТаблицыКак(Парам01,Парам02,Парам03)","ЯЗапоминаюЗначениеПоляСИменемТаблицыКак","И я запоминаю значение поля с именем 'ИмяПоля' таблицы ""ИмяТаблицы"" как ""ИмяПеременной""","Сохранение значения поля таблицы в переменную Контекст","Переменные.Сохранить значение.Таблица.Поле таблицы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеПоляСКлючом(Парам01,Парам02)","ЯЗапоминаюЗначениеПоляСКлючом","И я запоминаю значение поля ""Заголовок поля"" с ключом ""Номер документа""","Сохранение значения поля в переменную Контекст с произвольным ключом","Переменные.Сохранить значение.Поле формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеПоляКакГлобально(Парам01,Парам02)","ЯЗапоминаюЗначениеПоляКакГлобально","И я запоминаю значение поля ""Заголовок поля"" как ""ИмяПеременной"" глобально","Сохранение значения поля в переменную КонтекстСохраняемый","Контекст.Контекст сохраняемый.Сохранить значение.Поле формы.Устаревшее");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеПоляСИменемКакГлобально(Парам01,Парам02)","ЯЗапоминаюЗначениеПоляСИменемКакГлобально","И я запоминаю значение поля с именем 'ИмяПоля' как ""ИмяПеременной"" глобально","Сохранение значения поля в переменную КонтекстСохраняемый","Контекст.Контекст сохраняемый.Сохранить значение.Поле формы.Устаревшее");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеПоляСКлючомГлобально(Парам01,Парам02)","ЯЗапоминаюЗначениеПоляСКлючомГлобально","И я запоминаю значение поля ""Заголовок поля"" с ключом ""Номер документа"" глобально","Сохранение значения поля в переменную КонтекстСохраняемый с произвольным ключом","Контекст.Контекст сохраняемый.Сохранить значение.Поле формы.Устаревшее");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюТекущееОкноКак(Парам01)","ЯЗапоминаюТекущееОкноКак","И я запоминаю текущее окно как ""ЗаголовокОкна""","Сохранение значения заголовка текущего окна в переменную.","Переменные.Сохранить значение.Форма");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюТекущуюФормуКак(Парам01)","ЯЗапоминаюТекущуюФормуКак","И я запоминаю текущую форму как ""ИмяФормы""","Сохранение имени формы текущего окна в переменную.","Переменные.Сохранить значение.Форма");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюКоличествоСтрокТаблицыКак(Парам01,Парам02)","ЯЗапоминаюКоличествоСтрокТаблицыКак","И я запоминаю количество строк таблицы ""ИмяТаблицы"" как ""ИмяПеременной""","Сохранение количества строк таблицы в переменную Контекст","Переменные.Сохранить значение.Таблица.Количество строк");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"КоличествоСтрокТаблицыРавноПеременной(Парам01,Парам02)","КоличествоСтрокТаблицыРавноПеременной","И количество строк таблицы ""ИмяТаблицы"" равно переменной ""ИмяПеременной""","Сравнение количество строк таблицы с переменной Контекста","Переменные.Прочитать значение.Таблица.Количество строк");
	
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеВвожуЗначениеПеременной(Парам01,Парам02)","ВПолеВвожуЗначениеПеременной","И в поле ""Заголовок поля"" ввожу значение переменной ""ИмяПеременной""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицуВПолеВвожуЗначениеПеременной(Парам01,Парам02,Парам03)","ВТаблицуВПолеВвожуЗначениеПеременной","И в Таблицу ""ИмяТаблицы"" в поле ""Заголовок поля"" ввожу значение переменной ""ИмяПеременной""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеВвожуЗначениеКлюча(Парам01,Парам02)","ВПолеВвожуЗначениеКлюча","И в поле ""Заголовок поля"" ввожу значение ключа ""Номер документа""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеВвожуЗначениеГлобальнойПеременной(Парам01,Парам02)","ВПолеВвожуЗначениеГлобальнойПеременной","И в поле ""Заголовок поля"" ввожу значение глобальной переменной ""ИмяПеременной""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеВвожуЗначениеГлобальногоКлюча(Парам01,Парам02)","ВПолеВвожуЗначениеГлобальногоКлюча","И в поле ""Заголовок поля"" ввожу значение глобального ключа ""Ключ""");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуЗначениеПеременной(Парам01,Парам02)","ВПолеЯВвожуЗначениеПеременной","И в поле ""Заголовок поля"" я ввожу значение переменной ""ИмяПеременной""", "Вставка значения ранее сохраненной переменной в реквизит", "Переменные.Прочитать значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицуВПолеЯВвожуЗначениеПеременной(Парам01,Парам02,Парам03)","ВТаблицуВПолеЯВвожуЗначениеПеременной","И в Таблицу ""ИмяТаблицы"" в поле ""Заголовок поля"" я ввожу значение переменной ""ИмяПеременной""", "Вставка значения ранее сохраненной переменной в реквизит", "Переменные.Прочитать значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуЗначениеКлюча(Парам01,Парам02)","ВПолеЯВвожуЗначениеКлюча","И в поле ""Заголовок поля"" я ввожу значение ключа ""Номер документа""", "Вставка значения ранее сохраненного произвольного ключа в реквизит", "Переменные.Прочитать значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуЗначениеГлобальнойПеременной(Парам01,Парам02)","ВПолеЯВвожуЗначениеГлобальнойПеременной","И в поле ""Заголовок поля"" я ввожу значение глобальной переменной ""ИмяПеременной""", "Вставка значения ранее сохраненной переменной в реквизит", "Контекст.Контекст сохраняемый.Прочитать значение.Устаревшее");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуЗначениеГлобальногоКлюча(Парам01,Парам02)","ВПолеЯВвожуЗначениеГлобальногоКлюча","И в поле ""Заголовок поля"" я ввожу значение глобального ключа ""Ключ""", "Вставка значения ранее сохраненного ключа в реквизит", "Контекст.Контекст сохраняемый.Прочитать значение.Устаревшее");
	
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВывожуЗначениеПеременной(Парам01)","ЯВывожуЗначениеПеременной","И я вывожу значение переменной ""ИмяПеременной""","Выводит значение переменной контекста в окно сообщений","Переменные.Прочитать значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВывожуТипПеременной(Парам01)","ЯВывожуТипПеременной","И я вывожу тип переменной ""ИмяПеременной""","Выводит тип переменной контекста в окно сообщений","Переменные.Прочитать значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТеченииСекунд(Парам01,Парам02,Парам03,Парам04,Парам05)","ЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТеченииСекунд","И я жду, что в окне ""ЗаголовокОкна"" в таблице ""ИмяТаблицы"" количество строк будет ""больше"" 0 в течении 20 секунд");
	
	//Устарело. Шаг использовался для обхода ошибки платформы поиска активного окна.
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТечениеСекунд(Парам01,Парам02,Парам03,Парам04,Парам05)","ЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТечениеСекунд","И я жду, что в окне ""ЗаголовокОкна"" в таблице ""ИмяТаблицы"" количество строк будет ""больше"" 0 в течение 20 секунд","В течение нужного числа секунд проверяется количество строк в таблице в нужном окне","");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеРавноПеременной(Парам01,Парам02)","ПолеРавноПеременной","И поле ""Заголовок поля"" равно переменной ""ИмяПеременной""","Сравнение значения поля с переменной Контекста","Переменные.Прочитать значение.Поле формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСИменемРавноПеременной(Парам01,Парам02)","ПолеСИменемРавноПеременной","И поле с именем 'ИмяПоля' равно переменной ""ИмяПеременной""","Сравнение значения поля с переменной Контекста","Переменные.Прочитать значение.Поле формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеНеРавноПеременной(Парам01,Парам02)","ПолеНеРавноПеременной","И поле ""Заголовок поля"" не равно переменной ""ИмяПеременной""","Сравнение значения поля с переменной Контекста","Переменные.Прочитать значение.Поле формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСИменемНеРавноПеременной(Парам01,Парам02)","ПолеСИменемНеРавноПеременной","И поле с именем 'ИмяПоля' не равно переменной ""ИмяПеременной""","Сравнение значения поля с переменной Контекста","Переменные.Прочитать значение.Поле формы");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеТаблицыРавноПеременной(Парам01,Парам02,Парам03)","ПолеТаблицыРавноПеременной","И поле таблицы ""ИмяТаблицы"" ""ИмяПоля"" равно переменной ""ИмяПеременной""","Сравнение значения поля с переменной Контекста. Имя поля задаётся как оно задано в конфигураторе.","Переменные.Прочитать значение.Таблица.Поле таблицы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ПеременнаяИмеетЗначение(Парам01,Парам02)",
		"ПеременнаяИмеетЗначение","Тогда переменная ""ИмяПеременной"" имеет значение ""ЗначениеПеременной""",
		"Проверяет значение переменной контекста",
		"Переменные.Проверить значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ПеременнаяИмеетЗначениеПоШаблону(Парам01,Парам02)",
		"ПеременнаяИмеетЗначениеПоШаблону",
		"Тогда переменная ""ИмяПеременной"" имеет значение ""ЗначениеПеременной"" по шаблону",
		"Проверяет значение переменной контекста. В проверяемом значении допустимо использовать символ *.",
		"Переменные.Проверить значение");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТеченииСекунд(Парам01,Парам02,Парам03,Парам04)","ЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТеченииСекунд","И я жду, что в таблице ""ИмяТаблицы"" количество строк будет ""больше"" 0 в течении 20 секунд");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)","ЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТечениеСекунд","И я жду, что в таблице ""ИмяТаблицы"" количество строк будет ""больше"" 0 в течение 20 секунд","В течение нужного числа секунд проверяется количество строк в таблице в текущем окне","UI.Таблицы.Ожидание значения таблицы");
	
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯМеняюЗначениеПереключателяНаЗначениеПеременной(Парам01,Парам02)","ЯМеняюЗначениеПереключателяНаЗначениеПеременной","И я меняю значение переключателя ""Заголовок элемента"" на значение переменной ""ИмяПеременной""", "Изменение значение переключателя на значение ранее сохраненной переменной", "Переменные.Прочитать значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯМеняюЗначениеПереключателяСИменемНаЗначениеПеременной(Парам01,Парам02)","ЯМеняюЗначениеПереключателяСИменемНаЗначениеПеременной","И я меняю значение переключателя с именем 'РеквизитПереключатель' на значение переменной ""ИмяПеременной""", "Изменение значение переключателя на значение ранее сохраненной переменной", "Переменные.Прочитать значение");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеСИменемВвожуЗначениеПеременной(Парам01,Парам02)","ВПолеСИменемВвожуЗначениеПеременной","И в поле с именем 'ИмяПоля' ввожу значение переменной ""ИмяПеременной""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеСИменемЯВвожуЗначениеПеременной(Парам01,Парам02)","ВПолеСИменемЯВвожуЗначениеПеременной","И в поле с именем 'ИмяПоля' я ввожу значение переменной ""ИмяПеременной""", "Вставка значения ранее сохраненной переменной в реквизит", "Переменные.Прочитать значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеСИменемВвожуЗначениеКлюча(Парам01,Парам02)","ВПолеСИменемВвожуЗначениеКлюча","И в поле с именем 'ИмяПоля' ввожу значение ключа ""Номер документа""", "Вставка значения ранее сохраненного произвольного ключа в реквизит", "Переменные.Прочитать значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеСИменемВвожуЗначениеГлобальнойПеременной(Парам01,Парам02)","ВПолеСИменемВвожуЗначениеГлобальнойПеременной","И в поле с именем 'ИмяПоля' ввожу значение глобальной переменной ""ИмяПеременной""", "Вставка значения ранее сохраненной переменной в реквизит", "Контекст.Контекст сохраняемый.Прочитать значение.Устаревшее");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеСИменемВвожуЗначениеГлобальногоКлюча(Парам01,Парам02)","ВПолеСИменемВвожуЗначениеГлобальногоКлюча","И в поле с именем 'ИмяПоля' ввожу значение глобального ключа ""Ключ""", "Вставка значения ранее сохраненного произвольного ключа в реквизит", "Контекст.Контекст сохраняемый.Прочитать значение.Устаревшее");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ФлагРавен(Парам01,Парам02)","ФлагРавен","И флаг ""Заголовок флага"" равен ""Истина""","Проверяет значение флага","UI.Формы.Поля.Флаги");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ФлагСИменемРавен(Парам01,Парам02)","ФлагСИменемРавен","И флаг с именем 'ИмяФлага' равен ""Истина""","Проверяет значение флага","UI.Формы.Поля.Флаги");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПоявилосьПредупреждениеСодержащееТекст(Парам01)","ПоявилосьПредупреждениеСодержащееТекст","Тогда появилось предупреждение, содержащее текст ""Текст""","Проверяет, что появилось окно предупреждения, содержащее нужный текст.","UI.Всплывающие окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПоявилосьПредупреждениеСодержащееТекстПоШаблону(Парам01)","ПоявилосьПредупреждениеСодержащееТекстПоШаблону","Тогда появилось предупреждение, содержащее текст ""Текст"" по шаблону","Проверяет, что появилось окно предупреждения, содержащее нужный текст. Разрешается использовать символы * в проверяемом тексте..","UI.Всплывающие окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПоявилосьПредупреждениеСодержащееТекстТогда(Парам01)","ПоявилосьПредупреждениеСодержащееТекстТогда","Если появилось предупреждение, содержащее текст ""Текст"" тогда","Условие. Проверяет, что появилось окно предупреждения, содержащее нужный текст.","UI.Всплывающие окна","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПоявилосьПредупреждениеТогда(Парам01)","ПоявилосьПредупреждениеТогда","Если появилось предупреждение, тогда","Условие. Проверяет, что появилось окно предупреждения.","UI.Всплывающие окна","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПоявилосьПредупреждениеВТечениеСекундТогда(Парам01)","ПоявилосьПредупреждениеВТечениеСекундТогда","Если появилось предупреждение в течение 10 секунд тогда","Условие. Проверяет, что появилось окно предупреждения в течение указанного числа секунд.","UI.Всплывающие окна","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"НеПоявилосьОкноПредупрежденияСистемы()","НеПоявилосьОкноПредупрежденияСистемы","Тогда не появилось окно предупреждения системы","Проверяет, что на экране нет предупреждения системы.","UI.Всплывающие окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЕслиПоявилосьОкноДиалогаЯНажимаюНаКнопку(Парам01)","ЕслиПоявилосьОкноДиалогаЯНажимаюНаКнопку","Затем Если появилось окно диалога я нажимаю на кнопку ""Заголовок кнопки""","Если на экране появилось диалоговое окно - нажимает на нужную кнопку.","UI.Всплывающие окна.Устаревшее");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЕслиПоявилосьОкноДиалогаЯНажимаюНаКнопкуСИменем(Парам01)","ЕслиПоявилосьОкноДиалогаЯНажимаюНаКнопкуСИменем","Затем Если появилось окно диалога я нажимаю на кнопку с именем 'ИмяКнопки'","Если на экране появилось диалоговое окно - нажимает на кнопку с указанным именем.","UI.Всплывающие окна.Устаревшее");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюТекстПредупрежденияВПеременную(Парам01)","ЯЗапоминаюТекстПредупрежденияВПеременную","И я запоминаю текст предупреждения в переменную ""ИмяПеременной""","Запоминает текст предупреждения или модального диалога в переменную","UI.Всплывающие окна.Текст предупреждения в переменную");

	
	//убрал шаг, т.к. есть аналогичный
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуПоявленияЭлемента(Парам01)", 								"ЯЖдуПоявленияЭлемента", 						"И я жду появления элемента ""Заголовок элемента""","Ожидание появления элемента формы с нужным заголовком","");
	//убрал шаг, т.к. есть аналогичный
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуПоявленияЭлементаСИменем(Парам01)", 							"ЯЖдуПоявленияЭлементаСИменем", 				"И я жду появления элемента с именем 'ИмяЭлемента'","Ожидание появления элемента формы с нужным именем","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуПоявленияЭлементаВТеченииСекунд(Парам01, Парам02)", 			"ЯЖдуПоявленияЭлементаВТеченииСекунд", 			"И я жду появления элемента ""Заголовок элемента"" в течении 20 секунд");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуПоявленияЭлементаВТечениеСекунд(Парам01, Парам02)", 			"ЯЖдуПоявленияЭлементаВТечениеСекунд", 			"И я жду появления элемента ""Заголовок элемента"" в течение 20 секунд","Ожидание появления (видимости) элемента формы с нужным заголовком в течение указанного числа секунд","UI.Формы.Ожидание появления элемента");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуПоявленияЭлементаСИменемВТеченииСекунд(Парам01, Парам02)", 	"ЯЖдуПоявленияЭлементаСИменемВТеченииСекунд", 	"И я жду появления элемента с именем 'ИмяЭлемента' в течении 20 секунд");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуПоявленияЭлементаСИменемВТечениеСекунд(Парам01, Парам02)", 	"ЯЖдуПоявленияЭлементаСИменемВТечениеСекунд", 	"И я жду появления элемента с именем 'ИмяЭлемента' в течение 20 секунд","Ожидание появления (видимости) элемента формы с нужным именем в течение указанного числа секунд","UI.Формы.Ожидание появления элемента");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуКогдаИсчезнетЭлементВТечениеСекунд(Парам01, Парам02)", 			"ЯЖдуКогдаИсчезнетЭлементВТечениеСекунд", 			"И я жду когда исчезнет элемент ""Заголовок элемента"" в течение 20 секунд","Ожидание исчезновения (невидимости) элемента формы с нужным заголовком в течение указанного числа секунд","UI.Формы.Ожидание исчезновения элемента");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуКогдаИсчезнетЭлементСИменемВТечениеСекунд(Парам01, Парам02)", 	"ЯЖдуКогдаИсчезнетЭлементСИменемВТечениеСекунд", 	"И я жду когда исчезнет элемент с именем 'ИмяЭлемента' в течение 20 секунд","Ожидание исчезновения (невидимости) элемента формы с нужным именем в течение указанного числа секунд","UI.Формы.Ожидание исчезновения элемента");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуДоступностиЭлементаВТечениеСекунд(Парам01, Парам02)", 			"ЯЖдуДоступностиЭлементаВТечениеСекунд", 			"И я жду доступности элемента ""Заголовок элемента"" в течение 20 секунд","Ожидание доступности элемента формы с нужным заголовком в течение указанного числа секунд","UI.Формы.Ожидание доступности элемента");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуДоступностиЭлементаСИменемВТечениеСекунд(Парам01, Парам02)", 	"ЯЖдуДоступностиЭлементаСИменемВТечениеСекунд", 	"И я жду доступности элемента с именем 'ИмяЭлемента' в течение 20 секунд","Ожидание доступности элемента формы с нужным именем в течение указанного числа секунд","UI.Формы.Ожидание доступности элемента");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуНедоступностиЭлементаВТечениеСекунд(Парам01, Парам02)", 			"ЯЖдуНедоступностиЭлементаВТечениеСекунд", 			"И я жду недоступности элемента ""Заголовок элемента"" в течение 20 секунд","Ожидание недоступности элемента формы с нужным заголовком в течение указанного числа секунд","UI.Формы.Ожидание доступности элемента");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуНедоступностиЭлементаСИменемВТечениеСекунд(Парам01, Парам02)", 	"ЯЖдуНедоступностиЭлементаСИменемВТечениеСекунд", 	"И я жду недоступности элемента с именем 'ИмяЭлемента' в течение 20 секунд","Ожидание недоступности элемента формы с нужным именем в течение указанного числа секунд","UI.Формы.Ожидание доступности элемента");
	
	
	//убрал шаг, т.к. есть аналогичный
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УЭлементаЯЖдуЗначения(Парам01,Парам02)", 							"УЭлементаЯЖдуЗначения", 						"И у элемента ""Заголовок элемента"" я жду значения ""Значение""","Ожидание что элемент формы примет нужное значение (таймаут 10)","");
	//убрал шаг, т.к. есть аналогичный
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УЭлементаСИменемЯЖдуЗначения(Парам01,Парам02)", 						"УЭлементаСИменемЯЖдуЗначения", 				"И у элемента с именем 'ИмяЭлемента' я жду значения ""Значение""","Ожидание что элемент формы примет нужное значение (таймаут 10)","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УЭлементаЯЖдуЗначенияВТеченииСекунд(Парам01,Парам02,Парам03)",		"УЭлементаЯЖдуЗначенияВТеченииСекунд", 			"И у элемента ""Заголовок элемента"" я жду значения ""Значение"" в течении 20 секунд");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УЭлементаЯЖдуЗначенияВТечениеСекунд(Парам01,Парам02,Парам03)",		"УЭлементаЯЖдуЗначенияВТечениеСекунд", 			"И у элемента ""Заголовок элемента"" я жду значения ""Значение"" в течение 20 секунд","Ожидание что элемент формы примет нужное значение в течение нужного времени. Иначе будет вызвано исключение.","UI.Формы.Ожидание значения элемента");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УЭлементаЯЖдуЗначенияВТечениеСекундПоШаблону(Парам01,Парам02,Парам03)",		"УЭлементаЯЖдуЗначенияВТечениеСекундПоШаблону", 			"И у элемента ""Заголовок элемента"" я жду значения ""Значение"" в течение 20 секунд по шаблону","Ожидание что элемент формы примет нужное значение в течение нужного времени. Иначе будет вызвано исключение. Возможно использование символа * при указании ожидаемого значения.","UI.Формы.Ожидание значения элемента");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УЭлементаСИменемЯЖдуЗначенияВТеченииСекунд(Парам01,Парам02,Парам03)",		"УЭлементаСИменемЯЖдуЗначенияВТеченииСекунд", 			"И у элемента с именем 'ИмяЭлемента' я жду значения ""Значение"" в течении 20 секунд");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УЭлементаСИменемЯЖдуЗначенияВТечениеСекунд(Парам01,Парам02,Парам03)",		"УЭлементаСИменемЯЖдуЗначенияВТечениеСекунд", 			"И у элемента с именем 'ИмяЭлемента' я жду значения ""Значение"" в течение 20 секунд","Ожидание что элемент формы примет нужное значение в течение нужного времени. Иначе будет вызвано исключение.","UI.Формы.Ожидание значения элемента");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УЭлементаСИменемЯЖдуЗначенияВТечениеСекундПоШаблону(Парам01,Парам02,Парам03)",		"УЭлементаСИменемЯЖдуЗначенияВТечениеСекундПоШаблону", 			"И у элемента с именем 'ИмяЭлемента' я жду значения ""Значение"" в течение 20 секунд по шаблону","Ожидание что элемент формы примет нужное значение в течение нужного времени. Иначе будет вызвано исключение. Возможно использование символа * при указании ожидаемого значения.","UI.Формы.Ожидание значения элемента");
	
	
	// проверка видимости элемента
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВижуЭлемент(ИмяЭлемента)",               "ЯВижуЭлемент",               "И я вижу элемент ""Заголовок элемента""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВижуЭлементНаФорме(ИмяЭлемента)",        "ЯВижуЭлементНаФорме",        "И я вижу элемент ""Заголовок элемента"" на форме");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВижуЭлементСИменем(ИмяЭлемента)",        "ЯВижуЭлементСИменем",        "И я вижу элемент с именем 'ИмяЭлемента'");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВижуЭлементСИменемНаФорме(ИмяЭлемента)", "ЯВижуЭлементСИменемНаФорме", "И я вижу элемент с именем 'ИмяЭлемента' на форме");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНеВижуЭлемент(ИмяЭлемента)",              "ЯНеВижуЭлемент",              "И я не вижу элемент ""Заголовок элемента""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНеВижуЭлементНаФорме(ИмяЭлемента)",       "ЯНеВижуЭлементНаФорме",       "И я не вижу элемент ""Заголовок элемента"" на форме");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНеВижуЭлементСИменем(ИмяЭлемента)",       "ЯНеВижуЭлементСИменем",       "И я не вижу элемент с именем 'ИмяЭлемента'");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНеВижуЭлементСИменемНаФорме(ИмяЭлемента)","ЯНеВижуЭлементСИменемНаФорме","И я не вижу элемент с именем 'ИмяЭлемента' на форме");	
	
	// стоит флаг "только просмотр"
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементДоступенТолькоДляПросмотра(ИмяЭлемента)",               "ЭлементДоступенТолькоДляПросмотра",                     "И элемент ""Заголовок элемента"" доступен только для просмотра","Проверка флага ""Только просмотр""","UI.Формы.Поля.Только просмотр");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементСИменемДоступенТолькоДляПросмотра(ИмяЭлемента)",        "ЭлементСИменемДоступенТолькоДляПросмотра",              "И элемент с именем 'ИмяЭлемента' доступен только для просмотра","Проверка флага ""Только просмотр""","UI.Формы.Поля.Только просмотр");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЭлементДоступенДляПросмотра(ИмяЭлемента)",       "ВОткрытойФормеЭлементДоступенДляПросмотра",       "И в открытой форме элемент ""Заголовок элемента"" доступен для просмотра");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОткрытойФормеЭлементСИменемДоступенДляПросмотра(ИмяЭлемента)","ВОткрытойФормеЭлементСИменемДоступенДляПросмотра","И в открытой форме элемент с именем 'ИмяЭлемента' доступен для просмотра");	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементДоступенНеТолькоДляПросмотра(ИмяЭлемента)",       "ЭлементДоступенНеТолькоДляПросмотра",       "И элемент ""Заголовок поля"" доступен не только для просмотра","Проверка флага ""Только просмотр""",         "UI.Формы.Поля.Только просмотр");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементСИменемДоступенНеТолькоДляПросмотра(ИмяЭлемента)","ЭлементСИменемДоступенНеТолькоДляПросмотра","И элемент с именем 'ИмяПоля' доступен не только для просмотра","Проверка флага ""Только просмотр""","UI.Формы.Поля.Только просмотр");	
	
	// проверка доступность элемента
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыДоступен(ИмяЭлемента)",         "ЭлементФормыДоступен",         "И элемент формы ""Заголовок элемента"" доступен",            "Проверка доступности элемента формы","UI.Формы.Поля.Доступность");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыНеДоступен(ИмяЭлемента)",       "ЭлементФормыНеДоступен",       "И элемент формы ""Заголовок элемента"" не доступен",         "Проверка доступности элемента формы","UI.Формы.Поля.Доступность");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыСИменемДоступен(ИмяЭлемента)",  "ЭлементФормыСИменемДоступен",  "И элемент формы с именем 'ИмяЭлемента' доступен",   "Проверка доступности элемента формы","UI.Формы.Поля.Доступность");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементФормыСИменемНеДоступен(ИмяЭлемента)","ЭлементФормыСИменемНеДоступен","И элемент формы с именем 'ИмяЭлемента' не доступен","Проверка доступности элемента формы","UI.Формы.Поля.Доступность");
	
	// проверка доступность элемента таблицы
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧПолеДоступно(ИмяТЧ, ИмяРеквизита)", "ВТЧПолеДоступно","И В таблице ""ИмяТаблицы"" поле ""Заголовок реквизита"" доступно");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеДоступно(ИмяТЧ, ИмяРеквизита)", "ВТаблицеПолеДоступно","И В таблице ""ИмяТаблицы"" поле ""Заголовок реквизита"" доступно", "Проверка доступности элемента таблицы","UI.Таблицы.Доступность");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧПолеСИменемДоступно(ИмяТЧ, ИмяРеквизита)", "ВТЧПолеСИменемДоступно","И В таблице ""ИмяТаблицы"" поле с именем 'ИмяРеквизита' доступно");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеСИменемДоступно(ИмяТЧ, ИмяРеквизита)", "ВТаблицеПолеСИменемДоступно","И В таблице ""ИмяТаблицы"" поле с именем 'ИмяРеквизита' доступно", "Проверка доступности элемента таблицы","UI.Таблицы.Доступность");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧПолеНеДоступно(ИмяТЧ, ИмяРеквизита)", "ВТЧПолеНеДоступно","И В таблице ""ИмяТаблицы"" поле ""Заголовок реквизита"" не доступно");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеНеДоступно(ИмяТЧ, ИмяРеквизита)", "ВТаблицеПолеНеДоступно","И В таблице ""ИмяТаблицы"" поле ""Заголовок реквизита"" не доступно", "Проверка не доступности элемента таблицы","UI.Таблицы.Доступность");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧПолеСИменемНеДоступно(ИмяТЧ, ИмяРеквизита)", "ВТЧПолеСИменемНеДоступно","И В таблице ""ИмяТаблицы"" поле с именем 'ИмяРеквизита' не доступно");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеСИменемНеДоступно(ИмяТЧ, ИмяРеквизита)", "ВТаблицеПолеСИменемНеДоступно","И В таблице ""ИмяТаблицы"" поле с именем 'ИмяРеквизита' не доступно", "Проверка не доступности элемента таблицы","UI.Таблицы.Доступность");
	
	// стоит флаг "только просмотр" для реквизита таблицы
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧПолеДоступноТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)", "ВТЧПолеДоступноТолькоДляПросмотра","И В таблице ""ИмяТаблицы"" поле ""Заголовок реквизита"" доступно только для просмотра");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеДоступноТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)", "ВТаблицеПолеДоступноТолькоДляПросмотра","И В таблице ""ИмяТаблицы"" поле ""Заголовок реквизита"" доступно только для просмотра", "Проверка установленного флага ""Только просмотр"" для реквизита в таблице","UI.Таблицы.Только просмотр");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧПолеСИменемДоступноТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)", "ВТЧПолеСИменемДоступноТолькоДляПросмотра","И В таблице ""ИмяТаблицы"" поле с именем 'ИмяПоля' доступно только для просмотра");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеСИменемДоступноТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)", "ВТаблицеПолеСИменемДоступноТолькоДляПросмотра","И В таблице ""ИмяТаблицы"" поле с именем 'ИмяПоля' доступно только для просмотра", "Проверка установленного флага ""Только просмотр"" для реквизита в таблице","UI.Таблицы.Только просмотр");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧПолеДоступноНеТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)", "ВТЧПолеДоступноНеТолькоДляПросмотра","И В таблице ""ИмяТаблицы"" поле с именем 'ИмяРеквизита' доступно не только для просмотра");	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеДоступноНеТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)", "ВТаблицеПолеДоступноНеТолькоДляПросмотра","И В таблице ""ИмяТаблицы"" поле ""Заголовок реквизита"" доступно не только для просмотра", "Проверка установленного флага ""Только просмотр"" для реквизита в таблице","UI.Таблицы.Только просмотр");	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТЧПолеСИменемДоступноНеТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)", "ВТЧПолеСИменемДоступноНеТолькоДляПросмотра","И В таблице ""ИмяТаблицы"" поле с именем 'ИмяРеквизита' доступно не только для просмотра");	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеСИменемДоступноНеТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)", "ВТаблицеПолеСИменемДоступноНеТолькоДляПросмотра","И В таблице ""ИмяТаблицы"" поле с именем 'ИмяРеквизита' доступно не только для просмотра", "Проверка установленного флага ""Только просмотр"" для реквизита в таблице","UI.Таблицы.Только просмотр");	

	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуТекстИзМакета(Парам01,Парам02)","ВПолеЯВвожуТекстИзМакета","И в поле ""Заголовок поля"" я ввожу текст из макета ""ИмяМакета""","Вводит текст в поле. Текст будет взят из макета. Также вводит текст в форматированный документ и поле HTML документа.","UI.Формы.Поля.Ввод текста");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеСИменемЯВвожуТекстИзМакета(Парам01,Парам02)","ВПолеСИменемЯВвожуТекстИзМакета","И в поле с именем 'ИмяПоля' я ввожу текст из макета ""ИмяМакета""","Вводит текст в поле. Текст будет взят из макета. Также вводит текст в форматированный документ и поле HTML документа.","UI.Формы.Поля.Ввод текста");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуТекстИзФайла(Парам01,Парам02)","ВПолеЯВвожуТекстИзФайла","И в поле ""Заголовок поля"" я ввожу текст из файла ""ИмяФайла""","Вводит текст в поле из указанного файла. Можно передавать полный путь. Можно передавать только имя файла, тогда файл будет искаться рядом с фичей и в каталоге проекта.","UI.Формы.Поля.Ввод текста");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеСИменемЯВвожуТекстИзФайла(Парам01,Парам02)","ВПолеСИменемЯВвожуТекстИзФайла","И в поле с именем 'ИмяПоля' я ввожу текст из файла ""ИмяФайла""","Вводит текст в поле из указанного файла. Можно передавать полный путь. Можно передавать только имя файла, тогда файл будет искаться рядом с фичей и в каталоге проекта.","UI.Формы.Поля.Ввод текста");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюСодержимоеФайлаВПеременную(Парам01,Парам02)","ЯЗапоминаюСодержимоеФайлаВПеременную",
		"И я запоминаю содержимое файла ""ИмяФайла"" в переменную ""ИмяПеременной""",
		"Запоминает значение файла в переменную. Можно передавать только имя файла, тогда файл будет искаться рядом с фичей и в каталоге проекта.
		|Третий параметр ""Кодировка"" является необязательным. Значение по умолчанию ""UTF-8"".",
		"Файлы.Сохранение значения в переменную");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоПолеПерестанетБытьПустымВТеченииСекунд(Парам01,Парам02)","ЯЖдуЧтоПолеПерестанетБытьПустымВТеченииСекунд","И я жду, что поле ""Заголовок поля"" перестанет быть пустым в течении 30 секунд");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоПолеПерестанетБытьПустымВТечениеСекунд(Парам01,Парам02)","ЯЖдуЧтоПолеПерестанетБытьПустымВТечениеСекунд","И я жду, что поле ""Заголовок поля"" перестанет быть пустым в течение 30 секунд","Проверяет, что в течение нужного числа секунд текстовое поле станет заполненным.","UI.Формы.Поля.Заполненность");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоПолеСИменемПерестанетБытьПустымВТечениеСекунд(Парам01,Парам02)","ЯЖдуЧтоПолеСИменемПерестанетБытьПустымВТечениеСекунд","И я жду, что поле с именем 'ИмяПоля' перестанет быть пустым в течение 30 секунд","Проверяет, что в течение нужного числа секунд текстовое поле станет заполненным.","UI.Формы.Поля.Заполненность");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЗначениеПоляРавноЗначениюИзМакета(Парам01,Парам02)","ЗначениеПоляРавноЗначениюИзМакета","И значение поля ""Заголовок поля"" равно значению из макета ""Xml_1En""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЗначениеПоляСИменемРавноЗначениюИзМакета(Парам01,Парам02)","ЗначениеПоляСИменемРавноЗначениюИзМакета","И значение поля с именем ""Заголовок поля"" равно значению из макета ""Xml_1En""","","");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯБудуРаботатьСТаблицей(Парам01)","ЯБудуРаботатьСТаблицей","Затем я буду работать с таблицей ""ИмяТаблицы""","","");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯУвеличиваюЗначение(Парам01)","ВПолеЯУвеличиваюЗначение","И в поле ""Заголовок поля"" я увеличиваю значение","Увеличивает значение поля в помощью специальной кнопки","UI.Формы.Поля.Увеличить значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеСИменемЯУвеличиваюЗначение(Парам01)","ВПолеСИменемЯУвеличиваюЗначение","И в поле с именем 'ИмяПоля' я увеличиваю значение","Увеличивает значение поля в помощью специальной кнопки","UI.Формы.Поля.Увеличить значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯУменьшаюЗначение(Парам01)","ВПолеЯУменьшаюЗначение","И в поле ""Заголовок поля"" я уменьшаю значение","Уменьшает значение поля в помощью специальной кнопки","UI.Формы.Поля.Уменьшить значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеСИменемЯУменьшаюЗначение(Парам01)","ВПолеСИменемЯУменьшаюЗначение","И в поле с именем 'ИмяПоля' я уменьшаю значение","Уменьшает значение поля в помощью специальной кнопки","UI.Формы.Поля.Уменьшить значение");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеЯУвеличиваюЗначение(Парам01,Парам02)","ВТаблицеВПолеЯУвеличиваюЗначение","И в таблице ""ИмяТаблицы"" в поле ""Заголовок поля"" я увеличиваю значение","Увеличивает значение поля в помощью специальной кнопки","UI.Таблицы.Поля.Увеличить значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеСИменемЯУвеличиваюЗначение(Парам01,Парам02)","ВТаблицеВПолеСИменемЯУвеличиваюЗначение","И в таблице ""ИмяТаблицы"" в поле с именем 'ИмяПоля' я увеличиваю значение","Увеличивает значение поля в помощью специальной кнопки","UI.Таблицы.Поля.Увеличить значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеЯУменьшаюЗначение(Парам01,Парам02)","ВТаблицеВПолеЯУменьшаюЗначение","И в таблице ""ИмяТаблицы"" в поле ""Заголовок поля"" я уменьшаю значение","Уменьшает значение поля в помощью специальной кнопки","UI.Таблицы.Поля.Уменьшить значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВПолеСИменемЯУменьшаюЗначение(Парам01,Парам02)","ВТаблицеВПолеСИменемЯУменьшаюЗначение","И в таблице ""ИмяТаблицы"" в поле с именем 'ИмяПоля' я уменьшаю значение","Уменьшает значение поля в помощью специальной кнопки","UI.Таблицы.Поля.Уменьшить значение");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуКСледующейЯчейке(Парам01)","ВТаблицеЯПерехожуКСледующейЯчейке","И в таблице ""ИмяТаблицы"" я перехожу к следующей ячейке","Переходит к следующей ячейки таблицы","UI.Таблицы.Переход к ячейке");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯПерехожуКПредыдущейЯчейке(Парам01)","ВТаблицеЯПерехожуКПредыдущейЯчейке","И в таблице ""ИмяТаблицы"" я перехожу к предыдущей ячейке","Переходит к предыдущей ячейки таблицы","UI.Таблицы.Переход к ячейке");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВМенюФормыЯВыбираю(Парам01)","ВМенюФормыЯВыбираю","И в меню формы я выбираю 'ИмяПунктаМеню'","Выбирает значение из пункта меню, если меню было вызвно с помощью метода ПоказатьВыборИзМеню(). Например, когда происходит расшифровка отчета.","UI.Формы.Контекстное меню");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПредставлениеЭлементаСталоРавно(Парам01,Парам02)","ПредставлениеЭлементаСталоРавно","И представление элемента ""Заголовок элемента"" стало равно ""ПредставлениеЭлемента""","Проверяет представление элемента формы. Работает, начиная с 8.3.12.","UI.Формы.Поля.Представление элемента");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПредставлениеЭлементаСИменемСталоРавно(Парам01,Парам02)","ПредставлениеЭлементаСИменемСталоРавно","И представление элемента с именем 'ИмяЭлемента' стало равно ""ПредставлениеЭлемента""","Проверяет представление элемента формы. Работает, начиная с 8.3.12.","UI.Формы.Поля.Представление элемента");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯФиксируюГруппу(Парам01)","ЯФиксируюГруппу","И я фиксирую группу ""ИмяГруппы""","Фиксирует группу, с которой будет работать пользователь. Т.е. поиск элементов будет происходить только в этой группе. Фиксация сбрасывается сама при исполнении шагов, которые фиксируют смену окна.","UI.Формы.Группы.Зафиксировать группу");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯФиксируюГруппуСИменем(Парам01)","ЯФиксируюГруппуСИменем","И я фиксирую группу с именем 'ИмяГруппы'","Фиксирует группу, с которой будет работать пользователь. Т.е. поиск элементов будет происходить только в этой группе.  Фиксация сбрасывается сама при исполнении шагов, которые фиксируют смену окна.","UI.Формы.Группы.Зафиксировать группу");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОтменяюФиксированиеГруппы()","ЯОтменяюФиксированиеГруппы","И я отменяю фиксирование группы","Снимает фиксирование группы.","UI.Формы.Группы.Зафиксировать группу");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯФиксируюФорму(Парам01)","ЯФиксируюФорму","И я фиксирую форму ""ИмяФормы""","Фиксирует форму, с которой будет работать пользователь. Т.е. поиск элементов будет происходить только в этой форме.","UI.Формы.Зафиксировать форму");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯФиксируюФормуСИменем(Парам01)","ЯФиксируюФормуСИменем","И я фиксирую форму с именем ""ИмяФормы""","Фиксирует форму, с которой будет работать пользователь. Т.е. поиск элементов будет происходить только в этой форме.","UI.Формы.Зафиксировать форму");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯФиксируюТекущуюФорму()","ЯФиксируюТекущуюФорму","И я фиксирую текущую форму","Фиксирует форму, с которой будет работать пользователь. Т.е. поиск элементов будет происходить только в этой форме.","UI.Формы.Зафиксировать форму");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОтменяюФиксированиеФормы()","ЯОтменяюФиксированиеФормы","И я отменяю фиксирование формы","Снимает фиксирование формы.","UI.Формы.Зафиксировать форму");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПрикрепляюКСценариюЗначениеТаблицыКак(Парам01,Парам02)","ЯПрикрепляюКСценариюЗначениеТаблицыКак","И я прикрепляю к сценарию значение таблицы ""ИмяТаблицы"" как ""ИмяЗначения""","Прикрепляет к сценарию указанную таблицу. Параметр ""ИмяЗначения"" будет использован для имени файла. Прикрепленные данные пойдут в отчет о выполнении сценария.","Прочее.Результат выполнения сценария");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеТекущегоПоляКак(Парам01)","ЯЗапоминаюЗначениеТекущегоПоляКак","И я запоминаю значение текущего поля как ""ИмяПеременной""","Запоминает значение активного поля или ячейки таблицы в переменную.","UI.Формы.Поля.Запомнить значение поля");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюПредставлениеТекущегоПоляКак(Парам01)","ЯЗапоминаюПредставлениеТекущегоПоляКак","И я запоминаю представление текущего поля как ""ИмяПеременной""","Запоминает представление активного поля или ячейки таблицы в переменную.","UI.Формы.Поля.Запомнить значение поля");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюПредставлениеЭлементаФормыКак(Парам01,Парам02)","ЯЗапоминаюПредставлениеЭлементаФормыКак","И я запоминаю представление элемента формы ""Заголовок"" как ""ИмяПеременной""","Запоминает представление поля в переменную. Поле ищется по заголовку.","UI.Формы.Поля.Запомнить представление поля");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюПредставлениеЭлементаФормыСИменемКак(Парам01,Парам02)","ЯЗапоминаюПредставлениеЭлементаФормыСИменемКак","И я запоминаю представление элемента формы с именем 'ИмяЭлемента' как ""ИмяПеременной""","Запоминает представление поля в переменную. Поле ищется по имени.","UI.Формы.Поля.Запомнить представление поля");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюИмяТекущегоПоляКак(Парам01)","ЯЗапоминаюИмяТекущегоПоляКак","И я запоминаю имя текущего поля как ""ИмяПеременной""","Запоминает имя активного поля в переменную","UI.Формы.Поля.Запомнить имя поля");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗаголовокТекущегоПоляКак(Парам01)","ЯЗапоминаюЗаголовокТекущегоПоляКак","И я запоминаю заголовок текущего поля как ""ИмяПеременной""","Запоминает заголовок активного поля в переменную","UI.Формы.Поля.Запомнить имя поля");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюИмяТекущейТаблицыКак(Парам01)","ЯЗапоминаюИмяТекущейТаблицыКак","И я запоминаю имя текущей таблицы как ""ИмяПеременной""","Запоминает имя активной таблицы в переменную","UI.Формы.Поля.Запомнить имя таблицы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТекущееПолеЯВвожуТекст(Парам01)","ВТекущееПолеЯВвожуТекст","И в текущее поле я ввожу текст ""ЗначениеПоля""","Вводит в активное поле формы (не таблицы) переданное значение","UI.Формы.Поля.Установить значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюИмяПоляСЗаголовкомИИменемКак(Парам01,Парам02,Парам03)","ЯЗапоминаюИмяПоляСЗаголовкомИИменемКак","И я запоминаю имя поля с заголовком ""ЗаголовокПоля"" и именем ""ИмяПоля"" как ""ИмяПеременной""","Находит поле заголовку и его имени (или по части заголовка и имени) и сохраняет имя поля в переменную.","UI.Формы.Поля.Запомнить имя поля");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗапоминаюЗаголовокПоляСИменемКак(Парам01,Парам02)",
		"ЯЗапоминаюЗаголовокПоляСИменемКак",
		"И я запоминаю заголовок поля с именем ""ИмяПоля"" как ""ИмяПеременной""",
		"Запоминает заголовок поля с указанным именем в переменную. Можно использовать как для полей шапки формы так и для полей таблиц.",
		"UI.Формы.Поля.Запомнить имя поля");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭтоWebКлиентТогда()","ЭтоWebКлиентТогда","Если это web клиент Тогда","Условие. Проверяет, что текущий TestClient - это web клиент.","Прочее.Проверка типа TestClient","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭтоТонкийКлиентТогда()","ЭтоТонкийКлиентТогда","Если это тонкий клиент тогда","Условие. Проверяет, что текущий TestClient - это тонкий клиент.","Прочее.Проверка типа TestClient","Условие");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеТекущееПолеЗаполнено()","ВТаблицеТекущееПолеЗаполнено","И в таблице текущее поле заполнено","Проверяет, что текущая ячейка текущей таблицы заполнена.","UI.Таблицы.Значение ячейки таблицы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеТекущееПолеНезаполнено()","ВТаблицеТекущееПолеНезаполнено","И в таблице текущее поле не заполнено","Проверяет, что текущая ячейка текущей таблицы не заполнена.","UI.Таблицы.Значение ячейки таблицы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоВТаблицеТекущееПолеБудетЗаполненоВТечениеСекунд(Парам01)","ЯЖдуЧтоВТаблицеТекущееПолеБудетЗаполненоВТечениеСекунд","И я жду, что в таблице текущее поле будет заполнено в течение 10 секунд.","Проверяет, что текущая ячейка текущей таблицы перестанет быть пустой в течение нужного числа секунд.","UI.Таблицы.Значение ячейки таблицы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоВТаблицеТекущееПолеБудетНеЗаполненоВТечениеСекунд(Парам01)","ЯЖдуЧтоВТаблицеТекущееПолеБудетНеЗаполненоВТечениеСекунд","И я жду, что в таблице текущее поле будет не заполнено в течение 10 секунд.","Проверяет, что текущая ячейка текущей таблицы станет пустой в течение нужного числа секунд.","UI.Таблицы.Значение ячейки таблицы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУстанавливаюМаксимальноеВремяВыполненияДействия(Парам01)","ЯУстанавливаюМаксимальноеВремяВыполненияДействия","И я устанавливаю максимальное время выполнения действия 10","Устанавливает максимальное время выполнения команд в секундах на стороне клиента тестирования. Если параметр равен 0, команды ожидают окончания выполнения без проверки времени прошедшего с начала выполнения.","Прочее.Время выполнения действия");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВыпадающийСписокСталРавен(Парам01,ТабПарам)"       ,"ВыпадающийСписокСталРавен"       ,"И выпадающий список ""Заголовок элемента"" стал равен:"          + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список в точности равен переданному набору значений. Поиск элемента формы выполняется по заголовку.","UI.Формы.Поля.Значение выпадающего списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВыпадающийСписокСИменемСталРавен(Парам01,ТабПарам)","ВыпадающийСписокСИменемСталРавен","И выпадающий список с именем 'ИмяЭлемента' стал равен:" + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список в точности равен переданному набору значений. Поиск элемента формы выполняется по имени.","UI.Формы.Поля.Значение выпадающего списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВыпадающийСписокФормыСталРавен(ТабПарам)",
		"ВыпадающийСписокФормыСталРавен",
		"И выпадающий список формы стал равен:"          + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список привязанный к форме в точности равен переданному набору значений.
		|Работает в платформе 8.3.25 и выше.",
		"UI.Формы.Выпадающий список формы.Значение выпадающего списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВыпадающийСписокФормыСталРавенПоШаблону(ТабПарам)",
		"ВыпадающийСписокФормыСталРавенПоШаблону",
		"И выпадающий список формы стал равен по шаблону:"          + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список привязанный к форме в точности равен переданному набору значений.
		|Допустимо использовать символы *.
		|Работает в платформе 8.3.25 и выше.",
		"UI.Формы.Выпадающий список формы.Значение выпадающего списка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВыпадающийСписокСодержитЗначения(Парам01,ТабПарам)"       ,"ВыпадающийСписокСодержитЗначения"       ,"И выпадающий список ""Заголовок элемента"" содержит значения"          + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список в содержит каждое значение из переданного набора значений. Поиск элемента формы выполняется по заголовку.","UI.Формы.Поля.Значение выпадающего списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВыпадающийСписокСИменемСодержитЗначения(Парам01,ТабПарам)","ВыпадающийСписокСИменемСодержитЗначения","И выпадающий список с именем 'ИмяЭлемента' содержит значения" + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список в содержит каждое значение из переданного набора значений. Поиск элемента формы выполняется по имени.","UI.Формы.Поля.Значение выпадающего списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВыпадающийСписокФормыСодержитЗначения(ТабПарам)",
		"ВыпадающийСписокФормыСодержитЗначения",
		"И выпадающий список формы содержит значения"          + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список привязанный к форме в содержит каждое значение из переданного набора значений.
		|Работает в платформе 8.3.25 и выше.",
		"UI.Формы.Выпадающий список формы.Значение выпадающего списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВыпадающийСписокФормыСодержитЗначенияПоШаблону(ТабПарам)",
		"ВыпадающийСписокФормыСодержитЗначенияПоШаблону",
		"И выпадающий список формы содержит значения по шаблону"          + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список привязанный к форме в содержит каждое значение из переданного набора значений.
		|Допустимо использовать символы *.
		|Работает в платформе 8.3.25 и выше.",
		"UI.Формы.Выпадающий список формы.Значение выпадающего списка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВыпадающийСписокНеСодержитДублирующихсяЗначений(Парам01)","ВыпадающийСписокНеСодержитДублирующихсяЗначений","И выпадающий список ""Заголовок элемента"" не содержит дублирующихся значений","Проверяет, что в открытом выпадающем списке каждое значение встречается только один раз. Поиск элемента формы выполняется по заголовку.","UI.Формы.Поля.Значение выпадающего списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВыпадающийСписокСИменемНеСодержитДублирующихсяЗначений(Парам01)","ВыпадающийСписокСИменемНеСодержитДублирующихсяЗначений","И выпадающий список с именем  ""ИмяЭлемента"" не содержит дублирующихся значений","Проверяет, что в открытом выпадающем списке каждое значение встречается только один раз. Поиск элемента формы выполняется по имени.","UI.Формы.Поля.Значение выпадающего списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВыпадающийСписокФормыНеСодержитДублирующихсяЗначений()",
		"ВыпадающийСписокФормыНеСодержитДублирующихсяЗначений",
		"И выпадающий список формы не содержит дублирующихся значений","Проверяет, что в открытом выпадающем списке каждое значение встречается только один раз.
		|Работает в платформе 8.3.25 и выше.",
		"UI.Формы.Выпадающий список формы.Значение выпадающего списка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВыпадающийСписокСталРавенТогда(Парам01,ТабПарам)"       ,"ВыпадающийСписокСталРавенТогда"       ,"Если выпадающий список ""Заголовок элемента"" стал равен Тогда:"          + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список в точности равен переданному набору значений. Поиск элемента формы выполняется по заголовку.","UI.Формы.Поля.Значение выпадающего списка","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВыпадающийСписокСИменемСталРавенТогда(Парам01,ТабПарам)","ВыпадающийСписокСИменемСталРавенТогда","Если выпадающий список с именем 'ИмяЭлемента' стал равен Тогда:" + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список в точности равен переданному набору значений. Поиск элемента формы выполняется по имени.","UI.Формы.Поля.Значение выпадающего списка","Условие");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВыпадающийСписокСодержитЗначенияТогда(Парам01,ТабПарам)"       ,"ВыпадающийСписокСодержитЗначенияТогда"       ,"Если выпадающий список ""Заголовок элемента"" содержит значения Тогда"          + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список в содержит каждое значение из переданного набора значений. Поиск элемента формы выполняется по заголовку.","UI.Формы.Поля.Значение выпадающего списка","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВыпадающийСписокСИменемСодержитЗначенияТогда(Парам01,ТабПарам)","ВыпадающийСписокСИменемСодержитЗначенияТогда","Если выпадающий список с именем 'ИмяЭлемента' содержит значения Тогда" + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список в содержит каждое значение из переданного набора значений. Поиск элемента формы выполняется по имени.","UI.Формы.Поля.Значение выпадающего списка","Условие");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВыпадающийСписокНеСодержитЗначения(Парам01,ТабПарам)"       ,"ВыпадающийСписокНеСодержитЗначения"       ,"И выпадающий список ""Заголовок элемента"" не содержит значения"          + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список не содержит ни одного значения из переданного набора значений. Поиск элемента формы выполняется по заголовку.","UI.Формы.Поля.Значение выпадающего списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВыпадающийСписокСИменемНеСодержитЗначения(Парам01,ТабПарам)","ВыпадающийСписокСИменемНеСодержитЗначения","И выпадающий список с именем 'ИмяЭлемента' не содержит значения" + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список не содержит ни одного значения из переданного набора значений. Поиск элемента формы выполняется по имени.","UI.Формы.Поля.Значение выпадающего списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВыпадающийСписокФормыНеСодержитЗначения(ТабПарам)",
		"ВыпадающийСписокФормыНеСодержитЗначения",
		"И выпадающий список формы не содержит значения"          + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |",
		"Проверяет, что открытый выпадающий список не содержит ни одного значения из переданного набора значений. Работает в платформе 8.3.25 и выше.",
		"UI.Формы.Выпадающий список формы.Значение выпадающего списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВыпадающийСписокФормыНеСодержитЗначенияПоШаблону(ТабПарам)",
		"ВыпадающийСписокФормыНеСодержитЗначенияПоШаблону",
		"И выпадающий список формы не содержит значения по шаблону"          + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |",
		"Проверяет, что открытый выпадающий список не содержит ни одного значения из переданного набора значений. Допустимо использовать символы *. Работает в платформе 8.3.25 и выше.",
		"UI.Формы.Выпадающий список формы.Значение выпадающего списка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВыпадающийСписокСталРавен(Парам01,ТабПарам)"       ,"ВТаблицеВыпадающийСписокСталРавен"       ,"И в таблице ""ИмяТаблицы"" выпадающий список ""Заголовок элемента"" стал равен:"          + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список в точности равен переданному набору значений. Поиск элемента формы выполняется по заголовку.","UI.Таблицы.Поля.Значение выпадающего списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВыпадающийСписокСИменемСталРавен(Парам01,ТабПарам)","ВТаблицеВыпадающийСписокСИменемСталРавен","И в таблице ""ИмяТаблицы"" выпадающий список с именем 'ИмяЭлемента' стал равен:" + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список в точности равен переданному набору значений. Поиск элемента формы выполняется по имени.","UI.Таблицы.Поля.Значение выпадающего списка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВыпадающийСписокСодержитЗначения(Парам01,ТабПарам)"       ,"ВТаблицеВыпадающийСписокСодержитЗначения"       ,"И в таблице ""ИмяТаблицы"" выпадающий список ""Заголовок элемента"" содержит значения"          + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список в содержит каждое значение из переданного набора значений. Поиск элемента формы выполняется по заголовку.","UI.Таблицы.Поля.Значение выпадающего списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВыпадающийСписокСИменемСодержитЗначения(Парам01,ТабПарам)","ВТаблицеВыпадающийСписокСИменемСодержитЗначения","И в таблице ""ИмяТаблицы"" выпадающий список с именем 'ИмяЭлемента' содержит значения" + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список в содержит каждое значение из переданного набора значений. Поиск элемента формы выполняется по имени.","UI.Таблицы.Поля.Значение выпадающего списка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВыпадающийСписокНеСодержитЗначения(Парам01,ТабПарам)"       ,"ВТаблицеВыпадающийСписокНеСодержитЗначения"       ,"И в таблице ""ИмяТаблицы"" выпадающий список ""Заголовок элемента"" не содержит значения"          + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список не содержит ни одного значения из переданного набора значений. Поиск элемента формы выполняется по заголовку.","UI.Таблицы.Поля.Значение выпадающего списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВыпадающийСписокСИменемНеСодержитЗначения(Парам01,ТабПарам)","ВТаблицеВыпадающийСписокСИменемНеСодержитЗначения","И в таблице ""ИмяТаблицы"" выпадающий список с именем 'ИмяЭлемента' не содержит значения" + Символы.ПС + "	| 'Значение1' |" + Символы.ПС + "	| 'Значение2' |","Проверяет, что открытый выпадающий список не содержит ни одного значения из переданного набора значений. Поиск элемента формы выполняется по имени.","UI.Таблицы.Поля.Значение выпадающего списка");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляЯНажимаюГиперссылку(Парам01,Парам02)","УПоляЯНажимаюГиперссылку","И у поля ""Заголовок поля"" я нажимаю гиперссылку 'ИмяГиперссылки'","Нажимает на гиперссылку в поле с данным заголовком. Гиперссылка задаётся либо по её представлению, либо по номеру.","UI.Формы.Поля.Гиперссылки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляСИменемЯНажимаюГиперссылку(Парам01,Парам02)","УПоляСИменемЯНажимаюГиперссылку","И у поля с именем 'ИмяПоля' я нажимаю гиперссылку 'ИмяГиперссылки'","Нажимает на гиперссылку в поле с данным заголовком. Гиперссылка задаётся либо по её представлению, либо по номеру.","UI.Формы.Поля.Гиперссылки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"УПоляЯНажимаюГиперссылкуПоШаблону(Парам01,Парам02)",
		"УПоляЯНажимаюГиперссылкуПоШаблону",
		"И у поля ""Заголовок поля"" я нажимаю гиперссылку 'ИмяГиперссылки' по шаблону",
		"Нажимает на гиперссылку в поле с данным заголовком.
		|Гиперссылка задаётся либо по её представлению, либо по номеру.
		|Также возможно в значении гиперссылки использовать символы *.
		|Работает в платформе 8.3.25 и выше.",
		"UI.Формы.Поля.Гиперссылки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"УПоляСИменемЯНажимаюГиперссылкуПоШаблону(Парам01,Парам02)",
		"УПоляСИменемЯНажимаюГиперссылкуПоШаблону",
		"И у поля с именем 'ИмяПоля' я нажимаю гиперссылку 'ИмяГиперссылки' по шаблону",
		"Нажимает на гиперссылку в поле с данным заголовком.
		|Гиперссылка задаётся либо по её представлению, либо по номеру.
		|Также возможно в значении гиперссылки использовать символы *.
		|Работает в платформе 8.3.25 и выше.",
		"UI.Формы.Поля.Гиперссылки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЧтоВТабличномДокументеЯчейкаСтанетРавнаВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)","ЯЖдуЧтоВТабличномДокументеЯчейкаСтанетРавнаВТечениеСекунд","И я жду, что в табличном документе ""ИмяРеквизита"" ячейка ""АдресЯчейки"" станет равна ""ЗначениеЯчейки"" в течение 20 секунд","Ожидает в течение нужного числа секунд, что нужная ячейка табличного документа станет равна заданному значению.","UI.Табличный документ.Ячейки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеЯчейкиТабличногоДокументаВПеременную(Парам01,Парам02,Парам03)","ЯЗапоминаюЗначениеЯчейкиТабличногоДокументаВПеременную","И я запоминаю значение ячейки табличного документа ""РеквизитТабличныйДокумент"" ""АдресЯчейки"" в переменную ""ИмяПеременной""","Запоминает значение ячейки табличного документа в переменную.","UI.Табличный документ.Ячейки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЗаголовокАктивнойКолонки(Парам01,Парам02)","ВТаблицеЗаголовокАктивнойКолонки","И в таблице ""ИмяТаблицы"" заголовок активной колонки ""Текст""","Проверяет, что у активная колока таблицы имеет нужный заголовок","UI.Таблицы.Колонки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеИмяАктивнойКолонки(Парам01,Парам02)","ВТаблицеИмяАктивнойКолонки","И в таблице ""ИмяТаблицы"" имя активной колонки ""Текст""","Проверяет, что у активная колока таблицы имеет нужное имя","UI.Таблицы.Колонки");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЕстьКолонкаТогда(Парам01,Парам02)","ВТаблицеЕстьКолонкаТогда","Если в таблице ""ИмяТаблицы"" есть колонка ""Заголовок колонки"" Тогда","Условие.Проверяет наличие колонки в таблице.","UI.Таблицы.Колонки","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЕстьКолонкаСИменемТогда(Парам01,Парам02)","ВТаблицеЕстьКолонкаСИменемТогда","Если в таблице ""ИмяТаблицы"" есть колонка с именем 'ИмяКолонки' Тогда","Условие.Проверяет наличие колонки в таблице.","UI.Таблицы.Колонки","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеНетКолонкиТогда(Парам01,Парам02)","ВТаблицеНетКолонкиТогда","Если в таблице ""ИмяТаблицы"" нет колонки ""Заголовок колонки"" Тогда","Условие.Проверяет отсутствие колонки в таблице.","UI.Таблицы.Колонки","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеНетКолонкиСИменемТогда(Парам01,Парам02)","ВТаблицеНетКолонкиСИменемТогда","Если в таблице ""ИмяТаблицы"" нет колонки с именем 'ИмяКолонки' Тогда","Условие.Проверяет отсутствие колонки в таблице.","UI.Таблицы.Колонки","Условие");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеТаблицыКак(Парам01,Парам02,ТабПарам)","ЯЗапоминаюЗначениеТаблицыКак","И я запоминаю значение таблицы ""Таблица1"" как ""ИмяПеременной""" + Символы.ПС + "	| 'ИмяКолонки1' |" + Символы.ПС + "	| 'ИмяКолонки2' |","Запоминает значение указанных колонок таблицы в переменную. Если не указать конкретные колонки таблицы, то будут сохранены все колонки.","UI.Таблицы.Запомнить значение таблицы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТаблицаСодержитсяВТаблице(Парам01,Парам02)","ТаблицаСодержитсяВТаблице","И таблица ""ИмяПеременной1"" содержится в таблице ""ИмяПеременной2""","Проверяет, что одна таблица содержится в другой. Значения таблиц должны были быть сохранены ранее с помощью шага: И я запоминаю значение таблицы ""Таблица1"" как ""Таб1""","UI.Таблицы.Вхождение таблицы в другую таблицу");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюВыделенныеСтрокиТаблицыКак(Парам01,Парам02,ТабПарам)","ЯЗапоминаюВыделенныеСтрокиТаблицыКак","И я запоминаю выделенные строки таблицы ""Таблица1"" как ""ИмяПеременной""" + Символы.ПС + "	| 'ИмяКолонки1' |" + Символы.ПС + "	| 'ИмяКолонки2' |","Запоминает значение выделенных строк указанных колонок таблицы в переменную.","UI.Таблицы.Запомнить значение таблицы");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВключаюПроверкуВидимостиЭлементовСУчётомВидимостиГруппЭлементов()","ЯВключаюПроверкуВидимостиЭлементовСУчётомВидимостиГруппЭлементов","И я включаю проверку видимости элементов с учётом видимости групп элементов","Включает проверку видимости элементов с учетом родителя. Может сильно замедлить скорость выполнения шагов.","Прочее.Видимость элементов");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыключаюПроверкуВидимостиЭлементовСУчётомВидимостиГруппЭлементов()","ЯВыключаюПроверкуВидимостиЭлементовСУчётомВидимостиГруппЭлементов","И я выключаю проверку видимости элементов с учётом видимости групп элементов","Выключает проверку видимости элементов с учетом родителя.","Прочее.Видимость элементов");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВключаюПроверкуДоступностиЭлементовСУчётомДоступностиГруппЭлементов()","ЯВключаюПроверкуДоступностиЭлементовСУчётомДоступностиГруппЭлементов","И я включаю проверку доступности элементов с учётом доступности групп элементов","Включает проверку доступности элементов с учетом родителя. Может сильно замедлить скорость выполнения шагов.","Прочее.Доступность элементов");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыключаюПроверкуДоступностиЭлементовСУчётомДоступностиГруппЭлементов()","ЯВыключаюПроверкуДоступностиЭлементовСУчётомДоступностиГруппЭлементов","И я выключаю проверку доступности элементов с учётом доступности групп элементов","Выключает проверку доступности элементов с учетом родителя.","Прочее.Доступность элементов");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВключаюПроверкуТолькоПросмотрЭлементовСУчётомГруппЭлементов()","ЯВключаюПроверкуТолькоПросмотрЭлементовСУчётомГруппЭлементов","И я включаю проверку только просмотр элементов с учётом групп элементов","Включает проверку флага ""Только просмотр"" элементов с учетом родителя. Может сильно замедлить скорость выполнения шагов.","Прочее.Только просмотр");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыключаюПроверкуТолькоПросмотрЭлементовСУчётомГруппЭлементов()","ЯВыключаюПроверкуТолькоПросмотрЭлементовСУчётомГруппЭлементов","И я выключаю проверку только просмотр элементов с учётом групп элементов","Выключает проверку ""Только просмотр"" элементов с учетом родителя.","Прочее.Только просмотр");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВГруппеСодержатсяЭлементы(Парам01,ТабПарам)","ВГруппеСодержатсяЭлементы","И в группе ""Заголовок группы"" содержатся элементы""" + Символы.ПС + "	| 'ИмяЭлемента1' |" + Символы.ПС + "	| 'ИмяЭлемента2' |","Проверяет, что в группа с указанным заголовком содержит элементы из таблицы. Элемент по умолчанию ищется заголовку. Чтобы искать по внутреннему имени нужно перед именем элемента добавить символ ""!"".","UI.Формы.Группы.Содержит элементы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВГруппеСИменемСодержатсяЭлементы(Парам01,ТабПарам)","ВГруппеСИменемСодержатсяЭлементы","И в группе с именем 'ИмяГруппы' содержатся элементы""" + Символы.ПС + "	| 'ИмяЭлемента1' |" + Символы.ПС + "	| 'ИмяЭлемента2' |","Проверяет, что в группа с указанным именем содержит элементы из таблицы. Элемент по умолчанию ищется заголовку. Чтобы искать по внутреннему имени нужно перед именем элемента добавить символ ""!"".","UI.Формы.Группы.Содержит элементы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВГруппеНеСодержатсяЭлементы(Парам01,ТабПарам)","ВГруппеНеСодержатсяЭлементы","И в группе ""Заголовок группы"" не содержатся элементы""" + Символы.ПС + "	| 'ИмяЭлемента1' |" + Символы.ПС + "	| 'ИмяЭлемента2' |","Проверяет, что в группа с указанным заголовком не содержит элементы из таблицы. Элемент по умолчанию ищется заголовку. Чтобы искать по внутреннему имени нужно перед именем элемента добавить символ ""!"".","UI.Формы.Группы.Содержит элементы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВГруппесИменемНеСодержатсяЭлементы(Парам01,ТабПарам)","ВГруппесИменемНеСодержатсяЭлементы","И в группе с именем 'ИмяГруппы' не содержатся элементы""" + Символы.ПС + "	| 'ИмяЭлемента1' |" + Символы.ПС + "	| 'ИмяЭлемента2' |","Проверяет, что в группа с указанным заголовком не содержит элементы из таблицы. Элемент по умолчанию ищется заголовку. Чтобы искать по внутреннему имени нужно перед именем элемента добавить символ ""!"".","UI.Формы.Группы.Содержит элементы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПанельРазделовРавна(ТабПарам)","ПанельРазделовРавна","И панель разделов равна" + Символы.ПС + "	| 'ИмяЭлемента1' |" + Символы.ПС + "	| 'ИмяЭлемента2' |","Проверяет равенство панели разделов переданной таблице, содержащей пункты панели разделов.","UI.Командный интерфейс.Панель разделов");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПанельРазделовСодержитПунктыМеню(ТабПарам)","ПанельРазделовСодержитПунктыМеню","И панель разделов содержит пункты меню" + Символы.ПС + "	| 'ИмяЭлемента1' |" + Символы.ПС + "	| 'ИмяЭлемента2' |","Проверяет, что панель разделов содержит элементы из переданной таблицы, содержащей пункты панели разделов.","UI.Командный интерфейс.Панель разделов");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПанельРазделовНеСодержитПунктыМеню(ТабПарам)","ПанельРазделовНеСодержитПунктыМеню","И панель разделов не содержит пункты меню" + Символы.ПС + "	| 'ИмяЭлемента1' |" + Символы.ПС + "	| 'ИмяЭлемента2' |","Проверяет, что панель разделов не содержит элементы из переданной таблицы, содержащей пункты панели разделов.","UI.Командный интерфейс.Панель разделов");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПанельФункцийРавна(ТабПарам)","ПанельФункцийРавна","И панель функций равна" + Символы.ПС + "	| 'ИмяЭлемента1' |" + Символы.ПС + "	| 'ИмяЭлемента2' |","Проверяет равенство панели функция переданной таблице, содержащей пункты панели функий.","UI.Командный интерфейс.Панель функций");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПанельФункцийСодержитПунктыМеню(ТабПарам)","ПанельФункцийСодержитПунктыМеню","И панель функций содержит пункты меню" + Символы.ПС + "	| 'ИмяЭлемента1' |" + Символы.ПС + "	| 'ИмяЭлемента2' |","Проверяет, что панель функций содержит элементы из переданной таблицы, содержащей пункты панели функций.","UI.Командный интерфейс.Панель функций");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПанельФункцийНеСодержитПунктыМеню(ТабПарам)","ПанельФункцийНеСодержитПунктыМеню","И панель функций не содержит пункты меню" + Символы.ПС + "	| 'ИмяЭлемента1' |" + Символы.ПС + "	| 'ИмяЭлемента2' |","Проверяет, что панель функций не содержит элементы из переданной таблицы, содержащей пункты панели функций.","UI.Командный интерфейс.Панель функций");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ГруппаВПанелиФункцийСодержитПунктыМеню(Парам01,ТабПарам)","ГруппаВПанелиФункцийСодержитПунктыМеню","И группа ""ЗаголовокГруппы"" в панели функций содержит пункты меню","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ГруппаВПанелиФункцийНеСодержитПунктыМеню(Парам01,ТабПарам)","ГруппаВПанелиФункцийНеСодержитПунктыМеню","И группа ""ЗаголовокГруппы"" в панели функций  не содержит пункты меню","","");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗаполняюТаблицуДанными(Парам01,ТабПарам)","ЯЗаполняюТаблицуДанными","И я заполняю таблицу ""ИмяТаблицы"" данными" + Символы.ПС + "	| 'ИмяКолонки1' | 'ИмяКолонки2' |" + Символы.ПС + "	| 'Значение1'     | 'Значение2'     |","Заполняет указанную таблицу данными, переданными в таблице Gherkin. Предполагается, что целевая таблица изначально пустая, и в неё будут добавляться новые строки.","UI.Таблицы.Заполнить данными");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"УТекущегоЭлементаФормыЯВызываюЗаписьСодержимогоВФайл()",
		"УТекущегоЭлементаФормыЯВызываюЗаписьСодержимогоВФайл",
		"И у текущего элемента формы я вызываю запись содержимого в файл",
		"Вызывает запись (сохранение) в файл у текущего элемента формы. Применимо для табличного документа, текстового документа, форматированного документа. Аналогично нажатию сочетания клавиш ctrl+S.",
		"UI.Формы.Поля.Сохранить в файл");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"УТекущегоЭлементаФормыЯВызываюЗаписьСодержимогоВФайлСохранитьКак()",
		"УТекущегоЭлементаФормыЯВызываюЗаписьСодержимогоВФайлСохранитьКак",
		"И у текущего элемента формы я вызываю запись содержимого в файл Сохранить как",
		"Вызывает запись (сохранение) в файл у текущего элемента формы с диалогом Сохранить как. Применимо для табличного документа, текстового документа, форматированного документа. Работает в платформе 8.3.25 и выше.",
		"UI.Формы.Поля.Сохранить в файл");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюВерсиюКонфигурацииКак(Парам01,Парам02)","ЯЗапоминаюВерсиюКонфигурацииКак","И я запоминаю версию конфигурации ""ИмяКонфигурации"" как ""Версия""","Для типовых конфигураций. Требует наличия прав на открытие регистра сведений ""ВерсииПодсистем"". ","Прочее.Версия конфигурации");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюИмяКонфигурацииКак(Парам01)","ЯЗапоминаюИмяКонфигурацииКак","И я запоминаю имя конфигурации как ""ИмяПеременной""","Для типовых конфигураций. Требует наличия прав на открытие регистра сведений ""ВерсииПодсистем"". ","Прочее.Данные конфигурации");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПанелиРазделовЕстьКомандаТогда(Парам01)","ВПанелиРазделовЕстьКомандаТогда","Если в панели разделов есть команда ""ИмяКоманды"" Тогда","Условие. Проверяет наличие команды в панели разделов.","UI.Командный интерфейс.Панель разделов","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПанелиФункцийЕстьКомандаТогда(Парам01)","ВПанелиФункцийЕстьКомандаТогда","Если в панели функций есть команда ""ИмяКоманды"" Тогда","Условие. Проверяет наличие команды в панели функций.","UI.Командный интерфейс.Панель функций","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПанелиОткрытыхЕстьКомандаТогда(Парам01)","ВПанелиОткрытыхЕстьКомандаТогда","Если в панели открытых есть команда ""ИмяКоманды"" Тогда","Условие. Проверяет наличие команды в панели открытых.","UI.Командный интерфейс.Панель открытых","Условие");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВключаюАсинхронныйРежимВыполненияШаговСИнтервалом(Парам01)","ЯВключаюАсинхронныйРежимВыполненияШаговСИнтервалом","И я включаю асинхронный режим выполнения шагов с интервалом ""ЗначениеИнтервала""","Включает режим асинхронного выполнения шагов.","Прочее.Режим выполнения шагов");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОтключаюАсинхронныйРежимВыполненияШагов()","ЯОтключаюАсинхронныйРежимВыполненияШагов","И я отключаю асинхронный режим выполнения шагов","Выключает режим асинхронного выполнения шагов.","Прочее.Режим выполнения шагов");
	
	//у групп в панели функций нет имен, поэтому следующие шаги закомментированы
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ГруппаСИменемВПанелиФункцийСодержитПунктыМеню(Парам01,ТабПарам)","ГруппаСИменемВПанелиФункцийСодержитПунктыМеню","И группа с именем 'ИмяГруппы' в панели функций содержит пункты меню","","");
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ГруппаСИменемВПанелиФункцийНеСодержитПунктыМеню(Парам01,ТабПарам)","ГруппаСИменемВПанелиФункцийНеСодержитПунктыМеню","И группа с именем 'ИмяГруппы' в панели функций  не содержит пункты меню","","");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеТекущаяСтрокаПомеченаНаУдаление(Парам01)","ВТаблицеТекущаяСтрокаПомеченаНаУдаление","И в таблице ""ИмяТаблицы"" текущая строка помечена на удаление","Проверяет, что текущая строка в списке имеет пометку удаления.","UI.Пометка удаления");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеТекущаяСтрокаПомеченаНаУдалениеТогда(Парам01)","ВТаблицеТекущаяСтрокаПомеченаНаУдалениеТогда","Если в таблице ""ИмяТаблицы"" текущая строка помечена на удаление тогда","Условие. Проверяет, что текущая строка в списке имеет пометку удаления.","UI.Пометка удаления","Условие");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеТекущаяСтрокаНеПомеченаНаУдаление(Парам01)","ВТаблицеТекущаяСтрокаНеПомеченаНаУдаление","И в таблице ""ИмяТаблицы"" текущая строка не помечена на удаление","Проверяет, что текущая строка в списке не имеет пометку удаления.","UI.Пометка удаления");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеТекущаяСтрокаНеПомеченаНаУдалениеТогда(Парам01)","ВТаблицеТекущаяСтрокаНеПомеченаНаУдалениеТогда","Если в таблице ""ИмяТаблицы"" текущая строка не помечена на удаление тогда","Проверяет, что текущая строка в списке не имеет пометку удаления.","UI.Пометка удаления","Условие");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УЭлементаФормыУстановленаПометка(Парам01)","УЭлементаФормыУстановленаПометка","И у элемента формы ""ИмяЭлемента"" установлена пометка","Проверяет, что у элемента формы установлена пометка.","UI.Формы.Поля.Пометка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УЭлементаФормыНеУстановленаПометка(Парам01)","УЭлементаФормыНеУстановленаПометка","И у элемента формы ""ИмяЭлемента"" не установлена пометка","Проверяет, что у элемента формы установлена пометка.","UI.Формы.Поля.Пометка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УЭлементаФормыСИменемУстановленаПометка(Парам01)","УЭлементаФормыСИменемУстановленаПометка","И у элемента формы с именем 'ИмяЭлемента' установлена пометка","Проверяет, что у элемента формы установлена пометка.","UI.Формы.Поля.Пометка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УЭлементаФормыСИменемНеУстановленаПометка(Парам01)","УЭлементаФормыСИменемНеУстановленаПометка","И у элемента формы с именем 'ИмяЭлемента' не установлена пометка","Проверяет, что у элемента формы установлена пометка.","UI.Формы.Поля.Пометка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯСохраняюНавигационнуюСсылкуТекущегоОкнаВПеременную(Парам01)","ЯСохраняюНавигационнуюСсылкуТекущегоОкнаВПеременную","И я сохраняю навигационную ссылку текущего окна в переменную ""ИмяПеременной""","Запоминает навигационную ссылку текущего окна, если оно находится в панели открытых окон.","UI.Окна");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрываюВыпадающийСписок(Парам01)","ЯЗакрываюВыпадающийСписок","И я закрываю выпадающий список ""ИмяПоля""","Закрывает выпадающий список","UI.Формы.Поля.Выпадающий список.Закрыть список");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрываюВыпадающийСписокСИменем(Парам01)","ЯЗакрываюВыпадающийСписокСИменем","И я закрываю выпадающий список с именем 'ИмяПоля'","Закрывает выпадающий список","UI.Формы.Поля.Выпадающий список.Закрыть список");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯЗакрываюВыпадающийСписок(Парам01,Парам02)","ВТаблицеЯЗакрываюВыпадающийСписок","И в таблице ""ИмяТаблицы"" я закрываю выпадающий список ""ИмяПоля""","Закрывает выпадающий список","UI.Формы.Поля.Выпадающий список.Закрыть список");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯЗакрываюВыпадающийСписокСИменем(Парам01,Парам02)","ВТаблицеЯЗакрываюВыпадающийСписокСИменем","И в таблице ""ИмяТаблицы"" я закрываю выпадающий список с именем 'ИмяПоля'","Закрывает выпадающий список","UI.Формы.Поля.Выпадающий список.Закрыть список");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюАдресТекущейЯчейкиВПеременную(Парам01,Парам02)","ЯЗапоминаюАдресТекущейЯчейкиВПеременную","И я запоминаю адрес текущей ячейки ""ИмяРеквизита"" в переменную ""ИмяПеременной""","Запоминает адрес текущей ячейки макета в переменную.","UI.Табличный документ.Запомнить адрес ячейки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеТекущейЯчейкиВПеременную(Парам01,Парам02)","ЯЗапоминаюЗначениеТекущейЯчейкиВПеременную","И я запоминаю значение текущей ячейки ""ИмяРеквизита"" в переменную ""ИмяПеременной""","Запоминает значение текущей ячейки макета в переменную.","UI.Табличный документ.Запомнить значение текущей ячейки");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯКопируюПеременнуюВ(Парам01,Парам02)","ЯКопируюПеременнуюВ","И я копирую переменную ""ИмяПеременной1"" в ""ИмяПеременной2""","Копирует одну локальную переменную в другую локальную переменную. Имена переменных нужно указывать без символа $.","Переменные.Сохранить значение.Скопировать переменную");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВключаюЧтениеТабличныхДокументовТолькоПоЯчейкам()","ЯВключаюЧтениеТабличныхДокументовТолькоПоЯчейкам","И я включаю чтение табличных документов только по ячейкам","Включает режим, когда Vanessa Automation не будет пытаться сохранить табличный документ в файл для последующего чтения в тонком клиенте. По умолчанию этот режим выключен.","Прочее.Режим чтение табличных документов");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыключаюЧтениеТабличныхДокументовТолькоПоЯчейкам()","ЯВыключаюЧтениеТабличныхДокументовТолькоПоЯчейкам","И я выключаю чтение табличных документов только по ячейкам","Включает режим, когда Vanessa Automation будет пытаться сохранить табличный документ в файл для последующего чтения в тонком клиенте. Этот режим используется по умолчанию.","Прочее.Режим чтение табличных документов");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюТипТекущегоПоляВПеременную(Парам01)","ЯЗапоминаюТипТекущегоПоляВПеременную","И я запоминаю тип текущего поля в переменную ""ИмяПеременной""","Запоминает тип текущего поля в переменную.","Переменные.Сохранить значение.Поле формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюВидТекущегоПоляВПеременную(Парам01)","ЯЗапоминаюВидТекущегоПоляВПеременную","И я запоминаю вид текущего поля в переменную ""ИмяПеременной""","Запоминает вид текущего поля в переменную.","Переменные.Сохранить значение.Поле формы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭтоLinux()","ЭтоLinux","Дано это Linux","Проверяет, что менеджер тестирования запущен в Linux.","Прочее.Это Linux");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрываюФорму(Парам01)","ЯЗакрываюФорму","И я закрываю форму ""Заголовок формы""","Закрывает первое окно в котором будет найдена форма с указанным заголовоком.","UI.Формы.Закрытие формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрываюФормуСИменем(Парам01)","ЯЗакрываюФормуСИменем","И я закрываю форму с именем ""ИмяФормы""","Закрывает первое окно в котором будет найдена форма с указанным именем.","UI.Формы.Закрытие формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЗакрытияФормыВТечениеСекунд(Парам01, Парам02)","ЯЖдуЗакрытияФормыВТечениеСекунд","И я жду закрытия формы ""Заголовок формы"" в течение 10 секунд","Ожидает закрытия всех окон, в которых есть форма с указанным заголовком.","UI.Формы.Закрытие формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЗакрытияФормыСИменемВТечениеСекунд(Парам01, Парам02)","ЯЖдуЗакрытияФормыСИменемВТечениеСекунд","И я жду закрытия формы с именем ""ИмяФормы"" в течение 10 секунд","Ожидает закрытия всех окон, в которых есть форма с указанным именем.","UI.Формы.Закрытие формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюИмяФормыВПеременную(Парам01)","ЯЗапоминаюИмяФормыВПеременную","И я запоминаю имя формы в переменную ""ИмяФормы""","Запоминает имя формы текущего окна в переменную.","UI.Формы.Запомнить заголовок формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗаголовокФормыВПеременную(Парам01)","ЯЗапоминаюЗаголовокФормыВПеременную","И я запоминаю заголовок формы в переменную ""ЗаголовокФормы""","Запоминает заголовок формы текущего окна в переменную.","UI.Формы.Запомнить имя формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗаголовокТекущегоОкнаКак(Парам01)","ЯЗапоминаюЗаголовокТекущегоОкнаКак","И я запоминаю заголовок текущего окна как ""ЗаголовокОкна""","Сохранение значения заголовка текущего окна в переменную.","UI.Окна.Запомнить заголовок окна");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуОткрытияФормыВТечениеСекунд(Парам01,Парам02)","ЯЖдуОткрытияФормыВТечениеСекунд","И я жду открытия формы ""Заголовок формы"" в течение 10 секунд","Ожидает, что появится окно, содержащее форму с нужным заголовком в теченение указанного числа секунд. Окно должно быть активным.","UI.Формы.Ожидание появления формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуОткрытияФормыСИменемВТечениеСекунд(Парам01,Парам02)","ЯЖдуОткрытияФормыСИменемВТечениеСекунд","И я жду открытия формы с именем ""ИмяФормы"" в течение 10 секунд","Ожидает, что появится окно, содержащее форму с нужным именем в теченение указанного числа секунд. Окно должно быть активным.","UI.Формы.Ожидание появления формы");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"HTMLДокументСталРавен(Парам01, Парам02)","HTMLДокументСталРавен","Тогда HTML документ ""Заголовок элемента"" стал равен","Проверяет содержимое HTML документа. Реквизит исчется по заголовку.","UI.Формы.Поля.Поле HTML документа.Проверка значения");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"HTMLДокументСИменемСталРавен(Парам01, Парам02)","HTMLДокументСИменемСталРавен","Тогда HTML документ с именем 'ИмяЭлемента' стал равен","Проверяет содержимое HTML документа. Реквизит исчется по имени.","UI.Формы.Поля.Поле HTML документа.Проверка значения");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЕстьКолонки(Парам01,ТабПарам)","ВТаблицеЕстьКолонки","И в таблице ""ИмяТаблицы"" есть колонки","Проверяет, что в таблице есть колонки с указанными заголовками. Заголовки колонок передаются в виде таблицы Gherkin.","UI.Таблицы.Проверка состава колонок");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЕстьКолонкиСИменем(Парам01,ТабПарам)","ВТаблицеЕстьКолонкиСИменем","И в таблице ""ИмяТаблицы"" есть колонки с именем","Проверяет, что в таблице есть колонки с указанными именами. Имена колонок передаются в виде таблицы Gherkin.","UI.Таблицы.Проверка состава колонок");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюКоличествоОконВПеременную(Парам01)","ЯЗапоминаюКоличествоОконВПеременную","И я запоминаю количество окон в переменную ""ИмяПеременной""","Сохраняет в переменную количество открытых окон в текущем сеансе клиента тестирования.","UI.Окна");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУстанавливаюФильтрНаСписок(ТабПарам)","ЯУстанавливаюФильтрНаСписок","И Я устанавливаю фильтр на список" + Символы.ПС + "	| 'Наименование' | 'Содержит' | 'Товар1' |" ,"Позволяет установить фильтр на список через меню ""Ещё/Настроить список""","UI.Таблицы.Фильтр формы списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУстанавливаюФильтрНаСписокЕслиЭтоВозможно(ТабПарам)","ЯУстанавливаюФильтрНаСписокЕслиЭтоВозможно","И Я устанавливаю фильтр на список если это возможно" + Символы.ПС + "	| 'Наименование' | 'Содержит' | 'Товар1' |"," Позволяет установить фильтр на список через меню ""Ещё/Настроить список"". Причём если такого поля нет, то исключение вызываться не будет.","UI.Таблицы.Фильтр формы списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУстанавливаюФильтрНаСписокЕслиЭтоВозможноRu(ТабПарам)","ЯУстанавливаюФильтрНаСписокЕслиЭтоВозможноRu","И Я устанавливаю фильтр на список если это возможно ru" + Символы.ПС + "	| 'Наименование' | 'Содержит' | 'Товар1' |","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОчищаюФильтрНаФормеСписка()","ЯОчищаюФильтрНаФормеСписка","И Я очищаю фильтр на форме списка","Позволяет сбросить фильтр на список через меню ""Ещё/Настроить список""","UI.Таблицы.Фильтр формы списка");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ДляКаждойСтрокиТаблицыОтбораЯУстанавливаюОтборВСписке(ТабПарам)","ДляКаждойСтрокиТаблицыОтбораЯУстанавливаюОтборВСписке","И для каждой строки таблицы отбора я устанавливаю отбор в списке","Шаг выставляет отбор в форме списка, когда уже открыта форма отбора.","UI.Таблицы.Фильтр формы списка");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ДляКаждойСтрокиТаблицыОтбораЯУстанавливаюОтборВСпискеЕслиЭтоВозможно(ТабПарам)","ДляКаждойСтрокиТаблицыОтбораЯУстанавливаюОтборВСпискеЕслиЭтоВозможно","И для каждой строки таблицы отбора я устанавливаю отбор в списке если это возможно","Шаг выставляет отбор в форме списка, когда уже открыта форма отбора. Не вызывает исключение, если нет такого фильтра в списке.","UI.Таблицы.Фильтр формы списка");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТекущаяСтрокаТаблицыРазвернута(Парам01)","ТекущаяСтрокаТаблицыРазвернута","И текущая строка таблицы ""ИмяТаблицы"" развернута","Проверяет, что текущая строка таблицы развернута.","UI.Таблицы.Строка развернута");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТекущаяСтрокаТаблицыСвернута(Парам01)","ТекущаяСтрокаТаблицыСвернута","И текущая строка таблицы ""ИмяТаблицы"" свернута","Проверяет, что текущая строка таблицы свернута.","UI.Таблицы.Строка свернута");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯАктивизируюДополнениеФормы(Парам01,Парам02)","ВТаблицеЯАктивизируюДополнениеФормы","И в таблице ""Список"" я активизирую дополнение формы ""Заголовок элемента""","Активизирует дополнение элемента формы, такое как строка поиска.","UI.Таблицы.Дополнение элемента формы.Активизировать");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯАктивизируюДополнениеФормыСИменем(Парам01,Парам02)","ВТаблицеЯАктивизируюДополнениеФормыСИменем","И в таблице ""Список"" я активизирую дополнение формы с именем 'ИмяЭлемента'","Активизирует дополнение элемента формы, такое как строка поиска.","UI.Таблицы.Дополнение элемента формы.Активизировать");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВДополнениеФормыЯВвожуТекст(Парам01,Парам02,Парам03)","ВТаблицеВДополнениеФормыЯВвожуТекст","И в таблице ""Список"" в дополнение формы 'Заголовок элемента' я ввожу текст 'Текст'","Вводит текст в дополнение элемента формы, такое как строка поиска.","UI.Таблицы.Дополнение элемента формы.Ввести текст");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеВДополнениеФормыСИменемЯВвожуТекст(Парам01,Парам02,Парам03)","ВТаблицеВДополнениеФормыСИменемЯВвожуТекст","И в таблице ""Список"" в дополнение формы с именем 'ИмяЭлемента' я ввожу текст 'Текст'","Вводит текст в дополнение элемента формы, такое как строка поиска.","UI.Таблицы.Дополнение элемента формы.Ввести текст");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯНажимаюКнопкуОчиститьУДополненияФормы(Парам01,Парам02)","ВТаблицеЯНажимаюКнопкуОчиститьУДополненияФормы","И в таблице ""Список"" я нажимаю кнопку очистить у дополнения формы ""Заголовок элемента""","Очищает текст в дополнении элемента формы, такое как строка поиска.","UI.Таблицы.Дополнение элемента формы.Очистить");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯНажимаюКнопкуОчиститьУДополненияФормыСИменем(Парам01,Парам02)","ВТаблицеЯНажимаюКнопкуОчиститьУДополненияФормыСИменем","И в таблице ""Список"" я нажимаю кнопку очистить у дополнения формы с именем 'ИмяЭлемента'","Очищает текст в дополнении элемента формы, такое как строка поиска.","UI.Таблицы.Дополнение элемента формы.Очистить");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯОтменяюРедактированиеУДополненияФормы(Парам01,Парам02)","ВТаблицеЯОтменяюРедактированиеУДополненияФормы","И в таблице ""Список"" я отменяю редактирование у дополнения формы ""Заголовок элемента""","Вызывает отмену изменений в строке поиска (аналогично нажатию клавиши Esc).","UI.Таблицы.Дополнение элемента формы.Отменить редактирование");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЯОтменяюРедактированиеУДополненияФормыСИменем(Парам01,Парам02)","ВТаблицеЯОтменяюРедактированиеУДополненияФормыСИменем","И в таблице ""Список"" я отменяю редактирование у дополнения формы с именем 'ИмяЭлемента'","Вызывает отмену изменений в строке поиска (аналогично нажатию клавиши Esc).","UI.Таблицы.Дополнение элемента формы.Отменить редактирование");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯАктивизируюДополнениеФормы(Парам01)","ЯАктивизируюДополнениеФормы","И я активизирую дополнение формы ""Заголовок элемента""","Активизирует дополнение элемента формы, такое как строка поиска.","UI.Дополнение элемента формы.Активизировать");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯАктивизируюДополнениеФормыСИменем(Парам01)","ЯАктивизируюДополнениеФормыСИменем","И я активизирую дополнение формы с именем 'ИмяЭлемента'","Активизирует дополнение элемента формы, такое как строка поиска.","UI.Дополнение элемента формы.Активизировать");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВДополнениеФормыЯВвожуТекст(Парам01,Парам02)","ВДополнениеФормыЯВвожуТекст","И в дополнение формы ""Заголовок элемента"" я ввожу текст 'Текст'","Вводит текст в дополнение элемента формы, такое как строка поиска.","UI.Дополнение элемента формы.Ввести текст");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВДополнениеФормыСИменемЯВвожуТекст(Парам01,Парам02)","ВДополнениеФормыСИменемЯВвожуТекст","И в дополнение формы с именем 'ИмяЭлемента' я ввожу текст 'Текст'","Вводит текст в дополнение элемента формы, такое как строка поиска.","UI.Дополнение элемента формы.Ввести текст");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюКнопкуОчиститьУДополненияФормы(Парам01)","ЯНажимаюКнопкуОчиститьУДополненияФормы","И я нажимаю кнопку очистить у дополнения формы ""Заголовок элемента""","Очищает текст в дополнении элемента формы, такое как строка поиска.","UI.Дополнение элемента формы.Очистить");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюКнопкуОчиститьУДополненияФормыСИменем(Парам01)","ЯНажимаюКнопкуОчиститьУДополненияФормыСИменем","И я нажимаю кнопку очистить у дополнения формы с именем 'ИмяЭлемента'","Очищает текст в дополнении элемента формы, такое как строка поиска.","UI.Дополнение элемента формы.Очистить");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОтменяюРедактированиеУДополненияФормы(Парам01)","ЯОтменяюРедактированиеУДополненияФормы","И я отменяю редактирование у дополнения формы ""Заголовок элемента""","Вызывает отмену изменений в строке поиска (аналогично нажатию клавиши Esc).","UI.Дополнение элемента формы.Отменить редактирование");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОтменяюРедактированиеУДополненияФормыСИменем(Парам01)","ЯОтменяюРедактированиеУДополненияФормыСИменем","И я отменяю редактирование у дополнения формы с именем 'ИмяЭлемента'","Вызывает отмену изменений в строке поиска (аналогично нажатию клавиши Esc).","UI.Дополнение элемента формы.Отменить редактирование");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"РеквизитыФормыИмеютЗначение(ТабПарам)",
		"РеквизитыФормыИмеютЗначение",
		"И реквизиты формы имеют значение:" + Символы.ПС + "	| 'Имя'              | 'Значение'              | 'КакИскать' |" + Символы.ПС + "	| 'ИмяЭлементаФормы' | 'ЗначениеЭлементаФормы' | 'ПоИмени'   |",
		"Проверяет значение реквизитов шапки формы.
		|В первой колонке указывается имя или заголовок элемента формы.
		|Во второй колонке указывается эталонное значение.
		|В третьей колонке указывается как искать элемент формы: если третьей колонки нет - то элемент ищется по имени, если колонка есть, но значение не указано, то элемент ищется по имени. Если значение указано, то допустимо указывать ""ПоИмени"" или ""ПоЗаголовку"".",
		"UI.Формы.Поля.Проверка значения шапки формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"РеквизитыФормыИмеютЗначениеПоШаблону(ТабПарам)",
		"РеквизитыФормыИмеютЗначениеПоШаблону",
		"И реквизиты формы имеют значение по шаблону:" + Символы.ПС + "	| 'Имя'              | 'Значение'              | 'КакИскать' |" + Символы.ПС + "	| 'ИмяЭлементаФормы' | 'ЗначениеЭлементаФормы' | 'ПоИмени'   |",
		"Проверяет значение реквизитов шапки формы. В значениях элементов формы можно указывать символ *.
		|В первой колонке указывается имя или заголовок элемента формы.
		|Во второй колонке указывается эталонное значение.
		|В третьей колонке указывается как искать элемент формы: если третьей колонки нет - то элемент ищется по имени, если колонка есть, но значение не указано, то элемент ищется по имени. Если значение указано, то допустимо указывать ""ПоИмени"" или ""ПоЗаголовку"".",
		"UI.Формы.Поля.Проверка значения шапки формы");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"СостояниеТабличногоДокументаРавно(Парам01,Парам02)",
		"СостояниеТабличногоДокументаРавно",
		"И состояние табличного документа ""ИмяЭлемента"" равно ""Текст""",
		"Проверяет, что отображаемое состояние табличного документа равно ожидаемому. Например: ""Отчет формируется..."", ""Отчет не сформирован. Нажмите ""Сформировать"" для получения отчета.""",
		"UI.Табличный документ.Проверка отображения состояния");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЖдуСостоянияТабличногоДокументаВТечениеСекунд(Парам01,Парам02,Парам03)",
		"ЯЖдуСостоянияТабличногоДокументаВТечениеСекунд",
		"И я жду состояния табличного документа ""ИмяЭлемента"" ""Текст"" в течение 10 секунд",
		"Ожидает в течение указанного числа секунд, что отображаемое состояние табличного документа станет равно ожидаемому. Например: ""Отчет формируется..."", ""Отчет не сформирован. Нажмите ""Сформировать"" для получения отчета.""",
		"UI.Табличный документ.Проверка отображения состояния");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗапоминаюСостояниеТабличногоДокументаВПеременную(Парам01,Парам02)",
		"ЯЗапоминаюСостояниеТабличногоДокументаВПеременную",
		"И я запоминаю состояние табличного документа ""ИмяЭлемента"" в переменную ""ИмяПеременной""",
		"Запоминает в переменную текст отображаемого состояния табличного документа, такое как: ""Отчет формируется..."", ""Отчет не сформирован. Нажмите ""Сформировать"" для получения отчета.""",
		"UI.Табличный документ.Проверка отображения состояния");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВТаблицеЯУстанавливаюСортировкуПоКолонке(Парам01,Парам02)",
		"ВТаблицеЯУстанавливаюСортировкуПоКолонке",
		"И в таблице 'Список' я устанавливаю сортировку по колонке 'ЗаголовокКолонки'",
		"Устанавливает сортировку по колонке. Колонка указывается по её заголовку. Повторный вызов сменит порядок сортировки на противоположный.",
		"UI.Таблицы.Сортировка по колонке");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВПолеHTMLДокументаЯНажимаюГиперссылку(Парам01,Парам02)",
		"ВПолеHTMLДокументаЯНажимаюГиперссылку",
		"И в поле HTML документа ""Заголовок элемента"" я нажимаю гиперссылку ""ИмяГиперссылки""",
		"Нажимает в поле HTML документа гиперссылку. Поле ищется по заголовку. Гиперссылку можно указать по её представлению или по номеру начиная с 0.
		|Работает в платформе 8.3.25 и выше.",
		"UI.Формы.Поля.Поле HTML документа.Нажатие гиперссылки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВПолеHTMLДокументаСИменемЯНажимаюГиперссылку(Парам01,Парам02)",
		"ВПолеHTMLДокументаСИменемЯНажимаюГиперссылку",
		"И в поле HTML документа с именем ""ИмяЭлемента"" я нажимаю гиперссылку ""ИмяГиперссылки""",
		"Нажимает в поле HTML документа гиперссылку. Поле ищется по имени. Гиперссылку можно указать по её представлению или по номеру начиная с 0.
		|Работает в платформе 8.3.25 и выше.",
		"UI.Формы.Поля.Поле HTML документа.Нажатие гиперссылки");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ФормаТекущегоОкнаИмеетПризнакТолькоПросмотр()",
		"ФормаТекущегоОкнаИмеетПризнакТолькоПросмотр",
		"И форма текущего окна имеет признак только просмотр",
		"Проверяет, что форма текущего окна имеет признак только просмотр.
		|Работает в платформе 8.3.25 и выше.",
		"UI.Формы.Свойста текущей формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ФормаТекущегоОкнаНеИмеетПризнакТолькоПросмотр()",
		"ФормаТекущегоОкнаНеИмеетПризнакТолькоПросмотр",
		"И форма текущего окна не имеет признак только просмотр",
		"Проверяет, что форма текущего окна не имеет признак только просмотр.
		|Работает в платформе 8.3.25 и выше.",
		"UI.Формы.Свойста текущей формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ФормаТекущегоОкнаДоступнаДляРедактирования()",
		"ФормаТекущегоОкнаДоступнаДляРедактирования",
		"И форма текущего окна доступна для редактирования",
		"Проверяет, что форма текущего доступна для редактирования.
		|Работает в платформе 8.3.25 и выше.",
		"UI.Формы.Свойста текущей формы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ФормаТекущегоОкнаНедоступнаДляРедактирования()",
		"ФормаТекущегоОкнаНедоступнаДляРедактирования",
		"И форма текущего окна недоступна для редактирования",
		"Проверяет, что форма текущего окна не доступна для редактирования.
		|Работает в платформе 8.3.25 и выше.",
		"UI.Формы.Свойста текущей формы");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"УПоляОтображаетсяЗаголовок(Парам01)",
		"УПоляОтображаетсяЗаголовок",
		"И у поля 'Заголовок элемента' отображается заголовок",
		"Проверяет, что у поля отображается заголовок. Поле ищется по заголовку.
		|Работает в платформе 8.3.25 и выше.",
		"UI.Формы.Поля.Заголовок");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"УПоляНеОтображаетсяЗаголовок(Парам01)",
		"УПоляНеОтображаетсяЗаголовок",
		"И у поля 'Заголовок элемента' не отображается заголовок",
		"Проверяет, что у поля отображается заголовок. Поле ищется по заголовку.
		|Работает в платформе 8.3.25 и выше.",
		"UI.Формы.Поля.Заголовок");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"УПоляСИменемОтображаетсяЗаголовок(Парам01)",
		"УПоляСИменемОтображаетсяЗаголовок",
		"И у поля с именем 'ИмяЭлемента' отображается заголовок",
		"Проверяет, что у поля не отображается заголовок. Поле ищется по имени.
		|Работает в платформе 8.3.25 и выше.",
		"UI.Формы.Поля.Заголовок");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"УПоляСИменемНеОтображаетсяЗаголовок(Парам01)",
		"УПоляСИменемНеОтображаетсяЗаголовок",
		"И у поля с именем 'ИмяЭлемента' не отображается заголовок",
		"Проверяет, что у поля не отображается заголовок. Поле ищется по имени.
		|Работает в платформе 8.3.25 и выше.",
		"UI.Формы.Поля.Заголовок");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ТекущееВремяВДиапазонеОтДо(Парам01,Парам02)",
		"ТекущееВремяВДиапазонеОтДо",
		"И текущее время в диапазоне от ""23:30:00"" до ""23:59:59""",
		"Проверяет, что текущее время находится в диапазоне дат.",
		"Прочее.Работа со временем");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЖдуНаступленияВремени(Парам01)",
		"ЯЖдуНаступленияВремени",
		"Тогда я жду наступления времени ""00:00:00""",
		"Ожидает, что текущее время станет больше чем указанное время.
		|Если нужно ждать больше 12 часов, то считается, то указанное время уже наступило.
		|Шаг предполагается использоваться в тех случаях, когда сценарию критична смены текущей даты во время его выполнения, и бывает целесообразно подождать до полуночи, чтобы дождаться смены даты и затем продолжить выполнение сценария.
		|Рекомендуется использовать следующую конструкцию:
		|Если текущее время в диапазоне от ""23:50:00"" до ""23:59:59"" Тогда
		|	Тогда я жду наступления времени ""00:00:00"" ",
		"Прочее.Работа со временем");
	
	Возврат ВсеТесты;
	
КонецФункции

//---------------------------------------

&НаСервереБезКонтекста
Функция ПолучитьТекстСообщенияПользователюСервер(Текст,ТекстСообщенийПользователю)
	Значение = ТекстСообщенийПользователю[Текст];
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Значение;
	КонецЕсли;	 
	
	Возврат Текст; 
КонецФункции

//---------------------------------------

&НаКлиенте
Функция ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита)
	Если Не ВерсияПлатформыБольшеИлиРавна839 Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если НЕ ПолеРеквизит.ТекущаяВидимость() Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле <%1> в данный момент невидимо пользователю.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
Функция ОбработчикОжиданияВОткрытойФормеЯЖдуПоявленияЭлементаВТеченииСекунд()
	ИмяОбработчика = "ОбработчикОжиданияВОткрытойФормеЯЖдуПоявленияЭлементаВТеченииСекунд";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекстОшибки","");
	ДопПараметры.Вставить("ИсключитьФормы", Истина);
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоляОбработкаОжидания,ИскатьПоИмениОбрабткаОжидания,Ложь,,ДопПараметры);
	
	Если ЭлементФормы = Неопределено Тогда
		Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчика);
			Если ЗначениеОжидатьВидимости Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд появления поля <%2>. Но такой элемент на форме не найден.");
			Иначе	
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд исчезновения поля <%2>. Но такой элемент на форме не найден.");
			КонецЕсли;	 
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоляОбработкаОжидания);
			Если ЗначениеЗаполнено(ДопПараметры.ТекстОшибки) Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + ДопПараметры.ТекстОшибки;
			КонецЕсли;	 
			Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;	 
		Возврат Неопределено;
	КонецЕсли;	 
	
	Попытка
		ТекущаяВидимость = ЭлементФормы.ТекущаяВидимость();
	Исключение
		ТекущаяВидимость = Неопределено;
	КонецПопытки;
	
	Если ТекущаяВидимость = ЗначениеОжидатьВидимости Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Если ЗначениеОжидатьВидимости Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд появления поля <%2>. ТекущаяВидимость=%3");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд исчезновения поля <%2>. ТекущаяВидимость=%3");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоляОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ТекущаяВидимость);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
Функция ВОткрытойФормеЯЖдуПоявленияЭлементаВТеченииСекунд(ИмяЭлемента, КоличествоСекунд = 10, ИскатьПоИмени = Ложь, ОжидатьВидимости = Истина)
	Ванесса.ЗапретитьВыполнениеШагов();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = ИмяЭлемента;
	ИскатьПоИмениОбрабткаОжидания     = ИскатьПоИмени;
	ЗначениеОжидатьВидимости = ОжидатьВидимости;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияВОткрытойФормеЯЖдуПоявленияЭлементаВТеченииСекунд",1,Ложь);
КонецФункции

&НаКлиенте
//И я жду появления элемента "Имя элемента"
//@ЯЖдуПоявленияЭлемента(Парам01)
Функция ЯЖдуПоявленияЭлемента(Парам01) Экспорт
	ВОткрытойФормеЯЖдуПоявленияЭлементаВТеченииСекунд(Парам01);
КонецФункции

&НаКлиенте
//И я жду появления элемента с именем "Имя элемента"
//@ЯЖдуПоявленияЭлементаСИменем(Парам01)
Функция ЯЖдуПоявленияЭлементаСИменем(Парам01) Экспорт
	ВОткрытойФормеЯЖдуПоявленияЭлементаВТеченииСекунд(Парам01,, Истина);
КонецФункции

&НаКлиенте
//И я жду появления элемента "Имя элемента" в течении "Таймаут" секунд
//@ЯЖдуПоявленияЭлементаВТеченииСекунд(Парам01, Парам02)
Функция ЯЖдуПоявленияЭлементаВТеченииСекунд(Парам01, Парам02) Экспорт
	ВОткрытойФормеЯЖдуПоявленияЭлементаВТеченииСекунд(Парам01, Парам02);
КонецФункции

&НаКлиенте
//И я жду появления элемента "Имя элемента" в течение "Таймаут" секунд
//@ЯЖдуПоявленияЭлементаВТечениеСекунд(Парам01, Парам02)
Функция ЯЖдуПоявленияЭлементаВТечениеСекунд(Парам01, Парам02) Экспорт
	ЯЖдуПоявленияЭлементаВТеченииСекунд(Парам01, Парам02);
КонецФункции

&НаКлиенте
//И я жду появления элемента с именем "Имя элемента" в течении "Таймаут" секунд
//@ЯЖдуПоявленияЭлементаСИменемВТеченииСекунд(Парам01, Парам02)
Функция ЯЖдуПоявленияЭлементаСИменемВТеченииСекунд(Парам01, Парам02) Экспорт
	ВОткрытойФормеЯЖдуПоявленияЭлементаВТеченииСекунд(Парам01, Парам02, Истина);
КонецФункции

&НаКлиенте
//И я жду появления элемента с именем "Имя элемента" в течение "Таймаут" секунд
//@ЯЖдуПоявленияЭлементаСИменемВТечениеСекунд(Парам01, Парам02)
Функция ЯЖдуПоявленияЭлементаСИменемВТечениеСекунд(Парам01, Парам02) Экспорт
	ЯЖдуПоявленияЭлементаСИменемВТеченииСекунд(Парам01, Парам02);
КонецФункции

&НаКлиенте
//И я жду когда исчезнет элемент "Заголовок элемента" в течение 20 секунд
//@ЯЖдуКогдаИсчезнетЭлементВТечениеСекунд(Парам01, Парам02)
Функция ЯЖдуКогдаИсчезнетЭлементВТечениеСекунд(Парам01, Парам02, ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯЖдуПоявленияЭлементаВТеченииСекунд(Парам01, Парам02, ИскатьПоИмени, Ложь);
КонецФункции

&НаКлиенте
//И я жду когда исчезнет элемент с именем "ИмяЭлемента" в течение 20 секунд
//@ЯЖдуКогдаИсчезнетЭлементСИменемВТечениеСекунд(Парам01, Парам02)
Функция ЯЖдуКогдаИсчезнетЭлементСИменемВТечениеСекунд(Парам01, Парам02) Экспорт
	ЯЖдуКогдаИсчезнетЭлементВТечениеСекунд(Парам01, Парам02, Истина);
КонецФункции



&НаКлиенте
Функция ОбработчикОжиданияВОткрытойФормеЯЖдуДоступностиЭлементаВТечениеСекунд()
	ИмяОбработчика = "ОбработчикОжиданияВОткрытойФормеЯЖдуДоступностиЭлементаВТечениеСекунд";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоляОбработкаОжидания,ИскатьПоИмениОбрабткаОжидания,Ложь);
	
	Если ЭлементФормы = Неопределено Тогда
		Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчика);
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд доступности поля <%2>. Но такой элемент на форме не найден.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоляОбработкаОжидания);
			Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;	 
		Возврат Неопределено;
	КонецЕсли;	 
	
	ТекущаяДоступность = Неопределено;
	Попытка
		ТекущаяДоступность = ЭлементФормы.ТекущаяДоступность();
	Исключение
		ТекущаяДоступность = Неопределено;
	КонецПопытки;
	
	Если ТекущаяДоступность = ОжидатьДоступности Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Если ОжидатьДоступности Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд доступности поля <%2>. ТекущаяДоступность=%3");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд недоступности поля <%2>. ТекущаяДоступность=%3");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоляОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ТекущаяДоступность);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


&НаКлиенте
//И я жду доступности элемента "Имя элемента" в течение "Таймаут" секунд
//@ЯЖдуДоступностиЭлементаВТечениеСекунд(Парам01, Парам02)
Функция ЯЖдуДоступностиЭлементаВТечениеСекунд(ИмяЭлемента, КоличествоСекунд, ИскатьПоИмени = Ложь) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = ИмяЭлемента;
	ИскатьПоИмениОбрабткаОжидания     = ИскатьПоИмени;
	ОжидатьДоступности                = Истина;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияВОткрытойФормеЯЖдуДоступностиЭлементаВТечениеСекунд",1,Ложь);
КонецФункции


&НаКлиенте
//И я жду доступности элемента с именем "ИмяЭлемента" в течение "Таймаут" секунд
//@ЯЖдуДоступностиЭлементаСИменемВТечениеСекунд(Парам01, Парам02)
Функция ЯЖдуДоступностиЭлементаСИменемВТечениеСекунд(ИмяЭлемента, КоличествоСекунд) Экспорт
	ЯЖдуДоступностиЭлементаВТечениеСекунд(ИмяЭлемента, КоличествоСекунд, Истина);
КонецФункции

&НаКлиенте
//И я жду недоступности элемента "Имя элемента" в течение "Таймаут" секунд
//@ЯЖдуНедоступностиЭлементаВТечениеСекунд(Парам01, Парам02)
Функция ЯЖдуНедоступностиЭлементаВТечениеСекунд(ИмяЭлемента, КоличествоСекунд, ИскатьПоИмени = Ложь) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = ИмяЭлемента;
	ИскатьПоИмениОбрабткаОжидания     = ИскатьПоИмени;
	ОжидатьДоступности                = Ложь;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияВОткрытойФормеЯЖдуДоступностиЭлементаВТечениеСекунд",1,Ложь);
КонецФункции

&НаКлиенте
//И я жду недоступности элемента с именем "ИмяЭлемента" в течение "Таймаут" секунд
//@ЯЖдуДоступностиЭлементаСИменемВТечениеСекунд(Парам01, Парам02)
Функция ЯЖдуНедоступностиЭлементаСИменемВТечениеСекунд(ИмяЭлемента, КоличествоСекунд) Экспорт
	ЯЖдуНедоступностиЭлементаВТечениеСекунд(ИмяЭлемента, КоличествоСекунд, Истина);
КонецФункции




&НаКлиенте
//И я перехожу к следующему реквизиту
//@ЯПерехожуКСледующемуРеквизиту()
Функция ЯПерехожуКСледующемуРеквизиту() Экспорт
    АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
    АктивнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
    АктивнаяФорма.ПерейтиКСледующемуЭлементу();
КонецФункции

&НаКлиенте
//И я перехожу к следующему реквизиту
//@ЯПерехожуКПредыдущемуРеквизиту()
Функция ЯПерехожуКПредыдущемуРеквизиту() Экспорт
    АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
    АктивнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
    АктивнаяФорма.ПерейтиКПредыдущемуЭлементу();
КонецФункции

//---------------------------------------




&НаКлиенте
//И у элемента "Имя элемента" я жду значения "Значение"
//@УЭлементаЯЖдуЗначения(Парам01,Парам02)
Функция УЭлементаЯЖдуЗначения(ИмяПоля,Значение) Экспорт
	УЭлементаЯЖдуЗначенияВТеченииСекунд(ИмяПоля,Значение,10,Ложь);
КонецФункции

&НаКлиенте
//И у элемента с именем "Имя элемента" я жду значения "Значение"
//@УЭлементасИменемЯЖдуЗначения(Парам01,Парам02)
Функция УЭлементасИменемЯЖдуЗначения(ИмяПоля,Значение) Экспорт
	УЭлементаЯЖдуЗначенияВТеченииСекунд(ИмяПоля,Значение,10,Истина);
КонецФункции



&НаКлиенте
Функция ОбработчикОжиданияУЭлементаЯЖдуЗначенияВТеченииСекунд()
	ИмяОбработчика = "ОбработчикОжиданияУЭлементаЯЖдуЗначенияВТеченииСекунд";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВызыватьИсключение",Ложь);
	
	ТекущееЗначение2 = Неопределено;
	Попытка
		ТекущееЗначение = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяПоляОбработкаОжидания,ИскатьПоИмениОбрабткаОжидания,ДопПараметры);
	Исключение
		ТекущееЗначение = Неопределено;
	КонецПопытки;
	
	Попытка
		Если ДопПараметры.Свойство("ПолеРеквизит") Тогда
			Если ДопПараметры.ПолеРеквизит.Вид = ВидПоляФормы.ПолеФлажка Тогда
				ТекущееЗначение2 = ПривестиЗначениеФлагаКСтандарту(ТекущееЗначение);
			КонецЕсли;	 
		КонецЕсли;	 
	Исключение
	КонецПопытки;
	
	Если ПроверкаПоШаблону Тогда
		Если Ванесса.СтрокаСоответствуетШаблону(ТекущееЗначение,ЗначениеОбрабткаОжидания) И (ТекущееЗначение <> Неопределено) Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчика);
			Ванесса.ПродолжитьВыполнениеШагов();
			Возврат Неопределено;
		КонецЕсли;	 
	Иначе	
		Если ((НРег(ЗначениеОбрабткаОжидания) = НРег(ТекущееЗначение)) И (ТекущееЗначение <> Неопределено))
			ИЛИ ((НРег(ЗначениеОбрабткаОжидания) = НРег(ТекущееЗначение2)) И (ТекущееЗначение2 <> Неопределено)) Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчика);
			Ванесса.ПродолжитьВыполнениеШагов();
			Возврат Неопределено;
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд у поля <%2> значения <%3>. Текущее значение <%4>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоляОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ЗначениеОбрабткаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ТекущееЗначение);
		
		ТекстСообщения = Ванесса.ДобавитьСтрокуВозможногоШаблона(ТекстСообщения, ТекущееЗначение, ЗначениеОбрабткаОжидания);
		
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И у элемента "Имя элемента" я жду значения "Значение" в течении 11 секунд
//@УЭлементаЯЖдуЗначенияВТеченииСекунд(Парам01,Парам02)
Функция УЭлементаЯЖдуЗначенияВТеченииСекунд(ИмяПоля,Значение,КоличествоСекунд,ИскатьПоИмени = Ложь,ПоШаблону = Ложь) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВызыватьИсключение",Ложь);
	
	ТекущееЗначение2 = Неопределено;
	Попытка
		ТекущееЗначение = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяПоля,ИскатьПоИмени,ДопПараметры);
	Исключение
		ТекущееЗначение = Неопределено;
	КонецПопытки;
	
	Попытка
		Если ДопПараметры.Свойство("ПолеРеквизит") Тогда
			Если ДопПараметры.ПолеРеквизит.Вид = ВидПоляФормы.ПолеФлажка Тогда
				ТекущееЗначение2 = ПривестиЗначениеФлагаКСтандарту(ТекущееЗначение);
			КонецЕсли;	 
		КонецЕсли;	 
	Исключение
	КонецПопытки;

	Если ((НРег(Значение) = НРег(ТекущееЗначение)) И (ТекущееЗначение <> Неопределено))
		ИЛИ ((НРег(Значение) = НРег(ТекущееЗначение2)) И (ТекущееЗначение2 <> Неопределено)) Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Ванесса.ЗапретитьВыполнениеШагов();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = ИмяПоля;
	ИскатьПоИмениОбрабткаОжидания     = ИскатьПоИмени;
	ПроверкаПоШаблону                 = ПоШаблону;
	ЗначениеОбрабткаОжидания          = Значение;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияУЭлементаЯЖдуЗначенияВТеченииСекунд",1,Ложь);
КонецФункции

&НаКлиенте
//И у элемента "Имя элемента" я жду значения "Значение" в течение 11 секунд
//@УЭлементаЯЖдуЗначенияВТечениеСекунд(Парам01,Парам02)
Функция УЭлементаЯЖдуЗначенияВТечениеСекунд(ИмяПоля,Значение,КоличествоСекунд,ИскатьПоИмени = Ложь) Экспорт
	УЭлементаЯЖдуЗначенияВТеченииСекунд(ИмяПоля,Значение,КоличествоСекунд,ИскатьПоИмени);
КонецФункции

&НаКлиенте
//И у элемента "Имя элемента" я жду значения "Значение" в течение 11 секунд по шаблону
//@УЭлементаЯЖдуЗначенияВТечениеСекундПоШаблону(Парам01,Парам02)
Функция УЭлементаЯЖдуЗначенияВТечениеСекундПоШаблону(ИмяПоля,Значение,КоличествоСекунд,ИскатьПоИмени = Ложь) Экспорт
	УЭлементаЯЖдуЗначенияВТеченииСекунд(ИмяПоля,Значение,КоличествоСекунд,ИскатьПоИмени,Истина);
КонецФункции


&НаКлиенте
//И у элемента с именем "Имя элемента" я жду значения "Значение"
//@УЭлементаСИменемЯЖдуЗначенияВТеченииСекунд(Парам01,Парам02)
Функция УЭлементаСИменемЯЖдуЗначенияВТеченииСекунд(ИмяПоля,Значение,КоличествоСекунд) Экспорт
	УЭлементаЯЖдуЗначенияВТеченииСекунд(ИмяПоля,Значение,КоличествоСекунд,Истина);
КонецФункции

&НаКлиенте
//И у элемента с именем "Имя элемента" я жду значения "Значение"
//@УЭлементаСИменемЯЖдуЗначенияВТечениеСекунд(Парам01,Парам02)
Функция УЭлементаСИменемЯЖдуЗначенияВТечениеСекунд(ИмяПоля,Значение,КоличествоСекунд) Экспорт
	УЭлементаСИменемЯЖдуЗначенияВТеченииСекунд(ИмяПоля,Значение,КоличествоСекунд);
КонецФункции

&НаКлиенте
//И у элемента с именем "Имя элемента" я жду значения "Значение" по шаблону
//@УЭлементаСИменемЯЖдуЗначенияВТечениеСекундПоШаблону(Парам01,Парам02)
Функция УЭлементаСИменемЯЖдуЗначенияВТечениеСекундПоШаблону(ИмяПоля,Значение,КоличествоСекунд) Экспорт
	УЭлементаЯЖдуЗначенияВТеченииСекунд(ИмяПоля,Значение,КоличествоСекунд,Истина,Истина);
КонецФункции




&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я устанавливаю флаг "Реквизит булево"
//@ВТЧЯУстанавливаюФлаг(Парам01,Парам02)
Функция ВТЧЯУстанавливаюФлаг(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯУстанавливаюФлаг(Парам01,Парам02);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я устанавливаю флаг "Реквизит булево"
//@ВТаблицеЯУстанавливаюФлаг(Парам01,Парам02)
Функция ВТаблицеЯУстанавливаюФлаг(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯУстанавливаюФлаг(Парам01,Парам02);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я устанавливаю флаг с именем "РеквизитБулево"
//@ВТаблицеЯУстанавливаюФлагСИменем(Парам01,Парам02)
Функция ВТаблицеЯУстанавливаюФлагСИменем(ИмяТЧ,ИмяРеквизита) Экспорт
	ВОткрытойФормеВТЧЯУстанавливаюФлагСЗаголовком(ИмяТЧ,ИмяРеквизита,Истина);
КонецФункции

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я устанавливаю флаг "Реквизит булево"
//@ВОткрытойФормеВТЧЯУстанавливаюФлаг(Парам01,Парам02)
Функция ВОткрытойФормеВТЧЯУстанавливаюФлаг(ИмяТЧ,ИмяРеквизита) Экспорт
	ВОткрытойФормеВТЧЯУстанавливаюФлагСЗаголовком(ИмяТЧ,ИмяРеквизита);
КонецФункции

&НаКлиенте
Функция ПолучитьПредставлениеДанныхФлага(ПолеРеквизит)
	ПредставлениеДанных = ПолеРеквизит.ПолучитьПредставлениеДанных();
	Если ПустаяСтрока(ПредставлениеДанных) Тогда
		Попытка
			ПредставлениеДанных = ПолеРеквизит.ПолучитьОтображаемыйТекст();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ПредставлениеДанных = "2" Тогда
		// Надо проверить, что ОтображаемыйТекст пустой. Может быть реквизит типа число, но у него значение 2 и тогда флаг как бы снят.
		// Но у такого реквизита ОтображаемыйТекст будет "нет"
		Попытка
			ОтображаемыйТекст = ПолеРеквизит.ПолучитьОтображаемыйТекст();
			Если НЕ ПустаяСтрока(ОтображаемыйТекст) Тогда
				ПредставлениеДанных = ОтображаемыйТекст;
			КонецЕсли;	
		Исключение
		КонецПопытки;
	КонецЕсли;	
	
	Возврат ПредставлениеДанных; 
КонецФункции	 

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я устанавливаю флаг с заголовком "Реквизит булево"
//@ВОткрытойФормеВТЧЯУстанавливаюФлагСЗаголовком(Парам01,Парам02)
Функция ВОткрытойФормеВТЧЯУстанавливаюФлагСЗаголовком(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	 
	
	Если ПолеРеквизит = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> не найдено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита);
	ПолеРеквизит.Активизировать();
	
	Ванесса.ПереместитьКурсорКПолю(ПолеРеквизит, Истина);
	//тут нет активного контрола
	ПредставлениеДанных = ПолучитьПредставлениеДанныхФлага(ПолеРеквизит);
	
	Если Ванесса.ЗначениеФлагаСоответствуетСреднееПоложение(ПредставлениеДанных) Тогда
		ПолеРеквизит.УстановитьОтметку();
		ПолеРеквизит.УстановитьОтметку();
	ИначеЕсли НЕ Ванесса.ЗначениеФлагаСоответствуетИстина(ПредставлениеДанных) Тогда
		ПолеРеквизит.УстановитьОтметку();
	КонецЕсли;	 
	
КонецФункции

//---------------------------------------

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я снимаю флаг "Реквизит булево"
//@ВТЧЯСнимаюФлаг(Парам01,Парам02)
Функция ВТЧЯСнимаюФлаг(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯСнимаюФлаг(Парам01,Парам02);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я снимаю флаг "Реквизит булево"
//@ВТаблицеЯСнимаюФлаг(Парам01,Парам02)
Функция ВТаблицеЯСнимаюФлаг(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯСнимаюФлаг(Парам01,Парам02);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я снимаю флаг с именем "РеквизитБулево"
//@ВТаблицеЯСнимаюФлагСИменем(Парам01,Парам02)
Функция ВТаблицеЯСнимаюФлагСИменем(ИмяТЧ,ИмяРеквизита) Экспорт
	ВОткрытойФормеВТЧЯСнимаюФлагСЗаголовком(ИмяТЧ,ИмяРеквизита,Истина);
КонецФункции

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я снимаю флаг "Реквизит булево"
//@ВОткрытойФормеВТЧЯСнимаюФлаг(Парам01,Парам02)
Функция ВОткрытойФормеВТЧЯСнимаюФлаг(ИмяТЧ,ИмяРеквизита) Экспорт
	ВОткрытойФормеВТЧЯСнимаюФлагСЗаголовком(ИмяТЧ,ИмяРеквизита);
КонецФункции

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я снимаю флаг с заголовком "Реквизит булево"
//@ВОткрытойФормеВТЧЯСнимаюФлагСЗаголовком(Парам01,Парам02)
Функция ВОткрытойФормеВТЧЯСнимаюФлагСЗаголовком(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	 
	
	Если ПолеРеквизит = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> не найдено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита);
	ПолеРеквизит.Активизировать();
	
	Ванесса.ПереместитьКурсорКПолю(ПолеРеквизит, Истина);
	//тут нет активного контрола
	ПредставлениеДанных = ПолучитьПредставлениеДанныхФлага(ПолеРеквизит);
	
	Если Ванесса.ЗначениеФлагаСоответствуетИстина(ПредставлениеДанных) Тогда
		ПолеРеквизит.УстановитьОтметку();
	ИначеЕсли Ванесса.ЗначениеФлагаСоответствуетСреднееПоложение(ПредставлениеДанных) Тогда
		ПолеРеквизит.УстановитьОтметку();
	КонецЕсли;	 
	
КонецФункции

//---------------------------------------

&НаКлиенте
//В открытой форме я снимаю флаг с заголовком "Реквизит булево"
//@ВОткрытойФормеЯСнимаюФлагСЗаголовком(Парам01)
Функция ВОткрытойФормеЯСнимаюФлагСЗаголовком(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	СтрокаОшибки = "";
	БылаОшибка = Ложь;
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Истина);
			ДопПараметры.Вставить("ОставитьТолькоФлаги",Истина);
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"),ДопПараметры);	
			
			Если ПолеРеквизит = Неопределено Тогда
				Если ИскатьПоИмени Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Флаг с именем <%1> не найден.");
				Иначе	
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Флаг с заголовком <%1> не найден.");
				КонецЕсли;	 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
				
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			ПолеРеквизит.Активизировать();
			Ванесса.ПереместитьКурсорКФлагу(ПолеРеквизит);
			
			ПредставлениеДанных = ПолучитьПредставлениеДанныхФлага(ПолеРеквизит);
			
			Если Ванесса.ЗначениеФлагаСоответствуетИстина(ПредставлениеДанных) Тогда
				ПолеРеквизит.УстановитьОтметку();
			ИначеЕсли Ванесса.ЗначениеФлагаСоответствуетСреднееПоложение(ПредставлениеДанных) Тогда
				ПолеРеквизит.УстановитьОтметку();
			КонецЕсли;	 
			Прервать;
			
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//В открытой форме я снимаю флаг "Реквизит булево"
//@ВОткрытойФормеЯСнимаюФлаг(Парам01)
Функция ВОткрытойФормеЯСнимаюФлаг(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯСнимаюФлагСЗаголовком(ИмяРеквизита,ИскатьПоИмени);
КонецФункции

&НаКлиенте
//В открытой форме я снимаю флаг с именем "Реквизит булево"
//@ВОткрытойФормеЯСнимаюФлагСИменем(Парам01)
Функция ВОткрытойФормеЯСнимаюФлагСИменем(ИмяРеквизита) Экспорт
	ВОткрытойФормеЯСнимаюФлагСЗаголовком(ИмяРеквизита,Истина)
КонецФункции

&НаКлиенте
//И я снимаю флаг "Реквизит булево"
//@ЯСнимаюФлаг(Парам01)
Функция ЯСнимаюФлаг(Парам01) Экспорт 
	
	ВОткрытойФормеЯСнимаюФлагСЗаголовком(Парам01);
	
КонецФункции

&НаКлиенте
//И я снимаю флаг с именем "Реквизит булево"
//@ЯСнимаюФлагСИменем(Парам01)
Функция ЯСнимаюФлагСИменем(Парам01) Экспорт
	ВОткрытойФормеЯСнимаюФлагСИменем(Парам01);
КонецФункции

//---------------------------------------

&НаКлиенте
//И я устанавливаю флаг "Реквизит булево"
//@ЯУстанавливаюФлаг(Парам01)
Функция ЯУстанавливаюФлаг(Парам01) Экспорт
	ВОткрытойФормеЯУстанавливаюФлагСЗаголовком(Парам01);
КонецФункции

&НаКлиенте
//И я устанавливаю флаг с именем "Реквизит булево"
//@ЯУстанавливаюФлагСИменем(Парам01)
Функция ЯУстанавливаюФлагСИменем(Парам01) Экспорт
	ВОткрытойФормеЯУстанавливаюФлагСИменем(Парам01);
КонецФункции

&НаКлиенте
//В открытой форме я устанавливаю флаг с заголовком "Реквизит булево"
//@ВОткрытойФормеЯУстанавливаюФлагСЗаголовком(Парам01)
Функция ВОткрытойФормеЯУстанавливаюФлагСЗаголовком(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	
	СтрокаОшибки = "";
	БылаОшибка = Ложь;
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Истина);
			ДопПараметры.Вставить("ОставитьТолькоФлаги",Истина);
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"),ДопПараметры);
			Если ПолеРеквизит = Неопределено Тогда
				Если ИскатьПоИмени Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Флаг с именем <%1> не найден.");
				Иначе	
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Флаг с заголовком <%1> не найден.");
				КонецЕсли;
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			ПолеРеквизит.Активизировать();
			
			Ванесса.ПереместитьКурсорКФлагу(ПолеРеквизит);
			
			ПредставлениеДанных = ПолучитьПредставлениеДанныхФлага(ПолеРеквизит);
			
			Если Ванесса.ЗначениеФлагаСоответствуетСреднееПоложение(ПредставлениеДанных) Тогда
				ПолеРеквизит.УстановитьОтметку();
				ПолеРеквизит.УстановитьОтметку();
			ИначеЕсли НЕ Ванесса.ЗначениеФлагаСоответствуетИстина(ПредставлениеДанных) Тогда
				ПолеРеквизит.УстановитьОтметку();
			КонецЕсли;
			
			Прервать;
			
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//В открытой форме я устанавливаю флаг с именем "Реквизит булево"
//@ВОткрытойФормеЯУстанавливаюФлагСИменем(Парам01)
Функция ВОткрытойФормеЯУстанавливаюФлагСИменем(ИмяРеквизита) Экспорт
	ВОткрытойФормеЯУстанавливаюФлагСЗаголовком(ИмяРеквизита,Истина)
КонецФункции

&НаКлиенте
//В открытой форме я устанавливаю флаг "Реквизит булево"
//@ВОткрытойФормеЯУстанавливаюФлаг(Парам01)
Функция ВОткрытойФормеЯУстанавливаюФлаг(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт 
	
	ВОткрытойФормеЯУстанавливаюФлагСЗаголовком(ИмяРеквизита,ИскатьПоИмени);
	
КонецФункции

//---------------------------------------


&НаКлиенте
Функция ПередНачаломСценария() Экспорт
	УдалитьВсеЭлементыСправочникаВида("Справочник1");
	УдалитьВсеЭлементыСправочникаВида("Справочник2");
	Ванесса.sleep(1);
	УдалитьВсеЭлементыСправочникаВида("Справочник1");
	УдалитьВсеЭлементыСправочникаВида("Справочник2");
	Если Ванесса.Объект.ВерсияПоставки = "standart" Тогда
		ИмяМакета = "Fixtures";
	Иначе	
		ИмяМакета = "МакетОбработки_РаботаСИнтерфейсом_Fixtures";
	КонецЕсли;	 
	Макет = ПолучитьМакетСервер(ИмяМакета);
	Ванесса.СоздатьДанныеПоТабличномуДокументу(Макет);
КонецФункции

&НаКлиенте
Функция ПередОкончаниемСценария() Экспорт
	
КонецФункции

&НаКлиенте
Функция АктивизироватьКнопку(Кнопка,ТекущаяФорма = Неопределено,ТЧ = Неопределено)
	Если Ванесса.ТекущийTestclientЭтоWebКлиент Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	ПолучилосьАктивизировать = Ложь;
	Если Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели Тогда
		Попытка
			//в 8.3.7 эта строка вызывает проблему для кнопок диалогов
			Если ТЧ <> Неопределено Тогда
				КоманднаяПанельФормы = ТЧ.ПолучитьКоманднуюПанель();
			Иначе	
				КоманднаяПанельФормы = ТекущаяФорма.ПолучитьКоманднуюПанель();
			КонецЕсли;	 
			
			Если КоманднаяПанельФормы <> Неопределено Тогда
				КоманднаяПанельФормы.Активизировать();
				ПолучилосьАктивизировать = Истина;
			КонецЕсли;	 
		Исключение
		
		КонецПопытки;
	Иначе	
		Кнопка.Активизировать();
		ПолучилосьАктивизировать = Истина;
	КонецЕсли;	 
	
	Возврат ПолучилосьАктивизировать;
КонецФункции	

&НаКлиенте
Функция СделатьДействияПриЗаписиВидео(ПарамСтр = "")
	Ванесса.СделатьДействияПриЗаписиВидео(ПарамСтр);
КонецФункции

&НаКлиенте
Функция СделатьДействияПриЗаписиHTML(ПарамСтр = "")
	Ванесса.СделатьДействияПриЗаписиHTML(ПарамСтр);
КонецФункции

&НаКлиенте
Функция ПолучитьАктивноеОкноИзТестовоеПриложение()
	Возврат Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
КонецФункции	

&НаКлиенте
Функция НайтиФормуПоЗаголовку(ИмяФормы)
	Возврат Ванесса.НайтиФормуПоЗаголовку(ИмяФормы);
КонецФункции	

&НаКлиенте
Функция НайтиФормыТекущегоОкна(ДопПараметры = Неопределено)
	Возврат Ванесса.НайтиКонтейнерыТекущегоОкнаTestClient(ДопПараметры);
КонецФункции	

&НаКлиенте
Функция НайтиТекущуюФорму()
	Возврат Ванесса.НайтиТекущуюФормуTestClient();
КонецФункции	

&НаСервереБезконтекста
Функция УдалитьВсеЭлементыСправочникаВида(ИмяСпр)
	
	Если Метаданные.Справочники[ИмяСпр].Иерархический Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочник1.Ссылка
		|ИЗ
		|	Справочник.Справочник1 КАК Справочник1
		|ГДЕ
		|	ИСТИНА
		|	И НЕ Справочник1.ЭтоГруппа";
		
		
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Справочник1",ИмяСпр);	
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбъектСпр = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Попытка
				ОбъектСпр.Удалить();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочник1.Ссылка
		|ИЗ
		|	Справочник.Справочник1 КАК Справочник1
		|ГДЕ
		|	ИСТИНА
		|	И Справочник1.ЭтоГруппа";
		
		
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Справочник1",ИмяСпр);	
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбъектСпр = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Попытка
				ОбъектСпр.Удалить();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
	Иначе
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочник1.Ссылка
		|ИЗ
		|	Справочник.Справочник1 КАК Справочник1";
		
		
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Справочник1",ИмяСпр);	
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбъектСпр = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Попытка
				ОбъектСпр.Удалить();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;	 
	
КонецФункции

&НаСервере
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
	
КонецФункции


&НаКлиенте
Функция ЕслиНаЭкранеДиалогМодальныйДиалогТоНадоЕгоЗакрыть()
	
	Если НЕ КонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если КонтекстСохраняемый.ТестовоеПриложение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Нашли = Ложь;
	НужноеОкно = Неопределено;
	
	МодальныеОкна = Новый Массив;
	
	ОкнаПриложения = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	Для Каждого ОкноПриложения Из ОкнаПриложения Цикл
		Если Ванесса.ЭтоМодальныйДиалог(ОкноПриложения) Тогда
			МодальныеОкна.Добавить(ОкноПриложения);
		КонецЕсли;	 
	КонецЦикла;	
	
	Если МодальныеОкна.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	Для Каждого НужноеОкно Из МодальныеОкна Цикл
		МассивКнопок = НужноеОкно.НайтиОбъекты(Тип("ТестируемаяКнопкаФормы"));
		
		Попытка
			Для Каждого Кнопка Из МассивКнопок Цикл
				Если НРег(Кнопка.ТекстЗаголовка) = "нет" Тогда
					Кнопка.Нажать();
					ЗаписатьВЖурналРегистрацииСообщениеОЗакрытииОкна(НужноеОкно.Заголовок);
					Прервать;
				ИначеЕсли НРег(Кнопка.ТекстЗаголовка) = "no" Тогда
					Кнопка.Нажать();
					ЗаписатьВЖурналРегистрацииСообщениеОЗакрытииОкна(НужноеОкно.Заголовок);
					Прервать;
				ИначеЕсли НРег(Кнопка.ТекстЗаголовка) = "отмена" Тогда
					Кнопка.Нажать();
					ЗаписатьВЖурналРегистрацииСообщениеОЗакрытииОкна(НужноеОкно.Заголовок);
					Прервать;
				ИначеЕсли ВРег(Кнопка.ТекстЗаголовка) = "OK" Тогда
					Кнопка.Нажать();
					ЗаписатьВЖурналРегистрацииСообщениеОЗакрытииОкна(НужноеОкно.Заголовок);
					Прервать;
				ИначеЕсли НРег(Кнопка.ТекстЗаголовка) = "закрыть" Тогда
					//для форм БСП
					Кнопка.Нажать();
					ЗаписатьВЖурналРегистрацииСообщениеОЗакрытииОкна(НужноеОкно.Заголовок);
					Прервать;
				ИначеЕсли НРег(Кнопка.ТекстЗаголовка) = "закрыть форму" Тогда
					Кнопка.Нажать();
					ЗаписатьВЖурналРегистрацииСообщениеОЗакрытииОкна(НужноеОкно.Заголовок);
					Прервать;
				ИначеЕсли НРег(Кнопка.ТекстЗаголовка) = "close the form" Тогда
					Кнопка.Нажать();
					ЗаписатьВЖурналРегистрацииСообщениеОЗакрытииОкна(НужноеОкно.Заголовок);
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		Исключение
		КонецПопытки;
		
	КонецЦикла;	
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьВЖурналРегистрацииСообщениеОЗакрытииОкна(ЗаголовокОкна)
	Ванесса.ЗаписатьЛогВЖРИнформация("ЗакрытиеОкна", ЗаголовокОкна);
КонецПроцедуры

&НаКлиенте
Функция НаЭкранеДиалогАвторизации()
	Возврат Ванесса.НаЭкранеДиалогАвторизации(); 
КонецФункции	

&НаКлиенте
Функция ЗаголовокиОконТиповыхКонфигурацийНРег()
	Массив = Новый Массив;
	Массив.Добавить(НРег(".:      Выберите операцию      :."));
	Возврат Массив;
КонецФункции	 

&НаКлиенте
//И я закрыл все окна клиентского приложения
//@ЯЗакрылВсеОкнаКлиентскогоПриложения()
Функция ЯЗакрылВсеОкнаКлиентскогоПриложения() Экспорт
	
	Ванесса.ЗакрытьОкнаКлиентскогоПриложения();
	
	Ванесса.ЗапретитьВыполнениеШагов();
	ПодключитьОбработчикОжидания("ЯЗакрылВсеОкнаКлиентскогоПриложенияПродолжение", 0.1, Истина);
	
КонецФункции    

&НаКлиенте
Процедура ЯЗакрылВсеОкнаКлиентскогоПриложенияПродолжение()
	
	Попытка
		ЕслиНаЭкранеДиалогМодальныйДиалогТоНадоЕгоЗакрыть();
	Исключение
	КонецПопытки;
	Ванесса.ПродолжитьВыполнениеШагов();
	
КонецПроцедуры

&НаКлиенте
//И я закрываю все окна клиентского приложения
//@ЯЗакрываюВсеОкнаКлиентскогоПриложения()
Функция ЯЗакрываюВсеОкнаКлиентскогоПриложения() Экспорт
	
	ЯЗакрылВсеОкнаКлиентскогоПриложения();
	
КонецФункции

&НаКлиенте
//И я закрыл все окна клиентского приложения кроме "Нужное окно"
//@ЯЗакрылВсеОкнаКлиентскогоПриложенияКроме(Парам01)
Функция ЯЗакрылВсеОкнаКлиентскогоПриложенияКроме(ЗаголовокОкна) Экспорт
	Если Не КонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если КонтекстСохраняемый.ТестовоеПриложение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Попытка
		ОкнаПриложения = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	НужноеОкно     = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"),ЗаголовокОкна);
	
	ЕслиНаЭкранеДиалогМодальныйДиалогТоНадоЕгоЗакрыть();//диалог мог остаться от предыдущего сценария
	
	Для каждого ОкноПриложение Из ОкнаПриложения Цикл
		Если ОкноПриложение.Основное Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если ОкноПриложение.НачальнаяСтраница Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если НужноеОкно <> Неопределено Тогда
			Если НРег(ОкноПриложение.Заголовок) = НРег(НужноеОкно.Заголовок) Тогда
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Попытка
			ТекЗаголовок = ОкноПриложение.Заголовок;
			ОкноПриложение.Закрыть();
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Закрыто окно <%1>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекЗаголовок); 
			Ванесса.ЗаписатьЛогВЖРИнформация("ЯЗакрылВсеОкнаКлиентскогоПриложенияКроме", ТекстСообщения);
			Ванесса.ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(ТекстСообщения);
		Исключение
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось закрыть окно <%1>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекЗаголовок); 
			Сообщить(Ванесса.ПолучитьТекстСообщенияПользователю(ТекстСообщения));
			Ванесса.ЗаписатьЛогВЖРИнформация("ЯЗакрылВсеОкнаКлиентскогоПриложенияКроме", ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		ЕслиНаЭкранеДиалогМодальныйДиалогТоНадоЕгоЗакрыть();//диалог мог появиться при закрытии окна.
		
	КонецЦикла;
	
	
КонецФункции

&НаКлиенте
//И я закрываю все окна клиентского приложения кроме "Нужное окно"
//@ЯЗакрываюВсеОкнаКлиентскогоПриложенияКроме(Парам01)
Функция ЯЗакрываюВсеОкнаКлиентскогоПриложенияКроме(ЗаголовокОкна) Экспорт
	
	ЯЗакрылВсеОкнаКлиентскогоПриложенияКроме(ЗаголовокОкна);
	
КонецФункции


&НаКлиенте
//Я нажимаю кнопку командного интерфейса "Основная"
//@ЯНажимаюКнопкуКомандногоИнтерфейса(Парам01)
Функция ЯНажимаюКнопкуКомандногоИнтерфейса(ИмяКнопки) Экспорт
	Если НЕ КонтекстСохраняемый.Свойство("ГлавноеОкноТестируемого") Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не подключен TestClient.");
	КонецЕсли;	 
	
	Если КонтекстСохраняемый.ГлавноеОкноТестируемого = Неопределено Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не подключен TestClient.");
	КонецЕсли;	 
	
	ОкноПриложенияОсновноеCommandInterface = КонтекстСохраняемый.ГлавноеОкноТестируемого.ПолучитьКомандныйИнтерфейс();
	//ОкноПриложенияОсновноеCommandInterface = КонтекстСохраняемый.ОкноПриложенияОсновноеCommandInterface;
	КнопкаКомандногоИнтерфейса = ОкноПриложенияОсновноеCommandInterface.НайтиОбъект(Тип("ТестируемаяКнопкаКомандногоИнтерфейса"), ИмяКнопки,,5);
	Если КнопкаКомандногоИнтерфейса = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка/команда с заголовком <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКнопки); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	
	КнопкаКомандногоИнтерфейса.Нажать();
	Ванесса.ОбработатьСменуАктивногоОкна();
КонецФункции



&НаКлиенте
//открылось окно "Справочник1"
//@ОткрылосьОкно(Парам01)
Функция ОткрылосьОкно(Знач ИмяОкна,ЧастьИмени2 = Неопределено
	                           ,ЧастьИмени3 = Неопределено
	                           ,ЧастьИмени4 = Неопределено
	                           ,ЧастьИмени5 = Неопределено
	                           ,ЧастьИмени6 = Неопределено
	                           ,ЧастьИмени7 = Неопределено) Экспорт
							   
							   
	ПереданМассивОкон = Ложь;
	Если ТипЗнч(ИмяОкна) = Тип("Массив") Тогда
		ПереданМассивОкон = Истина;
		ПереданныеОкна = Новый Массив;
		Для Каждого Элем Из ИмяОкна Цикл
			ПереданныеОкна.Добавить(Элем.Кол1);
		КонецЦикла;	 
	Иначе	
		Ванесса.СоединитьСтрокиЕслиЭтоВозможно(ИмяОкна,ЧастьИмени2,
	                                       ЧастьИмени3,
	                                       ЧастьИмени4,
	                                       ЧастьИмени5,
	                                       ЧастьИмени6,
	                                       ЧастьИмени7);							   
	КонецЕсли;	 							   
										   
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	Если Не КонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не подключен TestClient.");
	КонецЕсли;	
	
	Если КонтекстСохраняемый.ТестовоеПриложение = Неопределено Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не подключен TestClient.");
	КонецЕсли;	 
	
	ДанныеШагаСценария = Ванесса.ДанныеШагаСценария();
	ЭтоОбычныйШагОбернутыйВУсловие = Ложь;
	Если ДанныеШагаСценария.Свойство("ЭтоОбычныйШагОбернутыйВУсловие") Тогда
		ЭтоОбычныйШагОбернутыйВУсловие = ДанныеШагаСценария.ЭтоОбычныйШагОбернутыйВУсловие;
	КонецЕсли;	
	
	ТекДата = ТекущаяДата();
	Если ЭтоОбычныйШагОбернутыйВУсловие Тогда
		//Когда шаг обернут в условие не надо ждать полный таймаут.
		МаксДата = ТекДата + Мин(Макс(Ванесса.ЗначениеКоличествоСекундПоискаОкна(), 1), 10);
	Иначе	
		МаксДата = ТекДата + Макс(Ванесса.ЗначениеКоличествоСекундПоискаОкна(), 1);
	КонецЕсли;	
	
	ТекстСообщения = ""; 
	БылаХотябыОднаИтерация = Ложь;
	
	Если ПереданМассивОкон Тогда
		НужноеОкноНайдено = Ложь;
		АктивноеОкно = Неопределено;
		Пока Истина Цикл
			
			Если ТекущаяДата() > МаксДата И БылаХотябыОднаИтерация Тогда
				Прервать;
			КонецЕсли;	
			
			Если Ванесса.ВыполнениеСценариевБудетОстановлено() Тогда
				Возврат Неопределено;
			КонецЕсли;	
			
			БылаХотябыОднаИтерация = Истина;
			
			Попытка
				Таймаут = 1;
				
				КоличествоПопытокПолученияОкнаИзПриложения = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
				ПолучилосьПолучитьАктивноеОкно             = Ложь;
				Для Ккк = 1 По КоличествоПопытокПолученияОкнаИзПриложения Цикл
					Попытка
						АктивноеОкно                   = КонтекстСохраняемый.ТестовоеПриложение.ПолучитьАктивноеОкно();
						ПолучилосьПолучитьАктивноеОкно = Истина;
						Прервать;
					Исключение
						Ванесса.sleep(1);
					КонецПопытки;
				КонецЦикла;	
				
				Если Не ПолучилосьПолучитьАктивноеОкно Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось определить активное окно TestClient.");
					Ванесса.ЗаписатьЛогВЖРИнформация("ПроверкаАктивногоОкна.1", ТекстСообщения);
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				Заголовок = АктивноеОкно.Заголовок;
				НужноеОкноНайдено = Ложь;
				Для Каждого ТекИмяОкна Из ПереданныеОкна Цикл
					Если Ванесса.СтрокаСоответствуетШаблону(Заголовок,ТекИмяОкна) Тогда
						НужноеОкноНайдено = Истина;
						Прервать;
					КонецЕсли;	 
				КонецЦикла;	 
				
				Если НЕ НужноеОкноНайдено Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что активным окном будет окно из списка <%1>, а нашли <%2>. Таймаут поиска окна: %3");
					
					ИмяОкнаСтрока = "";
					Для Каждого ТекИмяОкна Из ПереданныеОкна Цикл
						ИмяОкнаСтрока = ИмяОкнаСтрока + ТекИмяОкна + ";";
					КонецЦикла;	 
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяОкнаСтрока);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",АктивноеОкно.Заголовок);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Ванесса.ЗначениеКоличествоСекундПоискаОкна());
					Ванесса.ЗаписатьЛогВЖРИнформация("ПроверкаАктивногоОкна.2", ТекстСообщения);
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				Прервать;
			Исключение
				Ванесса.sleep(1);
			КонецПопытки;
		КонецЦикла;	
		
		Если Не НужноеОкноНайдено Тогда
			Если НЕ ЗначениеЗаполнено(ТекстСообщения) Тогда
				ТекстСообщения = ОписаниеОшибки();
			КонецЕсли;	 
			Ванесса.ЗаписатьЛогВЖРИнформация("ПроверкаАктивногоОкна.3", ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		Ванесса.ЗапомнитьАктивноеОкно(АктивноеОкно);
	ИначеЕсли Ванесса.ЭтоЗаголовокОкнаМодальногоДиалога(ИмяОкна)
		Или НРег(ИмяОкна) = "выбор типа данных"									   
		Или НРег(ИмяОкна) = "выберите период"									   
		Или НРег(ИмяОкна) = "найти"
		Тогда
		
		Пока Истина Цикл
			
			Если ТекущаяДата() > МаксДата И БылаХотябыОднаИтерация Тогда
				Прервать;
			КонецЕсли;  
			
			Если Ванесса.ВыполнениеСценариевБудетОстановлено() Тогда
				Возврат Неопределено;
			КонецЕсли;	
			
			БылаХотябыОднаИтерация = Истина;
			
			АктивноеОкно = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), ИмяОкна,,1);
			Если АктивноеОкно = Неопределено Тогда
				Ванесса.sleep(1);
			Иначе
				Прервать;
			КонецЕсли;	 
		КонецЦикла;
		
		Если АктивноеОкно = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Окно с заголовком <%1> не найдено.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяОкна);
			Ванесса.ЗаписатьЛогВЖРИнформация("ПроверкаАктивногоОкна.4", ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		Ванесса.ЗапомнитьАктивноеОкно(АктивноеОкно);
	Иначе	
		
		НужноеОкноНайдено = Ложь;
		Пока Истина Цикл
			Попытка 
				
				Если ТекущаяДата() > МаксДата И БылаХотябыОднаИтерация Тогда
					Прервать;
				КонецЕсли; 
				
				Если Ванесса.ВыполнениеСценариевБудетОстановлено() Тогда
					Возврат Неопределено;
				КонецЕсли;	
				
				БылаХотябыОднаИтерация = Истина;
				
				Таймаут       = 1;
				
				АктивноеОкно2 = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), ИмяОкна, , Таймаут);
				
				Если АктивноеОкно2 = Неопределено Тогда
					Попытка
						ТекОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
						ЗаголовокАктивногоОкна = ТекОкно.Заголовок;
					Исключение
						ЗаголовокАктивногоОкна = "";
					КонецПопытки;
					
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Окно с заголовком <%1> не найдено. Таймаут поиска окна: <%2>. Заголовок активного окна: <%3>.");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяОкна);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Ванесса.ЗначениеКоличествоСекундПоискаОкна());
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ЗаголовокАктивногоОкна);
					Ванесса.ЗаписатьЛогВЖРИнформация("ПроверкаАктивногоОкна.5", ТекстСообщения);
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				КоличествоПопытокПолученияОкнаИзПриложения = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
				ПолучилосьПолучитьАктивноеОкно             = Ложь;
				Для Ккк = 1 По КоличествоПопытокПолученияОкнаИзПриложения Цикл
					Попытка
						АктивноеОкно                   = КонтекстСохраняемый.ТестовоеПриложение.ПолучитьАктивноеОкно();
						ПолучилосьПолучитьАктивноеОкно = Истина;
						Прервать;
					Исключение
						Ванесса.sleep(1);
					КонецПопытки;
				КонецЦикла;	
				
				Если Не ПолучилосьПолучитьАктивноеОкно Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось определить активное окно TestClient.");
					Ванесса.ЗаписатьЛогВЖРИнформация("ПроверкаАктивногоОкна.6", ТекстСообщения);
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				ЭтоМодальныйДиалогПлатформы = Ложь;
				ФормаСПустымИменем = АктивноеОкно2.НайтиОбъект(Тип("ТестируемаяФорма"),,Неопределено);
				Если ФормаСПустымИменем <> Неопределено Тогда
					Если СокрЛП(ФормаСПустымИменем.ИмяФормы) = "" Тогда
						ЭтоМодальныйДиалогПлатформы = Истина;
					КонецЕсли;	 
				КонецЕсли;	 
				
				Если Не ЭтоМодальныйДиалогПлатформы Тогда
					Если АктивноеОкно.Заголовок <> АктивноеОкно2.Заголовок Тогда
						ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что активным окном будет <%1>, а нашли <%2>. Таймаут поиска окна: %3");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяОкна);
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",АктивноеОкно.Заголовок);
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Ванесса.ЗначениеКоличествоСекундПоискаОкна());
						Ванесса.ЗаписатьЛогВЖРИнформация("ПроверкаАктивногоОкна.7", ТекстСообщения);
						ВызватьИсключение ТекстСообщения;
					КонецЕсли;	 
				КонецЕсли;	 
				
				НужноеОкноНайдено = Истина;
				Прервать;
			Исключение
				Ванесса.sleep(1);
			КонецПопытки;
		КонецЦикла;	
		
		Если Не НужноеОкноНайдено Тогда
			Если НЕ ЗначениеЗаполнено(ТекстСообщения) Тогда
				ТекстСообщения = ОписаниеОшибки();
			КонецЕсли;	 
			
			Попытка
				ДанныеДляАктуализации = Новый Структура;
				ДанныеДляАктуализации.Вставить("ОжидаемоеЗначение", ИмяОкна);
				ТекОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
				ЗаголовокАктивногоОкна = ТекОкно.Заголовок;
				ДанныеДляАктуализации.Вставить("ТекущееЗначение", ЗаголовокАктивногоОкна);
				Ванесса.УстановитьДанныеДляАктуализации(ДанныеДляАктуализации);
			Исключение
			КонецПопытки;
			
			Если Не ЗначениеЗаполнено(ТекстСообщения) Тогда
				Попытка
					ТекОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
					ЗаголовокАктивногоОкна = ТекОкно.Заголовок;
				Исключение
					ЗаголовокАктивногоОкна = "";
				КонецПопытки;
					
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Окно с заголовком <%1> не найдено. Таймаут поиска окна: <%2>. Заголовок активного окна: <%3>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяОкна);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Ванесса.ЗначениеКоличествоСекундПоискаОкна());
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ЗаголовокАктивногоОкна);
			КонецЕсли;	 
			
			Попытка
				
				ТекОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
				ЗаголовокАктивногоОкна = ТекОкно.Заголовок;
				ТекстСообщения = Ванесса.ДобавитьСтрокуВозможногоШаблона(ТекстСообщения, ЗаголовокАктивногоОкна, ИмяОкна);

			Исключение
			КонецПопытки;
			
			Ванесса.ЗаписатьЛогВЖРИнформация("ПроверкаАктивногоОкна.8", ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		Ванесса.ЗапомнитьАктивноеОкно(АктивноеОкно2);
	КонецЕсли;
	
	Если Ванесса.ЗначениеПаузаПриОткрытииОкна() > 0 Тогда
		//чтобы сработали оповещения форм
		Ванесса.Sleep(Ванесса.ЗначениеПаузаПриОткрытииОкна());
	КонецЕсли;
	
	Ванесса.ОтключитьДляПолейВозможностьЗатиранияТекстаПриЗавершенииСерверногоВызоваПриОткрытииОкна(ИмяОкна);
	
КонецФункции


&НаКлиенте
//И я активизирую окно "Справочник1"
//@ЯАктивизируюОкно(Парам01)
Функция ЯАктивизируюОкно(Знач ИмяОкна,ЧастьИмени2 = Неопределено
	                           ,ЧастьИмени3 = Неопределено
	                           ,ЧастьИмени4 = Неопределено
	                           ,ЧастьИмени5 = Неопределено
	                           ,ЧастьИмени6 = Неопределено
	                           ,ЧастьИмени7 = Неопределено) Экспорт
							   
							   
	Ванесса.ОбработатьСменуАктивногоОкна();
	Ванесса.СоединитьСтрокиЕслиЭтоВозможно(ИмяОкна,ЧастьИмени2,
	                                       ЧастьИмени3,
	                                       ЧастьИмени4,
	                                       ЧастьИмени5,
	                                       ЧастьИмени6,
	                                       ЧастьИмени7);							   
										   
										   
	СтрокаОшибки = "";
	БылаОшибка = Ложь;
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
		
		Попытка
			АктивноеОкно = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), ИмяОкна);
			Если АктивноеОкно = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Окно с заголовком <%1> не найдено.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяОкна);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Прервать;
			
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;

	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
	
	Ванесса.ЗапомнитьАктивноеОкно(АктивноеОкно);
	АктивноеОкно.Активизировать();
КонецФункции

&НаКлиенте
//И я активизирую форму "ИмяФормы"
//@ЯАктивизируюФорму(Парам01)
Функция ЯАктивизируюФорму(ИмяФормы, ИскатьПоИмени = Ложь) Экспорт
	БылиОшибки = Истина;
	
	ОкнаКлиентаТестирования = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	Для Каждого ТекОкно Из ОкнаКлиентаТестирования Цикл
		Если ИскатьПоИмени Тогда
			ТекФорма = ТекОкно.НайтиОбъект(Тип("ТестируемаяФорма"),, ИмяФормы);
		Иначе	
			ТекФорма = ТекОкно.НайтиОбъект(Тип("ТестируемаяФорма"), ИмяФормы);
		КонецЕсли;	 
		
		Если ТекФорма <> Неопределено Тогда
			Ванесса.ЗапомнитьАктивноеОкно(ТекОкно);
			ТекОкно.Активизировать();
			БылиОшибки = Ложь;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если БылиОшибки Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось найти окно, содержащее форму <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяФормы);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И я активизирую форму с именем "ИмяФормы"
//@ЯАктивизируюФормуСИменем(Парам01)
Функция ЯАктивизируюФормуСИменем(ИмяФормы) Экспорт
	ЯАктивизируюФорму(ИмяФормы, Истина);
КонецФункции

&НаКлиенте
//Тогда открылась форма "Справочник.Справочник1.Форма.ФормаЭлемента"
//@ОткрыласьФорма(Парам01)
Функция ОткрыласьФорма(Знач ИмяФормыTestClient,ИскатьПоИмени = Ложь) Экспорт
							   
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	ПереданМассивФорм = Ложь;
	Если ТипЗнч(ИмяФормыTestClient) = Тип("Массив") Тогда
		ПереданМассивФорм = Истина;
		ПереданныеФормы = Новый Массив;
		Для Каждого Элем Из ИмяФормыTestClient Цикл
			ПереданныеФормы.Добавить(Элем.Кол1);
		КонецЦикла;	 
	КонецЕсли;	 							   
	
	Если Не КонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не подключен TestClient.");
	КонецЕсли;	 
	
	БылаОшибка = Ложь;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоСекундПоискаОкна();
	
	ДанныеШагаСценария = Ванесса.ДанныеШагаСценария();
	ЭтоОбычныйШагОбернутыйВУсловие = Ложь;
	Если ДанныеШагаСценария.Свойство("ЭтоОбычныйШагОбернутыйВУсловие") Тогда
		ЭтоОбычныйШагОбернутыйВУсловие = ДанныеШагаСценария.ЭтоОбычныйШагОбернутыйВУсловие;
	КонецЕсли;	
	
	Если ЭтоОбычныйШагОбернутыйВУсловие Тогда
		Если КоличествоПопыток > 5 Тогда
			КоличествоПопыток = 5;
		КонецЕсли;	
	КонецЕсли;	
	
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		ТекстСообщения = "";
		БылаОшибка = Ложь;
		Попытка
			
			АктивноеОкно = КонтекстСохраняемый.ТестовоеПриложение.ПолучитьАктивноеОкно();
			Если АктивноеОкно = Неопределено Тогда
				ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не обнаружено активное окно.");
			КонецЕсли;	 
			
			НужнаяФорма = Неопределено;
			Если ПереданМассивФорм Тогда
				Для Каждого ТекИмяФормы Из ПереданныеФормы Цикл
					Если НЕ ИскатьПоИмени Тогда
						НужнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"), ТекИмяФормы, , );
					Иначе	
						НужнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"), , ТекИмяФормы, );
					КонецЕсли;
					
					Если НужнаяФорма <> Неопределено Тогда
						Прервать;
					КонецЕсли;	 
				КонецЦикла;	 
			Иначе
				Если НЕ ИскатьПоИмени Тогда
					НужнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"), ИмяФормыTestClient, , );
				Иначе	
					НужнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"), , ИмяФормыTestClient, );
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если НужнаяФорма = Неопределено Тогда
				Если ПереданМассивФорм Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Форма из переданного списка не найдена.");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФормыTestClient);
					ВызватьИсключение ТекстСообщения;
				Иначе	
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Форма <%1> не найдена.");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФормыTestClient);
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
			КонецЕсли;
			
			Прервать;
			
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;			
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции


&НаКлиенте
//Тогда открылась форма с именем "Справочник.Справочник1.Форма.ФормаЭлемента"
//@ОткрыласьФормаСИменем(Парам01)
Функция ОткрыласьФормаСИменем(Знач ИмяФормыTestClient) Экспорт
	ОткрыласьФорма(ИмяФормыTestClient,Истина);
КонецФункции




&НаКлиенте
Функция ЯЖдуЗакрытияОкнаВТеченииСекундОбработчикОжидания()
	ИмяОбработчика = "ЯЖдуЗакрытияОкнаВТеченииСекундОбработчикОжидания";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	Попытка
		НужноеОкно = Ванесса.НайтиОкноTestClientПоЗаголовку(ЗначениеОбрабткаОжидания);
		
		Если НужноеОкно = Неопределено Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчика);
			Ванесса.ЗапомнитьАктивноеОкно(Неопределено);
			Ванесса.ПродолжитьВыполнениеШагов();
			Возврат Неопределено;
		КонецЕсли;	 
	Исключение
	КонецПопытки;
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд, что закроется окно с заголовком <%2>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ЗначениеОбрабткаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И я жду закрытия окна "Имя окна" в течении 60 секунд
//@ЯЖдуЗакрытияОкнаВТеченииСекунд(Парам01,Парам02)
Функция ЯЖдуЗакрытияОкнаВТеченииСекунд(ИмяОкна,КоличествоСекунд) Экспорт
	Попытка
		НужноеОкно = Ванесса.НайтиОкноTestClientПоЗаголовку(ИмяОкна);
		Если НужноеОкно = Неопределено Тогда
			Ванесса.ЗапомнитьАктивноеОкно(Неопределено);
			Возврат Неопределено;
		КонецЕсли;	 
	Исключение
		//значит будет подключен таймер
	КонецПопытки;
	
	Ванесса.ЗапретитьВыполнениеШагов();
	
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ЗначениеОбрабткаОжидания          = ИмяОкна;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ЯЖдуЗакрытияОкнаВТеченииСекундОбработчикОжидания",1,Ложь);
КонецФункции

&НаКлиенте
//И я жду закрытия окна "Имя окна" в течение 60 секунд
//@ЯЖдуЗакрытияОкнаВТечениеСекунд(Парам01,Парам02)
Функция ЯЖдуЗакрытияОкнаВТечениеСекунд(ИмяОкна,КоличествоСекунд) Экспорт
	ЯЖдуЗакрытияОкнаВТеченииСекунд(ИмяОкна,КоличествоСекунд);
КонецФункции







&НаКлиенте
Функция ЯЖдуОткрытияОкнаВТеченииСекундОбработчикОжидания()
	ИмяОбработчика = "ЯЖдуОткрытияОкнаВТеченииСекундОбработчикОжидания";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	Попытка
		НужноеОкно = Ванесса.НайтиОкноTestClientПоЗаголовку(ЗначениеОбрабткаОжидания);
	Исключение
		НужноеОкно = Неопределено;
	КонецПопытки;
	
	Если НужноеОкно <> Неопределено Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Если Ванесса.ЗначениеПаузаПриОткрытииОкна() > 0 Тогда
			//чтобы сработали оповещения форм
			Ванесса.Sleep(Ванесса.ЗначениеПаузаПриОткрытииОкна());
		КонецЕсли;	 
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		Попытка
			АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
			ЗаголовокТекущегоОкна = АктивноеОкно.Заголовок;
		Исключение
			ЗаголовокТекущегоОкна = "";
		КонецПопытки;
		
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд, что откроется окно с заголовком <%2>. Текущее окно <%3>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ЗначениеОбрабткаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ЗаголовокТекущегоОкна);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И я жду открытия окна "Имя окна" в течении 60 секунд
//@ЯЖдуОткрытияОкнаВТеченииСекунд(Парам01,Парам02)
Функция ЯЖдуОткрытияОкнаВТеченииСекунд(ИмяОкна,КоличествоСекунд) Экспорт
	Попытка
		НужноеОкно = Ванесса.НайтиОкноTestClientПоЗаголовку(ИмяОкна);
	Исключение
		НужноеОкно = Неопределено;
	КонецПопытки;
	
	Если НужноеОкно <> Неопределено Тогда
		Ванесса.ОбработатьСменуАктивногоОкна();
		Возврат Неопределено;
	КонецЕсли;	 
	
	
	Ванесса.ЗапретитьВыполнениеШагов();
	Ванесса.ОбработатьСменуАктивногоОкна();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ЗначениеОбрабткаОжидания          = ИмяОкна;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ЯЖдуОткрытияОкнаВТеченииСекундОбработчикОжидания",1,Ложь);
КонецФункции

&НаКлиенте
//И я жду открытия окна "Имя окна" в течение 60 секунд
//@ЯЖдуОткрытияОкнаВТечениеСекунд(Парам01,Парам02)
Функция ЯЖдуОткрытияОкнаВТечениеСекунд(ИмяОкна,КоличествоСекунд) Экспорт
	ЯЖдуОткрытияОкнаВТеченииСекунд(ИмяОкна,КоличествоСекунд);
КонецФункции

&НаКлиенте
//И я жду, что активным окном станет "Заголовок окна" в течение 10 секунд
//@ЯЖдуЧтоАктивнымОкномСтанетВТечениеСекунд(Парам01,Парам02)
Функция ЯЖдуЧтоАктивнымОкномСтанетВТечениеСекунд(ИмяОкна, КоличествоСекунд) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	Ванесса.ОбработатьСменуАктивногоОкна();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ЗначениеОбрабткаОжидания          = ИмяОкна;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ЯЖдуЧтоАктивнымОкномСтанетВТечениеСекундОбработчикОжидания",1,Ложь);
КонецФункции

&НаКлиенте
Функция ЯЖдуЧтоАктивнымОкномСтанетВТечениеСекундОбработчикОжидания()
	ИмяОбработчика = "ЯЖдуЧтоАктивнымОкномСтанетВТечениеСекундОбработчикОжидания";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось в течение <%1> секунд, что активным окном будет окно с заголовком <%2>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ЗначениеОбрабткаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;	 
	
	Попытка
		АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	Исключение
		АктивноеОкно = Неопределено;
	КонецПопытки;
	
	Если АктивноеОкно <> Неопределено Тогда
		Если АктивноеОкно.Заголовок = ЗначениеОбрабткаОжидания Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчика);
			Если Ванесса.ЗначениеПаузаПриОткрытииОкна() > 0 Тогда
				//чтобы сработали оповещения форм
				Ванесса.Sleep(Ванесса.ЗначениеПаузаПриОткрытииОкна());
			КонецЕсли;	 
			Ванесса.ПродолжитьВыполнениеШагов();
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
Функция ЯЖдуОткрытияОкнаОтличногоОтВТечениеСекундОбработчикОжидания()
	ИмяОбработчика = "ЯЖдуОткрытияОкнаОтличногоОтВТечениеСекундОбработчикОжидания";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось в течение <%1> секунд, что откроется окно с заголовком отличным от <%2>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ЗначениеОбрабткаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;	 
	
	Попытка
		АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	Исключение
		АктивноеОкно = Неопределено;
	КонецПопытки;
	
	Если АктивноеОкно <> Неопределено Тогда
		Если АктивноеОкно.Заголовок <> ЗначениеОбрабткаОжидания Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчика);
			Если Ванесса.ЗначениеПаузаПриОткрытииОкна() > 0 Тогда
				//чтобы сработали оповещения форм
				Ванесса.Sleep(Ванесса.ЗначениеПаузаПриОткрытииОкна());
			КонецЕсли;	 
			Ванесса.ПродолжитьВыполнениеШагов();
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И я жду открытия окна отличного от "Имя окна" в течение 60 секунд
//@ЯЖдуОткрытияОкнаОтличногоОтВТечениеСекунд(Парам01,Парам02)
Функция ЯЖдуОткрытияОкнаОтличногоОтВТечениеСекунд(ИмяОкна,КоличествоСекунд) Экспорт
	//АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	//Если АктивноеОкно <> Неопределено Тогда
	//	Если АктивноеОкно.Заголовок <> ИмяОкна Тогда
	//		Ванесса.ОбработатьСменуАктивногоОкна();
	//		Возврат Неопределено;
	//	КонецЕсли;	 
	//КонецЕсли;	 
	
	Ванесса.ЗапретитьВыполнениеШагов();
	Ванесса.ОбработатьСменуАктивногоОкна();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ЗначениеОбрабткаОжидания          = ИмяОкна;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ЯЖдуОткрытияОкнаОтличногоОтВТечениеСекундОбработчикОжидания",1,Ложь);
КонецФункции


&НаКлиенте
Функция СделатьПереход(ТаблицаСписок,ОписаниеСтроки,ОшибкаПереходВниз,ОшибкаПереходВверх,ПереключитьВыделение = Ложь, ЗаданноеНаправление = Неопределено)
	Возврат Ванесса.СделатьПереход(ТаблицаСписок,ОписаниеСтроки,ОшибкаПереходВниз,ОшибкаПереходВверх,ПереключитьВыделение, ЗаданноеНаправление);
КонецФункции	

&НаКлиенте
Функция ПривестиСтрокиКОднойДлине(ИмяКолонки,ЗначениеКолонки)
	Пока СтрДлина(ИмяКолонки) > СтрДлина(ЗначениеКолонки) Цикл
		ЗначениеКолонки = ЗначениеКолонки + " ";
	КонецЦикла;	
	Пока СтрДлина(ИмяКолонки) < СтрДлина(ЗначениеКолонки) Цикл
		ИмяКолонки = ИмяКолонки + " ";
	КонецЦикла;	
КонецФункции

&НаКлиенте
Функция ПолучитьОшибкаНетКолонок(ИмяТЧ,ТабПарам)
	Стр = "Не найдены колонки: ";
	
	Попытка
		Таблица = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	Исключение
		Возврат ""; 
	КонецПопытки;
	
	Попытка
		КолонкиТаблицы = Таблица.НайтиОбъекты();
	Исключение
		Возврат ""; 
	КонецПопытки;
	
	МассивЗаголовков = Новый Массив;
	Для Каждого Элем Из КолонкиТаблицы Цикл
		МассивЗаголовков.Добавить(Элем.ТекстЗаголовка);
	КонецЦикла;	
	
	БылиОшибки = Ложь;
	
	Для Каждого Элем Из ТабПарам[0] Цикл
		ИскомыйЗаголовокТаблицы = Элем.Значение;
		ИскомыйЗаголовокТаблицы = СтрЗаменить(ИскомыйЗаголовокТаблицы,"\n"," ");
		Если МассивЗаголовков.Найти(ИскомыйЗаголовокТаблицы) = Неопределено Тогда
			Стр = Стр + ИскомыйЗаголовокТаблицы + ", ";
			БылиОшибки = Истина;
		КонецЕсли;	 
	КонецЦикла;		
	
	Если Не БылиОшибки Тогда
		Возврат "";
	КонецЕсли;	 
	
	Если Прав(Стр,2) = ", " Тогда
		Стр = Лев(Стр,СтрДлина(Стр)-2);
	КонецЕсли;	 
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Функция ПолучитьОшибкуПерехода(ИмяТЧ,ОшибкаПереходВниз,ОшибкаПереходВверх,ТабПарам)
	ОшибкаНетКолонок = ПолучитьОшибкаНетКолонок(ИмяТЧ,ТабПарам);
	
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не удалось перейти к нужной строке в таблице <%1>. %2");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОшибкаНетКолонок); 
	Стр = ТекстСообщения + Символы.ПС;
	
	СтрокаИмКолонки = "		| ";
	СтрокаЗначение  = "		| ";
	
	
	Колонки = ТабПарам[0];
	Для Каждого Элем Из Колонки Цикл
		ИмяКолонки      = "'" + Элем.Значение + "'";
		ЗначениеКолонки = "'" + ТабПарам[1][Элем.Ключ] + "'";
		
		ПривестиСтрокиКОднойДлине(ИмяКолонки,ЗначениеКолонки);
		
		СтрокаИмКолонки = СтрокаИмКолонки + ИмяКолонки      + " | ";
		СтрокаЗначение  = СтрокаЗначение  + ЗначениеКолонки + " | ";
	КонецЦикла;	
	
	Стр = Стр + СтрокаИмКолонки + Символы.ПС + СтрокаЗначение;
	
	Сообщить(Стр);
	Если ОшибкаПереходВниз <> "" Тогда
		Сообщить(ОшибкаПереходВниз);
	КонецЕсли;	 
	Если ОшибкаПереходВверх <> "" Тогда
		Сообщить(ОшибкаПереходВверх);
	КонецЕсли;	 
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Функция ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам,ИмяТаблицы = Неопределено,ДопПараметры = Неопределено)
	Возврат Ванесса.ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам,ИмяТаблицы,ДопПараметры);
КонецФункции	


&НаКлиенте
//В форме "Справочник1" в таблице "Список" я перехожу к строке с переключением выделения:
//@ВТаблицеЯПерехожуКСтрокеСПереключениемВыделения(Парам01,Парам02,ТабПарам)
Функция ВТаблицеЯПерехожуКСтрокеСПереключениемВыделения(ИмяТЧ,ТабПарам) Экспорт
	ВТаблицеЯПерехожуКСтроке(ИмяТЧ,ТабПарам,Истина);
КонецФункции

&НаКлиенте
//В форме "Справочник1" в таблице "Список" я перехожу к строке:
//@ВФормеВТаблицеЯПерехожуКСтроке(Парам01,Парам02,ТабПарам)
Функция ВФормеВТаблицеЯПерехожуКСтроке(ИмяФормы,ИмяТЧ,ТабПарам) Экспорт
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Должна передаваться таблица с двумя строками.");
	Ванесса.ПроверитьРавенство(ТабПарам.Количество(),2,ТекстСообщения);
	
	НужнаяФорма = НайтиФормуПоЗаголовку(ИмяФормы);
	
	Если НужнаяФорма = Неопределено Тогда
		Если НужнаяФорма = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Форма с заголовком <%1> не найдена.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФормы); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	ТаблицаСписок = Ванесса.НайтиТЧПоИмени(ИмяТЧ,НужнаяФорма);
	
	ТаблицаСписок.Активизировать();
	
	ОписаниеСтроки = ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам,ТаблицаСписок.Имя);
	
	ОшибкаПереходВниз  = "";
	ОшибкаПереходВверх = "";
	
	ПолучилосьПерейти = СделатьПереход(ТаблицаСписок,ОписаниеСтроки,ОшибкаПереходВниз,ОшибкаПереходВверх);
	Если НЕ ПолучилосьПерейти Тогда
		Попытка
			//Возможно, это  ошибка платформы. Такое бывает с таблицами значений в УФ. Смотри https://github.com/silverbulleters/vanessa-behavior/issues/342
			//Делаем обход проблемы
			ТаблицаСписок.ПерейтиКПервойСтроке();
			ПолучилосьПерейти = СделатьПереход(ТаблицаСписок,ОписаниеСтроки,ОшибкаПереходВниз,ОшибкаПереходВверх);
		Исключение
			Стр = ПолучитьОшибкуПерехода(ИмяТЧ,ОшибкаПереходВниз,ОшибкаПереходВверх,ТабПарам);
			ВызватьИсключение Стр;
		КонецПопытки;	
	КонецЕсли;	 
	
	
	Если НЕ ПолучилосьПерейти Тогда
		Стр = ПолучитьОшибкуПерехода(ИмяТЧ,ОшибкаПереходВниз,ОшибкаПереходВверх,ТабПарам);
		ВызватьИсключение Стр;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Функция ПерейтиКСтрокеТаблицы(ИмяТЧ, ОписаниеСтроки,ТабПарам) Экспорт
	
	ТаблицаСписок = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	ТаблицаСписок.Активизировать();
	
	ОшибкаПереходВниз  = "";
	ОшибкаПереходВверх = "";
		
	ПолучилосьПерейти = СделатьПереход(ТаблицаСписок,ОписаниеСтроки,ОшибкаПереходВниз,ОшибкаПереходВверх);
	Если НЕ ПолучилосьПерейти Тогда
		Попытка
			//Возможно, это  ошибка платформы. Такое бывает с таблицами значений в УФ. Смотри https://github.com/silverbulleters/vanessa-behavior/issues/342
			//Делаем обход проблемы
			ТаблицаСписок.ПерейтиКПервойСтроке();
			ПолучилосьПерейти = СделатьПереход(ТаблицаСписок,ОписаниеСтроки,ОшибкаПереходВниз,ОшибкаПереходВверх);
		Исключение
			Стр = ПолучитьОшибкуПерехода(ИмяТЧ,ОшибкаПереходВниз,ОшибкаПереходВверх,ТабПарам);
			ВызватьИсключение Стр;
		КонецПопытки;	
	КонецЕсли;	 
	
	
	Если НЕ ПолучилосьПерейти Тогда
		Стр = ПолучитьОшибкуПерехода(ИмяТЧ,ОшибкаПереходВниз,ОшибкаПереходВверх,ТабПарам);
		ВызватьИсключение Стр;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
//И в таблице "Таблица" я перехожу к строке содержащей подстроки
//@ВТаблицеЯПерехожуКСтрокеСодержащейПодстроки(Парам01,ТабПарам)
Функция ВТаблицеЯПерехожуКСтрокеСодержащейПодстроки(ИмяТЧ, ТабПарам,СравнениеПоШаблону = Ложь) Экспорт
	// Проверим корректность фильтра по значениям колонок.
	Ванесса.ПроверитьРавенство(ТабПарам.Количество(),2,"Должна передаваться таблица с двумя строками.");
	
	СтрокаОшибки = "";
	БылаОшибка = Ложь;
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			
			ТЧ                = Ванесса.НайтиТЧПоИмени(ИмяТЧ,,,,ДопПараметры);
			ТаблицаКлиентаТестирования = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ, ДопПараметры);
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("СравнениеПоШаблону",СравнениеПоШаблону);
			ДопПараметры.Вставить("ТаблицаКлиентаТестирования",ТаблицаКлиентаТестирования);
			ФильтрПоКолонкам  = ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам,,ДопПараметры);
			
			// Проверим, что все указанные в фильтре колонки существуют в таблице.
			Если ТаблицаКлиентаТестирования.Количество() > 0 Тогда
				ОписаниеСтроки = ТаблицаКлиентаТестирования[0];
				
				Для Каждого ЭлементФильтра Из ФильтрПоКолонкам Цикл
					Если ОписаниеСтроки[ЭлементФильтра.Ключ] = Неопределено Тогда
						ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> отсутствует колонка <%2>, указанная в параметрах.");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ЭлементФильтра.Ключ); 
						ВызватьИсключение ТекстСообщения;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			//Ванесса.ПосмотретьЗначение(ТаблицаКлиентаТестирования);
			
			// Переберем строки и найдем ту, которая полностью соответствует фильтру
			ОписаниеПодходящейСтроки = Неопределено;
			Для Каждого ЗначенияСтрокиТаблицы Из ТаблицаКлиентаТестирования Цикл
				ВсеЗначенияСовпали = Истина;
				Для Каждого ЭлементФильтра Из ФильтрПоКолонкам Цикл
					ЗначениеКолонкиTesClient = ЗначенияСтрокиТаблицы[ЭлементФильтра.Ключ];
					Если СравнениеПоШаблону Тогда
						Если НЕ Ванесса.СтрокаСоответствуетШаблону(ЗначениеКолонкиTesClient, ЭлементФильтра.Значение) Тогда
							ВсеЗначенияСовпали = Ложь;
						КонецЕсли;	 
					Иначе	
						Если ЗначениеКолонкиTesClient = Неопределено
							ИЛИ Найти(ЗначениеКолонкиTesClient, ЭлементФильтра.Значение) = 0 Тогда
							
							ВсеЗначенияСовпали = Ложь;
							Прервать;
						КонецЕсли;
					КонецЕсли;	 
				КонецЦикла;
				
				Если ВсеЗначенияСовпали Тогда
					ОписаниеПодходящейСтроки = Новый Соответствие;
					Для Каждого Элем Из ФильтрПоКолонкам Цикл
						ИмяКолонки = Элем.Ключ;
						ОписаниеПодходящейСтроки.Вставить(ИмяКолонки,ЗначенияСтрокиТаблицы[ИмяКолонки]);
					КонецЦикла;	 
					//ОписаниеПодходящейСтроки = ЗначенияСтрокиТаблицы;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ОписаниеПодходящейСтроки <> Неопределено Тогда
				ПерейтиКСтрокеТаблицы(ИмяТЧ, ОписаниеПодходящейСтроки,ТабПарам);
			Иначе
				ОшибкаПереходВниз  = "";
				ОшибкаПереходВверх = "";
				СтрокаОшибки = ПолучитьОшибкуПерехода(ИмяТЧ,ОшибкаПереходВниз,ОшибкаПереходВверх,ТабПарам);
				ВызватьИсключение СтрокаОшибки;
			КонецЕсли;
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		Иначе
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ДопПараметрыПереход = Новый Структура;
		Попытка
			ЗначениеТЧ = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ,ДопПараметрыПереход);
		Исключение
			ЗначениеТЧ = Неопределено;
		КонецПопытки;
		
		Если ЗначениеТЧ <> Неопределено Тогда
			МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
			Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,Ванесса.Локализовать("ТекущееЗначениеТаблицы"));
		КонецЕсли;	 
		
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И в таблице "Таблица" я перехожу к строке по шаблону
//@ВТаблицеЯПерехожуКСтрокеПоШаблону(Парам01,ТабПарам)
Функция ВТаблицеЯПерехожуКСтрокеПоШаблону(ИмяТЧ, ТабПарам) Экспорт
	ВТаблицеЯПерехожуКСтрокеСодержащейПодстроки(ИмяТЧ,ТабПарам,Истина);
КонецФункции

&НаКлиенте
//И в таблице "ИмяТаблицы" я перехожу к строке направление вверх
//@ВТаблицеЯПерехожуКСтрокеНаправлениеВверх(Парам01,ТабПарам)
Функция ВТаблицеЯПерехожуКСтрокеНаправлениеВверх(ИмяТЧ,ТабПарам) Экспорт
	ВТаблицеЯПерехожуКСтроке(ИмяТЧ,ТабПарам,,"Вверх")
КонецФункции

&НаКлиенте
//И в таблице "ИмяТаблицы" я перехожу к строке направление вниз
//@ВТаблицеЯПерехожуКСтрокеНаправлениеВниз(Парам01,ТабПарам)
Функция ВТаблицеЯПерехожуКСтрокеНаправлениеВниз(ИмяТЧ,ТабПарам) Экспорт
	ВТаблицеЯПерехожуКСтроке(ИмяТЧ,ТабПарам,,"Вниз")
КонецФункции


&НаКлиенте
//В таблице "Список" я перехожу к строке:
//@ВТаблицеЯПерехожуКСтроке(Парам01,ТабПарам)
Функция ВТаблицеЯПерехожуКСтроке(ИмяТЧ,ТабПарам,ПереключитьВыделение = Ложь, ЗаданноеНаправление = Неопределено) Экспорт
	Если ТабПарам.Количество() <> 2 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Должна передаваться таблица с двумя строками.");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	//ДопПараметры надо создавать именно здесь, т.к. свойство "ПереводСтроки" потом будет переключаться
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ПереводСтроки", Истина);
	
	ОшибкаПереходВниз  = "";
	ОшибкаПереходВверх = "";
	БылаОшибка = Ложь;
	ПолучилосьПерейти = Ложь;
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		
		Попытка
			ДопПараметрыПоискаТаблицы = Новый Структура;
			ДопПараметрыПоискаТаблицы.Вставить("КоличествоПопыток", 1);
			ТаблицаСписок = Ванесса.НайтиТЧПоИмени(ИмяТЧ,,,,ДопПараметрыПоискаТаблицы);
			Если ИмяТЧ <> "" Тогда
				ТаблицаСписок.Активизировать();
			КонецЕсли;
			
			Ванесса.НайтиКолонкиТаблицыРегулярныеВыражения(ТабПарам, ТаблицаСписок);
			
			ДопПараметры.Вставить("Таблица", ТаблицаСписок);
			
			//Обязательно создание ОписаниеСтрокиОсновное в цикле, т.к. происходит переключение параметра "ПереводСтроки"
			ОписаниеСтрокиОсновное = ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам,ТаблицаСписок.Имя,ДопПараметры);
			
			ОшибкаПереходВниз  = "";
			ОшибкаПереходВверх = "";
			БылаОшибка = Ложь;
			ПолучилосьПерейти = Ложь;
			
			ПолучилосьПерейти = СделатьПереход(ТаблицаСписок,ОписаниеСтрокиОсновное,ОшибкаПереходВниз,ОшибкаПереходВверх,ПереключитьВыделение, ЗаданноеНаправление);
			Если НЕ ПолучилосьПерейти И НЕ ЗначениеЗаполнено(ЗаданноеНаправление) Тогда
				Попытка
					//Возможно, это  ошибка платформы. Такое бывает с таблицами значений в УФ. Смотри https://github.com/silverbulleters/vanessa-behavior/issues/342
					//Делаем обход проблемы
					ТаблицаСписок.ПерейтиКПервойСтроке();
					ПолучилосьПерейти = СделатьПереход(ТаблицаСписок,ОписаниеСтрокиОсновное,ОшибкаПереходВниз,ОшибкаПереходВверх,ПереключитьВыделение, ЗаданноеНаправление);
				Исключение
					Стр = ПолучитьОшибкуПерехода(ИмяТЧ,ОшибкаПереходВниз,ОшибкаПереходВверх,ТабПарам);
					ВызватьИсключение Стр;
				КонецПопытки;	
			КонецЕсли;	 
		Исключение
			БылаОшибка = Истина;
		КонецПопытки;
		
		Если БылаОшибка или (НЕ ПолучилосьПерейти) Тогда
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
			Продолжить;
		КонецЕсли;	 
		
		//значит получилось перейти к строке
		Прервать;
	КонецЦикла;	
	
	Если НЕ ПолучилосьПерейти Тогда
		ДопПараметры = Новый Структура;
		Попытка
			ЗначениеТЧ = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТаблицаСписок,ДопПараметры);
		Исключение
			ЗначениеТЧ = Неопределено;
		КонецПопытки;
		
		Если ЗначениеТЧ <> Неопределено Тогда
			МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
			Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,Ванесса.Локализовать("ТекущееЗначениеТаблицы"));
		КонецЕсли;	 
		
		Стр = ПолучитьОшибкуПерехода(ИмяТЧ,ОшибкаПереходВниз,ОшибкаПереходВверх,ТабПарам);
		
		МаксДата = ТекущаяДата() + 10;
		ТекстСообщения = "";
		КоличествоРешений = 0;
		Если ТабПарам[0].Количество() > 1 Тогда
			//попробуем найти проблемную колонку, если она одна
			Для Ккк = 1 По ТабПарам[0].Количество() Цикл
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("ИсключитьКолонку",Ккк);
				ОписаниеСтроки = ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам,ТаблицаСписок.Имя,ДопПараметры);
				
				ПолучилосьПерейти = СделатьПереход(ТаблицаСписок,ОписаниеСтроки,ОшибкаПереходВниз,ОшибкаПереходВверх,ПереключитьВыделение);
				Если НЕ ПолучилосьПерейти Тогда
					Попытка
						//Возможно, это  ошибка платформы. Такое бывает с таблицами значений в УФ. Смотри https://github.com/silverbulleters/vanessa-behavior/issues/342
						//Делаем обход проблемы
						ТаблицаСписок.ПерейтиКПервойСтроке();
						ПолучилосьПерейти = СделатьПереход(ТаблицаСписок,ОписаниеСтроки,ОшибкаПереходВниз,ОшибкаПереходВверх,ПереключитьВыделение);
					Исключение
						//значит эта не та комбинация колонок
					КонецПопытки;	
				КонецЕсли;	 
				
				Если ПолучилосьПерейти Тогда
					ИмяКолонки      = ТабПарам[0][Формат("Кол" + Ккк, "ЧГ=; ЧН=0")];
					ЗначениеКолонки = ТабПарам[1][Формат("Кол" + Ккк, "ЧГ=; ЧН=0")];
					ТекстСообщения  = Ванесса.ПолучитьТекстСообщенияПользователю("Не найдено значение <%1> из колонки <%2>.");
					ТекстСообщения  = СтрЗаменить(ТекстСообщения,"%1",ЗначениеКолонки); 
					ТекстСообщения  = СтрЗаменить(ТекстСообщения,"%2",ИмяКолонки); 
					КоличествоРешений = КоличествоРешений + 1;
					
					Если КоличествоРешений > 1 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ТекущаяДата() > МаксДата Тогда
					Прервать;
				КонецЕсли;	
				
			КонецЦикла;	
		КонецЕсли;	 
		
		Если КоличествоРешений = 1 Тогда
			Стр = Стр +Символы.ПС + ТекстСообщения;
		КонецЕсли;	 
		
		Ванесса.УстановитьЗначенияОписанияСтрокиПриПереходеКСтрокеТаблицы(ОписаниеСтрокиОсновное, ИмяТЧ);
		
		ВызватьИсключение Стр;
	КонецЕсли;
	
	Если Ванесса.ЭмуляцияДвиженияМышкиКомпонентаВБраузере() Тогда
		Ванесса.ВыполнитьJavaScriptБраузер("{
			|	if(!document.activeElement.className.includes('gridBody')) {
			|		let element = querySelectElem('.gridBox.select.focus');
			|		triggerMouseEvent(element, 'mousedown');
			|		triggerMouseEvent(element, 'mouseup');
			|	}
			|}");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
//В таблице "Список" я перехожу к первой строке
//@ВТаблицеЯПерехожуКПервойСтроке(Парам01)
Функция ВТаблицеЯПерехожуКПервойСтроке(ИмяТЧ) Экспорт
	Таблица = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	Таблица.Активизировать();
	Таблица.ПерейтиКПервойСтроке();
КонецФункции


&НаКлиенте
//В таблице "Список" я перехожу к последней строке
//@ВТаблицеЯПерехожуКПоследнейСтроке(Парам01)
Функция ВТаблицеЯПерехожуКПоследнейСтроке(ИмяТЧ) Экспорт
	Таблица = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	Таблица.Активизировать();
	Таблица.ПерейтиКПоследнейСтроке();
КонецФункции

&НаКлиенте
//В таблице "Список" я перехожу к предыдущей строке
//@ВТаблицеЯПерехожуКПредыдущейСтроке(Парам01)
Функция ВТаблицеЯПерехожуКПредыдущейСтроке(ИмяТЧ) Экспорт
	Таблица = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	Таблица.Активизировать();
	Таблица.ПерейтиКПредыдущейСтроке();
КонецФункции

&НаКлиенте
//В таблице "Список" я перехожу к следующей строке
//@ВТаблицеЯПерехожуКСледующейСтроке(Парам01)
Функция ВТаблицеЯПерехожуКСледующейСтроке(ИмяТЧ) Экспорт
	Таблица = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	Таблица.Активизировать();
	Таблица.ПерейтиКСледующейСтроке();
КонецФункции



&НаКлиенте
//В таблице "Список" я добавляю строку
//@ВТаблицеЯДобавляюСтроку(Парам01)
Функция ВТаблицеЯДобавляюСтроку(ИмяТЧ) Экспорт
	Таблица = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	Таблица.Активизировать();
	Таблица.ДобавитьСтроку();
КонецФункции

&НаКлиенте
//В таблице "Список" я удаляю строку
//@ВТаблицеЯУдаляюСтроку(Парам01)
Функция ВТаблицеЯУдаляюСтроку(ИмяТЧ) Экспорт
	Таблица = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	Таблица.Активизировать();
	Таблица.УдалитьСтроку();
КонецФункции


&НаКлиенте
//В таблице "Список" я копирую строку
//@ВТаблицеЯКопируюСтроку(Парам01)
Функция ВТаблицеЯКопируюСтроку(ИмяТЧ) Экспорт
	Таблица = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	Таблица.Активизировать();
	Таблица.СкопироватьСтроку();
КонецФункции







&НаКлиенте
//В форме "Справочник1" в таблице "Список" я разворачиваю строку:
//@ВФормеВТаблицеЯРазворачиваюСтроку(Парам01,Парам02,ТабПарам)
Функция ВФормеВТаблицеЯРазворачиваюСтроку(ИмяФормы,ИмяТЧ,ТабПарам) Экспорт
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Должна передаваться таблица с двумя строками.");
	Ванесса.ПроверитьРавенство(ТабПарам.Количество(),2,ТекстСообщения);
	
	
	ВФормеВТаблицеЯПерехожуКСтроке(ИмяФормы,ИмяТЧ,ТабПарам);
	
	НужнаяФорма = НайтиФормуПоЗаголовку(ИмяФормы);
	
	Если НужнаяФорма = Неопределено Тогда
		Если НужнаяФорма = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Форма с заголовком <%1> не найдена.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФормы); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	ТаблицаСписок = Ванесса.НайтиТЧПоИмени(ИмяТЧ,НужнаяФорма);
	
	ТаблицаСписок.Активизировать();
	
	ОписаниеСтроки = ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам);
	
	Если Не ТаблицаСписок.Развернут() Тогда
		ТаблицаСписок.Развернуть(ОписаниеСтроки);
	КонецЕсли;	 
	
КонецФункции



&НаКлиенте
//В таблице "Список" я разворачиваю строку:
//@ВТаблицеЯРазворачиваюСтроку(Парам01,Парам02,ТабПарам)
Функция ВТаблицеЯРазворачиваюСтроку(ИмяТЧ,ТабПарам,СПодчиненными = Ложь) Экспорт
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Должна передаваться таблица с двумя строками.");
	Ванесса.ПроверитьРавенство(ТабПарам.Количество(),2,ТекстСообщения);
	
	ВТаблицеЯПерехожуКСтроке(ИмяТЧ,ТабПарам);
	
	ТаблицаСписок = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	ТаблицаСписок.Активизировать();
	
	ОписаниеСтроки = ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам);
	
	Если НЕ ТаблицаСписок.Развернут() Тогда
		Если СПодчиненными Тогда
			ТаблицаСписок.Развернуть(ОписаниеСтроки, Истина);
		Иначе	
			ТаблицаСписок.Развернуть(ОписаниеСтроки);
		КонецЕсли;
		
		Если Ванесса.Версия8317ИлиВыше Тогда
			//Ожидание, что строка развернётся.
			КоличествоПопытокПроверкаРазвернут = 5;
			Для СчетчикПопытокРазвернут = 1 По КоличествоПопытокПроверкаРазвернут Цикл
				
				Если ТаблицаСписок.Развернут() Тогда
					Прервать;
				КонецЕсли;	  
				
				Ванесса.sleep(1);
				
			КонецЦикла;	
		КонецЕсли;	
		
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//В таблице "Список" я разворачиваю строку с подчиненными:
//@ВТаблицеЯРазворачиваюСтрокуСПодчиненными(Парам01,Парам02,ТабПарам)
Функция ВТаблицеЯРазворачиваюСтрокуСПодчиненными(ИмяТЧ,ТабПарам) Экспорт
	ВТаблицеЯРазворачиваюСтроку(ИмяТЧ,ТабПарам,Истина);
КонецФункции

&НаКлиенте
//В таблице "Список" я разворачиваю текущую строку:
//@ВТаблицеЯРазворачиваюТекущуюСтроку(Парам01)
Функция ВТаблицеЯРазворачиваюТекущуюСтроку(ИмяТЧ,СПодчиненными = Ложь) Экспорт
	ТаблицаСписок = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	ТаблицаСписок.Активизировать();
	Если Не ТаблицаСписок.Развернут() Тогда
		Если СПодчиненными Тогда
			ТаблицаСписок.Развернуть(,Истина);
		Иначе	
			ТаблицаСписок.Развернуть();
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//В таблице "Список" я разворачиваю текущую строку с подчиненными:
//@ВТаблицеЯРазворачиваюТекущуюСтрокуСПодчиненными(Парам01)
Функция ВТаблицеЯРазворачиваюТекущуюСтрокуСПодчиненными(ИмяТЧ) Экспорт
	ВТаблицеЯРазворачиваюТекущуюСтроку(ИмяТЧ,Истина);
КонецФункции




&НаКлиенте
//В форме "Справочник1" в таблице "Список" я сворачиваю строку:
//@ВФормеВТаблицеЯСворачиваюСтроку(Парам01,Парам02,ТабПарам)
Функция ВФормеВТаблицеЯСворачиваюСтроку(ИмяФормы,ИмяТЧ,ТабПарам) Экспорт
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Должна передаваться таблица с двумя строками.");
	Ванесса.ПроверитьРавенство(ТабПарам.Количество(),2,ТекстСообщения);
	
	ВФормеВТаблицеЯПерехожуКСтроке(ИмяФормы,ИмяТЧ,ТабПарам);
	
	
	НужнаяФорма = НайтиФормуПоЗаголовку(ИмяФормы);
	
	Если НужнаяФорма = Неопределено Тогда
		Если НужнаяФорма = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Форма с заголовком <%1> не найдена.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФормы); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	ТаблицаСписок = Ванесса.НайтиТЧПоИмени(ИмяТЧ,НужнаяФорма);
	
	ТаблицаСписок.Активизировать();
	
	ОписаниеСтроки = ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам);
	
	Если ТаблицаСписок.Развернут() Тогда
		ТаблицаСписок.Свернуть(ОписаниеСтроки);
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//В таблице "Список" я сворачиваю строку:
//@ВТаблицеЯСворачиваюСтроку(Парам01,Парам02,ТабПарам)
Функция ВТаблицеЯСворачиваюСтроку(ИмяТЧ,ТабПарам) Экспорт
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Должна передаваться таблица с двумя строками.");
	Ванесса.ПроверитьРавенство(ТабПарам.Количество(),2,ТекстСообщения);
	
	ВТаблицеЯПерехожуКСтроке(ИмяТЧ,ТабПарам);
	
	ТаблицаСписок = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	ТаблицаСписок.Активизировать();
	
	ОписаниеСтроки = ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам);
	
	Если ТаблицаСписок.Развернут() Тогда
		ТаблицаСписок.Свернуть(ОписаниеСтроки);
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//В таблице "Список" я сворачиваю теукщую строку:
//@ВТаблицеЯСворачиваюТекущуюСтроку(Парам01)
Функция ВТаблицеЯСворачиваюТекущуюСтроку(ИмяТЧ) Экспорт
	ТаблицаСписок = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	ТаблицаСписок.Активизировать();
	
	Если ТаблицаСписок.Развернут() Тогда
		ТаблицаСписок.Свернуть();
	КонецЕсли;	 
	
КонецФункции




&НаКлиенте
//"В форме "Справочник1" в таблице "Список" я выбираю текущую строку"
//@ВФормеВТЧЯВыбираюТекущуюСтроку(Парам01,Парам02)
Функция ВФормеВТЧЯВыбираюТекущуюСтроку(ИмяФормы,ИмяТЧ) Экспорт
	НужнаяФорма            = НайтиФормуПоЗаголовку(ИмяФормы);
	ТЧ                     =  Ванесса.НайтиТЧПоИмени(ИмяТЧ,НужнаяФорма);
	ТЧ.Активизировать();
	ТЧ.Выбрать();
КонецФункции

&НаКлиенте
//"В таблице "Список" я выбираю текущую строку"
//@ВТаблицеЯВыбираюТекущуюСтроку(Парам01,Парам02)
Функция ВТаблицеЯВыбираюТекущуюСтроку(ИмяТЧ) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	Попытка
		ТЧ.ПолучитьТекстЯчейки();
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> нет строк для выбора.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Ванесса.ПереместитьКурсорКТекущемуЭлементу(ТЧ);
	Ванесса.ВыборТекущейСтрокиТаблицыUIAutomation(ТЧ);
	
	ТЧ.Выбрать();
	
	Если Ванесса.БезопасноеВыполнениеШагов() Тогда
		//чтобы сработали оповещения форм
		Ванесса.Sleep(1);
	КонецЕсли;	 
	
	//Форма могла закрыться
	Ванесса.ОбработатьСменуАктивногоОкна();
КонецФункции






&НаКлиенте
//В открытой форме я открываю выпадающий список с заголовком "Реквизит1"
//@ВОткрытойФормеЯОткрываюВыпадающийСписокСЗаголовком(Парам01)
Функция ВОткрытойФормеЯОткрываюВыпадающийСписокСЗаголовком(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ТекстОшибки = "";
	
	НадоВызватьИсключение = Истина;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ТекущийВыпадающийСписок = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"), ДопПараметры);
			Если ТекущийВыпадающийСписок = Неопределено Тогда
				Если ИскатьПоИмени Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Выпадающий список с именем <%1> не найден.");
				Иначе	
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Выпадающий список с заголовком <%1> не найден.");
				КонецЕсли;	 
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
				
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			ТекущийВыпадающийСписок.Активизировать();
			
			ТекущийВыпадающийСписок.ОткрытьВыпадающийСписок();
			Ванесса.СохранитьЗначениеПеременнойВКонтекст("ТекущийВыпадающийСписок", ТекущийВыпадающийСписок, Истина);
			
			НадоВызватьИсключение = Ложь;
			Прервать;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
			Ванесса.ОбработатьСменуАктивногоОкна();
		КонецПопытки;
	КонецЦикла;
	
	Если НадоВызватьИсключение Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//В открытой форме я открываю выпадающий список "Реквизит1"
//@ВОткрытойФормеЯОткрываюВыпадающийСписок(Парам01)
Функция ВОткрытойФормеЯОткрываюВыпадающийСписок(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯОткрываюВыпадающийСписокСЗаголовком(ИмяРеквизита,ИскатьПоИмени);
КонецФункции






&НаКлиенте
//В открытой форме я открываю выпадающий список с именем "Реквизит1"
//@ВОткрытойФормеЯОткрываюВыпадающийСписокСИменем(Парам01)
Функция ВОткрытойФормеЯОткрываюВыпадающийСписокСИменем(ИмяРеквизита) Экспорт
	ВОткрытойФормеЯОткрываюВыпадающийСписокСЗаголовком(ИмяРеквизита,Истина);
КонецФункции


&НаКлиенте
//В открытой форме я выбираю значение реквизита с заголовком "Реквизит2" из формы списка
//@ВОткрытойФормеЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка(Парам01)
Функция ВОткрытойФормеЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ТекстОшибки = "";
	
	НадоВызватьИсключение = Истина;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			
			Ванесса.ОбработатьСменуАктивногоОкна();
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ТекущийВыпадающийСписок = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"),ДопПараметры);
			
			Если ТекущийВыпадающийСписок = Неопределено Тогда
				Если ИскатьПоИмени Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Выпадающий список с именем <%1> не найден.");
				Иначе	
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Выпадающий список с заголовком <%1> не найден.");
				КонецЕсли;	
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
				
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			ТекущийВыпадающийСписок.Активизировать();
			
			ТекущийВыпадающийСписок.Выбрать();
			НадоВызватьИсключение = Ложь;
			Прервать;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
			Ванесса.ОбработатьСменуАктивногоОкна();
		КонецПопытки;
		
	КонецЦикла;
	
	Если НадоВызватьИсключение Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
//В открытой форме я выбираю значение реквизита "Реквизит2" из формы списка
//@ВОткрытойФормеЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01)
Функция ВОткрытойФормеЯВыбираюЗначениеРеквизитаИзФормыСписка(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка(ИмяРеквизита,ИскатьПоИмени);
КонецФункции




&НаКлиенте
//В открытой форме я выбираю значение реквизита с именем "Реквизит2" из формы списка
//@ВОткрытойФормеЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01)
Функция ВОткрытойФормеЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(ИмяРеквизита) Экспорт

	ВОткрытойФормеЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка(ИмяРеквизита,Истина);
	
КонецФункции

&НаКлиенте
Функция ПолучитьКорректныйТекстДляВставкиВПоле(Знач Текст)
	Текст = Ванесса.ПолучитьКорректныйТекстДляВставкиВПоле(Текст);
	Возврат Ванесса.ПолучитьКорректноеЗначениеДляРаботыСПолем(Текст);
КонецФункции	

&НаКлиенте
//В открытой форме в поле с заголовком "Реквизит строка" я ввожу текст "тест"
//@ВОткрытойФормеВПолеСЗаголовкомЯВвожуТекст(Парам01,Парам02)
Функция ВОткрытойФормеВПолеСЗаголовкомЯВвожуТекст(ИмяРеквизита,Текст,ИскатьПоИмени = Ложь) Экспорт
	
	//Текст может быть строкой или массивом структур, где данные будут браться из первой колонки.
	Текст = ПолучитьКорректныйТекстДляВставкиВПоле(Текст);
	//Текст = Ванесса.ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(Текст);

	ТипПоля = Тип("ТестируемоеПолеФормы");
	
	ТекстОшибки = "";
	
	НадоВызватьИсключение = Истина;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ИскатьТолькоПоляВКоторыеВозможенВводТекста", Истина);
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, ТипПоля,ДопПараметры);
			
			Если ПолеРеквизит.Вид = ВидПоляФормы.ПолеФорматированногоДокумента или ПолеРеквизит.Вид = ВидПоляФормы.ПолеHTMLДокумента Тогда
				ПолеРеквизит.Активизировать();
				Если Ванесса.Версия8325ИлиВыше Тогда
					ПолеРеквизит.ВвестиHTMLДокумента(Текст);
				Иначе
					ПолеРеквизит.ВвестиHTML(Текст);
				КонецЕсли;	
				
			Иначе	
				Если Текст = "" Тогда
					ПолеРеквизит.Очистить();
				Иначе	
					Ванесса.ВвестиВПолеТекст(ПолеРеквизит, Текст);
				КонецЕсли;	 
			КонецЕсли;
			
			НадоВызватьИсключение = Ложь;
			Прервать;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
			Ванесса.ОбработатьСменуАктивногоОкна();
		КонецПопытки;
	КонецЦикла;

	Если НадоВызватьИсключение Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//В открытой форме в поле "Реквизит строка" я ввожу текст "тест"
//@ВОткрытойФормеВПолеЯВвожуТекст(Парам01,Парам02)
Функция ВОткрытойФормеВПолеЯВвожуТекст(ИмяРеквизита,Текст,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеВПолеСЗаголовкомЯВвожуТекст(ИмяРеквизита,Текст,ИскатьПоИмени);
КонецФункции




&НаКлиенте
//В открытой форме в поле с именем "Реквизит строка" я ввожу текст "тест"
//@ВОткрытойФормеВПолеСИменемЯВвожуТекст(Парам01,Парам02)
Функция ВОткрытойФормеВПолеСИменемЯВвожуТекст(ИмяРеквизита,Текст) Экспорт
	ВОткрытойФормеВПолеСЗаголовкомЯВвожуТекст(ИмяРеквизита,Текст,Истина);
КонецФункции

&НаКлиенте
Процедура ВОткрытойФормеВПолосеРегулированияЯПерехожуКЗначению(ИмяИлиЗаголовокПоля, Значение, ИскатьПоИмени = Ложь)
	
	Если ТипЗнч(Значение) <> Тип("Число") Тогда
		ВызватьИсключение НСтр("ru = 'Укажите в качестве значения число'");
	КонецЕсли;
	
	ТипПоля = Тип("ТестируемоеПолеФормы");
	
	ТекстОшибки = "";
	
	НадоВызватьИсключение = Истина;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(
				ИмяИлиЗаголовокПоля, ИскатьПоИмени, Истина, ТипПоля,ДопПараметры);
			
			ПолеРеквизит.Активизировать();
			ПолеРеквизит.ПерейтиКЗначению(Значение);
			
			НадоВызватьИсключение = Ложь;
			Прервать;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
			Ванесса.ОбработатьСменуАктивногоОкна();
		КонецПопытки;
	КонецЦикла;

	Если НадоВызватьИсключение Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
//В открытой форме я нажимаю на кнопку с заголовком "Записать и закрыть"
//@ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком(Парам01)
Функция ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком(Знач ИмяКнопки, ИскатьПоИмени = Ложь) Экспорт
	//ИмяКнопки = Ванесса.ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(ИмяКнопки);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИскатьМодальныйДиалог",Истина);
	
	//Для обхода бага платформы с поиском активных окон на старых версиях платформы.
	ДопПараметры.Вставить("ЗапомнитьАктивноеОкно",Ложь);
	
	ТекстОшибки = "";
	МассивКнопок = Неопределено;
	
	НадоВызватьИсключение = Истина;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			МассивФорм = Ванесса.НайтиКонтейнерыТекущегоОкнаTestClient(ДопПараметры);
			НомерФормы = 0;
			Для Каждого ТекущаяФорма Из МассивФорм Цикл
				НомерФормы = НомерФормы + 1;
				Нашли = Ложь;
				Кнопка = Неопределено;
				Попытка
					Если ИскатьПоИмени Тогда
						Кнопка = ТекущаяФорма.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,ИмяКнопки);
					Иначе	
						МассивКнопок = ТекущаяФорма.НайтиОбъекты(Тип("ТестируемаяКнопкаФормы"),ИмяКнопки);
						Если МассивКнопок.Количество() > 1 Тогда
							МассивКнопок = Новый Массив(МассивКнопок);
							Ванесса.УдалитьНедоступныеДляИнтерактивнойРаботыПользователюЭлементыИзМассиваЭлементовTestClient(МассивКнопок,Неопределено);
							Если МассивКнопок.Количество() = 1 Тогда
								Кнопка = МассивКнопок[0];
							КонецЕсли;	 
						ИначеЕсли МассивКнопок.Количество() = 1 Тогда
							Кнопка = МассивКнопок[0];
						КонецЕсли;	 
					КонецЕсли;	 
				Исключение
				КонецПопытки;
				
				Если Кнопка = Неопределено Тогда
					Если ИскатьПоИмени Тогда
						ТекстОшибки = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка с именем <%1> не найдена. ТекущееОкно=%2");
					Иначе	
						ТекстОшибки = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка/команда с заголовком <%1> не найдена. ТекущееОкно=%2");
					КонецЕсли;	
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%1",ИмяКнопки); 
					Если ДопПараметры.Свойство("АктивноеОкно") Тогда
						Если ДопПараметры.АктивноеОкно <> Неопределено Тогда
							ТекстОшибки = СтрЗаменить(ТекстОшибки,"%2",ДопПараметры.АктивноеОкно.Заголовок); 
						КонецЕсли;	 
					КонецЕсли;	 
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%2",""); 
				Иначе	
					Нашли = Истина;
				КонецЕсли;	 
				
				
				Если НЕ Нашли Тогда //для модальных диалогов
					ТекущаяФорма = НайтиТекущуюФорму();
					
					Кнопка = Неопределено;
					Попытка
						Если ИскатьПоИмени Тогда
							Кнопка = ТекущаяФорма.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,ИмяКнопки);
						Иначе	
							Кнопка = ТекущаяФорма.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),ИмяКнопки);
						КонецЕсли;	 
					Исключение
					КонецПопытки;
					
					Если Кнопка <> Неопределено Тогда
						Нашли = Истина;
					КонецЕсли;	 
				КонецЕсли;	 
				
				Если НЕ Нашли Тогда
					Если ДопПараметры.Свойство("АктивноеОкно") Тогда
						Если ДопПараметры.АктивноеОкно <> Неопределено Тогда
							Если Ванесса.ЭтоЗаголовокОкнаМодальногоДиалога(ДопПараметры.АктивноеОкно.Заголовок) Тогда
								//обход бага модальных окон
								//иногда платформа отдаёт уже закрытое окно предупреждения, которого реально нет
								ОкнаПредупреждений = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"),"1С:Предприятие");
								Для Каждого ОкноПредупреждения Из ОкнаПредупреждений Цикл
									Если ИскатьПоИмени Тогда
										Кнопка = ОкноПредупреждения.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,ИмяКнопки);
									Иначе	
										Кнопка = ОкноПредупреждения.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),ИмяКнопки);
									КонецЕсли;	
									
									Если Кнопка <> Неопределено Тогда
										Нашли = Истина;
										Прервать;
									КонецЕсли;	 
								КонецЦикла;	
							КонецЕсли;	 
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
				
				Если НЕ Нашли Тогда
					Ванесса.ОбработатьСменуАктивногоОкна();
					Если ИскатьПоИмени Тогда
						ТекстОшибки = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка с именем <%1> не найдена. ТекущееОкно=%2");
					Иначе	
						ТекстОшибки = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка/команда с заголовком <%1> не найдена. ТекущееОкно=%2");
					КонецЕсли;	
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%1",ИмяКнопки); 
					
					Если ДопПараметры.Свойство("АктивноеОкно") Тогда
						Если ДопПараметры.АктивноеОкно <> Неопределено Тогда
							ТекстОшибки = СтрЗаменить(ТекстОшибки,"%2",ДопПараметры.АктивноеОкно.Заголовок); 
						КонецЕсли;	 
					КонецЕсли;	 
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%2",""); 
				Иначе	
					НадоВызватьИсключение = Ложь;
					Прервать;
				КонецЕсли;	 
				
			КонецЦикла;	 
			
			Если НадоВызватьИсключение и (НомерФормы = МассивФорм.Количество()) Тогда
				//исключение буде вызвано в завершении процедуры если это необходимо
				Если СчетчикПопыток < КоличествоПопыток Тогда
					Ванесса.sleep(1);
				КонецЕсли;	 
			Иначе	
				Прервать;
			КонецЕсли;	 

		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
			Ванесса.ОбработатьСменуАктивногоОкна();
		КонецПопытки;
		
	КонецЦикла;

	Если НадоВызватьИсключение Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 	
	
	Если НЕ Ванесса.Объект.ИспользоватьUIAutomation Тогда
		ПолучилосьАктивизировать = АктивизироватьКнопку(Кнопка,ТекущаяФорма);
	КонецЕсли;	 
	
	ТекстОшибки        = "";
	ПолучилосьНажать   = Ложь;
	ИдМассиваКнопок    = -1;
	КоличествоПопыток  = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			Если МассивКнопок <> Неопределено И МассивКнопок.Количество() > 1 Тогда
				ИдМассиваКнопок = ИдМассиваКнопок + 1;
				Если ИдМассиваКнопок > МассивКнопок.Количество() - 1 Тогда
					МассивКнопок = 0;
				КонецЕсли;	
				
				Кнопка = МассивКнопок[ИдМассиваКнопок];
			КонецЕсли;	
			
			Ванесса.НажатьНаКнопкуФормы(Кнопка);
			ПолучилосьНажать = Истина;
			Прервать;
		Исключение
			ТекстОшибки = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось нажать на кнопку <%1>.");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%1", ИмяКнопки);
			ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки();
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
	КонецЦикла;	
	
	Если НЕ ПолучилосьНажать Тогда
		ДопСообщение = "";
		Если НЕ ИскатьПоИмени Тогда
			Попытка
				АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
				Если МассивКнопок <> Неопределено И МассивКнопок.Количество() > 1 Тогда
					ДопСообщение = Ванесса.ПодставитьПараметрыВСтроку(Ванесса.Локализовать("Найдено <%1> кнопки с заголовком <%2>. Попробуйте искать элемент формы по имени."), МассивКнопок.Количество(), ИмяКнопки);
					ДопСообщение = ДопСообщение + Символы.ПС + Ванесса.Локализовать("Имена кнопок:");
					Для Каждого Элем Из МассивКнопок Цикл
						ДопСообщение = ДопСообщение + Символы.ПС + Элем.Имя;
					КонецЦикла;	
				КонецЕсли;	 
			Исключение
				ДопСообщение = "";
			КонецПопытки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДопСообщение) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + ДопСообщение;
		КонецЕсли;	 
		
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СбрасыватьЗафиксированнуюФорму",Истина);
	ДопПараметры.Вставить("СбрасыватьЗафиксированнуюГруппу", Ложь);
	//параметр СбрасыватьЗафиксированнуюФорму должен быть Истина, иначе после нажатия на "Провести и закрыть", могут быть ошибки
	Ванесса.ОбработатьСменуАктивногоОкна(ДопПараметры);
КонецФункции

&НаКлиенте
//В открытой форме я нажимаю на кнопку "Записать и закрыть"
//@ВОткрытойФормеЯНажимаюНаКнопку(Парам01)
Функция ВОткрытойФормеЯНажимаюНаКнопку(ИмяКнопки,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком(ИмяКнопки,ИскатьПоИмени);
КонецФункции







&НаКлиенте
Функция НажтиеНаКнопку()
	Ванесса.ПереместитьКурсорМышиКАктивномуОбъекту();
	Ванесса.ПодсветитьАктивныйЭлементФормы();
	ТекущийЭлементДляРаботы.Нажать();
	Ванесса.ОбработатьСменуАктивногоОкна();
	Ванесса.ПродолжитьВыполнениеШагов();
КонецФункции

&НаСервере
Функция ЭлементСправочника1СИменемЗаписалсяКорректноСервер(Наименование,ДопПараметры)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочник1.Ссылка
		|ИЗ
		|	Справочник.Справочник1 КАК Справочник1
		|ГДЕ
		|	Справочник1.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
		Если Ссылка.Реквизит1 <> Перечисления.Перечисление1.ЗначениеПеречисления1 Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$Реквизит1: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
		Если Ссылка.Реквизит2 <> Справочники.Справочник2.НайтиПоНаименованию("ТестовыйЭлемент21") Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$Реквизит2: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
		Если Ссылка.РеквизитЧисло <> 12.34 Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$РеквизитЧисло: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
		Если Ссылка.РеквизитДата <> '19810408' Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$РеквизитДата: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
		Если СокрЛП(Ссылка.РеквизитСтрока) <> "тест" Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$РеквизитСтрока: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
		Если НЕ Ссылка.РеквизитБулево Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$РеквизитБулево: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
		Если Ссылка.РеквизитПереключатель <> 1 Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$РеквизитПереключатель: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	
		
		СтрокаТЧ = Ссылка.ТабличнаяЧасть1[0];
		
		Если СтрокаТЧ.РеквизитЧисло <> 56.78 Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$ТЧ Реквизит1: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
		Если СокрЛП(СтрокаТЧ.РеквизитСтрока) <> "ТестСтрока" Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$ТЧ РеквизитСтрока: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
		Если СтрокаТЧ.РеквизитДата <> '19830911' Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$ТЧ РеквизитДата: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
		Если СтрокаТЧ.РеквизитСправочник <> Справочники.Справочник2.НайтиПоНаименованию("ТестовыйЭлемент21") Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$ТЧ РеквизитСправочник: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
		Если НЕ СтрокаТЧ.РеквизитБулево Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$ТЧ РеквизитБулево: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
		Если СтрокаТЧ.РеквизитСправочникВыборИзФормыСписка <> Справочники.Справочник2.НайтиПоНаименованию("ТестовыйЭлемент21") Тогда
			Сообщить(ПолучитьТекстСообщенияПользователюСервер("$ТЧ РеквизитСправочникВыборИзФормыСписка: Значение не верное.",ДопПараметры.ТекстСообщенийПользователю));
			Возврат Ложь;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Истина;
КонецФункции	

&НаКлиенте
//Элемент Справочника1 с именем "Тестовый Элемент 1" записался корректно
//@ЭлементСправочника1СИменемЗаписалсяКорректно(Парам01)
Функция ЭлементСправочника1СИменемЗаписалсяКорректно(Наименование) Экспорт
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Записался корректный элемент.");
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекстСообщенийПользователю",Ванесса.ДанныеПереводаСообщенийПользователю());
	Ванесса.ПроверитьРавенство(ЭлементСправочника1СИменемЗаписалсяКорректноСервер(Наименование,ДопПараметры),Истина,ТекстСообщения);
КонецФункции





&НаКлиенте
//В открытой форме я изменяю флаг с заголовком "Реквизит булево"
//@ВОткрытойФормеЯИзменяюФлагСЗаголовком(Парам01)
Функция ВОткрытойФормеЯИзменяюФлагСЗаголовком(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Истина);
	ДопПараметры.Вставить("ОставитьТолькоФлаги",Истина);
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"),ДопПараметры);
	Если ПолеРеквизит = Неопределено Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Флаг с именем <%1> не найден.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Флаг с заголовком <%1> не найден.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Ванесса.ПереместитьКурсорКФлагу(ПолеРеквизит);
	
	ПолеРеквизит.Активизировать();
	ПолеРеквизит.УстановитьОтметку();
КонецФункции

&НаКлиенте
//В открытой форме я изменяю флаг "Реквизит булево"
//@ВОткрытойФормеЯИзменяюФлаг(Парам01)
Функция ВОткрытойФормеЯИзменяюФлаг(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯИзменяюФлагСЗаголовком(ИмяРеквизита,ИскатьПоИмени);
КонецФункции






&НаКлиенте
//В открытой форме я изменяю флаг с именем "Реквизит булево"
//@ВОткрытойФормеЯИзменяюФлагСИменем(Парам01)
Функция ВОткрытойФормеЯИзменяюФлагСИменем(ИмяРеквизита) Экспорт
	ВОткрытойФормеЯИзменяюФлагСЗаголовком(ИмяРеквизита,Истина)
КонецФункции



&НаКлиенте
//В открытой форме я меняю значение переключателя с заголовком "Реквизит переключатель" на "Первое значение"
//@ВОткрытойФормеЯМеняюЗначениеПереключателяСЗаголовкомНа(Парам01,Парам02)
Функция ВОткрытойФормеЯМеняюЗначениеПереключателяСЗаголовкомНа(ИмяРеквизита, Значение,ИскатьПоИмени = Ложь) Экспорт
	//Значение может быть как строкой так и числом. Если число - то это номер значения, начиная с 0.
	
	ТекстСообщения = "";
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	БылаОшибка = Ложь;
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Истина);
			ДопПараметры.Вставить("ОставитьТолькоПереключатели",Истина);
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"),ДопПараметры);
			Если ПолеРеквизит = Неопределено Тогда
				Если ИскатьПоИмени Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переключатель с именем <%1> не найден.");
				Иначе	
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переключатель с заголовком <%1> не найден.");
				КонецЕсли;	 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
				
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			ПолеРеквизит.Активизировать();
			Ванесса.ВыбратьЗначениеПереключателя(ПолеРеквизит, Значение);
			
			Прервать;
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//В открытой форме я меняю значение переключателя "Реквизит переключатель" на "Первое значение"
//@ВОткрытойФормеЯМеняюЗначениеПереключателяНа(Парам01,Парам02)
Функция ВОткрытойФормеЯМеняюЗначениеПереключателяНа(ИмяРеквизита,Значение,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯМеняюЗначениеПереключателяСЗаголовкомНа(ИмяРеквизита,Значение,ИскатьПоИмени);
КонецФункции


&НаКлиенте
//В открытой форме я меняю значение переключателя с именем "Реквизит переключатель" на "Первое значение"
//@ВОткрытойФормеЯМеняюЗначениеПереключателяСИменемНа(Парам01,Парам02)
Функция ВОткрытойФормеЯМеняюЗначениеПереключателяСИменемНа(ИмяРеквизита,Значение) Экспорт
	ВОткрытойФормеЯМеняюЗначениеПереключателяСЗаголовкомНа(ИмяРеквизита,Значение,Истина);	
КонецФункции



&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я нажимаю на кнопку с заголовком "Добавить"
//@ВОткрытойФормеВТЧЯНажимаюНаКнопкуСЗаголовком(Парам01,Парам02)
Функция ВОткрытойФормеВТЧЯНажимаюНаКнопкуСЗаголовком(ИмяТЧ,ИмяКнопки,ИскатьПоИмени = Ложь) Экспорт
	НашлиТЧ = Ложь;
	НашлиКнопку = Ложь;
	ПолучилосьНажатьКнопку = Ложь;
	
	Кнопка = Неопределено;
	ТекстОшибки = "";
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		НашлиКнопку = Ложь;
		НашлиТЧ = Ложь;
		ПолучилосьНажатьКнопку = Ложь;
		
		Попытка
			МассивФорм = Ванесса.НайтиКонтейнерыТекущегоОкнаTestClient();
			Для Каждого ТекущаяФорма Из МассивФорм Цикл
				ТЧ = ТекущаяФорма.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"),,ИмяТЧ);
				Если ТЧ = Неопределено Тогда
					Продолжить;
				КонецЕсли;	 
				
				НашлиТЧ = Истина;
				Ванесса.СохранитьЗначениеПеременнойВКонтекст("ТекущаяТЧ", ТЧ, Истина);
				
				Если ИскатьПоИмени Тогда
					Кнопка = ТЧ.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),, ИмяКнопки);
				Иначе	
					МассивКнопок = ТЧ.НайтиОбъекты(Тип("ТестируемаяКнопкаФормы"),ИмяКнопки);
					Если МассивКнопок.Количество() > 1 Тогда
						МассивКнопок = Новый Массив(МассивКнопок);
						Ванесса.УдалитьНедоступныеДляИнтерактивнойРаботыПользователюЭлементыИзМассиваЭлементовTestClient(МассивКнопок,Неопределено);
						Если МассивКнопок.Количество() = 1 Тогда
							Кнопка = МассивКнопок[0];
						КонецЕсли;	 
					ИначеЕсли МассивКнопок.Количество() = 1 Тогда
						Кнопка = МассивКнопок[0];
					КонецЕсли;	 
					
					Попытка
						Если Кнопка = Неопределено И НЕ ТЧ = Неопределено Тогда
							КоманднаяПанельФормы = ТЧ.ПолучитьКоманднуюПанель();
							
							МассивКнопок = КоманднаяПанельФормы.НайтиОбъекты(Тип("ТестируемаяКнопкаФормы"),ИмяКнопки);
							Если МассивКнопок.Количество() > 1 Тогда
								МассивКнопок = Новый Массив(МассивКнопок);
								Ванесса.УдалитьНедоступныеДляИнтерактивнойРаботыПользователюЭлементыИзМассиваЭлементовTestClient(МассивКнопок,Неопределено);
								Если МассивКнопок.Количество() = 1 Тогда
									Кнопка = МассивКнопок[0];
								КонецЕсли;	 
							ИначеЕсли МассивКнопок.Количество() = 1 Тогда
								Кнопка = МассивКнопок[0];
							КонецЕсли;	 
						КонецЕсли;	 
					Исключение
						
					КонецПопытки;
				КонецЕсли;	 
				
				Если Кнопка = Неопределено И НЕ ИскатьПоИмени Тогда
					МассивКнопок = ТЧ.НайтиОбъекты(Тип("ТестируемаяКнопкаФормы"), ИмяКнопки);
					Если МассивКнопок.Количество() > 0 Тогда
						Кнопка = МассивКнопок[0];
					КонецЕсли;	
				КонецЕсли;	
				
				Если Кнопка = Неопределено Тогда
					Продолжить;
				КонецЕсли;	 
				
				НашлиКнопку = Истина;
				
				ПолучилосьАктивизировать = АктивизироватьКнопку(Кнопка,ТекущаяФорма,ТЧ);
				
				Ванесса.НажатьНаКнопкуФормы(Кнопка);
				
				ДопПараметрыОбработатьСменуАктивногоОкна = Новый Структура;
				ДопПараметрыОбработатьСменуАктивногоОкна.Вставить("СбрасыватьЗафиксированнуюГруппу", Ложь);
				Ванесса.ОбработатьСменуАктивногоОкна(ДопПараметрыОбработатьСменуАктивногоОкна);
				ПолучилосьНажатьКнопку = Истина;
				Прервать;
			КонецЦикла;	 
			
			Если ПолучилосьНажатьКнопку Тогда
				Прервать;
			КонецЕсли;	 
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
	КонецЦикла;
	
	Если Не НашлиТЧ Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("ТЧ с именем <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстОшибки;
		КонецЕсли;	 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если НЕ НашлиКнопку Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка с именем <%1> не найдена.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка/команда с заголовком <%1> не найдена или найдено больше одной.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКнопки); 
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстОшибки;
		КонецЕсли;	 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если НЕ ПолучилосьНажатьКнопку Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось нажать на кнопку <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКнопки); 
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстОшибки;
		КонецЕсли;	 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я нажимаю на кнопку "Добавить"
//@ВОткрытойФормеВТЧЯНажимаюНаКнопку(Парам01,Парам02)
Функция ВОткрытойФормеВТЧЯНажимаюНаКнопку(ИмяТЧ,ИмяКнопки,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеВТЧЯНажимаюНаКнопкуСЗаголовком(ИмяТЧ,ИмяКнопки,ИскатьПоИмени);
КонецФункции



&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я нажимаю на кнопку с именем "Добавить"
//@ВОткрытойФормеВТЧЯНажимаюНаКнопкуСИменем(Парам01,Парам02)
Функция ВОткрытойФормеВТЧЯНажимаюНаКнопкуСИменем(ИмяТЧ,ИмяКнопки) Экспорт
	ВОткрытойФормеВТЧЯНажимаюНаКнопкуСЗаголовком(ИмяТЧ,ИмяКнопки,Истина);
КонецФункции



&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" в поле с заголовком "Реквизит число" я ввожу текст "54,00"
//@ВОткрытойФормеВТЧВПолеСЗаголовкомЯВвожуТекст(Парам01,Парам02,Парам03)
Функция ВОткрытойФормеВТЧВПолеСЗаголовкомЯВвожуТекст(ИмяТЧ,ИмяРеквизита,Знач Текст,ИскатьПоИмени = Ложь) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	 
	
	Если ПолеРеквизит = Неопределено Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с именем <%1> не найдено.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> не найдено.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита);
	Текст = ПолучитьКорректныйТекстДляВставкиВПоле(Текст);
	
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка		
			ПолеРеквизит.Активизировать();
			Ванесса.ПереместитьКурсорКПолю(ПолеРеквизит, Истина);
			
			ТаблицаВРежимеРедактирования = ТЧ.ТекущийРежимРедактирование();
			Если Не ТаблицаВРежимеРедактирования Тогда
				ТЧ.ИзменитьСтроку();
			КонецЕсли;	 
			
			//ПолеРеквизит.ВвестиТекст(Текст);
			Ванесса.ВвестиВПолеТекст(ПолеРеквизит, Текст, Истина, Ложь);
			Попытка
				Если Текст = "" Тогда
					ОтображаемыйТекст = ПолеРеквизит.ПолучитьТекстРедактирования();
					Если НЕ ПустаяСтрока(ОтображаемыйТекст) Тогда
						ПолеРеквизит.Очистить();
					КонецЕсли;	 
				КонецЕсли;	 
			Исключение
				ОтображаемыйТекст = "";
			КонецПопытки;
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	//Ванесса.УстановитьТекстИнструкции("И в поле """ + ИмяРеквизита + """ я ввожу """ + Текст + """");
КонецФункции

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" в поле "Реквизит число" я ввожу текст "54,00"
//@ВОткрытойФормеВТЧВПолеЯВвожуТекст(Парам01,Парам02,Парам03)
Функция ВОткрытойФормеВТЧВПолеЯВвожуТекст(ИмяТЧ,ИмяРеквизита,Текст,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеВТЧВПолеСЗаголовкомЯВвожуТекст(ИмяТЧ,ИмяРеквизита,Текст,ИскатьПоИмени);
КонецФункции

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" в поле с именем "Реквизит число" я ввожу текст "54,00"
//@ВОткрытойФормеВТЧВПолеСИменемЯВвожуТекст(Парам01,Парам02,Парам03)
Функция ВОткрытойФормеВТЧВПолеСИменемЯВвожуТекст(ИмяТЧ,ИмяРеквизита,Текст) Экспорт
	ВОткрытойФормеВТЧВПолеСЗаголовкомЯВвожуТекст(ИмяТЧ,ИмяРеквизита,Текст,Истина);
КонецФункции






&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" из выпадающего списка с заголовком "Реквизит справочник" я выбираю "ТестовыйЭлемент21"
//@ВОткрытойФормеВТЧИзВыпадающегоСпискаСЗаголовкомЯВыбираю(Парам01,Парам02,Парам03)
Функция ВОткрытойФормеВТЧИзВыпадающегоСпискаСЗаголовкомЯВыбираю(ИмяТЧ,ИмяРеквизита,ВыбираемоеЗначение,ИскатьПоИмени = Ложь) Экспорт
	//Шаг будет вводить в поле текст, ожидать формирования выпадающего списка и затем выбирать первое значение из списка.
	
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	 
	
	Если ПолеРеквизит = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> не найдено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита);
	ПолеРеквизит.Активизировать();
	
	ДопПараметры = Новый Структура;
	СделатьВводПоСтрокеВПолеВВода(ТЧ,ИмяТЧ,ПолеРеквизит,ИмяРеквизита,ИскатьПоИмени,ВыбираемоеЗначение,ДопПараметры);
КонецФункции

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" из выпадающего списка "Реквизит справочник" я выбираю "ТестовыйЭлемент21"
//@ВОткрытойФормеВТЧИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03)
Функция ВОткрытойФормеВТЧИзВыпадающегоСпискаЯВыбираю(ИмяТЧ,ИмяРеквизита,ВыбираемоеЗначение,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеВТЧИзВыпадающегоСпискаСЗаголовкомЯВыбираю(ИмяТЧ,ИмяРеквизита,ВыбираемоеЗначение,ИскатьПоИмени);
КонецФункции






&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" из выпадающего списка с заголовком "Реквизит справочник" я выбираю "ТестовыйЭлемент21" с выбором
//@ВОткрытойФормеВТЧИзВыпадающегоСпискаСЗаголовкомЯВыбираюСВыбором(Парам01,Парам02,Парам03)
Функция ВОткрытойФормеВТЧИзВыпадающегоСпискаСЗаголовкомЯВыбираюСВыбором(ИмяТЧ,ИмяРеквизита,ВыбираемоеЗначение,ИскатьПоИмени = Ложь) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Если ПолеРеквизит = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> не найдено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита);
	ПолеРеквизит.Активизировать();
	
	ПолеРеквизит.Выбрать();
	ТаймаутОжидания = 10;
	ТаймаутОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(ТаймаутОжидания);
	ПолеРеквизит.ОжидатьФормированияВыпадающегоСписка(ТаймаутОжидания);
	ПолеРеквизит.ВыполнитьВыборИзСпискаВыбора(ВыбираемоеЗначение);
КонецФункции

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" из выпадающего списка "Реквизит справочник" я выбираю "ТестовыйЭлемент21" с выбором
//@ВОткрытойФормеВТЧИзВыпадающегоСпискаЯВыбираюСВыбором(Парам01,Парам02,Парам03)
Функция ВОткрытойФормеВТЧИзВыпадающегоСпискаЯВыбираюСВыбором(ИмяТЧ,ИмяРеквизита,ВыбираемоеЗначение) Экспорт
	ВОткрытойФормеВТЧИзВыпадающегоСпискаСЗаголовкомЯВыбираюСВыбором(ИмяТЧ,ИмяРеквизита,ВыбираемоеЗначение);
КонецФункции




&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я изменяю флаг с заголовком "Реквизит булево"
//@ВОткрытойФормеВТЧЯИзменяюФлагСЗаголовком(Парам01,Парам02)
Функция ВОткрытойФормеВТЧЯИзменяюФлагСЗаголовком(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	ТекстСообщения = "";
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	БылаОшибка = Ложь;
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			
			Если ИскатьПоИмени Тогда
				ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ, ДопПараметры);
			Иначе	
				ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ, ДопПараметры);
			КонецЕсли;	 
			
			Если ПолеРеквизит = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> не найдено.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита);
			ПолеРеквизит.Активизировать();
			
			Ванесса.ПереместитьКурсорКПолю(ПолеРеквизит, Истина);
			
			//тут нет активного контрола
			ПолеРеквизит.УстановитьОтметку();
			
			Прервать;
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я изменяю флаг "Реквизит булево"
//@ВОткрытойФормеВТЧЯИзменяюФлаг(Парам01,Парам02)
Функция ВОткрытойФормеВТЧЯИзменяюФлаг(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеВТЧЯИзменяюФлагСЗаголовком(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени);
КонецФункции






&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я выбираю значение реквизита с заголовком "Реквизит справочник выбор из формы списка" из формы списка
//@ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка(Парам01,Парам02)
Функция ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	 
	
	Если ПолеРеквизит = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> не найдено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита);
	ПолеРеквизит.Активизировать();
	
	ТаблицаВРежимеРедактирования = ТЧ.ТекущийРежимРедактирование();
	Если Не ТаблицаВРежимеРедактирования Тогда
		ТЧ.ИзменитьСтроку();
	КонецЕсли;	 
	
	ПолеРеквизит.Выбрать();
КонецФункции

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я выбираю значение реквизита "Реквизит справочник выбор из формы списка" из формы списка
//@ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01,Парам02)
Функция ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаИзФормыСписка(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени);
КонецФункции







&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я выбираю значение реквизита с именем "Реквизит справочник выбор из формы списка" из формы списка
//@ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01,Парам02)
Функция ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(ИмяТЧ,ИмяРеквизита) Экспорт
	ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаСЗаголовкомИзФормыСписка(ИмяТЧ,ИмяРеквизита,Истина);
КонецФункции


&НаКлиенте
//В форме "Справочник1" в таблице "ТабличнаяЧасть1" я завершаю редактирование строки
//@ВФормеВТЧЯЗавершаюРедактированиеСтроки(Парам01,Парам02)
Функция ВФормеВТЧЯЗавершаюРедактированиеСтроки(ИмяФормы,ИмяТЧ) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	Если ТЧ.ТекущийРежимРедактирование() Тогда
		ТЧ.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//В таблице "ТабличнаяЧасть1" я завершаю редактирование строки
//@ВТЧЯЗавершаюРедактированиеСтроки(Парам01)
Функция ВТЧЯЗавершаюРедактированиеСтроки(ИмяТЧ, ОтменаРедактирования = Ложь) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	Если ТЧ.ТекущийРежимРедактирование() Тогда
		ТЧ.ЗакончитьРедактированиеСтроки(ОтменаРедактирования);
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//В таблице "ТабличнаяЧасть1" я завершаю редактирование строки
//@ВТаблицеЯЗавершаюРедактированиеСтроки(Парам01)
Функция ВТаблицеЯЗавершаюРедактированиеСтроки(ИмяТЧ) Экспорт
	ВТЧЯЗавершаюРедактированиеСтроки(ИмяТЧ);
КонецФункции

&НаКлиенте
//В таблице "ТабличнаяЧасть1" я отменяю редактирование строки
//@ВТаблицеЯОтменяюРедактированиеСтроки(Парам01)
Функция ВТаблицеЯОтменяюРедактированиеСтроки(ИмяТЧ) Экспорт
	ВТЧЯЗавершаюРедактированиеСтроки(ИмяТЧ, Истина);
КонецФункции

&НаКлиенте
//Я завершаю редактирование строки
//@ЯЗавершаюРедактированиеСтроки()
Функция ЯЗавершаюРедактированиеСтроки() Экспорт
	
	ТекстОшибки = "";
	БылаОшибка = Ложь;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		ТекстОшибки = "";
		
		Попытка
			ТЧ = Контекст.ТекущаяТЧ;

			ТекущийРежимРедактирование = Истина;
			Попытка
				ТекущийРежимРедактирование = ТЧ.ТекущийРежимРедактирование();
			Исключение
			КонецПопытки;
			
			Если ТекущийРежимРедактирование Тогда
				ТЧ.ЗакончитьРедактированиеСтроки(Ложь);
			КонецЕсли;	 
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 
	
КонецФункции


&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я нажимаю кнопку выбора у реквизита с заголовком "Реквизит1"
//@ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизитаСЗаголовком(Парам01,Парам02)
Функция ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизитаСЗаголовком(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СбрасыватьЗафиксированнуюГруппу", Ложь);
	Ванесса.ОбработатьСменуАктивногоОкна(ДопПараметры);
	
	ТекстОшибки = "";
	БылаОшибка = Ложь;
	ПолеРеквизит = Неопределено;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		ТекстОшибки = "";
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			
			Если СчетчикПопыток = 1 И Ванесса.ЗначениеЗафиксированногоКонтейнера() <> Неопределено Тогда
				ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ, Ванесса.ЗначениеЗафиксированногоКонтейнера(),,, ДопПараметры);
			Иначе	
				ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ,,,, ДопПараметры);
			КонецЕсли;	 
			
			Если ИскатьПоИмени Тогда
				ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ, ДопПараметры);
			Иначе	
				ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ, ДопПараметры);
			КонецЕсли;	            
			
			Если ПолеРеквизит = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> не найдено.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита);
			
			ПолеРеквизит.Активизировать();
			Если НЕ ТЧ.ТекущийРежимРедактирование() Тогда
				ТЧ.ИзменитьСтроку();
			КонецЕсли;	 
			
			Ванесса.ОткрытьКнопкуВыбораБраузер(ПолеРеквизит);
			
			ПолеРеквизит.Выбрать();
			
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//В открытой форме в таблице "ТабличнаяЧасть1" я нажимаю кнопку выбора у реквизита "Реквизит1"
//@ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизита(Парам01,Парам02)
Функция ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизита(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизитаСЗаголовком(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени);
КонецФункции




&НаКлиенте
//И В таблице "ДокументыПоВидам" я нажимаю кнопку очистить у поля "Скан"
//@ВТаблицеЯНажимаюКнопкуОчиститьУПоля(Парам01,Парам02)
Функция ВТаблицеЯНажимаюКнопкуОчиститьУПоля(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	            
	
	Если ПолеРеквизит = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> не найдено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	
	ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита);
	ПолеРеквизит.Активизировать();
	
	Если НЕ ТЧ.ТекущийРежимРедактирование() Тогда
		ТЧ.ИзменитьСтроку();
	КонецЕсли;	 
	
	Ванесса.ПереместитьКурсорККнопкеОчиститьПоле(ПолеРеквизит);
	
	ПолеРеквизит.Очистить();
КонецФункции

&НаКлиенте
//И В таблице "ДокументыПоВидам" я нажимаю кнопку очистить у поля с именем "Скан"
//@ВТаблицеЯНажимаюКнопкуОчиститьУПоляСИменем(Парам01,Парам02)
Функция ВТаблицеЯНажимаюКнопкуОчиститьУПоляСИменем(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВТаблицеЯНажимаюКнопкуОчиститьУПоля(ИмяТЧ,ИмяРеквизита,Истина);
КонецФункции







&НаКлиенте
//И В открытой форме в таблице  "Список" я перехожу на первую строку
//@ВОткрытойФормеВТЧЯПерехожуНаПервуюСтроку(Парам01)
Функция ВОткрытойФормеВТЧЯПерехожуНаПервуюСтроку(ИмяТЧ) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	ТЧ.ПерейтиКПервойСтроке();
КонецФункции

&НаКлиенте
//И В таблице  "Список" я перехожу на первую строку
//@ВТЧЯПерехожуНаПервуюСтроку(Парам01)
Функция ВТЧЯПерехожуНаПервуюСтроку(ИмяТЧ) Экспорт
	ВОткрытойФормеВТЧЯПерехожуНаПервуюСтроку(ИмяТЧ);
КонецФункции

&НаКлиенте
//И В открытой форме в таблице  "Список" я перехожу на последнюю строку
//@ВОткрытойФормеВТЧЯПерехожуНаПоследнююСтроку(Парам01)
Функция ВОткрытойФормеВТЧЯПерехожуНаПоследнююСтроку(ИмяТЧ) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	ТЧ.ПерейтиКПоследнейСтроке();
КонецФункции

&НаКлиенте
//И В таблице  "Список" я перехожу на последнюю строку
//@ВТЧЯПерехожуНаПоследнююСтроку(Парам01)
Функция ВТЧЯПерехожуНаПоследнююСтроку(ИмяТЧ) Экспорт
	ВОткрытойФормеВТЧЯПерехожуНаПоследнююСтроку(ИмяТЧ);
КонецФункции

&НаКлиенте
//И В открытой форме в таблице  "Список" я перехожу на одну строку вверх
//@ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВверх(Парам01)
Функция ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВверх(ИмяТЧ) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	ТЧ.ПерейтиКПредыдущейСтроке();
КонецФункции




&НаКлиенте
//И в таблице  "Список" я перехожу на один уровень вниз
//@ВТаблицеЯПерехожуНаОдинУровеньВниз(Парам01)
Функция ВТаблицеЯПерехожуНаОдинУровеньВниз(ИмяТЧ) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	ТЧ.ПерейтиНаУровеньВниз();
КонецФункции

&НаКлиенте
//И в таблице  "Список" я перехожу на один уровень вверх
//@ВТаблицеЯПерехожуНаОдинУровеньВверх(Парам01)
Функция ВТаблицеЯПерехожуНаОдинУровеньВверх(ИмяТЧ) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	ТЧ.ПерейтиНаУровеньВверх();
КонецФункции

&НаКлиенте
//И в таблице  ""ИмяТаблицы"" я начинаю редактирование строки
//@ВТаблицеЯНачинаюРедактированиеСтроки(Парам01)
Функция ВТаблицеЯНачинаюРедактированиеСтроки(ИмяТЧ) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	Если НЕ ТЧ.ТекущийРежимРедактирование() Тогда
		ТЧ.ИзменитьСтроку();
	КонецЕсли;	 
КонецФункции






&НаКлиенте
//И В открытой форме в таблице  "Список" я перехожу на одну строку вниз
//@ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВниз(Парам01)
Функция ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВниз(ИмяТЧ) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	ТЧ.ПерейтиКСледующейСтроке();
КонецФункции

&НаКлиенте
//И В открытой форме в таблице  "Список" я перехожу на одну строку вверх
//@ВТЧЯПерехожуНаОднуСтрокуВверх(Парам01)
Функция ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВверхСВыделением(ИмяТЧ) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	ТЧ.ПерейтиКПредыдущейСтроке(Истина);
КонецФункции

&НаКлиенте
//И В таблице  "Список" я перехожу на одну строку вверх
//@ВТЧЯПерехожуНаОднуСтрокуВверхСВыделением(Парам01)
Функция ВТЧЯПерехожуНаОднуСтрокуВверхСВыделением(ИмяТЧ) Экспорт
	ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВверхСВыделением(ИмяТЧ);
КонецФункции

&НаКлиенте
//И В таблице  "Список" я перехожу на одну строку вверх
//@ВТаблицеЯПерехожуНаОднуСтрокуВверхСВыделением(Парам01)
Функция ВТаблицеЯПерехожуНаОднуСтрокуВверхСВыделением(ИмяТЧ) Экспорт
	ВТЧЯПерехожуНаОднуСтрокуВверхСВыделением(ИмяТЧ);
КонецФункции

&НаКлиенте
//И В открытой форме в таблице  "Список" я перехожу на одну строку вниз
//@ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВниз(Парам01)
Функция ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВнизСВыделением(ИмяТЧ) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	ТЧ.ПерейтиКСледующейСтроке(Истина);
КонецФункции

&НаКлиенте
//И В таблице  "Список" я перехожу на одну строку вниз
//ВТЧЯПерехожуНаОднуСтрокуВнизСВыделением(Парам01)
Функция ВТЧЯПерехожуНаОднуСтрокуВнизСВыделением(ИмяТЧ) Экспорт
	ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВнизСВыделением(ИмяТЧ);
КонецФункции

&НаКлиенте
//И В таблице  "Список" я перехожу на одну строку вниз
//ВТаблицеЯПерехожуНаОднуСтрокуВнизСВыделением(Парам01)
Функция ВТаблицеЯПерехожуНаОднуСтрокуВнизСВыделением(ИмяТЧ) Экспорт
	ВТЧЯПерехожуНаОднуСтрокуВнизСВыделением(ИмяТЧ);
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьЗначениеРеквизитаСправочника(ИмяСпр,Наименование,ИмяРек,СтроковокПредставление)
	Элем = Справочники[ИмяСпр].НайтиПоНаименованию(Наименование,Истина);
	Если Не ЗначениеЗаполнено(Элем) Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если СокрЛП(Элем[ИмяРек]) <> СтроковокПредставление Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	

&НаКлиенте
//И Есть элемент справочника "Справочник1" с наименованием "Тест" и  реквизитом "Реквизит2" равным "Группа2Элем2"
//@ЕстьЭлементСправочникаСНаименованиемИРеквизитомРавным(Парам01,Парам02,Парам03,Парам04)
Функция ЕстьЭлементСправочникаСНаименованиемИРеквизитомРавным(ИмяСпр,Наименование,ИмяРек,СтроковокПредставление) Экспорт
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не нашел значение реквизита у спр: ИмяСпр=%1, Наименование=%2, ИмяРек=%3, СтроковокПредставление=%4");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяСпр); 
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Наименование); 
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ИмяРек); 
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",СтроковокПредставление); 
	Ванесса.ПроверитьРавенство(ПроверитьЗначениеРеквизитаСправочника(ИмяСпр,Наименование,ИмяРек,СтроковокПредставление),Истина,ТекстСообщения);
КонецФункции





&НаКлиенте
//И В открытой форме я перехожу к закладке с заголовком "Вспомогательная"
//@ВОткрытойФормеЯПерехожуКЗакладкеСЗаголовком(Парам01)
Функция ВОткрытойФормеЯПерехожуКЗакладкеСЗаголовком(ИмяЗакладки,ИскатьПоИмени = Ложь) Экспорт
	
	ТекстОшибки = "";
	БылаОшибка = Ложь;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		ТекстОшибки = "";
		
		Попытка
			Ванесса.УбратьФиксированиеГруппыДляПоискаЭлементов();
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ПоискЗакладки",Истина);
			ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Ложь);
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ПолеЗакладка = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЗакладки, ИскатьПоИмени, Истина, Тип("ТестируемаяГруппаФормы"),ДопПараметры);
			Если ПолеЗакладка = Неопределено Тогда
				Если ИскатьПоИмени Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Закладка с именем <%1> не найдена.");
				Иначе	
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Закладка с заголовком <%1> не найдена.");
				КонецЕсли;	 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЗакладки); 
				
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Ванесса.АктивизироватьЗакладку(ПолеЗакладка);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
//И В открытой форме я перехожу к закладке "Вспомогательная"
//@ВОткрытойФормеЯПерехожуКЗакладке(Парам01)
Функция ВОткрытойФормеЯПерехожуКЗакладке(ИмяЗакладки,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯПерехожуКЗакладкеСЗаголовком(ИмяЗакладки,ИскатьПоИмени);
КонецФункции







&НаКлиенте
//И В открытой форме я перехожу к закладке с именем "Вспомогательная"
//@ВОткрытойФормеЯПерехожуКЗакладкеСИменем(Парам01)
Функция ВОткрытойФормеЯПерехожуКЗакладкеСИменем(ИмяЗакладки) Экспорт
	ВОткрытойФормеЯПерехожуКЗакладкеСЗаголовком(ИмяЗакладки,Истина);
КонецФункции






&НаКлиенте
//И В открытой форме я сворачиваю группу с заголовком "СворачиваемаяГруппа"
//@ВОткрытойФормеЯСворачиваюГруппуСЗаголовком(Парам01)
Функция ВОткрытойФормеЯСворачиваюГруппуСЗаголовком(ИмяГруппы,ИскатьПоИмени = Ложь) Экспорт
	ТекстОшибки = "";
	БылаОшибка = Ложь;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		ТекстОшибки = "";
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ТекущаяФормаЭлемента",Неопределено);
			ДопПараметры.Вставить("ИсключитьГруппы",Ложь);
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			Группа = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяГруппы, ИскатьПоИмени, Истина, Тип("ТестируемаяГруппаФормы"),ДопПараметры);
			Если Группа = Неопределено  Тогда
				Если ИскатьПоИмени Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Группа с именем <%1> не найдена.");
				Иначе	
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Группа с заголовком <%1> не найдена.");
				КонецЕсли;	 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяГруппы); 
				
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Группа.Активизировать();
			Ванесса.ПереместитьКурсорКПолю(Группа);
			Попытка
				Группа.Свернуть();
			Исключение
			КонецПопытки;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И В открытой форме я сворачиваю группу "СворачиваемаяГруппа"
//@ВОткрытойФормеЯСворачиваюГруппу(Парам01)
Функция ВОткрытойФормеЯСворачиваюГруппу(ИмяГруппы,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯСворачиваюГруппуСЗаголовком(ИмяГруппы,ИскатьПоИмени);
КонецФункции






&НаКлиенте
//И В открытой форме я сворачиваю группу с именем "СворачиваемаяГруппа"
//@ВОткрытойФормеЯСворачиваюГруппуСИменем(Парам01)
Функция ВОткрытойФормеЯСворачиваюГруппуСИменем(ИмяГруппы) Экспорт
	ВОткрытойФормеЯСворачиваюГруппуСЗаголовком(ИмяГруппы,Истина);	
КонецФункции



&НаКлиенте
//И В открытой форме я разворачиваю группу с заголовком "СворачиваемаяГруппа"
//@ВОткрытойФормеЯРазворачиваюГруппуСЗаголовком(Парам01)
Функция ВОткрытойФормеЯРазворачиваюГруппуСЗаголовком(ИмяГруппы,ИскатьПоИмени = Ложь) Экспорт
	ТекстОшибки = "";
	БылаОшибка = Ложь;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		ТекстОшибки = "";
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ТекущаяФормаЭлемента",Неопределено);
		ДопПараметры.Вставить("ИсключитьГруппы",Ложь);
		ДопПараметры.Вставить("КоличествоПопыток", 1);
		
		Попытка
			Группа = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяГруппы, ИскатьПоИмени, Истина, Тип("ТестируемаяГруппаФормы"),ДопПараметры);
			
			Если Группа = Неопределено Тогда
				Если ИскатьПоИмени Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Группа с именем <%1> не найдена.");
				Иначе	
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Группа с заголовком <%1> не найдена.");
				КонецЕсли;	 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяГруппы); 
				
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			ТекущаяФорма = ДопПараметры.ТекущаяФормаЭлемента;
			
			ПредыдущийЭлементФормы = Неопределено;
			ТекущийЭлементФормы    = Неопределено;
			
			Попытка
				ПредыдущийЭлементФормы = ТекущаяФорма.ПолучитьТекущийЭлемент();
			Исключение
			КонецПопытки;
			
			Группа.Активизировать();
			
			Попытка
				ТекущийЭлементФормы = ТекущаяФорма.ПолучитьТекущийЭлемент();
			Исключение
			КонецПопытки;
			
			Ванесса.ПереместитьКурсорКПолю(Группа);
			Попытка
				Группа.Развернуть();
			Исключение
			КонецПопытки;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И В открытой форме я разворачиваю группу "СворачиваемаяГруппа"
//@ВОткрытойФормеЯРазворачиваюГруппу(Парам01)
Функция ВОткрытойФормеЯРазворачиваюГруппу(ИмяГруппы,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯРазворачиваюГруппуСЗаголовком(ИмяГруппы,ИскатьПоИмени);
КонецФункции







&НаКлиенте
//И В открытой форме я разворачиваю группу с именем "СворачиваемаяГруппа"
//@ВОткрытойФормеЯРазворачиваюГруппуСИменем(Парам01)
Функция ВОткрытойФормеЯРазворачиваюГруппуСИменем(ИмяГруппы) Экспорт
	ВОткрытойФормеЯРазворачиваюГруппуСЗаголовком(ИмяГруппы,Истина);
КонецФункции



&НаКлиенте
//И В открытой форме я нажимаю на гиперссылку с заголовком "Гиперссылка"
//@ВОткрытойФормеЯНажимаюНаГиперссылкуСЗаголовком(Парам01)
Функция ВОткрытойФормеЯНажимаюНаГиперссылкуСЗаголовком(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	
	ТекстОшибки = "";
	БылаОшибка = Ложь;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		ТекстОшибки = "";
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ИскатьТолькоПоляГиперссылок",Истина);
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ПолеГиперссылка = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, Неопределено,ДопПараметры);	
			
			ПолеГиперссылка.Активизировать();
			
			Ванесса.НажатьНаКнопкуФормы(ПолеГиперссылка, Истина);
			
			//ПолеГиперссылка.Нажать();
			
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 
	
	ДопПараметрыОбработатьСменуАктивногоОкна = Новый Структура;
	ДопПараметрыОбработатьСменуАктивногоОкна.Вставить("СбрасыватьЗафиксированнуюГруппу", Ложь);
	Ванесса.ОбработатьСменуАктивногоОкна(ДопПараметрыОбработатьСменуАктивногоОкна);
КонецФункции

&НаКлиенте
//И В открытой форме я нажимаю на гиперссылку "Гиперссылка"
//@ВОткрытойФормеЯНажимаюНаГиперссылку(Парам01)
Функция ВОткрытойФормеЯНажимаюНаГиперссылку(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯНажимаюНаГиперссылкуСЗаголовком(ИмяРеквизита,ИскатьПоИмени);
КонецФункции






&НаКлиенте
//И В открытой форме я нажимаю на гиперссылку с именем "Гиперссылка"
//@ВОткрытойФормеЯНажимаюНаГиперссылкуСИменем(Парам01)
Функция ВОткрытойФормеЯНажимаюНаГиперссылкуСИменем(ИмяРеквизита) Экспорт
	ВОткрытойФормеЯНажимаюНаГиперссылкуСЗаголовком(ИмяРеквизита,Истина);
КонецФункции


&НаКлиенте
//Тогда элемент формы "Наименование" стал равен шаблону "111"
//@ЭлементФормыСталРавенШаблону(Парам01,Парам02)
Функция ЭлементФормыСталРавенШаблону(ИмяЭлемента, СтроковоеПредставление, ИскатьПоИмени = Ложь) Экспорт
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	ТекстСообщения = "";
	БылаОшибка = Ложь;
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		ТекстСообщения = "";
		БылаОшибка = Ложь;
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени,,,ДопПараметры);
			
			ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(ЭлементФормы);
			
			СтроковоеПредставление = ПолучитьКорректныйТекстДляВставкиВПоле(СтроковоеПредставление);
			
			Если НЕ Ванесса.СтрокаСоответствуетШаблону(ПредставлениеДанных, СтроковоеПредставление) Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Для элемента формы <%1> текущее значение равно:%2, а ожидалось:%3");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяЭлемента);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Символы.ПС + ПредставлениеДанных + Символы.ПС);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", Символы.ПС + СтроковоеПредставление);
				
				Если СчетчикПопыток = КоличествоПопыток Тогда
					ТекстСообщения = Ванесса.ДобавитьСтрокуВозможногоШаблона(ТекстСообщения, ПредставлениеДанных, СтроковоеПредставление);
				КонецЕсли;	
				
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Прервать;
			
		Исключение
			
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
//Тогда элемент формы с именем "Наименование" стал равен шаблону "111"
//@ЭлементФормыСИменемСталРавенШаблону(Парам01,Парам02)
Функция ЭлементФормыСИменемСталРавенШаблону(ИмяЭлемента,СтроковоеПредставление,ИскатьПоИмени = Ложь) Экспорт
	ЭлементФормыСталРавенШаблону(ИмяЭлемента,СтроковоеПредставление,Истина);
КонецФункции


&НаКлиенте
//Тогда элемент формы "Наименование" стал равен по шаблону "111"
//@ЭлементФормыСталРавенПоШаблону(Парам01,Парам02)
Функция ЭлементФормыСталРавенПоШаблону(ИмяЭлемента,СтроковоеПредставление,ИскатьПоИмени = Ложь) Экспорт
	ЭлементФормыСталРавенШаблону(ИмяЭлемента, СтроковоеПредставление, Ложь);
КонецФункции

&НаКлиенте
//Тогда элемент формы с именем "Наименование" стал равен по шаблону "111"
//@ЭлементФормыСИменемСталРавенПоШаблону(Парам01,Парам02)
Функция ЭлементФормыСИменемСталРавенПоШаблону(ИмяЭлемента,СтроковоеПредставление) Экспорт
	ЭлементФормыСталРавенШаблону(ИмяЭлемента, СтроковоеПредставление, Истина);
КонецФункции

&НаКлиенте
Процедура ПроверитьЗначениеЭлементаФормы(ЭлементФормы, СтроковоеПредставление, ИмяЭлемента, ПредставлениеДанных, ПараметрыПроверки)
	
	СчетчикПопыток = ПараметрыПроверки.СчетчикПопыток;
	КоличествоПопыток = ПараметрыПроверки.КоличествоПопыток;
	ПолучатьШаблон = Истина;
	Если ПараметрыПроверки.Свойство("ПолучатьШаблон") Тогда
		ПолучатьШаблон = ПараметрыПроверки.ПолучатьШаблон;
	КонецЕсли;
	ОбернутьВУгловыеСкобки = Истина;
	Если ПараметрыПроверки.Свойство("ОбернутьВУгловыеСкобки") Тогда
		ОбернутьВУгловыеСкобки = ПараметрыПроверки.ОбернутьВУгловыеСкобки;
	КонецЕсли;
	ПоШаблону = Ложь;
	Если ПараметрыПроверки.Свойство("ПоШаблону") Тогда
		ПоШаблону = ПараметрыПроверки.ПоШаблону;
	КонецЕсли;
	
	СтроковоеПредставление = ПолучитьКорректныйТекстДляВставкиВПоле(СтроковоеПредставление);
	
	ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(ЭлементФормы);
	Если ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка Тогда
		ПредставлениеДанных = ПривестиЗначениеФлагаКСтандарту(ПредставлениеДанных);
		СтроковоеПредставление = ПривестиЗначениеФлагаКСтандарту(СтроковоеПредставление);
	КонецЕсли;	 
	
	ОшибкаСравненияЗначений = Ложь;
	ЕстьОшибка = Ложь;
	Если ПоШаблону Тогда
		Если НЕ Ванесса.СтрокаСоответствуетШаблону(ПредставлениеДанных,СтроковоеПредставление) Тогда
			ЕстьОшибка = Истина;
		КонецЕсли;	 
	Иначе	
		Если НЕ Ванесса.СтрокиРавны(ПредставлениеДанных,СтроковоеПредставление) Тогда
			ЕстьОшибка = Истина;
		КонецЕсли;	 
	КонецЕсли;
	
	Если ЕстьОшибка Тогда
		ОшибкаСравненияЗначений = Истина;
		ПараметрыПроверки.Вставить("ОшибкаСравненияЗначений", ОшибкаСравненияЗначений);
		Если ОбернутьВУгловыеСкобки Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Для элемента формы <%1> текущее значение равно <%2>, а ожидалось <%3>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПредставлениеДанных);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",СтроковоеПредставление);
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Для элемента формы <%1> текущее значение равно:%2, а ожидалось:%3");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Символы.ПС + ПредставлениеДанных + Символы.ПС);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Символы.ПС + СтроковоеПредставление);
		КонецЕсли;	
		
		Если ПолучатьШаблон И СчетчикПопыток = КоличествоПопыток Тогда
			ТекстСообщения = Ванесса.ДобавитьСтрокуВозможногоШаблона(ТекстСообщения, ПредставлениеДанных, СтроковоеПредставление);
		КонецЕсли;
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
//Тогда элемент формы "Наименование" стал равен "111"
//@ЭлементФормыСталРавен(Парам01,Парам02)
Функция ЭлементФормыСталРавен(ИмяЭлемента,Знач СтроковоеПредставление,ИскатьПоИмени = Ложь) Экспорт
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	ТекстСообщения = "";
	БылаОшибка = Ложь;
	ОшибкаСравненияЗначений = Ложь;
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		ТекстСообщения = "";
		БылаОшибка = Ложь;
		ОшибкаСравненияЗначений = Ложь;
		ПараметрыПроверки = Неопределено;
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ИсключитьГруппы",Истина);
			ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Ложь);
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени,,,ДопПараметры);
			
			ПредставлениеДанных = Неопределено; 
			ПараметрыПроверки = Новый Структура;
			ПараметрыПроверки.Вставить("СчетчикПопыток", СчетчикПопыток);
			ПараметрыПроверки.Вставить("КоличествоПопыток", КоличествоПопыток);
			ПараметрыПроверки.Вставить("ОшибкаСравненияЗначений", ОшибкаСравненияЗначений);
			ПроверитьЗначениеЭлементаФормы(ЭлементФормы, СтроковоеПредставление, ИмяЭлемента, ПредставлениеДанных, ПараметрыПроверки);
			
			Прервать;
			
		Исключение
			Если ТипЗнч(ПараметрыПроверки) = Тип("Структура") И ПараметрыПроверки.Свойство("ОшибкаСравненияЗначений") Тогда
				ОшибкаСравненияЗначений = ПараметрыПроверки.ОшибкаСравненияЗначений;
			КонецЕсли;	
			
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		Если ОшибкаСравненияЗначений Тогда
			ДанныеДляАктуализации = Новый Структура;
			ДанныеДляАктуализации.Вставить("ОжидаемоеЗначение", СтроковоеПредставление);
			ДанныеДляАктуализации.Вставить("ТекущееЗначение", ПредставлениеДанных);
			Ванесса.УстановитьДанныеДляАктуализации(ДанныеДляАктуализации);
		КонецЕсли;	
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
//Тогда элемент формы с именем "Наименование" стал равен "111"
//@ЭлементФормыСИменемСталРавен(Парам01,Парам02)
Функция ЭлементФормыСИменемСталРавен(ИмяЭлемента,СтроковоеПредставление) Экспорт
	ЭлементФормыСталРавен(ИмяЭлемента,СтроковоеПредставление,Истина);
КонецФункции

&НаКлиенте
Функция ТекстРекдактированияИзЭлементаФормы(ЭлементФормы)
	ТекТекстРедактирования = Неопределено;
	Попытка
		ТекТекстРедактирования = ЭлементФормы.ПолучитьОтображаемыйТекст();
	Исключение
	КонецПопытки;
	
	Если ТекТекстРедактирования = Неопределено Тогда
		Попытка
			ТекТекстРедактирования = ЭлементФормы.ПолучитьТекстРедактирования();
		Исключение
		КонецПопытки;
	КонецЕсли;	 
	
	Если ТекТекстРедактирования = Неопределено Тогда
		ТекТекстРедактирования = "";
	КонецЕсли;
	
	Возврат ТекТекстРедактирования;
	
КонецФункции	

&НаКлиенте
//И у элемента формы с именем "ИмяПоля" текст редактирования стал равен "ТекстПоля"
//@УЭлементаФормыСИменемТекстРедактированияСталРавен(Парам01,Парам02)
Функция УЭлементаФормыСИменемТекстРедактированияСталРавен(ИмяЭлемента,НужныйТекстРедактирования, ПоШаблону = Ложь) Экспорт
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,Истина);
	
	ТекТекстРедактирования = ТекстРекдактированияИзЭлементаФормы(ЭлементФормы);
	
	НужныйТекстРедактирования = ПолучитьКорректныйТекстДляВставкиВПоле(НужныйТекстРедактирования);
	
	Если ПоШаблону Тогда
		Если НЕ Ванесса.СтрокаСоответствуетШаблону(ТекТекстРедактирования, НужныйТекстРедактирования) Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У элемента формы <%1> текущий текст редактирования <%2>, а ожидали <%3>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТекТекстРедактирования);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",НужныйТекстРедактирования);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	Иначе	
		Если ТекТекстРедактирования <> НужныйТекстРедактирования Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У элемента формы <%1> текущий текст редактирования <%2>, а ожидали <%3>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТекТекстРедактирования);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",НужныйТекстРедактирования);
			
			ДанныеДляАктуализации = Новый Структура;
			ДанныеДляАктуализации.Вставить("ОжидаемоеЗначение", НужныйТекстРедактирования);
			ДанныеДляАктуализации.Вставить("ТекущееЗначение", ТекТекстРедактирования);
			Ванесса.УстановитьДанныеДляАктуализации(ДанныеДляАктуализации);
			
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И у элемента формы с именем "ИмяПоля" текст редактирования стал равен "ТекстПоля" по шаблону
//@УЭлементаФормыСИменемТекстРедактированияСталРавенПоШаблону(Парам01,Парам02)
Функция УЭлементаФормыСИменемТекстРедактированияСталРавенПоШаблону(ИмяЭлемента,НужныйТекстРедактирования) Экспорт
	УЭлементаФормыСИменемТекстРедактированияСталРавен(ИмяЭлемента,НужныйТекстРедактирования, Истина);
КонецФункции

&НаКлиенте
Функция ОбработчикУЭлементаФормыСИменемТекстРедактированияСталРавенВТечениеСекунд()
	ИмяОбработчика = "ОбработчикУЭлементаФормыСИменемТекстРедактированияСталРавенВТечениеСекунд";
	ПоШаблону = ПроверкаПоШаблону;
	НужныйТекстРедактирования = ТекстОбработкаОжидания;
	ИмяЭлемента = ИмяПоляОбработкаОжидания;
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	Попытка
		ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмениОбрабткаОжидания);
	Исключение
		ЭлементФормы = Неопределено;
	КонецПопытки;
	
	ТекТекстРедактирования = ТекстРекдактированияИзЭлементаФормы(ЭлементФормы);
	
	Если ПоШаблону Тогда
		Если Ванесса.СтрокаСоответствуетШаблону(ТекТекстРедактирования, НужныйТекстРедактирования) Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчика);
			Ванесса.ПродолжитьВыполнениеШагов();
			Возврат Неопределено;
		КонецЕсли;	 
	Иначе	
		Если ТекТекстРедактирования = НужныйТекстРедактирования Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчика);
			Ванесса.ПродолжитьВыполнениеШагов();
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		
		Если ПоШаблону Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У элемента формы <%1> текущий текст редактирования <%2>, а ожидали <%3> в течение <%4> секунд.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТекТекстРедактирования);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",НужныйТекстРедактирования);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",КоличествоСекундОбработкаОжидания);
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У элемента формы <%1> текущий текст редактирования <%2>, а ожидали <%3> в течение <%4> секунд.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТекТекстРедактирования);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",НужныйТекстРедактирования);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",КоличествоСекундОбработкаОжидания);
			
			ДанныеДляАктуализации = Новый Структура;
			ДанныеДляАктуализации.Вставить("ОжидаемоеЗначение", НужныйТекстРедактирования);
			ДанныеДляАктуализации.Вставить("ТекущееЗначение", ТекТекстРедактирования);
			Ванесса.УстановитьДанныеДляАктуализации(ДанныеДляАктуализации);
		КонецЕсли;	 
		
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
//И у элемента формы с именем 'ИмяПоля' текст редактирования стал равен "ТекстПоля" в течение 10 секунд
//@УЭлементаФормыСИменемТекстРедактированияСталРавенВТечениеСекунд(Парам01,Парам02,Парам03)
Функция УЭлементаФормыСИменемТекстРедактированияСталРавенВТечениеСекунд(ИмяЭлемента,НужныйТекстРедактирования,КоличествоСекунд) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = ИмяЭлемента;
	ИскатьПоИмениОбрабткаОжидания     = Истина;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ТекстОбработкаОжидания            = НужныйТекстРедактирования;
	ПроверкаПоШаблону                 = Ложь;
	ПодключитьОбработчикОжидания("ОбработчикУЭлементаФормыСИменемТекстРедактированияСталРавенВТечениеСекунд",1,Ложь);
КонецФункции

&НаКлиенте
//И у элемента формы с именем 'ИмяПоля' текст редактирования стал равен "ТекстПоля" по шаблону в течение 10 секунд
//@УЭлементаФормыСИменемТекстРедактированияСталРавенПоШаблонуВТечениеСекунд(Парам01,Парам02,Парам03)
Функция УЭлементаФормыСИменемТекстРедактированияСталРавенПоШаблонуВТечениеСекунд(ИмяЭлемента,НужныйТекстРедактирования,КоличествоСекунд) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = ИмяЭлемента;
	ИскатьПоИмениОбрабткаОжидания     = Истина;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ТекстОбработкаОжидания            = НужныйТекстРедактирования;
	ПроверкаПоШаблону                 = Истина;
	ПодключитьОбработчикОжидания("ОбработчикУЭлементаФормыСИменемТекстРедактированияСталРавенВТечениеСекунд",1,Ложь);
КонецФункции


&НаКлиенте
//Тогда значение поля "Наименование" содержит текст "111"
//@ЗначениеПоляСодержитТекст(Парам01,Парам02)
Функция ЗначениеПоляСодержитТекст(ИмяЭлемента,Знач СтроковоеПредставление,ИскатьПоИмени = Ложь) Экспорт
	//СтроковоеПредставление = Ванесса.ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(СтроковоеПредставление);
	
	Если ТипЗнч(ИскатьПоИмени) <> Тип("Булево") Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В шаг передано слишком много параметров.");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	
	
	ЭлементФормы        = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени);
	ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(ЭлементФормы);
	
	Если Найти(НРег(ПредставлениеДанных),НРег(СтроковоеПредставление)) = 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В значение элемента формы %1 не найдена строка <%2>. Текущее значение поля <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",СтроковоеПредставление);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ПредставлениеДанных);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//Тогда значение поля с именем "Наименование" содержит текст "111"
//@ЗначениеПоляСИменемСодержитТекст(Парам01,Парам02)
Функция ЗначениеПоляСИменемСодержитТекст(ИмяЭлемента,СтроковоеПредставление) Экспорт
	ЗначениеПоляСодержитТекст(ИмяЭлемента,СтроковоеПредставление,Истина);
КонецФункции


&НаКлиенте
//Тогда значение поля "Наименование" не содержит текст "111"
//@ЗначениеПоляНеСодержитТекст(Парам01,Парам02)
Функция ЗначениеПоляНеСодержитТекст(ИмяЭлемента,СтроковоеПредставление,ИскатьПоИмени = Ложь) Экспорт
	ЭлементФормы        = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени);
	ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(ЭлементФормы);
	
	Если Найти(НРег(ПредставлениеДанных),НРег(СтроковоеПредставление)) <> 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В значение элемента формы %1 найдена строка <%2>. Текущее значение поля <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",СтроковоеПредставление);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ПредставлениеДанных);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//Тогда значение поля с именем "Наименование" не содержит текст "111"
//@ЗначениеПоляСИменемНеСодержитТекст(Парам01,Парам02)
Функция ЗначениеПоляСИменемНеСодержитТекст(ИмяЭлемента,СтроковоеПредставление) Экспорт
	ЗначениеПоляНеСодержитТекст(ИмяЭлемента,СтроковоеПредставление,Истина);
КонецФункции




&НаКлиенте
//И я активизирую поле "Имя поля"
//@ЯАктивизируюПоле(Парам01)
Функция ЯАктивизируюПоле(ИмяЭлемента,ИскатьПоИмени = Ложь) Экспорт
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени);
	Ванесса.ПереместитьКурсорКПолю(ЭлементФормы);
	ЭлементФормы.Активизировать();        
КонецФункции

&НаКлиенте
//И я активизирую поле с именем "Имя поля"
//@ЯАктивизируюПолеСИменем(Парам01,Парам02)
Функция ЯАктивизируюПолеСИменем(ИмяЭлемента,ИскатьПоИмени = Ложь) Экспорт
	ЯАктивизируюПоле(ИмяЭлемента,Истина);
КонецФункции

&НаКлиенте
//Тогда текст ячейки таблицы "Таблица" "Наименование" стал равен "111"
//@ТекстЯчейкиТаблицыСталРавен(Парам01,Парам02,Парам03)
Функция ТекстЯчейкиТаблицыСталРавен(ИмяТЧ,ИмяЭлемента,Знач СтроковоеПредставление,ИскатьПоИмени = Истина, ПоШаблону = Ложь) Экспорт
	ТекстОшибки = "";
	Ошибка = Ложь;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	ОшибкаСравненияЗначений = Ложь;
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Ошибка = Ложь;
		ТекстОшибки = "";
		ОшибкаСравненияЗначений = Ложь;
		
		Попытка
			
			ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
			Если ИскатьПоИмени Тогда
				ПредставлениеДанных = ТЧ.ПолучитьТекстЯчейки(ИмяЭлемента);
			Иначе
				ВыделенныеСтроки = ТЧ.ПолучитьВыделенныеСтроки();
				Если ВыделенныеСтроки.Количество() = 0 Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> не найдено ни одной строки");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				ЗначениеТекущейСтроки = ВыделенныеСтроки[0];
				ПредставлениеДанных   = ЗначениеТекущейСтроки[ИмяЭлемента];
				Если ПредставлениеДанных = Неопределено Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> не найдено ячейки с заголовком <%2>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяЭлемента);
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
			КонецЕсли;	 
			
			СтроковоеПредставление = ПолучитьКорректныйТекстДляВставкиВПоле(СтроковоеПредставление);
			
			Если ПоШаблону Тогда
				Если Не Ванесса.СтрокаСоответствуетШаблону(ПредставлениеДанных, СтроковоеПредставление) Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Для ячейки <%1> таблицы <%2> текущее значение равно:%3, а ожидалось:%4");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяТЧ);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Символы.ПС + ПредставлениеДанных + Символы.ПС);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",Символы.ПС + СтроковоеПредставление);
					
					Если СчетчикПопыток = КоличествоПопыток Тогда
						ТекстСообщения = Ванесса.ДобавитьСтрокуВозможногоШаблона(ТекстСообщения, ПредставлениеДанных, СтроковоеПредставление);
					КонецЕсли;	
					
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	
			Иначе	
				Если ПредставлениеДанных <> СтроковоеПредставление Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Для ячейки <%1> таблицы <%2> текущее значение равно:%3, а ожидалось:%4");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяТЧ);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Символы.ПС + ПредставлениеДанных + Символы.ПС);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",Символы.ПС + СтроковоеПредставление);
					
					Если СчетчикПопыток = КоличествоПопыток Тогда
						ТекстСообщения = Ванесса.ДобавитьСтрокуВозможногоШаблона(ТекстСообщения, ПредставлениеДанных, СтроковоеПредставление);
					КонецЕсли;	
					
					ОшибкаСравненияЗначений = Истина;
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	
			КонецЕсли;	 
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Ошибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
			Ванесса.ОбработатьСменуАктивногоОкна();
		КонецПопытки;
		
		Если НЕ Ошибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если Ошибка Тогда 
		
		Если ОшибкаСравненияЗначений Тогда
			ДанныеДляАктуализации = Новый Структура;
			ДанныеДляАктуализации.Вставить("ОжидаемоеЗначение", СтроковоеПредставление);
			ДанныеДляАктуализации.Вставить("ТекущееЗначение", ПредставлениеДанных);
			Ванесса.УстановитьДанныеДляАктуализации(ДанныеДляАктуализации);
		КонецЕсли;	
		
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецФункции


&НаКлиенте
//Тогда текст ячейки таблицы "Таблица" "Наименование" стал равен "111"
//@ТекстТекущейЯчейкиТаблицыСталРавен(Парам01,Парам02)
Функция ТекстТекущейЯчейкиТаблицыСталРавен(ИмяТЧ,СтроковоеПредставление) Экспорт
	ТекстОшибки = "";
	Ошибка = Ложь;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Ошибка = Ложь;
		ТекстОшибки = "";
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ТЧ                  = Ванесса.НайтиТЧПоИмени(ИмяТЧ,,,, ДопПараметры);
			ПредставлениеДанных = ТЧ.ПолучитьТекстЯчейки();
			
			Если ПредставлениеДанных <> СтроковоеПредставление Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Для текущей ячейки таблицы <%1> текущее значение равно:%2, а ожидалось:%3");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПредставлениеДанных + Символы.ПС);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",СтроковоеПредставление);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Ошибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
			Ванесса.ОбработатьСменуАктивногоОкна();
		КонецПопытки;
		
		Если НЕ Ошибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если Ошибка Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
КонецФункции




&НаКлиенте
Процедура ПолеЗаполненоСлужебный(ИмяЭлемента,ИскатьПоИмени,ПроверятьЗаполненность)
	
	Значение = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени);
	Если ПроверятьЗаполненность И Не ЗначениеЗаполнено(Значение) Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что поле с заголовком <%1> будет заполнено, но оно пустое.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если НЕ ПроверятьЗаполненность И ЗначениеЗаполнено(Значение) Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что поле с заголовком <%1> будет не заполнено, но оно не пустое.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//И поле "Имя поля" заполнено
//@ПолеЗаполнено(Парам01)
Функция ПолеЗаполнено(ИмяЭлемента) Экспорт
	
	ПолеЗаполненоСлужебный(ИмяЭлемента, Ложь, Истина);
	
КонецФункции

&НаКлиенте
//И поле с именем "Имя поля" заполнено
//@ПолеСИменемЗаполнено(Парам01)
Функция ПолеСИменемЗаполнено(ИмяЭлемента) Экспорт
	
	ПолеЗаполненоСлужебный(ИмяЭлемента, Истина, Истина);
	
КонецФункции

&НаКлиенте
//И поле "Имя поля" не заполнено
//@ПолеНеЗаполнено(Парам01)
Функция ПолеНеЗаполнено(ИмяЭлемента) Экспорт
	
	ПолеЗаполненоСлужебный(ИмяЭлемента, Ложь, Ложь);
	
КонецФункции

&НаКлиенте
//И поле с именем "Имя поля" не заполнено
//@ПолеСИменемНеЗаполнено(Парам01)
Функция ПолеСИменемНеЗаполнено(ИмяЭлемента) Экспорт
	
	ПолеЗаполненоСлужебный(ИмяЭлемента, Истина, Ложь);
	
КонецФункции



&НаКлиенте
//Если поле "Имя поля" заполнено Тогда
//@ПолеЗаполненоТогда(Парам01)
Функция ПолеЗаполненоТогда(ИмяЭлемента,ИскатьПоИмени = Ложь) Экспорт
	Значение = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени);
	Если ЗначениеЗаполнено(Значение) Тогда
		Ванесса.УстановитьРезультатУсловия(Истина);
	Иначе	
		Ванесса.УстановитьРезультатУсловия(Ложь);
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//Если поле с именем "Имя поля" заполнено Тогда
//@ПолеСИменемЗаполнено(Парам01)
Функция ПолеСИменемЗаполненоТогда(ИмяЭлемента) Экспорт
	ПолеЗаполненоТогда(ИмяЭлемента,Истина);
КонецФункции




&НаКлиенте
Функция ПолучитьСтрокиИзТаблицыTestClient(ТЧ)
	Возврат Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ); 
КонецФункции	

// И таблица формы с именем "ИмяТаблицы" стала равной:
//  @ТаблицаФормыСИменемСталаРавной(Парам01, ТабПарам)
//
// Параметры:
//  ИмяТаблицы	 - Строка	 - 
//  ТабПарам	 - Массив	 - 
//  ДопПараметры - Структура	 - 
//
&НаКлиенте
Функция ТаблицаФормыСИменемСталаРавной(ИмяТаблицы, ТабПарам, ДопПараметры = Неопределено) Экспорт
	
	ТекстОшибки = "";
	Ошибка = Ложь;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Ошибка = Ложь;
		ТекстОшибки = "";
		
		Попытка
			СравнениеПоШаблону = Ложь;
			ПрикреплятьЗначенияТаблицы = Истина;
			Если ДопПараметры <> Неопределено Тогда
				Если ДопПараметры.Свойство("СравнениеПоШаблону") Тогда
					СравнениеПоШаблону = ДопПараметры.СравнениеПоШаблону;
				КонецЕсли;	 
				Если ДопПараметры.Свойство("ПрикреплятьЗначенияТаблицы") Тогда
					ПрикреплятьЗначенияТаблицы = ДопПараметры.ПрикреплятьЗначенияТаблицы;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если ДопПараметры = Неопределено Тогда
				ДопПараметры = Новый Структура;
			КонецЕсли;	 
			
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТаблицы,,,, ДопПараметры);
			
			Ванесса.НайтиКолонкиТаблицыРегулярныеВыражения(ТабПарам, ТЧ);
			
			ЗначениеТЧ = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ, ДопПараметры);
			
			Если ЗначениеТЧ = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить значение таблицы <%1>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			ОшибкаНетКолонок = ПолучитьОшибкаНетКолонок(ИмяТаблицы, ТабПарам);	
			Если Не ПустаяСтрока(ОшибкаНетКолонок) Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ошибка проверки значения таблицы <%1>. %2");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяТаблицы);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ОшибкаНетКолонок);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 			
			
			СтрокаШапки = ТабПарам[0];
			КолСтрок = ТабПарам.Количество()-1;//без шапки
			Если ЗначениеТЧ.Количество() <> КолСтрок Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Таблица <%1> не соответствует эталону. Ожидали <%2> строк, а в ней <%3> строк.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяТаблицы);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", КолСтрок);	
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ЗначениеТЧ.Количество());
				
				Если ПрикреплятьЗначенияТаблицы Тогда
					Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабПарам,ЗначениеТЧ);
					
					МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
					МакетТабПарам   = Ванесса.ПреобразоватьЗначениеВМакет(ТабПарам);
					Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,Ванесса.Локализовать("ТекущееЗначениеТаблицы"));
					Ванесса.ПрикрепитьМакетКСценарию(МакетТабПарам,Ванесса.Локализовать("ЭталонноеЗначениеТаблицы"));
					Если Ванесса.РежимСовместимостиБольшеИлиРавен837 Тогда
						Ванесса.ПрикрепитьМакетКСценарию(Ванесса.ПолучитьРазличияВМакетах(МакетТабПарам, МакетЗначениеТЧ, СтрокаШапки), Ванесса.Локализовать("Различия"));
					КонецЕсли;	 
					
					Ванесса.ПрикрепитьКСценариюДополнительныеФайлыСравненияЗначенияСЭталоном(МакетТабПарам, МакетЗначениеТЧ);
					
				КонецЕсли;	 
				
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Для НомерСтроки = 1 По ТабПарам.Количество()-1 Цикл //в первой строке шапка
				СтрСтарое  = ТабПарам[НомерСтроки];
				СтрНовое   = ЗначениеТЧ[НомерСтроки-1];
				
				Для каждого Колонка Из СтрокаШапки Цикл
					ИмяКолонкиСтарое = СтрокаШапки[Колонка.Ключ];
					
					Попытка
						ЗначСтарое = СтрСтарое[Колонка.Ключ];
					Исключение
						ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Таблица <%1>. Строка №<%2>. Колонка <%3>. Не смог получить значение из эталона.");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяТаблицы);				
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", НомерСтроки);	
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ИмяКолонкиСтарое);					
						ВызватьИсключение ТекстСообщения;
					КонецПопытки;
					
					Если ЗначСтарое = "*" Тогда
						Продолжить;
					КонецЕсли;	 
					
					ИмяКолонкиСтарое = СтрЗаменить(ИмяКолонкиСтарое, "\n", Символы.ПС);
					ЗначНовое  = СтрНовое[ИмяКолонкиСтарое];
					Если ЗначНовое = Неопределено Тогда
						ИмяКолонкиСтарое = СтрокаШапки[Колонка.Ключ];
						ИмяКолонкиСтарое = СтрЗаменить(ИмяКолонкиСтарое, "\n", Символы.ВК + Символы.ПС);
						ЗначНовое  = СтрНовое[ИмяКолонкиСтарое];
					КонецЕсли;	 
					ЗначНовое = СтрЗаменить(ЗначНовое,Символы.НПП," ");
					//ЗначСтарое = СтрЗаменить(ЗначСтарое,"\\n","~ЭкранированиеПереводаСтроки~");
					ЗначСтарое = СтрЗаменить(ЗначСтарое,"\n",Символы.ПС);
					ЗначНовое = СтрЗаменить(ЗначНовое,"\n",Символы.ПС);
					//ЗначСтарое = СтрЗаменить(ЗначСтарое,"~ЭкранированиеПереводаСтроки~","\n");
					ЗначСтарое = СтрЗаменить(ЗначСтарое,Символы.НПП," ");
										
					Если СравнениеПоШаблону Тогда
						Если Не Ванесса.СтрокаСоответствуетШаблону(ЗначНовое, ЗначСтарое) Тогда
							Ванесса.АктивизироватьЭлементформы(ТЧ);
							ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Таблица <%1>. Строка №<%2>. Колонка <%3>. Ожидали <%4>, а получили <%5>");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяТаблицы);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", НомерСтроки);	
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ИмяКолонкиСтарое);	
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%4", ЗначСтарое);	
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%5", ЗначНовое);
							
							Если ПрикреплятьЗначенияТаблицы Тогда
								Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабПарам,ЗначениеТЧ);
								
								МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
								МакетТабПарам   = Ванесса.ПреобразоватьЗначениеВМакет(ТабПарам);
								Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,Ванесса.Локализовать("ТекущееЗначениеТаблицы"));
								Ванесса.ПрикрепитьМакетКСценарию(МакетТабПарам,Ванесса.Локализовать("ЭталонноеЗначениеТаблицы"));
								Если Ванесса.РежимСовместимостиБольшеИлиРавен837 Тогда
									Ванесса.ПрикрепитьМакетКСценарию(Ванесса.ПолучитьРазличияВМакетах(МакетТабПарам, МакетЗначениеТЧ, СтрокаШапки), Ванесса.Локализовать("Различия"));
								КонецЕсли;	 
								
								Ванесса.ПрикрепитьКСценариюДополнительныеФайлыСравненияЗначенияСЭталоном(МакетТабПарам, МакетЗначениеТЧ);
								
							КонецЕсли;	 
							
							ВызватьИсключение ТекстСообщения;
						КонецЕсли;	 
					Иначе	
						Если ЗначНовое <> ЗначСтарое Тогда
							Ванесса.АктивизироватьЭлементформы(ТЧ);
							ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Таблица <%1>. Строка №<%2>. Колонка <%3>. Ожидали <%4>, а получили <%5>");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяТаблицы);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", НомерСтроки);	
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ИмяКолонкиСтарое);	
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%4", ЗначСтарое);	
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%5", ЗначНовое);
							
							Если ПрикреплятьЗначенияТаблицы Тогда
								Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабПарам,ЗначениеТЧ);
								
								МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
								МакетТабПарам   = Ванесса.ПреобразоватьЗначениеВМакет(ТабПарам);
								Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,Ванесса.Локализовать("ТекущееЗначениеТаблицы"));
								Ванесса.ПрикрепитьМакетКСценарию(МакетТабПарам,Ванесса.Локализовать("ЭталонноеЗначениеТаблицы"));
								Если Ванесса.РежимСовместимостиБольшеИлиРавен837 Тогда
									Ванесса.ПрикрепитьМакетКСценарию(Ванесса.ПолучитьРазличияВМакетах(МакетТабПарам, МакетЗначениеТЧ, СтрокаШапки), Ванесса.Локализовать("Различия"));
								КонецЕсли;	 
								
								Ванесса.ПрикрепитьКСценариюДополнительныеФайлыСравненияЗначенияСЭталоном(МакетТабПарам, МакетЗначениеТЧ);
								
							КонецЕсли;	 
							
							ВызватьИсключение ТекстСообщения;
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЦикла;
			КонецЦикла;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Ошибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ Ошибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если Ошибка Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
//Если таблица "ИмяТаблицы" равне переданной тогда
//@ТаблицаРавнаПереданнойТогда(Парам01,ТабПарам)
Функция ТаблицаРавнаПереданнойТогда(ИмяТЧ,ТабПарам) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ПрикреплятьЗначенияТаблицы",Ложь);
	
	Попытка
		ТаблицаФормыСИменемСталаРавной(ИмяТЧ,ТабПарам,ДопПараметры);
	Исключение
		Ванесса.УстановитьРезультатУсловия(Ложь);
		Возврат Неопределено;
	КонецПопытки;
	
	Ванесса.УстановитьРезультатУсловия(Истина);
КонецФункции

&НаКлиенте
//И в таблице ""ИмяТаблицы"" текущая строка равна:
//@ВТаблицеТекущаяСтрокаРавна(Парам01,ТабПарам)
Функция ВТаблицеТекущаяСтрокаРавна(ИмяТЧ,ТабПарам) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВыделятьВсеСтроки",Ложь);
	ТаблицаФормыСИменемСталаРавной(ИмяТЧ,ТабПарам,ДопПараметры);
КонецФункции


&НаКлиенте
//И в таблице "ИмяТаблицы" "КоличествоСтрок" строк, у которых колонка "ИмяКолонки" "ВидСравнения" 2
//@ВТаблицеСтрокУКоторыхКолонка(Парам01,Парам02,Парам03,Парам04,Парам05)
Функция ВТаблицеСтрокУКоторыхКолонка(ИмяТаблицы,НужноеКоличествоСтрок,ИмяКолонки,ПереданныйВидСравнения,НужноеЗначениеКолонки) Экспорт
	ТЧ =  Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	
	ЗначениеТЧ = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ);
	
	Если ЗначениеТЧ = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить значение таблицы <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	КоличествоЗначений = 0;
	
	КоличествоСтрок = ЗначениеТЧ.Количество();
	
	ПолученныйВидСравнения = Ванесса.ПолучитьОператорПоТексту(ПереданныйВидСравнения);
	
	Для Ккк = 0 По КоличествоСтрок-1 Цикл
		СтрокаТаблицы = ЗначениеТЧ[Ккк];
		
		ЗначениеВКолонке = СтрокаТаблицы[ИмяКолонки];
		
		ЗначениеСравнения = Неопределено;
		Выражение = "ЗначениеСравнения = (ЗначениеВКолонке " + ПолученныйВидСравнения + " НужноеЗначениеКолонки)";
		Выполнить(Выражение);
		
		Если ЗначениеСравнения Тогда
			КоличествоЗначений = КоличествоЗначений + 1;
		КонецЕсли;	 
		
	КонецЦикла;	
	
	Если КоличествоЗначений <> Число(НужноеКоличествоСтрок) Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> найдено <%2> значений. А ожидали <%3>. Имя колонки <%4>. Искомое значение <%5>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",КоличествоЗначений);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",НужноеКоличествоСтрок);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ИмяКолонки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",НужноеЗначениеКолонки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции


&НаКлиенте
//И таблица ""ИмяТаблицы"" стала равной:
//@ТаблицаСталаРавной(Парам01,ТабПарам)
Функция ТаблицаСталаРавной(ИмяТЧ,ТабПарам) Экспорт
	ТаблицаФормыСИменемСталаРавной(ИмяТЧ,ТабПарам);
КонецФункции

&НаКлиенте
//И таблица ""ИмяТаблицы"" стала равной макету "ИмяМакета"
//@ТаблицаСталаРавнойМакету(Парам01,ИмяМакета)
Функция ТаблицаСталаРавнойМакету(ИмяТЧ,ИмяМакета,ДопПараметры = Неопределено) Экспорт
	СравнениеПоШаблону         = Ложь;
	ПрикреплятьЗначенияТаблицы = Истина;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("СравнениеПоШаблону") Тогда
			СравнениеПоШаблону = ДопПараметры.СравнениеПоШаблону;
		КонецЕсли;	 
		
		Если ДопПараметры.Свойство("ПрикреплятьЗначенияТаблицы") Тогда
			ПрикреплятьЗначенияТаблицы = ДопПараметры.ПрикреплятьЗначенияТаблицы;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ДопПараметры = Новый Структура;
	ТабДокБыло = ПолучитьМакетИзОбработкиИлиИзКаталогаПроекта(ИмяМакета, ДопПараметры);
	Если ДопПараметры.Свойство("ИмяФайла") Тогда
		ИмяФайлаМакета = ДопПараметры.ИмяФайла;
	Иначе
		ИмяФайлаМакета = Неопределено;
	КонецЕсли;	
	
	БылаОшибкаСравненияЗначений = Ложь;
	
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	ЗначениеТЧ = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяТЧ,Истина);
	
	КолСтрок = ТабДокБыло.ВысотаТаблицы-1;//без шапки
	Если ЗначениеТЧ.Количество() <> КолСтрок Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("ТЧ %1 не соответствует эталону. Ожидали %2 строк, а в ней %3 строк.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",КолСтрок);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ЗначениеТЧ.Количество());
		
		Если ПрикреплятьЗначенияТаблицы Тогда
			Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабДокБыло,ЗначениеТЧ);
			
			МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
			Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,Ванесса.Локализовать("ТекущееЗначениеТаблицы"));
			Ванесса.ПрикрепитьМакетКСценарию(ТабДокБыло,Ванесса.Локализовать("ЭталонноеЗначениеТаблицы"));
			Если Ванесса.РежимСовместимостиБольшеИлиРавен837 Тогда
				Ванесса.ПрикрепитьМакетКСценарию(Ванесса.ПолучитьРазличияВМакетах(ТабДокБыло, МакетЗначениеТЧ), Ванесса.Локализовать("Различия"));
			КонецЕсли;	 
			
			Ванесса.ПрикрепитьКСценариюДополнительныеФайлыСравненияЗначенияСЭталоном(ТабДокБыло, МакетЗначениеТЧ);
			
		КонецЕсли;	 
		
		ПараметрыАктуализации = Новый Структура;
		ПараметрыАктуализации.Вставить("ТипСравненияЗначения", "СравнениеТаблицыСМакетом");
		Если ИмяФайлаМакета <> Неопределено Тогда
			ПараметрыАктуализации.Вставить("ИмяФайлаМакета", ИмяФайлаМакета);
		КонецЕсли;	
		Ванесса.УстановитьЗначенияДляАктуализацииПараметровШага(ПараметрыАктуализации);
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	//СтрокаШапки = ТабПарам[0];
	МассивКолонокВременный = Новый Массив;
	ЗначенияКолонок = Новый Структура;
	Для Сч = 1 По ТабДокБыло.ШиринаТаблицы Цикл
		ИмяКолонки = ТабДокБыло.Область(1,Сч,1,Сч).Текст;
		Ключ = "Кол" + XMLСтрока(Сч);
		ЗначенияКолонок.Вставить(Ключ, ИмяКолонки);
	КонецЦикла;	
	МассивКолонокВременный.Добавить(ЗначенияКолонок);
	
	//Замена заголовков колонок, в которых есть символ *
	Ванесса.НайтиКолонкиТаблицыРегулярныеВыражения(МассивКолонокВременный, ТЧ);
	
	МассивКолонок = Новый Массив;
	Для Каждого КлючЗначение Из МассивКолонокВременный[0] Цикл
		МассивКолонок.Добавить(КлючЗначение.Значение);
	КонецЦикла;	
	
	МассивНеНайденыхКолонок = Новый Массив;
	Для каждого ИмяКолонкиСтарое Из МассивКолонок Цикл
		ЗначениеИзТаблицы = ЗначениеТЧ[0][ИмяКолонкиСтарое];
		Если ЗначениеИзТаблицы = Неопределено Тогда
			ЗначениеИзТаблицы = ЗначениеТЧ[0][СтрЗаменить(ИмяКолонкиСтарое,Символы.ВК,"")];
			//значит такой колонки нет
			Если ЗначениеИзТаблицы = Неопределено Тогда
				МассивНеНайденыхКолонок.Добавить(ИмяКолонкиСтарое);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	
	
	Если МассивНеНайденыхКолонок.Количество() > 0 Тогда
		Стр = "";
		Для Каждого Элем Из МассивНеНайденыхКолонок Цикл
			Стр = Стр + """" +  Элем + """, ";
		КонецЦикла;	
		Стр = Лев(Стр,СтрДлина(Стр)-2);
		
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> не найдены колонки: %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Стр);
		
		Если ПрикреплятьЗначенияТаблицы Тогда
			Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабДокБыло,ЗначениеТЧ);
			
			МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
			Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,Ванесса.Локализовать("ТекущееЗначениеТаблицы"));
			Ванесса.ПрикрепитьМакетКСценарию(ТабДокБыло,Ванесса.Локализовать("ЭталонноеЗначениеТаблицы"));
			Если Ванесса.РежимСовместимостиБольшеИлиРавен837 Тогда
				Ванесса.ПрикрепитьМакетКСценарию(Ванесса.ПолучитьРазличияВМакетах(ТабДокБыло, МакетЗначениеТЧ), Ванесса.Локализовать("Различия"));
			КонецЕсли;	 
			
			Ванесса.ПрикрепитьКСценариюДополнительныеФайлыСравненияЗначенияСЭталоном(ТабДокБыло, МакетЗначениеТЧ);
			
		КонецЕсли;	 
		
		ПараметрыАктуализации = Новый Структура;
		ПараметрыАктуализации.Вставить("ТипСравненияЗначения", "СравнениеТаблицыСМакетом");
		Если ИмяФайлаМакета <> Неопределено Тогда
			ПараметрыАктуализации.Вставить("ИмяФайлаМакета", ИмяФайлаМакета);
		КонецЕсли;	
		Ванесса.УстановитьЗначенияДляАктуализацииПараметровШага(ПараметрыАктуализации);
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	МассивРасхождений = Новый Массив;
	
	Для Ккк = 1 По ТабДокБыло.ВысотаТаблицы-1 Цикл //в первой строке шапка
		СтрНовое   = ЗначениеТЧ[Ккк-1];
		
		НомерКолоноки = 0;
		Для каждого ИмяКолонкиСтарое Из МассивКолонок Цикл
			НомерКолоноки = НомерКолоноки + 1;
			
			ЗначСтарое = ТабДокБыло.Область(Ккк+1,НомерКолоноки,Ккк+1,НомерКолоноки).Текст;
			Если ЗначСтарое = "*" Тогда
				Продолжить;
			КонецЕсли;	 
			
			ЗначНовое  = СтрНовое[ИмяКолонкиСтарое];
			Если ЗначНовое = Неопределено Тогда
				ИмяКолонкиСтарое = СтрЗаменить(ИмяКолонкиСтарое,Символы.ВК,"");
				ЗначНовое  = СтрНовое[ИмяКолонкиСтарое];
			КонецЕсли;	 
			ЗначНовое = СтрЗаменить(ЗначНовое,Символы.НПП," ");
			ЗначСтарое = СтрЗаменить(ЗначСтарое,"\n",Символы.ПС);
			ЗначСтарое = СтрЗаменить(ЗначСтарое,Символы.НПП," ");
			Если Найти(ЗначСтарое,"$") > 0 Тогда
				ЗначСтарое = Ванесса.ПолучитьЗначениеПеременнойИзКонтекста(ЗначСтарое);
			КонецЕсли;	 
			
			Если НЕ СравнениеПоШаблону Тогда
				Если ЗначНовое <> ЗначСтарое Тогда
					Ванесса.АктивизироватьЭлементформы(ТЧ);
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Таблица <%1>. Строка №<%2>. Колонка <%3>. Ожидали <%4>, а получили <%5>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",(Ккк));
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ИмяКолонкиСтарое);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ЗначСтарое);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",ЗначНовое);
					
					Если ПрикреплятьЗначенияТаблицы Тогда
						ЗначениеТаблицыБыло  = Ванесса.ПреобразоватьТабличныйДокументВМассивСтруктур(ТабДокБыло);
						//ЗначениеТаблицыСтало = Ванесса.ПреобразоватьТабличныйДокументВМассивСтруктур(ЗначениеТЧ);
						Ванесса.УстановитьЗначенияТаблицДляСравнения(ЗначениеТаблицыБыло,ЗначениеТЧ);
						
						МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
						Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,Ванесса.Локализовать("ТекущееЗначениеТаблицы"));
						Ванесса.ПрикрепитьМакетКСценарию(ТабДокБыло,Ванесса.Локализовать("ЭталонноеЗначениеТаблицы"));
						Если Ванесса.РежимСовместимостиБольшеИлиРавен837 Тогда
							Ванесса.ПрикрепитьМакетКСценарию(Ванесса.ПолучитьРазличияВМакетах(ТабДокБыло, МакетЗначениеТЧ), Ванесса.Локализовать("Различия"));
						КонецЕсли;	 
						
						Ванесса.ПрикрепитьКСценариюДополнительныеФайлыСравненияЗначенияСЭталоном(ТабДокБыло, МакетЗначениеТЧ);
						
					КонецЕсли;	 
					
					МассивРасхождений.Добавить(ТекстСообщения);
				КонецЕсли;	 
			Иначе
				Если Не Ванесса.СтрокаСоответствуетШаблону(ЗначНовое,ЗначСтарое) Тогда
					Ванесса.АктивизироватьЭлементформы(ТЧ);
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Таблица <%1>. Строка №<%2>. Колонка <%3>. Ожидали <%4>, а получили <%5>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",(Ккк));
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ИмяКолонкиСтарое);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ЗначСтарое);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",ЗначНовое);
					
					Если ПрикреплятьЗначенияТаблицы Тогда
						ЗначениеТаблицыБыло  = Ванесса.ПреобразоватьТабличныйДокументВМассивСтруктур(ТабДокБыло);
						//ЗначениеТаблицыСтало = Ванесса.ПреобразоватьТабличныйДокументВМассивСтруктур(ЗначениеТЧ);
						Ванесса.УстановитьЗначенияТаблицДляСравнения(ЗначениеТаблицыБыло,ЗначениеТЧ);
						
						
						МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
						Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,Ванесса.Локализовать("ТекущееЗначениеТаблицы"));
						Ванесса.ПрикрепитьМакетКСценарию(ТабДокБыло,Ванесса.Локализовать("ЭталонноеЗначениеТаблицы"));
						Если Ванесса.РежимСовместимостиБольшеИлиРавен837 Тогда
							Ванесса.ПрикрепитьМакетКСценарию(Ванесса.ПолучитьРазличияВМакетах(ТабДокБыло, МакетЗначениеТЧ), Ванесса.Локализовать("Различия"));
						КонецЕсли;	 
						
						Ванесса.ПрикрепитьКСценариюДополнительныеФайлыСравненияЗначенияСЭталоном(ТабДокБыло, МакетЗначениеТЧ);
						
					КонецЕсли;	 
					
					МассивРасхождений.Добавить(ТекстСообщения);
				КонецЕсли;	 
			КонецЕсли;	 
			
		КонецЦикла;
	КонецЦикла;
	
	Если МассивРасхождений.Количество() > 0 Тогда
		ТекстСообщения = "";
		Для Каждого Элем Из МассивРасхождений Цикл
			ТекстСообщения = ТекстСообщения + Элем + Символы.ПС;
		КонецЦикла;	 
		
		ПараметрыАктуализации = Новый Структура;
		ПараметрыАктуализации.Вставить("ТипСравненияЗначения", "СравнениеТаблицыСМакетом");
		Если ИмяФайлаМакета <> Неопределено Тогда
			ПараметрыАктуализации.Вставить("ИмяФайлаМакета", ИмяФайлаМакета);
		КонецЕсли;	
		Ванесса.УстановитьЗначенияДляАктуализацииПараметровШага(ПараметрыАктуализации);
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//Если таблица равна макету "ИмяМакета" Тогда
//@ТаблицаРавнаМакетуТогда(Парам01,ИмяМакета)
Функция ТаблицаРавнаМакетуТогда(ИмяТЧ,ИмяМакета) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ПрикреплятьЗначенияТаблицы",Ложь);
	
	Попытка
		ТаблицаСталаРавнойМакету(ИмяТЧ,ИмяМакета,ДопПараметры);
	Исключение
		Ванесса.УстановитьРезультатУсловия(Ложь);
		Возврат Неопределено;
	КонецПопытки;
	
	Ванесса.УстановитьРезультатУсловия(Истина);
КонецФункции

&НаКлиенте
//И таблица ""ИмяТаблицы"" равна макету "ИмяМакета"
//@ТаблицаРавнаМакету(Парам01,ИмяМакета)
Функция ТаблицаРавнаМакету(ИмяТЧ,ИмяМакета) Экспорт
	ТаблицаСталаРавнойМакету(ИмяТЧ,ИмяМакета);
КонецФункции

&НаКлиенте
//И таблица ""ИмяТаблицы"" равна макету "ИмяМакета" по шаблону
//@ТаблицаРавнаМакетуПоШаблону(Парам01,ИмяМакета)
Функция ТаблицаРавнаМакетуПоШаблону(ИмяТЧ,ИмяМакета) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СравнениеПоШаблону",Истина);
	ТаблицаСталаРавнойМакету(ИмяТЧ,ИмяМакета,ДопПараметры);
КонецФункции



//И таблица ""ИмяТаблицы"" стала равной по шаблону:
//@ТаблицаСталаРавнойПоШаблону(Парам01, ТабПарам)
//
&НаКлиенте
Функция ТаблицаСталаРавнойПоШаблону(ИмяТЧ, ТабПарам) Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СравнениеПоШаблону", Истина);
	
	ТаблицаФормыСИменемСталаРавной(ИмяТЧ, ТабПарам, ДопПараметры);
	
КонецФункции




&НаКлиенте
Функция ОбработчикОжиданияЯЖдуЧтоТаблицаСтанетРавнаДаннойВТеченииСекунд()
	ИмяОбработчика = "ОбработчикОжиданияЯЖдуЧтоТаблицаСтанетРавнаДаннойВТеченииСекунд";

	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	Попытка
		ТЧ =  Ванесса.НайтиТЧПоИмени(ИмяТаблицыОбработкаОжидания);
	Исключение
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	ТекущаяФорма = Ванесса.НайтиТекущуюФормуTestClient();	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВыполнятьОбновлениеТаблицы", Истина);
	ДопПараметры.Вставить("ФормаРеквизита", ТекущаяФорма);
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Таблица <%1> не стала равной за <%2> секунд. %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицыОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",СтрокаОшибкаОбработкаОжидания);
		
		ЕстьЗначениеТЧ = Истина;
		Попытка
			ЗначениеТЧ = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ, ДопПараметры);
			МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
		Исключение
			ЕстьЗначениеТЧ = Ложь;
		КонецПопытки;
		
		Если ЕстьЗначениеТЧ Тогда
			Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,Ванесса.Локализовать("ТекущееЗначениеТаблицы"));
		КонецЕсли;	 
		
		СтрокиКоторыеИскалисьВТаблице = Ванесса.ПреобразоватьЗначениеВМакет(ТабПарамОбработкаОжидания);
		Ванесса.ПрикрепитьМакетКСценарию(СтрокиКоторыеИскалисьВТаблице,Ванесса.Локализовать("ЭталонноеЗначениеТаблицы"));
		Если ЕстьЗначениеТЧ Тогда
			Если Ванесса.РежимСовместимостиБольшеИлиРавен837 Тогда
				Ванесса.ПрикрепитьМакетКСценарию(Ванесса.ПолучитьРазличияВМакетах(СтрокиКоторыеИскалисьВТаблице, МакетЗначениеТЧ), Ванесса.Локализовать("Различия"));
			КонецЕсли;	 
		КонецЕсли;	 
		
		Ванесса.ПрикрепитьКСценариюДополнительныеФайлыСравненияЗначенияСЭталоном(СтрокиКоторыеИскалисьВТаблице, МакетЗначениеТЧ);
		
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	
	Попытка
		ЗначениеТЧ = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ, ДопПараметры);
	Исключение
		//возможно форма не отвечает
		Возврат Неопределено;
	КонецПопытки;
	
	
	Попытка
		КоличествоПолученныхСтрок = ЗначениеТЧ.Количество();
	Исключение
		//значит не получилось получить строки таблицы
		Возврат Неопределено;
	КонецПопытки;
	
	ТабПарам = ТабПарамОбработкаОжидания;
	
	КолСтрок = ТабПарам.Количество()-1;//без шапки
	
	Если ЗначениеТЧ.Количество() <> КолСтрок Тогда
		СтрокаОшибкаОбработкаОжидания =  "ТЧ " + ИмяТаблицыОбработкаОжидания + " не соответствует эталону. Ожидали " + КолСтрок + " строк, а в ней " + ЗначениеТЧ.Количество() + " строк.";
		Возврат Неопределено;
	КонецЕсли;	 
	
	СтрокаШапки = ТабПарам[0];
	
	Для Ккк = 1 По ТабПарам.Количество()-1 Цикл //в первой строке шапка
		СтрСтарое  = ТабПарам[Ккк];
		СтрНовое   = ЗначениеТЧ[Ккк-1];
		
		Для каждого Колонка Из СтрокаШапки Цикл
			ИмяКолонкиСтарое = СтрокаШапки[Колонка.Ключ];
			
			ЗначСтарое = СтрСтарое[Колонка.Ключ];
			Если ЗначСтарое = "*" Тогда
				Продолжить;
			КонецЕсли;	 
			
			ЗначНовое  = СтрНовое[ИмяКолонкиСтарое];
			ЗначНовое = СтрЗаменить(ЗначНовое,Символы.НПП," ");
			ЗначСтарое = СтрЗаменить(ЗначСтарое,"\n",Символы.ПС);
			ЗначСтарое = СтрЗаменить(ЗначСтарое,Символы.НПП," ");
			
			Если ЗначНовое <> ЗначСтарое Тогда
				Ванесса.АктивизироватьЭлементформы(ТЧ);
				СтрокаОшибкаОбработкаОжидания =  "ТЧ " + ИмяТаблицыОбработкаОжидания + ". Строка № " + (Ккк) + ". Колонка " + ИмяКолонкиСтарое + ". Ожидали " + ЗначСтарое + ", а получили " + ЗначНовое;
				Возврат Неопределено;
			КонецЕсли;	 
		КонецЦикла;
	КонецЦикла;
	
	//если оказались здесь - значит таблица равна нужной
	ОтключитьОбработчикОжидания(ИмяОбработчика);
	Ванесса.ПродолжитьВыполнениеШагов();
КонецФункции

&НаКлиенте
//И я жду, что таблица "ТабличнаяЧасть1" станет равна данной в течении 20 секунд:
//@ЯЖдуЧтоТаблицаСтанетРавнаДаннойВТеченииСекунд(Парам01,Парам02,ТабПарам)
Функция ЯЖдуЧтоТаблицаСтанетРавнаДаннойВТеченииСекунд(ИмяТаблицы,КоличествоСекунд,ТабПарам) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяТаблицыОбработкаОжидания       = ИмяТаблицы;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ТабПарамОбработкаОжидания         = ТабПарам;
	СтрокаОшибкаОбработкаОжидания     = "";
	ПодключитьОбработчикОжидания("ОбработчикОжиданияЯЖдуЧтоТаблицаСтанетРавнаДаннойВТеченииСекунд",1,Ложь);
КонецФункции

&НаКлиенте
//И я жду, что таблица "ТабличнаяЧасть1" станет равна данной в течение 20 секунд:
//@ЯЖдуЧтоТаблицаСтанетРавнаДаннойВТечениеСекунд(Парам01,Парам02,ТабПарам)
Функция ЯЖдуЧтоТаблицаСтанетРавнаДаннойВТечениеСекунд(ИмяТаблицы,КоличествоСекунд,ТабПарам) Экспорт
	//исправление опечатки
	ЯЖдуЧтоТаблицаСтанетРавнаДаннойВТеченииСекунд(ИмяТаблицы,КоличествоСекунд,ТабПарам);
КонецФункции

&НаКлиенте
Функция ОбработчикОжиданияЯЖдуЧтоТаблицаСтанетСодержатьСтрокиВТечениеСекунд()
	ИмяОбработчика = "ОбработчикОжиданияЯЖдуЧтоТаблицаСтанетСодержатьСтрокиВТечениеСекунд";

	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	Попытка
		ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТаблицыОбработкаОжидания);
	Исключение
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	ТабПарам = ТабПарамОбработкаОжидания;
	
	ТекущаяФорма = Ванесса.НайтиТекущуюФормуTestClient();	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВыполнятьОбновлениеТаблицы", Истина);
	ДопПараметры.Вставить("ФормаРеквизита", ТекущаяФорма);
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Если ВидСравненияОбрабткаОжидания = "Содержит" Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Таблица <%1> не стала содержать строки из переданной таблицы за <%2> секунд. %3");
		Иначе
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Таблица <%1> содержит строки из переданной таблицы за <%2> секунд. %3");
		КонецЕсли;	
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицыОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",СтрокаОшибкаОбработкаОжидания);
		
		Попытка
			ЗначениеТЧ = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ, ДопПараметры);
		Исключение
			//возможно форма не отвечает
			ЗначениеТЧ = Новый Массив;
		КонецПопытки;
		
		МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
		Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,Ванесса.Локализовать("ТекущееЗначениеТаблицы"));
		
		СтрокиКоторыеИскалисьВТаблице = Ванесса.ПреобразоватьЗначениеВМакет(ТабПарам);
		Ванесса.ПрикрепитьМакетКСценарию(СтрокиКоторыеИскалисьВТаблице,Ванесса.Локализовать("СтрокиКоторыеИскалисьВТаблице"));
		
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	
	Попытка
		ЗначениеТЧ = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ, ДопПараметры);
	Исключение
		//возможно форма не отвечает
		Возврат Неопределено;
	КонецПопытки;
	
	
	Попытка
		КоличествоПолученныхСтрок = ЗначениеТЧ.Количество();
	Исключение
		//значит не получилось получить строки таблицы
		Возврат Неопределено;
	КонецПопытки;
	
	МассивОшибок = Новый Массив;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекстСообщенийПользователю",Ванесса.ДанныеПереводаСообщенийПользователю());
	Попытка
		Отказ = Ванесса.ПроизвестиСравнениеТаблицНаВхождениеСтрок(ИмяТаблицыОбработкаОжидания, ТабПарам, ЗначениеТЧ,МассивОшибок,ДопПараметры);
	Исключение
		Отказ = Истина;
		МассивОшибок.Добавить(ОписаниеОшибки());
	КонецПопытки;
	
	Если ВидСравненияОбрабткаОжидания = "Содержит" Тогда
		Если Отказ Тогда
			Стр = "";
			Для Каждого Элем Из МассивОшибок Цикл
				Стр = Стр + Элем + Символы.ПС;
			КонецЦикла;	
			
			СтрокаОшибкаОбработкаОжидания = Ванесса.ПолучитьТекстСообщенияПользователю("Одна или несколько строк эталонной таблицы не найдена в таблице формы%1");
			СтрокаОшибкаОбработкаОжидания = СтрЗаменить(СтрокаОшибкаОбработкаОжидания,"%1",Символы.ПС + Стр);
			Возврат Неопределено;
		КонецЕсли;
	Иначе	
		Если НЕ Отказ Тогда
			Стр = "";
			Для Каждого Элем Из МассивОшибок Цикл
				Стр = Стр + Элем + Символы.ПС;
			КонецЦикла;	
			
			СтрокаОшибкаОбработкаОжидания = Ванесса.ПолучитьТекстСообщенияПользователю("Одна или несколько строк эталонной таблицы найдена в таблице формы%1");
			СтрокаОшибкаОбработкаОжидания = СтрЗаменить(СтрокаОшибкаОбработкаОжидания,"%1",Символы.ПС + Стр);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
		
		
	//если оказались здесь - значит таблица равна нужной
	ОтключитьОбработчикОжидания(ИмяОбработчика);
	Ванесса.ПродолжитьВыполнениеШагов();
КонецФункции 

&НаКлиенте
//И я жду, что таблица "ИмяТаблицы" станет содержать строки в течение 20 секунд:
//@ЯЖдуЧтоТаблицаСтанетСодержатьСтрокиВТечениеСекунд(Парам01,Парам02,ТабПарам)
Функция ЯЖдуЧтоТаблицаСтанетСодержатьСтрокиВТечениеСекунд(ИмяТаблицы,КоличествоСекунд,ТабПарам) Экспорт
	Если ТабПарам.Количество() < 2 Тогда	// шапка + строка данных
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Должны быть переданы минимум 2 строки. Первая строка с именами колонок, вторая и следующие - данные для проверки.");		
	КонецЕсли;
	
	//ТабПарам = Ванесса.ПолучитьЗначенияТаблицыGherkinИзКонтекста(ТабПарам);
	
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяТаблицыОбработкаОжидания       = ИмяТаблицы;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ТабПарамОбработкаОжидания         = ТабПарам;
	СтрокаОшибкаОбработкаОжидания     = "";
	ВидСравненияОбрабткаОжидания      = "Содержит";
	ПодключитьОбработчикОжидания("ОбработчикОжиданияЯЖдуЧтоТаблицаСтанетСодержатьСтрокиВТечениеСекунд",1,Ложь);
КонецФункции

&НаКлиенте
//И я жду, что таблица "ИмяТаблицы" не станет содержать строки в течение 20 секунд:
//@ЯЖдуЧтоТаблицаНеСтанетСодержатьСтрокиВТечениеСекунд(Парам01,Парам02,ТабПарам)
Функция ЯЖдуЧтоТаблицаНеСтанетСодержатьСтрокиВТечениеСекунд(ИмяТаблицы,КоличествоСекунд,ТабПарам) Экспорт
	Если ТабПарам.Количество() < 2 Тогда	// шапка + строка данных
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Должны быть переданы минимум 2 строки. Первая строка с именами колонок, вторая и следующие - данные для проверки.");		
	КонецЕсли;
	
	//ТабПарам = Ванесса.ПолучитьЗначенияТаблицыGherkinИзКонтекста(ТабПарам);
	
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяТаблицыОбработкаОжидания       = ИмяТаблицы;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ТабПарамОбработкаОжидания         = ТабПарам;
	СтрокаОшибкаОбработкаОжидания     = "";
	ВидСравненияОбрабткаОжидания      = "НеСодержит";
	ПодключитьОбработчикОжидания("ОбработчикОжиданияЯЖдуЧтоТаблицаСтанетСодержатьСтрокиВТечениеСекунд",1,Ложь);
КонецФункции


&НаКлиенте
//Тогда таблица формы с именем "ТабличнаяЧасть1" содержит изменения:
//@ТаблицаФормыСИменемСталаРавной(Парам01,ТабПарам)
Функция ТаблицаФормыСИменемСодержитИзменения(ИмяТЧ,ТабПарам) Экспорт
	ТаблицаФормыСИменемСталаРавной(ИмяТЧ,ТабПарам);
КонецФункции

&НаКлиенте
Функция ПолучитьМакетИзОбработкиИлиИзКаталогаПроекта(ИмяМакета,ДопПараметры = Неопределено,ВызыватьИсключение = Истина)
	Макет    = Ванесса.ПолучитьМакетОбработки(ИмяМакета, ДопПараметры);
	Если Макет = Неопределено Тогда
		//будем искать макет в каталоге проекта
		Макет = Ванесса.НайтиМакетВКаталогеПроекта(ИмяМакета, ДопПараметры);
	КонецЕсли;	
	
	Если Макет = Неопределено Тогда
		Если ВызыватьИсключение Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить макет %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяМакета); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Макет; 
КонецФункции	 

&НаКлиенте
//И таблица "ИмяТаблицы" содержит строки только из макета "ИмяМакета"
//@ТаблицаСодержитСтрокиТолькоИзМакета(Парам01,Парам02)
Функция ТаблицаСодержитСтрокиТолькоИзМакета(ИмяТЧ, ИмяМакета) Экспорт
	ТаблицаФормыСИменемСодержитСтроки(ИмяТЧ,Неопределено,ИмяМакета,Ложь,, Истина);
КонецФункции

&НаКлиенте
//И таблица "ИмяТаблицы" содержит строки только из макета "ИмяМакета" по шаблону
//@ТаблицаСодержитСтрокиТолькоИзМакетаПоШаблону(Парам01,Парам02)
Функция ТаблицаСодержитСтрокиТолькоИзМакетаПоШаблону(ИмяТЧ, ИмяМакета) Экспорт
	ТаблицаФормыСИменемСодержитСтроки(ИмяТЧ,Неопределено,ИмяМакета,Истина,, Истина);
КонецФункции

&НаКлиенте
//Тогда таблица формы с именем "ТабличнаяЧасть1" содержит строки:
//@ТаблицаФормыСИменемСодержитСтроки(ИмяТЧ,ТабПарам)
Функция ТаблицаФормыСИменемСодержитСтроки(ИмяТЧ,ТабПарам,ИмяМакета = Неопределено,ПоШаблону = Ложь, ПроверятьВхождение = Истина, ТолькоСтрокиИзЭталона = Ложь) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	ВычислятьЗначенияКонекстаВМакете = Истина;
	
	Если ИмяМакета <> Неопределено Тогда
		Макет    = ПолучитьМакетИзОбработкиИлиИзКаталогаПроекта(ИмяМакета);
		Если ВычислятьЗначенияКонекстаВМакете И ТипЗнч(Макет) = Тип("ТабличныйДокумент") Тогда
			Макет = Ванесса.ВычислитьВМакетеЗначенияКонтекста(Макет);
		КонецЕсли;
		ТабПарам = Ванесса.ПолучитьТаблицуGherkinИзМакета(Макет);
	КонецЕсли;	 
	
	Ванесса.НайтиКолонкиТаблицыРегулярныеВыражения(ТабПарам, ТЧ);
	
	ТекстОшибки = "";
	БылаОшибка = Ложь;
	ЗначениеТЧ = Неопределено;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		ТекстОшибки = "";
		
		Попытка
			ЗначениеТЧ = ПолучитьСтрокиИзТаблицыTestClient(ТЧ);
			
			Попытка
				КоличествоСтрокТаблицы = ЗначениеТЧ.Количество();
			Исключение
				КоличествоСтрокТаблицы = 0;
			КонецПопытки;
			
			Если КоличествоСтрокТаблицы = 0 Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить строки таблицы <%1>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Если ТабПарам.Количество() < 2 Тогда	// шапка + строка данных
				ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Должны быть переданы минимум 2 строки. Первая строка с именами колонок, вторая и следующие - данные для проверки.");		
			КонецЕсли;
			
			МассивОшибок = Новый Массив;
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ТекстСообщенийПользователю",Ванесса.ДанныеПереводаСообщенийПользователю());
			ДопПараметры.Вставить("ПоШаблону",ПоШаблону);
			ДопПараметры.Вставить("ПроверятьВхождение",ПроверятьВхождение);
			ДопПараметры.Вставить("ТолькоСтрокиИзЭталона",ТолькоСтрокиИзЭталона);
			Отказ = Ванесса.ПроизвестиСравнениеТаблицНаВхождениеСтрок(ИмяТЧ, ТабПарам, ЗначениеТЧ,МассивОшибок,ДопПараметры);
			
			Если Отказ Тогда
				Ванесса.ОчиститьКешАктивнойТаблицыTestClient();
				
				Стр = "";
				Для Каждого Элем Из МассивОшибок Цикл
					Стр = Стр + Элем + Символы.ПС;
				КонецЦикла;	
				
				Если ТолькоСтрокиИзЭталона Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Обнаружено расхождение между таблицой клиента тестирования и эталоном. Не найдены строки:%1");
				ИначеЕсли ПроверятьВхождение Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Одна или несколько строк эталонной таблицы не найдена в таблице формы%1");
				Иначе	
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Одна или несколько строк эталонной таблицы найдена в таблице формы%1");
				КонецЕсли;	
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Символы.ПС + Стр);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		МакетЗначениеТЧ = Неопределено;
		Если ЗначениеТЧ <> Неопределено Тогда
			МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
			Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,Ванесса.Локализовать("ТекущееЗначениеТаблицы"));
		КонецЕсли;	 
		СтрокиКоторыеИскалисьВТаблице = Ванесса.ПреобразоватьЗначениеВМакет(ТабПарам);
		Ванесса.ПрикрепитьМакетКСценарию(СтрокиКоторыеИскалисьВТаблице,Ванесса.Локализовать("СтрокиКоторыеИскалисьВТаблице"));
		
		Если МакетЗначениеТЧ <> Неопределено Тогда
			МакетТабПарам   = Ванесса.ПреобразоватьЗначениеВМакет(ТабПарам);
			Ванесса.ПрикрепитьКСценариюДополнительныеФайлыСравненияЗначенияСЭталоном(МакетТабПарам, МакетЗначениеТЧ);
		КонецЕсли;

		Если ЗначениеТЧ <> Неопределено Тогда
			Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабПарам,ЗначениеТЧ);
		КонецЕсли;	

		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//Тогда таблица "ТабличнаяЧасть1" содержит строки:
//@ТаблицаСодержитСтроки(ИмяТЧ,ТабПарам)
Функция ТаблицаСодержитСтроки(ИмяТЧ,ТабПарам) Экспорт
	ТаблицаФормыСИменемСодержитСтроки(ИмяТЧ,ТабПарам);
КонецФункции

&НаКлиенте
//И таблица "ИмяТаблицы" содержит только указанные строки:
//@ТаблицаСодержитТолькоУказанныеСтроки(Парам01,ТабПарам)
Функция ТаблицаСодержитТолькоУказанныеСтроки(ИмяТЧ,ТабПарам) Экспорт
	ТаблицаФормыСИменемСодержитСтроки(ИмяТЧ,ТабПарам,,,,Истина);
КонецФункции

&НаКлиенте
//И таблица "ИмяТаблицы" содержит только указанные строки по шаблону:
//@ТаблицаСодержитТолькоУказанныеСтрокиПоШаблону(Парам01,ТабПарам)
Функция ТаблицаСодержитТолькоУказанныеСтрокиПоШаблону(ИмяТЧ,ТабПарам) Экспорт
	ТаблицаФормыСИменемСодержитСтроки(ИмяТЧ,ТабПарам,,Истина,,Истина);
КонецФункции

&НаКлиенте
//И таблица "ИмяТаблицы" содержит строки по шаблону
//@ТаблицаСодержитСтрокиПоШаблону(Парам01,ТабПарам)
Функция ТаблицаСодержитСтрокиПоШаблону(ИмяТЧ,ТабПарам) Экспорт
	ТаблицаФормыСИменемСодержитСтроки(ИмяТЧ,ТабПарам, Неопределено,Истина);
КонецФункции

&НаКлиенте
//И таблица "ИмяТаблицы" не содержит строки по шаблону
//@ТаблицаНеСодержитСтрокиПоШаблону(Парам01,ТабПарам)
Функция ТаблицаНеСодержитСтрокиПоШаблону(ИмяТЧ,ТабПарам) Экспорт
	ТаблицаФормыСИменемСодержитСтроки(ИмяТЧ,ТабПарам, Неопределено,Истина, Ложь);
КонецФункции

&НаКлиенте
//Тогда таблица "ТабличнаяЧасть1" содержит строки из макета
//@ТаблицаСодержитСтрокиИзМакета(ИмяТЧ,ТабПарам)
Функция ТаблицаСодержитСтрокиИзМакета(ИмяТЧ,ИмяМакета) Экспорт
	ТаблицаФормыСИменемСодержитСтроки(ИмяТЧ,Неопределено,ИмяМакета);
КонецФункции

&НаКлиенте
//Тогда таблица "ТабличнаяЧасть1" содержит строки из макета по шаблону
//@ТаблицаСодержитСтрокиИзМакетаПоШаблону(ИмяТЧ,ТабПарам)
Функция ТаблицаСодержитСтрокиИзМакетаПоШаблону(ИмяТЧ,ИмяМакета) Экспорт
	ТаблицаФормыСИменемСодержитСтроки(ИмяТЧ,Неопределено,ИмяМакета,Истина);
КонецФункции


&НаКлиенте
Функция КолонкиОжидаемойИРельнойТаблицыСовпадают(ПереданныеКолонки,КолонкиТаблицыTestClient,ТабПарам,ЗначениеТЧ,ИмяТЧ)
	ПерваяСтрокаПереданнойТаблицы = ТабПарам[0];
	Для Каждого Значение Из ПерваяСтрокаПереданнойТаблицы Цикл
		ПереданныеКолонки.Добавить(Значение.Значение)
	КонецЦикла;	
	
	ПерваяСтрокаЗначениеТЧ = ЗначениеТЧ[0];
	Для Каждого Значение Из ПерваяСтрокаЗначениеТЧ Цикл
		КолонкиТаблицыTestClient.Добавить(Значение.Ключ)
	КонецЦикла;	
	
	
	
	Стр = "";
	Для Каждого ИмяКолонки Из ПереданныеКолонки Цикл
		Ид = КолонкиТаблицыTestClient.Найти(ИмяКолонки);
		Если Ид = Неопределено Тогда
			Стр = Стр + ИмяКолонки + ";";
		КонецЕсли;	
	КонецЦикла;	
	
	Если Стр <> "" Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> не найдены колонки: %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Стр);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//Тогда таблица "ТабличнаяЧасть1" не содержит строки:
//@ТаблицаНеСодержитСтроки(ИмяТЧ,ТабПарам)
Функция ТаблицаНеСодержитСтроки(ИмяТЧ,ТабПарам,ИмяМакета = Неопределено) Экспорт
	Если ИмяМакета <> Неопределено Тогда
		Макет    = ПолучитьМакетИзОбработкиИлиИзКаталогаПроекта(ИмяМакета);
		ТабПарам = Ванесса.ПолучитьТаблицуGherkinИзМакета(Макет);
	КонецЕсли;	 
	
	Если ТабПарам.Количество() < 2 Тогда	// шапка + строка данных
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Должны быть переданы минимум 2 строки. Первая строка с именами колонок, вторая и следующие - данные для проверки.");		
	КонецЕсли;
	
	ТекстОшибки = "";
	БылаОшибка = Ложь;
	ЗначениеТЧ = Неопределено;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		ТекстОшибки = "";
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ,,,, ДопПараметры);
			
			ЗначениеТЧ = ПолучитьСтрокиИзТаблицыTestClient(ТЧ);
			
			Если ЗначениеТЧ = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить значение таблицы <%1>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			Если ЗначениеТЧ.Количество() = 0 Тогда
				//значит таблица точно не содержит строки
				Прервать;		
			КонецЕсли;	 
			
			//проверим, что переданы все колонки
			ПереданныеКолонки        = Новый Массив;
			КолонкиТаблицыTestClient = Новый Массив;
			
			КолонкиОжидаемойИРельнойТаблицыСовпадают(ПереданныеКолонки,КолонкиТаблицыTestClient,ТабПарам,ЗначениеТЧ,ИмяТЧ);
			
			МассивНайденныхСтрок = Новый Массив;
			
			//проверим, что в таблице нет указанных строк
			Для Ккк = 0 По ЗначениеТЧ.Количество()-1 Цикл
				СтрокаТаблицыTestClient = ЗначениеТЧ[Ккк];
				
				Для Ррр = 1 По ТабПарам.Количество()-1 Цикл
					СтрокаПереданнойТаблицы = ТабПарам[Ррр];
					
					НашлиСтроку = Истина;
					
					Ном = -1;
					Для Каждого ИмяКолонки Из ПереданныеКолонки Цикл
						Ном                       = Ном + 1;
						ЗначениеTestClient        = СтрокаТаблицыTestClient[ИмяКолонки];
						ЗначениеПереданнойТаблицы = СтрокаПереданнойТаблицы["Кол"+ Формат(Ном+1, "ЧГ=; ЧН=0")];
						
						Если ЗначениеTestClient <> ЗначениеПереданнойТаблицы Тогда
							НашлиСтроку = Ложь;
							Прервать;
						КонецЕсли;	 
					КонецЦикла;	
					
					Если НашлиСтроку Тогда
						Если МассивНайденныхСтрок.Найти(СтрокаПереданнойТаблицы) = Неопределено Тогда
							МассивНайденныхСтрок.Добавить(СтрокаПереданнойТаблицы);
						КонецЕсли;	 
					КонецЕсли;	 
					
				КонецЦикла;	
				
			КонецЦикла;	
			
			Если МассивНайденныхСтрок.Количество() > 0 Тогда
				Стр = "";
				Для Каждого СтрокаПереданнойТаблицы Из МассивНайденныхСтрок Цикл
					Если Стр <> "" Тогда
						Стр = Стр +  Символы.ПС;
					КонецЕсли;	 
					Стр = Стр + "|";
					Ном = -1;
					Для Каждого ИмяКолонки Из ПереданныеКолонки Цикл
						Ном = Ном + 1;
						ЗначениеПереданнойТаблицы = СтрокаПереданнойТаблицы["Кол"+ Формат(Ном+1, "ЧГ=; ЧН=0")];
						Стр = Стр + " '" + ЗначениеПереданнойТаблицы + "' |";
					КонецЦикла;	
				КонецЦикла;	
				
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Нашли строки в таблице <%1>:%2");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Символы.ПС + Стр);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		Если ЗначениеТЧ <> Неопределено Тогда
			МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
			Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,Ванесса.Локализовать("ТекущееЗначениеТаблицы"));
		КонецЕсли;	 
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//Тогда таблица "ТабличнаяЧасть1" не содержит строки из макета
//@ТаблицаНеСодержитСтрокиИзМакета(ИмяТЧ,ТабПарам)
Функция ТаблицаНеСодержитСтрокиИзМакета(ИмяТЧ,ИмяМакета) Экспорт
	ТаблицаНеСодержитСтроки(ИмяТЧ,Неопределено,ИмяМакета);
КонецФункции

&НаКлиенте
//Когда В панели разделов я выбираю "Склады"
//@ВПанелиРазделовЯВыбираю(Парам01)
Функция ВПанелиРазделовЯВыбираю(ИмяКнопки, ДопПараметры = Неопределено) Экспорт
	ТекстОшибки = "";
	Ошибка = Ложь;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("КоличествоПопыток") Тогда
			КоличествоПопыток = ДопПараметры.КоличествоПопыток;
		КонецЕсли;	 
	КонецЕсли;	 
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Ошибка = Ложь;
		ТекстОшибки = "";
		
		Попытка
			ПанельРазделов = Ванесса.ПанельРазделов();
			
			КнопкаКомандногоИнтерфейса = ПанельРазделов.НайтиОбъект(Тип("ТестируемаяКнопкаКомандногоИнтерфейса"), ИмяКнопки);
			Если КнопкаКомандногоИнтерфейса = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка панели разделов <%1> не найдена.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКнопки); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Ванесса.НажатьНаКнопкуКИ(КнопкаКомандногоИнтерфейса);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Ошибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ Ошибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если Ошибка Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Ванесса.ОбработатьСменуАктивногоОкна();
КонецФункции

&НаКлиенте
//И В панели функций я активизирую 'ИмяКоманды'
//@ВПанелиФункцийЯАктивизирую(Парам01)
Функция ВПанелиФункцийЯАктивизирую(ИмяКнопки) Экспорт   
	МенюФункцийТекущегоРаздела = Неопределено;
	ПанельФункций = Ванесса.ПанельФункций(МенюФункцийТекущегоРаздела);
	
	Если ПанельФункций <> Неопределено Тогда
		КнопкаКомандногоИнтерфейса = ПанельФункций.НайтиОбъект(Тип("ТестируемаяКнопкаКомандногоИнтерфейса"), ИмяКнопки,,10);
	КонецЕсли;	 
	
	Если КнопкаКомандногоИнтерфейса = Неопределено Тогда
		Если МенюФункцийТекущегоРаздела <> Неопределено Тогда
			КнопкаКомандногоИнтерфейса = МенюФункцийТекущегоРаздела.НайтиОбъект(Тип("ТестируемаяКнопкаКомандногоИнтерфейса"), ИмяКнопки,,10);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если КнопкаКомандногоИнтерфейса = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Команда меню <%1> не найдена в панели функций.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКнопки); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	КнопкаКомандногоИнтерфейса.Активизировать();
	Ванесса.ОбработатьСменуАктивногоОкна();
КонецФункции


&НаКлиенте
//И В панели функций я выбираю "Склады"
//@ВПанелиФункцийЯВыбираю(Парам01)
Функция ВПанелиФункцийЯВыбираю(ИмяКнопки, ДопПараметры = Неопределено) Экспорт
	ТекстОшибки = "";
	Ошибка = Ложь;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("КоличествоПопыток") Тогда
			КоличествоПопыток = ДопПараметры.КоличествоПопыток;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Ошибка = Ложь;
		ТекстОшибки = "";
		
		Попытка
			МенюФункцийТекущегоРаздела = Неопределено;
			Попытка
				ПанельФункций = Ванесса.ПанельФункций(МенюФункцийТекущегоРаздела);
			Исключение
				ТекОшибка = Ванесса.УбратьТехническиеДанныеИзСтроки(ОписаниеОшибки());
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось нажать на команду <%1> панели функций.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКнопки); 
				ВызватьИсключение ТекстСообщения + Символы.ПС + ТекОшибка;
			КонецПопытки;
			
			Если ПанельФункций <> Неопределено Тогда
				КнопкаКомандногоИнтерфейса = ПанельФункций.НайтиОбъект(Тип("ТестируемаяКнопкаКомандногоИнтерфейса"), ИмяКнопки);
			КонецЕсли;	 
			
			Если КнопкаКомандногоИнтерфейса = Неопределено Тогда
				Если МенюФункцийТекущегоРаздела <> Неопределено Тогда
					КнопкаКомандногоИнтерфейса = МенюФункцийТекущегоРаздела.НайтиОбъект(Тип("ТестируемаяКнопкаКомандногоИнтерфейса"), ИмяКнопки);
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если КнопкаКомандногоИнтерфейса = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Команда меню <%1> не найдена в панели функций.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКнопки); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Ванесса.НажатьНаКнопкуКИ(КнопкаКомандногоИнтерфейса, "ПанельФункций");
			
		Исключение
			ТекстОшибки = Ванесса.УбратьТехническиеДанныеИзСтроки(ОписаниеОшибки());
			Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ИмяКомандыПанелиРазделов") Тогда
				ТекстОшибки = ТекстОшибки + Символы.ПС 
					+ Ванесса.ПодставитьПараметрыВСтроку(Ванесса.Локализовать("Панель разделов <%1>."), ДопПараметры.ИмяКомандыПанелиРазделов);
			КонецЕсли;	
			Ошибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ Ошибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если Ошибка Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Ванесса.ОбработатьСменуАктивногоОкна();
КонецФункции

&НаКлиенте
//И В панели функций в группе "Основное" я выбираю "Склады"
//@ВПанелиФункцийВГруппеЯВыбираю(Парам01,Парам02)
Функция ВПанелиФункцийВГруппеЯВыбираю(ИмяГруппы,ИмяКнопки) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	ОкноПриложенияОсновноеCommandInterface = КонтекстСохраняемый.ГлавноеОкноТестируемого.ПолучитьКомандныйИнтерфейс();
	//ОкноПриложенияОсновноеCommandInterface = КонтекстСохраняемый.ОкноПриложенияОсновноеCommandInterface;
	ПодчиненныеОбъекты = ОкноПриложенияОсновноеCommandInterface.ПолучитьПодчиненныеОбъекты();
	//Ванесса.ПосмотретьЗначение(ПодчиненныеОбъекты,Истина);
	МенюФункций                = Неопределено;
	МенюФункцийТекущегоРаздела = Неопределено;
	Для каждого Элем Из ПодчиненныеОбъекты Цикл
		Если НРег(Элем.ТекстЗаголовка) = НРег("Меню функций") Тогда
			МенюФункций = Элем;
		ИначеЕсли НРег(Элем.ТекстЗаголовка) = НРег("Functions menu") Тогда
			МенюФункций = Элем;
		ИначеЕсли НРег(Элем.ТекстЗаголовка) = НРег("Панель функций текущего раздела") Тогда
			МенюФункцийТекущегоРаздела = Элем;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если (МенюФункций = Неопределено) и (МенюФункцийТекущегоРаздела = Неопределено) Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не нашли меню функций раздела.");
	КонецЕсли;	 
	
	ГруппаИнтерфейса = МенюФункций.НайтиОбъект(Тип("ТестируемаяГруппаКомандногоИнтерфейса"), ИмяГруппы,,10);
	
	Если ГруппаИнтерфейса = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не найдена группа командного интерфейса <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяГруппы);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	КнопкаКомандногоИнтерфейса = ГруппаИнтерфейса.НайтиОбъект(Тип("ТестируемаяКнопкаКомандногоИнтерфейса"), ИмяКнопки,,10);
	
	Если КнопкаКомандногоИнтерфейса = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Команда меню <%1> не найдена в панели функций.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКнопки); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	КнопкаКомандногоИнтерфейса.Нажать();
	Ванесса.ОбработатьСменуАктивногоОкна();
КонецФункции

&НаКлиенте
//Когда В панели открытых я выбираю "Склады"
//@ВПанелиОткрытыхЯВыбираю(Парам01)
Функция ВПанелиОткрытыхЯВыбираю(ИмяКнопки) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	ТекстОшибки = "";
	Ошибка = Ложь;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Ошибка = Ложь;
		ТекстОшибки = "";
		
		Попытка
			ПанельОткрытых = Ванесса.ПанельОткрытых();
			
			КнопкаКомандногоИнтерфейса = ПанельОткрытых.НайтиОбъект(Тип("ТестируемаяКнопкаКомандногоИнтерфейса"), ИмяКнопки);
			Если КнопкаКомандногоИнтерфейса = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка панели открытых окон <%1> не найдена.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКнопки); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			Ванесса.НажатьНаКнопкуКИ(КнопкаКомандногоИнтерфейса, "ПанельОткрытых");
			Ванесса.ОбработатьСменуАктивногоОкна();
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Ошибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ Ошибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если Ошибка Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
КонецФункции

&НаКлиенте
//И В командном интерфейсе я выбираю "Основная" "Справочник1"
//@ВКомандномИнтерфейсеЯВыбираю(Парам01,Парам02)
Функция ВКомандномИнтерфейсеЯВыбираю(ИмяКомандыПанелиРазделов,ИмяКомандыПанелиФункций) Экспорт
	ТекстОшибки = "";
	Ошибка = Ложь;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Ошибка = Ложь;
		ТекстОшибки = "";
		
		Попытка
			Ванесса.ОбработатьСменуАктивногоОкна();
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ДопПараметры.Вставить("ИмяКомандыПанелиРазделов", ИмяКомандыПанелиРазделов);
			ВПанелиРазделовЯВыбираю(ИмяКомандыПанелиРазделов, ДопПараметры);
			ВПанелиФункцийЯВыбираю(ИмяКомандыПанелиФункций, ДопПараметры);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Ошибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ Ошибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если Ошибка Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
КонецФункции





&НаКлиенте
//И В открытой форме я нажимаю кнопку выбора у поля с заголовком "Реквизит2"
//@ВОткрытойФормеЯНажимаюКнопкуВыбораУПоляСЗаголовком(Парам01)
Функция ВОткрытойФормеЯНажимаюКнопкуВыбораУПоляСЗаголовком(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	СтрокаОшибки = "";
	БылаОшибка = Ложь;
	ПолучилосьАктивизировать = Ложь;
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("КоличествоПопыток", 1);
		
		Попытка
			Поле = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"), ДопПараметры);
			Если Поле = Неопределено Тогда
				Если ИскатьПоИмени Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с именем <%1> не найдено.");
				Иначе	
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> не найдено.");
				КонецЕсли;	 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
				
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Ванесса.ОткрытьКнопкуВыбораБраузер(Поле);
			
			ПолучилосьАктивизировать = Ложь;
			Поле.Активизировать();
			ПолучилосьАктивизировать = Истина;
			Поле.Выбрать();
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			Если ПолучилосьАктивизировать И 
				 Ванесса.ЭтоСтрокаОшибкиНедоступныйПользователюЭлементУправленияНеМожетВыполнятьИнтерактивныеДействия(СтрокаОшибки)
			Тогда
				 БылаОшибка = Ложь;
			Иначе	 
				БылаОшибка = Истина;
				Если СчетчикПопыток < КоличествоПопыток Тогда
					Ванесса.sleep(1);
				КонецЕсли;	 
			КонецЕсли;	 
			Ванесса.ЗапомнитьАктивноеОкно(Неопределено);
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И В открытой форме я нажимаю кнопку выбора у поля "Реквизит2"
//@ВОткрытойФормеЯНажимаюКнопкуВыбораУПоля(Парам01)
Функция ВОткрытойФормеЯНажимаюКнопкуВыбораУПоля(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯНажимаюКнопкуВыбораУПоляСЗаголовком(ИмяРеквизита,ИскатьПоИмени);
КонецФункции







&НаКлиенте
//И В открытой форме я нажимаю кнопку выбора у поля с именем "Реквизит4"
//@ВОткрытойФормеЯНажимаюКнопкуВыбораУПоляСИменем(Парам01)
Функция ВОткрытойФормеЯНажимаюКнопкуВыбораУПоляСИменем(ИмяРеквизита) Экспорт
	ВОткрытойФормеЯНажимаюКнопкуВыбораУПоляСЗаголовком(ИмяРеквизита,Истина);
КонецФункции

&НаКлиенте
//И табличный документ формы с именем "РеквизитТабличныйДокумент" стал равен:
//@ТабличныйДокументФормыСИменемСталРавен(Парам01,ТабПарам)
Функция ТабличныйДокументФормыСИменемСталРавен(ИмяРеквизита,ТабПарамБыло,СталПустым = Ложь,ДопПараметры = Неопределено) Экспорт
	СравнениеПоШаблону = Ложь;
	Если ДопПараметры <> Неопределено Тогда
		Если ДопПараметры.Свойство("СравнениеПоШаблону") Тогда
			СравнениеПоШаблону = ДопПараметры.СравнениеПоШаблону;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ПолеТабДок = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, Истина, Истина, Тип("ТестируемоеПолеФормы"));
	Если ПолеТабДок = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент формы с именем <%1> не найден.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ТабДокСтало = Ванесса.ПолучитьТабДокИзTestClientКакМассив(ПолеТабДок,ДопПараметры);
	Если СталПустым Тогда
		Если ТабДокСтало.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В табличном документе %1 строк, а ожидалось, что он пустой.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТабДокСтало.Количество()); 
			
			Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабПарамБыло,ТабДокСтало,"Макет");
			
			ТекущееЗначениеМакета   = Ванесса.ПреобразоватьЗначениеВМакет(ТабДокСтало);
			Ванесса.ПрикрепитьМакетКСценарию(ТекущееЗначениеМакета,Ванесса.Локализовать("ТекущееЗначениеМакета"));
			
			ПараметрыАктуализации = Новый Структура;
			ПараметрыАктуализации.Вставить("ТипСравненияЗначения", "СравнениеТабличногоДокументаСТаблицейGherkin");
			Ванесса.УстановитьЗначенияДляАктуализацииПараметровШага(ПараметрыАктуализации);
			
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ТабДокСтало.Количество() <> ТабПарамБыло.Количество() Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В табличном документе %1 строк, а ожидалось %2 строк.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТабДокСтало.Количество()); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТабПарамБыло.Количество()); 
		
		Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабПарамБыло,ТабДокСтало,"Макет");
		
		ЭталонноеЗначениеМакета = Ванесса.ПреобразоватьЗначениеВМакет(ТабПарамБыло);
		ТекущееЗначениеМакета   = Ванесса.ПреобразоватьЗначениеВМакет(ТабДокСтало);
		Ванесса.ПрикрепитьМакетКСценарию(ТекущееЗначениеМакета,Ванесса.Локализовать("ТекущееЗначениеМакета"));
		Ванесса.ПрикрепитьМакетКСценарию(ЭталонноеЗначениеМакета,Ванесса.Локализовать("ЭталонноеЗначениеМакета"));
		
		Ванесса.ПрикрепитьКСценариюДополнительныеФайлыСравненияЗначенияСЭталоном(ТабПарамБыло, ТабДокСтало);
		
		ПараметрыАктуализации = Новый Структура;
		ПараметрыАктуализации.Вставить("ТипСравненияЗначения", "СравнениеТабличногоДокументаСТаблицейGherkin");
		Ванесса.УстановитьЗначенияДляАктуализацииПараметровШага(ПараметрыАктуализации);
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Ном = -1;
	Для каждого СтрСтало Из ТабДокСтало Цикл
		Ном     = Ном + 1;
		
		СтрБыло = ТабПарамБыло[Ном];
		
		Если СтрСтало.Количество() <> СтрБыло.Количество() Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В табличном документе %1 колонок, а ожидалось %2 колонок.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрСтало.Количество()); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",СтрБыло.Количество()); 
			
			Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабПарамБыло,ТабДокСтало,"Макет");
			
			ЭталонноеЗначениеМакета = Ванесса.ПреобразоватьЗначениеВМакет(ТабПарамБыло);
			ТекущееЗначениеМакета   = Ванесса.ПреобразоватьЗначениеВМакет(ТабДокСтало);
			Ванесса.ПрикрепитьМакетКСценарию(ТекущееЗначениеМакета,Ванесса.Локализовать("ТекущееЗначениеМакета"));
			Ванесса.ПрикрепитьМакетКСценарию(ЭталонноеЗначениеМакета,Ванесса.Локализовать("ЭталонноеЗначениеМакета"));
			
			Ванесса.ПрикрепитьКСценариюДополнительныеФайлыСравненияЗначенияСЭталоном(ТабПарамБыло, ТабДокСтало);
			
			ПараметрыАктуализации = Новый Структура;
			ПараметрыАктуализации.Вставить("ТипСравненияЗначения", "СравнениеТабличногоДокументаСТаблицейGherkin");
			ПараметрыАктуализации.Вставить("ПолнаяЗамена", Истина);
			Ванесса.УстановитьЗначенияДляАктуализацииПараметровШага(ПараметрыАктуализации);
			
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		НомКол = 0;
		Для каждого ЗнСтало Из СтрСтало Цикл
			НомКол  = НомКол + 1;
			
			ЗнБыло  = СтрБыло["Кол" + НомКол];
			
			ЗнБыло  = СтрЗаменить(ЗнБыло,Символы.НПП," ");
			ЗнСтало = СтрЗаменить(ЗнСтало,Символы.НПП," ");
			Если Найти(ЗнБыло,"$") > 0 Тогда
				ЗнБыло = Ванесса.ПолучитьЗначениеПеременнойИзКонтекста(ЗнБыло);
			КонецЕсли;	 
			
			Если НЕ СравнениеПоШаблону Тогда
				Если ЗнСтало <> ЗнБыло Тогда
					Если ЗнБыло <> "*" Тогда
						ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В табличном документе в колонке №%1 значение= <%2> , а ожидалось <%3>");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",НомКол); 
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ЗнСтало); 
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ЗнБыло); 
						
						Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабПарамБыло,ТабДокСтало,"Макет");
						
						ЭталонноеЗначениеМакета = Ванесса.ПреобразоватьЗначениеВМакет(ТабПарамБыло);
						ТекущееЗначениеМакета   = Ванесса.ПреобразоватьЗначениеВМакет(ТабДокСтало);
						Ванесса.ПрикрепитьМакетКСценарию(ТекущееЗначениеМакета,Ванесса.Локализовать("ТекущееЗначениеМакета"));
						Ванесса.ПрикрепитьМакетКСценарию(ЭталонноеЗначениеМакета,Ванесса.Локализовать("ЭталонноеЗначениеМакета"));
						
						Ванесса.ПрикрепитьКСценариюДополнительныеФайлыСравненияЗначенияСЭталоном(ТабПарамБыло, ТабДокСтало);
						
						ПараметрыАктуализации = Новый Структура;
						ПараметрыАктуализации.Вставить("ТипСравненияЗначения", "СравнениеТабличногоДокументаСТаблицейGherkin");
						Ванесса.УстановитьЗначенияДляАктуализацииПараметровШага(ПараметрыАктуализации);
						
						ВызватьИсключение ТекстСообщения;
					КонецЕсли;	 
				КонецЕсли;	 
			Иначе	
				Если Не Ванесса.СтрокаСоответствуетШаблону(ЗнСтало, ЗнБыло) Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В табличном документе в колонке №%1 значение= <%2> , а ожидалось <%3>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",НомКол); 
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ЗнСтало); 
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ЗнБыло); 
					
					Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабПарамБыло,ТабДокСтало);
					
					ЭталонноеЗначениеМакета = Ванесса.ПреобразоватьЗначениеВМакет(ТабПарамБыло);
					ТекущееЗначениеМакета   = Ванесса.ПреобразоватьЗначениеВМакет(ТабДокСтало);
					Ванесса.ПрикрепитьМакетКСценарию(ТекущееЗначениеМакета,Ванесса.Локализовать("ТекущееЗначениеМакета"));
					Ванесса.ПрикрепитьМакетКСценарию(ЭталонноеЗначениеМакета,Ванесса.Локализовать("ЭталонноеЗначениеМакета"));
					
					Ванесса.ПрикрепитьКСценариюДополнительныеФайлыСравненияЗначенияСЭталоном(ТабПарамБыло, ТабДокСтало);
					
					ПараметрыАктуализации = Новый Структура;
					ПараметрыАктуализации.Вставить("ТипСравненияЗначения", "СравнениеТабличногоДокументаСТаблицейGherkin");
					Ванесса.УстановитьЗначенияДляАктуализацииПараметровШага(ПараметрыАктуализации);
					
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
			КонецЕсли;	 
			
		КонецЦикла;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
//И табличный документ формы с именем "РеквизитТабличныйДокумент" стал равен:
//@ТабличныйДокументСталРавен(Парам01,ТабПарам)
Функция ТабличныйДокументСталРавен(ИмяРеквизита,ТабПарамБыло,СталПустым = Ложь) Экспорт
	ТабличныйДокументФормыСИменемСталРавен(ИмяРеквизита,ТабПарамБыло,СталПустым);
КонецФункции

&НаКлиенте
//И табличный документ формы с именем "РеквизитТабличныйДокумент" равен:
//@ТабличныйДокументРавен(Парам01,ТабПарам)
Функция ТабличныйДокументРавен(ИмяРеквизита,ТабПарамБыло,СталПустым = Ложь) Экспорт
	ТабличныйДокументФормыСИменемСталРавен(ИмяРеквизита,ТабПарамБыло,СталПустым);
КонецФункции

&НаКлиенте
//И табличный документ формы с именем "РеквизитТабличныйДокумент" равен по шаблону:
//@ТабличныйДокументРавенПоШаблону(Парам01,ТабПарам)
Функция ТабличныйДокументРавенПоШаблону(ИмяРеквизита,ТабПарамБыло,СталПустым = Ложь) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СравнениеПоШаблону",Истина);
	
	ТабличныйДокументФормыСИменемСталРавен(ИмяРеквизита,ТабПарамБыло,СталПустым,ДопПараметры);
КонецФункции

&НаКлиенте
//И область "R1C1:R10C10" табличного документа "РеквизитТабличныйДокумент" стала равна:
//@ОбластьТабличногоДокументаСталаРавна(Парам01,Парам02,ТабПарам)
Функция ОбластьТабличногоДокументаСталаРавна(ИмяОбласти,ИмяРеквизита,ТабПарамБыло,СталПустым = Ложь,СравнениеПоШаблону = Ложь) Экспорт
	НачСтр = -1;
	НачКол = -1;
	КолСтр = -1;
	КолКол = -1;
	
	Попытка
		Ванесса.ПолучитьПараметрыОбластиМакета(ИмяОбласти,НачСтр,НачКол,КолСтр,КолКол);
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не верный формат области <%1>. %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяОбласти);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОписаниеОшибки());
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("НачСтр",НачСтр);
	ДопПараметры.Вставить("НачКол",НачКол);
	ДопПараметры.Вставить("КолСтр",КолСтр);
	ДопПараметры.Вставить("КолКол",КолКол);
	ДопПараметры.Вставить("НадоСчитатьОбласть",Истина);
	ДопПараметры.Вставить("УдалятьПустыеСтрокиИзМакета",Ложь);
	ДопПараметры.Вставить("СравнениеПоШаблону",СравнениеПоШаблону);
	
	ТабличныйДокументФормыСИменемСталРавен(ИмяРеквизита,ТабПарамБыло,СталПустым,ДопПараметры);
КонецФункции

&НаКлиенте
//И область "R1C1:R10C10" табличного документа "РеквизитТабличныйДокумент" равна:
//@ОбластьТабличногоДокументаРавна(Парам01,Парам02,ТабПарам)
Функция ОбластьТабличногоДокументаРавна(ИмяОбласти,ИмяРеквизита,ТабПарамБыло,СталПустым = Ложь) Экспорт
	ОбластьТабличногоДокументаСталаРавна(ИмяОбласти,ИмяРеквизита,ТабПарамБыло,СталПустым);
КонецФункции

&НаКлиенте
//И область "R1C1:R10C10" табличного документа "РеквизитТабличныйДокумент" равна по шаблону:
//@ОбластьТабличногоДокументаРавнаПоШаблону(Парам01,Парам02,ТабПарам)
Функция ОбластьТабличногоДокументаРавнаПоШаблону(ИмяОбласти,ИмяРеквизита,ТабПарамБыло,СталПустым = Ложь) Экспорт
	ОбластьТабличногоДокументаСталаРавна(ИмяОбласти,ИмяРеквизита,ТабПарамБыло,СталПустым,Истина);
КонецФункции

&НаКлиенте
Функция СравнитьТабличныйДокументСЭталоном(ТабПарамБыло, ТабДокСтало, ЧтениеИзТабличногоДокумента, ПоШаблону, ДопПараметры = Неопределено)
	ДобавлятьФайлыКСценарию = Истина;
	ТолькоСтрокиИзЭталона = Ложь;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ДобавлятьФайлыКСценарию") Тогда
			ДобавлятьФайлыКСценарию = ДопПараметры.ДобавлятьФайлыКСценарию;
		КонецЕсли;	
		
		Если ДопПараметры.Свойство("ТолькоСтрокиИзЭталона") Тогда
			ТолькоСтрокиИзЭталона = ДопПараметры.ТолькоСтрокиИзЭталона;
		КонецЕсли;	 
	КонецЕсли;

	ВычислятьЗначенияКонекстаВМакете = Истина;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ВычислятьЗначенияКонекстаВМакете") Тогда
		ВычислятьЗначенияКонекстаВМакете = ДопПараметры.ВычислятьЗначенияКонекстаВМакете;
	КонецЕсли;
	
	Если ВычислятьЗначенияКонекстаВМакете И ТипЗнч(ТабПарамБыло) = Тип("ТабличныйДокумент") Тогда
		ТабПарамБыло = Ванесса.ВычислитьВМакетеЗначенияКонтекста(ТабПарамБыло);
	КонецЕсли;
	
	Если ЧтениеИзТабличногоДокумента Тогда
		КолСтрокБыло = ТабПарамБыло.ВысотаТаблицы;
	Иначе	
		КолСтрокБыло = ТабПарамБыло.Количество();
	КонецЕсли;	 
	
	ПроблемнаяСтрока = Неопределено;
	Для Ном = 1 По КолСтрокБыло Цикл
		Если НЕ ЧтениеИзТабличногоДокумента Тогда
			СтрБыло = ТабПарамБыло[Ном - 1]; 
		КонецЕсли;	 
		
		СтрокаСовпала = Ложь;
		Для Каждого СтрСтало Из ТабДокСтало Цикл
		
			НомКол = 0;
			КолонкиСовпали = Истина;
			Для каждого ЗнСтало Из СтрСтало Цикл
				НомКол = НомКол + 1;
				
				Попытка
					Если ЧтениеИзТабличногоДокумента Тогда
						ЗнБыло = ТабПарамБыло.Область(Ном, НомКол, Ном, НомКол).Текст;
					Иначе	
						ЗнБыло = СтрБыло["Кол" + НомКол];
					КонецЕсли;	 
				Исключение
					// Не совпало количество колонок
					КолонкиСовпали = Ложь;
					Прервать;
				КонецПопытки;
				
				ЗнБыло  = СокрЛП(СтрЗаменить(ЗнБыло,Символы.НПП," "));
				ЗнСтало = СокрЛП(СтрЗаменить(ЗнСтало,Символы.НПП," "));
				
				ЗнБыло = СтрЗаменить(ЗнБыло,Символы.ПС,"\n");
				ЗнСтало = СтрЗаменить(ЗнСтало,Символы.ПС,"\n");
				
				Если ЗнСтало <> ЗнБыло Тогда
					Если ПоШаблону Тогда
						Если Ванесса.СтрокаСоответствуетШаблону(ЗнСтало, ЗнБыло) Тогда
							Продолжить;
						КонецЕсли;	 
					КонецЕсли;	 
					
					Если ЗнБыло <> "*" Тогда
						КолонкиСовпали = Ложь;
						Прервать;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЦикла;
			
			Если КолонкиСовпали Тогда
				СтрокаСовпала = Истина;
				Прервать;
			КонецЕсли;
			
			Если НЕ СтрокаСовпала Тогда
				Если ТипЗнч(СтрБыло) = Тип("Структура") Тогда
					ПроблемнаяСтрока = Новый Структура;
					Для Каждого КлючЗначение Из СтрБыло Цикл
						ПроблемнаяСтрока.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
					КонецЦикла;	
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЦикла;
		
		Если НЕ СтрокаСовпала Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Строка №%1 не найдена в табличном документе");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Ном);
			
			Если ПроблемнаяСтрока <> Неопределено Тогда
				Стр = "|'";
				Для Сч = 1 По ПроблемнаяСтрока.Количество() Цикл
					Стр = Стр + ПроблемнаяСтрока["Кол" + Сч] + "'|";
				КонецЦикла;
				ТекстСообщения = ТекстСообщения  + ":" + Символы.ПС + Стр;
			КонецЕсли;	
			
			Если ЧтениеИзТабличногоДокумента Тогда
				МакетТабПарам = ТабПарамБыло;
			Иначе	
				МакетТабПарам = Ванесса.ПреобразоватьЗначениеВМакет(ТабПарамБыло);
			КонецЕсли;	 
			
			Если ДобавлятьФайлыКСценарию Тогда
				ТекущееЗначениеМакета = Ванесса.ПреобразоватьЗначениеВМакет(ТабДокСтало);
				Ванесса.ПрикрепитьМакетКСценарию(ТекущееЗначениеМакета,Ванесса.Локализовать("ТекущееЗначениеМакета"));
				Ванесса.ПрикрепитьМакетКСценарию(МакетТабПарам,Ванесса.Локализовать("ЭталонноеЗначениеТаблицы"));
				Если Ванесса.РежимСовместимостиБольшеИлиРавен837 Тогда
					Ванесса.ПрикрепитьМакетКСценарию(Ванесса.ПолучитьРазличияВМакетах(МакетТабПарам, ТекущееЗначениеМакета), Ванесса.Локализовать("Различия"));
				КонецЕсли;	       
				
				Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабПарамБыло,ТабДокСтало,"Макет");
				
				Ванесса.ПрикрепитьКСценариюДополнительныеФайлыСравненияЗначенияСЭталоном(МакетТабПарам, ТекущееЗначениеМакета);
			КонецЕсли;	 
			
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЦикла;
	
	Если ТолькоСтрокиИзЭталона Тогда
		
		Сч = 0;
		Для Каждого СтрСтало Из ТабДокСтало Цикл
			СтрокаСовпала = Ложь;
			Сч = Сч + 1;
			
			Для Ном = 1 По КолСтрокБыло Цикл
				Если НЕ ЧтениеИзТабличногоДокумента Тогда
					СтрБыло = ТабПарамБыло[Ном - 1]; 
				КонецЕсли;	 
				
				НомКол = 0;
				КолонкиСовпали = Истина;
				Для каждого ЗнСтало Из СтрСтало Цикл
					НомКол = НомКол + 1;
					
					Попытка
						Если ЧтениеИзТабличногоДокумента Тогда
							ЗнБыло = ТабПарамБыло.Область(Ном, НомКол, Ном, НомКол).Текст;
						Иначе	
							ЗнБыло = СтрБыло["Кол" + НомКол];
						КонецЕсли;	 
					Исключение
						// Не совпало количество колонок
						КолонкиСовпали = Ложь;
						Прервать;
					КонецПопытки;
					
					ЗнБыло  = СокрЛП(СтрЗаменить(ЗнБыло,Символы.НПП," "));
					ЗнСтало = СокрЛП(СтрЗаменить(ЗнСтало,Символы.НПП," "));
					
					ЗнБыло = СтрЗаменить(ЗнБыло,Символы.ПС,"\n");
					ЗнСтало = СтрЗаменить(ЗнСтало,Символы.ПС,"\n");
					
					Если ЗнСтало <> ЗнБыло Тогда
						Если ПоШаблону Тогда
							Если Ванесса.СтрокаСоответствуетШаблону(ЗнСтало, ЗнБыло) Тогда
								Продолжить;
							КонецЕсли;	 
						КонецЕсли;	 
						
						Если ЗнБыло <> "*" Тогда
							КолонкиСовпали = Ложь;
							Прервать;
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЦикла;
				
				Если КолонкиСовпали Тогда
					СтрокаСовпала = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ СтрокаСовпала Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Строка №%1 табличного документа не найдена в эталоне.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Сч); 
				
				Если ЧтениеИзТабличногоДокумента Тогда
					МакетТабПарам = ТабПарамБыло;
				Иначе	
					МакетТабПарам = Ванесса.ПреобразоватьЗначениеВМакет(ТабПарамБыло);
				КонецЕсли;	 
				
				Если ДобавлятьФайлыКСценарию Тогда
					ТекущееЗначениеМакета = Ванесса.ПреобразоватьЗначениеВМакет(ТабДокСтало);
					Ванесса.ПрикрепитьМакетКСценарию(ТекущееЗначениеМакета,Ванесса.Локализовать("ТекущееЗначениеМакета"));
					Ванесса.ПрикрепитьМакетКСценарию(МакетТабПарам,Ванесса.Локализовать("ЭталонноеЗначениеТаблицы"));
					Если Ванесса.РежимСовместимостиБольшеИлиРавен837 Тогда
						Ванесса.ПрикрепитьМакетКСценарию(Ванесса.ПолучитьРазличияВМакетах(МакетТабПарам, ТекущееЗначениеМакета), Ванесса.Локализовать("Различия"));
					КонецЕсли;	       
					
					Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабПарамБыло,ТабДокСтало,"Макет");
					
					Ванесса.ПрикрепитьКСценариюДополнительныеФайлыСравненияЗначенияСЭталоном(МакетТабПарам, ТекущееЗначениеМакета);
				КонецЕсли;	 
				
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	 
	
	
КонецФункции 

&НаКлиенте
//И табличный документ формы с именем "РеквизитТабличныйДокумент" содержит строки:
//@ТабличныйДокументФормыСИменемСодержитСтроки(Парам01,ТабПарам)
Функция ТабличныйДокументФормыСИменемСодержитСтроки(ИмяРеквизита, ТабПарамБыло, ПоШаблону = Ложь, ТолькоСтрокиИзЭталона = Ложь, ДопПараметрыМетода = Неопределено) Экспорт
	
	Нашли = Ложь;
	МассивФорм = НайтиФормыТекущегоОкна();
	
	ЧтениеИзТабличногоДокумента = Ложь;
	Если ТипЗнч(ТабПарамБыло) = Тип("ТабличныйДокумент") Тогда
		ЧтениеИзТабличногоДокумента = Истина;
	КонецЕсли;
	
	ПолеТабДок = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, Истина, Истина, Тип("ТестируемоеПолеФормы"));
	ДопПараметры = Новый Структура;
	Если ЧтениеИзТабличногоДокумента Тогда
		ДопПараметры.Вставить("УдалятьПустыеСтрокиИзМакета", Ложь);
	КонецЕсли;
	ТабДокСтало2 = Ванесса.ПолучитьТабДокИзTestClientКакМассив(ПолеТабДок, ДопПараметры);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТолькоСтрокиИзЭталона", ТолькоСтрокиИзЭталона);
	
	ОписаниеОшибки = "";
	БылаОшибка = Ложь;
	Попытка
		СравнитьТабличныйДокументСЭталоном(ТабПарамБыло, ТабДокСтало2, ЧтениеИзТабличногоДокумента, ПоШаблону, ДопПараметры);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		БылаОшибка = Истина;
	КонецПопытки;
	
	Если БылаОшибка Тогда
		
		// Для совместимости сравниваем по предыдущему алгоритму, когда происходила обрезка пустого места
		ДопПараметры = Новый Структура;
		Если ЧтениеИзТабличногоДокумента Тогда
			ДопПараметры.Вставить("УдалятьПустыеСтрокиИзМакета", Истина);
		КонецЕсли;
		ТабДокСтало = Ванесса.ПолучитьТабДокИзTestClientКакМассив(ПолеТабДок, ДопПараметры);
		
		ПараметрыАктуализации = Новый Структура;
		Если ТипЗнч(ДопПараметрыМетода) = Тип("Структура") И ДопПараметрыМетода.Свойство("ТипСравненияЗначения") Тогда
			ПараметрыАктуализации.Вставить("ТипСравненияЗначения", ДопПараметрыМетода.ТипСравненияЗначения);
		Иначе	
			ПараметрыАктуализации.Вставить("ТипСравненияЗначения", "СравнениеТабличногоДокументаСТаблицейGherkin");
		КонецЕсли;	
		Если ТипЗнч(ДопПараметрыМетода) = Тип("Структура") И ДопПараметрыМетода.Свойство("ИмяФайла") Тогда
			ПараметрыАктуализации.Вставить("ИмяФайлаМакета", ДопПараметрыМетода.ИмяФайла);
		КонецЕсли;	
		Ванесса.УстановитьЗначенияДляАктуализацииПараметровШага(ПараметрыАктуализации);
		
		Попытка
			ДопПараметры.Вставить("ДобавлятьФайлыКСценарию", Ложь);
			ДопПараметры.Вставить("ТолькоСтрокиИзЭталона", ТолькоСтрокиИзЭталона);
			СравнитьТабличныйДокументСЭталоном(ТабПарамБыло, ТабДокСтало, ЧтениеИзТабличногоДокумента, ПоШаблону, ДопПараметры);
		Исключение
			// Исключение вызываем по первому сравнению, т.к. оно является основным.
			ВызватьИсключение ОписаниеОшибки;
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
//И табличный документ "РеквизитТабличныйДокумент" содержит строки:
//@ТабличныйДокументСодержитСтроки(Парам01,ТабПарам)
Функция ТабличныйДокументСодержитСтроки(ИмяРеквизита, ТабПарамБыло) Экспорт
	ТабличныйДокументФормыСИменемСодержитСтроки(ИмяРеквизита, ТабПарамБыло, Ложь);
КонецФункции

&НаКлиенте
//И табличный документ "РеквизитТабличныйДокумент" содержит строки по шаблону
//@ТабличныйДокументСодержитСтрокиПоШаблону(Парам01,ТабПарам)
Функция ТабличныйДокументСодержитСтрокиПоШаблону(ИмяРеквизита, ТабПарамБыло) Экспорт
	ТабличныйДокументФормыСИменемСодержитСтроки(ИмяРеквизита, ТабПарамБыло, Истина);
КонецФункции

&НаКлиенте
//И В открытой форме я нажимаю на кнопку с именем "ЗаполнитьРекСтрока1"
//@ВОткрытойФормеЯНажимаюНаКнопкуСИменем(Парам01)
Функция ВОткрытойФормеЯНажимаюНаКнопкуСИменем(ИмяКнопки) Экспорт
	ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком(ИмяКнопки,Истина);
КонецФункции

&НаКлиенте
//И табличный документ "РеквизитТабличныйДокумент" содержит строки из макета "ИмяМакета"
//@ТабличныйДокументСодержитСтрокиИзМакета(Парам01,Парам02)
Функция ТабличныйДокументСодержитСтрокиИзМакета(ИмяРеквизита, ИмяМакета, ПоШаблону = Ложь, ТолькоСтрокиИзЭталона = Ложь) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТипСравненияЗначения", "СравнениеТабличногоДокументаСМакетом");
	ТабДокБыло = ПолучитьМакетИзОбработкиИлиИзКаталогаПроекта(ИмяМакета, ДопПараметры);
	ТабличныйДокументФормыСИменемСодержитСтроки(ИмяРеквизита, ТабДокБыло, ПоШаблону, ТолькоСтрокиИзЭталона, ДопПараметры);
КонецФункции

&НаКлиенте
//И табличный документ "РеквизитТабличныйДокумент" содержит строки только из макета "ИмяМакета"
//@ТабличныйДокументСодержитСтрокиТолькоИзМакета(Парам01,Парам02)
Функция ТабличныйДокументСодержитСтрокиТолькоИзМакета(ИмяРеквизита, ИмяМакета, ПоШаблону = Ложь) Экспорт
	ТабДокБыло = ПолучитьМакетИзОбработкиИлиИзКаталогаПроекта(ИмяМакета);
	ТабличныйДокументФормыСИменемСодержитСтроки(ИмяРеквизита, ТабДокБыло, ПоШаблону, Истина);
КонецФункции

&НаКлиенте
//И табличный документ "РеквизитТабличныйДокумент" содержит строки из макета "ИмяМакета" по шаблону
//@ТабличныйДокументСодержитСтрокиИзМакетаПоШаблону(Парам01,Парам02)
Функция ТабличныйДокументСодержитСтрокиИзМакетаПоШаблону(ИмяРеквизита, ИмяМакета) Экспорт
	ТабличныйДокументСодержитСтрокиИзМакета(ИмяРеквизита, ИмяМакета, Истина);
КонецФункции

&НаКлиенте
//И табличный документ "РеквизитТабличныйДокумент" содержит строки только из макета "ИмяМакета" по шаблону
//@ТабличныйДокументСодержитСтрокиТолькоИзМакетаПоШаблону(Парам01,Парам02)
Функция ТабличныйДокументСодержитСтрокиТолькоИзМакетаПоШаблону(ИмяРеквизита, ИмяМакета) Экспорт
	ТабличныйДокументСодержитСтрокиИзМакета(ИмяРеквизита, ИмяМакета, Истина, Истина);
КонецФункции



&НаКлиенте
//И я закрываю окно с заголовком "Справочник1"
//@ЯЗакрываюОкноСЗаголовком(Парам01)
Функция ЯЗакрываюОкноСЗаголовком(Знач ЗаголовокОкна) Экспорт
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		ТекстСообщения = "";
		
		Попытка
			ОкноПриложения = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"),ЗаголовокОкна);
			Если ОкноПриложения = Неопределено Тогда
				Ванесса.ОбработатьСменуАктивногоОкна();
				Попытка
					АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
					ЗаголовокАктивногоОкна = АктивноеОкно.Заголовок;
				Исключение
					ЗаголовокАктивногоОкна = "";
				КонецПопытки;
				
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Окно с заголовком <%1> не найдено. Текущее окно: <%2>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ЗаголовокОкна); 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ЗаголовокАктивногоОкна); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Ванесса.ЗакрытьОкноКлиентскогоПриложения(ОкноПриложения);
			Ванесса.ОбработатьСменуАктивногоОкна();
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
			Ванесса.ОбработатьСменуАктивногоОкна();
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И я закрываю окно "Справочник1"
//@ЯЗакрываюОкно(Парам01)
Функция ЯЗакрываюОкно(ЗаголовокОкна) Экспорт
	ЯЗакрываюОкноСЗаголовком(ЗаголовокОкна);
КонецФункции

&НаКлиенте
//И я закрываю текущее окно
//@ЯЗакрываюТекущееОкно()
Функция ЯЗакрываюТекущееОкно() Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	Если АктивноеОкно = Неопределено Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Активное окно не найдено.");
	КонецЕсли;	 
	
	ПолучилосьЗакрыть = Ложь;
	
	ЗаголовокОкна = АктивноеОкно.Заголовок;
	ОписаниеОшибки = "";
	
	Попытка
		Ванесса.ЗакрытьОкноКлиентскогоПриложения(АктивноеОкно);
		ПолучилосьЗакрыть = Истина;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если Не ПолучилосьЗакрыть Тогда
		//попробуем найти окно предупреждения
		АктивноеОкно = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"),"1С:Предприятие");
		Если АктивноеОкно <> Неопределено Тогда
			ЕслиНаЭкранеДиалогМодальныйДиалогТоНадоЕгоЗакрыть();
			ПолучилосьЗакрыть = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Не ПолучилосьЗакрыть Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось закрыть активное окно <%1>. %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ЗаголовокОкна);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Закрытие окна <%1>.");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ЗаголовокОкна);
	Ванесса.ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль(ТекстСообщения);
КонецФункции

&НаКлиенте
//И я закрываю окно предупреждения
//@ЯЗакрываюОкноПредупреждения()
Функция ЯЗакрываюОкноПредупреждения() Экспорт
	ОкноПредупреждения  = Ванесса.НайтиОкноМодальногоДиалога();
	Если ОкноПредупреждения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ОкноПредупреждения.Закрыть();
КонецФункции




&НаКлиенте
//Если В текущем окне есть кнопка командного интерфейса "Общая команда для справочника1" Тогда
//@ВТекущемОкнеЕстьКнопкаКомандногоИнтерфейсаТогда(Парам01)
Функция ВТекущемОкнеЕстьКнопкаКомандногоИнтерфейсаТогда(ИмяКнопки) Экспорт
	АктивноеОкно       = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	КомандныйИнтерфейс = АктивноеОкно.ПолучитьКомандныйИнтерфейс();
	//ОкноПриложенияОсновноеCommandInterface = КонтекстСохраняемый.ОкноПриложенияОсновноеCommandInterface;
	КнопкаКомандногоИнтерфейса = КомандныйИнтерфейс.НайтиОбъект(Тип("ТестируемаяКнопкаКомандногоИнтерфейса"), ИмяКнопки);
	Если КнопкаКомандногоИнтерфейса = Неопределено Тогда
		Ванесса.УстановитьРезультатУсловия(Ложь);
	Иначе
		Ванесса.УстановитьРезультатУсловия(Истина);
	КонецЕсли;	 
КонецФункции



&НаКлиенте
//И В текущем окне я нажимаю кнопку командного интерфейса "Общая команда для справочника1"
//@ВТекущемОкнеЯНажимаюКнопкуКомандногоИнтерфейса(Парам01)
Функция ВТекущемОкнеЯНажимаюКнопкуКомандногоИнтерфейса(ИмяКнопки) Экспорт
	АктивноеОкно       = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	КомандныйИнтерфейс = АктивноеОкно.ПолучитьКомандныйИнтерфейс();
	//ОкноПриложенияОсновноеCommandInterface = КонтекстСохраняемый.ОкноПриложенияОсновноеCommandInterface;
	КнопкаКомандногоИнтерфейса = КомандныйИнтерфейс.НайтиОбъект(Тип("ТестируемаяКнопкаКомандногоИнтерфейса"), ИмяКнопки,,5);
	Если КнопкаКомандногоИнтерфейса = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка/команда с заголовком <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКнопки); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Ванесса.НажатьВОкнеНаКнопкуКомандногоИнтерфейса(КнопкаКомандногоИнтерфейса);
	//КнопкаКомандногоИнтерфейса.Нажать();
	Ванесса.ОбработатьСменуАктивногоОкна();
КонецФункции

&НаКлиенте
//И В открытой форме в таблице ""Товары"" я добавляю новую строку
//@ВОткрытойФормеВТЧЯДобавляюНовуюСтроку(Парам01)
Функция ВОткрытойФормеВТЧЯДобавляюНовуюСтроку(ИмяТЧ) Экспорт
	Таблица = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	Если Таблица = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("ТЧ с именем <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Таблица.ДобавитьСтроку();
КонецФункции




&НаКлиенте
//И я нажимаю на кнопку создать поля "Вид цены"
//@ЯНажимаюНаКнопкуСоздатьПоля(Парам01)
Функция ЯНажимаюНаКнопкуСоздатьПоля(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		ТекстСообщения = "";
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("КоличествоПопыток", 1);
		
		Попытка
			
			ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"), ДопПараметры);
			ПолеРеквизит.Активизировать();
			
			Попытка
				Ванесса.ОткрытьВыпадающийСписок(ПолеРеквизит);
				Если НЕ ПолеРеквизит.ВыпадающийСписокОткрыт() Тогда
					ПолеРеквизит.ОткрытьВыпадающийСписок();
				КонецЕсли;	 
				ТаймаутОжидания = 10;
				ТаймаутОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(ТаймаутОжидания);
				ПолеРеквизит.ОжидатьФормированияВыпадающегоСписка(ТаймаутОжидания);
			Исключение
			КонецПопытки;
			
			Ванесса.НажатиеНаКнопкуСоздать(ПолеРеквизит);
			ПолеРеквизит.Создать();
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И я нажимаю на кнопку создать поля с именем "Вид цены"
//@ЯНажимаюНаКнопкуСоздатьПоляСИменем(Парам01)
Функция ЯНажимаюНаКнопкуСоздатьПоляСИменем(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ЯНажимаюНаКнопкуСоздатьПоля(ИмяРеквизита,Истина);
КонецФункции



&НаКлиенте
//И В открытой форме я нажимаю на кнопку открытия поля с заголовком "Реквизит2"
//@ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоляСЗаголовком(Парам01)
Функция ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоляСЗаголовком(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"));
	ПолеРеквизит.Активизировать();
	Ванесса.ОткрытьКнопкуОткрытияБраузер(ПолеРеквизит);
	ПолеРеквизит.Открыть();
КонецФункции

&НаКлиенте
//И В открытой форме я нажимаю на кнопку открытия поля "Реквизит2"
//@ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоля(Парам01)
Функция ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоля(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоляСЗаголовком(ИмяРеквизита,ИскатьПоИмени);
КонецФункции






&НаКлиенте
//И В открытой форме я нажимаю на кнопку открытия поля с именем "Реквизит2"
//@ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоляСИменем(Парам01)
Функция ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоляСИменем(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоляСЗаголовком(ИмяРеквизита,Истина);
КонецФункции

&НаКлиенте
Функция СделатьВводПоСтрокеВПолеВВода(ТЧ,ИмяТЧ,ПолеРеквизит,ИмяРеквизита,ИскатьПоИмени,ВыбираемоеЗначение,ДопПараметры)
	ТаймаутОжидания = 10;
	ТаймаутОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(ТаймаутОжидания);
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Если СчетчикПопыток > 1 Тогда
			Ванесса.ЗапомнитьАктивноеОкно(Неопределено);
		КонецЕсли;	 
		
		Если ИмяТЧ <> Неопределено Тогда
			Если КоличествоПопыток > 1 Тогда
				Если ТипЗнч(ДопПараметры) <> Тип("Структура") Тогда
					ДопПараметры = Новый Структура;
				КонецЕсли;	 
				ДопПараметры.Вставить("КоличествоПопыток", 1);
				ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ,,,, ДопПараметры);
				
				Если ИскатьПоИмени Тогда
					ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ, ДопПараметры);
				Иначе	
					ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ, ДопПараметры);
				КонецЕсли;	 
			КонецЕсли;	 
			
			ТаблицаВРежимеРедактирования = ТЧ.ТекущийРежимРедактирование();
			Если Не ТаблицаВРежимеРедактирования Тогда
				ТЧ.ИзменитьСтроку();
			КонецЕсли;	 
		КонецЕсли;	 
		
		Попытка
			
			Если СчетчикПопыток > 1 Тогда
				Попытка
					ПолеРеквизит.Активизировать();
				Исключение
				КонецПопытки;
			КонецЕсли;	 
			
			Попытка
				Ванесса.ВвестиВПолеТекст(ПолеРеквизит,ВыбираемоеЗначение);
				Если Ванесса.БезопасноеВыполнениеШагов() Тогда
					Ванесса.Sleep(1);
				КонецЕсли;	 
			Исключение
				//Ванесса.ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль("ОбработкаИсключения1. " + ОписаниеОшибки() + ";СчетчикПопыток="+СчетчикПопыток);
					
				//Ванесса.ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль("Ошибка. СделатьВводПоСтрокеВПолеВВода. Не получилось вести текст в поле. ПолеРеквизит.Имя=" + ПолеРеквизит.Имя + ";ВыбираемоеЗначение=" + ВыбираемоеЗначение + ";СчетчикПопыток="+СчетчикПопыток);
				
				//для комбобоксов надо открыть список
				Если НЕ ПолеРеквизит.ВыпадающийСписокОткрыт() Тогда
					ПолеРеквизит.ОткрытьВыпадающийСписок();
					//Ванесса.ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль("СделатьВводПоСтрокеВПолеВВода. Открытие выпадающего списка. ПолеРеквизит.Имя=" + ПолеРеквизит.Имя + ";СчетчикПопыток="+СчетчикПопыток);
				КонецЕсли;	 
				
				СписокСформировался = ПолеРеквизит.ОжидатьФормированияВыпадающегоСписка(ТаймаутОжидания);
				Если Ванесса.Версия8311ИлиВыше И НЕ СписокСформировался Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Выпадающий список <%1> не открылся для ввода текста.");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
					//Ванесса.ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль("ВызовИсключения. " + ТекстСообщения + ";СчетчикПопыток="+СчетчикПопыток);
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				Ванесса.ВвестиВПолеТекст(ПолеРеквизит,ВыбираемоеЗначение);
				Если Ванесса.БезопасноеВыполнениеШагов() Тогда
					Ванесса.Sleep(1);
				КонецЕсли;	 
			КонецПопытки;
			
			СписокСформировался = ПолеРеквизит.ОжидатьФормированияВыпадающегоСписка(ТаймаутОжидания);
			Если Ванесса.Версия8311ИлиВыше И НЕ СписокСформировался Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Выпадающий список <%1> не был сформирован.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Если НЕ Ванесса.Версия8310ИлиВыше Тогда
				ТекТекст = ПолеРеквизит.ПолучитьТекстРедактирования();
				Если ТекТекст <> ВыбираемоеЗначение Тогда
					//скорее всего это ошибка web клиента, т.к. в поле запрещено воводить текст, а не было вызвано исключение
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Выпадающий список <%1>. Ожидали, что в нём будет текст %2, а получили %3.");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ВыбираемоеЗначение); 
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ТекТекст); 
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	
			КонецЕсли;	
			
			Попытка
				Если Ванесса.Версия8310ИлиВыше Тогда
					//проверим что текст был корректно введен
					ТекТекст = ПолеРеквизит.ПолучитьТекстРедактирования();
					Если ТекТекст <> ВыбираемоеЗначение Тогда
						//ПолеРеквизит.ВвестиТекст(ВыбираемоеЗначение);
						Ванесса.ВвестиВПолеТекст(ПолеРеквизит,ВыбираемоеЗначение);
						СписокСформировался = ПолеРеквизит.ОжидатьФормированияВыпадающегоСписка(ТаймаутОжидания);
						Ванесса.Sleep(1);
						
						ТекТекст = ПолеРеквизит.ПолучитьТекстРедактирования();
						Если ТекТекст <> ВыбираемоеЗначение Тогда
							ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Выпадающий список <%1>. Ожидали, что в нём будет текст %2, а получили %3.");
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ВыбираемоеЗначение); 
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ТекТекст); 
							ВызватьИсключение ТекстСообщения;
						КонецЕсли;	  
						
						Продолжить;
					КонецЕсли;	 
				КонецЕсли;	 
				
				ПолеРеквизит.ВыполнитьВыборИзСпискаВыбора(0);
				
				//ждём закрытия выпадающего списка
				ПолучилосьПроверитьЧтоВыпадающийСписокОткрыт = Ложь;
				Если Ванесса.Версия8310ИлиВыше Тогда
					
					Для Ррр = 1 По 5 Цикл
						ВыпадающийСписокОткрыт = Истина;
						Попытка
							ВыпадающийСписокОткрыт = ПолеРеквизит.ВыпадающийСписокОткрыт();
						Исключение
							//значит, возможно, открылось другое окно и тогда метод будет вызывать исключение
							Прервать;
						КонецПопытки;
						
						ПолучилосьПроверитьЧтоВыпадающийСписокОткрыт = Истина;
						Если Не ВыпадающийСписокОткрыт Тогда
							Прервать;
						КонецЕсли;	 
						
						Ванесса.Sleep(1);
						//ждём закрытия выпадающего списка
					КонецЦикла;	
				КонецЕсли;	 
				
				
				Если ПолучилосьПроверитьЧтоВыпадающийСписокОткрыт и ВыпадающийСписокОткрыт Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось сделать выбрать из списка выбора <%1> по строке <%2>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ВыбираемоеЗначение); 
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				Возврат Неопределено;//штатное завершение шага должно быть тут
			Исключение
			КонецПопытки;
			
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось сделать выбрать из списка выбора <%1> по строке <%2>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ВыбираемоеЗначение); 
			ВызватьИсключение ТекстСообщения;
			
		Исключение
			
			
			СтарыйТекстОшибки = ОписаниеОшибки();
			
			
			Попытка
				Если Ванесса.Версия8310ИлиВыше Тогда
					Если НЕ ПолеРеквизит.ВыпадающийСписокОткрыт() Тогда
						ПолеРеквизит.ОткрытьВыпадающийСписок();
					КонецЕсли;	 
				КонецЕсли;	 
			Исключение
				//Ванесса.ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль("ОбработкаИсключения3. " + ОписаниеОшибки() + ";СчетчикПопыток="+СчетчикПопыток);
			КонецПопытки;
			
		КонецПопытки;
		
		//значит возникла ошибка, будем пытаться ещё раз
		
		
		Если (СчетчикПопыток % 2) = 0 Тогда
			//для совместимости со старым вводом по строке
			Попытка
				Ванесса.Sleep(1);
				Попытка
					ПолеРеквизит.ЗакрытьВыпадающийСписок();
					Ванесса.Sleep(1);
					ПолеРеквизит.ОткрытьВыпадающийСписок();
					Ванесса.Sleep(1);
				Исключение
					//Ванесса.ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль("ОбработкаИсключения4. " + ОписаниеОшибки() + ";СчетчикПопыток="+СчетчикПопыток);
				КонецПопытки;
				
				ПолеРеквизит.ВыполнитьВыборИзВыпадающегоСписка(ВыбираемоеЗначение);
				Возврат Неопределено;
			Исключение
				//Ванесса.ЗаписатьСтрокуВТекстовыйЛогИлиКонсоль("ОбработкаИсключения5. " + ОписаниеОшибки() + ";СчетчикПопыток="+СчетчикПопыток);
			КонецПопытки;
		КонецЕсли;	 
		
		Если СчетчикПопыток < КоличествоПопыток Тогда
			Ванесса.sleep(1);
		КонецЕсли;	 
	КонецЦикла; 
	
	//если оказались тут, значит надо вызвать исключение
	Если ИмяТЧ <> Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось в таблице <%1> сделать выбрать из списка выбора <%2> по строке <%3>. Количество попыток <%4>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяРеквизита); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ВыбираемоеЗначение); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",КоличествоПопыток); 
		ВызватьИсключение ТекстСообщения;
		
	Иначе
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось сделать выбрать из списка выбора <%1> по строке <%2>. Количество попыток <%3>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ВыбираемоеЗначение); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",КоличествоПопыток); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции 

&НаКлиенте
//И В открытой форме из выпадающего списка с заголовком "Реквизит2" я выбираю "ТестовыйЭлемент21"
//@ВОткрытойФормеИзВыпадающегоСпискаСЗаголовкомЯВыбираю(Парам01)
Функция ВОткрытойФормеИзВыпадающегоСпискаСЗаголовкомЯВыбираю(ИмяРеквизита,Знач ВыбираемоеЗначение,ИскатьПоИмени = Ложь) Экспорт
	ВыбираемоеЗначение = ПолучитьКорректныйТекстДляВставкиВПоле(ВыбираемоеЗначение);
	
	ТипПоля = Тип("ТестируемоеПолеФормы");
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИскатьТолькоПоляВКоторыеВозможенВводТекста",Истина);
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, ТипПоля,ДопПараметры);
	
	Если Ванесса.Объект.ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы Тогда
		ПолеРеквизит.Активизировать();
	КонецЕсли;	 
	
	СделатьВводПоСтрокеВПолеВВода(Неопределено,Неопределено,ПолеРеквизит,ИмяРеквизита,ИскатьПоИмени,ВыбираемоеЗначение,ДопПараметры);
КонецФункции

&НаКлиенте
//И В открытой форме из выпадающего списка "Реквизит2" я выбираю "ТестовыйЭлемент21"
//@ВОткрытойФормеИзВыпадающегоСпискаЯВыбираю(Парам01)
Функция ВОткрытойФормеИзВыпадающегоСпискаЯВыбираю(ИмяРеквизита,ВыбираемоеЗначение,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеИзВыпадающегоСпискаСЗаголовкомЯВыбираю(ИмяРеквизита,ВыбираемоеЗначение,ИскатьПоИмени);
КонецФункции







&НаКлиенте
//И В открытой форме из выпадающего списка с именем "Реквизит2" я выбираю "ТестовыйЭлемент21"
//@ВОткрытойФормеИзВыпадающегоСпискаСИменемЯВыбираю(Парам01)
Функция ВОткрытойФормеИзВыпадающегоСпискаСИменемЯВыбираю(ИмяРеквизита,ВыбираемоеЗначение) Экспорт
	ВОткрытойФормеИзВыпадающегоСпискаСЗаголовкомЯВыбираю(ИмяРеквизита,ВыбираемоеЗначение,Истина);
КонецФункции




&НаКлиенте
//И В открытой форме я нажимаю кнопку очистить у поля с заголовком "Отбор"
//@ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоляСЗаголовком(Парам01)
Функция ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоляСЗаголовком(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ТекстОшибки = "";
	БылаОшибка = Ложь;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		ФормаТаблицы = Неопределено;
		БылаОшибка = Ложь;
		ТекстОшибки = "";
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("КоличествоПопыток", 1);
		
		Попытка	
			ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"), ДопПараметры);
			
			Ванесса.ПереместитьКурсорККнопкеОчиститьПоле(ПолеРеквизит);
			
			ПолеРеквизит.Активизировать();
			ПолеРеквизит.Очистить();
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И В открытой форме я нажимаю кнопку очистить у поля "Отбор"
//@ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоля(Парам01)
Функция ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоля(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоляСЗаголовком(ИмяРеквизита,ИскатьПоИмени);
КонецФункции






&НаКлиенте
//И В открытой форме я нажимаю кнопку очистить у поля с именем "Отбор"
//@ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоляСИменем(Парам01)
Функция ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоляСИменем(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоляСЗаголовком(ИмяРеквизита,Истина);
КонецФункции


&НаКлиенте
//И табличный документ формы с именем "РеквизитТабличныйДокумент" стал пустым
//@ТабличныйДокументФормыСИменемСталПустым(Парам01)
Функция ТабличныйДокументФормыСИменемСталПустым(ИмяРеквизита) Экспорт
	ТабличныйДокументФормыСИменемСталРавен(ИмяРеквизита,Неопределено,Истина);
КонецФункции



&НаКлиенте
//И В открытой форме в таблице с именем "ДеревоТестов" в колонке "Имя" нет значения "Temp1"
//@ВОткрытойФормеВТаблицеСИменемВКолонкеНетЗначения(Парам01,Парам02,Парам03)
Функция ВОткрытойФормеВТаблицеСИменемВКолонкеНетЗначения(ИмяТЧ,ИмяКолонки,ПроверяемоеЗначение) Экспорт
	ТЧ         = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	ЗначениеТЧ = ПолучитьСтрокиИзТаблицыTestClient(ТЧ);
	
	НомСтр = 0;
	Для каждого СтрокаТЧ Из ЗначениеТЧ Цикл
		НомСтр = НомСтр + 1;
		
		Значение = СтрокаТЧ[ИмяКолонки];
		Если Значение = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1>  нет колонки <%2>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяКолонки); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		Если Значение = ПроверяемоеЗначение Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> в строке №%2 найдено значение %3, а его не должно было быть.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",НомСтр); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ПроверяемоеЗначение); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЦикла;
	
КонецФункции

&НаКлиенте
//И В открытой форме в таблице с именем "ДеревоТестов" в колонке "Имя" есть значение "ОткрытиеФормы"
//@ВОткрытойФормеВТаблицеСИменемВКолонкеЕстьЗначение(Парам01,Парам02,Парам03)
Функция ВОткрытойФормеВТаблицеСИменемВКолонкеЕстьЗначение(ИмяТЧ,ИмяКолонки,ПроверяемоеЗначение) Экспорт
	ТЧ         = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	ЗначениеТЧ = ПолучитьСтрокиИзТаблицыTestClient(ТЧ);
	Если ЗначениеТЧ = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить значение таблицы <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Нашли = Ложь;
	
	НомСтр = 0;
	Для каждого СтрокаТЧ Из ЗначениеТЧ Цикл
		НомСтр = НомСтр + 1;
		
		Значение = СтрокаТЧ[ИмяКолонки];
		Если Значение = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1>  нет колонки <%2>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяКолонки); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		Если Значение = ПроверяемоеЗначение Тогда
			Нашли = Истина;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если Не Нашли Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1>  НЕ найдено значение %2, а оно должно было быть.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПроверяемоеЗначение); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 	
	
КонецФункции

&НаКлиенте
Функция ПроверитьЧтоПолеТаблицыАктивизировалось(ТЧ,ИмяТЧ,ИмяРеквизита,НужноеИмяПоля,ТекущийРежимРедактирование)
	Если ТекущийРежимРедактирование = Истина Тогда
		ТекущийЭлементТаблицы = ТЧ.ПолучитьТекущийЭлемент();
		Если ТекущийЭлементТаблицы.Имя <> НужноеИмяПоля Тогда
			ЭлементАктивизировался = Ложь;
			КолПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
			Для Ккк = 1 По КолПопыток Цикл
				Ванесса.sleep(1);
				ТекущийРежимРедактирование = ТЧ.ТекущийРежимРедактирование();
				Если ТекущийРежимРедактирование = Ложь Тогда
					Прервать;
				КонецЕсли;	 
				
				ТекущийЭлементТаблицы = ТЧ.ПолучитьТекущийЭлемент();
				
				Если ТекущийЭлементТаблицы.Имя = НужноеИмяПоля Тогда
					ЭлементАктивизировался = Истина;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	 
			
			Если НЕ ЭлементАктивизировался Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> не получилось активизировать поле <%2>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяРеквизита); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
КонецФункции 

&НаКлиенте
//И В открытой форме в таблице "Отборы" я активизирую поле "ИмяПоля"
//@ВОткрытойФормеВТЧЯАктивизируюПоле(Парам01,Парам02)
Функция ВОткрытойФормеВТЧЯАктивизируюПоле(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ФормаТаблицы = Неопределено;
	
	ТекстОшибки = "";
	БылаОшибка = Ложь;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		ФормаТаблицы = Неопределено;
		БылаОшибка = Ложь;
		ТекстОшибки = "";
		
		Попытка	
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ,ФормаТаблицы,,, ДопПараметры);
			
			Если ИскатьПоИмени Тогда
				ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ, ДопПараметры);
			Иначе	
				ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ, ДопПараметры);
			КонецЕсли;	 
			
			Если ПолеРеквизит = Неопределено Тогда
				Если ИскатьПоИмени Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с именем <%2> не найдено.");
				Иначе	
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с заголовком <%2> не найдено.");
				КонецЕсли;	 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяРеквизита); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита);
			НужноеИмяПоля = ПолеРеквизит.Имя;
			
			ТекущийРежимРедактирование = Неопределено;
			Если Ванесса.Версия8312ИлиВыше Тогда
				ТекущийРежимРедактирование = ТЧ.ТекущийРежимРедактирование();
			КонецЕсли;	 
			
			ПолеРеквизит.Активизировать();
			
			ПроверитьЧтоПолеТаблицыАктивизировалось(ТЧ,ИмяТЧ,ИмяРеквизита,НужноеИмяПоля,ТекущийРежимРедактирование);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ДопПараметры = Новый Структура;
		Попытка
			ЗначениеТЧ = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ,ДопПараметры);
		Исключение
			ЗначениеТЧ = Неопределено;
		КонецПопытки;
		
		Если ЗначениеТЧ <> Неопределено Тогда
			МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
			Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ,Ванесса.Локализовать("ТекущееЗначениеТаблицы"));
		КонецЕсли;	 
		
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 
	
КонецФункции


&НаКлиенте
//И В открытой форме в таблице "Отборы" я активизирую поле с именем "ИмяПоля"
//@ВОткрытойФормеВТЧЯАктивизируюПолеСИменем(Парам01,Парам02)
Функция ВОткрытойФормеВТЧЯАктивизируюПолеСИменем(ИмяТЧ,ИмяРеквизита) Экспорт
	ВОткрытойФормеВТЧЯАктивизируюПоле(ИмяТЧ,ИмяРеквизита,Истина);
КонецФункции


&НаКлиенте
Функция ДополнитьРазделительПути(Знач Путь)
	Если Прав(Путь,1) = "\" или Прав(Путь,1) = "/" Тогда
		Возврат Лев(Путь,СтрДлина(Путь)-1);
	КонецЕсли;	 
	
	Возврат Путь;
КонецФункции	 

&НаКлиенте
//@ЯБудуВыбиратьВнешнийФайл(Парам01,Парам02,Парам03,Парам04,Парам05,Парам06,Парам07)
Функция ЯБудуВыбиратьВнешнийФайл(
	Знач ИмяФайла,
	ЧастьИмени2 = Неопределено,
	ЧастьИмени3 = Неопределено,
	ЧастьИмени4 = Неопределено,
	ЧастьИмени5 = Неопределено,
	ЧастьИмени6 = Неопределено,
	ЧастьИмени7 = Неопределено) Экспорт

	УстановитьРезультатДиалогаВыбора(
		Неопределено, 
		ИмяФайла,
		ЧастьИмени2, 
		ЧастьИмени3, 
		ЧастьИмени4, 
		ЧастьИмени5, 
		ЧастьИмени6, 
		ЧастьИмени7);

	
КонецФункции

&НаКлиенте
//@ЯВыбираюФайл(Парам01,Парам02,Парам03,Парам04,Парам05,Парам06,Парам07)
Функция ЯВыбираюФайл(
	Знач ИмяФайла,
	ЧастьИмени2 = Неопределено,
	ЧастьИмени3 = Неопределено,
	ЧастьИмени4 = Неопределено,
	ЧастьИмени5 = Неопределено,
	ЧастьИмени6 = Неопределено,
	ЧастьИмени7 = Неопределено) Экспорт

		
	ЯБудуВыбиратьВнешнийФайл(ИмяФайла, ЧастьИмени2, ЧастьИмени3, ЧастьИмени4, ЧастьИмени5, ЧастьИмени6, ЧастьИмени7);
	
КонецФункции

&НаКлиенте
//И я отменяю выбор файла
//@ЯОтменяюВыборФайла()
Функция ЯОтменяюВыборФайла() Экспорт
	
	КонтекстСохраняемый.ТестовоеПриложение.УстановитьРезультатДиалогаВыбораФайла(Ложь);
	
КонецФункции

&НаКлиенте
//@ЯБудуВыбиратьВнешнийФайлСИндексомФильтра(ИндексФильтра,Парам01,Парам02,Парам03,Парам04,Парам05,Парам06,Парам07)
Функция ЯБудуВыбиратьВнешнийФайлСИндексомФильтра(
	Знач ИндексФильтра,
	Знач ИмяФайла,
	ЧастьИмени2 = Неопределено,
	ЧастьИмени3 = Неопределено,
	ЧастьИмени4 = Неопределено,
	ЧастьИмени5 = Неопределено,
	ЧастьИмени6 = Неопределено,
	ЧастьИмени7 = Неопределено) Экспорт

	
	УстановитьРезультатДиалогаВыбора(
		ИндексФильтра, 
		ИмяФайла, 
		ЧастьИмени2, 
		ЧастьИмени3, 
		ЧастьИмени4, 
		ЧастьИмени5, 
		ЧастьИмени6, 
		ЧастьИмени7);
	
КонецФункции

&НаКлиенте
//@ЯВыбираюФайлСИндексомФильтра(ИндексФильтра,Парам01,Парам02,Парам03,Парам04,Парам05,Парам06,Парам07)
Функция ЯВыбираюФайлСИндексомФильтра(
	Знач ИндексФильтра,
	Знач ИмяФайла,
	ЧастьИмени2 = Неопределено,
	ЧастьИмени3 = Неопределено,
	ЧастьИмени4 = Неопределено,
	ЧастьИмени5 = Неопределено,
	ЧастьИмени6 = Неопределено,
	ЧастьИмени7 = Неопределено) Экспорт

	
	ЯБудуВыбиратьВнешнийФайлСИндексомФильтра(ИндексФильтра, ИмяФайла, ЧастьИмени2, ЧастьИмени3, ЧастьИмени4, ЧастьИмени5, ЧастьИмени6, ЧастьИмени7);
	
КонецФункции

&НаКлиенте
Функция УстановитьРезультатДиалогаВыбора(
	Знач ИндексФильтра,
	Знач ИмяФайла,
	ЧастьИмени2 = Неопределено,
	ЧастьИмени3 = Неопределено,
	ЧастьИмени4 = Неопределено,
	ЧастьИмени5 = Неопределено,
	ЧастьИмени6 = Неопределено,
	ЧастьИмени7 = Неопределено)
	
	
	Если ТипЗнч(ИмяФайла) = Тип("Массив") ИЛИ ТипЗнч(ИмяФайла) = Тип("ФиксированныйМассив") Тогда
		Если ИндексФильтра = Неопределено Тогда
			Ванесса.УстановитьРезультатДиалогаВыбораФайла(Истина, ИмяФайла, Неопределено);
		Иначе
			Ванесса.УстановитьРезультатДиалогаВыбораФайла(Истина, ИмяФайла, ИндексФильтра);
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;	 
		
	ИмяФайла = СтрЗаменить(ИмяФайла, "$КаталогПроекта$", ДополнитьРазделительПути(Ванесса.Объект.КаталогПроекта));
	
	Ванесса.СоединитьСтрокиЕслиЭтоВозможно(
		ИмяФайла,
		ЧастьИмени2,
		ЧастьИмени3,
		ЧастьИмени4,
		ЧастьИмени5,
		ЧастьИмени6,
		ЧастьИмени7
	);
	
	Если ИндексФильтра = Неопределено Тогда
		Ванесса.УстановитьРезультатДиалогаВыбораФайла(Истина, ИмяФайла, Неопределено);
	Иначе
		Ванесса.УстановитьРезультатДиалогаВыбораФайла(Истина, ИмяФайла, ИндексФильтра);
	КонецЕсли;	
	
КонецФункции	

&НаКлиенте
//И я очищаю окно сообщений пользователю
//@ЯОчищаюОкноСообщенийПользователю
Функция ЯОчищаюОкноСообщенийПользователю() Экспорт
	АктивноеОкно = ПолучитьАктивноеОкноИзТестовоеПриложение();
	Если АктивноеОкно <> Неопределено Тогда
		АктивноеОкно.ЗакрытьПанельСообщенийПользователю();
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//Когда я перехожу по навигационной ссылке "НавигационнаяСсылка"
//@ЯПерехожуПоНавигационнойСсылке(Парам01)
Функция ЯПерехожуПоНавигационнойСсылке(Знач НавигационнаяСсылка) Экспорт
	ТекстОшибки = "";
	
	НадоВызватьИсключение = Истина;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			
			ГлавноеОкноТестируемого = Ванесса.ПолучитьГлавноеОкноИзТестовоеПриложение();
			ГлавноеОкноТестируемого.ВыполнитьКоманду(НавигационнаяСсылка);
			НадоВызватьИсключение = Ложь;
			Прервать;
			
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
			Ванесса.ОбработатьСменуАктивногоОкна();
		КонецПопытки;
		
	КонецЦикла;
	
	Если НадоВызватьИсключение Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецФункции


&НаКлиенте
//В таблице "ТабличнаяЧасть1" из выпадающего списка "Реквизит справочник" я выбираю "ТестовыйЭлемент21" с выбором"
//@ВТЧИзВыпадающегоСпискаЯВыбираюСВыбором(Парам01,Парам02,Парам03)
Функция ВТЧИзВыпадающегоСпискаЯВыбираюСВыбором(Парам01,Парам02,Парам03) Экспорт
	ВОткрытойФормеВТЧИзВыпадающегоСпискаЯВыбираюСВыбором(Парам01,Парам02,Парам03);
КонецФункции

&НаКлиенте
//В таблице "ДокументыПоВидам" я нажимаю кнопку выбора у реквизита "Скан"
//@ВТЧЯНажимаюКнопкуВыбораУРеквизита(Парам01,Парам02)
Функция ВТЧЯНажимаюКнопкуВыбораУРеквизита(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизита(Парам01,Парам02);
КонецФункции

&НаКлиенте
//В таблице "ДокументыПоВидам" я нажимаю кнопку выбора у реквизита "Скан"
//@ВТаблицеЯНажимаюКнопкуВыбораУРеквизита(Парам01,Парам02)
Функция ВТаблицеЯНажимаюКнопкуВыбораУРеквизита(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизита(Парам01,Парам02);
КонецФункции

&НаКлиенте
//В таблице "ДокументыПоВидам" я нажимаю кнопку выбора у реквизита с именем "Скан"
//@ВТаблицеЯНажимаюКнопкуВыбораУРеквизитаСИменем(Парам01,Парам02)
Функция ВТаблицеЯНажимаюКнопкуВыбораУРеквизитаСИменем(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯНажимаюКнопкуВыбораУРеквизита(Парам01,Парам02,Истина);
КонецФункции

&НаКлиенте
//И в таблице  "Список" я перехожу на одну строку вверх"
//@ВТЧЯПерехожуНаОднуСтрокуВверх(Парам01)
Функция ВТЧЯПерехожуНаОднуСтрокуВверх(Парам01) Экспорт
	ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВверх(Парам01);
КонецФункции

&НаКлиенте
//И в таблице  "Список" я перехожу на одну строку вверх"
//@ВТаблицеЯПерехожуНаОднуСтрокуВверх(Парам01)
Функция ВТаблицеЯПерехожуНаОднуСтрокуВверх(Парам01) Экспорт
	ВТЧЯПерехожуНаОднуСтрокуВверх(Парам01);
КонецФункции


&НаКлиенте
//И в таблице  "Список" я перехожу на одну строку вниз"
//@ВТЧЯПерехожуНаОднуСтрокуВниз(Парам01)
Функция ВТЧЯПерехожуНаОднуСтрокуВниз(Парам01) Экспорт
	ВОткрытойФормеВТЧЯПерехожуНаОднуСтрокуВниз(Парам01);
КонецФункции

&НаКлиенте
//И в таблице  "Список" я перехожу на одну строку вниз"
//@ВТаблицеЯПерехожуНаОднуСтрокуВниз(Парам01)
Функция ВТаблицеЯПерехожуНаОднуСтрокуВниз(Парам01) Экспорт
	ВТЧЯПерехожуНаОднуСтрокуВниз(Парам01);
КонецФункции

&НаКлиенте
//И в поле "Наименование" я ввожу текст "111"
//@ВПолеЯВвожуТекст(Парам01,Парам02)
Функция ВПолеЯВвожуТекст(Парам01,Парам02,ЧастьИмени2 = Неопределено,
	                                       ЧастьИмени3 = Неопределено,
	                                       ЧастьИмени4 = Неопределено,
	                                       ЧастьИмени5 = Неопределено,
	                                       ЧастьИмени6 = Неопределено,
	                                       ЧастьИмени7 = Неопределено) Экспорт
										   
	Ванесса.СоединитьСтрокиЕслиЭтоВозможно(Парам02,ЧастьИмени2,
	                                       ЧастьИмени3,
	                                       ЧастьИмени4,
	                                       ЧастьИмени5,
	                                       ЧастьИмени6,
	                                       ЧастьИмени7);							   
										   
	ВОткрытойФормеВПолеЯВвожуТекст(Парам01,Парам02);
КонецФункции

&НаКлиенте
// Возвращает Дату без времени (не зависит от региональных настроек Windows)
// Дата должна содержать Пробел, например 01-01-2019 12:00:00, 01.01.2019 12:00:00, 01/01/2019 12:00:00 PM 
Функция ДатаБезВремениСтрока(Дата)
	
	ДатаСтрока = Строка(Дата);
	ПоложениеПробела = Найти(ДатаСтрока, " ");
	ДатаБезВремени = СокрЛП(Лев(ДатаСтрока, ПоложениеПробела)); 

	Возврат ДатаБезВремени;
КонецФункции


&НаКлиенте
//И в поле "ИмяПоля" я ввожу текущую дату
//@ВПолеЯВвожуТекущуюДату(Парам01)
Функция ВПолеЯВвожуТекущуюДату(ИмяПоля,ИскатьПоИмени = Ложь) Экспорт
	Текст = Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
	
	Если ИскатьПоИмени Тогда
		ВОткрытойФормеВПолеСИменемЯВвожуТекст(ИмяПоля,Текст);
	Иначе	
		ВОткрытойФормеВПолеЯВвожуТекст(ИмяПоля,Текст);
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И в поле с именем "ИмяПоля" я ввожу текущую дату
//@ВПолеСИменемЯВвожуТекущуюДату(Парам01)
Функция ВПолеСИменемЯВвожуТекущуюДату(ИмяПоля) Экспорт
	ВПолеЯВвожуТекущуюДату(ИмяПоля,Истина);
КонецФункции

&НаКлиенте
//И в поле "ИмяПоля" я ввожу начало текущего месяца
//@ВПолеЯВвожуНачалоТекущегоМесяца(Парам01)
Функция ВПолеЯВвожуНачалоТекущегоМесяца(ИмяПоля) Экспорт
	//Текст = Формат(НачалоМесяца(ТекущаяДата()),"ДФ=dd.MM.yyyy");
	Текст = ДатаБезВремениСтрока(НачалоМесяца(ТекущаяДата())); 
	ВОткрытойФормеВПолеСЗаголовкомЯВвожуТекст(ИмяПоля,Текст,Неопределено);
КонецФункции

&НаКлиенте
//И в поле "ИмяПоля" я ввожу конец текущего месяца
//@ВПолеЯВвожуКонецТекущегоМесяца(Парам01)
Функция ВПолеЯВвожуКонецТекущегоМесяца(ИмяПоля) Экспорт
	//Текст = Формат(КонецМесяца(ТекущаяДата()),"ДФ=dd.MM.yyyy");
	Текст = ДатаБезВремениСтрока(КонецМесяца(ТекущаяДата())); 
	ВОткрытойФормеВПолеСЗаголовкомЯВвожуТекст(ИмяПоля,Текст,Неопределено);

КонецФункции

&НаКлиенте
//И в поле "ИмяПоля" я ввожу начало следующего месяца
//@ВПолеЯВвожуНачалоСледующегоМесяца(Парам01)
Функция ВПолеЯВвожуНачалоСледующегоМесяца(ИмяПоля) Экспорт
	Текст = Формат(НачалоМесяца(ДобавитьМесяц(ТекущаяДата(),1)),"ДФ=dd.MM.yyyy");
	ВОткрытойФормеВПолеСЗаголовкомЯВвожуТекст(ИмяПоля,Текст,Неопределено);
КонецФункции

&НаКлиенте
//И в поле "ИмяПоля" я ввожу конец следующего месяца
//@ВПолеЯВвожуКонецСледующегоМесяца(Парам01)
Функция ВПолеЯВвожуКонецСледующегоМесяца(ИмяПоля) Экспорт
	Текст = Формат(КонецМесяца(ДобавитьМесяц(ТекущаяДата(),1)),"ДФ=dd.MM.yyyy");
	ВОткрытойФормеВПолеСЗаголовкомЯВвожуТекст(ИмяПоля,Текст,Неопределено);
КонецФункции



&НаКлиенте
//И в таблице "ИмяТаблицы" в поле с именем "ИмяПоля" я ввожу начало текущего месяца
//@ВТаблицеВПолеСИменемЯВвожуНачалоТекущегоМесяца(Парам01,Парам02)
Функция ВТаблицеВПолеСИменемЯВвожуНачалоТекущегоМесяца(ИмяТаблицы,ИмяПоля) Экспорт
	Текст = Формат(НачалоМесяца(ТекущаяДата()),"ДФ=dd.MM.yyyy");
	ВОткрытойФормеВТЧВПолеСЗаголовкомЯВвожуТекст(ИмяТаблицы,ИмяПоля,Текст,Истина);
КонецФункции

&НаКлиенте
//И в таблице "ИмяТаблицы" в поле с именем "ИмяПоля" я ввожу конец текущего месяца
//@ВТаблицеВПолеСИменемЯВвожуКонецТекущегоМесяца(Парам01,Парам02)
Функция ВТаблицеВПолеСИменемЯВвожуКонецТекущегоМесяца(ИмяТаблицы,ИмяПоля) Экспорт
	Текст = Формат(КонецМесяца(ТекущаяДата()),"ДФ=dd.MM.yyyy");
	ВОткрытойФормеВТЧВПолеСЗаголовкомЯВвожуТекст(ИмяТаблицы,ИмяПоля,Текст,Истина);
КонецФункции

&НаКлиенте
//И в таблице "ИмяТаблицы" в поле с именем "ИмяПоля" я ввожу начало следующего месяца
//@ВТаблицеВПолеСИменемЯВвожуНачалоСледующегоМесяца(Парам01,Парам02)
Функция ВТаблицеВПолеСИменемЯВвожуНачалоСледующегоМесяца(ИмяТаблицы,ИмяПоля) Экспорт
	Текст = Формат(НачалоМесяца(ДобавитьМесяц(ТекущаяДата(),1)),"ДФ=dd.MM.yyyy");
	ВОткрытойФормеВТЧВПолеСЗаголовкомЯВвожуТекст(ИмяТаблицы,ИмяПоля,Текст,Истина);
КонецФункции

&НаКлиенте
//И в таблице "ИмяТаблицы" в поле с именем "ИмяПоля" я ввожу конец следующего месяца
//@ВТаблицеВПолеСИменемЯВвожуКонецСледующегоМесяца(Парам01,Парам02)
Функция ВТаблицеВПолеСИменемЯВвожуКонецСледующегоМесяца(ИмяТаблицы,ИмяПоля) Экспорт
	Текст = Формат(КонецМесяца(ДобавитьМесяц(ТекущаяДата(),1)),"ДФ=dd.MM.yyyy");
	ВОткрытойФормеВТЧВПолеСЗаголовкомЯВвожуТекст(ИмяТаблицы,ИмяПоля,Текст,Истина);
КонецФункции




&НаКлиенте
//И в поле "ИмяПоля" я ввожу текущую дату и текущее время
//@ВПолеЯВвожуТекущуюДатуИТекущееВремя(Парам01)
Функция ВПолеЯВвожуТекущуюДатуИТекущееВремя(ИмяПоля,ИскатьПоИмени = Ложь) Экспорт
	Текст = Строка(ТекущаяДата());
	
	Если ИскатьПоИмени Тогда
		ВОткрытойФормеВПолеСИменемЯВвожуТекст(ИмяПоля,Текст);
	Иначе	
		ВОткрытойФормеВПолеЯВвожуТекст(ИмяПоля,Текст);
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И в поле с именем "ИмяПоля" я ввожу текущую дату и текущее время
//@ВПолеСИменемЯВвожуТекущуюДатуИТекущееВремя(Парам01)
Функция ВПолеСИменемЯВвожуТекущуюДатуИТекущееВремя(ИмяПоля) Экспорт
	ВПолеЯВвожуТекущуюДатуИТекущееВремя(ИмяПоля,Истина);
КонецФункции




&НаКлиенте
//И в поле "Наименование" я ввожу значение выражения "1+1"
//@ВПолеЯВвожуЗначениеВыражения(Парам01,Парам02)
Функция ВПолеЯВвожуЗначениеВыражения(ИмяРеквизита, Знач ПараметрТекст, ИскатьПоИмени = Ложь) Экспорт
	ПолучилосьВычислить = Ложь;
	Попытка
		Текст = Формат(Ванесса.ВычислитьВнутреннееВыражение(ПараметрТекст, "ЧГ=; ЧН=0"));
		ПолучилосьВычислить = Истина;
	Исключение
		Текст = ПараметрТекст;
	КонецПопытки;
	
	Если НЕ ПолучилосьВычислить Тогда
		Попытка
			Текст = Ванесса.ЗаменитьСлужебныеСимволыВВыраженииДляВычисления(
				Ванесса.ЗначениеПараметраТекущегоСценария(1));
			Текст = Формат(Ванесса.ВычислитьВнутреннееВыражение(Текст, "ЧГ=; ЧН=0"));
		Исключение
			Текст = ПараметрТекст;
		КонецПопытки;
	КонецЕсли;	 
	
	
	ТипПоля = Тип("ТестируемоеПолеФормы");
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИскатьТолькоПоляВКоторыеВозможенВводТекста",Истина);
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, ТипПоля,ДопПараметры);
	ПолеРеквизит.Активизировать();
	
	Если ПолеРеквизит.Вид = ВидПоляФормы.ПолеФорматированногоДокумента или ПолеРеквизит.Вид = ВидПоляФормы.ПолеHTMLДокумента Тогда
		Если Ванесса.Версия8325ИлиВыше Тогда
			ПолеРеквизит.ВвестиHTMLДокумента(Текст);
		Иначе	
			ПолеРеквизит.ВвестиHTML(Текст);
		КонецЕсли;	
	Иначе	
		//ПолеРеквизит.ВвестиТекст(Текст);
		Ванесса.ВвестиВПолеТекст(ПолеРеквизит,Текст);
	КонецЕсли;

КонецФункции

&НаКлиенте
//И в поле с именем "Наименование" я ввожу значение выражения "1+1"
//@ВПолеСИменемЯВвожуЗначениеВыражения(Парам01,Парам02)
Функция ВПолеСИменемЯВвожуЗначениеВыражения(ИмяРеквизита,Текст,ИскатьПоИмени = Ложь) Экспорт
	ВПолеЯВвожуЗначениеВыражения(ИмяРеквизита,Текст,Истина);
КонецФункции



&НаКлиенте
//И в таблице "ТабличнаяЧасть1" в поле 'Реквизит строка' я ввожу значение выражения '"Значение" + $ТекНомерСтроки$'
//@ВТаблицеВПолеЯВвожуЗначениеВыражения(Парам01,Парам02,Парам03)
Функция ВТаблицеВПолеЯВвожуЗначениеВыражения(ИмяТаблицы, ИмяРеквизита, Знач ПараметрТекст, ИскатьПоИмени = Ложь) Экспорт
	ПолучилосьВычислить = Ложь;
	Попытка
		Текст = Формат(Ванесса.ВычислитьВнутреннееВыражение(ПараметрТекст, "ЧГ=; ЧН=0"));
		ПолучилосьВычислить = Истина;
	Исключение
		Текст = ПараметрТекст;
	КонецПопытки;
	
	Если НЕ ПолучилосьВычислить Тогда
		Попытка
			Текст = Ванесса.ЗаменитьСлужебныеСимволыВВыраженииДляВычисления(
			Ванесса.ЗначениеПараметраТекущегоСценария(2));
			Текст = Формат(Ванесса.ВычислитьВнутреннееВыражение(Текст, "ЧГ=; ЧН=0"));
		Исключение
			Текст = ПараметрТекст;
		КонецПопытки;
	КонецЕсли;	 
	
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТаблицы,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТаблицы,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	 
	
	ПолеРеквизит.Активизировать();
	
	ТаблицаВРежимеРедактирования = ТЧ.ТекущийРежимРедактирование();
	Если Не ТаблицаВРежимеРедактирования Тогда
		ТЧ.ИзменитьСтроку();
	КонецЕсли;	 
	
	//ПолеРеквизит.ВвестиТекст(Текст);
	Ванесса.ВвестиВПолеТекст(ПолеРеквизит,Текст);

КонецФункции


&НаКлиенте
//И в таблице "ТабличнаяЧасть1" в поле с именем 'РеквизитСтрока' я ввожу значение выражения '"Значение" + $ТекНомерСтроки$'
//@ВТаблицеВПолеСименемЯВвожуЗначениеВыражения(Парам01,Парам02,Парам03)
Функция ВТаблицеВПолеСименемЯВвожуЗначениеВыражения(ИмяТаблицы,ИмяРеквизита,Знач Текст) Экспорт
	ВТаблицеВПолеЯВвожуЗначениеВыражения(ИмяТаблицы,ИмяРеквизита,Текст,Истина);
КонецФункции




&НаКлиенте
//И я нажимаю кнопку выбора у поля "Реквизит2"
//@ЯНажимаюКнопкуВыбораУПоля(Парам01)
Функция ЯНажимаюКнопкуВыбораУПоля(Парам01) Экспорт
	ВОткрытойФормеЯНажимаюКнопкуВыбораУПоля(Парам01);
КонецФункции

&НаКлиенте
//И я нажимаю кнопку выбора у поля с именем "Реквизит4"
//@ЯНажимаюКнопкуВыбораУПоляСИменем(Парам01)
Функция ЯНажимаюКнопкуВыбораУПоляСИменем(Парам01) Экспорт
	ВОткрытойФормеЯНажимаюКнопкуВыбораУПоляСИменем(Парам01);
КонецФункции

&НаКлиенте
//И я нажимаю на кнопку "Создать"
//@ЯНажимаюНаКнопку(Парам01)
Функция ЯНажимаюНаКнопку(Парам01) Экспорт
	ВОткрытойФормеЯНажимаюНаКнопку(Парам01);
КонецФункции

&НаКлиенте
//И я нажимаю на кнопку с заголовком "ЗаголовокКнопки" и именем "ИмяКнопки"
//@ЯНажимаюНаКнопкуСЗаголовкомИИменем(Парам01,Парам02)
Функция ЯНажимаюНаКнопкуСЗаголовкомИИменем(ЗаголовокКнопки,ИмяКнопки) Экспорт
	//Для обхода бага платформы с поиском активных окон на старых версиях платформы.
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ЗапомнитьАктивноеОкно",Ложь);
	
	ТекстОшибки = "";
	
	НадоВызватьИсключение = Истина;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			МассивФорм = Ванесса.НайтиКонтейнерыТекущегоОкнаTestClient(ДопПараметры);
			НомерФормы = 0;
			Для Каждого ТекущаяФорма Из МассивФорм Цикл
				НомерФормы = НомерФормы + 1;
				Нашли = Ложь;
				Кнопка = Неопределено;
				Попытка
					Кнопка = ТекущаяФорма.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),ЗаголовокКнопки,ИмяКнопки);
				Исключение
				КонецПопытки;
				
				Если Кнопка = Неопределено Тогда
					ТекстОшибки = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка с заголовком <%1> и именем <%2> не найдена.");
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%1",ЗаголовокКнопки); 
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%2",ИмяКнопки); 
				Иначе	
					Нашли = Истина;
					НадоВызватьИсключение = Ложь;
					Прервать;
				КонецЕсли;	 
				
			КонецЦикла;	 
			
			Если НЕ Нашли И (НомерФормы = МассивФорм.Количество()) Тогда
				//исключение буде вызвано в завершении процедуры если это необходимо
				Если СчетчикПопыток < КоличествоПопыток Тогда
					Ванесса.sleep(1);
				КонецЕсли;	 
			Иначе	
				Прервать;
			КонецЕсли;	 

		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
			Ванесса.ОбработатьСменуАктивногоОкна();
		КонецПопытки;
		
	КонецЦикла;

	Если НадоВызватьИсключение Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 	
	
	ПолучилосьАктивизировать = АктивизироватьКнопку(Кнопка,ТекущаяФорма);
	                                           
	ТекстОшибки        = "";
	ПолучилосьНажать   = Ложь;
	КоличествоПопыток  = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Попытка
			Ванесса.НажатьНаКнопкуФормы(Кнопка);
			ПолучилосьНажать = Истина;
			Прервать;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
	КонецЦикла;	
	
	Если НЕ ПолучилосьНажать Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СбрасыватьЗафиксированнуюФорму",Истина);
	//параметр СбрасыватьЗафиксированнуюФорму должен быть Истина, иначе после нажатия на "Провести и закрыть", могут быть ошибки
	Ванесса.ОбработатьСменуАктивногоОкна(ДопПараметры);
КонецФункции

&НаКлиенте
//И в поле с именем "Наименование" я ввожу текст "111"
//@ВПолеСИменемЯВвожуТекст(Парам01,Парам02)
Функция ВПолеСИменемЯВвожуТекст(Парам01,Парам02,ЧастьИмени2 = Неопределено,
	                                       ЧастьИмени3 = Неопределено,
	                                       ЧастьИмени4 = Неопределено,
	                                       ЧастьИмени5 = Неопределено,
	                                       ЧастьИмени6 = Неопределено,
	                                       ЧастьИмени7 = Неопределено) Экспорт
	
	Ванесса.СоединитьСтрокиЕслиЭтоВозможно(Парам02,ЧастьИмени2,
	                                       ЧастьИмени3,
	                                       ЧастьИмени4,
	                                       ЧастьИмени5,
	                                       ЧастьИмени6,
	                                       ЧастьИмени7);							   
	ВОткрытойФормеВПолеСИменемЯВвожуТекст(Парам01,Парам02);
КонецФункции

&НаКлиенте
//И в полосе регулирования 'ЗаголовокПоля' я перехожу к значению 'Значение'
//@ВПолосеРегулированияЯПерехожуКЗначению(ЗаголовокПоля,Значение)
Функция ВПолосеРегулированияЯПерехожуКЗначению(ЗаголовокПоля, Значение) Экспорт
	
	ВОткрытойФормеВПолосеРегулированияЯПерехожуКЗначению(ЗаголовокПоля, Значение);
	
КонецФункции

&НаКлиенте
//И в полосе регулирования с именем 'ИмяПоля' я перехожу к значению 'Значение'
//@ВПолосеРегулированияСИменемЯПерехожуКЗначению(ИмяПоля,Значение)
Функция ВПолосеРегулированияСИменемЯПерехожуКЗначению(ИмяПоля, Значение) Экспорт
	
	ВОткрытойФормеВПолосеРегулированияЯПерехожуКЗначению(ИмяПоля, Значение, Истина);
	
КонецФункции

&НаКлиенте
//И я перехожу к закладке "Вспомогательная"
//@ЯПерехожуКЗакладке(Парам01)
Функция ЯПерехожуКЗакладке(Парам01) Экспорт
	ВОткрытойФормеЯПерехожуКЗакладке(Парам01);
КонецФункции

&НаКлиенте
//И я перехожу к закладке с именем "Вспомогательная"
//@ЯПерехожуКЗакладкеСИменем(Парам01)
Функция ЯПерехожуКЗакладкеСИменем(Парам01) Экспорт
	ВОткрытойФормеЯПерехожуКЗакладкеСИменем(Парам01);
КонецФункции

&НаКлиенте
//И я нажимаю на гиперссылку "Гиперссылка"
//@ЯНажимаюНаГиперссылку(Парам01)
Функция ЯНажимаюНаГиперссылку(Парам01) Экспорт
	ВОткрытойФормеЯНажимаюНаГиперссылку(Парам01);
КонецФункции

&НаКлиенте
//И я нажимаю на гиперссылку с именем "Гиперссылка"
//@ЯНажимаюНаГиперссылкуСИменем(Парам01)
Функция ЯНажимаюНаГиперссылкуСИменем(Парам01) Экспорт
	ВОткрытойФормеЯНажимаюНаГиперссылкуСИменем(Парам01);
КонецФункции

&НаКлиенте
//И я нажимаю на кнопку с именем "ЗаполнитьРекСтрока1"
//@ЯНажимаюНаКнопкуСИменем(Парам01)
Функция ЯНажимаюНаКнопкуСИменем(Парам01) Экспорт
	ВОткрытойФормеЯНажимаюНаКнопкуСИменем(Парам01);
КонецФункции

&НаКлиенте
//И я сворачиваю группу "СворачиваемаяГруппа"
//@ЯСворачиваюГруппу(Парам01)
Функция ЯСворачиваюГруппу(Парам01) Экспорт
	ВОткрытойФормеЯСворачиваюГруппу(Парам01);
КонецФункции

&НаКлиенте
//И я сворачиваю группу с именем "СворачиваемаяГруппа"
//@ЯСворачиваюГруппуСИменем(Парам01)
Функция ЯСворачиваюГруппуСИменем(Парам01) Экспорт
	ВОткрытойФормеЯСворачиваюГруппуСИменем(Парам01);
КонецФункции

&НаКлиенте
//И я разворачиваю группу "СворачиваемаяГруппа"
//@ЯРазворачиваюГруппу(Парам01)
Функция ЯРазворачиваюГруппу(Парам01) Экспорт
	ВОткрытойФормеЯРазворачиваюГруппу(Парам01);
КонецФункции

&НаКлиенте
//И я разворачиваю группу с именем "СворачиваемаяГруппа"
//@ЯРазворачиваюГруппуСИменем(Парам01)
Функция ЯРазворачиваюГруппуСИменем(Парам01) Экспорт
	ВОткрытойФормеЯРазворачиваюГруппуСИменем(Парам01);
КонецФункции

&НаКлиенте
//И я открываю выпадающий список "Реквизит2"
//@ЯОткрываюВыпадающийСписок(Парам01)
Функция ЯОткрываюВыпадающийСписок(Парам01) Экспорт
	ВОткрытойФормеЯОткрываюВыпадающийСписок(Парам01);
КонецФункции

&НаКлиенте
//И в таблице "ИмяТаблицы" я открываю выпадающий список "Реквизит2"
//@ВТаблицеЯОткрываюВыпадающийСписок(Парам01)
Функция ВТаблицеЯОткрываюВыпадающийСписок(ИмяТаблицы,ИмяЭлемента,ИскатьПоИмени = Ложь) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	Если ИскатьПоИмени Тогда
		ЭлементФормы = Ванесса.НайтиРеквизитТаблицы(ИмяТаблицы,ИмяЭлемента,ИскатьПоИмени,ТЧ);
	Иначе	
		ЭлементФормы = Ванесса.НайтиРеквизитТаблицы(ИмяТаблицы,ИмяЭлемента,ИскатьПоИмени,ТЧ);
	КонецЕсли;	 
	
	ЭлементФормы.ОткрытьВыпадающийСписок();
КонецФункции

&НаКлиенте
//И в таблице "ИмяТаблицы" я открываю выпадающий список с именем "Реквизит2"
//@ВТаблицеЯОткрываюВыпадающийСписокСИменем(Парам01)
Функция ВТаблицеЯОткрываюВыпадающийСписокСИменем(ИмяТаблицы,ИмяЭлемента) Экспорт
	ВТаблицеЯОткрываюВыпадающийСписок(ИмяТаблицы,ИмяЭлемента,Истина);
КонецФункции

&НаКлиенте
//И я открываю выпадающий список с именем "Реквизит2"
//@ЯОткрываюВыпадающийСписокСИменем(Парам01)
Функция ЯОткрываюВыпадающийСписокСИменем(Парам01) Экспорт
	ВОткрытойФормеЯОткрываюВыпадающийСписокСИменем(Парам01);
КонецФункции

&НаКлиенте
//И я сохраняю выпадающий список "Заголовок элемента" как "Имя переменной"
//@ЯСохраняюВыпадающийСписокКак(Парам01,Парам02)
Функция ЯСохраняюВыпадающийСписокКак(ЗаголовокСписка, ИмяПеременной, ИскатьПоИмени = Ложь) Экспорт
	
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(
		ЗаголовокСписка, 
		ИскатьПоИмени, 
		Истина, 
		Тип("ТестируемоеПолеФормы")
	);
	
	ПредставлениеСпискаВыбора = Ванесса.ДополнитьПредставлениеСпискаВыбора(ЭлементФормы.ПолучитьПредставлениеСпискаВыбора());
	
	ТаблицаВПамяти = Новый Массив;
	
	//СтруктураКолонок = Новый Структура();
	//СтруктураКолонок.Вставить("ПредставлениеДанных", "ПредставлениеДанных");
	//СтруктураКолонок.Вставить("ОтображаемыйТекст", "ОтображаемыйТекст");
	//ТаблицаВПамяти.Добавить(СтруктураКолонок);
	
	Для Каждого ЭлементСписка Из ПредставлениеСпискаВыбора Цикл
		ТаблицаВПамяти.Добавить(ЭлементСписка);
	КонецЦикла;
	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, ТаблицаВПамяти);
	
КонецФункции

&НаКлиенте
//И я сохраняю выпадающий список формы как "ИмяПеременной"
//@ЯСохраняюВыпадающийСписокКак(Парам01,Парам02)
Функция ЯСохраняюВыпадающийСписокФормыКак(ИмяПеременной) Экспорт
	
	ТекущаяФорма = ТекущаяФормаИзКлиентаТестирования();	
	ПредставлениеСпискаВыбора = Ванесса.ДополнитьПредставлениеСпискаВыбора(ТекущаяФорма.ПолучитьПредставлениеСпискаВыбора());
	
	ТаблицаВПамяти = Новый Массив;
	
	Для Каждого ЭлементСписка Из ПредставлениеСпискаВыбора Цикл
		ТаблицаВПамяти.Добавить(ЭлементСписка);
	КонецЦикла;
	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, ТаблицаВПамяти);
	
КонецФункции

&НаКлиенте
//И я сохраняю выпадающий список с именем "ИмяЭлемента" как "Имя переменной"
//@ЯСохраняюВыпадающийСписокСИменемКак(Парам01,Парам02)
Функция ЯСохраняюВыпадающийСписокСИменемКак(ЗаголовокСписка, ИмяПеременной) Экспорт
	
	ЯСохраняюВыпадающийСписокКак(ЗаголовокСписка, ИмяПеременной, Истина);
	
КонецФункции

&НаКлиенте
//И я выбираю значение реквизита "Реквизит2" из формы списка"
//@ЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01)
Функция ЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01) Экспорт
	ВОткрытойФормеЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01);
КонецФункции

&НаКлиенте
//И я выбираю значение реквизита с именем "Реквизит2" из формы списка"
//@ЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01)
Функция ЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01) Экспорт
	ВОткрытойФормеЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01);
КонецФункции

&НаКлиенте
//И я изменяю флаг "Реквизит булево"
//@ЯИзменяюФлаг(Парам01)
Функция ЯИзменяюФлаг(Парам01) Экспорт
	ВОткрытойФормеЯИзменяюФлаг(Парам01);
КонецФункции

&НаКлиенте
//И я изменяю флаг с именем "Реквизит булево"
//@ЯИзменяюФлагСИменем(Парам01)
Функция ЯИзменяюФлагСИменем(Парам01) Экспорт
	ВОткрытойФормеЯИзменяюФлагСИменем(Парам01);
КонецФункции

&НаКлиенте
//И я меняю значение переключателя "Реквизит переключатель" на "Первое значение"
//@ЯМеняюЗначениеПереключателяНа(Парам01,Парам02)
Функция ЯМеняюЗначениеПереключателяНа(Парам01,Парам02) Экспорт
	ВОткрытойФормеЯМеняюЗначениеПереключателяНа(Парам01,Парам02);
КонецФункции

&НаКлиенте
//И я меняю значение переключателя 'Реквизит переключатель' на 'Второе*' по шаблону
//@ЯМеняюЗначениеПереключателяНаПоШаблону(Парам01,Парам02)
Функция ЯМеняюЗначениеПереключателяНаПоШаблону(ИмяРеквизита,Знач Значение,ИскатьПоИмени = Ложь) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Истина);
	ДопПараметры.Вставить("ОставитьТолькоПереключатели",Истина);
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"),ДопПараметры);
	Если ПолеРеквизит = Неопределено Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переключатель с именем <%1> не найден.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переключатель с заголовком <%1> не найден.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ИсходнаяСтрокаШаблона = Значение;
	
	НашлиЗначение = Ложь;
	ПредставлениеСпискаВыбора = Ванесса.ДополнитьПредставлениеСпискаВыбора(ПолеРеквизит.ПолучитьПредставлениеСпискаВыбора());
	Для Каждого СтрокаПредставлениеСпискаВыбора Из ПредставлениеСпискаВыбора Цикл
		Если Ванесса.СтрокаСоответствуетШаблону(СтрокаПредставлениеСпискаВыбора.ОтображаемыйТекст,Значение) Тогда
			Значение = СтрокаПредставлениеСпискаВыбора.ОтображаемыйТекст;
			НашлиЗначение = Истина;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если Не НашлиЗначение Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В значение элемента формы %1 не найдена строка <%2>. Текущее значение поля <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИсходнаяСтрокаШаблона);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ПолеРеквизит.ПолучитьПредставлениеДанных());
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ПолеРеквизит.Активизировать();
	ПолеРеквизит.ВыбратьВариант(Значение);
КонецФункции

&НаКлиенте
//И я меняю значение переключателя с именем 'Реквизит переключатель' на 'Второе*' по шаблону
//@ЯМеняюЗначениеПереключателяСИменемНаПоШаблону(Парам01,Парам02)
Функция ЯМеняюЗначениеПереключателяСИменемНаПоШаблону(ИмяРеквизита,Знач Значение,ИскатьПоИмени = Ложь) Экспорт
	ЯМеняюЗначениеПереключателяНаПоШаблону(ИмяРеквизита,Значение,Истина);
КонецФункции

&НаКлиенте
//И я меняю значение переключателя с именем "Реквизит переключатель" на "Первое значение"
//@ЯМеняюЗначениеПереключателяСИменемНа(Парам01,Парам02)
Функция ЯМеняюЗначениеПереключателяСИменемНа(Парам01,Парам02) Экспорт
	ВОткрытойФормеЯМеняюЗначениеПереключателяСИменемНа(Парам01,Парам02);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я нажимаю на кнопку "Добавить"
//@ВТЧЯНажимаюНаКнопку(Парам01,Парам02)
Функция ВТЧЯНажимаюНаКнопку(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯНажимаюНаКнопку(Парам01,Парам02);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я нажимаю на кнопку "Добавить"
//@ВТаблицеЯНажимаюНаКнопку(Парам01,Парам02)
Функция ВТаблицеЯНажимаюНаКнопку(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯНажимаюНаКнопку(Парам01,Парам02);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я нажимаю на кнопку с именем "Добавить"
//@ВТЧЯНажимаюНаКнопкуСИменем(Парам01,Парам02)
Функция ВТЧЯНажимаюНаКнопкуСИменем(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯНажимаюНаКнопкуСИменем(Парам01,Парам02);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я нажимаю на кнопку с именем "Добавить"
//@ВТаблицеЯНажимаюНаКнопкуСИменем(Парам01,Парам02)
Функция ВТаблицеЯНажимаюНаКнопкуСИменем(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯНажимаюНаКнопкуСИменем(Парам01,Парам02);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" в поле "Реквизит число" я ввожу текст "56,78"
//@ВТЧВПолеЯВвожуТекст(Парам01,Парам02,Парам03)
Функция ВТЧВПолеЯВвожуТекст(Парам01,Парам02,Парам03,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеВТЧВПолеЯВвожуТекст(Парам01,Парам02,Парам03,ИскатьПоИмени);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" в поле "Реквизит число" я ввожу текст "56,78"
//@ВТаблицеВПолеЯВвожуТекст(Парам01,Парам02,Парам03)
Функция ВТаблицеВПолеЯВвожуТекст(Парам01,Парам02,Парам03) Экспорт
	ВТЧВПолеЯВвожуТекст(Парам01,Парам02,Парам03);
КонецФункции


&НаКлиенте
//И в таблице "ТабличнаяЧасть1" в поле "Реквизит число" я ввожу текущую дату
//@ВТаблицеВПолеЯВвожуТекущуюДату(Парам01,Парам02)
Функция ВТаблицеВПолеЯВвожуТекущуюДату(Парам01,Парам02,ИскатьПоИмени = Ложь) Экспорт
	Текст = Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
	ВТЧВПолеЯВвожуТекст(Парам01,Парам02,Текст,ИскатьПоИмени);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" в поле с именем "РеквизитЧисло" я ввожу текущую дату
//@ВТаблицеВПолеСИменемЯВвожуТекущуюДату(Парам01,Парам02)
Функция ВТаблицеВПолеСИменемЯВвожуТекущуюДату(Парам01,Парам02) Экспорт
	ВТаблицеВПолеЯВвожуТекущуюДату(Парам01,Парам02,Истина);
КонецФункции



&НаКлиенте
//И в таблице "ТабличнаяЧасть1" поле "Реквизит булево" имеет значение "Да"
//@ВТаблицеПолеИмеетЗначение(Парам01,Парам02,Парам03)
Функция ВТаблицеПолеИмеетЗначение(ИмяТЧ,ИмяЭлемента,СтроковоеПредставление) Экспорт
	ТекстЯчейкиТаблицыСталРавен(ИмяТЧ,ИмяЭлемента,СтроковоеПредставление,Ложь);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" поле "Реквизит булево" имеет значение "Да" по шаблону
//@ВТаблицеПолеИмеетЗначениеПоШаблону(Парам01,Парам02,Парам03)
Функция ВТаблицеПолеИмеетЗначениеПоШаблону(ИмяТЧ,ИмяЭлемента,СтроковоеПредставление) Экспорт
	ТекстЯчейкиТаблицыСталРавен(ИмяТЧ, ИмяЭлемента, СтроковоеПредставление, Ложь, Истина);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" поле с именем "Реквизит булево" имеет значение "Да"
//@ВТаблицеПолеСИменемИмеетЗначение(Парам01,Парам02,Парам03)
Функция ВТаблицеПолеСИменемИмеетЗначение(ИмяТЧ,ИмяЭлемента,СтроковоеПредставление) Экспорт
	ТекстЯчейкиТаблицыСталРавен(ИмяТЧ,ИмяЭлемента,СтроковоеПредставление,Истина);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" поле с именем "Реквизит булево" имеет значение "Да" по шаблону
//@ВТаблицеПолеСИменемИмеетЗначениеПоШаблону(Парам01,Парам02,Парам03)
Функция ВТаблицеПолеСИменемИмеетЗначениеПоШаблону(ИмяТЧ,ИмяЭлемента,СтроковоеПредставление) Экспорт
	ТекстЯчейкиТаблицыСталРавен(ИмяТЧ, ИмяЭлемента, СтроковоеПредставление, Истина, Истина);
КонецФункции





&НаКлиенте
//И в таблице "ТабличнаяЧасть1" в поле с именем "Реквизит число" я ввожу текст "56,78"
//@ВТЧВПолеСИменемЯВвожуТекст(Парам01,Парам02,Парам03)
Функция ВТЧВПолеСИменемЯВвожуТекст(Парам01,Парам02,Парам03) Экспорт
	ВОткрытойФормеВТЧВПолеСИменемЯВвожуТекст(Парам01,Парам02,Парам03);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" в поле с именем "Реквизит число" я ввожу текст "56,78"
//@ВТаблицеВПолеСИменемЯВвожуТекст(Парам01,Парам02,Парам03)
Функция ВТаблицеВПолеСИменемЯВвожуТекст(Парам01,Парам02,Парам03) Экспорт
	ВТЧВПолеСИменемЯВвожуТекст(Парам01,Парам02,Парам03);
КонецФункции


&НаКлиенте
//И в таблице "ТабличнаяЧасть1" из выпадающего списка "Реквизит справочник" я выбираю "ТестовыйЭлемент21"
//@ВТЧИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03)
Функция ВТЧИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеВТЧИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03,ИскатьПоИмени);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" из выпадающего списка "Реквизит справочник" я выбираю "ТестовыйЭлемент21"
//@ВТаблицеИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03)
Функция ВТаблицеИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03) Экспорт
	ВТЧИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" из выпадающего списка "Реквизит справочник" я выбираю по строке "ТестовыйЭлемент21"
//@ВТаблицеИзВыпадающегоСпискаЯВыбираюПоСтроке(Парам01,Парам02,Парам03)
Функция ВТаблицеИзВыпадающегоСпискаЯВыбираюПоСтроке(Парам01,Парам02,Парам03) Экспорт
	ВТЧИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" из выпадающего списка с именем "Реквизит справочник" я выбираю "ТестовыйЭлемент21"
//@ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираю(Парам01,Парам02,Парам03)
Функция ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираю(Парам01,Парам02,Парам03) Экспорт
	ВТЧИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03,Истина);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" из выпадающего списка с именем "Реквизит справочник" я выбираю по строке ТестовыйЭлемент21"
//@ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираюПоСтроке(Парам01,Парам02,Парам03)
Функция ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираюПоСтроке(Парам01,Парам02,Парам03) Экспорт
	ВТЧИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02,Парам03,Истина);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я изменяю флаг "Реквизит булево"
//@ВТЧЯИзменяюФлаг(Парам01,Парам02)
Функция ВТЧЯИзменяюФлаг(Парам01,Парам02,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеВТЧЯИзменяюФлаг(Парам01,Парам02,ИскатьПоИмени);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я изменяю флаг "Реквизит булево"
//@ВТаблицеЯИзменяюФлаг(Парам01,Парам02)
Функция ВТаблицеЯИзменяюФлаг(Парам01,Парам02) Экспорт
	ВТЧЯИзменяюФлаг(Парам01,Парам02);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я изменяю флаг с именем "Реквизит булево"
//@ВТаблицеЯИзменяюФлагСИменем(Парам01,Парам02)
Функция ВТаблицеЯИзменяюФлагСИменем(Парам01,Парам02) Экспорт
	ВТЧЯИзменяюФлаг(Парам01,Парам02,Истина);
КонецФункции


&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я выбираю значение реквизита "Реквизит справочник выбор из формы списка" из формы списка"
//@ВТЧЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01,Парам02)
Функция ВТЧЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01,Парам02);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я выбираю значение реквизита "Реквизит справочник выбор из формы списка" из формы списка"
//@ВТаблицеЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01,Парам02)
Функция ВТаблицеЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01,Парам02) Экспорт
	ВТЧЯВыбираюЗначениеРеквизитаИзФормыСписка(Парам01,Парам02);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я выбираю значение реквизита с именем "Реквизит справочник выбор из формы списка" из формы списка"
//@ВТЧЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01,Парам02)
Функция ВТЧЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01,Парам02);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я выбираю значение реквизита с именем "Реквизит справочник выбор из формы списка" из формы списка"
//@ВТаблицеЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01,Парам02)
Функция ВТаблицеЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01,Парам02) Экспорт
	ВТЧЯВыбираюЗначениеРеквизитаСИменемИзФормыСписка(Парам01,Парам02);
КонецФункции

&НаКлиенте
//И в таблице "Товары" я добавляю новую строку"
//@ВТЧЯДобавляюНовуюСтроку(Парам01)
Функция ВТЧЯДобавляюНовуюСтроку(Парам01) Экспорт
	ВОткрытойФормеВТЧЯДобавляюНовуюСтроку(Парам01);
КонецФункции

&НаКлиенте
//И в таблице "Товары" я добавляю новую строку"
//@ВТаблицеЯДобавляюНовуюСтроку(Парам01)
Функция ВТаблицеЯДобавляюНовуюСтроку(Парам01) Экспорт
	ВТЧЯДобавляюНовуюСтроку(Парам01);
КонецФункции

&НаКлиенте
//И я нажимаю на кнопку открытия поля "Реквизит2"
//@ЯНажимаюНаКнопкуОткрытияПоля(Парам01)
Функция ЯНажимаюНаКнопкуОткрытияПоля(Парам01) Экспорт
	ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоля(Парам01);
КонецФункции

&НаКлиенте
//И я нажимаю на кнопку открытия поля с именем "Реквизит2"
//@ЯНажимаюНаКнопкуОткрытияПоляСИменем(Парам01)
Функция ЯНажимаюНаКнопкуОткрытияПоляСИменем(Парам01) Экспорт
	ВОткрытойФормеЯНажимаюНаКнопкуОткрытияПоляСИменем(Парам01);
КонецФункции

&НаКлиенте
//И из выпадающего списка "Реквизит2" я выбираю "ТестовыйЭлемент21"
//@ИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02)
Функция ИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02) Экспорт
	ВОткрытойФормеИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02);
КонецФункции

&НаКлиенте
//И из выпадающего списка "Реквизит2" я выбираю по строке "ТестовыйЭлемент21"
//@ИзВыпадающегоСпискаЯВыбираюПоСтроке(Парам01,Парам02)
Функция ИзВыпадающегоСпискаЯВыбираюПоСтроке(Парам01,Парам02) Экспорт
	ВОткрытойФормеИзВыпадающегоСпискаЯВыбираю(Парам01,Парам02);
КонецФункции



&НаКлиенте
//И из выпадающего списка "Реквизит2" я выбираю точное значение "ТестовыйЭлемент21"
//@ИзВыпадающегоСпискаЯВыбираюТочноеЗначение(Парам01,Парам02)
Функция ИзВыпадающегоСпискаЯВыбираюТочноеЗначение(ИмяРеквизита,Знач ВыбираемоеЗначение,ИскатьПоИмени = Ложь) Экспорт
	ВыбираемоеЗначение = ПолучитьКорректныйТекстДляВставкиВПоле(ВыбираемоеЗначение);
	ТаймаутОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(1);
	
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		ТекстСообщения = "";
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("КоличествоПопыток", 1);
		
		Попытка
			
			ТипПоля      = Тип("ТестируемоеПолеФормы");
			ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, ТипПоля, ДопПараметры);
			
			ДопПараметрыОткрытьВыпадающийСписок = Новый Структура;
			ДопПараметрыОткрытьВыпадающийСписок.Вставить("ПроисходилоОткрытиеСписка", Ложь);
			Ванесса.ОткрытьВыпадающийСписок(ПолеРеквизит, ДопПараметрыОткрытьВыпадающийСписок);
			
			ПроисходилоОткрытиеСписка = ДопПараметрыОткрытьВыпадающийСписок.ПроисходилоОткрытиеСписка;
			
			Если НЕ ПроисходилоОткрытиеСписка Тогда
				ПолеРеквизит.Активизировать();
			КонецЕсли;
			
			Если НЕ ПолеРеквизит.ВыпадающийСписокОткрыт() Тогда
				ПолеРеквизит.ОткрытьВыпадающийСписок();
			КонецЕсли;	 
			
			Попытка
				СписокСформировался = ПолеРеквизит.ОжидатьФормированияВыпадающегоСписка(ТаймаутОжидания);
			Исключение
				СписокСформировался = Ложь;
			КонецПопытки;
			
			
			ПолучилосьВыбрать = Ложь;
			Попытка
				Ванесса.ВыполнитьВыборИзВыпадающегоСписка(ПолеРеквизит, ВыбираемоеЗначение, ДопПараметрыОткрытьВыпадающийСписок);
				//ПолеРеквизит.ВыполнитьВыборИзВыпадающегоСписка(ВыбираемоеЗначение);
				ПолучилосьВыбрать = Истина;
			Исключение
				
			КонецПопытки;
			
			Если Не ПолучилосьВыбрать Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось сделать выбор в поле <%1> значения <%2>. %3");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ВыбираемоеЗначение);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ОписаниеОшибки());
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И из выпадающего списка с именем "Реквизит2" я выбираю точное значение "ТестовыйЭлемент21"
//@ИзВыпадающегоСпискаСИменемЯВыбираюТочноеЗначение(Парам01,Парам02)
Функция ИзВыпадающегоСпискаСИменемЯВыбираюТочноеЗначение(ИмяРеквизита,ВыбираемоеЗначение,ИскатьПоИмени = Ложь) Экспорт
	ИзВыпадающегоСпискаЯВыбираюТочноеЗначение(ИмяРеквизита,ВыбираемоеЗначение,Истина);
КонецФункции




&НаКлиенте
//И из выпадающего списка с именем "Реквизит2" я выбираю "ТестовыйЭлемент21"
//@ИзВыпадающегоСпискаСИменемЯВыбираю(Парам01,Парам02)
Функция ИзВыпадающегоСпискаСИменемЯВыбираю(Парам01,Парам02) Экспорт
	ВОткрытойФормеИзВыпадающегоСпискаСИменемЯВыбираю(Парам01,Парам02);
КонецФункции

&НаКлиенте
//И из выпадающего списка с именем "Реквизит2" я выбираю по строке "ТестовыйЭлемент21"
//@ИзВыпадающегоСпискаСИменемЯВыбираюПоСтроке(Парам01,Парам02)
Функция ИзВыпадающегоСпискаСИменемЯВыбираюПоСтроке(Парам01,Парам02) Экспорт
	ВОткрытойФормеИзВыпадающегоСпискаСИменемЯВыбираю(Парам01,Парам02);
КонецФункции

&НаКлиенте
//И я нажимаю кнопку очистить у поля "Отбор"
//@ЯНажимаюКнопкуОчиститьУПоля(Парам01)
Функция ЯНажимаюКнопкуОчиститьУПоля(Парам01) Экспорт
	ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоля(Парам01);
КонецФункции

&НаКлиенте
//И я нажимаю кнопку очистить у поля с именем "Отбор"
//@ЯНажимаюКнопкуОчиститьУПоляСИменем(Парам01)
Функция ЯНажимаюКнопкуОчиститьУПоляСИменем(Парам01) Экспорт
	ВОткрытойФормеЯНажимаюКнопкуОчиститьУПоляСИменем(Парам01);
КонецФункции

&НаКлиенте
//И в таблице с именем "ДеревоТестов" в колонке "Имя" нет значения "Temp1"
//@ВТаблицеСИменемВКолонкеНетЗначения(Парам01,Парам02,Парам03)
Функция ВТаблицеСИменемВКолонкеНетЗначения(Парам01,Парам02,Парам03) Экспорт
	ВОткрытойФормеВТаблицеСИменемВКолонкеНетЗначения(Парам01,Парам02,Парам03);
КонецФункции

&НаКлиенте
//И в таблице с именем "ДеревоТестов" в колонке "Имя" есть значение "ОткрытиеФормы"
//@ВТаблицеСИменемВКолонкеЕстьЗначение(Парам01,Парам02,Парам03)
Функция ВТаблицеСИменемВКолонкеЕстьЗначение(Парам01,Парам02,Парам03) Экспорт
	ВОткрытойФормеВТаблицеСИменемВКолонкеЕстьЗначение(Парам01,Парам02,Парам03);
КонецФункции

&НаКлиенте
//И в таблице "Отборы" я активизирую поле "ИмяПоля"
//@ВТЧЯАктивизируюПоле(Парам01,Парам02)
Функция ВТЧЯАктивизируюПоле(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯАктивизируюПоле(Парам01,Парам02);
КонецФункции

&НаКлиенте
//И в таблице "Отборы" я активизирую поле "ИмяПоля"
//@ВТаблицеЯАктивизируюПоле(Парам01,Парам02)
Функция ВТаблицеЯАктивизируюПоле(Парам01,Парам02) Экспорт
	ВТЧЯАктивизируюПоле(Парам01,Парам02);
КонецФункции

&НаКлиенте
//И в таблице "Отборы" я активизирую поле с именем "ИмяПоля"
//@ВТЧЯАктивизируюПолеСИменем(Парам01,Парам02)
Функция ВТЧЯАктивизируюПолеСИменем(Парам01,Парам02) Экспорт
	ВОткрытойФормеВТЧЯАктивизируюПолеСИменем(Парам01,Парам02);
КонецФункции

&НаКлиенте
//И в таблице "Отборы" я активизирую поле с именем "ИмяПоля"
//@ВТаблицеЯАктивизируюПолеСИменем(Парам01,Парам02)
Функция ВТаблицеЯАктивизируюПолеСИменем(Парам01,Парам02) Экспорт
	ВТЧЯАктивизируюПолеСИменем(Парам01,Парам02);
КонецФункции

&НаКлиенте
//И я запоминаю значение поля "Номер" как "НомерДокумента"
//@ЯЗапоминаюЗначениеПоляСКлючом(Парам01,Парам02)
Функция ЯЗапоминаюЗначениеПоляСКлючом(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	Значение = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяПоля,ИскатьПоИмени);
	Ванесса.СохранитьЗначениеВКонтекст(ИмяПеременной,Значение);
КонецФункции

&НаКлиенте
//И я запоминаю значение поля "Номер" с ключом "Номер документа"
//@ЯЗапоминаюЗначениеПоляКак(Парам01,Парам02)
Функция ЯЗапоминаюЗначениеПоляКак(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	
	БылаОшибка = Ложь;
	СтрокаОшибки = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("КоличествоПопыток", 1);
		
		Попытка
			
			Значение = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяПоля, ИскатьПоИмени, ДопПараметры);
			
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;
	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной,Значение);
КонецФункции

&НаКлиенте
//И я запоминаю значение поля с именем "Номер" с ключом "Номер документа"
//@ЯЗапоминаюЗначениеПоляСИменемКак(Парам01,Парам02)
Функция ЯЗапоминаюЗначениеПоляСИменемКак(ИмяПоля,ИмяПеременной) Экспорт
	ЯЗапоминаюЗначениеПоляКак(ИмяПоля,ИмяПеременной,Истина);
КонецФункции


&НаКлиенте
//И я запоминаю значение таблицы "ТабличнаяЧасть1" поля "Номер" с ключом "Номер документа"
//@ЯЗапоминаюЗначениеТаблицыПоляКак(Парам01,Парам02)
Функция ЯЗапоминаюЗначениеТаблицыПоляКак(ИмяТЧ,ИмяПоля,ИмяПеременной) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	Попытка
		
		СтрокиТаблицы = ТЧ.ПолучитьВыделенныеСтроки();
		Если СтрокиТаблицы.Количество() = 0 Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить строку таблицы %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		СтрокаТаблицы = СтрокиТаблицы[0];
		Значение      = СтрокаТаблицы[ИмяПоля];
		
		Если Значение = Неопределено Тогда
			//для совместимости
			Значение = ТЧ.ПолучитьТекстЯчейки(ИмяПоля); 
		КонецЕсли;	 
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить значение поля <%1> у таблицы <%2>.%3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПоля);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Символы.ПС + ОписаниеОшибки());
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной,Значение);
КонецФункции

&НаКлиенте
//И я запоминаю значение таблицы "ТабличнаяЧасть1" поляс именем "Номер" с ключом "Номер документа"
//@ЯЗапоминаюЗначениеТаблицыПолясИменемКак(Парам01,Парам02)
Функция ЯЗапоминаюЗначениеТаблицыПолясИменемКак(ИмяТЧ,ИмяПоля,ИмяПеременной) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	Попытка
		Значение = ТЧ.ПолучитьТекстЯчейки(ИмяПоля); 
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить значение поля <%1> у таблицы <%2>.%3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПоля);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Символы.ПС + ОписаниеОшибки());
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной,Значение);
КонецФункции

&НаКлиенте
//И я запоминаю значение поля "Номер" таблицы "ТабличнаяЧасть1" как "НомерДокумента"
//@ЯЗапоминаюЗначениеПоляТаблицыКак(Парам01,Парам02)
Функция ЯЗапоминаюЗначениеПоляТаблицыКак(ИмяПоля,ИмяТЧ,ИмяПеременной) Экспорт
	ЯЗапоминаюЗначениеТаблицыПоляКак(ИмяТЧ,ИмяПоля,ИмяПеременной);
КонецФункции

&НаКлиенте
//И я запоминаю значение поля с именем "Номер" таблицы "ТабличнаяЧасть1" как "НомерДокумента"
//@ЯЗапоминаюЗначениеПоляСИменемТаблицыКак(Парам01,Парам02)
Функция ЯЗапоминаюЗначениеПоляСИменемТаблицыКак(ИмяПоля,ИмяТЧ,ИмяПеременной) Экспорт
	ЯЗапоминаюЗначениеТаблицыПолясИменемКак(ИмяТЧ,ИмяПоля,ИмяПеременной);
КонецФункции



&НаКлиенте
//И я запоминаю значение поля "Номер" как "НомерДокумента" глобально
//@ЯЗапоминаюЗначениеПоляКакГлобально(Парам01,Парам02)
Функция ЯЗапоминаюЗначениеПоляКакГлобально(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	Значение = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяПоля,ИскатьПоИмени);
	Попытка
		КонтекстСохраняемый.Вставить(ИмяПеременной,Значение);
	Исключение
		//значит надо сохранить значение не в структуру а в соответствие
		Ванесса.СохранитьЗначениеВКонтекстСохраняемый(ИмяПеременной,Значение);
	КонецПопытки;
КонецФункции

&НаКлиенте
//И я запоминаю значение поля с именем "Номер" как "НомерДокумента" глобально
//@ЯЗапоминаюЗначениеПоляСИменемКакГлобально(Парам01,Парам02)
Функция ЯЗапоминаюЗначениеПоляСИменемКакГлобально(ИмяПоля,ИмяПеременной) Экспорт
	ЯЗапоминаюЗначениеПоляКакГлобально(ИмяПоля,ИмяПеременной,Истина);
КонецФункции

&НаКлиенте
//И я запоминаю значение поля "Номер" с ключом "НомерДокумента" глобально
//@ЯЗапоминаюЗначениеПоляСКлючомГлобально(Парам01,Парам02)
Функция ЯЗапоминаюЗначениеПоляСКлючомГлобально(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	Значение = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяПоля,ИскатьПоИмени);
	Ванесса.СохранитьЗначениеВКонтекстСохраняемый(ИмяПеременной,Значение);
КонецФункции



&НаКлиенте
//И я запоминаю значение таблицы "ТабличнаяЧасть1" поля "Номер" с ключом "Номер документа"
//@ЯЗапоминаюКоличествоСтрокТаблицыКак(Парам01,Парам02)
Функция ЯЗапоминаюКоличествоСтрокТаблицыКак(ИмяТаблицы,ИмяПеременной) Экспорт
	ТЧ      = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	Таблица = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ);
	Если Таблица = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить строки ТЧ <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной,Таблица.Количество());
КонецФункции


&НаКлиенте
//И количество строк таблицы "ИмяТаблицы" равно переменной "ИмяПеременной"
//@КоличествоСтрокТаблицыРавноПеременной(Парам01,Парам02)
Функция КоличествоСтрокТаблицыРавноПеременной(ИмяТаблицы,ИмяПеременной) Экспорт
	ТЧ      = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	Таблица = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ);
	Если Таблица = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить строки ТЧ <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ЗначениеВКонтексте = Ванесса.ПолучитьЗначениеПеременнойИзКонтекста(ИмяПеременной);
	
	Если Таблица.Количество() <> ЗначениеВКонтексте Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что количество строк таблицы <%1> будет равно переменной <%2>. Значение переменной <%3>. Количество строк <%4>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПеременной);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ЗначениеВКонтексте);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",Таблица.Количество());
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции




&НаКлиенте
//И я запоминаю текущее окно как "НужныйМнеЗаголовокОкна"
//@ЯЗапоминаюТекущееОкноКак(Парам01)
Функция ЯЗапоминаюТекущееОкноКак(ИмяПеременной) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной,АктивноеОкно.Заголовок);
КонецФункции

&НаКлиенте
//И я запоминаю заголовок текущего окна как "НужныйМнеЗаголовокОкна"
//@ЯЗапоминаюЗаголовокТекущегоОкнаКак(Парам01)
Функция ЯЗапоминаюЗаголовокТекущегоОкнаКак(ИмяПеременной) Экспорт
	ЯЗапоминаюТекущееОкноКак(ИмяПеременной);
КонецФункции

&НаКлиенте
//И я запоминаю текущую форму как "ИмяФормы"
//@ЯЗапоминаюТекущуюФормуКак(Парам01)
Функция ЯЗапоминаюТекущуюФормуКак(ИмяПеременной) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	Если АктивноеОкно = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не обнаружено активное окно.");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	АктивнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной,АктивнаяФорма.ИмяФормы);
КонецФункции





&НаКлиенте
//И я выбираю пункт меню "ЗначениеМеню"
//@ЯВыбираюПунктМеню(ЗначениеМеню)
Функция ЯВыбираюПунктМеню(ЗначениеМеню) Экспорт
	
	ТекущаяФорма = НайтиТекущуюФорму();
	
	Попытка
		ТекущаяФорма.ВыполнитьВыборИзМеню(ЗначениеМеню);
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В меню нет значения <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ЗначениеМеню);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
//И у поля "ИмяПоля" я выбираю пункт контекстного меню "ПунктМеню"
//@УПоляЯВыбираюПунктКонтекстногоМеню(Парам01,Парам02)
Функция УПоляЯВыбираюПунктКонтекстногоМеню(ИмяПоля,ПунктМеню,ИскатьПолеПоИмени = Ложь,ИскатьПунктМенюПоИмени = Ложь) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	БылаОшибка = Ложь;
	СтрокаОшибки = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("КоличествоПопыток", 1);
		
		Попытка
			Поле = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоля, ИскатьПолеПоИмени,,, ДопПараметры);
			
			Меню = Поле.ПолучитьКонтекстноеМеню();
			
			Если Меню = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У поля <%1> не найдено контекстное меню.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПоля);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Если ИскатьПунктМенюПоИмени Тогда
				Кнопка = Меню.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,ПунктМеню);
			Иначе	
				Кнопка = Меню.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),ПунктМеню);
			КонецЕсли;	 
			Кнопка.Нажать();
			Ванесса.ОбработатьСменуАктивногоОкна();
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И у поля с именем "ИмяПоля" я выбираю пункт контекстного меню "ПунктМеню"
//@УПоляСИменемЯВыбираюПунктКонтекстногоМеню(Парам01,Парам02)
Функция УПоляСИменемЯВыбираюПунктКонтекстногоМеню(ИмяПоля,ПунктМеню) Экспорт
	УПоляЯВыбираюПунктКонтекстногоМеню(ИмяПоля,ПунктМеню, Истина); 
КонецФункции



&НаКлиенте
//И я выбираю пункт контекстного меню "ПунктМеню" на элементе формы "ЭлементФормы"
//@ЯВыбираюПунктКонтекстногоМенюНаЭлементеФормы(Парам01,Парам02)
Функция ЯВыбираюПунктКонтекстногоМенюНаЭлементеФормы(ПунктМеню,ИмяПоля) Экспорт
	УПоляЯВыбираюПунктКонтекстногоМеню(ИмяПоля,ПунктМеню, Ложь); 
КонецФункции

&НаКлиенте
//И я выбираю пункт контекстного меню с именем "ПунктМеню" на элементе формы "ЭлементФормы"
//@ЯВыбираюПунктКонтекстногоМенюСИменемНаЭлементеФормы(Парам01,Парам02)
Функция ЯВыбираюПунктКонтекстногоМенюСИменемНаЭлементеФормы(ПунктМеню,ИмяПоля) Экспорт
	УПоляЯВыбираюПунктКонтекстногоМеню(ИмяПоля,ПунктМеню, Ложь, Истина); 
КонецФункции

&НаКлиенте
//И я выбираю пункт контекстного меню "ПунктМеню" на элементе формы с именем "ЭлементФормы"
//@УПоляСИменемЯВыбираюПунктКонтекстногоМеню(Парам01,Парам02)
Функция ЯВыбираюПунктКонтекстногоМенюНаЭлементеФормыСИменем(ПунктМеню,ИмяПоля) Экспорт
	УПоляЯВыбираюПунктКонтекстногоМеню(ИмяПоля,ПунктМеню, Истина); 
КонецФункции

&НаКлиенте
//И я выбираю пункт контекстного меню с именем "ПунктМеню" на элементе формы с именем "ЭлементФормы"
//@ЯВыбираюПунктКонтекстногоМенюсИменемНаЭлементеФормыСИменем(Парам01,Парам02)
Функция ЯВыбираюПунктКонтекстногоМенюсИменемНаЭлементеФормыСИменем(ПунктМеню,ИмяПоля) Экспорт
	УПоляЯВыбираюПунктКонтекстногоМеню(ИмяПоля,ПунктМеню, Истина,Истина); 
КонецФункции




&НаКлиенте
//И я выбираю из списка "Значение"
//@ЯВыбираюИзСписка(Значение)
Функция ЯВыбираюИзСписка(Знач Значение) Экспорт
	ТекущаяФорма = НайтиТекущуюФорму();
	НадоПрервать = Ложь;
	БылаОшибка   = Ложь;
	
	ТекстОшибки = "";
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			
			Попытка
				Если ТекущаяФорма = Неопределено Тогда
					ФормыКлиентаТестирования = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемаяФорма"));
					Для Каждого ТекФорма Из ФормыКлиентаТестирования Цикл
						Попытка
							ТекФорма.ВыполнитьВыборИзСписка(Значение);
							НадоПрервать = Истина;
						Исключение
						КонецПопытки;
					КонецЦикла;	 
				Иначе	
					ТекущаяФорма.ВыполнитьВыборИзСписка(Значение);
					НадоПрервать = Истина;
				КонецЕсли;	 
			Исключение
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В списке нет значения <%1>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Значение);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НадоПрервать Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И я выбираю из списка 'Пун*т2' по шаблону
//@ЯВыбираюИзСпискаПоШаблону(Парам01)
Функция ЯВыбираюИзСпискаПоШаблону(Знач Значение) Экспорт
	
	ТекущаяФорма = НайтиТекущуюФорму();
	НадоПрервать = Ложь;
	БылаОшибка   = Ложь;
	
	ТекстОшибки = "";
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			
			ПредставлениеСпискаВыбора = Неопределено;
			
			Попытка
				Если ТекущаяФорма = Неопределено Тогда
					ФормыКлиентаТестирования = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемаяФорма"));
					Для Каждого ТекФорма Из ФормыКлиентаТестирования Цикл
						Попытка
							ПредставлениеСпискаВыбора = ТекФорма.ПолучитьПредставлениеСпискаВыбора();
							ТекущаяФорма = ТекФорма;
						Исключение
						КонецПопытки;
					КонецЦикла;	 
				Иначе	
					ПредставлениеСпискаВыбора = ТекущаяФорма.ПолучитьПредставлениеСпискаВыбора();
				КонецЕсли;	 
			Исключение
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В списке нет значения <%1>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Значение);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			
			Если  ПредставлениеСпискаВыбора = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить представление списка выбора.");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			Для Каждого ТекЗначение Из ПредставлениеСпискаВыбора Цикл
				Если Ванесса.СтрокаСоответствуетШаблону(ТекЗначение.ОтображаемыйТекст, Значение)  Тогда
					ТекущаяФорма.ВыполнитьВыборИзСписка(ТекЗначение.ОтображаемыйТекст);
					НадоПрервать = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НадоПрервать Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПривестиЗначениеФлагаКСтандарту(Значение)
	Возврат Ванесса.ПривестиЗначениеФлагаКСтандарту(Значение); 
КонецФункции	 

&НаКлиенте
//И флаг "Реквизит булево" равен "Истина"
//@ФлагРавен(Парам01,Парам02)
Функция ФлагРавен(Знач Заголовок,Знач Значение,ИскатьПоИмени = Ложь) Экспорт
	Значение  = ПривестиЗначениеФлагаКСтандарту(Значение);
	ЭлементФормыСталРавен(Заголовок,Значение,ИскатьПоИмени);
КонецФункции

&НаКлиенте
//И флаг с именем "РеквизитБулево" равен "Истина"
//@ФлагСИменемРавен(Парам01,Парам02)
Функция ФлагСИменемРавен(Заголовок,Значение) Экспорт
	ФлагРавен(Заголовок,Значение,Истина);
КонецФункции

&НаКлиенте
//Тогда появилось предупреждение, содержащее текст "Текст"
//@ПоявилосьПредупреждениеСодержащееТекст(Парам01)
Функция ПоявилосьПредупреждениеСодержащееТекст(Текст = Неопределено,ЭтоУсловие = Ложь, ПоШаблону = Ложь) Экспорт
	
	БылаОшибка = Ложь;
	СтрокаОшибки = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоСекундПоискаОкна();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
		
		Нашли = Ложь;
		НужноеОкно = Неопределено;
		
		Попытка
			ОкнаПриложения = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
			Для Каждого ОкноПриложения Из ОкнаПриложения Цикл
				Если Ванесса.ЭтоМодальныйДиалог(ОкноПриложения) Тогда
					НужноеОкно = ОкноПриложения;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
			
			Если ЭтоУсловие И НужноеОкно = Неопределено Тогда
				//значит не найдено окно модального диалога
				Ванесса.УстановитьРезультатУсловия(Ложь);
				Возврат Неопределено;
			КонецЕсли;	 
			
			Если НужноеОкно = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Окно предупреждения не найдено.");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Ванесса.ЗапомнитьАктивноеОкно(НужноеОкно);
			
			ТекстЗаголовка = Ванесса.ТекстПредупреждения(НужноеОкно);
			
			Если ЭтоУсловие Тогда
				Если Текст = Неопределено Тогда
					Ванесса.УстановитьРезультатУсловия(Истина);
				Иначе	
					Если Найти(НРег(ТекстЗаголовка),НРег(Текст)) = 0 Тогда
						Ванесса.УстановитьРезультатУсловия(Ложь);
					Иначе	
						Ванесса.УстановитьРезультатУсловия(Истина);
					КонецЕсли;	 
				КонецЕсли;	 
			Иначе	
				Если ПоШаблону Тогда
					Если НЕ Ванесса.СтрокаСоответствуетШаблону(ТекстЗаголовка, Текст) Тогда
						ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Текст окна <%1> не соответствует шаблону <%2>.");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекстЗаголовка);
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Текст);
						
						Если СчетчикПопыток = КоличествоПопыток Тогда
							ТекстСообщения = Ванесса.ДобавитьСтрокуВозможногоШаблона(ТекстСообщения, ТекстЗаголовка, Текст);
						КонецЕсли;
						
						ВызватьИсключение ТекстСообщения;
					КонецЕсли;	 
				Иначе	
					Если Найти(НРег(ТекстЗаголовка),НРег(Текст)) = 0 Тогда
						ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В строке <%1> не найдена подстрока <%2>");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекстЗаголовка);
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Текст);
						
						Если СчетчикПопыток = КоличествоПопыток Тогда
							ТекстСообщения = Ванесса.ДобавитьСтрокуВозможногоШаблона(ТекстСообщения, ТекстЗаголовка, Текст);
						КонецЕсли;
						
						ВызватьИсключение ТекстСообщения;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//Тогда появилось предупреждение, содержащее текст "Текст" по шаблону
//@ПоявилосьПредупреждениеСодержащееТекстПоШаблону(Парам01)
Функция ПоявилосьПредупреждениеСодержащееТекстПоШаблону(Текст = Неопределено) Экспорт
	ПоявилосьПредупреждениеСодержащееТекст(Текст,, Истина);
КонецФункции

&НаКлиенте
//Если появилось предупреждение, содержащее текст "Текст" тогда
//@ПоявилосьПредупреждениеСодержащееТекстТогда(Парам01)
Функция ПоявилосьПредупреждениеСодержащееТекстТогда(Текст) Экспорт
	ПоявилосьПредупреждениеСодержащееТекст(Текст,Истина);
КонецФункции

&НаКлиенте
//Если появилось предупреждение, тогда
//@ПоявилосьПредупреждениеТогда(Парам01)
Функция ПоявилосьПредупреждениеТогда() Экспорт
	ПоявилосьПредупреждениеСодержащееТекст(Неопределено,Истина);
КонецФункции

&НаКлиенте
//Если появилось предупреждение, тогда
//@ПоявилосьПредупреждениеВТечениеСекундТогда(Парам01)
Функция ПоявилосьПредупреждениеВТечениеСекундТогда(КолСекунд) Экспорт
	
	Ванесса.ЗапретитьВыполнениеШагов();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	КоличествоСекундОбработкаОжидания = КолСекунд;
	ПодключитьОбработчикОжидания("ПоявилосьПредупреждениеВТечениеСекундТогдаОбработчик",1,Ложь);
	
КонецФункции

&НаКлиенте
Функция ПоявилосьПредупреждениеВТечениеСекундТогдаОбработчик()
	
	ИмяОбработчика = "ПоявилосьПредупреждениеВТечениеСекундТогдаОбработчик";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	Попытка
		АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
		Если Ванесса.ЭтоМодальныйДиалог(АктивноеОкно) Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчика);
			Ванесса.УстановитьРезультатУсловия(Истина);
			Ванесса.ПродолжитьВыполнениеШагов();
			Возврат Неопределено;
		КонецЕсли;	 
	Исключение
	КонецПопытки;
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.УстановитьРезультатУсловия(Ложь);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции 

&НаКлиенте
//Тогда не появилось окно предупреждения системы
//@НеПоявилосьОкноПредупрежденияСистемы()
Функция НеПоявилосьОкноПредупрежденияСистемы() Экспорт
	Нашли = Ложь;
	НужноеОкно = Неопределено;
	
	ОкнаПриложения = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	Для Каждого ОкноПриложения Из ОкнаПриложения Цикл
		Если Ванесса.ЭтоЗаголовокОкнаМодальногоДиалога(ОкноПриложения.Заголовок) Тогда
			НужноеОкно = ОкноПриложения;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если НужноеОкно = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	
	ПоляФормы = НужноеОкно.НайтиОбъекты(Тип("ТестируемоеПолеФормы"));
	Если ПоляФормы.Количество() = 0 Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Было найдено окно предупреждения. А ожидалось, что таких окон не будет.");
	КонецЕсли;	 
	
	ПолеФормы = ПоляФормы[0];
	
	ТекстЗаголовка = ПолеФормы.ТекстЗаголовка;
	
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Было найдено окно предупреждения с текстом: <%1> А ожидалось, что таких окон не будет.");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекстЗаголовка);
	ВызватьИсключение ТекстСообщения;
КонецФункции

&НаКлиенте
//Если появилось окно диалога я нажимаю на кнопку "ОК"
//@ЕслиПоявилосьОкноДиалогаЯНажимаюНаКнопку()
Функция ЕслиПоявилосьОкноДиалогаЯНажимаюНаКнопку(ИмяКнопки,ИскатьПоИмени = Ложь) Экспорт
	ОкноПредупреждения  = Ванесса.НайтиОкноМодальногоДиалога();
	Если ОкноПредупреждения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если ИскатьПоИмени Тогда
		Кнопка = ОкноПредупреждения.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,ИмяКнопки);
	Иначе
		Кнопка = ОкноПредупреждения.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),ИмяКнопки);
	КонецЕсли;
	
	Если Кнопка = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка/команда с заголовком <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКнопки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Кнопка.Нажать();
	Ванесса.ОбработатьСменуАктивногоОкна();
КонецФункции

&НаКлиенте
//Если появилось окно диалога я нажимаю на кнопку с именем "ОК"
//@ЕслиПоявилосьОкноДиалогаЯНажимаюНаКнопкуСИменем()
Функция ЕслиПоявилосьОкноДиалогаЯНажимаюНаКнопкуСИменем(ИмяКнопки) Экспорт
	ЕслиПоявилосьОкноДиалогаЯНажимаюНаКнопку(ИмяКнопки,Истина);
КонецФункции


&НаКлиенте
Функция ДоступенДляПросмотра(ИмяЭлемента, ИскатьПоИмени = Ложь)
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Ложь);
	ДопПараметры.Вставить("ТекущаяФормаЭлемента",Неопределено);
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени,,,ДопПараметры);
		
	ТекущееТолькоПросмотр = ЭлементФормы.ТекущееТолькоПросмотр();
	
	Если НЕ ТекущееТолькоПросмотр Тогда
		//проверим также видимость групп, т.к. у них видимость может отличаться от видимости элемента
		Если ДопПараметры.ТекущаяФормаЭлемента <> Неопределено Тогда
			ТекущееТолькоПросмотр = Ванесса.ТолькоПросмотрЭлементаСУчетомРодителя(ДопПараметры.ТекущаяФормаЭлемента,ЭлементФормы,ТекущееТолькоПросмотр);
		ИначеЕсли Контекст.АктивноеОкно <> Неопределено Тогда
			ТекущееТолькоПросмотр = Ванесса.ТолькоПросмотрЭлементаСУчетомРодителя(Контекст.АктивноеОкно,ЭлементФормы,ТекущееТолькоПросмотр);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если НЕ ТекущееТолькоПросмотр Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с именем <%1> не доступен только для просмотра.");
		Иначе
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с заголовком <%1> не доступен только для просмотра.");
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция НеДоступенДляПросмотра(ИмяЭлемента, ИскатьПоИмени = Ложь)
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Ложь);
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени,,,ДопПараметры);
		
	Нашли = ЭлементФормы.ТекущееТолькоПросмотр();
	
	Если Нашли Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с именем <%1> доступен только для просмотра");
		Иначе
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с заголовком <%1> доступен только для просмотра");
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента); 
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
//И элемент "Имя Элемента" доступен для просмотра
//@ЭлементДоступенТолькоДляПросмотра(ИмяЭлемента)
Функция ЭлементДоступенТолькоДляПросмотра(ИмяЭлемента) Экспорт
	ДоступенДляПросмотра(ИмяЭлемента, Ложь);
КонецФункции

&НаКлиенте
//И элемент с именем "Имя Элемента" доступен для просмотра
//@ЭлементСИменемДоступенТолькоДляПросмотра(ИмяЭлемента)
Функция ЭлементСИменемДоступенТолькоДляПросмотра(ИмяЭлемента) Экспорт
	ДоступенДляПросмотра(ИмяЭлемента, Истина);
КонецФункции

&НаКлиенте
//И в открытой форме элемент "Имя Элемента" доступен для просмотра
//@ВОткрытойФормеЭлементДоступенТолькоДляПросмотра(ИмяЭлемента)
Функция ВОткрытойФормеЭлементДоступенДляПросмотра(ИмяЭлемента) Экспорт
	ДоступенДляПросмотра(ИмяЭлемента, Ложь);
КонецФункции

&НаКлиенте
//И в открытой форме элемент с именем "Имя Элемента" доступен для просмотра
//@ВОткрытойФормеЭлементСИменемДоступенТолькоДляПросмотра(ИмяЭлемента)
Функция ВОткрытойФормеЭлементСИменемДоступенДляПросмотра(ИмяЭлемента) Экспорт
	ДоступенДляПросмотра(ИмяЭлемента, Истина);
КонецФункции

&НаКлиенте
//И элемент "Реквизит1" доступен не только для просмотра
//@ЭлементДоступенНеТолькоДляПросмотра(ИмяЭлемента)
Функция ЭлементДоступенНеТолькоДляПросмотра(ИмяЭлемента) Экспорт
	НеДоступенДляПросмотра(ИмяЭлемента, Ложь);
КонецФункции

&НаКлиенте
//И элемент с именем "Реквизит1" доступен не только для просмотра
//@ЭлементСИменемДоступенНеТолькоДляПросмотра(ИмяЭлемента)
Функция ЭлементСИменемДоступенНеТолькоДляПросмотра(ИмяЭлемента) Экспорт
	НеДоступенДляПросмотра(ИмяЭлемента, Истина);
КонецФункции




&НаКлиенте
Функция ВОткрытойФормеЯВижуЭлемент(ИмяЭлемента, ИскатьПоИмени = Ложь)
	БылаОшибка = Ложь;
	СтрокаОшибки = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ТекущаяФормаЭлемента",Неопределено);
			ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Ложь);
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени, Истина,,ДопПараметры);
			
			ТекущаяВидимость = ЭлементФормы.ТекущаяВидимость();
			Если ТекущаяВидимость Тогда
				//проверим также видимость групп, т.к. у них видимость может отличаться от видимости элемента
				Если ДопПараметры.ТекущаяФормаЭлемента <> Неопределено Тогда
					ТекущаяВидимость = Ванесса.ВидимостьЭлементаСУчетомРодителя(ДопПараметры.ТекущаяФормаЭлемента,ЭлементФормы,ТекущаяВидимость);
				ИначеЕсли Контекст.АктивноеОкно <> Неопределено Тогда
					ТекущаяВидимость = Ванесса.ВидимостьЭлементаСУчетомРодителя(Контекст.АктивноеОкно,ЭлементФормы,ТекущаяВидимость);
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если НЕ ТекущаяВидимость Тогда
				Если ИскатьПоИмени Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с именем <%1> не виден на текущей форме");
				Иначе
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с заголовком <%1> не виден на текущей форме");
				КонецЕсли;
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
Функция ВОткрытойФормеЯНеВижуЭлемент(ИмяЭлемента, ИскатьПоИмени = Ложь,ПолеОбязаноСуществовать = Ложь)
	БылаОшибка = Ложь;
	СтрокаОшибки = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ТекущаяФормаЭлемента",Неопределено);
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени,Ложь,,ДопПараметры);
			Если ЭлементФормы = Неопределено Тогда
				Если ПолеОбязаноСуществовать Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент формы <%1> не найден.");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
					ВызватьИсключение ТекстСообщения;
				Иначе	
					Возврат Неопределено;
				КонецЕсли;	 
			КонецЕсли;
			
			ТекущаяВидимость = ЭлементФормы.ТекущаяВидимость();
			Если ТекущаяВидимость Тогда
				//проверим также видимость групп, т.к. у них видимость может отличаться от видимости элемента
				Если ДопПараметры.ТекущаяФормаЭлемента <> Неопределено Тогда
					ТекущаяВидимость = Ванесса.ВидимостьЭлементаСУчетомРодителя(ДопПараметры.ТекущаяФормаЭлемента,ЭлементФормы,ТекущаяВидимость);
				ИначеЕсли Контекст.АктивноеОкно <> Неопределено Тогда
					ТекущаяВидимость = Ванесса.ВидимостьЭлементаСУчетомРодителя(Контекст.АктивноеОкно,ЭлементФормы,ТекущаяВидимость);
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если ТекущаяВидимость
				И (ТипЗнч(ЭлементФормы) = Тип("ТестируемаяГруппаФормы") ИЛИ ТипЗнч(ЭлементФормы) = Тип("ТестируемаяГруппаКомандногоИнтерфейса")) Тогда
				
				КолОбъектов = ЭлементФормы.НайтиОбъекты().Количество();
				Если КолОбъектов = 0 Тогда
					ТекущаяВидимость = Ложь; //т.к. группа без элементов всегда невидима пользователю
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если ТекущаяВидимость Тогда
				Если ИскатьПоИмени Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с именем <%1> виден на текущей форме");
				Иначе
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с заголовком <%1> виден на текущей форме");
				КонецЕсли;
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И я вижу элемент "Имя элемента"
//@ЯВижуЭлемент(ИмяЭлемента)
Функция ЯВижуЭлемент(ИмяЭлемента) Экспорт
	ВОткрытойФормеЯВижуЭлемент(ИмяЭлемента, Ложь);
КонецФункции

&НаКлиенте
//И я вижу элемент "Имя элемента" на форме
//@ЯВижуЭлементНаФорме(ИмяЭлемента)
Функция ЯВижуЭлементНаФорме(ИмяЭлемента) Экспорт
	ВОткрытойФормеЯВижуЭлемент(ИмяЭлемента, Ложь);
КонецФункции

&НаКлиенте
//И я вижу элемент с именем "Имя элемента"
//@ЯВижуЭлементСИменем(ИмяЭлемента)
Функция ЯВижуЭлементСИменем(ИмяЭлемента) Экспорт
	ВОткрытойФормеЯВижуЭлемент(ИмяЭлемента, Истина);
КонецФункции

&НаКлиенте
//И я вижу элемент с именем "Имя элемента" на форме
//@ЯВижуЭлементСИменемНаФорме(ИмяЭлемента)
Функция ЯВижуЭлементСИменемНаФорме(ИмяЭлемента) Экспорт
	ВОткрытойФормеЯВижуЭлемент(ИмяЭлемента, Истина);
КонецФункции

&НаКлиенте
//И я не вижу элемент "Имя элемента"
//@ЯНеВижуЭлемент(Парам01)
Функция ЯНеВижуЭлемент(ИмяЭлемента) Экспорт
	ВОткрытойФормеЯНеВижуЭлемент(ИмяЭлемента, Ложь);
КонецФункции

&НаКлиенте
//И я не вижу элемент "Имя элемента" на форме
//@ЯНеВижуЭлементНаФорме(Парам01)
Функция ЯНеВижуЭлементНаФорме(ИмяЭлемента) Экспорт
	ВОткрытойФормеЯНеВижуЭлемент(ИмяЭлемента, Ложь);
КонецФункции

&НаКлиенте
//И я не вижу элемент с именем "Имя элемента"
//@ЯНеВижуЭлементСИменем(Парам01)
Функция ЯНеВижуЭлементСИменем(ИмяЭлемента) Экспорт
	ВОткрытойФормеЯНеВижуЭлемент(ИмяЭлемента, Истина);
КонецФункции

&НаКлиенте
//И я не вижу элемент с именем "Имя элемента" на форме
//@ЯНеВижуЭлементСИменемНаФорме(Парам01)
Функция ЯНеВижуЭлементСИменемНаФорме(ИмяЭлемента) Экспорт
	ВОткрытойФормеЯНеВижуЭлемент(ИмяЭлемента, Истина);
КонецФункции

// { доступность
&НаКлиенте
Функция ЯПроверяюДоступностьЭлементаФормы(ИмяЭлемента, ИскатьПоИмени = Ложь,ПроверятьДоступность = Истина)
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Ложь);
	ДопПараметры.Вставить("ТекущаяФормаЭлемента",Неопределено);
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени,,,ДопПараметры);
	ТекущаяДоступность = ЭлементФормы.ТекущаяДоступность();
	
	Если ТекущаяДоступность Тогда
		//проверим также видимость групп, т.к. у них видимость может отличаться от видимости элемента
		Если ДопПараметры.ТекущаяФормаЭлемента <> Неопределено Тогда
			ТекущаяДоступность = Ванесса.ДоступностьЭлементаСУчетомРодителя(ДопПараметры.ТекущаяФормаЭлемента,ЭлементФормы,ТекущаяДоступность);
		ИначеЕсли Контекст.АктивноеОкно <> Неопределено Тогда
			ТекущаяДоступность = Ванесса.ДоступностьЭлементаСУчетомРодителя(Контекст.АктивноеОкно,ЭлементФормы,ТекущаяДоступность);
		КонецЕсли;	 
	КонецЕсли;	 

	Если ПроверятьДоступность и НЕ ТекущаяДоступность Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с именем <%1> не доступен на форме");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с заголовком <%1> не доступен на форме");
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента); 
		ВызватьИсключение ТекстСообщения;
	ИначеЕсли НЕ ПроверятьДоступность и ТекущаяДоступность Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с именем <%1> доступен на форме");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с заголовком <%1> доступен на форме");
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
Функция ЯПроверяюНеДоступностьЭлементаФормы(ИмяЭлемента, ИскатьПоИмени = Ложь)
	ЯПроверяюДоступностьЭлементаФормы(ИмяЭлемента, ИскатьПоИмени,Ложь);
КонецФункции

&НаКлиенте
//И элемент формы "ИмяЭлемента" доступен
//@ЭлементФормыДоступен(ИмяЭлемента)
Функция ЭлементФормыДоступен(ИмяЭлемента) Экспорт
	ЯПроверяюДоступностьЭлементаФормы(ИмяЭлемента, Ложь);
КонецФункции

&НаКлиенте
//И элемент формы "ИмяЭлемента" не доступен
//@ЭлементФормыНеДоступен(ИмяЭлемента)
Функция ЭлементФормыНеДоступен(ИмяЭлемента) Экспорт
	ЯПроверяюНеДоступностьЭлементаФормы(ИмяЭлемента, Ложь);
КонецФункции

&НаКлиенте
//И элемент формы с именем "ИмяЭлемента" доступен
//@ЭлементФормыСИменемДоступен(ИмяЭлемента)
Функция ЭлементФормыСИменемДоступен(ИмяЭлемента) Экспорт
	ЯПроверяюДоступностьЭлементаФормы(ИмяЭлемента, Истина);
КонецФункции

&НаКлиенте
//И элемент формы с именем "ИмяЭлемента" не доступен
//@ЭлементФормыСИменемНеДоступен(ИмяЭлемента)
Функция ЭлементФормыСИменемНеДоступен(ИмяЭлемента) Экспорт
	ЯПроверяюНеДоступностьЭлементаФормы(ИмяЭлемента, Истина);
КонецФункции

// ТЧ

&НаКлиенте
//И В таблице "ИмяТЧ" поле "ИмяРеквизита" доступно
//@ВТЧПолеДоступно(ИмяТЧ, ИмяРеквизита)
Функция ВТЧПолеДоступно(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	 
	
	Если ПолеРеквизит = Неопределено Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с именем <%2> не найдено.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с заголовком <%2> не найдено.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Нашли = ПолеРеквизит.ТекущаяДоступность();
	
	Если НЕ Нашли Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с именем <%1> не доступен на форме");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с заголовком <%1> не доступен на форме");
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецФункции 

&НаКлиенте
//И В таблице "ИмяТЧ" поле "ИмяРеквизита" доступно
//@ВТаблицеПолеДоступно(ИмяТЧ, ИмяРеквизита)
Функция ВТаблицеПолеДоступно(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВТЧПолеДоступно(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени);
КонецФункции 



&НаКлиенте
//И В таблице "ИмяТЧ" поле с именем "ИмяРеквизита" доступно
//@ВТЧПолеСИменемДоступно(ИмяТЧ, ИмяРеквизита)
Функция ВТЧПолеСИменемДоступно(ИмяТЧ,ИмяРеквизита) Экспорт
	ВТЧПолеДоступно(ИмяТЧ,ИмяРеквизита,Истина);
КонецФункции

&НаКлиенте
//И В таблице "ИмяТЧ" поле с именем "ИмяРеквизита" доступно
//@ВТаблицеПолеСИменемДоступно(ИмяТЧ, ИмяРеквизита)
Функция ВТаблицеПолеСИменемДоступно(ИмяТЧ,ИмяРеквизита) Экспорт
	ВТЧПолеДоступно(ИмяТЧ,ИмяРеквизита,Истина);
КонецФункции




&НаКлиенте
//И В таблице "ИмяТЧ" поле "ИмяРеквизита" не доступно
//@ВТЧПолеНеДоступно(ИмяТЧ, ИмяРеквизита)
Функция ВТЧПолеНеДоступно(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	 
	
	Если ПолеРеквизит = Неопределено Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с именем <%2> не найдено.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с заголовком <%2> не найдено.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Нашли = ПолеРеквизит.ТекущаяДоступность();
	
	Если Нашли Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с именем <%1> доступен на форме");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с заголовком <%1> доступен на форме");
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецФункции 

&НаКлиенте
//И В таблице "ИмяТЧ" поле "ИмяРеквизита" не доступно
//@ВТаблицеПолеНеДоступно(ИмяТЧ, ИмяРеквизита)
Функция ВТаблицеПолеНеДоступно(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВТЧПолеНеДоступно(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени);
КонецФункции 





&НаКлиенте
//И В таблице "ИмяТЧ" поле с именем "ИмяРеквизита" недоступно
//@ВТЧПолеСИменемНеДоступно(ИмяТЧ, ИмяРеквизита)
Функция ВТЧПолеСИменемНеДоступно(ИмяТЧ,ИмяРеквизита) Экспорт
	ВТЧПолеНеДоступно(ИмяТЧ,ИмяРеквизита,Истина);
КонецФункции

&НаКлиенте
//И В таблице "ИмяТЧ" поле с именем "ИмяРеквизита" недоступно
//@ВТаблицеПолеСИменемНеДоступно(ИмяТЧ, ИмяРеквизита)
Функция ВТаблицеПолеСИменемНеДоступно(ИмяТЧ,ИмяРеквизита) Экспорт
	ВТЧПолеНеДоступно(ИмяТЧ,ИмяРеквизита,Истина);
КонецФункции





&НаКлиенте
//И В таблице "ИмяТЧ" поле "ИмяРеквизита" доступно только для просмотра
//@ВТЧПолеДоступноТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)
Функция ВТЧПолеДоступноТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	 
	
	Если ПолеРеквизит = Неопределено Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с именем <%2> не найдено.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с заголовком <%2> не найдено.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Нашли = ПолеРеквизит.ТекущееТолькоПросмотр();
	
	Если НЕ Нашли Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с именем <%1> доступен не только для просмотра");
		Иначе
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с заголовком <%1> доступен не только для просмотра");
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
//И В таблице "ИмяТЧ" поле "ИмяРеквизита" доступно только для просмотра
//@ВТаблицеПолеДоступноТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)
Функция ВТаблицеПолеДоступноТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВТЧПолеДоступноТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени);
КонецФункции




&НаКлиенте
//И В таблице "ИмяТЧ" поле с именем "ИмяРеквизита" доступно только для просмотра
//@ВТЧПолеСИменемДоступноТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)
Функция ВТЧПолеСИменемДоступноТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВТЧПолеДоступноТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита, Истина);
КонецФункции

&НаКлиенте
//И В таблице "ИмяТЧ" поле с именем "ИмяРеквизита" доступно только для просмотра
//@ВТаблицеПолеСИменемДоступноТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)
Функция ВТаблицеПолеСИменемДоступноТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВТЧПолеДоступноТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита, Истина);
КонецФункции




&НаКлиенте
//И В таблице "ИмяТЧ" поле "ИмяРеквизита" доступно не только для просмотра
//@ВТЧПолеДоступноНеТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)
Функция ВТЧПолеДоступноНеТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	Иначе	
		ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ);
	КонецЕсли;	 
	
	Если ПолеРеквизит = Неопределено Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с именем <%2> не найдено.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с заголовком <%2> не найдено.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Нашли = ПолеРеквизит.ТекущееТолькоПросмотр();
	
	Если Нашли Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с именем <%1> доступен не только для просмотра");
		Иначе
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент с заголовком <%1> доступен не только для просмотра");
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
//И В таблице "ИмяТЧ" поле "ИмяРеквизита" доступно не только для просмотра
//@ВТаблицеПолеДоступноНеТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)
Функция ВТаблицеПолеДоступноНеТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВТЧПолеДоступноНеТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени);
КонецФункции



&НаКлиенте
//И В таблице "ИмяТЧ" поле с именем "ИмяРеквизита" доступно не только для просмотра
//@ВТЧПолеСИменемДоступноНеТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)
Функция ВТЧПолеСИменемДоступноНеТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВТЧПолеДоступноНеТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита, Истина);
КонецФункции

&НаКлиенте
//И В таблице "ИмяТЧ" поле с именем "ИмяРеквизита" доступно не только для просмотра
//@ВТаблицеПолеСИменемДоступноНеТолькоДляПросмотра(ИмяТЧ, ИмяРеквизита)
Функция ВТаблицеПолеСИменемДоступноНеТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ВТЧПолеДоступноНеТолькоДляПросмотра(ИмяТЧ,ИмяРеквизита, Истина);
КонецФункции

// } доступность



&НаКлиенте
//Тогда в таблице с именем "ТабличнаяЧасть1" я выделяю все строки
//@ВТаблицеСИменемЯВыделяюВсеСтроки(Парам01)
Функция ВТаблицеСИменемЯВыделяюВсеСтроки(ИмяТЧ) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	Попытка
		ТЧ.ВыделитьВсеСтроки();
		Если Ванесса.ТекущийTestclientЭтоWebКлиент Тогда
			//чтобы дать web клиенту успеть выделить строки
			Если Ванесса.БезопасноеВыполнениеШагов() Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецЕсли;	 
		
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось выделить все строки в таблице <%1>. %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Символы.ПС + ОписаниеОшибки());
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
//Тогда в таблице "ТабличнаяЧасть1" я выделяю все строки
//@ВТаблицеЯВыделяюВсеСтроки(Парам01)
Функция ВТаблицеЯВыделяюВсеСтроки(ИмяТЧ) Экспорт
	ВТаблицеСИменемЯВыделяюВсеСтроки(ИмяТЧ);
КонецФункции



&НаКлиенте
//И в таблице "ИмяТаблицы" я выделяю все строки выше текущей
//@ВТаблицеЯВыделяюВсеСтрокиВышеТекущей(Парам01)
Функция ВТаблицеЯВыделяюВсеСтрокиВышеТекущей(ИмяТЧ) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	Попытка
		ТЧ.ПерейтиКПредыдущейСтроке();
	Исключение
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ТЧ.ПерейтиКПредыдущейСтроке(Истина);
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;	
КонецФункции


&НаКлиенте
//И в таблице "ИмяТаблицы" я выделяю все строки ниже текущей
//@ВТаблицеЯВыделяюВсеСтрокиНижеТекущей(Парам01)
Функция ВТаблицеЯВыделяюВсеСтрокиНижеТекущей(ИмяТЧ) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	Попытка
		ТЧ.ПерейтиКСледующейСтроке();
	Исключение
	КонецПопытки;
	
	Пока Истина Цикл
		Попытка
			ТЧ.ПерейтиКСледующейСтроке(Истина);
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;	
КонецФункции



&НаКлиенте
//И в поле "&Что искать" ввожу значение переменной "Документ2_Сценарий_1"
//@ВПолеВвожуЗначениеПеременной(Парам01,Парам02)
Функция ВПолеВвожуЗначениеПеременной(ИмяПоля, Знач ИмяПеременной, ИскатьПоИмени = Ложь) Экспорт
	ЗначениеПеременной = Ванесса.ЗначениеПеременнойИзКонтекстаИлиПоНомеруПараметра(ИмяПеременной, 1);
	Если ЗначениеПеременной = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> ранее не была сохранена");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	ВОткрытойФормеВПолеСЗаголовкомЯВвожуТекст(ИмяПоля,Строка(ЗначениеПеременной),Ложь);
КонецФункции

&НаКлиенте
//И в поле "&Что искать" я ввожу значение переменной "Документ2_Сценарий_1"
//@ВПолеЯВвожуЗначениеПеременной(Парам01,Парам02)
Функция ВПолеЯВвожуЗначениеПеременной(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	ВПолеВвожуЗначениеПеременной(ИмяПоля,ИмяПеременной,ИскатьПоИмени);
КонецФункции

&НаКлиенте
//И в Таблицу "ТабличнаяЧасть1" поле "Номер" ввожу значение переменной "НомерДок"
//@ВТаблицуВПолеВвожуЗначениеПеременной(Парам01,Парам02,Парам03)
Функция ВТаблицуВПолеВвожуЗначениеПеременной(ИмяТЧ, ИмяПоля, Знач ИмяПеременной) Экспорт
	ЗначениеПеременной = Ванесса.ЗначениеПеременнойИзКонтекстаИлиПоНомеруПараметра(ИмяПеременной, 2);
	Если ЗначениеПеременной = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> ранее не была сохранена");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	ВТЧВПолеЯВвожуТекст(ИмяТЧ,ИмяПоля,ЗначениеПеременной);
КонецФункции

&НаКлиенте
//И в Таблицу "ТабличнаяЧасть1" поле "Номер" я ввожу значение переменной "НомерДок"
//@ВТаблицуВПолеЯВвожуЗначениеПеременной(Парам01,Парам02,Парам03)
Функция ВТаблицуВПолеЯВвожуЗначениеПеременной(ИмяТЧ,ИмяПоля,ИмяПеременной) Экспорт
	ВТаблицуВПолеВвожуЗначениеПеременной(ИмяТЧ,ИмяПоля,ИмяПеременной);
КонецФункции


&НаКлиенте
//И в поле "&Что искать" ввожу значение ключа "Номер документа"
//@ВПолеВвожуЗначениеКлюча(Парам01,Парам02)
Функция ВПолеВвожуЗначениеКлюча(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	ЗначениеПеременной = Ванесса.ПолучитьСохраненноеЗначениеИзКонтекста(ИмяПеременной);
	Если ЗначениеПеременной = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> ранее не была сохранена");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Ванесса.Шаг("И в поле """+ИмяПоля+""" я ввожу текст """+ЗначениеПеременной+"""");
КонецФункции

&НаКлиенте
//И в поле "&Что искать" я ввожу значение ключа "Номер документа"
//@ВПолеЯВвожуЗначениеКлюча(Парам01,Парам02)
Функция ВПолеЯВвожуЗначениеКлюча(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	ВПолеВвожуЗначениеКлюча(ИмяПоля,ИмяПеременной,ИскатьПоИмени);
КонецФункции


&НаКлиенте
//И в поле "&Что искать" ввожу значение глобальной переменной "Документ2_Сценарий_1"
//@ВПолеВвожуЗначениеГлобальнойПеременной(Парам01,Парам02)
Функция ВПолеВвожуЗначениеГлобальнойПеременной(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	ЗначениеПеременной = "";
	КонтекстСохраняемый.Свойство(ИмяПеременной, ЗначениеПеременной);
	Если ЗначениеПеременной = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> ранее не была сохранена");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Ванесса.Шаг("И в поле """+ИмяПоля+""" я ввожу текст """+ЗначениеПеременной+"""");
КонецФункции

&НаКлиенте
//И в поле "&Что искать" я ввожу значение глобальной переменной "Документ2_Сценарий_1"
//@ВПолеЯВвожуЗначениеГлобальнойПеременной(Парам01,Парам02)
Функция ВПолеЯВвожуЗначениеГлобальнойПеременной(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	ВПолеВвожуЗначениеГлобальнойПеременной(ИмяПоля,ИмяПеременной,ИскатьПоИмени);
КонецФункции


&НаКлиенте
//И в поле "&Что искать" ввожу значение глобального ключа "Номер документа"
//@ВПолеВвожуЗначениеГлобальногоКлюча(Парам01,Парам02)
Функция ВПолеВвожуЗначениеГлобальногоКлюча(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	ЗначениеПеременной = Ванесса.ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого(ИмяПеременной);
	Если ЗначениеПеременной = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> ранее не была сохранена");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Ванесса.Шаг("И в поле """+ИмяПоля+""" я ввожу текст """+ЗначениеПеременной+"""");
КонецФункции

&НаКлиенте
//И в поле "&Что искать" я ввожу значение глобального ключа "Номер документа"
//@ВПолеЯВвожуЗначениеГлобальногоКлюча(Парам01,Парам02)
Функция ВПолеЯВвожуЗначениеГлобальногоКлюча(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	ВПолеВвожуЗначениеГлобальногоКлюча(ИмяПоля,ИмяПеременной,ИскатьПоИмени);
КонецФункции

&НаКлиенте
//И в поле с именем "&Что искать" ввожу значение переменной "Документ2_Сценарий_1"
//@ВПолеСИменемВвожуЗначениеПеременной(Парам01,Парам02)
Функция ВПолеСИменемВвожуЗначениеПеременной(Парам01, Знач ИмяПеременной) Экспорт
	
	ЗначениеПеременной = Ванесса.ЗначениеПеременнойИзКонтекстаИлиПоНомеруПараметра(ИмяПеременной, 1);
	Если ЗначениеПеременной = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> ранее не была сохранена");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	ЗначениеПеременной = СтрЗаменить(ЗначениеПеременной, """", "\""");
	ЗначениеПеременной = СтрЗаменить(ЗначениеПеременной, "'", "\'");
	Ванесса.Шаг("И В открытой форме в поле с именем '"+Парам01+"' я ввожу текст """+ЗначениеПеременной+"""");
	
КонецФункции

&НаКлиенте
//И в поле с именем "&Что искать" я ввожу значение переменной "Документ2_Сценарий_1"
//@ВПолеСИменемЯВвожуЗначениеПеременной(Парам01,Парам02)
Функция ВПолеСИменемЯВвожуЗначениеПеременной(Парам01,ИмяПеременной) Экспорт
	ВПолеСИменемВвожуЗначениеПеременной(Парам01,ИмяПеременной);
КонецФункции

&НаКлиенте
//И в поле с именем "&Что искать" ввожу значение ключа "Номер документа"
//@ВПолеСИменемВвожуЗначениеКлюча(Парам01,Парам02)
Функция ВПолеСИменемВвожуЗначениеКлюча(Парам01,ИмяПеременной) Экспорт
	ЗначениеПеременной = Ванесса.ПолучитьСохраненноеЗначениеИзКонтекста(ИмяПеременной);
	Если ЗначениеПеременной = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> ранее не была сохранена");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Ванесса.Шаг("И В открытой форме в поле с именем '"+Парам01+"' я ввожу текст """+ЗначениеПеременной+"""");
КонецФункции

&НаКлиенте
//И в поле с именем "&Что искать" ввожу значение глобальной переменной "Документ2_Сценарий_1"
//@ВПолеСИменемВвожуЗначениеГлобальнойПеременной(Парам01,Парам02)
Функция ВПолеСИменемВвожуЗначениеГлобальнойПеременной(Парам01,ИмяПеременной) Экспорт
	ЗначениеПеременной = "";
	КонтекстСохраняемый.Свойство(ИмяПеременной, ЗначениеПеременной);
	Если ЗначениеПеременной = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> ранее не была сохранена");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Ванесса.Шаг("И В открытой форме в поле с именем '"+Парам01+"' я ввожу текст """+ЗначениеПеременной+"""");
КонецФункции

&НаКлиенте
//И в поле с именем "&Что искать" ввожу значение глобального ключа "Номер документа"
//@ВПолеСИменемВвожуЗначениеГлобальногоКлюча(Парам01,Парам02)
Функция ВПолеСИменемВвожуЗначениеГлобальногоКлюча(Парам01,ИмяПеременной) Экспорт
	ЗначениеПеременной = Ванесса.ПолучитьСохраненноеЗначениеИзКонтекста(ИмяПеременной);
	Если ЗначениеПеременной = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> ранее не была сохранена");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Ванесса.Шаг("И В открытой форме в поле с именем '"+Парам01+"' я ввожу текст """+ЗначениеПеременной+"""");
КонецФункции

&НаКлиенте
//И я удаляю все строки таблицы "График"
//@ЯУдаляюВсеСтрокиТаблицы(Парам01)
Функция ЯУдаляюВсеСтрокиТаблицы(ИмяТаблицы) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	
	Если Ванесса.Версия8312ИлиВыше Тогда
		Попытка
			ТекущийРежимРедактирование = ТЧ.ТекущийРежимРедактирование();
			Если ТекущийРежимРедактирование Тогда
				ТЧ.ЗакончитьРедактированиеСтроки();
			КонецЕсли;	 
		Исключение
			ТекущийРежимРедактирование = Неопределено;
		КонецПопытки;
	КонецЕсли;	 
	
	ЗначениеТЧ = ПолучитьСтрокиИзТаблицыTestClient(ТЧ);
	ОсталосьУдалить = ЗначениеТЧ.Количество();
	
	Для Счетчик = 1 По ОсталосьУдалить Цикл
		Попытка
			ТЧ.ПерейтиКПоследнейСтроке();
			ТЧ.УдалитьСтроку();
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
//И в таблице с именем "ТабличнаяЧасть1" я удаляю текущую строку
//@ВТаблицеСИменемЯУдаляюТекущуюСтроку(Парам01)
Функция ВТаблицеСИменемЯУдаляюТекущуюСтроку(ИмяТаблицы) Экспорт
	Таблица = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	
	Таблица.Активизировать();
	Таблица.УдалитьСтроку();
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я удаляю текущую строку
//@ВТаблицеЯУдаляюТекущуюСтроку(Парам01)
Функция ВТаблицеЯУдаляюТекущуюСтроку(ИмяТаблицы) Экспорт
	ВТаблицеСИменемЯУдаляюТекущуюСтроку(ИмяТаблицы);
КонецФункции





&НаКлиенте
//И поле "Реквизит2" существует
//@ПолеСуществует(Парам01)
Функция ПолеСуществует(ИмяПоля,ИскатьПоИмени = Ложь) Экспорт
	Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоля,ИскатьПоИмени);
КонецФункции

&НаКлиенте
//И кнопка "Реквизит2" существует
//@КнопкаСуществует(Парам01)
Функция КнопкаСуществует(ИмяПоля,ИскатьПоИмени = Ложь) Экспорт
	Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоля,ИскатьПоИмени);
КонецФункции



&НаКлиенте
//И поле "Реквизит2" не существует
//@ПолеНеСуществует(Парам01)
Функция ПолеНеСуществует(ИмяПоля,ИскатьПоИмени = Ложь, ЭтоКнопка = Ложь) Экспорт
	Нашли = Ложь;
	МассивФорм = Ванесса.НайтиКонтейнерыТекущегоОкнаTestClient();
	Для каждого ТекущаяФорма Из МассивФорм Цикл
		
		Если ИскатьПоИмени Тогда
			МассивЭлементов = ТекущаяФорма.НайтиОбъекты(, , ИмяПоля);
		Иначе
			МассивЭлементов = ТекущаяФорма.НайтиОбъекты(, ИмяПоля);
		КонецЕсли;	 
		
		Если МассивЭлементов = Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если МассивЭлементов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Нашли = Истина;
		Прервать;
	КонецЦикла;	
	
	Если Нашли Тогда
		Если ЭтоКнопка Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка <%1> существует, а ожидали, что её нет.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле <%1> существует, а ожидали, что его нет.");
		КонецЕсли;	
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПоля);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И кнопка "Реквизит2" не существует
//@КнопкаНеСуществует(Парам01)
Функция КнопкаНеСуществует(ИмяПоля,ИскатьПоИмени = Ложь) Экспорт
	ПолеНеСуществует(ИмяПоля,ИскатьПоИмени, Истина);
КонецФункции


&НаКлиенте
//И поле с именем "Реквизит2" существует
//@ПолеСИменемСуществует(Парам01)
Функция ПолеСИменемСуществует(ИмяПоля,ИскатьПоИмени = Ложь) Экспорт
	ПолеСуществует(ИмяПоля,Истина);
КонецФункции

&НаКлиенте
//И кнопка с именем "Реквизит2" существует
//@КнопкаСИменемСуществует(Парам01)
Функция КнопкаСИменемСуществует(ИмяПоля,ИскатьПоИмени = Ложь) Экспорт
	ПолеСуществует(ИмяПоля,Истина);
КонецФункции

&НаКлиенте
//И поле с именем "Реквизит2" не существует
//@ПолеСИменемНеСуществует(Парам01)
Функция ПолеСИменемНеСуществует(ИмяПоля) Экспорт
	ПолеНеСуществует(ИмяПоля,Истина);
КонецФункции

&НаКлиенте
//И кнопка с именем "Реквизит2" не существует
//@КнопкаСИменемНеСуществует(Парам01)
Функция КнопкаСИменемНеСуществует(ИмяПоля) Экспорт
	ПолеНеСуществует(ИмяПоля,Истина,Истина);
КонецФункции


&НаКлиенте
//Если поле "Реквизит2" существует тогда
//@ПолеСуществуетТогда(Парам01)
Функция ПолеСуществуетТогда(ИмяПоля,ИскатьПоИмени = Ложь) Экспорт
	Реквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоля, ИскатьПоИмени, Ложь);
	Ванесса.УстановитьРезультатУсловия(Реквизит <> Неопределено);
КонецФункции

&НаКлиенте
//Если поле с именем "Реквизит2" существует тогда
//@ПолеСИменемСуществуетТогда(Парам01)
Функция ПолеСИменемСуществуетТогда(ИмяПоля) Экспорт
	ПолеСуществуетТогда(ИмяПоля, Истина);
КонецФункции



&НаКлиенте
//И поле с именем "Реквизит2" имеет заголовок
//@ПолеСИменемИмеетЗаголовок(Парам01,Парам02)
Функция ПолеСИменемИмеетЗаголовок(ИмяПоля,ОжидаемыйТекстЗаголовка) Экспорт
	Поле = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоля,Истина);
	
	Если Поле.ТекстЗаголовка <> ОжидаемыйТекстЗаголовка Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У поля <%1> ожидали заголовок <%2>, а получили <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПоля);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОжидаемыйТекстЗаголовка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Поле.ТекстЗаголовка);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//Если поле с именем "Реквизит2" имеет заголовок Тогда
//@ПолеСИменемИмеетЗаголовокТогда(Парам01,Парам02)
Функция ПолеСИменемИмеетЗаголовокТогда(ИмяПоля, ОжидаемыйТекстЗаголовка) Экспорт
	Поле = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоля, Истина);
	Ванесса.УстановитьРезультатУсловия(Поле.ТекстЗаголовка = ОжидаемыйТекстЗаголовка);
КонецФункции

&НаКлиенте
//И у поля с именем "Реквизит2" текст подсказки равен "ТекстПодсказки"
//@УПоляСИменемТекстПодсказкиРавен(Парам01,Парам02)
Функция УПоляСИменемТекстПодсказкиРавен(ИмяПоля,НужныйТекстПодсказки) Экспорт
	Поле = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоля,Истина);
	
	ТекущийТекстПодсказки = Поле.ПолучитьТекстПодсказки();
	
	Если ТекущийТекстПодсказки <> НужныйТекстПодсказки Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У поля <%1> ожидали текст подсказки <%2>, а получили <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПоля);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",НужныйТекстПодсказки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ТекущийТекстПодсказки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И поле таблицы "ИмяТаблицы" с именем "ИмяРеквизита" имеет заголовок "Реквизит строка"
//@ПолеТаблицыСИменемИмеетЗаголовок(Парам01,Парам02,Парам03)
Функция ПолеТаблицыСИменемИмеетЗаголовок(ИмяТаблицы,ИмяПоля,ОжидаемыйТекстЗаголовка) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	Поле = ТЧ.НайтиОбъект(,,ИмяПоля);
	Если Поле = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с именем <%2> не найдено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоля);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если Поле.ТекстЗаголовка <> ОжидаемыйТекстЗаголовка Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> у поля <%2> ожидали заголовок <%3>, а получили <%4>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоля);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ОжидаемыйТекстЗаголовка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",Поле.ТекстЗаголовка);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И у поля таблицы "ИмяТаблицы" с именем "РеквизитСтрока" текст подсказки равен ""
//@УПоляТаблицыСИменемТекстПодсказкиРавен(Парам01,Парам02,Парам03)
Функция УПоляТаблицыСИменемТекстПодсказкиРавен(ИмяТаблицы,ИмяПоля,ОжидаемыйТекстПодсказки) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	Поле = ТЧ.НайтиОбъект(,,ИмяПоля);
	Если Поле = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> поле с именем <%2> не найдено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоля);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если Поле.ПолучитьТекстПодсказки() <> ОжидаемыйТекстПодсказки Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> у поля <%2> ожидали текст подсказки <%3>, а получили <%4>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоля);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ОжидаемыйТекстПодсказки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",Поле.ТекстЗаголовка);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции




&НаКлиенте
//И у поля "Имя поля" я перехожу к дате 08.04.1981
//@УПоляЯПерехожуКДате(Парам01,Парам02)
Функция УПоляЯПерехожуКДате(ИмяРеквизита,Знач Дат,ИскатьПоИмени = Ложь) Экспорт
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"));
	ПолеРеквизит.Активизировать();
	
	Если ТипЗнч(Дат) = Тип("Строка") Тогда
		Дат = Ванесса.СтрокуВДату(Дат);
	КонецЕсли;	 
	
	ПолеРеквизит.ПерейтиКДате(Дат);
КонецФункции


&НаКлиенте
//И у поля с именем "Имя поля" я перехожу к дате "08.04.1981"
//@УПоляСИменемЯПерехожуКДате(Парам01,Парам02)
Функция УПоляСИменемЯПерехожуКДате(ИмяРеквизита,Дат,ИскатьПоИмени = Ложь) Экспорт
	УПоляЯПерехожуКДате(ИмяРеквизита,Дат,Истина);
КонецФункции


&НаКлиенте
//И у поля календаря "ИмяПоля" я выбираю дату
//@УПоляКалендаряЯВыбираюДату(Парам01)
Функция УПоляКалендаряЯВыбираюДату(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"));
	ПолеРеквизит.Выбрать();
КонецФункции

&НаКлиенте
//И у поля календаря с именем "ИмяПоля" я выбираю дату
//@УПоляКалендаряСИменемЯВыбираюДату(Парам01)
Функция УПоляКалендаряСИменемЯВыбираюДату(ИмяРеквизита) Экспорт
	УПоляКалендаряЯВыбираюДату(ИмяРеквизита,Истина);
КонецФункции




&НаКлиенте
//И поле ""Заголовок поля"" присутствует на форме
//@ПолеПрисутствуетНаФорме(Парам01)
Функция ПолеПрисутствуетНаФорме(ИмяЭлемента,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯВижуЭлемент(ИмяЭлемента, ИскатьПоИмени);
КонецФункции

&НаКлиенте
//И элемент формы ""ИмяПоля"" присутствует на форме
//@ЭлементФормыПрисутствуетНаФорме(Парам01)
Функция ЭлементФормыПрисутствуетНаФорме(ИмяЭлемента,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯВижуЭлемент(ИмяЭлемента, ИскатьПоИмени);
КонецФункции

&НаКлиенте
//И поле с именем 'ИмяПоля' присутствует на форме
//@ПолесИменемПрисутствуетНаФорме(Парам01)
Функция ПолесИменемПрисутствуетНаФорме(ИмяЭлемента) Экспорт
	ПолеПрисутствуетНаФорме(ИмяЭлемента,Истина);
КонецФункции

&НаКлиенте
//И элемент формы с именем 'ИмяПоля' присутствует на форме
//@ЭлементФормыСИменемПрисутствуетНаФорме(Парам01)
Функция ЭлементФормыСИменемПрисутствуетНаФорме(ИмяЭлемента) Экспорт
	ПолеПрисутствуетНаФорме(ИмяЭлемента,Истина);
КонецФункции

&НаКлиенте
//И поле ""Заголовок поля"" отсутствует на форме
//@ПолеОтсутствуетНаФорме(Парам01)
Функция ПолеОтсутствуетНаФорме(ИмяЭлемента,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯНеВижуЭлемент(ИмяЭлемента, ИскатьПоИмени);
КонецФункции

&НаКлиенте
//И элемент формы ""ИмяПоля"" отсутствует на форме
//@ЭлементФормыОтсутствуетНаФорме(Парам01)
Функция ЭлементФормыОтсутствуетНаФорме(ИмяЭлемента,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯНеВижуЭлемент(ИмяЭлемента, ИскатьПоИмени);
КонецФункции

&НаКлиенте
//И элемент формы ""ИмяПоля"" существует и невидим на форме
//@ЭлементФормыСуществуетИНевидимНаФорме(Парам01)
Функция ЭлементФормыСуществуетИНевидимНаФорме(ИмяЭлемента,ИскатьПоИмени = Ложь) Экспорт
	ВОткрытойФормеЯНеВижуЭлемент(ИмяЭлемента, ИскатьПоИмени,Истина);
КонецФункции

&НаКлиенте
//И поле с именем 'ИмяПоля' отсутствует на форме
//@ПолесИменемОтсутствуетНаФорме(Парам01)
Функция ПолесИменемОтсутствуетНаФорме(ИмяЭлемента) Экспорт
	ПолеОтсутствуетНаФорме(ИмяЭлемента,Истина);
КонецФункции

&НаКлиенте
//И элемент формы с именем 'ИмяПоля' отсутствует на форме
//@ЭлементФормыСИменемОтсутствуетНаФорме(Парам01)
Функция ЭлементФормыСИменемОтсутствуетНаФорме(ИмяЭлемента) Экспорт
	ПолеОтсутствуетНаФорме(ИмяЭлемента,Истина);
КонецФункции

&НаКлиенте
//И элемент формы с именем 'ИмяПоля' существует и невидим на форме
//@ЭлементФормыСИменемСуществуетИНевидимНаФорме(Парам01)
Функция ЭлементФормыСИменемСуществуетИНевидимНаФорме(ИмяЭлемента) Экспорт
	ВОткрытойФормеЯНеВижуЭлемент(ИмяЭлемента, Истина, Истина);
КонецФункции

&НаКлиенте
//И у табличного документа с именем "ТабДок" я перехожу к ячейке "R4C2"
//@УТабличногоДокументаСИменемЯПерехожуКЯчейке(Парам01,Парам02)
Функция УТабличногоДокументаСИменемЯПерехожуКЯчейке(ИмяРеквизита,ИмяЯчейки) Экспорт
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,Истина, Истина, Тип("ТестируемоеПолеФормы"));
	ПолеРеквизит.УстановитьТекущуюОбласть(ИмяЯчейки);
КонецФункции

&НаКлиенте
//И в табличном документе "ТабДок" я перехожу к ячейке "R4C2"
//@ВТабличномДокументеЯПерехожуКЯчейке(Парам01,Парам02)
Функция ВТабличномДокументеЯПерехожуКЯчейке(ИмяРеквизита,ИмяЯчейки) Экспорт
	УТабличногоДокументаСИменемЯПерехожуКЯчейке(ИмяРеквизита,ИмяЯчейки);
КонецФункции

&НаКлиенте
Функция ВТабличномДокументеЯПерехожуНаЯчейкуОтносительноТекущей(ИмяРеквизита,
	СмещениеПоСтрокам, СмещениеПоКолонкам)
	
	ПолеТабличногоДокумента = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, Истина, Истина, Тип("ТестируемоеПолеФормы"));
	АдресТекущейОбласти = ПолеТабличногоДокумента.ПолучитьАдресТекущейОбласти();
	ПозицияСимволаКолонки = Ванесса._СтрНайти(АдресТекущейОбласти, "C");
	ТекущийНомерСтроки = Число(Сред(АдресТекущейОбласти, 2, ПозицияСимволаКолонки - 2));
	ТекущийНомерКолонки = Число(Сред(АдресТекущейОбласти, ПозицияСимволаКолонки + 1));
	НовыйНомерСтроки = ТекущийНомерСтроки + СмещениеПоСтрокам;
	НовыйНомерКолонки = ТекущийНомерКолонки + СмещениеПоКолонкам;
	
	НовыйАдрес = "R" + Формат(НовыйНомерСтроки, "ЧГ=0") + "C" + Формат(НовыйНомерКолонки, "ЧГ=0");
	ПолеТабличногоДокумента.УстановитьТекущуюОбласть(НовыйАдрес);
	
КонецФункции

&НаКлиенте
//И в табличном документе "РеквизитТабличныйДокумент" я перехожу на "ЧислоЯчеек" ячеек вправо
//@ВТабличномДокументеЯПерехожуНаЯчеекВправо(Парам01,Парам02)
Функция ВТабличномДокументеЯПерехожуНаЯчеекВправо(ИмяРеквизита, ЧислоЯчеек) Экспорт
	
	СмещениеПоСтрокам = 0;
	СмещениеПоКолонкам = Число(ЧислоЯчеек);
	ВТабличномДокументеЯПерехожуНаЯчейкуОтносительноТекущей(ИмяРеквизита, СмещениеПоСтрокам, СмещениеПоКолонкам);
	
КонецФункции

&НаКлиенте
//И в табличном документе "РеквизитТабличныйДокумент" я перехожу на "ЧислоЯчеек" ячеек влево
//@ВТабличномДокументеЯПерехожуНаЯчеекВлево(Парам01,Парам02)
Функция ВТабличномДокументеЯПерехожуНаЯчеекВлево(ИмяРеквизита, ЧислоЯчеек) Экспорт
	
	СмещениеПоСтрокам = 0;
	СмещениеПоКолонкам = -Число(ЧислоЯчеек);
	ВТабличномДокументеЯПерехожуНаЯчейкуОтносительноТекущей(ИмяРеквизита, СмещениеПоСтрокам, СмещениеПоКолонкам);
	
КонецФункции

&НаКлиенте
//И в табличном документе "РеквизитТабличныйДокумент" я перехожу на "ЧислоЯчеек" ячеек вниз
//@ВТабличномДокументеЯПерехожуНаЯчеекВниз(Парам01,Парам02)
Функция ВТабличномДокументеЯПерехожуНаЯчеекВниз(ИмяРеквизита, ЧислоЯчеек) Экспорт
	
	СмещениеПоСтрокам = Число(ЧислоЯчеек);
	СмещениеПоКолонкам = 0;
	ВТабличномДокументеЯПерехожуНаЯчейкуОтносительноТекущей(ИмяРеквизита, СмещениеПоСтрокам, СмещениеПоКолонкам);
	
КонецФункции

&НаКлиенте
//И в табличном документе "РеквизитТабличныйДокумент" я перехожу на "ЧислоЯчеек" ячеек вверх
//@ВТабличномДокументеЯПерехожуНаЯчеекВверх(Парам01,Парам02)
Функция ВТабличномДокументеЯПерехожуНаЯчеекВверх(ИмяРеквизита, ЧислоЯчеек) Экспорт
	
	СмещениеПоСтрокам = -Число(ЧислоЯчеек);
	СмещениеПоКолонкам = 0;
	ВТабличномДокументеЯПерехожуНаЯчейкуОтносительноТекущей(ИмяРеквизита, СмещениеПоСтрокам, СмещениеПоКолонкам);
	
КонецФункции

&НаКлиенте
//И в табличном документе "РеквизитТабличныйДокумент" ячейка с адресом "АдресЯчейки" равна "ЗначениеЯчейки"
//@ВТабличномДокументеЯчейкаСАдресомРавна(Парам01,Парам02,Парам03)
Функция ВТабличномДокументеЯчейкаСАдресомРавна(ИмяРеквизита,Знач АдресЯчейки,Знач Значение, ПоШаблону = Ложь) Экспорт
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,Истина, Истина, Тип("ТестируемоеПолеФормы"), ДопПараметры);
			
			ТекстОбласти = ЭлементФормы.ПолучитьТекстОбласти(АдресЯчейки);
			
			Значение     = Ванесса.ПолучитьКорректоеЗначениеДляСравненияТекста(Значение);
			ТекстОбласти = Ванесса.ПолучитьКорректоеЗначениеДляСравненияТекста(ТекстОбласти);
			
			Если ПоШаблону Тогда
				Если НЕ Ванесса.СтрокаСоответствуетШаблону(ТекстОбласти, Значение) Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что у табличного документа <%1> в ячейке с адресом <%2> будет значение <%3>, а получили <%4>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",АдресЯчейки);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Значение);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ТекстОбласти);
					
					ТабДокСтало = Ванесса.ПолучитьТабДокИзTestClientКакМассив(ЭлементФормы);
					ТекущееЗначениеМакета = Ванесса.ПреобразоватьЗначениеВМакет(ТабДокСтало);
					Ванесса.ПрикрепитьМакетКСценарию(ТекущееЗначениеМакета,Ванесса.Локализовать("ТекущееЗначениеМакета"));
					
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
			Иначе	
				Если ТекстОбласти <> Значение Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что у табличного документа <%1> в ячейке с адресом <%2> будет значение <%3>, а получили <%4>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",АдресЯчейки);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Значение);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ТекстОбласти);
					
					ТабДокСтало = Ванесса.ПолучитьТабДокИзTestClientКакМассив(ЭлементФормы);
					ТекущееЗначениеМакета = Ванесса.ПреобразоватьЗначениеВМакет(ТабДокСтало);
					Ванесса.ПрикрепитьМакетКСценарию(ТекущееЗначениеМакета,Ванесса.Локализовать("ТекущееЗначениеМакета"));
					
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
			КонецЕсли;
			
			Прервать;
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И в табличном документе "РеквизитТабличныйДокумент" ячейка с адресом "АдресЯчейки" равна "ЗначениеЯчейки" по шаблону
//@ВТабличномДокументеЯчейкаСАдресомРавнаПоШаблону(Парам01,Парам02,Парам03)
Функция ВТабличномДокументеЯчейкаСАдресомРавнаПоШаблону(ИмяРеквизита,Знач АдресЯчейки,Знач Значение) Экспорт
	ВТабличномДокументеЯчейкаСАдресомРавна(ИмяРеквизита, АдресЯчейки, Значение, Истина);
КонецФункции




&НаКлиенте
//И у табличного документа с именем "ТабДок" я ввожу текст "222"
//@УТабличногоДокументаСИменемЯВвожуТекст(Парам01,Парам02)
Функция УТабличногоДокументаСИменемЯВвожуТекст(ИмяРеквизита,Текст) Экспорт
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,Истина, Истина, Тип("ТестируемоеПолеФормы"));
	ПолеРеквизит.НачатьРедактированиеТекущейОбласти();
	
	ПолеТекущейОбласти = ПолеРеквизит.ПолучитьПолеТекущейОбласти();
	
	//ПолеРеквизит.ВвестиТекст(Текст);
	Ванесса.ВвестиВПолеТекст(ПолеТекущейОбласти, Текст);
	ПолеРеквизит.ЗакончитьРедактированиеТекущейОбласти();
КонецФункции

&НаКлиенте
//И в табличный документ с именем "ТабДок" я ввожу текст "222"
//@ВТабличныйДокументЯВвожуТекст(Парам01,Парам02)
Функция ВТабличныйДокументЯВвожуТекст(ИмяРеквизита,Текст) Экспорт
	УТабличногоДокументаСИменемЯВвожуТекст(ИмяРеквизита,Текст);
КонецФункции

&НаКлиенте
//И у табличного документа с именем "РеквизитТабличныйДокумент" я делаю двойной клик на текущей ячейке
//@УТабличногоДокументаСИменемЯДелаюДвойнойКликНаТекущейЯчейке(Парам01)
Функция УТабличногоДокументаСИменемЯДелаюДвойнойКликНаТекущейЯчейке(ИмяРеквизита) Экспорт
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,Истина, Истина, Тип("ТестируемоеПолеФормы"));
	ПолеРеквизит.НачатьРедактированиеТекущейОбласти();
КонецФункции

&НаКлиенте
//И в табличном документе "РеквизитТабличныйДокумент" я делаю двойной клик на текущей ячейке
//@ВТабличномДокументеЯДелаюДвойнойКликНаТекущейЯчейке(Парам01)
Функция ВТабличномДокументеЯДелаюДвойнойКликНаТекущейЯчейке(ИмяРеквизита) Экспорт
	УТабличногоДокументаСИменемЯДелаюДвойнойКликНаТекущейЯчейке(ИмяРеквизита);
КонецФункции




&НаКлиенте
//И я меняю значение переключателя "Реквизит переключатель" на значение переменной "ЗначениеПереключателя"
//@ЯМеняюЗначениеПереключателяНаЗначениеПеременной(Парам01,Парам02)
Функция ЯМеняюЗначениеПереключателяНаЗначениеПеременной(ИмяПоля, Знач ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	ЗначениеПеременной = Ванесса.ЗначениеПеременнойИзКонтекстаИлиПоНомеруПараметра(ИмяПеременной, 1);
	Если ЗначениеПеременной = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Переменная <%1> ранее не была сохранена");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ИскатьПоИмени Тогда
		Ванесса.Шаг("И я меняю значение переключателя с именем '" + ИмяПоля + "' на """ + ЗначениеПеременной + """");
	Иначе	
		Ванесса.Шаг("И я меняю значение переключателя """ + ИмяПоля + """ на """ + ЗначениеПеременной + """");
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И я меняю значение переключателя с именем "Реквизит переключатель" на значение переменной "ЗначениеПереключателя"
//@ЯМеняюЗначениеПереключателяСИменемНаЗначениеПеременной(Парам01,Парам02)
Функция ЯМеняюЗначениеПереключателяСИменемНаЗначениеПеременной(ИмяПоля,ИмяПеременной,ИскатьПоИмени = Ложь) Экспорт
	ЯМеняюЗначениеПереключателяНаЗначениеПеременной(ИмяПоля,ИмяПеременной,Истина);
КонецФункции

 





&НаКлиенте
//И я жду, что в таблице "ИмяТаблицы" количество строк будет "больше" 0 в течении 20 секунд
//@ЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТеченииСекунд(Парам01,Парам02,Парам03,Парам04)
Функция ЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТеченииСекунд(ИмяТаблицы,ВидСравнения,КоличествоСтрок,КоличествоСекунд) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяТаблицыОбработкаОжидания       = ИмяТаблицы;
	ВидСравненияОбрабткаОжидания      = Ванесса.ПолучитьОператорПоТексту(ВидСравнения);
	КоличествоСтрокОбработкаОжидания  = КоличествоСтрок;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТеченииСекунд",1,Ложь);
КонецФункции

&НаКлиенте
//И я жду, что в таблице "ИмяТаблицы" количество строк будет "больше" 0 в течение 20 секунд
//@ЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)
Функция ЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТечениеСекунд(ИмяТаблицы,ВидСравнения,КоличествоСтрок,КоличествоСекунд) Экспорт
	ЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТеченииСекунд(ИмяТаблицы,ВидСравнения,КоличествоСтрок,КоличествоСекунд);
КонецФункции

&НаКлиенте
Функция ОбработчикОжиданияЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТеченииСекунд()
	ИмяОбработчика = "ОбработчикОжиданияЯЖдуЧтоВТаблицеКоличествоСтрокБудетВТеченииСекунд";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВызыватьИсключение", 		Ложь);
	ДопПараметры.Вставить("ПроверкаКоличестваСтрок",	Истина);
	ДопПараметры.Вставить("ВидСравненияТаблицы", 		ВидСравненияОбрабткаОжидания);
	ДопПараметры.Вставить("ЗначениеСравнения", 			КоличествоСтрокОбработкаОжидания);
	ДопПараметры.Вставить("ВыполнятьОбновлениеТаблицы", Истина);
	ТекущаяФорма = Ванесса.НайтиТекущуюФормуTestClient();	
	ДопПараметры.Вставить("ФормаРеквизита", ТекущаяФорма);
	
	Попытка
		МассивСтрок = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяТаблицыОбработкаОжидания,Истина,ДопПараметры);
	Исключение
		//для стабильности работы шага
		МассивСтрок = Новый Массив;
	КонецПопытки;
	
	Если МассивСтрок = Неопределено Тогда
		МассивСтрок = Новый Массив;
	КонецЕсли;
	
	Попытка
		Количество = МассивСтрок.Количество();
	Исключение
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить количество строк у таблицы <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицыОбработкаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	ЗначениеСравнения = Неопределено;
	Выражение = "ЗначениеСравнения = (МассивСтрок.Количество() " + ВидСравненияОбрабткаОжидания + " КоличествоСтрокОбработкаОжидания)";
	
	Попытка
		Выполнить(Выражение);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось вычислить выражение: %1. Описание ошибки: %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Символы.ПС + Выражение + Символы.ПС);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Символы.ПС + ОписаниеОшибки);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Если ЗначениеСравнения Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат Неопределено;
	КонецЕсли; 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		
		Попытка
			МакетЗначениеТЧ = Ванесса.ПреобразоватьЗначениеВМакет(МассивСтрок);
			Ванесса.ПрикрепитьМакетКСценарию(МакетЗначениеТЧ, Ванесса.Локализовать("ТекущееЗначениеТаблицы"));
		Исключение
		КонецПопытки;
		
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд у таблицы <%2> количество строк %3 %4. Текущее количество строк <%5>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяТаблицыОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ВидСравненияОбрабткаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",КоличествоСтрокОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",МассивСтрок.Количество());
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
//И я жду, что в окне "ИмяОкна" в таблице "ИмяТаблицы" количество строк будет "больше" 0 в течении 20 секунд
//@ЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТеченииСекунд(Парам01,Парам02,Парам03,Парам04,Парам05)
Функция ЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТеченииСекунд(ИмяОкна,ИмяТаблицы,ВидСравнения,КоличествоСтрок,КоличествоСекунд) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяОкнаОбработкаОжидания          = ИмяОкна;
	ИмяТаблицыОбработкаОжидания       = ИмяТаблицы;
	ВидСравненияОбрабткаОжидания      = Ванесса.ПолучитьОператорПоТексту(ВидСравнения);
	КоличествоСтрокОбработкаОжидания  = КоличествоСтрок;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТеченииСекунд",1,Ложь);
КонецФункции

&НаКлиенте
//И я жду, что в окне "ИмяОкна" в таблице "ИмяТаблицы" количество строк будет "больше" 0 в течение 20 секунд
//@ЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТечениеСекунд(Парам01,Парам02,Парам03,Парам04,Парам05)
Функция ЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТечениеСекунд(ИмяОкна,ИмяТаблицы,ВидСравнения,КоличествоСтрок,КоличествоСекунд) Экспорт
	ЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТеченииСекунд(ИмяОкна,ИмяТаблицы,ВидСравнения,КоличествоСтрок,КоличествоСекунд);
КонецФункции

&НаКлиенте
Функция ОбработчикОжиданияЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТеченииСекунд()
	ИмяОбработчика = "ОбработчикОжиданияЯЖдуЧтоВОкнеВТаблицеКоличествоСтрокБудетВТеченииСекунд";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	Таблица = Неопределено;
	Попытка
		НужноеОкно = КонтекстСохраняемый.ТестовоеПриложение.НайтиОБъект(Тип("ТестируемоеОкноКлиентскогоПриложения"),ИмяОкнаОбработкаОжидания);
		
		Если НужноеОкно = Неопределено Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчика);
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не нашли окно с заголовком <%1>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяОкнаОбработкаОжидания);
			Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
		Таблица = НужноеОкно.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"), , ИмяТаблицыОбработкаОжидания);
	Исключение
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Если Таблица = Неопределено Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не нашли таблицу с именем <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицыОбработкаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	МассивСтрок = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(Таблица);
	Если МассивСтрок = Неопределено Тогда
		МассивСтрок = Новый Массив;
	КонецЕсли;
	
	
	Попытка
		Количество = МассивСтрок.Количество();
	Исключение
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить количество строк у таблицы <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицыОбработкаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	
	ЗначениеСравнения = Неопределено;
	Выражение = "ЗначениеСравнения = (МассивСтрок.Количество() " + ВидСравненияОбрабткаОжидания + " КоличествоСтрокОбработкаОжидания)";
	Выполнить(Выражение);
	
	Если ЗначениеСравнения Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат Неопределено;
	КонецЕсли; 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд у таблицы <%2> количество строк %3 %4. Текущее количество строк <%5>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяТаблицыОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ВидСравненияОбрабткаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",КоличествоСтрокОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",МассивСтрок.Количество());
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
//И я вывожу значение переменной "ВариантЗаполненияСостава"
//@ЯВывожуЗначениеПеременной(Парам01)
Функция ЯВывожуЗначениеПеременной(Знач ИмяПеременной, ВывестиТип = Ложь) Экспорт
	Значение = Неопределено;
	
	Попытка
		Если Контекст.Свойство(ИмяПеременной) Тогда
			Значение = Контекст[ИмяПеременной];
		КонецЕсли;	 
	Исключение
	КонецПопытки;
	
	Если Значение = Неопределено Тогда
		Попытка
			Если КонтекстСохраняемый.Свойство(ИмяПеременной) Тогда
				Значение = КонтекстСохраняемый[ИмяПеременной];
			КонецЕсли;	 
		Исключение
		КонецПопытки;
	КонецЕсли;	 
	
	Если Значение = Неопределено Тогда
		Попытка
			Значение = Ванесса.ПолучитьЗначениеПеременнойИзКонтекста(ИмяПеременной);
		Исключение
			Значение = ИмяПеременной;
		КонецПопытки;
	КонецЕсли;	 
	
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Результат = Символы.ПС;
		Для Каждого ЭлементМассива Из Значение Цикл
			Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
				Для Каждого ЭлементСтруктуры Из ЭлементМассива Цикл
					Результат = Результат + ЭлементСтруктуры.Значение + Символы.Таб +  ";";
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("Массив") Тогда
				Для Каждого ЭлементПодМассива Из ЭлементМассива Цикл
					Результат = Результат + ЭлементПодМассива + Символы.Таб +  ";";
				КонецЦикла;
			Иначе
				Результат = Результат + ЭлементМассива + Символы.Таб + ";";
			КонецЕсли;
			Результат = Результат + Символы.ПС;
		КонецЦикла;
		
		Значение = Результат;
	КонецЕсли;
	
	Если ИмяПеременной = Значение Тогда
		ИмяПеременной = Ванесса.ЗначениеПараметраТекущегоСценария(0);
	КонецЕсли;
	
	Если ВывестиТип Тогда
		ИмяПеременной = Ванесса.ПодставитьПараметрыВСтроку(Ванесса.Локализовать("Тип переменной <%1>"), ИмяПеременной);
		Значение = ТипЗнч(Значение);
	КонецЕсли;	 
	
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("%1 = %2");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Значение);
	Сообщить(ТекстСообщения);
КонецФункции

&НаКлиенте
//И я вывожу тип переменной "ВариантЗаполненияСостава"
//@ЯВывожуТипПеременной(Парам01)
Функция ЯВывожуТипПеременной(Знач ИмяПеременной) Экспорт
	
	ЯВывожуЗначениеПеременной(ИмяПеременной, Истина);
	
КонецФункции

&НаКлиенте
//И поле "РеквизитЧисло" равно переменной "ЗначениеРеквизитЧисло"
//@ПолеРавноПеременной(Парам01,Парам02)
Функция ПолеРавноПеременной(ИмяПоля,ИмяПеременной) Экспорт
	ПолеРавноПеременнойСлужебный(ИмяПоля,ИмяПеременной, Ложь, Истина);
КонецФункции

&НаКлиенте
//И поле с именем "РеквизитЧисло" равно переменной "ЗначениеРеквизитЧисло"
//@ПолеСИменемРавноПеременной(Парам01,Парам02)
Функция ПолеСИменемРавноПеременной(ИмяПоля,ИмяПеременной) Экспорт
	ПолеРавноПеременнойСлужебный(ИмяПоля,ИмяПеременной, Истина, Истина);
КонецФункции

&НаКлиенте
//И поле "РеквизитЧисло" не равно переменной "ЗначениеРеквизитЧисло"
//@ПолеРавноПеременной(Парам01,Парам02)
Функция ПолеНеРавноПеременной(ИмяПоля,ИмяПеременной) Экспорт
	ПолеРавноПеременнойСлужебный(ИмяПоля,ИмяПеременной, Ложь, Ложь);
КонецФункции

&НаКлиенте
//И поле с именем "РеквизитЧисло" не равно переменной "ЗначениеРеквизитЧисло"
//@ПолеСИменемНеРавноПеременной(Парам01,Парам02)
Функция ПолеСИменемНеРавноПеременной(ИмяПоля,ИмяПеременной) Экспорт
	ПолеРавноПеременнойСлужебный(ИмяПоля,ИмяПеременной, Истина, Ложь);
КонецФункции


&НаКлиенте
Функция ПолеРавноПеременнойСлужебный(ИмяПоля, ИмяПеременной, ИскатьПоИмени, ПроверятьРавенство)
	ЗначениеПоля = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяПоля,ИскатьПоИмени);
	
	ЗначениеВКонтексте = Ванесса.ПолучитьЗначениеПеременнойИзКонтекста(ИмяПеременной);
	
	Если ПроверятьРавенство Тогда
		Если ЗначениеПоля <> ЗначениеВКонтексте Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что поле <%1> будет равно переменной <%2>. Значение переменной <%3>. ЗначениеПоля <%4>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПоля);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПеременной);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ЗначениеВКонтексте);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ЗначениеПоля);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	Иначе	
		Если ЗначениеПоля = ЗначениеВКонтексте Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что поле <%1> будет не равно переменной <%2>. Значение переменной <%3>. ЗначениеПоля <%4>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПоля);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПеременной);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ЗначениеВКонтексте);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ЗначениеПоля);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;	
КонецФункции





&НаКлиенте
//И поле таблицы "ТабличнаяЧасть1" "РеквизитЧисло" равно переменной "ЗначениеРеквизитЧислоТаблица"
//@ПолеТаблицыРавноПеременной(Парам01,Парам02,Парам03)
Функция ПолеТаблицыРавноПеременной(ИмяТЧ,ИмяПоля,ИмяПеременной) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	ЗначениеПоля = ТЧ.ПолучитьТекстЯчейки(ИмяПоля);
	ЗначениеВКонтексте = Ванесса.ПолучитьЗначениеПеременнойИзКонтекста(ИмяПеременной);
	
	Если ЗначениеПоля <> ЗначениеВКонтексте Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, чтов таблице <%1> поле <%2> будет равно переменной <%3>. Значение переменной <%4>. ЗначениеПоля <%5>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоля);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ИмяПеременной);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ЗначениеВКонтексте);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",ЗначениеПоля);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции






&НаКлиенте
//Тогда переменная "ЗначениеВариантЗаполненияСостава" имеет значение "Отбор"
//@ПеременнаяИмеетЗначение(Парам01,Парам02)
Функция ПеременнаяИмеетЗначение(ИмяПеременной,Значение) Экспорт
	ЗначениеПеременной = Ванесса.ЗначениеПеременнойИзКонтекстаИлиПоНомеруПараметра(ИмяПеременной, 0);
	Если ЗначениеПеременной <> Значение Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что переменная <%1> будет равна <%2>. Текущее значение <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Значение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ЗначениеПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//Тогда переменная "ИмяПеременной" имеет значение "ЗначениеПеременной" по шаблону
//@ПеременнаяИмеетЗначениеПоШаблону(Парам01,Парам02)
Функция ПеременнаяИмеетЗначениеПоШаблону(ИмяПеременной,Значение) Экспорт
	ЗначениеПеременной = Ванесса.ЗначениеПеременнойИзКонтекстаИлиПоНомеруПараметра(ИмяПеременной, 0);
	Если НЕ Ванесса.СтрокаСоответствуетШаблону(ЗначениеПеременной, Значение) Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что переменная <%1> будет равна <%2>. Текущее значение <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Значение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ЗначениеПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции




&НаСервере
Функция ПолучитьРасхожденияТД(Макет, ТабПарам,ТипСравнения,ДопПараметры)
	
	ТаблицаПараметровМакета = Новый ТаблицаЗначений;
	ТаблицаПараметровМакета.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ТаблицаПараметровМакета.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Область Из Макет.Области Цикл
		Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			НоваяСтрока          = ТаблицаПараметровМакета.Добавить();
			НоваяСтрока.Имя      = Область.Имя;
			НоваяСтрока.Значение = СтрЗаменить(Область.Текст, Символы.НПП, " ");
		КонецЕсли;
	КонецЦикла;
	ТаблицаПараметровМакета.Индексы.Добавить("Имя");
	
	МассивРасхождений = Новый Массив;
	Для Каждого СтрокаОжидаемая Из ТабПарам Цикл
		ИмяПараметра = СтрокаОжидаемая.Кол1;
		ЗначениеПараметра = СтрокаОжидаемая.Кол2;
		
		СтрокаТаблицыМакета = ТаблицаПараметровМакета.Найти(ИмяПараметра, "Имя");
		Если СтрокаТаблицыМакета = Неопределено Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("Именованная область %1 не найдена;",ДопПараметры.ТекстСообщенийПользователю);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПараметра); 
			МассивРасхождений.Добавить(ТекстСообщения);
		ИначеЕсли ТипСравнения = "точный" Тогда
			Если СтрокаТаблицыМакета.Значение <> ЗначениеПараметра Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("Значение параметра %1: ожидали <%2>, получили <%3>;",ДопПараметры.ТекстСообщенийПользователю);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПараметра); 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ЗначениеПараметра); 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",СтрокаТаблицыМакета.Значение); 
				МассивРасхождений.Добавить(ТекстСообщения);
			КонецЕсли;	 
		ИначеЕсли ТипСравнения = "подстрока" Тогда
			Если Найти(СтрокаТаблицыМакета.Значение,ЗначениеПараметра) = 0 Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("Значение параметра %1: ожидали подстроку <%2>, в <%3>;",ДопПараметры.ТекстСообщенийПользователю);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПараметра); 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ЗначениеПараметра); 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",СтрокаТаблицыМакета.Значение); 
				МассивРасхождений.Добавить(ТекстСообщения);
			КонецЕсли;	 
		Иначе
			ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("Не ожиданное значение у переменной ТипСравнения: <%1>",ДопПараметры.ТекстСообщенийПользователю);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТипСравнения);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРасхождений;
КонецФункции



&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьВОднострочныйТекст(ИсходныйТекст)

	ПолучившийсяТекст = ИсходныйТекст;
	
	Если СтрЧислоСтрок(ПолучившийсяТекст) > 1 Тогда
		ПолучившийсяТекст = СтрЗаменить(ПолучившийсяТекст, Символы.ВК + Символы.ПС, " ");
	КонецЕсли;
	
	Возврат ПолучившийсяТекст;

КонецФункции 

&НаСервереБезКонтекста
Функция ПараметрыИзФайлаМакета(Знач Макет)
	ПараметрыМакета = Новый Соответствие;
	
	Для Каждого Область Из Макет.Области Цикл
		Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			ИмяПараметра = Область.Имя;
			ЗначениеПараметра = ПреобразоватьВОднострочныйТекст(СтрЗаменить(Область.Текст, Символы.НПП, " "));
			
			ПараметрыМакета.Вставить(ИмяПараметра, ЗначениеПараметра);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыМакета;

КонецФункции

&НаКлиенте
Функция ПолучитьРасхожденияТДRegExp(Макет, ТабПарам)
	
	ПараметрыМакета = ПараметрыИзФайлаМакета(Макет);
	
	ЦветЯчейки = WebЦвета.Аквамарин;
	
	МассивРасхождений = Новый Массив;
	Для Каждого СтрокаОжидаемая Из ТабПарам Цикл
		ИмяПараметра = СтрокаОжидаемая.Кол1;
		ЗначениеПараметра = СтрЗаменить(СтрокаОжидаемая.Кол2, Символы.НПП, " ");
		ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра,"\n",Символы.ПС);
		
		ЗначениеПараметраМакета = ПараметрыМакета[ИмяПараметра];
		Если ЗначениеПараметраМакета = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("%1 не найден;");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПараметра); 
			Макет.Область(СтрокаОжидаемая.Кол1).ЦветФона = ЦветЯчейки;
			МассивРасхождений.Добавить(ТекстСообщения);
		ИначеЕсли Не Ванесса.СтрокаСоответствуетШаблону(ЗначениеПараметраМакета, ЗначениеПараметра) Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Значение параметра %1: ожидали <%2>, получили <%3>;");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПараметра); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ЗначениеПараметра); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ЗначениеПараметраМакета); 
			Макет.Область(СтрокаОжидаемая.Кол1).ЦветФона = ЦветЯчейки;
			МассивРасхождений.Добавить(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРасхождений;

КонецФункции


&НаКлиенте
//И Табличный документ "ИмяТабДок" содержит в себе значения
//@ТабличныйДокументСодержитЗначенияОбластей(Парам01,ТабПарам)
Функция ТабличныйДокументСодержитЗначенияОбластей(ИмяЭлементаФормы,ТабПарам) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ПолучатьИменаОбластей",Истина);
	
	ЭлементТД = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлементаФормы,Истина, Истина, Тип("ТестируемоеПолеФормы"));
	ТабДок    = Ванесса.ПолучитьТабличныйДокументTestClient(ЭлементТД,ДопПараметры);	
	
	ДопПараметры.Вставить("ТекстСообщенийПользователю",Ванесса.ДанныеПереводаСообщенийПользователю());
	МассивРасхождений = ПолучитьРасхожденияТД(ТабДок, ТабПарам,"точный",ДопПараметры);
	
	Если МассивРасхождений.Количество() > 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ошибка при поиске значений в макете %1:");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлементаФормы); 
		МассивРасхождений.Вставить(0, ТекстСообщения);
		ТекстСообщения = Вычислить("СтрСоединить(МассивРасхождений, Символы.ПС)");
		Ванесса.ПрикрепитьМакетКСценарию(ТабДок,Ванесса.Локализовать("ТекущееЗначениеТаблицы"));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
//И Табличный документ "ИмяТабДок" содержит строки в областях
//@ТабличныйДокументСодержитСтрокиВОбластях(Парам01,ТабПарам)
Функция ТабличныйДокументСодержитСтрокиВОбластях(ИмяЭлементаФормы,ТабПарам) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ПолучатьИменаОбластей",Истина);
	
	ЭлементТД = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлементаФормы,Истина, Истина, Тип("ТестируемоеПолеФормы"));
	ТабДок    = Ванесса.ПолучитьТабличныйДокументTestClient(ЭлементТД,ДопПараметры);	
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекстСообщенийПользователю",Ванесса.ДанныеПереводаСообщенийПользователю());
	МассивРасхождений = ПолучитьРасхожденияТД(ТабДок, ТабПарам,"подстрока",ДопПараметры);
	
	Если МассивРасхождений.Количество() > 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ошибка при поиске значений в макете %1:");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлементаФормы); 
		МассивРасхождений.Вставить(0, ТекстСообщения);
		ТекстСообщения = Вычислить("СтрСоединить(МассивРасхождений, Символы.ПС)");
		Ванесса.ПрикрепитьМакетКСценарию(ТабДок,Ванесса.Локализовать("ТекущееЗначениеТаблицы"));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецФункции


&НаСервереБезконтекста
Функция ПроверитьВхождениеСтрокВТабличныйДокументСервер(ТабДок,МассивДляПоиска,ЗначенияВходят,ДопПараметры)
	
	МассивОшибок           = Новый Массив;
	МассивНенайденныхСтрок = Новый Массив;
	
	
	Для Каждого СтрокаПоиска Из МассивДляПоиска Цикл
		Область = ТабДок.НайтиТекст(СтрокаПоиска);
		
		Если Область = Неопределено  и ЗначенияВходят Тогда
			МассивОшибок.Добавить(СтрокаПоиска);
		КонецЕсли;	 
		
		Если  НЕ ЗначенияВходят Тогда
			Если Область = Неопределено  Тогда
				МассивНенайденныхСтрок.Добавить(СтрокаПоиска);
			Иначе	
				МассивОшибок.Добавить(СтрокаПоиска);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	
	
	Если ЗначенияВходят Тогда
		Если МассивОшибок.Количество() > 0 Тогда
			СтрокаИсключения = "";
			Для Каждого Элем Из МассивОшибок Цикл
				СтрокаИсключения = СтрокаИсключения + Элем + ";";
			КонецЦикла;	
			ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("Табличный документ не содержит нужные строки <%1>",ДопПараметры.ТекстСообщенийПользователю);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаИсключения);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	Иначе	
		Если МассивНенайденныхСтрок.Количество() <>  МассивДляПоиска.Количество() Тогда  
			СтрокаИсключения = "";
			Для Каждого Элем Из МассивОшибок Цикл
				СтрокаИсключения = СтрокаИсключения + Элем + ";";
			КонецЦикла;	
			ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("Табличный документ содержит ненужные строки <%1>",ДопПараметры.ТекстСообщенийПользователю);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаИсключения);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	//УдалитьФайлы(ИмяВременногоФайла);
КонецФункции

&НаКлиенте
//И табличный документ формы с именем "РеквизитТабличныйДокумент" содержит элементы:
//@ТабличныйДокументСодержитЗначения(Парам01,ТабПарам)
Функция ТабличныйДокументСодержитЗначения(ИмяЭлементаФормыИлиФайла,ТабПарам,ЗначенияВходят = Истина) Экспорт
	
	ЭтоФайл = Ложь;
	Если Найти(ИмяЭлементаФормыИлиФайла, "/") > 0 ИЛИ Найти(ИмяЭлементаФормыИлиФайла, "\") > 0 Тогда
		Если Ванесса.ФайлСуществуетКомандаСистемы(ИмяЭлементаФормыИлиФайла) Тогда
			ЭтоФайл = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ИмяВременногоФайла = "";
	Если ЭтоФайл Тогда
		Файл = Новый Файл(ИмяЭлементаФормыИлиФайла); 
		ТабДок = Ванесса.ПолучитьМакетИзФайла(ИмяЭлементаФормыИлиФайла, Файл.Расширение);
	Иначе	
		ТабДок = ТабличныйДокументИзTestClient(ИмяВременногоФайла,ИмяЭлементаФормыИлиФайла);
	КонецЕсли;	 
	
	МассивДляПоиска = Новый Массив;
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		МассивДляПоиска.Добавить(СтрокаТабПарам.Кол1);
	КонецЦикла;	
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекстСообщенийПользователю",Ванесса.ДанныеПереводаСообщенийПользователю());
	ПроверитьВхождениеСтрокВТабличныйДокументСервер(ТабДок,МассивДляПоиска,ЗначенияВходят,ДопПараметры);
	
	Если ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		Ванесса.УдалитьФайлыКомандаСистемы(ИмяВременногоФайла);
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И табличный документ формы с именем "РеквизитТабличныйДокумент" не содержит элементы:
//@ТабличныйДокументНеСодержитЗначения(Парам01,ТабПарам)
Функция ТабличныйДокументНеСодержитЗначения(ИмяЭлементаФормы,ТабПарам) Экспорт
	ТабличныйДокументСодержитЗначения(ИмяЭлементаФормы,ТабПарам,Ложь);
КонецФункции

&НаКлиенте
//И Табличный документ "РеквизитТабличныйДокумент" содержит в себе значения по шаблону
//@ТабличныйДокументСодержитЗначенияОбластейПоШаблону(Парам01,ТабПарам)
Функция ТабличныйДокументСодержитЗначенияОбластейПоШаблону(ИмяЭлементаФормы,ТабПарам) Экспорт
	ЭлементТД = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлементаФормы,Истина, Истина, Тип("ТестируемоеПолеФормы"));
	Если ЭлементТД = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Элемент формы <%1> не найден.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлементаФормы);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ПолучатьИменаОбластей",Истина);
	ТабДок    = Ванесса.ПолучитьТабличныйДокументTestClient(ЭлементТД,ДопПараметры);	
	
	МассивРасхождений = ПолучитьРасхожденияТДRegExp(ТабДок, ТабПарам);
	
	Если МассивРасхождений.Количество() > 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ошибка при поиске значений в макете %1:");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлементаФормы); 
		МассивРасхождений.Вставить(0, ТекстСообщения);
		ТекстСообщения = Вычислить("СтрСоединить(МассивРасхождений, Символы.ПС)");
		Ванесса.ПрикрепитьМакетКСценарию(ТабДок,Ванесса.Локализовать("ТекущееЗначениеТаблицы"));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецФункции





&НаСервереБезконтекста
Функция ПолучитьРядКолонкуИзИмениЯчейки(Стр,Ряд,Колонка)
	Поз     = Найти(Стр,"C");
	Ряд     = Число(Сред(Лев(Стр,Поз-1),2));
	Колонка = Число(Сред(Стр,Поз+1));
КонецФункции

&НаСервереБезконтекста
Функция ПроверитьЗначениеКолонкиНаЗначениеСтроки(ТабДок,ИмяКолонки,Значение,ПроверятьРавенство,ДопПараметры)
	
	ОбластьКолонка = ТабДок.НайтиТекст(ИмяКолонки);
	Если ОбластьКолонка = Неопределено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("В табличном документе колонка <%1> не найдена.",ДопПараметры.ТекстСообщенийПользователю);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКолонки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Ряд     = -1;
	Колонка =  -1;
	ПолучитьРядКолонкуИзИмениЯчейки(ОбластьКолонка.Имя,Ряд,Колонка);
	
	Для Ккк = Ряд+1 По ТабДок.ВысотаТаблицы Цикл
		ТекстОбласти = ТабДок.Область(Ккк,Колонка,Ккк,Колонка).Текст;
		Если ПроверятьРавенство Тогда
			Если ТекстОбласти <> Значение Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("В табличном документе в колонке <%1> ожидали значение <%2>, а нашли <%3>. Ряд <%4>, колонка <%5>",ДопПараметры.ТекстСообщенийПользователю);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКолонки);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Значение);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ТекстОбласти);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",Ккк);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",Колонка);
				ВызватьИсключение ПолучитьТекстСообщенияПользователюСервер(ТекстСообщения,ДопПараметры.ТекстСообщенийПользователю);
			КонецЕсли;	 
		Иначе	
			Если ТекстОбласти = Значение Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("В табличном документе в колонке <%1> ожидали, что не будет значения <%2>, а нашли <%3>. Ряд <%4>, колонка <%5>",ДопПараметры.ТекстСообщенийПользователю);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКолонки);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Значение);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ТекстОбласти);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",Ккк);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",Колонка);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;	
	
	//УдалитьФайлы(ИмяВременногоФайла);
КонецФункции


&НаСервереБезконтекста
Функция ПолучитьЧислоИзТекстаОбласти(Знач Стр)
	Стр = СтрЗаменить(Стр,Символы.НПП,"");
	Стр = СтрЗаменить(Стр,",",".");
	
	Возврат Число(Стр);
КонецФункции	

&НаСервереБезконтекста
Функция ПроверитьЗначениеКолонкиНаЗначениеУсловия(ТабДок,ИмяКолонки,ВидСравнения,Значение,ДопПараметры);
	ОбластьКолонка = ТабДок.НайтиТекст(ИмяКолонки);
	Если ОбластьКолонка = Неопределено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("В табличном документе колонка <%1> не найдена.",ДопПараметры.ТекстСообщенийПользователю);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКолонки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Ряд     = -1;
	Колонка =  -1;
	ПолучитьРядКолонкуИзИмениЯчейки(ОбластьКолонка.Имя,Ряд,Колонка);
	
	Для Ккк = Ряд+1 По ТабДок.ВысотаТаблицы Цикл
		ТекстОбласти = ТабДок.Область(Ккк,Колонка,Ккк,Колонка).Текст;
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			ТекстОбласти = ПолучитьЧислоИзТекстаОбласти(ТекстОбласти);
		КонецЕсли;	 
		
		ЗначениеСравнения = Неопределено;
		Выражение = "ЗначениеСравнения = (ТекстОбласти " + ВидСравнения + " Значение)";
		Выполнить(Выражение);
		
		Если НЕ ЗначениеСравнения Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователюСервер("В табличном документе в колонке <%1> значение не соответствует условию 'Значение в колонке %2 %3'. Текущее значение колонки <%4>. Ряд <%5>, колонка <%6>",ДопПараметры.ТекстСообщенийПользователю);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКолонки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ВидСравнения);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Значение);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ТекстОбласти);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",Ккк);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%6",Колонка);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
	КонецЦикла;	
КонецФункции




&НаКлиенте
//И в табличном документе "РеквизитТабличныйДокумент" значения в колонке "ИмяКолонки" равно значению ""
//@ВТабличномДокументеЗначенияВКолонкеРавноЗначению(Парам01,Парам02,Парам03)
Функция ВТабличномДокументеЗначенияВКолонкеРавноЗначению(ИмяЭлементаФормы,ИмяКолонки,Значение,ПроверятьРавенство = Истина) Экспорт
	ИмяВременногоФайла = "";
	ТабДок = ТабличныйДокументИзTestClient(ИмяВременногоФайла,ИмяЭлементаФормы);
	
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекстСообщенийПользователю",Ванесса.ДанныеПереводаСообщенийПользователю());
	
	Попытка
		ПроверитьЗначениеКолонкиНаЗначениеСтроки(ТабДок,ИмяКолонки,Значение,ПроверятьРавенство,ДопПараметры);
	Исключение
		Ванесса.ПрикрепитьМакетКСценарию(ТабДок,Ванесса.Локализовать("ТекущееЗначениеОтчета"));
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;

	
	Если ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		Ванесса.УдалитьФайлыКомандаСистемы(ИмяВременногоФайла);
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И в табличном документе "РеквизитТабличныйДокумент" значения в колонке "ИмяКолонки" неравно значению ""
//@ВТабличномДокументеЗначенияВКолонкеНеравноЗначению(Парам01,Парам02,Парам03)
Функция ВТабличномДокументеЗначенияВКолонкеНеравноЗначению(ИмяЭлементаФормы,ИмяКолонки,Значение) Экспорт
	ВТабличномДокументеЗначенияВКолонкеРавноЗначению(ИмяЭлементаФормы,ИмяКолонки,Значение,Ложь);
КонецФункции

&НаКлиенте
//И в табличном документе "РеквизитТабличныйДокумент" значения в колонке "ИмяКолонки" соответствуют условию  "равно"  10
//@ВТабличномДокументеЗначенияВКолонкеСоответствуютУсловию(Парам01,Парам02,Парам03,Парам04)
Функция ВТабличномДокументеЗначенияВКолонкеСоответствуютУсловию(ИмяЭлементаФормы,ИмяКолонки,ВидСравнения,Значение) Экспорт
	ИмяВременногоФайла = "";
	ТабДок = ТабличныйДокументИзTestClient(ИмяВременногоФайла,ИмяЭлементаФормы);
	
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекстСообщенийПользователю",Ванесса.ДанныеПереводаСообщенийПользователю());
	
	
	НужныйВидСравнения = Ванесса.ПолучитьОператорПоТексту(ВидСравнения);
	Попытка
		ПроверитьЗначениеКолонкиНаЗначениеУсловия(ТабДок,ИмяКолонки,НужныйВидСравнения,Значение,ДопПараметры);
	Исключение
		Ванесса.ПрикрепитьМакетКСценарию(ТабДок,Ванесса.Локализовать("ТекущееЗначениеОтчета"));
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;

	
	Если ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		Ванесса.УдалитьФайлыКомандаСистемы(ИмяВременногоФайла);
	КонецЕсли;	 
КонецФункции




&НаКлиенте
//И в поле "СгенерированныйXML" я ввожу текст из макета "Xml1"
//@ВПолеЯВвожуТекстИзМакета(Парам01,Парам02)
Функция ВПолеЯВвожуТекстИзМакета(ИмяПоля,ИмяМакета, ИскатьПоИмени = Ложь) Экспорт
	Макет = ПолучитьМакетИзОбработкиИлиИзКаталогаПроекта(ИмяМакета);
	Текст = Макет.ПолучитьТекст();
	
	ВОткрытойФормеВПолеЯВвожуТекст(ИмяПоля, Текст, ИскатьПоИмени);
КонецФункции

&НаКлиенте
//И в поле с именем "СгенерированныйXML" я ввожу текст из макета "Xml1"
//@ВПолеСИменемЯВвожуТекстИзМакета(Парам01,Парам02)
Функция ВПолеСИменемЯВвожуТекстИзМакета(ИмяПоля,ИмяМакета) Экспорт
	ВПолеЯВвожуТекстИзМакета(ИмяПоля,ИмяМакета, Истина);
КонецФункции


&НаКлиенте
//И в поле "Заголовок поля" я ввожу текст из файла "ИмяФайла"
//@ВПолеЯВвожуТекстИзФайла(Парам01,Парам02)
Функция ВПолеЯВвожуТекстИзФайла(ИмяРеквизита,ИмяФайла,ИскатьПоИмени = Ложь) Экспорт
	ПолноеИмяФайла = Ванесса.НайтиФайлСвязанныйСТестами(ИмяФайла);
	
	Если ПолноеИмяФайла = Неопределено Тогда
		ТекстИсключения = "Файл <%1> не найден.";
		ТекстИсключения = СтрЗаменить(ТекстИсключения,"%1",ИмяФайла);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;	
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПолноеИмяФайла,"UTF-8");
	Стр = Текст.Прочитать();
	Текст.Закрыть();
	
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени);	
	Ванесса.ВвестиВПолеТекст(ПолеРеквизит,Стр);
	
КонецФункции

&НаКлиенте
//И в поле с именем "ИмяПоля" я ввожу текст из файла "ИмяФайла"
//@ВПолеСИменемЯВвожуТекстИзФайла(Парам01,Парам02)
Функция ВПолеСИменемЯВвожуТекстИзФайла(ИмяПоля,ИмяФайла) Экспорт
	ВПолеЯВвожуТекстИзФайла(ИмяПоля,ИмяФайла,Истина);
КонецФункции

&НаКлиенте
//И я запоминаю содержимое файла "ИмяФайла" в переменную "ИмяПеременной"
//@ЯЗапоминаюСодержимоеФайлаВПеременную(Парам01,Парам02)
Функция ЯЗапоминаюСодержимоеФайлаВПеременную(ИмяФайла,ИмяПеременной, Кодировка = Неопределено) Экспорт
	ПолноеИмяФайла = Ванесса.НайтиФайлСвязанныйСТестами(ИмяФайла);
	Если ПолноеИмяФайла = Неопределено Тогда
		ТекстИсключения = "Файл <%1> не найден.";
		ТекстИсключения = СтрЗаменить(ТекстИсключения,"%1",ИмяФайла);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если Кодировка = Неопределено Тогда
		Кодировка = "UTF-8";
	КонецЕсли;	 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПолноеИмяФайла,Кодировка,,, Ложь);
	Стр = Текст.Прочитать();
	Текст.Закрыть();
	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной,Стр);
КонецФункции


&НаКлиенте
Функция ОбработчикОжиданияЯЖдуЧтоПолеПерестанетБытьПустымВТеченииСекунд()
	ИмяОбработчика = "ОбработчикОжиданияЯЖдуЧтоПолеПерестанетБытьПустымВТеченииСекунд";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВызыватьИсключение",Ложь);
	
	ТекущееЗначение = Неопределено;
	Попытка
		ТекущееЗначение = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяПоляОбработкаОжидания,ИскатьПоИмениОбрабткаОжидания,ДопПараметры);
	Исключение
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ТекущееЗначение) Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат Неопределено;
	КонецЕсли; 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд, что поле <%2> будет заполненным.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоляОбработкаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
//И я жду, что поле "СгенерированныйСценарий" перестанет быть пустым в течении 30 секунд
//@ЯЖдуЧтоПолеПерестанетБытьПустымВТеченииСекунд(Парам01,Парам02)
Функция ЯЖдуЧтоПолеПерестанетБытьПустымВТеченииСекунд(ИмяПоля,КоличествоСекунд,ИскатьПоИмени = Ложь) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВызыватьИсключение",Ложь);
	
	ТекущееЗначение = Неопределено;
	Попытка
		ТекущееЗначение = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяПоля,ИскатьПоИмени,ДопПараметры);
		Если ЗначениеЗаполнено(ТекущееЗначение) Тогда
			//значит получилось определить значение поля до таймера
			Возврат Неопределено;
		КонецЕсли; 
	Исключение
		ТекущееЗначение = Неопределено;
	КонецПопытки;
	
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = ИмяПоля;
	ИскатьПоИмениОбрабткаОжидания     = ИскатьПоИмени;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияЯЖдуЧтоПолеПерестанетБытьПустымВТеченииСекунд",1,Ложь);
КонецФункции

&НаКлиенте
//И я жду, что поле "СгенерированныйСценарий" перестанет быть пустым в течение 30 секунд
//@ЯЖдуЧтоПолеПерестанетБытьПустымВТечениеСекунд(Парам01,Парам02)
Функция ЯЖдуЧтоПолеПерестанетБытьПустымВТечениеСекунд(ИмяПоля,КоличествоСекунд,ИскатьПоИмени = Ложь) Экспорт
	ЯЖдуЧтоПолеПерестанетБытьПустымВТеченииСекунд(ИмяПоля,КоличествоСекунд,ИскатьПоИмени);
КонецФункции

&НаКлиенте
//И я жду, что поле с именем "СгенерированныйСценарий" перестанет быть пустым в течение 30 секунд
//@ЯЖдуЧтоПолеСИменемПерестанетБытьПустымВТечениеСекунд(Парам01,Парам02)
Функция ЯЖдуЧтоПолеСИменемПерестанетБытьПустымВТечениеСекунд(ИмяПоля,КоличествоСекунд) Экспорт
	ЯЖдуЧтоПолеПерестанетБытьПустымВТеченииСекунд(ИмяПоля,КоличествоСекунд,Истина);
КонецФункции


&НаКлиенте
//И значение поля "СгенерированныйСценарий" равно значению из макета "Xml_1En"
//@ЗначениеПоляРавноЗначениюИзМакета(Парам01,Парам02)
Функция ЗначениеПоляРавноЗначениюИзМакета(ИмяПоля,ИмяМакета,ИскатьПоИмени = Ложь) Экспорт
	ТекущееЗначение = СокрЛП(Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяПоля,ИскатьПоИмени));
	Макет = ПолучитьМакетИзОбработкиИлиИзКаталогаПроекта(ИмяМакета);
	Текст = СокрЛП(Макет.ПолучитьТекст());
	Если НРег(ТекущееЗначение) <> НРег(Текст) Тогда
		ТекстИсключения = "Ожидали что значение поля <" + ИмяПоля + "> будет равно содержимому макета <" + ИмяМакета + ">.";
		ТекстИсключения = ТекстИсключения + Символы.ПС + "Значение поля=" + Символы.ПС + ТекущееЗначение + Символы.ПС + "Значение макета=" + Символы.ПС + Текст;
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И значение поля с именем "СгенерированныйСценарий" равно значению из макета "Xml_1En"
//@ЗначениеПоляСИменемРавноЗначениюИзМакета(Парам01,Парам02)
Функция ЗначениеПоляСИменемРавноЗначениюИзМакета(ИмяПоля,ИмяМакета) Экспорт
	ЗначениеПоляРавноЗначениюИзМакета(ИмяПоля, ИмяМакета, Истина);
КонецФункции




&НаКлиенте
//И у группы страниц "ГруппаСтраниц" текущая страница "ТекущаяСтраница"
//@УГруппыСтраницТекущаяСтраница(Парам01,Парам02)
Функция УГруппыСтраницТекущаяСтраница(ГруппаСтраниц,ТекущаяСтраница) Экспорт
	ТипПоля      = Тип("ТестируемаяГруппаФормы");
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ГруппаСтраниц,Истина, Истина, ТипПоля);
	Страница     = ПолеРеквизит.ПолучитьТекущуюСтраницу();
	
	Если НРег(Страница.Имя) <> НРег(ТекущаяСтраница) Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что у группы <%1> текущей страницей будет <%2>, а оказалась <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ГруппаСтраниц);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТекущаяСтраница);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Страница.Имя);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции





&НаКлиенте
Функция ОбработчикОжиданияЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТеченииСекунд()
	ИмяОбработчика = "ОбработчикОжиданияЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТеченииСекунд";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	ТекущееЗначение = Неопределено;
	ТипПоля         = Тип("ТестируемаяГруппаФормы");
	Попытка
		ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоляОбработкаОжидания,Истина, Истина, ТипПоля);
	Исключение
		ПолеРеквизит = Неопределено;
	КонецПопытки;
	
	Попытка
		Страница = ПолеРеквизит.ПолучитьТекущуюСтраницу();
	Исключение
		Страница = Неопределено;
	КонецПопытки;
	
	Если Страница <> Неопределено И НРег(Страница.Имя) = НРег(ТекущаяСтраницаОбработкаОжидания) Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что у группы <%1> текущей страницей будет <%2>, а оказалась <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПоляОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТекущаяСтраницаОбработкаОжидания);
		
		Попытка
			ИмяСтраницы = Страница.Имя;
		Исключение
			ИмяСтраницы = Неопределено;
		КонецПопытки;
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3", ИмяСтраницы);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
//И я жду, что у группы страниц ""ГруппаСтраниц"" текущей страницей станет ""ИмяСтраницы"" в течении 20 секунд
//@ЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТеченииСекунд(Парам01,Парам02,Парам03)
Функция ЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТеченииСекунд(ГруппаСтраниц,ТекущаяСтраница,КоличествоСекунд) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = ГруппаСтраниц;
	ИскатьПоИмениОбрабткаОжидания     = Истина;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ТекущаяСтраницаОбработкаОжидания  = ТекущаяСтраница;
	ПодключитьОбработчикОжидания("ОбработчикОжиданияЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТеченииСекунд",1,Ложь);
КонецФункции

&НаКлиенте
//И я жду, что у группы страниц ""ГруппаСтраниц"" текущей страницей станет ""ИмяСтраницы"" в течение 20 секунд
//@ЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТечениеСекунд(Парам01,Парам02,Парам03)
Функция ЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТечениеСекунд(ГруппаСтраниц,ТекущаяСтраница,КоличествоСекунд) Экспорт
	ЯЖдуЧтоУГруппыСтраницТекущейСтраницейСтанетВТеченииСекунд(ГруппаСтраниц,ТекущаяСтраница,КоличествоСекунд);
КонецФункции


&НаКлиенте
Функция ТабличныйДокументИзTestClient(ИмяВременногоФайла,ИмяЭлементаФормы)
	ЭлементТД = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлементаФормы,Истина, Истина, Тип("ТестируемоеПолеФормы"));
	Возврат Ванесса.ПолучитьТабличныйДокументTestClient(ЭлементТД);
КонецФункции	


 
&НаКлиенте
//Затем я буду работать с таблицей "ИмяТаблицы"
//@ЯБудуРаботатьСТаблицей(Парам01)
Функция ЯБудуРаботатьСТаблицей(ИмяТаблицы) Экспорт
	Ванесса.ОчиститьКешАктивнойТаблицыTestClient();
	Таблица = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	Ванесса.СохранитьВКешТаблицуTestClient(ИмяТаблицы,Таблица);
КонецФункции



&НаКлиенте
//И в поле "Реквизит число" я увеличиваю значение
//@ВПолеЯУвеличиваюЗначение(Парам01)
Функция ВПолеЯУвеличиваюЗначение(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"));
	ПолеРеквизит.УвеличитьЗначение();
КонецФункции

&НаКлиенте
//И в поле с именем "Реквизит число" я увеличиваю значение
//@ВПолеСИменемЯУвеличиваюЗначение(Парам01)
Функция ВПолеСИменемЯУвеличиваюЗначение(ИмяРеквизита) Экспорт
	ВПолеЯУвеличиваюЗначение(ИмяРеквизита,Истина);
КонецФункции

&НаКлиенте
//И в поле "Реквизит число" я уменьшаю значение
//@ВПолеЯУменьшаюЗначение(Парам01)
Функция ВПолеЯУменьшаюЗначение(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"));
	ПолеРеквизит.УменьшитьЗначение();
КонецФункции

&НаКлиенте
//И в поле с именем "Реквизит число" я уменьшаю значение
//@ВПолеСИменемЯУменьшаюЗначение(Парам01)
Функция ВПолеСИменемЯУменьшаюЗначение(ИмяРеквизита) Экспорт
	ВПолеЯУменьшаюЗначение(ИмяРеквизита,Истина);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" в поле "Реквизит число" я увеличиваю значение
//@ВТаблицеВПолеЯУвеличиваюЗначение(Парам01,Парам02)
Функция ВТаблицеВПолеЯУвеличиваюЗначение(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	Таблица = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Таблица.НайтиОбъект(Тип("ТестируемоеПолеФормы"), ,ИмяРеквизита);
	Иначе	
		ПолеРеквизит = Таблица.НайтиОбъект(Тип("ТестируемоеПолеФормы"), ИмяРеквизита);
	КонецЕсли;	
	
	Если ПолеРеквизит = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Реквизит <%1> не найден.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ПолеРеквизит.УвеличитьЗначение();
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" в поле с именем "РеквизитЧисло" я увеличиваю значение
//@ВТаблицеВПолеСИменемЯУвеличиваюЗначение(Парам01,Парам02)
Функция ВТаблицеВПолеСИменемЯУвеличиваюЗначение(ИмяТЧ,ИмяРеквизита) Экспорт
	ВТаблицеВПолеЯУвеличиваюЗначение(ИмяТЧ,ИмяРеквизита,Истина);
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" в поле "Реквизит число" я уменьшаю значение
//@ВТаблицеВПолеЯУменьшаюЗначение(Парам01,Парам02)
Функция ВТаблицеВПолеЯУменьшаюЗначение(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	Таблица = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	Если ИскатьПоИмени Тогда
		ПолеРеквизит = Таблица.НайтиОбъект(Тип("ТестируемоеПолеФормы"), ,ИмяРеквизита);
	Иначе	
		ПолеРеквизит = Таблица.НайтиОбъект(Тип("ТестируемоеПолеФормы"), ИмяРеквизита);
	КонецЕсли;	
	
	Если ПолеРеквизит = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Реквизит <%1> не найден.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ПолеРеквизит.УменьшитьЗначение();
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" в поле с именем РеквизитЧисло" я уменьшаю значение
//@ВТаблицеВПолеСИменемЯУменьшаюЗначение(Парам01,Парам02)
Функция ВТаблицеВПолеСИменемЯУменьшаюЗначение(ИмяТЧ,ИмяРеквизита) Экспорт
	ВТаблицеВПолеЯУменьшаюЗначение(ИмяТЧ,ИмяРеквизита,Истина);
КонецФункции





&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я перехожу к следующей ячейке
//@ВТаблицеЯПерехожуКСледующейЯчейке(Парам01)
Функция ВТаблицеЯПерехожуКСледующейЯчейке(ИмяТЧ) Экспорт
	Таблица = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	Таблица.ПерейтиКСледующемуЭлементу();
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" я перехожу к предыдущей ячейке
//@ВТаблицеЯПерехожуКПредыдущейЯчейке(Парам01)
Функция ВТаблицеЯПерехожуКПредыдущейЯчейке(ИмяТЧ) Экспорт
	Таблица = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	Таблица.ПерейтиКПредыдущемуЭлементу();
КонецФункции



&НаКлиенте
//И в меню формы я выбираю "ИмяПунктаМеню"
//@ВМенюФормыЯВыбираю(Парам01)
Функция ВМенюФормыЯВыбираю(Знач ИмяПунктаМеню) Экспорт
    АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
    АктивнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
	ИмяПунктаМеню = СтрЗаменить(ИмяПунктаМеню, "\n", Символы.ПС);
	АктивнаяФорма.ВыполнитьВыборИзМеню(ИмяПунктаМеню);
КонецФункции




&НаКлиенте
//И представление элемента "НаименованиеНадписью" стало равно ""
//@ПредставлениеЭлементаСталоРавно(Парам01,Парам02)
Функция ПредставлениеЭлементаСталоРавно(ИмяРеквизита,ПредставлениеЭлемента,ИскатьПоИмени = Ложь) Экспорт
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени);
	ОтображаемыйТекст = ПолеРеквизит.ПолучитьОтображаемыйТекст();
	Если НЕ Ванесса.СтрокиРавны(ОтображаемыйТекст,ПредставлениеЭлемента) Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У поля <%1> ожидали отображаемый текст <%2>, а получили <%3>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПредставлениеЭлемента);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ОтображаемыйТекст);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И представление элемента с именем "НаименованиеНадписью" стало равно ""
//@ПредставлениеЭлементаСИменемСталоРавно(Парам01,Парам02)
Функция ПредставлениеЭлементаСИменемСталоРавно(ИмяРеквизита,ПредставлениеЭлемента) Экспорт
	ПредставлениеЭлементаСталоРавно(ИмяРеквизита,ПредставлениеЭлемента,Истина);
КонецФункции



&НаКлиенте
//И в таблице "ТабличнаяЧасть1" из выпадающего списка "Реквизит быстрый выбор ТЧ" я выбираю точное значение 'Группа1Элем1'
//@ВТаблицеИзВыпадающегоСпискаЯВыбираюТочноеЗначение(Парам01,Парам02,Парам03)
Функция ВТаблицеИзВыпадающегоСпискаЯВыбираюТочноеЗначение(ИмяТЧ,ИмяРеквизита,ВыбираемоеЗначение,ИскатьПоИмени = Ложь) Экспорт
	
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ,,,, ДопПараметры);
			
			Если ИскатьПоИмени Тогда
				ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ, ДопПараметры);
			Иначе	
				ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТЧ,ИмяРеквизита,ИскатьПоИмени,ТЧ, ДопПараметры);
			КонецЕсли;	 
			
			Если ПолеРеквизит = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> не найдено.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			ПроверитьВидимостьПоляПользователю(ПолеРеквизит,ИмяРеквизита);
			ПолеРеквизит.Активизировать();
			
			ВыпадающийСписокОткрыт = Истина;
			Попытка
				ВыпадающийСписокОткрыт = ПолеРеквизит.ВыпадающийСписокОткрыт();
			Исключение
				
			КонецПопытки;
			
			ТаблицаВРежимеРедактирования = ТЧ.ТекущийРежимРедактирование();
			Если Не ТаблицаВРежимеРедактирования Тогда
				ТЧ.ИзменитьСтроку();
			КонецЕсли;	 
			
			Ванесса.ОткрытьВыпадающийСписок(ПолеРеквизит);
			
			Если НЕ ВыпадающийСписокОткрыт Тогда
				ПолеРеквизит.ОткрытьВыпадающийСписок();
			КонецЕсли;	 
			
			ОткрывалиВыпадающийСписок = Ложь;
			
			ПолучилосьВыбрать = Ложь;
			Попытка
				Ванесса.ВыполнитьВыборИзВыпадающегоСписка(ПолеРеквизит, ВыбираемоеЗначение);
				//ПолеРеквизит.ВыполнитьВыборИзВыпадающегоСписка(ВыбираемоеЗначение);
				ПолучилосьВыбрать = Истина;
			Исключение
				
			КонецПопытки;
			
			Если Не ПолучилосьВыбрать Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось сделать выбор в поле <%1> значения <%2>. %3");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ВыбираемоеЗначение);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ОписаниеОшибки());
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И в таблице "ТабличнаяЧасть1" из выпадающего списка с именем "Реквизит быстрый выбор ТЧ" я выбираю точное значение 'Группа1Элем1'
//@ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираюТочноеЗначение(Парам01,Парам02,Парам03)
Функция ВТаблицеИзВыпадающегоСпискаСИменемЯВыбираюТочноеЗначение(ИмяТЧ,ИмяРеквизита,ВыбираемоеЗначение,ИскатьПоИмени = Ложь) Экспорт
	ВТаблицеИзВыпадающегоСпискаЯВыбираюТочноеЗначение(ИмяТЧ,ИмяРеквизита,ВыбираемоеЗначение,Истина);
КонецФункции


&НаКлиенте
//И я фиксирую группу "ИмяГруппы"
//@ЯФиксируюГруппу(Парам01)
Функция ЯФиксируюГруппу(ИмяГруппы, ИскатьПоИмени = Ложь) Экспорт
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	ГруппаПриложения = Неопределено;
	
	Если ИскатьПоИмени Тогда
		ГруппаПриложения = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяГруппаФормы"),, ИмяГруппы);
	Иначе	
		ГруппаПриложения = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяГруппаФормы") ,ИмяГруппы);
	КонецЕсли;	 
	
	Если ГруппаПриложения = Неопределено Тогда
		ТестовоеПриложение = Ванесса.ПолучитьТестовоеПриложение();
		Если ИскатьПоИмени Тогда
			ГруппаПриложения = ТестовоеПриложение.НайтиОбъект(Тип("ТестируемаяГруппаФормы"),, ИмяГруппы);
		Иначе	
			ГруппаПриложения = ТестовоеПриложение.НайтиОбъект(Тип("ТестируемаяГруппаФормы") ,ИмяГруппы);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ГруппаПриложения = Неопределено Тогда
		ТестовоеПриложение = Ванесса.ПолучитьТестовоеПриложение();
		ВсеГруппы = ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемаяГруппаФормы"));
		Для Каждого ТекГруппа Из ВсеГруппы Цикл
			Если ИскатьПоИмени Тогда
				Если НРег(ТекГруппа.ИмяГруппы) = Нрег(ИмяГруппы) Тогда
					ГруппаПриложения = ТекГруппа;
					Прервать;
				КонецЕсли;	 
			Иначе	
				Если НРег(ТекГруппа.ТекстЗаголовка) = Нрег(ИмяГруппы) Тогда
					ГруппаПриложения = ТекГруппа;
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЦикла;	
	КонецЕсли;	 
	
	Если ГруппаПриложения = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Группа <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяГруппы);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Ванесса.ЗафиксироватьФормуГруппуTestClient(ГруппаПриложения);
КонецФункции

&НаКлиенте
//И я фиксирую группу с именем "ИмяГруппы"
//@ЯФиксируюГруппуСИменем(Парам01)
Функция ЯФиксируюГруппуСИменем(ИмяГруппы) Экспорт
	ЯФиксируюГруппу(ИмяГруппы, Истина);
КонецФункции





&НаКлиенте
//И я фиксирую форму "ИмяФормы"
//@ЯФиксируюФорму(Парам01)
Функция ЯФиксируюФорму(ИмяФормы,ИскатьПоИмени = Ложь) Экспорт
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	ФормаПриложения = Неопределено;
	
	Если ИскатьПоИмени Тогда
		ФормаПриложения = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"),,ИмяФормы);
	Иначе	
		ФормаПриложения = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"),ИмяФормы);
	КонецЕсли;	 
	
	Если ФормаПриложения = Неопределено Тогда
		ТестовоеПриложение = Ванесса.ПолучитьТестовоеПриложение();
		Если ИскатьПоИмени Тогда
			ФормаПриложения = ТестовоеПриложение.НайтиОбъект(Тип("ТестируемаяФорма"),,ИмяФормы);
		Иначе	
			ФормаПриложения = ТестовоеПриложение.НайтиОбъект(Тип("ТестируемаяФорма"),ИмяФормы);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ФормаПриложения = Неопределено Тогда
		ТестовоеПриложение = Ванесса.ПолучитьТестовоеПриложение();
		ВсеФормы = ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемаяФорма"));
		Для Каждого ТекФорма Из ВсеФормы Цикл
			Если ИскатьПоИмени Тогда
				Если НРег(ТекФорма.ИмяФормы) = Нрег(ИмяФормы) Тогда
					ФормаПриложения = ТекФорма;
					Прервать;
				КонецЕсли;	 
			Иначе	
				Если НРег(ТекФорма.ТекстЗаголовка) = Нрег(ИмяФормы) Тогда
					ФормаПриложения = ТекФорма;
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЦикла;	
	КонецЕсли;	 
	
	Если ФормаПриложения = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Форма <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФормы);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Ванесса.ЗафиксироватьФормуГруппуTestClient(ФормаПриложения);
КонецФункции

&НаКлиенте
//И я фиксирую форму с именем "ИмяФормы"
//@ЯФиксируюФормуСИменем(Парам01)
Функция ЯФиксируюФормуСИменем(ИмяФормы) Экспорт
	ЯФиксируюФорму(ИмяФормы,Истина);
КонецФункции

&НаКлиенте
//И я отменяю фиксирование формы
//@ЯОтменяюФиксированиеФормы()
Функция ЯОтменяюФиксированиеФормы() Экспорт
	Ванесса.ЗафиксироватьФормуГруппуTestClient(Неопределено);
КонецФункции

&НаКлиенте
//И я отменяю фиксирование группы
//@ЯОтменяюФиксированиеГруппы()
Функция ЯОтменяюФиксированиеГруппы() Экспорт
	Ванесса.ЗафиксироватьФормуГруппуTestClient(Неопределено);
КонецФункции

&НаКлиенте
//И я фиксирую текущую форму
//@ЯФиксируюТекущуюФорму()
Функция ЯФиксируюТекущуюФорму() Экспорт
	Ванесса.ЗафиксироватьФормуГруппуTestClient(Неопределено);
	МассивФорм = НайтиФормыТекущегоОкна();
	
	Если МассивФорм = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить форму текущего окна.");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если МассивФорм.Количество() = 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить форму текущего окна.");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если МассивФорм.Количество() > 1 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У текущего окна найдено %1 форм.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",МассивФорм.Количество()); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ТекФорма = МассивФорм[0];
	
	Ванесса.ЗафиксироватьФормуГруппуTestClient(ТекФорма);
КонецФункции



&НаКлиенте
//И я прикрепляю к сценарию значение таблицы "ИмяТаблицы" как "ИмяЗначения"
//@ЯПрикрепляюКСценариюЗначениеТаблицыКак(Парам01)
Функция ЯПрикрепляюКСценариюЗначениеТаблицыКак(ИмяТаблицы,ИмяЗначения) Экспорт
	ЗначениеТЧ = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяТаблицы,Истина);
	Макет      = Ванесса.ПреобразоватьЗначениеВМакет(ЗначениеТЧ);
	
	Ванесса.ПрикрепитьМакетКСценарию(Макет,ИмяЗначения);
КонецФункции


&НаКлиенте
//И я запоминаю значение текущего поля как "ИмяПеременной"
//@ЯЗапоминаюЗначениеТекущегоПоляКак(Парам01)
Функция ЯЗапоминаюЗначениеТекущегоПоляКак(ИмяПеременной) Экспорт
    АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
    АктивнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
	
	ТекущееПоле = АктивнаяФорма.ПолучитьТекущийЭлемент();
	
	Если ТекущееПоле = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не найден активный элемент формы.");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если ТипЗнч(ТекущееПоле) = Тип("ТестируемаяТаблицаФормы") Тогда
		ЗначениеПоля = ТекущееПоле.ПолучитьТекстЯчейки();
	Иначе	
		ЗначениеПоля = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(ТекущееПоле);
	КонецЕсли;	 
	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной,ЗначениеПоля);
КонецФункции

&НаКлиенте
//И я запоминаю представление текущего поля как "ИмяПеременной"
//@ЯЗапоминаюПредставлениеТекущегоПоляКак(Парам01)
Функция ЯЗапоминаюПредставлениеТекущегоПоляКак(ИмяПеременной) Экспорт
    АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
    АктивнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
	
	ТекущееПоле = АктивнаяФорма.ПолучитьТекущийЭлемент();
	
	Если ТекущееПоле = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не найден активный элемент формы.");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если ТипЗнч(ТекущееПоле) = Тип("ТестируемаяТаблицаФормы") Тогда
		ТекТаблица = ТекущееПоле;
		ИмяТаблицы = ТекущееПоле.Имя;
		ТекущееПоле = ТекущееПоле.ПолучитьТекущийЭлемент();
		Если ТекущееПоле = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не найден активный элемент формы в таблице <%1>.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		Попытка
			ЗначениеПоля = ТекущееПоле.ПолучитьОтображаемыйТекст();
		Исключение
			ЗначениеПоля = ТекТаблица.ПолучитьТекстЯчейки(ТекущееПоле.Имя);
		КонецПопытки;
		
	Иначе	
		ЗначениеПоля = ТекущееПоле.ПолучитьОтображаемыйТекст();
	КонецЕсли;	 
	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной,ЗначениеПоля);
КонецФункции

&НаКлиенте
//И я запоминаю представление элемента формы "Заголовок" как "ИмяПеременной"
//@ЯЗапоминаюПредставлениеЭлементаФормыКак(Парам01,Парам02)
Функция ЯЗапоминаюПредставлениеЭлементаФормыКак(ИмяЭлемента, ИмяПеременной, ИскатьПоИмени = Ложь) Экспорт
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента, ИскатьПоИмени);
	ЗначениеПоля = ЭлементФормы.ПолучитьОтображаемыйТекст();
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной,ЗначениеПоля);
КонецФункции

&НаКлиенте
//И я запоминаю представление элемента формы с именем "ИмяЭлемента" как "ИмяПеременной"
//@ЯЗапоминаюПредставлениеЭлементаФормыСИменемКак(Парам01,Парам02)
Функция ЯЗапоминаюПредставлениеЭлементаФормыСИменемКак(ИмяЭлемента, ИмяПеременной) Экспорт
	ЯЗапоминаюПредставлениеЭлементаФормыКак(ИмяЭлемента, ИмяПеременной, Истина);
КонецФункции


&НаКлиенте
//И я запоминаю заголовок поля с именем "ИмяПоля" как "ИмяПеременной"
//@ЯЗапоминаюЗаголовокПоляСИменемКак(Парам01,Парам02)
Функция ЯЗапоминаюЗаголовокПоляСИменемКак(ИмяПоля, ИмяПеременной) Экспорт
	
    АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	ТекущееПоле = АктивноеОкно.НайтиОбъект(,,ИмяПоля);
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной,ТекущееПоле.ТекстЗаголовка);
	
КонецФункции

&НаКлиенте
//И я запоминаю имя текущего поля как "ИмяПеременной"
//@ЯЗапоминаюИмяТекущегоПоляКак(Парам01)
Функция ЯЗапоминаюИмяТекущегоПоляКак(ИмяПеременной, ЗапоминатьИмя = Истина) Экспорт
    АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
    АктивнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
	
	ТекущееПоле = АктивнаяФорма.ПолучитьТекущийЭлемент();
	
	Если ТекущееПоле = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не найден активный элемент формы.");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если ТипЗнч(ТекущееПоле) = Тип("ТестируемаяТаблицаФормы") Тогда
		ТекущееПолеТаблицы = ТекущееПоле.ПолучитьТекущийЭлемент();
		Если ТекущееПолеТаблицы = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не найдена активная колонка таблицы <%1>.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекущееПоле.Имя);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ТекущееПоле = ТекущееПолеТаблицы;
	КонецЕсли;	 
	
	Если ЗапоминатьИмя Тогда
		Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной,ТекущееПоле.Имя);
	Иначе	
		Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной,ТекущееПоле.ТекстЗаголовка);
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И я запоминаю заголовок текущего поля как "ИмяПеременной"
//@ЯЗапоминаюЗаголовокТекущегоПоляКак(Парам01)
Функция ЯЗапоминаюЗаголовокТекущегоПоляКак(ИмяПеременной, ЗапоминатьИмя = Истина) Экспорт
	ЯЗапоминаюИмяТекущегоПоляКак(ИмяПеременной, Ложь);
КонецФункции 

&НаКлиенте
//И я запоминаю имя текущей таблицы как "ИмяПеременной"
//@ЯЗапоминаюИмяТекущейТаблицыКак(Парам01)
Функция ЯЗапоминаюИмяТекущейТаблицыКак(ИмяПеременной) Экспорт
    АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
    АктивнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
	
	ТекущееПоле = АктивнаяФорма.ПолучитьТекущийЭлемент();
	
	Если ТекущееПоле = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не найден активный элемент формы.");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если ТипЗнч(ТекущееПоле) <> Тип("ТестируемаяТаблицаФормы") Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Текущее поле <%1> не является таблицей.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекущееПоле.Имя);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной,ТекущееПоле.Имя);
КонецФункции

&НаКлиенте
//И я запоминаю имя поля с заголовком "ЗаголовокПоля" и именем "ИмяПоля" как "ИмяПеременной"
//@ЯЗапоминаюИмяПоляСЗаголовкомИИменемКак(Парам01,Парам02,Парам03)
Функция ЯЗапоминаюИмяПоляСЗаголовкомИИменемКак(ЗаголовокПоля,ИмяПоля,ИмяПеременной) Экспорт
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
			Реквизит = АктивноеОкно.НайтиОбъект(,ЗаголовокПоля,ИмяПоля);
			Если Реквизит = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> и именем <%2> не найдено.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ЗаголовокПоля);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоля);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной,Реквизит.Имя);
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И в текущее поле я ввожу текст "ЗначениеПоля"
//@ВТекущееПолеЯВвожуТекст(Парам01)
Функция ВТекущееПолеЯВвожуТекст(ЗначениеПоля) Экспорт
    АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
    АктивнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
	
	ТекущееПоле = АктивнаяФорма.ПолучитьТекущийЭлемент();
	
	Если ТекущееПоле = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не найден активный элемент формы.");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если ТипЗнч(ТекущееПоле) = Тип("ТестируемаяТаблицаФормы") Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Данный шаг не работает с таблицами.");
		ВызватьИсключение ТекстСообщения;
	Иначе
		ВОткрытойФормеВПолеСЗаголовкомЯВвожуТекст(ТекущееПоле.Имя,ЗначениеПоля,Истина);
	КонецЕсли;	
	
КонецФункции



&НаКлиенте
Функция ОбработчикОжиданияВТаблицеУПоляЯЖдуЗначенияВТечениеСекунд()
	ИмяОбработчика = "ОбработчикОжиданияВТаблицеУПоляЯЖдуЗначенияВТечениеСекунд";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	ПредставлениеДанных = Неопределено;
	Попытка
		ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТаблицыОбработкаОжидания);
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Таблица формы с именем <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицыОбработкаОжидания);
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	ТекущаяФорма = Ванесса.НайтиТекущуюФормуTestClient();
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВыполнятьОбновлениеТаблицы", Истина);
	ДопПараметры.Вставить("ФормаРеквизита", ТекущаяФорма);
		
	Попытка
		Ванесса.ОбновитьСодержимоеТестируемойТаблицыФормы(ТЧ, ДопПараметры);
		Если ИскатьПоИмениОбрабткаОжидания Тогда
			ПредставлениеДанных = ТЧ.ПолучитьТекстЯчейки(ИмяПоляОбработкаОжидания);
		Иначе
			ВыделенныеСтроки = ТЧ.ПолучитьВыделенныеСтроки();
			Если ВыделенныеСтроки.Количество() = 0 Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> не найдено ни одной строки");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицыОбработкаОжидания);
				ОтключитьОбработчикОжидания(ИмяОбработчика);
				Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
				Возврат Неопределено;
			КонецЕсли;	 
			
			ЗначениеТекущейСтроки = ВыделенныеСтроки[0];
			ПредставлениеДанных   = ЗначениеТекущейСтроки[ИмяПоляОбработкаОжидания];
			Если ПредставлениеДанных = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> не найдено ячейки с заголовком <%2>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицыОбработкаОжидания);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоляОбработкаОжидания);
				ОтключитьОбработчикОжидания(ИмяОбработчика);
				Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
				Возврат Неопределено;
			КонецЕсли;	 
		КонецЕсли;	 
	Исключение
	КонецПопытки;
	
	СтроковоеПредставление = ПолучитьКорректныйТекстДляВставкиВПоле(ЗначениеОбрабткаОжидания);
	
	Если ВидСравненияОбрабткаОжидания = "=" Тогда
		Если (ПредставлениеДанных <> Неопределено) И (НРег(ПредставлениеДанных) = НРег(СтроковоеПредставление)) Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчика);
			Ванесса.ПродолжитьВыполнениеШагов();
			Возврат Неопределено;
		КонецЕсли;
	Иначе	
		Если (ПредставлениеДанных <> Неопределено) И (НРег(ПредставлениеДанных) <> НРег(СтроковоеПредставление)) Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчика);
			Ванесса.ПродолжитьВыполнениеШагов();
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;	 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Если ВидСравненияОбрабткаОжидания = "=" Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали у таблицы <%1> в течение <%2> секунд у поля <%3> значения <%4>. Текущее значение <%5>.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали у таблицы <%1> в течение <%2> секунд у поля <%3> значения отличного от <%4>. Текущее значение <%5>.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицыОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ИмяПоляОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ЗначениеОбрабткаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",ПредставлениеДанных);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И в таблице "ИмяТаблицы" у элемента "Имя элемента" я жду значения "Значение" в течение 20 секунд
//@ВТаблицеУПоляЯЖдуЗначенияВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)
Функция ВТаблицеУПоляЯЖдуЗначенияВТечениеСекунд(ИмяТаблицы,ИмяПоля,Знач Значение,КоличествоСекунд,ИскатьПоИмени = Ложь,ВидСравнения = "=") Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = ИмяПоля;
	ИмяТаблицыОбработкаОжидания       = ИмяТаблицы;
	ИскатьПоИмениОбрабткаОжидания     = ИскатьПоИмени;
	ЗначениеОбрабткаОжидания          = Значение;
	ВидСравненияОбрабткаОжидания      = ВидСравнения;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияВТаблицеУПоляЯЖдуЗначенияВТечениеСекунд",1,Ложь);
КонецФункции

&НаКлиенте
//И в таблице "ИмяТаблицы" у элемента с именем "Имя элемента" я жду значения "Значение" в течение 20 секунд
//@ВТаблицеУПоляСИменемЯЖдуЗначенияВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)
Функция ВТаблицеУПоляСИменемЯЖдуЗначенияВТечениеСекунд(ИмяТаблицы,ИмяПоля,Значение,КоличествоСекунд) Экспорт
	ВТаблицеУПоляЯЖдуЗначенияВТечениеСекунд(ИмяТаблицы,ИмяПоля,Значение,КоличествоСекунд,Истина);
КонецФункции


&НаКлиенте
//И в таблице "ИмяТаблицы" у поля "Имя элемента" я жду значения отличного от "Значение" в течение 20 секунд
//@ВТаблицеУПоляЯЖдуЗначенияОтличногоОтВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)
Функция ВТаблицеУПоляЯЖдуЗначенияОтличногоОтВТечениеСекунд(ИмяТаблицы,ИмяПоля,Знач Значение,КоличествоСекунд,ИскатьПоИмени = Ложь) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = ИмяПоля;
	ИмяТаблицыОбработкаОжидания       = ИмяТаблицы;
	ИскатьПоИмениОбрабткаОжидания     = ИскатьПоИмени;
	ЗначениеОбрабткаОжидания          = Значение;
	ВидСравненияОбрабткаОжидания      = "<>";
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияВТаблицеУПоляЯЖдуЗначенияВТечениеСекунд",1,Ложь);
КонецФункции

&НаКлиенте
//И в таблице "ИмяТаблицы" у поля с именем "ИмяЭлемента" я жду значения отличного от "Значение" в течение 20 секунд
//@ВТаблицеУПоляСИменемЯЖдуЗначенияОтличногоОтВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)
Функция ВТаблицеУПоляСИменемЯЖдуЗначенияОтличногоОтВТечениеСекунд(ИмяТаблицы,ИмяПоля,Знач Значение,КоличествоСекунд) Экспорт
	ВТаблицеУПоляЯЖдуЗначенияОтличногоОтВТечениеСекунд(ИмяТаблицы,ИмяПоля,Значение,КоличествоСекунд,Истина);
КонецФункции



&НаКлиенте
//Если это web клиент Тогда
//@ЭтоWebКлиентТогда()
Функция ЭтоWebКлиентТогда() Экспорт
	Ванесса.УстановитьРезультатУсловия(Ванесса.ТекущийTestclientЭтоWebКлиент);
КонецФункции

&НаКлиенте
//Если это тонкий клиент тогда
//@ЭтоТонкийКлиентТогда()
Функция ЭтоТонкийКлиентТогда() Экспорт
	Ванесса.УстановитьРезультатУсловия(НЕ Ванесса.ТекущийTestclientЭтоWebКлиент);
КонецФункции





&НаКлиенте
Функция ТекстТекущейЯчейкиТекущейТаблицы(ИмяТЧ,ВызыватьИсключение = Истина)
	ТекущаяФорма = Ванесса.НайтиТекущуюФормуTestClient();
	Если ТекущаяФорма = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Активная форма не найдена");
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстСообщения;
		Иначе
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТекущийЭлементФормы = ТекущаяФорма.ПолучитьТекущийЭлемент();
	Если ТипЗнч(ТекущийЭлементФормы) <> Тип("ТестируемаяТаблицаФормы") Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Типом значения <%1> является <%2>, а ожидался тип <%3>.%4");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1","таблицы");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТипЗнч(ТекущийЭлементФормы));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3","ТестируемаяТаблицаФормы");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4","");
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстСообщения;
		Иначе
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТЧ    = ТекущийЭлементФормы;
	ИмяТЧ = ТекущийЭлементФормы.Имя;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВыполнятьОбновлениеТаблицы", Истина);
	ДопПараметры.Вставить("ФормаРеквизита", ТекущаяФорма);
	
	Попытка
		Ванесса.ОбновитьСодержимоеТестируемойТаблицыФормы(ТЧ, ДопПараметры); 
		ТекстЯчейки = ТЧ.ПолучитьТекстЯчейки();
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> нет строк для выбора.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстСообщения;
		Иначе
			Возврат Неопределено;
		КонецЕсли;	 
	КонецПопытки;
	
	Возврат ТекстЯчейки; 
КонецФункции	 

&НаКлиенте
//И в таблице текущее поле заполнено
//@ВТаблицеТекущееПолеЗаполнено()
Функция ВТаблицеТекущееПолеЗаполнено() Экспорт
	ИмяТЧ                            = Неопределено;
	ТекстТекущейЯчейкиТекущейТаблицы = ТекстТекущейЯчейкиТекущейТаблицы(ИмяТЧ);
	
	Если Не ЗначениеЗаполнено(ТекстТекущейЯчейкиТекущейТаблицы) Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что в таблице <%1> текуще поле будет заполнено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И в таблице текущее поле не заполнено
//@ВТаблицеТекущееПолеНезаполнено()
Функция ВТаблицеТекущееПолеНезаполнено() Экспорт
	ИмяТЧ                            = Неопределено;
	ТекстТекущейЯчейкиТекущейТаблицы = ТекстТекущейЯчейкиТекущейТаблицы(ИмяТЧ);
	
	Если ЗначениеЗаполнено(ТекстТекущейЯчейкиТекущейТаблицы) Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что в таблице <%1> текуще поле будет не заполнено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции


&НаКлиенте
Функция ОбработчикОжиданияЯЖдуЧтоВТаблицеТекущееПолеБудетЗаполненоВТечениеСекунд()
	ИмяОбработчика = "ОбработчикОжиданияЯЖдуЧтоВТаблицеТекущееПолеБудетЗаполненоВТечениеСекунд";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	ИмяТЧ                            = Неопределено;
	ТекстТекущейЯчейкиТекущейТаблицы = ТекстТекущейЯчейкиТекущейТаблицы(ИмяТЧ,Ложь);
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Если ТипПроверкиПоляОбработкаОжидания  = "заполнено" Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали у таблицы <%1> в течение <%2> секунд, что текущее поле будет заполнено.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали у таблицы <%1> в течение <%2> секунд, что текущее поле будет не заполнено.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",КоличествоСекундОбработкаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТекстТекущейЯчейкиТекущейТаблицы = Неопределено Тогда
		//значит пока не получилось получить значение
		Возврат Неопределено; 
	КонецЕсли;	 
	
	Если ТипПроверкиПоляОбработкаОжидания  = "заполнено" Тогда
		Если ЗначениеЗаполнено(ТекстТекущейЯчейкиТекущейТаблицы)  Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчика);
			Ванесса.ПродолжитьВыполнениеШагов();
			Возврат Неопределено;
		КонецЕсли;	 
	ИначеЕсли ТипПроверкиПоляОбработкаОжидания  = "незаполнено" Тогда
		Если НЕ ЗначениеЗаполнено(ТекстТекущейЯчейкиТекущейТаблицы)  Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчика);
			Ванесса.ПродолжитьВыполнениеШагов();
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЕсли;	 
КонецФункции 

&НаКлиенте
//И я жду, что в таблице текущее поле будет заполнено в течение 10 секунд.
//@ЯЖдуЧтоВТаблицеТекущееПолеБудетЗаполненоВТечениеСекунд(Парам01)
Функция ЯЖдуЧтоВТаблицеТекущееПолеБудетЗаполненоВТечениеСекунд(КоличествоСекунд) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ТипПроверкиПоляОбработкаОжидания  = "заполнено";
	ПодключитьОбработчикОжидания("ОбработчикОжиданияЯЖдуЧтоВТаблицеТекущееПолеБудетЗаполненоВТечениеСекунд",1,Ложь);
КонецФункции

&НаКлиенте
//И я жду, что в таблице текущее поле будет не заполнено в течение 10 секунд.
//@ЯЖдуЧтоВТаблицеТекущееПолеБудетНеЗаполненоВТечениеСекунд(Парам01)
Функция ЯЖдуЧтоВТаблицеТекущееПолеБудетНеЗаполненоВТечениеСекунд(КоличествоСекунд) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ТипПроверкиПоляОбработкаОжидания  = "незаполнено";
	ПодключитьОбработчикОжидания("ОбработчикОжиданияЯЖдуЧтоВТаблицеТекущееПолеБудетЗаполненоВТечениеСекунд",1,Ложь);
КонецФункции



&НаКлиенте
//И я устанавливаю максимальное время выполнения действия
//@ЯУстанавливаюМаксимальноеВремяВыполненияДействия()
Функция ЯУстанавливаюМаксимальноеВремяВыполненияДействия(КолСекунд) Экспорт
	Если Не КонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не подключен TestClient.");
	КонецЕсли;	
	
	Если КонтекстСохраняемый.ТестовоеПриложение = Неопределено Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не подключен TestClient.");
	КонецЕсли;	 
	
	КонтекстСохраняемый.ТестовоеПриложение.УстановитьМаксимальноеВремяВыполненияДействия(КолСекунд);
КонецФункции



&НаКлиенте
//И выпадающий список Формы стал равен
//@ВыпадающийСписокФормыСталРавен(Парам01,ТабПарам)
Функция ВыпадающийСписокФормыСталРавен(ТабПарам,ИскатьПоИмени = Ложь, ЭтоУсловие=Ложь, ПоШаблону = Ложь) Экспорт
	
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			
			ТекФорма = ТекущаяФормаИзКлиентаТестирования();
			
			Попытка
				ПредставлениеСпискаВыбора = Ванесса.ДополнитьПредставлениеСпискаВыбора(ТекФорма.ПолучитьПредставлениеСпискаВыбора());
			Исключение
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить представление открытого списка выбора привязанного к форме.");
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			
			Если ПредставлениеСпискаВыбора = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить представление открытого списка выбора привязанного к форме.");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Если ТабПарам.Количество() <> ПредставлениеСпискаВыбора.Количество() Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У списка выбора привязанного к форме ожидалось %1 значений, а было получено %2 значений.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТабПарам.Количество());
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ПредставлениеСпискаВыбора.Количество());
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			МассивРазличий = Новый Массив;
			
			НомСтр = -1;
			Для Каждого СтрокаТабПарам Из ТабПарам Цикл
				НомСтр = НомСтр + 1;
				СтрокаПредставлениеСпискаВыбора = ПредставлениеСпискаВыбора[НомСтр];
				
				Если ПоШаблону Тогда
					Если НЕ Ванесса.СтрокаСоответствуетШаблону(НРег(СокрЛП(СтрокаПредставлениеСпискаВыбора.ОтображаемыйТекст)), НРег(СокрЛП(СтрокаТабПарам.Кол1))) Тогда
						ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось получить %1, а было получено %2.");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаТабПарам.Кол1);
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",СтрокаПредставлениеСпискаВыбора.ОтображаемыйТекст);
						МассивРазличий.Добавить(ТекстСообщения);
					КонецЕсли;	 
				Иначе	
					Если НРег(СокрЛП(СтрокаТабПарам.Кол1)) <> НРег(СокрЛП(СтрокаПредставлениеСпискаВыбора.ОтображаемыйТекст)) Тогда
						ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось получить %1, а было получено %2.");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаТабПарам.Кол1);
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",СтрокаПредставлениеСпискаВыбора.ОтображаемыйТекст);
						МассивРазличий.Добавить(ТекстСообщения);
					КонецЕсли;	 
				КонецЕсли;	
				
			КонецЦикла;	
			
			Если МассивРазличий.Количество() > 0 Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Открытый список выбора формы не равен эталону. Различия: %1");
				
				Стр = Символы.ПС;
				Для Каждого Элем Из МассивРазличий Цикл
					Стр = Стр + Элем + Символы.ПС;
				КонецЦикла;	
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Стр);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если ЭтоУсловие Тогда
		Ванесса.УстановитьРезультатУсловия(НЕ БылаОшибка);
	ИначеЕсли БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И выпадающий список Формы стал равен
//@ВыпадающийСписокФормыСталРавенПоШаблону(Парам01,ТабПарам)
Функция ВыпадающийСписокФормыСталРавенПоШаблону(ТабПарам,ИскатьПоИмени = Ложь, ЭтоУсловие=Ложь) Экспорт
	ВыпадающийСписокФормыСталРавен(ТабПарам,ИскатьПоИмени, ЭтоУсловие, Истина);
КонецФункции

&НаКлиенте
//И выпадающий список "ИмяЭлемента" стал равен
//@ВыпадающийСписокСталРавен(Парам01,ТабПарам)
Функция ВыпадающийСписокСталРавен(ИмяЭлемента,ТабПарам,ИскатьПоИмени = Ложь, ЭтоУсловие=Ложь) Экспорт
	
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"), ДопПараметры);
			
			Попытка
				ПредставлениеСпискаВыбора = Ванесса.ДополнитьПредставлениеСпискаВыбора(ЭлементФормы.ПолучитьПредставлениеСпискаВыбора());
			Исключение
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить представление открытого списка выбора <%1>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			
			Если ПредставлениеСпискаВыбора = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить представление открытого списка выбора <%1>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Если ТабПарам.Количество() <> ПредставлениеСпискаВыбора.Количество() Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У списка выбора <%1> ожидалось %2 значений, а было получено %3 значений.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТабПарам.Количество());
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ПредставлениеСпискаВыбора.Количество());
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			МассивРазличий = Новый Массив;
			
			НомСтр = -1;
			Для Каждого СтрокаТабПарам Из ТабПарам Цикл
				НомСтр = НомСтр + 1;
				СтрокаПредставлениеСпискаВыбора = ПредставлениеСпискаВыбора[НомСтр];
				
				Если НРег(СокрЛП(СтрокаТабПарам.Кол1)) <> НРег(СокрЛП(СтрокаПредставлениеСпискаВыбора.ОтображаемыйТекст)) Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось получить %1, а было получено %2.");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаТабПарам.Кол1);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",СтрокаПредставлениеСпискаВыбора.ОтображаемыйТекст);
					МассивРазличий.Добавить(ТекстСообщения);
				КонецЕсли;	 
				
			КонецЦикла;	
			
			Если МассивРазличий.Количество() > 0 Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Открытый список выбора <%1> не равен эталону. Различия: %2");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				
				Стр = Символы.ПС;
				Для Каждого Элем Из МассивРазличий Цикл
					Стр = Стр + Элем + Символы.ПС;
				КонецЦикла;	
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Стр);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если ЭтоУсловие Тогда
		Ванесса.УстановитьРезультатУсловия(НЕ БылаОшибка);
	ИначеЕсли БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И выпадающий список с именем "ИмяЭлемента" стал равен
//@ВыпадающийСписокСИменемСталРавен(Парам01,ТабПарам)
Функция ВыпадающийСписокСИменемСталРавен(ИмяЭлемента,ТабПарам) Экспорт
	ВыпадающийСписокСталРавен(ИмяЭлемента,ТабПарам,Истина);
КонецФункции

&НаКлиенте
//Если выпадающий список "Реквизит1" содержит значения Тогда
//@ВыпадающийСписокСИменемСодержитЗначения(Парам01,ТабПарам)
Функция ВыпадающийСписокСталРавенТогда(ИмяЭлемента,ТабПарам) Экспорт
	ВыпадающийСписокСталРавен(ИмяЭлемента,ТабПарам,Ложь,Истина);
КонецФункции

&НаКлиенте
//Если выпадающий список с именем "Реквизит1" содержит значения Тогда
//@ВыпадающийСписокСИменемСодержитЗначения(Парам01,ТабПарам)
Функция ВыпадающийСписокСИменемСталРавенТогда(ИмяЭлемента,ТабПарам) Экспорт
	ВыпадающийСписокСталРавен(ИмяЭлемента,ТабПарам,Истина,Истина);
КонецФункции

&НаКлиенте
//И выпадающий список формы содержит значения
//@ВыпадающийСписокФормыСодержитЗначения(ТабПарам)
Функция ВыпадающийСписокФормыСодержитЗначения(ТабПарам,ИскатьПоИмени = Ложь, ЭтоУсловие=Ложь, ПоШаблону = Ложь) Экспорт
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			ТекФорма = ТекущаяФормаИзКлиентаТестирования();
			
			Попытка
				ПредставлениеСпискаВыбора = Ванесса.ДополнитьПредставлениеСпискаВыбора(ТекФорма.ПолучитьПредставлениеСпискаВыбора());
			Исключение
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить представление открытого списка выбора привязанного к форме.");
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			
			Если ПредставлениеСпискаВыбора = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить представление открытого списка выбора привязанного к форме.");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			МассивТекущихЗначений = Новый Массив;
			Для Каждого Элем Из ПредставлениеСпискаВыбора Цикл
				МассивТекущихЗначений.Добавить(СокрЛП(НРег(Элем.ОтображаемыйТекст)));
			КонецЦикла;	
			
			МассивРазличий = Новый Массив;
			
			Если ПоШаблону Тогда
				НомСтр = -1;
				Для Каждого СтрокаТабПарам Из ТабПарам Цикл
					НомСтр = НомСтр + 1;
					
					ЗначениеИзЭталона = СокрЛП(НРег(СтрокаТабПарам.Кол1));
					
					Нашли = Ложь;
					Для Каждого ТекЗнач Из МассивТекущихЗначений Цикл
						Если Ванесса.СтрокаСоответствуетШаблону(ТекЗнач,ЗначениеИзЭталона) Тогда
							Нашли = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если НЕ Нашли Тогда
						Если МассивРазличий.Найти(СтрокаТабПарам.Кол1) = Неопределено Тогда
							МассивРазличий.Добавить(СтрокаТабПарам.Кол1);
						КонецЕсли;	 
					КонецЕсли;	
					
				КонецЦикла;	
			Иначе	
				НомСтр = -1;
				Для Каждого СтрокаТабПарам Из ТабПарам Цикл
					НомСтр = НомСтр + 1;
					
					ЗначениеИзЭталона = СокрЛП(НРег(СтрокаТабПарам.Кол1));
					
					Если МассивТекущихЗначений.Найти(ЗначениеИзЭталона) = Неопределено Тогда
						Если МассивРазличий.Найти(СтрокаТабПарам.Кол1) = Неопределено Тогда
							МассивРазличий.Добавить(СтрокаТабПарам.Кол1);
						КонецЕсли;	 
					КонецЕсли;	 
					
				КонецЦикла;	
			КонецЕсли;	
			
			Если МассивРазличий.Количество() > 0 Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Открытый список выбора привязанный к форме не содержит ожидаемые значения: %1");
				
				Стр = Символы.ПС;
				Для Каждого Элем Из МассивРазличий Цикл
					Стр = Стр + Элем + Символы.ПС;
				КонецЦикла;	
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Стр);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если ЭтоУсловие Тогда
		Ванесса.УстановитьРезультатУсловия(НЕ БылаОшибка);
	ИначеЕсли БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

КонецФункции

&НаКлиенте
//И выпадающий список формы содержит значения
//@ВыпадающийСписокФормыСодержитЗначенияПоШаблону(ТабПарам)
Функция ВыпадающийСписокФормыСодержитЗначенияПоШаблону(ТабПарам,ИскатьПоИмени = Ложь, ЭтоУсловие=Ложь) Экспорт
	ВыпадающийСписокФормыСодержитЗначения(ТабПарам,ИскатьПоИмени, ЭтоУсловие, Истина);
КонецФункции

&НаКлиенте
//И выпадающий список "Реквизит1" содержит значения
//@ВыпадающийСписокСодержитЗначения(Парам01,ТабПарам)
Функция ВыпадающийСписокСодержитЗначения(ИмяЭлемента,ТабПарам,ИскатьПоИмени = Ложь, ЭтоУсловие=Ложь) Экспорт
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"), ДопПараметры);
			
			Попытка
				ПредставлениеСпискаВыбора = Ванесса.ДополнитьПредставлениеСпискаВыбора(ЭлементФормы.ПолучитьПредставлениеСпискаВыбора());
			Исключение
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить представление открытого списка выбора <%1>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			
			Если ПредставлениеСпискаВыбора = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить представление открытого списка выбора <%1>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			
			МассивТекущихЗначений = Новый Массив;
			Для Каждого Элем Из ПредставлениеСпискаВыбора Цикл
				МассивТекущихЗначений.Добавить(СокрЛП(НРег(Элем.ОтображаемыйТекст)));
			КонецЦикла;	
			
			
			МассивРазличий = Новый Массив;
			
			НомСтр = -1;
			Для Каждого СтрокаТабПарам Из ТабПарам Цикл
				НомСтр = НомСтр + 1;
				
				ЗначениеИзЭталона = СокрЛП(НРег(СтрокаТабПарам.Кол1));
				
				Если МассивТекущихЗначений.Найти(ЗначениеИзЭталона) = Неопределено Тогда
					Если МассивРазличий.Найти(СтрокаТабПарам.Кол1) = Неопределено Тогда
						МассивРазличий.Добавить(СтрокаТабПарам.Кол1);
					КонецЕсли;	 
				КонецЕсли;	 
				
			КонецЦикла;	
			
			Если МассивРазличий.Количество() > 0 Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Открытый список выбора <%1> не содержит ожидаемые значения: %2");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				
				Стр = Символы.ПС;
				Для Каждого Элем Из МассивРазличий Цикл
					Стр = Стр + Элем + Символы.ПС;
				КонецЦикла;	
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Стр);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если ЭтоУсловие Тогда
		Ванесса.УстановитьРезультатУсловия(НЕ БылаОшибка);
	ИначеЕсли БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

КонецФункции

&НаКлиенте
//И выпадающий список с именем "Реквизит1" содержит значения
//@ВыпадающийСписокСИменемСодержитЗначения(Парам01,ТабПарам)
Функция ВыпадающийСписокСИменемСодержитЗначения(ИмяЭлемента,ТабПарам) Экспорт
	ВыпадающийСписокСодержитЗначения(ИмяЭлемента,ТабПарам,Истина);
КонецФункции

&НаКлиенте
//Если выпадающий список "Реквизит1" содержит значения Тогда
//@ВыпадающийСписокСИменемСодержитЗначения(Парам01,ТабПарам)
Функция ВыпадающийСписокСодержитЗначенияТогда(ИмяЭлемента,ТабПарам) Экспорт
	ВыпадающийСписокСодержитЗначения(ИмяЭлемента,ТабПарам,Ложь,Истина);
КонецФункции

&НаКлиенте
//Если выпадающий список с именем "Реквизит1" содержит значения Тогда
//@ВыпадающийСписокСИменемСодержитЗначения(Парам01,ТабПарам)
Функция ВыпадающийСписокСИменемСодержитЗначенияТогда(ИмяЭлемента,ТабПарам) Экспорт
	ВыпадающийСписокСодержитЗначения(ИмяЭлемента,ТабПарам,Истина,Истина);
КонецФункции

&НаКлиенте
//И выпадающий список формы не содержит значения
//@ВыпадающийСписокФормыНеСодержитЗначения(ТабПарам)
Функция ВыпадающийСписокФормыНеСодержитЗначения(ТабПарам, ПоШаблону = Ложь) Экспорт
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			
			ТекФорма = ТекущаяФормаИзКлиентаТестирования();
			
			Попытка
				ПредставлениеСпискаВыбора = Ванесса.ДополнитьПредставлениеСпискаВыбора(ТекФорма.ПолучитьПредставлениеСпискаВыбора());
			Исключение
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить представление открытого списка выбора привязанного к форме.");
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			
			Если ПредставлениеСпискаВыбора = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить представление открытого списка выбора привязанного к форме.");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			МассивТекущихЗначений = Новый Массив;
			Для Каждого Элем Из ПредставлениеСпискаВыбора Цикл
				МассивТекущихЗначений.Добавить(СокрЛП(НРег(Элем.ОтображаемыйТекст)));
			КонецЦикла;	
			
			
			МассивРазличий = Новый Массив;
			
			Если ПоШаблону Тогда
				НомСтр = -1;
				Для Каждого СтрокаТабПарам Из ТабПарам Цикл
					НомСтр = НомСтр + 1;
					
					ЗначениеИзЭталона = СокрЛП(НРег(СтрокаТабПарам.Кол1));
					
					Нашли = Ложь;
					Для Каждого ТекЗнач Из МассивТекущихЗначений Цикл
						Если Ванесса.СтрокаСоответствуетШаблону(ТекЗнач,ЗначениеИзЭталона) Тогда
							Нашли = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Нашли Тогда
						Если МассивРазличий.Найти(СтрокаТабПарам.Кол1) = Неопределено Тогда
							МассивРазличий.Добавить(СтрокаТабПарам.Кол1);
						КонецЕсли;	 
					КонецЕсли;	
					
				КонецЦикла;	
			Иначе	
				НомСтр = -1;
				Для Каждого СтрокаТабПарам Из ТабПарам Цикл
					НомСтр = НомСтр + 1;
					
					ЗначениеИзЭталона = СокрЛП(НРег(СтрокаТабПарам.Кол1));
					
					Если МассивТекущихЗначений.Найти(ЗначениеИзЭталона) <> Неопределено Тогда
						Если МассивРазличий.Найти(СтрокаТабПарам.Кол1) = Неопределено Тогда
							МассивРазличий.Добавить(СтрокаТабПарам.Кол1);
						КонецЕсли;	 
					КонецЕсли;	 
					
				КонецЦикла;	
			КонецЕсли;	
			
			Если МассивРазличий.Количество() > 0 Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Открытый список выбора привязанный к форме содержит значения, которых не должно быть: %1");
				
				Стр = Символы.ПС;
				Для Каждого Элем Из МассивРазличий Цикл
					Стр = Стр + Элем + Символы.ПС;
				КонецЦикла;	
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Стр);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	
			
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И выпадающий список формы не содержит значения
//@ВыпадающийСписокФормыНеСодержитЗначенияПоШаблону(ТабПарам)
Функция ВыпадающийСписокФормыНеСодержитЗначенияПоШаблону(ТабПарам) Экспорт
	
	ВыпадающийСписокФормыНеСодержитЗначения(ТабПарам, Истина);
	
КонецФункции

&НаКлиенте
//И выпадающий список "Реквизит1" не содержит значения
//@ВыпадающийСписокНеСодержитЗначения(Парам01,ТабПарам)
Функция ВыпадающийСписокНеСодержитЗначения(ИмяЭлемента,ТабПарам,ИскатьПоИмени = Ложь) Экспорт
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"), ДопПараметры);
			
			Попытка
				ПредставлениеСпискаВыбора = Ванесса.ДополнитьПредставлениеСпискаВыбора(ЭлементФормы.ПолучитьПредставлениеСпискаВыбора());
			Исключение
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить представление открытого списка выбора <%1>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			
			Если ПредставлениеСпискаВыбора = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить представление открытого списка выбора <%1>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			
			МассивТекущихЗначений = Новый Массив;
			Для Каждого Элем Из ПредставлениеСпискаВыбора Цикл
				МассивТекущихЗначений.Добавить(СокрЛП(НРег(Элем.ОтображаемыйТекст)));
			КонецЦикла;	
			
			
			МассивРазличий = Новый Массив;
			
			НомСтр = -1;
			Для Каждого СтрокаТабПарам Из ТабПарам Цикл
				НомСтр = НомСтр + 1;
				
				ЗначениеИзЭталона = СокрЛП(НРег(СтрокаТабПарам.Кол1));
				
				Если МассивТекущихЗначений.Найти(ЗначениеИзЭталона) <> Неопределено Тогда
					Если МассивРазличий.Найти(СтрокаТабПарам.Кол1) = Неопределено Тогда
						МассивРазличий.Добавить(СтрокаТабПарам.Кол1);
					КонецЕсли;	 
				КонецЕсли;	 
				
			КонецЦикла;	
			
			Если МассивРазличий.Количество() > 0 Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Открытый список выбора <%1> содержит значения, которых не должно быть: %2");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				
				Стр = Символы.ПС;
				Для Каждого Элем Из МассивРазличий Цикл
					Стр = Стр + Элем + Символы.ПС;
				КонецЦикла;	
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Стр);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	
			
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И выпадающий список с именем "Реквизит1" не содержит значения
//@ВыпадающийСписокСИменемНеСодержитЗначения(Парам01,ТабПарам)
Функция ВыпадающийСписокСИменемНеСодержитЗначения(ИмяЭлемента,ТабПарам) Экспорт
	ВыпадающийСписокНеСодержитЗначения(ИмяЭлемента,ТабПарам,Истина);
КонецФункции





&НаКлиенте
//И в таблице "ИмяТаблицы" выпадающий список "ИмяЭлемента" стал равен
//@ВТаблицеВыпадающийСписокСталРавен(Парам01,ТабПарам)
Функция ВТаблицеВыпадающийСписокСталРавен(ИмяТаблицы,ИмяЭлемента,ТабПарам,ИскатьПоИмени = Ложь) Экспорт
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			
			ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТаблицы,,,, ДопПараметры);
			Если ИскатьПоИмени Тогда
				ЭлементФормы = Ванесса.НайтиРеквизитТаблицы(ИмяТаблицы,ИмяЭлемента,ИскатьПоИмени,ТЧ, ДопПараметры);
			Иначе	
				ЭлементФормы = Ванесса.НайтиРеквизитТаблицы(ИмяТаблицы,ИмяЭлемента,ИскатьПоИмени,ТЧ, ДопПараметры);
			КонецЕсли;	 
			
			Если ЭлементФормы = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Поле с заголовком <%1> не найдено.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Попытка
				ПредставлениеСпискаВыбора = Ванесса.ДополнитьПредставлениеСпискаВыбора(ЭлементФормы.ПолучитьПредставлениеСпискаВыбора());
			Исключение
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить представление открытого списка выбора <%1>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			
			Если ПредставлениеСпискаВыбора = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить представление открытого списка выбора <%1>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Если ТабПарам.Количество() <> ПредставлениеСпискаВыбора.Количество() Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У списка выбора <%1> ожидалось %2 значений, а было получено %3 значений.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТабПарам.Количество());
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ПредставлениеСпискаВыбора.Количество());
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			МассивРазличий = Новый Массив;
			
			НомСтр = -1;
			Для Каждого СтрокаТабПарам Из ТабПарам Цикл
				НомСтр = НомСтр + 1;
				СтрокаПредставлениеСпискаВыбора = ПредставлениеСпискаВыбора[НомСтр];
				
				Если НРег(СокрЛП(СтрокаТабПарам.Кол1)) <> НРег(СокрЛП(СтрокаПредставлениеСпискаВыбора.ОтображаемыйТекст)) Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось получить %1, а было получено %2.");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаТабПарам.Кол1);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",СтрокаПредставлениеСпискаВыбора.ОтображаемыйТекст);
					МассивРазличий.Добавить(ТекстСообщения);
				КонецЕсли;	 
				
			КонецЦикла;	
			
			Если МассивРазличий.Количество() > 0 Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Открытый список выбора <%1> не равен эталону. Различия: %2");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				
				Стр = Символы.ПС;
				Для Каждого Элем Из МассивРазличий Цикл
					Стр = Стр + Элем + Символы.ПС;
				КонецЦикла;	
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Стр);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И в таблице "ИмяТаблицы" выпадающий список с именем "ИмяЭлемента" стал равен
//@ВТаблицеВыпадающийСписокСИменемСталРавен(Парам01,ТабПарам)
Функция ВТаблицеВыпадающийСписокСИменемСталРавен(ИмяТаблицы,ИмяЭлемента,ТабПарам) Экспорт
	ВТаблицеВыпадающийСписокСталРавен(ИмяТаблицы,ИмяЭлемента,ТабПарам,Истина);
КонецФункции


&НаКлиенте
//И в таблице "ИмяТаблицы" выпадающий список "Реквизит1" содержит значения
//@ВТаблицеВыпадающийСписокСодержитЗначения(Парам01,ТабПарам)
Функция ВТаблицеВыпадающийСписокСодержитЗначения(ИмяТаблицы,ИмяЭлемента,ТабПарам,ИскатьПоИмени = Ложь) Экспорт
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			
			ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТаблицы,,,, ДопПараметры);
			Если ИскатьПоИмени Тогда
				ЭлементФормы = Ванесса.НайтиРеквизитТаблицы(ИмяТаблицы,ИмяЭлемента,ИскатьПоИмени,ТЧ, ДопПараметры);
			Иначе	
				ЭлементФормы = Ванесса.НайтиРеквизитТаблицы(ИмяТаблицы,ИмяЭлемента,ИскатьПоИмени,ТЧ, ДопПараметры);
			КонецЕсли;	 
			
			Попытка
				ПредставлениеСпискаВыбора = Ванесса.ДополнитьПредставлениеСпискаВыбора(ЭлементФормы.ПолучитьПредставлениеСпискаВыбора());
			Исключение
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить представление открытого списка выбора <%1>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			
			Если ПредставлениеСпискаВыбора = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить представление открытого списка выбора <%1>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			
			МассивТекущихЗначений = Новый Массив;
			Для Каждого Элем Из ПредставлениеСпискаВыбора Цикл
				МассивТекущихЗначений.Добавить(СокрЛП(НРег(Элем.ОтображаемыйТекст)));
			КонецЦикла;	
			
			
			МассивРазличий = Новый Массив;
			
			НомСтр = -1;
			Для Каждого СтрокаТабПарам Из ТабПарам Цикл
				НомСтр = НомСтр + 1;
				
				ЗначениеИзЭталона = СокрЛП(НРег(СтрокаТабПарам.Кол1));
				
				Если МассивТекущихЗначений.Найти(ЗначениеИзЭталона) = Неопределено Тогда
					Если МассивРазличий.Найти(СтрокаТабПарам.Кол1) = Неопределено Тогда
						МассивРазличий.Добавить(СтрокаТабПарам.Кол1);
					КонецЕсли;	 
				КонецЕсли;	 
				
			КонецЦикла;	
			
			Если МассивРазличий.Количество() > 0 Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Открытый список выбора <%1> не содержит ожидаемые значения: %2");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				
				Стр = Символы.ПС;
				Для Каждого Элем Из МассивРазличий Цикл
					Стр = Стр + Элем + Символы.ПС;
				КонецЦикла;	
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Стр);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И в таблице "ИмяТаблицы" выпадающий список с именем "Реквизит1" содержит значения
//@ВТаблицеВыпадающийСписокСИменемСодержитЗначения(Парам01,ТабПарам)
Функция ВТаблицеВыпадающийСписокСИменемСодержитЗначения(ИмяТаблицы,ИмяЭлемента,ТабПарам) Экспорт
	ВТаблицеВыпадающийСписокСодержитЗначения(ИмяТаблицы,ИмяЭлемента,ТабПарам,Истина);
КонецФункции


&НаКлиенте
//И в таблице "ИмяТаблицы" выпадающий список "Реквизит1" не содержит значения
//@ВТаблицеВыпадающийСписокНеСодержитЗначения(Парам01,ТабПарам)
Функция ВТаблицеВыпадающийСписокНеСодержитЗначения(ИмяТаблицы,ИмяЭлемента,ТабПарам,ИскатьПоИмени = Ложь) Экспорт
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			
			ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТаблицы,,,, ДопПараметры);
			Если ИскатьПоИмени Тогда
				ЭлементФормы = Ванесса.НайтиРеквизитТаблицы(ИмяТаблицы,ИмяЭлемента,ИскатьПоИмени,ТЧ, ДопПараметры);
			Иначе	
				ЭлементФормы = Ванесса.НайтиРеквизитТаблицы(ИмяТаблицы,ИмяЭлемента,ИскатьПоИмени,ТЧ, ДопПараметры);
			КонецЕсли;	 
			
			Попытка
				ПредставлениеСпискаВыбора = Ванесса.ДополнитьПредставлениеСпискаВыбора(ЭлементФормы.ПолучитьПредставлениеСпискаВыбора());
			Исключение
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить представление открытого списка выбора <%1>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			
			Если ПредставлениеСпискаВыбора = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить представление открытого списка выбора <%1>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			
			МассивТекущихЗначений = Новый Массив;
			Для Каждого Элем Из ПредставлениеСпискаВыбора Цикл
				МассивТекущихЗначений.Добавить(СокрЛП(НРег(Элем.ОтображаемыйТекст)));
			КонецЦикла;	
			
			
			МассивРазличий = Новый Массив;
			
			НомСтр = -1;
			Для Каждого СтрокаТабПарам Из ТабПарам Цикл
				НомСтр = НомСтр + 1;
				
				ЗначениеИзЭталона = СокрЛП(НРег(СтрокаТабПарам.Кол1));
				
				Если МассивТекущихЗначений.Найти(ЗначениеИзЭталона) <> Неопределено Тогда
					Если МассивРазличий.Найти(СтрокаТабПарам.Кол1) = Неопределено Тогда
						МассивРазличий.Добавить(СтрокаТабПарам.Кол1);
					КонецЕсли;	 
				КонецЕсли;	 
				
			КонецЦикла;	
			
			Если МассивРазличий.Количество() > 0 Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Открытый список выбора <%1> содержит значения, которых не должно быть: %2");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				
				Стр = Символы.ПС;
				Для Каждого Элем Из МассивРазличий Цикл
					Стр = Стр + Элем + Символы.ПС;
				КонецЦикла;	
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Стр);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И в таблице "ИмяТаблицы" выпадающий список с именем "Реквизит1" не содержит значения
//@ВТаблицеВыпадающийСписокСИменемНеСодержитЗначения(Парам01,ТабПарам)
Функция ВТаблицеВыпадающийСписокСИменемНеСодержитЗначения(ИмяТаблицы,ИмяЭлемента,ТабПарам) Экспорт
	ВТаблицеВыпадающийСписокНеСодержитЗначения(ИмяТаблицы,ИмяЭлемента,ТабПарам,Истина);
КонецФункции



&НаКлиенте
Процедура УПоляЯНажимаюГиперссылкуСлужебный(ИмяЭлемента,Гиперссылка,ИскатьПоИмени,ПоШаблону)
	
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени, Истина,, ДопПараметры);
			Попытка
				Если Ванесса.Версия8325ИлиВыше И ЭлементФормы.Вид = ВидПоляФормы.ПолеФорматированногоДокумента Тогда
					ЭлементФормы.НажатьНаГиперссылкуВФорматированномДокументе(Гиперссылка);
				ИначеЕсли Ванесса.Версия8325ИлиВыше И ПоШаблону Тогда
					ПредставленияСсылок = ЭлементФормы.ПолучитьПредставленияГиперссылокФорматированнойСтроки();
					Нашли = Ложь;
					Сч = -1;
					Для Каждого ТекСсылка Из ПредставленияСсылок Цикл
						Сч = Сч + 1;
						Если Ванесса.СтрокаСоответствуетШаблону(ТекСсылка,Гиперссылка) Тогда
							Ванесса.НажатьНаГиперссылкуВФорматированнойСтроке(ЭлементФормы, Сч);
							Нашли = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Не Нашли Тогда
						ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У поля <%1> не получилось нажать на гиперссылку <%2>.");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Гиперссылка);
						ВызватьИсключение ТекстСообщения;
					КонецЕсли;	
					
				Иначе	
					Ванесса.НажатьНаГиперссылкуВФорматированнойСтроке(ЭлементФормы, Гиперссылка);
				КонецЕсли;	
				
				//ЭлементФормы.НажатьНаГиперссылкуВФорматированнойСтроке(Гиперссылка);
			Исключение
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У поля <%1> не получилось нажать на гиперссылку <%2>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Гиперссылка);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
//И у поля "Надпись форматированная строка" я нажимаю гиперссылку 'Ссылка1'
//@УПоляЯНажимаюГиперссылку(Парам01,Парам02)
Функция УПоляЯНажимаюГиперссылку(ИмяПоля,Гиперссылка) Экспорт
	
	УПоляЯНажимаюГиперссылкуСлужебный(ИмяПоля,Гиперссылка,Ложь,Ложь);
	
КонецФункции

&НаКлиенте
//И у поля с именем "Надпись форматированная строка" я нажимаю гиперссылку 'Ссылка1'
//@УПоляСИменемЯНажимаюГиперссылку(Парам01,Парам02)
Функция УПоляСИменемЯНажимаюГиперссылку(ИмяПоля,Гиперссылка) Экспорт
	
	УПоляЯНажимаюГиперссылкуСлужебный(ИмяПоля,Гиперссылка,Истина,Ложь);
	
КонецФункции

&НаКлиенте
//И у поля "Надпись форматированная строка" я нажимаю гиперссылку 'Ссылка1' по шаблону
//@УПоляЯНажимаюГиперссылкуПоШаблону(Парам01,Парам02)
Функция УПоляЯНажимаюГиперссылкуПоШаблону(ИмяПоля,Гиперссылка) Экспорт
	
	УПоляЯНажимаюГиперссылкуСлужебный(ИмяПоля,Гиперссылка,Ложь,Истина);
	
КонецФункции

&НаКлиенте
//И у поля с именем "Надпись форматированная строка" я нажимаю гиперссылку 'Ссылка1' по шаблону
//@УПоляСИменемЯНажимаюГиперссылкуПоШаблону(Парам01,Парам02)
Функция УПоляСИменемЯНажимаюГиперссылкуПоШаблону(ИмяПоля,Гиперссылка) Экспорт
	
	УПоляЯНажимаюГиперссылкуСлужебный(ИмяПоля,Гиперссылка,Истина,Истина);
	
КонецФункции



&НаКлиенте
Функция ОбработчикОжиданияЯЖдуЧтоВТабличномДокументеЯчейкаСтанетРавнаВТечениеСекунд()
	ИмяОбработчика = "ОбработчикОжиданияЯЖдуЧтоВТабличномДокументеЯчейкаСтанетРавнаВТечениеСекунд";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоляОбработкаОжидания,Истина,Ложь, Тип("ТестируемоеПолеФормы"));
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		Попытка
			ТекстЯчейки = ПолеРеквизит.ПолучитьТекстОбласти(ИмяЯчейкиОбработкаОжидания);
		Исключение
			ТекстЯчейки = "";
		КонецПопытки;
		
		Попытка
			ТабДокСтало = Ванесса.ПолучитьТабличныйДокументTestClient(ПолеРеквизит);
		Исключение
			ТабДокСтало = Неопределено;
		КонецПопытки;
		
		Если ТабДокСтало <> Неопределено Тогда
			Ванесса.ПрикрепитьМакетКСценарию(ТабДокСтало,Ванесса.Локализовать("ТекущееЗначениеМакета"));
		КонецЕсли;	 
		
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что у табличного документа <%1> в течение <%2> секунд значение ячейки <%3> станет равно <%4>. Текущее значение <%5>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПоляОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ИмяЯчейкиОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ЗначениеОбрабткаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%5",ТекстЯчейки);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПолеРеквизит = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Попытка
		ТекстЯчейки = ПолеРеквизит.ПолучитьТекстОбласти(ИмяЯчейкиОбработкаОжидания);
	Исключение
		ТекстЯчейки = Неопределено;
	КонецПопытки;
	
	Если НРег(ТекстЯчейки) = НРег(ЗначениеОбрабткаОжидания) И ТекстЯчейки <> Неопределено Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат Неопределено;
	КонецЕсли;	 
КонецФункции 

&НаКлиенте
//И я жду, что в табличном документе "РеквизитТабличныйДокумент" ячейка "r4c2" станет равна "Значение" в течение 20 секунд
//@ЯЖдуЧтоВТабличномДокументеЯчейкаСтанетРавнаВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)
Функция ЯЖдуЧтоВТабличномДокументеЯчейкаСтанетРавнаВТечениеСекунд(ИмяРеквизита,ИмяЯчейки,Значение,КоличествоСекунд) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = ИмяРеквизита;
	ИмяЯчейкиОбработкаОжидания        = ИмяЯчейки;
	ЗначениеОбрабткаОжидания          = Значение;
	ИскатьПоИмениОбрабткаОжидания     = Истина;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияЯЖдуЧтоВТабличномДокументеЯчейкаСтанетРавнаВТечениеСекунд",1,Ложь);
КонецФункции


&НаКлиенте
//И я запоминаю значение ячейки табличного документа "РеквизитТабличныйДокумент" "АдресЯчейки" в переменную "ИмяПеременной"
//@ЯЗапоминаюЗначениеЯчейкиТабличногоДокументаВПеременную(Парам01,Парам02,Парам03)
Функция ЯЗапоминаюЗначениеЯчейкиТабличногоДокументаВПеременную(ИмяРеквизита,ИмяЯчейки,ИмяПеременной) Экспорт
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,Истина,Ложь, Тип("ТестируемоеПолеФормы"), ДопПараметры);
			ТекстЯчейки = ПолеРеквизит.ПолучитьТекстОбласти(ИмяЯчейки);
			Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной,ТекстЯчейки);
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И в таблице "ИмяТаблицы" заголовок активной колонки "Текст"
//@ВТаблицеЗаголовокАктивнойКолонки(Парам01,Парам02)
Функция ВТаблицеЗаголовокАктивнойКолонки(ИмяТаблицы,ИмяКолонки,ПолучитьЗаголовок = Истина) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	АктивноеПоле = ТЧ.ПолучитьТекущийЭлемент();
	Если АктивноеПоле = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось определить активное поле у таблицы <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если ПолучитьЗаголовок Тогда
		ТекущееИмя = АктивноеПоле.ТекстЗаголовка;
	Иначе	
		ТекущееИмя = АктивноеПоле.Имя;
	КонецЕсли;	 
	
	Если НРег(ТекущееИмя) <> НРег(ИмяКолонки) Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У таблицы <%1> ожидалась, что активной будет колонка <%2>, а не <%3>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяКолонки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ТекущееИмя);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И в таблице "ИмяТаблицы" имя активной колонки "Текст"
//@ВТаблицеИмяАктивнойКолонки(Парам01,Парам02)
Функция ВТаблицеИмяАктивнойКолонки(ИмяТаблицы,ИмяКолонки) Экспорт
	ВТаблицеЗаголовокАктивнойКолонки(ИмяТаблицы,ИмяКолонки,Ложь);
КонецФункции


&НаКлиенте
//Если в таблице "ИмяТаблицы" есть колонка "Заголовок колонки" Тогда
//@ВТаблицеЕстьКолонкаТогда(Парам01,Парам02)
Функция ВТаблицеЕстьКолонкаТогда(ИмяТаблицы,ИмяКолонки,ИскатьПоИмени = Ложь,ПроверятьНаличие = Истина) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	Если ИскатьПоИмени Тогда
		Колонка = ТЧ.НайтиОбъект(,,ИмяКолонки);
	Иначе	
		Колонка = ТЧ.НайтиОбъект(,ИмяКолонки);
	КонецЕсли;
	
	Если ПроверятьНаличие Тогда
		Если Колонка = Неопределено Тогда
			Ванесса.УстановитьРезультатУсловия(Ложь);
		Иначе	
			Ванесса.УстановитьРезультатУсловия(Истина);
		КонецЕсли;	 
	Иначе	
		Если Колонка = Неопределено Тогда
			Ванесса.УстановитьРезультатУсловия(Истина);
		Иначе	
			Ванесса.УстановитьРезультатУсловия(Ложь);
		КонецЕсли;	 
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//Если в таблице "ИмяТаблицы" есть колонка с именем "ИмяКолонки" Тогда
//@ВТаблицеЕстьКолонкаСИменемТогда(Парам01,Парам02)
Функция ВТаблицеЕстьКолонкаСИменемТогда(ИмяТаблицы,ИмяКолонки) Экспорт
	ВТаблицеЕстьКолонкаТогда(ИмяТаблицы,ИмяКолонки,Истина,Истина);
КонецФункции

&НаКлиенте
//Если в таблице "ИмяТаблицы" нет колонки "Заголовок колонки" Тогда
//@ВТаблицеНетКолонкиТогда(Парам01,Парам02)
Функция ВТаблицеНетКолонкиТогда(ИмяТаблицы,ИмяКолонки) Экспорт
	ВТаблицеЕстьКолонкаТогда(ИмяТаблицы,ИмяКолонки,Ложь,Ложь);
КонецФункции

&НаКлиенте
//Если в таблице "ИмяТаблицы" нет колонки с именем "ИмяКолонки" Тогда
//@ВТаблицеНетКолонкиСИменемТогда(Парам01,Парам02)
Функция ВТаблицеНетКолонкиСИменемТогда(ИмяТаблицы,ИмяКолонки) Экспорт
	ВТаблицеЕстьКолонкаТогда(ИмяТаблицы,ИмяКолонки,Истина,Ложь);
КонецФункции


&НаКлиенте
//И я запоминаю значение таблицы "Таблица1" как "Таб1"
//@ЯЗапоминаюЗначениеТаблицыКак(Парам01,Парам02,ТабПарам)
Функция ЯЗапоминаюЗначениеТаблицыКак(ИмяТаблицы,ИмяПеременной,ТабПарам = Неопределено,ВыделятьВсеСтроки = Истина) Экспорт
	//ТабПарам = Ванесса.ПолучитьЗначенияТаблицыGherkinИзКонтекста(ТабПарам);
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВыделятьВсеСтроки",ВыделятьВсеСтроки);
	ЗначениеТЧ   = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ,ДопПараметры);
	
	Если ЗначениеТЧ = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить значение таблицы <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	НовоеЗначениеТЧ = Новый Массив;
	
	Если ТабПарам = Неопределено Тогда
		ТабПарам = Новый Массив;
		ВыделенныеСтроки = ТЧ.ПолучитьВыделенныеСтроки();
		Для Каждого КлючЗначение Из ВыделенныеСтроки[0] Цикл
			ДанныеКолонки = Новый Структура;
			ДанныеКолонки.Вставить("Кол1", КлючЗначение.Ключ);
			ТабПарам.Добавить(ДанныеКолонки);
		КонецЦикла;	
	КонецЕсли;	
	
	СтрокаКолонок = Новый Соответствие;
	Для Каждого ИмяКолонки Из ТабПарам Цикл
		// колонки с пустым заголовком не запоминаем
		Если ЗначениеЗаполнено(СтрЗаменить(ИмяКолонки.Кол1, " ", "")) Тогда
			СтрокаКолонок.Вставить(ИмяКолонки.Кол1, ИмяКолонки.Кол1);
		КонецЕсли;		
	КонецЦикла;
	НовоеЗначениеТЧ.Добавить(СтрокаКолонок);

	Для Каждого СтрокаЗначениеТЧ Из ЗначениеТЧ Цикл
		СтрокаНовоеЗначениеТЧ = Новый Соответствие;
		
		Для Ккк = 1 По ТабПарам.Количество() Цикл
			ИмяКолонкиТаблицыФормы = ТабПарам[Ккк-1]["Кол1"];
			Если Не ЗначениеЗаполнено(СтрЗаменить(ИмяКолонкиТаблицыФормы, " ", "")) Тогда Продолжить; КонецЕсли;    // проверка на пустой заголовок колонки, такой отбрасываем
			ЗначениеКолонкиТаблицыФормы = СтрокаЗначениеТЧ[ИмяКолонкиТаблицыФормы];
			Если ЗначениеКолонкиТаблицыФормы = Неопределено Тогда
				ИмяКолонкиТаблицыФормы = СтрЗаменить(ИмяКолонкиТаблицыФормы, "\n", "");
				//Ищем подходящие ключи из заголовков колонок
				МассивКлючей = Новый Массив;
				Для Каждого Элем Из СтрокаЗначениеТЧ Цикл
					ТекКлюч = СтрЗаменить(Элем.Ключ, Символы.ПС, "");
					ТекКлюч = СтрЗаменить(ТекКлюч, Символы.ВК, "");
					Если НРег(ИмяКолонкиТаблицыФормы) = НРег(ТекКлюч) Тогда
						МассивКлючей.Добавить(Элем.Ключ);
					КонецЕсли;
				КонецЦикла;	
				Если МассивКлючей.Количество() = 1 Тогда
					ЗначениеКолонкиТаблицыФормы = СтрокаЗначениеТЧ[МассивКлючей[0]];
				КонецЕсли;	
				
			КонецЕсли;
			
			Если ЗначениеКолонкиТаблицыФормы = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1>  нет колонки <%2>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяКолонкиТаблицыФормы);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			СтрокаНовоеЗначениеТЧ.Вставить(ИмяКолонкиТаблицыФормы,ЗначениеКолонкиТаблицыФормы);
			
		КонецЦикла;	
		
		НовоеЗначениеТЧ.Добавить(СтрокаНовоеЗначениеТЧ);
	КонецЦикла;	
	
	Попытка
		Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной,НовоеЗначениеТЧ);
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось сохранить в переменную <%1> таблицу с именем <%2>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПеременной);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяТаблицы);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
КонецФункции

&НаКлиенте
//И таблица "Таб1" содержится в таблице "Таб2"
//@ТаблицаСодержитсяВТаблице(Парам01,Парам02,ТабПарам)
Функция ТаблицаСодержитсяВТаблице(Переменная1,Переменная2) Экспорт
	Таблица1 = Ванесса.ПолучитьЗначениеПеременнойИзКонтекста(Переменная1);
	Таблица2 = Ванесса.ПолучитьЗначениеПеременнойИзКонтекста(Переменная2);
	
	Если ТипЗнч(Таблица1) <> Тип("Массив") и ТипЗнч(Таблица1) <> Тип("ФиксированныйМассив") Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Типом значения <%1> является <%2>, а ожидался тип <%3>.%4");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Переменная1);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТипЗнч(Таблица1));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3","Массив");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4","");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если ТипЗнч(Таблица2) <> Тип("Массив") и ТипЗнч(Таблица2) <> Тип("ФиксированныйМассив") Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Типом значения <%1> является <%2>, а ожидался тип <%3>.%4");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Переменная2);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТипЗнч(Таблица2));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3","Массив");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4","");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если Таблица1.Количество() = 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Таблица <%1> пустая.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Переменная1);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если Таблица2.Количество() = 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Таблица <%1> пустая.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Переменная2);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	СтрокаТаблица1 = Таблица1[0];
	СтрокаТаблица2 = Таблица2[0];
	
	Если СтрокаТаблица1.Количество() <> СтрокаТаблица2.Количество() Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблицах <%1> и <%2> разное количество колонок <%3> и <%4>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Переменная1);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Переменная2);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",СтрокаТаблица1.Количество());
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",СтрокаТаблица2.Количество());
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	//сравним состав колонок
	Для Каждого Колонка1 Из СтрокаТаблица1 Цикл
		Если СтрокаТаблица2[Колонка1.Ключ] = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1>  нет колонки <%2>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Переменная2);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Колонка1.Ключ);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЦикла;	
	
	МассивОшибок = Новый Массив;
	Для Сч = 1 По Таблица1.Количество()-1 Цикл
		СтрокаТаблица1 = Таблица1[Сч];
		НашлиСтроку = Ложь;
		
		ЗначениеСтандарт1 = Новый Структура;
		ЗначениеСтандарт2 = Новый Структура;
		
		Для Сч2 = 1 По Таблица2.Количество()-1 Цикл
			СтрокаТаблица2 = Таблица2[Сч2];
			СовпалиВсеКолонки = Истина;
			Для Каждого КолонкаСтроки1 Из СтрокаТаблица1 Цикл
				Значение1 = СтрокаТаблица1[КолонкаСтроки1.Ключ];
				Значение2 = СтрокаТаблица2[КолонкаСтроки1.Ключ];
				
				Если Значение1 <> Значение2 Тогда
					СовпалиВсеКолонки = Ложь;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
			
			Если СовпалиВсеКолонки Тогда
				НашлиСтроку = Истина;
				Прервать;
			КонецЕсли;	 
			
		КонецЦикла;	
		
		Если НЕ НашлиСтроку Тогда
			МассивОшибок.Добавить(СтрокаТаблица1);
		КонецЕсли;	 
	КонецЦикла;	
	
	Если МассивОшибок.Количество() > 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не все строки таблицы <%1> найдены в таблице <%2>:");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Переменная1);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Переменная2);
		
		Стр = "";
		Для Каждого СтрокаМассивОшибок Из МассивОшибок Цикл
			СтрокаИмКолонки = "		| ";
			СтрокаЗначение  = "		| ";
			
			Колонки = СтрокаМассивОшибок;
			Для Каждого Элем Из Колонки Цикл
				ИмяКолонки      = "'" + Элем.Ключ     + "'";
				ЗначениеКолонки = "'" + Элем.Значение + "'";
				
				ПривестиСтрокиКОднойДлине(ИмяКолонки,ЗначениеКолонки);
				
				СтрокаИмКолонки = СтрокаИмКолонки + ИмяКолонки      + " | ";
				СтрокаЗначение  = СтрокаЗначение  + ЗначениеКолонки + " | ";
			КонецЦикла;	
			
			Если Не ЗначениеЗаполнено(Стр) Тогда
				Стр = Стр + Символы.ПС + СтрокаИмКолонки + Символы.ПС + СтрокаЗначение;
			Иначе	
				Стр = Стр + Символы.ПС + СтрокаЗначение;
			КонецЕсли;	 
		КонецЦикла;	
		
		Таблица1Стандарт = ПреобразоватьТаблицуИзПеременнойКСтандартномуПредставлению(Таблица1);
		Таблица2Стандарт = ПреобразоватьТаблицуИзПеременнойКСтандартномуПредставлению(Таблица2);
		
		Ванесса.УстановитьЗначенияТаблицДляСравнения(Таблица1Стандарт,Таблица2Стандарт);
		Ванесса.ПрикрепитьМакетКСценарию(Таблица1Стандарт,Ванесса.Локализовать("ТекущееЗначениеТаблицы"));
		Ванесса.ПрикрепитьМакетКСценарию(Таблица2Стандарт,Ванесса.Локализовать("ЭталонноеЗначениеТаблицы"));
		ВызватьИсключение ТекстСообщения + Стр;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
Функция ПреобразоватьТаблицуИзПеременнойКСтандартномуПредставлению(ТаблицаИсходная)
	
	ТабДок = Новый ТабличныйДокумент;
	НомерСтроки = 0;
	
	Для Каждого ТекЗначение Из ТаблицаИсходная Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		НомКол = 0;
		Для Каждого КлючЗначение Из ТекЗначение Цикл
			НомКол = НомКол + 1;
			ТабДок.Область(НомерСтроки,НомКол,НомерСтроки,НомКол).Текст = КлючЗначение.Значение;
		КонецЦикла;
	КонецЦикла;	
	
	Возврат ТабДок;
	
КонецФункции	

&НаКлиенте
//И я запоминаю выделенные строки таблицы "Список" как "ВыделенныеСтроки"
//@ЯЗапоминаюВыделенныеСтрокиТаблицыКак(Парам01,Парам02,ТабПарам)
Функция ЯЗапоминаюВыделенныеСтрокиТаблицыКак(ИмяТаблицы,ИмяПеременной,ТабПарам) Экспорт
	ЯЗапоминаюЗначениеТаблицыКак(ИмяТаблицы,ИмяПеременной,ТабПарам,Ложь);
КонецФункции




&НаКлиенте
//И я включаю проверку видимости элементов с учётом видимости групп элементов
//@ЯВключаюПроверкуВидимостиЭлементовСУчётомВидимостиГруппЭлементов()
Функция ЯВключаюПроверкуВидимостиЭлементовСУчётомВидимостиГруппЭлементов() Экспорт
	Ванесса.УстановитьСтатусПроверятьВидимостьЭлементаСУчетомРодителя(Истина);
КонецФункции

&НаКлиенте
//И я выключаю проверку видимости элементов с учётом видимости групп элементов
//@ЯВыключаюПроверкуВидимостиЭлементовСУчётомВидимостиГруппЭлементов()
Функция ЯВыключаюПроверкуВидимостиЭлементовСУчётомВидимостиГруппЭлементов() Экспорт
	Ванесса.УстановитьСтатусПроверятьВидимостьЭлементаСУчетомРодителя(Ложь);
КонецФункции


&НаКлиенте
//И я включаю проверку доступности элементов с учётом доступности групп элементов
//@ЯВключаюПроверкуДоступностиЭлементовСУчётомДоступностиГруппЭлементов()
Функция ЯВключаюПроверкуДоступностиЭлементовСУчётомДоступностиГруппЭлементов() Экспорт
	Ванесса.УстановитьСтатусПроверятьДоступностьЭлементаСУчетомРодителя(Истина);
КонецФункции

&НаКлиенте
//И я выключаю проверку доступности элементов с учётом доступности групп элементов
//@ЯВыключаюПроверкуДоступностиЭлементовСУчётомДоступностиГруппЭлементов()
Функция ЯВыключаюПроверкуДоступностиЭлементовСУчётомДоступностиГруппЭлементов() Экспорт
	Ванесса.УстановитьСтатусПроверятьДоступностьЭлементаСУчетомРодителя(Ложь);
КонецФункции

&НаКлиенте
//И я включаю проверку только просмотр элементов с учётом групп элементов
//@ЯВключаюПроверкуТолькоПросмотрЭлементовСУчётомГруппЭлементов()
Функция ЯВключаюПроверкуТолькоПросмотрЭлементовСУчётомГруппЭлементов() Экспорт
	Ванесса.УстановитьСтатусПроверятьТолькоПросмотрЭлементаСУчетомРодителя(Истина);
КонецФункции

&НаКлиенте
//И я выключаю проверку только просмотр элементов с учётом групп элементов
//@ЯВыключаюПроверкуТолькоПросмотрЭлементовСУчётомГруппЭлементов()
Функция ЯВыключаюПроверкуТолькоПросмотрЭлементовСУчётомГруппЭлементов() Экспорт
	Ванесса.УстановитьСтатусПроверятьТолькоПросмотрЭлементаСУчетомРодителя(Ложь);
КонецФункции



&НаКлиенте
Функция ЭлементыГруппы(ПолеГруппа,ЗаголовкиЭлементов,ИменаЭлементов)
	ЭлементыГруппы     = ПолеГруппа.НайтиОбъекты();
	Для Каждого ЭлеметГруппы Из ЭлементыГруппы Цикл
		ИменаЭлементов.Вставить(ЭлеметГруппы.Имя,ЭлеметГруппы);
		ЗаголовкиЭлементов.Вставить(ЭлеметГруппы.ТекстЗаголовка,ЭлеметГруппы);
	КонецЦикла;	 
КонецФункции 

&НаКлиенте
//И в группе "ИмяГруппы" содержатся элементы
//@ВГруппеСодержатсяЭлементы(Парам01,ТабПарам)
Функция ВГруппеСодержатсяЭлементы(ИмяРеквизита,ТабПарам,ИскатьПоИмени = Ложь) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Ложь);
	ПолеГруппа = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени, Истина, Тип("ТестируемаяГруппаФормы"),ДопПараметры);	
	
	ЗаголовкиЭлементов = Новый Соответствие;
	ИменаЭлементов     = Новый Соответствие;
	ЭлементыГруппы(ПолеГруппа,ЗаголовкиЭлементов,ИменаЭлементов);
	
	МассивОшибок = Новый Массив;
	Для Каждого Строка Из ТабПарам Цикл
		ИмяЭлемента = Строка.Кол1;
		ИскатьЭлементПоИмени = Ложь;
		Ванесса.ОпределитьРежимПоискаЭлементаНаФорме(ИмяЭлемента,ИскатьЭлементПоИмени);
		
		Если ИскатьЭлементПоИмени Тогда
			ЭлементПоИмени = ИменаЭлементов[ИмяЭлемента];
		Иначе	
			ЭлементПоИмени = ЗаголовкиЭлементов[ИмяЭлемента];
		КонецЕсли;	 
		
		Если ЭлементПоИмени = Неопределено Тогда
			МассивОшибок.Добавить(ИмяЭлемента);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если МассивОшибок.Количество() > 0 Тогда
		Стр = "";
		Для Каждого Элем Из МассивОшибок Цикл
			Стр = Стр + Символы.ПС + Элем;
		КонецЦикла;	 
		
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что группа элементов <%1> содержит данные элементы формы: %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Стр);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И в группе с именем "ИмяГруппы" содержатся элементы
//@ВГруппеСИменемСодержатсяЭлементы(Парам01,ТабПарам)
Функция ВГруппеСИменемСодержатсяЭлементы(ИмяРеквизита,ТабПарам,ИскатьПоИмени = Ложь) Экспорт
	ВГруппеСодержатсяЭлементы(ИмяРеквизита,ТабПарам,Истина);
КонецФункции

&НаКлиенте
//И в группе "ИмяГруппы" не содержатся элементы
//@ВГруппеНеСодержатсяЭлементы(Парам01,ТабПарам)
Функция ВГруппеНеСодержатсяЭлементы(ИмяРеквизита,ТабПарам,ИскатьПоИмени = Ложь) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Ложь);
	ПолеГруппа = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени, Истина, Тип("ТестируемаяГруппаФормы"),ДопПараметры);	
	
	ЗаголовкиЭлементов = Новый Соответствие;
	ИменаЭлементов     = Новый Соответствие;
	ЭлементыГруппы(ПолеГруппа,ЗаголовкиЭлементов,ИменаЭлементов);
	
	МассивОшибок = Новый Массив;
	Для Каждого Строка Из ТабПарам Цикл
		ИмяЭлемента = Строка.Кол1;
		ИскатьЭлементПоИмени = Ложь;
		Ванесса.ОпределитьРежимПоискаЭлементаНаФорме(ИмяЭлемента,ИскатьЭлементПоИмени);
		
		Если ИскатьЭлементПоИмени Тогда
			ЭлементПоИмени = ИменаЭлементов[ИмяЭлемента];
		Иначе	
			ЭлементПоИмени = ЗаголовкиЭлементов[ИмяЭлемента];
		КонецЕсли;
		
		Если ЭлементПоИмени <> Неопределено Тогда
			МассивОшибок.Добавить(ИмяЭлемента);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если МассивОшибок.Количество() > 0 Тогда
		Стр = "";
		Для Каждого Элем Из МассивОшибок Цикл
			Стр = Стр + Символы.ПС + Элем;
		КонецЦикла;	 
		
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что группа элементов <%1> не содержит данные элементы формы: %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Стр);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И в группе с именем "ИмяГруппы" не содержатся элементы
//@ВГруппесИменемНеСодержатсяЭлементы(Парам01,ТабПарам)
Функция ВГруппесИменемНеСодержатсяЭлементы(ИмяРеквизита,ТабПарам,ИскатьПоИмени = Ложь) Экспорт
	ВГруппеНеСодержатсяЭлементы(ИмяРеквизита,ТабПарам,Истина);
КонецФункции



&НаКлиенте
//Если в панели разделов есть команда "ИмяКоманды" Тогда
//@ВПанелиРазделовЕстьКомандаТогда(Парам01)
Функция ВПанелиРазделовЕстьКомандаТогда(ИмяКоманды) Экспорт
	ПанельРазделов = Ванесса.ПанельРазделов();
	
	НужнаяКоманда = ПанельРазделов.НайтиОбъект(,ИмяКоманды);
	Если НужнаяКоманда = Неопределено Тогда
		Ванесса.УстановитьРезультатУсловия(Ложь);
	Иначе	
		Ванесса.УстановитьРезультатУсловия(Истина);
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//Если в панели функций есть команда "ИмяКоманды" Тогда
//@ВПанелиФункцийЕстьКомандаТогда(Парам01)
Функция ВПанелиФункцийЕстьКомандаТогда(ИмяКоманды) Экспорт
	ПанельФункций = Ванесса.ПанельФункций();
	
	НужнаяКоманда = ПанельФункций.НайтиОбъект(,ИмяКоманды);
	Если НужнаяКоманда = Неопределено Тогда
		Ванесса.УстановитьРезультатУсловия(Ложь);
	Иначе	
		Ванесса.УстановитьРезультатУсловия(Истина);
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//Если в панели открытых есть команда "ИмяКоманды" Тогда
//@ВПанелиОткрытыхЕстьКомандаТогда(Парам01)
Функция ВПанелиОткрытыхЕстьКомандаТогда(ИмяКоманды) Экспорт
	ПанельОткрытых = Ванесса.ПанельОткрытых();
	
	НужнаяКоманда = ПанельОткрытых.НайтиОбъект(,ИмяКоманды);
	Если НужнаяКоманда = Неопределено Тогда
		Ванесса.УстановитьРезультатУсловия(Ложь);
	Иначе	
		Ванесса.УстановитьРезультатУсловия(Истина);
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И панель разделов равна
//@ПанельРазделовРавна(ТабПарам)
Функция ПанельРазделовРавна(ТабПарам) Экспорт
	ПанельРазделов = Ванесса.ПанельРазделов();
	
	ОбъектыПанелиРазделов = ПанельРазделов.НайтиОбъекты();
	Если ТабПарам.Количество() <> ОбъектыПанелиРазделов.Количество() Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что в панели разделов будет <%1> элементов, а найдено <%2> элементов.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТабПарам.Количество());
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОбъектыПанелиРазделов.Количество());
		Стр = "";
		Для Каждого ЭлемОбъектыПанелиРазделов Из ОбъектыПанелиРазделов Цикл
			Стр = Стр + Символы.ПС + ЭлемОбъектыПанелиРазделов.ТекстЗаголовка;
		КонецЦикла;	 
		ТекстСообщения = ТекстСообщения + Стр;
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Ном = -1;
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		Ном = Ном + 1;
		ОбъектПанелиРазделов = ОбъектыПанелиРазделов[Ном];
		
		Если НРег(СтрокаТабПарам.Кол1) <> НРег(ОбъектПанелиРазделов.ТекстЗаголовка) Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что в панели разделов будет элемент <%1> , а был найден элемент <%2>.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаТабПарам.Кол1);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОбъектПанелиРазделов.ТекстЗаголовка);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЦикла;	 
КонецФункции

&НаКлиенте
Функция ЗаголовкиЭлементовИзМассиваОбъектов(Массив,ПривестиКНрег = Ложь)
	Результат = Новый Массив;
	Для Каждого Элем Из Массив Цикл
		Если ПривестиКНрег Тогда
			Результат.Добавить(НРег(Элем.ТекстЗаголовка));
		Иначе	
			Результат.Добавить(Элем.ТекстЗаголовка);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Возврат Результат; 
КонецФункции	 

&НаКлиенте
//И панель разделов содержит пункты меню
//@ПанельРазделовСодержитПунктыМеню(ТабПарам)
Функция ПанельРазделовСодержитПунктыМеню(ТабПарам,ПроверятьВхождение = Истина) Экспорт
	ПанельРазделов = Ванесса.ПанельРазделов();
	ОбъектыПанелиРазделов = ПанельРазделов.НайтиОбъекты();
	ЗаголовкиЭлементов    = ЗаголовкиЭлементовИзМассиваОбъектов(ОбъектыПанелиРазделов,Истина);
	
	МассивОшибок = Новый Массив;
	
	Ном = -1;
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		Ном = Ном + 1;
		ОжидаемыйЗаголовокЭлемента = НРег(СтрокаТабПарам.Кол1);
		
		Если ПроверятьВхождение Тогда
			Если ЗаголовкиЭлементов.Найти(ОжидаемыйЗаголовокЭлемента) = Неопределено Тогда
				МассивОшибок.Добавить(СтрокаТабПарам.Кол1);
			КонецЕсли;	 
		Иначе	
			Если ЗаголовкиЭлементов.Найти(ОжидаемыйЗаголовокЭлемента) <> Неопределено Тогда
				МассивОшибок.Добавить(СтрокаТабПарам.Кол1);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если МассивОшибок.Количество() > 0 Тогда
		Если ПроверятьВхождение Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что в панели разделов будут содержаться следующие элементы: %1");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что в панели разделов не будут содержаться следующие элементы: %1");
		КонецЕсли;	 
		
		Стр = "";
		Для Каждого Элем Из МассивОшибок Цикл
			Стр = Стр + Символы.ПС + Элем;
		КонецЦикла;	 
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Стр);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И панель разделов не содержит пункты меню
//@ПанельРазделовНеСодержитПунктыМеню(ТабПарам)
Функция ПанельРазделовНеСодержитПунктыМеню(ТабПарам) Экспорт
	ПанельРазделовСодержитПунктыМеню(ТабПарам,Ложь);
КонецФункции

&НаКлиенте
//И панель функций равна
//@ПанельФункцийРавна(ТабПарам)
Функция ПанельФункцийРавна(ТабПарам) Экспорт
	ПанельФункций = Ванесса.ПанельФункций();
	ОбъектыПанелиФункций = ПанельФункций.НайтиОбъекты();
	
	Если ТабПарам.Количество() <> ОбъектыПанелиФункций.Количество() Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что в панели функций будет <%1> элементов, а найдено <%2> элементов.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТабПарам.Количество());
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОбъектыПанелиФункций.Количество());
		Стр = "";
		Для Каждого ЭлемОбъектыПанелиРазделов Из ОбъектыПанелиФункций Цикл
			Стр = Стр + Символы.ПС + ЭлемОбъектыПанелиРазделов.ТекстЗаголовка;
		КонецЦикла;	 
		ТекстСообщения = ТекстСообщения + Стр;
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Ном = -1;
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		Ном = Ном + 1;
		ОбъектПанелиРазделов = ОбъектыПанелиФункций[Ном];
		
		Если НРег(СтрокаТабПарам.Кол1) <> НРег(ОбъектПанелиРазделов.ТекстЗаголовка) Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что в панели функций будет элемент <%1> , а был найден элемент <%2>.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаТабПарам.Кол1);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОбъектПанелиРазделов.ТекстЗаголовка);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЦикла;	 
КонецФункции

&НаКлиенте
//И панель функций содержит пункты меню
//@ПанельФункцийСодержитПунктыМеню(ТабПарам)
Функция ПанельФункцийСодержитПунктыМеню(ТабПарам,ПроверятьВхождение = Истина) Экспорт
	ПанельФункций = Ванесса.ПанельФункций();
	ОбъектыПанелиФункций  = ПанельФункций.НайтиОбъекты();
	ЗаголовкиЭлементов    = ЗаголовкиЭлементовИзМассиваОбъектов(ОбъектыПанелиФункций,Истина);
	
	МассивОшибок = Новый Массив;
	
	Ном = -1;
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		Ном = Ном + 1;
		ОжидаемыйЗаголовокЭлемента = НРег(СтрокаТабПарам.Кол1);
		
		Если ПроверятьВхождение Тогда
			Если ЗаголовкиЭлементов.Найти(ОжидаемыйЗаголовокЭлемента) = Неопределено Тогда
				МассивОшибок.Добавить(СтрокаТабПарам.Кол1);
			КонецЕсли;	 
		Иначе	
			Если ЗаголовкиЭлементов.Найти(ОжидаемыйЗаголовокЭлемента) <> Неопределено Тогда
				МассивОшибок.Добавить(СтрокаТабПарам.Кол1);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если МассивОшибок.Количество() > 0 Тогда
		Если ПроверятьВхождение Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что в панели функций будут содержаться следующие элементы: %1");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что в панели функций не будут содержаться следующие элементы: %1");
		КонецЕсли;	 
		
		Стр = "";
		Для Каждого Элем Из МассивОшибок Цикл
			Стр = Стр + Символы.ПС + Элем;
		КонецЦикла;	 
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Стр);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И панель функций не содержит пункты меню
//@ПанельФункцийНеСодержитПунктыМеню(ТабПарам)
Функция ПанельФункцийНеСодержитПунктыМеню(ТабПарам) Экспорт
	ПанельФункцийСодержитПунктыМеню(ТабПарам,Ложь);
КонецФункции

&НаКлиенте
//И группа "ЗаголовокГруппы" в панели функций содержит пункты меню
//@ГруппаВПанелиФункцийСодержитПунктыМеню(Парам01,ТабПарам)
Функция ГруппаВПанелиФункцийСодержитПунктыМеню(ИмяРеквизита,ТабПарам,ПоискПоИмени = Ложь,ПроверятьВхождение = Истина) Экспорт
	ПанельФункций = Ванесса.ПанельФункций();
	Если ПоискПоИмени Тогда
		Группа = ПанельФункций.НайтиОбъект(Тип("ТестируемаяГруппаКомандногоИнтерфейса"),,ИмяРеквизита);
	Иначе	
		Группа = ПанельФункций.НайтиОбъект(Тип("ТестируемаяГруппаКомандногоИнтерфейса"),ИмяРеквизита);
	КонецЕсли;	 
	
	Если Группа = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Группа <%1> не найдена в панели функций.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ОбъектыПанелиФункций  = Группа.НайтиОбъекты();
	ЗаголовкиЭлементов    = ЗаголовкиЭлементовИзМассиваОбъектов(ОбъектыПанелиФункций,Истина);
	
	МассивОшибок = Новый Массив;
	
	Ном = -1;
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		Ном = Ном + 1;
		ОжидаемыйЗаголовокЭлемента = НРег(СтрокаТабПарам.Кол1);
		
		Если ПроверятьВхождение Тогда
			Если ЗаголовкиЭлементов.Найти(ОжидаемыйЗаголовокЭлемента) = Неопределено Тогда
				МассивОшибок.Добавить(СтрокаТабПарам.Кол1);
			КонецЕсли;	 
		Иначе	
			Если ЗаголовкиЭлементов.Найти(ОжидаемыйЗаголовокЭлемента) <> Неопределено Тогда
				МассивОшибок.Добавить(СтрокаТабПарам.Кол1);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если МассивОшибок.Количество() > 0 Тогда
		Если ПроверятьВхождение Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что в группе <%1> панели функций будут содержаться следующие элементы: %2");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что в группе <%1> панели функций не будут содержаться следующие элементы: %2");
		КонецЕсли;	 
		
		Стр = "";
		Для Каждого Элем Из МассивОшибок Цикл
			Стр = Стр + Символы.ПС + Элем;
		КонецЦикла;	 
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Стр);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И группа с именем "ИмяГруппы" в панели функций содержит пункты меню
//@ГруппаСИменемВПанелиФункцийСодержитПунктыМеню(Парам01,ТабПарам)
Функция ГруппаСИменемВПанелиФункцийСодержитПунктыМеню(ИмяРеквизита,ТабПарам) Экспорт
	ГруппаВПанелиФункцийСодержитПунктыМеню(ИмяРеквизита,ТабПарам,Истина,Истина);
КонецФункции

&НаКлиенте
//И группа "ЗаголовокГруппы" в панели функций  не содержит пункты меню
//@ГруппаВПанелиФункцийНеСодержитПунктыМеню(Парам01,ТабПарам)
Функция ГруппаВПанелиФункцийНеСодержитПунктыМеню(ИмяРеквизита,ТабПарам,ПоискПоИмени = Ложь) Экспорт
	ГруппаВПанелиФункцийСодержитПунктыМеню(ИмяРеквизита,ТабПарам,ПоискПоИмени,Ложь);
КонецФункции

&НаКлиенте
//И группа с именем "ИмяГруппы" в панели функций  не содержит пункты меню
//@ГруппаСИменемВПанелиФункцийНеСодержитПунктыМеню(Парам01,ТабПарам)
Функция ГруппаСИменемВПанелиФункцийНеСодержитПунктыМеню(ИмяРеквизита,ТабПарам) Экспорт
	ГруппаВПанелиФункцийСодержитПунктыМеню(ИмяРеквизита,ТабПарам,Истина,Ложь);
КонецФункции

&НаКлиенте
//И я нажимаю на кнопку Текущего месяца
//@ЯНажимаюНаКнопкуТекущегоМесяца()
Функция ЯНажимаюНаКнопкуТекущегоМесяца() Экспорт
	ТекущийМесяцПрописью = Формат(ТекущаяДата(),"DF=MMMM");
	Кнопка = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ТекущийМесяцПрописью, Ложь);
	Кнопка.Нажать()
КонецФункции


&НаКлиенте
Функция УстановитьЗначениеВПолеПриЗаполненииТаблицы(Таблица,РеквизитТаблицы,Текст,ИмяТаблицы,ВводитьТекст)
	ЖдатьФормированияОткрытогоСписка = Истина;
	Попытка
		Если Не Таблица.ТекущийРежимРедактирование() Тогда
			Таблица.ИзменитьСтроку();
		КонецЕсли;
		Если ВводитьТекст Тогда
			Попытка
				ВыпадающийСписокОткрыт = РеквизитТаблицы.ВыпадающийСписокОткрыт();
				Если НЕ ВыпадающийСписокОткрыт Тогда
					РеквизитТаблицы.ОткрытьВыпадающийСписок();
					ТаймаутОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(1);
					РеквизитТаблицы.ОжидатьФормированияВыпадающегоСписка(ТаймаутОжидания);
				КонецЕсли;	
			Исключение
				ЖдатьФормированияОткрытогоСписка = Ложь;
			КонецПопытки;
			
			Ванесса.ВвестиВПолеТекст(РеквизитТаблицы,Текст);
		КонецЕсли;	 
		ПолучилосьВвестиТекст = Истина;
	Исключение
		ПолучилосьВвестиТекст = Ложь;
	КонецПопытки;
	
	Попытка
		Если ЖдатьФормированияОткрытогоСписка Тогда
			ТаймаутОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(1);
			РеквизитТаблицы.ОжидатьФормированияВыпадающегоСписка(ТаймаутОжидания);
		КонецЕсли;	
		
		ВыпадающийСписокОткрыт = РеквизитТаблицы.ВыпадающийСписокОткрыт();
		ВыборПоЗначению = Ложь;
		Если ВыпадающийСписокОткрыт И Ванесса.Версия8313ИлиВыше Тогда
			ТаймаутОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(1);
			СписокСформировался = РеквизитТаблицы.ОжидатьФормированияВыпадающегоСписка(ТаймаутОжидания);
			ПредставлениеСпискаВыбора = Ванесса.ДополнитьПредставлениеСпискаВыбора(РеквизитТаблицы.ПолучитьПредставлениеСпискаВыбора());
			Ном = 0;
			
			Если ПредставлениеСпискаВыбора.Количество() = 1 Тогда
				ОтображаемыйТекст = ПредставлениеСпискаВыбора[0].ОтображаемыйТекст;
				ВыборПоЗначению = Истина;
				Попытка
					РеквизитТаблицы.ВыполнитьВыборИзВыпадающегоСписка(ОтображаемыйТекст);
				Исключение
					ВыборПоЗначению = Ложь;
				КонецПопытки;
			КонецЕсли;	 
			
			Если НЕ ВыборПоЗначению Тогда
				Для Каждого Элем Из ПредставлениеСпискаВыбора Цикл
					Ном = 1;
					Если НРег(Элем.ОтображаемыйТекст) = НРег(Текст) ИЛИ НРег(Элем.ПредставлениеДанных) = НРег(Текст) Тогда
						ВыборПоЗначению = Истина;
						Попытка
							РеквизитТаблицы.ВыполнитьВыборИзВыпадающегоСписка(Элем.ОтображаемыйТекст);
						Исключение
							ВыборПоЗначению = Ложь;
						КонецПопытки;
						
						Если НЕ ВыборПоЗначению Тогда
							Попытка
								РеквизитТаблицы.ВыполнитьВыборИзСпискаВыбора(Элем.ОтображаемыйТекст);
							Исключение
								ВыборПоЗначению = Ложь;
							КонецПопытки;
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЦикла;	 
			КонецЕсли;	 
			
			Если НЕ ВыборПоЗначению Тогда
				СделатьВводПоСтрокеВПолеВВода(Таблица,ИмяТаблицы,РеквизитТаблицы,РеквизитТаблицы.Имя,Истина,Текст,Неопределено);
			КонецЕсли;	 
		КонецЕсли;	 
	Исключение
	КонецПопытки;
КонецФункции 

&НаКлиенте
Функция УдалитьизРеквизитовВсеКромеПолейВвода(РеквизитыТаблицы)
	
	Если РеквизитыТаблицы.Количество() < 2 Тогда
		Возврат РеквизитыТаблицы;
	КонецЕсли;	
	
	Результат = Новый Массив;
	Для Каждого Элем Из РеквизитыТаблицы Цикл
		Результат.Добавить(Элем);
	КонецЦикла;	 
	
	МассивИд = Новый Массив;
	Сч = -1;
	Для Каждого Элем Из Результат Цикл
		Сч = Сч + 1;
		Если Элем.Вид <> ВидПоляФормы.ПолеВвода Тогда
			МассивИд.Добавить(Сч);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Для Ккк = 0 По МассивИД.Количество()-1 Цикл
		ИД = МассивИД[МассивИД.Количество()-1 - Ккк];
		Результат.Удалить(ИД);
	КонецЦикла;
	
	Возврат Результат; 
	
КонецФункции

&НаКлиенте
//И я заполняю таблицу "ИмяТаблицы" данными
//@ЯЗаполняюТаблицуДанными(Парам01,ТабПарам)
Функция ЯЗаполняюТаблицуДанными(ИмяТаблицы,ТабПарам) Экспорт
	Таблица = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	
	Если ТабПарам.Количество() < 2 Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Должны быть переданы минимум 2 строки. Первая строка с именами колонок, вторая и следующие - данные для проверки.");		
	КонецЕсли;	 
	
	Колонки = ТабПарам[0];
	РеквизитыТаблицы = Новый Соответствие;
	Для Каждого СтрокаКолонки Из Колонки Цикл
		ИмяКолонки = СтрокаКолонки.Значение;
		ТекРеквизитыТаблицы = Таблица.НайтиОбъекты(,ИмяКолонки);
		ТекРеквизитыТаблицы = УдалитьизРеквизитовВсеКромеПолейВвода(ТекРеквизитыТаблицы);
		РеквизитТаблицы = Неопределено;
		Если ТекРеквизитыТаблицы.Количество() = 0 Тогда
			//поиск по имени
			РеквизитТаблицы = Таблица.НайтиОбъект(,,ИмяКолонки);
			
			Если РеквизитТаблицы = Неопределено Тогда
				ВсеРеквизитыТаблицы = Таблица.НайтиОбъекты();
				Соответствие = Новый Соответствие;
				Для Каждого ТекРеквизит Из ВсеРеквизитыТаблицы Цикл
					Соответствие.Вставить(ТекРеквизит.ТекстЗаголовка, ТекРеквизит);
				КонецЦикла;
				
				РеквизитТаблицы = Ванесса.ЗначениеИзСоответствияПоКлючуСУчетомЗаменыПереносаСтроки(Соответствие, ИмяКолонки);
				
			КонецЕсли;	
			
		Иначе	
			РеквизитТаблицы = ТекРеквизитыТаблицы[0];
		КонецЕсли;	 
		
		Если РеквизитТаблицы = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1>  нет колонки <%2>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяКолонки); 
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		РеквизитыТаблицы.Вставить(ИмяКолонки,РеквизитТаблицы);
	КонецЦикла;	 
	
	Для Ккк = 1 По ТабПарам.Количество()-1 Цикл
		Таблица.ДобавитьСтроку();
		СтрокаТабПарам = ТабПарам[Ккк];
		НомерКолонки = 0;
		
		МассивКолонки = Новый Массив;
		Для Каждого СтрокаКолонки Из Колонки Цикл
			МассивКолонки.Добавить(СтрокаКолонки);
		КонецЦикла;	 
		
		Для Каждого СтрокаКолонки Из МассивКолонки Цикл
			НомерКолонки = НомерКолонки + 1;
			ИмяКолонки = СтрокаКолонки.Значение;
			Текст = СтрокаТабПарам[Формат("Кол" + НомерКолонки, "ЧГ=; ЧН=0")];
			Если Текст = "*" Тогда
				Продолжить;
			КонецЕсли;	 
			
			РеквизитТаблицы = РеквизитыТаблицы[ИмяКолонки];
			РеквизитТаблицы.Активизировать();
			
			НадоВВодитьТекст = Истина;
			Если Текст = "" Тогда
				Попытка
					ОтображаемыйТекст = РеквизитТаблицы.ПолучитьОтображаемыйТекст();
					Если ОтображаемыйТекст = "" Тогда
						НадоВВодитьТекст = Ложь;
					КонецЕсли;	 
				Исключение
				КонецПопытки;
			КонецЕсли;	 
			
			АктивнаяКолонка = Таблица.ПолучитьТекущийЭлемент();
			Если АктивнаяКолонка.Имя <> РеквизитТаблицы.Имя Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> не получилось активизировать поле <%2> для редактирования.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяКолонки);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Если НадоВВодитьТекст Тогда
				Если РеквизитТаблицы.Вид = ВидПоляФормы.ПолеФлажка Тогда
					НужноеЗначениеФлага = ПривестиЗначениеФлагаКСтандарту(Текст);
					Если НужноеЗначениеФлага = "Да" Тогда
						ВОткрытойФормеВТЧЯУстанавливаюФлагСЗаголовком(ИмяТаблицы,ИмяКолонки,Ложь);
					Иначе	
						ВОткрытойФормеВТЧЯСнимаюФлагСЗаголовком(ИмяТаблицы,ИмяКолонки,Ложь);
					КонецЕсли;	 
					
				Иначе	
					УстановитьЗначениеВПолеПриЗаполненииТаблицы(Таблица,РеквизитТаблицы,Текст,ИмяТаблицы,Истина);
				КонецЕсли;	 
			КонецЕсли;	 
			
			//Возможно список не успел появиться. Проверяем это через активизацию следущего поля.
			СледущаяКолонка = НомерКолонки;
			Пока Истина Цикл
				СледущаяКолонка = СледущаяКолонка + 1;
				
				Попытка
					ТекСтрокаКолонки = МассивКолонки[СледущаяКолонка-1];
				Исключение
					Прервать;
				КонецПопытки;
				
				ИмяКолонки = ТекСтрокаКолонки.Значение;
				ТекстСледущегоПоля = СтрокаТабПарам[Формат("Кол" + СледущаяКолонка, "ЧГ=; ЧН=0")];
				Если ТекстСледущегоПоля = "*" Тогда
					Продолжить;
				КонецЕсли;	 
				
				Если ТекстСледущегоПоля = Неопределено Тогда
					Прервать;
				КонецЕсли;	 
				
				КоличествоПопыток = 2;
				Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
					ПолучилосьАктивировать = Ложь;
					Попытка
						РеквизитТаблицыСледующий = РеквизитыТаблицы[ИмяКолонки];
						РеквизитТаблицыСледующий.Активизировать();
						
						АктивнаяКолонка = Таблица.ПолучитьТекущийЭлемент();
						
						Если АктивнаяКолонка.Имя <> РеквизитТаблицыСледующий.Имя Тогда
							ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> не получилось активизировать поле <%2> для редактирования.");
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяКолонки);
							ВызватьИсключение ТекстСообщения;
						КонецЕсли;	 
						
						ПолучилосьАктивировать = Истина;
					Исключение
						Ванесса.Sleep(1);
						
						Попытка
							УстановитьЗначениеВПолеПриЗаполненииТаблицы(Таблица,РеквизитТаблицы,Текст,ИмяТаблицы,Ложь);
						Исключение
							Прервать;
						КонецПопытки;
					КонецПопытки;
					
					Если ПолучилосьАктивировать Тогда
						Прервать;
					КонецЕсли;	 
					
				КонецЦикла;					
				
				Прервать;
			КонецЦикла;	 
			
		КонецЦикла;	 
		
		ПолучилосьЗавершитьРедактирование = Истина;
		
		Попытка
			Таблица.ЗакончитьРедактированиеСтроки();
		Исключение
			ПолучилосьЗавершитьРедактирование = Ложь;
		КонецПопытки;
	КонецЦикла;	
	
КонецФункции


&НаКлиенте
//И у текущего элемента формы я вызываю запись содержимого в файл
//@УТекущегоЭлементаФормыЯВызываюЗаписьСодержимогоВФайл()
Функция УТекущегоЭлементаФормыЯВызываюЗаписьСодержимогоВФайл() Экспорт
	
	УТекущегоЭлементаФормыЯВызываюЗаписьСодержимогоВФайлСлужебный(Ложь);
	
КонецФункции

&НаКлиенте
//И у текущего элемента формы я вызываю запись содержимого в файл сохранить как
//@УТекущегоЭлементаФормыЯВызываюЗаписьСодержимогоВФайлСохранитьКак()
Функция УТекущегоЭлементаФормыЯВызываюЗаписьСодержимогоВФайлСохранитьКак() Экспорт
	
	УТекущегоЭлементаФормыЯВызываюЗаписьСодержимогоВФайлСлужебный(Истина);
	
КонецФункции

&НаКлиенте
Процедура УТекущегоЭлементаФормыЯВызываюЗаписьСодержимогоВФайлСлужебный(СохранитьКак)
	
    АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
    АктивнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
	
	ТекущееПоле = АктивнаяФорма.ПолучитьТекущийЭлемент();
	
	Если ТекущееПоле = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не найден активный элемент формы.");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если Ванесса.Версия8325ИлиВыше И СохранитьКак Тогда
		ТекущееПоле.ЗаписатьСодержимоеВФайл(СохранитьКак);
	ИначеЕсли НЕ Ванесса.Версия8325ИлиВыше И СохранитьКак Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Данная возможность работает только в платформе 8.3.25 и выше.");
		ВызватьИсключение ТекстСообщения;
	Иначе
		ТекущееПоле.ЗаписатьСодержимоеВФайл();
	КонецЕсли;	
	
	
КонецПроцедуры

&НаКлиенте
//И в таблице "ИмяТаблицы" я активизирую колонку "ИмяКолонки" в группе "ИмяГруппы"
//@ВТаблицеЯАктивизируюКолонкуВГруппе(Парам01,Парам02,Парам03)
Функция ВТаблицеЯАктивизируюКолонкуВГруппе(ИмяТаблицы,ИмяКолонки,ИмяГруппы,ИскатьКолонкуПоИмени = Ложь) Экспорт
	Таблица = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	ГруппаКолонок = Таблица.НайтиОбъект(Тип("ТестируемаяГруппаФормы"),ИмяГруппы);
	
	Если ГруппаКолонок = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Группа колонок <%1> в таблице <%2> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяГруппы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяТаблицы);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если ИскатьКолонкуПоИмени Тогда
		НужнаяКолонка = ГруппаКолонок.НайтиОбъект(Тип("ТестируемоеПолеФормы"),,ИмяКолонки);
	Иначе	
		НужнаяКолонка = ГруппаКолонок.НайтиОбъект(Тип("ТестируемоеПолеФормы"),ИмяКолонки);
	КонецЕсли;	 
	Если НужнаяКолонка = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> в группе колонок <%2> колонка <%3> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяГруппы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ИмяКолонки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	НужноеИмяПоля = НужнаяКолонка.Имя;
	ТекущийРежимРедактирование = Неопределено;
	Если Ванесса.Версия8312ИлиВыше Тогда
		ТекущийРежимРедактирование = Таблица.ТекущийРежимРедактирование();
	КонецЕсли;	 
	
	НужнаяКолонка.Активизировать();
	ПроверитьЧтоПолеТаблицыАктивизировалось(Таблица,ИмяТаблицы,ИмяКолонки,НужноеИмяПоля,ТекущийРежимРедактирование);
	
КонецФункции

&НаКлиенте
//И в таблице "ИмяТаблицы" я активизирую колонку с именем "ИмяКолонки" в группе "ИмяГруппы"
//@ВТаблицеЯАктивизируюКолонкуСИменемВГруппе(Парам01,Парам02,Парам03)
Функция ВТаблицеЯАктивизируюКолонкуСИменемВГруппе(ИмяТаблицы,ИмяКолонки,ИмяГруппы) Экспорт
	ВТаблицеЯАктивизируюКолонкуВГруппе(ИмяТаблицы,ИмяКолонки,ИмяГруппы,Истина);
КонецФункции



&НаКлиенте
//И в таблице "ИмяТаблицы" в текущее поле я ввожу текст "НужныйМнеТекст"
//@ВТаблицеВТекущееПолеЯВвожуТекст(Парам01,Парам02)
Функция ВТаблицеВТекущееПолеЯВвожуТекст(ИмяТаблицы,Текст) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	ПолеРеквизит = ТЧ.ПолучитьТекущийЭлемент();
	ИмяРеквизита = ПолеРеквизит.Имя;
	
	Текст = ПолучитьКорректныйТекстДляВставкиВПоле(Текст);
	
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			
			ТаблицаВРежимеРедактирования = ТЧ.ТекущийРежимРедактирование();
			Если Не ТаблицаВРежимеРедактирования Тогда
				ТЧ.ИзменитьСтроку();
			КонецЕсли;	 
			
			//ПолеРеквизит.ВвестиТекст(Текст);
			Ванесса.ВвестиВПолеТекст(ПолеРеквизит,Текст);
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	//Ванесса.УстановитьТекстИнструкции("И в поле """ + ИмяРеквизита + """ я ввожу """ + Текст + """");
КонецФункции



&НаКлиенте
//И я запоминаю версию конфигурации "ИмяКонфигурации" как "Версия"
//@ЯЗапоминаюВерсиюКонфигурацииКак(Парам01,Парам02)
Функция ЯЗапоминаюВерсиюКонфигурацииКак(ИмяКонфигурации,ИмяПеременной) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	ГлавноеОкноТестируемого = Ванесса.ПолучитьГлавноеОкноИзТестовоеПриложение();
	Попытка
	    ГлавноеОкноТестируемого.ВыполнитьКоманду("e1cib/list/РегистрСведений.ВерсииПодсистем");
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось открыть форму регистра сведений <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1","ВерсииПодсистем");
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	ТабПарам = Новый Массив;
	
	Структура = Новый Структура;
	Структура.Вставить("Кол1","Имя подсистемы");
	ТабПарам.Добавить(Структура);
	
	Структура = Новый Структура;
	Структура.Вставить("Кол1",ИмяКонфигурации);
	ТабПарам.Добавить(Структура);
	
	Попытка
		ВТаблицеЯПерехожуКСтроке("Список", ТабПарам);
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось найти подсистему <%1> в регистре версии подсистем.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяКонфигурации);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	ТаблицаСписок    = Ванесса.НайтиТЧПоИмени("Список");
	ВыделенныеСтроки = ТаблицаСписок.ПолучитьВыделенныеСтроки();
	
	Если ВыделенныеСтроки.Количество() <> 1 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось получить <%1> строк в таблице <%2>, а было получено <%3> строк.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1","1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2","Список");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ВыделенныеСтроки.Количество());
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ЗначениеВерсии = ВыделенныеСтроки[0]["Версия"];
	
	Попытка
		Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной,ЗначениеВерсии);
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось сохранить значение <%1> в переменную <%2>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ЗначениеВерсии);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	//закроем окно РС
	Попытка
		АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
		АктивноеОкно.Закрыть();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

&НаКлиенте
//И я запоминаю имя конфигурации как "ИмяПеременной"
//@ЯЗапоминаюИмяКонфигурацииКак(Парам01)
Функция ЯЗапоминаюИмяКонфигурацииКак(ИмяПеременной) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	ГлавноеОкноТестируемого = Ванесса.ПолучитьГлавноеОкноИзТестовоеПриложение();
	Попытка
	    ГлавноеОкноТестируемого.ВыполнитьКоманду("e1cib/list/РегистрСведений.ВерсииПодсистем");
	Исключение
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось открыть форму регистра сведений <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1","ВерсииПодсистем");
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	ТаблицаСписок = Ванесса.НайтиТЧПоИмени("Список");
	ТаблицаСписок.ВыделитьВсеСтроки();
	ВыделенныеСтроки = ТаблицаСписок.ПолучитьВыделенныеСтроки();
	Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
		Если ТекСтрока["Это основная конфигурация"] = "Да" Тогда
			Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, Строка(ТекСтрока["Имя подсистемы"]));
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	 
	
	//закроем окно РС
	Попытка
		АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
		АктивноеОкно.Закрыть();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции


&НаКлиенте
//И я включаю асинхронный режим выполнения шагов с интервалом 1
//@ЯВключаюАсинхронныйРежимВыполненияШаговСИнтервалом(Парам01)
Функция ЯВключаюАсинхронныйРежимВыполненияШаговСИнтервалом(Интервал) Экспорт
	Ванесса.ВключитьАсинхронныйРежимВыполненияШаговСИнтервалом(Интервал);
КонецФункции

&НаКлиенте
//И я отключаю асинхронный режим выполнения шагов
//@ЯОтключаюАсинхронныйРежимВыполненияШагов()
Функция ЯОтключаюАсинхронныйРежимВыполненияШагов() Экспорт
	Ванесса.ОтключитьАсинхронныйРежимВыполненияШагов();
КонецФункции


&НаКлиенте
//И в таблице "ИмяТаблицы" текущая строка помечена на удаление
//@ВТаблицеТекущаяСтрокаПомеченаНаУдаление()
Функция ВТаблицеТекущаяСтрокаПомеченаНаУдаление(ИмяТаблицы, ЭтоУсловие = Ложь) Экспорт
	ТаблицаКлиент = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	
	ТаблицаКлиент.ПереключитьПометкуУдаленияСтроки();
	
	ОкноПредупреждения = Неопределено;
	ТекстПредупреждения = Ванесса.ПолучитьТекстПредупреждения(ОкноПредупреждения);
	
	ЕстьПометка = Истина;
	Если Ванесса.ЭтоТекстДиалогаПредлагающегоПометитьЭлементНаУдаление(ТекстПредупреждения) Тогда
		ЕстьПометка = Ложь;
	КонецЕсли;	 
	
	ОкноПредупреждения.Закрыть();
	
	Если ЭтоУсловие Тогда
		Ванесса.УстановитьРезультатУсловия(ЕстьПометка);
	Иначе	
		Если НЕ ЕстьПометка Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Текущая строка таблицы <%1> не помечена на удаление.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//Если в таблице "ИмяТаблицы" текущая строка помечена на удаление тогда
//@ВТаблицеТекущаяСтрокаПомеченаНаУдалениеТогда()
Функция ВТаблицеТекущаяСтрокаПомеченаНаУдалениеТогда(ИмяТаблицы) Экспорт
	ВТаблицеТекущаяСтрокаПомеченаНаУдаление(ИмяТаблицы,Истина);
КонецФункции

&НаКлиенте
//И в таблице "ИмяТаблицы" текущая строка не помечена на удаление
//@ВТаблицеТекущаяСтрокаНеПомеченаНаУдаление()
Функция ВТаблицеТекущаяСтрокаНеПомеченаНаУдаление(ИмяТаблицы, ЭтоУсловие = Ложь) Экспорт
	ТаблицаКлиент = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	
	ТаблицаКлиент.ПереключитьПометкуУдаленияСтроки();
	
	ОкноПредупреждения = Неопределено;
	ТекстПредупреждения = Ванесса.ПолучитьТекстПредупреждения(ОкноПредупреждения);
	
	ЕстьПометка = Ложь;
	Если Ванесса.ЭтоТекстДиалогаПредлагающегоСнятьПометкуУдаления(ТекстПредупреждения) Тогда
		ЕстьПометка = Истина;
	КонецЕсли;	 
	
	ОкноПредупреждения.Закрыть();
	
	Если ЭтоУсловие Тогда
		Ванесса.УстановитьРезультатУсловия(НЕ ЕстьПометка);
	Иначе	
		Если ЕстьПометка Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Текущая строка таблицы <%1> помечена на удаление.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТаблицы);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//Если в таблице "ИмяТаблицы" текущая строка не помечена на удаление тогда
//@ВТаблицеТекущаяСтрокаНеПомеченаНаУдалениеТогда()
Функция ВТаблицеТекущаяСтрокаНеПомеченаНаУдалениеТогда(ИмяТаблицы) Экспорт
	ВТаблицеТекущаяСтрокаНеПомеченаНаУдаление(ИмяТаблицы,Истина);
КонецФункции


&НаКлиенте
//И у элемента формы с именем "ФормаКнопкаСПометкой" установлена пометка
//@УЭлементаФормыСИменемУстановленаПометка(Парам01)
Функция УЭлементаФормыУстановленаПометка(ИмяРеквизита) Экспорт
	УЭлементаФормыСИменемУстановленаПометка(ИмяРеквизита, Ложь);
КонецФункции

&НаКлиенте
//И у элемента формы с именем "ФормаКнопкаСПометкой" не установлена пометка
//@УЭлементаФормыСИменемНеУстановленаПометка(Парам01)
Функция УЭлементаФормыНеУстановленаПометка(ИмяРеквизита) Экспорт
	УЭлементаФормыСИменемНеУстановленаПометка(ИмяРеквизита, Ложь);
КонецФункции

&НаКлиенте
//И у элемента формы с именем "ФормаКнопкаСПометкой" установлена пометка
//@УЭлементаФормыСИменемУстановленаПометка(Парам01)
Функция УЭлементаФормыСИменемУстановленаПометка(ИмяРеквизита, ИскатьПоИмени = Истина) Экспорт
	ТекстОшибки = "";
	Ошибка = Ложь;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Ошибка = Ложь;
		ТекстОшибки = "";
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			Реквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,ИскатьПоИмени,,,ДопПараметры);
			
			Если НЕ Реквизит.ТекущееПометка() Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У элемента формы <%1> не установлена пометка.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Ошибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ Ошибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если Ошибка Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
КонецФункции

&НаКлиенте
//И у элемента формы с именем "ФормаКнопкаСПометкой" не установлена пометка
//@УЭлементаФормыСИменемНеУстановленаПометка(Парам01)
Функция УЭлементаФормыСИменемНеУстановленаПометка(ИмяРеквизита, ИскатьПоИмени = Истина) Экспорт
	Реквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени);	
	Если Реквизит.ТекущееПометка() Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У элемента формы <%1> установлена пометка.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И я сохраняю навигационную ссылку текущего окна в переменную "ИмяПеременной"
//@ЯСохраняюНавигационнуюСсылкуТекущегоОкнаВПеременную(Парам01)
Функция ЯСохраняюНавигационнуюСсылкуТекущегоОкнаВПеременную(ИмяПеременной) Экспорт
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	Если АктивноеОкно = Неопределено Тогда
		ВызватьИсключение "Не обнаружено активное окно.";
	КонецЕсли;
	
	Если Ванесса.Версия8325ИлиВыше Тогда
		Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, АктивноеОкно.НавигационнаяСсылка);
		Возврат Неопределено;
	КонецЕсли;	
	
	ТекстОшибки = "";
	Ошибка = Ложь;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		Ошибка = Ложь;
		ТекстОшибки = "";
		
		Попытка
			ПанельОткрытых = Ванесса.ПанельОткрытых();
			КнопкаКомандногоИнтерфейса = ПанельОткрытых.НайтиОбъект(Тип("ТестируемаяКнопкаКомандногоИнтерфейса"), АктивноеОкно.Заголовок);
	
			Если КнопкаКомандногоИнтерфейса = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Кнопка панели открытых окон <%1> не найдена.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", АктивноеОкно.Заголовок); 
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, КнопкаКомандногоИнтерфейса.НавигационнаяСсылка);
			
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Ошибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ Ошибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если Ошибка Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецФункции



&НаКлиенте
//И я закрываю выпадающий список "ИмяРеквизита"
//@ЯЗакрываюВыпадающийСписок(Парам01)
Функция ЯЗакрываюВыпадающийСписок(ИмяПоля, ИскатьПоИмени = Ложь) Экспорт
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоля, ИскатьПоИмени);
	ЭлементФормы.ЗакрытьВыпадающийСписок();
КонецФункции

&НаКлиенте
//И я закрываю выпадающий список с именем "ИмяРеквизита"
//@ЯЗакрываюВыпадающийСписокСИменем(Парам01)
Функция ЯЗакрываюВыпадающийСписокСИменем(ИмяПоля) Экспорт
	ЯЗакрываюВыпадающийСписок(ИмяПоля, Истина);
КонецФункции

&НаКлиенте
//И в таблице "ИмяТаблицы" я закрываю выпадающий список "ИмяРеквизита"
//@ВТаблицеЯЗакрываюВыпадающийСписок(Парам01,Парам02)
Функция ВТаблицеЯЗакрываюВыпадающийСписок(ИмяТаблицы, ИмяПоля, ИскатьПоИмени = Ложь) Экспорт
	Таблица = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТаблицы, ИмяПоля, ИскатьПоИмени, Таблица);
	ПолеРеквизит.ЗакрытьВыпадающийСписок();
КонецФункции

&НаКлиенте
//И в таблице "ИмяТаблицы" я закрываю выпадающий список с именем "ИмяРеквизита"
//@ВТаблицеЯЗакрываюВыпадающийСписокСИменем(Парам01,Парам02)
Функция ВТаблицеЯЗакрываюВыпадающийСписокСИменем(ИмяТаблицы,ИмяПоля) Экспорт
	ВТаблицеЯЗакрываюВыпадающийСписок(ИмяТаблицы, ИмяПоля, Истина);
КонецФункции

&НаКлиенте
//И я запоминаю адрес текущей ячейки "ИмяРеквизита" в переменную "ИмяПеременной"
//@ЯЗапоминаюАдресТекущейЯчейкиВПеременную(Парам01,Парам02)
Функция ЯЗапоминаюАдресТекущейЯчейкиВПеременную(ИмяРеквизита, ИмяПеременной) Экспорт
	ПолеТабДок = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, Истина, Истина, Тип("ТестируемоеПолеФормы"));
	АдресТекущейОбласти = ПолеТабДок.ПолучитьАдресТекущейОбласти();
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, АдресТекущейОбласти);
КонецФункции

&НаКлиенте
//И я запоминаю значение текущей ячейки "ИмяРеквизита" в переменную "ИмяПеременной"
//@ЯЗапоминаюЗначениеТекущейЯчейкиВПеременную(Парам01,Парам02)
Функция ЯЗапоминаюЗначениеТекущейЯчейкиВПеременную(ИмяРеквизита, ИмяПеременной) Экспорт
	ПолеТабДок = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, Истина, Истина, Тип("ТестируемоеПолеФормы"));
	ЗначениеТекущейОбласти = ПолеТабДок.ПолучитьТекстОбласти();
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, ЗначениеТекущейОбласти);
КонецФункции

&НаКлиенте
//И я копирую переменную "ИмяПеременной1" в "ИмяПеременной2"
//@ЯКопируюПеременнуюВ(Парам01,Парам02)
Функция ЯКопируюПеременнуюВ(ИмяПеременной1, ИмяПеременной2) Экспорт
	Значение = Ванесса.ПолучитьСохраненноеЗначениеИзКонтекста(ИмяПеременной1);
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной2, Значение);
КонецФункции

&НаКлиенте
//И я включаю чтение табличных документов только по ячейкам
//@ЯВключаюЧтениеТабличныхДокументовТолькоПоЯчейкам()
Функция ЯВключаюЧтениеТабличныхДокументовТолькоПоЯчейкам() Экспорт
	Ванесса.СохранениеМакетовВФайлПриЧтенииДанных(Ложь);
КонецФункции

&НаКлиенте
//И я выключаю чтение табличных документов только по ячейкам
//@ЯВыключаюЧтениеТабличныхДокументовТолькоПоЯчейкам()
Функция ЯВыключаюЧтениеТабличныхДокументовТолькоПоЯчейкам() Экспорт
	Ванесса.СохранениеМакетовВФайлПриЧтенииДанных(Истина);
КонецФункции


&НаКлиенте
//И я запоминаю тип текущего поля в переменную "ИмяПеременной"
//@ЯЗапоминаюТипТекущегоПоляВПеременную(Парам01)
Функция ЯЗапоминаюТипТекущегоПоляВПеременную(ИмяПеременной) Экспорт
	ТекущееПолеФормы = Ванесса.ТекущееПолеФормы();
	Если ТекущееПолеФормы = Неопределено Тогда
		ВызватьИсключение Ванесса.Локализовать("Не найден активный элемент формы.");
	КонецЕсли;	 
	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, Строка(ТипЗнч(ТекущееПолеФормы)));
КонецФункции

&НаКлиенте
//И я запоминаю вид текущего поля в переменную "ИмяПеременной"
//@ЯЗапоминаюВидТекущегоПоляВПеременную(Парам01)
Функция ЯЗапоминаюВидТекущегоПоляВПеременную(ИмяПеременной) Экспорт
	ТекущееПолеФормы = Ванесса.ТекущееПолеФормы();
	Если ТекущееПолеФормы = Неопределено Тогда
		ВызватьИсключение Ванесса.Локализовать("Не найден активный элемент формы.");
	КонецЕсли;	 
	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, Строка(ТекущееПолеФормы.Вид));
КонецФункции

&НаКлиенте
//Дано это Linux
//@ЭтоLinux()
Функция ЭтоLinux() Экспорт
	Если НЕ Ванесса.ЭтоLinux Тогда
		СисИнфо = Новый СистемнаяИнформация;
		ТекстСообщения = "Менеджер тестирования запущен не в Linux. Текущие данные ОС: <%1>.";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СисИнфо.ТипПлатформы);
		ВызватьИсключение Ванесса.Локализовать(ТекстСообщения);
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//И  у поля "Заголовок элемента" я жду значения отличного от "Значение" в течение 20 секунд
//@УПоляЯЖдуЗначенияОтличногоОтВТечениеСекунд(Парам01,Парам02,Парам03)
Функция УПоляЯЖдуЗначенияОтличногоОтВТечениеСекунд(ИмяПоля,Значение,КоличествоСекунд, ИскатьПоИмени = Ложь) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = ИмяПоля;
	ИскатьПоИмениОбрабткаОжидания     = ИскатьПоИмени;
	ЗначениеОбрабткаОжидания          = Значение;
	ВидСравненияОбрабткаОжидания      = "<>";
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ОбработчикУПоляЯЖдуЗначенияОтличногоОтВТечениеСекунд",1,Ложь);
КонецФункции

&НаКлиенте
//И  у поля с именем "ИмяЭлемента" я жду значения отличного от "Значение" в течение 20 секунд
//@УПоляСИменемЯЖдуЗначенияОтличногоОтВТечениеСекунд(Парам01,Парам02,Парам03)
Функция УПоляСИменемЯЖдуЗначенияОтличногоОтВТечениеСекунд(ИмяПоля,Значение,КоличествоСекунд) Экспорт
	УПоляЯЖдуЗначенияОтличногоОтВТечениеСекунд(ИмяПоля,Значение,КоличествоСекунд, Истина);
КонецФункции

&НаКлиенте
Функция ОбработчикУПоляЯЖдуЗначенияОтличногоОтВТечениеСекунд()
	ИмяОбработчика = "ОбработчикУПоляЯЖдуЗначенияОтличногоОтВТечениеСекунд";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоляОбработкаОжидания,ИскатьПоИмениОбрабткаОжидания,Ложь);
	
	Если ЭлементФормы <> Неопределено Тогда
		ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(ЭлементФормы);
		Если ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка Тогда
			ПредставлениеДанных = ПривестиЗначениеФлагаКСтандарту(ПредставлениеДанных);
		КонецЕсли;	 
		
		Если ВидСравненияОбрабткаОжидания = "=" Тогда
			Если (ПредставлениеДанных <> Неопределено) И (НРег(ЗначениеОбрабткаОжидания) = НРег(ПредставлениеДанных)) Тогда
				ОтключитьОбработчикОжидания(ИмяОбработчика);
				Ванесса.ПродолжитьВыполнениеШагов();
				Возврат Неопределено;
			КонецЕсли;
		Иначе	
			Если (ПредставлениеДанных <> Неопределено) И (НРег(ЗначениеОбрабткаОжидания) <> НРег(ПредставлениеДанных)) Тогда
				ОтключитьОбработчикОжидания(ИмяОбработчика);
				Ванесса.ПродолжитьВыполнениеШагов();
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Если ВидСравненияОбрабткаОжидания = "=" Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд у поля <%2> значения <%3>. Текущее значение <%4>.");
		Иначе	
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд у поля <%2> значения отличного от <%3>. Текущее значение <%4>.");
		КонецЕсли;	 
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоляОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ЗначениеОбрабткаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ПредставлениеДанных);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;	 
	
КонецФункции



&НаКлиенте
//И я закрываю форму "Заголовок формы"
//@ЯЗакрываюФорму(Парам01)
Функция ЯЗакрываюФорму(Имя, ИскатьПоИмени = Ложь) Экспорт
	
	НашлиФорму = Ложь;
	
	СтрокаОшибки = "";
	БылаОшибка = Ложь;
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			ОкнаПриложения = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
			Для Каждого ТекОкно Из ОкнаПриложения Цикл
				Если ИскатьПоИмени Тогда
					ТекФорма = ТекОкно.НайтиОбъект(Тип("ТестируемаяФорма"),, Имя);
				Иначе	
					ТекФорма = ТекОкно.НайтиОбъект(Тип("ТестируемаяФорма"), Имя);
				КонецЕсли;
				
				Если ТекФорма <> Неопределено  Тогда
					ТекОкно.Закрыть();
					НашлиФорму = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		Иначе
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
	
	Если НЕ НашлиФорму Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Форма <%1> не найдена.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Имя);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И я закрываю форму с именем "ИмяФормы"
//@ЯЗакрываюФормуСИменем(Парам01)
Функция ЯЗакрываюФормуСИменем(Имя) Экспорт
	ЯЗакрываюФорму(Имя, Истина);
КонецФункции

&НаКлиенте
Функция ОбработчикОжиданияЯЖдуЗакрытияФормыВТечениеСекунд()
	ИмяОбработчика = "ОбработчикОжиданияЯЖдуЗакрытияФормыВТечениеСекунд";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	НашлиФорму = Ложь;
	Попытка
		
		ОкнаПриложения = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
		Для Каждого ТекОкно Из ОкнаПриложения Цикл
			Если ИскатьПоИмениОбрабткаОжидания Тогда
				ТекФорма = ТекОкно.НайтиОбъект(Тип("ТестируемаяФорма"),, ИмяПоляОбработкаОжидания);
			Иначе	
				ТекФорма = ТекОкно.НайтиОбъект(Тип("ТестируемаяФорма"), ИмяПоляОбработкаОжидания);
			КонецЕсли;
			
			Если ТекФорма <> Неопределено  Тогда
				НашлиФорму = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Если НЕ НашлиФорму Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд закрытия формы <%2>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоляОбработкаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;	 
	
КонецФункции 

&НаКлиенте
//И я жду закрытия формы "Заголовок формы" в течение 10 секунд
//@ЯЖдуЗакрытияФормыВТечениеСекунд(Парам01)
Функция ЯЖдуЗакрытияФормыВТечениеСекунд(Имя, КоличествоСекунд, ИскатьПоИмени = Ложь) Экспорт
	
	Ванесса.ЗапретитьВыполнениеШагов();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = Имя;
	ИскатьПоИмениОбрабткаОжидания     = ИскатьПоИмени;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияЯЖдуЗакрытияФормыВТечениеСекунд", 1, Ложь);
	
КонецФункции

&НаКлиенте
//И я жду закрытия формы с именем "ИмяФормы" в течение 10 секунд
//@ЯЖдуЗакрытияФормыСИменемВТечениеСекунд(Парам01)
Функция ЯЖдуЗакрытияФормыСИменемВТечениеСекунд(Имя, КоличествоСекунд) Экспорт
	
	ЯЖдуЗакрытияФормыВТечениеСекунд(Имя, КоличествоСекунд, Истина);
	
КонецФункции

&НаКлиенте
//И я запоминаю имя формы в переменную "ИмяФормы"
//@ЯЗапоминаюИмяФормыВПеременную(Парам01)
Функция ЯЗапоминаюИмяФормыВПеременную(ИмяПеременной) Экспорт
	
    АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
    АктивнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, АктивнаяФорма.ИмяФормы);
	
КонецФункции

&НаКлиенте
//И я запоминаю заголовок формы в переменную "ЗаголовокФормы"
//@ЯЗапоминаюЗаголовокФормыВПеременную(Парам01)
Функция ЯЗапоминаюЗаголовокФормыВПеременную(ИмяПеременной) Экспорт
	
    АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
    АктивнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, АктивнаяФорма.ТекстЗаголовка);
	
КонецФункции

&НаКлиенте
Функция ОбработчикОжиданияЯЖдуОткрытияФормыВТечениеСекунд()
	ИмяОбработчика = "ОбработчикОжиданияЯЖдуОткрытияФормыВТечениеСекунд";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	Попытка
	    АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
		Если ИскатьПоИмениОбрабткаОжидания Тогда
		    АктивнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"),, ИмяПоляОбработкаОжидания);
		Иначе	
		    АктивнаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"), ИмяПоляОбработкаОжидания);
		КонецЕсли;
		
		Если АктивнаяФорма <> Неопределено Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчика);
			Ванесса.ПродолжитьВыполнениеШагов();
			Возврат Неопределено;
		КонецЕсли;	 
		
	Исключение
	КонецПопытки;
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд открытия формы <%2>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоляОбработкаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;	 
	
КонецФункции 

&НаКлиенте
//И я жду открытия формы "Заголовок формы" в течение 10 секунд
//@ЯЖдуОткрытияФормыВТечениеСекунд(Парам01,Парам02)
Функция ЯЖдуОткрытияФормыВТечениеСекунд(Имя, КоличествоСекунд, ИскатьПоИмени = Ложь) Экспорт

	Ванесса.ЗапретитьВыполнениеШагов();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = Имя;
	ИскатьПоИмениОбрабткаОжидания     = ИскатьПоИмени;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияЯЖдуОткрытияФормыВТечениеСекунд", 1, Ложь);
	
КонецФункции

&НаКлиенте
//И я жду открытия формы с именем "ИмяФормы" в течение 10 секунд
//@ЯЖдуОткрытияФормыСИменемВТечениеСекунд(Парам01,Парам02)
Функция ЯЖдуОткрытияФормыСИменемВТечениеСекунд(Имя, КоличествоСекунд) Экспорт
	ЯЖдуОткрытияФормыВТечениеСекунд(Имя, КоличествоСекунд, Истина);
КонецФункции

&НаСервере
Функция ПолучитьОбычныйТекстИзHtmlСервер(ПредставлениеДанных)
	РеквизитФорматированныйДокумент.УстановитьHTML(ПредставлениеДанных, Новый Структура);
	Возврат РеквизитФорматированныйДокумент.ПолучитьТекст();
КонецФункции	

&НаКлиенте
//Тогда HTML документ "ПриветственнаяИнформация" стал равен
//@HTMLДокументСталРавен(Парам01, Парам02)
Функция HTMLДокументСталРавен(ИмяЭлемента, Знач СтроковоеПредставление, ИскатьПоИмени = Ложь) Экспорт
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	ТекстСообщения = "";
	БылаОшибка = Ложь;
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		ТекстСообщения = "";
		БылаОшибка = Ложь;
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ИсключитьГруппы",Истина);
			ДопПараметры.Вставить("ИсключитьНедоступныеДляИнтерактивнойРаботыЭлементы",Ложь);
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента, ИскатьПоИмени,,,ДопПараметры);
			Если Ванесса.Версия8325ИлиВыше Тогда
				ПредставлениеДанных = "";
				Вложения = Новый Соответствие;
				ЭлементФормы.ПолучитьHTMLДокумента(ПредставлениеДанных, Вложения);
			Иначе
				СтроковоеПредставление = ПолучитьКорректныйТекстДляВставкиВПоле(СтроковоеПредставление);
				ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(ЭлементФормы);
			КонецЕсли;	
			
			Если НЕ Ванесса.СтрокиРавны(ПредставлениеДанных,СтроковоеПредставление) Тогда
				//Попытка получить неформатированный текст из HTML
				ТекстовоеСодержимое = ПолучитьОбычныйТекстИзHtmlСервер(ПредставлениеДанных);
				СтрокаДляСравненияТекстовоеСодержимое = СтрЗаменить(ТекстовоеСодержимое, Символы.ВК, Символы.ПС);
				СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, Символы.ВК, Символы.ПС);
				
				СтрокаДляСравненияТекстовоеСодержимое = СокрЛП(СтрЗаменить(СтрокаДляСравненияТекстовоеСодержимое, Символы.НПП, " "));
				СтроковоеПредставление = СокрЛП(СтрЗаменить(СтроковоеПредставление, Символы.НПП, " "));
				
				Если НЕ Ванесса.СтрокиРавныКакМассивСтрок(СтрокаДляСравненияТекстовоеСодержимое, СтроковоеПредставление) Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Для элемента формы <%1> текущее значение равно:%2, а ожидалось:%3");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Символы.ПС + СтрокаДляСравненияТекстовоеСодержимое + Символы.ПС);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Символы.ПС + СтроковоеПредставление);
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	
				
			КонецЕсли;	 
			
			Прервать;
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
//Тогда HTML документ с именем "ПриветственнаяИнформация" стал равен
//@HTMLДокументСИменемСталРавен(Парам01)
Функция HTMLДокументСИменемСталРавен(ИмяЭлемента, Знач СтроковоеПредставление) Экспорт
	HTMLДокументСталРавен(ИмяЭлемента, СтроковоеПредставление, Истина);
КонецФункции

&НаКлиенте
//И в таблице "ИмяТаблицы" есть колонки
//@ВТаблицеЕстьКолонки(Парам01,ТабПарам)
Функция ВТаблицеЕстьКолонки(ИмяТЧ, ТабПарам, ИскатьПоИмени = Ложь) Экспорт
	
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		Если ИскатьПоИмени Тогда
			КолонкаТаблицы = ТЧ.НайтиОбъект(,, СтрокаТабПарам.Кол1);
		Иначе	
			КолонкаТаблицы = ТЧ.НайтиОбъект(, СтрокаТабПарам.Кол1);
		КонецЕсли;
		
		Если КолонкаТаблицы = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> не найдена колонка <%2>.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",СтрокаТабПарам.Кол1);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЦикла;	 
	
КонецФункции

&НаКлиенте
//И в таблице "ИмяТаблицы" есть колонки с именем
//@ВТаблицеЕстьКолонкиСИменем(Парам01,ТабПарам)
Функция ВТаблицеЕстьКолонкиСИменем(ИмяТЧ, ТабПарам) Экспорт
	
	ВТаблицеЕстьКолонки(ИмяТЧ, ТабПарам, Истина);
	
КонецФункции

&НаКлиенте
//И я запоминаю количество окон в переменную "ИмяПеременной"
//@ЯЗапоминаюКоличествоОконВПеременную(Парам01)
Функция ЯЗапоминаюКоличествоОконВПеременную(ИмяПеременной) Экспорт
	
	Значение = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения")).Количество();
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, Значение);
	
КонецФункции


&НаКлиенте
//И выпадающий список формы не содержит дублирующихся значений
//@ВыпадающийСписокФормыНеСодержитДублирующихсяЗначений()
Функция ВыпадающийСписокФормыНеСодержитДублирующихсяЗначений() Экспорт
	
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			
			ТекФорма = ТекущаяФормаИзКлиентаТестирования();
			
			Попытка
				ПредставлениеСпискаВыбора = Ванесса.ДополнитьПредставлениеСпискаВыбора(ТекФорма.ПолучитьПредставлениеСпискаВыбора());
			Исключение
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить представление открытого списка выбора привязанного к форме.");
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			
			Если ПредставлениеСпискаВыбора = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить представление открытого списка выбора привязанного к форме.");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			МассивОшибок = Новый Массив;
			
			КонтрольУникальности = Новый Соответствие;
			Для Каждого Элем Из ПредставлениеСпискаВыбора Цикл
				Если КонтрольУникальности[НРег(Элем.ОтображаемыйТекст)] <> Неопределено Тогда
					МассивОшибок.Добавить(Элем.ОтображаемыйТекст);
					Продолжить;
				КонецЕсли;	 
				
				КонтрольУникальности.Вставить(НРег(Элем.ОтображаемыйТекст), Истина);
				
			КонецЦикла;	 
			
			Если МассивОшибок.Количество() > 0 Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Открытый список выбора привязанный к форме содержит дублирующиеся значения: %1");
				
				Стр = Символы.ПС;
				Для Каждого Элем Из МассивОшибок Цикл
					Стр = Стр + Элем + Символы.ПС;
				КонецЦикла;	
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Стр);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
//И выпадающий список "Заголовок элемента" не содержит дублирующихся значений
//@ВыпадающийСписокНеСодержитДублирующихсяЗначений(Парам01)
Функция ВыпадающийСписокНеСодержитДублирующихсяЗначений(ИмяЭлемента, ИскатьПоИмени = Ложь) Экспорт
	
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"), ДопПараметры);
			
			Попытка
				ПредставлениеСпискаВыбора = Ванесса.ДополнитьПредставлениеСпискаВыбора(ЭлементФормы.ПолучитьПредставлениеСпискаВыбора());
			Исключение
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить представление открытого списка выбора <%1>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			
			Если ПредставлениеСпискаВыбора = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не вышло получить представление открытого списка выбора <%1>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			МассивОшибок = Новый Массив;
			
			КонтрольУникальности = Новый Соответствие;
			Для Каждого Элем Из ПредставлениеСпискаВыбора Цикл
				Если КонтрольУникальности[НРег(Элем.ОтображаемыйТекст)] <> Неопределено Тогда
					МассивОшибок.Добавить(Элем.ОтображаемыйТекст);
					Продолжить;
				КонецЕсли;	 
				
				КонтрольУникальности.Вставить(НРег(Элем.ОтображаемыйТекст), Истина);
				
			КонецЦикла;	 
			
			Если МассивОшибок.Количество() > 0 Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Открытый список выбора <%1> содержит дублирующиеся значения: %2");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяЭлемента);
				
				Стр = Символы.ПС;
				Для Каждого Элем Из МассивОшибок Цикл
					Стр = Стр + Элем + Символы.ПС;
				КонецЦикла;	
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Стр);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
//И выпадающий список с именем  "ИмяЭлемента" не содержит дублирующихся значений
//@ВыпадающийСписокСИменемНеСодержитДублирующихсяЗначений(Парам01)
Функция ВыпадающийСписокСИменемНеСодержитДублирующихсяЗначений(ИмяЭлемента) Экспорт
	
	ВыпадающийСписокНеСодержитДублирующихсяЗначений(ИмяЭлемента, Истина);
	
КонецФункции


&НаКлиенте
//И Я устанавливаю фильтр на список
//@ЯУстанавливаюФильтрНаСписок(ТабПарам)
Функция ЯУстанавливаюФильтрНаСписок(ТабПарам, ЕслиЭтоВозможно = Ложь) Экспорт
	
	ТекЯзык = "ru";
	Элемент = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("*НастройкаСписка",Истина, Ложь);
	Если Элемент = Неопределено Тогда
		ТекЯзык = "en";
	КонецЕсли;
	
	Если ТекЯзык = "ru" Тогда
		ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком("*НастройкаСписка", Истина);
	Иначе	
		ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком("*ListSettings", Истина);
	КонецЕсли;	 
	
	Если ТекЯзык = "ru" Тогда
		ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком("ФормаСтандартныеНастройки", Истина);
	Иначе	
		ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком("FormStandardSettings", Истина);
	КонецЕсли;	 
	
	ВОткрытойФормеЯПерехожуКЗакладкеСЗаголовком("Отбор");
	
	Если ЕслиЭтоВозможно Тогда
		ДляКаждойСтрокиТаблицыОтбораЯУстанавливаюОтборВСпискеЕслиЭтоВозможно(ТабПарам);
	Иначе	
		ДляКаждойСтрокиТаблицыОтбораЯУстанавливаюОтборВСписке(ТабПарам);
	КонецЕсли;	 
	
	Если ТекЯзык = "ru" Тогда
		ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком("ФормаЗакончитьРедактирование", Истина);
	Иначе	
		ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком("FormEndEdit", Истина);
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И Я устанавливаю фильтр на список если это возможно
//@ЯУстанавливаюФильтрНаСписокЕслиЭтоВозможно(ТабПарам)
Функция ЯУстанавливаюФильтрНаСписокЕслиЭтоВозможно(ТабПарам) Экспорт
	ЯУстанавливаюФильтрНаСписок(ТабПарам, Истина);
КонецФункции


&НаКлиенте
//И Я очищаю фильтр на форме списка
//@ЯОчищаюФильтрНаФормеСписка()
Функция ЯОчищаюФильтрНаФормеСписка() Экспорт
	
	ТекЯзык = "ru";
	Элемент = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("*НастройкаСписка",Истина, Ложь);
	Если Элемент = Неопределено Тогда
		ТекЯзык = "en";
	КонецЕсли;
	
	Если ТекЯзык = "ru" Тогда
		ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком("*НастройкаСписка", Истина);
	Иначе	
		ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком("*ListSettings", Истина);
	КонецЕсли;	 
	
	Если ТекЯзык = "ru" Тогда
		ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком("ФормаСтандартныеНастройки", Истина);
	Иначе	
		ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком("FormStandardSettings", Истина);
	КонецЕсли;	 
	
	Если ТекЯзык = "ru" Тогда
		ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком("ФормаЗакончитьРедактирование", Истина);
	Иначе	
		ВОткрытойФормеЯНажимаюНаКнопкуСЗаголовком("FormEndEdit", Истина);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
//И Я устанавливаю фильтр на список если это возможно ru
//@ЯУстанавливаюФильтрНаСписокЕслиЭтоВозможноRu()
Функция ЯУстанавливаюФильтрНаСписокЕслиЭтоВозможноRu(ТабПарам) Экспорт
	ЯУстанавливаюФильтрНаСписокЕслиЭтоВозможно(ТабПарам);
КонецФункции


&НаКлиенте
//И для каждой строки таблицы отбора я устанавливаю отбор в списке
//@ДляКаждойСтрокиТаблицыОтбораЯУстанавливаюОтборВСписке(ТабПарам)
Функция ДляКаждойСтрокиТаблицыОтбораЯУстанавливаюОтборВСписке(ТабПарам,ВызыватьИсключениеЕслиНетТакогоФильтра = Истина) Экспорт
	//ТабПарам = Ванесса.ПолучитьЗначенияТаблицыGherkinИзКонтекста(ТабПарам);
	
	Для Каждого СтрокаФильтра Из ТабПарам Цикл
		НадоПродолжить = Ложь;
		
		Если СтрокаФильтра.Количество() = 4 И ЗначениеЗаполнено(СтрокаФильтра.Кол4) Тогда
			ЭтоДата = Истина;
		Иначе
			ЭтоДата = Ложь;
		КонецЕсли;
		
		МассивСтрок = Ванесса.РазложитьСтрокуВМассивПодстрокКлиент(СтрокаФильтра.Кол1,".");
		
		АктивноеОкно           = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
		ТаблицаНастройкаСписка = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"),,"КомпоновщикНастроекПользовательскиеНастройкиЭлемент*ДоступныеПоляТаблица");
		Если ТаблицаНастройкаСписка = Неопределено Тогда
			ТаблицаНастройкаСписка = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"),,"SettingsComposerUserSettingsItem*AvailableFieldsTable");
		КонецЕсли;	 
		КолонкиТаблицаНастройкаСписка = ТаблицаНастройкаСписка.НайтиОбъекты();
		ТаблицаНастройкаСписка.ПерейтиКПервойСтроке();
		Язык = "ru";
		Для Каждого Элем Из КолонкиТаблицаНастройкаСписка Цикл
			Если Найти(Нрег(Элем.ТекстЗаголовка),"field") > 0 Тогда
				Язык = "en";
			КонецЕсли;	 
		КонецЦикла;	 
		
		Ном = 0;
		Для Каждого СтрокаДляПерехода Из МассивСтрок Цикл
			Ном = Ном + 1;
			
			ОписаниеСтроки_ru = Новый Соответствие;
			ОписаниеСтроки_en = Новый Соответствие;
			ОписаниеСтроки_ru.Вставить("Доступные поля",СтрокаДляПерехода);
			ОписаниеСтроки_en.Вставить("Available fields",СтрокаДляПерехода);
			
			
			Попытка
				ТаблицаНастройкаСписка.ПерейтиКСтроке(ОписаниеСтроки_ru,Вычислить("НаправлениеПереходаКСтроке.Вниз"),Ложь);
			Исключение
				Попытка
					ТаблицаНастройкаСписка.ПерейтиКСтроке(ОписаниеСтроки_en,Вычислить("НаправлениеПереходаКСтроке.Вниз"),Ложь);
				Исключение
					
					Если ВызыватьИсключениеЕслиНетТакогоФильтра Тогда
						ВызватьИсключение ОписаниеОшибки();
					Иначе
						НадоПродолжить = Истина;
						Прервать;
					КонецЕсли;	 
				КонецПопытки;
			КонецПопытки;
			
			Если НадоПродолжить Тогда
				Продолжить;
			КонецЕсли;	
			
			ТекущийТекстЯчейки = ТаблицаНастройкаСписка.ПолучитьТекстЯчейки();
			Если ТекущийТекстЯчейки <> СтрокаДляПерехода Тогда
				//Значит не получилось перейти к нужной строке.
				//Но почему-то в этом окне не вызвалось исключение
				Если ВызыватьИсключениеЕслиНетТакогоФильтра Тогда
					ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не получилось перейти к строке фильтра <%1>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаДляПерехода);
					ВызватьИсключение ТекстСообщения;
				Иначе
					НадоПродолжить = Истина;
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	
			
			Если Ном < МассивСтрок.Количество() Тогда
				Попытка
					ТаблицаНастройкаСписка.Развернуть();
					ТаблицаНастройкаСписка.ПерейтиКСледующейСтроке();
				Исключение
				КонецПопытки;
			КонецЕсли;	 
			
		КонецЦикла;	 
		
		Если НадоПродолжить Тогда
			Продолжить;
		КонецЕсли;	
		
		ТЧ = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"),,"КомпоновщикНастроекПользовательскиеНастройкиЭлемент*Отбор");
		//SettingsComposerUserSettingsItem0Filter
		Если ТЧ = Неопределено Тогда
			ТЧ = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"),,"SettingsComposerUserSettingsItem*Filter");
		КонецЕсли;	 
		Кнопка = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"КомпоновщикНастроекПользовательскиеНастройкиЭлемент*ДоступныеПоляВыбрать");
		//SettingsComposerUserSettingsItem0AvailableFieldsChoose
		Если Кнопка = Неопределено Тогда
			Кнопка = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"SettingsComposerUserSettingsItem*AvailableFieldsChoose");
		КонецЕсли;	 
		Кнопка.Нажать();
		
		ЗакладкаОтбор = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяГруппаФормы"),,"КомпоновщикНастроекПользовательскиеНастройкиЭлемент*");
		//SettingsComposerUserSettingsItem0
		Если ЗакладкаОтбор = Неопределено Тогда
			ЗакладкаОтбор = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяГруппаФормы"),,"SettingsComposerUserSettingsItem*");
		КонецЕсли;	 
		ЗакладкаОтбор.Активизировать();
		
		ТЧ.Активизировать();
		ПолеВидСравнения  = ТЧ.НайтиОбъект(Тип("ТестируемоеПолеФормы"),,"КомпоновщикНастроекПользовательскиеНастройкиЭлемент*ОтборВидСравнения");
		//SettingsComposerUserSettingsItem0FilterComparisonType
		Если ПолеВидСравнения = Неопределено Тогда
			ПолеВидСравнения  = ТЧ.НайтиОбъект(Тип("ТестируемоеПолеФормы"),,"SettingsComposerUserSettingsItem*FilterComparisonType");
		КонецЕсли;	 
		ПолеВидСравнения.Активизировать();
		
		ВидСравненияТекст = ТЧ.ПолучитьТекстЯчейки();
		
		ПолеЗначение = ТЧ.НайтиОбъект(Тип("ТестируемоеПолеФормы"),,"КомпоновщикНастроекПользовательскиеНастройкиЭлемент*ОтборПравоеЗначение");
		//SettingsComposerUserSettingsItem0FilterRightValue
		Если ПолеЗначение = Неопределено Тогда
			ПолеЗначение = ТЧ.НайтиОбъект(Тип("ТестируемоеПолеФормы"),,"SettingsComposerUserSettingsItem*FilterRightValue");
		КонецЕсли;	 
		
		Если ЭтоДата Тогда
			ПравоеЗначениеТекст = ТЧ.ПолучитьТекстЯчейки();
		Иначе
			ПолеЗначение.Активизировать();
			ТЧ.ИзменитьСтроку();
			ПолеЗначение.ВвестиТекст(СтрокаФильтра.Кол3);
		КонецЕсли;
		
		Если ЭтоДата Тогда
			ПолеДата = ТЧ.НайтиОбъект(Тип("ТестируемоеПолеФормы"),,"КомпоновщикНастроекПользовательскиеНастройкиЭлемент*ОтборДата");
			Если Не ПолеДата = Неопределено Тогда
				ПолеДата.Активизировать();
				ТЧ.ИзменитьСТроку();
				Если ЗначениеЗаполнено(СТрокаФильтра.Кол4) Тогда
					мДата = СтрокаФильтра.Кол4;
				Иначе
					мДата = ДАТА(1, 1, 1);
				КонецЕсли;
				ПолеДата.ВвестиТекст(Строка(мДата));
			КонецЕсли;
		КонецЕсли;
		
		Если НРег(СокрЛП(ВидСравненияТекст)) <> НРег(СокрЛП(СтрокаФильтра.Кол2)) Тогда
			ПолеВидСравнения.Активизировать();
			ПолеВидСравнения.ВвестиТекст(СтрокаФильтра.Кол2);
		КонецЕсли;
		
		Если ЭтоДата Тогда
			Если НРег(СокрЛП(ПравоеЗначениеТекст)) <> НРег(СокрЛП(СтрокаФильтра.Кол3)) Тогда
				ПолеЗначение.Активизировать();
				ПолеЗначение.ВвестиТекст(СтрокаФильтра.Кол3);
			КонецЕсли;
		КонецЕсли;
		
		ТЧ.ЗакончитьРедактированиеСтроки();
	КонецЦикла;
	
КонецФункции


&НаКлиенте
//И для каждой строки таблицы отбора я устанавливаю отбор в списке если это возможно
//@ДляКаждойСтрокиТаблицыОтбораЯУстанавливаюОтборВСпискеЕслиЭтоВозможно(ТабПарам)
Функция ДляКаждойСтрокиТаблицыОтбораЯУстанавливаюОтборВСпискеЕслиЭтоВозможно(ТабПарам) Экспорт
	ДляКаждойСтрокиТаблицыОтбораЯУстанавливаюОтборВСписке(ТабПарам,Ложь);	
КонецФункции


&НаКлиенте
//И текущая строка таблицы "ИмяТаблицы" развернута
//@ТекущаяСтрокаТаблицыРазвернута(Парам01)
Функция ТекущаяСтрокаТаблицыРазвернута(ИмяТаблицы, ПроверятьРазвернута = Истина) Экспорт
	ТаблицаСписок = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	
	Если ПроверятьРазвернута И НЕ ТаблицаСписок.Развернут() Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что текущая строка таблицы <%1> будет развернута.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяТаблицы); 
		ВызватьИсключение ТекстСообщения;
	ИначеЕсли НЕ ПроверятьРазвернута И ТаблицаСписок.Развернут() Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидалось, что текущая строка таблицы <%1> будет свернута.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяТаблицы); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
//И текущая строка таблицы "ИмяТаблицы" свернута
//@ТекущаяСтрокаТаблицыСвернута(Парам01)
Функция ТекущаяСтрокаТаблицыСвернута(ИмяТаблицы) Экспорт
	ТекущаяСтрокаТаблицыРазвернута(ИмяТаблицы, Ложь);
КонецФункции

&НаКлиенте
Процедура ДействиеСДополнениемЭлементаФормыТаблицы(ИмяТаблицы, ИмяЭлемента, ИскатьПоИмени, ДопПараметрыЭлемента)
	
	СтрокаОшибки = "";
	БылаОшибка = Ложь;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТипПоля", Тип("ТестируемоеДополнениеЭлементаФормы"));
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
		
		Попытка
			Таблица = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
			ПолеРеквизит = Ванесса.НайтиРеквизитТаблицы(ИмяТаблицы, ИмяЭлемента, ИскатьПоИмени, Таблица, ДопПараметры);
			Если ДопПараметрыЭлемента.Действие = "ВвестиТекст" Тогда
				ПолеРеквизит.ВвестиТекст(ДопПараметрыЭлемента.Текст);
			ИначеЕсли ДопПараметрыЭлемента.Действие = "Активизировать" Тогда
				ПолеРеквизит.Активизировать();
			ИначеЕсли ДопПараметрыЭлемента.Действие = "Очистить" Тогда
				ПолеРеквизит.Очистить();
			ИначеЕсли ДопПараметрыЭлемента.Действие = "ОтменитьРедактирование" Тогда
				ПолеРеквизит.ОтменитьРедактирование();
			КонецЕсли;
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//И в таблице "Список" я активизирую дополнение формы "СписокСтрокаПоиска"
//@ВТаблицеЯАктивизируюДополнениеФормы(Парам01,Парам02)
Функция ВТаблицеЯАктивизируюДополнениеФормы(ИмяТаблицы, ИмяЭлемента, ИскатьПоИмени = Ложь) Экспорт
	
	ДопПараметрыЭлемента = Новый Структура;
	ДопПараметрыЭлемента.Вставить("Действие", "Активизировать");
	ДействиеСДополнениемЭлементаФормыТаблицы(ИмяТаблицы, ИмяЭлемента, ИскатьПоИмени, ДопПараметрыЭлемента);
	
КонецФункции

&НаКлиенте
//И в таблице "Список" я активизирую дополнение формы с именем "СписокСтрокаПоиска"
//@ВТаблицеЯАктивизируюДополнениеФормыСИменем(Парам01,Парам02)
Функция ВТаблицеЯАктивизируюДополнениеФормыСИменем(ИмяТаблицы, ИмяЭлемента) Экспорт
	ВТаблицеЯАктивизируюДополнениеФормы(ИмяТаблицы, ИмяЭлемента, Истина);
КонецФункции

&НаКлиенте
//И в таблице "Список" в дополнение формы 'СписокСтрокаПоиска' я ввожу текст '111'
//@ВТаблицеВДополнениеФормыЯВвожуТекст(Парам01,Парам02,Парам03)
Функция ВТаблицеВДополнениеФормыЯВвожуТекст(ИмяТаблицы, ИмяЭлемента, Текст, ИскатьПоИмени = Ложь) Экспорт
	
	ДопПараметрыЭлемента = Новый Структура;
	ДопПараметрыЭлемента.Вставить("Действие", "ВвестиТекст");
	ДопПараметрыЭлемента.Вставить("Текст", Текст);
	ДействиеСДополнениемЭлементаФормыТаблицы(ИмяТаблицы, ИмяЭлемента, ИскатьПоИмени, ДопПараметрыЭлемента);
	
КонецФункции

&НаКлиенте
//И в таблице "Список" в дополнение формы с именем 'СписокСтрокаПоиска' я ввожу текст '111'
//@ВТаблицеВДополнениеФормыСИменемЯВвожуТекст(Парам01,Парам02,Парам03)
Функция ВТаблицеВДополнениеФормыСИменемЯВвожуТекст(ИмяТаблицы, ИмяЭлемента, Текст) Экспорт
	ВТаблицеВДополнениеФормыЯВвожуТекст(ИмяТаблицы, ИмяЭлемента, Текст, Истина);
КонецФункции

&НаКлиенте
//И в таблице "Список" я нажимаю кнопку очистить у дополнения формы "СписокСтрокаПоиска"
//@ВТаблицеЯНажимаюКнопкуОчиститьУДополненияФормы(Парам01,Парам02)
Функция ВТаблицеЯНажимаюКнопкуОчиститьУДополненияФормы(ИмяТаблицы, ИмяЭлемента, ИскатьПоИмени = Ложь) Экспорт
	
	ДопПараметрыЭлемента = Новый Структура;
	ДопПараметрыЭлемента.Вставить("Действие", "Очистить");
	ДействиеСДополнениемЭлементаФормыТаблицы(ИмяТаблицы, ИмяЭлемента, ИскатьПоИмени, ДопПараметрыЭлемента);
	
КонецФункции

&НаКлиенте
//И в таблице "Список" я нажимаю кнопку очистить у дополнения формы с именем "СписокСтрокаПоиска"
//@ВТаблицеЯНажимаюКнопкуОчиститьУДополненияФормыСИменем(Парам01,Парам02)
Функция ВТаблицеЯНажимаюКнопкуОчиститьУДополненияФормыСИменем(ИмяТаблицы,ИмяЭлемента) Экспорт
	ВТаблицеЯНажимаюКнопкуОчиститьУДополненияФормы(ИмяТаблицы, ИмяЭлемента, Истина);
КонецФункции

&НаКлиенте
//И в таблице "Список" я отменяю редактирование очистить у дополнения формы "СписокСтрокаПоиска"
//@ВТаблицеЯОтменяюРедактированиеУДополненияФормы(Парам01,Парам02)
Функция ВТаблицеЯОтменяюРедактированиеУДополненияФормы(ИмяТаблицы, ИмяЭлемента, ИскатьПоИмени = Ложь) Экспорт
	
	ДопПараметрыЭлемента = Новый Структура;
	ДопПараметрыЭлемента.Вставить("Действие", "ОтменитьРедактирование");
	ДействиеСДополнениемЭлементаФормыТаблицы(ИмяТаблицы, ИмяЭлемента, ИскатьПоИмени, ДопПараметрыЭлемента);
	
КонецФункции

&НаКлиенте
//И в таблице "Список" я отменяю редактирование у дополнения формы с именем "СписокСтрокаПоиска"
//@ВТаблицеЯОтменяюРедактированиеУДополненияФормыСИменем(Парам01,Парам02)
Функция ВТаблицеЯОтменяюРедактированиеУДополненияФормыСИменем(ИмяТаблицы,ИмяЭлемента) Экспорт
	ВТаблицеЯОтменяюРедактированиеУДополненияФормы(ИмяТаблицы, ИмяЭлемента, Истина);
КонецФункции



&НаКлиенте
Процедура ДействиеСДополнениемЭлементаФормы(ИмяЭлемента, ИскатьПоИмени, ДопПараметрыЭлемента)
	
	СтрокаОшибки = "";
	БылаОшибка = Ложь;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КоличествоПопыток", 1);
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
		
		Попытка
			ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента, ИскатьПоИмени, Истина, Тип("ТестируемоеДополнениеЭлементаФормы"),ДопПараметры);	
			Если ДопПараметрыЭлемента.Действие = "ВвестиТекст" Тогда
				ПолеРеквизит.ВвестиТекст(ДопПараметрыЭлемента.Текст);
			ИначеЕсли ДопПараметрыЭлемента.Действие = "Активизировать" Тогда
				ПолеРеквизит.Активизировать();
			ИначеЕсли ДопПараметрыЭлемента.Действие = "Очистить" Тогда
				ПолеРеквизит.Очистить();
			ИначеЕсли ДопПараметрыЭлемента.Действие = "ОтменитьРедактирование" Тогда
				ПолеРеквизит.ОтменитьРедактирование();
			КонецЕсли;
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//И я активизирую дополнение формы "Заголовок элемента"
//@ЯАктивизируюДополнениеФормы(Парам01)
Функция ЯАктивизируюДополнениеФормы(ИмяЭлемента) Экспорт
	
	ДопПараметрыЭлемента = Новый Структура;
	ДопПараметрыЭлемента.Вставить("Действие", "Активизировать");
	ДействиеСДополнениемЭлементаФормы(ИмяЭлемента, Ложь, ДопПараметрыЭлемента);
	
КонецФункции

&НаКлиенте
//И я активизирую дополнение формы с именем "ИмяЭлемента"
//@ЯАктивизируюДополнениеФормыСИменем(Парам01)
Функция ЯАктивизируюДополнениеФормыСИменем(ИмяЭлемента) Экспорт
	
	ДопПараметрыЭлемента = Новый Структура;
	ДопПараметрыЭлемента.Вставить("Действие", "Активизировать");
	ДействиеСДополнениемЭлементаФормы(ИмяЭлемента, Истина, ДопПараметрыЭлемента);
	
КонецФункции

&НаКлиенте
//И я отменяю редактирование у дополнения формы "Заголовок элемента"
//@ЯОтменяюРедактированиеУДополненияФормы(Парам01,Парам02)
Функция ЯОтменяюРедактированиеУДополненияФормы(ИмяЭлемента) Экспорт
	
	ДопПараметрыЭлемента = Новый Структура;
	ДопПараметрыЭлемента.Вставить("Действие", "ОтменитьРедактирование");
	ДействиеСДополнениемЭлементаФормы(ИмяЭлемента, Ложь, ДопПараметрыЭлемента);
	
КонецФункции

&НаКлиенте
//И я отменяю редактирование у дополнения формы с именем "ИмяЭлемента"
//@ЯОтменяюРедактированиеУДополненияФормыСИменем(Парам01,Парам02)
Функция ЯОтменяюРедактированиеУДополненияФормыСИменем(ИмяЭлемента) Экспорт
	
	ДопПараметрыЭлемента = Новый Структура;
	ДопПараметрыЭлемента.Вставить("Действие", "ОтменитьРедактирование");
	ДействиеСДополнениемЭлементаФормы(ИмяЭлемента, Истина, ДопПараметрыЭлемента);
	
КонецФункции

&НаКлиенте
//И я нажимаю кнопку очистить у дополнения формы "Заголовок элемента"
//@ЯНажимаюКнопкуОчиститьУДополненияФормы(Парам01)
Функция ЯНажимаюКнопкуОчиститьУДополненияФормы(ИмяЭлемента) Экспорт
	
	ДопПараметрыЭлемента = Новый Структура;
	ДопПараметрыЭлемента.Вставить("Действие", "Очистить");
	ДействиеСДополнениемЭлементаФормы(ИмяЭлемента, Ложь, ДопПараметрыЭлемента);
	
КонецФункции

&НаКлиенте
//И я нажимаю кнопку очистить у дополнения формы с именем "ИмяЭлемента"
//@ЯНажимаюКнопкуОчиститьУДополненияФормыСИменем(Парам01)
Функция ЯНажимаюКнопкуОчиститьУДополненияФормыСИменем(ИмяЭлемента) Экспорт
	
	ДопПараметрыЭлемента = Новый Структура;
	ДопПараметрыЭлемента.Вставить("Действие", "Очистить");
	ДействиеСДополнениемЭлементаФормы(ИмяЭлемента, Истина, ДопПараметрыЭлемента);
	
КонецФункции

&НаКлиенте
//И в дополнение формы "Заголовок элемента" я ввожу текст '111'
//@ВДополнениеФормыЯВвожуТекст(Парам01,Парам02)
Функция ВДополнениеФормыЯВвожуТекст(ИмяЭлемента, Текст) Экспорт
	
	ДопПараметрыЭлемента = Новый Структура;
	ДопПараметрыЭлемента.Вставить("Действие", "ВвестиТекст");
	ДопПараметрыЭлемента.Вставить("Текст", Текст);
	ДействиеСДополнениемЭлементаФормы(ИмяЭлемента, Ложь, ДопПараметрыЭлемента);
	
КонецФункции

&НаКлиенте
//И в дополнение формы с именем "ИмяЭлемента" я ввожу текст '111'
//@ВДополнениеФормыСИменемЯВвожуТекст(Парам01,Парам02)
Функция ВДополнениеФормыСИменемЯВвожуТекст(ИмяЭлемента, Текст) Экспорт
	
	ДопПараметрыЭлемента = Новый Структура;
	ДопПараметрыЭлемента.Вставить("Действие", "ВвестиТекст");
	ДопПараметрыЭлемента.Вставить("Текст", Текст);
	ДействиеСДополнениемЭлементаФормы(ИмяЭлемента, Истина, ДопПараметрыЭлемента);
	
КонецФункции

&НаКлиенте
//И реквизиты формы имеют значение:
//@РеквизитыФормыИмеютЗначение(ТабПарам)
Функция РеквизитыФормыИмеютЗначение(ТабПарам, ПоШаблону = Ложь) Экспорт
	
	СтрокаПоИмени = НРег(Ванесса.Локализовать("ПоИмени"));
	СтрокаПоЗаголовку = НРег(Ванесса.Локализовать("ПоЗаголовку"));
	
	СтрокаОшибки = "";
	БылаОшибка = Ложь;
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
		
		Попытка
			
			МассивОшибок = Новый Массив;
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			Сч = 0;
			Для Каждого СтрокаТабПарам Из ТабПарам Цикл
				Сч = Сч + 1;
				
				Если Сч = 1 Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяЭлемента = СтрокаТабПарам.Кол1;
				СтроковоеПредставление = СтрокаТабПарам.Кол2;
				
				ИскатьПоИмени = Истина;
				Если СтрокаТабПарам.Свойство("Кол3") Тогда
					Если НЕ ЗначениеЗаполнено(СтрокаТабПарам.Кол3) Тогда
						ИскатьПоИмени = Истина;
					ИначеЕсли НРег(СтрокаТабПарам.Кол3) = СтрокаПоИмени Тогда
						ИскатьПоИмени = Истина;
					ИначеЕсли НРег(СтрокаТабПарам.Кол3) = СтрокаПоЗаголовку Тогда
						ИскатьПоИмени = Ложь;
					Иначе
						ТекстОшибки = Ванесса.ПодставитьПараметрыВСтроку(Ванесса.Локализовать("В третьей колонке передано недопустимое значение <%1>."), СтрокаТабПарам.Кол3);
						ВызватьИсключение ТекстОшибки;
					КонецЕсли;	
				КонецЕсли;	
				
				Попытка
					ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента, ИскатьПоИмени, Истина, Тип("ТестируемоеПолеФормы"),ДопПараметры);	
					ПредставлениеДанных = Неопределено;
					ПараметрыПроверки = Новый Структура;
					ПараметрыПроверки.Вставить("СчетчикПопыток", СчетчикПопыток);
					ПараметрыПроверки.Вставить("КоличествоПопыток", КоличествоПопыток);
					ПараметрыПроверки.Вставить("ПолучатьШаблон", Ложь);
					ПараметрыПроверки.Вставить("ОбернутьВУгловыеСкобки", Истина);
					ПараметрыПроверки.Вставить("ПоШаблону", ПоШаблону);
					ПроверитьЗначениеЭлементаФормы(ЭлементФормы, СтроковоеПредставление, ИмяЭлемента, ПредставлениеДанных, ПараметрыПроверки);
				Исключение
					МассивОшибок.Добавить(СтрЗаменить(Ванесса.УбратьТехническиеДанныеИзСтроки(ОписаниеОшибки()), Символы.ПС , ""));
				КонецПопытки;
				
			КонецЦикла;
			
			Если МассивОшибок.Количество() > 0 Тогда
				ВызватьИсключение Ванесса._СтрСоединить(МассивОшибок, Символы.ПС);
			КонецЕсли;	
			
		Исключение
			СтрокаОшибки = Ванесса.УбратьТехническиеДанныеИзСтроки(ОписаниеОшибки());
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И реквизиты формы имеют значение по шаблону:
//@РеквизитыФормыИмеютЗначениеПоШаблону(ТабПарам)
Функция РеквизитыФормыИмеютЗначениеПоШаблону(ТабПарам) Экспорт
	
	РеквизитыФормыИмеютЗначение(ТабПарам, Истина);
	
КонецФункции

&НаКлиенте
//И состояние табличного документа "ИмяЭлемента" равно "Текст"
//@СостояниеТабличногоДокументаРавно(Парам01,Парам02)
Функция СостояниеТабличногоДокументаРавно(ИмяРеквизита, Текст) Экспорт
	
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,Истина, Истина, Тип("ТестируемоеПолеФормы"));
	ОтображениеСостояния = ПолеРеквизит.ПолучитьОтображениеСостояния();
	Если ОтображениеСостояния = Неопределено Тогда
		ТекущийТекст = "";
	Иначе	
		ТекущийТекст = ОтображениеСостояния.Текст;
	КонецЕсли;
	
	Если ТекущийТекст <> Текст Тогда
		ТекстСообщения = Ванесса.Локализовать("У табличного документа <%1> отображаемое состояние ожидалось <%2>, а не <%3>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Текст);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ТекущийТекст);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	
	
КонецФункции


&НаКлиенте
Функция ОбработчикЯЖдуСостоянияТабличногоДокументаВТечениеСекунд()
	ИмяОбработчика = "ОбработчикЯЖдуСостоянияТабличногоДокументаВТечениеСекунд";
	ТекущийТекст = Неопределено;
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	Попытка
		ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоляОбработкаОжидания, Истина, Истина, Тип("ТестируемоеПолеФормы"));
	Исключение
		ПолеРеквизит = Неопределено;
	КонецПопытки;
	
	Если ПолеРеквизит = Неопределено Тогда
		Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчика);
			ТекстСообщения = Ванесса.Локализовать("Поле табличного документа <%1> не найдено.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПоляОбработкаОжидания);
			Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
	Иначе	
		Попытка
			ОтображениеСостояния = ПолеРеквизит.ПолучитьОтображениеСостояния();
			Если ОтображениеСостояния = Неопределено Тогда
				ТекущийТекст = "";
			Иначе	
				ТекущийТекст = ОтображениеСостояния.Текст;
			КонецЕсли;
			Если ТекущийТекст = ТекстОбработкаОжидания Тогда
				ОтключитьОбработчикОжидания(ИмяОбработчика);
				Ванесса.ПродолжитьВыполнениеШагов();
				Возврат Неопределено;
			КонецЕсли;	
		Исключение
		КонецПопытки;
	КонецЕсли;	 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = Ванесса.Локализовать("У табличного документа <%1> отображаемое состояние ожидалось <%2>, а не <%3> в течение <%4> секунд.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПоляОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТекстОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ТекущийТекст);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",КоличествоСекундОбработкаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
//И я жду состояния табличного документа "ИмяЭлемента" "Текст" в течение 10 секунд
//@ЯЖдуСостоянияТабличногоДокументаВТечениеСекунд(Парам01,Парам02,Парам03)
Функция ЯЖдуСостоянияТабличногоДокументаВТечениеСекунд(ИмяРеквизита,Текст,КоличествоСекунд) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = ИмяРеквизита;
	ТекстОбработкаОжидания            = Текст;
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	ПодключитьОбработчикОжидания("ОбработчикЯЖдуСостоянияТабличногоДокументаВТечениеСекунд",1,Ложь);
КонецФункции

&НаКлиенте
//И я запоминаю состояние табличного документа "ИмяЭлемента" в переменную "ИмяПеременной"
//@ЯЗапоминаюСостояниеТабличногоДокументаВПеременную(Парам01,Парам02)
Функция ЯЗапоминаюСостояниеТабличногоДокументаВПеременную(ИмяРеквизита,ИмяПеременной) Экспорт
	
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,Истина, Истина, Тип("ТестируемоеПолеФормы"));
	ОтображениеСостояния = ПолеРеквизит.ПолучитьОтображениеСостояния();
	Если ОтображениеСостояния = Неопределено Тогда
		ТекущийТекст = "";
	Иначе	
		ТекущийТекст = ОтображениеСостояния.Текст;
	КонецЕсли;
	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, ТекущийТекст);
	
КонецФункции

&НаКлиенте
//И я запоминаю текст предупреждения в переменную "ИмяПеременной"
//@ЯЗапоминаюТекстПредупрежденияВПеременную(Парам01)
Функция ЯЗапоминаюТекстПредупрежденияВПеременную(ИмяПеременной) Экспорт
	
	БылаОшибка = Ложь;
	СтрокаОшибки = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоСекундПоискаОкна();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
		
		Нашли = Ложь;
		НужноеОкно = Неопределено;
		
		Попытка
			ОкнаПриложения = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
			Для Каждого ОкноПриложения Из ОкнаПриложения Цикл
				Если Ванесса.ЭтоМодальныйДиалог(ОкноПриложения) Тогда
					НужноеОкно = ОкноПриложения;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
			
			Если НужноеОкно = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Окно предупреждения не найдено.");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Ванесса.ЗапомнитьАктивноеОкно(НужноеОкно);
			
			ТекстПредупреждения = Ванесса.ТекстПредупреждения(НужноеОкно);
			Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, ТекстПредупреждения);
			
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И в таблице 'Список' я меняю пометку удаления строки
//@ВТаблицеЯМеняюПометкуУдаленияСтроки(Парам01)
Функция ВТаблицеЯМеняюПометкуУдаленияСтроки(ИмяТаблицы) Экспорт
	ТекТаблица = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	ТекТаблица.ПереключитьПометкуУдаленияСтроки();
КонецФункции

&НаКлиенте
//И в таблице 'Список' я устанавливаю сортировку по колонке "ИмяКолонки"
//@ВТаблицеЯУстанавливаюСортировкуПоКолонке(Парам01,Парам02)
Функция ВТаблицеЯУстанавливаюСортировкуПоКолонке(ИмяТаблицы, ИмяКолонки) Экспорт
	ТекТаблица = Ванесса.НайтиТЧПоИмени(ИмяТаблицы);
	ТекТаблица.УстановитьПорядок(ИмяКолонки);
КонецФункции


&НаКлиенте
Процедура ВПолеHTMLДокументаЯНажимаюГиперссылкуСлужебный(ИмяЭлемента,ИмяГиперссылки, ИскатьПоИмени)
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени);
	ЭлементФормы.НажатьНаГиперссылкуВHTMLДокументе(ИмяГиперссылки); //ИмяГиперссылки может быть как строкой так и числом
КонецПроцедуры

&НаКлиенте
//И в поле HTML документа "Заголовок элемента" я нажимаю гиперссылку "ИмяГиперссылки"
//@ВПолеHTMLДокументаЯНажимаюГиперссылку(Парам01,Парам02)
Функция ВПолеHTMLДокументаЯНажимаюГиперссылку(ИмяЭлемента,ИмяГиперссылки) Экспорт
	ВПолеHTMLДокументаЯНажимаюГиперссылкуСлужебный(ИмяЭлемента,ИмяГиперссылки, Ложь);
КонецФункции

&НаКлиенте
//И в поле HTML документа с именем "ИмяЭлемента" я нажимаю гиперссылку "ИмяГиперссылки"
//@ВПолеHTMLДокументаСИменемЯНажимаюГиперссылку(Парам01,Парам02)
Функция ВПолеHTMLДокументаСИменемЯНажимаюГиперссылку(ИмяЭлемента,ИмяГиперссылки) Экспорт
	ВПолеHTMLДокументаЯНажимаюГиперссылкуСлужебный(ИмяЭлемента,ИмяГиперссылки, Истина);
КонецФункции


&НаКлиенте
Функция ТекущаяФормаИзКлиентаТестирования()
	МассивФорм = НайтиФормыТекущегоОкна();
	Возврат МассивФорм[0];
КонецФункции	

&НаКлиенте
//И форма текущего окна имеет признак только просмотр
//@ФормаТекущегоОкнаИмеетПризнакТолькоПросмотр()
Функция ФормаТекущегоОкнаИмеетПризнакТолькоПросмотр() Экспорт
	
	ТекФорма = ТекущаяФормаИзКлиентаТестирования();
	Если НЕ ТекФорма.ТекущееТолькоПросмотр() Тогда
		ВызватьИсключение Ванесса.Локализовать("Ожидалось, что текущая форма будет иметь признак ТолькоПросмотр.");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
//И форма текущего окна не имеет признак только просмотр
//@ФормаТекущегоОкнаНеИмеетПризнакТолькоПросмотр()
Функция ФормаТекущегоОкнаНеИмеетПризнакТолькоПросмотр() Экспорт
	ТекФорма = ТекущаяФормаИзКлиентаТестирования();
	Если ТекФорма.ТекущееТолькоПросмотр() Тогда
		ВызватьИсключение Ванесса.Локализовать("Ожидалось, что текущая форма не будет иметь признак ТолькоПросмотр.");
	КонецЕсли;
КонецФункции

&НаКлиенте
//И форма текущего окна доступна для редактирования
//@ФормаТекущегоОкнаДоступнаДляРедактирования()
Функция ФормаТекущегоОкнаДоступнаДляРедактирования() Экспорт
	
	ТекФорма = ТекущаяФормаИзКлиентаТестирования();
	Если НЕ ТекФорма.ТекущаяДоступность() Тогда
		ВызватьИсключение Ванесса.Локализовать("Ожидалось, что текущая форма будет доступна для редактирования.");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
//И форма текущего окна недоступна для редактирования
//@ФормаТекущегоОкнаНедоступнаДляРедактирования()
Функция ФормаТекущегоОкнаНедоступнаДляРедактирования() Экспорт
	
	ТекФорма = ТекущаяФормаИзКлиентаТестирования();
	Если ТекФорма.ТекущаяДоступность() Тогда
		ВызватьИсключение Ванесса.Локализовать("Ожидалось, что текущая форма будет недоступна для редактирования.");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УПоляОтображаетсяЗаголовокСлужебный(ИмяПоля, ИскатьПоИмени, Отображается)
	
	Поле = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоля, ИскатьПоИмени);
	
	ТекЗаголовокОтображается = Поле.ЗаголовокОтображается();
	
	Если ТекЗаголовокОтображается <> Отображается Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("У поля <%1> ожидалось что отображение заголовка равно <%2>, а текущее значение равено <%3>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПоля);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Отображается);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ТекЗаголовокОтображается);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//И у поля 'Заголовок элемента' отображается заголовок
//@УПоляОтображаетсяЗаголовок(ИмяПоля)
Функция УПоляОтображаетсяЗаголовок(ИмяПоля) Экспорт
	
	УПоляОтображаетсяЗаголовокСлужебный(ИмяПоля, Ложь, Истина);
	
КонецФункции

&НаКлиенте
//И у поля 'Заголовок элемента' не отображается заголовок
//@УПоляОтображаетсяЗаголовок(ИмяПоля)
Функция УПоляНеОтображаетсяЗаголовок(ИмяПоля) Экспорт
	
	УПоляОтображаетсяЗаголовокСлужебный(ИмяПоля, Ложь, Ложь);
	
КонецФункции

&НаКлиенте
//И у поля с именем 'ИмяЭлемента' отображается заголовок
//@УПоляСИменемОтображаетсяЗаголовок(ИмяПоля)
Функция УПоляСИменемОтображаетсяЗаголовок(ИмяПоля) Экспорт

	УПоляОтображаетсяЗаголовокСлужебный(ИмяПоля, Истина, Истина);

КонецФункции

&НаКлиенте
//И у поля с именем 'ИмяЭлемента' не отображается заголовок
//@УПоляСИменемНеОтображаетсяЗаголовок(ИмяПоля)
Функция УПоляСИменемНеОтображаетсяЗаголовок(ИмяПоля) Экспорт

	УПоляОтображаетсяЗаголовокСлужебный(ИмяПоля, Истина, Ложь);

КонецФункции

&НаКлиенте
//И в табличном документе 'ИмяРеквизита' в ячейке 'R2C2' текст находится в пределах границ области
//@ВТабличномДокументеВЯчейкеТекстНаходитсяВПределахГраницОбласти(Парам01,Парам02)
Функция ВТабличномДокументеВЯчейкеТекстНаходитсяВПределахГраницОбласти(ИмяРеквизита, АдресЯчейки) Экспорт
	
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,Истина, Истина, Тип("ТестируемоеПолеФормы"), ДопПараметры);
			
			Если ЗначениеЗаполнено(АдресЯчейки) Тогда
				Результат = ЭлементФормы.ТекстВПределахГраницОбласти(АдресЯчейки);
			Иначе	
				Результат = ЭлементФормы.ТекстВПределахГраницОбласти();
			КонецЕсли;	
			
			Если НЕ Результат Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что у табличного документа <%1> в ячейке с адресом <%2> текст будет находиться в границах области.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",АдресЯчейки);
				
				ТабДокСтало = Ванесса.ПолучитьТабДокИзTestClientКакМассив(ЭлементФормы);
				ТекущееЗначениеМакета = Ванесса.ПреобразоватьЗначениеВМакет(ТабДокСтало);
				Ванесса.ПрикрепитьМакетКСценарию(ТекущееЗначениеМакета,Ванесса.Локализовать("ТекущееЗначениеМакета"));
				
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Прервать;
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ВТабличномДокументеОбластьВходитВОбъединеннуюОбластьСлужебный(ИмяРеквизита, ИмяОбласти, ПроверятьВхождение)
	
	БылаОшибка = Ложь;
	ТекстСообщения = "";
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		
		Попытка
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПопыток", 1);
			ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,Истина, Истина, Тип("ТестируемоеПолеФормы"), ДопПараметры);
			
			Если ЗначениеЗаполнено(ИмяОбласти) Тогда
				Результат = ЭлементФормы.ВходитВОбъединеннуюОбласть(ИмяОбласти);
			Иначе	
				Результат = ЭлементФормы.ВходитВОбъединеннуюОбласть();
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Результат) И ПроверятьВхождение Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что у табличного документа <%1> область (ячейка) с адресом <%2> будет входить в объединенную область.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяОбласти);
				
				ТабДокСтало = Ванесса.ПолучитьТабДокИзTestClientКакМассив(ЭлементФормы);
				ТекущееЗначениеМакета = Ванесса.ПреобразоватьЗначениеВМакет(ТабДокСтало);
				Ванесса.ПрикрепитьМакетКСценарию(ТекущееЗначениеМакета,Ванесса.Локализовать("ТекущееЗначениеМакета"));
				
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Если ЗначениеЗаполнено(Результат) И НЕ ПроверятьВхождение Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали, что у табличного документа <%1> область (ячейка) с адресом <%2> не будет входить в объединенную область.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяРеквизита);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяОбласти);
				
				ТабДокСтало = Ванесса.ПолучитьТабДокИзTestClientКакМассив(ЭлементФормы);
				ТекущееЗначениеМакета = Ванесса.ПреобразоватьЗначениеВМакет(ТабДокСтало);
				Ванесса.ПрикрепитьМакетКСценарию(ТекущееЗначениеМакета,Ванесса.Локализовать("ТекущееЗначениеМакета"));
				
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			
			Прервать;
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если Не БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//И в табличном документе 'РеквизитТабличныйДокумент' область 'ИмяОбласти' входит в объединенную область
//@ВТабличномДокументеОбластьВходитВОбъединеннуюОбласть(Парам01,Парам02)
Функция ВТабличномДокументеОбластьВходитВОбъединеннуюОбласть(ИмяРеквизита, ИмяОбласти) Экспорт
	
	ВТабличномДокументеОбластьВходитВОбъединеннуюОбластьСлужебный(ИмяРеквизита, ИмяОбласти, Истина);
	
КонецФункции

&НаКлиенте
//И в табличном документе 'РеквизитТабличныйДокумент' область 'ИмяОбласти' не входит в объединенную область
//@ВТабличномДокументеОбластьНеВходитВОбъединеннуюОбласть(Парам01,Парам02)
Функция ВТабличномДокументеОбластьНеВходитВОбъединеннуюОбласть(ИмяРеквизита, ИмяОбласти) Экспорт
	
	ВТабличномДокументеОбластьВходитВОбъединеннуюОбластьСлужебный(ИмяРеквизита, ИмяОбласти, Ложь);
	
КонецФункции

&НаКлиенте
//И в табличном документе 'ИмяРеквизита' в меню расшифровки я выбираю 'ПунктМеню'
//@ВТабличномДокументеВМенюРасшифровкиЯВыбираю(Парам01,Парам02)
Функция ВТабличномДокументеВМенюРасшифровкиЯВыбираю(ИмяРеквизита, ПунктМеню) Экспорт
	
	ПолеТабличногоДокумента = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, Истина, Истина, Тип("ТестируемоеПолеФормы"));
	ПолеТабличногоДокумента.ВыполнитьВыборИзМенюРасшифровки(ПунктМеню);
	
КонецФункции


&НаКлиенте
Функция ПолучитьДатуИзСтрокиВремени(Знач СтрВремя)
	Массив = Ванесса._СтрРазделить(СтрВремя, ":");
	Если Массив.Количество() <> 3 Тогда
		ТекстСообщения = Ванесса.Локализовать("Параметр времени <%1> должен быть передать в формате ""23:30:00""");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрВремя);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	
	
	Попытка
		Дат = Дата(1,1,1, Число(Массив[0]), Число(Массив[1]), Число(Массив[2]));
	Исключение
		ТекстСообщения = Ванесса.Локализовать("Не получилось вычислить время по строке <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрВремя);
		ТекстСообщения = ТекстСообщения + Символы.ПС + ОписаниеОшибки();
		
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Возврат Дат;
	
КонецФункции	

&НаКлиенте
//И текущее время в диапазоне от "23:30:00" до "23:59:59"
//@ТекущееВремяВДиапазонеОтДо(Парам01,Парам02)
Функция ТекущееВремяВДиапазонеОтДо(Время1, Время2) Экспорт
	
	ТекВремяСтр = Формат(ТекущаяДата(), "ДФ=HH:mm:ss");
	ТекДата = ПолучитьДатуИзСтрокиВремени(ТекВремяСтр);
	
	Дат1 = ПолучитьДатуИзСтрокиВремени(Время1);
	Дат2 = ПолучитьДатуИзСтрокиВремени(Время2);
	
	Если Дат2 < Дат1 Тогда
		//Значит надо добавить сутки
		Дат2 = Дат2 + 60*60*24;
	КонецЕсли;
	
	Если НЕ (ТекДата >= Дат1 И ТекДата <= Дат2) Тогда
		ТекстСообщения = Ванесса.Локализовать("Ожидалось, что текущее время <%1> будет в диапазоне от <%2> до <%3>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ТекВремяСтр);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Время1);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", Время2);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	
	
КонецФункции


&НаКлиенте
Процедура ОбработчикОжиданияЯЖдуНаступленияВремени()
	
	ИмяОбработчика = "ОбработчикОжиданияЯЖдуНаступленияВремени";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();

	ТекДата = ТекущаяДата();
	Если ТекДата >= ДатаНачалаОбработкиОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
//Тогда я жду наступления времени "00:00:00"
//@ЯЖдуНаступленияВремени(Парам01)
Функция ЯЖдуНаступленияВремени(Время) Экспорт

	Массив = Ванесса._СтрРазделить(Время, ":");
	Если Массив.Количество() <> 3 Тогда
		ТекстСообщения = Ванесса.Локализовать("Параметр времени <%1> должен быть передать в формате ""23:30:00""");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Время);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	
	
	ТекДата = ТекущаяДата();
	
	Попытка
		ДатаОжидания = Дата(Год(ТекДата), Месяц(ТекДата), День(ТекДата), Число(Массив[0]), Число(Массив[1]), Число(Массив[2]));
	Исключение
		ТекстСообщения = Ванесса.Локализовать("Не получилось вычислить время по строке <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Время);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Если ДатаОжидания < ТекДата Тогда
		//Значит надо добавить сутки
		ДатаОжидания = ДатаОжидания + 60*60*24;
	КонецЕсли;
	
	Разница = ДатаОжидания - ТекДата;
	Если Разница > 12*60*60 Тогда
		//Если разница больше 12 часов, то считатеся, что ждать не надо и нужное время уже наступило
		Возврат Неопределено;
	КонецЕсли;	
	
	Ванесса.ЗапретитьВыполнениеШагов();
	ДатаНачалаОбработкиОжидания = ДатаОжидания;
	ПодключитьОбработчикОжидания("ОбработчикОжиданияЯЖдуНаступленияВремени",1,Ложь);
	
КонецФункции

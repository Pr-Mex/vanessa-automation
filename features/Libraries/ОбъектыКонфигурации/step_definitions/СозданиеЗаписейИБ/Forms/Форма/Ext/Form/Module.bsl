
#Область Служебные_функции_и_процедуры

&НаКлиенте
// контекст фреймворка Vanessa-Automation
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Automation.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	// Манипуляция с данными
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПрограммноСоздаюЭлементСправочникаСРеквизитами(Парам01,ТабПарам)","ЯПрограммноСоздаюЭлементСправочникаСРеквизитами","Когда я программно создаю элемент справочника ""Справочник1"" с реквизитами","","Объекты конфигурации");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПрограммноИзменяюЭлементСправочникаСРавнымУстановивРеквизиты(Парам01,Парам02,Парам03,ТабПарам)","ЯПрограммноИзменяюЭлементСправочникаСРавнымУстановивРеквизиты","Когда я программно изменяю элемент справочника ""Справочник1"" с ""Наименование"" равным ""Элемент #1"" установив реквизиты","","Объекты конфигурации");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПрограммноСоздаюЗаписьРегистраСведенийСРеквизитами(Парам01,ТабПарам)","ЯПрограммноСоздаюЗаписьРегистраСведенийСРеквизитами","Когда я программно создаю запись регистра сведений  ""РегистрСведений1"" с реквизитами","","Объекты конфигурации");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПрограммноИзменяюЗаписьРегистраСведенийСРеквизитами(Парам01,ТабПарам)","ЯПрограммноИзменяюЗаписьРегистраСведенийСРеквизитами","Когда я программно изменяю запись регистра сведений  ""РегистрСведений1"" с реквизитами","","Объекты конфигурации");
	
	// Поиск в переменные
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯСохраняюВПеременнуюСсылкуНаСправочникСРавным(Парам01,Парам02,Парам03,Парам04)","ЯСохраняюВПеременнуюСсылкуНаСправочникСРавным","Тогда я сохраняю в переменную ""ИмяПеременной"" ссылку на справочник ""Справочник1"" с ""Наименование"" равным ""Элемент #1""","","Объекты конфигурации");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯСохраняюВПеременнуюСсылкуНаСправочникСРеквизитами(Парам01,Парам02,ТабПарам)","ЯСохраняюВПеременнуюСсылкуНаСправочникСРеквизитами","Тогда я сохраняю в переменную ""Элемент #1"" ссылку на справочник ""Справочник1"" с реквизитами","","Объекты конфигурации");
	
	// Проверки
	
	ШагиПроверок = Новый СписокЗначений;
	
	ШагиПроверок.Добавить("СуществуетЭлементСправочникаСРавным(Парам01,Парам02,Парам03)", "существует элемент справочника ""Справочник1"" с ""Наименование"" равным ""Элемент #1""");
	ШагиПроверок.Добавить("СуществуетЭлементСправочникаСРеквизитами(Парам01,ТабПарам)", "существует элемент справочника ""Справочник1"" с реквизитами");
	ШагиПроверок.Добавить("СуществуетЗаписьРегистраСведенийСРеквизитами(Парам01,ТабПарам)", "существует запись регистра сведений ""РегистрСведений1"" с реквизитами");
	ШагиПроверок.Добавить("СуществуетЗаписьРегистраНакопленияСРеквизитами(Парам01,ТабПарам)", "существует запись регистра накопления ""РегистрНакопления1"" с реквизитами");
	
	Группа = "Объекты конфигурации";
	
	Для Каждого Шаг Из ШагиПроверок Цикл 
		
		Снипет = Шаг.Значение;
		НачалоПараметров = СтрНайти(Снипет, "(");
		ИмяПроцедуры = Лев(Снипет, НачалоПараметров - 1);
		ПараметрыМетода = Сред(Снипет, НачалоПараметров);
		Пример = Шаг.Представление;
		
		ПримерШага = СтрШаблон("Тогда %1", Пример);
		Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, Снипет, ИмяПроцедуры, ПримерШага, "", Группа); 
		
		ПримерШага = СтрШаблон("Тогда не %1", Пример);
		Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "Не" + Снипет, "Не" + ИмяПроцедуры, ПримерШага, "", Группа);
		
		Снипет = СтрШаблон("%1Тогда%2", ИмяПроцедуры, ПараметрыМетода);
		ИмяПроцедуры = СтрШаблон("%1Тогда", ИмяПроцедуры);
		
		ПримерШага = СтрШаблон("Если %1 Тогда", Пример);
		Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, Снипет, ИмяПроцедуры, ПримерШага, "", Группа, "Условие"); 
		
		ПримерШага = СтрШаблон("Если не %1 Тогда", Пример);
		Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "Не" + Снипет, "Не" + ИмяПроцедуры, ПримерШага, "", Группа, "Условие");
		
	КонецЦикла;
	
	
	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции

#КонецОбласти

#Область Работа_со_сценариями

&НаКлиенте
// Функция выполняется перед началом каждого сценария
Функция ПередНачаломСценария() Экспорт
	
КонецФункции

&НаКлиенте
// Функция выполняется перед окончанием каждого сценария
Функция ПередОкончаниемСценария() Экспорт
	
КонецФункции

#КонецОбласти

#Область События_формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДанныеСервера = Новый Структура;
	ДанныеСервера.Вставить("ТипыПолей", Новый Соответствие);
	ДанныеСервера.Вставить("СистемныеПеречисления", СистемныеПеречисления());
	
	АдресДанныеСервера = ПоместитьВоВременноеХранилище(ДанныеСервера, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти //События_формы

///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

#Область Реализация_шагов

#Область МанипуляцияСДанными

&НаКлиенте
//Когда я программно создаю элемент справочника "Справочник1" с реквизитами
//@ЯПрограммноСоздаюЭлементСправочникаСРеквизитами(Парам01,ТабПарам)
Функция ЯПрограммноСоздаюЭлементСправочникаСРеквизитами(ИмяСправочника, Реквизиты) Экспорт
	
	УстанавливаемыеРеквизиты = ТаблицаГеркенВСтруктуру(Реквизиты);
	
	ЗаписатьЭлементСправочника(АдресДанныеСервера, ИмяСправочника, УстанавливаемыеРеквизиты);
	
КонецФункции

&НаКлиенте
//Когда я программно изменяю элемент справочника "Справочник1" с "Наименование" равным "Элемент #1" установив реквизиты
//@ЯПрограммноИзменяюЭлементСправочникаСРавнымУстановивРеквизиты(Парам01,Парам02,Парам03,ТабПарам)
Функция ЯПрограммноИзменяюЭлементСправочникаСРавнымУстановивРеквизиты(ИмяСправочника, ИмяРеквизитаПоиска, ЗначениеПоиска, Реквизиты) Экспорт
		
	ЗначенияПоиска = Новый Структура;
	ЗначенияПоиска.Вставить(ИмяРеквизитаПоиска, ЗначениеПоиска);
	
	УстанавливаемыеРеквизиты = ТаблицаГеркенВСтруктуру(Реквизиты);
	
	ЗаписатьЭлементСправочника(АдресДанныеСервера, ИмяСправочника, УстанавливаемыеРеквизиты, ЗначенияПоиска);
	
КонецФункции

&НаКлиенте
//Когда я программно создаю запись регистра сведений  "РегистрСведений1" с реквизитами
//@ЯПрограммноСоздаюЗаписьРегистраСведенийСРеквизитами(Парам01,ТабПарам)
Функция ЯПрограммноСоздаюЗаписьРегистраСведенийСРеквизитами(ИмяРегистра, Реквизиты) Экспорт

	УстанавливаемыеРеквизиты = ТаблицаГеркенВСтруктуру(Реквизиты);
	
	СоздатьЗаписьРегистра(АдресДанныеСервера, "РегистрСведений", ИмяРегистра, УстанавливаемыеРеквизиты);
	
КонецФункции

&НаКлиенте
//Когда я программно изменяю запись регистра сведений  "РегистрСведений1" с реквизитами
//@ЯПрограммноИзменяюЗаписьРегистраСведенийСРеквизитами(Парам01,ТабПарам)
Функция ЯПрограммноИзменяюЗаписьРегистраСведенийСРеквизитами(ИмяРегистра, Реквизиты) Экспорт

	УстанавливаемыеРеквизиты = ТаблицаГеркенВСтруктуру(Реквизиты);
	
	СоздатьЗаписьРегистра(АдресДанныеСервера, "РегистрСведений", ИмяРегистра, УстанавливаемыеРеквизиты, Ложь);
	
КонецФункции

#КонецОбласти //МанипуляцияСДанными

#Область СуществуетЭлементСправочникаСРавным

&НаКлиенте
//Тогда существует элемент справочника "Справочник1" с "Наименование" равным "Элемент #1"
//@СуществуетЭлементСправочникаСРавным(Парам01,Парам02,Парам03)
Функция СуществуетЭлементСправочникаСРавным(ИмяСправочника, ИмяРеквизитаПоиска, ЗначениеПоиска) Экспорт
	
	ЗначенияПоиска = Новый Структура;
	ЗначенияПоиска.Вставить(ИмяРеквизитаПоиска, ЗначениеПоиска);
	
	ПроверитьСуществованиеЗаписи("Справочник", ИмяСправочника, ЗначенияПоиска);
	
КонецФункции

&НаКлиенте
//Тогда не существует элемент справочника "Справочник1" с "Наименование" равным "Элемент #1"
//@НеСуществуетЭлементСправочникаСРавным(Парам01,Парам02,Парам03)
Функция НеСуществуетЭлементСправочникаСРавным(ИмяСправочника, ИмяРеквизитаПоиска, ЗначениеПоиска) Экспорт
	
	ЗначенияПоиска = Новый Структура;
	ЗначенияПоиска.Вставить(ИмяРеквизитаПоиска, ЗначениеПоиска);
	
	ПроверитьСуществованиеЗаписи("Справочник", ИмяСправочника, ЗначенияПоиска, Истина);
	
КонецФункции

&НаКлиенте
//Если существует элемент справочника "Справочник1" с "Наименование" равным "Элемент #1" Тогда
//@СуществуетЭлементСправочникаСРавнымТогда(Парам01,Парам02,Парам03)
Функция СуществуетЭлементСправочникаСРавнымТогда(ИмяСправочника, ИмяРеквизитаПоиска, ЗначениеПоиска) Экспорт
	
	ЗначенияПоиска = Новый Структура;
	ЗначенияПоиска.Вставить(ИмяРеквизитаПоиска, ЗначениеПоиска);
	
	ПроверитьСуществованиеЗаписи("Справочник", ИмяСправочника, ЗначенияПоиска, , Ложь);
	
КонецФункции

&НаКлиенте
//Если не существует элемент справочника "Справочник1" с "Наименование" равным "Элемент #1" Тогда
//@НеСуществуетЭлементСправочникаСРавнымТогда(Парам01,Парам02,Парам03)
Функция НеСуществуетЭлементСправочникаСРавнымТогда(ИмяСправочника, ИмяРеквизитаПоиска, ЗначениеПоиска) Экспорт
	
	ЗначенияПоиска = Новый Структура;
	ЗначенияПоиска.Вставить(ИмяРеквизитаПоиска, ЗначениеПоиска);
	
	ПроверитьСуществованиеЗаписи("Справочник", ИмяСправочника, ЗначенияПоиска, Истина, Ложь);
	
КонецФункции

#КонецОбласти //СуществуетЭлементСправочникаСРавным

#Область СуществуетЭлементСправочникаСРеквизитами

&НаКлиенте
//Тогда существует элемент справочника "Справочник1" с реквизитами
//@СуществуетЭлементСправочникаСРеквизитами(Парам01,ТабПарам)
Функция СуществуетЭлементСправочникаСРеквизитами(ИмяСправочника, Реквизиты) Экспорт
	
	ЗначенияПоиска = ТаблицаГеркенВСтруктуру(Реквизиты);
	
	ПроверитьСуществованиеЗаписи("Справочник", ИмяСправочника, ЗначенияПоиска);
	
КонецФункции

&НаКлиенте
//Тогда не существует элемент справочника "Справочник1" с реквизитами
//@НеСуществуетЭлементСправочникаСРеквизитами(Парам01,ТабПарам)
Функция НеСуществуетЭлементСправочникаСРеквизитами(ИмяСправочника, Реквизиты) Экспорт
	
	ЗначенияПоиска = ТаблицаГеркенВСтруктуру(Реквизиты);
	
	ПроверитьСуществованиеЗаписи("Справочник", ИмяСправочника, ЗначенияПоиска, Истина);
	
КонецФункции

&НаКлиенте
//Если существует элемент справочника "Справочник1" с реквизитами тогда
//@СуществуетЭлементСправочникаСРеквизитамиТогда(Парам01,ТабПарам)
Функция СуществуетЭлементСправочникаСРеквизитамиТогда(ИмяСправочника, Реквизиты) Экспорт
	
	ЗначенияПоиска = ТаблицаГеркенВСтруктуру(Реквизиты);
	
	ПроверитьСуществованиеЗаписи("Справочник", ИмяСправочника, ЗначенияПоиска, , Ложь);
	
КонецФункции

&НаКлиенте
//Если не существует элемент справочника "Справочник1" с реквизитами тогда
//@СуществуетЭлементСправочникаСРеквизитамиТогда(Парам01,ТабПарам)
Функция НеСуществуетЭлементСправочникаСРеквизитамиТогда(ИмяСправочника, Реквизиты) Экспорт
	
	ЗначенияПоиска = ТаблицаГеркенВСтруктуру(Реквизиты);
	
	ПроверитьСуществованиеЗаписи("Справочник", ИмяСправочника, ЗначенияПоиска, Истина, Ложь);
	
КонецФункции

#КонецОбласти //СуществуетЭлементСправочникаСРеквизитами

#Область СуществуетЗаписьРегистраСведенийСРеквизитами

&НаКлиенте
//Тогда существует запись регистра сведений "РегистрСведений1" с реквизитами
//@СуществуетЗаписьРегистраСведенийСРеквизитами(Парам01,ТабПарам)
Функция СуществуетЗаписьРегистраСведенийСРеквизитами(ИмяРегистра, Реквизиты) Экспорт
	
	ЗначенияПоиска = ТаблицаГеркенВСтруктуру(Реквизиты);
	
	ПроверитьСуществованиеЗаписи("РегистрСведений", ИмяРегистра, ЗначенияПоиска);
	
КонецФункции

&НаКлиенте
//Тогда не существует запись регистра сведений "РегистрСведений1" с реквизитами
//@НеСуществуетЗаписьРегистраСведенийСРеквизитами(Парам01,ТабПарам)
Функция НеСуществуетЗаписьРегистраСведенийСРеквизитами(ИмяРегистра, Реквизиты) Экспорт
	
	ЗначенияПоиска = ТаблицаГеркенВСтруктуру(Реквизиты);
	
	ПроверитьСуществованиеЗаписи("РегистрСведений", ИмяРегистра, ЗначенияПоиска, Истина);
	
КонецФункции

&НаКлиенте
//Если существует запись регистра сведений "РегистрСведений1" с реквизитами тогда
//@СуществуетЗаписьРегистраСведенийСРеквизитамиТогда(Парам01,ТабПарам)
Функция СуществуетЗаписьРегистраСведенийСРеквизитамиТогда(ИмяРегистра, Реквизиты) Экспорт
	
	ЗначенияПоиска = ТаблицаГеркенВСтруктуру(Реквизиты);
	
	ПроверитьСуществованиеЗаписи("РегистрСведений", ИмяРегистра, ЗначенияПоиска, , Ложь);
	
КонецФункции

&НаКлиенте
//Если не существует запись регистра сведений "РегистрСведений1" с реквизитами тогда
//@НеСуществуетЗаписьРегистраСведенийСРеквизитамиТогда(Парам01,ТабПарам)
Функция НеСуществуетЗаписьРегистраСведенийСРеквизитамиТогда(ИмяРегистра, Реквизиты) Экспорт
	
	ЗначенияПоиска = ТаблицаГеркенВСтруктуру(Реквизиты);
	
	ПроверитьСуществованиеЗаписи("РегистрСведений", ИмяРегистра, ЗначенияПоиска, Истина, Ложь);
	
КонецФункции

#КонецОбласти //СуществуетЗаписьРегистраСведенийСРеквизитами

#Область СуществуетЗаписьРегистраНакопленияСРеквизитами

&НаКлиенте
//Тогда существует запись регистра накопления "РегистрНакопления1" с реквизитами
//@СуществуетЗаписьРегистраНакопленияСРеквизитами(Парам01,ТабПарам)
Функция СуществуетЗаписьРегистраНакопленияСРеквизитами(ИмяРегистра, Реквизиты) Экспорт
	
	ЗначенияПоиска = ТаблицаГеркенВСтруктуру(Реквизиты);
	
	ПроверитьСуществованиеЗаписи("РегистрНакопления", ИмяРегистра, ЗначенияПоиска);
	
КонецФункции

&НаКлиенте
//Тогда не существует запись регистра накопления "РегистрНакопления1" с реквизитами
//@НеСуществуетЗаписьРегистраНакопленияСРеквизитами(Парам01,ТабПарам)
Функция НеСуществуетЗаписьРегистраНакопленияСРеквизитами(ИмяРегистра, Реквизиты) Экспорт
	
	ЗначенияПоиска = ТаблицаГеркенВСтруктуру(Реквизиты);
	
	ПроверитьСуществованиеЗаписи("РегистрНакопления", ИмяРегистра, ЗначенияПоиска, Истина);
	
КонецФункции

&НаКлиенте
//Если существует запись регистра накопления "РегистрНакопления1" с реквизитами тогда
//@СуществуетЗаписьРегистраНакопленияСРеквизитамиТогда(Парам01,ТабПарам)
Функция СуществуетЗаписьРегистраНакопленияСРеквизитамиТогда(ИмяРегистра, Реквизиты) Экспорт
	
	ЗначенияПоиска = ТаблицаГеркенВСтруктуру(Реквизиты);
	
	ПроверитьСуществованиеЗаписи("РегистрНакопления", ИмяРегистра, ЗначенияПоиска, , Ложь);
	
КонецФункции

&НаКлиенте
//Если не существует запись регистра накопления "РегистрНакопления1" с реквизитами тогда
//@НеСуществуетЗаписьРегистраНакопленияСРеквизитамиТогда(Парам01,ТабПарам)
Функция НеСуществуетЗаписьРегистраНакопленияСРеквизитамиТогда(ИмяРегистра, Реквизиты) Экспорт
	
	ЗначенияПоиска = ТаблицаГеркенВСтруктуру(Реквизиты);
	
	ПроверитьСуществованиеЗаписи("РегистрНакопления", ИмяРегистра, ЗначенияПоиска, Истина, Ложь);
	
КонецФункции

#КонецОбласти //СуществуетЗаписьРегистраНакопленияСРеквизитами

#Область Поиск

&НаКлиенте
//Тогда я сохраняю в переменную "ИмяПеременной" ссылку на справочник "Справочник1" с "Наименование" равным "Элемент #1"
//@ЯСохраняюВПеременнуюСсылкуНаСправочникСРавным(ИмяПеременной, ИмяСправочника, ИмяРеквизитаПоиска, ЗначениеПоиска)
Функция ЯСохраняюВПеременнуюСсылкуНаСправочникСРавным(ИмяПеременной, ИмяСправочника, ИмяРеквизитаПоиска, ЗначениеПоиска) Экспорт 
	
	ЗначенияПоиска = Новый Структура;
	ЗначенияПоиска.Вставить(ИмяРеквизитаПоиска, ЗначениеПоиска);
	
	СохранитьЗаписьВПеременную("Справочник", ИмяСправочника, ЗначенияПоиска, ИмяПеременной);
	
КонецФункции

&НаКлиенте
//И я сохраняю в переменную "ЗакрытыйБанк" ссылку на справочник "Справочник1" с реквизитами
//@ЯСохраняюВПеременнуюСсылкуНаСправочникСРеквизитами(ИмяПеременной, ИмяСправочника, ЗначенияПоиска)
Функция ЯСохраняюВПеременнуюСсылкуНаСправочникСРеквизитами(ИмяПеременной, ИмяСправочника, ЗначенияПоиска) Экспорт 

	ЗначенияПоиска = ТаблицаГеркенВСтруктуру(ЗначенияПоиска);
	
	СохранитьЗаписьВПеременную("Справочник", ИмяСправочника, ЗначенияПоиска, ИмяПеременной);
	
КонецФункции

#КонецОбласти //Поиск

#КонецОбласти //Реализация_шагов

#Область СлужебныеМетоды

#Область Точки_входа_для_шагов

&НаКлиенте
Функция ПроверитьСуществованиеЗаписи(ВидОбъекта, ИмяОбъекта, ЗначенияПоиска, Не_ = Ложь, ГенерироватьИсключение = Истина)
	
	Запись = НайтиЗаписьИБ(АдресДанныеСервера, ВидОбъекта, ИмяОбъекта, ЗначенияПоиска);
	
	ТекстОшибки = ТекстОшибкиПоиска(ИмяОбъекта, Запись, ЗначенияПоиска, Не_);
	
	Успешно = ПустаяСтрока(ТекстОшибки);
	
	Если ГенерироватьИсключение И НЕ Успешно Тогда 
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Если НЕ ГенерироватьИсключение Тогда 
		
		Ванесса.УстановитьРезультатУсловия(Успешно);
		
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

&НаКлиенте
Функция СохранитьЗаписьВПеременную(ВидОбъекта, ИмяОбъекта, ЗначенияПоиска, ИмяПеременной)
	
	Запись = НайтиЗаписьИБ(АдресДанныеСервера, ВидОбъекта, ИмяОбъекта, ЗначенияПоиска);
	
	ТекстОшибки = ТекстОшибкиПоиска(ИмяОбъекта, Запись, ЗначенияПоиска);
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда 
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, Запись);
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиЗаписьИБ(Знач АдресДанныеСервера, Знач ВидОбъекта, Знач ИмяОбъекта, Знач ЗначенияПоиска)

	ВыполнитьПриведениеЗначений(АдресДанныеСервера, ЗначенияПоиска, ТипыПолейОбъекта(АдресДанныеСервера, ВидОбъекта, ИмяОбъекта));
	
	КлючевыеПоля = КлючевыеПоля(ВидОбъекта, ИмяОбъекта);
	
	НайденноеЗначение = НайтиЗаписьТаблицы(ВидОбъекта, ИмяОбъекта, ЗначенияПоиска, КлючевыеПоля);
	
	Если НайденноеЗначение = Неопределено Тогда 
		
		Возврат Неопределено;
		
	ИначеЕсли ЭтоСсылочныйОбъект(ВидОбъекта) Тогда 
		
		Возврат НайденноеЗначение.Ссылка;
		
	Иначе
		
		Возврат СоздатьКлючЗаписи(ВидОбъекта, ИмяОбъекта, НайденноеЗначение);
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписатьЭлементСправочника(Знач АдресДанныеСервера, Знач ИмяОбъекта, Знач ЗначенияРеквизитов, Знач ЗначенияПоиска = Неопределено)
	
	ВидОбъекта = "Справочник";
	
	ТипыПолей = ТипыПолейОбъекта(АдресДанныеСервера, ВидОбъекта, ИмяОбъекта);
	ВыполнитьПриведениеЗначений(АдресДанныеСервера, ЗначенияРеквизитов, ТипыПолей);
	
	Если ЗначенияПоиска = Неопределено Тогда 
		
		Объект = СоздатьОбъект(ВидОбъекта, ИмяОбъекта);
		
	Иначе
		
		ВыполнитьПриведениеЗначений(АдресДанныеСервера, ЗначенияПоиска, ТипыПолей);
	
		Ссылка = СсылкаПоОтбору(ВидОбъекта, ИмяОбъекта, ЗначенияПоиска);
		
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда 
						
			ВызватьИсключение "Не удалось найти ссылку по реквизитам " + ПредставлениеРеквизитов(ЗначенияПоиска);
			
		КонецЕсли;
		
		Объект = Ссылка.ПолучитьОбъект();
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, ЗначенияРеквизитов);
	
	Объект.Записать();
	
	Возврат Объект.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьЗаписьРегистра(Знач АдресДанныеСервера, Знач ВидОбъекта, Знач ИмяОбъекта, Знач ЗначенияРеквизитов, Знач Перезаписать = Истина)
	
	ВыполнитьПриведениеЗначений(АдресДанныеСервера, ЗначенияРеквизитов, ТипыПолейОбъекта(АдресДанныеСервера, ВидОбъекта, ИмяОбъекта));
	
	Если Перезаписать Тогда 
		
		Запись = СоздатьОбъект(ВидОбъекта, ИмяОбъекта);
		
	Иначе
		
		КлючевыеЗначения = ДанныеКлюча(ВидОбъекта, ИмяОбъекта, ЗначенияРеквизитов);
		
		Для Каждого КлючевоеЗначение Из КлючевыеЗначения Цикл 
			
			Если НЕ ЗначенияРеквизитов.Свойство(КлючевоеЗначение.Ключ) Тогда 
				
				ВызватьИсключение "Неполный набор значений ключа " + ПредставлениеРеквизитов(КлючевыеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		КлючЗаписи = КлючРегистраПоОтбору(ВидОбъекта, ИмяОбъекта, КлючевыеЗначения);
		
		Если НЕ ЗначениеЗаполнено(КлючЗаписи) Тогда 
			
			ВызватьИсключение "Не удалось найти запись регистра по ключу " + ПредставлениеРеквизитов(КлючевыеЗначения);
			
		КонецЕсли;
		
		Менеджер = МенеджерКоллекции(ВидОбъекта, ИмяОбъекта);
		
		Запись = Менеджер.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, КлючЗаписи);
		Запись.Прочитать();
		
		Если НЕ Запись.Выбран() Тогда 
			
			ВызватьИсключение "Не смогли считать запись регистра по ключу " + ПредставлениеРеквизитов(КлючевыеЗначения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Запись, ЗначенияРеквизитов);
	
	Запись.Записать();
	
	Возврат СоздатьКлючЗаписи(ВидОбъекта, ИмяОбъекта, Запись);
	
КонецФункции

#КонецОбласти //Точки_входа_для_шагов

#Область Поиск

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиПоиска(ИмяОбъекта, РезультатПоиска, ЗначенияПоиска, НЕ_ = Ложь)
	
	Успешно = ЗначениеЗаполнено(РезультатПоиска);
	
	Если НЕ_ Тогда 
		
		Успешно = НЕ Успешно;
		
	КонецЕсли;
	
	Если Успешно Тогда 
		
		Возврат "";
		
	КонецЕсли;
	
	ТекстЗначенияПоиска = ПредставлениеРеквизитов(ЗначенияПоиска);
	
	Если НЕ_ Тогда 
		
		Шаблон = "Существует запись '%1' с: %2"
		
	Иначе
		
		Шаблон = "Не удалось найти запись '%1' по: %2";
		
	КонецЕсли;
	
	ТекстСообщения = СтрШаблон(Шаблон, ИмяОбъекта, ТекстЗначенияПоиска);
		
	Возврат ТекстСообщения;
	
КонецФункции

&НаСервереБезКонтекста
Функция СсылкаПоОтбору(ВидОбъекта, ИмяОбъекта, ЗначенияПоиска)
	
	НайденноеЗначение = НайтиЗаписьТаблицы(ВидОбъекта, ИмяОбъекта, ЗначенияПоиска, "Ссылка");
	
	Если НайденноеЗначение = Неопределено Тогда 
		
		Возврат Неопределено;
		
	Иначе
		
		Возврат НайденноеЗначение.Ссылка;
		
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция КлючРегистраПоОтбору(ВидОбъекта, ИмяОбъекта, ЗначенияПоиска)
	
	КлючевыеПоля = КлючевыеПоля(ВидОбъекта, ИмяОбъекта);
	
	НайденноеЗначение = НайтиЗаписьТаблицы(ВидОбъекта, ИмяОбъекта, ЗначенияПоиска, КлючевыеПоля);
	
	Если НайденноеЗначение = Неопределено Тогда 
		
		Возврат Неопределено;
		
	Иначе
		
		Возврат СоздатьКлючЗаписи(ВидОбъекта, ИмяОбъекта, НайденноеЗначение);
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиЗаписьТаблицы(ВидОбъекта, ИмяОбъекта, ЗначенияПоиска, ВыбираемыеПоля)
	
	Запрос = Новый Запрос;
	
	Условия = Новый Массив;
	
	Если ТипЗнч(ВыбираемыеПоля) = Тип("Массив") Тогда 
		
		ВыбираемыеПоля = СтрСоединить(ВыбираемыеПоля, ", ");
		
	КонецЕсли;
	
	Для Каждого Значение Из ЗначенияПоиска Цикл 
		
		Условия.Добавить(СтрШаблон("%1 = &%1", Значение.Ключ));
		Запрос.УстановитьПараметр(Значение.Ключ, Значение.Значение);
		
	КонецЦикла;
	
	ТекстУсловия = СтрСоединить(Условия, " И ");
	Запрос.Текст = СтрШаблон("ВЫБРАТЬ ПЕРВЫЕ 1 %1.%2.%3 ГДЕ %4", ВидОбъекта, ИмяОбъекта, ВыбираемыеПоля, ТекстУсловия);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НайденноеЗначение = Новый Структура(ВыбираемыеПоля);
	
		ЗаполнитьЗначенияСвойств(НайденноеЗначение, Выборка);
		
	Иначе
		
		НайденноеЗначение = Неопределено;
		
	КонецЕсли;
	
	Возврат НайденноеЗначение;
	
КонецФункции

#КонецОбласти //Поиск

&НаСервереБезКонтекста
Функция СоздатьОбъект(ВидОбъекта, ИмяОбъекта)
	
	Менеджер = МенеджерКоллекции(ВидОбъекта, ИмяОбъекта);
	
	Если ВидОбъекта = "Справочник" Тогда 
		
		Возврат Менеджер.СоздатьЭлемент();
		
	ИначеЕсли ВидОбъекта = "РегистрСведений" Тогда 
		
		Возврат Менеджер.СоздатьМенеджерЗаписи();
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьКлючЗаписи(ВидОбъекта, ИмяОбъекта, Значения)
	
	ДанныеКлюча = ДанныеКлюча(ВидОбъекта, ИмяОбъекта, Значения);
	
	Менеджер = МенеджерКоллекции(ВидОбъекта, ИмяОбъекта);
	
	Ключ = Менеджер.СоздатьКлючЗаписи(ДанныеКлюча);
	
	Возврат Ключ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеКлюча(ВидОбъекта, ИмяОбъекта, ЗначенияЗаполнения)
	
	КлючевыеПоля = КлючевыеПоля(ВидОбъекта, ИмяОбъекта);
	ДанныеКлюча = Новый Структура(СтрСоединить(КлючевыеПоля, ", "));
	
	ЗаполнитьЗначенияСвойств(ДанныеКлюча, ЗначенияЗаполнения);
	
	Возврат ДанныеКлюча;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеРеквизитов(ЗначенияРеквизитов, Разделитель = "; ")
	
	ТекстРеквизиты = Новый Массив;
	
	Для Каждого Значение Из ЗначенияРеквизитов Цикл 
		
		ТекстРеквизиты.Добавить(СтрШаблон("%1 = '%2'", Значение.Ключ, Значение.Значение));
		
	КонецЦикла;
	
	Возврат СтрСоединить(ТекстРеквизиты, Разделитель);
			
КонецФункции

#Область Метаданные

&НаСервереБезКонтекста
Функция ЭтоСсылочныйОбъект(ВидОбъекта)
	
	// TODO
	Возврат ВидОбъекта = "Справочник";
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСправочник(Тип)
	
	Возврат Справочники.ТипВсеСсылки().СодержитТип(Тип);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоПеречисление(Тип)
	
	Возврат Перечисления.ТипВсеСсылки().СодержитТип(Тип);
	
КонецФункции

&НаСервереБезКонтекста
Функция КлючевыеПоля(ВидОбъекта, ИмяОбъекта)
	
	КлючевыеПоля = Новый Массив;
	
	Если ЭтоСсылочныйОбъект(ВидОбъекта) Тогда 
		
		КлючевыеПоля.Добавить("Ссылка");
		
	Иначе
		
		МетаданныеПоиска = Метаданные.НайтиПоПолномуИмени(СтрШаблон("%1.%2", ВидОбъекта, ИмяОбъекта));
		
		Для Каждого Реквизит Из МетаданныеПоиска.СтандартныеРеквизиты Цикл 
			
			КлючевыеПоля.Добавить(Реквизит.Имя);
			
		КонецЦикла;
		
		Для Каждого Реквизит Из МетаданныеПоиска.Измерения Цикл 
			
			КлючевыеПоля.Добавить(Реквизит.Имя);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КлючевыеПоля;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТипыПолейОбъекта(АдресДанныеСервера, ВидОбъекта, ИмяОбъекта)
	
	ДанныеСервера = ПолучитьИзВременногоХранилища(АдресДанныеСервера);
	
	КлючПоиска = СтрШаблон("%1.%2", ВидОбъекта, ИмяОбъекта);
	
	Если ДанныеСервера.ТипыПолей[КлючПоиска] = Неопределено Тогда 
	
		ТекстЗапроса = СтрШаблон("ВЫБРАТЬ * ИЗ %1.%2", ВидОбъекта, ИмяОбъекта);
		
		Схема = Новый СхемаЗапроса;
		Схема.УстановитьТекстЗапроса(ТекстЗапроса);
		
		Результат = Новый Структура;
		
		Для Каждого Поле Из Схема.ПакетЗапросов.Получить(0).Колонки Цикл 
			
			Если ТипЗнч(Поле) <> Тип("КолонкаВложеннаяТаблицаСхемыЗапроса") Тогда 
				
				Результат.Вставить(Поле.Псевдоним, Поле.ТипЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеСервера.ТипыПолей[КлючПоиска] = Результат;
		
	КонецЕсли;
	
	Возврат ДанныеСервера.ТипыПолей[КлючПоиска];
	
КонецФункции

&НаСервереБезКонтекста
Функция МенеджерКоллекции(ВидОбъекта, ИмяОбъекта)
	
	Возврат Новый(СтрШаблон("%1Менеджер.%2", ВидОбъекта, ИмяОбъекта));
	
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитПредставления(МетаданныеОбъекта)
	
	Свойства = Метаданные.СвойстваОбъектов;
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда 
				
		Если МетаданныеОбъекта.ОсновноеПредставление = Свойства.ОсновноеПредставлениеСправочника.ВВидеКода Тогда 
			
			Возврат "Код";
			
		Иначе
			
			Возврат "Наименование";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти //Метаданные

#Область Преобразование_значений

&НаСервереБезКонтекста
Процедура ВыполнитьПриведениеЗначений(АдресДанныеСервера, Значения, ТипыПолей)
	
	Для Каждого Элемент Из Значения Цикл
		
		ОписаниеТипаПоля = ТипыПолей[Элемент.Ключ];
		
		Значение = Элемент.Значение;
		ЗначениеЗаполнено = ЗначениеЗаполнено(Значение);
		
		ТипЗначения = ТипЗнч(Значение);
		
		Если ОписаниеТипаПоля.Типы().Количество() = 1 Тогда 
			
			ТипПоля = ОписаниеТипаПоля.Типы()[0];
			
			Если ТипПоля <> ТипЗначения Тогда 
				
				Ссылка = ПолучитьСсылочныйОбъектПоПредставлению(АдресДанныеСервера, ТипПоля, Значение);
				
				Если Ссылка <> Неопределено Тогда 
				
					Значение = Ссылка;
					
				Иначе 
					
					НовоеЗначение = ЗначениеСистемногоПеречисления(АдресДанныеСервера, ТипПоля, Значение);
					
					Если НовоеЗначение <> Неопределено Тогда 
						
						Значение = НовоеЗначение;
						
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
		Значение = ОписаниеТипаПоля.ПривестиЗначение(Значение);
		
		Если ЗначениеЗаполнено И НЕ ЗначениеЗаполнено(Значение) Тогда 
			
			Если Значение = Неопределено И НЕ ОписаниеТипаПоля.СодержитТип(ТипЗначения) Тогда 
				
				ВызватьИсключение СтрШаблон("Не корректный тип входного параметра, не удалось выполнить приведение типов '%1'(%3) <> '%2'(%4)", 
					Элемент.Ключ, Элемент.Значение, ОписаниеТипаПоля, ТипЗначения);
				
			Иначе	
				
				ВызватьИсключение СтрШаблон("Не удалось обработать значение '%1' = '%2'", Элемент.Ключ, Элемент.Значение);
			
			КонецЕсли;
			
		КонецЕсли;
		
		Значения[Элемент.Ключ] = Значение;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СистемныеПеречисления()
	
	ОписаниеПеречислений = Новый Соответствие;
	
	ОписаниеПеречислений.Вставить(Тип("ВидДвиженияБухгалтерии"), ВидДвиженияБухгалтерии);
	ОписаниеПеречислений.Вставить(Тип("ВидДвиженияНакопления"), ВидДвиженияНакопления);
	ОписаниеПеречислений.Вставить(Тип("ВидПериодаРегистраРасчета"), ВидПериодаРегистраРасчета);
	ОписаниеПеречислений.Вставить(Тип("ВидСчета"), ВидСчета);
	ОписаниеПеречислений.Вставить(Тип("ВидТочкиМаршрутаБизнесПроцесса"), ВидТочкиМаршрутаБизнесПроцесса);
	ОписаниеПеречислений.Вставить(Тип("РежимЗаписиДокумента"), РежимЗаписиДокумента);
	ОписаниеПеречислений.Вставить(Тип("РежимПроведенияДокумента"), РежимПроведенияДокумента);
	ОписаниеПеречислений.Вставить(Тип("ПериодичностьАгрегатаРегистраНакопления"), ПериодичностьАгрегатаРегистраНакопления);
	ОписаниеПеречислений.Вставить(Тип("ИспользованиеАгрегатаРегистраНакопления"), ИспользованиеАгрегатаРегистраНакопления);
	ОписаниеПеречислений.Вставить(Тип("АвтоРегистрацияИзменений"), АвтоРегистрацияИзменений);
	ОписаниеПеречислений.Вставить(Тип("ДопустимыйНомерСообщения"), ДопустимыйНомерСообщения);
	ОписаниеПеречислений.Вставить(Тип("ОтправкаЭлементаДанных"), ОтправкаЭлементаДанных);
	ОписаниеПеречислений.Вставить(Тип("ПолучениеЭлементаДанных"), ПолучениеЭлементаДанных);
	ОписаниеПеречислений.Вставить(Тип("СостояниеФоновогоЗадания"), СостояниеФоновогоЗадания);
	ОписаниеПеречислений.Вставить(Тип("ВидГраницы"), ВидГраницы);
	ОписаниеПеречислений.Вставить(Тип("ЧастиДаты"), ЧастиДаты);
	ОписаниеПеречислений.Вставить(Тип("ВидЧисловогоЗначения"), ВидЧисловогоЗначения);	
	
	Возврат ОписаниеПеречислений;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеСистемногоПеречисления(АдресДанныеСервера, ТипЗначения, ПредставлениеЗначения)
	
	ДанныеСервера = ПолучитьИзВременногоХранилища(АдресДанныеСервера);

	Если ДанныеСервера.СистемныеПеречисления[ТипЗначения] <> Неопределено Тогда 
		
		Значение = ДанныеСервера.СистемныеПеречисления[ТипЗначения][ПредставлениеЗначения];
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТаблицаГеркенВСтруктуру(Таблица)
	
	Результат = Новый Структура;
	
	Для Каждого Строка Из Таблица Цикл 
		
		Результат.Вставить(Строка.Кол1, Строка.Кол2);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылочныйОбъектПоПредставлению(АдресДанныеСервера, ТипОбъека, Представление)
	
	Значение = Неопределено;
	
	Если ЭтоСправочник(ТипОбъека) Тогда 
				
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъека);
	
		ПолеПредставления = РеквизитПредставления(МетаданныеОбъекта);
		
		Значение = СсылкаПоОтбору("Справочник", МетаданныеОбъекта.Имя, Новый Структура(ПолеПредставления, Представление));
		
		Если ЗначениеЗаполнено(Представление) И НЕ ЗначениеЗаполнено(Значение) Тогда 
			
			ВызватьИсключение СтрШаблон("Не удалось найти значение справочника '%1' = '%2'", МетаданныеОбъекта.Имя, Представление);
			
		КонецЕсли;
		
	ИначеЕсли ЭтоПеречисление(ТипОбъека) Тогда 
		
		Значение = ПеречислениеПоПредставлению(АдресДанныеСервера, ТипОбъека, Представление);
	КонецЕсли;
	
	Возврат Значение;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПеречислениеПоПредставлению(АдресДанныеСервера, ТипПеречисления, Знач Представление)
	
	ДанныеСервера = ПолучитьИзВременногоХранилища(АдресДанныеСервера);
	
	Если НЕ ДанныеСервера.Свойство("ЗначенияПеречислений") Тогда 
		
		ДанныеСервера.Вставить("ЗначенияПеречислений", Новый Соответствие);
		
	КонецЕсли;
	
	Если ДанныеСервера.ЗначенияПеречислений[ТипПеречисления] = Неопределено Тогда 
		
		ДанныеСервера.ЗначенияПеречислений[ТипПеречисления] = Новый Соответствие;	

	КонецЕсли;
	
	ЗначенияПеречисления = ДанныеСервера.ЗначенияПеречислений[ТипПеречисления];

	Представление = НРег(Представление);
	
	Если ЗначенияПеречисления[Представление] <> Неопределено Тогда 
		
		Возврат ЗначенияПеречисления[Представление];
		
	КонецЕсли;
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипПеречисления);
	
	Менеджер = Перечисления[МетаданныеОбъекта.Имя];
	
	Для Каждого ОписаниеЗначения Из МетаданныеОбъекта.ЗначенияПеречисления Цикл 
		
		ЗначениеПеречисления = Менеджер[ОписаниеЗначения.Имя];
		ЗначенияПеречисления.Вставить(НРег(ОписаниеЗначения.Имя), ЗначениеПеречисления);
		ЗначенияПеречисления.Вставить(НРег(ОписаниеЗначения.Представление()), ЗначениеПеречисления);
		
	КонецЦикла;

	Если ЗначенияПеречисления[Представление] = Неопределено Тогда 
		
		ВызватьИсключение СтрШаблон("Не найдено значение перечисления '%1' по предсталению '%2'", МетаданныеОбъекта.Имя, Представление);
		
	КонецЕсли;
	
	Возврат ЗначенияПеречисления[Представление];
		
КонецФункции
	
#КонецОбласти //Преобразование_значений

#КонецОбласти //СлужебныеМетоды

//начало текста модуля

///////////////////////////////////////////////////
//Служебная часть
///////////////////////////////////////////////////


// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 


// Служебная функция.
Функция ДобавитьШагВМассивТестов(МассивТестов,Снипет,ИмяПроцедуры,ПредставлениеТеста = Неопределено,Транзакция = Неопределено,Параметр = Неопределено)
	Структура = Новый Структура;
	Структура.Вставить("Снипет",Снипет);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ПредставлениеТеста",ПредставлениеТеста);
	Структура.Вставить("Транзакция",Транзакция);
	Структура.Вставить("Параметр",Параметр);
	МассивТестов.Добавить(Структура);
КонецФункции


// Делает отключение модуля
&НаКлиенте
Функция ОтключениеМодуля() Экспорт

	Ванесса = Неопределено;
	Контекст = Неопределено;
	КонтекстСохраняемый = Неопределено;

КонецФункции

// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	ДобавитьШагВМассивТестов(ВсеТесты,"ЯСоздаюFixturesПоМакету(Парам01)","ЯСоздаюFixturesПоМакету","И я создаю fixtures по макету ""Макет1""");
	ДобавитьШагВМассивТестов(ВсеТесты,"ВБазеОтсутствуетПользовательИБ(Парам01)","ВБазеОтсутствуетПользовательИБ","Когда В базе отсутствует пользователь ИБ ""ТестовыйПользователь""");
	ДобавитьШагВМассивТестов(ВсеТесты,"ВБазеСуществуетПользовательИБ(Парам01)","ВБазеСуществуетПользовательИБ","Тогда В базе существует пользователь ИБ ""ТестовыйПользователь""");
	ДобавитьШагВМассивТестов(ВсеТесты,"ЯУдаляюПользователяИБ(Парам01)","ЯУдаляюПользователяИБ","И Я удаляю пользователя ИБ ""ТестовыйПользователь""");

	Возврат ВсеТесты;
КонецФункции
	

// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	Возврат ПолучитьМакет(ИмяМакета);
КонецФункции
	

// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////


// Функция выполняется перед началом каждого сценария
Функция ПередНачаломСценария() Экспорт
	
КонецФункции


// Функция выполняется перед окончанием каждого сценария
Функция ПередОкончаниемСценария() Экспорт
	
КонецФункции



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

Функция ПользовательСуществует(ИмяПользователя)
	Возврат ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя) <> Неопределено;	
КонецФункции

//И я создаю fixtures по макету "Макет1"
//@ЯСоздаюFixturesПоМакету(Парам01)
Функция ЯСоздаюFixturesПоМакету(ИмяМакета) Экспорт
	//Ванесса.ПосмотретьЗначение(Ванесса);
	ВозвращатьДанные = Истина;
	Макет           = Ванесса.ПолучитьФорму("Форма").ОбработкаСвязаннаяСИсполняемойФичей.ПолучитьМакетОбработки(ИмяМакета);
	СтруктураДанных = Ванесса.СоздатьДанныеПоТабличномуДокументу(Макет, Неопределено, Неопределено, ВозвращатьДанные);
	// не сериализуемые типы не возвращаем
	Если ВозвращатьДанные Тогда
		Ванесса.ПроверитьНеРавенство(СтруктураДанных,Неопределено,"Получили структуру данных.");
	КонецЕсли;

КонецФункции

//Когда В базе отсутствует пользователь ИБ "ТестовыйПользователь"
//@ВБазеОтсутствуетПользовательИБ(Парам01)
Функция ВБазеОтсутствуетПользовательИБ(ИмяПользователя) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ДопСообщениеОшибки = "Ожидали, что пользователь " + ИмяПользователя + " отсутствует в базе";
	Ванесса.ПроверитьЛожь(ПользовательСуществует(ИмяПользователя), ДопСообщениеОшибки);
КонецФункции

//Тогда В базе существует пользователь ИБ "ТестовыйПользователь"
//@ВБазеСуществуетПользовательИБ(Парам01)
Функция ВБазеСуществуетПользовательИБ(ИмяПользователя) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ДопСообщениеОшибки = "Ожидали, что пользователь " + ИмяПользователя + " существует в базе";
	Ванесса.ПроверитьИстину(ПользовательСуществует(ИмяПользователя), ДопСообщениеОшибки);
КонецФункции

//И Я удаляю пользователя ИБ "ТестовыйПользователь"
//@ЯУдаляюПользователяИБ(Парам01)
Функция ЯУдаляюПользователяИБ(ИмяПользователя) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	ПользовательИБ.Удалить();
КонецФункции

//окончание текста модуля  
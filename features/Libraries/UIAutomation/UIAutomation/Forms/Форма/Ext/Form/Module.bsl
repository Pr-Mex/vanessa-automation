	
///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Automation
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;

&НаКлиенте
Перем КэшФормы Экспорт;


&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Automation.
Перем КонтекстСохраняемый Экспорт;

// Делает отключение модуля
&НаКлиенте
Функция ОтключениеМодуля() Экспорт

	Ванесса = Неопределено;
	Контекст = Неопределено;
	КонтекстСохраняемый = Неопределено;

КонецФункции

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюКликПоЭлементуКлиентаТестированияUIAutomation(Парам01,Парам02)",
		"ЯДелаюКликПоЭлементуКлиентаТестированияUIAutomation",
		"И я делаю клик по элементу клиента тестирования 'Заголовок' 'Тип' UI Automation",
		"Выполняет поиск элемента с помощью механизма UI Automation. Только под Windows. Необходимо включить использование компоненты VanessaExt. Нужно обязательно передать параметр 'Заголовок'. Параметр 'Тип' необязательный.",
		"Прочее.UI Automation.Клик по элементу");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюКликПоЭлементуФормыUIAutomation(Парам01,Парам02,Парам03)",
		"ЯДелаюКликПоЭлементуФормыUIAutomation",
		"И я делаю клик по элементу формы 'PID' 'Заголовок' 'Тип' UI Automation",
		"Выполняет поиск элемента с помощью механизма UI Automation и делает клик по нему левой кнопкой мышки. Только под Windows. Необходимо включить использование компоненты VanessaExt. В параметр PID можно передать строку ""Этот сеанс"", тогда будет использован PID текущего сеанса, в котором запущена Vanessa Automation. Нужно обязательно передать параметр 'Заголовок'. Параметр 'Тип' необязательный.",
		"Прочее.UI Automation.Клик по элементу");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюКликПоЭлементуФормыПравойКнопкойUIAutomation(Парам01,Парам02,Парам03)",
		"ЯДелаюКликПоЭлементуФормыПравойКнопкойUIAutomation",
		"И я делаю клик по элементу формы 'PID' 'Заголовок' 'Тип' правой кнопкой UI Automation",
		"Выполняет поиск элемента с помощью механизма UI Automation и делает клик по нему правой кнопкой мышки. Только под Windows. Необходимо включить использование компоненты VanessaExt. В параметр PID можно передать строку ""Этот сеанс"", тогда будет использован PID текущего сеанса, в котором запущена Vanessa Automation. Нужно обязательно передать параметр 'Заголовок'. Параметр 'Тип' необязательный.",
		"Прочее.UI Automation.Клик по элементу");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюДвойнойКликПоЭлементуФормыUIAutomation(Парам01,Парам02,Парам03)",
		"ЯДелаюДвойнойКликПоЭлементуФормыUIAutomation",
		"И я делаю двойной клик по элементу формы 'PID' 'Заголовок' 'Тип' UI Automation",
		"Выполняет поиск элемента с помощью механизма UI Automation. Только под Windows. Необходимо включить использование компоненты VanessaExt. В параметр PID можно передать строку ""Этот сеанс"", тогда будет использован PID текущего сеанса, в котором запущена Vanessa Automation. Нужно обязательно передать параметр 'Заголовок'. Параметр 'Тип' необязательный.",
		"Прочее.UI Automation.Клик по элементу");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюКликПоЭлементуФормыUIAutomationПоискПоПодсказке(Парам01,Парам02)",
		"ЯДелаюКликПоЭлементуФормыUIAutomationПоискПоПодсказке",
		"И я делаю клик по элементу формы 'PID' 'Подсказка' UI Automation. Поиск по подсказке",
		"Выполняет поиск элемента с помощью механизма UI Automation. Только под Windows. Необходимо включить использование компоненты VanessaExt. В параметр PID можно передать строку ""Этот сеанс"", тогда будет использован PID текущего сеанса, в котором запущена Vanessa Automation. Нужно обязательно передать параметр 'Подсказка'.",
		"Прочее.UI Automation.Клик по элементу");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯРисуюРамкуВокругЭлементовФормыUIAutomation(Парам01,ТабПарам1, ТабПарам2)",
		"ЯРисуюРамкуВокругЭлементовФормыUIAutomation",
		"И я рисую рамку вокруг элементов формы UI Automation ""PID"""
		+ Символы.ПС + "	| 'Имя'   | 'Тип' |"
		+ Символы.ПС + "	| 'Поле1' | 'Тип1' |"
		+ Символы.ПС + "	| 'Поле2' | 'Тип2' |"
		+ Символы.ПС 
		+ Символы.ПС + "	| 'Имя'          | 'Значение' |"
		+ Символы.ПС + "	| 'color'        | 32768      |"
		+ Символы.ПС + "	| 'transparency' | 127        |"
		+ Символы.ПС + "	| 'duration'     | 4000       |"
		+ Символы.ПС + "	| 'thickness'    | 6          |"
		+ Символы.ПС + "	| 'frameDelay'   | 20         |"
		,
		"Рисует рамку вокруг элементов, которые переданы таблицей. В параметр PID можно передать строку ""Этот сеанс"", тогда будет использован PID текущего сеанса, в котором запущена Vanessa Automation. Вторая таблица является необязательной. В ней передаются параметры отрисовки прямоугольника.",
		"Прочее.UI Automation.Эффекты");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯРисуюСтрелкуКЭлементамФормыUIAutomation(Парам01,ТабПарам1,ТабПарам2)",
		"ЯРисуюСтрелкуКЭлементамФормыUIAutomation",
		"И я рисую стрелку к элементам формы UI Automation ""PID"""
		+ Символы.ПС + "	| 'Имя'   | 'Тип' |"
		+ Символы.ПС + "	| 'Поле1' | 'Тип1' |"
		+ Символы.ПС + "	| 'Поле2' | 'Тип2' |"
		+ Символы.ПС 
		+ Символы.ПС + "	| 'Имя'          | 'Значение' |"
		+ Символы.ПС + "	| 'color'        | 32768      |"
		+ Символы.ПС + "	| 'transparency' | 127        |"
		+ Символы.ПС + "	| 'duration'     | 4000       |"
		+ Символы.ПС + "	| 'thickness'    | 6          |"
		+ Символы.ПС + "	| 'frameDelay'   | 20         |"
		,
		"Рисует стрелку к элементам, которые переданы таблицей. В параметр PID можно передать строку ""Этот сеанс"", тогда будет использован PID текущего сеанса, в котором запущена Vanessa Automation. Вторая таблица является необязательной. В ней передаются параметры отрисовки стрелки.",
		"Прочее.UI Automation.Эффекты");
		
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюЭффектЗатемненияУЭлементовФормыUIAutomation(Парам01,ТабПарам1,ТабПарам2)",
		"ЯДелаюЭффектЗатемненияУЭлементовФормыUIAutomation",
		"И я делаю эффект затемнения у элементов формы UI Automation ""PID"""
		+ Символы.ПС + "	| 'Имя/ID' | 'Тип' |"
		+ Символы.ПС + "	| 'Поле1'  | 'Тип1' |"
		+ Символы.ПС + "	| 'Поле2'  | 'Тип2' |"
		+ Символы.ПС 
		+ Символы.ПС + "	| 'Имя'          | 'Значение'  |"
		+ Символы.ПС + "	| 'text'         | 'Мой текст' |"
		+ Символы.ПС + "	| 'color'        | 32768       |"
		+ Символы.ПС + "	| 'transparency' | 127         |"
		+ Символы.ПС + "	| 'duration'     | 4000        |"
		+ Символы.ПС + "	| 'thickness'    | 6           |"
		+ Символы.ПС + "	| 'frameDelay'   | 20          |"
		,
		"Создаёт на экране эффект затемнения с текстовой подсказкой к элементам, которые переданы таблицей. В первой колонке можно указывать заголовок элемента или его ID. В параметр PID можно передать строку ""Этот сеанс"", тогда будет использован PID текущего сеанса, в котором запущена Vanessa Automation. Вторая таблица является необязательной. В ней передаются параметры отрисовки стрелки.",
		"Прочее.UI Automation.Эффекты");
		
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюЭффектЗатемненияУЭлементовФормыUIAutomationПоПодсказке(Парам01,ТабПарам1,ТабПарам2)",
		"ЯДелаюЭффектЗатемненияУЭлементовФормыUIAutomationПоПодсказке",
		"И я делаю эффект затемнения у элементов формы UI Automation ""PID"" по подсказке"
		+ Символы.ПС + "	| 'Подсказка' |"
		+ Символы.ПС + "	| 'Текст'     |"
		+ Символы.ПС 
		+ Символы.ПС + "	| 'Имя'          | 'Значение'  |"
		+ Символы.ПС + "	| 'text'         | 'Мой текст' |"
		+ Символы.ПС + "	| 'color'        | 32768       |"
		+ Символы.ПС + "	| 'transparency' | 127         |"
		+ Символы.ПС + "	| 'duration'     | 4000        |"
		+ Символы.ПС + "	| 'thickness'    | 6           |"
		+ Символы.ПС + "	| 'frameDelay'   | 20          |"
		,
		"Создаёт на экране эффект затемнения с текстовой подсказкой к элементам, которые переданы таблицей. В первой колонке нужно указывать подсказку элемента формы. В параметр PID можно передать строку ""Этот сеанс"", тогда будет использован PID текущего сеанса, в котором запущена Vanessa Automation. Вторая таблица является необязательной. В ней передаются параметры отрисовки стрелки.",
		"Прочее.UI Automation.Эффекты");
		
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗапоминаюРодителяЭлементаСТипомПроцессаВПеременнуюUIAutomation(Парам01,Парам02,Парам03,Парам04)",
		"ЯЗапоминаюРодителяЭлементаСТипомПроцессаВПеременнуюUIAutomation",
		"И я запоминаю родителя элемента ""Заголовок/ID"" с типом ""Тип"" процесса ""PID"" в переменную ""ИмяПеременной"" UI Automation",
		"Запоминает ID родителя элемента с указанным заголовком/ID и типом в переменную. В параметр PID можно передать строку ""Этот сеанс"", тогда будет использован PID текущего сеанса, в котором запущена Vanessa Automation.",
		"Прочее.UI Automation.Запомнить родителя элемента");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗапоминаюЭлементСТипомПроцессаВПеременнуюUIAutomation(Парам01,Парам02,Парам03,Парам04)",
		"ЯЗапоминаюЭлементСТипомПроцессаВПеременнуюUIAutomation","И я запоминаю элемент ""Заголовок"" с типом ""Тип"" процесса ""PID"" в переменную ""ИмяПеременной"" UI Automation",
		"Запоминает ID элемента с указанным заголовком и типом в переменную. В параметр PID можно передать строку ""Этот сеанс"", тогда будет использован PID текущего сеанса, в котором запущена Vanessa Automation.",
		"Прочее.UI Automation.Запомнить ID элемента");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюПодсветкуЭлементовVAUIAutomation(Парам01,Парам02,ТабПарам)",
		"ЯДелаюПодсветкуЭлементовVAUIAutomation",
		"И я делаю подсветку элементов VA UI Automation",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюПодсветкуЭлементовVAСИхЗаголовкомUIAutomation(Парам01,Парам02,ТабПарам)",
		"ЯДелаюПодсветкуЭлементовVAСИхЗаголовкомUIAutomation",
		"И я делаю подсветку элементов VA с их заголовком UI Automation",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗапоминаюIDЭлементаФормыVanessaAutomationСИменемВПеременную(Парам01,Парам02)",
		"ЯЗапоминаюIDЭлементаФормыVanessaAutomationСИменемВПеременную",
		"И я запоминаю ID элемента формы Vanessa Automation с именем ""ИмяПоля"" в переменную ""ИмяПеременной""",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюКликВПолеUIAutomation(Парам01)",
		"ЯДелаюКликВПолеUIAutomation",
		"И я делаю клик в поле ""ID"" UI Automation",
		"Делает клик по полю с указанным ID.",
		"Прочее.UI Automation.Клик по элементу");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюПодсказкуБалунУЭлементаUIAutomation(Парам01,ТабПарам)",
		"ЯДелаюПодсказкуБалунУЭлементаUIAutomation",
		"И я делаю подсказку балун у элемента ""$IDЭлемента$"" UI Automation"
		+ Символы.ПС + "	| 'Имя'        | 'Значение' |"
		+ Символы.ПС + "	| 'color'      | 3289800    |"
		+ Символы.ПС + "	| 'background' | 15793151   |"
		+ Символы.ПС + "	| 'fontColor'  | 0          |"
		+ Символы.ПС + "	| 'fontName'   | 'Calibri'  |"
		+ Символы.ПС + "	| 'fontSize'   | 12         |"
		+ Символы.ПС + "	| 'duration'   | 3000       |"
		+ Символы.ПС + "	| 'thickness'  | 4          |"
		+ Символы.ПС + "	| 'text'       | 'Текст'    |"
		+ Символы.ПС + "	| 'radius'     | 5          |"
		,
		"Показывает подсказку балун для элемента с заданным ID и параметрам переданным в таблице. Все параметры являются необязательными и имеют значение по умолчанию.",
		"Прочее.UI Automation.Эффекты");
		
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯПеремещаюМышкуККаждойКнопкеПанелиVanessaAutomation(Парам01)",
		"ЯПеремещаюМышкуККаждойКнопкеПанелиVanessaAutomation",
		"И я перемещаю мышку к каждой кнопке панели ""$IDПанели$"" Vanessa Automation",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗапоминаюЭлементСТипомCРодителемВПеременнуюVanessaAutomation(Парам01,Парам02,Парам03)",
		"ЯЗапоминаюЭлементСТипомCРодителемВПеременнуюVanessaAutomation",
		"И я запоминаю элемент с типом ""Тип"" c родителем ""$IDЭлемента$"" в переменную ""IDЭлемента"" Vanessa Automation",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗапоминаюРодителяЭлементаСИменемВПеременнуюVanessaAutomation(Парам01,Парам02)",
		"ЯЗапоминаюРодителяЭлементаСИменемВПеременнуюVanessaAutomation",
		"И я запоминаю родителя элемента с именем ""Имя"" в переменную ""ИмяПеременной"" Vanessa Automation",
		"",
		"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗапоминаюРодителяРодителяЭлементаСИменемВПеременнуюVanessaAutomation(Парам01,Парам02)",
		"ЯЗапоминаюРодителяРодителяЭлементаСИменемВПеременнуюVanessaAutomation",
		"И я запоминаю родителя родителя элемента с именем ""ИмяЭлемента"" в переменную ""IDРодителя"" Vanessa Automation",
		"",
		"");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗапоминаюЭлементСИменемВПеременнуюVanessaAutomation(Парам01,Парам02)",
		"ЯЗапоминаюЭлементСИменемВПеременнуюVanessaAutomation",
		"И я запоминаю элемент с именем ""Имя"" в переменную ""ИмяПеременной"" Vanessa Automation",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗапоминаюЭлементUIAutomationВПеременную(Парам01,ТабПарам)",
		"ЯЗапоминаюЭлементUIAutomationВПеременную",
		"И я запоминаю элемент UI Automation в переменную ""ИмяПеременной"""
		+ Символы.ПС + "	| 'Имя'                               | 'Значение'   |"
		+ Символы.ПС + "	| 'Name'                              | 'Заголовок'  |"
		+ Символы.ПС + "	| 'ProcessId'                         | 'ЭтотСеанс'  |"
		+ Символы.ПС + "	| 'Parent'                            | 'IdРодителя' |"
		+ Символы.ПС + "	| 'ControlType'                       | 'Тип'        |"
		+ Символы.ПС + "	| 'HelpText'                          | 'Подсказка'  |"
		+ Символы.ПС + "	| 'LegacyIAccessibleKeyboardShortcut' | 'Хоткей'     |"
		,
		"Запоминает ID элемента UI Automation согласно переданным параметрам в таблице",
		"Прочее.UI Automation.Запомнить ID элемента");
		
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюКликПоЭлементуUIAutomation(Парам01)",
		"ЯДелаюКликПоЭлементуUIAutomation",
		"И я делаю клик по элементу ""ID"" UI Automation",
		"Делает клик по элементу UI Automation с переданным ID.",
		"Прочее.UI Automation.Клик по элементу");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюПодсветкуГруппыЭлементовVA(Парам01, Парам02, Парам03)",
		"ЯДелаюПодсветкуГруппыЭлементовVA",
		"И Я делаю подсветку группы элементов VA ""ГруппаVanessaEditorВыполнениеСценариев""",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюКликПоЭлементуФормыVAUIAutomationПравойКнопкойUIAutomation(Парам01,Парам02)",
		"ЯДелаюКликПоЭлементуФормыVAUIAutomationПравойКнопкойUIAutomation",
		"И я делаю клик по элементу формы VA UI Automation 'ЭтотСеанс' 'ИмяЭлемента' правой кнопкой UI Automation",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюКликПоЭлементуФормыVAUIAutomationUIAutomation(Парам01,Парам02)",
		"ЯДелаюКликПоЭлементуФормыVAUIAutomationUIAutomation",
		"И я делаю клик по элементу формы VA UI Automation 'ЭтотСеанс' 'ИмяЭлемента' UI Automation",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюКликПоЭлементуФормыVAUIAutomation(Парам01,Парам02)",
		"ЯДелаюКликПоЭлементуФормыVAUIAutomation",
		"И я делаю клик по элементу формы VA UI Automation 'ЭтотСеанс' 'ИмяЭлемента'",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯПеремещаюКурсорКЭлементуФормыVAUIAutomationUIAutomation(Парам01,Парам02)",
		"ЯПеремещаюКурсорКЭлементуФормыVAUIAutomationUIAutomation",
		"И я перемещаю курсор к элементу формы VA UI Automation 'ЭтотСеанс' 'ИмяЭлемента' UI Automation",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯПеремещаюКурсорКЭлементуФормыVAUIAutomation(Парам01,Парам02)",
		"ЯПеремещаюКурсорКЭлементуФормыVAUIAutomation",
		"И я перемещаю курсор к элементу формы VA UI Automation 'ЭтотСеанс' 'ИмяЭлемента'",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"СлужебныйШагUIAutomation()","СлужебныйШагUIAutomation","И служебный шаг UI Automation","","");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯПеремещаюКурсорКЗаголовкуVanessaAutomation()",
		"ЯПеремещаюКурсорКЗаголовкуVanessaAutomation","И я перемещаю курсор к заголовку Vanessa Automation",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюКликПоЗаголовкуVanessaAutomation()",
		"ЯДелаюКликПоЗаголовкуVanessaAutomation",
		"И я делаю клик по заголовку Vanessa Automation",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ТестовыйШагДляРамкиВокругТекстаРекдактора()",
		"ТестовыйШагДляРамкиВокругТекстаРекдактора",
		"И тестовый шаг для рамки вокруг текста рекдактора",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"СуществуетЭлементUIAutomationСИменемИТипом(Парам01,Парам02,Парам03)",
		"СуществуетЭлементUIAutomationСИменемИТипом",
		"И существует элемент UI Automation ""PID"" с именем ""Имя"" и типом ""Тип""",
		"Проверяет, что существует нужный элемент UI Automation.",
		"Прочее.UI Automation.Существование элемента");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюПодсветкуТекстаВРедактореVAВРежимеОбученияВСтроке(Парам01, Парам02)",
		"ЯДелаюПодсветкуТекстаВРедактореVAВРежимеОбученияВСтроке",
		"И я делаю подсветку текста в редакторе VA в режиме обучения в строке 1 'Текст'",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюПодсветкуТекстаВРедактореVAВРежимеОбученияСПоСтроку(Парам01,Парам02,Парам03)",
		"ЯДелаюПодсветкуТекстаВРедактореVAВРежимеОбученияСПоСтроку",
		"И я делаю подсветку текста в редакторе VA в режиме обучения с 3 по 5 строку ""Секция тегов фичи""",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюПодсветкуФрагментаТекстаВРедактореVAВРежимеОбучения(Парам01,Парам02)",
		"ЯДелаюПодсветкуФрагментаТекстаВРедактореVAВРежимеОбучения",
		"И я делаю подсветку фрагмента текста в редакторе VA в режиме обучения ""Функциональность:"" ""Ключевое слово Функциональность""",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюПодсветкуВОкнеСообщенийПоЧастиСтроки(Парам01, Парам02)",
		"ЯДелаюПодсветкуВОкнеСообщенийПоЧастиСтроки",
		"И я делаю подсветку в окне сообщений по части строки 'Пустой адрес снипета' 'Текст'",
		"",
		"");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯОжидаюНажатиеНаЭлементСИменемИТипомПоказываяТекстПокаНеПоявитсяЭлементСИменемИТипом(Парам01,Парам02,Парам03,Парам04,Парам05)",
		"ЯОжидаюНажатиеНаЭлементСИменемИТипомПоказываяТекстПокаНеПоявитсяЭлементСИменемИТипом",
		"И я ожидаю нажатие на элемент с именем ""Имя"" и типом ""Тип"" показывая текст ""Текст"" пока не появится элемент с именем ""Имя"" и типом ""Тип""",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯОжидаюПокаВПолеСИменемИТипомНеБудетСтроки(Парам01,Парам02,Парам03)",
		"ЯОжидаюПокаВПолеСИменемИТипомНеБудетСтроки",
		"И я ожидаю пока в поле с именем ""Имя"" и типом ""Тип"" не будет строки ""Значение""",
		"",
		"");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюПодсветкуФрагментаТекстаВРедактореVAВСтрокеВРежимеОбучения(Парам01,Парам02,Парам03)",
		"ЯДелаюПодсветкуФрагментаТекстаВРедактореVAВСтрокеВРежимеОбучения",
		"И я делаю подсветку фрагмента текста в редакторе VA в строке 1 в режиме обучения ""ИскомыйТекст"" 'Подсказка'",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯСоздаюСостояниеOnboarding(ТабПарам)",
		"ЯСоздаюСостояниеOnboarding",
		"И я создаю состояние Onboarding",
		"Задает состояние с помощью таблицы.
			|| 'Имя'                | 'Номер'           |
			|| 'ИмяЭлемента'        | 'Номер'           |
			|| 'Текст'              | 'Номер документа' |
			|| 'НачальноеСостояние' | 'Нет'             |
			|| 'КонечноеСостояние'  | 'Нет'             |
			|| 'Окно'               | 'Заказ клиента*'  |
			|| 'Переход'            | 'Дата'            |
			|",
		"Прочее.UI Automation.Onboarding");
		
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗапускаюOnboarding()",
		"ЯЗапускаюOnboarding",
		"И я запускаю Onboarding",
		"Запускает показ пользователю справки Onboarding, по созданным ранее состояниям.",
		"Прочее.UI Automation.Onboarding");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗапоминаюЭлементСТипомПодчиненныйВПеременнуюVanessaAutomation(Парам01,Парам02,Парам03)",
		"ЯЗапоминаюЭлементСТипомПодчиненныйВПеременнуюVanessaAutomation",
		"И я запоминаю элемент с типом ""Тип"" подчиненный ""$IDПанели$"" в переменную ""IDТаблицы"" Vanessa Automation",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЖдуПоявленияЭлементаUIAutomationСИменемИТипомВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)",
		"ЯЖдуПоявленияЭлементаUIAutomationСИменемИТипомВТечениеСекунд",
		"И я жду появления элемента UI Automation ""PID"" с именем ""Имя"" и типом ""Тип"" в течение 10 секунд",
		"Ожидает появления у указанного процесса элемента с нужным именем и типом. Если отбор по типу не нужен, то нужно передать пустое значение параметра.",
		"Прочее.UI Automation.Ожидание появления элемента");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюПодсветкуРасширеннойПодсказкиЭлементаVAUIAutomation(Парам01,Парам02)",
		"ЯДелаюПодсветкуРасширеннойПодсказкиЭлементаVAUIAutomation",
		"И я делаю подсветку расширенной подсказки элемента VA ""ИмяЭлемента"" ""ТекстПодсказки"" UI Automation",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗапоминаюIDЭлементаVAСТипомСледующимЗаЭлементомВПеременнуюUIAutomation(Парам01,Парам02,Парам03)",
		"ЯЗапоминаюIDЭлементаVAСТипомСледующимЗаЭлементомВПеременнуюUIAutomation",
		"И я запоминаю ID элемента VA с типом ""Тип"" следующим за элементом ""ИмяЭлемента"" в переменную ""ИмяПеременной"" UI Automation",
		"",
		"");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯПеремещаюКурсорКЭлементуФормыUIAutomation(Парам01,Парам02,Парам03)",
		"ЯПеремещаюКурсорКЭлементуФормыUIAutomation",
		"И я перемещаю курсор к элементу формы  'PID' 'Имя' 'Тип' UI Automation",
		"Перемещает курсор мышки к указанному элементу формы. Параметр ""Тип"" является необязательным.",
		"Прочее.UI Automation.Курсор к элементу формы");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯПеремещаюКурсорМышкиКТекстуВСтрокеРедактораVAВРежимеОбучения(Парам01)",
		"ЯПеремещаюКурсорМышкиКТекстуВСтрокеРедактораVAВРежимеОбучения",
		"И я перемещаю курсор мышки к тексту в строке редактора 8 VA в режиме обучения",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ПолучаюДанныеТекущегоЭлементаФормыАктивногоОкнаUIAutomation()",
		"ПолучаюДанныеТекущегоЭлементаФормыАктивногоОкнаUIAutomation",
		"И получаю данные текущего элемента формы активного окна UI Automation",
		"Получает данные текущего элемента формы текщего окна windows с помощью механизма UI Automation.
		|Создает переменные, если есть соответствующие свойства у активного элемента: uia_id,uia_Type,uia_name,uia_value,uia_HelpText",
		"Прочее.UI Automation.Получение данных активного элемента формы");
	
	Возврат ВсеТесты;
	
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОповещениеДляПродолженияРаботыФормыUIAutomation" Тогда
		ПодключитьОбработчикОжидания(Параметр.ОбработчикОжидания, 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Функция выполняется перед началом каждого сценария
Функция ПередНачаломСценария() Экспорт
	
КонецФункции

&НаКлиенте
// Функция выполняется перед окончанием каждого сценария
Функция ПередОкончаниемСценария() Экспорт
	
КонецФункции



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
Функция ПустоеОповещениеСПродолжениемВыполненияСценария(Парам1, Парам2, ДопПараметры) Экспорт
	Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ИмяОбработчика") Тогда
		Если ДопПараметры.ИмяОбработчика <> "НеВыполнятьОбработчик" Тогда
			ПодключитьОбработчикОжидания(ДопПараметры.ИмяОбработчика, 0.1, Истина);
		КонецЕсли;	
	Иначе
		Ванесса.ПродолжитьВыполнениеШагов();
	КонецЕсли;
КонецФункции 

&НаКлиенте
Функция ОставитьТолькоТекстовыеЭлементыЕслиЭтоВозможно(ДанныеПолей)
	
	Если ДанныеПолей = Неопределено Тогда
		Возврат ДанныеПолей; 
	КонецЕсли;	 
	
	Результат = Новый Массив;
	Для Каждого Элем Из ДанныеПолей Цикл
		Если НРег(Элем.Type) = НРег("Text") Тогда
			Результат.Добавить(Элем);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если Результат.Количество() > 0 Тогда
		Возврат Результат; 
	КонецЕсли;	 
	
	Возврат ДанныеПолей; 
	
КонецФункции

&НаКлиенте
Функция ИсключитьТекстовыеЭлементыЕслиЭтоВозможно(ДанныеПолей)
	
	Если ДанныеПолей = Неопределено Тогда
		Возврат ДанныеПолей; 
	КонецЕсли;	 
	
	Результат = Новый Массив;
	Для Каждого Элем Из ДанныеПолей Цикл
		Если НРег(Элем.Type) = НРег("CheckBox") Тогда
			//Для флагов исключать не надо
			Возврат ДанныеПолей; 
		ИначеЕсли НРег(Элем.Type) <> НРег("Text") Тогда
			Результат.Добавить(Элем);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если Результат.Количество() > 0 Тогда
		Возврат Результат; 
	КонецЕсли;	 
	
	Возврат ДанныеПолей; 
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеКоординатЭлементовПоТаблице(PID, ТаблицаЭлементов, Left, Top, Bottom, Right);
	PID = ПолучитьКорректныйPID(PID);
	
	Left = 1000000000000000;
	Top = 1000000000000000;
	Bottom = -1;
	Right = -1;

	МассивЭлементов = Новый Массив;
	
	СтрокаОшибки = "";
	БылаОшибка = Ложь;
	
	ПоискПоПодсказке = Ложь;
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
		
		Попытка
			
			Сч = 0;
			Для Каждого СтрокаТаблицаЭлементов Из ТаблицаЭлементов Цикл
				Сч = Сч + 1;
				Если Сч = 1 Тогда
					//В первой строке заголовок таблицы
					Если НРег(СтрокаТаблицаЭлементов.Кол1) = "подсказка" Тогда
						ПоискПоПодсказке = Истина;
					КонецЕсли;	 
					Продолжить;
				КонецЕсли;	 
				
				Если ПоискПоПодсказке Тогда
					Подсказка = СтрокаТаблицаЭлементов.Кол1;
					Если Ванесса.Версия8319ИлиВыше Тогда
						ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, HelpText", Число(PID), Подсказка));
					Иначе	
						ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, LegacyIAccessibleHelp", Число(PID), Подсказка));
					КонецЕсли;	
					ДанныеПолей = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементов));
					Если ДанныеПолей = Неопределено ИЛИ ДанныеПолей.Количество() = 0 Тогда
						ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
							Ванесса.Локализовать("Не получилось найти элемент UI Automation. PID <%1>, подсказка <%2>."), PID, Подсказка);
					КонецЕсли;
					
					МассивЭлементов.Добавить(ДанныеПолей[0]);
				Иначе
					
					ДанныеЭлемента = Неопределено;
					ЗаголовокЭлемента = Строка(СтрокаТаблицаЭлементов.Кол1);
					Если СтрокаТаблицаЭлементов.Свойство("Кол2") Тогда
						ТипЭлемента = СтрокаТаблицаЭлементов.Кол2;
					Иначе	
						ТипЭлемента = Неопределено;
					КонецЕсли;	 
					ДанныеПолей = Ванесса.НайтиЭлементыПроцессаUIAutomation(Число(PID), ЗаголовокЭлемента, ТипЭлемента);
					ДанныеПолей = ИсключитьТекстовыеЭлементыЕслиЭтоВозможно(ДанныеПолей);
					//ДанныеПолей = ОставитьТолькоТекстовыеЭлементыЕслиЭтоВозможно(ДанныеПолей);
					
					Если ДанныеПолей = Неопределено И ЗаголовокЭлемента = "" И ЗначениеЗаполнено(ТипЭлемента) Тогда
						ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, ControlType", Число(PID), ТипЭлемента));
						ДанныеПолей = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементов));
					КонецЕсли;	 
					
					Если ДанныеПолей = Неопределено И ЗначениеЗаполнено(ЗаголовокЭлемента) Тогда
						Попытка
							ДанныеЭлемента = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ЭлементПоИдентификатору(ЗаголовокЭлемента));
						Исключение
						КонецПопытки;
					КонецЕсли;	 
					
					Если ДанныеЭлемента = Неопределено Тогда
						Если ДанныеПолей = Неопределено Тогда
							ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
							Ванесса.Локализовать("Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>."), PID, ЗаголовокЭлемента, ТипЭлемента);
						КонецЕсли;
						
						Если ДанныеПолей.Количество() = 0 Тогда
							ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
							Ванесса.Локализовать("Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>."), PID, ЗаголовокЭлемента, ТипЭлемента);
						КонецЕсли;	
						
						Для Каждого Элем Из ДанныеПолей Цикл
							МассивЭлементов.Добавить(Элем);	
						КонецЦикла;	 
					Иначе	
						МассивЭлементов.Добавить(ДанныеЭлемента);
					КонецЕсли;	 
					
				КонецЕсли;	 
					
			КонецЦикла;	 
			
			ОпределитьКоординатыПоМассивуЭлементовUIAutomation(МассивЭлементов, Left, Top, Bottom, Right);
			
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
	
КонецФункции 

&НаКлиенте
Процедура ОпределитьКоординатыПоМассивуЭлементовUIAutomation(МассивЭлементов, Left, Top, Bottom, Right)
	
	Ванесса.ОпределитьКоординатыПоМассивуЭлементовUIAutomation(МассивЭлементов, Left, Top, Bottom, Right);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКорректныйPID(PID)
	
	Возврат Ванесса.ПолучитьКорректныйPID(PID); 
	
КонецФункции	 

&НаКлиенте
Функция ДополнитьПараметрыОтрисовкиПереданныеПользователем(НастройкиРисования, ПараметрыОтрисовки)
	
	Возврат Ванесса.ДополнитьПараметрыОтрисовкиПереданныеПользователем(НастройкиРисования, ПараметрыОтрисовки);
	
КонецФункции	 

&НаКлиенте
//И я делаю клик по объекту 'Заголовок' 'Тип' UI Automation
//@ЯДелаюКликПоЭлементуКлиентаТестированияUIAutomation(Парам01,Парам02)
Функция ЯДелаюКликПоЭлементуКлиентаТестированияUIAutomation(Заголовок, Тип = "") Экспорт
	
	ТекстСообщения = "";
	СтрокаОшибки = "";
	БылаОшибка = Ложь;
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
	
		Попытка
			ТекущиеДанныеКлиентаТестирования = Ванесса.ТекущиеДанныеКлиентаТестирования();
			ОтборЭлементов = Новый Структура("Name,ProcessId", Заголовок, ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования);
			Если ЗначениеЗаполнено(Тип) Тогда
				ОтборЭлементов.Вставить("ControlType", Тип)
			КонецЕсли;
			ОтборЭлементовJSON = Ванесса.ЗаписатьОбъектJSON(ОтборЭлементов);
			РезультатПоискаJSON = Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементовJSON);
			ДанныеЭлементов = Ванесса.ПрочитатьОбъектJSON(РезультатПоискаJSON);
			
			Если ДанныеЭлементов = Неопределено Тогда
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
					Ванесса.Локализовать("Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>."),
					ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, Заголовок, Тип);
			КонецЕсли;	 
			
			Если ДанныеЭлементов.Количество() = 0 Тогда
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
					Ванесса.Локализовать("Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>."),
					ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, Заголовок, Тип);
			КонецЕсли;	 
			
			Если ДанныеЭлементов.Количество() > 1 Тогда
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
					Ванесса.Локализовать("Найдено <%1> элементов UI Automation по переданным данным PID <%2>, заголовок <%3>, тип <%4>."),
					ДанныеЭлементов.Количество(), ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, Заголовок, Тип);
			КонецЕсли;	 
				
			Ванесса.КликПоЭлементуБезПеремещенияМышкиUIAutomation(ДанныеЭлементов[0].size);
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;

	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И я делаю клик по элементу формы 'ЭтотСеанс' 'Генератор EPF' 'TabItem' UI Automation
//@ЯДелаюКликПоЭлементуФормыUIAutomation(Парам01,Парам02)
Функция ЯДелаюКликПоЭлементуФормыUIAutomation(Знач PID, Заголовок, Тип = "", ДвойнойКлик = Ложь, ЛеваяКнопка = Истина) Экспорт
	
	PID = ПолучитьКорректныйPID(PID);
	
	ТекстСообщения = "";
	СтрокаОшибки = "";
	БылаОшибка = Ложь;
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
	
		Попытка
			ДанныеЭлементов = Ванесса.НайтиЭлементыПроцессаUIAutomation(PID, Заголовок, Тип);
			
			Если ДанныеЭлементов = Неопределено И НЕ ЗначениеЗаполнено(Заголовок) Тогда
				ДанныеЭлементов = Ванесса.НайтиЭлементыПроцессаUIAutomation(PID, Заголовок, Тип, Ложь);
			КонецЕсли;	 
			
			Если ДанныеЭлементов = Неопределено И НРег(Тип) = НРег("ListItem") И Ванесса.Версия8323ИлиВыше Тогда
				ДанныеЭлементов = Ванесса.НайтиЭлементыПроцессаUIAutomation(PID, Заголовок, , Ложь);
			КонецЕсли;	
			
			Если ДанныеЭлементов = Неопределено Тогда
				
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
					Ванесса.Локализовать("Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>."),
					PID, Заголовок, Тип);
			КонецЕсли;	 
			
			Если ДанныеЭлементов.Количество() = 0 Тогда
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
					Ванесса.Локализовать("Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>."),
					PID, Заголовок, Тип);
			КонецЕсли;	 
			
			Если ДанныеЭлементов.Количество() > 1 Тогда
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
					Ванесса.Локализовать("Найдено <%1> элементов UI Automation по переданным данным PID <%2>, заголовок <%3>, тип <%4>."),
					ДанныеЭлементов.Количество(), PID, Заголовок, Тип);
			КонецЕсли;	 
				
			Ванесса.КликПоЭлементуБезПеремещенияМышкиUIAutomation(ДанныеЭлементов[0].size, ДвойнойКлик, ЛеваяКнопка);
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;

	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И я делаю клик по элементу формы 'ЭтотСеанс' 'Генератор EPF' 'TabItem' правой кнопкой UI Automation
//@ЯДелаюКликПоЭлементуФормыПравойКнопкойUIAutomation(Парам01,Парам02)
Функция ЯДелаюКликПоЭлементуФормыПравойКнопкойUIAutomation(Знач PID, Заголовок, Тип = "") Экспорт
	
	ЯДелаюКликПоЭлементуФормыUIAutomation(PID, Заголовок, Тип, Ложь, Ложь);
	
КонецФункции

&НаКлиенте
//И я делаю двойной клик по элементу формы 'ЭтотСеанс' 'Генератор EPF' 'TabItem' UI Automation
//@ЯДелаюДвойнойКликПоЭлементуФормыUIAutomation(Парам01,Парам02)
Функция ЯДелаюДвойнойКликПоЭлементуФормыUIAutomation(Знач PID, Заголовок, Тип = "") Экспорт
	
	ЯДелаюКликПоЭлементуФормыUIAutomation(PID, Заголовок, Тип, Истина);
	
КонецФункции

&НаКлиенте
//И я делаю клик по элементу формы 'ЭтотСеанс' 'Генератор EPF' UI Automation. Поиск по подсказке.
//@ЯДелаюКликПоЭлементуФормыUIAutomationПоискПоПодсказке(Парам01,Парам02)
Функция ЯДелаюКликПоЭлементуФормыUIAutomationПоискПоПодсказке(Знач PID, Подсказка) Экспорт
	
	PID = ПолучитьКорректныйPID(PID);
	
	ТекстСообщения = "";
	СтрокаОшибки = "";
	БылаОшибка = Ложь;
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
	
		Попытка
			Если Ванесса.Версия8319ИлиВыше Тогда
				ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, HelpText", Число(PID), Подсказка));
			Иначе	
				ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, LegacyIAccessibleHelp", Число(PID), Подсказка));
			КонецЕсли;	
			
			ДанныеЭлементов = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементов));
				
			Ванесса.КликПоЭлементуБезПеремещенияМышкиUIAutomation(ДанныеЭлементов[0].size);
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;

	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И я рисую рамку вокруг элементов формы UI Automation "ЭтотСеанс"
//@ЯРисуюРамкуВокругЭлементовФормыUIAutomation(Парам01,ТабПарам)
Функция ЯРисуюРамкуВокругЭлементовФормыUIAutomation(Знач PID,ТаблицаЭлементов, ПараметрыОтрисовки = Неопределено, ОбработчикПродолжения = Неопределено) Экспорт
	Left = -1;
	Top = -1;
	Bottom = -1;
	Right = -1;
	ПолучитьДанныеКоординатЭлементовПоТаблице(PID, ТаблицаЭлементов, Left, Top, Bottom, Right);
	
	ДопПараметры = Неопределено;
	Если НЕ ОбработчикПродолжения = Неопределено Тогда
		Доппараметры = Новый Структура("ИмяОбработчика", ОбработчикПродолжения);
	КонецЕсли;

	Если Right <> -1 Тогда
		// Значит были элементы в таблице
		
		Ванесса.ЗапретитьВыполнениеШагов();
		
		НастройкиРисованияПоУмолчанию = Ванесса.ПолучитьНастройкиРисования();
		НастройкиРисования = ДополнитьПараметрыОтрисовкиПереданныеПользователем(НастройкиРисованияПоУмолчанию, ПараметрыОтрисовки);
		НастройкиРисованияJSON = Ванесса.ЗаписатьОбъектJSON(НастройкиРисования); 
		ОписаниеОповещения = Новый ОписаниеОповещения("ПустоеОповещениеСПродолжениемВыполненияСценария", ЭтаФорма, ДопПараметры);
		Ванесса.ВнешняяКомпонентаДляСкриншотов.НачатьВызовНарисоватьПрямоугольник(
			ОписаниеОповещения,
			НастройкиРисованияJSON,
			Left - НастройкиРисования.thickness,
			Top - НастройкиРисования.thickness,
			Right - Left + НастройкиРисования.thickness*2,
			Bottom - Top + НастройкиРисования.thickness*2);
		
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И я рисую стрелку к элементам формы UI Automation "ЭтотСеанс"
//@ЯРисуюСтрелкуКЭлементамФормыUIAutomation(Парам01,ТабПарам1,ТабПарам2)
Функция ЯРисуюСтрелкуКЭлементамФормыUIAutomation(Знач PID,ТаблицаЭлементов, ПараметрыОтрисовки = Неопределено) Экспорт
	
	Left = -1;
	Top = -1;
	Bottom = -1;
	Right = -1;
	ПолучитьДанныеКоординатЭлементовПоТаблице(PID, ТаблицаЭлементов, Left, Top, Bottom, Right);
	
	Если Right <> -1 Тогда
		// Значит были элементы в таблице
		
		Ванесса.ЗапретитьВыполнениеШагов();
		
		НастройкиРисованияПоУмолчанию = Ванесса.ПолучитьНастройкиРисования();
		НастройкиРисования = ДополнитьПараметрыОтрисовкиПереданныеПользователем(НастройкиРисованияПоУмолчанию, ПараметрыОтрисовки);
		НастройкиРисованияJSON = Ванесса.ЗаписатьОбъектJSON(НастройкиРисования); 
		
		ИнформацияЭкранаКлиента = Вычислить("ПолучитьИнформациюЭкрановКлиента()[0]");
		Ширина = ИнформацияЭкранаКлиента.Ширина;
		Высота = ИнформацияЭкранаКлиента.Высота;
		
		X1 = Цел(Ширина/2);
		Y1 = Цел(Высота/2);
		
		Если Left > X1 Тогда
			//Значит объект справа от центра
			X2 = Left;
		Иначе	
			//Значит объект слева от центра
			X2 = Left + Right - Left;
		КонецЕсли;
		
		Y2 = Top + Цел((Bottom - Top)/2);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПустоеОповещениеСПродолжениемВыполненияСценария", ЭтаФорма);
		Ванесса.ВнешняяКомпонентаДляСкриншотов.НачатьВызовНарисоватьСтрелку(
			ОписаниеОповещения,
			НастройкиРисованияJSON,
			X1,
			Y1,
			X2,
			Y2);
		
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И я делаю эффект затемнения у элементов формы UI Automation "ЭтотСеанс"
//@ЯДелаюЭффектЗатемненияУЭлементовФормыUIAutomation(Парам01,ТабПарам1,ТабПарам2)
Функция ЯДелаюЭффектЗатемненияУЭлементовФормыUIAutomation(Знач PID, ТаблицаЭлементов, ПараметрыОтрисовки = Неопределено, ОбработчикПродолжения = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	Left = -1;
	Top = -1;
	Bottom = -1;
	Right = -1;
	ПолучитьДанныеКоординатЭлементовПоТаблице(PID, ТаблицаЭлементов, Left, Top, Bottom, Right);
	
	Если Right <> -1 Тогда
		// Значит были элементы в таблице
		
		НарисоватТеньПоКоординатам(Left, Top, Right, Bottom, ПараметрыОтрисовки, ОбработчикПродолжения, ДопПараметры);
		
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И я делаю эффект затемнения у элементов формы UI Automation "ЭтотСеанс" по подсказке
//@ЯДелаюЭффектЗатемненияУЭлементовФормыUIAutomationПоПодсказке(Парам01,ТабПарам1,ТабПарам2)
Функция ЯДелаюЭффектЗатемненияУЭлементовФормыUIAutomationПоПодсказке(Знач PID, ТаблицаЭлементов, ПараметрыОтрисовки = Неопределено, ОбработчикПродолжения = Неопределено) Экспорт
	
	Left = -1;
	Top = -1;
	Bottom = -1;
	Right = -1;
	ПолучитьДанныеКоординатЭлементовПоТаблице(PID, ТаблицаЭлементов, Left, Top, Bottom, Right);
	
	Если Right <> -1 Тогда
		// Значит были элементы в таблице
		
		НарисоватТеньПоКоординатам(Left, Top, Right, Bottom, ПараметрыОтрисовки, ОбработчикПродолжения);
		
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
Функция НарисоватТеньПоКоординатам(Left, Top, Right, Bottom, ПараметрыОтрисовки, ОбработчикПродолжения = Неопределено, ДопПараметры = Неопределено)
	
	Ванесса.НарисоватТеньПоКоординатам(Left, Top, Right, Bottom, ПараметрыОтрисовки, ОбработчикПродолжения, ДопПараметры);
	
КонецФункции 

&НаКлиенте
//И я запоминаю родителя элемента "Заголовок" процесса "ЭтотСеанс" в переменную UI Automation
//@ЯЗапоминаюРодителяЭлементаПроцессаВПеременнуюUIAutomation(Парам01,Парам02)
Функция ЯЗапоминаюРодителяЭлементаСТипомПроцессаВПеременнуюUIAutomation(ЗаголовокЭлемента, ТипЭлемента, Знач PID, ИмяПеременной) Экспорт
	PID = ПолучитьКорректныйPID(PID);
	
	ДанныеПолей = Ванесса.НайтиЭлементыПроцессаUIAutomation(Число(PID), ЗаголовокЭлемента, ТипЭлемента);
	
	ДанныеЭлемента = Неопределено;
	Если ДанныеПолей = Неопределено ИЛИ ДанныеПолей.Количество() = 0 Тогда
		Попытка
			ДанныеЭлемента = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ЭлементПоИдентификатору(ЗаголовокЭлемента));
		Исключение
			ДанныеЭлемента = Неопределено;
		КонецПопытки;
		
		Если ДанныеЭлемента = Неопределено Тогда
			ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
				"Не получилось найти элемент UI Automation. PID <%1>, заголовок/ID <%2>, тип <%3>.", PID, ЗаголовокЭлемента, ТипЭлемента);
		КонецЕсли;	 
	КонецЕсли;	
	
	Если ДанныеЭлемента = Неопределено Тогда
		ТекПоле = ДанныеПолей[0];
	Иначе	
		ТекПоле = ДанныеЭлемента;
	КонецЕсли;	 
	РодительЭлемента = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ПолучитьРодителяЭлемента(ТекПоле.Id));
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, РодительЭлемента.Id);
	
КонецФункции

&НаКлиенте
//И я запоминаю элемент "Заголовок" процесса "ЭтотСеанс" в переменную UI Automation
//@ЯЗапоминаюЭлементСТипомПроцессаВПеременнуюUIAutomation(Парам01,Парам02)
Функция ЯЗапоминаюЭлементСТипомПроцессаВПеременнуюUIAutomation(ЗаголовокЭлемента, ТипЭлемента, Знач PID, ИмяПеременной) Экспорт
	PID = ПолучитьКорректныйPID(PID);
	
	ДанныеПолей = Ванесса.НайтиЭлементыПроцессаUIAutomation(Число(PID), ЗаголовокЭлемента, ТипЭлемента);
	Если ДанныеПолей = Неопределено Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
			"Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>.", PID, ЗаголовокЭлемента, ТипЭлемента);
	КонецЕсли;
	
	Если ДанныеПолей.Количество() = 0 Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
			"Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>.", PID, ЗаголовокЭлемента, ТипЭлемента);
	КонецЕсли;	
	
	ТекПоле = ДанныеПолей[0];
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, ТекПоле.Id);
	
КонецФункции

&НаКлиенте
Функция ОставитьТолькоТипВМассиве(ДанныеПолей, ТипСтрокой)
	Результат = Новый Массив;
	
	Для Каждого Элем Из ДанныеПолей Цикл
		Если НРег(Элем.Type) = НРег(ТипСтрокой) Тогда
			Результат.Добавить(Элем);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Возврат Результат; 
	
КонецФункции	 

&НаКлиенте
Функция ЭтоГруппаЭлементовUIAutomation(ЗаголовокЭлемента)
	
	Если НРег(ЗаголовокЭлемента) = НРег("Панель разделов") Тогда
		Возврат Ложь;
	ИначеЕсли НРег(ЗаголовокЭлемента) = НРег("Меню функций") Тогда
		Возврат Ложь;
	ИначеЕсли НРег(ЗаголовокЭлемента) = НРег("Sections panel") Тогда
		Возврат Ложь;
	ИначеЕсли НРег(ЗаголовокЭлемента) = НРег("Functions menu") Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
	
КонецФункции	 

&НаКлиенте
Функция ОставитьТолькоГруппыУбратьКИ(ДанныеПолей)
	Результат = Новый Массив;
	
	Для Каждого Элем Из ДанныеПолей Цикл
		РодительЭлемента = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ПолучитьРодителяЭлемента(Элем.Id));
		Если НЕ ЭтоГруппаЭлементовUIAutomation(РодительЭлемента.Name) Тогда
			Продолжить;
		КонецЕсли;	 
		Результат.Добавить(Элем);
	КонецЦикла;	 
	
	Возврат Результат; 
	
КонецФункции	 

&НаКлиенте
Функция ОпределитьЗаголовокЭлементаВДругихОкнахVA(ИмяЭлемента)
	Окна = ПолучитьОкна();
	Для Каждого ТекОкно Из Окна Цикл
		Если ТекОкно.Содержимое.Количество() > 0 Тогда
			ТекФорма = ТекОкно.Содержимое[0];
			ТекИмяФормы = ТекФорма.ИмяФормы;
			Если Найти(ТекИмяФормы, ".УправляемаяФорма") > 0 Тогда
				Продолжить;
			КонецЕсли;	 
			
			ЭлементФормы = Неопределено;
			Попытка
				ЭлементФормы = ТекФорма.Элементы[ИмяЭлемента];
			Исключение
			КонецПопытки;
			
			Если ЭлементФормы = Неопределено Тогда
				Попытка
					ЭлементФормы = ТекФорма.КоманднаяПанель.ПодчиненныеЭлементы[ИмяЭлемента];
				Исключение
				КонецПопытки;
			КонецЕсли;	 
			
			Если ЭлементФормы = Неопределено Тогда
				Продолжить;
			КонецЕсли;	 
			
			Если ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда
				ДанныеКоманды = ТекФорма.ДанныеКомандыVanessaAutomation(ЭлементФормы.ИмяКоманды);
				Если НЕ ЗначениеЗаполнено(ДанныеКоманды.Заголовок) И ЗначениеЗаполнено(ЭлементФормы.Заголовок) Тогда
					ДанныеКоманды.Вставить("Заголовок", ЭлементФормы.Заголовок);
				КонецЕсли;	 
				Если ЗначениеЗаполнено(ДанныеКоманды.Заголовок) Тогда
					ДанныеКоманды.Вставить("ЭлементФормы", ЭлементФормы);
					Возврат ДанныеКоманды; 
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если ЗначениеЗаполнено(ЭлементФормы.Заголовок) Тогда
				Результат = Новый Структура;
				Результат.Вставить("Заголовок", ЭлементФормы.Заголовок);
				Результат.Вставить("Подсказка", ЭлементФормы.Подсказка);
				Результат.Вставить("ЭлементФормы", ЭлементФормы);
				
				Возврат Результат; 
			КонецЕсли;	 
			
		КонецЕсли;	 
	КонецЦикла;
	
КонецФункции	 

&НаКлиенте
Функция ОпределитьЭлементUIAutomationЭлементаФормыVAПоЕгоИмени(PID, ИмяЭлемента, ТипЭлемента, ВсеПоля, ИмяЭлементаСТемжеРодителем, РодителиЭлементов)
	
	Если КонтекстСохраняемый.Свойство("ФормаVAВРежимеОбучения") Тогда
		ИсточникДанных = КонтекстСохраняемый.ФормаVAВРежимеОбучения;
	Иначе	
		ИсточникДанных = Ванесса;
	КонецЕсли;	 
	
	ЗаголовокЭлемента = Неопределено;
	ЭтоЭлементДругойФормы = Ложь;
	Попытка
		ЗаголовокЭлемента = ИсточникДанных.Элементы[ИмяЭлемента].Заголовок;
	Исключение
		ДанныеЭлементаДругойФормы = ОпределитьЗаголовокЭлементаВДругихОкнахVA(ИмяЭлемента);
		Если ДанныеЭлементаДругойФормы <> Неопределено Тогда
			ЭтоЭлементДругойФормы = Истина;
			ЗаголовокЭлемента = ДанныеЭлементаДругойФормы.Заголовок;
		КонецЕсли;	 
	КонецПопытки;
	Если ЗначениеЗаполнено(ЗаголовокЭлемента) Тогда
		ЗаголовокЭлемента = Строка(ЗаголовокЭлемента);
		ДанныеПолей = Ванесса.НайтиЭлементыПроцессаUIAutomation(Число(PID), ЗаголовокЭлемента);
		
		Если ЭтоЭлементДругойФормы Тогда
			ЭлементФормы = ДанныеЭлементаДругойФормы.ЭлементФормы;
		Иначе	
			ЭлементФормы = ИсточникДанных.Элементы[ИмяЭлемента];
		КонецЕсли;	 
		
		Если ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") И ДанныеПолей <> Неопределено И ДанныеПолей.Количество() > 1 Тогда
			Если ЭлементФормы.Вид = ВидГруппыФормы.Страница Тогда
				ДанныеПолей = ОставитьТолькоТипВМассиве(ДанныеПолей, "TabItem");
				Если ДанныеПолей.Количество() > 0 Тогда
					ДанныеПолей = ОставитьТолькоГруппыУбратьКИ(ДанныеПолей);
				КонецЕсли;	 
			Иначе	
				ДанныеПолей = ОставитьТолькоТипВМассиве(ДанныеПолей, "Text");
			КонецЕсли;	 
			
			Если ДанныеПолей.Количество() = 0 Тогда
				ДанныеПолей = Неопределено;
			КонецЕсли;	 
		КонецЕсли;
		
		Если ДанныеПолей <> Неопределено И ДанныеПолей.Количество() = 1 Тогда
			Возврат ДанныеПолей[0]; 
		КонецЕсли;
		
		Если ДанныеПолей <> Неопределено
			И ДанныеПолей.Количество() = 2
			И ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")
			И (ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка ИЛИ ЭлементФормы.Вид = ВидПоляФормы.ПолеПереключателя) Тогда
			Возврат ДанныеПолей; 
		КонецЕсли;	 
		
		Если ДанныеПолей <> Неопределено
			И ДанныеПолей.Количество() = 2
			И ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")
			И ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода Тогда
			Для Каждого Элем Из ДанныеПолей Цикл
				Если НРег(Элем.type) = "edit" ИЛИ НРег(Элем.type) = "combobox" Тогда
					Возврат Элем; 
				КонецЕсли;	 
			КонецЦикла; 
		КонецЕсли;	 
		
		Если ДанныеПолей <> Неопределено
			И ДанныеПолей.Количество() = 2
			И ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")
			И ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка Тогда
			Возврат ДанныеПолей; 
		КонецЕсли;	 
		
		Если ДанныеПолей <> Неопределено
			И ДанныеПолей.Количество() = 2
			И ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")
			И ЭлементФормы.Вид = ВидПоляФормы.ПолеПолосыРегулирования Тогда
			Для Каждого Элем Из ДанныеПолей Цикл
				Если НРег(Элем.type) = "text" Тогда
					Возврат Элем; 
				КонецЕсли;	 
			КонецЦикла; 
		КонецЕсли;	 
		
	КонецЕсли;	
	
	Если (ДанныеПолей = Неопределено ИЛИ ДанныеПолей.Количество() > 1) И ЗначениеЗаполнено(ТипЭлемента) Тогда
		ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, ControlType", Число(PID), ТипЭлемента));
		ДанныеПолей = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементов));
		Если ДанныеПолей <> Неопределено И ДанныеПолей.Количество() > 1 Тогда
			Если ЗначениеЗаполнено(ИмяЭлементаСТемжеРодителем) Тогда
				НужныйРодитель = РодителиЭлементов[ИмяЭлементаСТемжеРодителем];
				
				Для Каждого ТекЭлем Из ДанныеПолей Цикл
					ТекРодитель = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ПолучитьРодителяЭлемента(ТекЭлем.Id));
					Если ТекРодитель.Id = НужныйРодитель.Id Тогда
						Возврат ТекЭлем;
					КонецЕсли;	 
				КонецЦикла;	 
				
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ДанныеПолей = Неопределено ИЛИ ДанныеПолей.Количество() > 1 Тогда
		Попытка
			Если ЭтоЭлементДругойФормы Тогда
				Подсказка = ДанныеЭлементаДругойФормы.Подсказка;
			Иначе	
				Подсказка = ИсточникДанных.Элементы[ИмяЭлемента].Подсказка;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Подсказка) Тогда
				Попытка
					Если ЭтоЭлементДругойФормы Тогда
						Подсказка = ДанныеЭлементаДругойФормы.РасширеннаяПодсказка.Заголовок;
					Иначе	
						Подсказка = ИсточникДанных.Элементы[ИмяЭлемента].РасширеннаяПодсказка.Заголовок;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;	 
			
		Исключение
			Подсказка = Неопределено;
		КонецПопытки;
		
		Если ЗначениеЗаполнено(Подсказка) Тогда
			Подсказка = Строка(Подсказка);
			
			Если Ванесса.Версия8319ИлиВыше Тогда
				ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, HelpText", Число(PID), Подсказка));
			Иначе	
				ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, LegacyIAccessibleHelp", Число(PID), Подсказка));
			КонецЕсли;	
			
			ВсеПоля = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементов));
			
			Если ВсеПоля <> Неопределено Тогда
				Для Каждого ТекЭлем Из ВсеПоля Цикл
					Возврат ТекЭлем;
				КонецЦикла;	 
			КонецЕсли;
			
			Если ВсеПоля = Неопределено Тогда
				ИмяОбъектаДанных = Ванесса.ИмяОбъектаДанныхЭлементаФормыVAИзДанныхОбъекта(ИмяЭлемента);
				
				ТекТаблица = Неопределено;
				Если ТипЗнч(ИсточникДанных.Элементы[ИмяЭлемента].Родитель) = Тип("ТаблицаФормы") Тогда
					ТекТаблица = ИсточникДанных.Элементы[ИмяЭлемента].Родитель;
				ИначеЕсли ТипЗнч(ИсточникДанных.Элементы[ИмяЭлемента].Родитель.Родитель) = Тип("ТаблицаФормы") Тогда
					ТекТаблица = ИсточникДанных.Элементы[ИмяЭлемента].Родитель.Родитель;
				КонецЕсли;	 
				
				ПерваяЧастьПодсказкиВариант2 = "";
				Если ТекТаблица <> Неопределено Тогда
					ТекущееЗначениеЯчейкиТаблицы = ТекТаблица.ТекущиеДанные[ИмяОбъектаДанных];
					Если ТипЗнч(ТекущееЗначениеЯчейкиТаблицы) = Тип("Строка") Тогда
						ПерваяЧастьПодсказки = ТекущееЗначениеЯчейкиТаблицы;
					ИначеЕсли ТипЗнч(ТекущееЗначениеЯчейкиТаблицы) = Тип("Число") Тогда
						ПерваяЧастьПодсказки = Формат(ТекущееЗначениеЯчейкиТаблицы, "ЧГ=; ЧН=0");
						ПерваяЧастьПодсказкиВариант2 = Строка(ТекущееЗначениеЯчейкиТаблицы);
					Иначе	
						ПерваяЧастьПодсказки = "";
					КонецЕсли;	 
					
					Если Ванесса.Версия8319ИлиВыше Тогда 
						НоваяСтрокаПоиска = ПерваяЧастьПодсказки + " " + Подсказка;
						ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, Name", Число(PID), НоваяСтрокаПоиска));
						ВсеПоля = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементов));
					Иначе	
						НоваяСтрокаПоиска = ПерваяЧастьПодсказки + " " + ИмяОбъектаДанных;
						ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, Name", Число(PID), НоваяСтрокаПоиска));
						ВсеПоля = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементов));
					КонецЕсли;	 
						
					Если ВсеПоля = Неопределено И ТекущееЗначениеЯчейкиТаблицы = 0 Тогда
						НоваяСтрокаПоиска = " " + ИмяОбъектаДанных;
						ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, Name", Число(PID), НоваяСтрокаПоиска));
						ВсеПоля = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементов));
						
						Если ВсеПоля = Неопределено Тогда
							НоваяСтрокаПоиска = " " + ИсточникДанных.Элементы[ИмяЭлемента].Заголовок;
							ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, Name", Число(PID), НоваяСтрокаПоиска));
							ВсеПоля = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементов));
						КонецЕсли;	 
					КонецЕсли;	 
					
					Если ВсеПоля = Неопределено Тогда
						НоваяСтрокаПоиска = ПерваяЧастьПодсказки + " " + ИсточникДанных.Элементы[ИмяЭлемента].Заголовок;
						ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, Name", Число(PID), НоваяСтрокаПоиска));
						ВсеПоля = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементов));
					КонецЕсли;	 
					
					Если ВсеПоля = Неопределено Тогда
						НоваяСтрокаПоиска = ПерваяЧастьПодсказкиВариант2 + " " + Подсказка;
						ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, Name", Число(PID), НоваяСтрокаПоиска));
						ВсеПоля = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементов));
					КонецЕсли;
					
					Если ВсеПоля = Неопределено Тогда
						НоваяСтрокаПоиска = ПерваяЧастьПодсказкиВариант2 + " " + ИсточникДанных.Элементы[ИмяЭлемента].Заголовок;
						ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, Name", Число(PID), НоваяСтрокаПоиска));
						ВсеПоля = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементов));
					КонецЕсли;	
					
					Если ВсеПоля <> Неопределено Тогда
						Для Каждого ТекЭлем Из ВсеПоля Цикл
							Возврат ТекЭлем;
						КонецЦикла;	 
					КонецЕсли;
					
					Если ВсеПоля = Неопределено Тогда
						Если Ванесса.Версия8319ИлиВыше Тогда 
							НоваяСтрокаПоиска = Строка(ТекущееЗначениеЯчейкиТаблицы) + " " + Подсказка;
							ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, Name", Число(PID), НоваяСтрокаПоиска));
						Иначе	
							НоваяСтрокаПоиска = ПерваяЧастьПодсказки + " " + Подсказка;
							ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, Name", Число(PID), НоваяСтрокаПоиска));
						КонецЕсли;	 
						
						ВсеПоля = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементов));
						
						Если ВсеПоля <> Неопределено Тогда
							Для Каждого ТекЭлем Из ВсеПоля Цикл
								Возврат ТекЭлем;
							КонецЦикла;	 
						КонецЕсли;
						
					КонецЕсли;	 
				КонецЕсли;	 
				
			КонецЕсли;	 
		КонецЕсли;
		
		Если ЭтоЭлементДругойФормы Тогда
			ЭлементФормы = ДанныеЭлементаДругойФормы.ЭлементФормы;
		Иначе	
			ЭлементФормы = ИсточникДанных.Элементы[ИмяЭлемента];
		КонецЕсли;	 
		
		Если ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда
			Если ЗначениеЗаполнено(ЭлементФормы.ИмяКоманды) Тогда
				ДанныеКоманды = ИсточникДанных.ДанныеКомандыVanessaAutomation(ЭлементФормы.ИмяКоманды);
				
				Если ЗначениеЗаполнено(ДанныеКоманды.Подсказка) Тогда
					Если Ванесса.Версия8319ИлиВыше Тогда 
						ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, HelpText", Число(PID), ДанныеКоманды.Подсказка));
					Иначе	
						ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, LegacyIAccessibleHelp", Число(PID), ДанныеКоманды.Подсказка));
					КонецЕсли;	
					ВсеПоля = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементов));
					ОставитьMenuItemЕслиОнЕсть(ВсеПоля);
					Если ВсеПоля <> Неопределено И ВсеПоля.Количество() = 1 Тогда
						Возврат ВсеПоля[0]; 
					КонецЕсли;	 
				КонецЕсли;	 
				
				ДанныеПолей = Ванесса.НайтиЭлементыПроцессаUIAutomation(Число(PID), ДанныеКоманды.Заголовок);
				Если ДанныеПолей <> Неопределено И ДанныеПолей.Количество() > 0 Тогда
					Возврат ДанныеПолей[0];
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
	Иначе
		Возврат ДанныеПолей[0];
	КонецЕсли;	 
	
	Возврат Неопределено;
	
КонецФункции	 

&НаКлиенте
Процедура ОставитьMenuItemЕслиОнЕсть(Массив)
	
	Если ТипЗнч(Массив) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ЭлемMenuItem = Новый Массив;
	Для Каждого Элем Из Массив Цикл
		Если НРег(Элем.type) = НРег("MenuItem") Тогда
			ЭлемMenuItem.Добавить(Элем);
		КонецЕсли;	
	КонецЦикла;
	
	Если ЭлемMenuItem.Количество() = 1 Тогда
		Массив = ЭлемMenuItem;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
//И я делаю подсветку элементов VA UI Automation
//@ЯДелаюПодсветкуЭлементовVAUIAutomation(ТабПарам)
Функция ЯДелаюПодсветкуЭлементовVAUIAutomation(Знач PID, Текст, ТабПарам, ДопПараметры = Неопределено) Экспорт
	PID = ПолучитьКорректныйPID(PID);
	
	ВсеПоля = Неопределено;
	
	РодителиЭлементов = Новый Соответствие;
	
	МассивЭлементов = Новый Массив;
	Сч = 0;
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		Сч = Сч + 1;
		Если Сч = 1 Тогда
			//В первой строке заголовок
			Продолжить;
		КонецЕсли;
		ИмяЭлемента = СтрокаТабПарам.Кол1;
		ТипЭлемента = Неопределено;
		Если СтрокаТабПарам.Свойство("Кол2") Тогда
			ТипЭлемента = СтрокаТабПарам.Кол2;
		КонецЕсли;	 
		ИмяЭлементаСТемжеРодителем = Неопределено;
		Если СтрокаТабПарам.Свойство("Кол3") Тогда
			ИмяЭлементаСТемжеРодителем = СтрокаТабПарам.Кол3;
		КонецЕсли;	 
		ТолькоВертикальныеКоординаты = Неопределено;
		
		Если СтрокаТабПарам.Свойство("Кол4") Тогда
			Если НРег(СтрокаТабПарам.Кол4) = "истина" Тогда
				ТолькоВертикальныеКоординаты = Истина;
			Иначе	
				ТолькоВертикальныеКоординаты = Ложь;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Элемент = ОпределитьЭлементUIAutomationЭлементаФормыVAПоЕгоИмени(PID, ИмяЭлемента, ТипЭлемента, ВсеПоля, ИмяЭлементаСТемжеРодителем, РодителиЭлементов);
		Если Элемент = Неопределено Тогда
			ВызватьИсключение "Не найден элемент " + ИмяЭлемента;
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = Тип("Массив") Тогда
			Для Каждого ТекЭлем Из Элемент Цикл
				Если НРег(ТекЭлем.Type) <> "text" Тогда
					МассивЭлементов.Добавить(ТекЭлем);
					ДобавитьЗаголовокЭлементаВМассив(МассивЭлементов, PID, ТекЭлем.Name, "text", ТекЭлем, ТолькоВертикальныеКоординаты);
				КонецЕсли;	 
			КонецЦикла;	 
		Иначе
			МассивЭлементов.Добавить(Элемент);
			Если НРег(Элемент.Type) <> "text" Тогда
				ДобавитьЗаголовокЭлементаВМассив(МассивЭлементов, PID, Элемент.Name, "text", Элемент, ТолькоВертикальныеКоординаты);
			КонецЕсли;	 
			
			РодительЭлемента = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ПолучитьРодителяЭлемента(Элемент.Id));
			Если НРег(Элемент.Type) = НРег("Edit") И Ванесса.Версия8319ИлиВыше Тогда
				//В 8.3.19 для Edit создаётся ещё одна панель. Она содержит поле и кнопки очистить, выбрать и так далее. В 8.3.18 это одно поле.
				РодительЭлемента = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ПолучитьРодителяЭлемента(РодительЭлемента.Id));
			КонецЕсли;	
			РодителиЭлементов.Вставить(ИмяЭлемента, РодительЭлемента);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Left = 1000000000000000;
	Top = 1000000000000000;
	Bottom = -1;
	Right = -1;
	ОпределитьКоординатыПоМассивуЭлементовUIAutomation(МассивЭлементов, Left, Top, Bottom, Right);
	
	ПараметрыОтрисовки = Новый Массив;
	ДанныеОтрисовки = Новый Структура;
	ДанныеОтрисовки.Вставить("Кол1", "text");
	ДанныеОтрисовки.Вставить("Кол2", Текст);
	ПараметрыОтрисовки.Добавить(ДанныеОтрисовки);
	НарисоватТеньПоКоординатам(Left, Top, Right, Bottom, ПараметрыОтрисовки);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьЗаголовокЭлементаВМассив(МассивЭлементов, PID, ТекстЗаголовка, ТипЭлемента, ГлавныйЭлемент, ТолькоВертикальныеКоординаты)
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		Возврат;
	КонецЕсли;	
	
	ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, Name, ControlType", Число(PID), ТекстЗаголовка, ТипЭлемента));
	ВсеПоля = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементов));
	Если ВсеПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	Для Каждого Элем Из ВсеПоля Цикл
		Данные = Новый Структура;
		Данные.Вставить("Элемент", Элем);
		Если НРег(ГлавныйЭлемент.Type) = "checkbox" Тогда
			Данные.Вставить("ТолькоВертикальныеКоординаты", Ложь);
		Иначе	
			Данные.Вставить("ТолькоВертикальныеКоординаты", Истина);
		КонецЕсли;
		
		Если ТолькоВертикальныеКоординаты <> Неопределено Тогда
			Данные.Вставить("ТолькоВертикальныеКоординаты", ТолькоВертикальныеКоординаты);
		КонецЕсли;	 
		
		МассивЭлементов.Добавить(Данные);
	КонецЦикла;	
	
КонецПроцедуры 

&НаКлиенте
//И я делаю подсветку элементов VA с их заголовком UI Automation
//@ЯДелаюПодсветкуЭлементовVAСИхЗаголовкомUIAutomation(ТабПарам)
Функция ЯДелаюПодсветкуЭлементовVAСИхЗаголовкомUIAutomation(Знач PID, Текст, ТабПарам) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СЗаголовком", Истина);
	ЯДелаюПодсветкуЭлементовVAUIAutomation(PID, Текст, ТабПарам, ДопПараметры);
КонецФункции

&НаКлиенте
//И я запоминаю ID элемента формы Vanessa Automation с именем "ПутьКПапкеСФичами" в переменную "ЗаголовокЭлемента"
//@ЯЗапоминаюIDЭлементаФормыVanessaAutomationСИменемВПеременную(Парам01,Парам02)
Функция ЯЗапоминаюIDЭлементаФормыVanessaAutomationСИменемВПеременную(ИмяЭлемента, ИмяПеременной) Экспорт
	PID = ПолучитьКорректныйPID("ЭтотСеанс");
	ТипЭлемента = Неопределено;
	ИмяЭлементаСТемжеРодителем = Неопределено;
	ВсеПоля = Неопределено;
	РодителиЭлементов = Новый Соответствие;
	Элемент = ОпределитьЭлементUIAutomationЭлементаФормыVAПоЕгоИмени(PID, ИмяЭлемента, ТипЭлемента, ВсеПоля, ИмяЭлементаСТемжеРодителем, РодителиЭлементов);
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, Элемент.Id);

КонецФункции

&НаКлиенте
//И я делаю клик в поле с ID "ID" UI Automation
//@ЯДелаюКликВПолеUIAutomation(Парам01)
Функция ЯДелаюКликВПолеUIAutomation(IDПоля) Экспорт
	ДанныеПоля = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ЭлементПоИдентификатору(IDПоля));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(ДанныеПоля);
	
	Left = 1000000000000000;
	Top = 1000000000000000;
	Bottom = -1;
	Right = -1;
	ОпределитьКоординатыПоМассивуЭлементовUIAutomation(МассивЭлементов, Left, Top, Bottom, Right);
	
	Ванесса.ВнешняяКомпонентаДляСкриншотов.УстановитьПозициюКурсора(Left + Цел((Right - Left)/2), Top + Цел((Bottom - Top)/2));
	Ванесса.ВнешняяКомпонентаДляСкриншотов.ЭмуляцияНажатияМыши(0);
	
КонецФункции

&НаКлиенте
Функция ЗначенияПоУмолчаниюДляПодсказкиБалун()
	Структура = Новый Структура;
	Структура.Вставить("color", 3289800);
	Структура.Вставить("background", 15793151);
	Структура.Вставить("fontColor", 0);
	Структура.Вставить("fontName", "Calibri");
	Структура.Вставить("fontSize", 12);
	Структура.Вставить("duration", 4000);
	Структура.Вставить("thickness", 4);
	Структура.Вставить("text", "Текст");
	Структура.Вставить("radius", 5);
	Возврат Структура;
КонецФункции	 

&НаКлиенте
//И я делаю подсказку балун у элемента "$IDЭлемента$" UI Automation
//@ЯДелаюПодсказкуБалунУЭлементаUIAutomation(Парам01,ТабПарам)
Функция ЯДелаюПодсказкуБалунУЭлементаUIAutomation(IDПоля, ТабПарам = Неопределено, ОбработчикПродолжения = Неопределено) Экспорт
	
	ПараметрыОтрисовки = ЗначенияПоУмолчаниюДляПодсказкиБалун();
	
	ДополнитьПараметрыОтрисовкиПереданныеПользователем(ПараметрыОтрисовки, ТабПарам);

	ДопПараметры = Неопределено;
	Если НЕ ОбработчикПродолжения = Неопределено Тогда
		Доппараметры = Новый Структура("ИмяОбработчика", ОбработчикПродолжения);
	КонецЕсли;

	ДанныеПоляИзКомпоненты = Ванесса.ВнешняяКомпонентаДляСкриншотов.ЭлементПоИдентификатору(IDПоля);   
	
	Если ДанныеПоляИзКомпоненты = "" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПустоеОповещениеСПродолжениемВыполненияСценария", ЭтаФорма, ДопПараметры);
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеПоля = Ванесса.ПрочитатьОбъектJSON(ДанныеПоляИзКомпоненты);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(ДанныеПоля);
	
	Left = 1000000000000000;
	Top = 1000000000000000;
	Bottom = -1;
	Right = -1;
	ОпределитьКоординатыПоМассивуЭлементовUIAutomation(МассивЭлементов, Left, Top, Bottom, Right);
	
	Ванесса.ПроверитьКорректностьПараметровДляВыполненияУроков(ПараметрыОтрисовки);
	
	Текст = ПараметрыОтрисовки.text;
	ПараметрыОтрисовки.Удалить("text");
	
	Ванесса.ЗапретитьВыполнениеШагов();
	ОписаниеОповещения = Новый ОписаниеОповещения("ПустоеОповещениеСПродолжениемВыполненияСценария", ЭтаФорма, ДопПараметры);
	Ванесса.ВнешняяКомпонентаДляСкриншотов.НачатьВызовПоказатьПодсказку(
		ОписаниеОповещения, Ванесса.ЗаписатьОбъектJSON(ПараметрыОтрисовки), 
		Left + Цел((Right - Left)/2) + ПараметрыОтрисовки.thickness, Top + Цел((Bottom - Top)/2) + ПараметрыОтрисовки.thickness, Текст);
	
КонецФункции

&НаКлиенте
//И я перемещаю мышку к каждой кнопке панели "$IDПанели$" Vanessa Automation
//@ЯПеремещаюМышкуККаждойКнопкеПанелиVanessaAutomation(Парам01)
Функция ЯПеремещаюМышкуККаждойКнопкеПанелиVanessaAutomation(IDРодителя) Экспорт
	ЭлементыРодителя = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ПолучитьЭлементы(IDРодителя));
	
	Массив = Новый Массив;
	
	Для Каждого Элем Из ЭлементыРодителя.Tree Цикл
		Если Элем.name = "Справка" Тогда
			Продолжить;
		ИначеЕсли Элем.name = "Еще" Тогда
			Продолжить;
		КонецЕсли;	
		
		Массив.Добавить(Элем);
		
	КонецЦикла;	 
	
	НадоПродолжить = Ложь;
	Для Каждого Элем Из Массив Цикл
		Если НадоПродолжить Тогда
			НадоПродолжить = Ложь;
			Продолжить;
		КонецЕсли;	 
		
		Ванесса.ВнешняяКомпонентаДляСкриншотов.ЭмуляцияДвиженияМыши(
			Элем.Size.Left + Цел((Элем.Size.Right - Элем.Size.Left)/2),
			Элем.Size.Top + Цел((Элем.Size.Bottom - Элем.Size.Top)/2), 50, 2);
		Ванесса.ВнешняяКомпонентаДляСкриншотов.sleep(250);
		
		НадоПродолжить = Истина;
	КонецЦикла;	 
	
КонецФункции

&НаКлиенте
//И я запоминаю элемент с типом "Тип" c родителем "$IDЭлемента$" в переменную "IDЭлемента" Vanessa Automation
//@ЯЗапоминаюЭлементСТипомCРодителемВПеременнуюVanessaAutomation(Парам01,Парам02,Парам03)
Функция ЯЗапоминаюЭлементСТипомCРодителемВПеременнуюVanessaAutomation(Тип, IDРодителя, ИмяПеременной) Экспорт
	Нашли = Ложь;
	
	ЭлементыРодителя = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ПолучитьЭлементы(IDРодителя));
	Для Каждого Элем Из ЭлементыРодителя.Tree Цикл
		Если НРег(Элем.Type) = НРег(Тип) Тогда
			Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, Элем.Id);
			Нашли = Истина;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если НЕ Нашли Тогда
		ВызватьИсключение Ванесса._СтрШаблон("Не найден элемент с типом <%1>.", Тип);
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И я запоминаю родителя элемента с именем "Имя" в переменную "ИмяПеременной" Vanessa Automation
//@ЯЗапоминаюРодителяЭлементаСИменемВПеременнуюVanessaAutomation(Парам01,Парам02)
Функция ЯЗапоминаюРодителяЭлементаСИменемВПеременнуюVanessaAutomation(ИмяЭлемента, ИмяПеременной) Экспорт
	PID = ПолучитьКорректныйPID("ЭтотСеанс");
	ТипЭлемента = Неопределено;
	ИмяЭлементаСТемжеРодителем = Неопределено;
	ВсеПоля = Неопределено;
	РодителиЭлементов = Новый Соответствие;
	Элемент = ОпределитьЭлементUIAutomationЭлементаФормыVAПоЕгоИмени(PID, ИмяЭлемента, ТипЭлемента, ВсеПоля, ИмяЭлементаСТемжеРодителем, РодителиЭлементов);
	РодительЭлемента = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ПолучитьРодителяЭлемента(Элемент.Id));
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, РодительЭлемента.Id);
КонецФункции

&НаКлиенте
//И я запоминаю родителя родителя элемента с именем "ИмяЭлемента" в переменную "IDРодителя" Vanessa Automation
//@ЯЗапоминаюРодителяРодителяЭлементаСИменемВПеременнуюVanessaAutomation(Парам01,Парам02)
Функция ЯЗапоминаюРодителяРодителяЭлементаСИменемВПеременнуюVanessaAutomation(ИмяЭлемента,ИмяПеременной) Экспорт
	PID = ПолучитьКорректныйPID("ЭтотСеанс");
	ТипЭлемента = Неопределено;
	ИмяЭлементаСТемжеРодителем = Неопределено;
	ВсеПоля = Неопределено;
	РодителиЭлементов = Новый Соответствие;
	Элемент = ОпределитьЭлементUIAutomationЭлементаФормыVAПоЕгоИмени(PID, ИмяЭлемента, ТипЭлемента, ВсеПоля, ИмяЭлементаСТемжеРодителем, РодителиЭлементов);
	РодительЭлемента = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ПолучитьРодителяЭлемента(Элемент.Id));
	РодительЭлемента = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ПолучитьРодителяЭлемента(РодительЭлемента.Id));
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, РодительЭлемента.Id);
КонецФункции


&НаКлиенте
//И я запоминаю элемент с именем "Имя" в переменную "ИмяПеременной" Vanessa Automation
//@ЯЗапоминаюЭлементСИменемВПеременнуюVanessaAutomation(Парам01,Парам02)
Функция ЯЗапоминаюЭлементСИменемВПеременнуюVanessaAutomation(ИмяЭлемента, ИмяПеременной) Экспорт
	PID = ПолучитьКорректныйPID("ЭтотСеанс");
	ТипЭлемента = Неопределено;
	ИмяЭлементаСТемжеРодителем = Неопределено;
	ВсеПоля = Неопределено;
	РодителиЭлементов = Новый Соответствие;
	Элемент = ОпределитьЭлементUIAutomationЭлементаФормыVAПоЕгоИмени(PID, ИмяЭлемента, ТипЭлемента, ВсеПоля, ИмяЭлементаСТемжеРодителем, РодителиЭлементов);
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, Элемент.Id);
КонецФункции

&НаКлиенте
//И я запоминаю элемент UI Automation в переменную
//@ЯЗапоминаюЭлементUIAutomationВПеременную(ТабПарам)
Функция ЯЗапоминаюЭлементUIAutomationВПеременную(ИмяПеременной, ТабПарам) Экспорт
	
	Структура = Новый Структура;
	ОтборПоРодителю = Неопределено;
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		Имя = СтрокаТабПарам.Кол1;
		Значение = СтрокаТабПарам.Кол2;
		
		Если Имя = "Имя" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Структура.Вставить(Имя, Значение);
		
		Если НРег(Имя) = НРег("ProcessId") Тогда
			PID = ПолучитьКорректныйPID(Значение);
			Структура.Вставить(Имя, PID);
		ИначеЕсли НРег(Имя) = НРег("Parent") Тогда
			ОтборПоРодителю = Значение;
		КонецЕсли;	   
		
	КонецЦикла;	
	
	ДанныеПолей = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(Ванесса.ЗаписатьОбъектJSON(Структура)));
	Если ДанныеПолей = Неопределено Тогда
		ВызватьИсключение Ванесса.Локализовать("Не получилось найти элемент UI Automation по переданным параметрам.");
	КонецЕсли;	 
	
	Если ДанныеПолей.Количество() > 1 И ОтборПоРодителю <> Неопределено Тогда
		ДанныеПолей = Новый Массив;
		Для Каждого Элем Из ДанныеПолей Цикл
			РодительЭлемента = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ПолучитьРодителяЭлемента(Элем.Id));
			Если РодительЭлемента.Id <> ОтборПоРодителю Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеПолей.Добавить(Элем);
			
		КонецЦикла;	 
	КонецЕсли;	 
	
	Если ДанныеПолей.Количество() = 0 Тогда
		ВызватьИсключение Ванесса.Локализовать("Не получилось найти элемент UI Automation по переданным параметрам.");
	КонецЕсли;	 
	
	Если ДанныеПолей.Количество() > 1 Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(Ванесса.Локализовать("По переданным параметрам было найдено <%1> элементов."), ДанныеПолей.Количество());
	КонецЕсли;	 
	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, ДанныеПолей[0].Id);
	
КонецФункции

&НаКлиенте
//И я делаю клик по элементу "ID" UI Automation
//@ЯДелаюКликПоЭлементуUIAutomation(Парам01)
Функция ЯДелаюКликПоЭлементуUIAutomation(ID) Экспорт
	ЯДелаюКликВПолеUIAutomation(ID);
КонецФункции

&НаКлиенте
Функция ЭлементыГруппыРекурсивно(Группа, Результат)
	
	Для Каждого Элем Из Группа.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элем) = Тип("ГруппаФормы") Тогда
			ЭлементыГруппыРекурсивно(Элем, Результат);
		Иначе
			Результат.Добавить(Элем);
		КонецЕсли;	 
	КонецЦикла;	 
	
КонецФункции 

&НаКлиенте
Функция ЭлементыГруппы(Группа)
	
	Результат = Новый Массив;
	
	ЭлементыГруппыРекурсивно(Группа, Результат);
	
	Возврат Результат; 
	
КонецФункции	 


&НаКлиенте
//И Я делаю подсветку группы элементов VA "ГруппаVanessaEditorВыполнениеСценариев"
//@ЯДелаюПодсветкуГруппыЭлементовVA(Парам01)
Функция ЯДелаюПодсветкуГруппыЭлементовVA(PID, ИмяГруппы, Текст) Экспорт
	
	Если КонтекстСохраняемый.Свойство("ФормаVAВРежимеОбучения") Тогда
		ИсточникДанных = КонтекстСохраняемый.ФормаVAВРежимеОбучения;
	Иначе	
		ИсточникДанных = Ванесса;
	КонецЕсли;	 
	
	ЭлементыГруппы = ЭлементыГруппы(ИсточникДанных.Элементы[ИмяГруппы]);
	НужныеЭлементы = Новый Массив;
	
	Для Каждого Элем Из ЭлементыГруппы Цикл
		Если ТипЗнч(Элем) = Тип("КнопкаКоманднойПанели") ИЛИ ТипЗнч(Элем) = Тип("КнопкаФормы") Тогда
			ДанныеКоманды = ИсточникДанных.ДанныеКомандыVanessaAutomation(ИсточникДанных.Элементы[Элем.Имя].ИмяКоманды);
			
			Если ЗначениеЗаполнено(ДанныеКоманды.Подсказка) Тогда
				PID = ПолучитьКорректныйPID(PID);
				
				Если Ванесса.Версия8319ИлиВыше Тогда
					ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, HelpText", Число(PID), ДанныеКоманды.Подсказка));
				Иначе
					ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, LegacyIAccessibleHelp", Число(PID), ДанныеКоманды.Подсказка));
				КонецЕсли;	 
				
				НайденныеПоля = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементов));
				
				Если НайденныеПоля <> Неопределено И НайденныеПоля.Количество() = 1 Тогда
					НужныеЭлементы.Добавить(НайденныеПоля[0]);
				КонецЕсли;	 
				
			КонецЕсли;	 
			
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если НужныеЭлементы.Количество() = 0 Тогда
		ВызватьИсключение Ванесса._СтрШаблон(Ванесса.Локализовать("Не найдены элементы UI Automation в группе <%1>."), ИмяГруппы);
	КонецЕсли;	 
	
	Left = 1000000000000000;
	Top = 1000000000000000;
	Bottom = -1;
	Right = -1;
	Ванесса.ОпределитьКоординатыПоМассивуЭлементовUIAutomation(НужныеЭлементы, Left, Top, Bottom, Right);
	
	ПараметрыОтрисовки = Новый Массив;
	ДанныеОтрисовки = Новый Структура;
	ДанныеОтрисовки.Вставить("Кол1", "text");
	ДанныеОтрисовки.Вставить("Кол2", Текст);
	ПараметрыОтрисовки.Добавить(ДанныеОтрисовки);
	НарисоватТеньПоКоординатам(Left, Top, Right, Bottom, ПараметрыОтрисовки);
	
КонецФункции


&НаКлиенте
//И я делаю клик по элементу формы VA UI Automation 'ЭтотСеанс' 'ФормаVanessaEditorСоздатьНовыйСценарий' UI Automation
//@ЯДелаюКликПоЭлементуФормыVAUIAutomationUIAutomation(Парам01,Парам02)
Функция ЯДелаюКликПоЭлементуФормыVAUIAutomationUIAutomation(PID, ИмяЭлемента, ЛеваяКнопка = Истина) Экспорт
	ВсеПоля = Новый Массив;
	PID = ПолучитьКорректныйPID(PID);
	Элем = ОпределитьЭлементUIAutomationЭлементаФормыVAПоЕгоИмени(PID, ИмяЭлемента, Неопределено, ВсеПоля, Неопределено, Неопределено); 
	
	Если Элем = Неопределено Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
			Ванесса.Локализовать("Не получилось найти элемент UI Automation по имени элемента формы Vanessa Automation. PID <%1>, имя <%2>."), PID, ИмяЭлемента);
	КонецЕсли;	 
	
	Если ТипЗнч(Элем) = Тип("Массив") Тогда
		Элем = ИсключитьТекстовыеЭлементыЕслиЭтоВозможно(Элем);
		Элемент = Элем[0];
	Иначе	
		Элемент = Элем;
	КонецЕсли;	 
	
	Ванесса.КликПоЭлементуБезПеремещенияМышкиUIAutomation(Элемент.size,,ЛеваяКнопка);
	
КонецФункции

&НаКлиенте
//И я делаю клик по элементу формы VA UI Automation 'ЭтотСеанс' 'ФормаVanessaEditorСоздатьНовыйСценарий' правой кнопкой UI Automation
//@ЯДелаюКликПоЭлементуФормыVAUIAutomationПравойКнопкойUIAutomation(Парам01,Парам02)
Функция ЯДелаюКликПоЭлементуФормыVAUIAutomationПравойКнопкойUIAutomation(PID, ИмяЭлемента) Экспорт
	
	ЯДелаюКликПоЭлементуФормыVAUIAutomationUIAutomation(PID, ИмяЭлемента, Ложь);
	
КонецФункции

&НаКлиенте
//И я делаю клик по элементу формы VA UI Automation 'ЭтотСеанс' 'ФормаVanessaEditorСоздатьНовыйСценарий'
//@ЯДелаюКликПоЭлементуФормыVAUIAutomation(Парам01,Парам02)
Функция ЯДелаюКликПоЭлементуФормыVAUIAutomation(PID, ИмяЭлемента) Экспорт
	ЯДелаюКликПоЭлементуФормыVAUIAutomationUIAutomation(PID, ИмяЭлемента);	
КонецФункции

&НаКлиенте
//И я перемещаю курсор к элементу формы VA UI Automation 'ЭтотСеанс' 'VanessaEditorПоказыватьСтрокиПодсценариев' UI Automation
//@ЯПеремещаюКурсорКЭлементуФормыVAUIAutomationUIAutomation(Парам01,Парам02)
Функция ЯПеремещаюКурсорКЭлементуФормыVAUIAutomationUIAutomation(PID, ИмяЭлемента) Экспорт
	ВсеПоля = Новый Массив;
	PID = ПолучитьКорректныйPID(PID);
	Элем = ОпределитьЭлементUIAutomationЭлементаФормыVAПоЕгоИмени(PID, ИмяЭлемента, Неопределено, ВсеПоля, Неопределено, Неопределено); 
	
	Если Элем = Неопределено Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
			Ванесса.Локализовать("Не получилось найти элемент UI Automation по имени элемента формы Vanessa Automation. PID <%1>, имя <%2>."), PID, ИмяЭлемента);
	КонецЕсли;	 
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элем);
	
	Left = 1000000000000000;
	Top = 1000000000000000;
	Bottom = -1;
	Right = -1;
	ОпределитьКоординатыПоМассивуЭлементовUIAutomation(МассивЭлементов, Left, Top, Bottom, Right);
	
	Ванесса.ВнешняяКомпонентаДляСкриншотов.УстановитьПозициюКурсора(Left + Цел((Right - Left)/2), Top + Цел((Bottom - Top)/2));
КонецФункции

&НаКлиенте
//И я перемещаю курсор к элементу формы VA UI Automation 'ЭтотСеанс' 'VanessaEditorПоказыватьСтрокиПодсценариев'
//@ЯПеремещаюКурсорКЭлементуФормыVAUIAutomation(Парам01,Парам02)
Функция ЯПеремещаюКурсорКЭлементуФормыVAUIAutomation(PID, ИмяЭлемента) Экспорт
	ЯПеремещаюКурсорКЭлементуФормыVAUIAutomationUIAutomation(PID, ИмяЭлемента);
КонецФункции

&НаКлиенте
Функция СлужебныйОбработчикОжидания()
	Сообщить("" + ТекущаяДата());
КонецФункции 

&НаКлиенте
//И служебный шаг UI Automation
//@СлужебныйШагUIAutomation()
Функция СлужебныйШагUIAutomation() Экспорт
	ПодключитьОбработчикОжидания("СлужебныйОбработчикОжидания", 1, Ложь);
КонецФункции

&НаКлиенте
//И я перемещаю курсор к заголовку Vanessa Automation
//@ЯПеремещаюКурсорКЗаголовкуVanessaAutomation()
Функция ЯПеремещаюКурсорКЗаголовкуVanessaAutomation(ДелатьКлик = Ложь) Экспорт
	Если КонтекстСохраняемый.Свойство("ФормаVAВРежимеОбучения") Тогда
		ИсточникДанных = КонтекстСохраняемый.ФормаVAВРежимеОбучения;
	Иначе	
		ИсточникДанных = Ванесса;
	КонецЕсли;	 
	
	PID = ПолучитьКорректныйPID("ЭтотСеанс");
	ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, ControlType", Число(PID), "Pane"));
	НайденныеПоля = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементов));
	
	Если НайденныеПоля = Неопределено ИЛИ НайденныеПоля.Количество() = 0 Тогда
		ВызватьИсключение Ванесса.Локализовать("Не получилось найти заголовок окна Vanessa Automation.");
	КонецЕсли;	 
	
	МассивЭлементов = Новый Массив;
	Для Каждого Элем Из НайденныеПоля Цикл
		Если Найти(Элем.Name, "Vanessa Automation") > 0 Тогда
			МассивЭлементов.Добавить(Элем);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если МассивЭлементов.Количество() = 0 Тогда
		ВызватьИсключение Ванесса.Локализовать("Не получилось найти заголовок окна Vanessa Automation.");
	КонецЕсли;	 
	
	Left = 1000000000000000;
	Top = 1000000000000000;
	Bottom = -1;
	Right = -1;
	ОпределитьКоординатыПоМассивуЭлементовUIAutomation(МассивЭлементов, Left, Top, Bottom, Right);
	
	Ванесса.ВнешняяКомпонентаДляСкриншотов.УстановитьПозициюКурсора(Left + Цел((Right - Left)/2), Top + Цел((Bottom - Top)/2));
	
	Если ДелатьКлик Тогда
		Ванесса.ВнешняяКомпонентаДляСкриншотов.ЭмуляцияНажатияМыши(0);
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И я делаю клик по заголовку Vanessa Automation
//@ЯДелаюКликПоЗаголовкуVanessaAutomation()
Функция ЯДелаюКликПоЗаголовкуVanessaAutomation() Экспорт
	
	ЯПеремещаюКурсорКЗаголовкуVanessaAutomation(Истина);
	
КонецФункции

&НаКлиенте
//И тестовый шаг для рамки вокруг текста рекдактора
//@ТестовыйШагДляРамкиВокругТекстаРекдактора()
Функция ТестовыйШагДляРамкиВокругТекстаРекдактора() Экспорт
	
	x = Ванесса.VanessaTabs.current.editor.editor.getOffsetForColumn(9, 1) - Ванесса.VanessaTabs.current.editor.editor.getScrollLeft();
	y = Ванесса.VanessaTabs.current.editor.editor.getTopForLineNumber(9) - Ванесса.VanessaTabs.current.editor.editor.getScrollTop();
	
	Сообщить("(" + x + "," + y + ")");
	
КонецФункции


&НаКлиенте
//И существует элемент UI Automation "ЭтотСеанс" с именем "Контекст имя" и типом "Тип"
//@СуществуетЭлементUIAutomationСИменемИТипом(Парам01,Парам02,Парам03)
Функция СуществуетЭлементUIAutomationСИменемИТипом(PID, Заголовок, Тип) Экспорт
	PID = ПолучитьКорректныйPID(PID);
	ОтборЭлементов = Новый Структура("Name,ProcessId", Заголовок, Число(PID));
	Если ЗначениеЗаполнено(Тип) Тогда
		ОтборЭлементов.Вставить("ControlType", Тип)
	КонецЕсли;
	ОтборЭлементовJSON = Ванесса.ЗаписатьОбъектJSON(ОтборЭлементов);
	РезультатПоискаJSON = Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементовJSON);
	ДанныеЭлементов = Ванесса.ПрочитатьОбъектJSON(РезультатПоискаJSON);
	
	Если ДанныеЭлементов = Неопределено ИЛИ ДанныеЭлементов.Количество() = 0 Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
			"Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>.", PID, Заголовок, Тип);
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
Функция ЭлементРедактораUIAutomation()
	PID = ПолучитьКорректныйPID("ЭтотСеанс");
	ОтборЭлементов = Новый Структура("ProcessId", Число(PID));
	
	ТипЭлемента = "Document";
	ОтборЭлементов.Вставить("ControlType", ТипЭлемента);
	ОтборЭлементовJSON = Ванесса.ЗаписатьОбъектJSON(ОтборЭлементов);
	РезультатПоискаJSON = Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементовJSON);
	ДанныеПолей = Ванесса.ПрочитатьОбъектJSON(РезультатПоискаJSON);
	
	Если ДанныеПолей = Неопределено Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
		Ванесса.Локализовать("Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>."), PID, "", ТипЭлемента);
	КонецЕсли;
	
	Если ДанныеПолей.Количество() = 0 Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
		Ванесса.Локализовать("Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>."), PID, "", ТипЭлемента);
	КонецЕсли;	
	
	Возврат ДанныеПолей[0]; 
	
КонецФункции	 

&НаКлиенте
//И я делаю подсветку текста в редакторе VA в режиме обучения в строке 1
//@ЯДелаюПодсветкуТекстаВРедактореVAВРежимеОбученияВСтроке(Парам01, Парам02)
Функция ЯДелаюПодсветкуТекстаВРедактореVAВРежимеОбученияВСтроке(Знач НомерСтроки, ТекстПодсказки) Экспорт
	НомерСтроки = Число(НомерСтроки);
	КоординатыПервогоСимвола = КонтекстСохраняемый.ФормаVAВРежимеОбучения.VanessaTabs.getCoordinates(НомерСтроки, 1);
	
	ТекстСтроки = КонтекстСохраняемый.ФормаVAВРежимеОбучения.VanessaTabs.current.editor.getLineContent(НомерСтроки);
	КоординатыПоследнегоСимвола = КонтекстСохраняемый.ФормаVAВРежимеОбучения.VanessaTabs.getCoordinates(НомерСтроки, СтрДлина(ТекстСтроки) + 1);
	
	ЭлементРедактора = ЭлементРедактораUIAutomation();
	КоординатыРедактора = ЭлементРедактора.Size;
	
	МасштабЭкрана = Ванесса.ПолучитьМасштабЭкрана();
	Коеф = (МасштабЭкрана - 100)/100;
	
	ПараметрыОтрисовки = Ванесса.ПолучитьНастройкиРисования();
	ПараметрыОтрисовки.text = ТекстПодсказки;
	НарисоватТеньПоКоординатам(
		КоординатыРедактора.Left + КоординатыПервогоСимвола.left + Цел(КоординатыПервогоСимвола.left*Коеф),
		КоординатыРедактора.Top + КоординатыПервогоСимвола.top + Цел(КоординатыПервогоСимвола.top*Коеф),
		КоординатыРедактора.Left + КоординатыПоследнегоСимвола.left + Цел(КоординатыПоследнегоСимвола.left*Коеф),
		КоординатыРедактора.Top + КоординатыПервогоСимвола.top + КоординатыПервогоСимвола.lineHeight + Цел((КоординатыПервогоСимвола.top + КоординатыПервогоСимвола.lineHeight)*Коеф),
		ПараметрыОтрисовки);
	
	
	//КоординатыТекста = КонтекстСохраняемый.ФормаVAВРежимеОбучения.VanessaTabs.getRectangle(НомерСтроки, 1, НомерСтроки, СтрДлина(ТекстСтроки));
	//КоординатыТекста = КонтекстСохраняемый.ФормаVAВРежимеОбучения.VanessaTabs.getRectangle(НомерСтроки, 1, НомерСтроки, 10);
	
	
	//Координаты1 = VanessaTabs.getCoordinates(lineNumber, column);
	//Координаты2 = VanessaTabs.getRectangle(startLineNumber, startColumn, endLineNumber, endColumn);	
КонецФункции

&НаКлиенте
Функция ОпределитьКоординатыТекстаВРедактореВДиапазонеСтрок(Left, Top, Bottom, Right, НачНомерСтроки, КонНомерСтроки);
	
	Для НомерСтроки = НачНомерСтроки По КонНомерСтроки Цикл
		КоординатыПервогоСимвола = КонтекстСохраняемый.ФормаVAВРежимеОбучения.VanessaTabs.getCoordinates(НомерСтроки, 1);
		Если Left > КоординатыПервогоСимвола.Left Тогда
			Left = КоординатыПервогоСимвола.Left;
		КонецЕсли;	 
		Если Top > КоординатыПервогоСимвола.Top Тогда
			Top = КоординатыПервогоСимвола.Top;
		КонецЕсли;
		
		ТекстСтроки = КонтекстСохраняемый.ФормаVAВРежимеОбучения.VanessaTabs.current.editor.getLineContent(НомерСтроки);
		КоординатыПоследнегоСимвола = КонтекстСохраняемый.ФормаVAВРежимеОбучения.VanessaTabs.getCoordinates(НомерСтроки, СтрДлина(ТекстСтроки) + 1);
		
		Если Right < КоординатыПоследнегоСимвола.Left + 1 Тогда
			Right = КоординатыПоследнегоСимвола.Left + 1;
		КонецЕсли;	 
		Если Bottom < КоординатыПоследнегоСимвола.top + КоординатыПоследнегоСимвола.lineHeight Тогда
			Bottom = КоординатыПоследнегоСимвола.top + КоординатыПоследнегоСимвола.lineHeight;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецФункции 

&НаКлиенте
//И я делаю подсветку текста в редакторе VA в режиме обучения с 3 по 5 строку "Секция тегов фичи"
//@ЯДелаюПодсветкуТекстаВРедактореVAВРежимеОбученияСПоСтроку(Парам01,Парам02,Парам03)
Функция ЯДелаюПодсветкуТекстаВРедактореVAВРежимеОбученияСПоСтроку(Знач НачНомерСтроки, Знач КонНомерСтроки, ТекстПодсказки) Экспорт
	
	НачНомерСтроки = Число(НачНомерСтроки);
	КонНомерСтроки = Число(КонНомерСтроки);
	
	Left = 1000000000000000;
	Top = 1000000000000000;
	Bottom = -1;
	Right = -1;
	
	ОпределитьКоординатыТекстаВРедактореВДиапазонеСтрок(Left, Top, Bottom, Right, НачНомерСтроки, КонНомерСтроки);
	
	ЭлементРедактора = ЭлементРедактораUIAutomation();
	КоординатыРедактора = ЭлементРедактора.Size;
	
	МасштабЭкрана = Ванесса.ПолучитьМасштабЭкрана();
	Коеф = (МасштабЭкрана - 100)/100;
	
	ПараметрыОтрисовки = Ванесса.ПолучитьНастройкиРисования();
	ПараметрыОтрисовки.text = ТекстПодсказки;
	НарисоватТеньПоКоординатам(
		КоординатыРедактора.Left + Left + Цел(Left*Коеф),
		КоординатыРедактора.Top + Top + Цел(Top*Коеф),
		КоординатыРедактора.Left + Right + Цел(Right*Коеф),
		КоординатыРедактора.Top + Bottom + Цел(Bottom*Коеф),
		ПараметрыОтрисовки);
	
КонецФункции

&НаКлиенте
//И я делаю подсветку фрагмента текста в редакторе VA в режиме обучения "Функциональность:" "Ключевое слово Функциональность"
//@ЯДелаюПодсветкуФрагментаТекстаВРедактореVAВРежимеОбучения(Парам01,Парам02)
Функция ЯДелаюПодсветкуФрагментаТекстаВРедактореVAВРежимеОбучения(ТекстПоиска, ТекстПодсказки, ПереданныйНомерСтроки = Неопределено) Экспорт
	Left = 1000000000000000;
	Top = 1000000000000000;
	Bottom = -1;
	Right = -1;
	
	
	НашлиТекстПоиска = Ложь;
	ТекстВсегоФайла = КонтекстСохраняемый.ФормаVAВРежимеОбучения.VanessaTabs.current.editor.getContent();
	МассивСтрок = Ванесса._СтрРазделить(ТекстВсегоФайла, Символы.ПС);
	НачСтр = 0;
	КонСтр = МассивСтрок.Количество()-1;
	Если ПереданныйНомерСтроки <> Неопределено Тогда
		НачСтр = ПереданныйНомерСтроки - 1;
		КонСтр = ПереданныйНомерСтроки - 1;
	КонецЕсли;	 
	
	Для Сч = НачСтр По КонСтр Цикл
		Поз = Найти(НРег(МассивСтрок[Сч]), НРег(ТекстПоиска));
		Если Поз > 0 Тогда
			НомерСтроки = Сч + 1;
			КоординатыПервогоСимвола = КонтекстСохраняемый.ФормаVAВРежимеОбучения.VanessaTabs.getCoordinates(НомерСтроки, Поз);
			КоординатыПоследнегоСимвола = КонтекстСохраняемый.ФормаVAВРежимеОбучения.VanessaTabs.getCoordinates(НомерСтроки, Поз + СтрДлина(ТекстПоиска));
			НашлиТекстПоиска = Истина;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если НЕ НашлиТекстПоиска Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(Ванесса.Локализовать("Не получилось найти текст <%1> в редакторе. Текущий текст: %2"), ТекстПоиска, ТекстВсегоФайла);
	КонецЕсли;	 
	
	ЭлементРедактора = ЭлементРедактораUIAutomation();
	КоординатыРедактора = ЭлементРедактора.Size;
	
	МасштабЭкрана = Ванесса.ПолучитьМасштабЭкрана();
	Коеф = (МасштабЭкрана - 100)/100;
	
	Left = КоординатыРедактора.Left + КоординатыПервогоСимвола.left + Цел(КоординатыПервогоСимвола.left*Коеф);
	Top = КоординатыРедактора.Top + КоординатыПервогоСимвола.top + Цел(КоординатыПервогоСимвола.top*Коеф);
	Right = КоординатыРедактора.Left + КоординатыПоследнегоСимвола.left + Цел(КоординатыПоследнегоСимвола.left*Коеф);
	Bottom = КоординатыРедактора.Top + КоординатыПервогоСимвола.top + Цел(КоординатыПервогоСимвола.top*Коеф) + КоординатыПервогоСимвола.lineHeight + Цел(КоординатыПервогоСимвола.lineHeight*Коеф);
	
	ПараметрыОтрисовки = Ванесса.ПолучитьНастройкиРисования();
	ПараметрыОтрисовки.text = ТекстПодсказки;
	НарисоватТеньПоКоординатам(
		Left,
		Top,
		Right,
		Bottom,
		ПараметрыОтрисовки);
	
КонецФункции


&НаКлиенте
//И я делаю подсветку в окне сообщений по части строки 'Пустой адрес снипета'
//@ЯДелаюПодсветкуВОкнеСообщенийПоЧастиСтроки(Парам01)
Функция ЯДелаюПодсветкуВОкнеСообщенийПоЧастиСтроки(ЧастьСтроки, Текст) Экспорт
	PID = ПолучитьКорректныйPID("ЭтотСеанс");
	ОтборЭлементов = Новый Структура("ProcessId", Число(PID));
	
	ТипЭлемента = "ListItem";
	ОтборЭлементов.Вставить("ControlType", ТипЭлемента);
	ОтборЭлементовJSON = Ванесса.ЗаписатьОбъектJSON(ОтборЭлементов);
	ДанныеПолей = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементовJSON));
	
	Если ДанныеПолей = Неопределено Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
		Ванесса.Локализовать("Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>."), PID, "", ТипЭлемента);
	КонецЕсли;
	
	Если ДанныеПолей.Количество() = 0 Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
		Ванесса.Локализовать("Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>."), PID, "", ТипЭлемента);
	КонецЕсли;	

	НужныйЭлемент = Неопределено;
	Для Каждого ТекЭлем Из ДанныеПолей Цикл
		Если Найти(НРег(ТекЭлем.Name), НРег(ЧастьСтроки)) > 0 Тогда
			НужныйЭлемент = ТекЭлем;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если НужныйЭлемент = Неопределено Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
		Ванесса.Локализовать("Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>."), PID, ЧастьСтроки, ТипЭлемента);
	КонецЕсли;	 
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(НужныйЭлемент);
	
	Left = 1000000000000000;
	Top = 1000000000000000;
	Bottom = -1;
	Right = -1;
	ОпределитьКоординатыПоМассивуЭлементовUIAutomation(МассивЭлементов, Left, Top, Bottom, Right);
	
	ПараметрыОтрисовки = Новый Массив;
	ДанныеОтрисовки = Новый Структура;
	ДанныеОтрисовки.Вставить("Кол1", "text");
	ДанныеОтрисовки.Вставить("Кол2", Текст);
	ПараметрыОтрисовки.Добавить(ДанныеОтрисовки);
	НарисоватТеньПоКоординатам(Left, Top, Right, Bottom, ПараметрыОтрисовки);
	
КонецФункции

&НаКлиенте
//И я подсвечиваю элемент формы UI Automation "ЭтотСеанс"  с именем "Create" и типом "Button" и показываю текст "Текст" пока не появится элемент с именем "Create" и типом "Button"
//@ЯПодсвечиваюЭлементФормыUIAutomationСИменемИТипомИПоказываюТекстПокаНеПоявитсяЭлементСИменемИТипом(Парам01,Парам02,Парам03,Парам04,Парам05,Парам06)
Функция ЯОжидаюНажатиеНаЭлементСИменемИТипомПоказываяТекстПокаНеПоявитсяЭлементСИменемИТипом(ИмяЭлементаПодсветки,ТипЭлементаПодсветки,ТекстСообщения,ИмяЭлементаОжидания,ТипЭлементаОжидания) Экспорт
	
	PID = "ЭтотСеанс";
	
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ЭлементаПодсветки = Новый Массив;
	ЭлементаПодсветки.Добавить(Новый Структура("Кол1, Кол2", "Имя", "Тип"));
	ЭлементаПодсветки.Добавить(Новый Структура("Кол1, Кол2", ИмяЭлементаПодсветки, ТипЭлементаПодсветки));
	
	ЭлементаПодсветкиПараметрыОтрисовки = Новый Массив;
	ЭлементаПодсветкиПараметрыОтрисовки.Добавить(Новый Структура("Кол1, Кол2", "Имя", "Значение"));
	ЭлементаПодсветкиПараметрыОтрисовки.Добавить(Новый Структура("Кол1, Кол2", "text", ТекстСообщения));
	ЭлементаПодсветкиПараметрыОтрисовки.Добавить(Новый Структура("Кол1, Кол2", "duration", 4000));
	
	ЭлементаРамкиОтрисовки = Новый Массив;
	ЭлементаРамкиОтрисовки.Добавить(Новый Структура("Кол1, Кол2", "Имя", "Значение"));
	ЭлементаРамкиОтрисовки.Добавить(Новый Структура("Кол1, Кол2", "color", 32768));
	ЭлементаРамкиОтрисовки.Добавить(Новый Структура("Кол1, Кол2", "transparency", 127));
	ЭлементаРамкиОтрисовки.Добавить(Новый Структура("Кол1, Кол2", "duration", 400));
	ЭлементаРамкиОтрисовки.Добавить(Новый Структура("Кол1, Кол2", "thickness", 6));
	ЭлементаРамкиОтрисовки.Добавить(Новый Структура("Кол1, Кол2", "frameDelay", 20));
	
	КэшФормы = Новый Структура;
	КэшФормы.Вставить("PID", PID);
	КэшФормы.Вставить("ЭлементаПодсветки", ЭлементаПодсветки);
	КэшФормы.Вставить("ЭлементаРамкиОтрисовки", ЭлементаРамкиОтрисовки);
	КэшФормы.Вставить("ИмяЭлементаОжидания", ИмяЭлементаОжидания);
	КэшФормы.Вставить("ТипЭлементаОжидания", ТипЭлементаОжидания);

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВыполнитьОповещение", Истина);
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("ОбработчикОжидания", "ОтрисовкаРамкиПослеЗатемненияЭлемента");
	ДопПараметры.Вставить("ПараметрОповещения", ПараметрОповещения);
	ДопПараметры.Вставить("ИмяСобытия", "ОповещениеДляПродолженияРаботыФормыUIAutomation");
	ЯДелаюЭффектЗатемненияУЭлементовФормыUIAutomation(PID, ЭлементаПодсветки, ЭлементаПодсветкиПараметрыОтрисовки, "ОтрисовкаРамкиПослеЗатемненияЭлемента", ДопПараметры);
	
КонецФункции   

&НаКлиенте
Функция ОтрисовкаРамкиПослеЗатемненияЭлемента()             
	Попытка
		ЯРисуюРамкуВокругЭлементовФормыUIAutomation(КэшФормы.PID, КэшФормы.ЭлементаПодсветки, КэшФормы.ЭлементаРамкиОтрисовки, "ПослеОтрисовкиРамкиВокругЗатемненногоЭлемента");		
	Исключение   
		ПослеОтрисовкиРамкиВокругЗатемненногоЭлемента();
	КонецПопытки;
КонецФункции

&НаКлиенте
Функция ПослеОтрисовкиРамкиВокругЗатемненногоЭлемента() 
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Попытка
		СуществуетЭлементUIAutomationСИменемИТипом(КэшФормы.PID, КэшФормы.ИмяЭлементаОжидания, КэшФормы.ТипЭлементаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов();
	Исключение     
		ПодключитьОбработчикОжидания("ОтрисовкаРамкиПослеЗатемненияЭлемента", 0.1, Истина);
	КонецПопытки;	
КонецФункции

&НаКлиенте
//И я ожидаю пока в поле с именем "Partner:" и типом "ComboBox" не будет строки "Текст"
//@ЯОжидаюПокаВПолеСИменемИТипомНеБудетСтроки(Парам01,Парам02,Парам03)
Функция ЯОжидаюПокаВПолеСИменемИТипомНеБудетСтроки(Заголовок, Тип, Значение) Экспорт 
	
	Ванесса.ЗапретитьВыполнениеШагов();
	
		
	СвойствоБалун = Новый Массив;
	СвойствоБалун.Добавить(Новый Структура("Кол1, Кол2", "Имя", "Значение"));
	СвойствоБалун.Добавить(Новый Структура("Кол1, Кол2", "duration", 1000));
	СвойствоБалун.Добавить(Новый Структура("Кол1, Кол2", "text", НСтр("ru='В этом поле необходимо выбрать значение:'") + " " + Значение));
	
	КэшФормы = Новый Структура;
	КэшФормы.Вставить("Заголовок", Заголовок);
	КэшФормы.Вставить("Тип", Тип);
	КэшФормы.Вставить("Значение", Значение);
	КэшФормы.Вставить("СвойствоБалун", СвойствоБалун);

	ПроверяемНаличиеПоляПоИмениИСодержанию();
	
КонецФункции

&НаКлиенте
Функция ПроверяемНаличиеПоляПоИмениИСодержанию()
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	PID = ПолучитьКорректныйPID("ЭтотСеанс");
	ОтборЭлементов = Новый Структура("Name,ProcessId", КэшФормы.Заголовок, Число(PID));
	Если ЗначениеЗаполнено(КэшФормы.Тип) Тогда
		ОтборЭлементов.Вставить("ControlType", КэшФормы.Тип)
	КонецЕсли;
	ОтборЭлементовJSON = Ванесса.ЗаписатьОбъектJSON(ОтборЭлементов);
	РезультатПоискаJSON = Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементовJSON);
	ДанныеЭлементов = Ванесса.ПрочитатьОбъектJSON(РезультатПоискаJSON);
	
	
	Если ДанныеЭлементов = Неопределено ИЛИ ДанныеЭлементов.Количество() = 0 Тогда
		ПодключитьОбработчикОжидания("ПроверяемНаличиеПоляПоИмениИСодержанию", 0.1, Истина);	
	Иначе
		Для Каждого СтруктураСвойствЭлемента Из ДанныеЭлементов Цикл
			Если СтруктураСвойствЭлемента.Свойство("Value") И СтруктураСвойствЭлемента.Value = КэшФормы.Значение Тогда
				Ванесса.ПродолжитьВыполнениеШагов();
				Возврат Неопределено;
			КонецЕсли;      
		КонецЦикла;		
		ЯДелаюПодсказкуБалунУЭлементаUIAutomation(ДанныеЭлементов[0].Id, КэшФормы.СвойствоБалун, "ПроверяемНаличиеПоляПоИмениИСодержанию");
	КонецЕсли;                                                                               
КонецФункции


&НаКлиенте
//И я делаю подсветку фрагмента текста в редакторе VA в строке 1 в режиме обучения "ИскомыйТекст" 'Подсказка'
//@ЯДелаюПодсветкуФрагментаТекстаВРедактореVAВСтрокеВРежимеОбучения(Парам01,Парам02,Парам03)
Функция ЯДелаюПодсветкуФрагментаТекстаВРедактореVAВСтрокеВРежимеОбучения(НомерСтроки, ТекстПоиска, ТекстПодсказки) Экспорт
	ЯДелаюПодсветкуФрагментаТекстаВРедактореVAВРежимеОбучения(ТекстПоиска, ТекстПодсказки, Число(НомерСтроки));
КонецФункции

&НаКлиенте
//И я создаю состояние Onboarding
//@ЯСоздаюСостояниеOnboarding(ТабПарам)
Функция ЯСоздаюСостояниеOnboarding(ТабПарам) Экспорт
	
	 СостоянияOnboarding = Ванесса.СостоянияOnboarding();
	 
	 ДанныеСостояния = Ванесса.НовоеСостояниеOnboarding();
	 
	 Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		 ДанныеСостояния.Вставить(СтрокаТабПарам.Кол1, СтрокаТабПарам.Кол2);
	 КонецЦикла;
	 
	 Если ДанныеСостояния.Имя = Неопределено Тогда
		 ВызватьИсключение Ванесса.Локализовать("Не указано имя состояния Onboarding.");
	 КонецЕсли;	
	 
	 СостоянияOnboarding.Вставить(НРег(ДанныеСостояния.Имя), ДанныеСостояния);
	
КонецФункции

&НаКлиенте
//И я запускаю Onboarding
//@ЯЗапускаюOnboarding()
Функция ЯЗапускаюOnboarding() Экспорт
	
	Ванесса.ЯЗапускаюOnboarding();
	
КонецФункции  

&НаКлиенте
//И я запоминаю элемент с типом "Тип" подчиненный "$IDПанели$" в переменную "IDТаблицы" Vanessa Automation
//@ЯЗапоминаюЭлементСТипомПодчиненныйВПеременнуюVanessaAutomation(Парам01,Парам02,Парам03)
Функция ЯЗапоминаюЭлементСТипомПодчиненныйВПеременнуюVanessaAutomation(Тип,IDРодителя,ИмяПеременной) Экспорт
	PID = ПолучитьКорректныйPID("ЭтотСеанс");
	ТипЭлемента = Неопределено;
	ИмяЭлементаСТемжеРодителем = Неопределено;
	ВсеПоля = Неопределено;
	РодителиЭлементов = Новый Соответствие;
	ПодчиненныеЭлементыРодителя = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ПолучитьЭлементы(IDРодителя));
	Данные = ЭлементыСНужнымТипомИзДереваЭлементов(ПодчиненныеЭлементыРодителя.Tree, Тип);
	Если Данные.Количество() = 1 Тогда
		Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, Данные[0].Id);
	ИначеЕсли Данные.Количество() = 0 Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
			Ванесса.Локализовать("Не было найдено ни одного элемента с типом <%1>."), Тип);
	Иначе
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
			Ванесса.Локализовать("Было найдено более одного элемента с типом <%1>."), Тип);
	КонецЕсли;	 
КонецФункции

&НаКлиенте
Функция ЭлементыСНужнымТипомИзДереваЭлементов(Массив, Тип)
	Результат = Новый Массив;
	
	ЭлементыСНужнымТипомИзДереваЭлементовРекурсивно(Массив, Тип, Результат);
	
	Возврат Результат;
КонецФункции	 

&НаКлиенте
Процедура ЭлементыСНужнымТипомИзДереваЭлементовРекурсивно(Массив, Тип, Результат)
	
	Для Каждого Элем Из Массив Цикл
		Если НРег(Элем.Type) = НРег(Тип) Тогда
			Результат.Добавить(Элем);
			Если Элем.Свойство("Tree") Тогда
				ЭлементыСНужнымТипомИзДереваЭлементовРекурсивно(Элем.Tree, Тип, Результат)
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	 
	
КонецПроцедуры 

&НаКлиенте
//И я жду появления элемента UI Automation "PID" с именем "Имя" и типом "Тип" в течение 10 секунд
//@ЯЖдуПоявленияЭлементаUIAutomationСИменемИТипомВТечениеСекунд(Парам01,Парам02,Парам03,Парам04)
Функция ЯЖдуПоявленияЭлементаUIAutomationСИменемИТипомВТечениеСекунд(PID,Имя,Тип,КоличествоСекунд) Экспорт
	
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
	PIDОбработкаОжидания = ПолучитьКорректныйPID(PID);
	ИмяОбработкаОжидания = Имя;
	ТипОбработкаОжидания = Тип;
	
	Ванесса.ЗапретитьВыполнениеШагов();
	ПодключитьОбработчикОжидания("ОбработчикОжиданияЯЖдуПоявленияЭлементаUIAutomationСИменемИТипомВТечениеСекунд",1,Ложь);
	
КонецФункции

&НаКлиенте
Процедура ОбработчикОжиданияЯЖдуПоявленияЭлементаUIAutomationСИменемИТипомВТечениеСекунд()
	ИмяОбработчика = "ОбработчикОжиданияЯЖдуПоявленияЭлементаUIAutomationСИменемИТипомВТечениеСекунд";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат;
	КонецЕсли;
	
	ОтборЭлементов = Новый Структура("Name,ProcessId", ИмяОбработкаОжидания, Число(PIDОбработкаОжидания));
	Если ЗначениеЗаполнено(ТипОбработкаОжидания) Тогда
		ОтборЭлементов.Вставить("ControlType", ТипОбработкаОжидания)
	КонецЕсли;
	ОтборЭлементовJSON = Ванесса.ЗаписатьОбъектJSON(ОтборЭлементов);
	РезультатПоискаJSON = Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементовJSON);
	ДанныеЭлементов = Ванесса.ПрочитатьОбъектJSON(РезультатПоискаJSON);
	
	Если ДанныеЭлементов = Неопределено ИЛИ ДанныеЭлементов.Количество() = 0 Тогда
		Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
			ОтключитьОбработчикОжидания(ИмяОбработчика);
			ТекстСообщения = Ванесса.ПодставитьПараметрыВСтроку(
				"Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>.", PIDОбработкаОжидания, ИмяОбработкаОжидания, ТипОбработкаОжидания);
			Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
			Возврат;
		КонецЕсли;	 
		Возврат;
	Иначе	
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры 


&НаКлиенте
//И я делаю подсветку расширенной подсказки элемента VA "ИмяЭлемента" "ТекстПодсказки" UI Automation
//@ЯДелаюПодсветкуРасширеннойПодсказкиЭлементаVAUIAutomation(Парам01,Парам02)
Функция ЯДелаюПодсветкуРасширеннойПодсказкиЭлементаVAUIAutomation(ИмяЭлемента, Текст) Экспорт
	PID = ПолучитьКорректныйPID("ЭтотСеанс");
	ТипЭлемента = Неопределено;
	ВсеПоля = Неопределено;
	РодителиЭлементов = Новый Соответствие;
	ИмяЭлементаСТемжеРодителем = Неопределено;
	Элемент = ОпределитьЭлементUIAutomationЭлементаФормыVAПоЕгоИмени(PID, ИмяЭлемента, ТипЭлемента, ВсеПоля, ИмяЭлементаСТемжеРодителем, РодителиЭлементов);
	Если ТипЗнч(Элемент) = Тип("Массив") Тогда
		Элемент = Элемент[0];
	КонецЕсли;	 
	
	СледующийЭлемент = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ПолучитьСледующийЭлемент(Элемент.id));
	
	Если Элемент.Name = СледующийЭлемент.Name Тогда
		//Скорее всего это чекбокс и его текстовое описание
		СледующийЭлемент = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ПолучитьСледующийЭлемент(СледующийЭлемент.id));
	КонецЕсли;
	
	ТаблицаЭлементов = Новый Массив;
	
	СтрокаТаблицы = Новый Структура;
	СтрокаТаблицы.Вставить("Кол1", "ID");
	ТаблицаЭлементов.Добавить(СтрокаТаблицы);

	СтрокаТаблицы = Новый Структура;
	СтрокаТаблицы.Вставить("Кол1", СледующийЭлемент.id);
	ТаблицаЭлементов.Добавить(СтрокаТаблицы);
	
	ПараметрыОтрисовки = Новый Массив;
	ДанныеОтрисовки = Новый Структура;
	ДанныеОтрисовки.Вставить("Кол1", "text");
	ДанныеОтрисовки.Вставить("Кол2", Текст);
	ПараметрыОтрисовки.Добавить(ДанныеОтрисовки);
	
	ЯДелаюЭффектЗатемненияУЭлементовФормыUIAutomation("ЭтотСеанс", ТаблицаЭлементов, ПараметрыОтрисовки);
	
КонецФункции


&НаКлиенте
//И я запоминаю ID элемента VA с типом "Тип" следующим за элементом "ИмяЭлемента" в переменную "ИмяПеременной" UI Automation
//@ЯЗапоминаюIDЭлементаVAСТипомСледующимЗаЭлементомВПеременнуюUIAutomation(Парам01,Парам02,Парам03)
Функция ЯЗапоминаюIDЭлементаVAСТипомСледующимЗаЭлементомВПеременнуюUIAutomation(Тип,ИмяЭлемента,ИмяПеременной) Экспорт
	PID = ПолучитьКорректныйPID("ЭтотСеанс");
	ТипЭлемента = Неопределено;
	ВсеПоля = Неопределено;
	РодителиЭлементов = Новый Соответствие;
	ИмяЭлементаСТемжеРодителем = Неопределено;
	Элемент = ОпределитьЭлементUIAutomationЭлементаФормыVAПоЕгоИмени(PID, ИмяЭлемента, ТипЭлемента, ВсеПоля, ИмяЭлементаСТемжеРодителем, РодителиЭлементов);
	
	Нашли = Ложь;
	Для Сч = 1 По 100 Цикл
		СледующийЭлемент = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ПолучитьСледующийЭлемент(Элемент.id));
		Элемент = СледующийЭлемент;
		Если НРег(Элемент.Type) = НРег(Тип) Тогда
			Нашли = Истина;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если Нашли Тогда
		Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, Элемент.Id);
	Иначе
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
			Ванесса.Локализовать("Не получилось найти элемент UI Automation. PID <%1>, тип <%2>."), PID, Тип);
	КонецЕсли;	 
	
КонецФункции


&НаКлиенте
//И я перемещаю курсор к элементу формы  'ЭтотСеанс' 'ИмяЭлемента' 'Тип' UI Automation
//@ЯПеремещаюКурсорКЭлементуФормыUIAutomation(Парам01,Парам02,Парам03)
Функция ЯПеремещаюКурсорКЭлементуФормыUIAutomation(PID,Заголовок,Тип) Экспорт
	
	PID = ПолучитьКорректныйPID(PID);
	
	ТекстСообщения = "";
	СтрокаОшибки = "";
	БылаОшибка = Ложь;
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
	
		Попытка
			ДанныеЭлементов = Ванесса.НайтиЭлементыПроцессаUIAutomation(PID, Заголовок, Тип);
			
			Если ДанныеЭлементов = Неопределено И НЕ ЗначениеЗаполнено(Заголовок) Тогда
				ДанныеЭлементов = Ванесса.НайтиЭлементыПроцессаUIAutomation(PID, Заголовок, Тип, Ложь);
			КонецЕсли;	 
			
			Если ДанныеЭлементов = Неопределено Тогда
				
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
					Ванесса.Локализовать("Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>."),
					PID, Заголовок, Тип);
			КонецЕсли;	 
			
			Если ДанныеЭлементов.Количество() = 0 Тогда
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
					Ванесса.Локализовать("Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>."),
					PID, Заголовок, Тип);
			КонецЕсли;	 
			
			Если ДанныеЭлементов.Количество() > 1 Тогда
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
					Ванесса.Локализовать("Найдено <%1> элементов UI Automation по переданным данным PID <%2>, заголовок <%3>, тип <%4>."),
					ДанныеЭлементов.Количество(), PID, Заголовок, Тип);
			КонецЕсли;	 
			
			МассивЭлементов = Новый Массив;
			МассивЭлементов.Добавить(ДанныеЭлементов[0]);
			
			Left = 1000000000000000;
			Top = 1000000000000000;
			Bottom = -1;
			Right = -1;
			ОпределитьКоординатыПоМассивуЭлементовUIAutomation(МассивЭлементов, Left, Top, Bottom, Right);
			
			//Ванесса.ВнешняяКомпонентаДляСкриншотов.УстановитьПозициюКурсора(Left + Цел((Right - Left)/2), Top + Цел((Bottom - Top)/2));
			Ванесса.ВыполнитьПеремещениеМышкиВнешнейКомпонентой(Left + Цел((Right - Left)/2), Top + Цел((Bottom - Top)/2));
			
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;

	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
	
	
	
	
	//ВсеПоля = Новый Массив;
	//PID = ПолучитьКорректныйPID(PID);
	//Элем = ОпределитьЭлементUIAutomationЭлементаФормыVAПоЕгоИмени(PID, ИмяЭлемента, Неопределено, ВсеПоля, Неопределено, Неопределено); 
	//
	//Если Элем = Неопределено Тогда
	//	ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
	//		Ванесса.Локализовать("Не получилось найти элемент UI Automation по имени элемента формы Vanessa Automation. PID <%1>, имя <%2>."), PID, ИмяЭлемента);
	//КонецЕсли;	 
	//
	//МассивЭлементов = Новый Массив;
	//МассивЭлементов.Добавить(Элем);
	//
	//Left = 1000000000000000;
	//Top = 1000000000000000;
	//Bottom = -1;
	//Right = -1;
	//ОпределитьКоординатыПоМассивуЭлементовUIAutomation(МассивЭлементов, Left, Top, Bottom, Right);
	//
	//Ванесса.ВнешняяКомпонентаДляСкриншотов.УстановитьПозициюКурсора(Left + Цел((Right - Left)/2), Top + Цел((Bottom - Top)/2));
КонецФункции


&НаКлиенте
//И я перемещаю курсор мышки к тексту в строке редактора 8 VA в режиме обучения
//@ЯПеремещаюКурсорМышкиКТекстуВСтрокеРедактораVAВРежимеОбучения(Парам01)
Функция ЯПеремещаюКурсорМышкиКТекстуВСтрокеРедактораVAВРежимеОбучения(НомерСтроки) Экспорт
	НачНомерСтроки = Число(НомерСтроки);
	КонНомерСтроки = Число(НомерСтроки);
	
	Left = 1000000000000000;
	Top = 1000000000000000;
	Bottom = -1;
	Right = -1;
	
	ОпределитьКоординатыТекстаВРедактореВДиапазонеСтрок(Left, Top, Bottom, Right, НачНомерСтроки, КонНомерСтроки);
	
	ЭлементРедактора = ЭлементРедактораUIAutomation();
	КоординатыРедактора = ЭлементРедактора.Size;
	
	МасштабЭкрана = Ванесса.ПолучитьМасштабЭкрана();
	Коеф = (МасштабЭкрана - 100)/100;
	
	LeftФин = КоординатыРедактора.Left + Left + Цел(Left*Коеф);
	TopФин  = КоординатыРедактора.Top + Top + Цел(Top*Коеф);
	RightФин = КоординатыРедактора.Left + Right + Цел(Right*Коеф);
	BottomФин = КоординатыРедактора.Top + Bottom + Цел(Bottom*Коеф);
	
	Ванесса.ВыполнитьПеремещениеМышкиВнешнейКомпонентой(LeftФин + Цел((RightФин - LeftФин)/2), TopФин + Цел((BottomФин - TopФин)/2));
	
КонецФункции


&НаКлиенте
//И получаю данные текущего элемента формы активного окна UI Automation
//@ПолучаюДанныеТекущегоЭлементаФормыАктивногоОкнаUIAutomation()
Функция ПолучаюДанныеТекущегоЭлементаФормыАктивногоОкнаUIAutomation() Экспорт
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученАктивныйЭлемент", ЭтаФорма);
	Ванесса.ВнешняяКомпонентаДляСкриншотов.НачатьПолучениеАктивныйЭлемент(ОписаниеОповещения);
	Ванесса.ЗапретитьВыполнениеШагов();
КонецФункции

&НаКлиенте
Процедура ПолученАктивныйЭлемент(РезультатВызова, ДополнительныеПараметры) Экспорт
	
	ДанныеJSON = Ванесса.ПрочитатьСтрокуJSON(РезультатВызова);
	Если ТипЗнч(ДанныеJSON) = Тип("Структура") Тогда
		Если ДанныеJSON.Свойство("Id") Тогда
			Ванесса.СохранитьЗначениеПеременнойВКонтекст("uia_id", ДанныеJSON.Id);
		КонецЕсли;
		
		Если ДанныеJSON.Свойство("Type") Тогда
			Ванесса.СохранитьЗначениеПеременнойВКонтекст("uia_Type", ДанныеJSON.Type);
		КонецЕсли;
		
		Если ДанныеJSON.Свойство("name") Тогда
			Ванесса.СохранитьЗначениеПеременнойВКонтекст("uia_name", ДанныеJSON.name);
		КонецЕсли;
		
		Если ДанныеJSON.Свойство("value") Тогда
			Ванесса.СохранитьЗначениеПеременнойВКонтекст("uia_value", ДанныеJSON.value);
		КонецЕсли;
		
		Если ДанныеJSON.Свойство("HelpText") Тогда
			Ванесса.СохранитьЗначениеПеременнойВКонтекст("uia_HelpText", ДанныеJSON.HelpText);
		КонецЕсли;	
	КонецЕсли;
	
	Ванесса.ПродолжитьВыполнениеШагов();
	
КонецПроцедуры


//ВремСтруктура = Новый Структура;
//ВремСтруктура.Вставить("ProcessId", ИдентификаторПроцесса);
//ВремСтруктура.Вставить("Parent", ИдентификаторРодителя);
//ВремСтруктура.Вставить("Name", ИмяЭлемента);
//ВремСтруктура.Вставить("ControlType", "Button");
//ВремСтруктура.Вставить("LegacyIAccessibleHelp", "Расширенная подсказка элемента");
//ВремСтруктура.Вставить("LegacyIAccessibleKeyboardShortcut", "F12");
//УсловиеОтбора = ЗаписатьСтрокуJSON(ВремСтруктура);
//ТекстJSON = ВнешняяКомпонента.НайтиЭлементы(УсловиеОтбора);



//std::map<std::string, int> properties = {
//  { std::string("Parent"), UIA_ParentPropertyId },
//  { std::string("RuntimeId"), UIA_RuntimeIdPropertyId },
//  { std::string("BoundingRectangle"), UIA_BoundingRectanglePropertyId },
//  { std::string("ProcessId"), UIA_ProcessIdPropertyId },
//  { std::string("ControlType"), UIA_ControlTypePropertyId },
//  { std::string("LocalizedControlType"), UIA_LocalizedControlTypePropertyId },
//  { std::string("Name"), UIA_NamePropertyId },
//  { std::string("AcceleratorKey"), UIA_AcceleratorKeyPropertyId },
//  { std::string("AccessKey"), UIA_AccessKeyPropertyId },
//  { std::string("HasKeyboardFocus"), UIA_HasKeyboardFocusPropertyId },

//Описание параметров затемнения:
//https://github.com/Pr-Mex/vanessa-automation/pull/1496
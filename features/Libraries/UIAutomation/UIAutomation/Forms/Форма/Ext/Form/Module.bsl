
///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Automation
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Automation.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюКликПоЭлементуКлиентаТестированияUIAutomation(Парам01,Парам02)",
		"ЯДелаюКликПоЭлементуКлиентаТестированияUIAutomation",
		"И я делаю клик по элементу клиента тестирования 'Заголовок' 'Тип' UI Automation",
		"Выполняет поиск элемента с помощью механизма UI Automation. Только под Windows. Необходимо включить использование компоненты VanessaExt. Нужно обязательно передать параметр 'Заголовок'. Параметр 'Тип' необязательный.",
		"Прочее.UI Automation");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюКликПоЭлементуФормыUIAutomation(Парам01,Парам02,Парам03)",
		"ЯДелаюКликПоЭлементуФормыUIAutomation",
		"И я делаю клик по элементу формы 'PID' 'Заголовок' 'Тип' UI Automation",
		"Выполняет поиск элемента с помощью механизма UI Automation. Только под Windows. Необходимо включить использование компоненты VanessaExt. В параметр PID можно передать строку ""Этот сеанс"", тогда будет использован PID текущего сеанса, в котором запущена Vanessa Automation. Нужно обязательно передать параметр 'Заголовок'. Параметр 'Тип' необязательный.",
		"Прочее.UI Automation");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯРисуюРамкуВокругЭлементовФормыUIAutomation(Парам01,ТабПарам1, ТабПарам2)",
		"ЯРисуюРамкуВокругЭлементовФормыUIAutomation",
		"И я рисую рамку вокруг элементов формы UI Automation ""PID"""
		+ Символы.ПС + "	| 'Имя'   | 'Тип' |"
		+ Символы.ПС + "	| 'Поле1' | 'Тип1' |"
		+ Символы.ПС + "	| 'Поле2' | 'Тип2' |"
		+ Символы.ПС 
		+ Символы.ПС + "	| 'Имя'          | 'Значение' |"
		+ Символы.ПС + "	| 'color'        | 32768      |"
		+ Символы.ПС + "	| 'transparency' | 127        |"
		+ Символы.ПС + "	| 'duration'     | 4000       |"
		+ Символы.ПС + "	| 'thickness'    | 6          |"
		+ Символы.ПС + "	| 'frameDelay'   | 20         |"
		,
		"Рисует рамку вокруг элементов, которые переданы таблицей. В параметр PID можно передать строку ""Этот сеанс"", тогда будет использован PID текущего сеанса, в котором запущена Vanessa Automation. Вторая таблица является необязательной. В ней передаются параметры отрисовки прямоугольника.",
		"Прочее.UI Automation");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯРисуюСтрелкуКЭлементамФормыUIAutomation(Парам01,ТабПарам1,ТабПарам2)",
		"ЯРисуюСтрелкуКЭлементамФормыUIAutomation",
		"И я рисую стрелку к элементам формы UI Automation ""PID"""
		+ Символы.ПС + "	| 'Имя'   | 'Тип' |"
		+ Символы.ПС + "	| 'Поле1' | 'Тип1' |"
		+ Символы.ПС + "	| 'Поле2' | 'Тип2' |"
		+ Символы.ПС 
		+ Символы.ПС + "	| 'Имя'          | 'Значение' |"
		+ Символы.ПС + "	| 'color'        | 32768      |"
		+ Символы.ПС + "	| 'transparency' | 127        |"
		+ Символы.ПС + "	| 'duration'     | 4000       |"
		+ Символы.ПС + "	| 'thickness'    | 6          |"
		+ Символы.ПС + "	| 'frameDelay'   | 20         |"
		,
		"Рисует стрелку к элементам, которые переданы таблицей. В параметр PID можно передать строку ""Этот сеанс"", тогда будет использован PID текущего сеанса, в котором запущена Vanessa Automation. Вторая таблица является необязательной. В ней передаются параметры отрисовки стрелки.",
		"Прочее.UI Automation");
		
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюЭффектЗатемненияУЭлементовФормыUIAutomation(Парам01,ТабПарам1,ТабПарам2)",
		"ЯДелаюЭффектЗатемненияУЭлементовФормыUIAutomation",
		"И я делаю эффект затемнения у элементов формы UI Automation ""PID"""
		+ Символы.ПС + "	| 'Имя/ID' | 'Тип' |"
		+ Символы.ПС + "	| 'Поле1'  | 'Тип1' |"
		+ Символы.ПС + "	| 'Поле2'  | 'Тип2' |"
		+ Символы.ПС 
		+ Символы.ПС + "	| 'Имя'          | 'Значение'  |"
		+ Символы.ПС + "	| 'text'         | 'Мой текст' |"
		+ Символы.ПС + "	| 'color'        | 32768       |"
		+ Символы.ПС + "	| 'transparency' | 127         |"
		+ Символы.ПС + "	| 'duration'     | 4000        |"
		+ Символы.ПС + "	| 'thickness'    | 6           |"
		+ Символы.ПС + "	| 'frameDelay'   | 20          |"
		,
		"Создаёт на экране эффект затемнения с текстовой подсказкой к элементам, которые переданы таблицей. В первой колонке можно указывать заголовок элемента или его ID. В параметр PID можно передать строку ""Этот сеанс"", тогда будет использован PID текущего сеанса, в котором запущена Vanessa Automation. Вторая таблица является необязательной. В ней передаются параметры отрисовки стрелки.",
		"Прочее.UI Automation");
		
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗапоминаюРодителяЭлементаСТипомПроцессаВПеременнуюUIAutomation(Парам01,Парам02,Парам03,Парам04)",
		"ЯЗапоминаюРодителяЭлементаСТипомПроцессаВПеременнуюUIAutomation","И я запоминаю родителя элемента ""Заголовок"" с типом ""Тип"" процесса ""PID"" в переменную ""ИмяПеременной"" UI Automation",
		"Запоминает ID родителя элемента с указанным заголовком и типом в переменную. В параметр PID можно передать строку ""Этот сеанс"", тогда будет использован PID текущего сеанса, в котором запущена Vanessa Automation.",
		"Прочее.UI Automation");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗапоминаюЭлементСТипомПроцессаВПеременнуюUIAutomation(Парам01,Парам02,Парам03,Парам04)",
		"ЯЗапоминаюЭлементСТипомПроцессаВПеременнуюUIAutomation","И я запоминаю элемент ""Заголовок"" с типом ""Тип"" процесса ""PID"" в переменную ""ИмяПеременной"" UI Automation",
		"Запоминает ID элемента с указанным заголовком и типом в переменную. В параметр PID можно передать строку ""Этот сеанс"", тогда будет использован PID текущего сеанса, в котором запущена Vanessa Automation.",
		"Прочее.UI Automation");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюПодсветкуЭлементовVAUIAutomation(Парам01,Парам02,ТабПарам)",
		"ЯДелаюПодсветкуЭлементовVAUIAutomation",
		"И я делаю подсветку элементов VA UI Automation",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗапоминаюIDЭлементаФормыVanessaAutomationСИменемВПеременную(Парам01,Парам02)",
		"ЯЗапоминаюIDЭлементаФормыVanessaAutomationСИменемВПеременную",
		"И я запоминаю ID элемента формы Vanessa Automation с именем ""ИмяПоля"" в переменную ""ИмяПеременной""",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюКликВПолеUIAutomation(Парам01)",
		"ЯДелаюКликВПолеUIAutomation",
		"И я делаю клик в поле ""ID"" UI Automation",
		"Делает клик по полю с указанным ID.",
		"Прочее.UI Automation");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюПодсказкуБалунУЭлементаUIAutomation(Парам01,ТабПарам)",
		"ЯДелаюПодсказкуБалунУЭлементаUIAutomation",
		"И я делаю подсказку балун у элемента ""$IDЭлемента$"" UI Automation"
		+ Символы.ПС + "	| 'Имя'        | 'Значение' |"
		+ Символы.ПС + "	| 'color'      | 3289800    |"
		+ Символы.ПС + "	| 'background' | 15793151   |"
		+ Символы.ПС + "	| 'fontColor'  | 0          |"
		+ Символы.ПС + "	| 'fontName'   | 'Calibri'  |"
		+ Символы.ПС + "	| 'fontSize'   | 12         |"
		+ Символы.ПС + "	| 'duration'   | 3000       |"
		+ Символы.ПС + "	| 'thickness'  | 4          |"
		+ Символы.ПС + "	| 'text'       | 'Текст'    |"
		+ Символы.ПС + "	| 'radius'     | 5          |"
		,
		"Показывает подсказку балун для элемента с заданным ID и параметрам переданным в таблице. Все параметры являются необязательными и имеют значение по умолчанию.",
		"Прочее.UI Automation");
		
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯПеремещаюМышкуККаждойКнопкеПанелиVanessaAutomation(Парам01)",
		"ЯПеремещаюМышкуККаждойКнопкеПанелиVanessaAutomation",
		"И я перемещаю мышку к каждой кнопке панели ""$IDПанели$"" Vanessa Automation",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗапоминаюЭлементСТипомCРодителемВПеременнуюVanessaAutomation(Парам01,Парам02,Парам03)",
		"ЯЗапоминаюЭлементСТипомCРодителемВПеременнуюVanessaAutomation",
		"И я запоминаю элемент с типом ""Тип"" c родителем ""$IDЭлемента$"" в переменную ""IDЭлемента"" Vanessa Automation",
		"",
		"");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюРодителяЭлементаСИменемВПеременнуюVanessaAutomation(Парам01,Парам02)","ЯЗапоминаюРодителяЭлементаСИменемВПеременнуюVanessaAutomation","И я запоминаю родителя элемента с именем ""Имя"" в переменную ""ИмяПеременной"" Vanessa Automation","","");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗапоминаюЭлементUIAutomationВПеременную(Парам01,ТабПарам)",
		"ЯЗапоминаюЭлементUIAutomationВПеременную",
		"И я запоминаю элемент UI Automation в переменную ""ИмяПеременной"""
		+ Символы.ПС + "	| 'Имя'                               | 'Значение'   |"
		+ Символы.ПС + "	| 'Name'                              | 'Заголовок'  |"
		+ Символы.ПС + "	| 'ProcessId'                         | 'ЭтотСеанс'  |"
		+ Символы.ПС + "	| 'Parent'                            | 'IdРодителя' |"
		+ Символы.ПС + "	| 'ControlType'                       | 'Тип'        |"
		+ Символы.ПС + "	| 'LegacyIAccessibleHelp'             | 'Подсказка'  |"
		+ Символы.ПС + "	| 'LegacyIAccessibleKeyboardShortcut' | 'Хоткей'     |"
		,
		"Запоминает ID элемента UI Automation согласно переданным параметрам в таблице",
		"Прочее.UI Automation");
		
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯДелаюКликПоЭлементуUIAutomation(Парам01)",
		"ЯДелаюКликПоЭлементуUIAutomation",
		"И я делаю клик по элементу ""ID"" UI Automation",
		"Делает клик по элементу UI Automation с переданным ID.",
		"Прочее.UI Automation");
		
	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Функция выполняется перед началом каждого сценария
Функция ПередНачаломСценария() Экспорт
	
КонецФункции

&НаКлиенте
// Функция выполняется перед окончанием каждого сценария
Функция ПередОкончаниемСценария() Экспорт
	
КонецФункции



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
Процедура ПустоеОповещениеСПродолжениемВыполненияСценария(Парам1, Парам2, Парам3) Экспорт
	Ванесса.ПродолжитьВыполнениеШагов();
КонецПроцедуры 

&НаКлиенте
Процедура ПолучитьДанныеКоординатЭлементовПоТаблице(PID, ТаблицаЭлементов, Left, Top, Bottom, Right);
	PID = ПолучитьКорректныйPID(PID);
	
	Left = 1000000000000000;
	Top = 1000000000000000;
	Bottom = -1;
	Right = -1;

	МассивЭлементов = Новый Массив;
	
	Сч = 0;
	Для Каждого СтрокаТаблицаЭлементов Из ТаблицаЭлементов Цикл
		Сч = Сч + 1;
		Если Сч = 1 Тогда
			//В первой строке заголовок таблицы
			Продолжить;
		КонецЕсли;	 
		
		ДанныеЭлемента = Неопределено;
		ЗаголовокЭлемента = Строка(СтрокаТаблицаЭлементов.Кол1);
		ТипЭлемента = СтрокаТаблицаЭлементов.Кол2;
		ДанныеПолей = Ванесса.НайтиЭлементыПроцессаUIAutomation(Число(PID), ЗаголовокЭлемента, ТипЭлемента);
		
		Если ДанныеПолей = Неопределено И ЗаголовокЭлемента = "" И ЗначениеЗаполнено(ТипЭлемента) Тогда
			ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, ControlType", Число(PID), ТипЭлемента));
			ДанныеПолей = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементов));
		КонецЕсли;	 
		
		Если ДанныеПолей = Неопределено И ЗначениеЗаполнено(ЗаголовокЭлемента) Тогда
			Попытка
				ДанныеЭлемента = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ЭлементПоИдентификатору(ЗаголовокЭлемента));
			Исключение
			КонецПопытки;
		КонецЕсли;	 
		
		Если ДанныеЭлемента = Неопределено Тогда
			Если ДанныеПолей = Неопределено Тогда
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
					Ванесса.Локализовать("Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>."), PID, ЗаголовокЭлемента, ТипЭлемента);
			КонецЕсли;
			
			Если ДанныеПолей.Количество() = 0 Тогда
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
					Ванесса.Локализовать("Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>."), PID, ЗаголовокЭлемента, ТипЭлемента);
			КонецЕсли;	
			
			ДанныеЭлемента = ДанныеПолей[0];
		КонецЕсли;	 
		
		МассивЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;	 
	
	ОпределитьКоординатыПоМассивуЭлементовUIAutomation(МассивЭлементов, Left, Top, Bottom, Right);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОпределитьКоординатыПоМассивуЭлементовUIAutomation(МассивЭлементов, Left, Top, Bottom, Right)
	
	Для Каждого ДанныеЭлемента Из МассивЭлементов Цикл
		Если ДанныеЭлемента.Size.Left < Left Тогда
			Left = ДанныеЭлемента.Size.Left;
		КонецЕсли;	 
		Если ДанныеЭлемента.Size.Top < Top Тогда
			Top = ДанныеЭлемента.Size.Top;
		КонецЕсли;	 
		Если ДанныеЭлемента.Size.Bottom > Bottom Тогда
			Bottom = ДанныеЭлемента.Size.Bottom;
		КонецЕсли;	 
		Если ДанныеЭлемента.Size.Right > Right Тогда
			Right = ДанныеЭлемента.Size.Right;
		КонецЕсли;	 
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьКорректныйPID(PID)
	
	Если НРег(PID) <> НРег("ЭтотСеанс") Тогда
		Возврат Число(PID); 
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(Ванесса.PIDЭтогоСеанса) Тогда
		Возврат Число(Ванесса.PIDЭтогоСеанса);
	КонецЕсли;
	
	Ванесса.ВычислитьPIDЭтогоСеансаСлужебный();
	
	Возврат Число(Ванесса.PIDЭтогоСеанса);
	
КонецФункции	 

&НаКлиенте
Функция ОсновнойЗеленыйЦвет()
	Возврат 32768; 
КонецФункции	 

&НаКлиенте
Функция ПолучитьНастройкиРисования()
	
	ВремСтруктура = Новый Структура;
	ВремСтруктура.Вставить("color", ОсновнойЗеленыйЦвет());
	ВремСтруктура.Вставить("transparency", 127);
	ВремСтруктура.Вставить("duration", 4000);
	ВремСтруктура.Вставить("thickness", 6);
	ВремСтруктура.Вставить("frameDelay", 20);
	ВремСтруктура.Вставить("text", "Текст");
	Возврат ВремСтруктура;
	
КонецФункции	 

&НаКлиенте
Функция ДополнитьПараметрыОтрисовкиПереданныеПользователем(НастройкиРисования, ПараметрыОтрисовки)
	
	Если ПараметрыОтрисовки = Неопределено Тогда
		Возврат НастройкиРисования; 
	КонецЕсли;	 
	
	Для Каждого СтрокаПараметрыОтрисовки Из ПараметрыОтрисовки Цикл
		НастройкиРисования.Вставить(СтрокаПараметрыОтрисовки.Кол1, СтрокаПараметрыОтрисовки.Кол2);
	КонецЦикла;	 
	
	Возврат НастройкиРисования; 
КонецФункции	 

&НаКлиенте
//И я делаю клик по объекту 'Заголовок' 'Тип' UI Automation
//@ЯДелаюКликПоЭлементуКлиентаТестированияUIAutomation(Парам01,Парам02)
Функция ЯДелаюКликПоЭлементуКлиентаТестированияUIAutomation(Заголовок, Тип = "") Экспорт
	
	ТекстСообщения = "";
	СтрокаОшибки = "";
	БылаОшибка = Ложь;
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
	
		Попытка
			ТекущиеДанныеКлиентаТестирования = Ванесса.ТекущиеДанныеКлиентаТестирования();
			ОтборЭлементов = Новый Структура("Name,ProcessId", Заголовок, ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования);
			Если ЗначениеЗаполнено(Тип) Тогда
				ОтборЭлементов.Вставить("ControlType", Тип)
			КонецЕсли;
			ОтборЭлементовJSON = Ванесса.ЗаписатьОбъектJSON(ОтборЭлементов);
			РезультатПоискаJSON = Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементовJSON);
			ДанныеЭлементов = Ванесса.ПрочитатьОбъектJSON(РезультатПоискаJSON);
			
			Если ДанныеЭлементов = Неопределено Тогда
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
					Ванесса.Локализовать("Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>."),
					ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, Заголовок, Тип);
			КонецЕсли;	 
			
			Если ДанныеЭлементов.Количество() = 0 Тогда
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
					Ванесса.Локализовать("Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>."),
					ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, Заголовок, Тип);
			КонецЕсли;	 
			
			Если ДанныеЭлементов.Количество() > 1 Тогда
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
					Ванесса.Локализовать("Найдено <%1> элементов UI Automation по переданным данным PID <%2>, заголовок <%3>, тип <%4>."),
					ДанныеЭлементов.Количество(), ТекущиеДанныеКлиентаТестирования.PIDКлиентаТестирования, Заголовок, Тип);
			КонецЕсли;	 
				
			Ванесса.КликПоЭлементуБезПеремещенияМышкиUIAutomation(ДанныеЭлементов[0].size);
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;

	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И я делаю клик по элементу формы 'ЭтотСеанс' 'Генератор EPF' 'TabItem' UI Automation
//@ЯДелаюКликПоЭлементуФормыUIAutomation(Парам01,Парам02)
Функция ЯДелаюКликПоЭлементуФормыUIAutomation(Знач PID, Заголовок, Тип = "") Экспорт
	
	PID = ПолучитьКорректныйPID(PID);
	
	ТекстСообщения = "";
	СтрокаОшибки = "";
	БылаОшибка = Ложь;
	
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
	
		Попытка
			ДанныеЭлементов = Ванесса.НайтиЭлементыПроцессаUIAutomation(PID, Заголовок, Тип);
			Если ДанныеЭлементов = Неопределено Тогда
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
					Ванесса.Локализовать("Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>."),
					PID, Заголовок, Тип);
			КонецЕсли;	 
			
			Если ДанныеЭлементов.Количество() = 0 Тогда
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
					Ванесса.Локализовать("Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>."),
					PID, Заголовок, Тип);
			КонецЕсли;	 
			
			Если ДанныеЭлементов.Количество() > 1 Тогда
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
					Ванесса.Локализовать("Найдено <%1> элементов UI Automation по переданным данным PID <%2>, заголовок <%3>, тип <%4>."),
					ДанныеЭлементов.Количество(), PID, Заголовок, Тип);
			КонецЕсли;	 
				
			Ванесса.КликПоЭлементуБезПеремещенияМышкиUIAutomation(ДанныеЭлементов[0].size);
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;

	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И я рисую рамку вокруг элементов формы UI Automation "ЭтотСеанс"
//@ЯРисуюРамкуВокругЭлементовФормыUIAutomation(Парам01,ТабПарам)
Функция ЯРисуюРамкуВокругЭлементовФормыUIAutomation(Знач PID,ТаблицаЭлементов, ПараметрыОтрисовки = Неопределено) Экспорт
	Left = -1;
	Top = -1;
	Bottom = -1;
	Right = -1;
	ПолучитьДанныеКоординатЭлементовПоТаблице(PID, ТаблицаЭлементов, Left, Top, Bottom, Right);
	
	Если Right <> -1 Тогда
		// Значит были элементы в таблице
		
		Ванесса.ЗапретитьВыполнениеШагов();
		
		НастройкиРисованияПоУмолчанию = ПолучитьНастройкиРисования();
		НастройкиРисования = ДополнитьПараметрыОтрисовкиПереданныеПользователем(НастройкиРисованияПоУмолчанию, ПараметрыОтрисовки);
		НастройкиРисованияJSON = Ванесса.ЗаписатьОбъектJSON(НастройкиРисования); 
		ОписаниеОповещения = Новый ОписаниеОповещения("ПустоеОповещениеСПродолжениемВыполненияСценария", ЭтаФорма);
		Ванесса.ВнешняяКомпонентаДляСкриншотов.НачатьВызовНарисоватьПрямоугольник(
			ОписаниеОповещения,
			НастройкиРисованияJSON,
			Left - НастройкиРисования.thickness,
			Top - НастройкиРисования.thickness,
			Right - Left + НастройкиРисования.thickness*2,
			Bottom - Top + НастройкиРисования.thickness*2);
		
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И я рисую стрелку к элементам формы UI Automation "ЭтотСеанс"
//@ЯРисуюСтрелкуКЭлементамФормыUIAutomation(Парам01,ТабПарам1,ТабПарам2)
Функция ЯРисуюСтрелкуКЭлементамФормыUIAutomation(Знач PID,ТаблицаЭлементов, ПараметрыОтрисовки = Неопределено) Экспорт
	
	Left = -1;
	Top = -1;
	Bottom = -1;
	Right = -1;
	ПолучитьДанныеКоординатЭлементовПоТаблице(PID, ТаблицаЭлементов, Left, Top, Bottom, Right);
	
	Если Right <> -1 Тогда
		// Значит были элементы в таблице
		
		Ванесса.ЗапретитьВыполнениеШагов();
		
		НастройкиРисованияПоУмолчанию = ПолучитьНастройкиРисования();
		НастройкиРисования = ДополнитьПараметрыОтрисовкиПереданныеПользователем(НастройкиРисованияПоУмолчанию, ПараметрыОтрисовки);
		НастройкиРисованияJSON = Ванесса.ЗаписатьОбъектJSON(НастройкиРисования); 
		
		ИнформацияЭкранаКлиента = Вычислить("ПолучитьИнформациюЭкрановКлиента()[0]");
		Ширина = ИнформацияЭкранаКлиента.Ширина;
		Высота = ИнформацияЭкранаКлиента.Высота;
		
		X1 = Цел(Ширина/2);
		Y1 = Цел(Высота/2);
		
		Если Left > X1 Тогда
			//Значит объект справа от центра
			X2 = Left;
		Иначе	
			//Значит объект слева от центра
			X2 = Left + Right - Left;
		КонецЕсли;
		
		Y2 = Top + Цел((Bottom - Top)/2);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПустоеОповещениеСПродолжениемВыполненияСценария", ЭтаФорма);
		Ванесса.ВнешняяКомпонентаДляСкриншотов.НачатьВызовНарисоватьСтрелку(
			ОписаниеОповещения,
			НастройкиРисованияJSON,
			X1,
			Y1,
			X2,
			Y2);
		
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И я делаю эффект затемнения у элементов формы UI Automation "ЭтотСеанс"
//@ЯРисуюСтрелкуКЭлементамФормыUIAutomation(Парам01,ТабПарам1,ТабПарам2)
Функция ЯДелаюЭффектЗатемненияУЭлементовФормыUIAutomation(Знач PID, ТаблицаЭлементов, ПараметрыОтрисовки = Неопределено) Экспорт
	
	Left = -1;
	Top = -1;
	Bottom = -1;
	Right = -1;
	ПолучитьДанныеКоординатЭлементовПоТаблице(PID, ТаблицаЭлементов, Left, Top, Bottom, Right);
	
	Если Right <> -1 Тогда
		// Значит были элементы в таблице
		
		НарисоватТеньПоКоординатам(Left, Top, Right, Bottom, ПараметрыОтрисовки);
		
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
Процедура НарисоватТеньПоКоординатам(Left, Top, Right, Bottom, ПараметрыОтрисовки)
	Ванесса.ЗапретитьВыполнениеШагов();
	
	НастройкиРисованияПоУмолчанию = ПолучитьНастройкиРисования();
	НастройкиРисования = ДополнитьПараметрыОтрисовкиПереданныеПользователем(НастройкиРисованияПоУмолчанию, ПараметрыОтрисовки);
	НастройкиРисованияJSON = Ванесса.ЗаписатьОбъектJSON(НастройкиРисования); 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПустоеОповещениеСПродолжениемВыполненияСценария", ЭтаФорма);
	Ванесса.ВнешняяКомпонентаДляСкриншотов.НачатьВызовНарисоватьТень(
		ОписаниеОповещения,
		НастройкиРисованияJSON,
		Left,
		Top,
		Right - Left,
		Bottom - Top);
КонецПроцедуры 

&НаКлиенте
//И я запоминаю родителя элемента "Заголовок" процесса "ЭтотСеанс" в переменную UI Automation
//@ЯЗапоминаюРодителяЭлементаПроцессаВПеременнуюUIAutomation(Парам01,Парам02)
Функция ЯЗапоминаюРодителяЭлементаСТипомПроцессаВПеременнуюUIAutomation(ЗаголовокЭлемента, ТипЭлемента, Знач PID, ИмяПеременной) Экспорт
	PID = ПолучитьКорректныйPID(PID);
	
	ДанныеПолей = Ванесса.НайтиЭлементыПроцессаUIAutomation(Число(PID), ЗаголовокЭлемента, ТипЭлемента);
	Если ДанныеПолей = Неопределено Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
			"Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>.", PID, ЗаголовокЭлемента, ТипЭлемента);
	КонецЕсли;
	
	Если ДанныеПолей.Количество() = 0 Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
			"Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>.", PID, ЗаголовокЭлемента, ТипЭлемента);
	КонецЕсли;	
	
	ТекПоле = ДанныеПолей[0];
	РодительЭлемента = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ПолучитьРодителяЭлемента(ТекПоле.Id));
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, РодительЭлемента.Id);
	
КонецФункции

&НаКлиенте
//И я запоминаю элемент "Заголовок" процесса "ЭтотСеанс" в переменную UI Automation
//@ЯЗапоминаюЭлементСТипомПроцессаВПеременнуюUIAutomation(Парам01,Парам02)
Функция ЯЗапоминаюЭлементСТипомПроцессаВПеременнуюUIAutomation(ЗаголовокЭлемента, ТипЭлемента, Знач PID, ИмяПеременной) Экспорт
	PID = ПолучитьКорректныйPID(PID);
	
	ДанныеПолей = Ванесса.НайтиЭлементыПроцессаUIAutomation(Число(PID), ЗаголовокЭлемента, ТипЭлемента);
	Если ДанныеПолей = Неопределено Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
			"Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>.", PID, ЗаголовокЭлемента, ТипЭлемента);
	КонецЕсли;
	
	Если ДанныеПолей.Количество() = 0 Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(
			"Не получилось найти элемент UI Automation. PID <%1>, заголовок <%2>, тип <%3>.", PID, ЗаголовокЭлемента, ТипЭлемента);
	КонецЕсли;	
	
	ТекПоле = ДанныеПолей[0];
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, ТекПоле.Id);
	
КонецФункции


&НаКлиенте
Функция ОпределитьЭлементUIAutomationЭлементаФормыVAПоЕгоИмени(PID, ИмяЭлемента, ТипЭлемента, ВсеПоля, ИмяЭлементаСТемжеРодителем, РодителиЭлементов)
	
	Если КонтекстСохраняемый.Свойство("ФормаVAВРежимеОбучения") Тогда
		ИсточникДанных = КонтекстСохраняемый.ФормаVAВРежимеОбучения;
	Иначе	
		ИсточникДанных = Ванесса;
	КонецЕсли;	 
	
	ЗаголовокЭлемента = ИсточникДанных.Элементы[ИмяЭлемента].Заголовок;
	Если ЗначениеЗаполнено(ЗаголовокЭлемента) Тогда
		ДанныеПолей = Ванесса.НайтиЭлементыПроцессаUIAutomation(Число(PID), ЗаголовокЭлемента);
	КонецЕсли;	
	
	Если (ДанныеПолей = Неопределено ИЛИ ДанныеПолей.Количество() > 1) И ЗначениеЗаполнено(ТипЭлемента) Тогда
		ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, ControlType", Число(PID), ТипЭлемента));
		ДанныеПолей = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементов));
		Если ДанныеПолей <> Неопределено И ДанныеПолей.Количество() > 1 Тогда
			Если ЗначениеЗаполнено(ИмяЭлементаСТемжеРодителем) Тогда
				НужныйРодитель = РодителиЭлементов[ИмяЭлементаСТемжеРодителем];
				
				Для Каждого ТекЭлем Из ДанныеПолей Цикл
					ТекРодитель = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ПолучитьРодителяЭлемента(ТекЭлем.Id));
					Если ТекРодитель.Id = НужныйРодитель.Id Тогда
						Возврат ТекЭлем;
					КонецЕсли;	 
				КонецЦикла;	 
				
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ДанныеПолей = Неопределено ИЛИ ДанныеПолей.Количество() > 1 Тогда
		Подсказка = ИсточникДанных.Элементы[ИмяЭлемента].Подсказка;
		Если ЗначениеЗаполнено(Подсказка) Тогда
			ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, LegacyIAccessibleHelp", Число(PID), Подсказка));
			ВсеПоля = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементов));
			Для Каждого ТекЭлем Из ВсеПоля Цикл
				Возврат ТекЭлем;
			КонецЦикла;	 
		КонецЕсли;	 
	Иначе
		Возврат ДанныеПолей[0];
	КонецЕсли;	 
	
КонецФункции	 

&НаКлиенте
//И я делаю подсветку элементов VA UI Automation
//@ЯДелаюПодсветкуЭлементовVAUIAutomation(ТабПарам)
Функция ЯДелаюПодсветкуЭлементовVAUIAutomation(Знач PID, Текст, ТабПарам) Экспорт
	PID = ПолучитьКорректныйPID(PID);
	
	ВсеПоля = Неопределено;
	
	РодителиЭлементов = Новый Соответствие;
	
	МассивЭлементов = Новый Массив;
	Сч = 0;
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		Сч = Сч + 1;
		Если Сч = 1 Тогда
			//В первой строке заголовок
			Продолжить;
		КонецЕсли;	 
		ИмяЭлемента = СтрокаТабПарам.Кол1;
		ТипЭлемента = СтрокаТабПарам.Кол2;
		ИмяЭлементаСТемжеРодителем = СтрокаТабПарам.Кол3;
		Элемент = ОпределитьЭлементUIAutomationЭлементаФормыVAПоЕгоИмени(PID, ИмяЭлемента, ТипЭлемента, ВсеПоля, ИмяЭлементаСТемжеРодителем, РодителиЭлементов);
		Если Элемент = Неопределено Тогда
			ВызватьИсключение "Не найден элемент " + ИмяЭлемента;
		КонецЕсли;	 
		МассивЭлементов.Добавить(Элемент);
		
		РодительЭлемента = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ПолучитьРодителяЭлемента(Элемент.Id));
		Если НРег(Элемент.Type) = НРег("Edit") И Ванесса.Версия8319ИлиВыше Тогда
			//В 8.3.19 для Edit создаётся ещё одна панель. Она содержит поле и кнопки очистить, выбрать и так далее. В 8.3.18 это одно поле.
			РодительЭлемента = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ПолучитьРодителяЭлемента(РодительЭлемента.Id));
		КонецЕсли;	
		РодителиЭлементов.Вставить(ИмяЭлемента, РодительЭлемента);
	КонецЦикла;	 
	
	Left = 1000000000000000;
	Top = 1000000000000000;
	Bottom = -1;
	Right = -1;
	ОпределитьКоординатыПоМассивуЭлементовUIAutomation(МассивЭлементов, Left, Top, Bottom, Right);
	
	ПараметрыОтрисовки = Новый Массив;
	ДанныеОтрисовки = Новый Структура;
	ДанныеОтрисовки.Вставить("Кол1", "text");
	ДанныеОтрисовки.Вставить("Кол2", Текст);
	ПараметрыОтрисовки.Добавить(ДанныеОтрисовки);
	НарисоватТеньПоКоординатам(Left, Top, Right, Bottom, ПараметрыОтрисовки);
	
КонецФункции

&НаКлиенте
//И я запоминаю ID элемента формы Vanessa Automation с именем "ПутьКПапкеСФичами" в переменную "ЗаголовокЭлемента"
//@ЯЗапоминаюIDЭлементаФормыVanessaAutomationСИменемВПеременную(Парам01,Парам02)
Функция ЯЗапоминаюIDЭлементаФормыVanessaAutomationСИменемВПеременную(ИмяЭлемента, ИмяПеременной) Экспорт
	PID = ПолучитьКорректныйPID("ЭтотСеанс");
	ТипЭлемента = Неопределено;
	ИмяЭлементаСТемжеРодителем = Неопределено;
	ВсеПоля = Неопределено;
	РодителиЭлементов = Новый Соответствие;
	Элемент = ОпределитьЭлементUIAutomationЭлементаФормыVAПоЕгоИмени(PID, ИмяЭлемента, ТипЭлемента, ВсеПоля, ИмяЭлементаСТемжеРодителем, РодителиЭлементов);
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, Элемент.Id);

КонецФункции

&НаКлиенте
//И я делаю клик в поле с ID "ID" UI Automation
//@ЯДелаюКликВПолеUIAutomation(Парам01)
Функция ЯДелаюКликВПолеUIAutomation(IDПоля) Экспорт
	ДанныеПоля = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ЭлементПоИдентификатору(IDПоля));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(ДанныеПоля);
	
	Left = 1000000000000000;
	Top = 1000000000000000;
	Bottom = -1;
	Right = -1;
	ОпределитьКоординатыПоМассивуЭлементовUIAutomation(МассивЭлементов, Left, Top, Bottom, Right);
	
	Ванесса.ВнешняяКомпонентаДляСкриншотов.УстановитьПозициюКурсора(Left + Цел((Right - Left)/2), Top + Цел((Bottom - Top)/2));
	Ванесса.ВнешняяКомпонентаДляСкриншотов.ЭмуляцияНажатияМыши(0);
	
КонецФункции

&НаКлиенте
Функция ЗначенияПоУмолчаниюДляПодсказкиБалун()
	Структура = Новый Структура;
	Структура.Вставить("color", 3289800);
	Структура.Вставить("background", 15793151);
	Структура.Вставить("fontColor", 0);
	Структура.Вставить("fontName", "Calibri");
	Структура.Вставить("fontSize", 12);
	Структура.Вставить("duration", 4000);
	Структура.Вставить("thickness", 4);
	Структура.Вставить("text", "Текст");
	Структура.Вставить("radius", 5);
	Возврат Структура;
КонецФункции	 

&НаКлиенте
//И я делаю подсказку балун у элемента "$IDЭлемента$" UI Automation
//@ЯДелаюПодсказкуБалунУЭлементаUIAutomation(Парам01,ТабПарам)
Функция ЯДелаюПодсказкуБалунУЭлементаUIAutomation(IDПоля, ТабПарам = Неопределено) Экспорт
	
	ПараметрыОтрисовки = ЗначенияПоУмолчаниюДляПодсказкиБалун();
	
	ДополнитьПараметрыОтрисовкиПереданныеПользователем(ПараметрыОтрисовки, ТабПарам);
	
	ДанныеПоля = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ЭлементПоИдентификатору(IDПоля));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(ДанныеПоля);
	
	Left = 1000000000000000;
	Top = 1000000000000000;
	Bottom = -1;
	Right = -1;
	ОпределитьКоординатыПоМассивуЭлементовUIAutomation(МассивЭлементов, Left, Top, Bottom, Right);
	
	Текст = ПараметрыОтрисовки.text;
	ПараметрыОтрисовки.Удалить("text");
	
	Ванесса.ЗапретитьВыполнениеШагов();
	ОписаниеОповещения = Новый ОписаниеОповещения("ПустоеОповещениеСПродолжениемВыполненияСценария", ЭтаФорма);
	Ванесса.ВнешняяКомпонентаДляСкриншотов.НачатьВызовПоказатьПодсказку(
		ОписаниеОповещения, Ванесса.ЗаписатьОбъектJSON(ПараметрыОтрисовки), 
		Left + Цел((Right - Left)/2) + ПараметрыОтрисовки.thickness, Top + Цел((Bottom - Top)/2) + ПараметрыОтрисовки.thickness, Текст);
	
КонецФункции

&НаКлиенте
//И я перемещаю мышку к каждой кнопке панели "$IDПанели$" Vanessa Automation
//@ЯПеремещаюМышкуККаждойКнопкеПанелиVanessaAutomation(Парам01)
Функция ЯПеремещаюМышкуККаждойКнопкеПанелиVanessaAutomation(IDРодителя) Экспорт
	ЭлементыРодителя = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ПолучитьЭлементы(IDРодителя));
	
	Массив = Новый Массив;
	
	Для Каждого Элем Из ЭлементыРодителя.Tree Цикл
		Если Элем.name = "Справка" Тогда
			Продолжить;
		ИначеЕсли Элем.name = "Еще" Тогда
			Продолжить;
		КонецЕсли;	
		
		Массив.Добавить(Элем);
		
	КонецЦикла;	 
	
	НадоПродолжить = Ложь;
	Для Каждого Элем Из Массив Цикл
		Если НадоПродолжить Тогда
			НадоПродолжить = Ложь;
			Продолжить;
		КонецЕсли;	 
		
		Ванесса.ВнешняяКомпонентаДляСкриншотов.ЭмуляцияДвиженияМыши(
			Элем.Size.Left + Цел((Элем.Size.Right - Элем.Size.Left)/2),
			Элем.Size.Top + Цел((Элем.Size.Bottom - Элем.Size.Top)/2), 50, 2);
		Ванесса.ВнешняяКомпонентаДляСкриншотов.sleep(250);
		
		НадоПродолжить = Истина;
	КонецЦикла;	 
	
КонецФункции

&НаКлиенте
//И я запоминаю элемент с типом "Тип" c родителем "$IDЭлемента$" в переменную "IDЭлемента" Vanessa Automation
//@ЯЗапоминаюЭлементСТипомCРодителемВПеременнуюVanessaAutomation(Парам01,Парам02,Парам03)
Функция ЯЗапоминаюЭлементСТипомCРодителемВПеременнуюVanessaAutomation(Тип, IDРодителя, ИмяПеременной) Экспорт
	Нашли = Ложь;
	
	ЭлементыРодителя = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ПолучитьЭлементы(IDРодителя));
	Для Каждого Элем Из ЭлементыРодителя.Tree Цикл
		Если НРег(Элем.Type) = НРег(Тип) Тогда
			Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, Элем.Id);
			Нашли = Истина;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если НЕ Нашли Тогда
		ВызватьИсключение Ванесса._СтрШаблон("Не найден элемент с типом <%1>.", Тип);
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И я запоминаю родителя элемента с именем "Имя" в переменную "ИмяПеременной" Vanessa Automation
//@ЯЗапоминаюРодителяЭлементаСИменемВПеременнуюVanessaAutomation(Парам01,Парам02)
Функция ЯЗапоминаюРодителяЭлементаСИменемВПеременнуюVanessaAutomation(ИмяЭлемента, ИмяПеременной) Экспорт
	PID = ПолучитьКорректныйPID("ЭтотСеанс");
	ТипЭлемента = Неопределено;
	ИмяЭлементаСТемжеРодителем = Неопределено;
	ВсеПоля = Неопределено;
	РодителиЭлементов = Новый Соответствие;
	Элемент = ОпределитьЭлементUIAutomationЭлементаФормыVAПоЕгоИмени(PID, ИмяЭлемента, ТипЭлемента, ВсеПоля, ИмяЭлементаСТемжеРодителем, РодителиЭлементов);
	РодительЭлемента = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ПолучитьРодителяЭлемента(Элемент.Id));
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, РодительЭлемента.Id);
КонецФункции

&НаКлиенте
//И я запоминаю элемент UI Automation в переменную
//@ЯЗапоминаюЭлементUIAutomationВПеременную(ТабПарам)
Функция ЯЗапоминаюЭлементUIAutomationВПеременную(ИмяПеременной, ТабПарам) Экспорт
	
	Структура = Новый Структура;
	ОтборПоРодителю = Неопределено;
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		Имя = СтрокаТабПарам.Кол1;
		Значение = СтрокаТабПарам.Кол2;
		
		Если Имя = "Имя" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Структура.Вставить(Имя, Значение);
		
		Если НРег(Имя) = НРег("ProcessId") Тогда
			PID = ПолучитьКорректныйPID(Значение);
			Структура.Вставить(Имя, PID);
		ИначеЕсли НРег(Имя) = НРег("Parent") Тогда
			ОтборПоРодителю = Значение;
		КонецЕсли;	   
		
	КонецЦикла;	
	
	ДанныеПолей = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(Ванесса.ЗаписатьОбъектJSON(Структура)));
	Если ДанныеПолей = Неопределено Тогда
		ВызватьИсключение Ванесса.Локализовать("Не получилось найти элемент UI Automation по переданным параметрам.");
	КонецЕсли;	 
	
	Если ДанныеПолей.Количество() > 1 И ОтборПоРодителю <> Неопределено Тогда
		ДанныеПолей = Новый Массив;
		Для Каждого Элем Из ДанныеПолей Цикл
			РодительЭлемента = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.ПолучитьРодителяЭлемента(Элем.Id));
			Если РодительЭлемента.Id <> ОтборПоРодителю Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеПолей.Добавить(Элем);
			
		КонецЦикла;	 
	КонецЕсли;	 
	
	Если ДанныеПолей.Количество() = 0 Тогда
		ВызватьИсключение Ванесса.Локализовать("Не получилось найти элемент UI Automation по переданным параметрам.");
	КонецЕсли;	 
	
	Если ДанныеПолей.Количество() > 1 Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(Ванесса.Локализовать("По переданным параметрам было найдено <%1> элементов."), ДанныеПолей.Количество());
	КонецЕсли;	 
	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, ДанныеПолей[0].Id);
	
КонецФункции

&НаКлиенте
//И я делаю клик по элементу "ID" UI Automation
//@ЯДелаюКликПоЭлементуUIAutomation(Парам01)
Функция ЯДелаюКликПоЭлементуUIAutomation(ID) Экспорт
	ЯДелаюКликВПолеUIAutomation(ID);
КонецФункции


//ВремСтруктура = Новый Структура;
//ВремСтруктура.Вставить("ProcessId", ИдентификаторПроцесса);
//ВремСтруктура.Вставить("Parent", ИдентификаторРодителя);
//ВремСтруктура.Вставить("Name", ИмяЭлемента);
//ВремСтруктура.Вставить("ControlType", "Button");
//ВремСтруктура.Вставить("LegacyIAccessibleHelp", "Расширенная подсказка элемента");
//ВремСтруктура.Вставить("LegacyIAccessibleKeyboardShortcut", "F12");
//УсловиеОтбора = ЗаписатьСтрокуJSON(ВремСтруктура);
//ТекстJSON = ВнешняяКомпонента.НайтиЭлементы(УсловиеОтбора);



//std::map<std::string, int> properties = {
//  { std::string("Parent"), UIA_ParentPropertyId },
//  { std::string("RuntimeId"), UIA_RuntimeIdPropertyId },
//  { std::string("BoundingRectangle"), UIA_BoundingRectanglePropertyId },
//  { std::string("ProcessId"), UIA_ProcessIdPropertyId },
//  { std::string("ControlType"), UIA_ControlTypePropertyId },
//  { std::string("LocalizedControlType"), UIA_LocalizedControlTypePropertyId },
//  { std::string("Name"), UIA_NamePropertyId },
//  { std::string("AcceleratorKey"), UIA_AcceleratorKeyPropertyId },
//  { std::string("AccessKey"), UIA_AccessKeyPropertyId },
//  { std::string("HasKeyboardFocus"), UIA_HasKeyboardFocusPropertyId },
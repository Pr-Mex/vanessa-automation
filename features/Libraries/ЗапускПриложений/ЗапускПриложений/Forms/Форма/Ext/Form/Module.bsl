
///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыполняюСкриптSikuliX(Парам01)","ЯВыполняюСкриптSikuliX","И я выполняю скрипт SikuliX ""ИмяСкрипта""","Выполняет скрипт SikuliX. Скрипт сначала ищется в кталоге проекта, за тем в каталогах библиотек, затем в стандартных скриптах Vanessa-Automation.","Прочее.SikuliX");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрываюКартинкуВОсновномРедакторе(Парам01)","ЯОткрываюКартинкуВОсновномРедакторе","Дано я открываю картинку в основном редакторе ""ИмяКартинки""","Вызывает команду системы. Будет открыто приложение, которое ассоциировано для данного типа файлов.","Прочее.Открыть картинку");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуКогдаЗавершитсяПроцессСИДПроцессаВТечениеСекунд(Парам01, Парам02)","ЯЖдуКогдаЗавершитсяПроцессСИДПроцессаВТечениеСекунд","И я жду когда завершится процесс с ИД процесса ""PID"" в течение 10 секунд","Ожидает завершение процесса по его PID.","Прочее.Ожидание завершения процесса");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
Функция ИскатьСкриптSikuliXВКаталоге(КаталогДляПоиска,ИмяФайла)
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;
	Ванесса.НайтиФайлыКомандаСистемы(КаталогДляПоиска,СписокКаталогов,СписокФайлов,Истина);
	Для Каждого Элем Из СписокКаталогов Цикл
		Если НРег(Элем.Значение.Имя) = НРег(ИмяФайла) Тогда
			Возврат Элем.Значение.ПолноеИмя;
		КонецЕсли;	 
	КонецЦикла;	 
КонецФункции	 

&НаКлиенте
Функция ПолныйПутьКСкрипту(Знач ИмяСкрипта)
	Если Прав(ИмяСкрипта,7) <> ".sikuli" Тогда
		ИмяСкрипта = ИмяСкрипта + ".sikuli";
	КонецЕсли;	 
	
	//проверка, что передали полный путь
	Если Ванесса.ФайлСуществуетКомандаСистемы(ИмяСкрипта) Тогда
		Возврат ИмяСкрипта;
	КонецЕсли;	 
	
	//Поиск в каталоге проекта
	ПолныйПуть = ИскатьСкриптSikuliXВКаталоге(Ванесса.Объект.КаталогПроекта,ИмяСкрипта);
	Если ПолныйПуть <> Неопределено Тогда
		Возврат ПолныйПуть; 
	КонецЕсли;	 
	
	//Поиск в каталогах бибилотек
	Для Каждого Элем Из Ванесса.Объект.КаталогиБиблиотек Цикл
		ПутьДляПоиска = Элем.Значение;
		ПолныйПуть = ИскатьСкриптSikuliXВКаталоге(ПутьДляПоиска,ИмяСкрипта);
		Если ПолныйПуть <> Неопределено Тогда
			Возврат ПолныйПуть; 
		КонецЕсли;	 
	КонецЦикла;	 
	
	ПутьДляПоиска = Ванесса.ДополнитьСлешВПуть(Ванесса.Объект.КаталогИнструментов) + "tools\Sikuli";
	ПолныйПуть = ИскатьСкриптSikuliXВКаталоге(ПутьДляПоиска,ИмяСкрипта);
	Если ПолныйПуть <> Неопределено Тогда
		Возврат ПолныйПуть; 
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
//И я выполняю скрипт SikuliX "ИмяСкрипта"
//@ЯВыполняюСкриптSikuliX(Парам01)
Процедура ЯВыполняюСкриптSikuliX(ИмяСкрипта) Экспорт
	ПолныйПутьКСкрипту = ПолныйПутьКСкрипту(ИмяСкрипта);
	
	Если ПолныйПутьКСкрипту = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не найден SikuliX скрипт <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяСкрипта);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ОписаниеОшибки = "";
	Результат = Ванесса.ВыполнитьSikuliСкрипт(ПолныйПутьКСкрипту,-1,Истина,ОписаниеОшибки);
	Если Результат <> 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не удалось выполнить SukuliX скрипт <%1>.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяСкрипта);
		ТекстСообщения = ТекстСообщения + Символы.ПС + ОписаниеОшибки;
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 

	
КонецПроцедуры

&НаКлиенте
//Дано я открываю картинку в основном редакторе "ОтчетAllure2"
//@ЯОткрываюКартинкуВОсновномРедакторе(Парам01)
Процедура ЯОткрываюКартинкуВОсновномРедакторе(ИмяКартинки) Экспорт
	Файл = Ванесса.ПолучитьФайлКартинки(ИмяКартинки);
	ПутьКФайлу = СтрЗаменить(Файл.ПолноеИмя,"\","/");
	Ванесса.ВыполнитьКомандуОСБезПоказаЧерногоОкна(ПутьКФайлу,0);
КонецПроцедуры

&НаКлиенте
//И я жду когда завершится процесс с ИД процесса "PID" в течение
//@ЯЖдуКогдаЗавершитсяПроцессСИДПроцесса(Парам01, Парам02)
Процедура ЯЖдуКогдаЗавершитсяПроцессСИДПроцессаВТечениеСекунд(Парам01, Парам02) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	
	PID = XMLСтрока(Ванесса.ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(Парам01));
	Секунд = Парам02;
	
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ДатаНачалаВыполненияОбработчикаОжидания = ТекущаяДата();
	
	ПодключитьОбработчикОжидания("ЯЖдуКогдаЗавершитсяПроцессСИДПроцессаТик", 1, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЯЖдуКогдаЗавершитсяПроцессСИДПроцессаТик()
	
	ИмяОбработчика = "ЯЖдуКогдаЗавершитсяПроцессСИДПроцессаТик";
	
	ИмяФайлаПотокаВывода = ПолучитьИмяВременногоФайла("stdout.tmp");
	Команда = СтрШаблон("TaskList /FI ""PID EQ %1"" > %2", PID, ИмяФайлаПотокаВывода);
	Ванесса.ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
	
	ФайлИнфо = Новый Файл(ИмяФайлаПотокаВывода);
	Если ФайлИнфо.Существует() Тогда 
		
		ЧтениеПотокаОшибок = Новый ЧтениеТекста(ИмяФайлаПотокаВывода, КодировкаТекста.OEM);
		ПотокВывода = ЧтениеПотокаОшибок.Прочитать();
		ЧтениеПотокаОшибок.Закрыть();
		Ванесса.УдалитьФайлыКомандаСистемы(ИмяФайлаПотокаВывода);
		
		Если Не СтрНайти(ПотокВывода, PID) Тогда 
			ОтключитьОбработчикОжидания(ИмяОбработчика);
			Ванесса.ПродолжитьВыполнениеШагов();
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущаяДата() > (ДатаНачалаВыполненияОбработчикаОжидания + Секунд) Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.ПродолжитьВыполнениеШагов(
			Истина,
			СтрШаблон("Ожидали, что процесс с ИД <%1> будет завершен в течение <%2> секунд.",
				PID,
				Секунд
			)
		);
	КонецЕсли;
	
КонецПроцедуры

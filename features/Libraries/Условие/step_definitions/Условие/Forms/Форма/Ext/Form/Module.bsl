
///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"Тогда(Парам01)","Условие","Если 'Истина' тогда","Условие. Проверяет выражение встроенного языка. В шаг передаётся один строковый параметр. Если внутри вычисляемого выражения используются строки, их нужно обрамлять кавычками. Спецсимволы (кавычки, апострофы) нужно экранировать.","Встроенный язык","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОкнеПредупрежденияНетТекстаТогда(Парам01)","ВОкнеПредупрежденияНетТекстаТогда","Если в окне предупреждения нет текста ""Нужный текст"" тогда","Условие. Истинно, когда в окне предупреждения нет искомого текста.","UI.Всплывающие окна","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВызываюИсключение(Парам01)","ЯВызываюИсключение","Тогда я вызываю исключение ""Текст исключения""","Вызывает исключение с нужным текстом","Встроенный язык");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПоявилосьОкноСЗаголовкомТогда(Парам01)","ПоявилосьОкноСЗаголовкомТогда","Если появилось окно с заголовком ""Заголовок окна"" Тогда","Условие. Проверяет, что среди всех окон есть окно с нужным заголовком","UI.Окна","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТекущееОкноИмеетЗаголовокТогда(Парам01)","ТекущееОкноИмеетЗаголовокТогда","Если текущее окно имеет заголовок ""Заголовок окна"" Тогда","Условие. Проверяет, что в данный момент активным окном является окно с нужным заголовком","UI.Окна","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВерсияПлатформыТогда(Парам01,Парам02)","ВерсияПлатформыТогда","Если Версия платформы "">="" ""8.3.6"" Тогда","Условие. Проверяет версию платформы","Прочее.Версия платформы","Условие");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеИмеетЗначениеТогда(Парам01,Парам02)","ПолеИмеетЗначениеТогда","Если поле ""Заголовок поля"" имеет значение ""тест"" тогда","Условие. Проверяет значение поля.","UI.Формы.Поля.Проверка значения поля","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСИменемИмеетЗначениеТогда(Парам01,Парам02)","ПолеСИменемИмеетЗначениеТогда","Если поле с именем ""ИмяПоля"" имеет значение ""тест"" тогда","Условие. Проверяет значение поля.","UI.Формы.Поля.Проверка значения поля","Условие");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеИмеетЗначениеПоШаблонуТогда(Парам01,Парам02)","ПолеИмеетЗначениеПоШаблонуТогда","Если поле ""Заголовок поля"" имеет значение по шаблону ""тест"" тогда","Условие. Проверяет значение поля.","UI.Формы.Поля.Проверка значения поля","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСИменемИмеетЗначениеПоШаблонуТогда(Парам01,Парам02)","ПолеСИменемИмеетЗначениеПоШаблонуТогда","Если поле с именем ""ИмяПоля"" имеет значение по шаблону ""тест"" тогда","Условие. Проверяет значение поля.","UI.Формы.Поля.Проверка значения поля","Условие");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЕстьСтрокиТогда(Парам01,ТабПарам)","ВТаблицеЕстьСтрокиТогда","Если в таблице ""ИмяТаблицы"" есть строки Тогда" + Символы.ПС + Символы.Таб + "| 'Имя колонки' |" + Символы.ПС + Символы.Таб + "| 'Значение'               |","Условие. Истинно, если в таблице есть нужная строка/строки. Поиск строк производится через получение всех строк таблицы , а затем нужные строки будут искаться в полученных строках таблицы.","UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Условие","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЕстьСтрокаТогда(Парам01,ТабПарам)","ВТаблицеЕстьСтрокаТогда","Если в таблице ""ИмяТаблицы"" есть строка Тогда" + Символы.ПС + Символы.Таб + "| 'Имя колонки' |" + Символы.ПС + Символы.Таб + "| 'Значение'               |","Условие. Истинно, если в таблице есть нужная строка. Допускается передвать только одну строку для поиска. Шаг пытается сделать переход к строке и возвращает Истина если это получилось сделать.","UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Условие","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеНетСтрокиТогда(Парам01,ТабПарам)","ВТаблицеНетСтрокиТогда","Если в таблице ""ИмяТаблицы"" нет строки Тогда"    + Символы.ПС + Символы.Таб + "| 'Имя колонки' |" + Символы.ПС + Символы.Таб + "| 'Значение'               |","Условие. Истинно, если в таблице нет нужной строки. Шаг пытается сделать переход к строке и возвращает Ложь если это получилось сделать.","UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Условие","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеНетСтрокТогда(Парам01,ТабПарам)","ВТаблицеНетСтрокТогда","Если в таблице ""ИмяТаблицы"" нет строк Тогда"       + Символы.ПС + Символы.Таб + "| 'Имя колонки' |" + Символы.ПС + Символы.Таб + "| 'Значение'               |","Условие. Истинно, если в таблице нет нужных строк.","UI.Таблицы.Проверка значения таблицы.Таблица Gherkin.Условие","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементНеПрисутствуетНаФормеТогда(Парам01)","ЭлементНеПрисутствуетНаФормеТогда","Если элемент ""ИмяЭлементаФормы"" не присутствует на форме Тогда","Условие. Проверяет видимость элемента на форме. Поиск поля производится по имени.","UI.Формы.Поля.Проверка видимости","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементПрисутствуетНаФормеТогда(Парам01)","ЭлементПрисутствуетНаФормеТогда","Если элемент ""ИмяЭлементаФормы"" присутствует на форме Тогда","Условие. Проверяет видимость элемента на форме. Поиск поля производится по имени.","UI.Формы.Поля.Проверка видимости","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТекущееОкноОжидаемомуОкнуТогда(Парам01,Парам02)","ТекущееОкноОжидаемомуОкнуТогда","Если текущее окно ""не равно"" ожидаемому окну ""НужноеОкно"" Тогда","Условие. Проверяет что текущее окно равно/неравно нужному окну.","UI.Окна","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТекущемОкнеЕстьСообщенияПользователюТогда()","ВТекущемОкнеЕстьСообщенияПользователюТогда","Если в текущем окне есть сообщения пользователю Тогда","Условие. Проверяет, что в текущем окне есть сообщения пользователю.","UI.Сообщения пользователю.Условие","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ИмяТекущейФормыТогда(Парам01)","ИмяТекущейФормыТогда","Если имя текущей формы ""ИмяФормы"" Тогда","Условие. Проверяет имя текущей формы","UI.Формы.Имя формы","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПоявилосьОкноСЗаголовкомИзТаблицыТогда(ТабПарам)","ПоявилосьОкноСЗаголовкомИзТаблицыТогда","Если появилось окно с заголовком из таблицы  Тогда","Условие. Проверяет, что есть окно с заголовком из таблицы","UI.Окна","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭтоНачальнаяСтраницаТогда()","ЭтоНачальнаяСтраницаТогда","Если это начальная страница Тогда","Условие. Проверяет, то текущее окно это начальная страница","UI.Окна","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭтоНеНачальнаяСтраницаТогда()","ЭтоНеНачальнаяСтраницаТогда","Если это не начальная страница Тогда","Условие. Проверяет, то текущее окно это не начальная страница","UI.Окна","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПеременнаяИмеетЗначениеТогда(Парам01,Парам02)","ПеременнаяИмеетЗначениеТогда","Если переменная ""ИмяПеременной"" имеет значение ""ЗначениеПеременной"" Тогда","Условие. Проверяет значение переменной контекста","Контекст.Контекст.Прочитать значение","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВСообщенияхПользователюЕстьСтрокаТогда(Парам01)","ВСообщенияхПользователюЕстьСтрокаТогда","Если в сообщениях пользователю есть строка ""МояСтрока"" Тогда","Условие. Проверяет, что в сообщениях пользователю содержится нужная строка или подстрока.","UI.Сообщения пользователю.Условие","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеЕстьКолонкиТогда(Парам01,ТабПарам)","ВТаблицеЕстьКолонкиТогда","Если в таблице ""ИмяТаблицы"" есть колонки Тогда" + Символы.ПС + "	| 'Колонка1' |" + Символы.ПС + "	| 'Колонка2' |","Условие. Проверяет, есть ли в таблице указанные колоноки. Заголовки колонок надо передать в шаг в виде таблицы Gherkin.","UI.Таблицы.Проверка состава колонок","Условие");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементДоступенДляРедактированияТогда(Парам01)","ЭлементДоступенДляРедактированияТогда","Если элемент ""ИмяЭлементаФормы"" доступен для редактирования Тогда","Условие. Проверяет доступность элемента на форме. Поиск поля производится по имени.","UI.Формы.Поля.Проверка доступности","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементНеДоступенДляРедактированияТогда(Парам01)","ЭлементНеДоступенДляРедактированияТогда","Если элемент ""ИмяЭлементаФормы"" не доступен для редактирования Тогда","Условие. Проверяет доступность элемента на форме. Поиск поля производится по имени.","UI.Формы.Поля.Проверка доступности","Условие");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементДоступенТолькоДляПросмотраТогда(Парам01)","ЭлементДоступенТолькоДляПросмотраТогда","Если элемент ""ИмяЭлементаФормы"" доступен только для просмотра Тогда","Условие. Проверяет флаг ""Только просмотр"" у элемента формы. Поиск поля производится по имени.","UI.Формы.Поля.Только просмотр","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЭлементДоступенНеТолькоДляПросмотраТогда(Парам01)","ЭлементДоступенНеТолькоДляПросмотраТогда","Если элемент ""ИмяЭлементаФормы"" доступен не только для просмотра Тогда","Условие. Проверяет флаг ""Только просмотр"" у элемента формы. Поиск поля производится по имени.","UI.Формы.Поля.Только просмотр","Условие");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСталоРавноВТечениеСекундТогда(Парам01,Парам02,Парам03)","ПолеСталоРавноВТечениеСекундТогда","Если поле ""Заголовок поля"" стало равно ""ЗначениеПоля"" в течение 10 секунд Тогда","Условие. Проверяет значение поля формы в течение нужного числа секунд.","UI.Формы.Поля.Проверка значения поля","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПолеСИменемСталоРавноВТечениеСекундТогда(Парам01,Парам02,Парам03)","ПолеСИменемСталоРавноВТечениеСекундТогда","Если поле с именем ""ИмяПоля"" стало равно ""ЗначениеПоля"" в течение 10 секунд Тогда","Условие. Проверяет значение поля формы в течение нужного числа секунд. Поиск поля производится по имени.","UI.Формы.Поля.Проверка значения поля","Условие");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПоявилосьОкноСЗаголовкомВТечениеСекундТогда(Парам01,Парам02)","ПоявилосьОкноСЗаголовкомВТечениеСекундТогда","Если появилось окно с заголовком ""Заголовок окна"" в течение 10 секунд Тогда","Условие. Проверяет, что на экране появилось окно с нужным заголовком в течение нужного числа секунд","UI.Окна","Условие");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеИмеетЗначениеТогда(Парам01,Парам02,Парам03)","ВТаблицеПолеИмеетЗначениеТогда","Если в таблице ""ИмяТаблицы"" поле ""Заголовок поля"" имеет значение ""ЗначениеПоля"" тогда","Условие. Проверяет значение ячейки таблицы. Имя ячейки указывается как оно отображено в заголовке.","UI.Таблицы.Значение ячейки таблицы","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеСИменемИмеетЗначениеТогда(Парам01,Парам02,Парам03)","ВТаблицеПолеСИменемИмеетЗначениеТогда","Если в таблице ""ИмяТаблицы"" поле с именем ""ИмяПоля"" имеет значение ""ЗначениеПоля"" тогда","Условие. Проверяет значение ячейки таблицы. Имя ячейки указывается как оно задано в конфигураторе.","UI.Таблицы.Значение ячейки таблицы","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ВТаблицеПолеИмеетЗначениеПоШаблонуТогда(Парам01,Парам02,Парам03)", "ВТаблицеПолеИмеетЗначениеПоШаблонуТогда", "Если в таблице ""ИмяТаблицы"" поле ""Заголовок поля"" имеет значение по шаблону ""ШаблонЗначенияПоля"" тогда", "Условие. Проверяет значение ячейки таблицы по шаблону. Имя ячейки указывается как оно отображено в заголовке.", "UI.Таблицы.Значение ячейки таблицы", "Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ВТаблицеПолеСИменемИмеетЗначениеПоШаблонуТогда(Парам01,Парам02,Парам03)", "ВТаблицеПолеСИменемИмеетЗначениеПоШаблонуТогда", "Если в таблице ""ИмяТаблицы"" поле с именем ""ИмяПоля"" имеет значение по шаблону ""ШабонЗначенияПоля"" тогда", "Условие. Проверяет значение ячейки таблицы по шаблону. Имя ячейки указывается как оно задано в конфигураторе.", "UI.Таблицы.Значение ячейки таблицы", "Условие");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеЗаполненоТогда(Парам01,Парам02)","ВТаблицеПолеЗаполненоТогда","Если в таблице ""ИмяТаблицы"" поле ""Заголовок поля"" заполнено Тогда","Условие. Проверяет заполненность ячейки таблицы. Имя ячейки указывается как оно отображено в заголовке.","UI.Таблицы.Значение ячейки таблицы","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеНеЗаполненоТогда(Парам01,Парам02)","ВТаблицеПолеНеЗаполненоТогда","Если в таблице ""ИмяТаблицы"" поле ""Заголовок поля"" не заполнено Тогда","Условие. Проверяет незаполненность ячейки таблицы. Имя ячейки указывается как оно отображено в заголовке.","UI.Таблицы.Значение ячейки таблицы","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеСИменемЗаполненоТогда(Парам01,Парам02)","ВТаблицеПолеСИменемЗаполненоТогда","Если в таблице ""ИмяТаблицы"" поле с именем ""ИмяПоля"" заполнено Тогда","Условие. Проверяет заполненность ячейки таблицы. Имя ячейки указывается как оно задано в конфигураторе.","UI.Таблицы.Значение ячейки таблицы","Условие");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеПолеСИменемНеЗаполненоТогда(Парам01,Парам02)","ВТаблицеПолеСИменемНеЗаполненоТогда","Если в таблице ""ИмяТаблицы"" поле с именем ""ИмяПоля"" не заполнено Тогда","Условие. Проверяет незаполненность ячейки таблицы. Имя ячейки указывается как оно задано в конфигураторе.","UI.Таблицы.Значение ячейки таблицы","Условие");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УстановленРежимСовместимостиТогда(Парам01)","УстановленРежимСовместимостиТогда","Если установлен режим совместимости ""8.3.12"" Тогда","Условие. Проверяет, что установлен нужный режим совместимости в базе, в которой запущен TestManager.","Прочее.Проверка режима совестимости","Условие");
	
	
	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции


&НаКлиенте
Функция ДобавитьНулейСлева(Стр,КолНулей)
	Пока СтрДлина(Стр) < КолНулей Цикл
		Стр = "0" + Стр;
	КонецЦикла;	
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Процедура ПреобразоватьСтрокуВерсии(Стр)
	Массив = Ванесса.РазложитьСтрокуВМассивПодстрокКлиент(Стр, ".");
	Пока Массив.Количество() < 4 Цикл
		Массив.Добавить("0");
	КонецЦикла;	
	
	Для Ккк = 0 По Массив.Количество()-1 Цикл
		Массив[Ккк] = ДобавитьНулейСлева(Массив[Ккк],10);
	КонецЦикла;	
	
	
	Стр = "";
	Для Каждого Элем Из Массив Цикл
		Стр = Стр + Элем + ".";
	КонецЦикла;	
	
	//убрали лишнюю точку
	Стр = Лев(Стр,СтрДлина(Стр)-1);
КонецПроцедуры


///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Если "Истина" тогда
//@Тогда(Парам01)
Процедура Условие(Выражение,
                  ЧастьВыражения2 = Неопределено,
                  ЧастьВыражения3 = Неопределено,
                  ЧастьВыражения4 = Неопределено,
                  ЧастьВыражения5 = Неопределено,
                  ЧастьВыражения6 = Неопределено,
                  ЧастьВыражения7 = Неопределено) Экспорт
	
	Ванесса.СоединитьСтрокиЕслиЭтоВозможно(
		Выражение,
		ЧастьВыражения2,
		ЧастьВыражения3,
		ЧастьВыражения4,
		ЧастьВыражения5,
		ЧастьВыражения6,
		ЧастьВыражения7
	);
	
	Попытка
		Результат = Ванесса.ВычислитьВнутреннееВыражение(Выражение);
	Исключение
		Результат = Выражение;
	КонецПопытки;
	
	Если ТипЗнч(Результат) <> Тип("Булево") Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог вычислить выражение: %1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Выражение);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если Результат Тогда
		Ванесса.УстановитьРезультатУсловия(Истина);
	Иначе	
		Ванесса.УстановитьРезультатУсловия(Ложь);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//Если в окне предупреждения нет текста "Нужный текст" тогда
//@ВОкнеПредупрежденияНетТекстаТогда(Парам01)
Процедура ВОкнеПредупрежденияНетТекстаТогда(ИскомыйТекст) Экспорт
	ОкноПредупреждения = Ванесса.НайтиОкноМодальногоДиалога();
	Если ОкноПредупреждения = Неопределено Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не найдено окно предупреждения.");
	КонецЕсли;	 
	
	ТекстПредупреждения = Ванесса.ПолучитьТекстОкнаПредупреждения(ОкноПредупреждения);
	
	
	Если Найти(НРег(ТекстПредупреждения),НРег(ИскомыйТекст)) = 0 Тогда
		Ванесса.УстановитьРезультатУсловия(Истина);
	Иначе	
		Ванесса.УстановитьРезультатУсловия(Ложь);
	КонецЕсли;	 
	
	
КонецПроцедуры


&НаКлиенте
//Тогда я вызываю исключение "Текст исключения"
//@ЯВызываюИсключение(Парам01)
Процедура ЯВызываюИсключение(Текст) Экспорт
	Результат = Ванесса.ПолучитьСтрокуВычисливВнутренниеВыражения(Текст);	
	ВызватьИсключение Результат;
КонецПроцедуры

&НаКлиенте
//Если появилось окно с заголовком "ИмяОкна" Тогда
//@ПоявилосьОкноСЗаголовкомТогда(Парам01)
Процедура ПоявилосьОкноСЗаголовкомТогда(ЗаголовокОкна,ЧастьИмени2 = Неопределено
	                           ,ЧастьИмени3 = Неопределено
	                           ,ЧастьИмени4 = Неопределено
	                           ,ЧастьИмени5 = Неопределено
	                           ,ЧастьИмени6 = Неопределено
	                           ,ЧастьИмени7 = Неопределено) Экспорт
							   
	Ванесса.СоединитьСтрокиЕслиЭтоВозможно(ЗаголовокОкна,ЧастьИмени2,
	                                       ЧастьИмени3,
	                                       ЧастьИмени4,
	                                       ЧастьИмени5,
	                                       ЧастьИмени6,
	                                       ЧастьИмени7);							   
							   
							   
	АктивноеОкно = Ванесса.НайтиОкноTestClientПоЗаголовку(ЗаголовокОкна);
	
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	Если АктивноеОкно = Неопределено Тогда
		Ванесса.УстановитьРезультатУсловия(Ложь);
	Иначе
		Ванесса.УстановитьРезультатУсловия(Истина);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//Если текущее окно имеет заголовок "ИмяОкна" Тогда
//@ТекущееОкноИмеетЗаголовокТогда(Парам01)
Процедура ТекущееОкноИмеетЗаголовокТогда(ЗаголовокОкна,ЧастьИмени2 = Неопределено
	                           ,ЧастьИмени3 = Неопределено
	                           ,ЧастьИмени4 = Неопределено
	                           ,ЧастьИмени5 = Неопределено
	                           ,ЧастьИмени6 = Неопределено
	                           ,ЧастьИмени7 = Неопределено) Экспорт
							   
	Ванесса.СоединитьСтрокиЕслиЭтоВозможно(ЗаголовокОкна,ЧастьИмени2,
	                                       ЧастьИмени3,
	                                       ЧастьИмени4,
	                                       ЧастьИмени5,
	                                       ЧастьИмени6,
	                                       ЧастьИмени7);							   
							   
							   
	НужноеОкно  = Ванесса.НайтиОкноTestClientПоЗаголовку(ЗаголовокОкна);
	ТекущееОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	Если НужноеОкно = ТекущееОкно Тогда
		Ванесса.УстановитьРезультатУсловия(Истина);
	Иначе
		Ванесса.УстановитьРезультатУсловия(Ложь);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//Если Версия платформы ">=" "8.3.6" Тогда
//@ВерсияПлатформыТогда(Парам01,Парам02)
Процедура ВерсияПлатформыТогда(Знач ВидСравнения,Знач НужнаяВерсия) Экспорт
	ВидСравнения = Ванесса.ПолучитьОператорПоТексту(ВидСравнения);
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ТекущаяВерсия       = СистемнаяИнформация.ВерсияПриложения;
	
	ПреобразоватьСтрокуВерсии(ТекущаяВерсия);
	ПреобразоватьСтрокуВерсии(НужнаяВерсия);
	
	//Сообщить("ТекущаяВерсия="+ТекущаяВерсия);
	//Сообщить("НужнаяВерсия= "+НужнаяВерсия);
	
	
	ЗначениеСравнения = Неопределено;
	Выражение = "ЗначениеСравнения = (ТекущаяВерсия " + ВидСравнения + " НужнаяВерсия)";
	Выполнить(Выражение);
	Ванесса.УстановитьРезультатУсловия(ЗначениеСравнения);
КонецПроцедуры

&НаКлиенте
//Если поле "РеквизитСтрока" имеет значение "тест" тогда
//@ПолеИмеетЗначениеТогда(Парам01,Парам02)
Процедура ПолеИмеетЗначениеТогда(ИмяЭлемента,НужноеЗначение,ИскатьПоИмени = Ложь) Экспорт
	Значение = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени);
	Если Значение = НужноеЗначение Тогда
		Ванесса.УстановитьРезультатУсловия(Истина);
	Иначе	
		Ванесса.УстановитьРезультатУсловия(Ложь);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//Если поле с именем "РеквизитСтрока" имеет значение "тест" тогда
//@ПолеСИменемИмеетЗначениеТогда(Парам01,Парам02)
Процедура ПолеСИменемИмеетЗначениеТогда(ИмяЭлемента,НужноеЗначение) Экспорт
	ПолеИмеетЗначениеТогда(ИмяЭлемента,НужноеЗначение,Истина);
КонецПроцедуры

&НаКлиенте
//Если поле "РеквизитСтрока" имеет значение по шаблону "тест" тогда
//@ПолеИмеетЗначениеПоШаблонуТогда(Парам01,Парам02)
Процедура ПолеИмеетЗначениеПоШаблонуТогда(ИмяЭлемента,НужноеЗначение,ИскатьПоИмени = Ложь) Экспорт
	Значение = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени);
	РезультатУсловия = Ванесса.СтрокаСоответствуетШаблону(Значение, НужноеЗначение);	
	Если РезультатУсловия Тогда
		Ванесса.УстановитьРезультатУсловия(Истина);
	Иначе	
		Ванесса.УстановитьРезультатУсловия(Ложь);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//Если поле с именем "РеквизитСтрока" имеет значение по шаблону "тест" тогда
//@ПолеСИменемИмеетЗначениеТогда(Парам01,Парам02)
Процедура ПолеСИменемИмеетЗначениеПоШаблонуТогда(ИмяЭлемента,НужноеЗначение) Экспорт
	ПолеИмеетЗначениеПоШаблонуТогда(ИмяЭлемента,НужноеЗначение,Истина);
КонецПроцедуры


&НаКлиенте
//Если в таблице "ТабличнаяЧасть1" есть строки Тогда
//@ВТаблицеЕстьСтрокиТогда(Парам01,ТабПарам)
Процедура ВТаблицеЕстьСтрокиТогда(ИмяТЧ,ТабПарам) Экспорт
	ТЧ         = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	ЗначениеТЧ = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ);
	
	Если ТипЗнч(ЗначениеТЧ) = Тип("Массив") Или ТипЗнч(ЗначениеТЧ) = Тип("ФиксированныйМассив") Тогда
		Если ЗначениеТЧ.Количество() = 0 Тогда
			//значит таблица пустая и строки точно нет
			Ванесса.УстановитьРезультатУсловия(Ложь);
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	СтрокаОшибки = "";
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекстСообщенийПользователю",Ванесса.ДанныеПереводаСообщенийПользователю());
	СтрокаНайдена = Ванесса.СтрокиОжидаемойТаблицыСодержатсяВТаблицеTestclient(ТабПарам,ЗначениеТЧ,СтрокаОшибки,ДопПараметры);
	
	Ванесса.УстановитьРезультатУсловия(СтрокаНайдена);
КонецПроцедуры

&НаКлиенте
//Если в таблице "ТабличнаяЧасть1" нет строк Тогда
//@ВТаблицеНетСтрокТогда(Парам01,ТабПарам)
Процедура ВТаблицеНетСтрокТогда(ИмяТЧ,ТабПарам) Экспорт
	ТЧ         = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	ЗначениеТЧ = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ);
	
	Если ТипЗнч(ЗначениеТЧ) = Тип("Массив") Или ТипЗнч(ЗначениеТЧ) = Тип("ФиксированныйМассив") Тогда
		Если ЗначениеТЧ.Количество() = 0 Тогда
			//значит таблица пустая и строки точно нет
			Ванесса.УстановитьРезультатУсловия(Истина);
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	СтрокаОшибки = "";
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекстСообщенийПользователю",Ванесса.ДанныеПереводаСообщенийПользователю());
	СтрокаНайдена = НЕ Ванесса.СтрокиОжидаемойТаблицыСодержатсяВТаблицеTestclient(ТабПарам,ЗначениеТЧ,СтрокаОшибки,ДопПараметры);
	
	Ванесса.УстановитьРезультатУсловия(СтрокаНайдена);
КонецПроцедуры

&НаКлиенте
//Если в таблице "ТабличнаяЧасть1" есть строка Тогда
//@ВТаблицеЕстьСтрокаТогда(Парам01,ТабПарам)
Процедура ВТаблицеЕстьСтрокаТогда(ИмяТЧ,ТабПарам) Экспорт
	Если ТабПарам.Количество() <> 2 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Шаг принимает на вход только таблицу Gherkin, в которой две строки. А было передано %1 строк.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТабПарам.Количество());
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Таблица        = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	ОписаниеСтроки = Ванесса.ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам,ИмяТЧ);
	
	ОшибкаПереходВниз  = "";
	ОшибкаПереходВверх = "";
	ПолучилосьПерейти = Ванесса.СделатьПереход(Таблица,ОписаниеСтроки,ОшибкаПереходВниз,ОшибкаПереходВверх);
	
	Ванесса.УстановитьРезультатУсловия(ПолучилосьПерейти);
КонецПроцедуры

&НаКлиенте
//Если в таблице "ТабличнаяЧасть1" нет строки Тогда
//@ВТаблицеНетСтрокиТогда(Парам01,ТабПарам)
Процедура ВТаблицеНетСтрокиТогда(ИмяТЧ,ТабПарам) Экспорт
	Если ТабПарам.Количество() <> 2 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Шаг принимает на вход только таблицу Gherkin, в которой две строки. А было передано %1 строк.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТабПарам.Количество());
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Таблица        = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	ОписаниеСтроки = Ванесса.ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам,ИмяТЧ);
	
	ОшибкаПереходВниз  = "";
	ОшибкаПереходВверх = "";
	ПолучилосьПерейти = Ванесса.СделатьПереход(Таблица,ОписаниеСтроки,ОшибкаПереходВниз,ОшибкаПереходВверх);
	
	Ванесса.УстановитьРезультатУсловия(НЕ ПолучилосьПерейти);
КонецПроцедуры

&НаКлиенте
//Если элемент "СтраницаТекущаяПечатнаяФорма" не присутствует на форме Тогда
//@ЭлементНеПрисутствуетНаФормеТогда(Парам01)
Процедура ЭлементНеПрисутствуетНаФормеТогда(ИмяПоля) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущаяФормаЭлемента",Неопределено);
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоля,Истина,Ложь,,ДопПараметры);
	
	Если ЭлементФормы = Неопределено Тогда
		//Значит поля нет вообще.
		Ванесса.УстановитьРезультатУсловия(Истина);
		Возврат;
	КонецЕсли;
	
	ТекущаяВидимость = ЭлементФормы.ТекущаяВидимость();
	Если ТекущаяВидимость Тогда
		//проверим также видимость групп, т.к. у них видимость может отличаться от видимости элемента
		Если ДопПараметры.ТекущаяФормаЭлемента <> Неопределено Тогда
			ТекущаяВидимость = Ванесса.ВидимостьЭлементаСУчетомРодителя(ДопПараметры.ТекущаяФормаЭлемента,ЭлементФормы,ТекущаяВидимость);
		ИначеЕсли Контекст.АктивноеОкно <> Неопределено Тогда
			ТекущаяВидимость = Ванесса.ВидимостьЭлементаСУчетомРодителя(Контекст.АктивноеОкно,ЭлементФормы,ТекущаяВидимость);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Ванесса.УстановитьРезультатУсловия(НЕ ТекущаяВидимость);
КонецПроцедуры

&НаКлиенте
//Если элемент "СтраницаТекущаяПечатнаяФорма" присутствует на форме Тогда
//@ЭлементПрисутствуетНаФормеТогда(Парам01)
Процедура ЭлементПрисутствуетНаФормеТогда(ИмяПоля) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущаяФормаЭлемента",Неопределено);
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоля,Истина,Ложь,,ДопПараметры);
	
	Если ЭлементФормы = Неопределено Тогда
		//Значит поля нет вообще.
		Ванесса.УстановитьРезультатУсловия(Ложь);
		Возврат;
	КонецЕсли;	 
	
	ТекущаяВидимость = ЭлементФормы.ТекущаяВидимость();
	Если ТекущаяВидимость Тогда
		//проверим также видимость групп, т.к. у них видимость может отличаться от видимости элемента
		Если ДопПараметры.ТекущаяФормаЭлемента <> Неопределено Тогда
			ТекущаяВидимость = Ванесса.ВидимостьЭлементаСУчетомРодителя(ДопПараметры.ТекущаяФормаЭлемента,ЭлементФормы,ТекущаяВидимость);
		ИначеЕсли Контекст.АктивноеОкно <> Неопределено Тогда
			ТекущаяВидимость = Ванесса.ВидимостьЭлементаСУчетомРодителя(Контекст.АктивноеОкно,ЭлементФормы,ТекущаяВидимость);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Ванесса.УстановитьРезультатУсловия(ТекущаяВидимость);
КонецПроцедуры

&НаКлиенте
//Если текущее окно "не равно" ожидаемому окну "НужноеОкно" Тогда
//@ТекущееОкноОжидаемомуОкнуТогда(Парам01,Парам02)
Процедура ТекущееОкноОжидаемомуОкнуТогда(Знач ВидСравнения,Знач ИмяОкна) Экспорт
	ВидСравнения = Ванесса.ПолучитьОператорПоТексту(ВидСравнения);
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	Попытка
		//поддержка предыдущего поведения.
		
		Если Найти(ИмяОкна,"*") > 0 Тогда
			НужноеЗначениеЗаголовка = Неопределено;
		ИначеЕсли Контекст.Свойство(ИмяОкна) Тогда
			НужноеЗначениеЗаголовка = Контекст[ИмяОкна];
		Иначе	
			//ИмяОкна = Ванесса.ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(ИмяОкна);
			НужноеЗначениеЗаголовка = ИмяОкна;
		КонецЕсли;	 
	Исключение
		//ИмяОкна = Ванесса.ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(ИмяОкна);
		НужноеЗначениеЗаголовка = ИмяОкна;
	КонецПопытки;
	
	Если НужноеЗначениеЗаголовка = Неопределено Тогда
		Если ВидСравнения = "=" Тогда
			Ванесса.УстановитьРезультатУсловия(Ванесса.СтрокаСоответствуетШаблону(АктивноеОкно.Заголовок,ИмяОкна));
		Иначе	
			Ванесса.УстановитьРезультатУсловия(НЕ Ванесса.СтрокаСоответствуетШаблону(АктивноеОкно.Заголовок,ИмяОкна));
		КонецЕсли;	 
	Иначе	
		ЗначениеСравнения = Неопределено;
		Выражение = "ЗначениеСравнения = (АктивноеОкно.Заголовок " + ВидСравнения + " НужноеЗначениеЗаголовка)";
		Выполнить(Выражение);
		Ванесса.УстановитьРезультатУсловия(ЗначениеСравнения);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//Если в текущем окне есть сообщения пользователю Тогда
//@ВТекущемОкнеЕстьСообщенияПользователюТогда()
Процедура ВТекущемОкнеЕстьСообщенияПользователюТогда() Экспорт
	АктивноеОкно    = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	Попытка
		МассивСообщений = АктивноеОкно.ПолучитьТекстыСообщенийПользователю();
	Исключение
		Ванесса.УстановитьРезультатУсловия(Ложь);
		Возврат;
	КонецПопытки;
	
	Если МассивСообщений.Количество() > 0 Тогда
		Ванесса.УстановитьРезультатУсловия(Истина);
	Иначе
		Ванесса.УстановитьРезультатУсловия(Ложь);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
//Если имя текущей формы "ПечатьДокументов" Тогда
//@ИмяТекущейФормыТогда(Парам01)
Процедура ИмяТекущейФормыТогда(ИмяФормы) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	ТекФорма     = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
	
	Если ТекФорма.ИмяФормы = ИмяФормы Тогда
		Ванесса.УстановитьРезультатУсловия(Истина);
	Иначе	
		Ванесса.УстановитьРезультатУсловия(Ложь);
	КонецЕсли;	 
КонецПроцедуры


&НаКлиенте
//Если появилось окно с заголовком из таблицы  Тогда
//@ПоявилосьОкноСЗаголовкомИзТаблицыТогда(ТабПарам)
Процедура ПоявилосьОкноСЗаголовкомИзТаблицыТогда(ТабПарам) Экспорт
	ВсеОкна = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	МассивЗаголовков = Новый Массив;
	
	Для Каждого ТекОкно Из ВсеОкна Цикл
		МассивЗаголовков.Добавить(НРег(ТекОкно.Заголовок));
	КонецЦикла;	
	
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		СтрокаПоиска = НРег(СтрокаТабПарам.Кол1);
		Для Каждого ЗаголовокОкна Из МассивЗаголовков Цикл
			Если Найти(ЗаголовокОкна,СтрокаПоиска) > 0 Тогда
				Ванесса.УстановитьРезультатУсловия(Истина);
				Возврат;
			КонецЕсли;	 
		КонецЦикла;	
	КонецЦикла;	
	
	Ванесса.УстановитьРезультатУсловия(Ложь);
КонецПроцедуры

&НаКлиенте
//Если это не начальная страница Тогда
//@ЭтоНеНачальнаяСтраницаТогда()
Процедура ЭтоНеНачальнаяСтраницаТогда() Экспорт
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	Если АктивноеОкно.НачальнаяСтраница Тогда
		Ванесса.УстановитьРезультатУсловия(Ложь);
	Иначе	
		Ванесса.УстановитьРезультатУсловия(Истина);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
//Если это начальная страница Тогда
//@ЭтоНачальнаяСтраницаТогда()
Процедура ЭтоНачальнаяСтраницаТогда() Экспорт
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	Если НЕ АктивноеОкно.НачальнаяСтраница Тогда
		Ванесса.УстановитьРезультатУсловия(Ложь);
	Иначе	
		Ванесса.УстановитьРезультатУсловия(Истина);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
//Если переменная "ЗначениеВариантЗаполненияСостава" имеет значение "Отбор" Тогда
//@ПеременнаяИмеетЗначениеТогда(Парам01,Парам02)
Процедура ПеременнаяИмеетЗначениеТогда(ИмяПеременной,Значение) Экспорт
	ТекЗначение = Ванесса.ПолучитьЗначениеПеременнойИзКонтекста(ИмяПеременной);
	Ванесса.УстановитьРезультатУсловия(ТекЗначение = Значение);
КонецПроцедуры

&НаКлиенте
//Если в сообщениях пользователю есть строка "МояСтрока" Тогда
//@ВСообщенияхПользователюЕстьСтрокаТогда(Парам01)
Процедура ВСообщенияхПользователюЕстьСтрокаТогда(Стр) Экспорт
	АктивноеОкно    = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	Попытка
		МассивСообщений = АктивноеОкно.ПолучитьТекстыСообщенийПользователю();
	Исключение
		Ванесса.УстановитьРезультатУсловия(Ложь);
		Возврат;
	КонецПопытки;
	
	Если МассивСообщений = Неопределено Тогда
		Ванесса.УстановитьРезультатУсловия(Ложь);
		Возврат;
	КонецЕсли;	 
	
	Нашли = Ложь;
	Для Каждого Сообщение Из МассивСообщений Цикл
		Если Найти(НРег(Сообщение),НРег(Стр)) > 0 Тогда
			Нашли = Истина;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Ванесса.УстановитьРезультатУсловия(Нашли);
КонецПроцедуры

&НаКлиенте
//Если в таблице "Результат" есть колонки Тогда
//@ВТаблицеЕстьКолонкиТогда(Парам01,ТабПарам)
Процедура ВТаблицеЕстьКолонкиТогда(ИмяТЧ,ТабПарам) Экспорт
	ТЧ         = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	ЗначениеТЧ = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ);
	
	Если ЗначениеТЧ = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог получить состяние таблицы <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Если ЗначениеТЧ.Количество() = 0 Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Нельзя получить состав колонок для пустой таблицы.");
	КонецЕсли;	 
	
	СтрокаСКолонками = ЗначениеТЧ[0];
	
	//Ванесса.ПосмотретьЗначение(СтрокаСКолонками);
	
	НашлиВсеКолонки = Истина;
	
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		ИмяНужнойКолонки = СтрокаТабПарам.Кол1;
		ЗначениеВСоответствии = СтрокаСКолонками[ИмяНужнойКолонки];
		Если ЗначениеВСоответствии = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не нашел колонку: %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяНужнойКолонки);
			Сообщить(Ванесса.ПолучитьТекстСообщенияПользователю(ТекстСообщения));
			НашлиВсеКолонки = Ложь;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Ванесса.УстановитьРезультатУсловия(НашлиВсеКолонки);
	
КонецПроцедуры

&НаКлиенте
//Если элемент "ИмяЭлементаФормы" доступен для редактирования Тогда
//@ЭлементДоступенДляРедактированияТогда(Парам01)
Процедура ЭлементДоступенДляРедактированияТогда(ИмяПоля,ПроверятьДоступность = Истина) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущаяФормаЭлемента",Неопределено);
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоля,Истина,Истина,,ДопПараметры);
	
	ТекущаяДоступность = ЭлементФормы.ТекущаяДоступность();
	Если ЭлементФормы.Вид = ВидДекорацииФормы.Надпись Тогда
		ТекущаяДоступность = Ложь;
	ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеНадписи Тогда
		ТекущаяДоступность = Ложь;
	КонецЕсли;	 
	
	Если ТекущаяДоступность Тогда
		//проверим также видимость групп, т.к. у них видимость может отличаться от видимости элемента
		Если ДопПараметры.ТекущаяФормаЭлемента <> Неопределено Тогда
			ТекущаяДоступность = Ванесса.ДоступностьЭлементаСУчетомРодителя(ДопПараметры.ТекущаяФормаЭлемента,ЭлементФормы,ТекущаяДоступность);
		ИначеЕсли Контекст.АктивноеОкно <> Неопределено Тогда
			ТекущаяДоступность = Ванесса.ДоступностьЭлементаСУчетомРодителя(Контекст.АктивноеОкно,ЭлементФормы,ТекущаяДоступность);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ПроверятьДоступность Тогда
		Ванесса.УстановитьРезультатУсловия(ТекущаяДоступность);
	Иначе	
		Ванесса.УстановитьРезультатУсловия(НЕ ТекущаяДоступность);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//Если элемент "ИмяЭлементаФормы" не доступен для редактирования Тогда
//@ЭлементНеДоступенДляРедактированияТогда(Парам01)
Процедура ЭлементНеДоступенДляРедактированияТогда(ИмяПоля) Экспорт
	ЭлементДоступенДляРедактированияТогда(ИмяПоля,Ложь);
КонецПроцедуры

&НаКлиенте
//Если элемент "ИмяЭлементаФормы" доступен только для просмотра Тогда
//@ЭлементДоступенТолькоДляПросмотраТогда(Парам01)
Процедура ЭлементДоступенТолькоДляПросмотраТогда(ИмяПоля,ПроверятьДоступность = Истина) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущаяФормаЭлемента",Неопределено);
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяПоля,Истина,Истина,,ДопПараметры);
	
	ТекущееТолькоПросмотр = ЭлементФормы.ТекущееТолькоПросмотр();
	Если НЕ ТекущееТолькоПросмотр Тогда
		//проверим также группы, т.к. у них только просмотр может отличаться от значения элемента
		Если ДопПараметры.ТекущаяФормаЭлемента <> Неопределено Тогда
			ТекущееТолькоПросмотр = Ванесса.ТолькоПросмотрЭлементаСУчетомРодителя(ДопПараметры.ТекущаяФормаЭлемента,ЭлементФормы,ТекущееТолькоПросмотр);
		ИначеЕсли Контекст.АктивноеОкно <> Неопределено Тогда
			ТекущееТолькоПросмотр = Ванесса.ТолькоПросмотрЭлементаСУчетомРодителя(Контекст.АктивноеОкно,ЭлементФормы,ТекущееТолькоПросмотр);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ПроверятьДоступность Тогда
		Ванесса.УстановитьРезультатУсловия(ТекущееТолькоПросмотр);
	Иначе	
		Ванесса.УстановитьРезультатУсловия(НЕ ТекущееТолькоПросмотр);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//Если элемент "ИмяЭлементаФормы" доступен не только для просмотра Тогда
//@ЭлементДоступенНеТолькоДляПросмотраТогда(Парам01)
Процедура ЭлементДоступенНеТолькоДляПросмотраТогда(ИмяПоля) Экспорт
	ЭлементДоступенТолькоДляПросмотраТогда(ИмяПоля,Ложь);
КонецПроцедуры


&НаКлиенте
Процедура ОбработичкОжиданияПолеСталоРавноВТечениеСекундТогда()
	ИмяОбработчикаОжидания = "ОбработичкОжиданияПолеСталоРавноВТечениеСекундТогда";
	
	Попытка
		ТекущееЗначение = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяПоляОбработкаОжидания,ИскатьПоИмениОбрабткаОжидания);
	Исключение
		ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
		Ванесса.УстановитьРезультатУсловия(Ложь);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Если НРег(ЗначениеОбрабткаОжидания) = НРег(ТекущееЗначение) Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
		Ванесса.УстановитьРезультатУсловия(Истина);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат;
	КонецЕсли;	 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
		Ванесса.УстановитьРезультатУсловия(Ложь);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
//Если поле "Наименование" стало равно "Тестовый Элемент 2" в течение 10 секунд Тогда
//@ПолеСталоРавноВТечениеСекундТогда(Парам01,Парам02,Парам03)
Процедура ПолеСталоРавноВТечениеСекундТогда(ИмяПоля,Значение,КоличествоСекунд,ИскатьПоИмени = Ложь) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяПоляОбработкаОжидания          = ИмяПоля;
	ИскатьПоИмениОбрабткаОжидания     = ИскатьПоИмени;
	ЗначениеОбрабткаОжидания          = Значение;
	//для этого шага таймаут берём тот, что указан в шаге
	КоличествоСекундОбработкаОжидания = КоличествоСекунд;
	ПодключитьОбработчикОжидания("ОбработичкОжиданияПолеСталоРавноВТечениеСекундТогда",1,Ложь);
КонецПроцедуры

&НаКлиенте
//Если поле с именем "Наименование" стало равно "Тестовый Элемент 2" в течение 10 секунд Тогда
//@ПолеСИменемСталоРавноВТечениеСекундТогда(Парам01,Парам02,Парам03)
Процедура ПолеСИменемСталоРавноВТечениеСекундТогда(ИмяПоля,ЗначениеПоля,КоличествоСекунд) Экспорт
	ПолеСталоРавноВТечениеСекундТогда(ИмяПоля,ЗначениеПоля,КоличествоСекунд,Истина);
КонецПроцедуры




&НаКлиенте
Процедура ОбработичкОжиданияПоявилосьОкноСЗаголовкомВТечениеСекундТогда()
	ИмяОбработчикаОжидания = "ОбработичкОжиданияПоявилосьОкноСЗаголовкомВТечениеСекундТогда";
	
	Попытка
		АктивноеОкно = Ванесса.НайтиОкноTestClientПоЗаголовку(ИмяОкнаОбработкаОжидания);
	Исключение
		АктивноеОкно = Неопределено;
	КонецПопытки;
	
	Если АктивноеОкно <> Неопределено Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
		Ванесса.УстановитьРезультатУсловия(Истина);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат;
	КонецЕсли;	 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчикаОжидания);
		Ванесса.УстановитьРезультатУсловия(Ложь);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат;
	КонецЕсли;	 
	
КонецПроцедуры


&НаКлиенте
//Если появилось окно с заголовком "ИмяОкна" в течение 10 секунд Тогда
//@ПоявилосьОкноСЗаголовкомВТечениеСекундТогда(Парам01,Парам02)
Процедура ПоявилосьОкноСЗаголовкомВТечениеСекундТогда(ЗаголовокОкна,КоличествоСекунд) Экспорт
	Ванесса.ЗапретитьВыполнениеШагов();

	Ванесса.ОбработатьСменуАктивногоОкна();
	
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	ИмяОкнаОбработкаОжидания          = ЗаголовокОкна;
	//для этого шага таймаут берём тот, что указан в шаге
	КоличествоСекундОбработкаОжидания = КоличествоСекунд;
	ПодключитьОбработчикОжидания("ОбработичкОжиданияПоявилосьОкноСЗаголовкомВТечениеСекундТогда",1,Ложь);
КонецПроцедуры


&НаКлиенте
//Если в таблице "ИмяТаблицы" поле "Заголовок поля" заполнено Тогда
//@ВТаблицеПолеЗаполненоТогда(Парам01,Парам02)
Процедура ВТаблицеПолеЗаполненоТогда(ИмяТЧ,ИмяПоля,ИскатьПоИмени = Ложь,ПроверятьЗаполненность = Истина) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	Если ИскатьПоИмени Тогда
		ПредставлениеДанных = ТЧ.ПолучитьТекстЯчейки(ИмяПоля);
	Иначе
		ВыделенныеСтроки = ТЧ.ПолучитьВыделенныеСтроки();
		Если ВыделенныеСтроки.Количество() = 0 Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> не найдено ни одной строки");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ЗначениеТекущейСтроки = ВыделенныеСтроки[0];
		ПредставлениеДанных   = ЗначениеТекущейСтроки[ИмяПоля];
		Если ПредставлениеДанных = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> не найдено ячейки с заголовком <%2>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоля);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ПредставлениеДанных = ТЧ.ПолучитьТекстЯчейки(ИмяПоля);
	Если ПроверятьЗаполненность Тогда
		Ванесса.УстановитьРезультатУсловия(ЗначениеЗаполнено(ПредставлениеДанных));
	Иначе	
		Ванесса.УстановитьРезультатУсловия(НЕ ЗначениеЗаполнено(ПредставлениеДанных));
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//Если в таблице "ИмяТаблицы" поле "Заголовок поля" не заполнено Тогда
//@ВТаблицеПолеНеЗаполненоТогда(Парам01,Парам02)
Процедура ВТаблицеПолеНеЗаполненоТогда(ИмяТЧ,ИмяПоля) Экспорт
	ВТаблицеПолеЗаполненоТогда(ИмяТЧ,ИмяПоля,Ложь,Ложь);
КонецПроцедуры

&НаКлиенте
//Если в таблице "ИмяТаблицы" поле с именем "ИмяПоля" заполнено Тогда
//@ВТаблицеПолеСИменемЗаполненоТогда(Парам01,Парам02)
Процедура ВТаблицеПолеСИменемЗаполненоТогда(ИмяТЧ,ИмяПоля) Экспорт
	ВТаблицеПолеЗаполненоТогда(ИмяТЧ,ИмяПоля,Истина);
КонецПроцедуры

&НаКлиенте
//Если в таблице "ИмяТаблицы" поле с именем "ИмяПоля" не заполнено Тогда
//@ВТаблицеПолеСИменемНеЗаполненоТогда(Парам01,Парам02)
Процедура ВТаблицеПолеСИменемНеЗаполненоТогда(ИмяТЧ,ИмяПоля) Экспорт
	ВТаблицеПолеЗаполненоТогда(ИмяТЧ,ИмяПоля,Истина,Ложь);
КонецПроцедуры

&НаКлиенте
//Если в таблице "ТабличнаяЧасть1" поле "РеквизитСтрока" имеет значение "" тогда
//@ВТаблицеПолеИмеетЗначениеТогда(Парам01,Парам02,Парам03)
Процедура ВТаблицеПолеИмеетЗначениеТогда(ИмяТЧ, ИмяПоля, ОжидаемоеЗначение, ИскатьПоИмени = Ложь, СравниватьПоШаблону = Ложь) Экспорт
	ТЧ = Ванесса.НайтиТЧПоИмени(ИмяТЧ);
	
	Если ИскатьПоИмени Тогда
		ПредставлениеДанных = ТЧ.ПолучитьТекстЯчейки(ИмяПоля);
	Иначе
		ВыделенныеСтроки = ТЧ.ПолучитьВыделенныеСтроки();
		Если ВыделенныеСтроки.Количество() = 0 Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> не найдено ни одной строки");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
		
		ЗначениеТекущейСтроки = ВыделенныеСтроки[0];
		ПредставлениеДанных   = ЗначениеТекущейСтроки[ИмяПоля];
		Если ПредставлениеДанных = Неопределено Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице <%1> не найдено ячейки с заголовком <%2>");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяПоля);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ПредставлениеДанных = ТЧ.ПолучитьТекстЯчейки(ИмяПоля);
	
	Если СравниватьПоШаблону Тогда
		РезультатУсловия = Ванесса.СтрокаСоответствуетШаблону(ПредставлениеДанных, ОжидаемоеЗначение);	
	Иначе
		РезультатУсловия = НРег(ПредставлениеДанных) = НРег(ОжидаемоеЗначение);	
	КонецЕсли;

	Ванесса.УстановитьРезультатУсловия(РезультатУсловия);
	
КонецПроцедуры

&НаКлиенте
//Если в таблице "ТабличнаяЧасть1" поле с именем "РеквизитСтрока" имеет значение "" тогда
//@ВТаблицеПолеСИменемИмеетЗначениеТогда(Парам01,Парам02,Парам03)
Процедура ВТаблицеПолеСИменемИмеетЗначениеТогда(ИмяТЧ,ИмяПоля,ОжидаемоеЗначение,ИскатьПоИмени = Ложь) Экспорт
	ВТаблицеПолеИмеетЗначениеТогда(ИмяТЧ,ИмяПоля,ОжидаемоеЗначение,Истина);
КонецПроцедуры

&НаКлиенте
//Если в таблице ""ИмяТаблицы"" поле ""Заголовок поля"" имеет значение по шаблону ""ШаблонЗначенияПоля"" тогда
//@ВТаблицеПолеИмеетЗначениеПоШаблонуТогда(Парам01,Парам02,Парам03)
Процедура ВТаблицеПолеИмеетЗначениеПоШаблонуТогда(ИмяТЧ, ИмяПоля, ОжидаемоеЗначение) Экспорт
	ВТаблицеПолеИмеетЗначениеТогда(ИмяТЧ, ИмяПоля, ОжидаемоеЗначение, Ложь, Истина);
КонецПроцедуры

&НаКлиенте
//Если в таблице ""ИмяТаблицы"" поле с именем ""ИмяПоля"" имеет значение по шаблону ""ШабонЗначенияПоля"" тогда
//@ВТаблицеПолеСИменемИмеетЗначениеПоШаблонуТогда(Парам01,Парам02,Парам03)
Процедура ВТаблицеПолеСИменемИмеетЗначениеПоШаблонуТогда(ИмяТЧ, ИмяПоля, ОжидаемоеЗначение) Экспорт
	ВТаблицеПолеИмеетЗначениеТогда(ИмяТЧ, ИмяПоля, ОжидаемоеЗначение, Истина, Истина);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекущийРежимСовместимости()
	ТекущийРежимСовместимости = Неопределено;
	
	Попытка
		ТекущийРежимСовместимости = Вычислить("Метаданные.РежимСовместимости");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Строка(ТекущийРежимСовместимости);
КонецФункции	 

&НаКлиенте
//Если установлен режим совместимости "8.3.12" Тогда
//@УстановленРежимСовместимостиТогда(Парам01)
Процедура УстановленРежимСовместимостиТогда(Знач Парам01) Экспорт
	ТекущийРежимСовместимости = НРег(ТекущийРежимСовместимости());
	Парам01 = Нрег(СтрЗаменить(Парам01,".","_"));
	Если Найти(ТекущийРежимСовместимости,Парам01) > 0 Тогда
		Ванесса.УстановитьРезультатУсловия(Истина);
	Иначе	
		Ванесса.УстановитьРезультатУсловия(Ложь);
	КонецЕсли;	 
КонецПроцедуры

//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;

&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;

&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
Перем МаксКоличествоСекундПодключения,ТекКоличествоСекундПодключения;

// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
&НаКлиенте
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования)","ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования","И Я подключаю клиент тестирования ""ИмяПрофиляTestClient"" из таблицы клиентов тестирования","Подключение нового сеанса, если он не был запущен ранее.","Подключение TestClient.Новое подключение к базе.Текущая база.Устаревшее");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОтИмениСПаролем(ИмяКлиентаТестирования,Логин,Пароль)","ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОтИмениСПаролем","Когда Я подключаю клиент тестирования ""ИмяКлиентаТестирования"" из таблицы клиентов тестирования от имени ""Логин"" с паролем ""Пароль""","Подключение нового сеанса, если он не был запущен ранее. Необходимо указать логин и пароль.","Подключение TestClient.Новое подключение к базе.Текущая база.Устаревшее");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюКлиентТестированияСПараметрами(ТабПарам)","ЯПодключаюКлиентТестированияСПараметрами",
		"Когда Я подключаю клиент тестирования с параметрами:
     	|    | 'Имя'             | 'Синоним'        | 'Порт' | 'Строка соединения'                     | 'Логин' | 'Пароль' | 'Запускаемая обработка' |  'Дополнительные параметры строки запуска'  |
     	|    | 'ИмяПрофиля'      | 'СинонимПрофиля' | '1538' | 'Srvr=""localhost:1941"";Ref=""Test"";' | 'Админ' | 'Админ'  | 'c:\СуперОбработка.epf' |  '/UC'                                      |"
		,"Подключает TestClient. Все параметры подключения указываются в таблице. Запускает новый сеанс, если не найден запущенный ранее.", "Подключение TestClient.Новое подключение к базе.Произвольная база");
		
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюУжеЗапущенныйКлиентТестирования(Парам01)","ЯПодключаюУжеЗапущенныйКлиентТестирования","Затем Я подключаю уже запущенный клиент тестирования ""ИмяПрофиля""","Подключает запущенный ранее клиент тестирования, который мог быть запущен из другой программы. Если сеанс не найден - выдёт исключение.", "Подключение TestClient.Работа с подключенными TestClient.Активизировать TestClient");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюУжеЗапущенныйКлиентТестированияСПараметрами(ТабПарам)","ЯПодключаюУжеЗапущенныйКлиентТестированияСПараметрами",
		"Когда Я подключаю уже запущенный клиент тестирования с параметрами:
     	|    | 'Имя'             | 'Синоним'        | 'Порт' | 'Строка соединения'                     | 'Логин' | 'Пароль' | 'Запускаемая обработка' |  'Дополнительные параметры строки запуска'  |
     	|    | 'ИмяПрофиля'      | 'СинонимПрофиля' | '1538' | 'Srvr=""localhost:1941"";Ref=""Test"";' | 'Админ' | 'Админ'  | 'c:\СуперОбработка.epf' |  '/UC'                                      |"
		,"Подключает запущенный ранее клиент тестирования, который мог быть запущен из другой программы. Если сеанс не найден - выдёт исключение.", "Подключение TestClient.Работа с подключенными TestClient.Активизировать TestClient");
		
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюУжеЗапущенныйКлиентТестированияСПараметрамиВТечениеСекунд(Парам01,ТабПарам)","ЯПодключаюУжеЗапущенныйКлиентТестированияСПараметрамиВТечениеСекунд",
		"Когда Я подключаю уже запущенный клиент тестирования с параметрами в течение 10 секунд:
     	|    | 'Имя'             | 'Синоним'        | 'Порт' | 'Строка соединения'                     | 'Логин' | 'Пароль' | 'Запускаемая обработка' |  'Дополнительные параметры строки запуска'  |
     	|    | 'ИмяПрофиля'      | 'СинонимПрофиля' | '1538' | 'Srvr=""localhost:1941"";Ref=""Test"";' | 'Админ' | 'Админ'  | 'c:\СуперОбработка.epf' |  '/UC'                                      |"
		,"Подключает запущенный ранее клиент тестирования, который мог быть запущен из другой программы. Если сеанс не найден - выдёт исключение.", "Подключение TestClient.Работа с подключенными TestClient.Активизировать TestClient");
		
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯКопируюТекущийПрофильTestClientСУстановкойПараметров(ТабПарам)","ЯКопируюТекущийПрофильTestClientСУстановкойПараметров",
		"Когда Я копирую текущий профиль TestClient с установкой параметров:
     	|    | 'Имя'             | 'Синоним'        | 'Порт' | 'Строка соединения'                     | 'Логин' | 'Пароль' | 'Запускаемая обработка' |  'Дополнительные параметры строки запуска'  |
     	|    | 'ИмяПрофиля'      | 'СинонимПрофиля' | '1538' | 'Srvr=""localhost:1941"";Ref=""Test"";' | 'Админ' | 'Админ'  | 'c:\СуперОбработка.epf' |  '/UC'                                      |"
		,"Копирует текущий активный профиль TestClient и устанавилвает в копии новые значение параметров. Если профиль с требуемым именем уже есть, то он будет перезаписан, иначе будет создан новый. Все параметры подключения указываются в таблице Gherkin, в которой должно быть две строки: первая строка с именами параметров, вторая строка со значениями параметров.", "Подключение TestClient.Новое подключение к базе.Произвольная база");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрываюСеансTESTCLIENT()","ЯЗакрываюСеансTESTCLIENT","И я закрываю сеанс TESTCLIENT","Закрывает активный сеанс TestClient, если он есть. При этом происходит попытка закрыть моадльные диалоги, если они появляются.","Подключение TestClient.Работа с подключенными TestClient.Закрыть сеанс TestClient");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрываюГлавноеОкноTestClient()","ЯЗакрываюГлавноеОкноTestClient","И я закрываю главное окно TestClient","Закрывает главное окно TestClient. Равносильно нажатию на крестик на главном окне приложения. Обработку диалогов, которые могут возникнуть при закрыти приложения, должен обеспечить сам сценарий.","Подключение TestClient.Работа с подключенными TestClient.Закрыть главное окно сеанса");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюTestClientЛогинПароль(Парам01,Парам02,Парам03)","ЯПодключаюTestClientЛогинПароль","И я подключаю TestClient ""ИмяКлиента"" логин ""Логин"" пароль ""Пароль""","Позволяет подключить TestClient с нужным логином и паролем. Если указанный профиль уже существует, то будет использован переданный профиль. Если такого профиля нет, то он будет создан на основе профиля ""Этот клиент"", который в себе содержит строку подключения к тойже базе, в которой запущен TestManager","Подключение TestClient.Новое подключение к базе.Текущая база");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯАктивизируюTestClient(Парам01)","ЯАктивизируюTestClient","И я активизирую TestClient ""ИмяПрофиляTestClient""","Позволяет переключить контекст на нужный TestClient. Поиск TestClient в таблице подключений просиходит по имени или синониму.","Подключение TestClient.Работа с подключенными TestClient.Активизировать TestClient");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрываюTestClient(Парам01)","ЯЗакрываюTestClient","И я закрываю TestClient ""ИмяПрофиляTestClient""","Закрывает указанный TestClient Перед этим закрывает все окна в нём.","Подключение TestClient.Работа с подключенными TestClient.Закрыть сеанс TestClient");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюПрофильTestClient(Парам01)","ЯПодключаюПрофильTestClient","И я подключаю профиль TestClient ""ИмяПрофиляTestClient""","Позволяет подключить TestClient по имени уже существующего профиля","Подключение TestClient.Новое подключение к базе.Произвольная база");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрылНовыйСеансTestClientИлиПодключилУжеСуществующий()","ЯОткрылНовыйСеансTestClientИлиПодключилУжеСуществующий","Дано Я открыл новый сеанс TestClient или подключил уже существующий","Открывает новый Клиент тестирования для профиля указанного в текущей строке таблицы клиентов тестирования. Если строка в таблице клиентов тестирования не менялась, то активной строкой будет первая строка, в которой всегда содержится профиль для подключения к той же базе, в которой запущен сеанс Менеджера тестирования.","Подключение TestClient.Новое подключение к базе.Текущая база");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрылНовыйСеансTestClientИлиПодключилУжеСуществующийБезЗагрузкиНастроек()","ЯОткрылНовыйСеансTestClientИлиПодключилУжеСуществующийБезЗагрузкиНастроек","Дано Я открыл новый сеанс TestClient или подключил уже существующий без загрузки настроек");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрылНовыйСеансTestClientКакTestManagerИлиПодключилУжеСуществующийБезЗагрузкиНастроек()","ЯОткрылНовыйСеансTestClientКакTestManagerИлиПодключилУжеСуществующийБезЗагрузкиНастроек","Дано Я открыл новый сеанс TestClient как TestManager или подключил уже существующий без загрузки настроек","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрылСеансTestClientОтИмениСПаролемИлиПодключаюУжеСуществующий(Логин,Пароль)","ЯОткрылСеансTestClientОтИмениСПаролемИлиПодключаюУжеСуществующий","Дано Я открыл сеанс TestClient от имени ""МойПользователь"" с паролем ""МойПароль"" или подключаю уже существующий","Позволяет подключить TestClient с нужным логином и паролем в тойже базе, в которой запущен TestManager, с помощью профиля ""Этот клиент"". При этом предыдущие подключения к этому профилю должны быть закрыты.");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУстанавливаюТекущемуTestClientСиноним(Парам01)","ЯУстанавливаюТекущемуTestClientСиноним","И я устанавливаю текущему TestClient синоним ""МойСиноним""","Позволяет подключить указать дополнительный синоним для текущего профиля TestClient. Синоним может использовать как дополнительное имя сеанса TestClient.","Подключение TestClient.Работа с подключенными TestClient.Установить синоним");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеКлиентовТестированияЯАктивизируюСтроку(Парам01)","ВТаблицеКлиентовТестированияЯАктивизируюСтроку","И в таблице клиентов тестирования я активизирую строку 'ИмяКлиентаТестирования'","Актвизирует строку с нужным клиентом тестирования. Поиск строки просходит с начала по имени, затем по синониму.","Подключение TestClient.Прочее.Активизировать строку");
	
	
	Возврат ВсеТесты;
КонецФункции

&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции

&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры

///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//И Я подключаю клиент тестирования "ИмяКлиентаТестирования" из таблицы клиентов тестирования
//@ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования)
Процедура ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования,ЗапускатьКлиентТестирования = Истина) Экспорт

	Если ИмяКлиентаТестирования = "" Тогда
		ИмяКлиентаТестирования = "Этот клиент";
	КонецЕсли;
	
	ПодключитьTestClientИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования,,,ЗапускатьКлиентТестирования);
КонецПроцедуры

&НаКлиенте
Функция ПодключитьTestClientИзТаблицыКлиентовТестирования(ИмяTestClient, Знач Логин = "", Знач Пароль = "",ЗапускатьКлиентТестирования = Истина)
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	ДопПараметры = "";
	Если ЗначениеЗаполнено(Логин) Тогда
		ДопПараметры = ДопПараметры + "/N""" + Логин + """ ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Пароль) Тогда
		ДопПараметры = ДопПараметры + "/P""" + Пароль + """ ";
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗапускатьКлиентТестирования",ЗапускатьКлиентТестирования);
	
	СтрокаОшибки = "";
	ЕстьПодключение = Ванесса.ПолучитьКлиентаТестирования(ИмяTestClient, ДопПараметры,СтрокаОшибки,ДополнительныеПараметры);
	Если Не ЕстьПодключение Тогда
		Ванесса.ОбработатьОшибкуПодключенияTestClient();
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не удалось подключить клиент тестирования. %1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ДанныеКлиентовТестирования = Ванесса.ДанныеКлиентовТестирования;
	Для Каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
		Если СтрокаДанныеКлиентовТестирования.Имя = ИмяTestClient Тогда
			СтрокаДанныеКлиентовТестирования.Подключен = Истина;
			Ванесса.Элементы.ДанныеКлиентовТестирования.ТекущаяСтрока = СтрокаДанныеКлиентовТестирования.ПолучитьИдентификатор();
		Иначе	
			СтрокаДанныеКлиентовТестирования.Подключен = Ложь;
		КонецЕсли;	 
	КонецЦикла;	
	
	ОбновитьДанныеВПодключенныеTestClient(ИмяTestClient);
	
	Возврат Истина;
КонецФункции

&НаКлиенте
//Когда Я подключаю клиент тестирования "ИмяКлиентаТестирования" из таблицы клиентов тестирования от имени "Логин" с паролем "Пароль"
//@ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОтИмениСПаролем(ИмяКлиентаТестирования,Логин,Пароль)
Процедура ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОтИмениСПаролем(ИмяКлиентаТестирования, Знач Логин = "", Знач Пароль = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяКлиентаТестирования) Тогда
		ИмяКлиентаТестирования = "Этот клиент";
	КонецЕсли;
	
	Логин = СокрЛП(Логин);
	Пароль = СокрЛП(Пароль);
	
	Если НЕ ПодключитьTestClientИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования, Логин, Пароль) Тогда
		Ванесса.ОбработатьОшибкуПодключенияTestClient();
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не смог подключить TestClient.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//Когда Я копирую текущий профиль TestClient с установкой параметров
//@ЯКопируюТекущийПрофильTestClientСУстановкойПараметров(ТабПарам)
Процедура ЯКопируюТекущийПрофильTestClientСУстановкойПараметров(ТабПарам) Экспорт
	Если ТабПарам.Количество() <> 2 Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Должно быть передано 2 строки");
	КонецЕсли;
	
	Если Ванесса.Элементы.ДанныеКлиентовТестирования.ТекущиеДанные <> Неопределено Тогда
		ТекущееИмяПрофиля = Ванесса.Элементы.ДанныеКлиентовТестирования.ТекущиеДанные.Имя;
	Иначе	
		ТекущееИмяПрофиля = "Этот клиент";
		Если КонтекстСохраняемый.Свойство("ТекущийПрофильTestClient") Тогда
			Если КонтекстСохраняемый.ТекущийПрофильTestClient <> Неопределено Тогда
				ТекущееИмяПрофиля = КонтекстСохраняемый.ТекущийПрофильTestClient;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	ДанныеКлиентовТестирования = Ванесса.ДанныеКлиентовТестирования;
	

	Отбор = Новый Структура;
	Отбор.Вставить("Имя", ТекущееИмяПрофиля);
	НайденныеСтрокиИмя = ДанныеКлиентовТестирования.НайтиСтроки(Отбор);
	Если НайденныеСтрокиИмя.Количество() = 0 Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Профиль с именем <%1> не найден.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекущееИмяПрофиля); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	
	
	ТекущаяСтрокаПрофиля = НайденныеСтрокиИмя[0];
	
	НовоеИмяПрофиля = Неопределено;
	Для Каждого ЗначениеКолонки Из ТабПарам[0] Цикл
		ЗначениеКолонкиНрег = НРег(ЗначениеКолонки.Значение);
		
		Если ЗначениеКолонкиНрег = НРег("Имя подключения")
		ИЛИ  ЗначениеКолонкиНрег = НРег("Имя")
		ИЛИ  ЗначениеКолонкиНрег = НРег("Name")
		Тогда
			НовоеИмяПрофиля = ТабПарам[1][ЗначениеКолонки.Ключ];
		КонецЕсли;	 
	КонецЦикла;	
	
	Если НовоеИмяПрофиля = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("В таблице параметров не было передано имя нового профиля. Колонка <Имя подключения>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекущееИмяПрофиля); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	
	Отбор = Новый Структура;
	Отбор.Вставить("Имя", НовоеИмяПрофиля);
	НайденныеСтрокиИмя = ДанныеКлиентовТестирования.НайтиСтроки(Отбор);
	Если НайденныеСтрокиИмя.Количество() > 0 Тогда
		СтрокаСНовымПрофилем = НайденныеСтрокиИмя[0];
	Иначе	
		СтрокаСНовымПрофилем = Ванесса.ДанныеКлиентовТестирования.Добавить();
	КонецЕсли;	 
	
	ЗаполнитьЗначенияСвойств(СтрокаСНовымПрофилем,ТекущаяСтрокаПрофиля);
	СтрокаСНовымПрофилем.Имя = НовоеИмяПрофиля;
	
	Если СтрокаСНовымПрофилем.Имя <> "Этот клиент" Тогда
		СтрокаСНовымПрофилем.ЭтотКлиент = Ложь;
	КонецЕсли;	 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ЗаполнитьДанныеИзПрофиля",Истина);
	ДопПараметры.Вставить("ПрофильДляЗаполнения",СтрокаСНовымПрофилем);
	ДопПараметры.Вставить("ДанныеДляКопирования",ТекущаяСтрокаПрофиля);
	ИмяКлиентаТестирования = ПолучитьПараметрыПодключения(ТабПарам,ДопПараметры);
КонецПроцедуры

&НаКлиенте
//Когда Я подключаю клиент тестирования с параметрами:
//@ЯПодключаюКлиентТестированияСПараметрами(ТабПарам)
Процедура ЯПодключаюКлиентТестированияСПараметрами(ТабПарам) Экспорт
	Если ТабПарам.Количество() <> 2 Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Должно быть передано 2 строки");
	КонецЕсли;
	//ТабПарам = Ванесса.ПолучитьЗначенияТаблицыGherkinИзКонтекста(ТабПарам);
	ИмяКлиентаТестирования = ПолучитьПараметрыПодключения(ТабПарам);

	ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования);
КонецПроцедуры

&НаКлиенте
//Затем Я подключаю уже запущенный клиент тестирования "ИмяПрофиля"
//@ЯПодключаюУжеЗапущенныйКлиентТестирования(Парам01)
Процедура ЯПодключаюУжеЗапущенныйКлиентТестирования(ИмяКлиентаТестирования) Экспорт
	ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования,Ложь);
КонецПроцедуры

&НаКлиенте
//Когда Я подключаю уже запущенный клиент тестирования с параметрами:
//@ЯПодключаюУжеЗапущенныйКлиентТестированияСПараметрами(ТабПарам)
Процедура ЯПодключаюУжеЗапущенныйКлиентТестированияСПараметрами(ТабПарам) Экспорт
	Если ТабПарам.Количество() <> 2 Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Должно быть передано 2 строки");
	КонецЕсли;
	//ТабПарам = Ванесса.ПолучитьЗначенияТаблицыGherkinИзКонтекста(ТабПарам);
	ИмяКлиентаТестирования = ПолучитьПараметрыПодключения(ТабПарам);

	ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования()
	
	ИмяОбработчика = "ОбработчикОжиданияЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования";
	
	ПолучилосьПодключить = Истина;
	Попытка
		ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования(глИмяКлиентаТестирования,Ложь);
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат;
	Исключение
		ПолучилосьПодключить = Ложь;
	КонецПопытки;
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд, прозойдёт подключение к клиенту тестирования.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат;
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
//Когда Я подключаю уже запущенный клиент тестирования с параметрами в течение 10 секунд:
//@ЯПодключаюУжеЗапущенныйКлиентТестированияСПараметрамиВТечениеСекунд(ТабПарам)
Процедура ЯПодключаюУжеЗапущенныйКлиентТестированияСПараметрамиВТечениеСекунд(КоличествоСекунд, ТабПарам) Экспорт
	Если ТабПарам.Количество() <> 2 Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Должно быть передано 2 строки");
	КонецЕсли;
	//ТабПарам = Ванесса.ПолучитьЗначенияТаблицыGherkinИзКонтекста(ТабПарам);
	глИмяКлиентаТестирования = ПолучитьПараметрыПодключения(ТабПарам);
	ДатаНачалаОбработкиОжидания       = ТекущаяДата();
	КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);

	ПодключитьОбработчикОжидания("ОбработчикОжиданияЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования",1,Ложь);
КонецПроцедуры

&НаКлиенте
// заполнение таблицы Test Client в vanesse
Функция ПолучитьПараметрыПодключения(ТабПарам,ДопПараметры = Неопределено)

	ЗаполнитьДанныеИзПрофиля = Ложь;
	ДанныеДляКопирования = Неопределено;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ЗаполнитьДанныеИзПрофиля") Тогда
			ЗаполнитьДанныеИзПрофиля = ДопПараметры.ЗаполнитьДанныеИзПрофиля;
		КонецЕсли;	 
		Если ДопПараметры.Свойство("ДанныеДляКопирования") Тогда
			ДанныеДляКопирования = ДопПараметры.ДанныеДляКопирования;
		КонецЕсли;	 
		
	КонецЕсли;
	
	Стр = Новый Структура;
	Стр.Вставить("Имя",                    "");
	Стр.Вставить("ПутьКИнфобазе",          "");
	Стр.Вставить("ПортЗапускаТестКлиента", "");
	Стр.Вставить("ДопПараметры",           "");
	Стр.Вставить("ТипКлиента",             "");
	Стр.Вставить("ИмяКомпьютера",          "");
	Стр.Вставить("Синоним",                "");

	Если ЗаполнитьДанныеИзПрофиля Тогда
		ЗаполнитьЗначенияСвойств(Стр,ДопПараметры.ПрофильДляЗаполнения);
	КонецЕсли;	 
	
	ИменаПараметров      = ТабПарам[0];// шапка
	ЗначенияПараметров   = ТабПарам[1];
	СтрокаАутентификации = "";
	Логин       = "";
	ДопПараметр = "";
	Если ДанныеДляКопирования <> Неопределено Тогда
		ДопПараметр = ДанныеДляКопирования.ДопПараметры;
		УбратьИзСтрокиДанныеПоАутентификации(ДопПараметр);
	КонецЕсли;	 
	
	БылЯвноПереданПортПодключения = Ложь;
	
	Для ккк = 1 По ИменаПараметров.Количество() Цикл
		ИмяПараметра = "";
		ЗначениеПараметра = "";

		ИменаПараметров.Свойство("Кол" + ккк, ИмяПараметра);
		ЗначенияПараметров.Свойство("Кол" + ккк, ЗначениеПараметра);
		Если ВРег(ИмяПараметра) = ВРег("Дополнительные параметры строки запуска") Тогда
			//если значение передано в параметрах, то оно будет взято из параметров шага
			ДопПараметр = "";
		КонецЕсли;	 
		
	КонецЦикла;	
	

	Для ккк = 1 По ИменаПараметров.Количество() Цикл
		ИмяПараметра = "";
		ЗначениеПараметра = "";

		ИменаПараметров.Свойство("Кол" + ккк, ИмяПараметра);
		ЗначенияПараметров.Свойство("Кол" + ккк, ЗначениеПараметра);

		ИмяПараметраВрег = ВРег(ИмяПараметра);
		Если ИмяПараметраВрег = ВРег("Имя подключения")
		ИЛИ  ИмяПараметраВрег = ВРег("Имя")
		ИЛИ  ИмяПараметраВрег = ВРег("Name")
		Тогда
			Стр.Имя = ЗначениеПараметра;
			// проверка заполнения данных
			Если Не ЗначениеЗаполнено(Стр.Имя) Тогда
				ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Параметр <Имя подключения> является обязательным.");
			КонецЕсли;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Строка соединения") Тогда
			Стр.ПутьКИнфобазе  = ЗначениеПараметра;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Порт") Тогда
			БылЯвноПереданПортПодключения = Истина;
			Стр.ПортЗапускаТестКлиента = ЗначениеПараметра;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Логин") Тогда
			Логин = ЗначениеПараметра;
			Если Не ПустаяСтрока(Логин) Тогда
				СтрокаАутентификации = "/N""" + СокрЛП(Логин)+ """";
			КонецЕсли;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Пароль") Тогда
			Если Не ПустаяСтрока(ЗначениеПараметра) Тогда
				СтрокаАутентификации = СтрокаАутентификации + " /P""" + ЗначениеПараметра + """";
			КонецЕсли;	 

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Запускаемая обработка") Тогда
			Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
				Файл = Новый Файл(ЗначениеПараметра);
				Если Не Файл.Существует() Тогда
					ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Параметр <Запускаемая обработка> указывает на несуществующий файл.");
				КонецЕсли;
				ДопПараметр = ДопПараметр + " /EXECUTE " + """" + ЗначениеПараметра + """";
			КонецЕсли;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Дополнительные параметры строки запуска") Тогда
			ДопПараметр = ДопПараметр + " " + ЗначениеПараметра;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Тип клиента") Тогда
			Стр.ТипКлиента = ЗначениеПараметра;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Имя компьютера") Тогда
			Стр.ИмяКомпьютера = ЗначениеПараметра;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Синоним") Тогда
			Стр.Синоним = ЗначениеПараметра;

		КонецЕсли;
	КонецЦикла;

	Если Не ЗначениеЗаполнено(Стр.ТипКлиента) Тогда
		Стр.ТипКлиента = "Тонкий";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Стр.ПортЗапускаТестКлиента) Тогда
		Стр.ПортЗапускаТестКлиента = 1538;
	Иначе
		Стр.ПортЗапускаТестКлиента = Число(Стр.ПортЗапускаТестКлиента);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Стр.ПутьКИнфобазе) Тогда
		Стр.ПутьКИнфобазе = СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;

	Если СтрокаАутентификации <> "" И Найти(СтрокаАутентификации, "/N") = 0 Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Параметр <Логин> не задан");
	КонецЕсли;
	Стр.ДопПараметры = СтрокаАутентификации + " " +ДопПараметр;

	ДанныеКлиентовТестирования = Ванесса.ДанныеКлиентовТестирования;

	Отбор = Новый Структура;
	Отбор.Вставить("Имя", Стр.Имя);
	НайденныеСтрокиИмя = ДанныеКлиентовТестирования.НайтиСтроки(Отбор);
	Если НайденныеСтрокиИмя.Количество() = 0 Тогда
		
		//проверить нахождение нового порта подключения в таблице клиентов
		Отбор = Новый Структура;
		Отбор.Вставить("ПортЗапускаТестКлиента", Стр.ПортЗапускаТестКлиента);
		НайденныеСтрокиПорт = ДанныеКлиентовТестирования.НайтиСтроки(Отбор);
		Если НайденныеСтрокиПорт.Количество() > 0 Тогда
			ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Для подключения с именем <%1> изменен порт подключения, указанный порт уже есть в таблице подключений.");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Стр.Имя);
			Сообщить(Ванесса.ПолучитьТекстСообщенияПользователю(ТекстСообщения));
			Стр.ПортЗапускаТестКлиента = Ванесса.ПроверитьПортНаЗанятость(Стр.ПортЗапускаТестКлиента);
		КонецЕсли;
		
		НоваяСтрока = ДанныеКлиентовТестирования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
	Иначе
		Если ЗначениеЗаполнено(Стр.Синоним) Тогда
			//очистим синоним, если он был у другой строки
			Для Каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
				Если СтрокаДанныеКлиентовТестирования.Синоним = Стр.Синоним Тогда
					СтрокаДанныеКлиентовТестирования.Синоним = "";
				КонецЕсли;	 
			КонецЦикла;	
		КонецЕсли;	 
		НоваяСтрока = НайденныеСтрокиИмя.Получить(0);
		Если Не БылЯвноПереданПортПодключения Тогда
			//вернём порт который был, чтобы была возможность переподключить уже ранее запущенный TestClient, а Ванесса при этом была закрыта
			Стр.ПортЗапускаТестКлиента = НоваяСтрока.ПортЗапускаТестКлиента;
		КонецЕсли;	 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Подключение с именем <%1> перезаполнено в таблице подключений");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Стр.Имя);
		Сообщить(Ванесса.ПолучитьТекстСообщенияПользователю(ТекстСообщения));
	КонецЕсли;
	
	Возврат Стр.Имя;

КонецФункции

&НаКлиенте
//я закрываю сеанс TESTCLIENT
//@ЯЗакрываюСеансTESTCLIENT()
Процедура ЯЗакрываюСеансTESTCLIENT() Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();	
	
	Попытка
		КонтекстСохраняемый.ГлавноеОкноТестируемого.Закрыть();
	Исключение
		КонтекстСохраняемый.Вставить("ГлавноеОкноТестируемого",Неопределено);
	КонецПопытки;
	КонтекстСохраняемый.ГлавноеОкноТестируемого = Неопределено;

	//чтобы успели появиться диалоги о закрытии
	Ванесса.sleep(1);
	
	// Закрытие платформенного-бспшного окна "Завершить работу"
	Попытка
		ИскомаяКнопка = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), "Завершить работу");
		Если ИскомаяКнопка <> Неопределено Тогда
			ИскомаяКнопка.Нажать();
		КонецЕсли;
	Исключение
		//
	КонецПопытки;
	
	Попытка
		КонтекстСохраняемый.ТестовоеПриложение.РазорватьСоединение();
	Исключение
		//	
	КонецПопытки;
	
	Ванесса.ОбновитьДанныеКлиентовТестированияПослеОтключенияКлиентаТестирования();
КонецПроцедуры

&НаКлиенте
//И я закрываю TestClient "Кладовщик"
//@ЯЗакрываюTestClient(Парам01)
Процедура ЯЗакрываюTestClient(ИмяTestClient) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Закрытие TestClient <%1>");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяTestClient);
	Сообщить(Ванесса.ПолучитьТекстСообщенияПользователю(ТекстСообщения));
	
	СвойстваTestClient = ПолучитьСвойстваПодключенногоTestClient(ИмяTestClient);
	Если СвойстваTestClient = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не нашел профиля TestClient с именем <%1> чтобы его закрыть.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяTestClient);
		Сообщить(Ванесса.ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		Возврат;
	КонецЕсли;
	
	ТекущийПрофильTestClient            = Неопределено;
	НадоВернутьТекущийПрофильTestClient = Ложь;
	Если КонтекстСохраняемый.Свойство("ТекущийПрофильTestClient") Тогда
		ТекущийПрофильTestClient = КонтекстСохраняемый.ТекущийПрофильTestClient;
		
		Если (ТекущийПрофильTestClient <> Неопределено) и (ТекущийПрофильTestClient <> ИмяTestClient)
			и (СокрЛП(СвойстваTestClient.Имя) <> СокрЛП(ТекущийПрофильTestClient)) Тогда
			СвойстваТекущийПрофильTestClient = ПолучитьСвойстваПодключенногоTestClient(ТекущийПрофильTestClient);
			Если СвойстваТекущийПрофильTestClient = Неопределено Тогда
				ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не нашел профиля TestClient с именем <%1> хотя он должен быть активным в данный момент.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекущийПрофильTestClient);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			НадоВернутьТекущийПрофильTestClient = Истина;
		КонецЕсли;	 
	КонецЕсли;
	
	
	Если (ИмяTestClient <> ТекущийПрофильTestClient)
		и (СокрЛП(СвойстваTestClient.Имя) <> СокрЛП(ТекущийПрофильTestClient)) Тогда
		//активизируем этот TestClient, чтобы закрыть в нём все окна
		ЯАктивизируюTestClient(ИмяTestClient);
	КонецЕсли;
	
	Попытка
		Ванесса.Шаг("И Я закрыл все окна клиентского приложения");
	Исключение
		Сообщить(Ванесса.ПолучитьТекстСообщенияПользователю("Ошибка при закрытии всех окон Testclient."));
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	ЯЗакрываюСеансTESTCLIENT();
	//Ванесса.Шаг("И Я закрываю сеанс TESTCLIENT");
	
	// снимем отметку о подключении
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя",ИмяTestClient);
	МассивСтрок = Ванесса.ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() = 1 Тогда
		СтрокаЭтотКлиент = МассивСтрок[0];
		СтрокаЭтотКлиент.Подключен = Ложь;
	КонецЕсли;
	
	Если НадоВернутьТекущийПрофильTestClient Тогда
		ЯАктивизируюTestClient(ТекущийПрофильTestClient);
	Иначе	
		КонтекстСохраняемый.Вставить("ТекущийПрофильTestClient",Неопределено);
	КонецЕсли;	 
	
	
	Ванесса.УдалитьЭлементПодключенныеTestClient(КонтекстСохраняемый.ПодключенныеTestClient,ИмяTestClient);
	Если КонтекстСохраняемый.ПодключенныеTestClient.Количество() = 0 Тогда
		КонтекстСохраняемый.Вставить("ТекущийПрофильTestClient",Неопределено);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
//И я активизирую TestClient "Кладовщик"
//@ЯАктивизируюTestClient(Парам01)
Процедура ЯАктивизируюTestClient(ИмяTestClient) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	СвойстваTestClient = ПолучитьСвойстваПодключенногоTestClient(ИмяTestClient);
	Если СвойстваTestClient = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не нашел профиля TestClient с именем <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяTestClient);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	КонтекстСохраняемый.Вставить("ТестовоеПриложение",СвойстваTestClient.ТестовоеПриложение);
	КонтекстСохраняемый.Вставить("ГлавноеОкноТестируемого",СвойстваTestClient.ГлавноеОкноТестируемого);
	КонтекстСохраняемый.Вставить("ТекущийПрофильTestClient",СвойстваTestClient.Имя);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя",ИмяTestClient);
	МассивСтрок = Ванесса.ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(СвойстваTestClient.Синоним) Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Синоним",СвойстваTestClient.Синоним);
			МассивСтрок = Ванесса.ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если МассивСтрок.Количество() = 1 Тогда
		Ванесса.Элементы.ДанныеКлиентовТестирования.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаTestClientВТаблицеПодключений(ИмяTestClient)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя",ИмяTestClient);
	МассивСтрок = Ванесса.ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Синоним",ИмяTestClient);
		МассивСтрок = Ванесса.ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	КонецЕсли;	 
	
	Если МассивСтрок.Количество() = 1 Тогда
		Возврат МассивСтрок[0]; 
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
//И я подключаю TestClient "Кладовщик" логин "Пользователь1" пароль "1"
//@ЯПодключаюTestClientЛогинПароль(Парам01,Парам02,Парам03)
Процедура ЯПодключаюTestClientЛогинПароль(ИмяTestClient,Логин,Пароль) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	Если Не КонтекстСохраняемый.Свойство("ПодключенныеTestClient") Тогда
		КонтекстСохраняемый.Вставить("ПодключенныеTestClient",Новый Массив);
	КонецЕсли;	 
	
	ПодключенныеTestClient = КонтекстСохраняемый.ПодключенныеTestClient;
	
	СвойстваTestClient = СтрокаTestClientВТаблицеПодключений(ИмяTestClient);
	
	Если СвойстваTestClient = Неопределено Тогда //значит нет такого профиля в таблице
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Имя","Этот клиент"); //будем копировать эту строку
		
		МассивСтрок = Ванесса.ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() = 0 Тогда
			ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не найдена строка в таблице ДанныеКлиентовТестирования с <Имя=Этот клиент>");
		КонецЕсли;	 
		
		СтрокаЭтотКлиент = МассивСтрок[0];
		
		СтрокаДанныеКлиентовТестирования = Ванесса.ДанныеКлиентовТестирования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанныеКлиентовТестирования,СтрокаЭтотКлиент);
		СтрокаДанныеКлиентовТестирования.ПортЗапускаТестКлиента = Ванесса.ПроверитьПортНаЗанятость(48000);
	Иначе	
		СтрокаДанныеКлиентовТестирования = СвойстваTestClient;
	КонецЕсли;
		
	ДопПараметры = СокрЛП(СтрокаДанныеКлиентовТестирования.ДопПараметры);
	УбратьИзСтрокиДанныеПоАутентификации(ДопПараметры);
	
	Если ЗначениеЗаполнено(Логин) Тогда
		ДопПараметры = ДопПараметры + "/N""" + Логин + """ ";
	КонецЕсли;	 
	Если ЗначениеЗаполнено(Пароль) Тогда
		ДопПараметры = ДопПараметры + "/P""" + Пароль + """ ";
	КонецЕсли;	 
	
	СтрокаДанныеКлиентовТестирования.Имя = ИмяTestClient;
	СтрокаДанныеКлиентовТестирования.ДопПараметры = ДопПараметры;
	
	Если НЕ Ванесса.ПодключитьПрофильTestClientПоИмени(ИмяTestClient) Тогда
		Ванесса.ОбработатьОшибкуПодключенияTestClient();
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог подключить профиль TestClient <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяTestClient);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ОбновитьДанныеВПодключенныеTestClient(ИмяTestClient);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеВПодключенныеTestClient(ИмяTestClient)
	Если Не КонтекстСохраняемый.Свойство("ПодключенныеTestClient") Тогда
		КонтекстСохраняемый.Вставить("ПодключенныеTestClient",Новый Массив);
	КонецЕсли;	 
	
	ПодключенныеTestClient = КонтекстСохраняемый.ПодключенныеTestClient;
	
	
	ТестовоеПриложение      = КонтекстСохраняемый.ТестовоеПриложение;
	ГлавноеОкноТестируемого = КонтекстСохраняемый.ГлавноеОкноТестируемого;
	
	Синоним = "";
	Ванесса.УдалитьЭлементПодключенныеTestClient(ПодключенныеTestClient,ИмяTestClient,Синоним);
	
	ПодключенныеTestClient.Добавить(Новый Структура("Имя,Синоним,ТестовоеПриложение,ГлавноеОкноТестируемого",ИмяTestClient,Синоним,ТестовоеПриложение,ГлавноеОкноТестируемого));
	КонтекстСохраняемый.Вставить("ТекущийПрофильTestClient",ИмяTestClient);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСвойстваПодключенногоTestClient(ИмяTestClient)
	Если Не КонтекстСохраняемый.Свойство("ПодключенныеTestClient") Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ПодключенныеTestClient = КонтекстСохраняемый.ПодключенныеTestClient;
	Для Каждого Элем Из ПодключенныеTestClient Цикл
		Если Элем.Имя = ИмяTestClient Тогда
			Возврат Элем;
		КонецЕсли;	 
	КонецЦикла;	
	
	//если не нашли по имени - ищем по синониму
	Для Каждого Элем Из ПодключенныеTestClient Цикл
		Если Элем.Синоним = ИмяTestClient Тогда
			Возврат Элем;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
//Я открыл новый сеанс TestClient или подключил уже существующий
//@ЯОткрылНовыйСеансTestClientИлиПодключилУжеСуществующий()
Процедура ЯОткрылНовыйСеансTestClientИлиПодключилУжеСуществующий() Экспорт
	ЯОткрылСеансTestClientОтИмениСПаролемИлиПодключаюУжеСуществующий();
КонецПроцедуры

&НаКлиенте
//Дано Я открыл новый сеанс TestClient как TestManager или подключил уже существующий без загрузки настроек
//@ЯОткрылНовыйСеансTestClientКакTestManagerИлиПодключилУжеСуществующийБезЗагрузкиНастроек()
Процедура ЯОткрылНовыйСеансTestClientКакTestManagerИлиПодключилУжеСуществующийБезЗагрузкиНастроек() Экспорт
	Если НЕ Ванесса.ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующий(" /CNoLoadConfig /TestManager") Тогда
		Ванесса.ОбработатьОшибкуПодключенияTestClient();
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не смог подключить TestClient.");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
//Я открыл новый сеанс TestClient или подключил уже существующий без загрузки настроек
//@ЯОткрылНовыйСеансTestClientИлиПодключилУжеСуществующийБезЗагрузкиНастроек()
Процедура ЯОткрылНовыйСеансTestClientИлиПодключилУжеСуществующийБезЗагрузкиНастроек() Экспорт
	Если НЕ Ванесса.ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующий(" /CNoLoadConfig") Тогда
		Ванесса.ОбработатьОшибкуПодключенияTestClient();
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Не смог подключить TestClient.");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УбратьИзСтрокиДанныеПоАутентификации(Стр)
	Стр = СокрЛП(Стр);
	Стр = СтрЗаменить(Стр,"//","~ЭкранированиеДвойнойСлеш~");
	
	МассивСтрок = Ванесса.РазложитьСтрокуВМассивПодстрокКлиент(Стр,"/");
	Рез = "";
	
	Для Каждого Элем Из МассивСтрок Цикл
		Если Лев(НРег(Элем),1) = "n" Тогда
			Продолжить;
		КонецЕсли;	 
		Если Лев(НРег(Элем),1) = "p" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если СокрЛП(Элем) = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Рез = Рез + "/" + Элем + " ";
	КонецЦикла;	
	
	Рез = СтрЗаменить(Рез,"~ЭкранированиеДвойнойСлеш~","//");
	Стр = Рез;
КонецПроцедуры

//Дано Я открыл новый сеанс TestClient от имени "МойПользователь" с паролем "МойПароль"
//@ЯОткрылСеансTestClientОтИмениСПаролемИлиПодключаюУжеСуществующий(Парам01,Парам02)
&НаКлиенте
Процедура ЯОткрылСеансTestClientОтИмениСПаролемИлиПодключаюУжеСуществующий(Знач Логин = "", Знач Пароль = "") Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	СтрокаАутентификации = "";
	Логин = СокрЛП(Логин); 
	Пароль = СокрЛП(Пароль);
	
	Если Не ПустаяСтрока(Логин) Тогда 
		СтрокаАутентификации = "/N""" + СокрЛП(Логин)+ """";
		
		Если Не ПустаяСтрока(Пароль) Тогда 
			СтрокаАутентификации = СтрокаАутентификации + " /P"""+Пароль + """";
		КонецЕсли;
	КонецЕсли;
	
	ДанныеКлиентовТестирования = Ванесса.ДанныеКлиентовТестирования;
	ТекущиеДанные = Ванесса.Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Имя", "Этот клиент");
	Иначе	
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Имя", ТекущиеДанные.Имя);
	КонецЕсли;	 
	
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	ДанныеЗапускаКлиентаТестирования = Неопределено;
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДанныеЗапускаКлиентаТестирования = НайденныеСтроки[0];
	КонецЕсли;	
	
	ТекущаяСтрокаПараметров = "";
	Если ДанныеЗапускаКлиентаТестирования <> Неопределено Тогда
		ТекущаяСтрокаПараметров = СокрЛП(ДанныеЗапускаКлиентаТестирования.ДопПараметры);
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(СтрокаАутентификации) Тогда
		УбратьИзСтрокиДанныеПоАутентификации(ТекущаяСтрокаПараметров);
	КонецЕсли;	 
	
	СтрокаОшибки = Неопределено;
	Если НЕ Ванесса.ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующий(ТекущаяСтрокаПараметров + " " + СтрокаАутентификации,СтрокаОшибки) Тогда
		Ванесса.ОбработатьОшибкуПодключенияTestClient();
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не смог подключить TestClient.");
		ТекстСообщения = ТекстСообщения + Символы.ПС + СтрокаОшибки;
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

//И я подключаю профиль TestClient "Оператор"
//@ЯПодключаюПрофильTestClient(Парам01)
&НаКлиенте
Процедура ЯПодключаюПрофильTestClient(ИмяПрофиля) Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	ДанныеЗапускаКлиентаТестирования = Ванесса.НайтиДанныеЗапускаКлиентаТестирования(ИмяПрофиля);
	Если ДанныеЗапускаКлиентаТестирования = Неопределено Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не нашел профиля TestClient с именем <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяПрофиля);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	ПодключитьTestClientИзТаблицыКлиентовТестирования(ДанныеЗапускаКлиентаТестирования.Имя);
КонецПроцедуры

&НаКлиенте
//И я устанавливаю текущему TestClient синоним "Синоним1"
//@ЯУстанавливаюТекущемуTestClientСиноним(Парам01)
Процедура ЯУстанавливаюТекущемуTestClientСиноним(Синоним) Экспорт
	Если НЕ КонтекстСохраняемый.Свойство("ПодключенныеTestClient") Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Нет подключенных TestClient.");
	КонецЕсли;	 
	Если НЕ КонтекстСохраняемый.Свойство("ТекущийПрофильTestClient") Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("Нет подключенных TestClient.");
	КонецЕсли;	 
	
	ТекущийПрофильTestClient = КонтекстСохраняемый.ТекущийПрофильTestClient;
	ПодключенныеTestClient   = КонтекстСохраняемый.ПодключенныеTestClient;
	
	
	Нашли = Ложь;
	ДанныеКлиентовТестирования = Ванесса.ДанныеКлиентовТестирования;
	Для Каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
		Если СтрокаДанныеКлиентовТестирования.Имя = ТекущийПрофильTestClient Тогда
			Нашли = Истина;
			СтрокаДанныеКлиентовТестирования.Синоним = Синоним; 
		КонецЕсли;	 
	КонецЦикла;	
	
	
	Для Каждого Элем Из ПодключенныеTestClient Цикл
		Если Элем.Имя = ТекущийПрофильTestClient Тогда
			Элем.Синоним = Синоним;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если Не Нашли Тогда
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Не нашли профиль <%1> в таблице TestClient.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ТекущийПрофильTestClient);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
//И я закрываю главное окно TestClient
//@ЯЗакрываюГлавноеОкноTestClient()
Процедура ЯЗакрываюГлавноеОкноTestClient() Экспорт
	Ванесса.ОбработатьСменуАктивногоОкна();
	
	Если НЕ КонтекстСохраняемый.Свойство("ГлавноеОкноТестируемого") Тогда
		ВызватьИсключение Ванесса.ПолучитьТекстСообщенияПользователю("TestClient НЕ подключен.");
	КонецЕсли;	 
	
	КонтекстСохраняемый.ГлавноеОкноТестируемого.Закрыть();
КонецПроцедуры

&НаКлиенте
//И в таблице клиентов тестирования я активизирую строку 'Этот клиент'
//@ВТаблицеКлиентовТестированияЯАктивизируюСтроку(Парам01)
Процедура ВТаблицеКлиентовТестированияЯАктивизируюСтроку(ИмяTestClient) Экспорт
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя",ИмяTestClient);
	МассивСтрок = Ванесса.ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Синоним",ИмяTestClient);
		МассивСтрок = Ванесса.ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	КонецЕсли;	 
	
	Если МассивСтрок.Количество() = 1 Тогда
		Ванесса.Элементы.ДанныеКлиентовТестирования.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
	КонецЕсли;	 
КонецПроцедуры


///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Automation
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Automation.
Перем КонтекстСохраняемый Экспорт;

// Делает отключение модуля
&НаКлиенте
Функция ОтключениеМодуля() Экспорт

	Ванесса = Неопределено;
	Контекст = Неопределено;
	КонтекстСохраняемый = Неопределено;

КонецФункции

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЗавершенияВыполненияВсехФоновыхЗаданийРасширение()","ЯЖдуЗавершенияВыполненияВсехФоновыхЗаданийРасширение","И Я жду завершения выполнения всех фоновых заданий (Расширение)","Ожидает завершения фоновых заданий на стороне клиента тестирования. Количество секунд ожидания определяется параметром ТаймаутДляАсинхронныхШагов (timeoutforasynchronoussteps). Необходимо, чтобы в клиенте тестирования было подключено расширение VAExtension.","Прочее.Расширение VAExtension.Ожидание завершения фоновых заданий");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЗавершенияВыполненияВсехФоновыхЗаданийВТечениеСекундРасширение()","ЯЖдуЗавершенияВыполненияВсехФоновыхЗаданийВТечениеСекундРасширение","И Я жду завершения выполнения всех фоновых заданий в течение 100 секунд (Расширение)","Ожидает завершения фоновых заданий на стороне клиента тестирования в течение указанного числа секунд. Необходимо, чтобы в клиенте тестирования было подключено расширение VAExtension.","Прочее.Расширение VAExtension.Ожидание завершения фоновых заданий");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯСохраняюНавигационнуюСсылкуТекущегоОкнаВПеременнуюРасширение(Парам01)","ЯСохраняюНавигационнуюСсылкуТекущегоОкнаВПеременнуюРасширение","И я сохраняю навигационную ссылку текущего окна в переменную ""ИмяПеременной"" (Расширение)","Сохраняет навигационную ссылку текущего окна в переменную. Необходимо, чтобы в клиенте тестирования было подключено расширение VAExtension.","Прочее.Расширение VAExtension.Навигационная ссылка окна");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯВыполняюКодВстроенногоЯзыкаРасширение(ТабПарам)",
		"ЯВыполняюКодВстроенногоЯзыкаРасширение",
		"И я выполняю код встроенного языка (Расширение)" + Символы.ПС 
		+ """""""bsl" + Символы.ПС 
		+ "	Сообщить(""Hello world."")" + Символы.ПС 
		+ """""""",
		"Выполняет произвольный клиентский код на стороне клиента тестирования." + Символы.ПС 
		+ "Необходимо, чтобы в клиенте тестирования было подключено расширение VAExtension версии 1.01 и выше." + Символы.ПС 
		+ "При выполнении открывается окно обработки ""Обработка.VAExtension_ВыполнитьПроизвольныйКод.Форма""",
		"Прочее.Расширение VAExtension.Встроенный язык");
		
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯВыполняюКодВстроенногоЯзыкаНаСервереРасширение(ТабПарам)",
		"ЯВыполняюКодВстроенногоЯзыкаНаСервереРасширение",
		"И я выполняю код встроенного языка на сервере (Расширение)" + Символы.ПС 
		+ """""""bsl" + Символы.ПС 
		+ "	Сообщить(""Hello world."")" + Символы.ПС 
		+ """""""",
		"Выполняет произвольный серверный код на стороне клиента тестирования." + Символы.ПС 
		+ "Необходимо, чтобы в клиенте тестирования было подключено расширение VAExtension версии 1.01 и выше." + Символы.ПС 
		+ "При выполнении открывается окно обработки ""Обработка.VAExtension_ВыполнитьПроизвольныйКод.Форма""",
		"Прочее.Расширение VAExtension.Встроенный язык");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗапоминаюЗначениеВыраженияВПеременнуюРасширение(Парам01,Парам02)",
		"ЯЗапоминаюЗначениеВыраженияВПеременнуюРасширение",
		"И Я запоминаю значение выражения 'ВыражениеВстроенногоЯзыка' в переменную ""ИмяПеременной"" (Расширение)",
		"Вычисляет произвольное выражение (клиент) на стороне клиента тестирования." + Символы.ПС 
		+ "Необходимо, чтобы в клиенте тестирования было подключено расширение VAExtension версии 1.01 и выше." + Символы.ПС 
		+ "При выполнении открывается окно обработки ""Обработка.VAExtension_ВыполнитьПроизвольныйКод.Форма""",
		"Прочее.Расширение VAExtension.Встроенный язык");
		
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗапоминаюЗначениеВыраженияНаСервереВПеременнуюРасширение(Парам01,Парам02)",
		"ЯЗапоминаюЗначениеВыраженияНаСервереВПеременнуюРасширение",
		"И Я запоминаю значение выражения на сервере 'ВыражениеВстроенногоЯзыка' в переменную ""ИмяПеременной"" (Расширение)",
		"Вычисляет произвольное выражение (сервер) на стороне клиента тестирования." + Символы.ПС 
		+ "Необходимо, чтобы в клиенте тестирования было подключено расширение VAExtension версии 1.01 и выше." + Символы.ПС 
		+ "При выполнении открывается окно обработки ""Обработка.VAExtension_ВыполнитьПроизвольныйКод.Форма""",
		"Прочее.Расширение VAExtension.Встроенный язык");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВывожуДанныеТекущегоОкнаРасширение()","ЯВывожуДанныеТекущегоОкнаРасширение","И я вывожу данные текущего окна (Расширение)","Выводит в макет данные текущего окна. Необходимо, чтобы в клиенте тестирования было подключено расширение VAExtension.","Прочее.Расширение VAExtension.Данные текущего окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюЗначениеТекущегоОкнаВПеременнуюРасширение(Парам01,Парам02)","ЯЗапоминаюЗначениеТекущегоОкнаВПеременнуюРасширение","И Я запоминаю значение текущего окна 'ВыражениеВстроенногоЯзыка' в переменную ""ИмяПеременной"" (Расширение)","Вычисляет вражение в контексте текущего окна. Позволяет получить произвольные данные из формы, объекта формы. Выражение пишется в виде ""_ТекущееОкно.Объект.ПометкаУдаления"" или ""_ТекущееОкно.ЭтаФорма.ТолькоПросмотр"" или ""_CurrentWindow.Object.DeletionMark"" и тому подобное. Необходимо, чтобы в клиенте тестирования было подключено расширение VAExtension.","Прочее.Расширение VAExtension.Данные текущего окна");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВыполняюВыражениеВТекущемОкнеРасширение(Парам01)","ЯВыполняюВыражениеВТекущемОкнеРасширение","И я выполняю выражение ""ВыражениеВстроенногоЯзыка"" в текущем окне (Расширение)","Позволяет установить значение текущего окна, если он доступно для записи. Также позволяет вызвать метод формы текущего окна. Выражение пишется в виде '_ТекущееОкно.Заголовок = ""Новый заголовок""' или '_CurrentWindow.Caption = ""New caption""' или '_ТекущееОкно.ОткрытьСправкуФормы()' или '_CurrentWindow.ОткрытьСправкуФормы()'. Необходимо, чтобы в клиенте тестирования было подключено расширение VAExtension.","Прочее.Расширение VAExtension.Установка данных текущего окна");
	
	// Проверка расширений
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"РасширениеСИменемУстановлено(Парам01)",
		"РасширениеСИменемУстановлено",
		"Дано расширение с именем ""ИмяРасширения"" установлено",
		"Проверяет существование в базе менеджера тестирования расширения с данным именем" + Символы.ПС + 
			"Вызывает исключение, если расширение отсутствует в текущей базе данных менеджера тестирования",
		"Прочее.Расширения");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"РасширениеСИменемОтсутствует(Парам01)",
		"РасширениеСИменемОтсутствует",
		"Дано расширение с именем ""ИмяРасширения"" отсутствует",
		"Проверяет что в базе менеджера тестирования расширения с данным именем не установлено" + Символы.ПС + 
			"Вызывает исключение, если расширение присутствует в текущей базе данных менеджера тестирования",
		"Прочее.Расширения");
	
	// Работа с расширениями без указания пользователя
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯУстанавливаюВДаннуюБазуРасширениеИзКаталогаИсходников(Парам01,Парам02)",
		"ЯУстанавливаюВДаннуюБазуРасширениеИзКаталогаИсходников",
		"И Я устанавливаю в данную базу расширение ""ИмяРасширения"" из каталога исходников ""КаталогРасширения""",
		"Загружает в базу, где запущен менеджер тестирования, расширение из исходных файлов с помощью пакетного запуска конфигуратора к этой же базе." + Символы.ПС +
			"Необходимо обеспечить наличие прав на установка расширения и запуск конфигуратора." + Символы.ПС +
			"Используется имя текущего пользователя в менеджере тестирования, используется пустой пароль",
		"Прочее.Расширения");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯУдаляюВДаннойБазеРасширение(Парам01)",
		"ЯУдаляюВДаннойБазеРасширение",
		"И Я удаляю в данной базе расширение ""ИмяРасширения""",
		"Удаляет расширение, где запущен менеджер тестирования, с помощью пакетного запуска конфигуратора к этой же базе." + Символы.ПС +
			"Необходимо обеспечить наличие прав на удаление расширения и запуск конфигуратора." + Символы.ПС +
			"Используется имя текущего пользователя в менеджере тестирования, используется пустой пароль",
		"Прочее.Расширения");

	// Работа с расширениями с указанием пользователя
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯУстанавливаюВДаннуюБазуРасширениеИзКаталогаИсходниковПодПользователемИПаролем(Парам01,Парам02,Парам03,Парам04)",
		"ЯУстанавливаюВДаннуюБазуРасширениеИзКаталогаИсходниковПодПользователемИПаролем",
		"И Я устанавливаю в данную базу расширение ""ИмяРасширения"" из каталога исходников ""КаталогРасширения"" под пользователем ""Администратор"" и паролем ""12345678""",
		"Загружает в базу, где запущен менеджер тестирования, расширение из исходных файлов с помощью пакетного запуска конфигуратора к этой же базе." + Символы.ПС +
			"Необходимо обеспечить наличие прав на установка расширения и запуск конфигуратора." + Символы.ПС +
			"Пример И Я устанавливаю в данную базу расширение ""VAExtension"" из каталога ""$КаталогИнструментов$\lib\VAExtension"" под пользователем ""Администратор"" и паролем ""12345678""",
		"Прочее.Расширения");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯУдаляюВДаннойБазеРасширениеПодПользователемИПаролем(Парам01,Парам02,Парам03)",
		"ЯУдаляюВДаннойБазеРасширениеПодПользователемИПаролем",
		"И Я удаляю в данной базе расширение ""ИмяРасширения"" под пользователем ""Администратор"" и паролем ""12345678""",
		"Удаляет расширение, где запущен менеджер тестирования, с помощью пакетного запуска конфигуратора к этой же базе." + Символы.ПС +
			"Необходимо обеспечить наличие прав на удаление расширения и запуск конфигуратора.",
		"Прочее.Расширения");
	
	// Настройка расширений
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"УРасширенияЯСнимаюФлаги(Парам01,ТабПарам)",
		"УРасширенияЯСнимаюФлаги",
		"И у расширения ""ИмяРасширения"" я снимаю флаги",
		"Снимает переданные в таблице флаги у указанного расширения." + Символы.ПС +
			"Необходимо обеспечить наличие прав на управление расширениями" + Символы.ПС +
			"Пример:" + Символы.ПС +
			"И у расширения ""VAExtension"" я снимаю флаги" + Символы.ПС +
			"  |'БезопасныйРежим'|" + Символы.ПС +
			"  |'ЗащитаОтОпасныхДействий'|" + Символы.ПС +
			"  |'ИспользоватьОсновныеРолиДляВсехПользователей'|",
		"Прочее.Расширения");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"УРасширенияЯУстанавливаюФлаги(Парам01,ТабПарам)",
		"УРасширенияЯУстанавливаюФлаги",
		"И у расширения ""ИмяРасширения"" я устанавливаю флаги",
		"Устанавливает переданные в таблице флаги у указанного расширения." + Символы.ПС +  
			"Необходимо обеспечить наличие прав на управление расширениями" + Символы.ПС +
			"Пример:" + Символы.ПС +
			"И у расширения ""VAExtension"" я устанавливаю флаги" + Символы.ПС +
			"  |'БезопасныйРежим'|" + Символы.ПС +
			"  |'ЗащитаОтОпасныхДействий'|" + Символы.ПС +
			"  |'ИспользоватьОсновныеРолиДляВсехПользователей'|",
		"Прочее.Расширения");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрываюОкноФункцииДляТехническогоСпециалистаРасширение()","ЯОткрываюОкноФункцииДляТехническогоСпециалистаРасширение","И я открываю окно функции для технического специалиста (расширение)","Открывает окно ""Функции для технического специалиста"". Необходимо, чтобы в клиенте тестирования было подключено расширение VAExtension.","Прочее.Расширение VAExtension.Функции для технического специалиста");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрываюОкноНастройкаНачальнойСтраницыРасширение()","ЯОткрываюОкноНастройкаНачальнойСтраницыРасширение","И я открываю окно настройка начальной страницы (расширение)","Открывает окно ""Настройка начальной страницы"". Необходимо, чтобы в клиенте тестирования было подключено расширение VAExtension.","Прочее.Расширение VAExtension.Настройка начальной страницы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеТекущегоОкнаЯУстанавливаюСортировкуПоКолонкеПоВозрастаниюРасширение(Парам01,Парам02)","ВТаблицеТекущегоОкнаЯУстанавливаюСортировкуПоКолонкеПоВозрастаниюРасширение","И в таблице ""ИмяТаблицы"" текущего окна я устанавливаю сортировку по колонке ""ИмяКолонки"" по возрастанию (расширение)","Устанавливает сортировку таблицы текущего окна по возрастанию. Имя таблицы указывается как в конфигураторе. Имя колонки указывается как в конфигураторе. Необходимо, чтобы в клиенте тестирования было подключено расширение VAExtension.","Прочее.Расширение VAExtension.Сортировка таблицы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВТаблицеТекущегоОкнаЯУстанавливаюСортировкуПоКолонкеПоУбываниюРасширение(Парам01,Парам02)","ВТаблицеТекущегоОкнаЯУстанавливаюСортировкуПоКолонкеПоУбываниюРасширение","И в таблице ""ИмяТаблицы"" текущего окна я устанавливаю сортировку по колонке ""ИмяКолонки"" по убыванию (расширение)","Устанавливает сортировку таблицы текущего окна по убыванию. Имя таблицы указывается как в конфигураторе. Имя колонки указывается как в конфигураторе. Необходимо, чтобы в клиенте тестирования было подключено расширение VAExtension.","Прочее.Расширение VAExtension.Сортировка таблицы");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОчищаюТабличныйДокументРасширение(Парам01)","ЯОчищаюТабличныйДокументРасширение","И я очищаю табличный документ ""ИмяРеквизита"" (расширение)","Выполняет очистку табличного документа, который находися в отчете, печатной форме и так далее. Необходимо, чтобы в клиенте тестирования было подключено расширение VAExtension.","Прочее.Расширение VAExtension.Очистка табличного документа");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляСИменемЯНажимаюГиперссылкуПоНомеруРасширение(Парам01,Парам02)","УПоляСИменемЯНажимаюГиперссылкуПоНомеруРасширение","И у поля с именем ""ИмяЭлемента"" я нажимаю гиперссылку по номеру 0 (расширение)","Нажимает на гиперссылку в поле HTML документа. Гиперссылка ищется по номеру, начиная с нуля.","Прочее.Расширение VAExtension.Гиперссылки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляСИменемЯНажимаюГиперссылкуПоПредставлениюРасширение(Парам01,Парам02)","УПоляСИменемЯНажимаюГиперссылкуПоПредставлениюРасширение","И у поля с именем ""ИмяЭлемента"" я нажимаю гиперссылку по представлению ""ЧастьПредставленияСсылки"" (расширение)","Нажимает на гиперссылку в поле HTML документа. Гиперссылка ищется по её представлению. Возможно указывать часть представления гиперссылки.","Прочее.Расширение VAExtension.Гиперссылки");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляСИменемЯНажимаюГиперссылкуПоЗначениюРасширение(Парам01,Парам02)","УПоляСИменемЯНажимаюГиперссылкуПоЗначениюРасширение","И у поля с именем ""ИмяЭлемента"" я нажимаю гиперссылку по значению ""ЧастьЗначенияСсылки"" (расширение)","Нажимает на гиперссылку в поле HTML документа. Гиперссылка ищется по её значению. Возможно указывать часть значения гиперссылки.","Прочее.Расширение VAExtension.Гиперссылки");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ФормаТекущегоОкнаИмеетПризнакМодифицированностиРасширение()","ФормаТекущегоОкнаИмеетПризнакМодифицированностиРасширение","И форма текущего окна имеет признак модифицированности (расширение)","Проверяет, что форма текущего окна имеет признак модифицированности.","Прочее.Расширение VAExtension.Модифицированность");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ФормаТекущегоОкнаНеИмеетПризнакМодифицированностиРасширение()","ФормаТекущегоОкнаНеИмеетПризнакМодифицированностиРасширение","И форма текущего окна не имеет признак модифицированности (расширение)","Проверяет, что форма текущего окна не имеет признак модифицированности.","Прочее.Расширение VAExtension.Модифицированность");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ФормаТекущегоОкнаИмеетПризнакТолькоПросмотрРасширение()","ФормаТекущегоОкнаИмеетПризнакТолькоПросмотрРасширение","И форма текущего окна имеет признак только просмотр (расширение)","Проверяет, что форма текущего окна имеет признак только просмотр.","Прочее.Расширение VAExtension.ТолькоПросмотр");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ФормаТекущегоОкнаНеИмеетПризнакТолькоПросмотрРасширение()","ФормаТекущегоОкнаНеИмеетПризнакТолькоПросмотрРасширение","И форма текущего окна не имеет признак только просмотр (расширение)","Проверяет, что форма текущего окна не имеет признак только просмотр.","Прочее.Расширение VAExtension.ТолькоПросмотр");

	// Нажатие кнопок HTML
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляСИменемЯНажимаюКнопкуHTMLПоНомеруРасширение(Парам01,Парам02)","УПоляСИменемЯНажимаюКнопкуHTMLПоНомеруРасширение","И у поля с именем ""ИмяЭлемента"" я нажимаю кнопку HTML по номеру 0 (расширение)","Нажимает на кнопку в поле HTML документа. Кнопка ищется по номеру, начиная с нуля.","Прочее.Расширение VAExtension.КнопкиHTML");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УПоляСИменемЯНажимаюКнопкуHTMLПоИмениРасширение(Парам01,Парам02)","УПоляСИменемЯНажимаюКнопкуHTMLПоИмениРасширение","И у поля с именем ""ИмяЭлемента"" я нажимаю кнопку HTML по имени ""ИмяКнопкиHTML"" (расширение)","Нажимает на кнопку в поле HTML документа. Кнопка ищется по её имени (name).","Прочее.Расширение VAExtension.КнопкиHTML");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПолучаюСостояниеТекущегоОбъектаРасширение()","ЯПолучаюСостояниеТекущегоОбъектаРасширение","И я получаю состояние текущего объекта (Расширение)","Получает состояние документа или элемента справочника текущего окна. Создаёт переменные: ТипЭлемента(Справочник,Документ),ПометкаУдаления(Истина,Ложь),Проведен(Истина,Ложь),Дата,Номер,Код,ЗаголовокОкна","Прочее.Расширение VAExtension.Состояние текущего окна");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрываюВнешнююОбработкуИлиОтчетРасширение(Парам01)","ЯОткрываюВнешнююОбработкуИлиОтчетРасширение","И я открываю внешнюю обработку или отчет ""ИмяФайла"" (Расширение)","Открывает внешнюю обработку или отчет с помощью расширения VAExtension.","Прочее.Расширение VAExtension.Открыть внешнюю обработку или отчет");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗапоминаюЭлементФормыКлиентаТестированияВПеременнуюUIAutomationРасширение(Парам01,Парам02)",
		"ЯЗапоминаюЭлементФормыКлиентаТестированияВПеременнуюUIAutomationрасширение",
		"И я запоминаю элемент формы клиента тестирования ""Заголовок"" в переменную ""ИмяПеременной"" UI Automation (расширение)",
		"Запоминает ID UI Automation элемента формы клиента тестирования с указанным заголовком в переменную.",
		"Прочее.UI Automation.Запомнить ID элемента");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗапоминаюЭлементФормыКлиентаТестированияСИменемВПеременнуюUIAutomationРасширение(Парам01,Парам02)",
		"ЯЗапоминаюЭлементФормыКлиентаТестированияСИменемВПеременнуюUIAutomationрасширение",
		"И я запоминаю элемент формы клиента тестирования с именем ""ИмяЭлемента"" в переменную ""ИмяПеременной"" UI Automation (расширение)",
		"Запоминает ID UI Automation элемента формы клиента тестирования с указанным именем в переменную.",
		"Прочее.UI Automation.Запомнить ID элемента");
	
	
	// Шаги для генерации ШК ЦРПТ (Честный знак)
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
			"ЯГенерируюКодМаркировкиЧестногоЗнакаДляGTINТипаВПеременнуюРасширение(Парам01,Парам02,Парам03)",
			"ЯГенерируюКодМаркировкиЧестногоЗнакаДляGTINТипаВПеременнуюРасширение",
			"И я генерирую код маркировки честного знака для GTIN ""GTIN"" типа ""ТипКМ"" в переменную ""ИмяПеременной"" (расширение)",
			"Генерирует код маркировки и сохраняет его в в переменную."+ Символы.ПС 
				+ "Типы КМ: 5, 23, 30, 31 (информацию о типах смотри в документации API СУЗ ОБЛАКО)",
			"Прочее.Расширение VAExtension.Оборудование");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
			"ЯГенерируюSSCCЧестногоЗнакаДляGS1УровняВПеременнуюРасширение(Парам01,Парам02,Парам03)",
			"ЯГенерируюSSCCЧестногоЗнакаДляGS1УровняВПеременнуюРасширение",
			"И я генерирую SSCC честного знака для GS1 ""GS1"" уровня ""1"" в переменную ""ИмяПеременной"" (расширение)",
			"Генерирует код упаковки SSCC и сохраняет его в переменную.",
			"Прочее.Расширение VAExtension.Оборудование");
				
	// шаги работы через буфер обмена
	// Эмуляция работы сканера штрихкода через буфер
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
			"ЯЭмулируюСканированиеШтрихкодаБПОЧерезБуферОбмена(Парам01)",
			"ЯЭмулируюСканированиеШтрихкодаБПОЧерезБуферОбмена",
			"И я эмулирую сканирование штрихкода БПО ""4670003110011"" через буфер обмена",
			"Эмуляция сканирования штрихкода (эмуляция вызова БПО)" + Символы.ПС 
			+ "можно использовать тег ""\x_GS"" для передачи символа FNC1(29)" + Символы.ПС  
			+ " К примеру:" + Символы.ПС 
			+ "   И я эмулирую сканирование штрихкода БПО ""4670003110011"" через буфер обмена" + Символы.ПС 
			+ "   И я эмулирую сканирование штрихкода БПО ""https://github.com/Pr-Mex/vanessa-automation"" через буфер обмена" + Символы.ПС 
			+ "   И я эмулирую сканирование штрихкода БПО ""0146700031100112112345\x_GS941234"" через буфер обмена" + Символы.ПС 
			+ "Использовать в тестируемом приложении VAExtension версии 1.02 и выше только под ОС Windows" + Символы.ПС 
			+ "В расширении требуется отключить безопасный режим и защиту от опасных действий." + Символы.ПС 
			+ "Используется эмуляция вызова 1С:Библиотека подключаемого оборудования",
			"Прочее.Расширение VAExtension.Оборудование"); 	
			
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
			"ЯВыполняюКодВстроенногоЯзыкаНаКлиентеЧерезБуферОбменаРасширение(ТабПарам)",
			"ЯВыполняюКодВстроенногоЯзыкаНаКлиентеЧерезБуферОбменаРасширение",
			"И я выполняю код встроенного языка на клиенте через буфер обмена (Расширение)" + Символы.ПС 
			+ """""""bsl" + Символы.ПС 
			+ "	Сообщить(""Hello world."")" + Символы.ПС 
			+ """""""",
			"Выполняет произвольный код на стороне клиента в тестируемом приложении." + Символы.ПС 
			+ "Необходимо, чтобы в клиенте тестирования было подключено расширение VAExtension 1.03 и выше." + Символы.ПС 
			+ "Код выполняется через вызов команды, таким образом он работает без смены активного окна" + Символы.ПС 
			+ "Передача кода идет через буфер обмена, буфер обмена не очищается",
			"Прочее.Расширение VAExtension.Встроенный язык");
			
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
			"ЯВыполняюКодВстроенногоЯзыкаНаСервереЧерезБуферОбменаРасширение(ТабПарам)",
			"ЯВыполняюКодВстроенногоЯзыкаНаСервереЧерезБуферОбменаРасширение",
			"И я выполняю код встроенного языка на сервере через буфер обмена (Расширение)" + Символы.ПС 
			+ """""""bsl" + Символы.ПС 
			+ "	Сообщить(""Hello world."")" + Символы.ПС 
			+ """""""",
			"Выполняет произвольный код на стороне сервера в тестируемом приложении." + Символы.ПС 
			+ "Необходимо, чтобы в клиенте тестирования было подключено расширение VAExtension 1.03 и выше." + Символы.ПС 
			+ "Код выполняется через вызов команды, таким образом он работает без смены активного окна" + Символы.ПС 
			+ "Передача кода идет через буфер обмена, буфер обмена не очищается",
			"Прочее.Расширение VAExtension.Встроенный язык");
			
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
			"ЯВыполняюКодВстроенногоЯзыкаНаСервереЧерезБуферОбменаВПривилегированномРежимеРасширение(ТабПарам)",
			"ЯВыполняюКодВстроенногоЯзыкаНаСервереЧерезБуферОбменаВПривилегированномРежимеРасширение",
			"И я выполняю код встроенного языка на сервере через буфер обмена в привилегированном режиме (Расширение)" + Символы.ПС 
			+ """""""bsl" + Символы.ПС 
			+ "	Сообщить(""Hello world."")" + Символы.ПС 
			+ """""""",
			"Выполняет произвольный код на стороне сервера в привилегированном режиме в тестируемом приложении." + Символы.ПС 
			+ "Необходимо, чтобы в клиенте тестирования было подключено расширение VAExtension 1.03 и выше." + Символы.ПС 
			+ "Код выполняется через вызов команды, таким образом он работает без смены активного окна" + Символы.ПС 
			+ "Передача кода идет через буфер обмена, буфер обмена не очищается",
			"Прочее.Расширение VAExtension.Встроенный язык");
			
	//		
	//Шаги работы через генерацию внешнего события через файл
	//
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
			"ЯЗапускаюМониторингКаталогаДляВнешнихСобытийРасширение(Парам)",
			"ЯЗапускаюМониторингКаталогаДляВнешнихСобытийРасширение",
			"И я запускаю мониторинг каталога ""C:\temp"" для внешних событий(Расширение)",
			"Запускает мониторинг тестируемым приложением каталога с файлами, которые описывают вызов внешних событий" + Символы.ПС 
			+ ПолучитьОбщийТекстОписанияСистемыВнешнихСобытия(),
			"Прочее.Расширение VAExtension.ВнешниеСобытия");			
			
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
			"ЯОстанавливаюМониторингКаталогаВнешнихСобытийРасширение(Парам)",
			"ЯОстанавливаюМониторингКаталогаВнешнихСобытийРасширение",
			"И я Останавливаю мониторинг каталога ""C:\temp"" внешних событий(Расширение)",
			"Останавливает мониторинг тестируемым приложением каталога с файлами, которые описывают вызов внешних событий" + Символы.ПС 
			+ "Необходимо, чтобы в клиенте тестирования было подключено расширение VAExtension 1.04 и выше.",
			"Прочее.Расширение VAExtension.ВнешниеСобытия");			
			
	// Эмуляция работы сканера штрихкода через файлы события 
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
			"ЯЭмулируюСканированиеШтрихкодаБПОЧерезФайлСобытияРасширение(Парам01)",
			"ЯЭмулируюСканированиеШтрихкодаБПОЧерезФайлСобытияРасширение",
			"И я эмулирую сканирование штрихкода БПО ""4670003110011"" через файл события (Расширение)",
			"Эмуляция сканирования штрихкода (эмуляция вызова БПО)" + Символы.ПС 
			+ "можно использовать тег ""\x_GS"" для передачи символа FNC1(29)" + Символы.ПС  
			+ " К примеру:" + Символы.ПС 
			+ "   И я эмулирую сканирование штрихкода БПО ""4670003110011"" через файл события (Расширение)" + Символы.ПС 
			+ "   И я эмулирую сканирование штрихкода БПО ""https://github.com/Pr-Mex/vanessa-automation"" через файл события (Расширение)" + Символы.ПС 
			+ "   И я эмулирую сканирование штрихкода БПО ""0146700031100112112345\x_GS941234"" через файл события (Расширение)" + Символы.ПС 
			+ Символы.ПС
			+ "Используется эмуляция вызова 1С:Библиотека подключаемого оборудования" + Символы.ПС
			+ Символы.ПС
			+ "При вызове шага:" + Символы.ПС
			+ "	   И я ожидаю ""10"" секунд результат обработки последнего события через файл и запоминаю результат в переменную ""ИмяПеременной""(Расширение)" + Символы.ПС
			+ "переменная указанная в шаге будет содержать значение штрихкода" + Символы.ПС
			+ ПолучитьОбщийТекстОписанияСистемыВнешнихСобытия(),			
			"Прочее.Расширение VAExtension.Оборудование"); 	
			
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
			"ЯВыполняюКодВстроенногоЯзыкаНаКлиентеЧерезФайлСобытияРасширение(ТабПарам)",
			"ЯВыполняюКодВстроенногоЯзыкаНаКлиентеЧерезФайлСобытияРасширение",
			"И я выполняю код встроенного языка на клиенте через файл события (Расширение)" + Символы.ПС 
			+ """""""bsl" + Символы.ПС 
			+ "	Сообщить(""Hello world."")" + Символы.ПС 
			+ """""""",
			"Выполняет произвольный код на стороне клиента в тестируемом приложении." + Символы.ПС 
			+ Символы.ПС
			+ ПолучитьТекстОписанияПолученияРезультатаСистемыВнешнихСобытия()
			+ Символы.ПС
			+ ПолучитьОбщийТекстОписанияСистемыВнешнихСобытия(),
			"Прочее.Расширение VAExtension.Встроенный язык");
			
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
			"ЯВыполняюКодВстроенногоЯзыкаНаСервереЧерезФайлСобытияРасширение(ТабПарам)",
			"ЯВыполняюКодВстроенногоЯзыкаНаСервереЧерезФайлСобытияРасширение",
			"И я выполняю код встроенного языка на сервере через файл события (Расширение)" + Символы.ПС 
			+ """""""bsl" + Символы.ПС 
			+ "	Сообщить(""Hello world."")" + Символы.ПС 
			+ """""""",
			"Выполняет произвольный код на стороне сервера в тестируемом приложении." + Символы.ПС 
			+ Символы.ПС
			+ ПолучитьТекстОписанияПолученияРезультатаСистемыВнешнихСобытия()
			+ Символы.ПС
			+ ПолучитьОбщийТекстОписанияСистемыВнешнихСобытия(),
			"Прочее.Расширение VAExtension.Встроенный язык");
			
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
			"ЯВыполняюКодВстроенногоЯзыкаНаСервереЧерезФайлСобытияВПривилегированномРежимеРасширение(ТабПарам)",
			"ЯВыполняюКодВстроенногоЯзыкаНаСервереЧерезФайлСобытияВПривилегированномРежимеРасширение",
			"И я выполняю код встроенного языка на сервере через файл события в привилегированном режиме (Расширение)" + Символы.ПС 
			+ """""""bsl" + Символы.ПС 
			+ "	Сообщить(""Hello world."")" + Символы.ПС 
			+ """""""",
			"Выполняет произвольный код на стороне сервера в привилегированном режиме в тестируемом приложении." + Символы.ПС 
			+ Символы.ПС
			+ ПолучитьТекстОписанияПолученияРезультатаСистемыВнешнихСобытия()
			+ Символы.ПС
			+ ПолучитьОбщийТекстОписанияСистемыВнешнихСобытия(),
			"Прочее.Расширение VAExtension.Встроенный язык");
			
	// Вызов внешнего события через расширение			
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
			"ЯВызываюВнешнееСобытиеССобытиемСДаннымиЧерезФайлСобытияРасширение(Парам01,Парам02,Парам03)",
			"ЯВызываюВнешнееСобытиеССобытиемСДаннымиЧерезФайлСобытияРасширение",
			"И я вызываю внешнее событие ""Источник"" с событием ""Событие"" с данными ""Данные"" через файл события (Расширение)",
			"Генерирует событие в файл в каталоге событий. Тестируемое приложение эмулирует вызов внешнего события от компоненты" + Символы.ПС 
	 		+ Символы.ПС
			+ "Пример вызова внешнего события с эмуляцией сканера штрихкода:" + Символы.ПС
			+ "	  И я вызываю внешнее событие ""InputDevice#1"" с событием ""Штрихкод"" с данными ""4670003110011"" через файл события (Расширение)"
			+ Символы.ПС
			+ ПолучитьТекстОписанияПолученияРезультатаСистемыВнешнихСобытия()
			+ Символы.ПС
			+ ПолучитьОбщийТекстОписанияСистемыВнешнихСобытия(),
			"Прочее.Расширение VAExtension.ВнешниеСобытия");
			
	// Получение результата			
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
			"ЯОжидаюСекундРезультатОбработкиПоследнегоСобытияЧерезФайлИЗапоминаюРезультатВПеременнуюРасширение(Парам01,Парам02)",
			"ЯОжидаюСекундРезультатОбработкиПоследнегоСобытияЧерезФайлИЗапоминаюРезультатВПеременнуюРасширение",
			"И я ожидаю ""10"" секунд результат обработки последнего события через файл и запоминаю результат в переменную ""ИмяПеременной""(Расширение)",
			"Ожидает заданное количество секунд результат обработки последнего события." + Символы.ПС
			+ "Если это было событие выполнения кода, то в переменную вернётся значение переменной ""Результат"" из тестируемого приложения." + Символы.ПС 
			+ "Если это было событие эмуляции внешнего события, то результат будет содержать строку ""Событие было обработано""" + Символы.ПС 
			+ "Если это было событие эмуляции сканера штрихкода, то результат будет содержать штрихкод" + Символы.ПС 
			+ Символы.ПС 
			+ ПолучитьОбщийТекстОписанияСистемыВнешнихСобытия(),
			"Прочее.Расширение VAExtension.ВнешниеСобытия");
			
			
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯВыполняюПроведениеДокументаПоНавигационнойСсылкеРасширение(Парам01)",
		"ЯВыполняюПроведениеДокументаПоНавигационнойСсылкеРасширение",
		"И я выполняю проведение документа по навигационной ссылке ""НавСсылка"" (расширение)",
		"Программно проводит документ по его навигационной ссылке. При этом форма документа не открывается.",
		"Прочее.Расширение VAExtension.Провести документ программно");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯВыполняюПроведениеДокументаПоНавигационнойСсылкеИПолучаюОшибкуРасширение(Парам01,Парам02)",
		"ЯВыполняюПроведениеДокументаПоНавигационнойСсылкеИПолучаюОшибкуРасширение",
		"И я выполняю проведение документа по навигационной ссылке ""НавСсылка"" и получаю ошибку ""ТекстОшибки"" (расширение)",
		"Программно проводит документ по его навигационной ссылке и ожидает получить определенный текст ошибки. При этом форма документа не открывается.",
		"Прочее.Расширение VAExtension.Провести документ программно");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯВыполняюПроведениеДокументаПоНавигационнойСсылкеИПолучаюОшибкуПоШаблонуРасширение(Парам01,Парам02)",
		"ЯВыполняюПроведениеДокументаПоНавигационнойСсылкеИПолучаюОшибкуПоШаблонуРасширение",
		"И я выполняю проведение документа по навигационной ссылке ""НавСсылка"" и получаю ошибку ""ТекстОшибки"" по шаблону (расширение)",
		"Программно проводит документ по его навигационной ссылке и ожидает получить определенный текст ошибки. При этом форма документа не открывается. Допустимо использовать символы *.",
		"Прочее.Расширение VAExtension.Провести документ программно");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯОтменяюПроведениеДокументаПоНавигационнойСсылкеРасширение(Парам01)",
		"ЯОтменяюПроведениеДокументаПоНавигационнойСсылкеРасширение",
		"И я отменяю проведение документа по навигационной ссылке ""НавСсылка"" (расширение)",
		"Программно распроводит документ по его навигационной ссылке. При этом форма документа не открывается.",
		"Прочее.Расширение VAExtension.Отменить проведение документа программно");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯОтменяюПроведениеДокументаПоНавигационнойСсылкеИПолучаюОшибкуРасширение(Парам01,Парам02)",
		"ЯОтменяюПроведениеДокументаПоНавигационнойСсылкеИПолучаюОшибкуРасширение",
		"И я отменяю проведение документа по навигационной ссылке ""НавСсылка"" и получаю ошибку ""ТекстОшибки"" (расширение)",
		"Программно распроводит документ по его навигационной ссылке и ожидает получить определенный текст ошибки. При этом форма документа не открывается.",
		"Прочее.Расширение VAExtension.Отменить проведение документа программно");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯОтменяюПроведениеДокументаПоНавигационнойСсылкеИПолучаюОшибкуПоШаблонуРасширение(Парам01,Парам02)",
		"ЯОтменяюПроведениеДокументаПоНавигационнойСсылкеИПолучаюОшибкуПоШаблонуРасширение",
		"И я отменяю проведение документа по навигационной ссылке ""НавСсылка"" и получаю ошибку ""ТекстОшибки"" по шаблону (расширение)",
		"Программно распроводит документ по его навигационной ссылке и ожидает получить определенный текст ошибки. При этом форма документа не открывается. Допустимо использовать символы *.",
		"Прочее.Расширение VAExtension.Отменить проведение документа программно");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯОтменяюПроведениеВсехДокументовЭтогоСценарияПоИхНавигационнымСсылкамРасширение()",
		"ЯОтменяюПроведениеВсехДокументовЭтогоСценарияПоИхНавигационнымСсылкамРасширение",
		"И я отменяю проведение всех документов этого сценария по их навигационным ссылкам (расширение)",
		"Ищет в данном сценарии все шаги, в параметрах которых есть навигационные ссылки на документы и распроводит эти документы, если они проведены.
		|Поиск документов происходит как среди уже выполненых шагов так и среди шагов, которые ещё будут выполняться.
		|Если какие-то документы не получится распровести будет вызвано исключение.",
		"Прочее.Расширение VAExtension.Отменить проведение документов программно");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВариантОтчетаРавенМакетуРасширение(Парам01,Парам02,Парам03)",
		"ВариантОтчетаРавенМакетуРасширение",
		"И вариант отчета ""ИмяОтчета"" ""ИмяВариантаОтчета"" равен макету ""ИмяЭталона"" (расширение)",
		"Программно получает отчет по имени отчета и имени вариант отчета без открытия формы. Затем сравнивает с эталоном.",
		"Прочее.Расширение VAExtension.Проверить вариант отчета программно");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ВариантОтчетаРавенМакетуПоШаблонуРасширение(Парам01,Парам02,Парам03)",
		"ВариантОтчетаРавенМакетуПоШаблонуРасширение",
		"И вариант отчета ""ИмяОтчета"" ""ИмяВариантаОтчета"" равен макету ""ИмяЭталона"" по шаблону (расширение)",
		"Программно получает отчет по имени отчета и имени вариант отчета без открытия формы. Затем сравнивает с эталоном.",
		"Прочее.Расширение VAExtension.Проверить вариант отчета программно");
			
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯПолучаюСостояниеОбъектаПоНавигационнойСсылкеРасширение(Парам01)",
		"ЯПолучаюСостояниеОбъектаПоНавигационнойСсылкеРасширение",
		"И я получаю состояние объекта по навигационной ссылке ""НавСсылка"" (расширение)",
		"Получает состояние документа или элемента справочника по навигационной ссылке. Создаёт переменные: ТипЭлемента(Справочник,Документ),ПометкаУдаления(Истина,Ложь),Проведен(Истина,Ложь),Дата,Номер,Код.",
		"Прочее.Расширение VAExtension.Получить состояние документа или элемента справочника программно");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюНавигационнуюСсылкуТекущегоОкнаДляУдаленияРасширение()",
		"ЯЗапоминаюНавигационнуюСсылкуТекущегоОкнаДляУдаленияРасширение",
		"И я запоминаю навигационную ссылку текущего окна для удаления (расширение)",
		"Запоминает навигационную ссылку текущего окна в переменную ""LinksToDelete"" типа массив.
		|Предполагается, что далее в сценарии будет использоваться шаг:
		|И я устанавливаю пометку удаления объектам, указанным к удалению (расширение)",
		"Прочее.Расширение VAExtension.Запомнить навигационную ссылку текущего окна для удаления объекта в будущем");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюНавигационнуюСсылкуДляУдаленияРасширение(Парам01)",
		"ЯЗапоминаюНавигационнуюСсылкуДляУдаленияРасширение",
		"И я запоминаю навигационную ссылку ""НавСсылка"" для удаления (расширение)",
		"Запоминает переданную навигационную ссылку в переменную ""LinksToDelete"" типа массив.
		|Предполагается, что далее в сценарии будет использоваться шаг:
		|И я устанавливаю пометку удаления объектам, указанным к удалению (расширение)",
		"Прочее.Расширение VAExtension.Запомнить навигационную ссылку текущего окна для удаления объекта в будущем");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУстанавливаюПометкуУдаленияОбъектамУказаннымКУдалениюРасширение()",
		"ЯУстанавливаюПометкуУдаленияОбъектамУказаннымКУдалениюРасширение",
		"И я устанавливаю пометку удаления объектам, указанным к удалению (расширение)",
		"Устанавливает пометку удаления объектам, указанным в переменной LinksToDelete, типа массив.",
		"Прочее.Расширение VAExtension.Запомнить навигационную ссылку текущего окна для удаления объекта в будущем");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПолучаюДанныеОПодключенныхРасширенияхКлиентаТестированияРасширение()",
		"ЯПолучаюДанныеОПодключенныхРасширенияхКлиентаТестированияРасширение",
		"И я получаю данные о подключенных расширениях клиента тестирования (Расширение)",
		"Получает данные об установелнных расширениях и создаёт для каждого расширения переменную:
		|Имя: Extension_ИмяРасширения
		|Тип: Структура, содержащая свойства Name, Synonym, UID, Version, SafeMode, Active.",
		"Прочее.Расширение VAExtension.Установленные расширения клиента тестирования");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯОткрываюТекстовыйФайлРасширение(Парам01,Парам02)",
		"ЯОткрываюТекстовыйФайлРасширение",
		"И я открываю текстовый файл ""ИмяФайла"" ""ТипФайла"" (расширение)",
		"Открывает текстовый файл в сеансе клиента тестирования как будто это сделал пользователь.
		|В необязательный параметр ""ТипФайла"" передаётся кодировка файла, например, ""UTF-8"".",
		"Прочее.Расширение VAExtension.Открыть файл");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯОткрываюТабличныйДокументРасширение(Парам01)",
		"ЯОткрываюТабличныйДокументРасширение",
		"И я открываю табличный документ ""ИмяФайла"" (расширение)",
		"Открывает табличный в сеансе клиента тестирования как будто это сделал пользователь.",
		"Прочее.Расширение VAExtension.Открыть файл");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯОтключаюОбновлениеТекстаРедактированияПолейВТекущемОкнеРасширение()",
		"ЯОтключаюОбновлениеТекстаРедактированияПолейВТекущемОкнеРасширение",
		"И я отключаю обновление текста редактирования полей в текущем окне (расширение)",
		"Существует проблема, что при синхронизации состояния формы после завершения серверного вызова, может затираться текст, который в данный момент редактирует пользователь.
		|В тестах это может проявляться так, что тест ввёл значение в поле, но до того как он начал работать с другим полем данное значение было возвращено в предыдущее состояние.
		|Данный шаг меняет свойство ""ОбновлениеТекстаРедактирования"" у полей формы, чтобы избежать этого эффекта.",
		"Прочее.Расширение VAExtension.Затирание текста редактирования");
	
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,
		"ЯЗапоминаюВерсиюКонфигурацииКакрасширение(Парам01,Парам02)",
		"ЯЗапоминаюВерсиюКонфигурацииКакрасширение",
		"И я запоминаю версию конфигурации ""УправлениеТорговлей"" как ""Версия"" (расширение)",
		"Для типовых конфигураций. Требует наличия в конфигурации регистра сведений ""ВерсииПодсистем""",
		"Прочее.Расширение VAExtension.Получить версию конфигурации");
	
	
	Возврат ВсеТесты;
	
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции


Функция ПолучитьТекстОписанияПолученияРезультатаСистемыВнешнихСобытия()
	
	Возврат "" + Символы.ПС
			+ "При вызове шага:" + Символы.ПС
			+ "	   И я ожидаю ""10"" секунд результат обработки последнего события через файл и запоминаю результат в переменную ""ИмяПеременной""(Расширение)" + Символы.ПС
			+ "переменная указанная в шаге будет содержать значение из переменной ""Результат"" (более подробно см. в шаге)" + Символы.ПС;
			
КонецФункции	

Функция ПолучитьОбщийТекстОписанияСистемыВнешнихСобытия()
	
	Возврат "" + Символы.ПС
			+ "- Необходимо, чтобы в клиенте тестирования было подключено расширение VAExtension 1.04 и выше." + Символы.ПС 
			+ "- Код выполняется только через вызов модуля приложения" + Символы.ПС 
			+ "- Работает при открытом модальном окне" + Символы.ПС 
			+ Символы.ПС
			+ "- Для работы шага требуется предварительно запустить мониторинг каталога с событиями на стороне тестируемого приложения" + Символы.ПС
			+ "  Шаг запуска:" + Символы.ПС
			+ "      И я запускаю мониторинг каталога ""C:\temp"" для внешних событий(Расширение)" + Символы.ПС 
			+ "  Шаг окончания работы" + Символы.ПС 
			+ "      И я останавливаю мониторинг каталога внешних событий(Расширение)" + Символы.ПС 
			+ Символы.ПС
			+ Символы.ПС
			+ "Обратите внимание, что чтение каталога с файлами происходит каждую секунду, что может вызвать дополнительную нагрузку на систему" + Символы.ПС
			+ "В связи с технологией обмена через файл, не забывайте самостоятельно отключать мониторинг соответствующим шагом."
			+ "А так же следить за порядком выполнения шагов во время отладки сценария" + Символы.ПС;
			
КонецФункции	


///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Функция выполняется перед началом каждого сценария
Функция ПередНачаломСценария() Экспорт
	
КонецФункции

&НаКлиенте
// Функция выполняется перед окончанием каждого сценария
Функция ПередОкончаниемСценария() Экспорт
	
КонецФункции



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
Функция ЯЖдуЗавершенияВыполненияВсехФоновыхЗаданийРасширениеОжиданиеОбновлениеТаблицы()
	
	ИмяОбработчика = "ЯЖдуЗавершенияВыполненияВсехФоновыхЗаданийРасширениеОжиданиеОбновлениеТаблицы";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	Попытка
		ТекущееЗначениеФлага = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку("ОбновлениеТаблицыЗавершено",Истина);
	Исключение
		Если ДатаЗавершенияПроверкиЗавершенияФоновых >= ТекущаяДата() Тогда
			ПодключитьОбработчикОжидания(ИмяОбработчика, 0.1, Истина);
			Возврат Неопределено;
		КонецЕсли;	 
	КонецПопытки;
	
	ТекущееЗначениеФлага = Ванесса.ПривестиЗначениеФлагаКСтандарту(ТекущееЗначениеФлага);
	
	ЗначениеТаблицы = Неопределено;
	Если ТекущееЗначениеФлага = "Да" Тогда
		Попытка
			ТЧ = Ванесса.НайтиТЧПоИмени("ТаблицаФоновых");
			ЗначениеТаблицы = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ);
			Если ЗначениеТаблицы <> Неопределено Тогда
				Если ЗначениеТаблицы.Количество() = 0 Тогда
					Ванесса.Шаг("И я закрываю окно '*Проверка*фоновых*заданий'");
					Ванесса.ПродолжитьВыполнениеШагов();
					Возврат Неопределено;
				КонецЕсли;	 
			КонецЕсли;	 
		Исключение
		КонецПопытки;
	КонецЕсли;	 
	
	Если ДатаЗавершенияПроверкиЗавершенияФоновых < ТекущаяДата() Тогда
		//Значит время ожидания вышло. Надо вызвать ошибку.
		СтрокаСообщения = Ванесса.ПодставитьПараметрыВСтроку(
			Ванесса.Локализовать("Не получилось дождаться завершения выполнения фоновых заданий в течение <%1> секунд."),
				Формат(ИнтервалПроверкиЗавершенияФоновыхЗаданий, "ЧГ=; ЧН=0"));
				
		Если ЗначениеТаблицы = Неопределено Тогда
			Попытка
				ТЧ = Ванесса.НайтиТЧПоИмени("ТаблицаФоновых");
				ЗначениеТаблицы = Ванесса.ПолучитьЗначениеТестируемаяТаблицаФормы(ТЧ);
			Исключение
			КонецПопытки;
		КонецЕсли;	 		
				
		Если ЗначениеТаблицы <> Неопределено Тогда
			СтрокаСообщения = СтрокаСообщения + Символы.ПС + Ванесса.ЗначениеТаблицыФормыВТаблицуGherkin(ЗначениеТаблицы);
		КонецЕсли;	 
		
		Ванесса.ПродолжитьВыполнениеШагов(Истина, СтрокаСообщения);
		
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если ТекущееЗначениеФлага = "Да" Тогда
		//Значит надо ещё раз обновить таблицу фоновых
		Попытка
			Ванесса.Шаг("Дано я снимаю флаг с именем ""ОбновлениеТаблицыЗавершено""");
			Ванесса.Шаг("И я нажимаю на кнопку с именем 'ОбновитьТаблицу'");
		Исключение
			Ванесса.ПродолжитьВыполнениеШагов(Истина, ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;	 
	
	ПодключитьОбработчикОжидания(ИмяОбработчика, 0.1, Истина);
	
КонецФункции 

&НаКлиенте
Функция ЯЖдуЗавершенияВыполненияВсехФоновыхЗаданийРасширениеОбработчик()
	
	Попытка
		Ванесса.Шаг("Дано я снимаю флаг с именем ""ОбновлениеТаблицыЗавершено""");
		Ванесса.Шаг("И я нажимаю на кнопку с именем 'ОбновитьТаблицу'");
	Исключение
		Ванесса.ПродолжитьВыполнениеШагов(Истина, ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	ПодключитьОбработчикОжидания("ЯЖдуЗавершенияВыполненияВсехФоновыхЗаданийРасширениеОжиданиеОбновлениеТаблицы", 0.1, Истина);
	
КонецФункции 

&НаКлиенте
//И Я жду завершения выполнения всех фоновых заданий (Расширение)
//@ЯЖдуЗавершенияВыполненияВсехФоновыхЗаданийРасширение()
Функция ЯЖдуЗавершенияВыполненияВсехФоновыхЗаданийРасширение(КолСекунд = Неопределено) Экспорт
	Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_ПроверкаФоновыхЗаданий");
	Ванесса.Шаг("Тогда открылась форма с именем '*.VAExtension_ПроверкаФоновыхЗаданий.*'");
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КоличествоПопыток", 1);
	РеквизитВыполненаБыстраяПроверка = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ВыполненаБыстраяПроверка", Истина, Ложь,, ДопПараметры);
	Если РеквизитВыполненаБыстраяПроверка <> Неопределено Тогда
		ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитВыполненаБыстраяПроверка);
		ПредставлениеДанных = Ванесса.ПривестиЗначениеФлагаКСтандарту(ПредставлениеДанных);
		Если ПредставлениеДанных = "Да" Тогда
			//Значит была выполнена быстрая проверка на то, что нет активных фоновых заданий
			АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
			КнопкаЗакрытьФорму = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ФормаЗакрытьФорму");
			КнопкаЗакрытьФорму.Нажать();
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЕсли;	
	
	Если КолСекунд = Неопределено Тогда
		ИнтервалПроверкиЗавершенияФоновыхЗаданий = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(30);
	Иначе	
		ИнтервалПроверкиЗавершенияФоновыхЗаданий = КолСекунд;
	КонецЕсли;
	
	ДатаЗавершенияПроверкиЗавершенияФоновых = ТекущаяДата() + ИнтервалПроверкиЗавершенияФоновыхЗаданий;
	
	Ванесса.ЗапретитьВыполнениеШагов();
	
	ПодключитьОбработчикОжидания("ЯЖдуЗавершенияВыполненияВсехФоновыхЗаданийРасширениеОбработчик", 0.1, Истина);
КонецФункции

&НаКлиенте
//И Я жду завершения выполнения всех фоновых заданий в течение 10 секунд (Расширение)
//@ЯЖдуЗавершенияВыполненияВсехФоновыхЗаданийВТечениеСекундРасширение()
Функция ЯЖдуЗавершенияВыполненияВсехФоновыхЗаданийВТечениеСекундРасширение(КолСекунд) Экспорт
	ЯЖдуЗавершенияВыполненияВсехФоновыхЗаданийРасширение(Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КолСекунд));
КонецФункции

&НаКлиенте
Процедура ЗакрытьОкноМодальногоДиалога(ТекОкно)
	КнопкаЗакрыть = ТекОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), "OK");
	Если КнопкаЗакрыть <> Неопределено Тогда
		КнопкаЗакрыть.Нажать();
	Иначе	
		ТекОкно.Закрыть();
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
//И я сохраняю навигационную ссылку текущего окна в переменную "ИмяПеременной" (Расширение)
//@ЯСохраняюНавигационнуюСсылкуТекущегоОкнаВПеременнуюРасширение(Парам01)
Функция ЯСохраняюНавигационнуюСсылкуТекущегоОкнаВПеременнуюРасширение(Знач ИмяПеременной) Экспорт
	ИмяПеременной = Ванесса.УбратьЗапрещенныеСимволыИзКлючаСтруктуры(ИмяПеременной);
	
	СтрокаОшибки = "";
	БылаОшибка = Ложь;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
		
		Попытка
			ГлавноеОкноТестируемого = Ванесса.ПолучитьГлавноеОкноИзТестовоеПриложение();
			АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
			ТестируемыеФормы = АктивноеОкно.НайтиОбъекты(Тип("ТестируемаяФорма"));
			
			Если ТестируемыеФормы.Количество() = 1 Тогда
				ЗаголовокИскомойФормы = ТестируемыеФормы[0].ТекстЗаголовка;
			ИначеЕсли АктивноеОкно.НачальнаяСтраница Тогда
				ЗаголовокИскомойФормы = АктивноеОкно.Заголовок;
			Иначе
				ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(Ванесса.Локализовать("В окне <%1> находится <%2> форм."), АктивноеОкно.Заголовок, ТестируемыеФормы.Количество());
			КонецЕсли;
			
			ГлавноеОкноТестируемого.ВыполнитьКоманду("e1cib/command/ОбщаяКоманда.VAExtension_ПолучитьНавигационнуюСсылку");
			АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
			
			НавСсылка = "";
			
			Если Ванесса.ЭтоЗаголовокОкнаМодальногоДиалога(АктивноеОкно.Заголовок) Тогда
				СообщенияСсылки = СообщенияСсылкиИзОкнаПредупреждения(АктивноеОкно);
				ЗакрытьОкноМодальногоДиалога(АктивноеОкно);
				
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(СообщенияСсылки);
				ДанныеАктивныхОкон = ПрочитатьJSON(ЧтениеJSON);
				ЧтениеJSON.Закрыть();
				
				Для Каждого ДанныеОкна Из ДанныеАктивныхОкон Цикл
					Если ЗаголовокИскомойФормы = ДанныеОкна.ЗаголовокОкна Тогда
						НавСсылка = ДанныеОкна.НавигационнаяСсылка;
						НавСсылка = СтрЗаменить(НавСсылка, "&&", "&");
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ЗначениеЗаполнено(НавСсылка) Тогда
					ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(Ванесса.Локализовать("Для заголовка <%1> не найдена ссылка среди ссылок <%2>."), ЗаголовокИскомойФормы, СообщенияСсылки);
				КонецЕсли;
				
			Иначе
				ВызватьИсключение Ванесса.Локализовать("Не найдено окно модального диалога с информацией об объекте.");
			КонецЕсли; 
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, НавСсылка);
	
КонецФункции

&НаКлиенте
Функция СообщенияСсылкиИзОкнаПредупреждения(АктивноеОкно)
	ДекорацияMessage = АктивноеОкно.НайтиОбъект(,,"Message");
	Если ДекорацияMessage = Неопределено Тогда
		ОбъектыПоляФормы = АктивноеОкно.НайтиОбъекты(Тип("ТестируемоеПолеФормы"));
		Возврат ОбъектыПоляФормы[ОбъектыПоляФормы.Количество()-1].ТекстЗаголовка;
	Иначе
		Возврат ДекорацияMessage.ТекстЗаголовка;
	КонецЕсли;	 
КонецФункции	 

&НаКлиенте
Функция ЯВыполняюКодВстроенногоЯзыкаРасширениеСлужебный(ТабПарам, НаКлиенте)
	
	Текст = Ванесса.МногострочнаяСтрокаИзПараметраШага(ТабПарам);
	
	Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_ВыполнитьПроизвольныйКод");
	Ванесса.Шаг("Тогда открылась форма с именем '*.VAExtension_ВыполнитьПроизвольныйКод.*'");
	
	РеквизитВыражениеВычислено = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ВыражениеВычислено", Истина);
	РеквизитКодДляВыполнения = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("КодДляВыполнения", Истина);
	РеквизитКодДляВыполнения.ВвестиТекст(Текст);
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	
	Если НаКлиенте Тогда
		КнопкаВыполнитьКод = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ФормаВыполнитьКод");
	Иначе	
		КнопкаВыполнитьКод = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ФормаВыполнитьКодСервер");
	КонецЕсли;
	
	КнопкаЗакрытьФорму = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ЗакрытьФорму");
	
	КнопкаВыполнитьКод.Нажать();
	
	БылаОшибка = Истина;
	Ванесса.ОжиданиеОкончанияОбработки(БылаОшибка, РеквизитВыражениеВычислено);
	
	Если БылаОшибка Тогда
		СтрокаСообщения = Ванесса.Локализовать("Не получилось выполнить код на стороне клиента тестирования.");
		ВызватьИсключение СтрокаСообщения + Символы.ПС + Текст;
	КонецЕсли;	 
	
	Попытка
		КнопкаЗакрытьФорму.Нажать();
	Исключение
		Ванесса.ЗаписатьЛогВЖРИнформация("ВыполнениеКодаВстроенногоЯзыка", ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции 

&НаКлиенте
//И я выполняю код встроенного языка (Расширение)
//@ЯВыполняюКодВстроенногоЯзыкаРасширение(ТабПарам)
Функция ЯВыполняюКодВстроенногоЯзыкаРасширение(ТабПарам) Экспорт
	
	ЯВыполняюКодВстроенногоЯзыкаРасширениеСлужебный(ТабПарам, Истина);
	
КонецФункции

&НаКлиенте
//И я выполняю код встроенного языка на сервере (Расширение)
//@ЯВыполняюКодВстроенногоЯзыкаНаСервереРасширение(ТабПарам)
Функция ЯВыполняюКодВстроенногоЯзыкаНаСервереРасширение(ТабПарам) Экспорт

	ЯВыполняюКодВстроенногоЯзыкаРасширениеСлужебный(ТабПарам, Ложь);
	
КонецФункции

&НаКлиенте
Функция ЯЗапоминаюЗначениеВыраженияВПеременнуюРасширениеСлужебный(ПараметрВыражение, ИмяПеременной, НаКлиенте)
	Текст = "ЗначениеДляВозврата = " + ПараметрВыражение;
	
	Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_ВыполнитьПроизвольныйКод");
	Ванесса.Шаг("Тогда открылась форма с именем '*.VAExtension_ВыполнитьПроизвольныйКод.*'");
	
	РеквизитКодДляВыполнения = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("КодДляВыполнения", Истина);
	РеквизитЗначениеДляВозврата = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеДляВозврата", Истина);
	РеквизитВыражениеВычислено = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ВыражениеВычислено", Истина);
	РеквизитКодДляВыполнения.ВвестиТекст(Текст);
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	
	Если НаКлиенте Тогда
		КнопкаВыполнитьКод = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ФормаВыполнитьКод");
	Иначе	
		КнопкаВыполнитьКод = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ФормаВыполнитьКодСервер");
	КонецЕсли;
	
	КнопкаЗакрытьФорму = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ЗакрытьФорму");
	
	КнопкаВыполнитьКод.Нажать();
	
	БылаОшибка = Истина;
	КоличествоПопытокПолученияОкнаИзПриложения = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для Сч = 1 По КоличествоПопытокПолученияОкнаИзПриложения Цикл
		ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитВыражениеВычислено);
		ПредставлениеДанных = Ванесса.ПривестиЗначениеФлагаКСтандарту(ПредставлениеДанных);
		Если ПредставлениеДанных <> "Да" Тогда
			Ванесса.sleep(1);
			Продолжить;
		КонецЕсли;	 
		
		ПредставлениеРезультата = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитЗначениеДляВозврата);
		Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной,ПредставлениеРезультата);
		БылаОшибка = Ложь;
		КнопкаЗакрытьФорму.Нажать();
		Прервать;
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		СтрокаСообщения = Ванесса.Локализовать("Не получилось вычислить выражение на стороне клиента тестирования.");
		ВызватьИсключение СтрокаСообщения + Символы.ПС + ПараметрВыражение;
	КонецЕсли;	 
	
КонецФункции 

&НаКлиенте
//И Я запоминаю значение выражения 'ВыражениеВстроенногоЯзыка' в переменную "ИмяПеременной" (Расширение)
//@ЯЗапоминаюЗначениеВыраженияВПеременнуюРасширение(Парам01,Парам02)
Функция ЯЗапоминаюЗначениеВыраженияВПеременнуюРасширение(Знач ПараметрВыражение, ИмяПеременной) Экспорт
	
	ЯЗапоминаюЗначениеВыраженияВПеременнуюРасширениеСлужебный(ПараметрВыражение, ИмяПеременной, Истина);
	
КонецФункции

&НаКлиенте
//И Я запоминаю значение выражения на сервере 'ВыражениеВстроенногоЯзыка' в переменную "ИмяПеременной" (Расширение)
//@ЯЗапоминаюЗначениеВыраженияНаСервереВПеременнуюРасширение(Парам01,Парам02)
Функция ЯЗапоминаюЗначениеВыраженияНаСервереВПеременнуюРасширение(Знач ПараметрВыражение, ИмяПеременной) Экспорт

	ЯЗапоминаюЗначениеВыраженияВПеременнуюРасширениеСлужебный(ПараметрВыражение, ИмяПеременной, Ложь);
	
КонецФункции

&НаКлиенте
Функция ВывестиМакетИзМногострочнойСтроки(Стр, ЗаголовокАктивногоОкна)
	МассивСтрок = Ванесса.РазложитьСтрокуВМассивПодстрокКлиент(СокрЛП(Стр), Символы.ПС);
	
	ТабДок = Новый ТабличныйДокумент;
	
	Сч = 0;
	Для Каждого ТекСтр Из МассивСтрок Цикл
		Сч = Сч + 1;
		
		Поз = Найти(ТекСтр, ":");
		Ключ = Лев(ТекСтр, Поз - 1);
		Значение = Сред(ТекСтр, Поз + 1);
		
		ТабДок.Область(Сч, 1, Сч , 1).Текст = Ключ;
		ТабДок.Область(Сч, 2, Сч , 2).Текст = Значение;
	КонецЦикла;	 
	
	ТабДок.Область(1, 1, 1, 1).ШиринаКолонки = 40;
	ТабДок.Область(1, 2, 1, 2).ШиринаКолонки = 40;
	
	ТабДок.Показать(Ванесса.ПодставитьПараметрыВСтроку(Ванесса.Локализовать("Значения элементов окна <%1>."), ЗаголовокАктивногоОкна));
КонецФункции 

&НаКлиенте
//И я вывожу данные текущего окна (Расширение)
//@ЯВывожуДанныеТекущегоОкнаРасширение()
Функция ЯВывожуДанныеТекущегоОкнаРасширение() Экспорт
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	ЗаголовокАктивногоОкна = АктивноеОкно.Заголовок;
	
	Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_ДанныеТекущегоОкна");
	
	РеквизитВыражениеВычислено = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ВыражениеВычислено", Истина);
	РеквизитЗначениеРезультат = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеРезультат", Истина);
	РеквизитЗначениеЗаголовокОкна = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеЗаголовокОкна", Истина);
	РеквизитЗначениеЗаголовокОкна.ВвестиТекст(ЗаголовокАктивногоОкна);
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	КнопкаВывестиДанные = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ВывестиДанные");
	КнопкаВывестиДанные.Нажать();
	
	Попытка
		БылаОшибка = Истина;
		Ванесса.ОжиданиеОкончанияОбработки(БылаОшибка, РеквизитВыражениеВычислено);
		Если БылаОшибка Тогда
			СтрокаСообщения = Ванесса.Локализовать("Не получилось вывести данные текущей формы клиента тестирования.");
			ВызватьИсключение СтрокаСообщения;
		КонецЕсли;
		
		ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитЗначениеРезультат);
		
		ВывестиМакетИзМногострочнойСтроки(ПредставлениеДанных, ЗаголовокАктивногоОкна);
		
		КнопкаЗакрытьФорму = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ЗакрытьФорму");
		КнопкаЗакрытьФорму.Нажать();
	Исключение
		Ванесса.ЗаписатьЛогВЖРИнформация("ЯВывожуДанныеТекущегоОкнаРасширение", ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции


&НаКлиенте
//И Я запоминаю значение текущего окна 'ВыражениеВстроенногоЯзыка' в переменную "ИмяПеременной" (Расширение)
//@ЯЗапоминаюЗначениеТекущегоОкнаВПеременнуюРасширение(Парам01,Парам02)
Функция ЯЗапоминаюЗначениеТекущегоОкнаВПеременнуюРасширение(Знач ПараметрВыражение, ИмяПеременной) Экспорт
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	ЗаголовокАктивногоОкна = АктивноеОкно.Заголовок;
	
	Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_ДанныеТекущегоОкна");
	
	РеквизитВыражениеВычислено = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ВыражениеВычислено", Истина);
	РеквизитЗначениеРезультат = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеРезультат", Истина);
	РеквизитЗначениеВыражение = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеВыражение", Истина);
	РеквизитЗначениеВыражение.ВвестиТекст(ПараметрВыражение);
	РеквизитЗначениеЗаголовокОкна = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеЗаголовокОкна", Истина);
	РеквизитЗначениеЗаголовокОкна.ВвестиТекст(ЗаголовокАктивногоОкна);
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	КнопкаВычислитьВыражение = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ВычислитьВыражение");
	КнопкаВычислитьВыражение.Нажать();
	
	БылаОшибка = Истина;
	Ванесса.ОжиданиеОкончанияОбработки(БылаОшибка, РеквизитВыражениеВычислено);
	Если БылаОшибка Тогда
		СтрокаСообщения = Ванесса.Локализовать("Не получилось вычислить выражение в контексте текущей формы клиента тестирования.");
		ВызватьИсключение СтрокаСообщения;
	КонецЕсли;
	
	ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитЗначениеРезультат);
	
	КнопкаЗакрытьФорму = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ЗакрытьФорму");
	КнопкаЗакрытьФорму.Нажать();
	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, ПредставлениеДанных);
	
КонецФункции

&НаКлиенте
//И явыполняю выражение "ВыражениеВстроенногоЯзыка" в текущем окне (Расширение)
//@ЯВыполняюВыражениеВТекущемОкнеРасширение(Парам01)
Функция ЯВыполняюВыражениеВТекущемОкнеРасширение(ПараметрВыражение) Экспорт
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	ЗаголовокАктивногоОкна = АктивноеОкно.Заголовок;
	
	Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_ДанныеТекущегоОкна");
	
	РеквизитВыражениеВычислено = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ВыражениеВычислено", Истина);
	РеквизитЗначениеРезультат = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеРезультат", Истина);
	РеквизитЗначениеВыражение = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеВыражение", Истина);
	РеквизитЗначениеВыражение.ВвестиТекст(ПараметрВыражение);
	РеквизитЗначениеЗаголовокОкна = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеЗаголовокОкна", Истина);
	РеквизитЗначениеЗаголовокОкна.ВвестиТекст(ЗаголовокАктивногоОкна);
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	КнопкаВыполнитьВыражение = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ВыполнитьВыражение");
	КнопкаВыполнитьВыражение.Нажать();
	
	Попытка
		БылаОшибка = Истина;
		Ванесса.ОжиданиеОкончанияОбработки(БылаОшибка, РеквизитВыражениеВычислено);
		Если БылаОшибка Тогда
			СтрокаСообщения = Ванесса.Локализовать("Не получилось выполнить выражение в контексте текущей формы клиента тестирования.");
			ВызватьИсключение СтрокаСообщения;
		КонецЕсли;
		
		ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитЗначениеРезультат);
		
		КнопкаЗакрытьФорму = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ЗакрытьФорму");
		Попытка
			КнопкаЗакрытьФорму.Нажать();
		Исключение
			Ванесса.ЗаписатьЛогВЖРИнформация("ВычислениеВыражения", ОписаниеОшибки());
		КонецПопытки;
	Исключение
		Ванесса.ЗаписатьЛогВЖРИнформация("ЯВыполняюВыражениеВТекущемОкнеРасширение", ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция РасширениеСИменемУстановленоСервер(ИмяРасширения)
	
	Отбор = Новый Структура("Имя", ИмяРасширения);
	Расширения = РасширенияКонфигурации.Получить(Отбор);
	
	Если Расширения.Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	 

КонецФункции

&НаКлиенте
//Дано расширение с именем "ИмяРасширения" установлено
//@РасширениеСИменемУстановлено(Парам01)
Функция РасширениеСИменемУстановлено(ИмяРасширения) Экспорт
	
	Установлено = РасширениеСИменемУстановленоСервер(ИмяРасширения);
	
	Если НЕ Установлено Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(Ванесса.Локализовать("Расширение с именем <%1> не установлено."), ИмяРасширения);
	КонецЕсли;	 
	
КонецФункции


&НаКлиенте
//Дано расширение с именем ""ИмяРасширения"" отсутствует
//@РасширениеСИменемОтсутствует(Парам01)
Функция РасширениеСИменемОтсутствует(ИмяРасширения) Экспорт
	
	Установлено = РасширениеСИменемУстановленоСервер(ИмяРасширения);
	
	Если Установлено Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(Ванесса.Локализовать("Расширение с именем <%1> уже установлено."), ИмяРасширения);
	КонецЕсли;	 
	
КонецФункции


&НаКлиенте
//И Я устанавливаю в данную базу расширение "VAExtension" из каталога "$КаталогИнструментов$\lib\VAExtension"
//@ЯУстанавливаюВДаннуюБазуРасширениеИзКаталогаИсходников(Парам01,Парам02)
Функция ЯУстанавливаюВДаннуюБазуРасширениеИзКаталогаИсходников(ИмяРасширения, КаталогРасширения) Экспорт
	
	Если НЕ Ванесса.ФайлСуществуетКомандаСистемы(КаталогРасширения) Тогда
		ВызватьИсключение Ванесса._СтрШаблон(Ванесса.Локализовать("Каталог <%1> не найден."), КаталогРасширения);
	КонецЕсли;	 
	
	СтрокаКоманды = """%КаталогПлатформы"" DESIGNER /IBConnectionString %СтрокаСоединения /N""%Пользователь"" /LoadConfigFromFiles ""%КаталогРасширения"" -Extension %ИмяРасширения /DisableStartupDialogs /DisableStartupMessages /UpdateDBCfg ";	
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогПлатформы", КаталогПрограммы() + "1cv8");
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%СтрокаСоединения", СтрокаСоединенияИнформационнойБазы());
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%Пользователь", ИмяПользователя());
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогРасширения", КаталогРасширения);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяРасширения", ИмяРасширения);
	Ванесса.ВыполнитьКомандуОСБезПоказаЧерногоОкна(СтрокаКоманды);
	
	РасширениеСИменемУстановлено(ИмяРасширения);

КонецФункции


&НаКлиенте
//И Я удаляю в данной базе расширение ""ИмяРасширения""
//@ЯУдаляюВДаннойБазеРасширениеПодПользователемИПаролем(Парам01)
Функция ЯУдаляюВДаннойБазеРасширение(ИмяРасширения) Экспорт
	
	РасширениеСИменемУстановлено(ИмяРасширения);
	
	СтрокаКоманды = """%КаталогПлатформы"" DESIGNER /IBConnectionString %СтрокаСоединения /N""%Пользователь"" " +
					 " /DeleteCfg -Extension %ИмяРасширения /DisableStartupDialogs /DisableStartupMessages /UpdateDBCfg ";	
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогПлатформы", КаталогПрограммы() + "1cv8");
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%СтрокаСоединения", СтрокаСоединенияИнформационнойБазы());
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%Пользователь", ИмяПользователя());
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяРасширения", ИмяРасширения);
	Ванесса.ВыполнитьКомандуОСБезПоказаЧерногоОкна(СтрокаКоманды);
	
	Установлено = РасширениеСИменемУстановленоСервер(ИмяРасширения);
	
	Если Установлено Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(Ванесса.Локализовать("Не удалось удалить расширение с именем <%1>"), ИмяРасширения);	
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
//И Я удаляю в данной базе расширение ""ИмяРасширения"" под пользователем ""Администратор"" и паролем ""12345678""
//@ЯУдаляюВДаннойБазеРасширениеПодПользователемИПаролем(Парам01,Парам02,Парам03)
Функция ЯУдаляюВДаннойБазеРасширениеПодПользователемИПаролем(ИмяРасширения, Пользователь, Пароль) Экспорт
	
	РасширениеСИменемУстановлено(ИмяРасширения);
	
	СтрокаКоманды = """%КаталогПлатформы"" DESIGNER /IBConnectionString %СтрокаСоединения /N""%Пользователь"" /P""%Пароль"" " +
					 " /DeleteCfg -Extension %ИмяРасширения /DisableStartupDialogs /DisableStartupMessages /UpdateDBCfg ";	
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогПлатформы", КаталогПрограммы() + "1cv8");
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%СтрокаСоединения", СтрокаСоединенияИнформационнойБазы());
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%Пользователь", Пользователь);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%Пароль", Пароль);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяРасширения", ИмяРасширения);
	Ванесса.ВыполнитьКомандуОСБезПоказаЧерногоОкна(СтрокаКоманды);
	
	Установлено = РасширениеСИменемУстановленоСервер(ИмяРасширения);
	
	Если Установлено Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(Ванесса.Локализовать("Не удалось удалить расширение с именем <%1>"), ИмяРасширения);	
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
//И Я устанавливаю в данную базу расширение "VAExtension" из каталога "$КаталогИнструментов$\lib\VAExtension" под пользователем ""Администратор"" и паролем ""12345678"""
//@ЯУстанавливаюВДаннуюБазуРасширениеИзКаталогаИсходниковПодПользователемИПаролем(Парам01,Парам02,Парам03,Парам04)
Функция ЯУстанавливаюВДаннуюБазуРасширениеИзКаталогаИсходниковПодПользователемИПаролем(ИмяРасширения, КаталогРасширения, Пользователь, Пароль) Экспорт
	
	Если НЕ Ванесса.ФайлСуществуетКомандаСистемы(КаталогРасширения) Тогда
		ВызватьИсключение Ванесса._СтрШаблон(Ванесса.Локализовать("Каталог <%1> не найден."), КаталогРасширения);
	КонецЕсли;	 
	
	СтрокаКоманды = """%КаталогПлатформы"" DESIGNER /IBConnectionString %СтрокаСоединения /N""%Пользователь"" /P""%Пароль"" /LoadConfigFromFiles ""%КаталогРасширения"" -Extension %ИмяРасширения /DisableStartupDialogs /DisableStartupMessages /UpdateDBCfg ";	
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогПлатформы", КаталогПрограммы() + "1cv8");
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%СтрокаСоединения", СтрокаСоединенияИнформационнойБазы());
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%Пользователь", Пользователь);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%Пароль", Пароль);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогРасширения", КаталогРасширения);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяРасширения", ИмяРасширения);
	Ванесса.ВыполнитьКомандуОСБезПоказаЧерногоОкна(СтрокаКоманды);
	
	РасширениеСИменемУстановлено(ИмяРасширения);
	
КонецФункции

&НаСервереБезКонтекста
Функция УРасширенияЯМеняюФлагиСервер(ИмяРасширения, ТабПарам, Статус, ТекстОшибки, ЗначениеФлага = Ложь)

	Отбор = Новый Структура("Имя", ИмяРасширения);
	Расширения = РасширенияКонфигурации.Получить(Отбор);
	
	Если Расширения.Количество() = 0 Тогда
		Статус = 1;
		Возврат Неопределено;
	КонецЕсли;	 
	
	Для Каждого ТекРасширение Из Расширения Цикл
		Для Каждого СтрокаТабПарам Из ТабПарам Цикл
			Если НРег(СтрокаТабПарам.Кол1) = НРег("ЗащитаОтОпасныхДействий") Тогда
				ОписаниеЗащитыОтОпасныхДействий = Вычислить("Новый ОписаниеЗащитыОтОпасныхДействий");
				ОписаниеЗащитыОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = ЗначениеФлага;
				ТекРасширение.ЗащитаОтОпасныхДействий = ОписаниеЗащитыОтОпасныхДействий;
			Иначе	
				ТекРасширение[СтрокаТабПарам.Кол1] = ЗначениеФлага;
			КонецЕсли;	 
		КонецЦикла;	 
		
		Попытка
			ТекРасширение.Записать();
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Статус = 2;
		КонецПопытки;
	КонецЦикла;	 
КонецФункции 


&НаКлиенте
//И у расширения "ИмяРасширения" я устанавливаю флаги
//@УРасширенияЯУстанавливаюФлаги(Парам01,ТабПарам)
Функция УРасширенияЯУстанавливаюФлаги(ИмяРасширения, ТабПарам) Экспорт
	
	Статус = 0;
	ТекстОшибки = "";
	УРасширенияЯМеняюФлагиСервер(ИмяРасширения, ТабПарам, Статус, ТекстОшибки, Истина);
	
	Если Статус = 1 Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(Ванесса.Локализовать("Расширение с именем <%1> не найдено."), ИмяРасширения);
	ИначеЕсли Статус = 2 Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(Ванесса.Локализовать("При установке флагов расширения с именем <%1> возникла ошибка <%2>."), ИмяРасширения, ТекстОшибки);
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И у расширения "ИмяРасширения" я снимаю флаги
//@УРасширенияЯСнимаюФлаги(Парам01,ТабПарам)
Функция УРасширенияЯСнимаюФлаги(ИмяРасширения, ТабПарам) Экспорт
	
	Статус = 0;
	ТекстОшибки = "";
	УРасширенияЯМеняюФлагиСервер(ИмяРасширения, ТабПарам, Статус, ТекстОшибки);
	
	Если Статус = 1 Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(Ванесса.Локализовать("Расширение с именем <%1> не найдено."), ИмяРасширения);
	ИначеЕсли Статус = 2 Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(Ванесса.Локализовать("При установке флагов расширения с именем <%1> возникла ошибка <%2>."), ИмяРасширения, ТекстОшибки);
	КонецЕсли;	 
	
КонецФункции


&НаКлиенте
//И я открываю окно функции для технического специалиста (расширение)
//@ЯОткрываюОкноФункцииДляТехническогоСпециалистаРасширение()
Функция ЯОткрываюОкноФункцииДляТехническогоСпециалистаРасширение() Экспорт
	Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_ОткрытьВсеФункции");
КонецФункции

&НаКлиенте
//И я открываю окно настройка начальной страницы (расширение)
//@ЯОткрываюОкноНастройкаНачальнойСтраницыРасширение()
Функция ЯОткрываюОкноНастройкаНачальнойСтраницыРасширение() Экспорт
	Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_ОткрытьНастройкаНачальнойСтраницы");
КонецФункции


&НаКлиенте
//И в таблице "ИмяТаблицы" текущего окна я устанавливаю сортировку по колонке "ИмяКолонки" по возрастанию (расширение)
//@ВТаблицеТекущегоОкнаЯУстанавливаюСортировкуПоКолонкеПоВозрастаниюРасширение(Парам01,Парам02)
Функция ВТаблицеТекущегоОкнаЯУстанавливаюСортировкуПоКолонкеПоВозрастаниюРасширение(ИмяТаблицы, ИмяКолонки, ПоВозрастанию = Истина) Экспорт
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	Текст = "
	|ТекОкно = VAExtensionКлиент.ПолучитьОкноПоЗаголовку(""%4"");
	|ТекТаблица = ТекОкно.%1;
	|
	|Сортировка = ТекТаблица.КомпоновщикНастроек.Настройки.Порядок.Элементы;
	|Сортировка.Очистить();
	
	|УсловиеСортировки = Сортировка.Добавить(Тип(""ЭлементПорядкаКомпоновкиДанных""));
	|УсловиеСортировки.Поле = Новый ПолеКомпоновкиДанных(""%2"");
	|УсловиеСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.%3;
	|ТекТаблица.КомпоновщикНастроек.ЗагрузитьНастройки(ТекТаблица.КомпоновщикНастроек.Настройки);
	|";
	
	Текст = СтрЗаменить(Текст, "%1", ИмяТаблицы);
	Текст = СтрЗаменить(Текст, "%2", ИмяКолонки);
	Если ПоВозрастанию Тогда
		Текст = СтрЗаменить(Текст, "%3", "Возр");
	Иначе	
		Текст = СтрЗаменить(Текст, "%3", "Убыв");
	КонецЕсли;	 
	Текст = СтрЗаменить(Текст, "%4", СтрЗаменить(АктивноеОкно.Заголовок, """", """"""));
	
	ЯВыполняюКодВстроенногоЯзыкаРасширениеСлужебный(Текст, Истина);
	
КонецФункции

&НаКлиенте
//И в таблице "ИмяТаблицы" текущего окна я устанавливаю сортировку по колонке "ИмяКолонки" по убыванию (расширение)
//@ВТаблицеТекущегоОкнаЯУстанавливаюСортировкуПоКолонкеПоУбываниюРасширение(Парам01,Парам02)
Функция ВТаблицеТекущегоОкнаЯУстанавливаюСортировкуПоКолонкеПоУбываниюРасширение(ИмяТаблицы, ИмяКолонки) Экспорт
	
	ВТаблицеТекущегоОкнаЯУстанавливаюСортировкуПоКолонкеПоВозрастаниюРасширение(ИмяТаблицы, ИмяКолонки, Ложь);
	
КонецФункции

&НаКлиенте
//И я очищаю табличный документ "ИмяРеквизита" (расширение)
//@ЯОчищаюТабличныйДокументРасширение(Парам01)
Функция ЯОчищаюТабличныйДокументРасширение(ИмяРеквизита) Экспорт
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	Текст = "
	|ТекОкно = VAExtensionКлиент.ПолучитьОкноПоЗаголовку(""%1"");
	|ТекОкно.%2 = Новый ТабличныйДокумент;
	|";
	
	Текст = СтрЗаменить(Текст, "%1", СтрЗаменить(АктивноеОкно.Заголовок, """", """"""));
	Текст = СтрЗаменить(Текст, "%2", ИмяРеквизита);
	
	ЯВыполняюКодВстроенногоЯзыкаРасширениеСлужебный(Текст, Истина);
	
	ПолеТабДок = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, Истина, Истина, Тип("ТестируемоеПолеФормы"));
	
	Если Ванесса.Версия8313ИлиВыше Тогда
		КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
		ПолучилосьОчистить = Ложь;
		Для Сч = 1 По КоличествоПопыток Цикл
			Если ПолеТабДок.ПолучитьРазмерОбластиДанныхДокументаПоВертикали() = 0 Тогда
				ПолучилосьОчистить = Истина;
				Прервать;
			КонецЕсли;	
			Ванесса.sleep(1);
		КонецЦикла;
		
		Если НЕ ПолучилосьОчистить Тогда
			ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(Ванесса.Локализовать("Не получилось очистить табличный документ <%1>."), ИмяРеквизита);
		КонецЕсли;	
	КонецЕсли;	
	
	Ванесса.ЗапретитьВыполнениеШагов();
	ПодключитьОбработчикОжидания("ЯОчищаюТабличныйДокументРасширениеПродолжение", 0.1, Истина);
	
КонецФункции

&НаКлиенте
Процедура ЯОчищаюТабличныйДокументРасширениеПродолжение()
	Ванесса.ПродолжитьВыполнениеШагов();
КонецПроцедуры

&НаКлиенте
//И у поля с именем "ИмяЭлемента" я нажимаю гиперссылку по номеру 1 (расширение)
//@УПоляСИменемЯНажимаюГиперссылкуПоНомеруРасширение(Парам01,Парам02)
Функция УПоляСИменемЯНажимаюГиперссылкуПоНомеруРасширение(ИмяЭлемента, Знач ЗначениеДляПоиска, ТипДействия = 0) Экспорт
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	ЗаголовокАктивногоОкна = АктивноеОкно.Заголовок;
	
	Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_НажатьГиперссылкуHTMLДокумента");
	
	РеквизитВыражениеВычислено = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ВыражениеВычислено", Истина);
	РеквизитСсылкаНайдена = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("СсылкаНайдена", Истина);
	РеквизитЗначениеЗаголовокОкна = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеЗаголовокОкна", Истина);
	РеквизитЗначениеИмяЭлементаФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеИмяЭлементаФормы", Истина);
	РеквизитИмяГиперссылки = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ИмяГиперссылки", Истина);
	РеквизитТипГиперссылки = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ТипГиперссылки", Истина);
	
	РеквизитЗначениеЗаголовокОкна.ВвестиТекст(ЗаголовокАктивногоОкна);
	РеквизитЗначениеИмяЭлементаФормы.ВвестиТекст(ИмяЭлемента);
	
	Если ТипДействия = 0 Тогда
		НомерСсылки = Число(ЗначениеДляПоиска);
		РеквизитИмяГиперссылки.ВвестиТекст(Формат(НомерСсылки, "ЧГ=; ЧН=0"));
	ИначеЕсли ТипДействия = 1 Тогда
		РеквизитТипГиперссылки.ВвестиТекст("1");
		РеквизитИмяГиперссылки.ВвестиТекст(ЗначениеДляПоиска);
	Иначе	
		РеквизитТипГиперссылки.ВвестиТекст("2");
		РеквизитИмяГиперссылки.ВвестиТекст(ЗначениеДляПоиска);
	КонецЕсли;	 
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	КнопкаВычислитьВыражение = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ФормаВыполнитьКод");
	КнопкаВычислитьВыражение.Нажать();
	
	Попытка
		БылаОшибка = Истина;
		Ванесса.ОжиданиеОкончанияОбработки(БылаОшибка, РеквизитВыражениеВычислено);
		Если БылаОшибка Тогда
			СтрокаСообщения = Ванесса.Локализовать("Не получилось вычислить выражение в контексте текущей формы клиента тестирования.");
			ВызватьИсключение СтрокаСообщения;
		КонецЕсли;
		
		ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитСсылкаНайдена);
		Если НЕ Ванесса.ЗначениеФлагаСоответствуетИстина(ПредставлениеДанных) Тогда
			ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(Ванесса.Локализовать("В окне <%1> у элемента <%2> не получилось нажать на гиперссылку <%3>."), АктивноеОкно.Заголовок, ИмяЭлемента, НомерСсылки);
		КонецЕсли;	 
		
		КнопкаЗакрытьФорму = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ЗакрытьФорму");
		КнопкаЗакрытьФорму.Нажать();
	Исключение
		Ванесса.ЗаписатьЛогВЖРИнформация("НажатиеГиперссылки", ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

&НаКлиенте
//И у поля с именем "ИмяЭлемента" я нажимаю гиперссылку по представлению "Частьпредставления" (расширение)
//@УПоляСИменемЯНажимаюГиперссылкуПоПредставлениюРасширение(Парам01,Парам02)
Функция УПоляСИменемЯНажимаюГиперссылкуПоПредставлениюРасширение(ИмяЭлемента,ЗначениеДляПоиска) Экспорт
	УПоляСИменемЯНажимаюГиперссылкуПоНомеруРасширение(ИмяЭлемента, ЗначениеДляПоиска, 1);
КонецФункции

&НаКлиенте
//И у поля с именем "ИмяЭлемента" я нажимаю гиперссылку по значению "ЧастьЗначенияСсылки" (расширение)
//@УПоляСИменемЯНажимаюГиперссылкуПоЗначениюРасширение(Парам01,Парам02)
Функция УПоляСИменемЯНажимаюГиперссылкуПоЗначениюРасширение(ИмяЭлемента,ЗначениеДляПоиска) Экспорт
	УПоляСИменемЯНажимаюГиперссылкуПоНомеруРасширение(ИмяЭлемента, ЗначениеДляПоиска, 2);
КонецФункции


&НаКлиенте
//И форма текущего окна имеет признак модифицированности (расширение)
//@ФормаТекущегоОкнаИмеетПризнакМодифицированностиРасширение()
Функция ФормаТекущегоОкнаИмеетПризнакМодифицированностиРасширение(ПолеПроверки = "Модифицированность", ОжидаемоеЗначение = Истина) Экспорт
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	ЗаголовокАктивногоОкна = АктивноеОкно.Заголовок;
	
	Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_ДанныеТекущегоОкна");
	
	РеквизитВыражениеВычислено = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ВыражениеВычислено", Истина);
	РеквизитЗначениеРезультат = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеРезультат", Истина);
	РеквизитЗначениеВыражение = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеВыражение", Истина);
	РеквизитЗначениеВыражение.ВвестиТекст("_ТекущееОкно.ЭтаФорма." + ПолеПроверки);
	РеквизитЗначениеЗаголовокОкна = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеЗаголовокОкна", Истина);
	РеквизитЗначениеЗаголовокОкна.ВвестиТекст(ЗаголовокАктивногоОкна);
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	КнопкаВычислитьВыражение = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ВычислитьВыражение");
	КнопкаВычислитьВыражение.Нажать();
	
	БылаОшибка = Истина;
	Ванесса.ОжиданиеОкончанияОбработки(БылаОшибка, РеквизитВыражениеВычислено);
	Если БылаОшибка Тогда
		СтрокаСообщения = Ванесса.Локализовать("Не получилось вычислить выражение в контексте текущей формы клиента тестирования.");
		ВызватьИсключение СтрокаСообщения;
	КонецЕсли;
	
	ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитЗначениеРезультат);
	Если НЕ ЗначениеЗаполнено(ПредставлениеДанных) Тогда
		СтрокаСообщения = Ванесса.Локализовать("Не получилось вычислить выражение в контексте текущей формы клиента тестирования.");
		ВызватьИсключение СтрокаСообщения;
	КонецЕсли;	 
	
	КнопкаЗакрытьФорму = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ЗакрытьФорму");
	КнопкаЗакрытьФорму.Нажать();
	
	ПредставлениеДанных = Ванесса.ПривестиЗначениеФлагаКСтандарту(ПредставлениеДанных);
	
	Если ПолеПроверки = "Модифицированность" Тогда
		Если ОжидаемоеЗначение И НРег(ПредставлениеДанных) <> "да" Тогда
			ВызватьИсключение Ванесса.Локализовать("Ожидалось, что текущая форма будет иметь признак модифицированности.");
		ИначеЕсли НЕ ОжидаемоеЗначение И НРег(ПредставлениеДанных) <> "нет" Тогда
			ВызватьИсключение Ванесса.Локализовать("Ожидалось, что текущая форма не будет иметь признак модифицированности.");
		КонецЕсли;	 
	Иначе	
		Если ОжидаемоеЗначение И НРег(ПредставлениеДанных) <> "да" Тогда
			ВызватьИсключение Ванесса.Локализовать("Ожидалось, что текущая форма будет иметь признак ТолькоПросмотр.");
		ИначеЕсли НЕ ОжидаемоеЗначение И НРег(ПредставлениеДанных) <> "нет" Тогда
			ВызватьИсключение Ванесса.Локализовать("Ожидалось, что текущая форма не будет иметь признак ТолькоПросмотр.");
		КонецЕсли;	 
	КонецЕсли;	 

КонецФункции

&НаКлиенте
//И форма текущего окна не имеет признак модифицированности (расширение)
//@ФормаТекущегоОкнаНеИмеетПризнакМодифицированностиРасширение()
Функция ФормаТекущегоОкнаНеИмеетПризнакМодифицированностиРасширение() Экспорт
	ФормаТекущегоОкнаИмеетПризнакМодифицированностиРасширение("Модифицированность", Ложь);
КонецФункции

&НаКлиенте
//И форма текущего окна имеет признак только просмотр (расширение)
//@ФормаТекущегоОкнаИмеетПризнакТолькоПросмотрРасширение()
Функция ФормаТекущегоОкнаИмеетПризнакТолькоПросмотрРасширение() Экспорт
	ФормаТекущегоОкнаИмеетПризнакМодифицированностиРасширение("ТолькоПросмотр", Истина);
КонецФункции

&НаКлиенте
//И форма текущего окна не имеет признак только просмотр (расширение)
//@ФормаТекущегоОкнаНеИмеетПризнакТолькоПросмотрРасширение()
Функция ФормаТекущегоОкнаНеИмеетПризнакТолькоПросмотрРасширение() Экспорт
	ФормаТекущегоОкнаИмеетПризнакМодифицированностиРасширение("ТолькоПросмотр", Ложь);
КонецФункции

&НаКлиенте
//И у поля с именем "ИмяЭлемента" я нажимаю кнопку по номеру 1 (расширение)
//@УПоляСИменемЯНажимаюКнопкуHTMLПоНомеруРасширение(Парам01,Парам02)
Функция УПоляСИменемЯНажимаюКнопкуHTMLПоНомеруРасширение(ИмяЭлемента, Знач ЗначениеДляПоиска, ТипДействия = 0) Экспорт
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	ЗаголовокАктивногоОкна = АктивноеОкно.Заголовок;
	
	Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_НажатьКнопкуHTMLДокумента");
	
	РеквизитВыражениеВычислено = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ВыражениеВычислено", Истина);
	РеквизитСсылкаНайдена = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("СсылкаНайдена", Истина);
	РеквизитЗначениеЗаголовокОкна = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеЗаголовокОкна", Истина);
	РеквизитЗначениеИмяЭлементаФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеИмяЭлементаФормы", Истина);
	РеквизитИмяКнопки = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ИмяКнопки", Истина);
	РеквизитТипКнопки = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ТипКнопки", Истина);
	
	РеквизитЗначениеЗаголовокОкна.ВвестиТекст(ЗаголовокАктивногоОкна);
	РеквизитЗначениеИмяЭлементаФормы.ВвестиТекст(ИмяЭлемента);
	
	Если ТипДействия = 0 Тогда
		НомерСсылки = Число(ЗначениеДляПоиска);
		РеквизитИмяКнопки.ВвестиТекст(Формат(НомерСсылки, "ЧГ=; ЧН=0"));
	ИначеЕсли ТипДействия = 1 Тогда
		РеквизитТипКнопки.ВвестиТекст("1");
		РеквизитИмяКнопки.ВвестиТекст(ЗначениеДляПоиска);
	Иначе	
		РеквизитТипКнопки.ВвестиТекст("1");
		РеквизитИмяКнопки.ВвестиТекст(ЗначениеДляПоиска);
	КонецЕсли;	 
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	КнопкаВычислитьВыражение = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ФормаВыполнитьКод");
	КнопкаВычислитьВыражение.Нажать();
	
	Попытка
		БылаОшибка = Истина;
		Ванесса.ОжиданиеОкончанияОбработки(БылаОшибка, РеквизитВыражениеВычислено);
		Если БылаОшибка Тогда
			СтрокаСообщения = Ванесса.Локализовать("Не получилось вычислить выражение в контексте текущей формы клиента тестирования.");
			ВызватьИсключение СтрокаСообщения;
		КонецЕсли;
		
		ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитСсылкаНайдена);
		Если НЕ Ванесса.ЗначениеФлагаСоответствуетИстина(ПредставлениеДанных) Тогда
			ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(Ванесса.Локализовать("В окне <%1> у элемента <%2> не получилось нажать на кнопку <%3>."), АктивноеОкно.Заголовок, ИмяЭлемента, НомерСсылки);
		КонецЕсли;	 
		
		КнопкаЗакрытьФорму = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ЗакрытьФорму");
		КнопкаЗакрытьФорму.Нажать();
	Исключение
		Ванесса.ЗаписатьЛогВЖРИнформация("НажатиеКнопкиHTML", ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

&НаКлиенте
//И у поля с именем "ИмяЭлемента" я нажимаю кнопку по имени "Частьпредставления" (расширение)
//@УПоляСИменемЯНажимаюКнопкуHTMLПоИмениРасширение(Парам01,Парам02)
Функция УПоляСИменемЯНажимаюКнопкуHTMLПоИмениРасширение(ИмяЭлемента,ЗначениеДляПоиска) Экспорт
	УПоляСИменемЯНажимаюКнопкуHTMLПоНомеруРасширение(ИмяЭлемента, ЗначениеДляПоиска, 1);
КонецФункции

&НаКлиенте
//И я получаю состояние текущего объекта (Расширение)
//@ЯПолучаюСостояниеТекущегоОбъектаРасширение()
Функция ЯПолучаюСостояниеТекущегоОбъектаРасширение() Экспорт
	СтрокаОшибки = "";
	БылаОшибка = Ложь;
	БылаПопыткаОткрытьОкно = Ложь;
	КоличествоПопыток = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для СчетчикПопыток = 1 По КоличествоПопыток Цикл
		БылаОшибка = Ложь;
		СтрокаОшибки = "";
		
		Попытка
			ГлавноеОкноТестируемого = Ванесса.ПолучитьГлавноеОкноИзТестовоеПриложение();
			АктОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
			
			Если НЕ Ванесса.ЭтоЗаголовокОкнаМодальногоДиалога(АктОкно.Заголовок) ИЛИ НЕ БылаПопыткаОткрытьОкно Тогда
				
				ТестируемыеФормы = АктОкно.НайтиОбъекты(Тип("ТестируемаяФорма"));
				
				Если ТестируемыеФормы.Количество() = 1 Тогда
					ЗаголовокИскомойФормы = АктОкно.Заголовок;
				ИначеЕсли АктОкно.НачальнаяСтраница Тогда
					ЗаголовокИскомойФормы = АктОкно.Заголовок;
				Иначе
					ВызватьИсключение Ванесса._СтрШаблон("В окне %1 находится %2 форм", АктОкно.Заголовок, ТестируемыеФормы.Количество());
				КонецЕсли;
				
				ГлавноеОкноТестируемого.ВыполнитьКоманду("e1cib/command/ОбщаяКоманда.VAExtension_ПолучитьСостояниеОбъекта");
				БылаПопыткаОткрытьОкно = Истина;
				АктОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
				
			КонецЕсли;
			
			Если Ванесса.ЭтоЗаголовокОкнаМодальногоДиалога(АктОкно.Заголовок) Тогда
				СообщенияСсылки = СообщенияСсылкиИзОкнаПредупреждения(АктОкно);
				ЗакрытьОкноМодальногоДиалога(АктОкно);
				
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(СообщенияСсылки);
				ИменаСвойствСоЗначениямиДата = Новый Массив;
				ИменаСвойствСоЗначениямиДата.Добавить("Дата");
				ДанныеАктивныхОкон = ПрочитатьJSON(ЧтениеJSON, Ложь, ИменаСвойствСоЗначениямиДата);
				ЧтениеJSON.Закрыть();
				
				ДанныеАктивногоОкна = Неопределено;
				Для Каждого ДанныеОкна Из ДанныеАктивныхОкон Цикл
					Если НРег(ЗаголовокИскомойФормы) = НРег(ДанныеОкна.ЗаголовокОкна) Тогда
						ДанныеАктивногоОкна = ДанныеОкна;
						Прервать;
					КонецЕсли;	 
				КонецЦикла;	 
				
				Если ДанныеАктивногоОкна = Неопределено Тогда
					ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(Ванесса.Локализовать("Не найдено данных для окна <%1>."), ЗаголовокИскомойФормы);
				КонецЕсли;	
				
				Для Каждого КлючЗначение Из ДанныеАктивногоОкна Цикл
					Ванесса.СохранитьЗначениеПеременнойВКонтекст(КлючЗначение.Ключ, КлючЗначение.Значение);
				КонецЦикла;	 
				
			Иначе
				ВызватьИсключение Ванесса.Локализовать("Не найдено окно модального диалога с информацией об объекте.");
			КонецЕсли;
			
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			БылаОшибка = Истина;
			Если СчетчикПопыток < КоличествоПопыток Тогда
				Ванесса.sleep(1);
			КонецЕсли;	 
		КонецПопытки;
		
		Если НЕ БылаОшибка Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Если БылаОшибка Тогда
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;	 
	
КонецФункции

&НаКлиенте
//И я открываю внешнюю обработку или отчет "ИмяФайла" (Расширение)
//@ЯОткрываюВнешнююОбработкуИлиОтчетРасширение(Парам01)
Функция ЯОткрываюВнешнююОбработкуИлиОтчетРасширение(ИмяФайла) Экспорт
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	ЗаголовокАктивногоОкна = АктивноеОкно.Заголовок;
	
	Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_ОткрытьВнешнююОбработкуИлиОтчет");
	
	РеквизитВыражениеВычислено = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ВыражениеВычислено", Истина);
	ПутьКОбработке = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ПутьКОбработке", Истина);
	ФормаВыполнитьКод = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ФормаВыполнитьКод", Истина);
	
	ПутьКОбработке.ВвестиТекст(ИмяФайла);
	
	ФормаВыполнитьКод.Нажать();
	
	
КонецФункции

&НаКлиенте
Процедура ЯЗапоминаюЭлементФормыКлиентаТестированияВПеременнуюUIAutomationрасширениеПродолжение2()
	Ванесса.ПродолжитьВыполнениеШагов();
КонецПроцедуры

&НаКлиенте
Процедура ЯЗапоминаюЭлементФормыКлиентаТестированияВПеременнуюUIAutomationрасширениеПродолжение()

	СвойстваTestClient = Ванесса.ПолучитьДанныеКлиентаТестирования(КонтекстСохраняемый.ТекущийПрофильTestClient);
	
	Если Ванесса.Версия8319ИлиВыше Тогда
		ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, HelpText", СвойстваTestClient.PIDКлиентаТестирования, ОбработчикНовыйТекстПодсказка));
	Иначе	
		ОтборЭлементов = Ванесса.ЗаписатьОбъектJSON(Новый Структура("ProcessId, LegacyIAccessibleHelp", СвойстваTestClient.PIDКлиентаТестирования, ОбработчикНовыйТекстПодсказка));
	КонецЕсли;	
	
	ВсеПоля = Ванесса.ПрочитатьОбъектJSON(Ванесса.ВнешняяКомпонентаДляСкриншотов.НайтиЭлементы(ОтборЭлементов));
	
	Если ТипЗнч(ВсеПоля) = Тип("Массив") И ВсеПоля.Количество() = 1 Тогда
		
		IDЭлемента = ВсеПоля[0].Id;
		Ванесса.СохранитьЗначениеПеременнойВКонтекст(ОбработчикИмяПеременной, IDЭлемента);
		
		Если ОбработчикТекущаяПодсказка <> Неопределено Тогда
			АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
			ЗаголовокАктивногоОкна = АктивноеОкно.Заголовок;
			
			Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_ДанныеТекущегоОкна");
			
			АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
			РеквизитЗначениеЗаголовокОкна = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеЗаголовокОкна", Истина);
			РеквизитЗначениеЗаголовокОкна.ВвестиТекст(ЗаголовокАктивногоОкна);
		
			РеквизитВыражениеВычислено = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ВыражениеВычислено", Истина);
			ПараметрВыражение = "_ТекущееОкно.Элементы.%1.Подсказка = ""%2""";
			ОбработчикНовыйТекстПодсказка = Строка(Новый УникальныйИдентификатор);
			ПараметрВыражение = Ванесса.ПодставитьПараметрыВСтроку(ПараметрВыражение, ОбработчикИмяЭлемента, ОбработчикТекущаяПодсказка);
			РеквизитЗначениеВыражение = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеВыражение", Истина);
			РеквизитЗначениеВыражение.ВвестиТекст(ПараметрВыражение);
			
			КнопкаВыполнитьВыражение = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ВыполнитьВыражение");
			КнопкаВыполнитьВыражение.Нажать(); 
			
			Попытка
				БылаОшибка = Истина;
				Ванесса.ОжиданиеОкончанияОбработки(БылаОшибка, РеквизитВыражениеВычислено);
				Если БылаОшибка Тогда
					СтрокаСообщения = Ванесса.Локализовать("Не получилось выполнить выражение в контексте текущей формы клиента тестирования.");
					ВызватьИсключение СтрокаСообщения;
				КонецЕсли;
				
				КнопкаЗакрытьФорму = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ЗакрытьФорму");
				Попытка
					КнопкаЗакрытьФорму.Нажать();
				Исключение
					Ванесса.ЗаписатьЛогВЖРИнформация("ВычислениеВыражения", ОписаниеОшибки());
				КонецПопытки;
				
			Исключение
				Ванесса.ЗаписатьЛогВЖРИнформация("ЯВыполняюВыражениеВТекущемОкнеРасширение", ОписаниеОшибки());
			КонецПопытки;  
			
			ПодключитьОбработчикОжидания("ЯЗапоминаюЭлементФормыКлиентаТестированияВПеременнуюUIAutomationрасширениеПродолжение2", 0.1, Истина);
			Возврат;
			
		КонецЕсли;	

	Иначе
		
		ТекстИсключения = Ванесса.ПодставитьПараметрыВСтроку(
			Ванесса.Локализовать("Не получилось найти элемент формы <%1> с помощью UI Automation."), ОбработчикИмяЭлемента);
		Ванесса.ПродолжитьВыполнениеШагов(Истина, ТекстИсключения);	
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//И я запоминаю элемент формы клиента тестирования "Заголовок" в переменную "ИмяПеременной" UI Automation (расширение)
//@ЯЗапоминаюЭлементФормыКлиентаТестированияВПеременнуюUIAutomationРасширение(Парам01,Парам02)
Функция ЯЗапоминаюЭлементФормыКлиентаТестированияВПеременнуюUIAutomationРасширение(ИмяЭлемента, ИмяПеременной, ИскатьПоИмени = Ложь) Экспорт
	
	ОбработчикИмяПеременной = ИмяПеременной;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КоличествоПопыток", 1);
	ПолеРеквизит = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяЭлемента, ИскатьПоИмени, Истина,,ДопПараметры);	
	
	ОбработчикИмяЭлемента = ПолеРеквизит.Имя;
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	ЗаголовокАктивногоОкна = АктивноеОкно.Заголовок;
	
	Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_ДанныеТекущегоОкна");
	
	
	РеквизитВыражениеВычислено = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ВыражениеВычислено", Истина);
	РеквизитЗначениеРезультат = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеРезультат", Истина);
	РеквизитЗначениеВыражение = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеВыражение", Истина);
	РеквизитЗначениеЗаголовокОкна = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеЗаголовокОкна", Истина);
	РеквизитЗначениеЗаголовокОкна.ВвестиТекст(ЗаголовокАктивногоОкна);
	
	//Получаем значение текущей подсказки
	ПараметрВыражение = "_ТекущееОкно.Элементы.%1.Подсказка";
	СтрокаUID = Строка(Новый УникальныйИдентификатор);
	ПараметрВыражение = Ванесса.ПодставитьПараметрыВСтроку(ПараметрВыражение, ОбработчикИмяЭлемента, СтрокаUID);
	РеквизитЗначениеВыражение.ВвестиТекст(ПараметрВыражение);
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	КнопкаВыполнитьВыражение = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ВыполнитьВыражение");
	КнопкаВычислитьВыражение = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ВычислитьВыражение");
	
	КнопкаВычислитьВыражение.Нажать();
	
	ОбработчикТекущаяПодсказка = Неопределено;
	
	Попытка
		БылаОшибка = Истина;
		Ванесса.ОжиданиеОкончанияОбработки(БылаОшибка, РеквизитВыражениеВычислено);
		Если БылаОшибка Тогда
			СтрокаСообщения = Ванесса.Локализовать("Не получилось выполнить выражение в контексте текущей формы клиента тестирования.");
			ВызватьИсключение СтрокаСообщения;
		КонецЕсли;
		
		ОбработчикТекущаяПодсказка = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитЗначениеРезультат);
		
	Исключение
		Ванесса.ЗаписатьЛогВЖРИнформация("ЯВыполняюВыражениеВТекущемОкнеРасширение", ОписаниеОшибки());
	КонецПопытки;  
	
	//Меняем текст подсказки
	РеквизитВыражениеВычислено.УстановитьОтметку();
	ПараметрВыражение = "_ТекущееОкно.Элементы.%1.Подсказка = ""%2""";
	ОбработчикНовыйТекстПодсказка = Строка(Новый УникальныйИдентификатор);
	ПараметрВыражение = Ванесса.ПодставитьПараметрыВСтроку(ПараметрВыражение, ОбработчикИмяЭлемента, ОбработчикНовыйТекстПодсказка);
	РеквизитЗначениеВыражение.ВвестиТекст(ПараметрВыражение);
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	КнопкаВыполнитьВыражение = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ВыполнитьВыражение");
	КнопкаВыполнитьВыражение.Нажать();
	
	Попытка
		БылаОшибка = Истина;
		Ванесса.ОжиданиеОкончанияОбработки(БылаОшибка, РеквизитВыражениеВычислено);
		Если БылаОшибка Тогда
			СтрокаСообщения = Ванесса.Локализовать("Не получилось выполнить выражение в контексте текущей формы клиента тестирования.");
			ВызватьИсключение СтрокаСообщения;
		КонецЕсли;
		
		ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитЗначениеРезультат);
		
		КнопкаЗакрытьФорму = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ЗакрытьФорму");
		Попытка
			КнопкаЗакрытьФорму.Нажать();
		Исключение
			Ванесса.ЗаписатьЛогВЖРИнформация("ВычислениеВыражения", ОписаниеОшибки());
		КонецПопытки;
	Исключение
		Ванесса.ЗаписатьЛогВЖРИнформация("ЯВыполняюВыражениеВТекущемОкнеРасширение", ОписаниеОшибки());
	КонецПопытки;
	
	Ванесса.ЗапретитьВыполнениеШагов();
	ПодключитьОбработчикОжидания("ЯЗапоминаюЭлементФормыКлиентаТестированияВПеременнуюUIAutomationрасширениеПродолжение", 0.1, Истина);
	
КонецФункции

&НаКлиенте
//И я запоминаю элемент формы клиента тестирования с именем "ИмяЭлемента" в переменную "ИмяПеременной" UI Automation (расширение)
//@ЯЗапоминаюЭлементФормыКлиентаТестированияСИменемВПеременнуюUIAutomationРасширение(Парам01,Парам02)
Функция ЯЗапоминаюЭлементФормыКлиентаТестированияСИменемВПеременнуюUIAutomationРасширение(ИмяЭлемента, ИмяПеременной) Экспорт
	ЯЗапоминаюЭлементФормыКлиентаТестированияВПеременнуюUIAutomationРасширение(ИмяЭлемента, ИмяПеременной, Истина);
КонецФункции

&НаКлиенте   
// И я эмулирую сканирование штрихкода БПО ""4670003110011"" через буфер обмена
// @ЯЭмулируюСканированиеШтрихкодаБПОЧерезБуферОбмена(Парам01)
Функция ЯЭмулируюСканированиеШтрихкодаБПОЧерезБуферОбмена(Знач Штрихкод) Экспорт
		
	
	ГлавноеОкноТестируемого = Ванесса.ПолучитьГлавноеОкноИзТестовоеПриложение();
	
	КомандаЭмуляцияШтрихкода = "e1cib/command/ОбщаяКоманда.VAExtension_ЭмуляцияШтрихкода";
	
	Штрихкод = СтрЗаменить(Штрихкод,"\\x_GS",Символ(29));
	Штрихкод = СтрЗаменить(Штрихкод,"\x_GS",Символ(29));
	
	БуферОбменаVA = Ванесса.БуферОбменаVA();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПоместитьВБуферОбменаVA", ЭтаФорма, КомандаЭмуляцияШтрихкода);
	
	БуферОбменаVA.НачатьВызовЗаписатьТекст(ОписаниеОповещения, Штрихкод);

	Ванесса.ЗапретитьВыполнениеШагов();
	
КонецФункции

&НаКлиенте   
// И я эмулирую сканирование штрихкода БПО ""4670003110011"" через файл события (Расширение)
// @ЯЭмулируюСканированиеШтрихкодаБПОЧерезФайлСобытияРасширение(Парам01)
Функция ЯЭмулируюСканированиеШтрихкодаБПОЧерезФайлСобытияРасширение(Знач Штрихкод) Экспорт
		
	Если НЕ КонтекстСохраняемый.Свойство("_СписокPIDКлиентовСМониторингомСобытий") Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	_СписокPIDКлиентовСМониторингомСобытий = КонтекстСохраняемый._СписокPIDКлиентовСМониторингомСобытий;
	ТекущийPIDКлиента = Ванесса.ТекущиеДанныеКлиентаТестирования().PIDКлиентаТестирования;
	Каталог = _СписокPIDКлиентовСМониторингомСобытий.Получить(ТекущийPIDКлиента);
	
	
	Если Каталог <> Неопределено Тогда

		
		Штрихкод = СтрЗаменить(Штрихкод,"\\x_GS",Символ(29));
		Штрихкод = СтрЗаменить(Штрихкод,"\x_GS",Символ(29));
		
		ТекстСобытия = Новый Структура;
		ТекстСобытия.Вставить("ВидСобытия","СканерШтрихкода");
		ТекстСобытия.Вставить("Данные",Штрихкод);
		
		УникальныйИдентификаторСобытия = Новый УникальныйИдентификатор;
		ФайлСобытия = Каталог + ПолучитьРазделительПути() + "Event_BK_"+Строка(УникальныйИдентификаторСобытия)+".json";
		
		ЗаписьJson = Новый ЗаписьJson();
		ЗаписьJson.ОткрытьФайл(ФайлСобытия);
		ЗаписатьJSON(ЗаписьJson, ТекстСобытия); 
		ЗаписьJson.Закрыть();
		
		КонтекстСохраняемый.Вставить("_ИмяФайлаПоследнегоСобытия", ФайлСобытия);
	Иначе
		ВызватьИсключение "В текущем клиенте не запущена система внешних событий"; 
	КонецЕсли;	
	
КонецФункции

&НаКлиенте   
// И я генерирую код маркировки честного знака для GTIN "GTIN" типа "ТипКМ" в переменную "ИмяПеременной" (расширение)
// @ЯГенерируюКодМаркировкиЧестногоЗнакаДляGTINТипаВПеременнуюРасширение(Парам01,Парам02,Парам03)
Функция ЯГенерируюКодМаркировкиЧестногоЗнакаДляGTINТипаВПеременнуюРасширение(GTIN, ТипКМ, ИмяПеременной) Экспорт
	
	КМ = "";
	GTIN = ?(ЗначениеЗаполнено(GTIN), GTIN, "12345678901231");
	
	Если Строка(ТипКМ) = "5" Тогда
		// ЛП
		КМ = "01" + GTIN + "21" + СгенерироватьСерийныйНомер(13) + "\x_GS" + "911234" + "\x_GS" 
			 + "92vanessaautomationtestcodeforexternalevents44";
	ИначеЕсли Строка(ТипКМ) = "30" ИЛИ Строка(ТипКМ) = "31" Тогда
		// БАД, МедИ
		КМ = "01" + GTIN + "215" + СгенерироватьСерийныйНомер(12, Истина) + "\x_GS" + "911234" + "\x_GS" 
			 + "92vanessaautomationtestcodeforexternalevents44";
	ИначеЕсли Строка(ТипКМ) = "23" Тогда
		// БАД короткий
		КМ = "01" + GTIN + "215" + СгенерироватьСерийныйНомер(12, Истина) + "\x_GS" + "931234";
	Иначе
		КМ = "01" + GTIN + "21" + СгенерироватьСерийныйНомер(30, Истина);
	КонецЕсли;	
	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, КМ);

КонецФункции

&НаКлиенте   
// И я генерирую SSCC честного знака для GS1 "GS1" уровня "1" в переменную "ИмяПеременной" (расширение)
// @ЯГенерируюSSCCЧестногоЗнакаДляGS1УровняВПеременнуюРасширение(Парам01,Парам02,Парам03)
Функция ЯГенерируюSSCCЧестногоЗнакаДляGS1УровняВПеременнуюРасширение(GS1, Уровень, ИмяПеременной) Экспорт
	
	GS1 = ?(ЗначениеЗаполнено(GS1), GS1, "1234567");
	
	КМ = СформироватьШтрихкодУпаковки(Уровень, GS1);
	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, КМ);

КонецФункции

&НаКлиенте
//И я выполняю код встроенного языка на клиенте через буфер обмена(Расширение)
//@ЯВыполняюКодВстроенногоЯзыкаНаКлиентеЧерезБуферОбменаРасширение(ТабПарам)
Функция ЯВыполняюКодВстроенногоЯзыкаНаКлиентеЧерезБуферОбменаРасширение(ТабПарам) Экспорт
	
	ЯВыполняюКодВстроенногоЯзыкаЧерезБуферОбменаРасширениеСлужебный(ТабПарам, Истина);
	
КонецФункции

&НаКлиенте
//И я выполняю код встроенного языка на сервере  через буфер обмена(Расширение)
//@ЯВыполняюКодВстроенногоЯзыкаНаСервереЧерезБуферОбменаРасширение(ТабПарам)
Функция ЯВыполняюКодВстроенногоЯзыкаНаСервереЧерезБуферОбменаРасширение(ТабПарам) Экспорт

	ЯВыполняюКодВстроенногоЯзыкаЧерезБуферОбменаРасширениеСлужебный(ТабПарам, Ложь);
	
КонецФункции

&НаКлиенте
//И я выполняю код встроенного языка на сервере  через буфер обмена в привилегированном режиме(Расширение)
//@ЯВыполняюКодВстроенногоЯзыкаНаСервереЧерезБуферОбменаВПривилегированномРежимеРасширение(ТабПарам)
Функция ЯВыполняюКодВстроенногоЯзыкаНаСервереЧерезБуферОбменаВПривилегированномРежимеРасширение(ТабПарам) Экспорт

	ЯВыполняюКодВстроенногоЯзыкаЧерезБуферОбменаРасширениеСлужебный(ТабПарам, Ложь, Истина);
	
КонецФункции

&НаКлиенте
Функция ЯВыполняюКодВстроенногоЯзыкаЧерезБуферОбменаРасширениеСлужебный(ТабПарам, НаКлиенте, ПривилегированныйРежим = Ложь)
	
	ТекстКодаДляВыполнения = Ванесса.МногострочнаяСтрокаИзПараметраШага(ТабПарам);
	
	ДанныеJSON = Новый Структура("НаКлиенте,ПривилегированныйРежим,Код", НаКлиенте, ПривилегированныйРежим, ТекстКодаДляВыполнения,);
	
	ТекстКодаJSON = Ванесса.ЗаписатьОбъектJSON(ДанныеJSON);
	БуферОбменаVA = Ванесса.БуферОбменаVA();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПоместитьВБуферОбменаVA", ЭтаФорма, "e1cib/command/ОбщаяКоманда.VAExtension_ВыполнитьПроизвольныйКод");
	
	БуферОбменаVA.НачатьВызовЗаписатьТекст(ОписаниеОповещения, ТекстКодаJSON);


	Ванесса.ЗапретитьВыполнениеШагов();
	
	
	
КонецФункции 

&НаКлиенте
Процедура ПослеПоместитьВБуферОбменаVA(Результат, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ГлавноеОкноТестируемого = Ванесса.ПолучитьГлавноеОкноИзТестовоеПриложение();
	
	ГлавноеОкноТестируемого.ВыполнитьКоманду(ДополнительныеПараметры);
	
	Ванесса.ПродолжитьВыполнениеШагов();
	
КонецПроцедуры

&НаКлиенте
//И я запускаю мониторинг каталога ""C:\temp""для внешних событий(Расширение)
//@ЯЗапускаюМониторингКаталогаДляВнешнихСобытийРасширение(Парам)
Функция ЯЗапускаюМониторингКаталогаДляВнешнихСобытийРасширение(Знач ПутьДоКаталога) Экспорт

	Если Не ЗначениеЗаполнено(ПутьДоКаталога) Тогда
		СтрокаСообщения = Ванесса.Локализовать("Каталог не задан");
		ВызватьИсключение СтрокаСообщения;		
	КонецЕсли;
	
	ТекущийPIDКлиента = Ванесса.ТекущиеДанныеКлиентаТестирования().PIDКлиентаТестирования;
	ПутьДоКаталога  = ПутьДоКаталога +  ПолучитьРазделительПути() + ТекущийPIDКлиента;
	
	Ванесса.СоздатьКаталогКомандаСистемы(ПутьДоКаталога);
	
	Ванесса.ОчиститьСодержимоеКаталога(ПутьДоКаталога, "Event_*.json");
	Ванесса.ОчиститьСодержимоеКаталога(ПутьДоКаталога, "Result_*.json");
	
	Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_ВнешниеСобытия");
	Ванесса.Шаг("Тогда открылась форма с именем '*.VAExtension_ВнешниеСобытия.*'");
	
	РеквизитКаталог = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("Каталог", Истина);
	
	
	РеквизитКаталог.ВвестиТекст(ПутьДоКаталога);
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	
	ЗапуститьМониторингКаталога = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ФормаЗапуститьМониторингКаталога");
	КнопкаЗакрыть = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ЗакрытьФорму");
	
	ЗапуститьМониторингКаталога.Нажать();
	
	
	Если НЕ КонтекстСохраняемый.Свойство("_СписокPIDКлиентовСМониторингомСобытий") Тогда
		КонтекстСохраняемый.Вставить("_СписокPIDКлиентовСМониторингомСобытий", Новый Соответствие);
	КонецЕсли;	
	
	КонтекстСохраняемый._СписокPIDКлиентовСМониторингомСобытий.Вставить(ТекущийPIDКлиента, ПутьДоКаталога);
	
	
	Попытка
		КнопкаЗакрыть.Нажать();
	Исключение
		Ванесса.ЗаписатьЛогВЖРИнформация("ВыполнениеКодаВстроенногоЯзыка", ОписаниеОшибки());
	КонецПопытки;
	
	КонтекстСохраняемый.Вставить("_ПутьДоКаталогаСобытий", 			ПутьДоКаталога);	
	КонтекстСохраняемый.Вставить("_ЗапущенМониторингКаталогаСобытий", 	Истина);
	КонтекстСохраняемый.Вставить("_ИмяФайлаПоследнегоСобытия", 		"");
	
КонецФункции

&НаКлиенте
//И я останавливаю мониторинг каталога внешних событий(Расширение)
//@ЯОстанавливаюМониторингКаталогаВнешнихСобытийРасширение(Парам)
Функция ЯОстанавливаюМониторингКаталогаВнешнихСобытийРасширение(Знач ПутьДоКаталога = "") Экспорт

	Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_ВнешниеСобытия");
	Ванесса.Шаг("Тогда открылась форма с именем '*.VAExtension_ВнешниеСобытия.*'");
	
	ТекущийPIDКлиента = Ванесса.ТекущиеДанныеКлиентаТестирования().PIDКлиентаТестирования;
	ПутьДоКаталога  = ПутьДоКаталога +  ПолучитьРазделительПути() + ТекущийPIDКлиента;
	
	РеквизитКаталог = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("Каталог", Истина);
	РеквизитКаталог.ВвестиТекст(ПутьДоКаталога);
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	
	ОстановитьМониторингКаталога = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ФормаОстановитьМониторингКаталога");
	КнопкаЗакрыть = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ЗакрытьФорму");
	
	ОстановитьМониторингКаталога.Нажать();
	
	Попытка
		КнопкаЗакрыть.Нажать();
	Исключение
		Ванесса.ЗаписатьЛогВЖРИнформация("ВыполнениеКодаВстроенногоЯзыка", ОписаниеОшибки());
	КонецПопытки;
		
	КонтекстСохраняемый.Вставить("_ЗапущенМониторингКаталогаСобытий", Ложь);	
	КонтекстСохраняемый.Вставить("_ПутьДоКаталогаСобытий", "");	

КонецФункции

&НаКлиенте
//И я выполняю код встроенного языка на клиенте через файл события(Расширение)
//@ЯВыполняюКодВстроенногоЯзыкаНаКлиентеЧерезФайлСобытияРасширение(ТабПарам)
Функция ЯВыполняюКодВстроенногоЯзыкаНаКлиентеЧерезФайлСобытияРасширение(ТабПарам) Экспорт
	
	ЯВыполняюКодВстроенногоЯзыкаЧерезФайлСобытияРасширениеСлужебный(ТабПарам, Истина);
	
КонецФункции

&НаКлиенте
//И я выполняю код встроенного языка на сервере через файл события(Расширение)
//@ЯВыполняюКодВстроенногоЯзыкаНаСервереЧерезФайлСобытияРасширение(ТабПарам)
Функция ЯВыполняюКодВстроенногоЯзыкаНаСервереЧерезФайлСобытияРасширение(ТабПарам) Экспорт

	ЯВыполняюКодВстроенногоЯзыкаЧерезФайлСобытияРасширениеСлужебный(ТабПарам, Ложь);
	
КонецФункции

&НаКлиенте
//И я выполняю код встроенного языка на сервере через файл события в привилегированном режиме(Расширение)
//@ЯВыполняюКодВстроенногоЯзыкаНаСервереЧерезФайлСобытияВПривилегированномРежимеРасширение(ТабПарам)
Функция ЯВыполняюКодВстроенногоЯзыкаНаСервереЧерезФайлСобытияВПривилегированномРежимеРасширение(ТабПарам) Экспорт

	ЯВыполняюКодВстроенногоЯзыкаЧерезФайлСобытияРасширениеСлужебный(ТабПарам, Ложь, Истина);
	
КонецФункции

&НаКлиенте
Функция ЯВыполняюКодВстроенногоЯзыкаЧерезФайлСобытияРасширениеСлужебный(Код, НаКлиенте, ПривилегированныйРежим = Ложь)
	
	Если НЕ КонтекстСохраняемый.Свойство("_СписокPIDКлиентовСМониторингомСобытий") Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	_СписокPIDКлиентовСМониторингомСобытий = КонтекстСохраняемый._СписокPIDКлиентовСМониторингомСобытий;
	ТекущийPIDКлиента = Ванесса.ТекущиеДанныеКлиентаТестирования().PIDКлиентаТестирования;
	Каталог = _СписокPIDКлиентовСМониторингомСобытий.Получить(ТекущийPIDКлиента);
	
	
	Если Каталог <> Неопределено Тогда
		
		ТекстСобытия = Новый Структура;
		Если НаКлиенте Тогда
			ТекстСобытия.Вставить("ВидСобытия","ВыполнитьКодНаКлиенте");
		Иначе
			Если ПривилегированныйРежим тогда
				ТекстСобытия.Вставить("ВидСобытия","ВыполнитьКодНаСервереПривилегировано");
			Иначе
				ТекстСобытия.Вставить("ВидСобытия","ВыполнитьКодНаСервере");
			КонецЕсли;	
		КонецЕсли;	
		ТекстСобытия.Вставить("Данные",Код);
		
		УникальныйИдентификаторСобытия = Новый УникальныйИдентификатор;
		ФайлСобытия = Каталог + ПолучитьРазделительПути() + "Event_RC_"+Строка(УникальныйИдентификаторСобытия)+".json";
		
		ЗаписьJson = Новый ЗаписьJson();
		ЗаписьJson.ОткрытьФайл(ФайлСобытия);
		ЗаписатьJSON(ЗаписьJson, ТекстСобытия); 
		ЗаписьJson.Закрыть();

		КонтекстСохраняемый.Вставить("_ИмяФайлаПоследнегоСобытия", ФайлСобытия);
		
	КонецЕсли;
КонецФункции 

&НаКлиенте
//И я вызываю внешнее событие "Источник" с событием "Событие" с данными "Данные" через файл события (Расширение)
//@ЯВызываюВнешнееСобытиеССобытиемСДаннымиЧерезФайлСобытияРасширение(ТабПарам)
Функция ЯВызываюВнешнееСобытиеССобытиемСДаннымиЧерезФайлСобытияРасширение(Источник, Событие, Данные) Экспорт

	Если НЕ КонтекстСохраняемый.Свойство("_СписокPIDКлиентовСМониторингомСобытий") Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	_СписокPIDКлиентовСМониторингомСобытий = КонтекстСохраняемый._СписокPIDКлиентовСМониторингомСобытий;
	ТекущийPIDКлиента = Ванесса.ТекущиеДанныеКлиентаТестирования().PIDКлиентаТестирования;
	Каталог = _СписокPIDКлиентовСМониторингомСобытий.Получить(ТекущийPIDКлиента);
	
	
	Если Каталог <> Неопределено Тогда

		
		ТекстСобытия = Новый Структура;
		ТекстСобытия.Вставить("ВидСобытия",	"ВнешнееСобытие");
		ТекстСобытия.Вставить("Источник", 	Источник);
		ТекстСобытия.Вставить("Событие",	Событие);
		ТекстСобытия.Вставить("Данные",		Данные);
		
		УникальныйИдентификаторСобытия = Новый УникальныйИдентификатор;
		ФайлСобытия = Каталог + ПолучитьРазделительПути() + "Event_OE_"+Строка(УникальныйИдентификаторСобытия)+".json";
		
		ЗаписьJson = Новый ЗаписьJson();
		ЗаписьJson.ОткрытьФайл(ФайлСобытия);
		ЗаписатьJSON(ЗаписьJson, ТекстСобытия); 
		ЗаписьJson.Закрыть();
		
		КонтекстСохраняемый.Вставить("_ИмяФайлаПоследнегоСобытия", ФайлСобытия);

	КонецЕсли;

	
КонецФункции

&НаКлиенте
//И я ожидаю "10" секунд результат обработки последнего события через файл и запоминаю результат в переменную "ИмяПеременной"(Расширение)
//@ЯОжидаюСекундРезультатОбработкиПоследнегоСобытияЧерезФайлИЗапоминаюРезультатВПеременнуюРасширение(ТабПарам)
Функция ЯОжидаюСекундРезультатОбработкиПоследнегоСобытияЧерезФайлИЗапоминаюРезультатВПеременнуюРасширение(КоличествоСекунд, ИмяПеременной) Экспорт

	Если НЕ КонтекстСохраняемый.Свойство("_СписокPIDКлиентовСМониторингомСобытий") Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	_СписокPIDКлиентовСМониторингомСобытий = КонтекстСохраняемый._СписокPIDКлиентовСМониторингомСобытий;
	ТекущийPIDКлиента = Ванесса.ТекущиеДанныеКлиентаТестирования().PIDКлиентаТестирования;
	Каталог = _СписокPIDКлиентовСМониторингомСобытий.Получить(ТекущийPIDКлиента);
	
	
	Если Каталог <> Неопределено Тогда

		
		Ванесса.ЗапретитьВыполнениеШагов();
		
		ДатаНачалаОбработкиОжидания       = ТекущаяДата();
		КоличествоСекундОбработкаОжидания = Ванесса.ЗначениеТаймаутаДляАсинхронногоШага(КоличествоСекунд);
		КонтекстСохраняемый.Вставить("_ИмяПеременнойРезультатаСобытия", ИмяПеременной);
		ПодключитьОбработчикОжидания("ЯЖдуРезультатПоследнегоСобытияЧерезФайлОбработчикОжидания",1,Ложь);
		
	КонецЕсли;

	
КонецФункции

&НаКлиенте
Функция ЯЖдуРезультатПоследнегоСобытияЧерезФайлОбработчикОжидания()
	
	ИмяОбработчика = "ЯЖдуРезультатПоследнегоСобытияЧерезФайлОбработчикОжидания";
	
	Если НЕ Ванесса.ИдетВыполнениеСценариев() Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Возврат Неопределено;
	КонецЕсли;
	
	Ванесса.ПроверитьНеобходимостьЗакрытьСистемныйДиалог();
	
	ЕстьРезультат = Ложь;
	
	ИмяФайлаРезультатСобытия = СтрЗаменить(КонтекстСохраняемый._ИмяФайлаПоследнегоСобытия, "Event", "Result");
	
	Если Ванесса.ФайлСуществуетКомандаСистемы(ИмяФайлаРезультатСобытия) Тогда
		// Файл может уже существовать, но его запись не завершена.
		Попытка 
			Текст = Новый ЧтениеТекста;
			Текст.Открыть(ИмяФайлаРезультатСобытия, "UTF-8");
			ТекстФайла = Текст.Прочитать();
			Текст.Закрыть();
			ДанныеФайла = Ванесса.ПрочитатьОбъектJSON(ТекстФайла);
			
			Ванесса.СохранитьЗначениеПеременнойВКонтекст(КонтекстСохраняемый._ИмяПеременнойРезультатаСобытия, ДанныеФайла);
			
			Ванесса.УдалитьФайлыКомандаСистемы(ИмяФайлаРезультатСобытия);
			ЕстьРезультат = Истина;
		Исключение
			
		КонецПопытки;	
		
	Иначе
		
	КонецЕсли;	

	
	Если ЕстьРезультат Тогда
		
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		Ванесса.ПродолжитьВыполнениеШагов();
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если (ТекущаяДата() - ДатаНачалаОбработкиОжидания) > КоличествоСекундОбработкаОжидания Тогда
		ОтключитьОбработчикОжидания(ИмяОбработчика);
		ТекстСообщения = Ванесса.ПолучитьТекстСообщенияПользователю("Ожидали в течение <%1> секунд появления файла %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КоличествоСекундОбработкаОжидания);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяФайлаРезультатСобытия);
		Ванесса.ПродолжитьВыполнениеШагов(Истина,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;	 
КонецФункции

&НаКлиенте
Функция СгенерироватьСерийныйНомер(КоличествоСимволов, СпецСимволы = Ложь, ТолькоЦифры = Ложь) Экспорт
	
	Если ТолькоЦифры Тогда
		БазоваяСтрока = "0123456789";
	Иначе	
		БазоваяСтрока = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789" + ?(СпецСимволы,"!""%&'()*+,-./_:;=<>?","");
	КонецЕсли;	
	
	ГСЧ 				= Новый ГенераторСлучайныхЧисел;
	СтрокаСерийныйНомер = "";
	
	Для Н=1 По КоличествоСимволов Цикл
		СтрокаСерийныйНомер = СтрокаСерийныйНомер + Сред(БазоваяСтрока, ГСЧ.СлучайноеЧисло(1, СтрДлина(БазоваяСтрока)), 1);
	КонецЦикла;	
	
	Возврат СтрокаСерийныйНомер;
	
КонецФункции

&НаКлиенте
Функция СформироватьШтрихкодУпаковки(ЦифраРасширения, ПрефиксКомпании) Экспорт
	
	// Формат (00)X460700958XXXXXXXC
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("00"); // Идентификатор применения, 00 - SSCC
	МассивСтрок.Добавить("" + ЦифраРасширения); // Цифра расширения, 1 - коробка, 2 - паллета
	МассивСтрок.Добавить("" + ПрефиксКомпании); // Префикс компании, 460700958
	ДлиннаПрефикса = СтрДлина(ПрефиксКомпании);
	МассивСтрок.Добавить(СгенерироватьСерийныйНомер(18-2-ДлиннаПрефикса,,Истина));
	МассивСтрок.Добавить("0"); // Временный контрольный символ
	
	НовыйSSCC = "";
	Для Н=0 По МассивСтрок.Количество()-1 Цикл
		НовыйSSCC = НовыйSSCC + МассивСтрок[Н];	
	КонецЦикла;
	
	КонтрольнаяЦифра = РассчитатьКонтрольныйСимволGTIN(НовыйSSCC);
	ШтрихкодУпаковки = Лев(НовыйSSCC, 19) + КонтрольнаяЦифра;
	
	Возврат ШтрихкодУпаковки;	
	
КонецФункции

&НаКлиенте
// Универсальная функция расчета контрольной цифры GTIN.
// GTIN допускает в формате GTIN-8, GTIN-12, GTIN-13, GTIN-14 c контрольным символом.
//
// Параметры:
//  GTIN - Текстовая строка с GTIN(c контрольным символом). Может содержать числа от 0 до 9.
// 
// Возвращаемое значение:
//   - Контрольный символ (число) рассчитанный по алгоритму для GTIN.
//
Функция РассчитатьКонтрольныйСимволGTIN(Знач GTIN) Экспорт
	
	Сумма = 0;
	ДлиннаGTIN = СтрДлина(GTIN);
	Коэффициент = ?(ДлиннаGTIN % 2 = 0, 3, 1); 
	
	Для Сч = 1 По ДлиннаGTIN - 1 Цикл
		ВремКодСимвола = КодСимвола(GTIN, Сч);
		Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма = (10 - Сумма % 10) % 10;
	КонтрольныйСимвол = Символ(Сумма + 48);
	
	Возврат КонтрольныйСимвол;
	
КонецФункции

&НаКлиенте
//И я выполняю проведение документа по навигационной ссылке "НавСсылка" (расширение)
//@ЯВыполняюПроведениеДокументаПоНавигационнойСсылкеРасширение(Парам01)
Функция ЯВыполняюПроведениеДокументаПоНавигационнойСсылкеРасширение(НавСсылка, Провести = Истина, ОжидаемыйТекстОшибки = Неопределено, ПоШаблону = Ложь) Экспорт
	
	Если ОжидаемыйТекстОшибки <> Неопределено Тогда
		ОжидаемыйТекстОшибки = Ванесса.МногострочнаяСтрокаИзПараметраШага(ОжидаемыйТекстОшибки);
	КонецЕсли;	
	
	Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_ПроведениеДокумента");
	Ванесса.Шаг("Тогда открылась форма с именем '*.VAExtension_ПроведениеДокумента.*'");
	
	РеквизитНавСсылка = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("НавСсылка", Истина);
	РеквизитНавСсылка.ВвестиТекст(НавСсылка);
	Если Провести Тогда
		ФлагПровести = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("Провести", Истина);
		ФлагПровести.Активизировать();
		ФлагПровести.УстановитьОтметку();
	КонецЕсли;	
	РеквизитОбработкаВыполнена = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ОбработкаВыполнена", Истина);
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	
	КнопкаВыполнитьКод = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ФормаВыполнитьОбработку");
	КнопкаЗакрытьФорму = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ЗакрытьФорму");
	
	КнопкаВыполнитьКод.Нажать();
	
	БылаОшибка = Ложь;
	ТекстИсключения = "";
	КоличествоПопытокПолученияОкнаИзПриложения = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для Сч = 1 По КоличествоПопытокПолученияОкнаИзПриложения Цикл
		БылаОшибка = Ложь;
		ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитОбработкаВыполнена);
		ПредставлениеДанных = Ванесса.ПривестиЗначениеФлагаКСтандарту(ПредставлениеДанных);
		Если ПредставлениеДанных <> "Да" Тогда
			Ванесса.sleep(1);
			Продолжить;
		КонецЕсли;	 
	КонецЦикла;	
		
	РеквизитТекстИсключения = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ТекстИсключения", Истина);
	ТекстИсключенияПроведенияДокумента = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитТекстИсключения);
	
	Если ЗначениеЗаполнено(ОжидаемыйТекстОшибки) Тогда
		//Значит ожидается текст ошибки
		
		Если НЕ ЗначениеЗаполнено(ТекстИсключенияПроведенияДокумента) Тогда
			БылаОшибка = Истина;
		Иначе	
			
			Если ПоШаблону Тогда
				Если НЕ Ванесса.СтрокаСоответствуетШаблону(НРег(ТекстИсключенияПроведенияДокумента), НРег(ОжидаемыйТекстОшибки)) Тогда
					БылаОшибка = Истина;
				КонецЕсли;	
			Иначе	
				Если НРег(ТекстИсключенияПроведенияДокумента) <> НРег(ОжидаемыйТекстОшибки) Тогда
					БылаОшибка = Истина;
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;	
		
		Если БылаОшибка Тогда
			Если Провести Тогда
				Если ЗначениеЗаполнено(ТекстИсключенияПроведенияДокумента) Тогда
					ТекстИсключения = Ванесса.ПодставитьПараметрыВСтроку(
						Ванесса.Локализовать("При проведении документа <%1> был получен текст ошибки <%2>. А ожидался текст ошибки <%3>."), НавСсылка, ТекстИсключенияПроведенияДокумента, ОжидаемыйТекстОшибки);
				Иначе		
					ТекстИсключения = Ванесса.ПодставитьПараметрыВСтроку(
						Ванесса.Локализовать("Документ <%1> был проведен без ошибки."), НавСсылка);
				КонецЕсли;	
			Иначе	
				
				Если ЗначениеЗаполнено(ТекстИсключенияПроведенияДокумента) Тогда
					ТекстИсключения = Ванесса.ПодставитьПараметрыВСтроку(
						Ванесса.Локализовать("При распроведении документа <%1> был получен текст ошибки <%2>. А ожидался текст ошибки <%3>."), НавСсылка, ТекстИсключенияПроведенияДокумента, ОжидаемыйТекстОшибки);
				Иначе		
					ТекстИсключения = Ванесса.ПодставитьПараметрыВСтроку(
						Ванесса.Локализовать("Документ <%1> был распроведен без ошибки."), НавСсылка);
				КонецЕсли;	
				
			КонецЕсли;	
		КонецЕсли;	
		
	Иначе
		//Значит ожиадется проведение или распроведение без ошибки
		Если ЗначениеЗаполнено(ТекстИсключенияПроведенияДокумента) Тогда
			БылаОшибка = Истина;
			Если Провести Тогда
				ТекстИсключения = Ванесса.ПодставитьПараметрыВСтроку(
					Ванесса.Локализовать("Не получилось провести документ <%1>.") + Символы.ПС + ТекстИсключенияПроведенияДокумента, НавСсылка);
			Иначе		
				ТекстИсключения = Ванесса.ПодставитьПараметрыВСтроку(
					Ванесса.Локализовать("Не получилось распровести документ <%1>.") + Символы.ПС + ТекстИсключенияПроведенияДокумента, НавСсылка);
			КонецЕсли;	
		Иначе	
			БылаОшибка = Ложь;
		КонецЕсли;	
	КонецЕсли;	
	
	КнопкаЗакрытьФорму.Нажать();
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
//И я отменяю проведение документа по навигационной ссылке "НавСсылка" (расширение)
//@ЯОтменяюПроведениеДокументаПоНавигационнойСсылкеРасширение(Парам01)
Функция ЯОтменяюПроведениеДокументаПоНавигационнойСсылкеРасширение(НавСсылка) Экспорт
	
	ЯВыполняюПроведениеДокументаПоНавигационнойСсылкеРасширение(НавСсылка, Ложь);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьМассивНавигационныхСсылок(НайденныеСсылки, ТипДействия)
	
	ТекстСсылки = Ванесса.ЗаписатьОбъектJSON(НайденныеСсылки);
	
	Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_ПроведениеДокумента");
	Ванесса.Шаг("Тогда открылась форма с именем '*.VAExtension_ПроведениеДокумента.*'");
	
	РеквизитНавСсылки = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("НавСсылка", Истина);
	РеквизитНавСсылки.ВвестиТекст(ТекстСсылки);
	РеквизитОбработкаВыполнена = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ОбработкаВыполнена", Истина);
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	
	Если ТипДействия = "ОтменаПроведения" Тогда
		КнопкаВыполнитьКод = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ФормаРаспровестиНавСсылки");
	ИначеЕсли ТипДействия = "ПометкаУдаления" Тогда
		КнопкаВыполнитьКод = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ФормаПометитьНаУдалениеНавссылки");
		РеквизитПометитьНаУдаление = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ПометитьНаУдаление", Истина);
		РеквизитПометитьНаУдаление.Активизировать();
		РеквизитПометитьНаУдаление.УстановитьОтметку();
	Иначе
		ТекстИсключения = Ванесса.ПодставитьПараметрыВСтроку(
			Ванесса.Локализовать("Неизвестный тип действия <%1>."), ТипДействия);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	КнопкаЗакрытьФорму = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ЗакрытьФорму");
	
	БылаОшибка = Истина;
	ТекстИсключения = "";
	КоличествоПопытокПолученияОкнаИзПриложения = Макс(Ванесса.ЗначениеКоличествоПопытокВыполненияДействия(), 5);
	Для Сч = 1 По КоличествоПопытокПолученияОкнаИзПриложения Цикл
		
		КнопкаВыполнитьКод.Нажать();
		
		ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитОбработкаВыполнена);
		ПредставлениеДанных = Ванесса.ПривестиЗначениеФлагаКСтандарту(ПредставлениеДанных);
		Если ПредставлениеДанных <> "Да" Тогда
			Ванесса.sleep(1);
			Продолжить;
		КонецЕсли;	 
		
		РеквизитТекстИсключения = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ТекстИсключения", Истина);
		ТекстИсключения = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитТекстИсключения);
		Если ЗначениеЗаполнено(ТекстИсключения) Тогда
			БылаОшибка = Истина;
		Иначе	
			БылаОшибка = Ложь;
		КонецЕсли;	
		
		Если НЕ БылаОшибка Тогда
			КнопкаЗакрытьФорму.Нажать();
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если БылаОшибка Тогда
		Если ТипДействия = "ОтменаПроведения" Тогда
			СтрокаСообщения = 
				Ванесса.Локализовать(
					Ванесса.ПодставитьПараметрыВСтроку("Не получилось распровести документы из текущего сценария. Количество попыток <%1>.", XMLСтрока(КоличествоПопытокПолученияОкнаИзПриложения)))
					+ Символы.ПС + ТекстИсключения;
			ВызватьИсключение СтрокаСообщения;
		ИначеЕсли ТипДействия = "ПометкаУдаления" Тогда
			СтрокаСообщения = 
				Ванесса.Локализовать(
					Ванесса.ПодставитьПараметрыВСтроку("Не получилось пометить объекты на удаление. Количество попыток <%1>.", XMLСтрока(КоличествоПопытокПолученияОкнаИзПриложения)))
					+ Символы.ПС + ТекстИсключения;
			ВызватьИсключение СтрокаСообщения;
		Иначе
			ТекстИсключения = Ванесса.ПодставитьПараметрыВСтроку(
				Ванесса.Локализовать("Неизвестный тип действия <%1>."), ТипДействия);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//И я отменяю проведение всех документов этого сценария по их навигационным ссылкам (расширение)
//@ЯОтменяюПроведениеВсехДокументовЭтогоСценарияПоИхНавигационнымСсылкамРасширение()
Функция ЯОтменяюПроведениеВсехДокументовЭтогоСценарияПоИхНавигационнымСсылкамРасширение() Экспорт
	
	ШагиДанногоСценария = Ванесса.ШагиДанногоСценария();
	
	НайденныеСсылки = Новый Массив;
	Кеш = Новый Соответствие;
	
	//Перебор массива в обратном порядке
	Для Сч = 0 По ШагиДанногоСценария.Количество() - 1 Цикл
		
		ТекШаг = ШагиДанногоСценария[ШагиДанногоСценария.Количество() - 1 - Сч];
		
		Если НЕ ТекШаг.Свойство("ЗначенияПараметров") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекПараметр Из ТекШаг.ЗначенияПараметров Цикл
			ТекСсылка = ТекПараметр.Значение.Значение;
			Попытка
				ТекСсылка = Ванесса.ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(ТекСсылка);
			Исключение
			КонецПопытки;
			
			Если Найти(НРег(ТекСсылка), "e1cib/data/документ.") > 0
				ИЛИ Найти(НРег(ТекСсылка), "e1cib/data/document.") > 0  Тогда
					СтрокаКеш = НРег(СокрЛП(ТекСсылка));
					Если Кеш[СтрокаКеш] = Неопределено Тогда
						НайденныеСсылки.Добавить(ТекСсылка);	
						Кеш.Вставить(СтрокаКеш, ТекСсылка);
					КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЦикла;
	
	Если НайденныеСсылки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбработатьМассивНавигационныхСсылок(НайденныеСсылки, "ОтменаПроведения");
	
КонецФункции

&НаКлиенте
//И я выполняю проведение документа по навигационной ссылке "НавСсылка" и получаю ошибку "ТекстОшибки" (расширение)
//@ЯВыполняюПроведениеДокументаПоНавигационнойСсылкеИПолучаюОшибкуРасширение(Парам01,Парам02)
Функция ЯВыполняюПроведениеДокументаПоНавигационнойСсылкеИПолучаюОшибкуРасширение(НавСсылка, ТекстОшибки) Экспорт
	ЯВыполняюПроведениеДокументаПоНавигационнойСсылкеРасширение(НавСсылка, Истина, ТекстОшибки, Ложь);
КонецФункции

&НаКлиенте
//И я выполняю проведение документа по навигационной ссылке "НавСсылка" и получаю ошибку "ТекстОшибки" по шаблону (расширение)
//@ЯВыполняюПроведениеДокументаПоНавигационнойСсылкеИПолучаюОшибкуПоШаблонуРасширение(Парам01,Парам02)
Функция ЯВыполняюПроведениеДокументаПоНавигационнойСсылкеИПолучаюОшибкуПоШаблонуРасширение(НавСсылка, ТекстОшибки) Экспорт
	ЯВыполняюПроведениеДокументаПоНавигационнойСсылкеРасширение(НавСсылка, Истина, ТекстОшибки, Истина);
КонецФункции

&НаКлиенте
//И я отменяю проведение документа по навигационной ссылке "НавСсылка" и получаю ошибку "ТекстОшибки" (расширение)
//@ЯОтменяюПроведениеДокументаПоНавигационнойСсылкеИПолучаюОшибкуРасширение(Парам01,Парам02)
Функция ЯОтменяюПроведениеДокументаПоНавигационнойСсылкеИПолучаюОшибкуРасширение(НавСсылка, ТекстОшибки) Экспорт
	ЯВыполняюПроведениеДокументаПоНавигационнойСсылкеРасширение(НавСсылка, Ложь, ТекстОшибки, Ложь);
КонецФункции

&НаКлиенте
//И я отменяю проведение документа по навигационной ссылке "НавСсылка" и получаю ошибку "ТекстОшибки" по шаблону (расширение)
//@ЯОтменяюПроведениеДокументаПоНавигационнойСсылкеИПолучаюОшибкуПоШаблонуРасширение(Парам01,Парам02)
Функция ЯОтменяюПроведениеДокументаПоНавигационнойСсылкеИПолучаюОшибкуПоШаблонуРасширение(НавСсылка, ТекстОшибки) Экспорт
	ЯВыполняюПроведениеДокументаПоНавигационнойСсылкеРасширение(НавСсылка, Ложь, ТекстОшибки, Истина);
КонецФункции

&НаКлиенте
//И вариант отчета "ИмяОтчета" "ИмяВариантаОтчета" равен макету "ИмяЭталона" (расширение)
//@ВариантОтчетаРавенМакетуРасширение(Парам01,Парам02,Парам03)
Функция ВариантОтчетаРавенМакетуРасширение(ИмяОтчета, ИмяВариантаОтчета, ИмяМакета, СравнениеПоШаблону = Ложь) Экспорт

	ИмяФайлаМакета = Неопределено;
	ТабДокБыло = Ванесса.ПолучитьЭталонМакета(ИмяМакета, ИмяФайлаМакета);
	
	Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_МакетПоВариантуОтчета");
	Ванесса.Шаг("Тогда открылась форма с именем '*.VAExtension_МакетПоВариантуОтчета.*'");
	
	РеквизитИмяОтчета = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ИмяОтчета", Истина);
	РеквизитИмяОтчета.ВвестиТекст(ИмяОтчета);
	РеквизитПредставлениеВариантаОтчета = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ПредставлениеВариантаОтчета", Истина);
	РеквизитПредставлениеВариантаОтчета.ВвестиТекст(ИмяВариантаОтчета);
	
	
	РеквизитОбработкаВыполнена = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ОбработкаВыполнена", Истина);
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	
	КнопкаВыполнитьКод = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ФормаВыполнитьОбработку");
	КнопкаЗакрытьФорму = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ЗакрытьФорму");
	
	КнопкаВыполнитьКод.Нажать();
	
	БылаОшибка = Ложь;
	ТекстИсключения = "";
	КоличествоПопытокПолученияОкнаИзПриложения = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для Сч = 1 По КоличествоПопытокПолученияОкнаИзПриложения Цикл
		ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитОбработкаВыполнена);
		ПредставлениеДанных = Ванесса.ПривестиЗначениеФлагаКСтандарту(ПредставлениеДанных);
		Если ПредставлениеДанных <> "Да" Тогда
			Ванесса.sleep(1);
			Продолжить;
		КонецЕсли;	 
	КонецЦикла;	
		
	РеквизитТекстИсключения = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ТекстИсключения", Истина);
	ТекстИсключенияФормированияОтчета = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитТекстИсключения);
	
	Если ЗначениеЗаполнено(ТекстИсключенияФормированияОтчета) Тогда
		БылаОшибка = Истина;
		ТекстИсключения = Ванесса.ПодставитьПараметрыВСтроку(
			Ванесса.Локализовать("При формировании отчета <%1> <%2> возникла ошибка:"), ИмяОтчета, ИмяВариантаОтчета) + Символы.ПС + ТекстИсключенияФормированияОтчета;
		ВызватьИсключение ТекстИсключения;	
	КонецЕсли;	
	
	РеквизитЗначениеРезультат = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеРезультат", Истина);
	ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитЗначениеРезультат);
	ТабДокСтало = МакетИзТекстаXML(ПредставлениеДанных);
	
	КнопкаЗакрытьФорму.Нажать(); 
	
	Если СравнениеПоШаблону Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("СравнениеПоШаблону",Истина);
	Иначе
		ДопПараметры = Неопределено;
	КонецЕсли;	 
	
	МакетыСовпали = Ложь;
	ТекстОшибки = "";
	Попытка
		Ванесса.ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабДокБыло, ТабДокСтало,,,, ДопПараметры);
		МакетыСовпали = Истина;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если НЕ МакетыСовпали Тогда
		
		Ванесса.УстановитьЗначенияТаблицДляСравнения(ТабДокБыло, ТабДокСтало);
		Ванесса.ПрикрепитьМакетКСценарию(ТабДокСтало, Ванесса.Локализовать("ТекущееЗначениеМакета"));
		Ванесса.ПрикрепитьМакетКСценарию(ТабДокБыло, Ванесса.Локализовать("ЭталонноеЗначениеМакета"));
		Если Ванесса.РежимСовместимостиБольшеИлиРавен837 Тогда
			Ванесса.ПрикрепитьМакетКСценарию(Ванесса.ПолучитьРазличияВМакетах(ТабДокБыло, ТабДокСтало), Ванесса.Локализовать("Различия"));
		КонецЕсли;
		Ванесса.ПрикрепитьКСценариюДополнительныеФайлыСравненияЗначенияСЭталоном(ТабДокБыло, ТабДокСтало);
		
		ПараметрыАктуализации = Новый Структура;
		ПараметрыАктуализации.Вставить("ТипСравненияЗначения", "СравнениеТабличногоДокументаСМакетом");
		Если ИмяФайлаМакета <> Неопределено Тогда
			ПараметрыАктуализации.Вставить("ИмяФайлаМакета", ИмяФайлаМакета);
		КонецЕсли;	
		Ванесса.УстановитьЗначенияДляАктуализацииПараметровШага(ПараметрыАктуализации);
		
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция МакетИзТекстаXML(Знач Строка)
	
    ЧтениеXML = Новый ЧтениеXML;
    ЧтениеXML.УстановитьСтроку(Строка);
    ЧтениеXML.Прочитать();
	
	Результат = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	Если ТипЗнч(Результат) = Тип("ДвоичныеДанные") Тогда
		Поток = Результат.ОткрытьПотокДляЧтения();
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(Поток);
		Поток.Закрыть();
	Иначе	
		ТабДок = Результат;
	КонецЕсли;	
	
    Возврат ТабДок;
	
КонецФункции

&НаКлиенте
//И вариант отчета "ИмяОтчета" "ИмяВариантаОтчета" равен макету "ИмяЭталона" по шаблону (расширение)
//@ВариантОтчетаРавенМакетуПоШаблонуРасширение(Парам01,Парам02,Парам03)
Функция ВариантОтчетаРавенМакетуПоШаблонуРасширение(ИмяОтчета, ИмяВариантаОтчета, ИмяМакета) Экспорт
	ВариантОтчетаРавенМакетуРасширение(ИмяОтчета, ИмяВариантаОтчета, ИмяМакета, Истина);
КонецФункции

&НаКлиенте
//И я получаю состояние объекта по навигационной ссылке "НавСсылка" (расширение)
//@ЯПолучаюСостояниеОбъектаПоНавигационнойСсылкеРасширение(Парам01)
Функция ЯПолучаюСостояниеОбъектаПоНавигационнойСсылкеРасширение(НавСсылка) Экспорт
	
	Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_ПроведениеДокумента");
	Ванесса.Шаг("Тогда открылась форма с именем '*.VAExtension_ПроведениеДокумента.*'");
	
	РеквизитНавСсылка = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("НавСсылка", Истина);
	РеквизитНавСсылка.ВвестиТекст(НавСсылка);
	РеквизитОбработкаВыполнена = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ОбработкаВыполнена", Истина);
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	
	КнопкаВыполнитьКод = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ФормаПолучитьСостояниеОбъекта");
	КнопкаЗакрытьФорму = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ЗакрытьФорму");
	
	КнопкаВыполнитьКод.Нажать();
	
	БылаОшибка = Ложь;
	ТекстИсключения = "";
	КоличествоПопытокПолученияОкнаИзПриложения = Ванесса.ЗначениеКоличествоПопытокВыполненияДействия();
	Для Сч = 1 По КоличествоПопытокПолученияОкнаИзПриложения Цикл
		БылаОшибка = Ложь;
		ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитОбработкаВыполнена);
		ПредставлениеДанных = Ванесса.ПривестиЗначениеФлагаКСтандарту(ПредставлениеДанных);
		Если ПредставлениеДанных <> "Да" Тогда
			Ванесса.sleep(1);
			Продолжить;
		КонецЕсли;	 
	КонецЦикла;	
		
	РеквизитТекстИсключения = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ТекстИсключения", Истина);
	ТекстИсключенияОбработки = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитТекстИсключения);
	
	Если ЗначениеЗаполнено(ТекстИсключенияОбработки) Тогда
		БылаОшибка = Истина;
		ТекстИсключения = Ванесса.ПодставитьПараметрыВСтроку(
			Ванесса.Локализовать("Не получилось получить состояние объекта по навигационной ссылке <%1>.") + Символы.ПС + ТекстИсключенияОбработки, НавСсылка);
	Иначе	
		БылаОшибка = Ложь;
	КонецЕсли;	
	
	Если БылаОшибка Тогда
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	РеквизитЗначениеРезультат = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеРезультат", Истина);
	ПредставлениеДанных = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитЗначениеРезультат);
	
	ЧтениеJSON = New ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ПредставлениеДанных);
	ИменаСвойствСоЗначениямиДата = Новый Массив;
	ИменаСвойствСоЗначениямиДата.Добавить("Дата");
	Данные = ПрочитатьJSON(ЧтениеJSON, Ложь, ИменаСвойствСоЗначениямиДата);
	ЧтениеJSON.Закрыть();
	
	Для Каждого КлючЗначение Из Данные Цикл
		Ванесса.СохранитьЗначениеПеременнойВКонтекст(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;	 
	
	КнопкаЗакрытьФорму.Нажать();
	
КонецФункции

&НаКлиенте
//И я запоминаю навигационную ссылку текущего окна для удаления (расширение)
//@ЯЗапоминаюНавигационнуюСсылкуТекущегоОкнаДляУдаленияРасширение()
Функция ЯЗапоминаюНавигационнуюСсылкуТекущегоОкнаДляУдаленияРасширение() Экспорт
	
	ЯСохраняюНавигационнуюСсылкуТекущегоОкнаВПеременнуюРасширение("_TempLinksToDelete");
	Если НЕ Контекст.Свойство("LinksToDelete") Тогда
		Контекст.Вставить("LinksToDelete", Новый Массив);
	КонецЕсли;
	
	Контекст.LinksToDelete.Добавить(Контекст._TempLinksToDelete);
	Контекст.Удалить("_TempLinksToDelete");
	
КонецФункции

&НаКлиенте
//И я запоминаю навигационную ссылку "НавСсылка" для удаления (расширение)
//@ЯЗапоминаюНавигационнуюСсылкуДляУдаленияРасширение(Парам01)
Функция ЯЗапоминаюНавигационнуюСсылкуДляУдаленияРасширение(НавСсылка) Экспорт
	
	Если НЕ Контекст.Свойство("LinksToDelete") Тогда
		Контекст.Вставить("LinksToDelete", Новый Массив);
	КонецЕсли;
	
	Контекст.LinksToDelete.Добавить(НавСсылка);
	
КонецФункции

&НаКлиенте
//И я устанавливаю пометку удаления объектам, указанным к удалению (расширение)
//@ЯУстанавливаюПометкуУдаленияОбъектамУказаннымКУдалениюРасширение()
Функция ЯУстанавливаюПометкуУдаленияОбъектамУказаннымКУдалениюРасширение() Экспорт
	
	Если НЕ Контекст.Свойство("LinksToDelete") Тогда
		Возврат Неопределено;
	КонецЕсли;

	ОбработатьМассивНавигационныхСсылок(Контекст.LinksToDelete, "ПометкаУдаления");
	
КонецФункции

&НаКлиенте
//И я получаю данные о подключенных расширениях клиента тестирования (Расширение)
//@ЯПолучаюДанныеОПодключенныхРасширенияхКлиентаТестированияРасширение()
Функция ЯПолучаюДанныеОПодключенныхРасширенияхКлиентаТестированияРасширение() Экспорт
	
	Текст = "
	|Результат = Новый Массив;
	|
	|Данные = РасширенияКонфигурации.Получить();
	|Для Каждого ТекРасширение Из Данные Цикл
	|	ДанныеРасширения = Новый Структура;
	|	ДанныеРасширения.Вставить(""Name"", ТекРасширение.Имя);
	|	ДанныеРасширения.Вставить(""Synonym"", ТекРасширение.Синоним);
	|	ДанныеРасширения.Вставить(""UID"", Строка(ТекРасширение.УникальныйИдентификатор));
	|	ДанныеРасширения.Вставить(""Version"", ТекРасширение.Версия);
	|	ДанныеРасширения.Вставить(""SafeMode"", ТекРасширение.БезопасныйРежим);
	|	ДанныеРасширения.Вставить(""Active"", ТекРасширение.Активно);
	|	
	|	Результат.Добавить(ДанныеРасширения);
	|	
	|	ЗаписьJSON = Новый ЗаписьJSON;
	|	ЗаписьJSON.УстановитьСтроку();
	|	ЗаписатьJSON(ЗаписьJSON, Результат);
	|	ЗначениеДляВозврата = ЗаписьJSON.Закрыть();
	|	
	|КонецЦикла;
	|";
	
	Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_ВыполнитьПроизвольныйКод");
	Ванесса.Шаг("Тогда открылась форма с именем '*.VAExtension_ВыполнитьПроизвольныйКод.*'");
	
	РеквизитВыражениеВычислено = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ВыражениеВычислено", Истина);
	РеквизитКодДляВыполнения = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("КодДляВыполнения", Истина);
	РеквизитКодДляВыполнения.ВвестиТекст(Текст);
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	
	КнопкаВыполнитьКод = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ФормаВыполнитьКодСервер");
	
	КнопкаЗакрытьФорму = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ЗакрытьФорму");
	
	КнопкаВыполнитьКод.Нажать();
	
	БылаОшибка = Истина;
	Ванесса.ОжиданиеОкончанияОбработки(БылаОшибка, РеквизитВыражениеВычислено);
	
	Если БылаОшибка Тогда
		СтрокаСообщения = Ванесса.Локализовать("Не получилось выполнить код на стороне клиента тестирования.");
		ВызватьИсключение СтрокаСообщения + Символы.ПС + Текст;
	КонецЕсли;
	
	РеквизитЗначениеДляВозврата = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеДляВозврата", Истина);
	ПредставлениеРезультата = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитЗначениеДляВозврата);
	
	Данные = Ванесса.ПрочитатьОбъектJSON(ПредставлениеРезультата);
	Для Каждого ТекДанныеРасширения Из Данные Цикл
		ИмяПеременной = "Extension_" + ТекДанныеРасширения.Name;
		Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной,ТекДанныеРасширения);
	КонецЦикла;	
	
	Попытка
		КнопкаЗакрытьФорму.Нажать();
	Исключение
		Ванесса.ЗаписатьЛогВЖРИнформация("ВыполнениеКодаВстроенногоЯзыка", ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

&НаКлиенте
//И я открываю текстовый файл "ИмяФайла" (расширение)
//@ЯОткрываюТекстовыйФайлРасширение(Парам01)
Функция ЯОткрываюТекстовыйФайлРасширение(Знач ИмяФайла, ТипФайла = Неопределено) Экспорт
	
	ИмяФайла = СтрЗаменить(ИмяФайла, """", """""");
	
	Если НЕ ЗначениеЗаполнено(ТипФайла) Тогда
		Текст = "
		|ТекстовыйДокумент = Новый ТекстовыйДокумент;
		|ТекстовыйДокумент.Прочитать(""%ИмяФайла%"");
		|ТекстовыйДокумент.Показать();
		|";
	Иначе	
		Текст = "
		|ТекстовыйДокумент = Новый ТекстовыйДокумент;
		|ТекстовыйДокумент.Прочитать(""%ИмяФайла%"", ""%ТипФайла%"");
		|ТекстовыйДокумент.Показать();
		|";
	КонецЕсли;
	
	Текст = СтрЗаменить(Текст, "%ИмяФайла%", ИмяФайла);
	Если ЗначениеЗаполнено(ТипФайла) Тогда
		Текст = СтрЗаменить(Текст, "%ТипФайла%", ТипФайла);
	КонецЕсли;	
	
	Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_ВыполнитьПроизвольныйКод");
	Ванесса.Шаг("Тогда открылась форма с именем '*.VAExtension_ВыполнитьПроизвольныйКод.*'");
	
	РеквизитВыражениеВычислено = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ВыражениеВычислено", Истина);
	РеквизитКодДляВыполнения = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("КодДляВыполнения", Истина);
	РеквизитКодДляВыполнения.ВвестиТекст(Текст);
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	
	КнопкаВыполнитьКод = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ФормаВыполнитьКод");
	
	КнопкаЗакрытьФорму = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ЗакрытьФорму");
	
	КнопкаВыполнитьКод.Нажать();
	
	БылаОшибка = Истина;
	Ванесса.ОжиданиеОкончанияОбработки(БылаОшибка, РеквизитВыражениеВычислено);
	
	Если БылаОшибка Тогда
		СтрокаСообщения = Ванесса.Локализовать("Не получилось выполнить код на стороне клиента тестирования.");
		ВызватьИсключение СтрокаСообщения + Символы.ПС + Текст;
	КонецЕсли;
	
	АктивноеОкно.Активизировать();
	
	Попытка
		КнопкаЗакрытьФорму.Нажать();
	Исключение
		Ванесса.ЗаписатьЛогВЖРИнформация("ВыполнениеКодаВстроенногоЯзыка", ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

&НаКлиенте
//И я открываю табличный документ "ИмяФайла" (расширение)
//@ЯОткрываюТабличныйДокументРасширение(Парам01)
Функция ЯОткрываюТабличныйДокументРасширение(Знач ИмяФайла) Экспорт
	
	ИмяФайла = СтрЗаменить(ИмяФайла, """", """""");
	
	Текст = "
	|Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(""%ИмяФайла%""));
	|ТабДок = ПолучитьТабличныйДокументСервер(Адрес);
	|ТабДок.Показать();
	|";
	
	Текст = СтрЗаменить(Текст, "%ИмяФайла%", ИмяФайла);
	Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_ВыполнитьПроизвольныйКод");
	Ванесса.Шаг("Тогда открылась форма с именем '*.VAExtension_ВыполнитьПроизвольныйКод.*'");
	
	РеквизитВыражениеВычислено = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ВыражениеВычислено", Истина);
	РеквизитКодДляВыполнения = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("КодДляВыполнения", Истина);
	РеквизитКодДляВыполнения.ВвестиТекст(Текст);
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	
	КнопкаВыполнитьКод = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ФормаВыполнитьКод");
	
	КнопкаЗакрытьФорму = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ЗакрытьФорму");
	
	КнопкаВыполнитьКод.Нажать();
	
	БылаОшибка = Истина;
	Ванесса.ОжиданиеОкончанияОбработки(БылаОшибка, РеквизитВыражениеВычислено);
	
	Если БылаОшибка Тогда
		СтрокаСообщения = Ванесса.Локализовать("Не получилось выполнить код на стороне клиента тестирования.");
		ВызватьИсключение СтрокаСообщения + Символы.ПС + Текст;
	КонецЕсли;
	
	АктивноеОкно.Активизировать();
	
	Попытка
		КнопкаЗакрытьФорму.Нажать();
	Исключение
		Ванесса.ЗаписатьЛогВЖРИнформация("ВыполнениеКодаВстроенногоЯзыка", ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

&НаКлиенте
//И я отключаю обновление текста редактирования полей в текущем окне (расширение)
//@ЯОтключаюОбновлениеТекстаРедактированияПолейВТекущемОкнеРасширение()
Функция ЯОтключаюОбновлениеТекстаРедактированияПолейВТекущемОкнеРасширение() Экспорт
	
	Ванесса.ОтключитьОбновлениеТекстаРедактированияПолейВТекущемОкнеРасширение(Истина);
	
КонецФункции

&НаКлиенте
//И я запоминаю версию конфигурации "УправлениеТорговлей" как "Версия" (расширение)
//@ЯЗапоминаюВерсиюКонфигурацииКакрасширение(Парам01,Парам02)
Функция ЯЗапоминаюВерсиюКонфигурацииКакрасширение(ИмяПосистемы, ИмяПеременной) Экспорт
	
	Ванесса.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.VAExtension_ВыполнитьПроизвольныйКод");
	Ванесса.Шаг("Тогда открылась форма с именем '*.VAExtension_ВыполнитьПроизвольныйКод.*'");
	
	Текст = "
	|УстановитьПривилегированныйРежим(Истина);
	|
	|ИмяПодсистемы = ""%ИмяПодсистемы%"";
	|
	|КодЯзыка = Метаданные.ОсновнойЯзык.КодЯзыка;
	|Если НРег(КодЯзыка) = ""en"" Тогда
	|	ЭтоАнглйиский = Истина;
	|	ИмяРС = ""SubsystemsVersions"";
	|	ИмяИзмерения = ""SubsystemName"";
	|	ИмяПоля = ""Version"";
	|Иначе	
	|	ЭтоАнглйиский = Ложь;
	|	ИмяРС = ""ВерсииПодсистем"";
	|	ИмяИзмерения = ""ИмяПодсистемы"";
	|	ИмяПоля = ""Версия"";
	|КонецЕсли;
	|
	|Если Метаданные.РегистрыСведений[ИмяРС] = Неопределено Тогда
	|	ВызватьИсключение СтрШаблон(""Не обнаружен регистр сведений <%1>"", ИмяРС);
	|КонецЕсли;
	|
	|Запрос = Новый Запрос;
	|Запрос.Текст = 
	|	""ВЫБРАТЬ
	|	|	ВерсииПодсистем.%ИмяПоля% КАК Версия
	|	|ИЗ
	|	|	РегистрСведений.%ИмяРС% КАК ВерсииПодсистем
	|	|ГДЕ
	|	|	ВерсииПодсистем.%ИмяИзмерения% = &ИмяПодсистемы"";
	|
	|Запрос.Текст = СтрЗаменить(Запрос.Текст, ""%ИмяРС%"", ИмяРС);
	|Запрос.Текст = СтрЗаменить(Запрос.Текст, ""%ИмяИзмерения%"", ИмяИзмерения);
	|Запрос.Текст = СтрЗаменить(Запрос.Текст, ""%ИмяПоля%"", ИмяПоля);
	|Запрос.УстановитьПараметр(""ИмяПодсистемы"", ИмяПодсистемы);
	|
	|РезультатЗапроса = Запрос.Выполнить();
	|
	|ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	|
	|ЗначениеДляВозврата = Неопределено;
	|Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	|	ЗначениеДляВозврата = ВыборкаДетальныеЗаписи.Версия;
	|КонецЦикла;
	|";

	Текст = СтрЗаменить(Текст, "%ИмяПодсистемы%", ИмяПосистемы);
	
	РеквизитВыражениеВычислено = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ВыражениеВычислено", Истина);
	РеквизитКодДляВыполнения = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("КодДляВыполнения", Истина);
	РеквизитКодДляВыполнения.ВвестиТекст(Текст);
	
	АктивноеОкно = Ванесса.ПолучитьАктивноеОкноИзТестовоеПриложение();
	
	КнопкаВыполнитьКод = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ФормаВыполнитьКодСервер");
	
	КнопкаЗакрытьФорму = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"),,"ЗакрытьФорму");
	
	КнопкаВыполнитьКод.Нажать();
	
	БылаОшибка = Истина;
	Ванесса.ОжиданиеОкончанияОбработки(БылаОшибка, РеквизитВыражениеВычислено);
	
	Если БылаОшибка Тогда
		СтрокаСообщения = Ванесса.Локализовать("Не получилось выполнить код на стороне клиента тестирования.");
		ВызватьИсключение СтрокаСообщения + Символы.ПС + Текст;
	КонецЕсли;
	
	РеквизитЗначениеДляВозврата = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("ЗначениеДляВозврата", Истина);
	ПредставлениеРезультата = Ванесса.ПолучитьПредставлениеДанныхЭлементаФормы(РеквизитЗначениеДляВозврата);
	
	
	Попытка
		КнопкаЗакрытьФорму.Нажать();
	Исключение
		Ванесса.ЗаписатьЛогВЖРИнформация("ВыполнениеКодаВстроенногоЯзыка", ОписаниеОшибки());
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(ПредставлениеРезультата) Тогда
		ВызватьИсключение Ванесса.ПодставитьПараметрыВСтроку(Ванесса.Локализовать("Не получилось получить версию подсистемы <%1>."), ИмяПосистемы);
	КонецЕсли;	
	
	Ванесса.СохранитьЗначениеПеременнойВКонтекст(ИмяПеременной, ПредставлениеРезультата);
	
КонецФункции

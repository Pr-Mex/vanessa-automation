//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Служебная функция.
Функция ДобавитьШагВМассивТестов(МассивТестов,Снипет,ИмяПроцедуры,ПредставлениеТеста = Неопределено,Транзакция = Неопределено,Параметр = Неопределено)
	Структура = Новый Структура;
	Структура.Вставить("Снипет",Снипет);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ПредставлениеТеста",ПредставлениеТеста);
	Структура.Вставить("Транзакция",Транзакция);
	Структура.Вставить("Параметр",Параметр);
	МассивТестов.Добавить(Структура);
КонецФункции

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	ДобавитьШагВМассивТестов(ВсеТесты,"ВКаталогеАллюрПоявилсяХотяБыОдинСкриншот()","ВКаталогеАллюрПоявилсяХотяБыОдинСкриншот","И в каталоге аллюр появился хотя бы один скриншот");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеКаталогОтчетаАллюрЯУказываюПутьКОтносительномуКаталогу(Парам01)","ВПолеКаталогОтчетаАллюрЯУказываюПутьКОтносительномуКаталогу","И     в поле каталог отчета аллюр я указываю путь к относительному каталогу ""tools\Allure""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеКаталогОтносительноКоторогоНадоСтроитьИерархиюЯВвожуПутьККаталогуFeatures()","ВПолеКаталогОтносительноКоторогоНадоСтроитьИерархиюЯВвожуПутьККаталогуFeatures","И в поле каталог относительно которого надо строить иерархию я ввожу путь к каталогу features","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВКаталогеАллюрПоявилсяФайлXml(Парам01)","ВКаталогеАллюрПоявилсяФайлXml","И в каталоге аллюр появился 1 файл xml","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВКаталогеАллюрПоявилсяФайлjson(Парам01)","ВКаталогеАллюрПоявилсяФайлjson","И в каталоге аллюр появился 1 файл json","","");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//И     в поле каталог отчета аллюр я указываю путь к относительному каталогу "tools\Allure"
//@ВПолеКаталогОтчетаАллюрЯУказываюПутьКОтносительномуКаталогу(Парам01)
Процедура ВПолеКаталогОтчетаАллюрЯУказываюПутьКОтносительномуКаталогу(ЧастьПути) Экспорт
	Каталог = Ванесса.Объект.КаталогИнструментов + "\" + ЧастьПути;
	Контекст.Вставить("КаталогAllure",Каталог);
	
	Если НЕ Ванесса.ФайлСуществуетКомандаСистемы(Каталог) Тогда
		Ванесса.СоздатьКаталогКомандаСистемы(Каталог);
	Иначе
		Ванесса.УдалитьКаталогКомандаСистемы(Каталог);
		Ванесса.Sleep(1);
		Ванесса.СоздатьКаталогКомандаСистемы(Каталог);
	КонецЕсли;	 
	
	Поле = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("КаталогВыгрузкиAllure",Истина);
	Поле.ВвестиТекст(Каталог);
	
	//Ванесса.Шаг("И В открытой форме в поле с именем ""КаталогOutputAllure"" я ввожу текст """ + Каталог + """");
КонецПроцедуры


&НаКлиенте
//И в каталоге аллюр появился хотя бы один скриншот
//@ВКаталогеАллюрПоявилсяХотяБыОдинСкриншот()
Процедура ВКаталогеАллюрПоявилсяХотяБыОдинСкриншот() Экспорт
КонецПроцедуры

//окончание текста модуля

&НаКлиенте
//И в каталоге аллюр появился 1 файл xml
//@ВКаталогеАллюрПоявилсяФайлXml(Парам01)
Процедура ВКаталогеАллюрПоявилсяФайлXml(ДолжноБытьФайлов) Экспорт
	КолФайлов = 0;
	БылФайлAllure = Ложь;
	
	МасссивНайденныхФайлов = Новый Массив;
	
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;
	Ванесса.НайтиФайлыКомандаСистемы(Контекст.КаталогAllure,СписокКаталогов,СписокФайлов,Истина);
	Для Каждого ЭлемФайл Из СписокФайлов Цикл
		ПолноеИмя = ЭлемФайл.Значение.ПолноеИмя;
		МасссивНайденныхФайлов.Добавить(ПолноеИмя);
		
		Если Найти(ПолноеИмя,".xml") > 0 Тогда
			Контекст.Вставить("НайденноеИмяФайлаАллюр",ПолноеИмя);
			БылФайлAllure = Истина;
			КолФайлов = КолФайлов + 1;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если Не БылФайлAllure Тогда
		ТекстСообщения = "В каталоге %1 не найдено ни одного файла xml.";
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Контекст.КаталогAllure);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	
	
	Если КолФайлов <> ДолжноБытьФайлов Тогда
		ТекстСообщения = "Найдено %1, а должно быть %2 файлов";
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КолФайлов);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ДолжноБытьФайлов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Контекст.Вставить("МасссивНайденныхФайлов",МасссивНайденныхФайлов);
КонецПроцедуры

&НаКлиенте
//И в каталоге аллюр появился 1 файл json
//@ВКаталогеАллюрПоявилсяФайлjson(Парам01)
Процедура ВКаталогеАллюрПоявилсяФайлjson(ДолжноБытьФайлов) Экспорт
	КолФайлов = 0;
	БылФайлAllure = Ложь;
	
	МасссивНайденныхФайлов = Новый Массив;
	
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;
	Ванесса.НайтиФайлыКомандаСистемы(Контекст.КаталогAllure,СписокКаталогов,СписокФайлов,Истина);
	Для Каждого ЭлемФайл Из СписокФайлов Цикл
		ПолноеИмя = ЭлемФайл.Значение.ПолноеИмя;
		МасссивНайденныхФайлов.Добавить(ПолноеИмя);
		
		Если Найти(ПолноеИмя,".json") > 0 Тогда
			Контекст.Вставить("НайденноеИмяФайлаjson",ПолноеИмя);
			БылФайлAllure = Истина;
			КолФайлов = КолФайлов + 1;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если Не БылФайлAllure Тогда
		ТекстСообщения = "В каталоге %1 не найдено ни одного файла json.";
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Контекст.КаталогAllure);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	
	
	Если КолФайлов <> ДолжноБытьФайлов Тогда
		ТекстСообщения = "Найдено %1, а должно быть %2 файлов";
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КолФайлов);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ДолжноБытьФайлов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	Контекст.Вставить("МасссивНайденныхФайлов",МасссивНайденныхФайлов);
КонецПроцедуры

&НаКлиенте
//И в поле каталог относительно которого надо строить иерархию я ввожу путь к каталогу features
//@ВПолеКаталогОтносительноКоторогоНадоСтроитьИерархиюЯВвожуПутьККаталогуFeatures()
Процедура ВПолеКаталогОтносительноКоторогоНадоСтроитьИерархиюЯВвожуПутьККаталогуFeatures() Экспорт
	ЭлементФормы = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку("КаталогОтносительноКоторогоНадоСтроитьИерархию",Истина);
	ЭлементФормы.ВвестиТекст(Ванесса.ДополнитьСлешВПуть(Ванесса.Объект.КаталогИнструментов) + "features\");
КонецПроцедуры

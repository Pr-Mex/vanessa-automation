
&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)
	
	Если ЭтоWindowsКлиент() Тогда
		
		//Проверяем есть ли модуль БСП
		Попытка
			МодульБСПМенеджерОборудованияКлиент = ОбщийМодуль("МенеджерОборудованияКлиент")
		Исключение
		    МодульБСПМенеджерОборудованияКлиент = Неопределено;
		КонецПопытки;   
		
		Если МодульБСПМенеджерОборудованияКлиент <> Неопределено Тогда
			
			//получаем данные через буфер обмена - безопасный режим расширения VAExtension должен быть отключен.
			COMОбъектHtmlfile = Новый COMОбъект("htmlfile");
    		Штрихкод = COMОбъектHtmlfile.ParentWindow.ClipboardData.Getdata("Text");    
			
			// Вызываем СобытиеОтУстройства аналогично тому как это делает "ОбработкаВнешнегоСобытия" модуля приложения
			ОписаниеОшибки  = "";
			ОписаниеСобытия = Новый Структура();  
			ОписаниеСобытия.Вставить("Источник", "InputDevice#1");
			ОписаниеСобытия.Вставить("Событие",  "Штрихкод");
			ОписаниеСобытия.Вставить("Данные",   Штрихкод);  
			

			Результат = МодульБСПМенеджерОборудованияКлиент.ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки);    
			
			Если Не Результат Тогда
				СообщитьПользователю(НСтр("ru='При обработке внешнего события от устройства произошла ошибка.'") + Символы.ПС + ОписаниеОшибки);
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
// Возвращает ссылку на общий модуль или модуль менеджера по имени.
//
// См. ОбщегоНазначения.ОбщийМодуль
//
// Параметры:
//  Имя - Строка - имя общего модуля.
//
// Возвращаемое значение:
//  ОбщийМодуль
//  СправочникМенеджер,
//  ДокументМенеджер,
//  ОбработкаМенеджер,
//  РегистрСведенийМенеджер.
//
// Пример:
//	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбновлениеКонфигурации") Тогда
//		МодульОбновлениеКонфигурации = ОбщегоНазначения.ОбщийМодуль("ОбновлениеКонфигурации");
//		МодульОбновлениеКонфигурации.<Имя метода>();
//	КонецЕсли;
//
//	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
//		МодульПолнотекстовыйПоискСервер = ОбщегоНазначения.ОбщийМодуль("ПолнотекстовыйПоискСервер");
//		МодульПолнотекстовыйПоискСервер.<Имя метода>();
//	КонецЕсли;
//
Функция ОбщийМодуль(Имя) Экспорт
	
	Модуль = Вычислить(Имя);
	
#Если Не ВебКлиент Тогда
	
	// В веб-клиенте не проверяется
	// т.к. при обращении к модулям с вызовом сервера типа такого модуля в веб-клиенте не существует.
	
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Общий модуль ""%1"" не существует.'"), 
			Имя);
	КонецЕсли;
	
#КонецЕсли
	
	Возврат Модуль;
	
КонецФункции

&НаКлиенте
// Возвращает Истина, если клиентское приложение запущено под управлением ОС Windows.
//
// См. ОбщегоНазначения.ЭтоWindowsКлиент
//
// Возвращаемое значение:
//  Булево - если нет клиентского приложения, возвращается Ложь.
//
Функция ЭтоWindowsКлиент() Экспорт
	
	ТипПлатформыКлиента = ТипПлатформыКлиента();
	Возврат ТипПлатформыКлиента = ТипПлатформы.Windows_x86
		Или ТипПлатформыКлиента = ТипПлатформы.Windows_x86_64;
	
КонецФункции
	
&НаКлиенте
// Формирует и выводит сообщение, которое может быть связано с элементом управления формы.
//
Процедура СообщитьПользователю( 
	Знач ТекстСообщенияПользователю,
	Знач КлючДанных = Неопределено,
	Знач Поле = "",
	Знач ПутьКДанным = "",
	Отказ = Ложь) Экспорт
	
	ЭтоОбъект = Ложь;
	
	Если КлючДанных <> Неопределено
		И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = СтрНайти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	Попытка
		Если ЭтоОбъект Тогда
			Сообщение.УстановитьДанные(КлючДанных);
		Иначе
			Сообщение.КлючДанных = КлючДанных;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
			Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
	Исключение
	
	КонецПопытки;
	
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
  // Возвращает тип платформы клиента.
//
// Возвращаемое значение:
//  ТипПлатформы, Неопределено - тип платформы на которой запущен клиент. В режиме веб-клиента, если тип 
//                               платформы иной, чем описан в типе ТипПлатформы, то возвращается Неопределено.
//
Функция ТипПлатформыКлиента() Экспорт
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Возврат СистемнаяИнфо.ТипПлатформы;
	
КонецФункции         

&НаКлиенте
// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  ШаблонСтроки  - Строка - шаблон строки с параметрами (вхождениями вида "%<номер параметра>", 
//                           например "%1 пошел в %2");
//  Параметр1   - Строка - значение подставляемого параметра.
//  Параметр2   - Строка
//  Параметр3   - Строка
//  Параметр4   - Строка
//  Параметр5   - Строка
//  Параметр6   - Строка
//  Параметр7   - Строка
//  Параметр8   - Строка
//  Параметр9   - Строка
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел
//  в Зоопарк".
//
Функция ПодставитьПараметрыВСтроку(Знач ШаблонСтроки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%1", Параметр1);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%2", Параметр2);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%3", Параметр3);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%4", Параметр4);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%5", Параметр5);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%6", Параметр6);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%7", Параметр7);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%8", Параметр8);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%9", Параметр9);
	Возврат ШаблонСтроки;
	
КонецФункции

#Область ОписаниеПеременных

Перем ТаблицаКлючевыхСлов;
Перем ЭтоУФ Экспорт;
Перем СоответствиеТаблицПереводов;
Перем ТекущийЯзыкФичаФайла;
Перем ПредставлениеВертЧертыВТабДок;
Перем ПредставлениеАпостроф;
Перем ПредставлениеКавычка;
Перем ПредставлениеДвойнойСлеш;
Перем ПредставлениеВертикальнаяЧерта;
Перем ПредставлениеТире;
Перем ТаблицаКешПервыхСлов;
Перем ТекстСообщенийПользователю;

#КонецОбласти

//Служебная строка. Не удалять. #КонецОбласти ОписаниеПеременных

#Область ОбщееОписаниеПеременных

Перем ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок;

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

Функция ПолучитьТекстСообщенияПользователю(Текст)
	Если ТекстСообщенийПользователю <> Неопределено Тогда
		Значение = ТекстСообщенийПользователю[Текст];
		Если ЗначениеЗаполнено(Значение) Тогда
			Возврат Значение;
		КонецЕсли;	 
	КонецЕсли;	 

	Возврат Текст; 
КонецФункции	 

Процедура СделатьСообщение(Знач Сообщение) Экспорт
	ТекстСообщения = ПолучитьТекстСообщенияПользователю("%1. %2");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Строка(ТекущаяДата()));
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Сообщение);
	Сообщить(ТекстСообщения);
КонецПроцедуры

Процедура Отладка(Знач Сообщение) Экспорт
	Если DebugLog Тогда
		СделатьСообщение(Сообщение);
	КонецЕсли; 
КонецПроцедуры

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок Тогда
		Если ПропускатьПустыеСтроки = Истина Тогда
			Возврат Вычислить("СтрРазделить(Строка,Разделитель,Ложь)");
		Иначе
			Возврат Вычислить("СтрРазделить(Строка,Разделитель,Истина)");
		КонецЕсли;	 
	КонецЕсли;	 
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Функция ЭтоЦелоеЧисло(Стр)
	Для Ккк = 1 По СтрДлина(Стр) Цикл
		Символ = Сред(Стр,Ккк,1);
		Если    Символ = "0"
			Или Символ = "1"
			Или Символ = "2"
			Или Символ = "3"
			Или Символ = "4"
			Или Символ = "5"
			Или Символ = "6"
			Или Символ = "7"
			Или Символ = "8"
			Или Символ = "9"
			Тогда
			//это цифра
		Иначе
			Возврат Ложь;	
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункции

Функция ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(Версия1,Версия2)
	Массив1 = РазложитьСтрокуВМассивПодстрок(Версия1,".");
	Массив2 = РазложитьСтрокуВМассивПодстрок(Версия2,".");
	
	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Массив1.Количество()-1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);
		
		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		ИначеЕсли Число(Элем2) < Число(Элем1) Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Версия1БольшеИлиРавно;
КонецФункции	

Функция ВЭтойСтрокеКлючевоеСловоПримеры(Стр)
	Если Стр = "" Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	
	ДанныеПеревода      = СоответствиеТаблицПереводов.Получить(ТекущийЯзыкФичаФайла);
	ТаблицаКлючевыхСлов = ДанныеПеревода.ТаблицаКлючевыхСлов;
	СловаПоТипамПримеры = ДанныеПеревода.СловаПоТипам.Получить("examples");
	
	
	//поиск в кеше
	
	
	НРег_Стр = НРег(Стр);
	Для каждого КлючевоеСлово Из СловаПоТипамПримеры Цикл
		Позиция = Найти(НРег_Стр, КлючевоеСлово);
		Если Позиция = 1 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции	

Функция ПолучитьКлючевоеСлово(Стр, ВтораяЧастьСтрокиПозиция=1,ПервоеСлово = Неопределено)
	Символ = Лев(Стр,1);
	
	Если Символ = "" ИЛИ Символ = "#"  ИЛИ Символ = "@" ИЛИ Символ = "*" ИЛИ Символ = "|" ИЛИ Лев(Стр,2) = "//" Тогда
		Возврат "";
	КонецЕсли;	 
	
	ДанныеПеревода      = СоответствиеТаблицПереводов.Получить(ТекущийЯзыкФичаФайла);
	ТаблицаКлючевыхСлов = ДанныеПеревода.ТаблицаКлючевыхСлов;
	
	Если ПервоеСлово <> Неопределено Тогда
		ПервоеСловоПоиск = СтрЗаменить(ПервоеСлово,":","");
		СтрТаблицаКлючевыхСлов = ТаблицаКлючевыхСлов.Найти(НРег(ПервоеСловоПоиск),"Слово");
		Если СтрТаблицаКлючевыхСлов <> Неопределено и СтрТаблицаКлючевыхСлов.Уникально Тогда
			ВтораяЧастьСтрокиПозиция = СтрДлина(ПервоеСловоПоиск)+1;
			Возврат СтрТаблицаКлючевыхСлов.Тип;
		КонецЕсли;	 
	КонецЕсли;	 
	
	//поиск в кеше
	МаксДлинаСлова = ДанныеПеревода.МаксДлинаСлова;
	
	ПодСтрока = Лев(Стр,МаксДлинаСлова);
	СтрТаблицаКешПервыхСлов = ТаблицаКешПервыхСлов.Найти(ПодСтрока,"ПерваяЧастьСтроки");
	Если СтрТаблицаКешПервыхСлов <> Неопределено Тогда
		ВтораяЧастьСтрокиПозиция = СтрДлина(СтрТаблицаКешПервыхСлов.Слово)+1;
		Возврат СтрТаблицаКешПервыхСлов.Тип;
	КонецЕсли;	 
	
	НРег_Стр = НРег(Стр);
	
	Для каждого СтрТаблицаКлючевыхСлов Из ТаблицаКлючевыхСлов Цикл
		Позиция = Найти(НРег_Стр, СтрТаблицаКлючевыхСлов.Слово);
		Если Позиция = 1 Тогда
			ВтораяЧастьСтрокиПозиция = СтрДлина(СтрТаблицаКлючевыхСлов.Слово)+1;
			
			Если СтрДлина(СтрТаблицаКлючевыхСлов.Слово) < МаксДлинаСлова Тогда
				СтрТаблицаКешПервыхСлов = ТаблицаКешПервыхСлов.Добавить();
				СтрТаблицаКешПервыхСлов.ПерваяЧастьСтроки = Подстрока;
				СтрТаблицаКешПервыхСлов.Слово             = СтрТаблицаКлючевыхСлов.Слово;
				СтрТаблицаКешПервыхСлов.Позиция           = ВтораяЧастьСтрокиПозиция;
				СтрТаблицаКешПервыхСлов.Тип               = СтрТаблицаКлючевыхСлов.Тип;
			КонецЕсли;	 
			
			Возврат СтрТаблицаКлючевыхСлов.Тип;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
КонецФункции

Функция ПодготовитьСтрокуПримераКРазбору(Знач Стр)
	НовСтр = "";
	
	Стр     = СтрЗаменить(Стр,"\\",ПредставлениеДвойнойСлеш);
	
	Стр     = СтрЗаменить(Стр,"\'",ПредставлениеАпостроф);
	Стр     = СтрЗаменить(Стр,"\|",ПредставлениеВертикальнаяЧерта);
	Стр     = СтрЗаменить(Стр,"\""",ПредставлениеКавычка);
	
	Стр     = СтрЗаменить(Стр,ПредставлениеДвойнойСлеш,"\\");
	
	
	
	Длина = СтрДлина(Стр);
	ЭтоПараметр = Ложь;
	Для Ккк = 1 По Длина Цикл
		Символ = Сред(Стр,Ккк,1);
		Если Символ = "'" Тогда
			ЭтоПараметр = Не ЭтоПараметр;
		ИначеЕсли Символ = "|" Тогда
			Если ЭтоПараметр Тогда
				Символ = ПредставлениеВертЧертыВТабДок;
			КонецЕсли;	 
		КонецЕсли;	 
		
		НовСтр = НовСтр + Символ;
	КонецЦикла; 
	
	НовСтр = СтрЗаменить(НовСтр,ПредставлениеАпостроф,"\'");
	НовСтр = СтрЗаменить(НовСтр,ПредставлениеКавычка,"\""");
	НовСтр = СтрЗаменить(НовСтр,ПредставлениеВертикальнаяЧерта,"\|");
	
	Возврат НовСтр;
КонецФункции	

Функция ОпределитьПараметрыВСтрокеПримера(ОбъектСоСтрокой,СтруктураПараметров)
	СписокЗн = Новый СписокЗначений;
	
	Стр = СокрЛП(ОбъектСоСтрокой.Стр);
	
	Если Лев(Стр,1) <> "|" Тогда
		СтрОшибки = "Таблица параметров должна начинаться с символа |";
		НомерСтрокиВФиче = Неопределено;
		Попытка
			НомерСтрокиВФиче = ОбъектСоСтрокой.НомерСтрокиВФиче;
			СтрОшибки = СтрОшибки + ". Строка №" + НомерСтрокиВФиче;
		Исключение
		КонецПопытки;
		
		Сообщить(СтрОшибки);
		Возврат СписокЗн;
	КонецЕсли;	 
	
	Если Прав(Стр,1) <> "|" Тогда
		СтрОшибки = "Таблица параметров должна заканчиваться символом |";
		НомерСтрокиВФиче = Неопределено;
		Попытка
			НомерСтрокиВФиче = ОбъектСоСтрокой.НомерСтрокиВФиче;
			СтрОшибки = СтрОшибки + ". Строка №" + НомерСтрокиВФиче;
		Исключение
		КонецПопытки;
		
		Сообщить(СтрОшибки);
		Возврат СписокЗн;
	КонецЕсли;		
	
	Стр = Сред(Стр,2);
	Стр = Сред(Стр,1,СтрДлина(Стр)-1);
	//убрали символы | слева и справа
	
	Стр    = СтрЗаменить(Стр,"\|",ПредставлениеВертикальнаяЧерта);
	Массив = РазложитьСтрокуВМассивПодстрок(Стр,"|");
	
	Для Ккк = 0 По Массив.Количество()-1 Цикл
		Значение    = Массив[Ккк];
		Значение    = СтрЗаменить(Значение,ПредставлениеВертЧертыВТабДок,"|");//учли что вертикальная черта может быть в значении
		Значение    = СтрЗаменить(Значение,ПредставлениеВертикальнаяЧерта,"\|");//учли что вертикальная черта может быть в значении
		Массив[Ккк] = Значение;
		Массив[Ккк] = СокрЛП(Массив[Ккк]);
	КонецЦикла;
	
	
	СписокЗн = Новый СписокЗначений;
	Для каждого Элем Из Массив Цикл
		СписокЗн.Добавить(Элем);
	КонецЦикла;
	
	Возврат  СписокЗн;
КонецФункции

Процедура ФорматТаблицыПримеров(Тзн,РазныеИменованныеПараметры,БылаОшибка,ЭтоПередачаТаблицы,СтруктураПараметров)
	Если Тзн.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	СписокПараметров = ОпределитьПараметрыВСтрокеПримера(Тзн[0],СтруктураПараметров);
	Для Ккк = 0 По СписокПараметров.Количество()-1 Цикл
		СписокПараметров[Ккк].Значение = СокрЛП(НРег(СписокПараметров[Ккк].Значение));
	КонецЦикла;
	
	//проверим соответствие параметров в шагах и в таблице примеров
	Если НЕ ЭтоПередачаТаблицы Тогда
		Для каждого ЭлемРазныеИменованныеПараметры Из РазныеИменованныеПараметры Цикл
			Если СписокПараметров.НайтиПоЗначению(НРег(ЭлемРазныеИменованныеПараметры)) = Неопределено Тогда
				БылаОшибка = Истина;
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Параметр %1 не найден в таблице параметров.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ЭлемРазныеИменованныеПараметры);
				Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
			КонецЕсли;
		КонецЦикла;    	
	КонецЕсли;	 
	
	
	СписокПараметров = ОпределитьПараметрыВСтрокеПримера(Тзн[0],СтруктураПараметров);
	КолПараметров = СписокПараметров.Количество();
	МассивДлин = Новый Массив;
	Для каждого Элем Из СписокПараметров Цикл
		МассивДлин.Добавить(0);
	КонецЦикла;
	
	
	Для каждого СтрТзн Из Тзн Цикл
		Если СокрЛП(СтрТзн.Стр) = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		//Если СтрТзн.Свойство("Тип") Тогда
		//	Если СтрТзн.Тип = "Шаг" Тогда
		//		//это может быть, когда в шаг условие передали таблицу, а ещё он содержит другие шаги
		//		Продолжить;
		//	КонецЕсли;	 
		//КонецЕсли;	 
		
		СписокПараметров = ОпределитьПараметрыВСтрокеПримера(СтрТзн,СтруктураПараметров);
		Если СписокПараметров.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Для Ккк = 0 По МассивДлин.Количество()-1 Цикл
			Если СписокПараметров.Количество()-1 < Ккк Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Неверное число параметров в строке таблицы. Должно быть <%1> параметров, а в строке найдено <%2>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",МассивДлин.Количество()); 
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",СписокПараметров.Количество()); 
				
				ТекстСообщения = ТекстСообщения + Символы.ПС + СтрТзн.Стр;
				
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
			ДлинаСтроки = СтрДлина(СокрЛП(СписокПараметров.Получить(Ккк)));
			Если ДлинаСтроки > МассивДлин[Ккк] Тогда
				МассивДлин[Ккк] = ДлинаСтроки;
			КонецЕсли;	 
			
		КонецЦикла;
	КонецЦикла;
	
	
	Для каждого СтрТзн Из Тзн Цикл
		Если СокрЛП(СтрТзн.Стр) = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		//последним параметром специально идёт неопределено, иначе не работает фича ПередачаВоВложенныйСценарийТаблиц
		СписокПараметров = ОпределитьПараметрыВСтрокеПримера(СтрТзн,Неопределено);
		Если СписокПараметров.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		СтрПараметров = "| ";
		Для Ккк = 0 По МассивДлин.Количество()-1 Цикл
			Зн = СокрЛП(СписокПараметров[Ккк]);
			Пока СтрДлина(Зн) < МассивДлин[Ккк] Цикл
				Зн = Зн + " ";
			КонецЦикла;
			СтрПараметров = СтрПараметров + Зн + " | ";
		КонецЦикла;
		
		СтрПараметров = СокрЛП(СтрПараметров);
		
		СтрТзн.Стр = СтрПараметров;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ОпределитьТипЗначения(Знач Стр,Тип,Значение,ОпределятьСтроку = Ложь)
	ИсходнаяСтрока = Стр;
	ПромМассив     = Новый Массив;
	
	СтрокаДляЗаменыПараметров = "";
	ОбработатьСтрокиЭмуляцияRegExp(Стр,ПромМассив,"'");
	Если ПромМассив.Количество() > 0 Тогда
		Тип      = "Строка";
		Значение = ИсходнаяСтрока;
		Возврат;
	КонецЕсли; 
	
	ОбработатьСтрокиЭмуляцияRegExp(Стр,ПромМассив,"""");
	Если ПромМассив.Количество() > 0 Тогда
		Тип      = "Строка";
		Значение = ИсходнаяСтрока;
		Возврат;
	КонецЕсли; 
	
	ОбработатьДатыЭмуляцияRegExp(Стр,ПромМассив);
	Если ПромМассив.Количество() > 0 Тогда
		Тип      = "Дата";
		Значение = ИсходнаяСтрока;
		Возврат;
	КонецЕсли; 
	
	ОбработатьЧислаЭмуляцияRegExp(Стр,ПромМассив);
	Если ПромМассив.Количество() > 0 Тогда
		Тип      = "Число";
		Значение = ИсходнаяСтрока;
		Возврат;
	КонецЕсли; 
	
	Если ОпределятьСтроку Тогда
		Тип      = "Строка";
		Значение = ИсходнаяСтрока;
		Возврат;
	КонецЕсли;  
	
	ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог определить тип значения для строки: %1");
	ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИсходнаяСтрока);
	ВызватьИсключение ТекстСообщения;
	
КонецПроцедуры

Функция ЭтоЛюбоеЧисло(Знач Стр)
	КолТочек = 0;
	Длина = СтрДлина(Стр);
	Для Ккк = 1 По Длина Цикл
		Символ = Сред(Стр,Ккк,1);
		Если ЭтоЦелоеЧисло(Символ) Тогда
		ИначеЕсли Символ = "." Тогда	
			КолТочек = КолТочек + 1;
		Иначе
			Возврат Ложь;
		КонецЕсли;	 
	КонецЦикла; 
	
	Если КолТочек > 1 Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Символ = Сред(Стр,1,1);
	Если НЕ ЭтоЦелоеЧисло(Символ) Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если Символ = "0" Тогда //значит это строка
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
	
КонецФункции	

Функция ЭтоДата(Стр)
	Массив = РазложитьСтрокуВМассивПодстрок(Стр,".");
	Если Массив.Количество() <> 3 Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Элем1 = Массив[0];
	Элем2 = Массив[1];
	Элем3 = Массив[2];
	
	Если НЕ ЭтоЦелоеЧисло(Элем1) Тогда
		Возврат Ложь;
	КонецЕсли;	 
	Если НЕ ЭтоЦелоеЧисло(Элем2) Тогда
		Возврат Ложь;
	КонецЕсли;	 
	Если НЕ ЭтоЦелоеЧисло(Элем3) Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если СтрДлина(Элем1) <> 2 Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если СтрДлина(Элем2) <> 2 Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если (СтрДлина(Элем3) <> 2) и (СтрДлина(Элем3) <> 4) Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	
	
	
	Возврат Истина;
КонецФункции	

Процедура ОпределитьТипЗначенияСтрокиЦеликом(Знач Стр,Тип)
	Тип = "Строка";
	
	Если ЭтоКорректноеЧисло(Стр) Тогда
		Тип = "Число";
	КонецЕсли;	 
	
	Если ЭтоДата(Стр) Тогда
		Тип = "Дата";
	КонецЕсли;	 
	
КонецПроцедуры

Функция УбратьКавычкиСлеваИСправа(Знач Стр)
	Возврат Сред(Стр,2,СтрДлина(Стр)-2);
КонецФункции	

Функция ПреобразоватьИменнованныеПараметрыСОпределениемТипов(Спс,СпсИмен)
	НовыйСписок = Новый СписокЗначений;
	Ном = 0;
	Для каждого Элем Из Спс Цикл
		СтруктураЗначения = Новый Структура;
		
		Значение = Неопределено;
		Тип      = Неопределено;
		ОпределитьТипЗначенияСтрокиЦеликом(Элем.Значение,Тип);
		
		Если Тип = "Строка" Тогда
			Если (Лев(Элем.Значение,1) = """") и (Прав(Элем.Значение,1) = """") Тогда
				Элем.Значение = УбратьКавычкиСлеваИСправа(Элем.Значение);
			ИначеЕсли (Лев(Элем.Значение,1) = "'") и (Прав(Элем.Значение,1) = "'") Тогда
				Элем.Значение = УбратьКавычкиСлеваИСправа(Элем.Значение);
			КонецЕсли;	 
		КонецЕсли;	 
		
		
		Элем.Значение = СтрЗаменить(Элем.Значение,"\'","'");
		Элем.Значение = СтрЗаменить(Элем.Значение,"\""","""");
		Элем.Значение = СтрЗаменить(Элем.Значение,"\|","|");
		Элем.Значение = СтрЗаменить(Элем.Значение,"\\","\");
		СтруктураЗначения.Вставить("Значение",Элем.Значение);
		СтруктураЗначения.Вставить("Тип",Тип);
		СтруктураЗначения.Вставить("ИмяПараметра",СпсИмен[Ном].Значение);
		
		НовыйСписок.Добавить(СтруктураЗначения);
		
		Ном = Ном + 1;
	КонецЦикла;
	
	Возврат НовыйСписок;
КонецФункции

Функция СоздатьИмяШагаДляScenarioOutline_И_ОбработатьЗначенияПараметров(Знач Стр,ЗначенияПараметровОбычные,ЗначенияПараметровИменованные)
	Для каждого Элем Из ЗначенияПараметровОбычные Цикл
		Если Элем.Значение.Тип = "ПараметрИменованный" Тогда
			
			ИмяПараметра      = Элем.Значение.Значение;
			ЗначениеПараметра = Неопределено;
			ТипПараметра      = Неопределено;
			Для каждого ЗнПарам Из ЗначенияПараметровИменованные Цикл
				Если ЗнПарам.Значение.ИмяПараметра = ИмяПараметра Тогда
					ЗначениеПараметра = ЗнПарам.Значение.Значение;
					ТипПараметра      = ЗнПарам.Значение.Тип;
				КонецЕсли; 
			КонецЦикла;
			
			Если ЗначениеПараметра = Неопределено Тогда
				СтрОшибки = "Не смог найти  в массиве ЗначенияПараметровИменованные элемент с именем " + ИмяПараметра;
				Сообщить(СтрОшибки);
				ВызватьИсключение СтрОшибки;
			КонецЕсли; 
			
			
			Если ТипПараметра = "Строка" Тогда
				Стр = СтрЗаменить(Стр,"<"+ ИмяПараметра + ">","""" + ЗначениеПараметра + """");
			Иначе	
				Стр = СтрЗаменить(Стр,"<"+ ИмяПараметра + ">",ЗначениеПараметра);
			КонецЕсли;	 
			
			Элем.Значение.Значение = ЗначениеПараметра;
			Элем.Значение.Тип      = ТипПараметра;
			
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Стр;
КонецФункции

Функция СкопироватьСписокЗначенийСтруктур(Массив)
	НовыйСписок = Новый СписокЗначений;
	
	Для каждого ЭлемМассив Из Массив Цикл
		НоваяСтруктура = Новый Структура;
		Для каждого ЭлемСтруктура Из ЭлемМассив.Значение Цикл
			НоваяСтруктура.Вставить(ЭлемСтруктура.Ключ,ЭлемСтруктура.Значение);
		КонецЦикла;
		
		НовыйСписок.Добавить(НоваяСтруктура);
	КонецЦикла;
	
    Возврат НовыйСписок;
КонецФункции

Процедура ДобавитьСценарийДляДанногоПримера(СтрокаПримеров,ИменованныеПараметры,СтруктураПараметров)
	//СтрШагПримера = СтрокаПримеров.Строки.Добавить();
	
	СтрокиШагов = СтрокаПримеров.Родитель.Родитель;
	ПараметрыКопирования = Новый Структура;
	ПараметрыКопирования.Вставить("СозданиеСекцииПримеров",Истина);
	ПараметрыКопирования.Вставить("СтрокаПримеров",СтрокаПримеров);
	ПараметрыКопирования.Вставить("ИменованныеПараметры",ИменованныеПараметры);
	СкопироватьСтрокуВДереваПодчиненныеЭлементы(СтрокаПримеров,СтрокиШагов,ПараметрыКопирования,СтруктураПараметров);
	ПараметрыКопирования = Неопределено;
КонецПроцедуры

Функция ПолучитьНовыйStepDefinition(Знач Стр)
	
	Стр = СтрЗаменить(Стр,"СтрокаК)",")");
	Стр = СтрЗаменить(Стр,"СтрокаА)",")");
	Стр = СтрЗаменить(Стр,"Дата)",")");
	Стр = СтрЗаменить(Стр,"Число)",")");
	
	Стр = СтрЗаменить(Стр,"СтрокаК,",",");
	Стр = СтрЗаменить(Стр,"СтрокаА,",",");
	Стр = СтрЗаменить(Стр,"Дата,",",");
	Стр = СтрЗаменить(Стр,"Число,",",");
	
	Возврат Стр;
КонецФункции

Функция ПолучитьНовуюСтрокуПараметров(Знач Стр)
	Стр = Стр + ",";
	
	Стр = СтрЗаменить(Стр,"Строка,",",");
	Стр = СтрЗаменить(Стр,"Дата,",",");
	Стр = СтрЗаменить(Стр,"Число,",",");
	
	Стр = Лев(Стр,СтрДлина(Стр)-1);
	
	Возврат Стр;
КонецФункции

Функция СкопироватьСтруктуру(Оригинал)
	Результат = Новый Структура();
	Для каждого Элем Из Оригинал Цикл
		Результат.Вставить(Элем.Ключ,Элем.Значение);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции	

Процедура ОбработатьПередачуПараметровТаблицей(СтрСтрокиШагов,МассивТаблицПередаваемыхКакПараметр,
	                                 РазныеИменнованныеПараметры,СтруктураПараметров = Неопределено)
									 
	Если МассивТаблицПередаваемыхКакПараметр.Количество() > 0 Тогда
		СтрСтрокиШагов.ШагСПараметрамиВТаблице = Истина;
		СтрокиТаблицаСтрокПередачаПараметровТаблицей = СтрСтрокиШагов.Строки;
		
		МассивСтрокДляУдаления = Новый Массив;
		Для Каждого ТекСтрока Из СтрокиТаблицаСтрокПередачаПараметровТаблицей Цикл
			Если ТекСтрока.СтрокаПараметровШагаВВидеТаблицы Тогда
				МассивСтрокДляУдаления.Добавить(ТекСтрока);
			ИначеЕсли СокрЛП(ТекСтрока.Имя) = "" Тогда
				МассивСтрокДляУдаления.Добавить(ТекСтрока);
			КонецЕсли;	 
		КонецЦикла;	
		
		Для Каждого ТекСтрока Из МассивСтрокДляУдаления Цикл
			СтрокиТаблицаСтрокПередачаПараметровТаблицей.Удалить(ТекСтрока);
		КонецЦикла;	
		
		
		ИндексВставки = 0;
		НомерТаблицы = 0;
		Для Каждого ТаблицаСтрокПередачаПараметровТаблицей Из МассивТаблицПередаваемыхКакПараметр Цикл
			НомерТаблицы = НомерТаблицы + 1;
			
			БылаОшибка = Ложь;
			ФорматТаблицыПримеров(ТаблицаСтрокПередачаПараметровТаблицей,РазныеИменнованныеПараметры,БылаОшибка,
			                                                                         Истина,Неопределено);
			
			Если НомерТаблицы > 1 Тогда
				СтрокаТаблицы             = СтрокиТаблицаСтрокПередачаПараметровТаблицей.Добавить(); //добавим разделитель
				ИндексВставки             = ИндексВставки + 1;
				СтрокаТаблицы.ТипКартинки = -1;
			КонецЕсли;	 
			
			Для каждого СтрТаблицаСтрокПередачаПараметровТаблицей Из ТаблицаСтрокПередачаПараметровТаблицей Цикл
				СтрокаТаблицы                                  = СтрокиТаблицаСтрокПередачаПараметровТаблицей.Вставить(ИндексВставки);
				ИндексВставки                                  = ИндексВставки + 1;
				СтрокаТаблицы.СтрокаПараметровШагаВВидеТаблицы = Истина;
				СтрокаТаблицы.Имя                              = СтрТаблицаСтрокПередачаПараметровТаблицей.Стр;
				СтрокаТаблицы.ТипКартинки                      = -1;
				Если СокрЛП(СтрТаблицаСтрокПередачаПараметровТаблицей.Стр) <> "" Тогда
					СтрокаТаблицы.ПараметрыТаблицы = ОпределитьПараметрыВСтрокеПримера(
					СтрТаблицаСтрокПередачаПараметровТаблицей,СтруктураПараметров);
					СтрокаТаблицы.ПараметрыТаблицы = ПреобразоватьИменнованныеПараметрыСОпределениемТипов(
					                          СтрокаТаблицы.ПараметрыТаблицы,СтрокаТаблицы.ПараметрыТаблицы);
				КонецЕсли;	 
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры

Функция ОпределитьКоличествоПередаваемыхТаблиц(СтрокаДерева)
	Если СтрокаДерева.ШагСПараметрамиВТаблице <> Истина Тогда
		Возврат 0;
	КонецЕсли;	 
	
	Количество = 1;
	Для Каждого ПодчиненнаяСтрокаДерева Из СтрокаДерева.Строки Цикл
		Если Не ЗначениеЗаполнено(ПодчиненнаяСтрокаДерева.Имя) Тогда
			Количество = Количество + 1;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Количество;
КонецФункции	

Функция ЗаменитьТаблицуПримеровНаПереданнуюТаблицу(Тзн)
	Массив = Новый Массив;
	Для Каждого СтрТзн Из Тзн Цикл
		Массив.Добавить(Новый Структура("Стр,НомерСтрокиВФиче",СтрТзн.Имя,СтрТзн.НомерСтрокиВФиче));
	КонецЦикла;	
	
	Возврат Массив;
КонецФункции	

Процедура ОпределитьРодителяШага(СтрТаблицаШагов,СтрокиШагов,СтрДеревоСтроки,ДеревоСтроки,СтруктураПараметров)
	
	Если СтрТаблицаШагов.Родитель <> Неопределено Тогда
		Если СтрТаблицаШагов.Родитель = -1 Тогда
			СтрокиШагов = СтрДеревоСтроки.Строки;
		Иначе	
			СтрокаТаблицыОбластей = СтруктураПараметров.ТаблицаОбластей.Найти(СтрТаблицаШагов.Родитель,"НомерСтрокиВФиче");
			Если СтрокаТаблицыОбластей <> Неопределено Тогда
				СтрокаДерева = СтрокаТаблицыОбластей.СтрокаДерева;
				СтрокиШагов  = СтрокаДерева.Строки;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

Процедура ОпределитьУровеньГруппы(СтрокиШагов,СтрТаблицаШагов)
	Родитель = СтрокиШагов.Родитель;
	Пока Истина Цикл
		Если Родитель.Тип = "Сценарий" Тогда
			Прервать;
		КонецЕсли;	 
		Если Родитель.Тип = "Пример" Тогда
			Прервать;
		КонецЕсли;	 
		
		Если СтрТаблицаШагов.ЗначениеОтступа > Родитель.ЗначениеОтступа Тогда
			Прервать;
		КонецЕсли;	 
			
		
		
		Родитель = Родитель.Родитель;
	КонецЦикла;	
	
	СтрокиШагов = Родитель.Строки;
КонецПроцедуры

Функция StepDefinitionИзТаблицыСценариев(IDИзStepDefinition,ТаблицаУжеСуществующихСценариев,СтруктураПараметров,НовыйStepDefinition)
	СтрТаблицаУжеСуществующихСценариев = ТаблицаУжеСуществующихСценариев.Найти(IDИзStepDefinition,"Снипет");
	Если СтрТаблицаУжеСуществующихСценариев = Неопределено и ТекущийЯзыкФичаФайла <> "ru"  Тогда
		Если Не СтруктураПараметров.Свойство("ТаблицаПеревода") Тогда
			СтруктураПараметров.Вставить("ТаблицаПеревода",ПолучитьТаблицуПеревода(СтруктураПараметров));
		КонецЕсли;	 
		
		ТаблицаПеревода = СтруктураПараметров.ТаблицаПеревода;
		СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(IDИзStepDefinition,"СтрокаДляПоискаПеревод");
		Если СтрокаТаблицаПеревода <> Неопределено Тогда
			СтрТаблицаУжеСуществующихСценариев = ТаблицаУжеСуществующихСценариев.Найти(СтрокаТаблицаПеревода.СтрокаДляПоискаРусский,"Снипет");
			Если СтрТаблицаУжеСуществующихСценариев <> Неопределено Тогда
				НовыйStepDefinition                = СтрТаблицаУжеСуществующихСценариев.Снипет + "()";
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;
	
	Возврат СтрТаблицаУжеСуществующихСценариев;
КонецФункции	

Функция StepDefinitionИзТаблицы(IDИзStepDefinition,ТаблицаИзвестныхStepDefinition,СтруктураПараметров,ЗначенияПараметров,СтрокаДереваШаг)
	СтрТаблицаИзвестныхStepDefinition = Неопределено;
	ЯзыкРодителя = ТекущийЯзыкФичаФайла;
	Если СтруктураПараметров.Свойство("ЯзыкРодителя") Тогда
		ЯзыкРодителя = СтруктураПараметров.ЯзыкРодителя;
	КонецЕсли;	 
	
	Если ТекущийЯзыкФичаФайла = "ru" И ЯзыкРодителя = "ru" Тогда
		СтрТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinition.Найти(IDИзStepDefinition,"СтрокаДляПоиска");
	Иначе	
		Если Не СтруктураПараметров.Свойство("ТаблицаПеревода") Тогда
			СтруктураПараметров.Вставить("ТаблицаПеревода",ПолучитьТаблицуПеревода(СтруктураПараметров));
		КонецЕсли;	 
		
		ТаблицаПеревода = СтруктураПараметров.ТаблицаПеревода;
		СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(IDИзStepDefinition,"СтрокаДляПоискаПеревод");
		
		Если СтрокаТаблицаПеревода = Неопределено Тогда
			//возможно идёт встраивание вложенного сценария
			СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(IDИзStepDefinition,"СтрокаДляПоискаРусский");
			Если СтрокаТаблицаПеревода <> Неопределено Тогда
				СтрокаДереваШаг.Имя = СтрокаТаблицаПеревода.ТекстПереводаШаг;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если СтрокаТаблицаПеревода <> Неопределено Тогда
			СтрТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinition.Найти(СтрокаТаблицаПеревода.СтрокаДляПоискаРусский,"СтрокаДляПоиска");
			
			Если СтрокаТаблицаПеревода.МассивСоответствийПозицийПараметров <> Неопределено Тогда
				Если СтрокаТаблицаПеревода.МассивСоответствийПозицийПараметров.Количество() > 0 Тогда
					//значит надо поменять параметры местами
					Попытка
						НовыеЗначенияПараметров = Новый СписокЗначений;
						Для Каждого НоваяПозиция Из СтрокаТаблицаПеревода.МассивСоответствийПозицийПараметров Цикл
							НовыеЗначенияПараметров.Добавить(ЗначенияПараметров[НоваяПозиция-1].Значение);
						КонецЦикла;	
						
						ЗначенияПараметров = НовыеЗначенияПараметров;
					Исключение
						ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог поменять параметры шага местами <%1>");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаТаблицаПеревода.ТекстПереводаШаг);
						Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	Если СтрТаблицаИзвестныхStepDefinition = Неопределено Тогда
		СтрТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinition.Найти(IDИзStepDefinition,"СтрокаДляПоиска");
	КонецЕсли;	 
	
	Возврат СтрТаблицаИзвестныхStepDefinition;
КонецФункции	

Процедура РассчитатьStepDefinition(Параметры)
	
	СтруктураПараметров = Параметры.СтруктураПараметров;
	Если СтруктураПараметров.Свойство("КешStepDefinition") Тогда
		КешStepDefinition = СтруктураПараметров.КешStepDefinition;
		СтрокаКешStepDefinition = КешStepDefinition.Найти(Параметры.ИмяШагаБезКлючевогоСлова,"ИмяШагаБезКлючевогоСлова");
		Если СтрокаКешStepDefinition <> Неопределено Тогда
			Параметры.Вставить("НовыйStepDefinition",СтрокаКешStepDefinition.StepDefinition);
			Параметры.Вставить("НоваяСтрокаПараметров",СтрокаКешStepDefinition.СтрокаПараметров);
			Параметры.Вставить("ЗначенияПараметров",СтрокаКешStepDefinition.ЗначенияПараметров);
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	
	
	СтараяСтрокаПараметров = "";
	СтарыйStepDefinition   = ПолучитьStepDefinitionПоСтроке(Параметры.ИмяШагаБезКлючевогоСлова,
	                                                        Параметры.ЗначенияПараметров,
															СтараяСтрокаПараметров,
															Параметры.ШагСПараметрамиВТаблице,
															Параметры.КоличествоПередаваемыхТаблиц);
															
	НовыйStepDefinition    = ПолучитьНовыйStepDefinition(СтарыйStepDefinition);
	НоваяСтрокаПараметров  = ПолучитьНовуюСтрокуПараметров(СтараяСтрокаПараметров);
	
	Параметры.Вставить("НовыйStepDefinition",НовыйStepDefinition);
	Параметры.Вставить("НоваяСтрокаПараметров",НоваяСтрокаПараметров);
	
	
	Если СтруктураПараметров.Свойство("КешStepDefinition") Тогда	
		СтрокаКешStepDefinition                          = КешStepDefinition.Добавить();
		СтрокаКешStepDefinition.StepDefinition           = НовыйStepDefinition;
		СтрокаКешStepDefinition.СтрокаПараметров         = НоваяСтрокаПараметров;
		СтрокаКешStepDefinition.ЗначенияПараметров       = Параметры.ЗначенияПараметров;
		СтрокаКешStepDefinition.ИмяШагаБезКлючевогоСлова = Параметры.ИмяШагаБезКлючевогоСлова;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОбластьВТаблицуОбластей(НомерСтрокиВФиче,ТаблицаОбластей,СтрокаДерева)
	СтрокаТаблицаОбластей = ТаблицаОбластей.Добавить();
	СтрокаТаблицаОбластей.НомерСтрокиВФиче = НомерСтрокиВФиче;
	СтрокаТаблицаОбластей.СтрокаДерева     = СтрокаДерева;
КонецПроцедуры

Функция ОпределитьАдресСнипета(ИмяФайла,ЭтоLinux)
	Если ЭтоLinux Тогда
		Возврат ИмяФайла;
	Иначе
		Возврат СтрЗаменить(ИмяФайла,"/","\");
	КонецЕсли;	 
КонецФункции	 

Процедура ЗакрытьПредыдущийСценарий(ИмяФичи,ПолноеИмяФичи,ТекущийТипСценария,ПредыдущееКлючевоеСлово,ТекущееКлючевоеСлово,ДеревоСтроки,ОписаниеСценария,ТаблицаШагов,ТаблицаИзвестныхStepDefinition,ТаблицаСтрокПримеров,НомерСтрокиСценария,ТаблицаУжеСуществующихСценариев,СтруктураПараметров,МассивСценариевЗащитаОтЗацикливанияКеш,ЭтоЗагрузкаПодчиненногоСценария,ПередаваемыеТаблицы,ИмяЗагружаемогоСценария)
	
	Если (ТекущееКлючевоеСлово <> "scenario") и (ТекущееКлючевоеСлово <> "scenario_outline") Тогда
		Возврат;
	КонецЕсли;	 
	
	
	МассивТеговФичи	       = СтруктураПараметров.МассивТеговФичи;
	МассивКомментариевФичи = СтруктураПараметров.МассивКомментариевФичи;
	МассивТеговСценариев   = СтруктураПараметров.МассивТеговСценариев;
	СписокТеговИсключение  = СтруктураПараметров.СписокТеговИсключение;
	СписокТеговОтбор       = СтруктураПараметров.СписокТеговОтбор;
	
	Если СтруктураПараметров.Свойство("ОтборПоТегам") Тогда
		Если НЕ СтруктураПараметров.ОтборПоТегам Тогда
			СписокТеговОтбор = Новый СписокЗначений;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТегиСценария           = Новый Массив;
	Для Каждого Элем Из МассивТеговСценариев Цикл
		Если Элем.НомерСтрокиСценария = НомерСтрокиСценария Тогда
			ТегиСценария = Элем.МассивТегов;
		КонецЕсли;	 
	КонецЦикла;	
	//Если ТегиСценария = Неопределено Тогда
	//	ВызватьИсключение ПолучитьТекстСообщенияПользователю("Ошибка парсинга фичи <" + ИмяФичи + ">. Не найден массив тегов.");
	//КонецЕсли;	 
	
	
	Если ТипЗнч(ДеревоСтроки.Родитель.ПроизвольныеЗначения) <> Тип("Структура")  Тогда
		ДеревоСтроки.Родитель.ПроизвольныеЗначения = Новый Структура;
	КонецЕсли;	 
	
	ДеревоСтроки.Родитель.ПроизвольныеЗначения.Вставить("МассивТегов",МассивТеговФичи);
	ДеревоСтроки.Родитель.ПроизвольныеЗначения.Вставить("МассивКомментариев",МассивКомментариевФичи);
	
	
	НаденТегОтборВФиче          = Ложь;
	НаденТегИсключениеВФиче     = Ложь;
	НаденТегОтборВСценарии      = Ложь;
	НаденТегИсключениеВСценарии = Ложь;
	Если СокрЛП(ТекущийТипСценария) <> "" и ТекущийТипСценария <> "background" Тогда//когда загружаем явно одну фичу то фильтры не работают
		Если СтруктураПараметров.ИдетЗагрузкаИзКаталога Тогда 
			
			//по исключению сценариев
			ТегИсключение = Неопределено;
			Для Каждого СвойстваТега Из ТегиСценария Цикл
				Тег = СвойстваТега.Тег;
				Если СписокТеговИсключение.НайтиПоЗначению(Тег) <> Неопределено Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("В сценарии <%1> найден тег исключение <%2>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеСценария);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Тег);
					Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
					НаденТегИсключениеВСценарии = Истина;
				КонецЕсли;	 
			КонецЦикла;	
			
			Для Каждого СвойстваТега Из МассивТеговФичи Цикл
				Тег = СвойстваТега.Тег;
				Если СписокТеговИсключение.НайтиПоЗначению(Тег) <> Неопределено Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("В фиче <%1> сценария <%2> найден тег исключение <%3>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПолноеИмяФичи);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОписаниеСценария);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Тег);
					Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
					НаденТегИсключениеВФиче = Истина;
				КонецЕсли;	 
			КонецЦикла;	
			
			
			//по отбору сценариев
			НаденТегОтборВСценарии = Ложь;
			Для Каждого СвойстваТега Из ТегиСценария Цикл
				Тег = СвойстваТега.Тег;
				Если СписокТеговОтбор.НайтиПоЗначению(Тег) <> Неопределено Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("В сценарии <%1> найден тег отбор <%2>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеСценария);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Тег);
					Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
					НаденТегОтборВСценарии = Истина;
				КонецЕсли;	 
			КонецЦикла;	
			
			Для Каждого СвойстваТега Из МассивТеговФичи Цикл
				Тег = СвойстваТега.Тег;
				Если СписокТеговОтбор.НайтиПоЗначению(Тег) <> Неопределено Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("В фиче <%1> сценария <%2> найден тег отбор <%3>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПолноеИмяФичи);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОписаниеСценария);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Тег);
					Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
					НаденТегОтборВФиче = Истина;
				КонецЕсли;	 
			КонецЦикла;	
			
			
			
			
			
			Если СписокТеговОтбор.Количество() > 0 Тогда
				Если Не НаденТегОтборВСценарии и НЕ НаденТегОтборВФиче Тогда
					Если НЕ ЭтоЗагрузкаПодчиненногоСценария Тогда //значит это загрузка именно фичи, а не вложенного сценария
						ТекстСообщения = ПолучитьТекстСообщенияПользователю("Сценарий <%1> не загружен.");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеСценария);
						Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
						Возврат;//значит установлен отбор, а у сценария нет этого тега и у фичи нет этого тега
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если СписокТеговИсключение.Количество() > 0 Тогда
				Если НаденТегИсключениеВСценарии или НаденТегИсключениеВФиче Тогда //значит надо проигнорировать этот сценарий
					Если Не НаденТегОтборВСценарии и НЕ НаденТегОтборВФиче Тогда //у отбора приоритет над исключением, значит надо оставить сценарий
						Если НЕ ЭтоЗагрузкаПодчиненногоСценария Тогда //значит это загрузка именно фичи, а не вложенного сценария
							ТекстСообщения = ПолучитьТекстСообщенияПользователю("Сценарий <%1> не загружен.");
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеСценария);
							Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
							Возврат;
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;
			
			
		Иначе
			
			//по исключению сценариев
			ТегИсключение = Неопределено;
			Для Каждого СвойстваТега Из ТегиСценария Цикл
				Тег = СвойстваТега.Тег;
				Если СписокТеговИсключение.НайтиПоЗначению(Тег) <> Неопределено Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("В сценарии <%1> найден тег исключение <%2>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеСценария);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Тег);
					Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
					НаденТегИсключениеВСценарии = Истина;
				КонецЕсли;	 
			КонецЦикла;	
			
			
			//по отбору сценариев
			НаденТегОтборВСценарии = Ложь;
			Для Каждого СвойстваТега Из ТегиСценария Цикл
				Тег = СвойстваТега.Тег;
				Если СписокТеговОтбор.НайтиПоЗначению(Тег) <> Неопределено Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("В сценарии <%1> найден тег отбор <%2>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеСценария);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Тег);
					Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
					НаденТегОтборВСценарии = Истина;
				КонецЕсли;	 
			КонецЦикла;	
			
			Для Каждого СвойстваТега Из МассивТеговФичи Цикл
				Тег = СвойстваТега.Тег;
				Если СписокТеговОтбор.НайтиПоЗначению(Тег) <> Неопределено Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("В фиче <%1> сценария <%2> найден тег отбор <%3>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПолноеИмяФичи);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОписаниеСценария);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",Тег);
					Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
					НаденТегОтборВФиче = Истина;
				КонецЕсли;	 
			КонецЦикла;	
			
			Если СписокТеговОтбор.Количество() > 0 Тогда
				Если Не НаденТегОтборВСценарии и НЕ НаденТегОтборВФиче Тогда
					Если НЕ ЭтоЗагрузкаПодчиненногоСценария Тогда //значит это загрузка именно фичи, а не вложенного сценария
						ТекстСообщения = ПолучитьТекстСообщенияПользователю("Сценарий <%1> не загружен.");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеСценария);
						Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
						Возврат;//значит установлен отбор, а у сценария нет этого тега и у фичи нет этого тега
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если СписокТеговИсключение.Количество() > 0 Тогда
				Если НаденТегИсключениеВСценарии или НаденТегИсключениеВФиче Тогда //значит надо проигнорировать этот сценарий
					Если Не НаденТегОтборВСценарии и НЕ НаденТегОтборВФиче Тогда //у отбора приоритет над исключением, значит надо оставить сценарий
						Если НЕ ЭтоЗагрузкаПодчиненногоСценария Тогда //значит это загрузка именно фичи, а не вложенного сценария
							ТекстСообщения = ПолучитьТекстСообщенияПользователю("Сценарий <%1> не загружен.");
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ОписаниеСценария);
							Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
							Возврат;
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;
			
			
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	
	
	ИмяСценария = ОписаниеСценария;
	Если ТекущийТипСценария = "background" Тогда
		ИмяСценария = "Контекст";
		Если ТекущийЯзыкФичаФайла = "en" Тогда
			ИмяСценария = "Background";
		ИначеЕсли ТекущийЯзыкФичаФайла = "vi" Тогда
			ИмяСценария = "Bối cảnh";
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если (ТекущийТипСценария = "background") или (ТекущийТипСценария = "scenario") или (ТекущийТипСценария = "scenario_outline") Тогда
		Если (ТекущийТипСценария <> "background") Тогда
			СтруктураПараметров.КоличествоЗагруженныхСценариев = СтруктураПараметров.КоличествоЗагруженныхСценариев + 1;
		КонецЕсли;	 
		СтрДеревоСтроки = ДеревоСтроки.Добавить();
		СтрДеревоСтроки.Имя = ИмяСценария;
		СтрДеревоСтроки.Тип = "Сценарий";
		СтрДеревоСтроки.ТипКартинки = 2;
		Если ТекущийТипСценария = "background" Тогда
			СтрДеревоСтроки.ТипКартинки = 7;
		КонецЕсли; 
		СтрДеревоСтроки.ПолныйПуть = СтрДеревоСтроки.Родитель.ПолныйПуть + ":" + НомерСтрокиСценария;
		СтрДеревоСтроки.НомерСтрокиВФиче = НомерСтрокиСценария;
		ДобавитьОбластьВТаблицуОбластей(СтрДеревоСтроки.НомерСтрокиВФиче,СтруктураПараметров.ТаблицаОбластей,СтрДеревоСтроки);
		
		Если ТекущийТипСценария = "background" Тогда
			СтрДеревоСтроки.ДопТип = "Контекст";
		КонецЕсли;	 
		Если ТипЗнч(СтрДеревоСтроки.ПроизвольныеЗначения) <> Тип("Структура")  Тогда
			СтрДеревоСтроки.ПроизвольныеЗначения = Новый Структура;
		КонецЕсли;	 
		СтрДеревоСтроки.ПроизвольныеЗначения.Вставить("МассивТегов",ТегиСценария);
		
		СтрокиШагов         = СтрДеревоСтроки.Строки;
		СтрокиШаговИсходные = СтрДеревоСтроки.Строки;//запомним, чтобы потом использовать для секции примеров
		
		
		РазныеИменнованныеПараметры = Новый Массив;
		
		//определим есть ли замена таблицы примеров
		ЕстьЗаменаТаблицыПримеров = Ложь;
		
		Если (ПередаваемыеТаблицы <> Неопределено) и (ЭтоЗагрузкаПодчиненногоСценария = Истина) и (НРег(ИмяСценария) = НРег(ИмяЗагружаемогоСценария)) Тогда
			КолТаблицВФиче = 0;
			Для каждого СтрТаблицаШагов Из ТаблицаШагов Цикл
				
				Если СтрТаблицаШагов.МассивТаблицПередаваемыхКакПараметр <> Неопределено Тогда
					КолТаблицВФиче = КолТаблицВФиче + СтрТаблицаШагов.МассивТаблицПередаваемыхКакПараметр.Количество();
				КонецЕсли;	 
			КонецЦикла;	
			
			Если КолТаблицВФиче = ПередаваемыеТаблицы.Количество()-1 Тогда
				ЕстьЗаменаТаблицыПримеров                     = Истина;
				БылаЗаменаТаблицыПараметровВСтруктуреСценария = Истина;
				//тогда нам передали ещё одну таблицу, которая заменяет таблицу примеров
			КонецЕсли;	 
		КонецЕсли;	 
		
		
		
		
		
		ЗакончиласьГруппа = Ложь;
		Для каждого СтрТаблицаШагов Из ТаблицаШагов Цикл
			
			Если СтрТаблицаШагов.ИмяОбласти <> Неопределено Тогда
				
				Если СтрТаблицаШагов.НачалоОбласти Тогда
					ОпределитьРодителяШага(СтрТаблицаШагов,СтрокиШагов,СтрДеревоСтроки,ДеревоСтроки,СтруктураПараметров);
					
					СтрОбласть                  = СтрокиШагов.Добавить();
					СтрОбласть.Имя              = СтрТаблицаШагов.ИмяОбласти;
					СтрОбласть.Тип              = "Область";
					СтрОбласть.ТипКартинки      = -1;
					СтрОбласть.НомерСтрокиВФиче = СтрТаблицаШагов.НомерСтроки;
					ДобавитьОбластьВТаблицуОбластей(СтрОбласть.НомерСтрокиВФиче,СтруктураПараметров.ТаблицаОбластей,СтрОбласть);
					СтрОбласть.ЗначениеОтступа  = СтрТаблицаШагов.ЗначениеОтступа;
					Если ТипЗнч(СтрОбласть.ПроизвольныеЗначения) <> Тип("Структура") Тогда
						СтрОбласть.ПроизвольныеЗначения = Новый Структура;
					КонецЕсли;	 
					СтрОбласть.ПроизвольныеЗначения.Вставить("МассивТеговШага",СтрТаблицаШагов.МассивТеговШага);
					СтрОбласть.ПроизвольныеЗначения.Вставить("МассивКомментариевШага",СтрТаблицаШагов.МассивКомментариевШага);
					
					СтрокиШагов = СтрОбласть.Строки;
					
					
					Если Лев(СтрТаблицаШагов.ИмяОбласти,1) <> "*" Тогда
						Если ЗначениеЗаполнено(СтрТаблицаШагов.МассивТаблицПередаваемыхКакПараметр) Тогда
							ОбработатьПередачуПараметровТаблицей(СтрОбласть,СтрТаблицаШагов.МассивТаблицПередаваемыхКакПараметр,РазныеИменнованныеПараметры,СтруктураПараметров);
						КонецЕсли;	 
						
						
						ЗначенияПараметров = Новый СписокЗначений;
						
						ПараметрыДляПолученияStepDefenition = Новый Структура;
						ПараметрыДляПолученияStepDefenition.Вставить("ЗначенияПараметров",ЗначенияПараметров);
						ПараметрыДляПолученияStepDefenition.Вставить("НоваяСтрокаПараметров","");
						ПараметрыДляПолученияStepDefenition.Вставить("НовыйStepDefinition","");
						ПараметрыДляПолученияStepDefenition.Вставить("ИмяШагаБезКлючевогоСлова",СтрТаблицаШагов.ИмяШагаБезКлючевогоСлова);
						ПараметрыДляПолученияStepDefenition.Вставить("ШагСПараметрамиВТаблице",СтрОбласть.ШагСПараметрамиВТаблице);
						ПараметрыДляПолученияStepDefenition.Вставить("КоличествоПередаваемыхТаблиц",ОпределитьКоличествоПередаваемыхТаблиц(СтрОбласть));
						ПараметрыДляПолученияStepDefenition.Вставить("СтруктураПараметров",СтруктураПараметров);
						
						РассчитатьStepDefinition(ПараметрыДляПолученияStepDefenition);
						
						НоваяСтрокаПараметров             = ПараметрыДляПолученияStepDefenition.НоваяСтрокаПараметров;
						НовыйStepDefinition               = ПараметрыДляПолученияStepDefenition.НовыйStepDefinition;
						ЗначенияПараметров                = ПараметрыДляПолученияStepDefenition.ЗначенияПараметров;
						
						IDИзStepDefinition     = НРег(Лев(НовыйStepDefinition,Найти(НовыйStepDefinition,"(")-1));
						СтрТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinition.Найти(IDИзStepDefinition,"СтрокаДляПоиска");
						
						Если СтрТаблицаИзвестныхStepDefinition = Неопределено И ТекущийЯзыкФичаФайла <> "ru" Тогда
							ТаблицаПеревода = СтруктураПараметров.ТаблицаПеревода;
							СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(IDИзStepDefinition,"СтрокаДляПоискаПеревод");
							Если СтрокаТаблицаПеревода <> Неопределено Тогда
								IDИзStepDefinition = СтрокаТаблицаПеревода.СтрокаДляПоискаРусский;
								СтрТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinition.Найти(IDИзStepDefinition,"СтрокаДляПоиска");
							КонецЕсли;	 
						КонецЕсли;	 
						

						
						Если СтрТаблицаИзвестныхStepDefinition <> Неопределено Тогда
							Если (СтрТаблицаИзвестныхStepDefinition.ТипШагаВДереве = "Условие") или (СтрТаблицаИзвестныхStepDefinition.ТипШагаВДереве = "Цикл") Тогда
								СтрОбласть.ДопТип                  = СтрТаблицаИзвестныхStepDefinition.ТипШагаВДереве;
								Если СтрТаблицаШагов.КлючевоеСлово = "elseif" Тогда
									СтрОбласть.ДопТип                  = "УсловиеИначеЕсли";
								КонецЕсли;	 
								СтрОбласть.ПолныйПуть              = "     " + СтрДеревоСтроки.Родитель.ПолныйПуть + ":" + СтрТаблицаШагов.НомерСтроки;
								СтрОбласть.Снипет                  = НовыйStepDefinition;
								//СтрОбласть.АдресСнипета            = СтрТаблицаИзвестныхStepDefinition.ИмяФайла;
								СтрОбласть.АдресСнипета            = ОпределитьАдресСнипета(СтрТаблицаИзвестныхStepDefinition.ИмяФайла,СтруктураПараметров.ЭтоLinux);
								
								СтрОбласть.СтрокаРеальнойПроцедуры = СтрТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры;
								СтрОбласть.ЗначенияПараметров      = ЗначенияПараметров;
							КонецЕсли;	 
						Иначе
							Если СтрТаблицаШагов.КлючевоеСлово = "if" Тогда
								//тогда считаем, что пользователь хотел в сценари использовать условие, но неверно его написал
								СтрОбласть.ДопТип = "Условие";
								СтрОбласть.ПолныйПуть              = "     " + СтрДеревоСтроки.Родитель.ПолныйПуть + ":" + СтрТаблицаШагов.НомерСтроки;
								СтрОбласть.Снипет                  = НовыйStepDefinition;
							КонецЕсли;	 
						КонецЕсли;	 
						
						Если СтрТаблицаШагов.КлючевоеСлово = "else" Тогда
							СтрОбласть.ДопТип                  = "УсловиеИначе";
						КонецЕсли;	 
					КонецЕсли;	 
					
				Иначе
					ЗакончиласьГруппа = Истина;
				КонецЕсли;	 
				
				
				Продолжить;
			КонецЕсли;	 
			
			
			Если ЗакончиласьГруппа Тогда
				ЗакончиласьГруппа = Ложь;
				Если СтрТаблицаШагов.ЗначениеОтступа <> Неопределено Тогда
					ОпределитьУровеньГруппы(СтрокиШагов,СтрТаблицаШагов);
				КонецЕсли;	 
			КонецЕсли;	 
			
			СтрСтрокиШагов                  = СтрокиШагов.Добавить();
			СтрСтрокиШагов.Имя              = СтрТаблицаШагов.ИмяШага;
			СтрСтрокиШагов.Тип              = "Шаг";
			СтрСтрокиШагов.ТипКартинки      = 3;
			СтрСтрокиШагов.ПолныйПуть       = "     " + СтрДеревоСтроки.Родитель.ПолныйПуть + ":" + СтрТаблицаШагов.НомерСтроки;
			СтрСтрокиШагов.НомерСтрокиВФиче = СтрТаблицаШагов.НомерСтроки;
			СтрСтрокиШагов.ЗначениеОтступа  = СтрТаблицаШагов.ЗначениеОтступа;
			Если ТипЗнч(СтрСтрокиШагов.ПроизвольныеЗначения) <> Тип("Структура") Тогда
				СтрСтрокиШагов.ПроизвольныеЗначения = Новый Структура;
			КонецЕсли;	 
			СтрСтрокиШагов.ПроизвольныеЗначения.Вставить("МассивТеговШага",СтрТаблицаШагов.МассивТеговШага);
			СтрСтрокиШагов.ПроизвольныеЗначения.Вставить("МассивКомментариевШага",СтрТаблицаШагов.МассивКомментариевШага);
			
			
			ОбработатьПередачуПараметровТаблицей(СтрСтрокиШагов,СтрТаблицаШагов.МассивТаблицПередаваемыхКакПараметр,РазныеИменнованныеПараметры,СтруктураПараметров);
			
			
			ЗначенияПараметров = Новый СписокЗначений;
			
			ПараметрыДляПолученияStepDefenition = Новый Структура;
			ПараметрыДляПолученияStepDefenition.Вставить("ЗначенияПараметров",ЗначенияПараметров);
			ПараметрыДляПолученияStepDefenition.Вставить("НоваяСтрокаПараметров","");
			ПараметрыДляПолученияStepDefenition.Вставить("НовыйStepDefinition","");
			ПараметрыДляПолученияStepDefenition.Вставить("ИмяШагаБезКлючевогоСлова",СтрТаблицаШагов.ИмяШагаБезКлючевогоСлова);
			ПараметрыДляПолученияStepDefenition.Вставить("ШагСПараметрамиВТаблице",СтрСтрокиШагов.ШагСПараметрамиВТаблице);
			ПараметрыДляПолученияStepDefenition.Вставить("КоличествоПередаваемыхТаблиц",ОпределитьКоличествоПередаваемыхТаблиц(СтрСтрокиШагов));
			ПараметрыДляПолученияStepDefenition.Вставить("СтруктураПараметров",СтруктураПараметров);
			
			РассчитатьStepDefinition(ПараметрыДляПолученияStepDefenition);
			
			НоваяСтрокаПараметров             = ПараметрыДляПолученияStepDefenition.НоваяСтрокаПараметров;
			НовыйStepDefinition               = ПараметрыДляПолученияStepDefenition.НовыйStepDefinition;
			СтрСтрокиШагов.ЗначенияПараметров = ПараметрыДляПолученияStepDefenition.ЗначенияПараметров;
			
			
			
			Для каждого ЭлемЗначенияПараметров Из ЗначенияПараметров Цикл
				Если ЭлемЗначенияПараметров.Значение.Тип = "ПараметрИменованный" Тогда
					Если РазныеИменнованныеПараметры.Найти(ЭлемЗначенияПараметров.Значение.Значение) = Неопределено Тогда
						РазныеИменнованныеПараметры.Добавить(ЭлемЗначенияПараметров.Значение.Значение);
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
			
			
			
			
			
			
			НашелStepDefinitionВepf = Ложь;
			
			IDИзStepDefinition = НРег(Лев(НовыйStepDefinition,Найти(НовыйStepDefinition,"(")-1));
			
			
			Если Не НашелStepDefinitionВepf Тогда
				ЗначенияПараметров = СтрСтрокиШагов.ЗначенияПараметров;
				СтрТаблицаИзвестныхStepDefinition = StepDefinitionИзТаблицы(IDИзStepDefinition,ТаблицаИзвестныхStepDefinition,СтруктураПараметров,ЗначенияПараметров,СтрСтрокиШагов);
				СтрСтрокиШагов.ЗначенияПараметров = ЗначенияПараметров;
				Если СтрТаблицаИзвестныхStepDefinition <> Неопределено Тогда
					СтрСтрокиШагов.Снипет   = НовыйStepDefinition;
					НашелStepDefinitionВepf = Истина;
				КонецЕсли;	 
			КонецЕсли;  
			
			
 
			
			
			Если НашелStepDefinitionВepf Тогда
				
				СтрСтрокиШагов.АдресСнипета = ОпределитьАдресСнипета(СтрТаблицаИзвестныхStepDefinition.ИмяФайла,СтруктураПараметров.ЭтоLinux);
				
				СтрСтрокиШагов.СтрокаРеальнойПроцедуры = СтрТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры;
				
				СтрЗамены = НРег("/" + ИмяФичи + ".feature");
				ПутьФичи  = СтрЗаменить(НРег(ПолноеИмяФичи), СтрЗамены, "");
				Если Найти(НРег(СтрТаблицаИзвестныхStepDefinition.ИмяФайла),ПутьФичи) = 0 Тогда
					СтрСтрокиШагов.ЭтоЧужойСнипет = Истина;
				КонецЕсли; 
				ФайлОбработки = Новый Файл(СтрТаблицаИзвестныхStepDefinition.ИмяФайла);
				Если НРег(ИмяФичи) <> НРег(ФайлОбработки.ИмяБезРасширения) Тогда
					СтрСтрокиШагов.ЭтоЧужойСнипет = Истина;
				КонецЕсли;
			Иначе
				
				СтрокаДляПоиска = Лев(НовыйStepDefinition,Найти(НовыйStepDefinition,"(")-1);
				СтрТаблицаУжеСуществующихСценариев = StepDefinitionИзТаблицыСценариев(НРег(СтрокаДляПоиска),ТаблицаУжеСуществующихСценариев,СтруктураПараметров,НовыйStepDefinition);
				Если СтрТаблицаУжеСуществующихСценариев = Неопределено Тогда
					СтрСтрокиШагов.Снипет                  = НовыйStepDefinition;
					СтрСтрокиШагов.СтрокаРеальнойПроцедуры = СтрЗаменить(НовыйStepDefinition, "("+НоваяСтрокаПараметров+")", "");
				Иначе
					//это подчиненное дерево
					
					НовыйStepDefinition = Лев(НовыйStepDefinition,Найти(НовыйStepDefinition,"(")-1);
					
					
					Если МассивСценариевЗащитаОтЗацикливанияКеш = Неопределено Тогда
						МассивСценариевЗащитаОтЗацикливанияКеш = Новый Массив;
					КонецЕсли; 
					
					Элем = МассивСценариевЗащитаОтЗацикливанияКеш.Найти(СтрТаблицаУжеСуществующихСценариев.ИмяСценария);
					Если Элем <> Неопределено Тогда
						//значит этот сценарий уже вызывался выше и сейчас произойдёт зацикливание
						ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог скопировать сценарий %1, т.к. произошло бы зацикливание.");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрТаблицаУжеСуществующихСценариев.ИмяСценария);
						Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
						Возврат;
					КонецЕсли; 
					
					МассивСценариевЗащитаОтЗацикливанияКеш.Добавить(СтрТаблицаУжеСуществующихСценариев.ИмяСценария);
					
					
					СтрСтрокиШагов.Тип         = "ШагСценарий";
					Если СтрТаблицаУжеСуществующихСценариев.ЭтоСтруктураСценария Тогда
						СтрСтрокиШагов.ДопТип  = "СтруктураСценария";
					КонецЕсли;	 
					
					СтрСтрокиШагов.ТипКартинки         = -1;
					//СтрСтрокиШагов.АдресСнипета        = СтрТаблицаУжеСуществующихСценариев.ИмяФайла;
					СтрСтрокиШагов.АдресСнипета = ОпределитьАдресСнипета(СтрТаблицаУжеСуществующихСценариев.ИмяФайла,СтруктураПараметров.ЭтоLinux);
					
					
					
					
					
					
					
					//Загрузим эту фичу в промежуточное дерево
					
					
					КешФич = СтруктураПараметров.КешФич;
					
					СтрКешФич = КешФич.Найти(СтрТаблицаУжеСуществующихСценариев.ИмяФайла,"ИмяФайла");
					Если СтрКешФич = Неопределено Тогда
						ПромДерево       = СоздатьДеревоЗначений();
						ПромДеревоСтроки = ПромДерево.Строки;
						
						ПромСтрокаФичи   = ПромДеревоСтроки.Добавить();
						ПромСтрокаФичи.Тип = "Фича";
						ПромСтрокаФичи.Имя  = СтрТаблицаУжеСуществующихСценариев.ИмяФайла;
						ПромСтрокаФичи.ПолныйПуть = СтрТаблицаУжеСуществующихСценариев.ПолноеИмя;
						
						КопияСтруктураПараметров = СкопироватьСтруктуру(СтруктураПараметров);
						КопияСтруктураПараметров.ИдетЗагрузкаИзКаталога = Ложь;
						
						
						ДвДанныеФичи = СтрТаблицаУжеСуществующихСценариев.ДвоичныеДанные;
						ИмяВременнойФичи = ПолучитьИмяВременногоФайла("feature");
						ДвДанныеФичи.Записать(ИмяВременнойФичи);
						
						
						
						ПустаяСтрокаДереваРазделитель = Неопределено;
						ПередаваемыеТаблицы  = ПолучитьТаблицыОткудаКопировать(СтрСтрокиШагов.Строки,ПустаяСтрокаДереваРазделитель);
						Если ПередаваемыеТаблицы.Количество() = 0 Тогда
							ПередаваемыеТаблицы = Неопределено;
						КонецЕсли;	 
						
						ПредыдущийЯзыкФичаФайла = ТекущийЯзыкФичаФайла;
						
						КопияСтруктураПараметров.Вставить("ЯзыкРодителя",ТекущийЯзыкФичаФайла);
						ОписаниеОшибки = "";
						Если Не ПроверитьФичуНаКорректностьСинтаксисаИЗагрузитьСценарии(ИмяВременнойФичи,ОписаниеОшибки,ПромСтрокаФичи.Строки,ТаблицаИзвестныхStepDefinition,КопияСтруктураПараметров,МассивСценариевЗащитаОтЗацикливанияКеш,Истина,ПередаваемыеТаблицы,СтрТаблицаУжеСуществующихСценариев.ИмяСценария) Тогда
							ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог загрузить %1. %2");
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрТаблицаУжеСуществующихСценариев.ИмяФайла);
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОписаниеОшибки);
							Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
							ТекущийЯзыкФичаФайла = ПредыдущийЯзыкФичаФайла;
							Возврат;
						КонецЕсли;	 
						
						ТекущийЯзыкФичаФайла = ПредыдущийЯзыкФичаФайла;
						
						
						ВФичеЕстьСтруктурыСценария = Ложь;
						ФичаСодержитСтруктурыСценария(ПромДерево,ВФичеЕстьСтруктурыСценария);
						Если НЕ ВФичеЕстьСтруктурыСценария Тогда
							СтрКешФич          = КешФич.Добавить();
							СтрКешФич.Дерево   = ПромДерево;
							СтрКешФич.ИмяФайла = СтрТаблицаУжеСуществующихСценариев.ИмяФайла;
						КонецЕсли;	 
					Иначе
						ПромДерево = СтрКешФич.Дерево;
					КонецЕсли;	 
					
					МассивСценариевЗащитаОтЗацикливанияКеш.Удалить(МассивСценариевЗащитаОтЗацикливанияКеш.Количество()-1);
					
					
					
					СкопироватьСтрокиСценарияВУказаннуюСтроку(СтрСтрокиШагов,ПромДерево,НРег(НовыйStepDefinition),СтрТаблицаУжеСуществующихСценариев.ИмяФайла,СтруктураПараметров);
					
					
				КонецЕсли;	 
				
			КонецЕсли;  
			
			СтрСтрокиШагов.ИмяШагаБезКлючевогоСлова   = СтрТаблицаШагов.ИмяШагаБезКлючевогоСлова;
			
		КонецЦикла;
		
		БылаОшибка = Ложь;
		
		
		Если ЕстьЗаменаТаблицыПримеров Тогда
			ТаблицаСтрокПримеров = ЗаменитьТаблицуПримеровНаПереданнуюТаблицу(ПередаваемыеТаблицы[ПередаваемыеТаблицы.Количество()-1]);
		КонецЕсли;	 
		
		ФорматТаблицыПримеров(ТаблицаСтрокПримеров,РазныеИменнованныеПараметры,БылаОшибка,Ложь,СтруктураПараметров);
		Если БылаОшибка Тогда
			СтрОшибки = "Ошибка парсинга фичи " + ДеревоСтроки.Родитель.Имя + ". Сценарий: " + ОписаниеСценария;
			Сообщить(СтрОшибки);
			ВызватьИсключение СтрОшибки;
		КонецЕсли; 
		
		Если ТаблицаСтрокПримеров.Количество() > 0 Тогда
			СтрДеревоСтроки.ДопТип = "СтруктураСценария";
			
			
			СтрДеревоСтроки = СтрокиШаговИсходные.Добавить();
			СтрДеревоСтроки.Имя         = "Примеры";
			СтрДеревоСтроки.Тип         = "Примеры";
			СтрДеревоСтроки.ТипКартинки = -1;
			
			СтрокиПримеров = СтрДеревоСтроки.Строки;
			Ном = 0;
			ИменованныеПараметры = Неопределено;
			Для каждого СтрТаблицаСтрокПримеров Из ТаблицаСтрокПримеров Цикл
				Ном = Ном + 1;
				Если Ном = 1 Тогда
					//в первой строке лежат имена параметров
					СтрДеревоСтроки.ИменованныеПараметры = ОпределитьПараметрыВСтрокеПримера(СтрТаблицаСтрокПримеров,
					                                                                                 Неопределено);
					ИменованныеПараметры                 = СтрДеревоСтроки.ИменованныеПараметры;
				КонецЕсли; 
				
				СтрСтрокаПримеров             = СтрокиПримеров.Добавить();
				СтрСтрокаПримеров.Имя         = СтрТаблицаСтрокПримеров.Стр;
				СтрСтрокаПримеров.Тип         = "Пример";
				СтрСтрокаПримеров.ТипКартинки = -1;
				СтрСтрокаПримеров.НомерСтрокиВФиче = СтрТаблицаСтрокПримеров.НомерСтрокиВФиче;
				СтрокиПримеров.Родитель.НомерСтрокиВФиче = СтрСтрокаПримеров.НомерСтрокиВФиче;
				
				Если Ном > 1 Тогда
					//тут будут лежать конкретные значения параметров
					СтрСтрокаПримеров.ИменованныеПараметры = ОпределитьПараметрыВСтрокеПримера(СтрТаблицаСтрокПримеров,
					                                                                                  Неопределено);
					//Нужно определить типы значений
					СтрСтрокаПримеров.ИменованныеПараметры = ПреобразоватьИменнованныеПараметрыСОпределениемТипов(СтрСтрокаПримеров.ИменованныеПараметры,СтрДеревоСтроки.ИменованныеПараметры);
					
					ДобавитьСценарийДляДанногоПримера(СтрСтрокаПримеров,ИменованныеПараметры,СтруктураПараметров);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;	 
		
	КонецЕсли;	 
КонецПроцедуры

Процедура ФичаСодержитСтруктурыСценария(Дерево,Статус)
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если СтрокаДерева.ДопТип = "СтруктураСценария" Тогда
			Статус = Истина;
		КонецЕсли;
		
		Если Статус Тогда
			Возврат;
		КонецЕсли;	 
		
		ФичаСодержитСтруктурыСценария(СтрокаДерева,Статус);
	КонецЦикла;	
КонецПроцедуры

Функция СкопироватьМассив(Ориг)
	Рез = Новый Массив;
	Для каждого Элем Из Ориг Цикл
		Рез.Добавить(Элем);
	КонецЦикла;
	
	Возврат Рез;
КонецФункции	

Функция ПолучитьСтрокуДляЗаменыПараметровВложенныхСценариев(Знач Стр)
	ПараметрыЧисла       = Новый Массив;
	ПараметрыСтрокиА     = Новый Массив;
	ПараметрыСтрокиК     = Новый Массив;
	ПараметрыДаты        = Новый Массив;
	ПараметрыИменованные = Новый Массив;
	
	
	ЭмуляцияRegExp(Стр,ПараметрыСтрокиА,ПараметрыСтрокиК,ПараметрыЧисла,ПараметрыДаты,ПараметрыИменованные,Истина);
	
	Ном = 0;
	Для каждого ПараметрДаты Из ПараметрыДаты Цикл
		Ном = Ном + 1;
		Стр = СтрЗаменить(Стр,"*||*ПараметрДата" + Ном + "*||*","*||*" + ПараметрДаты + "*||*");
	КонецЦикла;
	
	Возврат Стр;
КонецФункции	

Процедура СкопироватьСтрокиСценарияВУказаннуюСтроку(КудаКопировать,ДеревоОткудаКопировать,ИмяСценария,ИмяФайла,СтруктураПараметров)
	СтрокаСценария = Неопределено;
	
	МассивСценариевЗащитаОтЗацикливания = КудаКопировать.МассивСценариевЗащитаОтЗацикливания;
	Если МассивСценариевЗащитаОтЗацикливания = Неопределено Тогда
		МассивСценариевЗащитаОтЗацикливания = Новый Массив();
		КудаКопировать.МассивСценариевЗащитаОтЗацикливания = МассивСценариевЗащитаОтЗацикливания;
	КонецЕсли; 
	
	Элем = МассивСценариевЗащитаОтЗацикливания.Найти(ИмяСценария);
	Если Элем <> Неопределено Тогда
		//значит этот сценарий уже вызывался выше и сейчас произойдёт зацикливание
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог скопировать сценарий %1, т.к. произошло бы зацикливание.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяСценария);
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		Возврат;
	КонецЕсли; 
	
	МассивСценариевЗащитаОтЗацикливания.Добавить(ИмяСценария);
	
	
	
	ЗначенияПараметровДляЗаменыВРодительскомСценарии   = Новый Массив;
	СтарыйStepDefinition = ПолучитьStepDefinitionПоСтроке(КудаКопировать.Имя,ЗначенияПараметровДляЗаменыВРодительскомСценарии);//получим параметры которые пойдут во вложенный сценарий
	НовыйStepDefinition  = ПолучитьНовыйStepDefinition(СтарыйStepDefinition);
	
	
	ЗначенияПараметровДляЗаменыВоВложенномСценарии = Неопределено;
	ЗначенияТаблицДляЗаменыВоВложенномСценарии     = Неопределено;
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Тип","Сценарий");
	НайденныеСтрокиВсе = ДеревоОткудаКопировать.Строки.НайтиСтроки(ПараметрыОтбора,Истина);
	НайденныеСтроки = Новый Массив;
	Для Каждого НайденнаяСтрока Из НайденныеСтрокиВсе Цикл
		ЗначенияПараметров   = Новый Массив;
		СтарыйStepDefinition = ПолучитьStepDefinitionПоСтроке(НайденнаяСтрока.Имя,ЗначенияПараметров);
		НовыйStepDefinition  = ПолучитьНовыйStepDefinition(СтарыйStepDefinition);
		НовыйStepDefinition  = Лев(НовыйStepDefinition,Найти(НовыйStepDefinition,"(")-1);
		
		Если НРег(НовыйStepDefinition) = ИмяСценария Тогда
			НайденныеСтроки.Добавить(НайденнаяСтрока);
			//имя сценария уже вставлено правильно из родительского шага
			ЗначенияПараметровДляЗаменыВоВложенномСценарии = ЗначенияПараметров;
			
			Если КудаКопировать.ШагСПараметрамиВТаблице = Истина Тогда
				//надо передать ещё и таблицы
				ЗначенияТаблицДляЗаменыВоВложенномСценарии = КудаКопировать.Строки;
			КонецЕсли;	 
			
			Прервать;
		КонецЕсли;	
		
		
	КонецЦикла;	
	
	
	СтрокаОткудаКопировать = Неопределено;
	КолСценариев           = 0;
	Для каждого СтрокаДерева Из НайденныеСтроки Цикл
		Если СтрокаДерева.Тип = "Сценарий" Тогда
			КолСценариев = КолСценариев + 1;
			СтрокаОткудаКопировать = СтрокаДерева;
		КонецЕсли;	 
	КонецЦикла;
	
	
	Если КолСценариев <> 1 Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ошибка. В фиче %1 было найдено несколько сценариев с именем %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайла);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ИмяСценария);
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		Возврат;
	КонецЕсли;	 
	
	ПараметрыКопирования = Новый Структура;
	ПараметрыКопирования.Вставить("ЗначенияПараметровДляЗаменыВРодительскомСценарии",ЗначенияПараметровДляЗаменыВРодительскомСценарии);
	ПараметрыКопирования.Вставить("ЗначенияПараметровДляЗаменыВоВложенномСценарии",ЗначенияПараметровДляЗаменыВоВложенномСценарии);
	ПараметрыКопирования.Вставить("ЗначенияТаблицДляЗаменыВоВложенномСценарии",ЗначенияТаблицДляЗаменыВоВложенномСценарии);
	ПараметрыКопирования.Вставить("ИдТаблицыДляКопирования",-1);
	
	Если ЗначенияТаблицДляЗаменыВоВложенномСценарии <> Неопределено Тогда
		ПустаяСтрокаДереваРазделитель  = Неопределено;
		ТаблицыКудаКопировать          = ПолучитьТаблицыОткудаКопировать(КудаКопировать.Строки,ПустаяСтрокаДереваРазделитель);
	КонецЕсли;	 
	
	СкопироватьСтрокуВДереваПодчиненныеЭлементы(КудаКопировать,СтрокаОткудаКопировать,ПараметрыКопирования,СтруктураПараметров);
	
	Если ЗначенияТаблицДляЗаменыВоВложенномСценарии <> Неопределено Тогда
		Если СтрокаОткудаКопировать.ДопТип = "СтруктураСценария" Тогда
			Если ПараметрыКопирования.ИдТаблицыДляКопирования < (ТаблицыКудаКопировать.Количество()-2) Тогда //т.к. если была замена таблицы примеров - то это было сделано на этапе загрузки вложенного сценария
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Во вложенный сценарий <%1> было передано <%2> таблиц, а он принимает только <%3> таблиц.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КудаКопировать.Имя);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТаблицыКудаКопировать.Количество());
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",(ПараметрыКопирования.ИдТаблицыДляКопирования+1));
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		Иначе	
			Если ПараметрыКопирования.ИдТаблицыДляКопирования < (ТаблицыКудаКопировать.Количество()-1) Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Во вложенный сценарий <%1> было передано <%2> таблиц, а он принимает только <%3> таблиц.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КудаКопировать.Имя);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ТаблицыКудаКопировать.Количество());
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",(ПараметрыКопирования.ИдТаблицыДляКопирования+1));
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецПроцедуры

Функция ПолучитьТаблицыОткудаКопировать(ДеревоСтроки,ПустаяСтрокаДереваРазделитель)
	МассивТаблиц = Новый Массив;
	ТекТаблица   = Новый Массив;
	МассивТаблиц.Добавить(ТекТаблица);
	
	БылаХотяБыОднаСтрока = Ложь;
	Для Каждого СтрокаДерева Из ДеревоСтроки Цикл
		Если Не ЗначениеЗаполнено(СтрокаДерева.Имя) Тогда
			ПустаяСтрокаДереваРазделитель = СтрокаДерева;
			ТекТаблица   = Новый Массив;
			МассивТаблиц.Добавить(ТекТаблица);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.СтрокаПараметровШагаВВидеТаблицы <> Истина Тогда
			Прервать; // тут могут после строк таблицы идти обычные шаги, т.к. ранее уже было копирование шагов в эту ветку дерева
		КонецЕсли;	 
		
		ТекТаблица.Добавить(СтрокаДерева);
		БылаХотяБыОднаСтрока = Истина;
	КонецЦикла;	
	
	Если Не БылаХотяБыОднаСтрока  Тогда
		Возврат Новый Массив;
	КонецЕсли;	 
	
	Возврат МассивТаблиц;
КонецФункции	

Функция ЭтоПустаяТаблицаСОднойКолонкой(ТаблицаСтрок)
	Для Каждого Строка Из ТаблицаСтрок Цикл
		Если Строка.Имя = "||" Тогда
			Продолжить;
		КонецЕсли;	 
		Если Строка.Имя = "| |" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Возврат Ложь;
	КонецЦикла;	
	
	Возврат Истина;
КонецФункции	

Процедура СкопироватьСтрокуВДереваПодчиненныеЭлементы(КудаКопировать,ОткудаКопировать,ПараметрыКопирования,СтруктураПараметров)
	Для каждого СтрОткудаКопировать Из ОткудаКопировать.Строки Цикл
		Если ПараметрыКопирования <> Неопределено Тогда
			Если ПараметрыКопирования.Свойство("СозданиеСекцииПримеров") Тогда
				Если СтрОткудаКопировать.Тип = "Примеры" Тогда
					Продолжить;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	
		
		//создаём строку и копируеум свойства
		СтрокаКуда = КудаКопировать.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКуда,СтрОткудаКопировать);
		
		
		Если СтрОткудаКопировать.Тип = "Пример" Тогда
			ПараметрыКопирования.ИдТаблицыДляКопирования = -1;
		КонецЕсли;	 
		
		
		Если ПараметрыКопирования <> Неопределено Тогда
			
			
			Если ПараметрыКопирования.Свойство("СозданиеСекцииПримеров") Тогда
				Если СтрОткудаКопировать.Тип = "Примеры" Тогда
					Продолжить;
				КонецЕсли;	 
				
				
				ЗначенияПараметров = Неопределено;
				ИмяШага            = СтрОткудаКопировать.Имя;
				Если СтрОткудаКопировать.ЗначенияПараметров <> Неопределено Тогда
					ЗначенияПараметров = СкопироватьСписокЗначенийСтруктур(СтрОткудаКопировать.ЗначенияПараметров);
					ИмяШага            = СоздатьИмяШагаДляScenarioOutline_И_ОбработатьЗначенияПараметров(СтрОткудаКопировать.Имя,ЗначенияПараметров,ПараметрыКопирования.СтрокаПримеров.ИменованныеПараметры);
				КонецЕсли;	 
				
				Если СтрОткудаКопировать.СтрокаПараметровШагаВВидеТаблицы = Истина Тогда //тогда надо обновить параметры внутри таблицы
					Для Каждого ПараметрТаблицы Из СтрОткудаКопировать.ПараметрыТаблицы Цикл
						Для Каждого ИменнованныйПараметр Из ПараметрыКопирования.СтрокаПримеров.ИменованныеПараметры Цикл
							ИмяШага = СтрЗаменить(ИмяШага,"<" + ИменнованныйПараметр.Значение.ИмяПараметра + ">",ИменнованныйПараметр.Значение.Значение);
						КонецЦикла;	
					КонецЦикла;	
				КонецЕсли;	 
				
				СтрШагПримера                    = СтрокаКуда;
				ЗаполнитьЗначенияСвойств(СтрШагПримера,СтрОткудаКопировать);
				
				//надо заменить только имя шага (с учетом реальных параметров) и значения параметров
				СтрШагПримера.Имя                = ИмяШага;
				СтрШагПримера.ЗначенияПараметров = ЗначенияПараметров;
				
				
			КонецЕсли;	 
			
			Если ПараметрыКопирования.Свойство("ЗначенияПараметровДляЗаменыВРодительскомСценарии") Тогда
				Если ПараметрыКопирования.ЗначенияПараметровДляЗаменыВРодительскомСценарии.Количество() > 0 Тогда
					СтрокаДляЗаментыПараметров = ПолучитьСтрокуДляЗаменыПараметровВложенныхСценариев(СтрокаКуда.Имя);
					Ном = -1;
					Для каждого РодительскийПараметр Из ПараметрыКопирования.ЗначенияПараметровДляЗаменыВРодительскомСценарии Цикл
						Ном = Ном + 1;
						ВложенныйПараметр = ПараметрыКопирования.ЗначенияПараметровДляЗаменыВоВложенномСценарии[Ном];
						
						МассивЧтоЗаменяем = Новый Массив;
						
						ЧтоЗаменяем = ВложенныйПараметр.Значение;
						Если ВложенныйПараметр.Тип = "Строка" Тогда
							МассивЧтоЗаменяем.Добавить("'" + ЧтоЗаменяем + "'");
							МассивЧтоЗаменяем.Добавить("""" + ЧтоЗаменяем + """");
						ИначеЕсли ВложенныйПараметр.Тип = "Число" Тогда
							МассивЧтоЗаменяем.Добавить(ЧтоЗаменяем);
						ИначеЕсли ВложенныйПараметр.Тип = "Дата" Тогда
							МассивЧтоЗаменяем.Добавить(ЧтоЗаменяем);
						КонецЕсли;	 
						
						НаЧтоЗаменяем = РодительскийПараметр.Значение;
						Если РодительскийПараметр.Тип = "Строка" Тогда
							НаЧтоЗаменяем = "'" + НаЧтоЗаменяем + "'";
						КонецЕсли;	 
						
						Для каждого ЧтоЗаменяем Из МассивЧтоЗаменяем Цикл
							СтрокаДляЗаментыПараметров = СтрЗаменить(СтрокаДляЗаментыПараметров,"*||*" + ЧтоЗаменяем + "*||*",НаЧтоЗаменяем);
						КонецЦикла;
						
						
					КонецЦикла;
					
					СтрокаДляЗаментыПараметров = СтрЗаменить(СтрокаДляЗаментыПараметров,"*||*","");
					СтрокаДляЗаментыПараметров = СтрЗаменить(СтрокаДляЗаментыПараметров,"*||*","");
					
					
					СтрокаКуда.Имя = СтрокаДляЗаментыПараметров;
					ВтораяЧастьСтрокиПозиция = -1;
					ТекущееКлючевоеСлово = ПолучитьКлючевоеСлово(НРег(СтрокаКуда.Имя), ВтораяЧастьСтрокиПозиция);
					ИмяШагаБезКлючевогоСлова = СокрЛП(Сред(СтрокаКуда.Имя, ВтораяЧастьСтрокиПозиция));
					СтрокаКуда.ИмяШагаБезКлючевогоСлова = ИмяШагаБезКлючевогоСлова;
					
					ЗначенияПараметров = Новый СписокЗначений;
					
					ПараметрыДляПолученияStepDefenition = Новый Структура;
					ПараметрыДляПолученияStepDefenition.Вставить("ЗначенияПараметров",ЗначенияПараметров);
					ПараметрыДляПолученияStepDefenition.Вставить("НоваяСтрокаПараметров","");
					ПараметрыДляПолученияStepDefenition.Вставить("НовыйStepDefinition","");
					ПараметрыДляПолученияStepDefenition.Вставить("ИмяШагаБезКлючевогоСлова",СтрокаКуда.ИмяШагаБезКлючевогоСлова);
					ПараметрыДляПолученияStepDefenition.Вставить("ШагСПараметрамиВТаблице",СтрокаКуда.ШагСПараметрамиВТаблице);
					ПараметрыДляПолученияStepDefenition.Вставить("КоличествоПередаваемыхТаблиц",ОпределитьКоличествоПередаваемыхТаблиц(СтрокаКуда));
					ПараметрыДляПолученияStepDefenition.Вставить("СтруктураПараметров",СтруктураПараметров);
					
					РассчитатьStepDefinition(ПараметрыДляПолученияStepDefenition);
					НоваяСтрокаПараметров = ПараметрыДляПолученияStepDefenition.НоваяСтрокаПараметров;
					НовыйStepDefinition   = ПараметрыДляПолученияStepDefenition.НовыйStepDefinition;
					
					ЗначенияПараметров = ПараметрыДляПолученияStepDefenition.ЗначенияПараметров;
					IDИзStepDefinition = НРег(Лев(НовыйStepDefinition,Найти(НовыйStepDefinition,"(")-1));
					СтрТаблицаИзвестныхStepDefinition = StepDefinitionИзТаблицы(IDИзStepDefinition,СтруктураПараметров.ТаблицаИзвестныхStepDefinition,СтруктураПараметров,ЗначенияПараметров,СтрокаКуда);
					СтрокаКуда.ЗначенияПараметров = ЗначенияПараметров;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		//подчиненный элемент получил МассивСценариевЗащитаОтЗацикливания
		СтрокаКуда.МассивСценариевЗащитаОтЗацикливания = КудаКопировать.МассивСценариевЗащитаОтЗацикливания;
		
		СкопироватьСтрокуВДереваПодчиненныеЭлементы(СтрокаКуда,СтрОткудаКопировать,ПараметрыКопирования,СтруктураПараметров);
		
	КонецЦикла;
	
	
	
	
	Если ОткудаКопировать.ШагСПараметрамиВТаблице  = Истина  Тогда
		РазныеИменнованныеПараметры            = Новый Массив;
		ТаблицаСтрокПередачаПараметровТаблицей = СоздатьТаблицуСтрокПримеров();
		
		ОткудаКопироватьТаблицу        = КудаКопировать.Строки;
		
		Если ПараметрыКопирования.Свойство("ЗначенияТаблицДляЗаменыВоВложенномСценарии") И (ОткудаКопировать.Родитель.ДопТип <> "СтруктураСценария") Тогда
			Если ПараметрыКопирования.ЗначенияТаблицДляЗаменыВоВложенномСценарии <> Неопределено Тогда
				ПустаяСтрокаДереваРазделитель  = Неопределено;
				ТаблицыКудаКопировать          = ПолучитьТаблицыОткудаКопировать(КудаКопировать.Строки,ПустаяСтрокаДереваРазделитель);
				КоличествоТаблицДляКопирования = ТаблицыКудаКопировать.Количество();
				
				//надо заменить таблицы в подчиненном сценарии
				ПустаяСтрокаДереваРазделитель = Неопределено;
				ТаблицыОткудаКопировать       = ПолучитьТаблицыОткудаКопировать(ПараметрыКопирования.ЗначенияТаблицДляЗаменыВоВложенномСценарии,ПустаяСтрокаДереваРазделитель);
				
				ФинальныйМассивДляКопирования = Новый Массив;
				Для Ккк = 1 По КоличествоТаблицДляКопирования Цикл
					Если Ккк > 1 Тогда
						ФинальныйМассивДляКопирования.Добавить(ПустаяСтрокаДереваРазделитель);
					КонецЕсли;	 
					
					ПараметрыКопирования.ИдТаблицыДляКопирования = ПараметрыКопирования.ИдТаблицыДляКопирования + 1;
					
					Если ПараметрыКопирования.ИдТаблицыДляКопирования <= (ТаблицыОткудаКопировать.Количество()-1) Тогда
						
						Если ЭтоПустаяТаблицаСОднойКолонкой(ТаблицыОткудаКопировать[ПараметрыКопирования.ИдТаблицыДляКопирования]) Тогда
							//тогда не будем заменять таблицу
							Для Каждого СтрокаТаблицыОткудаКопировать Из ТаблицыКудаКопировать[ПараметрыКопирования.ИдТаблицыДляКопирования] Цикл
								ФинальныйМассивДляКопирования.Добавить(СтрокаТаблицыОткудаКопировать);
							КонецЦикла;	
							
							Продолжить;
						КонецЕсли;	 
						
						Для Каждого СтрокаТаблицыОткудаКопировать Из ТаблицыОткудаКопировать[ПараметрыКопирования.ИдТаблицыДляКопирования] Цикл
							ФинальныйМассивДляКопирования.Добавить(СтрокаТаблицыОткудаКопировать);
						КонецЦикла;	
					КонецЕсли;	 
				КонецЦикла;	
				
				
				Если ФинальныйМассивДляКопирования.Количество() > 0 Тогда
					ОткудаКопироватьТаблицу = ФинальныйМассивДляКопирования;
				КонецЕсли;	 
				
			КонецЕсли;	 
		КонецЕсли;	 
		
		
		
		Для Каждого ПодчиненнаяСтрока Из ОткудаКопироватьТаблицу Цикл
			Если (НЕ ПодчиненнаяСтрока.СтрокаПараметровШагаВВидеТаблицы) и (СокрЛП(ПодчиненнаяСтрока.Имя) <> "") Тогда
				Продолжить;
			КонецЕсли;	 
			
			СтрТаблицаСтрокиСРазделителями = Новый Структура;
			СтрТаблицаСтрокиСРазделителями.Вставить("Стр",ПодчиненнаяСтрока.Имя);
			СтрТаблицаСтрокиСРазделителями.Вставить("Тип",ПодчиненнаяСтрока.Тип);
			ТаблицаСтрокПередачаПараметровТаблицей.Добавить(СтрТаблицаСтрокиСРазделителями);
		КонецЦикла;	
		
		МассивТаблицПередаваемыхКакПараметр = Новый Массив;
		МассивТаблицПередаваемыхКакПараметр.Добавить(ТаблицаСтрокПередачаПараметровТаблицей);
		
		ОбработатьПередачуПараметровТаблицей(КудаКопировать,МассивТаблицПередаваемыхКакПараметр,РазныеИменнованныеПараметры);
	КонецЕсли;	 
	
КонецПроцедуры

Процедура НайтиСтрокуСценарияВДеревеПоИмени(Дерево,ИмяСценария,СтрокаСценария)
	
	
КонецПроцедуры

Функция ПолучитьСледующееОжидаемоеКлючевоеСлово(Стр,ТекущийТипСценария,ИдетЧтениеПримеров)
	СледующаяСтрокаМожетБыть = "";
	
	Если Стр = "feature" Тогда
		СледующаяСтрокаМожетБыть = "background,scenario,scenario_outline";
		ИдетЧтениеПримеров = Ложь;
	КонецЕсли;	 
	
	Если Стр = "background" Тогда
		ТекущийТипСценария = "background";
		СледующаяСтрокаМожетБыть = "when,given,then,and,but,if,elseif,else";
		ИдетЧтениеПримеров = Ложь;
	КонецЕсли;	 
	
	Если Стр = "scenario" Тогда
		ТекущийТипСценария = "scenario";
		СледующаяСтрокаМожетБыть = "when,given,then,and,but,if,elseif,else";
		ИдетЧтениеПримеров = Ложь;
	КонецЕсли;	 
	
	Если Стр = "scenario_outline" Тогда
		ТекущийТипСценария = "scenario_outline";
		СледующаяСтрокаМожетБыть = "when,given,then,and,but,if,elseif,else";
		ИдетЧтениеПримеров = Ложь;
	КонецЕсли;	 
	
	
	Если Стр = "given" Тогда
		Если ТекущийТипСценария = "background" Тогда
			СледующаяСтрокаМожетБыть = "when,then,and,but,given,if,elseif,else,scenario,scenario_outline";
		ИначеЕсли ТекущийТипСценария = "scenario" Тогда
			СледующаяСтрокаМожетБыть = "when,then,but,and,given,if,elseif,else,scenario,scenario_outline";
		ИначеЕсли ТекущийТипСценария = "scenario_outline" Тогда
			СледующаяСтрокаМожетБыть = "when,then,but,and,given,if,elseif,else,examples";
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если (Стр = "and") или (Стр = "but")  или (Стр = "if")  или (Стр = "elseif")  или (Стр = "else") Тогда
		Если ТекущийТипСценария = "background" Тогда
			СледующаяСтрокаМожетБыть = "when,then,and,but,given,if,elseif,else,scenario,scenario_outline";
		ИначеЕсли ТекущийТипСценария = "scenario" Тогда
			СледующаяСтрокаМожетБыть = "when,then,and,but,given,if,elseif,else,scenario,scenario_outline";
		ИначеЕсли ТекущийТипСценария = "scenario_outline" Тогда
			СледующаяСтрокаМожетБыть = "when,then,but,and,given,if,elseif,else,examples";
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Стр = "when" Тогда
		Если ТекущийТипСценария = "background" Тогда
			СледующаяСтрокаМожетБыть = "when,then,and,but,given,if,elseif,else,scenario,scenario_outline";
		ИначеЕсли ТекущийТипСценария = "scenario" Тогда
			СледующаяСтрокаМожетБыть = "when,then,but,and,given,if,elseif,else,scenario,scenario_outline";
		ИначеЕсли ТекущийТипСценария = "scenario_outline" Тогда
			СледующаяСтрокаМожетБыть = "when,then,but,and,given,if,elseif,else,examples";
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Стр = "then" Тогда
		Если ТекущийТипСценария = "background" Тогда
			СледующаяСтрокаМожетБыть = "when,then,and,but,given,if,elseif,else,scenario,scenario_outline";
		ИначеЕсли ТекущийТипСценария = "scenario" Тогда
			СледующаяСтрокаМожетБыть = "when,then,but,and,given,if,elseif,else,scenario,scenario_outline";
		ИначеЕсли ТекущийТипСценария = "scenario_outline" Тогда
			СледующаяСтрокаМожетБыть = "when,then,but,and,given,if,elseif,else,examples";
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Стр = "examples" Тогда
		ИдетЧтениеПримеров = Истина;
		СледующаяСтрокаМожетБыть = "scenario,scenario_outline";
	КонецЕсли;	 
	
	Если СледующаяСтрокаМожетБыть = Неопределено Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог определить СледующееОжидаемоеКлючевое по: %1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Стр);
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
	КонецЕсли;	 
	
	Возврат СледующаяСтрокаМожетБыть;
КонецФункции

Функция ТекущееКлючевоеСловоСоответствуетОжидаемому(ТекущееКлючевоеСлово,ОжидаемоеКлючевоеСлово)
	Если ТекущееКлючевоеСлово = "" Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Поз = Найти(ОжидаемоеКлючевоеСлово,ТекущееКлючевоеСлово);
	Если Поз > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;	
	КонецЕсли;	 
КонецФункции

Функция СоздатьТаблицуШагов()
	Тзн = Новый Массив;
	Возврат Тзн;
КонецФункции

Процедура ДобавитьШаг(ТаблицаШагов,СтрокаТаблицаТекстФичи,КлючевоеСлово,ИмяШагаБезКлючевогоСлова,ИмяШага,НомерСтроки,МассивТаблицПередаваемыхКакПараметр,ДопПараметры,СруктураОбласти = Неопределено)
	
	СтруктураШага = Новый Структура;
	СтруктураШага.Вставить("КлючевоеСлово",КлючевоеСлово);
	СтруктураШага.Вставить("ИмяШагаБезКлючевогоСлова",ИмяШагаБезКлючевогоСлова);
	СтруктураШага.Вставить("ИмяШага",ИмяШага);
	СтруктураШага.Вставить("НомерСтроки",НомерСтроки);
	СтруктураШага.Вставить("МассивТаблицПередаваемыхКакПараметр",МассивТаблицПередаваемыхКакПараметр);
	СтруктураШага.Вставить("ЗначениеОтступа",СтрокаТаблицаТекстФичи.ЗначениеОтступа);
	СтруктураШага.Вставить("МассивТеговШага",ДопПараметры.МассивТеговШага);
	СтруктураШага.Вставить("МассивКомментариевШага",ДопПараметры.МассивКомментариевШага);
	
	
	СтруктураШага.Вставить("ИмяОбласти",Неопределено);
	СтруктураШага.Вставить("НачалоОбласти",Неопределено);
	СтруктураШага.Вставить("Родитель",Неопределено);
	СтруктураШага.Вставить("РазмерОтступа",0);
	Если СруктураОбласти <> Неопределено Тогда
		СтруктураШага.Вставить("ИмяОбласти",СруктураОбласти.ИмяОбласти);
		СтруктураШага.Вставить("НачалоОбласти",СруктураОбласти.НачалоОбласти);
		Если СруктураОбласти.Свойство("Родитель") Тогда
			СтруктураШага.Вставить("Родитель",СруктураОбласти.Родитель);
		КонецЕсли;	 
		Если СруктураОбласти.Свойство("РазмерОтступа") Тогда
			СтруктураШага.Вставить("РазмерОтступа",СруктураОбласти.РазмерОтступа);
		КонецЕсли;	 
	КонецЕсли;	 
	
	ТаблицаШагов.Добавить(СтруктураШага);
КонецПроцедуры

Функция СоздатьТаблицуСтрокПримеров()
	Тзн = Новый Массив;
	Возврат Тзн;
КонецФункции

Функция ФичаИмеетКорректныеОтступыВНачалеСтрок(Тзн,ИмяФайла,ИмяФайлаОригинальное)
	Статус = Истина;
	ВыводилИмяФичи = Ложь;
	
	КолСтрокПробелы = 0;
	КолСтрокТабы    = 0;
	
	НомСтр               = 0;
	НайденоКлючевоеСлово = Ложь;
	Для Каждого СтрТзн Из Тзн Цикл
		НомСтр = НомСтр + 1;
		
		СокрСтр = СокрЛП(СтрТзн.Стр);
		
		Если СокрСтр = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Лев(СокрСтр,1) = "#" Тогда
			Продолжить;
		ИначеЕсли Лев(СокрСтр,2) = "//" Тогда
			Продолжить;
		ИначеЕсли Лев(СокрСтр,1) = "@" Тогда
			Продолжить;
		ИначеЕсли Лев(СокрСтр,1) = "|" Тогда
			Продолжить;
		КонецЕсли;	 
		
		КоличествоПробеловВНачалеСтроки = 0;
		КоличествоТабовВНачалеСтроки    = 0;
		
		ДлинаСтроки = СтрДлина(СтрТзн.Стр);
		
		Поз = -1;
		КлючевоеСлово        = ПолучитьКлючевоеСлово(СокрЛП(СтрТзн.Стр),Поз);
		СтрТзн.КлючевоеСлово = КлючевоеСлово;
		
		Если КлючевоеСлово = "scenario" или КлючевоеСлово = "scenario_outline" или КлючевоеСлово = "background" Тогда
			НайденоКлючевоеСлово = Истина;
			СтрТзн.ЗначениеОтступа = 0;
		КонецЕсли;	 
		
		Если Не НайденоКлючевоеСлово Тогда
			Продолжить;
		КонецЕсли;	 
		
		Для Ккк = 1 По ДлинаСтроки Цикл
			Символ = Сред(СтрТзн.Стр,Ккк,1);
			Если Символ = " " Тогда
				КоличествоПробеловВНачалеСтроки = КоличествоПробеловВНачалеСтроки + 1;
			ИначеЕсли Символ = Символы.Таб Тогда
				КоличествоТабовВНачалеСтроки = КоличествоТабовВНачалеСтроки + 1;
			Иначе
				Прервать;
			КонецЕсли;	 
		КонецЦикла; 
		
		Если КоличествоПробеловВНачалеСтроки > 0 Тогда
			КолСтрокПробелы = КолСтрокПробелы + 1;
		КонецЕсли;	 
		Если КоличествоТабовВНачалеСтроки > 0 Тогда
			КолСтрокТабы = КолСтрокТабы + 1;
		КонецЕсли;	 
		
		Если (КоличествоПробеловВНачалеСтроки > 0) и (КоличествоТабовВНачалеСтроки > 0) Тогда
			Если Не ВыводилИмяФичи Тогда
				ВыводилИмяФичи = Истина;
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Фича <%1> содержит тег @Tree. Найдены строки, которые содержат символы пробелов и символы табуляции в начале строки. Дерево не может быть корректно построено.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайлаОригинальное);
				Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
			КонецЕсли;	 
			
			Сообщить(СтрТзн.Стр);
			Статус = Ложь;
		КонецЕсли;	 
	КонецЦикла;	
	
	
	Если (КолСтрокПробелы > 0) и (КолСтрокТабы > 0) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Фича <%1> содержит тег @Tree. Часть строк содержит в начале строки символы пробелов <%2>, часть строк содержит символы табуляции <%3>. Дерево не может быть корректно построено.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайлаОригинальное);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",КолСтрокПробелы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",КолСтрокТабы);
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		Статус = Ложь;
	КонецЕсли;	 
	
	Возврат Статус;
КонецФункции	

Функция ЗагрузитьФичуВТаблицуЗначений(ИмяФайла,НадоСтроитьДерево,ИмяФайлаОригинальное,ТэгУказанияЯзыка)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("Стр");
	Тзн.Колонки.Добавить("ЗначениеОтступа");
	Тзн.Колонки.Добавить("СледующийОступ");
	Тзн.Колонки.Добавить("ПредыдущийОтступ");
	Тзн.Колонки.Добавить("НомСтр");
	Тзн.Колонки.Добавить("Примеры");
	Тзн.Колонки.Добавить("НельзяСоздаватьОбласть");
	Тзн.Колонки.Добавить("КлючевоеСлово");
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	
	НомСтр = 0;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если Лев(СокрЛП(Стр),1) = "#" Тогда
			ПозицияПоиска = Найти(Стр, ТэгУказанияЯзыка);
			Если  ПозицияПоиска > 0 Тогда
				СтрокаЯзыка = СокрЛП(Сред(Стр, ПозицияПоиска+СтрДлина(ТэгУказанияЯзыка)));
				Если СоответствиеТаблицПереводов.Получить(СтрокаЯзыка) <> Неопределено Тогда 
					ТекущийЯзыкФичаФайла = СтрокаЯзыка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	 
		
		СтрТзн = Тзн.Добавить();
		СтрТзн.Стр = Стр;
		
		НомСтр        = НомСтр + 1;
		СтрТзн.НомСтр = НомСтр;
	КонецЦикла;	
	
	Текст.Закрыть();
	
	
	
	ПредыдущийОтступ = 0;
	Если НадоСтроитьДерево Тогда
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайла,"UTF-8");
		
		Ном = -1;
		Пока Истина Цикл
			Ном = Ном + 1;
			
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
			
			
			
			СтрТзн                  = Тзн[Ном];
			СтрТзн.ЗначениеОтступа  = ВычислитьЗначениеОтступа(СтрТзн.Стр,ПредыдущийОтступ);
			СтрТзн.ПредыдущийОтступ = ПредыдущийОтступ;
			СтрТзн.СледующийОступ   = СтрТзн.ЗначениеОтступа;
			
			Если Ном > 0 Тогда
				Тзн[Ном-1].СледующийОступ = СтрТзн.ЗначениеОтступа;
			КонецЕсли;	 
			
			
			ПредыдущийОтступ        = СтрТзн.ЗначениеОтступа;
		КонецЦикла;	
		
		Текст.Закрыть();
		
		
		
		ЕстьПримеры = Ложь;
		КолСтрок = Тзн.Количество()-1;
		ОбойтиТаблицуОтступов(Тзн,КолСтрок,ЕстьПримеры);
		
		Если ЕстьПримеры Тогда
			СтрокаСШагом = Неопределено;
			Для Ккк = 0 По КолСтрок-1 Цикл
				ТекСтрокаТзн  = Тзн[Ккк];
				
				Если ТекСтрокаТзн.Примеры = Истина Тогда
					//нашел строку секции примеров
					Если СтрокаСШагом <> Неопределено Тогда
						СтрокаСШагом.НельзяСоздаватьОбласть = Истина;
					КонецЕсли;	 
				КонецЕсли;	 
				
				Если Не ЭтоНеСтрокаСШагом_ОпределимПоПервомуСимволу(ТекСтрокаТзн.Стр) Тогда
					СтрокаСШагом = ТекСтрокаТзн;
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЕсли;	 
		
		ФичаИмеетКорректныеОтступыВНачалеСтрок(Тзн,ИмяФайла,ИмяФайлаОригинальное);
	КонецЕсли;	 
	
	Возврат Тзн;
КонецФункции	

Функция ЭтоНеСтрокаСШагом_ОпределимПоПервомуСимволу(Стр)
	ПервыйСимвол = Лев(СокрЛП(Стр),1);
	Если  (СокрЛП(Стр) = "") или (ПервыйСимвол = "#") или (ПервыйСимвол = "@") или (ПервыйСимвол = "|") или (Лев(СокрЛП(Стр),2) = "//") Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	

Процедура ОбойтиТаблицуОтступов(Тзн,КолСтрок,ЕстьПримеры)
	Для Ккк = 0 По КолСтрок-1 Цикл
		ТекСтрокаТзн  = Тзн[КолСтрок - Ккк];
		ПредСтрокаТзн = Тзн[КолСтрок - Ккк - 1];
		
		ТекСтрокаСтр  = ТекСтрокаТзн.Стр;
		ПредСтрокаСтр = ПредСтрокаТзн.Стр;
		
		//для пустых строк отступ приравнивается снизу вверх
		Если ЭтоНеСтрокаСШагом_ОпределимПоПервомуСимволу(ПредСтрокаСтр) Тогда
			ПредСтрокаТзн.ЗначениеОтступа = ТекСтрокаТзн.ЗначениеОтступа;
		ИначеЕсли ВЭтойСтрокеКлючевоеСловоПримеры(СокрЛП(ПредСтрокаСтр)) Тогда
			ПредСтрокаТзн.ЗначениеОтступа = ТекСтрокаТзн.ЗначениеОтступа;
			ПредСтрокаТзн.Примеры = Истина;
			ЕстьПримеры           = Истина;
		КонецЕсли;	
		
		ПредСтрокаТзн.СледующийОступ = ТекСтрокаТзн.ЗначениеОтступа;
		
		
	КонецЦикла;
КонецПроцедуры

Функция ВычислитьЗначениеОтступа(Знач Стр,ПредыдущийОтступ)
	Если Лев(СокрЛП(Стр),1) = "|" Тогда
		//чтобы строки обозначающие таблицы всегда шли как следущая строка
		Возврат ПредыдущийОтступ;
	КонецЕсли;	 
	
	Если Лев(СокрЛП(Стр),1) = "#" Тогда
		Возврат ПредыдущийОтступ;
	КонецЕсли;	 
	
	Если Лев(СокрЛП(Стр),2) = "//" Тогда
		Возврат ПредыдущийОтступ;
	КонецЕсли;	 
	
	Если Лев(СокрЛП(Стр),1) = "@" Тогда
		Возврат ПредыдущийОтступ;
	КонецЕсли;	 
	
	Если СокрЛП(Стр) = "" Тогда
		Возврат ПредыдущийОтступ;
	КонецЕсли;	 
	
	//Стр = СтрЗаменить(Стр," ","");
	
	Кол = 0;
	Для Ккк = 1 По СтрДлина(Стр) Цикл
		Символ = Сред(Стр,Ккк,1);
		Если Символ = Символы.Таб Тогда
			Кол = Кол + 1;
		ИначеЕсли Символ = " " Тогда
			Кол = Кол + 1;
		Иначе
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Кол;
	
КонецФункции	

Функция СоздатьСтруктуруДляСценария(Имя,ИмяФайла)
	Структура = Новый Структура("", );
	Структура.Вставить("Имя",Имя);
	Структура.Вставить("ИмяФайла",ИмяФайла);
	
	Возврат Структура;
КонецФункции	

Процедура ДобавитьКолонкуСнипетаВТаблицаУжеСуществующихСценариев(ТаблицаУжеСуществующихСценариев,СтруктураПараметров)
	КолонкаСнипет = ТаблицаУжеСуществующихСценариев.Колонки.Найти("Снипет");
	
	СтрокиДляОбработки = ТаблицаУжеСуществующихСценариев.НайтиСтроки(Новый Структура("Снипет",""));
	
	Для каждого СтрТаблицаУжеСуществующихСценариев Из СтрокиДляОбработки Цикл
		ЗначенияПараметров = Новый СписокЗначений;
		
		ПараметрыДляПолученияStepDefenition = Новый Структура;
		ПараметрыДляПолученияStepDefenition.Вставить("ЗначенияПараметров",ЗначенияПараметров);
		ПараметрыДляПолученияStepDefenition.Вставить("НоваяСтрокаПараметров","");
		ПараметрыДляПолученияStepDefenition.Вставить("НовыйStepDefinition","");
		ПараметрыДляПолученияStepDefenition.Вставить("ИмяШагаБезКлючевогоСлова",СтрТаблицаУжеСуществующихСценариев.ИмяСценария);
		ПараметрыДляПолученияStepDefenition.Вставить("ШагСПараметрамиВТаблице","");
		ПараметрыДляПолученияStepDefenition.Вставить("КоличествоПередаваемыхТаблиц",0);
		ПараметрыДляПолученияStepDefenition.Вставить("СтруктураПараметров",СтруктураПараметров);
		
		РассчитатьStepDefinition(ПараметрыДляПолученияStepDefenition);
		
		НовыйStepDefinition = ПараметрыДляПолученияStepDefenition.НовыйStepDefinition;
		
		НовыйStepDefinition  = Лев(НовыйStepDefinition,Найти(НовыйStepDefinition,"(")-1);
		
		СтрТаблицаУжеСуществующихСценариев.Снипет             = НРег(НовыйStepDefinition);
	КонецЦикла;
КонецПроцедуры

Функция ПреобразоватьСписокЗначенийНСтр(Спс)
	Копия = Спс.Скопировать();
	Для каждого Элем Из Копия Цикл
		Элем.Значение = НРег(Элем.Значение);
	КонецЦикла;
	
	Возврат Копия;
КонецФункции	

Процедура ОпределитьТегиФичи(ТаблицаТекстФичи,МассивТеговФичи,МассивКомментариевФичи,МассивТеговСценариев,МассивТеговВсе,МассивТеговВсеДляПоиска)
	
	
	НайденСценарий = Ложь;
	ИмяСценария    = "";
	МассивТеговСценария        = Новый Массив;
	МассивКомментариевСценария = Новый Массив;
	Ном = 0;
	Для каждого СтрокаТаблицы Из ТаблицаТекстФичи Цикл
		Ном = Ном + 1;
		Стр = СокрЛП(СтрокаТаблицы.Стр);
		
		Поз = -1;
		КлючевоеСлово = ПолучитьКлючевоеСлово(Стр,Поз);
		//Сообщить("Стр = " + Стр);
		//Сообщить("КлючевоеСлово=" + КлючевоеСлово);
		
		Если КлючевоеСлово = "feature" Тогда
			НайденСценарий = Истина;//все теги фичи должны были быть объявлены выше ключевого слова Функционал и подобного
		КонецЕсли;	 
		
		СоздатьНовыеДанныеСценария = Ложь;
		СтрНрег = НРег(Стр);                     
		Если КлючевоеСлово = "scenario" Тогда
			НайденСценарий = Истина;
			СоздатьНовыеДанныеСценария = Истина;
			ИмяСценария = СокрЛП(Сред(СтрНрег,Поз));
		ИначеЕсли КлючевоеСлово = "scenario_outline" Тогда
			НайденСценарий = Истина;
			СоздатьНовыеДанныеСценария = Истина;
			ИмяСценария = СокрЛП(Сред(СтрНрег,Поз));
		КонецЕсли;	 
		
		Если СоздатьНовыеДанныеСценария Тогда
			
			Если Лев(ИмяСценария,1) = ":" Тогда
				ИмяСценария = Сред(ИмяСценария,2);
			КонецЕсли;	 
			
			ДанныеСценария = Новый Структура;
			ДанныеСценария.Вставить("ИмяСценария",ИмяСценария);
			ДанныеСценария.Вставить("МассивТегов",МассивТеговСценария);//здесь мы добавляем к сценарию теги, объявленные выше
			ДанныеСценария.Вставить("МассивКомментариев",МассивКомментариевСценария);//здесь мы добавляем к сценарию теги, объявленные выше
			ДанныеСценария.Вставить("НомерСтрокиСценария",Ном);
			МассивТеговСценариев.Добавить(ДанныеСценария);
			
			МассивТеговСценария        = Новый Массив;
			МассивКомментариевСценария = Новый Массив;
		КонецЕсли;	 
		
		
		Если Лев(Стр,1) = "@" Тогда //Это символ, обозначающий тег.
			Тег = НРег(Сред(Стр,2));
			Если НайденСценарий Тогда
				МассивТеговСценария.Добавить(Новый Структура("Тег,НомерСтроки",Тег,Ном));
			Иначе
				МассивТеговФичи.Добавить(Новый Структура("Тег,НомерСтроки",Тег,Ном));
			КонецЕсли;	 
			
			МассивТеговВсе.Добавить(Новый Структура("Тег,НомерСтроки",Тег,Ном));
			МассивТеговВсеДляПоиска.Добавить(Тег);
		ИначеЕсли Лев(Стр,1) = "#" Тогда //Это символ, обозначающий тег.
			Комментарий = Сред(Стр,2);
			Если НайденСценарий Тогда
				МассивКомментариевСценария.Добавить(Новый Структура("Комментарий,НомерСтроки",Комментарий,Ном));
			Иначе
				МассивКомментариевФичи.Добавить(Новый Структура("Комментарий,НомерСтроки",Комментарий,Ном));
			КонецЕсли;	 
		ИначеЕсли Лев(Стр,2) = "//" Тогда //Это символ, обозначающий тег.
			Комментарий = Сред(Стр,3);
			Если НайденСценарий Тогда
				МассивКомментариевСценария.Добавить(Новый Структура("Комментарий,НомерСтроки",Комментарий,Ном));
			Иначе
				МассивКомментариевФичи.Добавить(Новый Структура("Комментарий,НомерСтроки",Комментарий,Ном));
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;		
КонецПроцедуры

Функция ПолучитьОписаниеШагаПоСтроке(Знач Стр) Экспорт
	ВтораяЧастьСтрокиПозиция = 1;
	ТекущееКлючевоеСлово = ПолучитьКлючевоеСлово(НРег(Стр), ВтораяЧастьСтрокиПозиция);
	ИмяШагаБезКлючевогоСлова = СокрЛП(Сред(Стр, ВтораяЧастьСтрокиПозиция));
	
	
	ЗначенияПараметров = Новый СписокЗначений;
	СтараяСтрокаПараметров = "";
	ДанныеОбработкиПараметров = Новый Структура;
	СтарыйStepDefinition   = ПолучитьStepDefinitionПоСтроке(ИмяШагаБезКлючевогоСлова, ЗначенияПараметров,
	                                           СтараяСтрокаПараметров,Ложь,0,ДанныеОбработкиПараметров);
											   
	НовыйStepDefinition    = ПолучитьНовыйStepDefinition(СтарыйStepDefinition);
	НоваяСтрокаПараметров  = ПолучитьНовуюСтрокуПараметров(СтараяСтрокаПараметров);
	
	
	ОписаниеШага = Новый Структура;
	ОписаниеШага.Вставить("StepDefinition",НовыйStepDefinition);
	ОписаниеШага.Вставить("ЗначенияПараметров",ЗначенияПараметров);
	ОписаниеШага.Вставить("СтрокаПараметров",НоваяСтрокаПараметров);
	ОписаниеШага.Вставить("ДанныеОбработкиПараметров",ДанныеОбработкиПараметров);
	ОписаниеШага.Вставить("КлючевоеСлово",ТекущееКлючевоеСлово);
	ОписаниеШага.Вставить("ТекстПереводаШаг",Стр);
	
	
	
	Возврат ОписаниеШага;
	
КонецФункции	

Функция СледующаяСтрокаСодержитВертикальнуюЧерту(ТаблицаТекстФичи,Знач СчетчикСтрокФичи)
	Пока Истина Цикл
		СчетчикСтрокФичи = СчетчикСтрокФичи + 1;
		Если СчетчикСтрокФичи > (ТаблицаТекстФичи.Количество()) Тогда
			Возврат Ложь;
		КонецЕсли;	 
		
		Стр = СокрЛП(ТаблицаТекстФичи[СчетчикСтрокФичи-1].Стр);
		Если Стр = "" Тогда
			Продолжить;
		ИначеЕсли Лев(Стр,1) = "#" Тогда
			Продолжить;
		ИначеЕсли Лев(Стр,2) = "//" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Лев(Стр,1) = "|" Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;	 
		
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции	

Функция ОпределитьКакойСтрокеПодчиненаОбласть(ТаблицаТекстФичи,НомСтр,ЗначениеОтступа)
	Ид = НомСтр;
	
	Результат = -1;
	
	Пока Истина Цикл
		Ид = Ид - 1;
		
		Если Ид < 0 Тогда
			Прервать;
		КонецЕсли;
		
		СтрТаблицаТекстФичи = ТаблицаТекстФичи[Ид];
		
		Если СтрТаблицаТекстФичи.ЗначениеОтступа < ЗначениеОтступа Тогда
			Возврат (Ид+1);
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции	

Функция ПроверитьЧтоМожноСоздатьОбласть(ТаблицаТекстФичи,СчетчикСтрокФичи)
	СледуюущееКлючевоеСлово = Неопределено;
	
	Ид = СчетчикСтрокФичи-1;
	Пока Истина Цикл
		Ид = Ид + 1;
		Если Ид > (ТаблицаТекстФичи.Количество()-1) Тогда
			Прервать;
		КонецЕсли;	 
		
		СтрТаблицаТекстФичи = ТаблицаТекстФичи[Ид];
		Если Не ЗначениеЗаполнено(СтрТаблицаТекстФичи.КлючевоеСлово) Тогда
			Продолжить;
		КонецЕсли;	 
		
		СледуюущееКлючевоеСлово = СтрТаблицаТекстФичи.КлючевоеСлово;
		Прервать;
		
	КонецЦикла;	
	
	Если СледуюущееКлючевоеСлово = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли СледуюущееКлючевоеСлово = "scenario" Тогда
		Возврат Ложь;
	ИначеЕсли СледуюущееКлючевоеСлово = "scenario_outline" Тогда
		Возврат Ложь;
	ИначеЕсли СледуюущееКлючевоеСлово = "examples" Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	 
КонецФункции	

Функция СоздатьТаблицуОбластей()
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("НомерСтрокиВФиче",Новый ОписаниеТипов("Число"));
	Тзн.Колонки.Добавить("СтрокаДерева");
	Тзн.Индексы.Добавить("НомерСтрокиВФиче");
	
	Возврат Тзн;
КонецФункции	

Функция ПроверитьФичуНаКорректностьСинтаксисаИЗагрузитьСценарии(Знач ИмяФайла,ОписаниеОшибки,ДеревоСтроки,ТаблицаИзвестныхStepDefinition,СтруктураПараметров,МассивСценариевЗащитаОтЗацикливанияКеш,ЭтоЗагрузкаПодчиненногоСценария,ПередаваемыеТаблицы,ИмяЗагружаемогоСценария)
	Перем ТэгУказанияЯзыка;
	
	
	СписокТеговИсключение           = ПреобразоватьСписокЗначенийНСтр(СтруктураПараметров.СписокТеговИсключение);
	СписокТеговОтбор                = ПреобразоватьСписокЗначенийНСтр(СтруктураПараметров.СписокТеговОтбор);
	ТаблицаУжеСуществующихСценариев = СтруктураПараметров.ТаблицаУжеСуществующихСценариев;
	
	
	СтруктураПараметров.Вставить("ТаблицаОбластей",СоздатьТаблицуОбластей());
	
	
	ТекущийТипСценария      = Неопределено;
	ПредыдущееКлючевоеСлово = Неопределено;
	ОжидаемоеКлючевоеСлово  = "feature";
	ТекущееКлючевоеСлово    = Неопределено;
	ВтораяЧастьСтроки       = Неопределено;
	ОписаниеФичи            = "";
	ОписаниеСценария        = "";
	СтрокаШага              = "";
	ИдетЧтениеПримеров      = Ложь;
	ИдетПередачаПараметровТаблицей = Ложь;
	
	ТаблицаШагов                           = СоздатьТаблицуШагов();
	ТаблицаСтрокПримеров                   = СоздатьТаблицуСтрокПримеров();
	МассивТаблицПередаваемыхКакПараметр    = Неопределено;
	ТаблицаСтрокПередачаПараметровТаблицей = Неопределено;
	
	
	ТэгУказанияЯзыка 	 = "language:";
	ТекущийЯзыкФичаФайла = "ru";
	
	ИмяФайла = СтрЗаменить(ИмяФайла, "\", "/");
	УниверсальноеИмяФайла = НРег(ИмяФайла);
	ФайлФичи = Новый Файл(ИмяФайла);
	ИмяФичи  = ФайлФичи.ИмяБезРасширения;
	
	
	НадоСохранятьДвоичныеДанные = СтруктураПараметров.Свойство("МассивРезультатОбходаКаталогов");
	ФайлВременнаяФича = ИмяФайла;
	Если НадоСохранятьДвоичныеДанные Тогда
		НашлиЭлементМассивРезультатОбходаКаталогов = Ложь;
		ИД = Неопределено;
		Если СтруктураПараметров.Свойство("УниверсальныеИменаФайлов") Тогда
			ИД = СтруктураПараметров.УниверсальныеИменаФайлов[УниверсальноеИмяФайла];
		КонецЕсли;	 
		Если ИД <> Неопределено Тогда
			Элем = СтруктураПараметров.МассивРезультатОбходаКаталогов[ИД];
			НашлиЭлементМассивРезультатОбходаКаталогов = Истина;
		Иначе	
			МассивРезультатОбходаКаталогов = СтруктураПараметров.МассивРезультатОбходаКаталогов;
			Для каждого Элем Из МассивРезультатОбходаКаталогов Цикл
				Если Не Элем.Свойство("Фича") Тогда
					Продолжить;
				КонецЕсли;
				
				Если Элем.УниверсальноеИмя = УниверсальноеИмяФайла Тогда
					НашлиЭлементМассивРезультатОбходаКаталогов = Истина;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;
		КонецЕсли;	 
		Если НашлиЭлементМассивРезультатОбходаКаталогов Тогда
			Если НЕ СтруктураПараметров.ВозможнаОптимизацияРаботыСФайлами  Тогда
				ФайлВременнаяФича = ПолучитьИмяВременногоФайла("feature");
				Элем.ДвоичныеДанные.Записать(ФайлВременнаяФича);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	НадоСтроитьДерево        = Истина;
	ТаблицаТекстФичи         = ЗагрузитьФичуВТаблицуЗначений(ФайлВременнаяФича,НадоСтроитьДерево,ИмяФайла,ТэгУказанияЯзыка);
	КолСтрокТаблицаТекстФичи = ТаблицаТекстФичи.Количество();
	
	
	МассивТеговФичи            = Новый Массив;
	МассивКомментариевФичи     = Новый Массив;
	МассивТеговСценариев       = Новый Массив;
	МассивКомментариевСценария = Новый Массив;
	МассивТеговВсе             = Новый Массив;
	МассивТеговВсеДляПоиска    = Новый Массив;
	ОпределитьТегиФичи(ТаблицаТекстФичи,МассивТеговФичи,МассивКомментариевФичи,МассивТеговСценариев,МассивТеговВсе,МассивТеговВсеДляПоиска);
	СтруктураПараметров.Вставить("МассивТеговФичи",МассивТеговФичи);
	СтруктураПараметров.Вставить("МассивКомментариевФичи",МассивКомментариевФичи);
	СтруктураПараметров.Вставить("МассивКомментариевСценария",МассивКомментариевСценария);
	СтруктураПараметров.Вставить("МассивТеговСценариев",МассивТеговСценариев);
	СтруктураПараметров.Вставить("МассивТеговВсе",МассивТеговВсе);
	СтруктураПараметров.Вставить("МассивТеговВсеДляПоиска",МассивТеговВсеДляПоиска);
	СтруктураПараметров.Вставить("СписокТеговИсключение",СписокТеговИсключение);
	СтруктураПараметров.Вставить("СписокТеговОтбор",СписокТеговОтбор);
	СтруктураПараметров.Вставить("КоличествоЗагруженныхСценариев",0);
	
	Если СтруктураПараметров.ИдетЗагрузкаИзКаталога Тогда
		//ищем теги фильтр - начало
		НашлиТегИзФичиВСпискеТеговФильтр = Ложь;
		
		Для каждого СтрокаТаблицы Из ТаблицаТекстФичи Цикл
		    Стр = СтрокаТаблицы.Стр;
			
			Если Лев(Стр,1) = "@" Тогда //Это символ, обозначающий тег.
				Тег = СокрЛП(Сред(Стр,2));
				Если СтруктураПараметров.ИдетЗагрузкаИзКаталога Тогда //если явно указали одну фичу, то теги не должны мешать загрузке
					Если МассивТеговВсеДляПоиска.Найти(НРег(Тег)) <> Неопределено Тогда //значит эту фичу надо оставить
						НашлиТегИзФичиВСпискеТеговФильтр = Истина;
					КонецЕсли;
				КонецЕсли;	 
				
				Продолжить;
			КонецЕсли;	 
			
		КонецЦикла;	
		
		Если СписокТеговОтбор.Количество() > 0 Тогда
			Если Не НашлиТегИзФичиВСпискеТеговФильтр Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не стал загружать фичу: %1, т.к. в ней не найдено тегов фильтров.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайла);
				Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
				СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева",Истина);
				Возврат Истина;
			КонецЕсли;	 
		КонецЕсли;	 
		
		//ищем теги фильтр - окончание
	КонецЕсли;	 
	
	//проверим всю фичу на то, что её надо исключить по тегу исключение
	Если СписокТеговОтбор.Количество() = 0 Тогда //если нет отборов, иначе надо смотреть на каждый сценарий отдельно
		Если СтруктураПараметров.ИдетЗагрузкаИзКаталога Тогда //если явно указали одну фичу, то теги не должны мешать загрузке
			Для Каждого СвойстваТега Из МассивТеговФичи Цикл
				Тег = СвойстваТега.Тег;
				Зн = СписокТеговИсключение.НайтиПоЗначению(НРег(Тег));
				Если Зн <> Неопределено Тогда //значит эту фичу надо проигнорировать
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не стал загружать фичу: %1, т.к. обнаружен тег исключение: %2");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайла);
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",Тег);
					Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
					СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева",Истина);
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	
	
	НачалсяСценарий           = Ложь;
	НомСтр                    = 0;
	НомерСтрокиНачалоСценария = 0;
	ИмяОбласти                = "";
	МассивТеговШага           = Новый Массив;
	МассивКомментариевШага    = Новый Массив;
	
	Для СчетчикСтрокФичи = 1 По КолСтрокТаблицаТекстФичи Цикл
		СтрокаТаблицаТекстФичи = ТаблицаТекстФичи[СчетчикСтрокФичи-1];
		СтрИсходная = СтрокаТаблицаТекстФичи.Стр;
		
		НомСтр = СтрокаТаблицаТекстФичи.НомСтр;
		
		Стр = СокрЛП(СтрИсходная);
		
		Если ПустаяСтрока(Стр) Тогда
			ТаблицаСтрокПередачаПараметровТаблицей = Неопределено;
			Продолжить;
		КонецЕсли;	 
		
		Если Лев(Стр,1) = "#" Тогда //Это комментарий. Его игнорируем.
			МассивКомментариевШага.Добавить(СокрЛП(Стр));
			Продолжить;
		ИначеЕсли Лев(Стр,2) = "//" Тогда //Это комментарий. Его игнорируем.
			МассивКомментариевШага.Добавить(СокрЛП(Стр));
			Продолжить;
		КонецЕсли;	 
		
		Если Лев(Стр,1) = "@" Тогда //Это символ, обозначающий тег.
			Тег = СокрЛП(Сред(Стр,2));
			МассивТеговШага.Добавить(Тег);
			Продолжить;
		КонецЕсли;	 
		
		
		Если Лев(Стр,1) = "|" Тогда
			Если (Не ИдетЧтениеПримеров) и (Не ИдетПередачаПараметровТаблицей) Тогда //значит ошибка в синтаксисе
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Строка №%1, обнаружен символ <|>, хотя не было ключевого слова <Примеры>.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",НомСтр);
				ОписаниеОшибки = ТекстСообщения;
				СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева",Истина);
				Возврат Ложь;
			КонецЕсли;	 
			
			СтрТаблицаСтрокиСРазделителями = Новый Структура;
			СтрТаблицаСтрокиСРазделителями.Вставить("Стр",Стр);
			СтрТаблицаСтрокиСРазделителями.Вставить("НомерСтрокиВФиче",НомСтр);
			Если ИдетЧтениеПримеров Тогда
				ТаблицаСтрокПримеров.Добавить(СтрТаблицаСтрокиСРазделителями);
			КонецЕсли;	 
			
			Если ИдетПередачаПараметровТаблицей Тогда
				Если ТаблицаСтрокПередачаПараметровТаблицей = Неопределено Тогда
					 ТаблицаСтрокПередачаПараметровТаблицей = СоздатьТаблицуСтрокПримеров();
					 МассивТаблицПередаваемыхКакПараметр.Добавить(ТаблицаСтрокПередачаПараметровТаблицей);
				КонецЕсли;	 
				ТаблицаСтрокПередачаПараметровТаблицей.Добавить(СтрТаблицаСтрокиСРазделителями);
			КонецЕсли;	 
			
			Если НадоСтроитьДерево и НачалсяСценарий Тогда
				СтрТаблицаТекстФичи = ТаблицаТекстФичи[СчетчикСтрокФичи-1];
				Если СтрТаблицаТекстФичи.ЗначениеОтступа > СтрТаблицаТекстФичи.СледующийОступ Тогда
					//значит группа закрывается
					СруктураОбласти = Новый Структура;
					СруктураОбласти.Вставить("ИмяОбласти","");
					СруктураОбласти.Вставить("НачалоОбласти",Ложь);
					СруктураОбласти.Вставить("РазмерОтступа",СтрТаблицаТекстФичи.ЗначениеОтступа - СтрТаблицаТекстФичи.СледующийОступ);
					
					ДопПараметрыШага = Новый Структура;
					ДопПараметрыШага.Вставить("МассивТеговШага",МассивТеговШага);
					ДопПараметрыШага.Вставить("МассивКомментариевШага",МассивКомментариевШага);
					ДобавитьШаг(ТаблицаШагов,СтрокаТаблицаТекстФичи,"","","",НомСтр,Неопределено,ДопПараметрыШага,СруктураОбласти);
					
					МассивТеговШага        = Новый Массив;
					МассивКомментариевШага = Новый Массив;
					
					Продолжить;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Продолжить;
		КонецЕсли;	 
		
		ИдетПередачаПараметровТаблицей         = Ложь;
		ТаблицаСтрокПередачаПараметровТаблицей = Неопределено;
		
		ПромСлово = "";
		ВтораяЧастьСтрокиПозиция = 1;
		МассивСлов = РазложитьСтрокуВМассивПодстрок(Стр," ");
		ТекущееКлючевоеСлово = ПолучитьКлючевоеСлово(НРег(Стр), ВтораяЧастьСтрокиПозиция,МассивСлов[0]);
		ИмяШага = Стр;
		ВтораяЧастьСтроки = СокрЛП(Сред(Стр, ВтораяЧастьСтрокиПозиция));
		Символ = Лев(ВтораяЧастьСтроки, 1);
		Если (Символ=" ") или (Символ=":") или (Символ=",") Тогда
			ВтораяЧастьСтроки = СокрЛП(Сред(ВтораяЧастьСтроки, 2));
		КонецЕсли;
	
		Если ТекущееКлючевоеСлово = "feature" Тогда
			ОписаниеФичи = ВтораяЧастьСтроки;
			Если ДеревоСтроки.Родитель <> Неопределено Тогда
				Если ДеревоСтроки.Родитель.Тип = "Фича" Тогда
					ДеревоСтроки.Родитель.Имя = ОписаниеФичи;
				КонецЕсли;	 
			КонецЕсли;	 
		ИначеЕсли (ТекущееКлючевоеСлово = "scenario") или (ТекущееКлючевоеСлово = "scenario_outline") Тогда
			МассивТеговШага           = Новый Массив;
			МассивКомментариевШага    = Новый Массив;
			
			НачалсяСценарий = Истина;
			Если (ДеревоСтроки <> Неопределено) Тогда
				ЗакрытьПредыдущийСценарий(ИмяФичи,ИмяФайла,ТекущийТипСценария,ПредыдущееКлючевоеСлово,ТекущееКлючевоеСлово,ДеревоСтроки,ОписаниеСценария,ТаблицаШагов,ТаблицаИзвестныхStepDefinition,ТаблицаСтрокПримеров,НомерСтрокиНачалоСценария,ТаблицаУжеСуществующихСценариев,СтруктураПараметров,МассивСценариевЗащитаОтЗацикливанияКеш,ЭтоЗагрузкаПодчиненногоСценария,ПередаваемыеТаблицы,ИмяЗагружаемогоСценария);
			КонецЕсли;	 
			
			ТаблицаШагов.Очистить();
			ТаблицаСтрокПримеров.Очистить();
			
			НомерСтрокиНачалоСценария = НомСтр;
			ОписаниеСценария = СокрЛП(ВтораяЧастьСтроки);
		ИначеЕсли ТекущееКлючевоеСлово = "background" Тогда
			НомерСтрокиНачалоСценария = НомСтр;
			НачалсяСценарий = Истина;
		ИначеЕсли НадоСтроитьДерево и НачалсяСценарий Тогда
			СтрТаблицаТекстФичи = ТаблицаТекстФичи[СчетчикСтрокФичи-1];
			Если СтрТаблицаТекстФичи.ЗначениеОтступа < СтрТаблицаТекстФичи.СледующийОступ и (СтрТаблицаТекстФичи.НельзяСоздаватьОбласть <> Истина) и (ПроверитьЧтоМожноСоздатьОбласть(ТаблицаТекстФичи,СчетчикСтрокФичи)) Тогда
				//значит группа открывается
				ИмяОбласти      = Стр;
				СруктураОбласти = Новый Структура;
				СруктураОбласти.Вставить("ИмяОбласти",ИмяОбласти);
				СруктураОбласти.Вставить("НачалоОбласти",Истина);
				СруктураОбласти.Вставить("Родитель",ОпределитьКакойСтрокеПодчиненаОбласть(ТаблицаТекстФичи,НомСтр-1,СтрТаблицаТекстФичи.ЗначениеОтступа));
				
				ИдетПередачаПараметровТаблицей = СледующаяСтрокаСодержитВертикальнуюЧерту(ТаблицаТекстФичи,СчетчикСтрокФичи);
				МассивТаблицПередаваемыхКакПараметр = Новый Массив;
				
				ДопПараметрыШага = Новый Структура;
				ДопПараметрыШага.Вставить("МассивТеговШага",МассивТеговШага);
				ДопПараметрыШага.Вставить("МассивКомментариевШага",МассивКомментариевШага);
				ДобавитьШаг(ТаблицаШагов,СтрокаТаблицаТекстФичи,ТекущееКлючевоеСлово,ВтораяЧастьСтроки,"",НомСтр,МассивТаблицПередаваемыхКакПараметр,ДопПараметрыШага,СруктураОбласти);
				
				МассивТеговШага        = Новый Массив;
				МассивКомментариевШага = Новый Массив;
				
				Продолжить;
			КонецЕсли;	 
		Иначе
			СтрокаШага = ВтораяЧастьСтроки;
		КонецЕсли;	 
		
		Если ТекущееКлючевоеСлово = "" Тогда
			Если ПредыдущееКлючевоеСлово = "feature" Тогда
				//значит тут идёт описание фичи
				ОписаниеФичи = ОписаниеФичи + Символы.ПС + Стр;
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если Не ТекущееКлючевоеСловоСоответствуетОжидаемому(ТекущееКлючевоеСлово, ОжидаемоеКлючевоеСлово) Тогда
			Если ПредыдущееКлючевоеСлово = "feature" Тогда
				//значит тут идёт описание фичи
				Продолжить;
			КонецЕсли;	 
			Если (ПредыдущееКлючевоеСлово = "scenario") или (ПредыдущееКлючевоеСлово = "scenario_outline") Тогда
				//значит тут идёт описание фичи
				Продолжить;
			КонецЕсли;
			СтрОшибки = ТекущееКлючевоеСлово;
			Если ТекущееКлючевоеСлово = "" Тогда
				СтрОшибки = ПромСлово;
				Если ПромСлово = "" Тогда
					СтрОшибки = Стр;
				КонецЕсли;	 
			КонецЕсли;	 
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Строка №%1, ожидалось (%2), а найдено (%3) ПредыдущееКлючевоеСлово=%4");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",НомСтр);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОжидаемоеКлючевоеСлово);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",СтрОшибки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%4",ПредыдущееКлючевоеСлово);
			ОписаниеОшибки = ТекстСообщения;
			//тут не надо ставить признак удаления фичи из дерева, чтобы можно было увидеть в дереве проблему
			//СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева",Истина);
			Возврат Ложь;
		КонецЕсли;	 
		
		
		Если (ТекущееКлючевоеСлово = "given") или (ТекущееКлючевоеСлово = "when") или (ТекущееКлючевоеСлово = "then") или (ТекущееКлючевоеСлово = "and") или (ТекущееКлючевоеСлово = "but") 
			 или (ТекущееКлючевоеСлово = "if")или (ТекущееКлючевоеСлово = "elseif") или (ТекущееКлючевоеСлово = "else") Тогда
			МассивТаблицПередаваемыхКакПараметр = Новый Массив;
			
			ДопПараметрыШага = Новый Структура;
			ДопПараметрыШага.Вставить("МассивТеговШага",МассивТеговШага);
			ДопПараметрыШага.Вставить("МассивКомментариевШага",МассивКомментариевШага);
			ДобавитьШаг(ТаблицаШагов,СтрокаТаблицаТекстФичи,ТекущееКлючевоеСлово,ВтораяЧастьСтроки,ИмяШага,НомСтр,МассивТаблицПередаваемыхКакПараметр,ДопПараметрыШага);
			
			МассивТеговШага        = Новый Массив;
			МассивКомментариевШага = Новый Массив;
			
			ИдетПередачаПараметровТаблицей = СледующаяСтрокаСодержитВертикальнуюЧерту(ТаблицаТекстФичи,СчетчикСтрокФичи);
		КонецЕсли;	 
		
		ПредыдущееКлючевоеСлово = ТекущееКлючевоеСлово;
		ОжидаемоеКлючевоеСлово  = ПолучитьСледующееОжидаемоеКлючевоеСлово(ТекущееКлючевоеСлово,ТекущийТипСценария,ИдетЧтениеПримеров);
		
		Если НадоСтроитьДерево и НачалсяСценарий и (ТекущееКлючевоеСлово <> "scenario") и (ТекущееКлючевоеСлово <> "scenario_outline") Тогда

			СтрТаблицаТекстФичи = ТаблицаТекстФичи[СчетчикСтрокФичи-1];
			Если СтрТаблицаТекстФичи.ЗначениеОтступа > СтрТаблицаТекстФичи.СледующийОступ Тогда
				//значит группа закрывается
				СруктураОбласти = Новый Структура;
				СруктураОбласти.Вставить("ИмяОбласти","");
				СруктураОбласти.Вставить("НачалоОбласти",Ложь);
				СруктураОбласти.Вставить("РазмерОтступа",СтрТаблицаТекстФичи.ЗначениеОтступа - СтрТаблицаТекстФичи.СледующийОступ);
				
				ДопПараметрыШага = Новый Структура;
				ДопПараметрыШага.Вставить("МассивТеговШага",МассивТеговШага);
				ДопПараметрыШага.Вставить("МассивКомментариевШага",МассивКомментариевШага);
				ДобавитьШаг(ТаблицаШагов,СтрокаТаблицаТекстФичи,"","","","",Неопределено,ДопПараметрыШага,СруктураОбласти);
				
				МассивТеговШага        = Новый Массив;
				МассивКомментариевШага = Новый Массив;
				
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		
	КонецЦикла;	
	
	
	Если ТаблицаШагов.Количество() > 0 Тогда
		ЗакрытьПредыдущийСценарий(ИмяФичи,ИмяФайла,ТекущийТипСценария,ПредыдущееКлючевоеСлово,"scenario",ДеревоСтроки,ОписаниеСценария,ТаблицаШагов,ТаблицаИзвестныхStepDefinition,ТаблицаСтрокПримеров,НомерСтрокиНачалоСценария,ТаблицаУжеСуществующихСценариев,СтруктураПараметров,МассивСценариевЗащитаОтЗацикливанияКеш,ЭтоЗагрузкаПодчиненногоСценария,ПередаваемыеТаблицы,ИмяЗагружаемогоСценария);
	КонецЕсли;	 
	
	Если СтруктураПараметров.КоличествоЗагруженныхСценариев = 0 Тогда
		СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева",Истина);
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Истина;
	
КонецФункции

Функция БылиПовторыИменСнипетов(ТаблицаУжеСуществующихСценариев,ТаблицаИзвестныхStepDefinition)
	КопияТаблицаУжеСуществующихСценариев = ТаблицаУжеСуществующихСценариев.Скопировать();
	КопияТаблицаУжеСуществующихСценариев.Колонки.Добавить("СтрокаДляПоиска");
	
	Для Каждого СтрКопияТаблицаУжеСуществующихСценариев Из КопияТаблицаУжеСуществующихСценариев Цикл
		СтрКопияТаблицаУжеСуществующихСценариев.СтрокаДляПоиска = НРег(СтрКопияТаблицаУжеСуществующихСценариев.ИмяСценария);
	КонецЦикла;	
	
	Для каждого СтрТаблицаИзвестныхStepDefinition Из ТаблицаИзвестныхStepDefinition Цикл
		СтрКопияТаблицаУжеСуществующихСценариев                 = КопияТаблицаУжеСуществующихСценариев.Добавить();
		СтрКопияТаблицаУжеСуществующихСценариев.СтрокаДляПоиска = СтрТаблицаИзвестныхStepDefinition.СтрокаДляПоиска;
		СтрКопияТаблицаУжеСуществующихСценариев.ИмяФайла        = СтрТаблицаИзвестныхStepDefinition.ИмяФайла;
		
		//Сообщить("ИмяСценария2=" + СтрКопияТаблицаУжеСуществующихСценариев.ИмяСценария);
	КонецЦикла;
	
	БылоСтрок = КопияТаблицаУжеСуществующихСценариев.Количество();
	КопияТаблицаУжеСуществующихСценариев.Колонки.Добавить("Кол");
	Для каждого СтрКопияТаблицаУжеСуществующихСценариев Из КопияТаблицаУжеСуществующихСценариев Цикл
		СтрКопияТаблицаУжеСуществующихСценариев.Кол = 1;
	КонецЦикла;
	
	ТаблицаУжеСуществующихСценариевСлужебная = КопияТаблицаУжеСуществующихСценариев.Скопировать();
	КопияТаблицаУжеСуществующихСценариев.Свернуть("СтрокаДляПоиска","Кол");
	
	СталоСтрок = КопияТаблицаУжеСуществующихСценариев.Количество();
	
	Если БылоСтрок <> СталоСтрок Тогда
		Для каждого СтрКопияТаблицаУжеСуществующихСценариев Из КопияТаблицаУжеСуществующихСценариев Цикл
			Если СтрКопияТаблицаУжеСуществующихСценариев.Кол <> 1 Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Снипет <%1> встречается %2 раз.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрКопияТаблицаУжеСуществующихСценариев.СтрокаДляПоиска);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",СтрКопияТаблицаУжеСуществующихСценариев.Кол);
				Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
				
				Если СокрЛП(СтрКопияТаблицаУжеСуществующихСценариев.СтрокаДляПоиска) <> "" Тогда
					Отбор = Новый Структура;
					Отбор.Вставить("СтрокаДляПоиска",НРег(СтрКопияТаблицаУжеСуществующихСценариев.СтрокаДляПоиска));
					МассивСтрокСценариев = ТаблицаУжеСуществующихСценариевСлужебная.НайтиСтроки(Отбор);
					Для каждого СтрокаСценария Из МассивСтрокСценариев Цикл
						Сообщить(СтрокаСценария.ИмяФайла);
					КонецЦикла;
				КонецЕсли;	 
				
				
				
				//Отбор = Новый Структура;
				//Отбор.Вставить("СтрокаДляПоиска",СтрКопияТаблицаУжеСуществующихСценариев.СтрокаДляПоиска);
				//МассивСтрокStepDefinition = ТаблицаИзвестныхStepDefinition.НайтиСтроки(Отбор);
				//Для каждого СтрокаСценария Из МассивСтрокStepDefinition Цикл
				//	Сообщить("2. " + СтрокаСценария.ИмяФайла);
				//КонецЦикла;
				
				//Сообщить(" ");
				
				
			КонецЕсли;	 
		КонецЦикла;
		Возврат Истина;
	КонецЕсли;	 
	
	
	
	Возврат Ложь;
КонецФункции	

Функция ЗагрузитьФичу(ИмяФайла,ДеревоСтроки,СтруктураПараметров) Экспорт
	ТаблицаИзвестныхStepDefinition = СтруктураПараметров.ТаблицаИзвестныхStepDefinition;
	
	//ЗаписьЖурналаРегистрации("ЗагрузитьФичу 1");
	Если СтруктураПараметров.Свойство("ТекстСообщенийПользователю") Тогда
		ТекстСообщенийПользователю = СтруктураПараметров.ТекстСообщенийПользователю;
	КонецЕсли;	
	
	Если НЕ СтруктураПараметров.Свойство("КешФич") Тогда
		КешФич = Новый ТаблицаЗначений;
		КешФич.Колонки.Добавить("ИмяФайла");
		КешФич.Колонки.Добавить("Дерево");
		
		СтруктураПараметров.Вставить("КешФич",КешФич);
	КонецЕсли;	 
	
	//ЗаписьЖурналаРегистрации("ЗагрузитьФичу 2");
	
	
	ДобавитьКолонкуСнипетаВТаблицаУжеСуществующихСценариев(СтруктураПараметров.ТаблицаУжеСуществующихСценариев,СтруктураПараметров);
	
	
	Если НЕ СтруктураПараметров.Свойство("БылаПроверкаНаПовторыСнипетов") Тогда
		Если БылиПовторыИменСнипетов(СтруктураПараметров.ТаблицаУжеСуществующихСценариев,ТаблицаИзвестныхStepDefinition) Тогда
			//ВызватьИсключение ПолучитьТекстСообщенияПользователю("Были конфликты в именах снипетов.");
			Сообщить(ПолучитьТекстСообщенияПользователю("Были конфликты в именах снипетов."));
		КонецЕсли;
		СтруктураПараметров.Вставить("БылаПроверкаНаПовторыСнипетов",Истина);
	КонецЕсли;	
	
	
	ОписаниеОшибки = "";
	ПередаваемыеТаблицы = Неопределено;
	БылаЗаменаТаблицыПараметровВСтруктуреСценария = Ложь;
	Если Не ПроверитьФичуНаКорректностьСинтаксисаИЗагрузитьСценарии(ИмяФайла,ОписаниеОшибки,ДеревоСтроки,ТаблицаИзвестныхStepDefinition,СтруктураПараметров,Неопределено,Ложь,ПередаваемыеТаблицы,Неопределено) Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог загрузить %1. %2");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайла);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ОписаниеОшибки);
		Сообщить(ПолучитьТекстСообщенияПользователю(ТекстСообщения));
		СтруктураПараметров.Вставить("ФичаЗагружена",Ложь);
		СтруктураПараметров.Вставить("ОписаниеОшибки",ОписаниеОшибки);
		Возврат Неопределено;
	КонецЕсли;	 
	
	СтруктураПараметров.Вставить("ФичаЗагружена",Истина);
	
КонецФункции

Функция ОбходКаталогов (ПутьКаталога,врДерево,ТаблицаИзвестныхStepDefinition,СтруктураПараметров)
	ФайлПутьКаталога = Новый Файл(ПутьКаталога);
	Если ФайлПутьКаталога.ЭтоКаталог() Тогда
		НайденныеФайлы = НайтиФайлы(ПутьКаталога,"*");
	Иначе
		НайденныеФайлы = Новый Массив;//вернём одну фичу
		НайденныеФайлы.Добавить(ФайлПутьКаталога);
	КонецЕсли;	 
	Для каждого ф из НайденныеФайлы цикл
		Если ф.ЭтоКаталог() тогда
			НовСтр = врДерево.Строки.Добавить();
			НовСтр.Тип        = "Каталог";
			НовСтр.ПолныйПуть = ф.ПолноеИмя;
			НовСтр.Имя        = ф.Имя;
			ОбходКаталогов(ПутьКаталога+"/"+ф.Имя,НовСтр,ТаблицаИзвестныхStepDefinition,СтруктураПараметров);
			
			Если НовСтр.Строки.Количество() = 0 Тогда
				врДерево.Строки.Удалить(НовСтр);
			КонецЕсли;
		ИначеЕсли НРег(ф.Расширение) = ".feature" Тогда
			НовСтр            = врДерево.Строки.Добавить();
			НовСтр.Тип        = "Фича";
			
			НовСтр.ПолныйПуть = ф.ПолноеИмя;
			НовСтр.Имя        = ф.ИмяБезРасширения;
			
			СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева",Ложь);
			
			ЗагрузитьФичу(ф.ПолноеИмя,НовСтр.Строки,СтруктураПараметров);
			
			Если СтруктураПараметров.УдалитьСтрокуФичиИзДерева Тогда
				врДерево.Строки.Удалить(НовСтр);
			КонецЕсли;	 
		КонецЕсли;
	КонецЦикла;
КонецФункции

Процедура ЗаполнитьДерево(ДеревоЗначений,Каталог,ТаблицаИзвестныхStepDefinition,СтруктураПараметров)
	Файл = Новый Файл(Каталог);
	
	НовСтр            = ДеревоЗначений.Строки.Добавить();
	НовСтр.Тип        = "Каталог";
	НовСтр.Имя        = Файл.Имя;
	НовСтр.ПолныйПуть = Каталог;
	ОбходКаталогов(Каталог,НовСтр,ТаблицаИзвестныхStepDefinition,СтруктураПараметров);    
КонецПроцедуры

Процедура ОбработатьКаталогФич(ДеревоЗначений,ПутьКФичам,ТаблицаИзвестныхStepDefinition,СтруктураПараметров)
	//Заполним дерево файлами фич с учетом иерархии
	ЗаполнитьДерево(ДеревоЗначений,ПутьКФичам,ТаблицаИзвестныхStepDefinition,СтруктураПараметров);
КонецПроцедуры

Функция СоздатьДеревоЗначений()
	ДеревоЗначений = Новый ДеревоЗначений;
	ДеревоЗначений.Колонки.Добавить("Имя");
	ДеревоЗначений.Колонки.Добавить("ПолныйПуть");
	//ДеревоЗначений.Колонки.Добавить("Каталог");
	//ДеревоЗначений.Колонки.Добавить("Фича");
	//ДеревоЗначений.Колонки.Добавить("Сценарий");
	//ДеревоЗначений.Колонки.Добавить("ЭтоScenarioOutline");
	//ДеревоЗначений.Колонки.Добавить("ЭтоКонтекст");
	//ДеревоЗначений.Колонки.Добавить("Примеры");
	ДеревоЗначений.Колонки.Добавить("ИменованныеПараметры");
	//ДеревоЗначений.Колонки.Добавить("Пример");
	//ДеревоЗначений.Колонки.Добавить("Шаг");
	ДеревоЗначений.Колонки.Добавить("ЗначенияПараметров");
	ДеревоЗначений.Колонки.Добавить("Снипет");
	ДеревоЗначений.Колонки.Добавить("АдресСнипета");
	ДеревоЗначений.Колонки.Добавить("ЭтоЧужойСнипет",Новый ОписаниеТипов("Булево"));
	ДеревоЗначений.Колонки.Добавить("СтрокаРеальнойПроцедуры");
	ДеревоЗначений.Колонки.Добавить("ТипКартинки");
	ДеревоЗначений.Колонки.Добавить("ШагСПараметрамиВТаблице");
	ДеревоЗначений.Колонки.Добавить("СтрокаПараметровШагаВВидеТаблицы",Новый ОписаниеТипов("Булево"));
	ДеревоЗначений.Колонки.Добавить("ПараметрыТаблицы");
	ДеревоЗначений.Колонки.Добавить("ИмяШагаБезКлючевогоСлова");
	//ДеревоЗначений.Колонки.Добавить("ШагСценарий");
	ДеревоЗначений.Колонки.Добавить("МассивСценариевЗащитаОтЗацикливания");
	//ДеревоЗначений.Колонки.Добавить("Область");
	//ДеревоЗначений.Колонки.Добавить("МассивТегов");
	ДеревоЗначений.Колонки.Добавить("НомерСтрокиВФиче");
	ДеревоЗначений.Колонки.Добавить("ЗначениеОтступа",Новый ОписаниеТипов("Число"));
	ДеревоЗначений.Колонки.Добавить("Тип",Новый ОписаниеТипов("Строка"));
	ДеревоЗначений.Колонки.Добавить("ДопТип",Новый ОписаниеТипов("Строка"));
	ДеревоЗначений.Колонки.Добавить("ПроизвольныеЗначения");
	
	Возврат ДеревоЗначений;
КонецФункции	

Функция ПолучитьДеревоФич(СтруктураПараметров) Экспорт
	КаталогИнструментов     = СтруктураПараметров.КаталогИнструментов;
	КаталогФич              = СтруктураПараметров.КаталогФич;
	МассивСообщений         = СтруктураПараметров.МассивСообщений;
	DebugLog                = СтруктураПараметров.DebugLog;
	КонтекстVanessaBehavoir = СтруктураПараметров.КонтекстVanessaBehavoir;
	КаталогиБиблиотек       = СтруктураПараметров.КаталогиБиблиотек;
	СписокТеговИсключение   = СтруктураПараметров.СписокТеговИсключение;
	СписокТеговОтбор        = СтруктураПараметров.СписокТеговОтбор;
	
	
	ПутьКФичам = Новый Файл(КаталогФич);
	Если Не ПутьКФичам.Существует() Тогда
		МассивСообщений.Добавить("Не найден путь " + КаталогФич);
		Возврат Неопределено;
	КонецЕсли;	 
	
	
	
	
	ТаблицаКонтекстовОбработок = Новый Массив;
	
	
	ТаблицаИзвестныхStepDefinition = СтруктураПараметров.ТаблицаИзвестныхStepDefinition;
	ТаблицаВерсийEPF               = СтруктураПараметров.ТаблицаВерсийEPF;
	
	
	Путь = ПутьКФичам.ПолноеИмя;
	СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога",Истина);
	Если ПутьКФичам.ЭтоФайл() Тогда
		СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога",Ложь);
		Путь = ПутьКФичам.Путь;
	КонецЕсли;	 
	
	
	
	ПолучитьУжеСуществующиеСнипетыИзОбработок(Путь,ТаблицаКонтекстовОбработок,ТаблицаИзвестныхStepDefinition,ТаблицаВерсийEPF,КонтекстVanessaBehavoir);
	Для каждого Элем Из КаталогиБиблиотек Цикл
		ПолучитьУжеСуществующиеСнипетыИзОбработок(Элем.Значение,ТаблицаКонтекстовОбработок,ТаблицаИзвестныхStepDefinition,ТаблицаВерсийEPF,КонтекстVanessaBehavoir);
	КонецЦикла;
	
	
	
	
	ДеревоЗначений = СоздатьДеревоЗначений();
	
	
	//Если ПутьКФичам.ЭтоКаталог() Тогда
	ОбработатьКаталогФич(ДеревоЗначений,ПутьКФичам.ПолноеИмя,ТаблицаИзвестныхStepDefinition,СтруктураПараметров);
	//ДеревоЗначений.ВыбратьСтроку();
	//КонецЕсли;	 
	
	
	
	
	
	
	
	Возврат ДеревоЗначений;
КонецФункции

Процедура ДобавитьКлючевоеСловоВТаблицу(Тзн,Слово,Тип,Уникально = Истина)
	
	СтрокаТаблицы           = Тзн.Добавить(); 
	СтрокаТаблицы.Слово     = НРег(Слово);
	СтрокаТаблицы.Тип       = Тип;
	СтрокаТаблицы.Уникально = Уникально;
	
	//СтруктураКлючевогоСлова = Новый Структура;
	//СтруктураКлючевогоСлова.Вставить("Слово",Слово);
	//СтруктураКлючевогоСлова.Вставить("Тип",Тип);
	//
	//Тзн.Добавить(СтруктураКлючевогоСлова);
КонецПроцедуры

Процедура СоздатьEPFПоМассивуФич(СтруктураПараметров) Экспорт
	СделатьСообщение("Запускаю генерацию epf.");
	ГенерироватьУФ      = СтруктураПараметров.ГенерироватьУФ;
	DebugLog            = СтруктураПараметров.DebugLog;
	КаталогИнструментов = СтруктураПараметров.КаталогИнструментов;
	ШагСтрокДляМодуля   = СтруктураПараметров.ШагСтрокДляМодуля;
	СделатьGenerateEpf(СтруктураПараметров);
	
КонецПроцедуры

Функция СоздатьПустуюСтруктуруEpf() Экспорт
	Стр = Новый Структура;
	Стр.Вставить("ИмяФичи","");
	Стр.Вставить("ИмяФайлаEpf","");
	Стр.Вставить("ВременноеИмяМодуля","");
	Стр.Вставить("ТелоМодуля","");//таблица значений
	Стр.Вставить("ИмяМодуляEpf","");
	Стр.Вставить("КаталогИсходников","");
	Стр.Вставить("ФайлEpfПересоздавался",Ложь);
	
	Возврат Стр;
КонецФункции

Процедура ЗаписатьФайлВерсииИсходников(ИмяФайлаВерсииИсходников,ИмяФайлаОригинала)
	Возврат;
	
	
	ФайлВерсии = Новый Файл(ИмяФайлаВерсииИсходников);
	Если ФайлВерсии.Существует() Тогда
		УдалитьФайлы(ФайлВерсии.ПолноеИмя);
	КонецЕсли;	 
	
	Файл   = Новый Файл(ИмяФайлаОригинала);
	Версия = Строка(Файл.ПолучитьВремяИзменения());
	
	ЗТ = Новый ЗаписьТекста(ИмяФайлаВерсииИсходников,"UTF-8",,Истина); 
	ЗТ.ЗаписатьСтроку("Версия="+Версия); 
	
	ЗТ.Закрыть();
КонецПроцедуры

Функция ПолучитьВерсиюИсходников(ИмяФайлаВерсииИсходников)
	ФайлВерсии = Новый Файл(ИмяФайлаВерсииИсходников);
	Если Не ФайлВерсии.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаВерсииИсходников,"UTF-8");
	
	СтрокаВозврата = Неопределено;
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Поз = Найти(Стр,"=");
		Если Поз > 0 Тогда
			СтрокаВозврата = Сред(Стр,Поз+1);
		КонецЕсли;	 
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат СтрокаВозврата;
	
КонецФункции

Функция РаспаковатьEPF(СтруктураОписанияEpf)
    ИмяФайла = СтруктураОписанияEpf.ИмяФайлаEPF;

	Попытка
		
		Файл = Новый Файл(ИмяФайла);
		
        ВременноеИмяФайла = ПолучитьИмяВременногоФайла("epf");
        КопироватьФайл(ИмяФайла,ВременноеИмяФайла);
        
        ВременныйФайл = Новый Файл(ВременноеИмяФайла);
		
		
        ИмяКаталогаДляИсходников = ВременныйФайл.Путь + "Src";
        ИмяФайлаВерсииИсходников = ВременныйФайл.Путь + "Src" + ВременныйФайл.ИмяБезРасширения + "SrcVersion.vb";
		
		Если ГенерироватьУФ Тогда
			ПутьКФайлуМодуля = ИмяКаталогаДляИсходников + "/" + ВременныйФайл.ИмяБезРасширения + "/Form/Форма/Форма.bsl";
		Иначе	
			ПутьКФайлуМодуля = ИмяКаталогаДляИсходников + "/" + ВременныйФайл.ИмяБезРасширения + "/ObjectModule.bsl";
		КонецЕсли;	 
		
		УдалитьФайлы(ИмяКаталогаДляИсходников + "/" + ВременныйФайл.ИмяБезРасширения);
		ФайлКаталогSrc = Новый Файл(ИмяКаталогаДляИсходников);
		Если Не ФайлКаталогSrc.Существует() Тогда
			СоздатьКаталог(ИмяКаталогаДляИсходников);
		КонецЕсли;	 
		
		СтрокаЗапуска = "oscript";
		СтрокаРазборкиEpf = СтрокаЗапуска + " " + КаталогИнструментов + "/vendor/precommit1c/v8files-extractor.os  --decompile """ +  ВременноеИмяФайла + """ """ + ИмяКаталогаДляИсходников + """";
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Делаю распаковку %1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Файл.ПолноеИмя);
		СделатьСообщение(ТекстСообщения);
		Отладка("Строка распаковки: " + СтрокаРазборкиEpf);
		
		#Если Клиент Тогда
		КомандаСистемы(СтрокаРазборкиEpf,КаталогИнструментов);
		#КонецЕсли
		
		Файл = Новый Файл(ПутьКФайлуМодуля);
		Если Не Файл.Существует() Тогда
			ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не найден файл после распаковки: %1");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПутьКФайлуМодуля);
			СделатьСообщение(ТекстСообщения);
			Если ЭтоУФ Тогда
				СделатьСообщение("Возможно это обработка для обычных форм, а не для управляемых форм.");
			Иначе	
				СделатьСообщение("Возможно это обработка для управляемых форм, а не для обычных форм.");
			КонецЕсли;	 
			Возврат Неопределено;
		КонецЕсли;	 
		
        СтруктураОписанияEpf.КаталогИсходников = ИмяКаталогаДляИсходников + "/" + ВременныйФайл.ИмяБезРасширения;
		ЗаписатьФайлВерсииИсходников(ИмяФайлаВерсииИсходников,ИмяФайла);
		
		Возврат ПутьКФайлуМодуля;
	Исключение
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог распаковать %1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайла);
		СделатьСообщение(ТекстСообщения);
		СделатьСообщение(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

Функция ЗагрузитьТелоМодуляВТаблицуЗначений(ПутьКФайлу)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("НомСтр");
	Тзн.Колонки.Добавить("Стр");
	
	НомСтр = 0;
	
	
	ПромФайл = Новый Файл(ПутьКФайлу);
	Если Не ПромФайл.Существует() Тогда
		СтрОшибки = "Файл """ + ПутьКФайлу + """ не существует.";
		Сообщить(СтрОшибки);
		ВызватьИсключение СтрОшибки;
	КонецЕсли; 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу,"UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		НомСтр = НомСтр + ШагСтрокДляМодуля;
		
		СтрТзн        = Тзн.Добавить();
		СтрТзн.НомСтр = НомСтр;
		СтрТзн.Стр    = Стр;
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат Тзн;
КонецФункции

Функция СоздатьСтруктураОписанияEpf(ОтносительныйКаталогФичи,ИмяТекущейФичи,GenerateEpf,СоздаватьОбластиПриГенерацииКода)
	СтруктураОписанияEpf                    = СоздатьПустуюСтруктуруEpf();
	СтруктураОписанияEpf.ИмяФичи            = ИмяТекущейФичи;
	СтруктураОписанияEpf.ИмяФайлаEpf        = ОтносительныйКаталогФичи + "/step_definitions/" + ИмяТекущейФичи + ".epf";
	
	Если GenerateEpf Тогда
		ФайлEpf = Новый Файл(СтруктураОписанияEpf.ИмяФайлаEpf);
		Если ФайлEpf.Существует() Тогда //т.е. если мы не первый раз работаем с данной фичей
			СтруктураОписанияEpf.ИмяМодуляEpf          = РаспаковатьEPF(СтруктураОписанияEpf);
			СтруктураОписанияEpf.ФайлEpfПересоздавался = Истина;
		КонецЕсли;	 
	КонецЕсли;
	
	Если Не СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
		СтруктураОписанияEpf.КаталогИсходников = КаталогИнструментов + "/lib/TemplateEpf";
		Если ГенерироватьУФ Тогда
			СтруктураОписанияEpf.КаталогИсходников = КаталогИнструментов + "/lib/TemplateEpfUF";
		КонецЕсли;
	КонецЕсли;
	
	//если уже были исходники, то надо использовать их
	СтруктураОписанияEpf.ВременноеИмяМодуля = СтруктураОписанияEpf.КаталогИсходников + "/ObjectModule_" + ИмяТекущейФичи + ".bsl";
	Если ГенерироватьУФ Тогда
		СтруктураОписанияEpf.ВременноеИмяМодуля = СтруктураОписанияEpf.КаталогИсходников + "/und/70e297e0-e8a2-43bf-8be1-62e408f610a1.0_" + ИмяТекущейФичи + ".bsl";
	КонецЕсли;	 
	
	УдалитьФайлы(СтруктураОписанияEpf.ВременноеИмяМодуля);
	
	Файл = Новый Файл(СтруктураОписанияEpf.ВременноеИмяМодуля);
	Если Не Файл.Существует() Тогда
		ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля,"UTF-8",,Истина); 
		ЗТ.Закрыть();
	КонецЕсли;
	
	
	Файл = Новый Файл(СтруктураОписанияEpf.ИмяМодуляEpf); //значит надо загрузить модуль из исходников
	Если Файл.Существует() Тогда
		СтруктураОписанияEpf.ТелоМодуля = ЗагрузитьТелоМодуляВТаблицуЗначений(СтруктураОписанияEpf.ИмяМодуляEpf);
	Иначе
		СтруктураОписанияEpf.ТелоМодуля = ЗагрузитьТелоМодуляВТаблицуЗначений(СтруктураОписанияEpf.ВременноеИмяМодуля);
		//значит создаём файл первый разделим
		ДобавитьНачальноеЗаполнениеВМодуль(СтруктураОписанияEpf.ТелоМодуля,ШагСтрокДляМодуля,ГенерироватьУФ,,СоздаватьОбластиПриГенерацииКода);
	КонецЕсли;
	
	Возврат СтруктураОписанияEpf;
КонецФункции

Процедура ДобавитьНачальноеЗаполнениеВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ГенерироватьУФ,ЭтоУФ = Ложь,СоздаватьОбластиПриГенерацииКода) Экспорт
	
	Если ЭтоУФ Тогда
		ТелоМодуля = ЗначениеИзСтрокиВнутр(ТелоМодуля);
	КонецЕсли;	 
	
	//ДобавитьСтрокуВМодуль(ТелоМодуля,"Перем Контекст Экспорт;");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	Если СоздаватьОбластиПриГенерацииКода Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"#Область Служебные_функции_и_процедуры");
	Иначе	
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"///////////////////////////////////////////////////");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"//Служебные функции и процедуры");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"///////////////////////////////////////////////////");
	КонецЕсли;	 
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	
	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"&НаКлиенте");
	КонецЕсли;	 
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"// контекст фреймворка Vanessa-Behavior");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Перем Ванесса;");
	
	
	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля," ");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"&НаКлиенте");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Перем Контекст Экспорт;");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля," ");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"&НаКлиенте");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Перем КонтекстСохраняемый Экспорт;");
	КонецЕсли;	 
		
	
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"&НаКлиенте");
	КонецЕсли;	 
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	Ванесса = КонтекстФреймворкаBDD;");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	ВсеТесты = Новый Массив;");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	Возврат ВсеТесты;");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"КонецФункции");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	");
	
	
	
	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"&НаСервере");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"// Служебная функция.");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Функция ПолучитьМакетСервер(ИмяМакета)");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"КонецФункции");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"&НаКлиенте");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"// Служебная функция для подключения библиотеки создания fixtures.");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	Возврат ПолучитьМакетСервер(ИмяМакета);");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"КонецФункции");
	Иначе	
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"// Служебная функция для подключения библиотеки создания fixtures.");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	Возврат ПолучитьМакет(ИмяМакета);");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"КонецФункции");
	КонецЕсли;	 
	
	
	
	Если СоздаватьОбластиПриГенерацииКода Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"#КонецОбласти");
	КонецЕсли;	 
	
	
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	Если СоздаватьОбластиПриГенерацииКода Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"#Область Работа_со_сценариями");
	Иначе	
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"///////////////////////////////////////////////////");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"//Работа со сценариями");
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"///////////////////////////////////////////////////");
	КонецЕсли;	 
	
	
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"&НаКлиенте");
	КонецЕсли;	 
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"// Процедура выполняется перед началом каждого сценария");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Процедура ПередНачаломСценария() Экспорт");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"КонецПроцедуры");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	
	
	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"&НаКлиенте");
	КонецЕсли;	 
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"// Процедура выполняется перед окончанием каждого сценария");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Процедура ПередОкончаниемСценария() Экспорт");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"КонецПроцедуры");
	
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	
	Если СоздаватьОбластиПриГенерацииКода Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"#КонецОбласти");
	КонецЕсли;	 
	
	
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	
	
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"///////////////////////////////////////////////////");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"//Реализация шагов");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"///////////////////////////////////////////////////");
	
	Если ЭтоУФ Тогда
		ТелоМодуля = ЗначениеВСтрокуВнутр(ТелоМодуля);
	КонецЕсли;	 
КонецПроцедуры

Функция ПолучитьМаксНомерИзТелаМодуля(ТелоМодуля)
	Если ТелоМодуля.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат ТелоМодуля[ТелоМодуля.Количество()-1].НомСтр;
КонецФункции

Процедура ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,Стр,НомерСрокиМодуля = Неопределено)
	НомСтр = ПолучитьМаксНомерИзТелаМодуля(ТелоМодуля);
	
	
	СтрТелоМодуля = ТелоМодуля.Добавить();
	Если НомерСрокиМодуля = Неопределено Тогда
		СтрТелоМодуля.НомСтр = НомСтр + ШагСтрокДляМодуля;
	Иначе
		СтрТелоМодуля.НомСтр = НомерСрокиМодуля;
	КонецЕсли;	 
	СтрТелоМодуля.Стр    = Стр;
	
	
	//Сообщить("ТелоМодуля.Количество()=" + ТелоМодуля.Количество());
КонецПроцедуры

Функция ПолучитьТелоМодуляВМассивСервер(Стр)
КонецФункции

Функция УбратьСпецсимволыИзИмениОбработи(Знач Стр)
	Стр = СтрЗаменить(Стр," ","_");
	Стр = СтрЗаменить(Стр,"`","");
	Стр = СтрЗаменить(Стр,"~","");
	Стр = СтрЗаменить(Стр,"'","");
	Стр = СтрЗаменить(Стр,".","");
	Стр = СтрЗаменить(Стр,",","");
	Стр = СтрЗаменить(Стр,":","");
	Стр = СтрЗаменить(Стр,";","");
	Стр = СтрЗаменить(Стр,"-","_");  
	Стр = СтрЗаменить(Стр,"+","");
	Стр = СтрЗаменить(Стр,"/","");
	Стр = СтрЗаменить(Стр,"\","");
	Стр = СтрЗаменить(Стр,"=","");
	Стр = СтрЗаменить(Стр,"!","");
	Стр = СтрЗаменить(Стр,"@","");
	Стр = СтрЗаменить(Стр,"#","");
	Стр = СтрЗаменить(Стр,"$","");
	Стр = СтрЗаменить(Стр,"%","");
	Стр = СтрЗаменить(Стр,"^","");
	Стр = СтрЗаменить(Стр,"&","");
	Стр = СтрЗаменить(Стр,"*","");
	Стр = СтрЗаменить(Стр,"(","");
	Стр = СтрЗаменить(Стр,")","");
	Стр = СтрЗаменить(Стр,"№","");
	Стр = СтрЗаменить(Стр,"?","");
	Стр = СтрЗаменить(Стр,"<","");
	Стр = СтрЗаменить(Стр,">","");
	
	Возврат Стр;
КонецФункции	

Процедура ЗаменитьСтрокиВФайлеОсновыОбработки(ИмяФайлОсноваОбработки,ИмяФичи)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлОсноваОбработки,"UTF-8");
	
	
	ВременноеИмяФайла = ИмяФайлОсноваОбработки + "_Temp";
	ЗТ = Новый ЗаписьТекста(ВременноеИмяФайла,"UTF-8",,Истина); 
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		ИмяОбработки = УбратьСпецсимволыИзИмениОбработи(ИмяФичи);
		Стр = СтрЗаменить(Стр,"TemplateEpf",ИмяОбработки);
		Стр = СтрЗаменить(Стр,"Template epf",ИмяФичи);
		
		ЗТ.ЗаписатьСтроку(Стр); 
	КонецЦикла;
	
	ЗТ.Закрыть();
	Текст.Закрыть();
	Текст = "";
	//Приостановить(500);
	
	
	УдалитьФайлы(ИмяФайлОсноваОбработки);
	ПереместитьФайл(ВременноеИмяФайла,ИмяФайлОсноваОбработки);
	
КонецПроцедуры

Процедура СоздатьКаталогЕслиЕгоНет(Путь)
	Файл = Новый Файл(Путь);
	Если Путь = "" Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Передан пустой путь в процедуру <СоздатьКаталогЕслиЕгоНет>.");
	КонецЕсли;	 
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(Путь);
		Отладка("Создан каталог: " + Путь);
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьИзФайлаМодуляФормыУФТестМодуляФормы(ИмяФайлаФормаУФ)
	Файл = Новый Файл(ИмяФайлаФормаУФ);
	
	Если Не Файл.Существует() Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Файл <%1> не найден.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайлаФормаУФ);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	
	ВременноеИмяФайла = ПолучитьИмяВременногоФайла("txt");
	//Сообщить("ВременноеИмяФайла=" + ВременноеИмяФайла);
	
	ЗТ = Новый ЗаписьТекста(ВременноеИмяФайла,"UTF-8",,Истина); 
	
	
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаФормаУФ,"UTF-8");
	
	
	НачалоМодуля = -1;
	КонецМодуля  = -1;
	
	НашлиМодуль = Ложь;
	
	КолСкобок1  = 0;
	КолСкобок2  = 0;
	НомерСтроки = 0;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		НомерСтроки = НомерСтроки + 1;
		
		КолСкобок1 = КолСкобок1 + СтрЧислоВхождений(Стр,"{");
		КолСкобок2 = КолСкобок2 + СтрЧислоВхождений(Стр,"}");
		
		//Сообщить("Строка №" + НомерСтроки + ", " + КолСкобок1 + ", " + КолСкобок2 + ": " + Стр);
		
		
		Если (НачалоМодуля > 0) И НЕ НашлиМодуль Тогда
			Если Лев(Стр,1) = "{" Тогда
				КонецМодуля = НомерСтроки;
				ЗТ.ЗаписатьСтроку(""","); 
				ЗТ.ЗаписатьСтроку(Стр); 
				НашлиМодуль = Истина;
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если (НомерСтроки > 2) И (НачалоМодуля = -1) И НЕ НашлиМодуль Тогда
			//Если (КолСкобок1 - КолСкобок2) = 1 Тогда //значит сейчас начинается модуль
			Поз = Найти(Стр,"},""");
			Если (Поз > 0) И (Прав(Стр,1) <> ",") Тогда
				НачалоМодуля = НомерСтроки;
				
				НачалоСтроки = Лев(Стр,Поз-1);
				
				ЗТ.ЗаписатьСтроку(НачалоСтроки + "},""//начало текста модуля"); 
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		
		Если (НачалоМодуля > 0) и НЕ НашлиМодуль Тогда
			Продолжить;
		КонецЕсли;	 
		
		ЗТ.ЗаписатьСтроку(Стр); 
		
	КонецЦикла;	
	
	Текст.Закрыть();
	ЗТ.Закрыть();
	
	
	Если Не НашлиМодуль Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Не смог найти код модуля формы в файле ИмяФайлаФормаУФ.");
	КонецЕсли;	 
	
	
	Отладка("Копирю файл " + ВременноеИмяФайла + " в " + ИмяФайлаФормаУФ);
	КопироватьФайл(ВременноеИмяФайла,ИмяФайлаФормаУФ);
	
КонецПроцедуры

Процедура СоздатьФайлыОбработок(БылиОшибки,СтруктураОписанияEpf)
	
	ТелоМодуля = СтруктураОписанияEpf.ТелоМодуля;
	Если ЭтоУФ Тогда
		ТелоМодуля = ПолучитьТелоМодуляВМассивСервер(ТелоМодуля);
	Иначе
		ТелоМодуля.Сортировать("НомСтр");
		ТелоМодуля = ТелоМодуля.ВыгрузитьКолонку("Стр");
	КонецЕсли;	 
	
	
	
	Отладка("Буду записывать " + СтруктураОписанияEpf.ВременноеИмяМодуля);
	
	УдалитьФайлы(СтруктураОписанияEpf.ВременноеИмяМодуля);
	Если ГенерироватьУФ Тогда
		ИмяФайлаФормаУФ = КаталогИнструментов + "/lib/TemplateEpfUF/und/70e297e0-e8a2-43bf-8be1-62e408f610a1.0_template";
		Если СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
			ИмяФайлаФормаУФ = СтруктураОписанияEpf.КаталогИсходников + "/und/70e297e0-e8a2-43bf-8be1-62e408f610a1.0";
			
			УдалитьИзФайлаМодуляФормыУФТестМодуляФормы(ИмяФайлаФормаУФ);
			
			ФайлИмяФайлаФормаУФ = Новый Файл(ИмяФайлаФормаУФ);
			Если Не ФайлИмяФайлаФормаУФ.Существует() Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ошибка перегенерации EPF. Файл %1 не найден.");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайлаФормаУФ);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайлаФормаУФ,"UTF-8");
		
		ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля,"UTF-8",,Истина); 
		
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
			
			ЗТ.ЗаписатьСтроку(Стр); 
			
			Если Найти(Стр,"},""//начало текста модуля") > 0 Тогда
				Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
					Если СтрТелоМодуля = "//начало текста модуля" Тогда
						Продолжить;
					КонецЕсли;	 
					
					СтрТелоМодуля = СтрЗаменить(СтрТелоМодуля,"""","""""");
					ЗТ.ЗаписатьСтроку(СтрТелоМодуля); 
				КонецЦикла;
			КонецЕсли;	 
		КонецЦикла;	
		
		
		Текст.Закрыть();
		ЗТ.Закрыть();
	Иначе	
		ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля,"UTF-8",,Истина); 
		Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
			ЗТ.ЗаписатьСтроку(СтрТелоМодуля); 
		КонецЦикла;
		ЗТ.Закрыть();
	КонецЕсли;	 
	Отладка("Записал " + СтруктураОписанияEpf.ВременноеИмяМодуля);
	
	ПутьКИсходникам = СтруктураОписанияEpf.КаталогИсходников;
	ИмяФайлаМодуляДляСборки = ПутьКИсходникам + "/ObjectModule.bsl";
	КопияИмяФайлаМодуляДляСборки = Неопределено;
	Если ГенерироватьУФ Тогда
		ИмяФайлаМодуляДляСборки = ПутьКИсходникам + "/und/70e297e0-e8a2-43bf-8be1-62e408f610a1.0";
	Иначе
		КопияИмяФайлаМодуляДляСборки = ПолучитьИмяВременногоФайла("bsl");
		КопироватьФайл(ИмяФайлаМодуляДляСборки,КопияИмяФайлаМодуляДляСборки);
	КонецЕсли;	 
	
	УдалитьФайлы(ИмяФайлаМодуляДляСборки);
	ПереместитьФайл(СтруктураОписанияEpf.ВременноеИмяМодуля,ИмяФайлаМодуляДляСборки);
	Отладка("Переименовал в " + ИмяФайлаМодуляДляСборки);
	
	ИмяФайлОсноваОбработкиTemplate = ПутьКИсходникам + "/und/79a499cc-1782-4a2f-abe7-61ea4d49fd5a_template";
	ИмяФайлОсноваОбработки         = ПутьКИсходникам + "/und/79a499cc-1782-4a2f-abe7-61ea4d49fd5a";
	Если ГенерироватьУФ Тогда
		ИмяФайлОсноваОбработкиTemplate = КаталогИнструментов + "/lib/TemplateEpfUF/und/79a499cc-1782-4a2f-abe7-61ea4d49fd5a_template";
		ИмяФайлОсноваОбработки         = КаталогИнструментов + "/lib/TemplateEpfUF/und/79a499cc-1782-4a2f-abe7-61ea4d49fd5a";
	КонецЕсли;	 
	
	Файл_template = Новый Файл(ИмяФайлОсноваОбработкиTemplate);
	Если Файл_template.Существует() Тогда
		//это значит обработка создаётся в первый раз
		КопироватьФайл(ИмяФайлОсноваОбработкиTemplate,ИмяФайлОсноваОбработки);
		ЗаменитьСтрокиВФайлеОсновыОбработки(ИмяФайлОсноваОбработки,СтруктураОписанияEpf.ИмяФичи);
	КонецЕсли;	 
	
	ПодкаталогСборки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ПодкаталогСборки);
	ФайлРеальногоEPF = Новый Файл(СтруктураОписанияEpf.ИмяФайлаEpf);
	СоздатьКаталогЕслиЕгоНет(ФайлРеальногоEPF.Путь);
	
	ФайлУжеЕсть = ФайлРеальногоEPF.Существует();
	
	Если ФайлУжеЕсть Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Пересоздаю %1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтруктураОписанияEpf.ИмяФайлаEpf);
		СделатьСообщение(ТекстСообщения);
	Иначе	
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Создаю %1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтруктураОписанияEpf.ИмяФайлаEpf);
		СделатьСообщение(ТекстСообщения);
	КонецЕсли; 
	
	ФайлЛога = ПолучитьИмяВременногоФайла("txt");
	СтрокаЗапуска = "oscript -encoding=utf-8";
	СтрокаСборкиEpf = СтрокаЗапуска + " " + КаталогИнструментов + "/vendor/precommit1c/v8files-extractor.os --compile """ +  ПутьКИсходникам  + """ """ + ПодкаталогСборки + """ > " + ФайлЛога + " 2>&1";
	
	Отладка("СтрокаСборкиEpf="+СтрокаСборкиEpf);
	
	ВыполнитьКомандуОС(СтрокаСборкиEpf);
	
	СтрокаЛогаСборки = ПолучитьТекстовыйФайлОднойСтрокой(ФайлЛога);
	Отладка("Лог команды сборки EPF:" + Символы.ПС + СтрокаЛогаСборки);
	
	ФайлГотовойОбработки = НайтиФайлы(ПодкаталогСборки, "*.epf");
	Если ФайлГотовойОбработки.Количество() = 0 Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ошибка создания временного файла в подкаталоге %1.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ПодкаталогСборки);
		СделатьСообщение(ТекстСообщения);
		БылиОшибки = Истина;
		
		УдалитьФайлы(ИмяФайлаМодуляДляСборки);
		УдалитьФайлы(ИмяФайлОсноваОбработки);
		УдалитьФайлы(ПодкаталогСборки);
		
		Возврат;
		
	КонецЕсли;
	
	ФайлВременногоEPF = ФайлГотовойОбработки[0];
	
	Если ФайлВременногоEPF.Существует() Тогда
		Если ФайлРеальногоEPF.Существует() Тогда
			УдалитьФайлы(ФайлРеальногоEPF.ПолноеИмя);
		КонецЕсли;	 
		КопироватьФайл(ФайлВременногоEPF.ПолноеИмя,ФайлРеальногоEPF.ПолноеИмя);
		Отладка("Файл " + ФайлРеальногоEPF.ПолноеИмя + " создан.");
	Иначе	
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ошибка создания файла %1.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ФайлРеальногоEPF.ПолноеИмя);
		СделатьСообщение(ТекстСообщения);
		БылиОшибки = Истина;
	КонецЕсли;	 
	
	УдалитьФайлы(ИмяФайлаМодуляДляСборки);
	Если КопияИмяФайлаМодуляДляСборки <> Неопределено Тогда
		ПереместитьФайл(КопияИмяФайлаМодуляДляСборки,ИмяФайлаМодуляДляСборки);
	КонецЕсли;	 
	УдалитьФайлы(ИмяФайлОсноваОбработки);
	УдалитьФайлы(ПодкаталогСборки);
	

КонецПроцедуры

Функция ПолучитьТекстовыйФайлОднойСтрокой(ИмяФайла)
	Ф = Новый Файл(ИмяФайла);
	Если НЕ Ф.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	Возврат Текст.Прочитать();
КонецФункции

Функция ПолучитьСледующуюСтрокуМодуля(СтрТзн,Тзн)
	Индекс = Тзн.Индекс(СтрТзн);
	Если Индекс = Тзн.Количество()-1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Тзн.Получить(Индекс+1);
КонецФункции

Процедура ДобавитьСнипет(Знач ID,Знач СтрокаРеальнойПроцедуры,Знач ИмяФайла,БылиОшибки,ТаблицаИзвестныхStepDefinition,Снипет)
	
	СтрокаРеальнойПроцедуры = СокрЛП(СтрокаРеальнойПроцедуры);
	ID                      = СокрЛП(ID);
	
	//уберем слово "Экспорт"
	Если Прав(НРег(СтрокаРеальнойПроцедуры),7) = "экспорт" Тогда
		СтрокаРеальнойПроцедуры = Лев(СтрокаРеальнойПроцедуры,СтрДлина(СтрокаРеальнойПроцедуры)-7);
		СтрокаРеальнойПроцедуры = СокрЛП(СтрокаРеальнойПроцедуры);
	КонецЕсли;
	
	Если Лев(НРег(СтрокаРеальнойПроцедуры),9) = "процедура" Тогда
		СтрокаРеальнойПроцедуры = СокрЛП(Сред(СтрокаРеальнойПроцедуры,10));
	КонецЕсли;
	
	//Сообщить("ID="+ID);
	//Сообщить("СтрокаРеальнойПроцедуры="+СтрокаРеальнойПроцедуры);
	//Сообщить("ИмяФайла="+ИмяФайла);
	
	Поз = Найти(ID,"(");
	СтрПараметры = Сред(ID,Поз+1);
	СтрПараметры = Лев(СтрПараметры,СтрДлина(СтрПараметры)-1);
	
	//Сообщить("СтрПараметры="+СтрПараметры);
	
	МассивПром = РазложитьСтрокуВМассивПодстрок(СтрПараметры, ",");
	МассивПараметров = Новый Массив;
	Для Каждого Элем Из МассивПром Цикл
		СтруктураПарам = Новый Структура;
		Тип = "Строка";
		Если Найти(НРег(Элем),"число") > 0 Тогда
			Тип = "Число";
		КонецЕсли;
		Если Найти(НРег(Элем),"дата") > 0 Тогда
			Тип = "Дата";
		КонецЕсли;
		СтруктураПарам.Вставить("Тип",Тип);
		МассивПараметров.Добавить(СтруктураПарам);
		
		//Сообщить("Тип="+Тип + ", Элем=" + Элем);
	КонецЦикла;
	
	ПромСтр = ТаблицаИзвестныхStepDefinition.Найти(ID,"ID");
	Если ПромСтр <> Неопределено Тогда
		Если НРег(ПромСтр.ИмяФайла) = НРег(ИмяФайла) Тогда //значит этот снипет из того же файла
			Возврат;
		КонецЕсли;	
	КонецЕсли;	 
	
	Если ПромСтр <> Неопределено Тогда
		БылиОшибки = Истина;
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ошибка в файле %1, снипет %2 уже был в %3");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайла);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ID);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%3",ПромСтр.ИмяФайла);
		СделатьСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТипШагаВДереве = Неопределено;
	Если Снипет.Свойство("ТипШагаВДереве") Тогда
		ТипШагаВДереве = Снипет.ТипШагаВДереве;
	КонецЕсли;	 
	
	СтрТаблицаИзвестныхStepDefinition                         = ТаблицаИзвестныхStepDefinition.Добавить();
	СтрТаблицаИзвестныхStepDefinition.ID                      = ID;
	СтрТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры = СтрокаРеальнойПроцедуры;
	СтрТаблицаИзвестныхStepDefinition.ИмяФайла                = ИмяФайла;
	СтрТаблицаИзвестныхStepDefinition.Параметры               = МассивПараметров;
	СтрТаблицаИзвестныхStepDefinition.СтрокаДляПоиска         = НРег(Лев(ID,Найти(ID,"(")-1));
	СтрТаблицаИзвестныхStepDefinition.ТипШагаВДереве          = ТипШагаВДереве;
КонецПроцедуры

Процедура ПолучитьУжеСуществующиеСнипетыИзОбработок(Знач КаталогФич,ТаблицаКонтекстовОбработок,ТаблицаИзвестныхStepDefinition,ТаблицаВерсийEPF,КонтекстVanessaBehavoir) Экспорт
	
	
	
	Файл = Новый Файл(КаталогФич);
	Если Не Файл.Существует() Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Ошибка в ПолучитьУжеСуществующиеСнипетыИзОбработок(). Файл/каталог %1 не существует.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",КаталогФич);
		СделатьСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли;	 
	
	
	Если Файл.ЭтоФайл() Тогда
		КаталогФич = Файл.Путь;
	КонецЕсли;	 
	
	Файл = Новый Файл(КаталогФич);
	
	БылиОшибки = Ложь;
	НачальныйКаталог = КаталогФич;
	КаталогПоиска    = НачальныйКаталог;
	
	Файл = Новый Файл(НачальныйКаталог);
	Если НРег(Файл.Расширение) = ".feature" Тогда
		КаталогПоиска = Файл.Путь;
	КонецЕсли;	 
	
	Отладка("Ищу снипеты в каталоге " + КаталогПоиска);
	
	МассивФайлов = НайтиФайлы(КаталогПоиска,"*.epf",Истина);
	Для Каждого Файл Из МассивФайлов Цикл
		
		ВерсияФайла = Файл.ПолучитьВремяИзменения();
		
		
		СтрТаблицаВерсийEPF = ТаблицаВерсийEPF.Найти(НРег(Файл.ПолноеИмя),"ИмяФайла");
		Если СтрТаблицаВерсийEPF = Неопределено Тогда
			СтрТаблицаВерсийEPF             = ТаблицаВерсийEPF.Добавить();
			СтрТаблицаВерсийEPF.ИмяФайла    = НРег(Файл.ПолноеИмя);
			СтрТаблицаВерсийEPF.ВерсияФайла = ВерсияФайла;
		Иначе	
			Если СтрТаблицаВерсийEPF.ВерсияФайла <> ВерсияФайла Тогда
				//значит файл изменился
				//обновляем версию и удаляем старые снипеты
				СтрТаблицаВерсийEPF.ВерсияФайла = ВерсияФайла;
				
				Отбор = Новый Структура;
				Отбор.Вставить("ИмяФайла",НРег(Файл.ПолноеИмя));
				МассивСтрок = ТаблицаИзвестныхStepDefinition.НайтиСтроки(Отбор);
				
				Для каждого СтрокаТаблицы Из МассивСтрок Цикл
					ТаблицаИзвестныхStepDefinition.Удалить(СтрокаТаблицы);
				КонецЦикла;
				
				Отладка("Обновил версию. " + Файл.ПолноеИмя);
			Иначе
				//значит уже актуальная версия файла загружена
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		
		
		
		Попытка
			Обработка = ВнешниеОбработки.Создать(Файл.ПолноеИмя);
			МассивСнипетовИзОбработки = Обработка.ПолучитьСписокТестов(КонтекстVanessaBehavoir);
		Исключение
			Отладка("Не смог получить список шагов в обработке: " + Файл.ПолноеИмя);
			Отладка("" + ОписаниеОшибки());
			//Сообщить("Не смог загрузить снипеты из " + Файл.ПолноеИмя);
			//Сообщить(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		
		СтрТаблицаКонтекстовОбработок = Новый Структура;
		СтрТаблицаКонтекстовОбработок.Вставить("ИмяФайла",Файл.ПолноеИмя);
		СтрТаблицаКонтекстовОбработок.Вставить("Обработка",Обработка);
		ТаблицаКонтекстовОбработок.Добавить(СтрТаблицаКонтекстовОбработок);
		
		Для каждого Снипет Из МассивСнипетовИзОбработки Цикл
			ДобавитьСнипет(Снипет.Снипет,Снипет.ИмяПроцедуры,Файл.ПолноеИмя,БылиОшибки,ТаблицаИзвестныхStepDefinition,Снипет);
		КонецЦикла;
	КонецЦикла;
	
	Если БылиОшибки Тогда
		Сообщить(ПолучитьТекстСообщенияПользователю("Были ошибки в ПросканироватьИсходникиИНайтиВсеStepDefinition."));
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьСтруктуруСнипета()
	СтруктураСнипета = Новый Структура;
	
	Возврат СтруктураСнипета;
КонецФункции

Процедура УбратьЗапрещенныеСимволыИзStepDefinition(StepDefinition,ДелатьОберткуПараметров = Ложь,ДопПараметры = Неопределено) 
	StepDefinition = СтрЗаменить(StepDefinition,".","");
	StepDefinition = СтрЗаменить(StepDefinition,",","");
	StepDefinition = СтрЗаменить(StepDefinition,":","");
	StepDefinition = СтрЗаменить(StepDefinition,";","");
	StepDefinition = СтрЗаменить(StepDefinition,"+","");
	StepDefinition = СтрЗаменить(StepDefinition,"/","");
	StepDefinition = СтрЗаменить(StepDefinition,"\","");
	StepDefinition = СтрЗаменить(StepDefinition,"=","");
	StepDefinition = СтрЗаменить(StepDefinition,"!","");
	StepDefinition = СтрЗаменить(StepDefinition,"@","");
	StepDefinition = СтрЗаменить(StepDefinition,"#","");
	StepDefinition = СтрЗаменить(StepDefinition,"$","");
	StepDefinition = СтрЗаменить(StepDefinition,"%","");
	StepDefinition = СтрЗаменить(StepDefinition,"^","");
	StepDefinition = СтрЗаменить(StepDefinition,"&","");
	StepDefinition = СтрЗаменить(StepDefinition,"(","");
	StepDefinition = СтрЗаменить(StepDefinition,")","");
	StepDefinition = СтрЗаменить(StepDefinition,"№","");
	StepDefinition = СтрЗаменить(StepDefinition,"?","");
	StepDefinition = СтрЗаменить(StepDefinition,"`","");
	StepDefinition = СтрЗаменить(StepDefinition,"'","");
	StepDefinition = СтрЗаменить(StepDefinition,"~","");
	StepDefinition = СтрЗаменить(StepDefinition,Символы.НПП," ");
	StepDefinition = СтрЗаменить(StepDefinition,"<","");
	StepDefinition = СтрЗаменить(StepDefinition,">","");
	

	StepDefinition = СтрЗаменить(StepDefinition,"-","_");
	
	Если Не ДелатьОберткуПараметров Тогда
		StepDefinition = СтрЗаменить(StepDefinition,"*","");
	КонецЕсли;	 
КонецПроцедуры

Функция ДобавитьНолейВСтроку(Знач Стр,Длина);
	Пока СтрДлина(Стр) < Длина Цикл
		Стр = "0" + Стр;
	КонецЦикла;
	
	Возврат Стр;
КонецФункции	

Функция ДобавитьПараметрStepDefinition(Знач Стр,КолПараметров) Экспорт
	КолПараметровСтр = СокрЛП(КолПараметров);
	КолПараметровСтр = ДобавитьНолейВСтроку(КолПараметровСтр,2);
	//Если СтрДлина(КолПараметровСтр) = 1 Тогда
	//	КолПараметровСтр = "0" + КолПараметровСтр;
	//КонецЕсли;
	
	Если (Найти(Стр,"||ПараметрЧисло||") > 0) или (Найти(Стр,"||ПараметрСтрокаА||") > 0) или (Найти(Стр,"||ПараметрСтрокаК||") > 0) или (Найти(Стр,"||ПараметрДата||") > 0) Тогда
		Стр = СтрЗаменить(Стр,"||Параметр","||Парам" + КолПараметровСтр) + ",";
	Иначе	
		Стр = Стр + ",";
	КонецЕсли;	 
	Стр = СтрЗаменить(Стр,"|","");
	Стр = СтрЗаменить(Стр,">","");
	Стр = СтрЗаменить(Стр,"<","");
	
	Возврат Стр;
КонецФункции

Функция СделатьПервуюБуквуЗаглавной(Стр) Экспорт
	Если СтрДлина(Стр) = 0 Тогда
		Возврат Стр;
	КонецЕсли;
	
	ПерваяБуква = ВРег(Лев(Стр,1));
	
	Возврат ПерваяБуква + Сред(Стр,2);
КонецФункции

Процедура ОбработатьСтрокиЭмуляцияRegExp(Стр,ПараметрыСтроки,Символ,ДелатьОберткуПараметров = Ложь);
	ПромСтр     = Стр;
	НоваяСтрока = "";
	
	ПромСтр     = СтрЗаменить(ПромСтр,"\\",ПредставлениеДвойнойСлеш);
	
	ПромСтр     = СтрЗаменить(ПромСтр,"\'",ПредставлениеАпостроф);
	ПромСтр     = СтрЗаменить(ПромСтр,"\""",ПредставлениеКавычка);
	ПромСтр     = СтрЗаменить(ПромСтр,"\|",ПредставлениеВертикальнаяЧерта);
	
	ПромСтр     = СтрЗаменить(ПромСтр,ПредставлениеДвойнойСлеш,"\\");
	
	
	Поз         = Найти(ПромСтр,Символ);
	
	Если Поз = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	
	Пока Поз > 0 Цикл
		НоваяСтрока = НоваяСтрока + Лев(ПромСтр,Поз-1);
		ПромСтр     = Сред(ПромСтр,Поз+1);
		
		Поз = Найти(ПромСтр,Символ);
		Если Поз > 0 Тогда
			ЗначениеПараметра = Лев(ПромСтр,Поз-1);
			ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра,ПредставлениеАпостроф,"'");
			ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра,ПредставлениеКавычка,"""");
			ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра,ПредставлениеВертикальнаяЧерта,"|");
			ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра,"\\","\");
			ПараметрыСтроки.Добавить(ЗначениеПараметра);
			
			СтрКолПараметров = "";
			Если ДелатьОберткуПараметров Тогда
				СтрКолПараметров = XMLСтрока(ПараметрыСтроки.Количество());
			КонецЕсли;	 
			
			//Сообщить("ЗначениеПараметра="+ЗначениеПараметра);
			ПромСтр = Сред(ПромСтр,Поз+1);
			//Если ДелатьОберткуПараметров Тогда
			//	НоваяСтрока = НоваяСтрока + " *||*" + Символ + ЗначениеПараметра + Символ +  "*||* ";
			//Иначе	
				Если Символ = "'" Тогда
					НоваяСтрока = НоваяСтрока + "||ПараметрСтрокаА" + СтрКолПараметров + "||";
				Иначе	
					НоваяСтрока = НоваяСтрока + "||ПараметрСтрокаК" + СтрКолПараметров + "||";
				КонецЕсли; 
			//КонецЕсли;	 
			
		Иначе
			НоваяСтрока = НоваяСтрока + ПромСтр;
		КонецЕсли;	 
		
		
		Поз = Найти(ПромСтр,Символ);
		Если Поз = 0 Тогда
			НоваяСтрока               = НоваяСтрока + ПромСтр;
		КонецЕсли;	 
	КонецЦикла;
	
	Стр = НоваяСтрока;
КонецПроцедуры

Процедура ОбработатьДатыЭмуляцияRegExp(Стр,ПараметрыДаты,ДелатьОберткуПараметров = Ложь)
	Массив = РазложитьСтрокуВМассивПодстрок(Стр,".");
	
	Для Ккк = 0 По Массив.Количество()-1-2 Цикл
		Элем1 = Прав(Массив[Ккк],2);
		Элем2 = Массив[Ккк+1];
		Элем3 = Лев(Массив[Ккк+2],4);
		Если СтрДлина(Элем3) < 4 Тогда
			Элем3 = Лев(Массив[Ккк+2],2);
		КонецЕсли;	 
		Если СтрДлина(Элем3) = 4 Тогда
			Если НЕ ЭтоЦелоеЧисло(Элем3) Тогда
				Элем3 = Лев(Массив[Ккк+2],2);
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если СтрДлина(Элем1) <>  2 Тогда
			Продолжить;
		КонецЕсли;	 
		Если СтрДлина(Элем2) <>  2 Тогда
			Продолжить;
		КонецЕсли;	 
		Если (СтрДлина(Элем3) = 2) или (СтрДлина(Элем3) = 4) Тогда
		Иначе
			Продолжить;
		КонецЕсли;	 
		
		Если НЕ ЭтоЦелоеЧисло(Элем1) Тогда
			Продолжить;
		КонецЕсли;	 
		Если НЕ ЭтоЦелоеЧисло(Элем2) Тогда
			Продолжить;
		КонецЕсли;	 
		Если НЕ ЭтоЦелоеЧисло(Элем3) Тогда
			Продолжить;
		КонецЕсли;	 
		
		
		СтрДат = "" + Элем1 + "." + Элем2 + "." +Элем3;
		
		Поз = Найти(Стр,СтрДат);
		Если Поз > 0 Тогда
			ПараметрыДаты.Добавить(СтрДат);
			
			СтрКолПараметров = "";
			Если ДелатьОберткуПараметров Тогда
				СтрКолПараметров = XMLСтрока(ПараметрыДаты.Количество());
			КонецЕсли;	 
			
			//Если ДелатьОберткуПараметров Тогда
			//	Стр = Лев(Стр,Поз-1) + " *||*ПараметрДата" + ПараметрыДаты.Количество() + "*||* " + Сред(Стр,Поз+СтрДлина(СтрДат));
			//Иначе	
				Стр = Лев(Стр,Поз-1) + " ||ПараметрДата" + СтрКолПараметров + "|| " + Сред(Стр,Поз+СтрДлина(СтрДат));
			//КонецЕсли;	 
			//Сообщить("ЗначениеПараметра="+СтрДат);
			ОбработатьДатыЭмуляцияRegExp(Стр,ПараметрыДаты,ДелатьОберткуПараметров);
			Прервать;
		КонецЕсли;	 
		
		//Если ЭтоЦелоеЧисло(Элем1) и  Тогда
		//КонецЕсли;	 
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоКорректноеЧисло(Стр)
	Если ПустаяСтрока(Стр) или (Стр = "-") или (Стр = "+") Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Попытка
		ПромЗнач = Число(Стр);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Процедура ОбработатьЧислаЭмуляцияRegExp(Стр,ПараметрыЧисла,ДелатьОберткуПараметров = Ложь)
	ПромСтр           = Стр;
	СтрокаРезультат   = "";
	НакопленнаяСтрока = "";
	ПредыдущийСимвол = Неопределено;
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Стр," ",Истина);
	Для Каждого НакопленнаяСтрока Из МассивСтрок Цикл
		Если ЭтоКорректноеЧисло(НакопленнаяСтрока) Тогда
			ПараметрыЧисла.Добавить(НакопленнаяСтрока);
			
			СтрКолПараметров = "";
			Если ДелатьОберткуПараметров Тогда
				СтрКолПараметров = XMLСтрока(ПараметрыЧисла.Количество());
			КонецЕсли;	 
			
			СтрокаРезультат = СтрокаРезультат + " ||ПараметрЧисло" + СтрКолПараметров + "|| ";
		Иначе
			СтрокаРезультат = СтрокаРезультат + " " + НакопленнаяСтрока;
		КонецЕсли;	 
	КонецЦикла;	
	
	Стр = СокрЛ(СтрокаРезультат);
КонецПроцедуры

Процедура ОбработатьЧислаЭмуляцияRegExpСтарыйВариант(Стр,ПараметрыЧисла,ДелатьОберткуПараметров = Ложь)
	ПромСтр           = Стр;
	СтрокаРезультат   = "";
	НакопленнаяСтрока = "";
	ПредыдущийСимвол = Неопределено;
	
	Для Ккк = 1 По СтрДлина(ПромСтр) Цикл
		Символ = Сред(ПромСтр,Ккк,1);
		
		Если Ккк > 1 Тогда
			ПредыдущийСимвол = Сред(ПромСтр,Ккк-1,1);
		КонецЕсли;	 
		
		Если ЭтоЦелоеЧисло(Символ) или ((Символ = "-") и (Найти(НакопленнаяСтрока,"-") = 0)) Тогда
			Если НакопленнаяСтрока = "" Тогда
				Если (ПредыдущийСимвол = " ") или (ПредыдущийСимвол = "-") или (Ккк = 1) Тогда //всё хорошо, мы нашли начало числа
				Иначе
					СтрокаРезультат = СтрокаРезультат + Символ;
					НакопленнаяСтрока = "";
					Продолжить;
				КонецЕсли;	 
			КонецЕсли;	 
			
			НакопленнаяСтрока = НакопленнаяСтрока + Символ;
			Продолжить;
		КонецЕсли;	 
		
		НакопленнаяСтрока = НакопленнаяСтрока + Символ;
		
		Если Символ = "." Тогда
			Продолжить;
		КонецЕсли;	 
		
		ПолученноеЗначение = Лев(НакопленнаяСтрока,СтрДлина(НакопленнаяСтрока)-1);
		Если ЭтоКорректноеЧисло(ПолученноеЗначение) и ((Символ = " ") или (Символ = ",") или (Символ = ";") или (Символ = ":")) Тогда
			ПараметрыЧисла.Добавить(ПолученноеЗначение);
			
			СтрКолПараметров = "";
			Если ДелатьОберткуПараметров Тогда
				СтрКолПараметров = XMLСтрока(ПараметрыЧисла.Количество());
			КонецЕсли;	 
			
			//Если ДелатьОберткуПараметров Тогда
			//	СтрокаРезультат = СтрокаРезультат + " *||*" + ПолученноеЗначение + "*||* ";
			//Иначе	
				СтрокаРезультат = СтрокаРезультат + " ||ПараметрЧисло" + СтрКолПараметров + "|| ";
			//КонецЕсли;	 
			//Сообщить("ЗначениеПараметра="+НакопленнаяСтрока);
			НакопленнаяСтрока = "";
		Иначе
			СтрокаРезультат =СтрокаРезультат + НакопленнаяСтрока;
			НакопленнаяСтрока = "";
		КонецЕсли;	 
	КонецЦикла;
	
	Если СтрДлина(НакопленнаяСтрока) > 0 Тогда
		Если ЭтоКорректноеЧисло(НакопленнаяСтрока) Тогда
			ПараметрыЧисла.Добавить(НакопленнаяСтрока);
			
			СтрКолПараметров = "";
			Если ДелатьОберткуПараметров Тогда
				СтрКолПараметров = XMLСтрока(ПараметрыЧисла.Количество());
			КонецЕсли;	 
			
			//Если ДелатьОберткуПараметров Тогда
			//	СтрокаРезультат = СтрокаРезультат + " *||*" + НакопленнаяСтрока + "*||* ";
			//Иначе	
				СтрокаРезультат = СтрокаРезультат + " ||ПараметрЧисло" + СтрКолПараметров + "|| ";
			//КонецЕсли;	 
			//Сообщить("ЗначениеПараметра="+НакопленнаяСтрока);
		Иначе
			СтрокаРезультат =СтрокаРезультат + НакопленнаяСтрока;
		КонецЕсли;
	КонецЕсли;	 
	
	Стр = СтрокаРезультат;
КонецПроцедуры

Процедура ОбработатьПараметрыИменованные(Стр,ПараметрыИменованные)
	
	МассивТекПараметров = Новый Массив;
	
	Пока Истина Цикл
		Поз1 = Найти(Стр,"<");
		Поз2 = Найти(Стр,">");
		
		Если (Поз1 > 0) И (Поз2 > 0) и ((Поз2-Поз1) > 1) Тогда
			СтрПараметр = (Сред(Стр,Поз1+1,Поз2-Поз1-1));
			
			//ПараметрыИменованные.Добавить(СтрПараметр);
			
			
			ТекПараметр = "|||"+СтрПараметр + "|||";
			
			СтруктураПараметра = Новый Структура;
			СтруктураПараметра.Вставить("Имя",СтрЗаменить(СтрПараметр," ","|||ЗаменаПробела|||"));
			СтруктураПараметра.Вставить("ЗначениеВСтроке",ТекПараметр);
			
			МассивТекПараметров.Добавить(СтруктураПараметра);
			
			
			Стр = СтрЗаменить(Стр,"<" + СтрПараметр + ">",ТекПараметр);
			
			//ПромСтр = Сред(ПромСтр,Поз2+1);
		Иначе	
			Прервать;
		КонецЕсли; 
		
	КонецЦикла;
	
	Ном = 0;
	Для каждого Элем Из МассивТекПараметров Цикл
		Ном = Ном+1;
		//КолПараметровСтр = Ном;
		//Если СтрДлина(КолПараметровСтр) = 1 Тогда
		//	КолПараметровСтр = "0" + КолПараметровСтр;
		//КонецЕсли;
		Стр = СтрЗаменить(Стр,Элем.ЗначениеВСтроке,"<" + Элем.Имя + ">");
		
		ПараметрыИменованные.Добавить(Элем.Имя);
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПодготовитьСтрокуСОберткойПараметров(Стр,ПараметрыСтрокиА,ПараметрыСтрокиК,ПараметрыДаты,ПараметрыЧисла)
	Ном = 0;
	Для Каждого ЗначениеПараметра Из ПараметрыСтрокиА Цикл
		Ном    = Ном + 1;
		СтрНом = XMLСтрока(Ном);
		Символ = "'";
		Стр = СтрЗаменить(Стр,"||ПараметрСтрокаА" + СтрНом + "||","*||*" + Символ + ЗначениеПараметра + Символ +  "*||*");
	КонецЦикла;	
	
	Ном = 0;
	Для Каждого ЗначениеПараметра Из ПараметрыСтрокиК Цикл
		Ном    = Ном + 1;
		СтрНом = XMLСтрока(Ном);
		Символ = """";
		Стр = СтрЗаменить(Стр,"||ПараметрСтрокаК" + СтрНом + "||","*||*" + Символ + ЗначениеПараметра + Символ +  "*||*");
	КонецЦикла;	
	
	Ном = 0;
	Для Каждого ЗначениеПараметра Из ПараметрыДаты Цикл
		Ном    = Ном + 1;
		СтрНом = XMLСтрока(Ном);
		Стр = СтрЗаменить(Стр,"||ПараметрДата" + СтрНом + "||","*||*" + ЗначениеПараметра + "*||*");
	КонецЦикла;	
	
	Ном = 0;
	Для Каждого ЗначениеПараметра Из ПараметрыЧисла Цикл
		Ном    = Ном + 1;
		СтрНом = XMLСтрока(Ном);
		Стр = СтрЗаменить(Стр,"||ПараметрЧисло" + СтрНом + "||","*||*" + ЗначениеПараметра + "*||*");
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЭмуляцияRegExp(Стр,ПараметрыСтрокиА,ПараметрыСтрокиК,ПараметрыЧисла,ПараметрыДаты,ПараметрыИменованные,ДелатьОберткуПараметров = Ложь,ДопПараметры = Неопределено)
	ОбработатьСтрокиЭмуляцияRegExp(Стр,ПараметрыСтрокиА,"'",ДелатьОберткуПараметров);
	ОбработатьСтрокиЭмуляцияRegExp(Стр,ПараметрыСтрокиК,"""",ДелатьОберткуПараметров);
	ОбработатьПараметрыИменованные(Стр,ПараметрыИменованные);
	ОбработатьДатыЭмуляцияRegExp(Стр,ПараметрыДаты,ДелатьОберткуПараметров);
	ОбработатьЧислаЭмуляцияRegExp(Стр,ПараметрыЧисла,ДелатьОберткуПараметров);
	//УбратьЗапрещенныеСимволыИзStepDefinition(Стр,,ДопПараметры);
	
	
	Если ДелатьОберткуПараметров Тогда
		ПодготовитьСтрокуСОберткойПараметров(Стр,ПараметрыСтрокиА,ПараметрыСтрокиК,ПараметрыДаты,ПараметрыЧисла);
	КонецЕсли;	 
КонецПроцедуры

Функция ЭкранироватьСпецСимволыДляЗначенияШага(Знач Стр)
	Стр = СтрЗаменить(Стр,"""","\""");
	Возврат СтрЗаменить(Стр,"'","\'");
КонецФункции	

Функция ПолучитьStepDefinitionПоСтроке(Знач Стр,ЗначенияПараметров, СтрокаПараметров = "",
	                            ЕстьПараметрыТаблицы = Ложь,КоличествоПараметровТаблица = 0,
								ДанныеОбработкиПараметров = Неопределено) 
	
	
	ПараметрыЧисла       = Новый Массив;
	ПараметрыСтрокиА     = Новый Массив;
	ПараметрыСтрокиК     = Новый Массив;
	ПараметрыДаты        = Новый Массив;
	ПараметрыИменованные = Новый Массив;
	
	
	
	СтрокаОригинал = Стр;
	
	
	
	ЭмуляцияRegExp(Стр,ПараметрыСтрокиА,ПараметрыСтрокиК,ПараметрыЧисла,ПараметрыДаты,ПараметрыИменованные);
	
	Если ДанныеОбработкиПараметров <> Неопределено Тогда
		ДанныеОбработкиПараметров.Вставить("ОбработаннаяСтрокаПараметров",Стр);
		ДанныеОбработкиПараметров.Вставить("ПараметрыЧисла",ПараметрыЧисла);
		ДанныеОбработкиПараметров.Вставить("ПараметрыСтрокиА",ПараметрыСтрокиА);
		ДанныеОбработкиПараметров.Вставить("ПараметрыСтрокиК",ПараметрыСтрокиК);
		ДанныеОбработкиПараметров.Вставить("ПараметрыДаты",ПараметрыДаты);
		ДанныеОбработкиПараметров.Вставить("ПараметрыИменованные",ПараметрыИменованные);
		ДанныеОбработкиПараметров.Вставить("ЗначенияПараметров",ЗначенияПараметров);
	КонецЕсли;	 
	
	
	Стр = СтрЗаменить(Стр,Символы.Таб," ");
	Если Прав(Стр,1) = ":" Тогда
		Стр = Лев(Стр,СтрДлина(Стр)-1);
	КонецЕсли;	 
	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(Стр," ",Истина);
	КолПараметров        = 0;
	КолПараметровЧисло   = 0;
	КолПараметровСтрокаА = 0;
	КолПараметровСтрокаК = 0;
	КолПараметровДата    = 0;
	
	КолПараметровИменованные = 0;
	
	СтрокаПараметров    = "";
	StepDefinition      = "";
	
	Для Каждого Элем Из МассивПодстрок Цикл
		Если Лев(Элем,1) = "|" Тогда
			Если Элем = "||ПараметрСтрокаА||" Тогда
				КолПараметров        = КолПараметров       + 1;
				КолПараметровСтрокаА = КолПараметровСтрокаА + 1;
				
				СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
				
				
				Если (ПараметрыСтрокиА.Количество()-1) < КолПараметровСтрокаА-1 Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог обработать параметры в строке <%1>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаОригинал); 
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				СтруктураЗначенияПараметра = Новый Структура;
				СтруктураЗначенияПараметра.Вставить("Значение",ПараметрыСтрокиА[КолПараметровСтрокаА-1]);
				СтруктураЗначенияПараметра.Вставить("Тип","Строка");
				
				ЗначенияПараметров.Добавить(СтруктураЗначенияПараметра);
				
				Продолжить;
			ИначеЕсли Элем = "||ПараметрСтрокаК||" Тогда
				КолПараметров        = КолПараметров       + 1;
				КолПараметровСтрокаК = КолПараметровСтрокаК + 1;
				
				СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
				
				Если (ПараметрыСтрокиК.Количество()-1) < КолПараметровСтрокаК-1 Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог обработать параметры в строке <%1>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаОригинал); 
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				СтруктураЗначенияПараметра = Новый Структура;
				СтруктураЗначенияПараметра.Вставить("Значение",ПараметрыСтрокиК[КолПараметровСтрокаК-1]);
				СтруктураЗначенияПараметра.Вставить("Тип","Строка");
				
				ЗначенияПараметров.Добавить(СтруктураЗначенияПараметра);
				
				Продолжить;
			ИначеЕсли Элем = "||ПараметрЧисло||" Тогда
				КолПараметров      = КолПараметров      + 1;
				КолПараметровЧисло = КолПараметровЧисло + 1;
				
				СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем, КолПараметров);
				
				Если (ПараметрыЧисла.Количество()-1) < КолПараметровЧисло-1 Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог обработать параметры в строке <%1>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаОригинал); 
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				СтруктураЗначенияПараметра = Новый Структура;
				СтруктураЗначенияПараметра.Вставить("Значение",ПараметрыЧисла[КолПараметровЧисло-1]);
				СтруктураЗначенияПараметра.Вставить("Тип","Число");
				
				ЗначенияПараметров.Добавить(СтруктураЗначенияПараметра);
				Продолжить;
			ИначеЕсли Элем = "||ПараметрДата||" Тогда
				КолПараметров      = КолПараметров      + 1;
				КолПараметровДата  = КолПараметровДата  + 1;
				
				СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
				
				Если (ПараметрыДаты.Количество()-1) < КолПараметровДата-1 Тогда
					ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог обработать параметры в строке <%1>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаОригинал); 
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	 
				
				СтруктураЗначенияПараметра = Новый Структура;
				СтруктураЗначенияПараметра.Вставить("Значение",ПараметрыДаты[КолПараметровДата-1]);
				СтруктураЗначенияПараметра.Вставить("Тип","Дата");
				
				ЗначенияПараметров.Добавить(СтруктураЗначенияПараметра);
				Продолжить;
			КонецЕсли;
		КонецЕсли;	 
		
		НашлиПараметрИменованный = Ложь;
		Для каждого ЭлемПараметрыИменованные Из ПараметрыИменованные Цикл
			ЭлемПараметрыИменованные = СтрЗаменить(ЭлемПараметрыИменованные,"|||ЗаменаПробела|||"," ");
			Элем                     = СокрЛП(СтрЗаменить(Элем,"|||ЗаменаПробела|||"," "));
			
			СтрДляСравнения = "<" + ЭлемПараметрыИменованные + ">";
			Если СтрДляСравнения = Элем Тогда
				КолПараметров            = КолПараметров      + 1;
				КолПараметровИменованные = КолПараметровИменованные  + 1;
				
				СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
				
				СтруктураЗначенияПараметра = Новый Структура;
				СтруктураЗначенияПараметра.Вставить("Значение",ЭлемПараметрыИменованные);
				СтруктураЗначенияПараметра.Вставить("Тип","ПараметрИменованный");
				
				ЗначенияПараметров.Добавить(СтруктураЗначенияПараметра);
				
				НашлиПараметрИменованный = Истина;
				Прервать;
			КонецЕсли; 
			
		КонецЦикла;
		Если НашлиПараметрИменованный Тогда
			Продолжить;
		КонецЕсли; 
		
		StepDefinition = StepDefinition + СделатьПервуюБуквуЗаглавной(Элем);
	КонецЦикла;
	
	
	Если ЕстьПараметрыТаблицы  = Истина Тогда
		Если КоличествоПараметровТаблица = 1 Тогда
			СтрокаПараметров = СтрокаПараметров + "ТабПарам,"; 
		Иначе
			Для Ккк = 1 По КоличествоПараметровТаблица Цикл
				СтрокаПараметров = СтрокаПараметров + "ТабПарам" + XMLСтрока(Ккк) + ","; 
			КонецЦикла;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если СтрокаПараметров <> "" Тогда
		Если Прав(СтрокаПараметров,1) = "," Тогда
			СтрокаПараметров = Лев(СтрокаПараметров,СтрДлина(СтрокаПараметров)-1);//там лишняя запятая
		КонецЕсли;	 
	КонецЕсли;
	
	УбратьЗапрещенныеСимволыИзStepDefinition(StepDefinition);
	ПроверкаКорректностиStepDefinition(StepDefinition);
	
	StepDefinition = StepDefinition + "(" + СтрокаПараметров + ")";
	
	Возврат StepDefinition;
КонецФункции

Процедура ПроверкаКорректностиStepDefinition(StepDefinition)
	ПервыйСимвол = Лев(StepDefinition,1);
	Если ЭтоЦелоеЧисло(ПервыйСимвол) Тогда
		StepDefinition = "_" + StepDefinition;
	КонецЕсли;	 
КонецПроцедуры

Функция СнипетыПолучитьСнипетыПоШагам(Шаги) Экспорт
	МассивСнипетов = Новый Массив;
	
	МассивПовторов = Новый Массив;
	
	Для каждого СтрШаг Из Шаги Цикл
		ЗначенияПараметров = Новый Массив;
		СтарыйStepDefinition = ПолучитьStepDefinitionПоСтроке(СтрШаг.ИмяШагаБезКлючевогоСлова,ЗначенияПараметров,,СтрШаг.ШагСПараметрамиВТаблице,СтрШаг.КоличествоПередаваемыхТаблиц);
		НовыйStepDefinition  = ПолучитьНовыйStepDefinition(СтарыйStepDefinition);
		StepDefinition       = НовыйStepDefinition;
		
		СнипетБезПараметров = Лев(StepDefinition,Найти(StepDefinition,"(")-1);
		Если МассивПовторов.Найти(СнипетБезПараметров) = Неопределено Тогда
			МассивПовторов.Добавить(СнипетБезПараметров);
		Иначе
			Продолжить;
		КонецЕсли;	 
		
		Отладка("По (" + СтрШаг.Имя + ") получил StepDefinition: " + StepDefinition);
		
		СтруктураСнипета = СоздатьСтруктуруСнипета();
		СтруктураСнипета.Вставить("Шаг",СтрШаг.Имя);
		СтруктураСнипета.Вставить("StepDefinition",StepDefinition);
		СтруктураСнипета.Вставить("ЗначенияПараметров",ЗначенияПараметров);
		СтруктураСнипета.Вставить("АдресСнипета",СтрШаг.АдресСнипета);
		
		МассивСнипетов.Добавить(СтруктураСнипета);
	КонецЦикла;
	
	Возврат МассивСнипетов;
КонецФункции

Процедура ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf,StepDefinition,ПримерИспользованияПроцедуры,ШагСтрокДляМодуля,АдресСнипета,СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур,ГенерироватьУФ,ЭтоУФ = Ложь) Экспорт 
	ГенерироватьСнипетЗакоментаренным = ?(СокрЛП(АдресСнипета) = "",Ложь,Истина);
	Если СравнитьПутиФайлов(СтруктураОписанияEpf.ИмяФайлаEpf,АдресСнипета) Тогда
		ГенерироватьСнипетЗакоментаренным = Ложь;
	КонецЕсли;	 
	
	Если Не СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур Тогда
		Если ГенерироватьСнипетЗакоментаренным Тогда
			Возврат;
		КонецЕсли;  
	КонецЕсли;  
	
	ТелоМодуля = СтруктураОписанияEpf.ТелоМодуля;
	Если ЭтоУФ Тогда
		ТелоМодуля = ЗначениеИзСтрокиВнутр(ТелоМодуля);
	КонецЕсли;	 
	ТелоМодуля.Сортировать("НомСтр");
	
	СтрокаПоискаStepDefinition = "//@" + НРег(Лев(StepDefinition,Найти(StepDefinition,"(")));//будем искать без параметров
	Если СтрокаПоискаStepDefinition = "" Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Ошибка в ДобавитьStepDefinitionВТекстМодуля.");
	КонецЕсли;	 
	
	
	
	УжеЕсть = Ложь;
	Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
		Стр = СокрЛП(СтрТелоМодуля.Стр);
		Если Лев(Стр,3) = "//@" Тогда //так определяется StepDefinition
			Если Найти(НРег(Стр),СтрокаПоискаStepDefinition) > 0 Тогда
				УжеЕсть = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если УжеЕсть Тогда
		Возврат;
	КонецЕсли;
	
	//НомСтр = ПолучитьМаксНомерИзТелаМодуля(ТелоМодуля);
	
	//Возврат;
	
	ПрефиксКоментария = ?(ГенерироватьСнипетЗакоментаренным,"//","");
	
	
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ПрефиксКоментария + "&НаКлиенте");
	КонецЕсли;	 
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ПрефиксКоментария + "//" + ПримерИспользованияПроцедуры);
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ПрефиксКоментария + "//@" + StepDefinition);
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ПрефиксКоментария + "Процедура " + StepDefinition + " Экспорт");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ПрефиксКоментария + "	//Ванесса.ПосмотретьЗначение(Парам01,Истина);");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ПрефиксКоментария + "	ВызватьИсключение ""Не реализовано."";");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ПрефиксКоментария + "КонецПроцедуры");
	
	Если ЭтоУФ Тогда
		//ТелоМодуля = ЗначениеВСтрокуВнутр(ТелоМодуля);
		СтруктураОписанияEpf.ТелоМодуля = ЗначениеВСтрокуВнутр(ТелоМодуля);
	КонецЕсли;	 
КонецПроцедуры

Функция ИнкрементЗначения(Зн,Инкремент)
	Зн = Зн + Инкремент;
	Возврат Зн;
КонецФункции

Функция СравнитьПутиФайлов(Знач Путь1, Знач Путь2)
	
	Возврат УниверсальноеПолноеИмяФайла(Путь1, Истина) = УниверсальноеПолноеИмяФайла(Путь2, Истина);
	

КонецФункции

Процедура ЗаполнитьПроцедуруПолучитьСписокТестов(ТелоМодуля,Снипеты,ЭтоУФ,ИмяФайлаФичи,СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур) Экспорт
	Если ЭтоУФ Тогда
		ТелоМодуля = ЗначениеИзСтрокиВнутр(ТелоМодуля);
	КонецЕсли;	 
	ТелоМодуля.Сортировать("НомСтр");
	
	
	
	КодПроцедурыПолучитьСписокТестов = Новый ТаблицаЗначений;
	КодПроцедурыПолучитьСписокТестов.Колонки.Добавить("Стр");
	
	
	
	НашелПроцедуруПолучитьСписокТестов = Ложь;
	НомерСтрокиНачалоФункции           = -1; 
	
	НашелКонецФункции                  = Ложь;
	НомерСтрокиКонецФункции            = -1; 
	
	Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
		Стр = НРег(СокрЛП(СтрТелоМодуля.Стр));
		Если (Найти(Стр,"функция") > 0) и (Найти(Стр,"получитьсписоктестов(") > 0) Тогда
			НашелПроцедуруПолучитьСписокТестов = Истина;
			НомерСтрокиНачалоФункции           = СтрТелоМодуля.НомСтр;
			Продолжить;
		КонецЕсли;
		
		
		Если НашелПроцедуруПолучитьСписокТестов Тогда
			СтрКодПроцедурыПолучитьСписокТестов     = КодПроцедурыПолучитьСписокТестов.Добавить();
			СтрКодПроцедурыПолучитьСписокТестов.Стр = СтрТелоМодуля.Стр;
		КонецЕсли;	 
		
		Если НашелПроцедуруПолучитьСписокТестов Тогда
			Если Стр = "конецфункции" Тогда
				НашелКонецФункции       = Истина;
				НомерСтрокиКонецФункции = СтрТелоМодуля.НомСтр;
				Прервать;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	
	Если Не НашелПроцедуруПолучитьСписокТестов Тогда
		СтрОшибки = "Не нашел функцию ""ПолучитьСписокТестов"".";
		Сообщить(СтрОшибки);
		ВызватьИсключение СтрОшибки;
	КонецЕсли;	 
	Если Не НашелКонецФункции Тогда
		СтрОшибки = "Не нашел конец функции ""ПолучитьСписокТестов"".";
		Сообщить(СтрОшибки);
		ВызватьИсключение СтрОшибки;
	КонецЕсли;	 
	
	
	СтрокиДляУдаления = Новый Массив;
	Для каждого СтрКодПроцедурыПолучитьСписокТестов Из КодПроцедурыПолучитьСписокТестов Цикл
		СтрокаКода = СокрЛП(НРег(СтрКодПроцедурыПолучитьСписокТестов.Стр));
		Если Лев(СтрокаКода,2) = "//" Тогда
			СтрокиДляУдаления.Добавить(СтрКодПроцедурыПолучитьСписокТестов);
			Продолжить;
		КонецЕсли;	 
		
		Если Найти(СтрокаКода,НРег("ДобавитьШагВМассивТестов")) = 0 Тогда
			СтрокиДляУдаления.Добавить(СтрКодПроцедурыПолучитьСписокТестов);
			Продолжить;
		КонецЕсли;	 
		
		Нашли = Ложь;
		Для каждого Снипет Из Снипеты Цикл
			StepDefinition = НРег(Снипет.StepDefinition);
			
			Если Найти(СтрокаКода,StepDefinition) > 0 Тогда //значит этот шаг надо удалить из КодПроцедурыПолучитьСписокТестов
				Нашли = Истина;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;
		
		Если Нашли Тогда
			СтрокиДляУдаления.Добавить(СтрКодПроцедурыПолучитьСписокТестов);
		КонецЕсли;	 
	КонецЦикла;
	
	Для каждого СтрКодПроцедурыПолучитьСписокТестов Из СтрокиДляУдаления Цикл
		КодПроцедурыПолучитьСписокТестов.Удалить(СтрКодПроцедурыПолучитьСписокТестов);
	КонецЦикла;
	
	
	
	
	//очистим содержимое функции
	КолСтрок = ТелоМодуля.Количество();
	Для Ккк = 0 По КолСтрок-1 Цикл
		ИдСтроки = КолСтрок - Ккк - 1;
		
		СтрокаМодуля = ТелоМодуля[ИдСтроки];
		Если (СтрокаМодуля.НомСтр > НомерСтрокиНачалоФункции) и (СтрокаМодуля.НомСтр < НомерСтрокиКонецФункции) Тогда
			ТелоМодуля.Удалить(СтрокаМодуля);
		КонецЕсли;	 
	КонецЦикла;
	
	
	
	НомСтр = НомерСтрокиНачалоФункции;
	
	
	
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	Ванесса = КонтекстФреймворкаBDD;",ИнкрементЗначения(НомСтр,1));
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	",ИнкрементЗначения(НомСтр,1));
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	ВсеТесты = Новый Массив;",ИнкрементЗначения(НомСтр,1));
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"",ИнкрементЗначения(НомСтр,1));
	
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	//описание параметров",ИнкрементЗначения(НомСтр,1));
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);",ИнкрементЗначения(НомСтр,1));
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"",ИнкрементЗначения(НомСтр,1));
	
	
	ФайлФичи = Новый Файл(ИмяФайлаФичи);
	ИмяEPFФичи = ФайлФичи.Путь + "step_definitions/" + ФайлФичи.ИмяБезРасширения + ".epf";
	
	
	//добавим строки, которые были раньше, но их нет в текущей фиче
	//это бывает, когда мы хотим добавить шаг,в библиотеку сначала из одной фичи, потом из другой
	Для каждого СтрКодПроцедурыПолучитьСписокТестов Из КодПроцедурыПолучитьСписокТестов Цикл
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,СтрКодПроцедурыПолучитьСписокТестов.Стр,ИнкрементЗначения(НомСтр,1));
	КонецЦикла;
	
	
	
	МассивДобавленыхСнипетов = Новый Массив;
	Для каждого Снипет Из Снипеты Цикл
		СнипетУжеБылВДругойEPF = ?(СокрЛП(Снипет.АдресСнипета) = "",Ложь,Истина);
		Если СравнитьПутиФайлов(ИмяEPFФичи,Снипет.АдресСнипета) Тогда
			СнипетУжеБылВДругойEPF = Ложь;
		КонецЕсли;	
		
		Если Не СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур Тогда
			Если СнипетУжеБылВДругойEPF Тогда
				Продолжить;
			КонецЕсли;  
		КонецЕсли;  
		
		ПрефиксКомментарий     = ?(СнипетУжеБылВДругойEPF,"//","");
		ПостфиксКомментарий    = ?(СнипетУжеБылВДругойEPF," //уже был в " + Снипет.АдресСнипета,"");
		
		
		Зн = МассивДобавленыхСнипетов.Найти(Снипет.StepDefinition);
		Если Зн <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		ИмяПроцедуры = Снипет.StepDefinition;
		Поз = Найти(ИмяПроцедуры,"(");
		ИмяПроцедуры = Лев(ИмяПроцедуры,Поз-1);
		
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ПрефиксКомментарий + "	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""" + Снипет.StepDefinition + """,""" + ИмяПроцедуры + """,""" + СтрЗаменить(Снипет.Шаг,"""","""""") + ""","""","""");" + ПостфиксКомментарий,ИнкрементЗначения(НомСтр,1));
		МассивДобавленыхСнипетов.Добавить(Снипет.StepDefinition);
	КонецЦикла;
	
	
	
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"",ИнкрементЗначения(НомСтр,1));
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	Возврат ВсеТесты;",ИнкрементЗначения(НомСтр,1));
	
	
	ТелоМодуля.Сортировать("НомСтр");
	
	
	
	
	Если ЭтоУФ Тогда
		ТелоМодуля = ЗначениеВСтрокуВнутр(ТелоМодуля);
	КонецЕсли;	 
	
	
	
КонецПроцедуры

Процедура УдалитьИсходникиEPF(ИмяФайлаEpf)
	ФайлEpf = Новый Файл(ИмяФайлаEpf);
	Если Не ФайлEpf.Существует() Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Файл <%1> не существует.");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайлаEpf);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
	
	
	Путь = ФайлEpf.Путь + "Src";
	ФайлИсходники = Новый Файл(Путь);
	Если ФайлИсходники.Существует() Тогда
		УдалитьФайлы(Путь);
	КонецЕсли;	 
КонецПроцедуры

Процедура ВыполнитьКомандуОС(Стр)
	#Если Клиент Тогда
		КомандаСистемы(Стр);
	#КонецЕсли
	
	Возврат;

	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Если (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86) или (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64) Тогда
		Попытка
			ИмяВременногоBAT = ПолучитьИмяВременногоФайла("bat");
			
			ЗТ = Новый ЗаписьТекста(ИмяВременногоBAT, КодировкаТекста.ANSI, , Ложь); 
			ЗТ.Закрыть();
			ЗТ = Новый ЗаписьТекста(ИмяВременногоBAT, КодировкаТекста.UTF8, , Истина); 
			ЗТ.ЗаписатьСтроку("chcp 65001"); 
			ЗТ.ЗаписатьСтроку(Стр); 
			ЗТ.Закрыть();
			
			WshShell = Новый COMОбъект("WScript.Shell");
			//Сообщить(Стр);
			WshShell.Run("""" + ИмяВременногоBAT + """",7,-1);	
			УдалитьФайлы(ИмяВременногоBAT);
		Исключение
			#Если Клиент Тогда
			КомандаСистемы(Стр);
			#КонецЕсли
		КонецПопытки;
	Иначе
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("Команда системы реализована только под Windows.");
	КонецЕсли;	 
	
КонецПроцедуры

Функция УстановленOneScript()

	ИнструментУстановлен = Ложь;
	
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	Стр = "oscript > """ + ИмяФайлаЛога + """ 2>&1";
	
	ВыполнитьКомандуОС(Стр);
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаЛога,"UTF-8");
	
	СтрокаВозврата = Неопределено;
	
	КолСтрокСчитано = 0;
	Стр = Текст.ПрочитатьСтроку();
		
	Если Стр <> Неопределено Тогда
		Образец = "1Script Execution Engine";
		Если Лев(Стр, СтрДлина(Образец)) = Образец Тогда
			Текст.Закрыть();
			ИнструментУстановлен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УдалитьФайлы(ИмяФайлаЛога);
	
	Возврат ИнструментУстановлен;

КонецФункции // УстановленOneScript()

Процедура СделатьGenerateEpf(СтруктураПараметров)
	
	Если Не УстановленOneScript() Тогда
		Сообщить(ПолучитьТекстСообщенияПользователю("Для генерации EPF должен быть установлен 1Script. В cmd должна выполняться команда: oscript"));
		Возврат;
	КонецЕсли;
	
	ГенерироватьУФ          = СтруктураПараметров.ГенерироватьУФ;
	ШагСтрокДляМодуля       = СтруктураПараметров.ШагСтрокДляМодуля;
	DebugLog                = СтруктураПараметров.DebugLog;
	КаталогФич              = СтруктураПараметров.КаталогФич;
	КонтекстVanessaBehavoir = СтруктураПараметров.КонтекстVanessaBehavoir;
	КаталогиБиблиотек       = СтруктураПараметров.КаталогиБиблиотек;
	
	СоздаватьОбластиПриГенерацииКода = СтруктураПараметров.СоздаватьОбластиПриГенерацииКода;
	
	СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур       = СтруктураПараметров.СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур;
	
	ТаблицаКонтекстовОбработок = Новый Массив;
	
	ТаблицаИзвестныхStepDefinition = СтруктураПараметров.ТаблицаИзвестныхStepDefinition;
	ТаблицаВерсийEPF               = СтруктураПараметров.ТаблицаВерсийEPF;
	
	ПолучитьУжеСуществующиеСнипетыИзОбработок(КаталогФич,ТаблицаКонтекстовОбработок,ТаблицаИзвестныхStepDefinition,ТаблицаВерсийEPF,КонтекстVanessaBehavoir);
	Для каждого Элем Из КаталогиБиблиотек Цикл
		ПолучитьУжеСуществующиеСнипетыИзОбработок(Элем.Значение,ТаблицаКонтекстовОбработок,ТаблицаИзвестныхStepDefinition,ТаблицаВерсийEPF,КонтекстVanessaBehavoir);
	КонецЦикла;
	
	
	МассивФич   = СтруктураПараметров.МассивФич;
	МассивШагов = СтруктураПараметров.МассивШагов;
	Ном = 0;
	Для каждого ИмяФайлаФичи Из МассивФич Цикл
		Ном = Ном+1;
		Шаги = МассивШагов.Получить(Ном-1);
		
		ФайлФичи       = Новый Файл(ИмяФайлаФичи);
		ИмяТекущейФичи = ФайлФичи.ИмяБезРасширения;
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Работаю по фиче: %1");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",ИмяФайлаФичи);
		СделатьСообщение(ТекстСообщения);
		
		МассивДляСозданияEpf = Новый Массив;
		ОтносительныйКаталогФичи = ФайлФичи.Путь;
		Если Прав(ОтносительныйКаталогФичи,1) = "\" ИЛИ Прав(ОтносительныйКаталогФичи, 1) = "/" Тогда
			ОтносительныйКаталогФичи = Лев(ОтносительныйКаталогФичи,СтрДлина(ОтносительныйКаталогФичи)-1);
		КонецЕсли;

		ОтносительныйКаталогФичи = СтрЗаменить(ОтносительныйКаталогФичи, "\", "/");

		Отладка("ОтносительныйКаталогФичи=" + ОтносительныйКаталогФичи);
		СтруктураОписанияEpf = СоздатьСтруктураОписанияEpf(ОтносительныйКаталогФичи,ФайлФичи.ИмяБезРасширения,Истина,СоздаватьОбластиПриГенерацииКода);
		
		
		Снипеты = СнипетыПолучитьСнипетыПоШагам(Шаги);
		ЗаполнитьПроцедуруПолучитьСписокТестов(СтруктураОписанияEpf.ТелоМодуля,Снипеты,,ИмяФайлаФичи,СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);
		Для каждого ЭлемСнипет Из Снипеты Цикл
			ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf,ЭлемСнипет.StepDefinition,ЭлемСнипет.Шаг,ШагСтрокДляМодуля,ЭлемСнипет.АдресСнипета,СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур,ГенерироватьУФ);
		КонецЦикла;
		
		БылиОшибки = Ложь;
		СоздатьФайлыОбработок(БылиОшибки,СтруктураОписанияEpf);
		
		
		Если СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
			УдалитьИсходникиEPF(СтруктураОписанияEpf.ИмяФайлаEpf);
		КонецЕсли;	 
	КонецЦикла;
	
	
	СделатьСообщение("Создание epf по фичам закончено.");
	
КонецПроцедуры

Функция СоздатьТаблицуКлючевыхСлов()
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("Тип");
	Тзн.Колонки.Добавить("Слово");
	Тзн.Колонки.Добавить("Уникально");
	
	Тзн.Индексы.Добавить("Слово");
	
	Возврат Тзн;
КонецФункции	

Функция РассчитатьМаксДлинаСлова(Тзн)
	Кол = 0;
	Для Каждого СтрТзн Из Тзн Цикл
		Длина = СтрДлина(СтрТзн.Слово);
		Если Кол < Длина Тогда
			Кол = Длина;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Кол;
КонецФункции	

Функция ПолучитьКлючевыеСловаПоТипам(Тзн)
	СоответствиеТипов = Новый Соответствие;
	Для Каждого СтрТзн Из Тзн Цикл
		Тип = СтрТзн.Тип;
		
		
		Если СоответствиеТипов.Получить(Тип) = Неопределено Тогда
			СоответствиеТипов.Вставить(Тип,Новый Массив);
		КонецЕсли;	 
		
		МассивСоответствия = СоответствиеТипов.Получить(Тип);
		МассивСоответствия.Добавить(СтрТзн.Слово);
	КонецЦикла;	
	
	Возврат СоответствиеТипов;
КонецФункции	

Функция КешПоискаКлючевыхСлов(Тзн)
	Стр = "";
	Соответствие = Новый Соответствие;
	НомерСлова = 0;
	Для Каждого СтрТзн Из Тзн Цикл
		НомерСлова = НомерСлова + 1;
		Стр = Стр + ";";
		Соответствие.Вставить(СтрДлина(Стр),НомерСлова);
		Стр = Стр + СтрТзн.Слово;
	КонецЦикла;	 
	
	Структура = Новый Структура;
	Структура.Вставить("СтрокаПоиска",Стр);
	Структура.Вставить("НомераСлов",Соответствие);
	Возврат Структура; 
КонецФункции	 

Функция СоздатьТаблицуКлючевыхСлов_ru()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"и","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"когда","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"тогда","then");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"затем","then");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"дано","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"функция","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"функционал","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"функциональность","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"свойство","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"предыстория","background");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"контекст","background");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"сценарий","scenario");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"структура сценария","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"примеры","examples");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"допустим","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"пусть","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"если","if");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"иначеесли","elseif");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"иначе","else");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"то","then");

	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"к тому же","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"также","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"но","but");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"а","but");
	
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам,КешПоискаКлючевыхСлов",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн),КешПоискаКлючевыхСлов(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_en()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"feature","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Functionality","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Business Need","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Ability","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"background","background");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"scenario outline","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"scenario","scenario",Ложь);
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"examples","examples");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"given","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"when","when");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"then","then");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"and","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"but","but");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"if","if");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"elseif","elseif");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"else","else");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам,КешПоискаКлючевыхСлов",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн),КешПоискаКлючевыхСлов(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_uk()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"функціонал","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"передумова","background");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"сценарій","scenario");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"структура сценарію","scenario_outline");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"приклади","examples");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"припустимо","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"дано","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"припустимо, що","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"нехай","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"якщо","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"коли","when");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"то","then");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"тоді","then");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"і","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"а також","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"та","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"але","but");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам,КешПоискаКлючевыхСлов",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн),КешПоискаКлючевыхСлов(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_ro()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Și","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Si","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Şi","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Context","background");
	
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dar","but");
	
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Exemple","examples");
	
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funcționalitate","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Functionalitate","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funcţionalitate","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dat fiind","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Date fiind","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dati fiind","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dați fiind","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Daţi fiind","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Scenariu","scenario");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Structura scenariu","scenario_outline");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Structură scenariu","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Atunci","then");
	
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Cand","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Când","when");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам,КешПоискаКлючевыхСлов",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн),КешПоискаКлючевыхСлов(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_de()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Und","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Grundlage","background");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Aber","but");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Beispiele","examples");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funktionalität","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Angenommen","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Gegeben sei","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Gegeben seien","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Szenario","scenario");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Szenariogrundriss","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dann","then");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Wenn","when");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам,КешПоискаКлючевыхСлов",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн),КешПоискаКлючевыхСлов(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_lv()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Un","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Konteksts","background");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Situācija","background");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Bet","but");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Piemēri","examples");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Paraugs","examples");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funkcionalitāte","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Fīča","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Kad","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Scenārijs","scenario");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Scenārijs pēc parauga","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Tad","then");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Ja","when");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам,КешПоискаКлючевыхСлов",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн),КешПоискаКлючевыхСлов(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_it()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"E","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Contesto","background");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Ma","but");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Esempi","examples");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funzionalità","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dato","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Data","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dati","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Date","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Scenario","scenario");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Schema dello scenario","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Allora","then");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Quando","when");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам,КешПоискаКлючевыхСлов",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн),КешПоискаКлючевыхСлов(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_pl()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Oraz","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"I","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Założenia","background");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Ale","but");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Przykłady","examples");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Właściwość","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funkcja","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Aspekt","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Potrzeba biznesowa","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Zakładając","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Mając","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Zakładając, że","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Scenariusz","scenario");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Szablon scenariusza","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Wtedy","then");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Jeżeli","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Jeśli","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Gdy","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Kiedy","when");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам,КешПоискаКлючевыхСлов",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн),КешПоискаКлючевыхСлов(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_vi()
	Тзн = СоздатьТаблицуКлючевыхСлов();
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Và","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Bối cảnh","background");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Nhưng","but");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dữ liệu","examples");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Tính năng","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Biết","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Cho","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Tình huống","scenario");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Kịch bản","scenario");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Khung tình huống","scenario_outline");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Khung kịch bản","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Thì","then");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Khi","when");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Nếu","if");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"NóiCáchKhácNếu","elseif");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"NóiCáchKhác","else");
	
	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам,КешПоискаКлючевыхСлов",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн),КешПоискаКлючевыхСлов(Тзн));
КонецФункции

Функция РежимСовестимостиПозволяетИспользоватьНовыеСтроковыеФункции()
	ТекущийРежимСовместимости = Неопределено;
	
	Попытка
		ТекущийРежимСовместимости = Вычислить("Метаданные.РежимСовместимости");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		РежимыСовестимости = Метаданные.СвойстваОбъектов.РежимСовместимости;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		Если ТекущийРежимСовместимости = РежимыСовестимости.Версия8_1 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_2_13 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_2_16 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_3_1 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_3_2 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_3_3 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_3_4 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_3_5 Тогда
			Возврат Ложь;
		КонецЕсли;	 
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции	

//перевод текста Gherkin
Функция СоздатьТаблицаПеревода()
	ТаблицаПеревода = Новый ТаблицаЗначений;
	ТаблицаПеревода.Колонки.Добавить("ОригиналРусскийШаг");
	ТаблицаПеревода.Колонки.Добавить("ОригиналРусскийШагПредставлениеДляПеревода");
	ТаблицаПеревода.Колонки.Добавить("ОригиналРусскийШагНРег");
	ТаблицаПеревода.Колонки.Добавить("ОригиналРусскийОписание");
	ТаблицаПеревода.Колонки.Добавить("StepDefinitionРусский");
	ТаблицаПеревода.Колонки.Добавить("СтрокаДляПоискаРусский");
	ТаблицаПеревода.Колонки.Добавить("ОбработаннаяСтрокаПараметровРусский");
	
	ТаблицаПеревода.Колонки.Добавить("ТекстПереводаШаг");
	ТаблицаПеревода.Колонки.Добавить("ТекстПереводаШагНРег");
	ТаблицаПеревода.Колонки.Добавить("ТекстПереводаОписание");
	ТаблицаПеревода.Колонки.Добавить("StepDefinitionПеревод");
	ТаблицаПеревода.Колонки.Добавить("СтрокаДляПоискаПеревод");
	ТаблицаПеревода.Колонки.Добавить("ОбработаннаяСтрокаПараметровПеревод");
	
	ТаблицаПеревода.Колонки.Добавить("ДанныеОбработкиПараметровРусский");
	ТаблицаПеревода.Колонки.Добавить("ДанныеОбработкиПараметровПеревод");
	ТаблицаПеревода.Колонки.Добавить("КлючевоеСлово");
	ТаблицаПеревода.Колонки.Добавить("НомерСтрокиВФайлеПеревода",Новый ОписаниеТипов("Число"));
	ТаблицаПеревода.Колонки.Добавить("МассивСоответствийПозицийПараметров");
	
	
	ТаблицаПеревода.Индексы.Добавить("ОригиналРусскийШагНРег");
	ТаблицаПеревода.Индексы.Добавить("StepDefinitionРусский");
	ТаблицаПеревода.Индексы.Добавить("СтрокаДляПоискаРусский");
	ТаблицаПеревода.Индексы.Добавить("СтрокаДляПоискаПеревод");
	
	Возврат ТаблицаПеревода;
КонецФункции	

Функция ВставитьВПараметрыСимволыПроцента(Знач Стр)
	ЗначенияПараметров = Новый СписокЗначений;
	ДанныеОбработкиПараметров = Новый Структура;
	
	МассивСтрокОригинал = РазложитьСтрокуВМассивПодстрок(Стр,Символы.ПС);
	ПерваяЧастьСтроки = МассивСтрокОригинал[0];
	ВтораяЧастьСтроки = "";
	Для Ккк = 1 По МассивСтрокОригинал.Количество()-1 Цикл
		ВтораяЧастьСтроки = ВтораяЧастьСтроки + МассивСтрокОригинал[Ккк];
		Если Ккк < МассивСтрокОригинал.Количество()-1 Тогда
			ВтораяЧастьСтроки = ВтораяЧастьСтроки + Символы.ПС;
		КонецЕсли;	 
	КонецЦикла;	
	
	StepDefinition = ПолучитьStepDefinitionПоСтроке(ПерваяЧастьСтроки,ЗначенияПараметров,,,,ДанныеОбработкиПараметров);
	
	
	
	КолПараметров        = 0;
	КолПараметровЧисло   = 0;
	КолПараметровСтрокаА = 0;
	КолПараметровСтрокаК = 0;
	КолПараметровДата    = 0;
	
	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(ДанныеОбработкиПараметров.ОбработаннаяСтрокаПараметров," ",Истина);
	
	Ид = -1;
	Для Каждого Элем Из МассивПодстрок Цикл
		Ид = Ид + 1;
		
		Тип = Неопределено;
		Если Элем = "||ПараметрСтрокаК||" Тогда
			КолПараметров        = КолПараметров        + 1;
			КолПараметровСтрокаК = КолПараметровСтрокаК + 1;
			
			ЗначениеПараметра = ДанныеОбработкиПараметров.ПараметрыСтрокиК[КолПараметровСтрокаК-1];
			
			Тип = "СтрокаК";
			
		ИначеЕсли Элем = "||ПараметрСтрокаА||" Тогда
			КолПараметров        = КолПараметров        + 1;
			КолПараметровСтрокаА = КолПараметровСтрокаА + 1;
			
			ЗначениеПараметра = ДанныеОбработкиПараметров.ПараметрыСтрокиА[КолПараметровСтрокаА-1];
			
			Тип = "СтрокаА";
			
		ИначеЕсли Элем = "||ПараметрЧисло||" Тогда
			КолПараметров      = КолПараметров      + 1;
			КолПараметровЧисло = КолПараметровЧисло + 1;
			
			ЗначениеПараметра = ДанныеОбработкиПараметров.ПараметрыЧисла[КолПараметровЧисло-1];
			
			Тип = "СтрокаК";
		ИначеЕсли Элем = "||ПараметрДата||" Тогда
			КолПараметров      = КолПараметров      + 1;
			КолПараметровДата  = КолПараметровДата + 1;
			
			ЗначениеПараметра = ДанныеОбработкиПараметров.ПараметрыДаты[КолПараметровДата-1];
			
			Тип = "СтрокаК";
		КонецЕсли;	 
		
		
		
		Если Тип = Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Лев(ЗначениеПараметра,1) <> "%" Тогда
			ЗначениеПараметра = "%" + XMLСтрока(КолПараметров) + " " + ЗначениеПараметра;
		КонецЕсли;	 
		
		
		Представление      = ПолучитьПредставлениеПараметраПриПереводе(ЗначениеПараметра,Тип);
		МассивПодстрок[Ид] = Представление;
	КонецЦикла;		
	
	
	Ид = -1;
	Для Каждого Элем Из МассивПодстрок Цикл
		Ид = Ид + 1;
		МассивПодстрок[Ид] = СтрЗаменить(МассивПодстрок[Ид],"|||ЗаменаПробела|||"," ");
	КонецЦикла;	
	
	Стр = "";
	Для Каждого Элем Из МассивПодстрок Цикл
		Стр = Стр + Элем + " ";
	КонецЦикла;	
	
	Стр = Лев(Стр,СтрДлина(Стр)-1);
	Если ВтораяЧастьСтроки <> "" Тогда
		Стр = Стр + Символы.ПС + ВтораяЧастьСтроки;
	КонецЕсли;	 
	
	Возврат Стр;
КонецФункции	

Процедура ПроверитьТаблицаПереводаНаДубли(ТаблицаПеревода)
	КопияТаблицаПеревода = ТаблицаПеревода.Скопировать();
	КопияТаблицаПеревода.Колонки.Добавить("КоличествоРусскихШаговНаОдинСнипетПеревода",Новый ОписаниеТипов("Число")); 
	Для Каждого СтрокаКопияТаблицаПеревода Из КопияТаблицаПеревода Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКопияТаблицаПеревода.СтрокаДляПоискаПеревод) Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если СтрокаКопияТаблицаПеревода.ОригиналРусскийОписание = "Категория шагов" Тогда
		ИначеЕсли СтрокаКопияТаблицаПеревода.ОригиналРусскийОписание = "Специальный текст" Тогда
		Иначе	
			СтрокаКопияТаблицаПеревода.КоличествоРусскихШаговНаОдинСнипетПеревода = 1;
		КонецЕсли;	 
	КонецЦикла;	
	
	КопияТаблицаПеревода.Свернуть("СтрокаДляПоискаПеревод","КоличествоРусскихШаговНаОдинСнипетПеревода");	
	
	КолСтрокШапки = 1;
	Для Каждого СтрокаКопияТаблицаПеревода Из КопияТаблицаПеревода Цикл
		Если СтрДлина(СтрокаКопияТаблицаПеревода.СтрокаДляПоискаПеревод) <= 1 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если СтрокаКопияТаблицаПеревода.КоличествоРусскихШаговНаОдинСнипетПеревода > 1 Тогда
			МассивСтрок = ТаблицаПеревода.НайтиСтроки(Новый Структура("СтрокаДляПоискаПеревод",СтрокаКопияТаблицаПеревода.СтрокаДляПоискаПеревод));
			
			СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(СтрокаКопияТаблицаПеревода.СтрокаДляПоискаПеревод,"СтрокаДляПоискаПеревод");
			СтрокаШаг = "Шаги имеющие одинаковый перевод: <" + СтрокаТаблицаПеревода.ТекстПереводаШаг + ">" + Символы.ПС;
			Для Каждого СтрокаТаблицаПеревода Из МассивСтрок Цикл
				НомерСтроки = ТаблицаПеревода.Индекс(СтрокаТаблицаПеревода)+1+КолСтрокШапки;
				СтрокаШаг = СтрокаШаг + СтрокаТаблицаПеревода.ОригиналРусскийШаг + " <Строка №" + XMLСтрока(НомерСтроки) + ">" + Символы.ПС;  
			КонецЦикла;	
			
			Сообщить(СтрокаШаг);
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры

Процедура ПрочитатьФайлПеревода(ДанныеПеревода)
	Если ДанныеПеревода.ДвоичныеДанныеФайлПеревода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПеревода.ДвоичныеДанныеФайлПеревода[ДанныеПеревода.ЯзыкПеревода] = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	ТаблицаПеревода = ДанныеПеревода.ТаблицаПеревода;
	ТабДок = ДанныеПеревода.ДвоичныеДанныеФайлПеревода[ДанныеПеревода.ЯзыкПеревода];
	
	Для Ккк = 2 По ТабДок.ВысотаТаблицы Цикл
		ОригиналРусскийШаг      = СокрЛП(ТабДок.Область(Ккк,1,Ккк,1).Текст);
		ОригиналРусскийОписание = СокрЛП(ТабДок.Область(Ккк,2,Ккк,2).Текст);
		ТекстПереводаШаг        = СокрЛП(ТабДок.Область(Ккк,3,Ккк,3).Текст);
		ТекстПереводаОписание   = СокрЛП(ТабДок.Область(Ккк,4,Ккк,4).Текст);
		
		
		Если НЕ ЗначениеЗаполнено(ОригиналРусскийШаг) Тогда
			Продолжить;
		КонецЕсли;	 
		
		//обновим описание шагов если это возможно
		
		ОписаниеШагаРусский  = ПолучитьОписаниеШагаПоСтроке(СокрЛП(ПолучитьПервуюСтрокуИзМногострочной(ОригиналРусскийШаг)));
		
		Если ДанныеПеревода.Свойство("ТаблицаИзвестныхStepDefinition") Тогда
			ТаблицаИзвестныхStepDefinition = ДанныеПеревода.ТаблицаИзвестныхStepDefinition;
			
			Поз = Найти(ОписаниеШагаРусский.StepDefinition,"(");
			СтрокаДляПоискаРусский = Лев(НРег(ОписаниеШагаРусский.StepDefinition),Поз-1);
			
			СтрокаТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinition.Найти(СтрокаДляПоискаРусский,"СтрокаДляПоиска");
			Если СтрокаТаблицаИзвестныхStepDefinition <> Неопределено Тогда
				ОригиналРусскийШаг      = СокрЛП(СтрокаТаблицаИзвестныхStepDefinition.ПредставлениеТеста);
				Если ЗначениеЗаполнено(СтрокаТаблицаИзвестныхStepDefinition.ОписаниеШага) Тогда
					//шаг мог быть переименован, и тогда у варианта  из ТаблицаИзвестныхStepDefinition может не быть описания
					ОригиналРусскийОписание = СтрокаТаблицаИзвестныхStepDefinition.ОписаниеШага;
				КонецЕсли;	 
				ОписаниеШагаРусский     = ПолучитьОписаниеШагаПоСтроке(СокрЛП(ПолучитьПервуюСтрокуИзМногострочной(ОригиналРусскийШаг)));
			КонецЕсли;
		КонецЕсли;	 
		
		
		СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(НРег(ОригиналРусскийШаг),"ОригиналРусскийШагНРег");
		
		Если СтрокаТаблицаПеревода = Неопределено Тогда
			СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(ОписаниеШагаРусский.StepDefinition,"StepDefinitionРусский");
			Если СтрокаТаблицаПеревода = Неопределено Тогда
				СтрокаТаблицаПеревода = ТаблицаПеревода.Добавить();
			ИначеЕсли СтрокаТаблицаПеревода.ОригиналРусскийОписание = "Категория шагов" Тогда
				СтрокаТаблицаПеревода = ТаблицаПеревода.Добавить();
			КонецЕсли;	 
		КонецЕсли;	 
		
		СтрокаТаблицаПеревода.ОригиналРусскийШагНРег          = НРег(ОригиналРусскийШаг);
		СтрокаТаблицаПеревода.ТекстПереводаШагНРег            = НРег(ТекстПереводаШаг);
		СтрокаТаблицаПеревода.ОригиналРусскийШаг              = ОригиналРусскийШаг;
		СтрокаТаблицаПеревода.ТекстПереводаШаг                = ТекстПереводаШаг;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицаПеревода.ОригиналРусскийОписание) Тогда
			СтрокаТаблицаПеревода.ОригиналРусскийОписание = ОригиналРусскийОписание;
		КонецЕсли;	 
		СтрокаТаблицаПеревода.ТекстПереводаОписание   = ТекстПереводаОписание;
		
		СтрокаТаблицаПеревода.НомерСтрокиВФайлеПеревода = Ккк;
	КонецЦикла;	
	
	
	Для Каждого СтрокаТаблицаПеревода Из ТаблицаПеревода Цикл
		СтрокаТаблицаПеревода.ОригиналРусскийШагПредставлениеДляПеревода = СтрокаТаблицаПеревода.ОригиналРусскийШаг; 
		
		Если СтрокаТаблицаПеревода.ОригиналРусскийОписание = "Категория шагов" Тогда
		ИначеЕсли СтрокаТаблицаПеревода.ОригиналРусскийОписание = "Специальный текст" Тогда
		Иначе	
			СтрокаТаблицаПеревода.ОригиналРусскийШагПредставлениеДляПеревода = ВставитьВПараметрыСимволыПроцента(СтрокаТаблицаПеревода.ОригиналРусскийШаг); 
		КонецЕсли;	 
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьПервуюСтрокуИзМногострочной(Знач Стр)
	Если Найти(Стр,Символы.ПС) = 0 Тогда
		Возврат Стр;
	КонецЕсли;	 
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Стр,Символы.ПС);
	Возврат МассивСтрок[0];
КонецФункции	

Процедура ДобавитьВОписаниеШагаОчередностьПараметров(ОписаниеШага)
	МассивСоответствийПозицийПараметров = Новый Массив;
	НомерПараметра = 0;
	Для Каждого ЗначениеПараметра Из ОписаниеШага.ЗначенияПараметров Цикл
		
		НомерПараметра = НомерПараметра + 1;
		ТекЗначение    = ЗначениеПараметра.Значение.Значение;
		НоваяПозиция   = -1;
		
		Если Лев(ТекЗначение,1) = "%" Тогда
			МассивСтрок = РазложитьСтрокуВМассивПодстрок(ТекЗначение," ");
			Попытка
				НоваяПозиция = Число(Сред(МассивСтрок[0],2));
			Исключение
				Сообщить(ОписаниеШага.ТекстПереводаШаг);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
			МассивСоответствийПозицийПараметров.Добавить(НоваяПозиция);
		КонецЕсли;	 
	КонецЦикла;	
	
	ОписаниеШага.Вставить("МассивСоответствийПозицийПараметров",МассивСоответствийПозицийПараметров);
КонецПроцедуры

Процедура ПолучитьСнипетыДляТаблицыПеревода(ДанныеПеревода)
	ТаблицаПеревода = ДанныеПеревода.ТаблицаПеревода;
	
	Для Каждого СтрокаТаблицаПеревода Из ТаблицаПеревода Цикл
		ТекущийЯзыкФичаФайла = "ru";
		ОписаниеШагаРусский  = ПолучитьОписаниеШагаПоСтроке(ПолучитьПервуюСтрокуИзМногострочной(СтрокаТаблицаПеревода.ОригиналРусскийШаг));
		СтрокаТаблицаПеревода.StepDefinitionРусский               = ОписаниеШагаРусский.StepDefinition;
		Поз = Найти(СтрокаТаблицаПеревода.StepDefinitionРусский,"(");
		СтрокаТаблицаПеревода.СтрокаДляПоискаРусский              = Лев(НРег(СтрокаТаблицаПеревода.StepDefinitionРусский),Поз-1);
		СтрокаТаблицаПеревода.ОбработаннаяСтрокаПараметровРусский = ОписаниеШагаРусский.ДанныеОбработкиПараметров.ОбработаннаяСтрокаПараметров;
		
		ТекущийЯзыкФичаФайла = ДанныеПеревода.ЯзыкПеревода;
		
		ИсходникДляПолученияStepDefinitionПеревод = СтрокаТаблицаПеревода.ТекстПереводаШаг;
		ИсходникДляПолученияStepDefinitionПеревод = СтрЗаменить(ИсходникДляПолученияStepDefinitionПеревод,"'","");
		
		ОписаниеШагаПеревод  = ПолучитьОписаниеШагаПоСтроке(ПолучитьПервуюСтрокуИзМногострочной(ИсходникДляПолученияStepDefinitionПеревод));
		
		
		ДобавитьВОписаниеШагаОчередностьПараметров(ОписаниеШагаПеревод);
		СтрокаТаблицаПеревода.StepDefinitionПеревод               = ОписаниеШагаПеревод.StepDefinition;
		СтрокаТаблицаПеревода.МассивСоответствийПозицийПараметров = ОписаниеШагаПеревод.МассивСоответствийПозицийПараметров;
		Поз = Найти(СтрокаТаблицаПеревода.StepDefinitionПеревод,"(");
		СтрокаТаблицаПеревода.СтрокаДляПоискаПеревод              = Лев(НРег(СтрокаТаблицаПеревода.StepDefinitionПеревод),Поз-1);
		СтрокаТаблицаПеревода.ОбработаннаяСтрокаПараметровПеревод = ОписаниеШагаПеревод.ДанныеОбработкиПараметров.ОбработаннаяСтрокаПараметров;
		
		
		СтрокаТаблицаПеревода.ДанныеОбработкиПараметровРусский = ОписаниеШагаРусский.ДанныеОбработкиПараметров;
		СтрокаТаблицаПеревода.ДанныеОбработкиПараметровПеревод = ОписаниеШагаПеревод.ДанныеОбработкиПараметров;
		СтрокаТаблицаПеревода.КлючевоеСлово                    = ОписаниеШагаРусский.КлючевоеСлово;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьПредставлениеПараметраПриПереводе(Значение,Тип)
	Если Тип = "СтрокаК" Тогда
		Возврат """" + ЭкранироватьСпецСимволыДляЗначенияШага(Значение) + """";
	ИначеЕсли Тип = "СтрокаА" Тогда
		Возврат "'" + ЭкранироватьСпецСимволыДляЗначенияШага(Значение) + "'";
	ИначеЕсли Тип = "Число" Тогда
		Возврат Значение;
	ИначеЕсли Тип = "Дата" Тогда
		Возврат Значение;
	Иначе
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не известный тип параметра в ПолучитьПредставлениеПараметраПриПереводе() <%1>");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",Тип);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	 
КонецФункции	

Функция ВернутьВСтрокуПараметры(Знач Стр,ДанныеПеревода,ДанныеОбработкиПараметровРусский,ДанныеОбработкиПараметровПеревод)
	КолПараметров        = 0;
	КолПараметровЧисло   = 0;
	КолПараметровСтрокаА = 0;
	КолПараметровСтрокаК = 0;
	КолПараметровДата    = 0;
	
	
	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(Стр," ",Истина);
	
	
	Ид = -1;
	Для Каждого Элем Из МассивПодстрок Цикл
		Ид = Ид + 1;
		
		Тип = Неопределено;
		Если Элем = "||ПараметрСтрокаК||" Тогда
			КолПараметров        = КолПараметров        + 1;
			КолПараметровСтрокаК = КолПараметровСтрокаК + 1;
			
			
			ЗначениеПараметраРусский = ДанныеОбработкиПараметровРусский.ЗначенияПараметров[КолПараметров-1].Значение.Значение;
			ЗначениеПараметраПеревод = ДанныеОбработкиПараметровПеревод.ЗначенияПараметров[КолПараметров-1].Значение.Значение;
			//ЗначениеПараметраРусский = ДанныеОбработкиПараметровРусский.ПараметрыСтрокиК[КолПараметровСтрокаК-1];
			//ЗначениеПараметраПеревод = ДанныеОбработкиПараметровПеревод.ПараметрыСтрокиК[КолПараметровСтрокаК-1];
			
			Тип = "СтрокаК";
			
		ИначеЕсли Элем = "||ПараметрСтрокаА||" Тогда
			КолПараметров        = КолПараметров        + 1;
			КолПараметровСтрокаА = КолПараметровСтрокаА + 1;
			
			ЗначениеПараметраРусский = ДанныеОбработкиПараметровРусский.ЗначенияПараметров[КолПараметров-1].Значение.Значение;
			ЗначениеПараметраПеревод = ДанныеОбработкиПараметровПеревод.ЗначенияПараметров[КолПараметров-1].Значение.Значение;
			//ЗначениеПараметраРусский = ДанныеОбработкиПараметровРусский.ПараметрыСтрокиА[КолПараметровСтрокаА-1];
			//ЗначениеПараметраПеревод = ДанныеОбработкиПараметровПеревод.ПараметрыСтрокиА[КолПараметровСтрокаА-1];
			
			Тип = "СтрокаА";
			
		ИначеЕсли Элем = "||ПараметрЧисло||" Тогда
			КолПараметров      = КолПараметров      + 1;
			КолПараметровЧисло = КолПараметровЧисло + 1;
			
			ЗначениеПараметраРусский = ДанныеОбработкиПараметровРусский.ЗначенияПараметров[КолПараметров-1].Значение.Значение;
			ЗначениеПараметраПеревод = ДанныеОбработкиПараметровПеревод.ЗначенияПараметров[КолПараметров-1].Значение.Значение;
			//ЗначениеПараметраРусский = ДанныеОбработкиПараметровРусский.ПараметрыЧисла[КолПараметровЧисло-1];
			//ЗначениеПараметраПеревод = ДанныеОбработкиПараметровПеревод.ПараметрыЧисла[КолПараметровЧисло-1];
			
			Тип = "Число";
		ИначеЕсли Элем = "||ПараметрДата||" Тогда
			КолПараметров      = КолПараметров      + 1;
			КолПараметровДата  = КолПараметровДата + 1;
			
			ЗначениеПараметраРусский = ДанныеОбработкиПараметровРусский.ЗначенияПараметров[КолПараметров-1].Значение.Значение;
			ЗначениеПараметраПеревод = ДанныеОбработкиПараметровПеревод.ЗначенияПараметров[КолПараметров-1].Значение.Значение;
			//ЗначениеПараметраРусский = ДанныеОбработкиПараметровРусский.ПараметрыДаты[КолПараметровДата-1];
			//ЗначениеПараметраПеревод = ДанныеОбработкиПараметровПеревод.ПараметрыДаты[КолПараметровДата-1];
			
			Тип = "Дата";
		КонецЕсли;	 
		
		
		
		Если Тип = Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		
		
		МассивСтрокЗначениеПараметраПеревод = РазложитьСтрокуВМассивПодстрок(ЗначениеПараметраПеревод," ");
		Если Лев(МассивСтрокЗначениеПараметраПеревод[0],1) = "%" Тогда
			//подставим значения, у которых указаны проценты первым символом
			//значит явно указан номер параметра
			
			НомерПараметра = Число(Сред(МассивСтрокЗначениеПараметраПеревод[0],2));
			
			ПараметрРусский = ДанныеОбработкиПараметровРусский.ЗначенияПараметров[НомерПараметра-1];
			Если ПараметрРусский.Значение.Тип  <> "Строка" Тогда
				Тип = ПараметрРусский.Значение.Тип;
			КонецЕсли;
			
			Если МассивСтрокЗначениеПараметраПеревод.Количество() = 1 Тогда
				//значит в качестве параметра указано просто %1 - т.е. только номер, но нет значения параметра, например: "%1 ЗначениеПараметра"
				//поэтому берём значение из русского варианта
				Значение = ПараметрРусский.Значение.Значение;
			Иначе
				Если ДанныеПеревода.Свойство("ФормированиеТаблицыДляДальнейшегоПеревода") и ДанныеПеревода.ФормированиеТаблицыДляДальнейшегоПеревода Тогда
					//надо взять значение параметра из текста перевода, если он там есть
					//значит берём значение из строки, которая идёт после %1
					Значение = "";
					Для Ккк = 1 По МассивСтрокЗначениеПараметраПеревод.Количество()-1 Цикл
						Значение = Значение + МассивСтрокЗначениеПараметраПеревод[Ккк] + " ";
					КонецЦикла;	
					Значение = Лев(Значение,СтрДлина(Значение)-1);//убрали лишний пробел
				Иначе	
					//значит это происходит перевод реальной фичи - и надо брать параметры из русского
					Значение = ПараметрРусский.Значение.Значение;
				КонецЕсли;	 
			КонецЕсли;	 
			
			ПредставлениеПараметра = ПолучитьПредставлениеПараметраПриПереводе(Значение,Тип);
			
		Иначе	
			ПредставлениеПараметра = ПолучитьПредставлениеПараметраПриПереводе(ЗначениеПараметраРусский,Тип);
		КонецЕсли;	 
		

		МассивПодстрок[Ид] = ПредставлениеПараметра;
	КонецЦикла;		
	
	
	Ид = -1;
	Для Каждого Элем Из МассивПодстрок Цикл
		Ид = Ид + 1;
		МассивПодстрок[Ид] = СтрЗаменить(МассивПодстрок[Ид],"|||ЗаменаПробела|||"," ");
	КонецЦикла;	
	
	
	
	
	Стр = "";
	Для Каждого Элем Из МассивПодстрок Цикл
		Стр = Стр + Элем + " ";
	КонецЦикла;	
	
	Возврат Лев(Стр,СтрДлина(Стр)-1);
КонецФункции	

Функция ПеревестиТекстПоТаблицеПеревода(ДанныеПеревода)
	ТекстДляПеревода = ДанныеПеревода.ТекстДляПеревода;
	ТаблицаПеревода  = ДанныеПеревода.ТаблицаПеревода;
	
	МассивСтрокПеревод = Новый Массив;
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(ТекстДляПеревода,Символы.ПС);
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		СтрокаОригинал = МассивСтрок[Ккк];
		Стр            = СокрЛП(МассивСтрок[Ккк]);
		ПрефиксСтроки  = Лев(СтрокаОригинал,Найти(СтрокаОригинал,Стр)-1);
		
		Если Стр = "" Тогда
			МассивСтрокПеревод.Добавить(СтрокаОригинал);
			Продолжить;
		ИначеЕсли Лев(Стр,1) = "@" Тогда
			МассивСтрокПеревод.Добавить(СтрокаОригинал);
			Продолжить;
		ИначеЕсли Лев(Стр,9) = "#language" Тогда
			МассивСтрокПеревод.Добавить("#language: " + ДанныеПеревода.ЯзыкПеревода);
			Продолжить;
		ИначеЕсли Лев(Стр,1) = "#" Тогда
			МассивСтрокПеревод.Добавить(СтрокаОригинал);
			Продолжить;
		ИначеЕсли Лев(Стр,2) = "//" Тогда
			МассивСтрокПеревод.Добавить(СтрокаОригинал);
			Продолжить;
		КонецЕсли;	 
		
			
		
		ТекущийЯзыкФичаФайла  = "ru";
		ОписаниеШагаРусский   = ПолучитьОписаниеШагаПоСтроке(Стр);
		StepDefinitionРусский = ОписаниеШагаРусский.StepDefinition;
		
		СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(StepDefinitionРусский,"StepDefinitionРусский");
		Если СтрокаТаблицаПеревода <> Неопределено и СтрокаТаблицаПеревода.StepDefinitionРусский <> "_()" Тогда
			
			Если СтрокаТаблицаПеревода.ОригиналРусскийОписание = "Специальный текст" Тогда
				МассивСтрокПеревод.Добавить(СтрокаТаблицаПеревода.ТекстПереводаШаг);
				Продолжить;
			КонецЕсли;	 
			
			Если СтрокаТаблицаПеревода.ОригиналРусскийОписание = "Категория шагов" Тогда
				МассивСтрокПеревод.Добавить(СтрокаТаблицаПеревода.ТекстПереводаШаг);
				Продолжить;
			КонецЕсли;	 
			
			Если СтрокаТаблицаПеревода.КлючевоеСлово = "scenario" Тогда
				//ищем прямой перевод
				СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(НРег(Стр),"ОригиналРусскийШагНРег");
				Если СтрокаТаблицаПеревода <> Неопределено Тогда
					МассивСтрокПеревод.Добавить(ПрефиксСтроки + СтрокаТаблицаПеревода.ТекстПереводаШаг);
					Продолжить;
				КонецЕсли;	 
			КонецЕсли;	  
			
			
			
			Попытка
				СтрокаСПравильнымиПараметрами = ВернутьВСтрокуПараметры(
				   СтрокаТаблицаПеревода.ОбработаннаяСтрокаПараметровПеревод,ДанныеПеревода,
				   ОписаниеШагаРусский.ДанныеОбработкиПараметров,СтрокаТаблицаПеревода.ДанныеОбработкиПараметровПеревод);
			Исключение
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не смог подставить в строку параметры: <%1>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаТаблицаПеревода.ОбработаннаяСтрокаПараметровПеревод);    
				ТекстСообщения = ТекстСообщения + " " + ОписаниеОшибки();
				   
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			
			   
			   
			ТаблицаКлючевыхСловПеревод = ДанныеПеревода.КлючевыеСловаПеревод.ТаблицаКлючевыхСлов;
			КлючевоеСлово = "";
			СтрокаТаблицаКлючевыхСлов = ТаблицаКлючевыхСловПеревод.Найти(СтрокаТаблицаПеревода.КлючевоеСлово,"Тип");
			Если СтрокаТаблицаКлючевыхСлов = Неопределено Тогда
				СтрокаТаблицаКлючевыхСлов = ТаблицаКлючевыхСловПеревод.Найти("and","Тип");
			КонецЕсли;	 
			
			Если СтрокаТаблицаКлючевыхСлов = Неопределено Тогда
				ТекстСообщения = ПолучитьТекстСообщенияПользователю("Не найдено ключевое слово <%1>  для языка <%2>");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1",СтрокаТаблицаПеревода.КлючевоеСлово);
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%2",ДанныеПеревода.ЯзыкПеревода);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	
			
			
			СтрокаПеревода = ПрефиксСтроки + СделатьПервуюБуквуЗаглавной(СтрокаТаблицаКлючевыхСлов.Слово) + " " + СтрокаСПравильнымиПараметрами;
			//СтрокаПеревода = СтрЗаменить(СтрокаПеревода,"_","-");
			МассивСтрокПеревод.Добавить(СтрокаПеревода);
				 
			Продолжить;
		КонецЕсли;	 
		
		//ищем прямой перевод
		СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(НРег(Стр),"ОригиналРусскийШагНРег");
		Если СтрокаТаблицаПеревода <> Неопределено Тогда
			МассивСтрокПеревод.Добавить(ПрефиксСтроки + СтрокаТаблицаПеревода.ТекстПереводаШаг);
			Продолжить;
		КонецЕсли;	 
		
		
		СтрокаДляПеревода = СтрокаОригинал;
		Если Лев(СокрЛП(СтрокаДляПеревода),1) <> "|" Тогда
			Если Лев(СокрЛП(СтрокаДляПеревода),3) <> "!!!" Тогда
				СтрокаДляПеревода = "!!!" + СтрокаДляПеревода;
			КонецЕсли;	 
		КонецЕсли;	
		МассивСтрокПеревод.Добавить(СтрокаДляПеревода);
	КонецЦикла;	
	
	
	
	Стр = "";
	Для Каждого Элем Из МассивСтрокПеревод Цикл
		Стр = Стр + Элем + Символы.ПС;
	КонецЦикла;	
	
	Возврат Стр;
КонецФункции	

Функция СделатьПереводТекстаGherkin(ДанныеПеревода) Экспорт
	
	ДанныеПеревода.Вставить("КлючевыеСловаРусский",СоответствиеТаблицПереводов["ru"]);
	ДанныеПеревода.Вставить("КлючевыеСловаПеревод",СоответствиеТаблицПереводов[ДанныеПеревода.ЯзыкПеревода]);
	
	ЯзыкКеш = ДанныеПеревода.КешДанныеПеревода.Язык;
	
	Если ДанныеПеревода.КешДанныеПеревода.ТаблицаПеревода = Неопределено или ЯзыкКеш <> ДанныеПеревода.ЯзыкПеревода Тогда
		ТаблицаПеревода = СоздатьТаблицаПеревода();
		
		ДанныеПеревода.Вставить("ТаблицаПеревода",ТаблицаПеревода);
		ПрочитатьФайлПеревода(ДанныеПеревода);
		
		ПолучитьСнипетыДляТаблицыПеревода(ДанныеПеревода);
	Иначе	
		Если ТипЗнч(ДанныеПеревода.КешДанныеПеревода.ТаблицаПеревода) = Тип("Строка") Тогда
			ДанныеПеревода.Вставить("ТаблицаПеревода",ЗначениеИзСтрокиВнутр(ДанныеПеревода.КешДанныеПеревода.ТаблицаПеревода));
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	Перевод = ПеревестиТекстПоТаблицеПеревода(ДанныеПеревода);
	ДанныеПеревода.Вставить("Перевод",Перевод);
	
	ДанныеПеревода.Вставить("КлючевыеСловаРусский",Неопределено);
	ДанныеПеревода.Вставить("КлючевыеСловаПеревод",Неопределено);
КонецФункции	

Функция ПолучитьПереводТекстаGherkin(ДанныеПеревода) Экспорт
	ДанныеПеревода.Вставить("ТабДок",Неопределено);
	
	ТаблицаПеревода = СоздатьТаблицаПеревода();
	
	
	Для Каждого СтрокаТаблицаДляПереводаИзвестныхШагов Из ДанныеПеревода.ТаблицаДляПереводаИзвестныхШагов Цикл
		СтрокаТаблицаПеревода                        = ТаблицаПеревода.Добавить();
		СтрокаТаблицаПеревода.ОригиналРусскийШаг     = СтрокаТаблицаДляПереводаИзвестныхШагов.ОригиналРусскийШаг;
		СтрокаТаблицаПеревода.ОригиналРусскийШагПредставлениеДляПеревода = СтрокаТаблицаДляПереводаИзвестныхШагов.ОригиналРусскийШаг;
		СтрокаТаблицаПеревода.ОригиналРусскийШагНРег = НРег(СтрокаТаблицаДляПереводаИзвестныхШагов.ОригиналРусскийШаг);
		
		СтрокаТаблицаПеревода.ОригиналРусскийОписание = СтрокаТаблицаДляПереводаИзвестныхШагов.ОригиналРусскийОписаниеШага;
		
		ОписаниеШагаРусский                          = ПолучитьОписаниеШагаПоСтроке(ПолучитьПервуюСтрокуИзМногострочной(СтрокаТаблицаПеревода.ОригиналРусскийШаг));
		СтрокаТаблицаПеревода.StepDefinitionРусский  = ОписаниеШагаРусский.StepDefinition;
	КонецЦикла;	
	
	
	ДанныеПеревода.Вставить("КлючевыеСловаРусский",СоответствиеТаблицПереводов["ru"]);
	ДанныеПеревода.Вставить("КлючевыеСловаПеревод",СоответствиеТаблицПереводов[ДанныеПеревода.ЯзыкПеревода]);
	
	ДанныеПеревода.Вставить("ТаблицаПеревода",ТаблицаПеревода);
	ПрочитатьФайлПеревода(ДанныеПеревода);
	
	ПолучитьСнипетыДляТаблицыПеревода(ДанныеПеревода);
	
	//проверим ТаблицаПеревода на дубли
	ПроверитьТаблицаПереводаНаДубли(ТаблицаПеревода);
	
	Для Каждого СтрокаТаблицаПеревода Из ТаблицаПеревода Цикл
		Если СтрокаТаблицаПеревода.НомерСтрокиВФайлеПеревода = 0 Тогда
			СтрокаТаблицаПеревода.НомерСтрокиВФайлеПеревода = 10000000;
		КонецЕсли;
		
		Если СтрокаТаблицаПеревода.ОригиналРусскийОписание = "Категория шагов" Тогда
			СтрокаТаблицаПеревода.НомерСтрокиВФайлеПеревода = -2;
		ИначеЕсли СтрокаТаблицаПеревода.ОригиналРусскийОписание = "Специальный текст" Тогда
			СтрокаТаблицаПеревода.НомерСтрокиВФайлеПеревода = -3;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТаблицаПеревода.ТекстПереводаШаг) Тогда
			//выводим наверх то что не переведено.
			СтрокаТаблицаПеревода.НомерСтрокиВФайлеПеревода = -1;
		КонецЕсли;	 
	КонецЦикла;	
	
	ТаблицаПеревода.Сортировать("НомерСтрокиВФайлеПеревода,ОригиналРусскийШаг");
	
	ТабДок = ДанныеПеревода.МакетШаблонПеревода;
	Сч = 1;
	Для Каждого СтрокаТаблицаПеревода Из ТаблицаПеревода Цикл
		Сч = Сч + 1;
		ТабДок.Область(Сч,1,Сч,1).Текст = СтрокаТаблицаПеревода.ОригиналРусскийШагПредставлениеДляПеревода;
		ТабДок.Область(Сч,2,Сч,2).Текст = СтрокаТаблицаПеревода.ОригиналРусскийОписание;
		ТабДок.Область(Сч,3,Сч,3).Текст = СтрокаТаблицаПеревода.ТекстПереводаШаг;
		ТабДок.Область(Сч,4,Сч,4).Текст = СтрокаТаблицаПеревода.ТекстПереводаОписание;
	КонецЦикла;	
	
	ДанныеПеревода.Вставить("ТабДок",ТабДок);
КонецФункции	

Функция ПолучитьТаблицуПеревода(СтруктураПараметров)
	ТаблицаПеревода = СоздатьТаблицаПеревода();
	
	Если Не СтруктураПараметров.Свойство("ДвоичныеДанныеФайлПеревода") Тогда
		Возврат ТаблицаПеревода;
	КонецЕсли;	 
	
	
	ДанныеПеревода = Новый Структура;
	
	ТекущийЯзык = "ru";
	
	ДанныеПеревода.Вставить("КлючевыеСловаРусский",СоответствиеТаблицПереводов["ru"]);
	Если СтруктураПараметров.Свойство("ЭтоЗагрузкаФич") и СтруктураПараметров.ЭтоЗагрузкаФич Тогда
		ТекущийЯзык = ТекущийЯзыкФичаФайла;
	Иначе	
		ТекущийЯзык = СтруктураПараметров.ЯзыкГенератораGherkin;
	КонецЕсли;	 
	ДанныеПеревода.Вставить("КлючевыеСловаПеревод",СоответствиеТаблицПереводов[ТекущийЯзык]);
	
	
	ДанныеПеревода.Вставить("ТаблицаПеревода",ТаблицаПеревода);
	ДанныеПеревода.Вставить("ДвоичныеДанныеФайлПеревода",СтруктураПараметров.ДвоичныеДанныеФайлПеревода);
	
	ДанныеПеревода.Вставить("ЯзыкПеревода",ТекущийЯзык);
	ПрочитатьФайлПеревода(ДанныеПеревода);
	ПолучитьСнипетыДляТаблицыПеревода(ДанныеПеревода);
	Возврат ТаблицаПеревода;
КонецФункции	

Функция УниверсальноеПолноеИмяФайла(Знач ПолноеИмяФайлаИлиФайл, ВНРегистр = Ложь)
	ПолноеИмяФайла = ПолноеИмяФайлаИлиФайл;
	Если ТипЗнч(ПолноеИмяФайлаИлиФайл ) = Тип("Файл") Тогда
		ПолноеИмяФайла = ПолноеИмяФайлаИлиФайл.ПолноеИмя;
	КонецЕсли;

	УниверсальноеПолноеИмя = СтрЗаменить(ПолноеИмяФайла, "\", "/");
	Если ВНРегистр Тогда
		УниверсальноеПолноеИмя = НРег(УниверсальноеПолноеИмя);
	КонецЕсли;

	Возврат УниверсальноеПолноеИмя;
КонецФункции

#КонецОбласти

//#КонецОбласти ПроцедурыИФункции


#Область ИнициализацияПеременных

ЭтоУФ = Ложь;

СоответствиеТаблицПереводов = Новый Соответствие;
СоответствиеТаблицПереводов.Вставить("ru", СоздатьТаблицуКлючевыхСлов_ru());
СоответствиеТаблицПереводов.Вставить("uk", СоздатьТаблицуКлючевыхСлов_uk());
СоответствиеТаблицПереводов.Вставить("en", СоздатьТаблицуКлючевыхСлов_en());
СоответствиеТаблицПереводов.Вставить("ro", СоздатьТаблицуКлючевыхСлов_ro());
СоответствиеТаблицПереводов.Вставить("de", СоздатьТаблицуКлючевыхСлов_de());
СоответствиеТаблицПереводов.Вставить("lv", СоздатьТаблицуКлючевыхСлов_lv());
СоответствиеТаблицПереводов.Вставить("it", СоздатьТаблицуКлючевыхСлов_it());
СоответствиеТаблицПереводов.Вставить("pl", СоздатьТаблицуКлючевыхСлов_pl());
СоответствиеТаблицПереводов.Вставить("vi", СоздатьТаблицуКлючевыхСлов_vi());



ТекущийЯзыкФичаФайла           = "ru";
ПредставлениеВертЧертыВТабДок  = "__&ВертЧерта__";
ПредставлениеАпостроф          = "__&Апостроф__";
ПредставлениеКавычка           = "__&Кавычка__";
ПредставлениеДвойнойСлеш       = "__&ДвойнойСлеш__";
ПредставлениеВертикальнаяЧерта = "__&ВертикальнаяЧерта__";
ПредставлениеТире              = "__&Тире__";

ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок = Ложь;
СистемнаяИнформация = Новый СистемнаяИнформация;
Если ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения,"8.3.6.1977") Тогда
	Если РежимСовестимостиПозволяетИспользоватьНовыеСтроковыеФункции() Тогда
		ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок = Истина;
	КонецЕсли;	 
КонецЕсли;	 


ТаблицаКешПервыхСлов = Новый ТаблицаЗначений;
ТаблицаКешПервыхСлов.Колонки.Добавить("ПерваяЧастьСтроки");
ТаблицаКешПервыхСлов.Колонки.Добавить("Слово");
ТаблицаКешПервыхСлов.Колонки.Добавить("Позиция");
ТаблицаКешПервыхСлов.Колонки.Добавить("Тип");

ТаблицаКешПервыхСлов.Индексы.Добавить("ПерваяЧастьСтроки");

#КонецОбласти

//#КонецОбласти ИнициализацияПеременных


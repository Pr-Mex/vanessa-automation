&НаКлиенте
Перем КонтекстЯдра;

// { Plugin interface
&НаКлиенте
Функция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт
	Возврат ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов);
КонецФункции

&НаСервере
Функция ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов)
	Возврат ЭтотОбъектНаСервере().ОписаниеПлагина(ВозможныеТипыПлагинов);
КонецФункции

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлКТекущемуШагу(ПутьКФайлу, Знач ТипФайла = "") Экспорт
	
	Файлы = СписокФайлов();
	ДвДанные = Новый ДвоичныеДанные(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ПутьКФайлу));
	
	СтруктураФайла = Новый Структура("ДвоичныеДанные", ДвДанные);
	СтруктураФайла.Вставить("ИмяФайла", ПутьКФайлу);
	
	Если ПустаяСтрока(ТипФайла) Тогда
		ФайлОбъект = Новый Файл(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ПутьКФайлу));
		ТипФайла = ТипФайла(ФайлОбъект.Расширение);
	КонецЕсли;
	
	СтруктураФайла.Вставить("ТипФайла", ТипФайла);
	
	Файлы.Добавить(СтруктураФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДвоичныеДанныеКТекущемуШагу(ДвоичныеДанные, Знач ИмяФайла, Знач ТипФайла = "") Экспорт
	
	Файлы = СписокФайлов();
	
	СтруктураФайла = Новый Структура("ДвоичныеДанные", ДвоичныеДанные);
	СтруктураФайла.Вставить("ИмяФайла", ИмяФайла);
	
	Если ПустаяСтрока(ТипФайла) Тогда
		ФайлОбъект = Новый Файл(ИмяФайла);
		ТипФайла = ТипФайла(ФайлОбъект.Расширение);
	КонецЕсли;
	
	СтруктураФайла.Вставить("ТипФайла", ТипФайла);
	
	Файлы.Добавить(СтруктураФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьJSONКТекущемуШагу(ТекстJSON, Наименование) Экспорт
    
    ДвоичныеДанные = ПолучитьДвоичныеДанные(ТекстJSON);
    
    ДобавитьДвоичныеДанныеКТекущемуШагу(ДвоичныеДанные, Наименование, "application/json");
     
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТекстКТекущемуШагу(Текст, Наименование) Экспорт
    
    ДвоичныеДанные = ПолучитьДвоичныеДанные(Текст);
    
    ДобавитьДвоичныеДанныеКТекущемуШагу(ДвоичныеДанные, Наименование, "text/plain");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьXMLКТекущемуШагу(ТекстXML, Наименование) Экспорт
    
    ДвоичныеДанные = ПолучитьДвоичныеДанные(ТекстXML);
    
    ДобавитьДвоичныеДанныеКТекущемуШагу(ДвоичныеДанные, Наименование, "application/xml");

КонецПроцедуры

// } Plugin interface

// { Helpers

&НаКлиенте
Функция СписокФайлов()
	
	СостояниеVanessaBehvior = КонтекстЯдра.ПолучитьСостояниеVanessaBehavior();
	
	РезультатПрохожденияТестовВСценарии = СостояниеVanessaBehvior["ТекущийСценарий"].РезультатПрохожденияТестовСценария;
	РезультатТекущегоШага = РезультатПрохожденияТестовВСценарии.РезультатПрохожденияТестовШагов[РезультатПрохожденияТестовВСценарии.РезультатПрохожденияТестовШагов.ВГраница()];
	
	Если НЕ РезультатТекущегоШага.Свойство("СписокФайлов") Тогда
		РезультатТекущегоШага.Вставить("СписокФайлов", Новый СписокЗначений);
	КонецЕсли;
	
	Возврат РезультатТекущегоШага.СписокФайлов;
	
КонецФункции

&НаКлиенте
Функция ТипФайла(Расширение = "");
	
	
	Результат = "text/plain";
	
	
	СоответствиеТипов = Новый Соответствие;
	СоответствиеТипов.Вставить(".xml", "application/xml");
	СоответствиеТипов.Вставить(".json", "application/json");
	СоответствиеТипов.Вставить(".txt", "text/plain");
	СоответствиеТипов.Вставить(".html", "text/html");
	СоответствиеТипов.Вставить(".csv", "text/csv");
	СоответствиеТипов.Вставить(".webm", "video/webm");
	
	Если СоответствиеТипов.Получить(Расширение) <> Неопределено Тогда
		Результат = СоответствиеТипов.Получить(Расширение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДвоичныеДанные(Текст)
    
    ПотокВПамяти = Новый ПотокВПамяти();
    
    Запись = Новый ЗаписьДанных(ПотокВПамяти);
    Запись.ЗаписатьСтроку(Текст);
    Запись.Закрыть(); 
    
    ДвоичныеДанные = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные(); 

    Возврат ДвоичныеДанные;
    
КонецФункции

&НаСервере
Функция ЭтотОбъектНаСервере()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции
// } Helpers
